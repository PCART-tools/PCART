
----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/__init__.py----------------------------------------
A:pandas.__init__.module->str(e).replace('cannot import name ', '')
A:pandas.__init__.v->get_versions()
A:pandas.__init__.__version__->get_versions().get('closest-tag', v['version'])
A:pandas.__init__.__git_version__->get_versions().get('full-revisionid')
A:pandas.__init__.np->__numpy()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/testing.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/_version.py----------------------------------------
pandas._version.get_versions()
pandas.get_versions()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/_testing.py----------------------------------------
A:pandas._testing.lzma->_import_lzma()
A:pandas._testing.testing_mode->os.environ.get('PANDAS_TESTING_MODE', 'None')
A:pandas._testing.obj->reader(LocalPath(path))
A:pandas._testing.f->tempfile.TemporaryFile(suffix=filename)
A:pandas._testing.zip_file->zipfile.ZipFile(path)
A:pandas._testing.zip_names->zipfile.ZipFile(path).namelist()
A:pandas._testing.compress_method->_get_lzma_file(lzma)
A:pandas._testing.RANDS_CHARS->numpy.array(list(string.ascii_letters + string.digits), dtype=(np.str_, 1))
A:pandas._testing.RANDU_CHARS->numpy.array(list(''.join(map(chr, range(1488, 1488 + 26))) + string.digits), dtype=(np.unicode_, 1))
A:pandas._testing.retval->numpy.random.choice(RANDU_CHARS, size=nchars * np.prod(size)).view((np.unicode_, nchars)).reshape(size)
A:pandas._testing.(fd, filename)->tempfile.mkstemp(suffix=filename)
A:pandas._testing.directory_name->tempfile.mkdtemp(suffix='')
A:pandas._testing.saved_environ->dict(os.environ)
A:pandas._testing.filled->take_1d(unique._values, level_codes, fill_value=unique._na_value)
A:pandas._testing.values->unique._shallow_copy(filled, name=index.names[level])
A:pandas._testing.left->repr(left)
A:pandas._testing.right->repr(right)
A:pandas._testing.llevel->_get_ilevel_values(left, level)
A:pandas._testing.rlevel->_get_ilevel_values(right, level)
A:pandas._testing.left_attr->getattr(left, attr)
A:pandas._testing.right_attr->getattr(right, attr)
A:pandas._testing.result->result.all().all()
A:pandas._testing.left_base->_get_base(left)
A:pandas._testing.right_base->_get_base(right)
A:pandas._testing.left_na->numpy.asarray(left.isna())
A:pandas._testing.right_na->numpy.asarray(right.isna())
A:pandas._testing.left_valid->numpy.asarray(left[~left_na].astype(object))
A:pandas._testing.right_valid->numpy.asarray(right[~right_na].astype(object))
A:pandas._testing.rblocks->repr(right)._to_dict_of_blocks()
A:pandas._testing.lblocks->repr(left)._to_dict_of_blocks()
A:pandas._testing.expected->to_array(expected)
A:pandas._testing.left_index->left_index.to_int_index().to_block_index().to_int_index().to_block_index()
A:pandas._testing.right_index->right_index.to_int_index().to_block_index().to_int_index().to_block_index()
A:pandas._testing.x->numpy.linspace(0, 100, num=k + 1)
A:pandas._testing.dt->datetime(2000, 1, 1)
A:pandas._testing.dr->pandas.period_range(start=dt, periods=k, freq='B', name=name, **kwargs)
A:pandas._testing.index->makeCustomIndex(nrows, nlevels=r_idx_nlevels, prefix='R', names=r_idx_names, ndupe_l=r_ndupe_l, idx_type=r_idx_type)
A:pandas._testing.n->len(index)
A:pandas._testing.state->numpy.random.RandomState(seed)
A:pandas._testing.df->makeDataFrame()
A:pandas._testing.data->getPeriodData(nper)
A:pandas._testing.idx_func->dict(i=makeIntIndex, f=makeFloatIndex, s=makeStringIndex, u=makeUnicodeIndex, dt=makeDateIndex, td=makeTimedeltaIndex, p=makePeriodIndex).get(idx_type)
A:pandas._testing.idx->idx_func(nentries)
A:pandas._testing.numeric_tuple->re.sub('[^\\d_]_?', '', x).split('_')
A:pandas._testing.cnt->Counter()
A:pandas._testing.tuples->list(zip(*tuples))
A:pandas._testing.columns->makeCustomIndex(ncols, nlevels=c_idx_nlevels, prefix='C', names=c_idx_names, ndupe_l=c_ndupe_l, idx_type=c_idx_type)
A:pandas._testing.random_state->numpy.random.RandomState(random_state)
A:pandas._testing.size->int(np.round((1 - density) * nrows * ncols))
A:pandas._testing.extra_size->min(size + min_rows, fac * size)
A:pandas._testing.ind->_gen_unique_rand(random_state, extra_size)
A:pandas._testing.j->numpy.floor(ind * 1.0 / nrows).astype(int)
A:pandas._testing.i->(ind - j * nrows).astype(int)
A:pandas._testing.(i, j)->_create_missing_idx(*df.shape, density=density, random_state=random_state)
A:pandas._testing.error_classes->_get_default_network_errors()
A:pandas._testing.errno->getattr(err.reason, 'errno', None)
A:pandas._testing.e_str->str(err)
A:pandas._testing.caller->getframeinfo(stack()[2][0])
A:pandas._testing.self.start_state->numpy.random.get_state()
A:pandas._testing.updated_kwargs->update_kwargs(i)
A:pandas._testing.thread->threading.Thread(target=func, args=args, kwargs=updated_kwargs)
A:pandas._testing.orig_tz->os.environ.get('TZ')
A:pandas._testing.nona->numpy.linspace(0, 100, num=k + 1).dropna()
pandas._testing.RNGContext(self,seed)
pandas._testing.RNGContext.__enter__(self)
pandas._testing.RNGContext.__exit__(self,exc_type,exc_value,traceback)
pandas._testing.RNGContext.__init__(self,seed)
pandas._testing.SubclassedCategorical(Categorical)
pandas._testing.SubclassedCategorical._constructor(self)
pandas._testing.SubclassedDataFrame(DataFrame)
pandas._testing.SubclassedDataFrame._constructor(self)
pandas._testing.SubclassedDataFrame._constructor_sliced(self)
pandas._testing.SubclassedSeries(Series)
pandas._testing.SubclassedSeries._constructor(self)
pandas._testing.SubclassedSeries._constructor_expanddim(self)
pandas._testing._check_isinstance(left,right,cls)
pandas._testing._create_missing_idx(nrows,ncols,density,random_state=None)
pandas._testing._get_default_network_errors()
pandas._testing._make_skipna_wrapper(alternative,skipna_alternative=None)
pandas._testing._make_timeseries(start='2000-01-01',end='2000-12-31',freq='1D',seed=None)
pandas._testing.all_index_generator(k=10)
pandas._testing.all_timeseries_index_generator(k=10)
pandas._testing.assert_almost_equal(left,right,check_dtype:Union[bool,str]='equiv',check_less_precise:Union[bool,int]=False,**kwargs)
pandas._testing.assert_attr_equal(attr,left,right,obj='Attributes')
pandas._testing.assert_categorical_equal(left,right,check_dtype=True,check_category_order=True,obj='Categorical')
pandas._testing.assert_class_equal(left,right,exact:Union[bool,str]=True,obj='Input')
pandas._testing.assert_contains_all(iterable,dic)
pandas._testing.assert_copy(iter1,iter2,**eql_kwargs)
pandas._testing.assert_datetime_array_equal(left,right,obj='DatetimeArray')
pandas._testing.assert_dict_equal(left,right,compare_keys:bool=True)
pandas._testing.assert_dt_array_equal(left,right,obj='DatetimeArray')
pandas._testing.assert_equal(left,right,**kwargs)
pandas._testing.assert_extension_array_equal(left,right,check_dtype=True,check_less_precise=False,check_exact=False)
pandas._testing.assert_frame_equal(left,right,check_dtype=True,check_index_type='equiv',check_column_type='equiv',check_frame_type=True,check_less_precise=False,check_names=True,by_blocks=False,check_exact=False,check_datetimelike_compat=False,check_categorical=True,check_like=False,obj='DataFrame')
pandas._testing.assert_index_equal(left:Index,right:Index,exact:Union[bool,str]='equiv',check_names:bool=True,check_less_precise:Union[bool,int]=False,check_exact:bool=True,check_categorical:bool=True,obj:str='Index')->None
pandas._testing.assert_interval_array_equal(left,right,exact='equiv',obj='IntervalArray')
pandas._testing.assert_is_sorted(seq)
pandas._testing.assert_is_valid_plot_return_object(objs)
pandas._testing.assert_numpy_array_equal(left,right,strict_nan=False,check_dtype=True,err_msg=None,check_same=None,obj='numpyarray')
pandas._testing.assert_period_array_equal(left,right,obj='PeriodArray')
pandas._testing.assert_produces_warning(expected_warning=Warning,filter_level='always',clear=None,check_stacklevel=True,raise_on_extra_warnings=True)
pandas._testing.assert_series_equal(left,right,check_dtype=True,check_index_type='equiv',check_series_type=True,check_less_precise=False,check_names=True,check_exact=False,check_datetimelike_compat=False,check_categorical=True,check_category_order=True,obj='Series')
pandas._testing.assert_sp_array_equal(left,right,check_dtype=True,check_kind=True,check_fill_value=True,consolidate_block_indices=False)
pandas._testing.assert_timedelta_array_equal(left,right,obj='TimedeltaArray')
pandas._testing.box_expected(expected,box_cls,transpose=True)
pandas._testing.can_connect(url,error_classes=None)
pandas._testing.close(fignum=None)
pandas._testing.convert_rows_list_to_csv_str(rows_list:List[str])
pandas._testing.decompress_file(path,compression)
pandas._testing.ensure_clean(filename=None,return_filelike=False)
pandas._testing.ensure_clean_dir()
pandas._testing.ensure_safe_environment_variables()
pandas._testing.equalContents(arr1,arr2)->bool
pandas._testing.getCols(k)
pandas._testing.getMixedTypeDict()
pandas._testing.getPeriodData(nper=None)
pandas._testing.getSeriesData()
pandas._testing.getTimeSeriesData(nper=None,freq='B')
pandas._testing.index_subclass_makers_generator()
pandas._testing.isiterable(obj)
pandas._testing.makeBoolIndex(k=10,name=None)
pandas._testing.makeCategoricalIndex(k=10,n=3,name=None,**kwargs)
pandas._testing.makeCustomDataframe(nrows,ncols,c_idx_names=True,r_idx_names=True,c_idx_nlevels=1,r_idx_nlevels=1,data_gen_f=None,c_ndupe_l=None,r_ndupe_l=None,dtype=None,c_idx_type=None,r_idx_type=None)
pandas._testing.makeCustomIndex(nentries,nlevels,prefix='#',names=False,ndupe_l=None,idx_type=None)
pandas._testing.makeDataFrame()
pandas._testing.makeDateIndex(k=10,freq='B',name=None,**kwargs)
pandas._testing.makeFloatIndex(k=10,name=None)
pandas._testing.makeFloatSeries(name=None)
pandas._testing.makeIntIndex(k=10,name=None)
pandas._testing.makeIntervalIndex(k=10,name=None,**kwargs)
pandas._testing.makeMissingCustomDataframe(nrows,ncols,density=0.9,random_state=None,c_idx_names=True,r_idx_names=True,c_idx_nlevels=1,r_idx_nlevels=1,data_gen_f=None,c_ndupe_l=None,r_ndupe_l=None,dtype=None,c_idx_type=None,r_idx_type=None)
pandas._testing.makeMissingDataframe(density=0.9,random_state=None)
pandas._testing.makeMixedDataFrame()
pandas._testing.makeMultiIndex(k=10,names=None,**kwargs)
pandas._testing.makeObjectSeries(name=None)
pandas._testing.makePeriodFrame(nper=None)
pandas._testing.makePeriodIndex(k=10,name=None,**kwargs)
pandas._testing.makePeriodSeries(nper=None,name=None)
pandas._testing.makeRangeIndex(k=10,name=None,**kwargs)
pandas._testing.makeStringIndex(k=10,name=None)
pandas._testing.makeStringSeries(name=None)
pandas._testing.makeTimeDataFrame(nper=None,freq='B')
pandas._testing.makeTimeSeries(nper=None,freq='B',name=None)
pandas._testing.makeTimedeltaIndex(k=10,freq='D',name=None,**kwargs)
pandas._testing.makeUIntIndex(k=10,name=None)
pandas._testing.makeUnicodeIndex(k=10,name=None)
pandas._testing.network(t,url='http://www.google.com',raise_on_error=_RAISE_NETWORK_ERROR_DEFAULT,check_before_test=False,error_classes=None,skip_errnos=_network_errno_vals,_skip_on_messages=_network_error_messages)
pandas._testing.optional_args(decorator)
pandas._testing.raise_assert_detail(obj,message,left,right,diff=None)
pandas._testing.randbool(size=(),p:float=0.5)
pandas._testing.rands(nchars)
pandas._testing.rands_array(nchars,size,dtype='O')
pandas._testing.randu(nchars)
pandas._testing.randu_array(nchars,size,dtype='O')
pandas._testing.reset_display_options()
pandas._testing.reset_testing_mode()
pandas._testing.round_trip_localpath(writer,reader,path:Optional[str]=None)
pandas._testing.round_trip_pathlib(writer,reader,path:Optional[str]=None)
pandas._testing.round_trip_pickle(obj:Any,path:Optional[FilePathOrBuffer]=None)->FrameOrSeries
pandas._testing.set_testing_mode()
pandas._testing.set_timezone(tz:str)
pandas._testing.test_parallel(num_threads=2,kwargs_list=None)
pandas._testing.to_array(obj)
pandas._testing.use_numexpr(use,min_elements=None)
pandas._testing.with_csv_dialect(name,**kwargs)
pandas._testing.write_to_compressed(compression,path,data,dest='test')


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/conftest.py----------------------------------------
A:pandas.conftest._cython_table->pandas.core.base.SelectionMixin._cython_table.items()
A:pandas.conftest.BASE_PATH->os.path.join(os.path.dirname(__file__), 'tests')
A:pandas.conftest.path->os.path.join(BASE_PATH, *args)
A:pandas.conftest.(ids, _)->zip(*_any_skipna_inferred_dtype)
A:pandas.conftest.values->numpy.array(values, dtype=object)
A:pandas.conftest.cls->getattr(pd.tseries.offsets, name)
pandas.conftest._get_cython_table_params(ndframe,func_names_and_expected)
pandas.conftest.add_imports(doctest_namespace)
pandas.conftest.all_arithmetic_functions(request)
pandas.conftest.all_arithmetic_operators(request)
pandas.conftest.all_boolean_reductions(request)
pandas.conftest.all_compare_operators(request)
pandas.conftest.all_logical_operators(request)
pandas.conftest.all_numeric_reductions(request)
pandas.conftest.any_int_dtype(request)
pandas.conftest.any_nullable_int_dtype(request)
pandas.conftest.any_numpy_dtype(request)
pandas.conftest.any_real_dtype(request)
pandas.conftest.any_skipna_inferred_dtype(request)
pandas.conftest.axis(request)
pandas.conftest.axis_series(request)
pandas.conftest.bytes_dtype(request)
pandas.conftest.closed(request)
pandas.conftest.compare_operators_no_eq_ne(request)
pandas.conftest.complex_dtype(request)
pandas.conftest.compression(request)
pandas.conftest.compression_only(request)
pandas.conftest.configure_tests()
pandas.conftest.cython_table_items(request)
pandas.conftest.datapath(strict_data_files)
pandas.conftest.datetime64_dtype(request)
pandas.conftest.datetime_tz_utc()
pandas.conftest.dict_subclass()
pandas.conftest.dt64_dtype(request)
pandas.conftest.dt_tz_utc()
pandas.conftest.float_dtype(request)
pandas.conftest.float_frame()
pandas.conftest.index_or_series(request)
pandas.conftest.ip()
pandas.conftest.iris(datapath)
pandas.conftest.join_type(request)
pandas.conftest.non_mapping_dict_subclass()
pandas.conftest.nselect_method(request)
pandas.conftest.nulls_fixture(request)
pandas.conftest.object_dtype(request)
pandas.conftest.observed(request)
pandas.conftest.ordered_fixture(request)
pandas.conftest.other_closed(request)
pandas.conftest.pytest_addoption(parser)
pandas.conftest.pytest_runtest_setup(item)
pandas.conftest.sint_dtype(request)
pandas.conftest.spmatrix(request)
pandas.conftest.strict_data_files(pytestconfig)
pandas.conftest.string_dtype(request)
pandas.conftest.tick_classes(request)
pandas.conftest.timedelta64_dtype(request)
pandas.conftest.tz_aware_fixture(request)
pandas.conftest.tz_naive_fixture(request)
pandas.conftest.uint_dtype(request)
pandas.conftest.unique_nulls_fixture(request)
pandas.conftest.utc_fixture(request)
pandas.conftest.writable(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/_typing.py----------------------------------------
A:pandas._typing.AnyArrayLike->TypeVar('AnyArrayLike', 'ExtensionArray', 'Index', 'Series', np.ndarray)
A:pandas._typing.ArrayLike->TypeVar('ArrayLike', 'ExtensionArray', np.ndarray)
A:pandas._typing.DatetimeLikeScalar->TypeVar('DatetimeLikeScalar', 'Period', 'Timestamp', 'Timedelta')
A:pandas._typing.FrameOrSeries->TypeVar('FrameOrSeries', bound='NDFrame')
A:pandas._typing.T->TypeVar('T')


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/compat/__init__.py----------------------------------------
pandas.compat.__init__._get_lzma_file(lzma)
pandas.compat.__init__._import_lzma()
pandas.compat.__init__.is_platform_32bit()->bool
pandas.compat.__init__.is_platform_linux()->bool
pandas.compat.__init__.is_platform_little_endian()->bool
pandas.compat.__init__.is_platform_mac()->bool
pandas.compat.__init__.is_platform_windows()->bool
pandas.compat.__init__.set_function_name(f,name,cls)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/compat/_optional.py----------------------------------------
A:pandas.compat._optional.version->_get_version(module)
A:pandas.compat._optional.module->importlib.import_module(name)
A:pandas.compat._optional.minimum_version->VERSIONS.get(name)
pandas.compat._optional._get_version(module:types.ModuleType)->str
pandas.compat._optional.import_optional_dependency(name:str,extra:str='',raise_on_missing:bool=True,on_version:str='raise')


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/compat/pickle_compat.py----------------------------------------
A:pandas.compat.pickle_compat.args->self.stack.pop()
A:pandas.compat.pickle_compat.stack[-1]->object.__new__(cls)
A:pandas.compat.pickle_compat.(module, name)->_class_locations_map.get(key, key)
A:pandas.compat.pickle_compat.Unpickler.dispatch->copy.copy(Unpickler.dispatch)
A:pandas.compat.pickle_compat.obj->self.stack.pop().__new__(cls, *args, **kwargs)
A:pandas.compat.pickle_compat.kwargs->self.stack.pop()
A:pandas.compat.pickle_compat.cls->self.stack.pop()
A:pandas.compat.pickle_compat.up->Unpickler(fh)
pandas.compat.pickle_compat.Unpickler(pkl._Unpickler)
pandas.compat.pickle_compat.Unpickler.find_class(self,module,name)
pandas.compat.pickle_compat._LoadSparseFrame(cls)
pandas.compat.pickle_compat._LoadSparseFrame.__new__(cls)
pandas.compat.pickle_compat._LoadSparseSeries(cls)
pandas.compat.pickle_compat._LoadSparseSeries.__new__(cls)
pandas.compat.pickle_compat.load(fh,encoding:Optional[str]=None,is_verbose:bool=False)
pandas.compat.pickle_compat.load_newobj(self)
pandas.compat.pickle_compat.load_newobj_ex(self)
pandas.compat.pickle_compat.load_reduce(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/compat/chainmap.py----------------------------------------
A:pandas.compat.chainmap._KT->TypeVar('_KT')
A:pandas.compat.chainmap._VT->TypeVar('_VT')
A:pandas.compat.chainmap.mutable_mapping->cast(MutableMapping[_KT, _VT], mapping)
pandas.compat.chainmap.DeepChainMap(ChainMap[_KT,_VT])
pandas.compat.chainmap.DeepChainMap.__delitem__(self,key:_KT)->None
pandas.compat.chainmap.DeepChainMap.__setitem__(self,key:_KT,value:_VT)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/compat/numpy/__init__.py----------------------------------------
A:pandas.compat.numpy.__init__._nlv->LooseVersion(_np_version)
A:pandas.compat.numpy.__init__._tz_regex->re.compile('[+-]0000$')
A:pandas.compat.numpy.__init__.s->tz_replacer(s)
A:pandas.compat.numpy.__init__.arr->tz_replacer(arr)
pandas.compat.numpy.__init__.np_array_datetime64_compat(arr,*args,**kwargs)
pandas.compat.numpy.__init__.np_array_dt64_compat(arr,*args,**kwargs)
pandas.compat.numpy.__init__.np_datetime64_compat(s,*args,**kwargs)
pandas.compat.numpy.__init__.np_dt64_compat(s,*args,**kwargs)
pandas.compat.numpy.__init__.tz_replacer(s)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/compat/numpy/function.py----------------------------------------
A:pandas.compat.numpy.function.ARGMINMAX_DEFAULTS->dict(out=None)
A:pandas.compat.numpy.function.validate_argmin->CompatValidator(ARGMINMAX_DEFAULTS, fname='argmin', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.validate_argmax->CompatValidator(ARGMINMAX_DEFAULTS, fname='argmax', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.(skipna, args)->process_skipna(skipna, args)
A:pandas.compat.numpy.function.validate_argsort->CompatValidator(ARGSORT_DEFAULTS, fname='argsort', max_fname_arg_count=0, method='both')
A:pandas.compat.numpy.function.validate_argsort_kind->CompatValidator(ARGSORT_DEFAULTS_KIND, fname='argsort', max_fname_arg_count=0, method='both')
A:pandas.compat.numpy.function.CLIP_DEFAULTS->dict(out=None)
A:pandas.compat.numpy.function.validate_clip->CompatValidator(CLIP_DEFAULTS, fname='clip', method='both', max_fname_arg_count=3)
A:pandas.compat.numpy.function.validate_cum_func->CompatValidator(CUM_FUNC_DEFAULTS, method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.validate_cumsum->CompatValidator(CUM_FUNC_DEFAULTS, fname='cumsum', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.validate_all->CompatValidator(ALLANY_DEFAULTS, fname='all', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.validate_any->CompatValidator(ALLANY_DEFAULTS, fname='any', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.LOGICAL_FUNC_DEFAULTS->dict(out=None, keepdims=False)
A:pandas.compat.numpy.function.validate_logical_func->CompatValidator(LOGICAL_FUNC_DEFAULTS, method='kwargs')
A:pandas.compat.numpy.function.MINMAX_DEFAULTS->dict(axis=None, out=None, keepdims=False)
A:pandas.compat.numpy.function.validate_min->CompatValidator(MINMAX_DEFAULTS, fname='min', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.validate_max->CompatValidator(MINMAX_DEFAULTS, fname='max', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.validate_reshape->CompatValidator(RESHAPE_DEFAULTS, fname='reshape', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.validate_repeat->CompatValidator(REPEAT_DEFAULTS, fname='repeat', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.validate_round->CompatValidator(ROUND_DEFAULTS, fname='round', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.validate_sort->CompatValidator(SORT_DEFAULTS, fname='sort', method='kwargs')
A:pandas.compat.numpy.function.PROD_DEFAULTSSUM_DEFAULTS->STAT_FUNC_DEFAULTS.copy()
A:pandas.compat.numpy.function.MEDIAN_DEFAULTS->STAT_FUNC_DEFAULTS.copy()
A:pandas.compat.numpy.function.validate_stat_func->CompatValidator(STAT_FUNC_DEFAULTS, method='kwargs')
A:pandas.compat.numpy.function.validate_sum->CompatValidator(SUM_DEFAULTS, fname='sum', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.validate_prod->CompatValidator(PROD_DEFAULTS, fname='prod', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.validate_mean->CompatValidator(STAT_FUNC_DEFAULTS, fname='mean', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.validate_median->CompatValidator(MEDIAN_DEFAULTS, fname='median', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.validate_stat_ddof_func->CompatValidator(STAT_DDOF_FUNC_DEFAULTS, method='kwargs')
A:pandas.compat.numpy.function.validate_take->CompatValidator(TAKE_DEFAULTS, fname='take', method='kwargs')
A:pandas.compat.numpy.function.TRANSPOSE_DEFAULTS->dict(axes=None)
A:pandas.compat.numpy.function.validate_transpose->CompatValidator(TRANSPOSE_DEFAULTS, fname='transpose', method='both', max_fname_arg_count=0)
pandas.compat.numpy.function.CompatValidator(self,defaults,fname=None,method=None,max_fname_arg_count=None)
pandas.compat.numpy.function.CompatValidator.__init__(self,defaults,fname=None,method=None,max_fname_arg_count=None)
pandas.compat.numpy.function.process_skipna(skipna,args)
pandas.compat.numpy.function.validate_argmax_with_skipna(skipna,args,kwargs)
pandas.compat.numpy.function.validate_argmin_with_skipna(skipna,args,kwargs)
pandas.compat.numpy.function.validate_argsort_with_ascending(ascending,args,kwargs)
pandas.compat.numpy.function.validate_clip_with_axis(axis,args,kwargs)
pandas.compat.numpy.function.validate_cum_func_with_skipna(skipna,args,kwargs,name)
pandas.compat.numpy.function.validate_expanding_func(name,args,kwargs)
pandas.compat.numpy.function.validate_groupby_func(name,args,kwargs,allowed=None)
pandas.compat.numpy.function.validate_minmax_axis(axis)
pandas.compat.numpy.function.validate_resampler_func(method,args,kwargs)
pandas.compat.numpy.function.validate_rolling_func(name,args,kwargs)
pandas.compat.numpy.function.validate_take_with_convert(convert,args,kwargs)
pandas.compat.numpy.function.validate_window_func(name,args,kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/frame.py----------------------------------------
A:pandas.core.frame._shared_doc_kwargs->dict(axes='index, columns', klass='DataFrame', axes_single_arg="{0 or 'index', 1 or 'columns'}", axis="axis : {0 or 'index', 1 or 'columns'}, default 0\n        If 0 or 'index': apply function to each column.\n        If 1 or 'columns': apply function to each row.", optional_by="\n        by : str or list of str\n            Name or list of names to sort by.\n\n            - if `axis` is 0 or `'index'` then `by` may contain index\n              levels and/or column labels.\n            - if `axis` is 1 or `'columns'` then `by` may contain column\n              levels and/or index labels.\n\n            .. versionchanged:: 0.23.0\n\n               Allow specifying index or column level names.", versionadded_to_excel='', optional_labels="labels : array-like, optional\n            New labels / index to conform the axis specified by 'axis' to.", optional_axis="axis : int or str, optional\n            Axis to target. Can be either the axis name ('index', 'columns')\n            or number (0, 1).")
A:pandas.core.frame.dtype->self.reindex(columns=combined_columns)._validate_dtype(dtype)
A:pandas.core.frame.mgr->arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)
A:pandas.core.frame.mask->notna(frame.values)
A:pandas.core.frame.(data, fill_value)->maybe_upcast(data, copy=True)
A:pandas.core.frame.data->_get_data(axis_matters=True)
A:pandas.core.frame.data_columns->list(data.dtype.names)
A:pandas.core.frame.(arrays, columns)->to_arrays(data, columns)
A:pandas.core.frame.columns->columns.drop(exclude).drop(exclude)
A:pandas.core.frame.index->self.reindex(columns=combined_columns)._get_axis(axis)
A:pandas.core.frame.arr->arr.view('i8').view('i8')
A:pandas.core.frame.exc->TypeError(f'DataFrame constructor called with incompatible data and dtype: {e}')
A:pandas.core.frame.values->collections.defaultdict(list, values)
A:pandas.core.frame.max_rows->get_option('display.max_info_rows', len(self) + 1)
A:pandas.core.frame.(width, height)->pandas.io.formats.console.get_console_size()
A:pandas.core.frame.max_columns->get_option('display.max_columns')
A:pandas.core.frame.nb_columns->len(self.columns)
A:pandas.core.frame.buf->StringIO('')
A:pandas.core.frame.value->numpy.tile(value, (len(existing_piece.columns), 1))
A:pandas.core.frame.repr_width->max((len(l) for l in value.split('\n')))
A:pandas.core.frame.min_rows->get_option('display.min_rows')
A:pandas.core.frame.max_cols->get_option('display.max_info_columns', len(self.columns) + 1)
A:pandas.core.frame.max_colwidth->get_option('display.max_colwidth')
A:pandas.core.frame.show_dimensions->get_option('display.show_dimensions')
A:pandas.core.frame.(width, _)->pandas.io.formats.console.get_console_size()
A:pandas.core.frame.val->val.replace('>', '&gt;', 1).replace('>', '&gt;', 1)
A:pandas.core.frame.formatter->pandas.io.formats.format.DataFrameFormatter(self, columns=columns, col_space=col_space, na_rep=na_rep, formatters=formatters, float_format=float_format, sparsify=sparsify, justify=justify, index_names=index_names, header=header, index=index, bold_rows=bold_rows, escape=escape, max_rows=max_rows, max_cols=max_cols, show_dimensions=show_dimensions, decimal=decimal, table_id=table_id, render_links=render_links)
A:pandas.core.frame.s->klass(v, index=columns, name=k)
A:pandas.core.frame.fields->list(self.columns)
A:pandas.core.frame.itertuple->collections.namedtuple(name, fields, rename=True)
A:pandas.core.frame.common->self.reindex(columns=combined_columns).columns.union(other.index)
A:pandas.core.frame.left->self.reindex(columns=combined_columns).reindex(columns=common, copy=False)
A:pandas.core.frame.right->other._get_numeric_data().reindex(index=common, copy=False)
A:pandas.core.frame.rvals->numpy.asarray(other)
A:pandas.core.frame.result->self.reindex(columns=combined_columns)._constructor_sliced(result, name=q)
A:pandas.core.frame.orient->orient.lower().lower()
A:pandas.core.frame.into_c->pandas.core.common.standardize_mapping(into)
A:pandas.core.frame.first_row->next(data)
A:pandas.core.frame.columnsarr_columns->ensure_index(sorted(data))
A:pandas.core.frame.(arrays, arr_columns)->to_arrays(data, columns, coerce_float=coerce_float)
A:pandas.core.frame.arr_columns->arr_columns.drop(arr_exclude).drop(arr_exclude)
A:pandas.core.frame.exclude->frozenset((infer_dtype_from_object(x) for x in exclude))
A:pandas.core.frame.i->columns.drop(exclude).drop(exclude).get_loc(index)
A:pandas.core.frame.result_index->self._get_numeric_data()._get_axis(raxis).union(other._get_axis(raxis))
A:pandas.core.frame.ix_vals->list(map(np.array, zip(*self.index.values)))
A:pandas.core.frame.index_names->list(self.index.names)
A:pandas.core.frame.index_len->len(index_names)
A:pandas.core.frame.writer->statawriter(path, self, convert_dates=convert_dates, byteorder=byteorder, time_stamp=time_stamp, data_label=data_label, write_index=write_index, variable_labels=variable_labels, **kwargs)
A:pandas.core.frame.tabulate->import_optional_dependency('tabulate')
A:pandas.core.frame.(buf, _, _, _)->get_filepath_or_buffer(buf, mode=mode)
A:pandas.core.frame.col_count->len(self.columns)
A:pandas.core.frame.max_col->max((len(pprint_thing(k)) for k in cols))
A:pandas.core.frame.len_column->len(pprint_thing(column_head))
A:pandas.core.frame.max_id->len(pprint_thing(col_count))
A:pandas.core.frame.len_id->len(pprint_thing(id_head))
A:pandas.core.frame.counts->pandas._libs.lib.count_level_2d(mask, level_codes, len(level_index), axis=0)
A:pandas.core.frame.len_count->len(count_header)
A:pandas.core.frame.space_count->len(count_header)
A:pandas.core.frame.len_dtype->len(dtype_header)
A:pandas.core.frame.max_dtypes->max((len(pprint_thing(k)) for k in self.dtypes))
A:pandas.core.frame.space_dtype->max(len_dtype, max_dtypes)
A:pandas.core.frame.col->self.reindex(columns=combined_columns).columns.get_loc(col)
A:pandas.core.frame.line_no->_put_str(' {num}'.format(num=i), space_num)
A:pandas.core.frame.memory_usage->get_option('display.memory_usage')
A:pandas.core.frame.mem_usage->self.reindex(columns=combined_columns).memory_usage(index=True, deep=deep).sum()
A:pandas.core.frame.dtypes->list(self.dtypes)
A:pandas.core.frame.arr_type->self.reindex(columns=combined_columns)._validate_dtype(dtype).construct_array_type()
A:pandas.core.frame.new_values->pandas.core.algorithms.take_2d_multi(self.values, indexer, fill_value=fill_value)
A:pandas.core.frame.T->property(transpose)
A:pandas.core.frame.key->self.reindex(columns=combined_columns)._constructor(key, **self._construct_axes_dict())
A:pandas.core.frame.indexer->nargsort(labels, kind=kind, ascending=ascending, na_position=na_position)
A:pandas.core.frame.loc->self.reindex(columns=combined_columns).columns.get_loc(key)
A:pandas.core.frame.result_columns->maybe_droplevels(new_columns, key)
A:pandas.core.frame.series->series.astype(new_dtype).astype(new_dtype)
A:pandas.core.frame.self._data->self.reindex(columns=combined_columns)._data.reindex_axis(value.index.copy(), axis=1, fill_value=np.nan)
A:pandas.core.frame.inplace->validate_bool_kwarg(inplace, 'inplace')
A:pandas.core.frame.res->_get_data(axis_matters=True)._data.reduce(blk_func)
A:pandas.core.frame.resolvers->kwargs.pop('resolvers', None)
A:pandas.core.frame.index_resolvers->self.reindex(columns=combined_columns)._get_index_resolvers()
A:pandas.core.frame.column_resolvers->self.reindex(columns=combined_columns)._get_cleaned_column_resolvers()
A:pandas.core.frame.include->frozenset((infer_dtype_from_object(x) for x in include))
A:pandas.core.frame.keep_these->numpy.full(self.shape[1], True)
A:pandas.core.frame.unique_dtypes->self.reindex(columns=combined_columns).dtypes.unique()
A:pandas.core.frame.included_dtypes->extract_unique_dtypes_from_dtypes_set(include, unique_dtypes)
A:pandas.core.frame.excluded_dtypes->extract_unique_dtypes_from_dtypes_set(exclude, unique_dtypes)
A:pandas.core.frame.data[k]->pandas.core.common.apply_if_callable(v, data)
A:pandas.core.frame.cols->Index([], name=self.columns.name)
A:pandas.core.frame.(infer_dtype, _)->infer_dtype_from_scalar(value, pandas_dtype=True)
A:pandas.core.frame.n->len(row_labels)
A:pandas.core.frame.ridx->self.reindex(columns=combined_columns).index.get_indexer(row_labels)
A:pandas.core.frame.cidx->self.reindex(columns=combined_columns).columns.get_indexer(col_labels)
A:pandas.core.frame.result[i]->self.reindex(columns=combined_columns)._get_value(r, c)
A:pandas.core.frame.frame->self.reindex(columns=combined_columns)._get_numeric_data()
A:pandas.core.frame.(new_index, indexer)->self.reindex(columns=combined_columns).index.reindex(new_index, method=method, level=level, limit=limit, tolerance=tolerance)
A:pandas.core.frame.(new_columns, indexer)->self.reindex(columns=combined_columns).columns.reindex(new_columns, method=method, level=level, limit=limit, tolerance=tolerance)
A:pandas.core.frame.(new_index, row_indexer)->self.reindex(columns=combined_columns).index.reindex(axes['index'])
A:pandas.core.frame.(new_columns, col_indexer)->self.reindex(columns=combined_columns).columns.reindex(axes['columns'])
A:pandas.core.frame.axes->validate_axis_style_args(self, args, kwargs, 'labels', 'reindex')
A:pandas.core.frame.names->list(self.index.names)
A:pandas.core.frame.duplicates->index[index.duplicated()].unique()
A:pandas.core.frame.new_obj->self.reindex(columns=combined_columns).copy()
A:pandas.core.frame.values_type->type(values)
A:pandas.core.frame.(values, _)->maybe_upcast_putmask(values, mask, np.nan)
A:pandas.core.frame.new_index->self.reindex(columns=combined_columns).index.droplevel(level)
A:pandas.core.frame.to_insert->zip(self.index.levels, self.index.codes)
A:pandas.core.frame.multi_col->isinstance(self.columns, ABCMultiIndex)
A:pandas.core.frame.lev_num->self.reindex(columns=combined_columns).columns._get_level_number(col_level)
A:pandas.core.frame.name->tuple(name_lst)
A:pandas.core.frame.level_values->_maybe_casted_values(lev, lab)
A:pandas.core.frame.axis->self.reindex(columns=combined_columns)._get_axis_number(axis)
A:pandas.core.frame.ax->self.reindex(columns=combined_columns)._get_axis(agg_axis)
A:pandas.core.frame.indices->pandas.core.nanops.nanargmax(self.values, axis=axis, skipna=skipna)
A:pandas.core.frame.agg_obj->self.reindex(columns=combined_columns).take(indices, axis=agg_axis)
A:pandas.core.frame.count->self.reindex(columns=combined_columns).take(indices, axis=agg_axis).count(axis=agg_axis)
A:pandas.core.frame.duplicated->self.reindex(columns=combined_columns).duplicated(subset, keep=keep)
A:pandas.core.frame.(inds,)->(-duplicated)._ndarray_values.nonzero()
A:pandas.core.frame.new_data->new_data.copy().copy()
A:pandas.core.frame.new_data.axes[1]->pandas.core.indexes.base.default_index(len(indexer))
A:pandas.core.frame.result.index->self.reindex(columns=combined_columns).index.take(result.index)
A:pandas.core.frame.(labels, shape)->map(list, zip(*map(f, vals)))
A:pandas.core.frame.subset->cast(Iterable, subset)
A:pandas.core.frame.diff->Index(subset).difference(self.columns)
A:pandas.core.frame.ids->get_group_index(labels, shape, sort=False, xnull=False)
A:pandas.core.frame.k->self.reindex(columns=combined_columns)._get_label_or_level_values(by, axis=axis)
A:pandas.core.frame.labels->_get_data(axis_matters=True)._get_agg_axis(axis)
A:pandas.core.frame.(new_axis, indexer)->_get_data(axis_matters=True)._get_agg_axis(axis).sortlevel(level, ascending=ascending, sort_remaining=sort_remaining)
A:pandas.core.frame.baxis->self.reindex(columns=combined_columns)._get_block_manager_axis(axis)
A:pandas.core.frame.new_data.axes[baxis]->new_data.copy().copy().axes[baxis]._sort_levels_monotonic()
A:pandas.core.frame.result.columns->self.reindex(columns=combined_columns)._constructor_sliced(result, name=q).columns.reorder_levels(order)
A:pandas.core.frame.(left, right)->self._get_numeric_data().align(other, join='inner', copy=False)
A:pandas.core.frame.res_values->_arith_op(self.values, other.values)
A:pandas.core.frame.out->_get_data(axis_matters=True)._constructor_sliced(res, index=range(len(res)), dtype=out_dtype)
A:pandas.core.frame.other_idxlen->len(other.index)
A:pandas.core.frame.(this, other)->self.reindex(columns=combined_columns).align(other, copy=False)
A:pandas.core.frame.new_columns->self._get_numeric_data().columns.union(other.columns)
A:pandas.core.frame.this_mask->isna(series)
A:pandas.core.frame.other_mask->isna(otherSeries)
A:pandas.core.frame.result[col]->this[col].copy()
A:pandas.core.frame.otherSeries->otherSeries.astype(new_dtype).astype(new_dtype)
A:pandas.core.frame.new_dtype->find_common_type([this_dtype, other_dtype])
A:pandas.core.frame.x_values->extract_values(x)
A:pandas.core.frame.y_values->extract_values(y)
A:pandas.core.frame.other->other._get_numeric_data()._get_numeric_data()
A:pandas.core.frame.mask_this->notna(that)
A:pandas.core.frame.mask_that->notna(this)
A:pandas.core.frame.self[col]->pandas.core.computation.expressions.where(mask, this, that)
A:pandas.core.frame.df->_get_data(axis_matters=True)
A:pandas.core.frame.bm_axis->self.reindex(columns=combined_columns)._get_block_manager_axis(axis)
A:pandas.core.frame._agg_summary_and_see_also_doc->dedent('\n    The aggregation operations are always performed over an axis, either the\n    index (default) or the column axis. This behavior is different from\n    `numpy` aggregation functions (`mean`, `median`, `prod`, `sum`, `std`,\n    `var`), where the default is to compute the aggregation of the flattened\n    array, e.g., ``numpy.mean(arr_2d)`` as opposed to\n    ``numpy.mean(arr_2d, axis=0)``.\n\n    `agg` is an alias for `aggregate`. Use the alias.\n\n    See Also\n    --------\n    DataFrame.apply : Perform any type of operations.\n    DataFrame.transform : Perform transformation type operations.\n    core.groupby.GroupBy : Perform operations over groups.\n    core.resample.Resampler : Perform operations over resampled bins.\n    core.window.Rolling : Perform operations over rolling window.\n    core.window.Expanding : Perform operations over expanding window.\n    core.window.EWM : Perform operation over exponential weighted\n        window.\n    ')
A:pandas.core.frame._agg_examples_doc->dedent('\n    Examples\n    --------\n    >>> df = pd.DataFrame([[1, 2, 3],\n    ...                    [4, 5, 6],\n    ...                    [7, 8, 9],\n    ...                    [np.nan, np.nan, np.nan]],\n    ...                   columns=[\'A\', \'B\', \'C\'])\n\n    Aggregate these functions over the rows.\n\n    >>> df.agg([\'sum\', \'min\'])\n            A     B     C\n    sum  12.0  15.0  18.0\n    min   1.0   2.0   3.0\n\n    Different aggregations per column.\n\n    >>> df.agg({\'A\' : [\'sum\', \'min\'], \'B\' : [\'min\', \'max\']})\n            A    B\n    max   NaN  8.0\n    min   1.0  2.0\n    sum  12.0  NaN\n\n    Aggregate over the columns.\n\n    >>> df.agg("mean", axis="columns")\n    0    2.0\n    1    5.0\n    2    8.0\n    3    NaN\n    dtype: float64\n    ')
A:pandas.core.frame.(result, how)->self.reindex(columns=combined_columns).T._aggregate(arg, *args, **kwargs)
A:pandas.core.frame.op->frame_apply(self, func=func, axis=axis, raw=raw, result_type=result_type, args=args, kwds=kwds)
A:pandas.core.frame.idx_diff->self._get_numeric_data()._get_axis(raxis).union(other._get_axis(raxis)).difference(correl.index)
A:pandas.core.frame.combined_columns->self.reindex(columns=combined_columns).columns.astype(object).append(idx_diff)
A:pandas.core.frame.self->self.reindex(columns=combined_columns).reindex(columns=combined_columns)
A:pandas.core.frame.can_concat->all((df.index.is_unique for df in frames))
A:pandas.core.frame.joined->merge(joined, frame, how=how, left_index=True, right_index=True)
A:pandas.core.frame.new_cols->list(_dict_round(self, decimals))
A:pandas.core.frame.numeric_df->self.reindex(columns=combined_columns).reindex(columns=combined_columns)._get_numeric_data()
A:pandas.core.frame.idx->Index([], name=self.columns.name).copy()
A:pandas.core.frame.correl->correl.append(Series([np.nan] * len(idx_diff), index=idx_diff)).append(Series([np.nan] * len(idx_diff), index=idx_diff))
A:pandas.core.frame.corrf->pandas.core.nanops.get_corr_func(method)
A:pandas.core.frame.K->len(cols)
A:pandas.core.frame.c->corrf(ac, bc)
A:pandas.core.frame.baseCov->pandas._libs.algos.nancorr(ensure_float64(mat), cov=True, minp=min_periods)
A:pandas.core.frame.this->self.reindex(columns=combined_columns).reindex(columns=combined_columns)._get_numeric_data()
A:pandas.core.frame.num->(ldem * rdem).sum()
A:pandas.core.frame.series_counts->notna(frame).sum(axis=axis)
A:pandas.core.frame.count_axis->self.reindex(columns=combined_columns)._get_numeric_data()._get_axis(axis)
A:pandas.core.frame.agg_axis->self.reindex(columns=combined_columns)._get_numeric_data()._get_agg_axis(axis)
A:pandas.core.frame.level->self.reindex(columns=combined_columns)._get_numeric_data()._get_axis(axis)._get_level_number(level)
A:pandas.core.frame.level_index->self.reindex(columns=combined_columns)._get_numeric_data()._get_axis(axis).levels[level]._shallow_copy(name=level_name)
A:pandas.core.frame.level_codes->ensure_int64(count_axis.codes[level])
A:pandas.core.frame.opa->frame_apply(self, func=f, result_type='expand', ignore_failures=True)
A:pandas.core.frame.plot->CachedAccessor('plot', pandas.plotting.PlotAccessor)
A:pandas.core.frame.sparse->CachedAccessor('sparse', SparseFrameAccessor)
A:pandas.core.frame.new_data[col]->new_data.copy().copy().get(col, {})
pandas.core.frame.DataFrame(self,data=None,index:Optional[Axes]=None,columns:Optional[Axes]=None,dtype:Optional[Dtype]=None,copy:bool=False)
pandas.core.frame.DataFrame.__getitem__(self,key)
pandas.core.frame.DataFrame.__init__(self,data=None,index:Optional[Axes]=None,columns:Optional[Axes]=None,dtype:Optional[Dtype]=None,copy:bool=False)
pandas.core.frame.DataFrame.__len__(self)->int
pandas.core.frame.DataFrame.__matmul__(self,other)
pandas.core.frame.DataFrame.__repr__(self)->str
pandas.core.frame.DataFrame.__rmatmul__(self,other)
pandas.core.frame.DataFrame.__setitem__(self,key,value)
pandas.core.frame.DataFrame._aggregate(self,arg,axis=0,*args,**kwargs)
pandas.core.frame.DataFrame._box_col_values(self,values,items)
pandas.core.frame.DataFrame._box_item_values(self,key,values)
pandas.core.frame.DataFrame._combine_frame(self,other,func,fill_value=None,level=None)
pandas.core.frame.DataFrame._combine_match_index(self,other,func)
pandas.core.frame.DataFrame._construct_result(self,result)->'DataFrame'
pandas.core.frame.DataFrame._constructor(self)->Type['DataFrame']
pandas.core.frame.DataFrame._constructor_expanddim(self)
pandas.core.frame.DataFrame._count_level(self,level,axis=0,numeric_only=False)
pandas.core.frame.DataFrame._ensure_valid_index(self,value)
pandas.core.frame.DataFrame._from_arrays(cls,arrays,columns,index,dtype=None)->'DataFrame'
pandas.core.frame.DataFrame._get_agg_axis(self,axis_num)
pandas.core.frame.DataFrame._get_value(self,index,col,takeable:bool=False)
pandas.core.frame.DataFrame._getitem_bool_array(self,key)
pandas.core.frame.DataFrame._getitem_multilevel(self,key)
pandas.core.frame.DataFrame._gotitem(self,key:Union[str,List[str]],ndim:int,subset:Optional[Union[Series,ABCDataFrame]]=None)->Union[Series, ABCDataFrame]
pandas.core.frame.DataFrame._info_repr(self)->bool
pandas.core.frame.DataFrame._is_homogeneous_type(self)->bool
pandas.core.frame.DataFrame._ixs(self,i:int,axis:int=0)
pandas.core.frame.DataFrame._join_compat(self,other,on=None,how='left',lsuffix='',rsuffix='',sort=False)
pandas.core.frame.DataFrame._reduce(self,op,name,axis=0,skipna=True,numeric_only=None,filter_type=None,**kwds)
pandas.core.frame.DataFrame._reindex_axes(self,axes,level,limit,tolerance,method,fill_value,copy)
pandas.core.frame.DataFrame._reindex_columns(self,new_columns,method,copy,level,fill_value=None,limit=None,tolerance=None)
pandas.core.frame.DataFrame._reindex_index(self,new_index,method,copy,level,fill_value=np.nan,limit=None,tolerance=None)
pandas.core.frame.DataFrame._reindex_multi(self,axes,copy,fill_value)->'DataFrame'
pandas.core.frame.DataFrame._repr_fits_horizontal_(self,ignore_width:bool=False)->bool
pandas.core.frame.DataFrame._repr_fits_vertical_(self)->bool
pandas.core.frame.DataFrame._repr_html_(self)->Optional[str]
pandas.core.frame.DataFrame._sanitize_column(self,key,value,broadcast=True)
pandas.core.frame.DataFrame._series(self)
pandas.core.frame.DataFrame._set_item(self,key,value)
pandas.core.frame.DataFrame._set_value(self,index,col,value,takeable:bool=False)
pandas.core.frame.DataFrame._setitem_array(self,key,value)
pandas.core.frame.DataFrame._setitem_frame(self,key,value)
pandas.core.frame.DataFrame._setitem_slice(self,key,value)
pandas.core.frame.DataFrame.aggregate(self,func,axis=0,*args,**kwargs)
pandas.core.frame.DataFrame.align(self,other,join='outer',axis=None,level=None,copy=True,fill_value=None,method=None,limit=None,fill_axis=0,broadcast_axis=None)->'DataFrame'
pandas.core.frame.DataFrame.append(self,other,ignore_index=False,verify_integrity=False,sort=False)->'DataFrame'
pandas.core.frame.DataFrame.apply(self,func,axis=0,raw=False,result_type=None,args=(),**kwds)
pandas.core.frame.DataFrame.applymap(self,func)->'DataFrame'
pandas.core.frame.DataFrame.assign(self,**kwargs)->'DataFrame'
pandas.core.frame.DataFrame.axes(self)->List[Index]
pandas.core.frame.DataFrame.combine(self,other:'DataFrame',func,fill_value=None,overwrite=True)->'DataFrame'
pandas.core.frame.DataFrame.combine_first(self,other:'DataFrame')->'DataFrame'
pandas.core.frame.DataFrame.corr(self,method='pearson',min_periods=1)->'DataFrame'
pandas.core.frame.DataFrame.corrwith(self,other,axis=0,drop=False,method='pearson')->Series
pandas.core.frame.DataFrame.count(self,axis=0,level=None,numeric_only=False)
pandas.core.frame.DataFrame.cov(self,min_periods=None)->'DataFrame'
pandas.core.frame.DataFrame.diff(self,periods=1,axis=0)->'DataFrame'
pandas.core.frame.DataFrame.dot(self,other)
pandas.core.frame.DataFrame.drop(self,labels=None,axis=0,index=None,columns=None,level=None,inplace=False,errors='raise')
pandas.core.frame.DataFrame.drop_duplicates(self,subset:Optional[Union[Hashable,Sequence[Hashable]]]=None,keep:Union[str,bool]='first',inplace:bool=False,ignore_index:bool=False)->Optional['DataFrame']
pandas.core.frame.DataFrame.dropna(self,axis=0,how='any',thresh=None,subset=None,inplace=False)
pandas.core.frame.DataFrame.duplicated(self,subset:Optional[Union[Hashable,Sequence[Hashable]]]=None,keep:Union[str,bool]='first')->'Series'
pandas.core.frame.DataFrame.eval(self,expr,inplace=False,**kwargs)
pandas.core.frame.DataFrame.explode(self,column:Union[str,Tuple])->'DataFrame'
pandas.core.frame.DataFrame.fillna(self,value=None,method=None,axis=None,inplace=False,limit=None,downcast=None)->Optional['DataFrame']
pandas.core.frame.DataFrame.from_dict(cls,data,orient='columns',dtype=None,columns=None)->'DataFrame'
pandas.core.frame.DataFrame.from_records(cls,data,index=None,exclude=None,columns=None,coerce_float=False,nrows=None)->'DataFrame'
pandas.core.frame.DataFrame.groupby(self,by=None,axis=0,level=None,as_index:bool=True,sort:bool=True,group_keys:bool=True,squeeze:bool=False,observed:bool=False)->'groupby_generic.DataFrameGroupBy'
pandas.core.frame.DataFrame.idxmax(self,axis=0,skipna=True)->Series
pandas.core.frame.DataFrame.idxmin(self,axis=0,skipna=True)->Series
pandas.core.frame.DataFrame.info(self,verbose=None,buf=None,max_cols=None,memory_usage=None,null_counts=None)->None
pandas.core.frame.DataFrame.insert(self,loc,column,value,allow_duplicates=False)->None
pandas.core.frame.DataFrame.isin(self,values)->'DataFrame'
pandas.core.frame.DataFrame.isna(self)->'DataFrame'
pandas.core.frame.DataFrame.isnull(self)->'DataFrame'
pandas.core.frame.DataFrame.items(self)->Iterable[Tuple[Optional[Hashable], Series]]
pandas.core.frame.DataFrame.iteritems(self)->Iterable[Tuple[Optional[Hashable], Series]]
pandas.core.frame.DataFrame.iterrows(self)->Iterable[Tuple[Optional[Hashable], Series]]
pandas.core.frame.DataFrame.itertuples(self,index=True,name='Pandas')
pandas.core.frame.DataFrame.join(self,other,on=None,how='left',lsuffix='',rsuffix='',sort=False)->'DataFrame'
pandas.core.frame.DataFrame.lookup(self,row_labels,col_labels)->np.ndarray
pandas.core.frame.DataFrame.melt(self,id_vars=None,value_vars=None,var_name=None,value_name='value',col_level=None)->'DataFrame'
pandas.core.frame.DataFrame.memory_usage(self,index=True,deep=False)->Series
pandas.core.frame.DataFrame.merge(self,right,how='inner',on=None,left_on=None,right_on=None,left_index=False,right_index=False,sort=False,suffixes=('_x','_y'),copy=True,indicator=False,validate=None)->'DataFrame'
pandas.core.frame.DataFrame.mode(self,axis=0,numeric_only=False,dropna=True)->'DataFrame'
pandas.core.frame.DataFrame.nlargest(self,n,columns,keep='first')->'DataFrame'
pandas.core.frame.DataFrame.notna(self)->'DataFrame'
pandas.core.frame.DataFrame.notnull(self)->'DataFrame'
pandas.core.frame.DataFrame.nsmallest(self,n,columns,keep='first')->'DataFrame'
pandas.core.frame.DataFrame.nunique(self,axis=0,dropna=True)->Series
pandas.core.frame.DataFrame.pivot(self,index=None,columns=None,values=None)->'DataFrame'
pandas.core.frame.DataFrame.pivot_table(self,values=None,index=None,columns=None,aggfunc='mean',fill_value=None,margins=False,dropna=True,margins_name='All',observed=False)->'DataFrame'
pandas.core.frame.DataFrame.quantile(self,q=0.5,axis=0,numeric_only=True,interpolation='linear')
pandas.core.frame.DataFrame.query(self,expr,inplace=False,**kwargs)
pandas.core.frame.DataFrame.reindex(self,*args,**kwargs)->'DataFrame'
pandas.core.frame.DataFrame.rename(self,mapper:Optional[Renamer]=None,*,index:Optional[Renamer]=None,columns:Optional[Renamer]=None,axis:Optional[Axis]=None,copy:bool=True,inplace:bool=False,level:Optional[Level]=None,errors:str='ignore')->Optional['DataFrame']
pandas.core.frame.DataFrame.reorder_levels(self,order,axis=0)->'DataFrame'
pandas.core.frame.DataFrame.replace(self,to_replace=None,value=None,inplace=False,limit=None,regex=False,method='pad')
pandas.core.frame.DataFrame.reset_index(self,level:Optional[Union[Hashable,Sequence[Hashable]]]=None,drop:bool=False,inplace:bool=False,col_level:Hashable=0,col_fill:Optional[Hashable]='')->Optional['DataFrame']
pandas.core.frame.DataFrame.round(self,decimals=0,*args,**kwargs)->'DataFrame'
pandas.core.frame.DataFrame.select_dtypes(self,include=None,exclude=None)->'DataFrame'
pandas.core.frame.DataFrame.set_index(self,keys,drop=True,append=False,inplace=False,verify_integrity=False)
pandas.core.frame.DataFrame.shape(self)->Tuple[int, int]
pandas.core.frame.DataFrame.shift(self,periods=1,freq=None,axis=0,fill_value=None)->'DataFrame'
pandas.core.frame.DataFrame.sort_index(self,axis=0,level=None,ascending=True,inplace=False,kind='quicksort',na_position='last',sort_remaining=True,ignore_index:bool=False)
pandas.core.frame.DataFrame.sort_values(self,by,axis=0,ascending=True,inplace=False,kind='quicksort',na_position='last',ignore_index=False)
pandas.core.frame.DataFrame.stack(self,level=-1,dropna=True)
pandas.core.frame.DataFrame.style(self)->'Styler'
pandas.core.frame.DataFrame.swaplevel(self,i=-2,j=-1,axis=0)->'DataFrame'
pandas.core.frame.DataFrame.to_dict(self,orient='dict',into=dict)
pandas.core.frame.DataFrame.to_feather(self,path)->None
pandas.core.frame.DataFrame.to_gbq(self,destination_table,project_id=None,chunksize=None,reauth=False,if_exists='fail',auth_local_webserver=False,table_schema=None,location=None,progress_bar=True,credentials=None)->None
pandas.core.frame.DataFrame.to_html(self,buf=None,columns=None,col_space=None,header=True,index=True,na_rep='NaN',formatters=None,float_format=None,sparsify=None,index_names=True,justify=None,max_rows=None,max_cols=None,show_dimensions=False,decimal='.',bold_rows=True,classes=None,escape=True,notebook=False,border=None,table_id=None,render_links=False,encoding=None)
pandas.core.frame.DataFrame.to_markdown(self,buf:Optional[IO[str]]=None,mode:Optional[str]=None,**kwargs)->Optional[str]
pandas.core.frame.DataFrame.to_numpy(self,dtype=None,copy=False)->np.ndarray
pandas.core.frame.DataFrame.to_parquet(self,path,engine='auto',compression='snappy',index=None,partition_cols=None,**kwargs)->None
pandas.core.frame.DataFrame.to_period(self,freq=None,axis=0,copy=True)->'DataFrame'
pandas.core.frame.DataFrame.to_records(self,index=True,column_dtypes=None,index_dtypes=None)->np.recarray
pandas.core.frame.DataFrame.to_stata(self,path,convert_dates=None,write_index=True,byteorder=None,time_stamp=None,data_label=None,variable_labels=None,version=114,convert_strl=None)
pandas.core.frame.DataFrame.to_string(self,buf:Optional[FilePathOrBuffer[str]]=None,columns:Optional[Sequence[str]]=None,col_space:Optional[int]=None,header:Union[bool,Sequence[str]]=True,index:bool=True,na_rep:str='NaN',formatters:Optional[fmt.formatters_type]=None,float_format:Optional[fmt.float_format_type]=None,sparsify:Optional[bool]=None,index_names:bool=True,justify:Optional[str]=None,max_rows:Optional[int]=None,min_rows:Optional[int]=None,max_cols:Optional[int]=None,show_dimensions:bool=False,decimal:str='.',line_width:Optional[int]=None,max_colwidth:Optional[int]=None,encoding:Optional[str]=None)->Optional[str]
pandas.core.frame.DataFrame.to_timestamp(self,freq=None,how='start',axis=0,copy=True)->'DataFrame'
pandas.core.frame.DataFrame.transform(self,func,axis=0,*args,**kwargs)->'DataFrame'
pandas.core.frame.DataFrame.transpose(self,*args,copy:bool=False)->'DataFrame'
pandas.core.frame.DataFrame.unstack(self,level=-1,fill_value=None)
pandas.core.frame.DataFrame.update(self,other,join='left',overwrite=True,filter_func=None,errors='ignore')->None
pandas.core.frame._from_nested_dict(data)
pandas.core.frame._put_str(s,space)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/generic.py----------------------------------------
A:pandas.core.generic._shared_doc_kwargs->dict(axes='keywords for axes', klass='Series/DataFrame', axes_single_arg='int or labels for object', args_transpose='axes to permute (int or label for object)', optional_by='\n        by : str or list of str\n            Name or list of names to sort by')
A:pandas.core.generic.fill_f->pandas.core.missing.get_fill_func(method)
A:pandas.core.generic.mask->isna(vals)
A:pandas.core.generic.values->self._get_axis(axis).map(f)
A:pandas.core.generic.result->self.to_frame()._data.apply(na_accum_func)
A:pandas.core.generic.data->self.to_frame()._get_numeric_data()
A:pandas.core.generic.attrs->state.get('_attrs', {})
A:pandas.core.generic.mgr->mgr.astype(dtype=dtype).astype(dtype=dtype)
A:pandas.core.generic.self._attrs->dict(value)
A:pandas.core.generic.dtype->pandas_dtype(dtype)
A:pandas.core.generic.cls._AXIS_LEN->len(axes)
A:pandas.core.generic.cls._AXIS_NAMES->dict(enumerate(axes))
A:pandas.core.generic.args->list(args)
A:pandas.core.generic.kwargs[a]->list(args).pop(0)
A:pandas.core.generic.d->self.to_frame()._construct_axes_dict()
A:pandas.core.generic.axis->self.to_frame()._get_axis_number(axis)
A:pandas.core.generic.name->self.to_frame()._get_axis_name(axis)
A:pandas.core.generic.axis_index->getattr(self, axis)
A:pandas.core.generic.level_values->getattr(self, axis).get_level_values(level)
A:pandas.core.generic.s->getattr(self, axis).get_level_values(level).to_series()
A:pandas.core.generic.dindex->getattr(self, axis).to_series()
A:pandas.core.generic.obj->obj._reindex_with_indexers({axis: [new_index, indexer]}, fill_value=fill_value, copy=copy, allow_dups=False)._reindex_with_indexers({axis: [new_index, indexer]}, fill_value=fill_value, copy=copy, allow_dups=False)
A:pandas.core.generic.i->self.to_frame()._get_axis_number(axis1)
A:pandas.core.generic.j->self.to_frame()._get_axis_number(axis2)
A:pandas.core.generic.new_values->self.to_frame()._data.fast_xs(loc)
A:pandas.core.generic.labels->self.to_frame()._get_axis(axis)
A:pandas.core.generic.new_labels->self.to_frame()._get_axis(axis).droplevel(level)
A:pandas.core.generic.ax->_tz_localize(ax, tz, ambiguous, nonexistent)
A:pandas.core.generic.baxis->self.to_frame()._get_block_manager_axis(axis)
A:pandas.core.generic.f->functools.partial('{}{suffix}'.format, suffix=suffix)
A:pandas.core.generic.level->_tz_localize(ax, tz, ambiguous, nonexistent)._get_level_number(level)
A:pandas.core.generic.indexer->self._get_axis(axis).indexer_between_time(start_time, end_time, include_start=include_start, include_end=include_end)
A:pandas.core.generic.result._data->self.to_frame()._data.apply(na_accum_func)._data.downcast()
A:pandas.core.generic.(axes, kwargs)->self.to_frame()._construct_axes_from_arguments(args, kwargs)
A:pandas.core.generic.copy->kwargs.pop('copy', True)
A:pandas.core.generic.inplace->validate_bool_kwarg(inplace, 'inplace')
A:pandas.core.generic.v->self.to_frame().squeeze()
A:pandas.core.generic.idx->self.to_frame()._get_axis(axis).set_names(name)
A:pandas.core.generic.arr->operator.pos(values)
A:pandas.core.generic.new_data->self.to_frame()._data.copy()
A:pandas.core.generic.keys->pandas.core.common.maybe_make_list(keys)
A:pandas.core.generic.dropped->self.to_frame().copy()
A:pandas.core.generic.dropped.columns->RangeIndex(dropped.columns.size)
A:pandas.core.generic.typ->state.get('_typ')
A:pandas.core.generic.meta->set(self._internal_names + self._metadata)
A:pandas.core.generic.payload->pandas.io.json.loads(data.to_json(orient='table'), object_pairs_hook=collections.OrderedDict)
A:pandas.core.generic.formatter->CSVFormatter(df, path_or_buf, line_terminator=line_terminator, sep=sep, encoding=encoding, compression=compression, quoting=quoting, na_rep=na_rep, float_format=float_format, cols=columns, header=header, index=index, index_label=index_label, mode=mode, chunksize=chunksize, quotechar=quotechar, date_format=date_format, doublequote=doublequote, escapechar=escapechar, decimal=decimal)
A:pandas.core.generic.xarray->import_optional_dependency('xarray')
A:pandas.core.generic.self->self.to_frame().to_frame()
A:pandas.core.generic.longtable->pandas._config.config.get_option('display.latex.longtable')
A:pandas.core.generic.escape->pandas._config.config.get_option('display.latex.escape')
A:pandas.core.generic.multicolumn->pandas._config.config.get_option('display.latex.multicolumn')
A:pandas.core.generic.multicolumn_format->pandas._config.config.get_option('display.latex.multicolumn_format')
A:pandas.core.generic.multirow->pandas._config.config.get_option('display.latex.multirow')
A:pandas.core.generic._indexer->functools.partial(indexer, name)
A:pandas.core.generic.cacher->getattr(self, '_cacher', None)
A:pandas.core.generic.ref->self.to_frame().to_frame()._get_cacher()
A:pandas.core.generic.(loc, new_ax)->self.to_frame()._get_axis(axis).get_loc_level(key, level=level, drop_level=drop_level)
A:pandas.core.generic.(loc, new_index)->self.to_frame().to_frame().index.get_loc_level(key, drop_level=drop_level)
A:pandas.core.generic.loc->self.to_frame().to_frame().index.searchsorted(where, side='right')
A:pandas.core.generic.(inds,)->self.to_frame().to_frame().index.searchsorted(where, side='right').nonzero()
A:pandas.core.generic.res->self.to_frame().to_frame()._constructor(new_data).__finalize__(self)
A:pandas.core.generic.lower->self.to_frame().to_frame()._take_with_is_copy(item, axis=self._info_axis_number)
A:pandas.core.generic.self._is_copy->weakref.ref(ref)
A:pandas.core.generic.value->create_series_with_explicit_dtype(value, dtype_if_empty=object)
A:pandas.core.generic.r->self.to_frame().to_frame()._is_copy()
A:pandas.core.generic.axis_name->self.to_frame().to_frame()._get_axis_name(axis)
A:pandas.core.generic.(axes, _)->self.to_frame().to_frame()._construct_axes_from_arguments((index, columns), {})
A:pandas.core.generic.new_axis->self.to_frame()._get_axis(axis).take(sort_index)
A:pandas.core.generic.labels_missing->(axis.get_indexer_for(labels) == -1).any()
A:pandas.core.generic.self._data->self.to_frame().to_frame()._data.consolidate()
A:pandas.core.generic.sort_index->self.to_frame()._get_axis(axis).argsort()
A:pandas.core.generic.method->getattr(type(self), name)
A:pandas.core.generic.limit->kwargs.pop('limit', None)
A:pandas.core.generic.tolerance->kwargs.pop('tolerance', None)
A:pandas.core.generic.fill_value->bool(inplace)
A:pandas.core.generic.(new_index, indexer)->_tz_localize(ax, tz, ambiguous, nonexistent).reindex(labels, level=level, limit=limit, tolerance=tolerance, method=method)
A:pandas.core.generic.index->self.to_frame().to_frame()._get_axis(axis)
A:pandas.core.generic.nkw->pandas.core.common.count_not_none(items, like, regex)
A:pandas.core.generic.matcher->re.compile(regex)
A:pandas.core.generic.rs->rs.reindex_like(data).reindex_like(data)
A:pandas.core.generic.weights->weights.fillna(0).fillna(0)
A:pandas.core.generic.n->int(round(frac * axis_length))
A:pandas.core.generic.locs->self.to_frame().to_frame().index.asof_locs(where, ~nulls.values)
A:pandas.core.generic._shared_docs['aggregate']->dedent("\n    Aggregate using one or more operations over the specified axis.\n    %(versionadded)s\n    Parameters\n    ----------\n    func : function, str, list or dict\n        Function to use for aggregating the data. If a function, must either\n        work when passed a %(klass)s or when passed to %(klass)s.apply.\n\n        Accepted combinations are:\n\n        - function\n        - string function name\n        - list of functions and/or function names, e.g. ``[np.sum, 'mean']``\n        - dict of axis labels -> functions, function names or list of such.\n    %(axis)s\n    *args\n        Positional arguments to pass to `func`.\n    **kwargs\n        Keyword arguments to pass to `func`.\n\n    Returns\n    -------\n    scalar, Series or DataFrame\n\n        The return can be:\n\n        * scalar : when Series.agg is called with single function\n        * Series : when DataFrame.agg is called with a single function\n        * DataFrame : when DataFrame.agg is called with several functions\n\n        Return scalar, Series or DataFrame.\n    %(see_also)s\n    Notes\n    -----\n    `agg` is an alias for `aggregate`. Use the alias.\n\n    A passed user-defined-function will be passed a Series for evaluation.\n    %(examples)s")
A:pandas.core.generic.existing->getattr(self, name)
A:pandas.core.generic.blocks_before->len(self._data.blocks)
A:pandas.core.generic.cons_data->self.to_frame().to_frame()._protect_consolidate(f)
A:pandas.core.generic.(value, method)->validate_fillna_kwargs(value, method)
A:pandas.core.generic.items->list(to_replace.items())
A:pandas.core.generic.to_rep_dict[k]->list(keys)
A:pandas.core.generic.value_dict[k]->list(values)
A:pandas.core.generic.res[c]->res[c].replace(to_replace=src, value=value[c], inplace=False, regex=regex).replace(to_replace=src, value=value[c], inplace=False, regex=regex)
A:pandas.core.generic.where->Period(where, freq=self.index.freq)
A:pandas.core.generic.is_series->isinstance(self, ABCSeries)
A:pandas.core.generic.is_list->is_list_like(where)
A:pandas.core.generic.threshold->_align_method_FRAME(self, threshold, axis)
A:pandas.core.generic.offset->to_offset(offset)
A:pandas.core.generic.end->self.to_frame().to_frame().index.searchsorted(end_date, side='left')
A:pandas.core.generic.start->self.to_frame().to_frame().index.searchsorted(start_date, side='right')
A:pandas.core.generic.ranks->self.to_frame().to_frame()._constructor(ranks, **data._construct_axes_dict())
A:pandas.core.generic.df->cons({c: other for c in self.columns}, **self._construct_axes_dict())
A:pandas.core.generic.(join_index, ilidx, iridx)->self.to_frame().to_frame().index.join(other.index, how=join, level=level, return_indexers=True)
A:pandas.core.generic.(join_columns, clidx, cridx)->self.to_frame().to_frame().columns.join(other.columns, how=join, level=level, return_indexers=True)
A:pandas.core.generic.left->left.fillna(fill_value, method=method, limit=limit, axis=fill_axis).fillna(fill_value, method=method, limit=limit, axis=fill_axis)
A:pandas.core.generic.right->right.fillna(fill_value, method=method, limit=limit).fillna(fill_value, method=method, limit=limit)
A:pandas.core.generic._left->left.fillna(fill_value, method=method, limit=limit, axis=fill_axis).fillna(fill_value, method=method, limit=limit, axis=fill_axis).fillna(method=method, axis=fill_axis, limit=limit)
A:pandas.core.generic.(join_index, lidx, ridx)->self.to_frame().to_frame().columns.join(other.index, how=join, level=level, return_indexers=True)
A:pandas.core.generic.fdata->fdata.copy().copy()
A:pandas.core.generic.cond->numpy.array(cond)
A:pandas.core.generic.(cond, _)->numpy.array(cond).align(self, join='right', broadcast_axis=1)
A:pandas.core.generic.(_, other)->self.to_frame().to_frame().align(other, join='left', axis=axis, level=level, fill_value=np.nan)
A:pandas.core.generic.other->pandas.core.common.apply_if_callable(other, self)
A:pandas.core.generic.new_other->new_other.copy().copy()
A:pandas.core.generic.block_axis->self.to_frame().to_frame()._get_block_manager_axis(axis)
A:pandas.core.generic.vslicer->slice(-periods, None)
A:pandas.core.generic.islicer->slice(None, periods)
A:pandas.core.generic.new_obj->self.to_frame().to_frame()._slice(vslicer, axis=axis)
A:pandas.core.generic.freq->to_offset(freq)
A:pandas.core.generic.orig_freq->to_offset(index.freq)
A:pandas.core.generic.new_data.axes[block_axis]->self.to_frame().to_frame()._get_axis(axis).shift(periods, freq)
A:pandas.core.generic.before->to_datetime(before)
A:pandas.core.generic.after->to_datetime(after)
A:pandas.core.generic.slicer[axis]->slice(before, after)
A:pandas.core.generic.ax_name->self.to_frame().to_frame()._get_axis_name(axis)
A:pandas.core.generic.new_level->_tz_localize(ax.levels[level], tz, ambiguous, nonexistent)
A:pandas.core.generic.percentiles->numpy.array([0.25, 0.5, 0.75])
A:pandas.core.generic.unique_pcts->numpy.unique(percentiles)
A:pandas.core.generic.formatted_percentiles->format_percentiles(percentiles)
A:pandas.core.generic.objcounts->self.to_frame()._get_numeric_data().value_counts()
A:pandas.core.generic.count_unique->len(objcounts[objcounts != 0])
A:pandas.core.generic.asint->self.to_frame()._get_numeric_data().dropna().values.view('i8')
A:pandas.core.generic.top->top.tz_localize(tz).tz_localize(tz)
A:pandas.core.generic.ldesc_indexes->sorted((x.index for x in ldesc), key=len)
A:pandas.core.generic.d.columns->self.to_frame()._get_numeric_data().columns.copy()
A:pandas.core.generic._data->self.to_frame().to_frame().fillna(method=fill_method, axis=axis, limit=limit)
A:pandas.core.generic.grouped->self.to_frame().to_frame().groupby(level=level, axis=axis, sort=False)
A:pandas.core.generic.(axis_descr, name, name2)->_doc_parms(cls)
A:pandas.core.generic.cls.any->_make_logical_function(cls, 'any', name, name2, axis_descr, _any_desc, nanops.nanany, _any_see_also, _any_examples, empty_value=False)
A:pandas.core.generic.cls.all->_make_logical_function(cls, 'all', name, name2, axis_descr, _all_desc, nanops.nanall, _all_see_also, _all_examples, empty_value=True)
A:pandas.core.generic.demeaned->self.to_frame()._get_numeric_data().sub(data.mean(axis=1), axis=0)
A:pandas.core.generic.cls.sem->_make_stat_function_ddof(cls, 'sem', name, name2, axis_descr, 'Return unbiased standard error of the mean over requested axis.\n\nNormalized by N-1 by default. This can be changed using the ddof argument', nanops.nansem)
A:pandas.core.generic.cls.var->_make_stat_function_ddof(cls, 'var', name, name2, axis_descr, 'Return unbiased variance over requested axis.\n\nNormalized by N-1 by default. This can be changed using the ddof argument', nanops.nanvar)
A:pandas.core.generic.cls.std->_make_stat_function_ddof(cls, 'std', name, name2, axis_descr, 'Return sample standard deviation over requested axis.\n\nNormalized by N-1 by default. This can be changed using the ddof argument', nanops.nanstd)
A:pandas.core.generic.cls.cummin->_make_cum_function(cls, 'cummin', name, name2, axis_descr, 'minimum', np.minimum.accumulate, 'min', np.inf, np.nan, _cummin_examples)
A:pandas.core.generic.cls.cumsum->_make_cum_function(cls, 'cumsum', name, name2, axis_descr, 'sum', np.cumsum, 'sum', 0.0, np.nan, _cumsum_examples)
A:pandas.core.generic.cls.cumprod->_make_cum_function(cls, 'cumprod', name, name2, axis_descr, 'product', np.cumprod, 'prod', 1.0, np.nan, _cumprod_examples)
A:pandas.core.generic.cls.cummax->_make_cum_function(cls, 'cummax', name, name2, axis_descr, 'maximum', np.maximum.accumulate, 'max', -np.inf, np.nan, _cummax_examples)
A:pandas.core.generic.cls.sum->_make_min_count_stat_function(cls, 'sum', name, name2, axis_descr, 'Return the sum of the values for the requested axis.\n\n            This is equivalent to the method ``numpy.sum``.', nanops.nansum, _stat_func_see_also, _sum_examples)
A:pandas.core.generic.cls.mean->_make_stat_function(cls, 'mean', name, name2, axis_descr, 'Return the mean of the values for the requested axis.', nanops.nanmean)
A:pandas.core.generic.cls.skew->_make_stat_function(cls, 'skew', name, name2, axis_descr, 'Return unbiased skew over requested axis.\n\nNormalized by N-1.', nanops.nanskew)
A:pandas.core.generic.cls.kurt->_make_stat_function(cls, 'kurt', name, name2, axis_descr, "Return unbiased kurtosis over requested axis.\n\nKurtosis obtained using Fisher's definition of\nkurtosis (kurtosis of normal == 0.0). Normalized by N-1.", nanops.nankurt)
A:pandas.core.generic.cls.prod->_make_min_count_stat_function(cls, 'prod', name, name2, axis_descr, 'Return the product of the values for the requested axis.', nanops.nanprod, examples=_prod_examples)
A:pandas.core.generic.cls.median->_make_stat_function(cls, 'median', name, name2, axis_descr, 'Return the median of the values for the requested axis.', nanops.nanmedian)
A:pandas.core.generic.cls.max->_make_stat_function(cls, 'max', name, name2, axis_descr, 'Return the maximum of the values for the requested axis.\n\n            If you want the *index* of the maximum, use ``idxmax``. This is\n            the equivalent of the ``numpy.ndarray`` method ``argmax``.', nanops.nanmax, _stat_func_see_also, _max_examples)
A:pandas.core.generic.cls.min->_make_stat_function(cls, 'min', name, name2, axis_descr, 'Return the minimum of the values for the requested axis.\n\n            If you want the *index* of the minimum, use ``idxmin``. This is\n            the equivalent of the ``numpy.ndarray`` method ``argmin``.', nanops.nanmin, _stat_func_see_also, _min_examples)
A:pandas.core.generic.idxpos->find_valid_index(self._values, how)
A:pandas.core.generic._sum_examples->_shared_docs['stat_func_example'].format(stat_func='sum', verb='Sum', default_output=14, level_output_0=6, level_output_1=8)
A:pandas.core.generic._max_examples->_shared_docs['stat_func_example'].format(stat_func='max', verb='Max', default_output=8, level_output_0=4, level_output_1=8)
A:pandas.core.generic._min_examples->_shared_docs['stat_func_example'].format(stat_func='min', verb='Min', default_output=0, level_output_0=2, level_output_1=0)
A:pandas.core.generic.skipna->pandas.compat.numpy.function.validate_cum_func_with_skipna(skipna, args, kwargs, name)
A:pandas.core.generic.y->blk_values.view('i8')
pandas.core.generic.NDFrame(self,data:BlockManager,axes:Optional[List[Index]]=None,copy:bool=False,dtype:Optional[Dtype]=None,attrs:Optional[Mapping[Optional[Hashable],Any]]=None,fastpath:bool=False)
pandas.core.generic.NDFrame.__abs__(self:FrameOrSeries)->FrameOrSeries
pandas.core.generic.NDFrame.__array__(self,dtype=None)->np.ndarray
pandas.core.generic.NDFrame.__array_wrap__(self,result,context=None)
pandas.core.generic.NDFrame.__contains__(self,key)->bool_t
pandas.core.generic.NDFrame.__copy__(self:FrameOrSeries,deep:bool_t=True)->FrameOrSeries
pandas.core.generic.NDFrame.__deepcopy__(self:FrameOrSeries,memo=None)->FrameOrSeries
pandas.core.generic.NDFrame.__delitem__(self,key)->None
pandas.core.generic.NDFrame.__finalize__(self:FrameOrSeries,other,method=None,**kwargs)->FrameOrSeries
pandas.core.generic.NDFrame.__getattr__(self,name:str)
pandas.core.generic.NDFrame.__getitem__(self,item)
pandas.core.generic.NDFrame.__getstate__(self)->Dict[str, Any]
pandas.core.generic.NDFrame.__hash__(self)
pandas.core.generic.NDFrame.__init__(self,data:BlockManager,axes:Optional[List[Index]]=None,copy:bool=False,dtype:Optional[Dtype]=None,attrs:Optional[Mapping[Optional[Hashable],Any]]=None,fastpath:bool=False)
pandas.core.generic.NDFrame.__invert__(self)
pandas.core.generic.NDFrame.__iter__(self)
pandas.core.generic.NDFrame.__len__(self)->int
pandas.core.generic.NDFrame.__neg__(self)
pandas.core.generic.NDFrame.__nonzero__(self)
pandas.core.generic.NDFrame.__pos__(self)
pandas.core.generic.NDFrame.__repr__(self)->str
pandas.core.generic.NDFrame.__round__(self:FrameOrSeries,decimals:int=0)->FrameOrSeries
pandas.core.generic.NDFrame.__setattr__(self,name:str,value)->None
pandas.core.generic.NDFrame.__setstate__(self,state)
pandas.core.generic.NDFrame._add_numeric_operations(cls)
pandas.core.generic.NDFrame._add_series_or_dataframe_operations(cls)
pandas.core.generic.NDFrame._agg_by_level(self,name,axis=0,level=0,skipna=True,**kwargs)
pandas.core.generic.NDFrame._align_frame(self,other,join='outer',axis=None,level=None,copy:bool_t=True,fill_value=None,method=None,limit=None,fill_axis=0)
pandas.core.generic.NDFrame._align_series(self,other,join='outer',axis=None,level=None,copy:bool_t=True,fill_value=None,method=None,limit=None,fill_axis=0)
pandas.core.generic.NDFrame._box_item_values(self,key,values)
pandas.core.generic.NDFrame._check_inplace_setting(self,value)->bool_t
pandas.core.generic.NDFrame._check_is_chained_assignment_possible(self)->bool_t
pandas.core.generic.NDFrame._check_label_or_level_ambiguity(self,key,axis:int=0)->None
pandas.core.generic.NDFrame._check_setitem_copy(self,stacklevel=4,t='setting',force=False)
pandas.core.generic.NDFrame._clear_item_cache(self)->None
pandas.core.generic.NDFrame._clip_with_one_bound(self,threshold,method,axis,inplace)
pandas.core.generic.NDFrame._clip_with_scalar(self,lower,upper,inplace:bool_t=False)
pandas.core.generic.NDFrame._consolidate(self,inplace:bool_t=False)
pandas.core.generic.NDFrame._consolidate_inplace(self)->None
pandas.core.generic.NDFrame._construct_axes_dict(self,axes=None,**kwargs)
pandas.core.generic.NDFrame._construct_axes_dict_from(self,axes,**kwargs)
pandas.core.generic.NDFrame._construct_axes_from_arguments(self,args,kwargs,require_all:bool=False,sentinel=None)
pandas.core.generic.NDFrame._constructor(self:FrameOrSeries)->Type[FrameOrSeries]
pandas.core.generic.NDFrame._constructor_expanddim(self)
pandas.core.generic.NDFrame._constructor_sliced(self)
pandas.core.generic.NDFrame._convert(self:FrameOrSeries,datetime:bool_t=False,numeric:bool_t=False,timedelta:bool_t=False,coerce:bool_t=False,copy:bool_t=True)->FrameOrSeries
pandas.core.generic.NDFrame._create_indexer(cls,name:str,indexer)->None
pandas.core.generic.NDFrame._dir_additions(self)
pandas.core.generic.NDFrame._drop_axis(self:FrameOrSeries,labels,axis,level=None,errors:str='raise')->FrameOrSeries
pandas.core.generic.NDFrame._drop_labels_or_levels(self,keys,axis:int=0)
pandas.core.generic.NDFrame._find_valid_index(self,how:str)
pandas.core.generic.NDFrame._from_axes(cls:Type[FrameOrSeries],data,axes,**kwargs)->FrameOrSeries
pandas.core.generic.NDFrame._get_axis(self,axis)
pandas.core.generic.NDFrame._get_axis_name(cls,axis)
pandas.core.generic.NDFrame._get_axis_number(cls,axis)
pandas.core.generic.NDFrame._get_axis_resolvers(self,axis:str)->Dict[str, ABCSeries]
pandas.core.generic.NDFrame._get_block_manager_axis(cls,axis)
pandas.core.generic.NDFrame._get_bool_data(self)
pandas.core.generic.NDFrame._get_cacher(self)
pandas.core.generic.NDFrame._get_cleaned_column_resolvers(self)->Dict[str, ABCSeries]
pandas.core.generic.NDFrame._get_index_resolvers(self)->Dict[str, ABCSeries]
pandas.core.generic.NDFrame._get_item_cache(self,item)
pandas.core.generic.NDFrame._get_label_or_level_values(self,key:str,axis:int=0)->np.ndarray
pandas.core.generic.NDFrame._get_numeric_data(self)
pandas.core.generic.NDFrame._get_values(self)->np.ndarray
pandas.core.generic.NDFrame._iget_item_cache(self,item)
pandas.core.generic.NDFrame._indexed_same(self,other)->bool
pandas.core.generic.NDFrame._info_axis(self)
pandas.core.generic.NDFrame._init_mgr(self,mgr,axes=None,dtype=None,copy=False)
pandas.core.generic.NDFrame._internal_get_values(self)->np.ndarray
pandas.core.generic.NDFrame._is_cached(self)->bool_t
pandas.core.generic.NDFrame._is_datelike_mixed_type(self)
pandas.core.generic.NDFrame._is_label_or_level_reference(self,key:str,axis:int=0)->bool_t
pandas.core.generic.NDFrame._is_label_reference(self,key,axis=0)->bool_t
pandas.core.generic.NDFrame._is_level_reference(self,key,axis=0)
pandas.core.generic.NDFrame._is_mixed_type(self)
pandas.core.generic.NDFrame._is_numeric_mixed_type(self)
pandas.core.generic.NDFrame._is_view(self)
pandas.core.generic.NDFrame._maybe_cache_changed(self,item,value)->None
pandas.core.generic.NDFrame._maybe_update_cacher(self,clear:bool_t=False,verify_is_copy:bool_t=True)->None
pandas.core.generic.NDFrame._needs_reindex_multi(self,axes,method,level)->bool_t
pandas.core.generic.NDFrame._obj_with_exclusions(self:FrameOrSeries)->FrameOrSeries
pandas.core.generic.NDFrame._protect_consolidate(self,f)
pandas.core.generic.NDFrame._reindex_axes(self:FrameOrSeries,axes,level,limit,tolerance,method,fill_value,copy)->FrameOrSeries
pandas.core.generic.NDFrame._reindex_multi(self,axes,copy,fill_value)
pandas.core.generic.NDFrame._reindex_with_indexers(self:FrameOrSeries,reindexers,fill_value=None,copy:bool_t=False,allow_dups:bool_t=False)->FrameOrSeries
pandas.core.generic.NDFrame._repr_data_resource_(self)
pandas.core.generic.NDFrame._repr_latex_(self)
pandas.core.generic.NDFrame._reset_cacher(self)->None
pandas.core.generic.NDFrame._selected_obj(self:FrameOrSeries)->FrameOrSeries
pandas.core.generic.NDFrame._set_as_cached(self,item,cacher)->None
pandas.core.generic.NDFrame._set_axis(self,axis,labels)->None
pandas.core.generic.NDFrame._set_axis_name(self,name,axis=0,inplace=False)
pandas.core.generic.NDFrame._set_is_copy(self,ref=None,copy:bool_t=True)->None
pandas.core.generic.NDFrame._set_item(self,key,value)->None
pandas.core.generic.NDFrame._setup_axes(cls,axes:List[str],docs:Dict[str,str])->None
pandas.core.generic.NDFrame._slice(self:FrameOrSeries,slobj:slice,axis=0,kind=None)->FrameOrSeries
pandas.core.generic.NDFrame._stat_axis(self)
pandas.core.generic.NDFrame._take_with_is_copy(self:FrameOrSeries,indices,axis=0,**kwargs)->FrameOrSeries
pandas.core.generic.NDFrame._to_dict_of_blocks(self,copy:bool_t=True)
pandas.core.generic.NDFrame._update_inplace(self,result,verify_is_copy:bool_t=True)->None
pandas.core.generic.NDFrame._validate_dtype(self,dtype)
pandas.core.generic.NDFrame._values(self)->np.ndarray
pandas.core.generic.NDFrame._where(self,cond,other=np.nan,inplace=False,axis=None,level=None,errors='raise',try_cast=False)
pandas.core.generic.NDFrame.abs(self:FrameOrSeries)->FrameOrSeries
pandas.core.generic.NDFrame.add_prefix(self:FrameOrSeries,prefix:str)->FrameOrSeries
pandas.core.generic.NDFrame.add_suffix(self:FrameOrSeries,suffix:str)->FrameOrSeries
pandas.core.generic.NDFrame.align(self,other,join='outer',axis=None,level=None,copy=True,fill_value=None,method=None,limit=None,fill_axis=0,broadcast_axis=None)
pandas.core.generic.NDFrame.asfreq(self:FrameOrSeries,freq,method=None,how:Optional[str]=None,normalize:bool_t=False,fill_value=None)->FrameOrSeries
pandas.core.generic.NDFrame.asof(self,where,subset=None)
pandas.core.generic.NDFrame.astype(self:FrameOrSeries,dtype,copy:bool_t=True,errors:str='raise')->FrameOrSeries
pandas.core.generic.NDFrame.at_time(self:FrameOrSeries,time,asof:bool_t=False,axis=None)->FrameOrSeries
pandas.core.generic.NDFrame.attrs(self)->Dict[Optional[Hashable], Any]
pandas.core.generic.NDFrame.attrs(self,value:Mapping[Optional[Hashable],Any])->None
pandas.core.generic.NDFrame.axes(self)->List[Index]
pandas.core.generic.NDFrame.between_time(self:FrameOrSeries,start_time,end_time,include_start:bool_t=True,include_end:bool_t=True,axis=None)->FrameOrSeries
pandas.core.generic.NDFrame.bfill(self:FrameOrSeries,axis=None,inplace:bool_t=False,limit=None,downcast=None)->Optional[FrameOrSeries]
pandas.core.generic.NDFrame.bool(self)
pandas.core.generic.NDFrame.clip(self:FrameOrSeries,lower=None,upper=None,axis=None,inplace:bool_t=False,*args,**kwargs)->FrameOrSeries
pandas.core.generic.NDFrame.convert_dtypes(self:FrameOrSeries,infer_objects:bool_t=True,convert_string:bool_t=True,convert_integer:bool_t=True,convert_boolean:bool_t=True)->FrameOrSeries
pandas.core.generic.NDFrame.copy(self:FrameOrSeries,deep:bool_t=True)->FrameOrSeries
pandas.core.generic.NDFrame.describe(self:FrameOrSeries,percentiles=None,include=None,exclude=None)->FrameOrSeries
pandas.core.generic.NDFrame.drop(self,labels=None,axis=0,index=None,columns=None,level=None,inplace:bool_t=False,errors:str='raise')
pandas.core.generic.NDFrame.droplevel(self:FrameOrSeries,level,axis=0)->FrameOrSeries
pandas.core.generic.NDFrame.dtypes(self)
pandas.core.generic.NDFrame.empty(self)->bool_t
pandas.core.generic.NDFrame.equals(self,other)
pandas.core.generic.NDFrame.ffill(self:FrameOrSeries,axis=None,inplace:bool_t=False,limit=None,downcast=None)->Optional[FrameOrSeries]
pandas.core.generic.NDFrame.fillna(self:FrameOrSeries,value=None,method=None,axis=None,inplace:bool_t=False,limit=None,downcast=None)->Optional[FrameOrSeries]
pandas.core.generic.NDFrame.filter(self:FrameOrSeries,items=None,like:Optional[str]=None,regex:Optional[str]=None,axis=None)->FrameOrSeries
pandas.core.generic.NDFrame.first(self:FrameOrSeries,offset)->FrameOrSeries
pandas.core.generic.NDFrame.first_valid_index(self)
pandas.core.generic.NDFrame.get(self,key,default=None)
pandas.core.generic.NDFrame.head(self:FrameOrSeries,n:int=5)->FrameOrSeries
pandas.core.generic.NDFrame.infer_objects(self:FrameOrSeries)->FrameOrSeries
pandas.core.generic.NDFrame.interpolate(self,method='linear',axis=0,limit=None,inplace=False,limit_direction='forward',limit_area=None,downcast=None,**kwargs)
pandas.core.generic.NDFrame.isna(self:FrameOrSeries)->FrameOrSeries
pandas.core.generic.NDFrame.isnull(self:FrameOrSeries)->FrameOrSeries
pandas.core.generic.NDFrame.items(self)
pandas.core.generic.NDFrame.iteritems(self)
pandas.core.generic.NDFrame.keys(self)
pandas.core.generic.NDFrame.last(self:FrameOrSeries,offset)->FrameOrSeries
pandas.core.generic.NDFrame.last_valid_index(self)
pandas.core.generic.NDFrame.mask(self,cond,other=np.nan,inplace=False,axis=None,level=None,errors='raise',try_cast=False)
pandas.core.generic.NDFrame.ndim(self)->int
pandas.core.generic.NDFrame.notna(self:FrameOrSeries)->FrameOrSeries
pandas.core.generic.NDFrame.notnull(self:FrameOrSeries)->FrameOrSeries
pandas.core.generic.NDFrame.pct_change(self:FrameOrSeries,periods=1,fill_method='pad',limit=None,freq=None,**kwargs)->FrameOrSeries
pandas.core.generic.NDFrame.pipe(self,func,*args,**kwargs)
pandas.core.generic.NDFrame.pop(self:FrameOrSeries,item)->FrameOrSeries
pandas.core.generic.NDFrame.rank(self:FrameOrSeries,axis=0,method:str='average',numeric_only:Optional[bool_t]=None,na_option:str='keep',ascending:bool_t=True,pct:bool_t=False)->FrameOrSeries
pandas.core.generic.NDFrame.reindex(self:FrameOrSeries,*args,**kwargs)->FrameOrSeries
pandas.core.generic.NDFrame.reindex_like(self:FrameOrSeries,other,method:Optional[str]=None,copy:bool_t=True,limit=None,tolerance=None)->FrameOrSeries
pandas.core.generic.NDFrame.rename(self:FrameOrSeries,mapper:Optional[Renamer]=None,*,index:Optional[Renamer]=None,columns:Optional[Renamer]=None,axis:Optional[Axis]=None,copy:bool=True,inplace:bool=False,level:Optional[Level]=None,errors:str='ignore')->Optional[FrameOrSeries]
pandas.core.generic.NDFrame.rename_axis(self,mapper=lib.no_default,**kwargs)
pandas.core.generic.NDFrame.replace(self,to_replace=None,value=None,inplace=False,limit=None,regex=False,method='pad')
pandas.core.generic.NDFrame.resample(self,rule,axis=0,closed:Optional[str]=None,label:Optional[str]=None,convention:str='start',kind:Optional[str]=None,loffset=None,base:int=0,on=None,level=None)
pandas.core.generic.NDFrame.sample(self:FrameOrSeries,n=None,frac=None,replace=False,weights=None,random_state=None,axis=None)->FrameOrSeries
pandas.core.generic.NDFrame.set_axis(self,labels,axis=0,inplace=False)
pandas.core.generic.NDFrame.shape(self)->Tuple[int, ...]
pandas.core.generic.NDFrame.shift(self:FrameOrSeries,periods=1,freq=None,axis=0,fill_value=None)->FrameOrSeries
pandas.core.generic.NDFrame.size(self)
pandas.core.generic.NDFrame.slice_shift(self:FrameOrSeries,periods:int=1,axis=0)->FrameOrSeries
pandas.core.generic.NDFrame.sort_index(self,axis=0,level=None,ascending:bool_t=True,inplace:bool_t=False,kind:str='quicksort',na_position:str='last',sort_remaining:bool_t=True,ignore_index:bool_t=False)
pandas.core.generic.NDFrame.sort_values(self,by=None,axis=0,ascending=True,inplace:bool_t=False,kind:str='quicksort',na_position:str='last',ignore_index:bool_t=False)
pandas.core.generic.NDFrame.squeeze(self,axis=None)
pandas.core.generic.NDFrame.swapaxes(self:FrameOrSeries,axis1,axis2,copy=True)->FrameOrSeries
pandas.core.generic.NDFrame.swaplevel(self:FrameOrSeries,i=-2,j=-1,axis=0)->FrameOrSeries
pandas.core.generic.NDFrame.tail(self:FrameOrSeries,n:int=5)->FrameOrSeries
pandas.core.generic.NDFrame.take(self:FrameOrSeries,indices,axis=0,is_copy:Optional[bool_t]=None,**kwargs)->FrameOrSeries
pandas.core.generic.NDFrame.to_clipboard(self,excel:bool_t=True,sep:Optional[str]=None,**kwargs)->None
pandas.core.generic.NDFrame.to_csv(self,path_or_buf:Optional[FilePathOrBuffer]=None,sep:str=',',na_rep:str='',float_format:Optional[str]=None,columns:Optional[Sequence[Optional[Hashable]]]=None,header:Union[bool_t,List[str]]=True,index:bool_t=True,index_label:Optional[Union[bool_t,str,Sequence[Optional[Hashable]]]]=None,mode:str='w',encoding:Optional[str]=None,compression:Optional[Union[str,Mapping[str,str]]]='infer',quoting:Optional[int]=None,quotechar:str='"',line_terminator:Optional[str]=None,chunksize:Optional[int]=None,date_format:Optional[str]=None,doublequote:bool_t=True,escapechar:Optional[str]=None,decimal:Optional[str]='.')->Optional[str]
pandas.core.generic.NDFrame.to_excel(self,excel_writer,sheet_name='Sheet1',na_rep='',float_format=None,columns=None,header=True,index=True,index_label=None,startrow=0,startcol=0,engine=None,merge_cells=True,encoding=None,inf_rep='inf',verbose=True,freeze_panes=None)->None
pandas.core.generic.NDFrame.to_hdf(self,path_or_buf,key:str,mode:str='a',complevel:Optional[int]=None,complib:Optional[str]=None,append:bool_t=False,format:Optional[str]=None,index:bool_t=True,min_itemsize:Optional[Union[int,Dict[str,int]]]=None,nan_rep=None,dropna:Optional[bool_t]=None,data_columns:Optional[List[str]]=None,errors:str='strict',encoding:str='UTF-8')->None
pandas.core.generic.NDFrame.to_json(self,path_or_buf:Optional[FilePathOrBuffer]=None,orient:Optional[str]=None,date_format:Optional[str]=None,double_precision:int=10,force_ascii:bool_t=True,date_unit:str='ms',default_handler:Optional[Callable[[Any],JSONSerializable]]=None,lines:bool_t=False,compression:Optional[str]='infer',index:bool_t=True,indent:Optional[int]=None)->Optional[str]
pandas.core.generic.NDFrame.to_latex(self,buf=None,columns=None,col_space=None,header=True,index=True,na_rep='NaN',formatters=None,float_format=None,sparsify=None,index_names=True,bold_rows=False,column_format=None,longtable=None,escape=None,encoding=None,decimal='.',multicolumn=None,multicolumn_format=None,multirow=None,caption=None,label=None)
pandas.core.generic.NDFrame.to_pickle(self,path,compression:Optional[str]='infer',protocol:int=pickle.HIGHEST_PROTOCOL)->None
pandas.core.generic.NDFrame.to_sql(self,name:str,con,schema=None,if_exists:str='fail',index:bool_t=True,index_label=None,chunksize=None,dtype=None,method=None)->None
pandas.core.generic.NDFrame.to_xarray(self)
pandas.core.generic.NDFrame.transform(self,func,*args,**kwargs)
pandas.core.generic.NDFrame.truncate(self:FrameOrSeries,before=None,after=None,axis=None,copy:bool_t=True)->FrameOrSeries
pandas.core.generic.NDFrame.tshift(self:FrameOrSeries,periods:int=1,freq=None,axis=0)->FrameOrSeries
pandas.core.generic.NDFrame.tz_convert(self:FrameOrSeries,tz,axis=0,level=None,copy:bool_t=True)->FrameOrSeries
pandas.core.generic.NDFrame.tz_localize(self:FrameOrSeries,tz,axis=0,level=None,copy:bool_t=True,ambiguous='raise',nonexistent:str='raise')->FrameOrSeries
pandas.core.generic.NDFrame.values(self)->np.ndarray
pandas.core.generic.NDFrame.where(self,cond,other=np.nan,inplace=False,axis=None,level=None,errors='raise',try_cast=False)
pandas.core.generic.NDFrame.xs(self,key,axis=0,level=None,drop_level:bool_t=True)
pandas.core.generic._doc_parms(cls)
pandas.core.generic._make_cum_function(cls,name,name1,name2,axis_descr,desc,accum_func,accum_func_name,mask_a,mask_b,examples)
pandas.core.generic._make_logical_function(cls,name,name1,name2,axis_descr,desc,f,see_also,examples,empty_value)
pandas.core.generic._make_min_count_stat_function(cls,name,name1,name2,axis_descr,desc,f,see_also:str='',examples:str='')
pandas.core.generic._make_stat_function(cls,name,name1,name2,axis_descr,desc,f,see_also:str='',examples:str='')
pandas.core.generic._make_stat_function_ddof(cls,name,name1,name2,axis_descr,desc,f)
pandas.core.generic._single_replace(self,to_replace,method,inplace,limit)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/index.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/config_init.py----------------------------------------
A:pandas.core.config_init.ip->get_ipython()
A:pandas.core.config_init.value->pandas._config.config.get_option(key)
pandas.core.config_init.is_terminal()->bool
pandas.core.config_init.register_converter_cb(key)
pandas.core.config_init.register_plotting_backend_cb(key)
pandas.core.config_init.table_schema_cb(key)
pandas.core.config_init.use_bottleneck_cb(key)
pandas.core.config_init.use_inf_as_na_cb(key)
pandas.core.config_init.use_numexpr_cb(key)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/indexers.py----------------------------------------
A:pandas.core.indexers.indexer->numpy.asarray(indexer, dtype=np.intp)
A:pandas.core.indexers.min_idx->indices.copy().min()
A:pandas.core.indexers.max_idx->indices.copy().max()
A:pandas.core.indexers.indices->indices.copy().copy()
A:pandas.core.indexers.target_len->len(target)
pandas.core.indexers.check_array_indexer(array:AnyArrayLike,indexer:Any)->Any
pandas.core.indexers.check_setitem_lengths(indexer,value,values)->None
pandas.core.indexers.deprecate_ndim_indexing(result)
pandas.core.indexers.is_empty_indexer(indexer,arr_value:np.ndarray)->bool
pandas.core.indexers.is_list_like_indexer(key)->bool
pandas.core.indexers.is_scalar_indexer(indexer,arr_value)->bool
pandas.core.indexers.length_of_indexer(indexer,target=None)->int
pandas.core.indexers.maybe_convert_indices(indices,n:int)
pandas.core.indexers.validate_indices(indices:np.ndarray,n:int)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/series.py----------------------------------------
A:pandas.core.series._shared_doc_kwargs->dict(axes='index', klass='Series', axes_single_arg="{0 or 'index'}", axis="axis : {0 or 'index'}\n        Parameter needed for compatibility with DataFrame.", inplace='inplace : boolean, default False\n        If True, performs operation inplace and returns None.', unique='np.ndarray', duplicated='Series', optional_by='', optional_mapper='', optional_labels='', optional_axis='', versionadded_to_excel='\n    .. versionadded:: 0.20.0\n')
A:pandas.core.series.hasnans->property(base.IndexOpsMixin.hasnans.func, doc=base.IndexOpsMixin.hasnans.__doc__)
A:pandas.core.series.data->numpy.empty(nd_state[1], dtype=nd_state[2])
A:pandas.core.series.name->pandas.core.ops.get_op_result_name(self, other)
A:pandas.core.series.index->pandas.core.indexes.base.default_index(len(data))
A:pandas.core.series.dtype->self._validate_dtype(dtype)
A:pandas.core.series.(data, index)->self._init_dict(data, index, dtype)
A:pandas.core.series.(keys, values)->zip(*data.items())
A:pandas.core.series.values->na_value_for_dtype(dtype)
A:pandas.core.series.s->s.reindex(index, copy=False).reindex(index, copy=False)
A:pandas.core.series.labels->pandas.core.indexes.base.default_index(len(data))._sort_levels_monotonic()
A:pandas.core.series.cls->type(self)
A:pandas.core.series.result->remove_na_arraylike(self)
A:pandas.core.series.types->tuple((type(x) for x in inputs))
A:pandas.core.series.inputs->tuple((extract_array(x, extract_numpy=True) for x in inputs))
A:pandas.core.series.__float__->_coerce_method(float)
A:pandas.core.series.__long__->_coerce_method(int)
A:pandas.core.series.__int__->_coerce_method(int)
A:pandas.core.series.self._data->self._data.putmask(mask=mask, new=other, inplace=True)
A:pandas.core.series.indices->maybe_convert_indices(indices, len(self._get_axis(axis)))
A:pandas.core.series.new_index->self.index.to_period(freq=freq)
A:pandas.core.series.new_values->new_values.copy().copy()
A:pandas.core.series.slobj->self.index._convert_slice_indexer(slobj, kind=kind or 'getitem')
A:pandas.core.series.key->pandas.core.common.asarray_tuplesafe(key)
A:pandas.core.series.new_key->self.index._convert_scalar_indexer(key, kind='getitem')
A:pandas.core.series.key_type->pandas._libs.lib.infer_dtype(key, skipna=False)
A:pandas.core.series.(indexer, new_index)->self.index.get_loc_level(key)
A:pandas.core.series.cacher_needs_updating->self._check_is_chained_assignment_possible()
A:pandas.core.series.indexer->ensure_platform_int(indexer)
A:pandas.core.series.inplace->validate_bool_kwarg(inplace, 'inplace')
A:pandas.core.series.df->self.to_frame()
A:pandas.core.series.buf->StringIO('')
A:pandas.core.series.(width, height)->get_terminal_size()
A:pandas.core.series.show_dimensions->get_option('display.show_dimensions')
A:pandas.core.series.formatter->pandas.io.formats.format.SeriesFormatter(self, name=name, length=length, header=header, index=index, dtype=dtype, na_rep=na_rep, float_format=float_format, min_rows=min_rows, max_rows=max_rows)
A:pandas.core.series.into_c->pandas.core.common.standardize_mapping(into)
A:pandas.core.series.axis->self._get_axis_number(axis)
A:pandas.core.series.level->self.index._get_level_number(level)
A:pandas.core.series.level_codes->numpy.array(self.index.codes[level], subok=False, copy=True)
A:pandas.core.series.level_codes[mask]cnt->len(lev)
A:pandas.core.series.lev->lev.insert(cnt, lev._na_value).insert(cnt, lev._na_value)
A:pandas.core.series.out->numpy.bincount(obs, minlength=len(lev) or None)
A:pandas.core.series.skipna->pandas.compat.numpy.function.validate_argmax_with_skipna(skipna, args, kwargs)
A:pandas.core.series.i->pandas.core.nanops.nanargmax(com.values_from_object(self), skipna=skipna)
A:pandas.core.series.(this, other)->self.align(other, level=level, join='outer', copy=False)
A:pandas.core.series.common->self.index.union(other.index)
A:pandas.core.series.left->self.reindex(index=common, copy=False)
A:pandas.core.series.right->other.reindex_like(self).reindex(index=common, copy=False)
A:pandas.core.series.rvals->numpy.asarray(other)
A:pandas.core.series.(this_vals, other_vals)->pandas.core.ops.fill_binop(this.values, other.values, fill_value)
A:pandas.core.series.ret->pandas.core.ops._construct_result(self, result, new_index, name)
A:pandas.core.series.fill_value->na_value_for_dtype(self.dtype, compat=False)
A:pandas.core.series.new_name->pandas.core.ops.get_op_result_name(self, other)
A:pandas.core.series.lv->self.get(idx, fill_value)
A:pandas.core.series.rv->other.reindex_like(self).get(idx, fill_value)
A:pandas.core.series.this->self.reindex(new_index, copy=False)
A:pandas.core.series.other->other.reindex_like(self).reindex_like(self)
A:pandas.core.series.mask->isna(values)
A:pandas.core.series.sorted_index->numpy.empty(len(self), dtype=np.int32)
A:pandas.core.series.bad->isna(arr)
A:pandas.core.series.idx->pandas.core.indexes.base.default_index(len(self))
A:pandas.core.series.argsorted->_try_kind_sort(arr[good])
A:pandas.core.series.n->isna(arr).sum()
A:pandas.core.series.result.index->remove_na_arraylike(self).index.reorder_levels(order)
A:pandas.core.series.(new_index, indexer)->pandas.core.indexes.base.default_index(len(data)).sortlevel(level, ascending=ascending, sort_remaining=sort_remaining)
A:pandas.core.series.result[notmask]->numpy.argsort(values[notmask], kind=kind)
A:pandas.core.series.(values, counts)->pandas._libs.reshape.explode(np.asarray(self.array))
A:pandas.core.series._agg_see_also_doc->dedent('\n    See Also\n    --------\n    Series.apply : Invoke function on a Series.\n    Series.transform : Transform function producing a Series with like indexes.\n    ')
A:pandas.core.series._agg_examples_doc->dedent("\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> s\n    0    1\n    1    2\n    2    3\n    3    4\n    dtype: int64\n\n    >>> s.agg('min')\n    1\n\n    >>> s.agg(['min', 'max'])\n    min   1\n    max   4\n    dtype: int64\n    ")
A:pandas.core.series.(result, how)->self._aggregate(func, *args, **kwargs)
A:pandas.core.series.mapped->pandas._libs.lib.map_infer(values, f, convert=convert_dtype)
A:pandas.core.series.delegate->TimedeltaIndex(delegate)
A:pandas.core.series.v->super().memory_usage(deep=deep)
A:pandas.core.series.input_series->input_series.copy().copy()
A:pandas.core.series.inferred_dtype->convert_dtypes(input_series._values, convert_string, convert_integer, convert_boolean)
A:pandas.core.series.str->CachedAccessor('str', StringMethods)
A:pandas.core.series.dt->CachedAccessor('dt', CombinedDatetimelikeProperties)
A:pandas.core.series.cat->CachedAccessor('cat', CategoricalAccessor)
A:pandas.core.series.plot->CachedAccessor('plot', pandas.plotting.PlotAccessor)
A:pandas.core.series.sparse->CachedAccessor('sparse', SparseAccessor)
pandas.core.series.Series(self,data=None,index=None,dtype=None,name=None,copy=False,fastpath=False)
pandas.core.series.Series.__array__(self,dtype=None)->np.ndarray
pandas.core.series.Series.__array_ufunc__(self,ufunc:Callable,method:str,*inputs:Any,**kwargs:Any)
pandas.core.series.Series.__getitem__(self,key)
pandas.core.series.Series.__init__(self,data=None,index=None,dtype=None,name=None,copy=False,fastpath=False)
pandas.core.series.Series.__len__(self)->int
pandas.core.series.Series.__matmul__(self,other)
pandas.core.series.Series.__repr__(self)->str
pandas.core.series.Series.__rmatmul__(self,other)
pandas.core.series.Series.__setitem__(self,key,value)
pandas.core.series.Series._binop(self,other,func,level=None,fill_value=None)
pandas.core.series.Series._can_hold_na(self)
pandas.core.series.Series._constructor(self)
pandas.core.series.Series._constructor_expanddim(self)
pandas.core.series.Series._convert_dtypes(self:ABCSeries,infer_objects:bool=True,convert_string:bool=True,convert_integer:bool=True,convert_boolean:bool=True)->'Series'
pandas.core.series.Series._get_value(self,label,takeable:bool=False)
pandas.core.series.Series._get_values(self,indexer)
pandas.core.series.Series._get_values_tuple(self,key)
pandas.core.series.Series._get_with(self,key)
pandas.core.series.Series._gotitem(self,key,ndim,subset=None)
pandas.core.series.Series._init_dict(self,data,index=None,dtype=None)
pandas.core.series.Series._internal_get_values(self)
pandas.core.series.Series._is_mixed_type(self)
pandas.core.series.Series._ixs(self,i:int,axis:int=0)
pandas.core.series.Series._needs_reindex_multi(self,axes,method,level)
pandas.core.series.Series._reduce(self,op,name,axis=0,skipna=True,numeric_only=None,filter_type=None,**kwds)
pandas.core.series.Series._reindex_indexer(self,new_index,indexer,copy)
pandas.core.series.Series._set_axis(self,axis,labels,fastpath=False)
pandas.core.series.Series._set_labels(self,key,value)
pandas.core.series.Series._set_name(self,name,inplace=False)
pandas.core.series.Series._set_subtyp(self,is_all_dates)
pandas.core.series.Series._set_value(self,label,value,takeable:bool=False)
pandas.core.series.Series._set_values(self,key,value)
pandas.core.series.Series._set_with(self,key,value)
pandas.core.series.Series._set_with_engine(self,key,value)
pandas.core.series.Series._slice(self,slobj:slice,axis:int=0,kind=None)
pandas.core.series.Series._take_with_is_copy(self,indices,axis=0,**kwargs)
pandas.core.series.Series._unpickle_series_compat(self,state)
pandas.core.series.Series._update_inplace(self,result,**kwargs)
pandas.core.series.Series._values(self)
pandas.core.series.Series.aggregate(self,func,axis=0,*args,**kwargs)
pandas.core.series.Series.align(self,other,join='outer',axis=None,level=None,copy=True,fill_value=None,method=None,limit=None,fill_axis=0,broadcast_axis=None)
pandas.core.series.Series.append(self,to_append,ignore_index=False,verify_integrity=False)
pandas.core.series.Series.apply(self,func,convert_dtype=True,args=(),**kwds)
pandas.core.series.Series.argsort(self,axis=0,kind='quicksort',order=None)
pandas.core.series.Series.array(self)->ExtensionArray
pandas.core.series.Series.autocorr(self,lag=1)
pandas.core.series.Series.axes(self)
pandas.core.series.Series.between(self,left,right,inclusive=True)
pandas.core.series.Series.combine(self,other,func,fill_value=None)
pandas.core.series.Series.combine_first(self,other)
pandas.core.series.Series.corr(self,other,method='pearson',min_periods=None)
pandas.core.series.Series.count(self,level=None)
pandas.core.series.Series.cov(self,other,min_periods=None)
pandas.core.series.Series.diff(self,periods=1)
pandas.core.series.Series.dot(self,other)
pandas.core.series.Series.drop(self,labels=None,axis=0,index=None,columns=None,level=None,inplace=False,errors='raise')
pandas.core.series.Series.drop_duplicates(self,keep='first',inplace=False)
pandas.core.series.Series.dropna(self,axis=0,inplace=False,how=None)
pandas.core.series.Series.dtype(self)
pandas.core.series.Series.dtypes(self)
pandas.core.series.Series.duplicated(self,keep='first')
pandas.core.series.Series.explode(self)->'Series'
pandas.core.series.Series.fillna(self,value=None,method=None,axis=None,inplace=False,limit=None,downcast=None)->Optional['Series']
pandas.core.series.Series.groupby(self,by=None,axis=0,level=None,as_index:bool=True,sort:bool=True,group_keys:bool=True,squeeze:bool=False,observed:bool=False)->'groupby_generic.SeriesGroupBy'
pandas.core.series.Series.idxmax(self,axis=0,skipna=True,*args,**kwargs)
pandas.core.series.Series.idxmin(self,axis=0,skipna=True,*args,**kwargs)
pandas.core.series.Series.isin(self,values)
pandas.core.series.Series.isna(self)
pandas.core.series.Series.isnull(self)
pandas.core.series.Series.items(self)
pandas.core.series.Series.iteritems(self)
pandas.core.series.Series.keys(self)
pandas.core.series.Series.map(self,arg,na_action=None)
pandas.core.series.Series.memory_usage(self,index=True,deep=False)
pandas.core.series.Series.mode(self,dropna=True)
pandas.core.series.Series.name(self)->Optional[Hashable]
pandas.core.series.Series.name(self,value:Optional[Hashable])->None
pandas.core.series.Series.nlargest(self,n=5,keep='first')
pandas.core.series.Series.notna(self)
pandas.core.series.Series.notnull(self)
pandas.core.series.Series.nsmallest(self,n=5,keep='first')
pandas.core.series.Series.quantile(self,q=0.5,interpolation='linear')
pandas.core.series.Series.ravel(self,order='C')
pandas.core.series.Series.reindex(self,index=None,**kwargs)
pandas.core.series.Series.rename(self,index=None,*,axis=None,copy=True,inplace=False,level=None,errors='ignore')
pandas.core.series.Series.reorder_levels(self,order)
pandas.core.series.Series.repeat(self,repeats,axis=None)
pandas.core.series.Series.replace(self,to_replace=None,value=None,inplace=False,limit=None,regex=False,method='pad')
pandas.core.series.Series.reset_index(self,level=None,drop=False,name=None,inplace=False)
pandas.core.series.Series.round(self,decimals=0,*args,**kwargs)
pandas.core.series.Series.searchsorted(self,value,side='left',sorter=None)
pandas.core.series.Series.shift(self,periods=1,freq=None,axis=0,fill_value=None)
pandas.core.series.Series.sort_index(self,axis=0,level=None,ascending=True,inplace=False,kind='quicksort',na_position='last',sort_remaining=True,ignore_index:bool=False)
pandas.core.series.Series.sort_values(self,axis=0,ascending=True,inplace=False,kind='quicksort',na_position='last',ignore_index=False)
pandas.core.series.Series.swaplevel(self,i=-2,j=-1,copy=True)
pandas.core.series.Series.take(self,indices,axis=0,is_copy=None,**kwargs)->'Series'
pandas.core.series.Series.to_dict(self,into=dict)
pandas.core.series.Series.to_frame(self,name=None)
pandas.core.series.Series.to_markdown(self,buf:Optional[IO[str]]=None,mode:Optional[str]=None,**kwargs)->Optional[str]
pandas.core.series.Series.to_period(self,freq=None,copy=True)
pandas.core.series.Series.to_string(self,buf=None,na_rep='NaN',float_format=None,header=True,index=True,length=False,dtype=False,name=False,max_rows=None,min_rows=None)
pandas.core.series.Series.to_timestamp(self,freq=None,how='start',copy=True)
pandas.core.series.Series.transform(self,func,axis=0,*args,**kwargs)
pandas.core.series.Series.unique(self)
pandas.core.series.Series.unstack(self,level=-1,fill_value=None)
pandas.core.series.Series.update(self,other)
pandas.core.series.Series.values(self)
pandas.core.series.Series.view(self,dtype=None)
pandas.core.series._coerce_method(converter)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/api.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/missing.py----------------------------------------
A:pandas.core.missing.(dtype, values_to_mask)->infer_dtype_from_array(values_to_mask)
A:pandas.core.missing.values_to_mask->numpy.array(values_to_mask, dtype=object)
A:pandas.core.missing.na_mask->isna(values_to_mask)
A:pandas.core.missing.mask->mask.view(np.uint8).view(np.uint8)
A:pandas.core.missing.method->clean_fill_method(method)
A:pandas.core.missing.order->kwargs.get('order')
A:pandas.core.missing.is_valid->is_valid.any(1).any(1)
A:pandas.core.missing.idxpos->is_valid[:].argmax()
A:pandas.core.missing.invalid->isna(yvalues)
A:pandas.core.missing.result->getattr(yvalues, 'values', yvalues).copy()
A:pandas.core.missing.limit_direction->limit_direction.lower().lower()
A:pandas.core.missing.limit_area->limit_area.lower().lower()
A:pandas.core.missing.limit->min(limit, N)
A:pandas.core.missing.all_nans->set(np.flatnonzero(invalid))
A:pandas.core.missing.start_nans->set(range(find_valid_index(yvalues, 'first')))
A:pandas.core.missing.end_nans->set(range(1 + find_valid_index(yvalues, 'last'), len(valid)))
A:pandas.core.missing.preserve_nans->sorted(preserve_nans)
A:pandas.core.missing.xvalues->getattr(xvalues, 'values', xvalues)
A:pandas.core.missing.yvalues->getattr(yvalues, 'values', yvalues)
A:pandas.core.missing.inds->inds.view(np.int64).view(np.int64)
A:pandas.core.missing.indexer->numpy.argsort(inds[valid])
A:pandas.core.missing.result[invalid]->_interpolate_scipy_wrapper(inds[valid], yvalues[valid], inds[invalid], method=method, fill_value=fill_value, bounds_error=bounds_error, order=order, **kwargs)
A:pandas.core.missing.new_x->new_x.copy().copy()
A:pandas.core.missing.terp->scipy.interpolate.UnivariateSpline(x, y, k=order, **kwargs)
A:pandas.core.missing.new_y->method(x, y, new_x, **kwargs)
A:pandas.core.missing.x->x.copy().copy()
A:pandas.core.missing.y->y.copy().copy()
A:pandas.core.missing.m->method(xi, yi.reshape(-1, 1), orders=order, extrapolate=extrapolate)
A:pandas.core.missing.P->scipy.interpolate.Akima1DInterpolator(xi, yi, axis=axis)
A:pandas.core.missing.values->_cast_values_for_fillna(values, dtype)
A:pandas.core.missing.(values, mask)->_fillna_prep(values, mask, dtype)
A:pandas.core.missing.N->len(invalid)
A:pandas.core.missing.f_idx->inner(invalid, fw_limit)
A:pandas.core.missing.b_idx->set(N - 1 - np.asarray(b_idx))
A:pandas.core.missing.windowed->_rolling_window(invalid, limit + 1).all(1)
pandas.core.missing._akima_interpolate(xi,yi,x,der=0,axis=0)
pandas.core.missing._cast_values_for_fillna(values,dtype)
pandas.core.missing._fillna_prep(values,mask=None,dtype=None)
pandas.core.missing._from_derivatives(xi,yi,x,order=None,der=0,extrapolate=False)
pandas.core.missing._interp_limit(invalid,fw_limit,bw_limit)
pandas.core.missing._interpolate_scipy_wrapper(x,y,new_x,method,fill_value=None,bounds_error=False,order=None,**kwargs)
pandas.core.missing._rolling_window(a,window)
pandas.core.missing.backfill_1d(values,limit=None,mask=None,dtype=None)
pandas.core.missing.backfill_2d(values,limit=None,mask=None,dtype=None)
pandas.core.missing.clean_fill_method(method,allow_nearest=False)
pandas.core.missing.clean_interp_method(method,**kwargs)
pandas.core.missing.clean_reindex_fill_method(method)
pandas.core.missing.find_valid_index(values,how:str)
pandas.core.missing.get_fill_func(method)
pandas.core.missing.interpolate_1d(xvalues,yvalues,method='linear',limit=None,limit_direction='forward',limit_area=None,fill_value=None,bounds_error=False,order=None,**kwargs)
pandas.core.missing.interpolate_2d(values,method='pad',axis=0,limit=None,fill_value=None,dtype=None)
pandas.core.missing.mask_missing(arr,values_to_mask)
pandas.core.missing.pad_1d(values,limit=None,mask=None,dtype=None)
pandas.core.missing.pad_2d(values,limit=None,mask=None,dtype=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/algorithms.py----------------------------------------
A:pandas.core.algorithms.values->numpy.asarray(values, dtype=dtype)
A:pandas.core.algorithms.asi8->numpy.asarray(values, dtype=dtype).view('i8')
A:pandas.core.algorithms.inferred->pandas._libs.lib.infer_dtype(values, skipna=False)
A:pandas.core.algorithms.(values, _)->_ensure_data(values)
A:pandas.core.algorithms.ndtype->_check_object_for_strings(values)
A:pandas.core.algorithms.htable->_hashtables.get(ndtype, _hashtables['object'])
A:pandas.core.algorithms.(htable, values)->_get_hashtable_algo(values)
A:pandas.core.algorithms.table->hash_klass(size_hint or len(values))
A:pandas.core.algorithms.uniques->Index(uniques)
A:pandas.core.algorithms.comps->comps.astype(object).astype(object)
A:pandas.core.algorithms.(comps, dtype)->_ensure_data(comps)
A:pandas.core.algorithms.(hash_klass, values)->_get_data_algo(values)
A:pandas.core.algorithms.(uniques, codes)->safe_sort(uniques, codes, na_sentinel=na_sentinel, assume_unique=True, verify=False)
A:pandas.core.algorithms.codes->ensure_platform_int(np.asarray(codes))
A:pandas.core.algorithms.(codes, uniques)->_factorize_array(values, na_sentinel=na_sentinel, size_hint=size_hint, na_value=na_value)
A:pandas.core.algorithms.(values, dtype)->_ensure_data(values)
A:pandas.core.algorithms.na_value->na_value_for_dtype(original.dtype)
A:pandas.core.algorithms.name->getattr(values, 'name', None)
A:pandas.core.algorithms.ii->cut(values, bins, include_lowest=True)
A:pandas.core.algorithms.result->arr.view('i8').searchsorted(value, side=side, sorter=sorter)
A:pandas.core.algorithms.result.index->arr.view('i8').searchsorted(value, side=side, sorter=sorter).index.astype('interval')
A:pandas.core.algorithms.counts->numpy.insert(counts, 0, mask.sum())
A:pandas.core.algorithms.(keys, counts)->f(values, dropna)
A:pandas.core.algorithms.f->getattr(htable, f'mode_{ndtype}')
A:pandas.core.algorithms.mask->isna(x)
A:pandas.core.algorithms.keys->_reconstruct_data(keys, original.dtype, original)
A:pandas.core.algorithms.ranks->pandas._libs.algos.rank_2d(values, axis=axis, ties_method=method, ascending=ascending, na_option=na_option, pct=pct)
A:pandas.core.algorithms.b2->numpy.broadcast_to(b, arr.shape)
A:pandas.core.algorithms.b2_mask->numpy.broadcast_to(b_mask, arr.shape)
A:pandas.core.algorithms.not_nan->numpy.empty(arr.shape, dtype=bool)
A:pandas.core.algorithms.to_raise->((np.iinfo(np.int64).max - b2 < arr) & not_nan).any()
A:pandas.core.algorithms.x->numpy.asarray(x)
A:pandas.core.algorithms.score->_interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)
A:pandas.core.algorithms.q->numpy.asarray(q, np.float64)
A:pandas.core.algorithms.dropped->self.obj.dropna()
A:pandas.core.algorithms.(arr, pandas_dtype)->_ensure_data(dropped.values)
A:pandas.core.algorithms.narr->len(arr)
A:pandas.core.algorithms.n->int(n)
A:pandas.core.algorithms.kth_val->pandas._libs.algos.kth_smallest(arr.copy(), n - 1)
A:pandas.core.algorithms.(ns,)->numpy.nonzero(arr <= kth_val)
A:pandas.core.algorithms.columns->list(columns)
A:pandas.core.algorithms.cur_frameframe->frame.take(indexer).reset_index(drop=True)
A:pandas.core.algorithms.indexer->ensure_int64(indexer, copy=False)
A:pandas.core.algorithms.frame->frame.take(indexer).take(indexer)
A:pandas.core.algorithms.frame.index->original_index.take(indexer)
A:pandas.core.algorithms.arr->arr.view('i8').view('i8')
A:pandas.core.algorithms.out->numpy.empty(out_shape, dtype=dtype)
A:pandas.core.algorithms.fill_value->fill_wrap(fill_value)
A:pandas.core.algorithms.row_needs->row_mask.any()
A:pandas.core.algorithms.col_needs->col_mask.any()
A:pandas.core.algorithms.needs_masking->isna(x).any()
A:pandas.core.algorithms.func->_convert_wrapper(func, out.dtype)
A:pandas.core.algorithms.indices->numpy.asarray(indices, dtype=np.intp)
A:pandas.core.algorithms.(dtype, fill_value)->maybe_promote(arr.dtype, fill_value)
A:pandas.core.algorithms.out_shape_->list(arr.shape)
A:pandas.core.algorithms.out_shape_[axis]->len(indexer)
A:pandas.core.algorithms.out_shape->tuple(out_shape_)
A:pandas.core.algorithms.row_idx->ensure_int64(row_idx)
A:pandas.core.algorithms.col_idx->ensure_int64(col_idx)
A:pandas.core.algorithms.sorter->ensure_platform_int(t.lookup(ordered))
A:pandas.core.algorithms.iinfo->numpy.iinfo(arr.dtype.type)
A:pandas.core.algorithms.value->value.to_datetime64().to_datetime64()
A:pandas.core.algorithms.dtype->numpy.dtype(dtype)
A:pandas.core.algorithms.out_arr->out_arr.astype('int64').view('timedelta64[ns]').astype('int64').view('timedelta64[ns]')
A:pandas.core.algorithms.res_indexer->tuple(_res_indexer)
A:pandas.core.algorithms.lag_indexer->tuple(_lag_indexer)
A:pandas.core.algorithms.res->res.copy().copy()
A:pandas.core.algorithms.lag->lag.copy().copy()
A:pandas.core.algorithms.(dtype, _)->infer_dtype_from_array(values)
A:pandas.core.algorithms.str_pos->numpy.array([isinstance(x, str) for x in values], dtype=bool)
A:pandas.core.algorithms.nums->numpy.sort(values[~str_pos])
A:pandas.core.algorithms.strs->numpy.sort(values[str_pos])
A:pandas.core.algorithms.ordered->sort_mixed(values)
A:pandas.core.algorithms.t->hash_klass(len(values))
A:pandas.core.algorithms.order2->ensure_platform_int(t.lookup(ordered)).argsort()
A:pandas.core.algorithms.new_codes->numpy.empty(len(sorter), dtype=np.int_).take(codes, mode='wrap')
A:pandas.core.algorithms.reverse_indexer->numpy.empty(len(sorter), dtype=np.int_)
pandas.core.algorithms.SelectN(self,obj,n:int,keep:str)
pandas.core.algorithms.SelectN.__init__(self,obj,n:int,keep:str)
pandas.core.algorithms.SelectN.is_valid_dtype_n_method(dtype)->bool
pandas.core.algorithms.SelectN.nlargest(self)
pandas.core.algorithms.SelectN.nsmallest(self)
pandas.core.algorithms.SelectNFrame(self,obj,n:int,keep:str,columns)
pandas.core.algorithms.SelectNFrame.__init__(self,obj,n:int,keep:str,columns)
pandas.core.algorithms.SelectNFrame.compute(self,method)
pandas.core.algorithms.SelectNSeries(SelectN)
pandas.core.algorithms.SelectNSeries.compute(self,method)
pandas.core.algorithms._check_object_for_strings(values)->str
pandas.core.algorithms._convert_wrapper(f,conv_dtype)
pandas.core.algorithms._ensure_arraylike(values)
pandas.core.algorithms._ensure_data(values,dtype=None)
pandas.core.algorithms._factorize_array(values,na_sentinel:int=-1,size_hint=None,na_value=None)->Tuple[np.ndarray, np.ndarray]
pandas.core.algorithms._get_data_algo(values)
pandas.core.algorithms._get_hashtable_algo(values)
pandas.core.algorithms._get_take_nd_function(ndim:int,arr_dtype,out_dtype,axis:int=0,mask_info=None)
pandas.core.algorithms._get_values_for_rank(values)
pandas.core.algorithms._reconstruct_data(values,dtype,original)
pandas.core.algorithms._take_2d_multi_object(arr,indexer,out,fill_value,mask_info)
pandas.core.algorithms._take_nd_object(arr,indexer,out,axis:int,fill_value,mask_info)
pandas.core.algorithms._value_counts_arraylike(values,dropna:bool)
pandas.core.algorithms._view_wrapper(f,arr_dtype=None,out_dtype=None,fill_wrap=None)
pandas.core.algorithms.checked_add_with_arr(arr,b,arr_mask=None,b_mask=None)
pandas.core.algorithms.diff(arr,n:int,axis:int=0,stacklevel=3)
pandas.core.algorithms.duplicated(values,keep='first')->np.ndarray
pandas.core.algorithms.factorize(values,sort:bool=False,na_sentinel:int=-1,size_hint:Optional[int]=None)->Tuple[np.ndarray, Union[np.ndarray, ABCIndex]]
pandas.core.algorithms.isin(comps,values)->np.ndarray
pandas.core.algorithms.mode(values,dropna:bool=True)->'Series'
pandas.core.algorithms.quantile(x,q,interpolation_method='fraction')
pandas.core.algorithms.rank(values,axis:int=0,method:str='average',na_option:str='keep',ascending:bool=True,pct:bool=False)
pandas.core.algorithms.safe_sort(values,codes=None,na_sentinel:int=-1,assume_unique:bool=False,verify:bool=True)->Union[np.ndarray, Tuple[np.ndarray, np.ndarray]]
pandas.core.algorithms.searchsorted(arr,value,side='left',sorter=None)
pandas.core.algorithms.take(arr,indices,axis:int=0,allow_fill:bool=False,fill_value=None)
pandas.core.algorithms.take_2d_multi(arr,indexer,fill_value=np.nan)
pandas.core.algorithms.take_nd(arr,indexer,axis:int=0,out=None,fill_value=np.nan,allow_fill:bool=True)
pandas.core.algorithms.unique(values)
pandas.core.algorithms.value_counts(values,sort:bool=True,ascending:bool=False,normalize:bool=False,bins=None,dropna:bool=True)->'Series'


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/apply.py----------------------------------------
A:pandas.core.apply.axis->obj._get_axis_number(axis)
A:pandas.core.apply.func->getattr(self.obj, self.f)
A:pandas.core.apply.sig->inspect.getfullargspec(func)
A:pandas.core.apply.results->self.obj._data.apply('apply', func=self.f)
A:pandas.core.apply.r->self.f(Series([], dtype=np.float64))
A:pandas.core.apply.result->result.infer_objects().infer_objects()
A:pandas.core.apply.result_values->numpy.empty_like(target.values)
A:pandas.core.apply.res->self.f(target[col])
A:pandas.core.apply.index->self.obj._get_axis(self.axis)
A:pandas.core.apply.empty_arr->numpy.empty(len(index), dtype=values.dtype)
A:pandas.core.apply.dummy->self.obj._constructor_sliced(empty_arr, index=index, dtype=values.dtype)
A:pandas.core.apply.(results, res_index)->self.apply_series_generator()
A:pandas.core.apply.results[i]->self.f(v)
A:pandas.core.apply.res_index->res_index.take(successes).take(successes)
pandas.core.apply.FrameApply(self,obj:'DataFrame',func,raw:bool,result_type,ignore_failures:bool,args,kwds)
pandas.core.apply.FrameApply.__init__(self,obj:'DataFrame',func,raw:bool,result_type,ignore_failures:bool,args,kwds)
pandas.core.apply.FrameApply.agg_axis(self)->'Index'
pandas.core.apply.FrameApply.apply_broadcast(self,target:'DataFrame')->'DataFrame'
pandas.core.apply.FrameApply.apply_empty_result(self)
pandas.core.apply.FrameApply.apply_raw(self)
pandas.core.apply.FrameApply.apply_series_generator(self)->Tuple[ResType, 'Index']
pandas.core.apply.FrameApply.apply_standard(self)
pandas.core.apply.FrameApply.columns(self)->'Index'
pandas.core.apply.FrameApply.dtypes(self)->'Series'
pandas.core.apply.FrameApply.get_result(self)
pandas.core.apply.FrameApply.index(self)->'Index'
pandas.core.apply.FrameApply.res_columns(self)->'Index'
pandas.core.apply.FrameApply.result_columns(self)->'Index'
pandas.core.apply.FrameApply.result_index(self)->'Index'
pandas.core.apply.FrameApply.series_generator(self)->Iterator['Series']
pandas.core.apply.FrameApply.values(self)
pandas.core.apply.FrameApply.wrap_results(self,results:ResType,res_index:'Index')->Union['Series', 'DataFrame']
pandas.core.apply.FrameApply.wrap_results_for_axis(self,results:ResType,res_index:'Index')->Union['Series', 'DataFrame']
pandas.core.apply.FrameColumnApply(FrameApply)
pandas.core.apply.FrameColumnApply.apply_broadcast(self,target:'DataFrame')->'DataFrame'
pandas.core.apply.FrameColumnApply.infer_to_same_shape(self,results:ResType,res_index:'Index')->'DataFrame'
pandas.core.apply.FrameColumnApply.result_columns(self)->'Index'
pandas.core.apply.FrameColumnApply.result_index(self)->'Index'
pandas.core.apply.FrameColumnApply.series_generator(self)
pandas.core.apply.FrameColumnApply.wrap_results_for_axis(self,results:ResType,res_index:'Index')->Union['Series', 'DataFrame']
pandas.core.apply.FrameRowApply(FrameApply)
pandas.core.apply.FrameRowApply.apply_broadcast(self,target:'DataFrame')->'DataFrame'
pandas.core.apply.FrameRowApply.result_columns(self)->'Index'
pandas.core.apply.FrameRowApply.result_index(self)->'Index'
pandas.core.apply.FrameRowApply.series_generator(self)
pandas.core.apply.FrameRowApply.wrap_results_for_axis(self,results:ResType,res_index:'Index')->'DataFrame'
pandas.core.apply.frame_apply(obj:'DataFrame',func,axis=0,raw:bool=False,result_type=None,ignore_failures:bool=False,args=None,kwds=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/sorting.py----------------------------------------
A:pandas.core.sorting.labels->pandas.core.algorithms.take_nd(reverse_indexer, labels, allow_fill=False)
A:pandas.core.sorting.(labels, shape)->map(list, zip(*map(maybe_lift, labels, shape)))
A:pandas.core.sorting.shape->list(shape)
A:pandas.core.sorting.nlev->_int64_cut_off(shape)
A:pandas.core.sorting.stride->numpy.prod(shape[1:nlev], dtype='i8')
A:pandas.core.sorting.(comp_ids, obs_ids)->compress_group_index(out, sort=sort)
A:pandas.core.sorting.ids->get_group_index(labels, shape, sort=True, xnull=False)
A:pandas.core.sorting.lift->numpy.fromiter(((a == -1).any() for a in labels), dtype='i8')
A:pandas.core.sorting.out->decons_group_index(obs_ids, shape)
A:pandas.core.sorting.i->unique_label_indices(comp_ids)
A:pandas.core.sorting.(ids, obs)->compress_group_index(ids, sort=True)
A:pandas.core.sorting.ngroups->len(obs)
A:pandas.core.sorting.cat->Categorical(key, ordered=True)
A:pandas.core.sorting.n->len(cat.categories)
A:pandas.core.sorting.codes->numpy.where(mask, 0, n - codes)
A:pandas.core.sorting.items->numpy.asanyarray(items)
A:pandas.core.sorting.mask->numpy.asarray(isna(items))
A:pandas.core.sorting.idx->numpy.arange(len(items))
A:pandas.core.sorting.indexer->numpy.concatenate([nan_idx, indexer])
A:pandas.core.sorting.self.comp_ids->comp_ids.astype(np.int64)
A:pandas.core.sorting.self.k->len(labels)
A:pandas.core.sorting.mapper->_KeyMapper(comp_ids, ngroups, levels, labels)
A:pandas.core.sorting.group_index->ensure_int64(group_index)
A:pandas.core.sorting.sorter->pandas.core.algorithms.take_nd(uniques, sorter, allow_fill=False).argsort()
A:pandas.core.sorting.count->len(group_index)
A:pandas.core.sorting.(sorter, _)->pandas._libs.algos.groupsort_indexer(ensure_int64(group_index), ngroups)
A:pandas.core.sorting.size_hint->min(len(group_index), hashtable._SIZE_HINT_LIMIT)
A:pandas.core.sorting.table->pandas._libs.hashtable.Int64HashTable(size_hint)
A:pandas.core.sorting.(comp_ids, obs_group_ids)->pandas._libs.hashtable.Int64HashTable(size_hint).get_labels_groupby(group_index)
A:pandas.core.sorting.(obs_group_ids, comp_ids)->_reorder_by_uniques(obs_group_ids, comp_ids)
A:pandas.core.sorting.reverse_indexer->numpy.empty(len(sorter), dtype=np.int64)
A:pandas.core.sorting.uniques->pandas.core.algorithms.take_nd(uniques, sorter, allow_fill=False)
pandas.core.sorting._KeyMapper(self,comp_ids,ngroups:int,levels,labels)
pandas.core.sorting._KeyMapper.__init__(self,comp_ids,ngroups:int,levels,labels)
pandas.core.sorting._KeyMapper._populate_tables(self)
pandas.core.sorting._KeyMapper.get_key(self,comp_id)
pandas.core.sorting._reorder_by_uniques(uniques,labels)
pandas.core.sorting.compress_group_index(group_index,sort:bool=True)
pandas.core.sorting.decons_group_index(comp_labels,shape)
pandas.core.sorting.decons_obs_group_ids(comp_ids,obs_ids,shape,labels,xnull:bool)
pandas.core.sorting.get_compressed_ids(labels,sizes)
pandas.core.sorting.get_flattened_iterator(comp_ids,ngroups,levels,labels)
pandas.core.sorting.get_group_index(labels,shape,sort:bool,xnull:bool)
pandas.core.sorting.get_group_index_sorter(group_index,ngroups:int)
pandas.core.sorting.get_indexer_dict(label_list,keys)
pandas.core.sorting.indexer_from_factorized(labels,shape,compress:bool=True)
pandas.core.sorting.is_int64_overflow_possible(shape)->bool
pandas.core.sorting.lexsort_indexer(keys,orders=None,na_position:str='last')
pandas.core.sorting.nargsort(items,kind:str='quicksort',ascending:bool=True,na_position:str='last')


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/indexing.py----------------------------------------
A:pandas.core.indexing._NS->slice(None, None)
A:pandas.core.indexing.IndexSlice->_IndexSlice()
A:pandas.core.indexing.new_self->type(self)(self.name, self.obj)
A:pandas.core.indexing.axis->self.obj._get_axis_number(self.axis)
A:pandas.core.indexing.key->list(self._convert_key(key, is_setter=True))
A:pandas.core.indexing.values->self.obj._get_value(*key, takeable=True)
A:pandas.core.indexing.ax->self.obj._get_axis(axis)
A:pandas.core.indexing.indexer->self.obj._get_axis(axis).slice_indexer(slice_obj.start, slice_obj.stop, slice_obj.step, kind=self.name)
A:pandas.core.indexing.idx->self.obj._get_axis(i)._convert_slice_indexer(idx)
A:pandas.core.indexing.(key, _)->convert_missing_indexer(idx)
A:pandas.core.indexing.self.obj[key]->_infer_fill_value(value)
A:pandas.core.indexing.new_indexer->self.obj._get_axis(i).get_indexer([new_index[-1]])
A:pandas.core.indexing.index->self.obj._get_axis(i)
A:pandas.core.indexing.labels->self.obj._get_axis(axis)
A:pandas.core.indexing.(indexer, missing)->convert_missing_indexer(indexer)
A:pandas.core.indexing.item_labels->self.obj._get_axis(info_axis)
A:pandas.core.indexing.value->Series(value, index=self.obj.columns, name=indexer)
A:pandas.core.indexing.lplane_indexer->length_of_indexer(plane_indexer[0], plane_axis)
A:pandas.core.indexing.obj->check_bool_indexer(labels, obj)
A:pandas.core.indexing.obj._data->check_bool_indexer(labels, obj)._data.setitem(indexer=tuple([idx]), value=value)
A:pandas.core.indexing.s->s.copy().copy()
A:pandas.core.indexing.s._data->s.copy().copy()._data.setitem(indexer=pi, value=v)
A:pandas.core.indexing.sub_indexer->list(indexer)
A:pandas.core.indexing.multiindex_indexer->isinstance(labels, ABCMultiIndex)
A:pandas.core.indexing.v->self._align_series(tuple(sub_indexer), value[item], multiindex_indexer)
A:pandas.core.indexing.self.obj._data->self.obj._data.setitem(indexer=indexer, value=value)
A:pandas.core.indexing.new_index->self.obj._get_axis(i).insert(len(index), indexer)
A:pandas.core.indexing.new_values->concat_compat([self.obj._values, new_values])
A:pandas.core.indexing.sum_aligners->sum(aligners)
A:pandas.core.indexing.len_indexer->len(indexer[1])
A:pandas.core.indexing.new_ix->Index(new_ix)
A:pandas.core.indexing.ix->ix.ravel().ravel()
A:pandas.core.indexing.retval->getattr(retval, self.name)._getitem_axis(key, axis=axis)
A:pandas.core.indexing.ax0->self.obj._get_axis(0)
A:pandas.core.indexing.result->check_array_indexer(index, result)
A:pandas.core.indexing.section->self._getitem_axis(key, axis=i)
A:pandas.core.indexing.(indexer, keyarr)->self.obj._get_axis(axis)._convert_listlike_indexer(key, kind=self.name)
A:pandas.core.indexing.(keyarr, indexer, new_indexer)->self.obj._get_axis(axis)._reindex_non_unique(keyarr)
A:pandas.core.indexing.(inds,)->check_bool_indexer(labels, obj).nonzero()
A:pandas.core.indexing.(keyarr, indexer)->self._get_listlike_indexer(key, axis, raise_missing=False)
A:pandas.core.indexing.missing->(indexer < 0).sum()
A:pandas.core.indexing.axis_name->self.obj._get_axis_name(axis)
A:pandas.core.indexing.not_found->list(set(key) - set(ax))
A:pandas.core.indexing.is_int_index->self.obj._get_axis(axis).is_integer()
A:pandas.core.indexing.maybe_callable->pandas.core.common.apply_if_callable(key, self.obj)
A:pandas.core.indexing.locs->self.obj._get_axis(axis).get_locs(key)
A:pandas.core.indexing.arr->numpy.array(key)
A:pandas.core.indexing.len_axis->len(self.obj._get_axis(axis))
A:pandas.core.indexing.mask->isna(result._values)
A:pandas.core.indexing.values_len->len(value)
pandas.core.indexing.IndexingError(Exception)
pandas.core.indexing.IndexingMixin
pandas.core.indexing.IndexingMixin.at(self)->'_AtIndexer'
pandas.core.indexing.IndexingMixin.iat(self)->'_iAtIndexer'
pandas.core.indexing.IndexingMixin.iloc(self)->'_iLocIndexer'
pandas.core.indexing.IndexingMixin.loc(self)->'_LocIndexer'
pandas.core.indexing._AtIndexer(_ScalarAccessIndexer)
pandas.core.indexing._AtIndexer._convert_key(self,key,is_setter:bool=False)
pandas.core.indexing._IndexSlice
pandas.core.indexing._IndexSlice.__getitem__(self,arg)
pandas.core.indexing._LocIndexer(_LocationIndexer)
pandas.core.indexing._LocIndexer._get_partial_string_timestamp_match_key(self,key,labels)
pandas.core.indexing._LocIndexer._getitem_axis(self,key,axis:int)
pandas.core.indexing._LocIndexer._getitem_scalar(self,key)
pandas.core.indexing._LocIndexer._is_scalar_access(self,key:Tuple)->bool
pandas.core.indexing._LocIndexer._validate_key(self,key,axis:int)
pandas.core.indexing._LocationIndexer(_NDFrameIndexer)
pandas.core.indexing._LocationIndexer.__getitem__(self,key)
pandas.core.indexing._LocationIndexer._get_slice_axis(self,slice_obj:slice,axis:int)
pandas.core.indexing._LocationIndexer._getbool_axis(self,key,axis:int)
pandas.core.indexing._LocationIndexer._getitem_axis(self,key,axis:int)
pandas.core.indexing._LocationIndexer._getitem_scalar(self,key)
pandas.core.indexing._LocationIndexer._is_scalar_access(self,key:Tuple)
pandas.core.indexing._NDFrameIndexer(self,axis=None)
pandas.core.indexing._NDFrameIndexer.__call__(self,axis=None)
pandas.core.indexing._NDFrameIndexer.__getitem__(self,key)
pandas.core.indexing._NDFrameIndexer.__setitem__(self,key,value)
pandas.core.indexing._NDFrameIndexer._align_frame(self,indexer,df:ABCDataFrame)
pandas.core.indexing._NDFrameIndexer._align_series(self,indexer,ser:ABCSeries,multiindex_indexer:bool=False)
pandas.core.indexing._NDFrameIndexer._convert_for_reindex(self,key,axis:int)
pandas.core.indexing._NDFrameIndexer._convert_scalar_indexer(self,key,axis:int)
pandas.core.indexing._NDFrameIndexer._convert_slice_indexer(self,key:slice,axis:int)
pandas.core.indexing._NDFrameIndexer._convert_to_indexer(self,obj,axis:int,raise_missing:bool=False)
pandas.core.indexing._NDFrameIndexer._convert_tuple(self,key)
pandas.core.indexing._NDFrameIndexer._get_label(self,label,axis:int)
pandas.core.indexing._NDFrameIndexer._get_listlike_indexer(self,key,axis:int,raise_missing:bool=False)
pandas.core.indexing._NDFrameIndexer._get_loc(self,key:int,axis:int)
pandas.core.indexing._NDFrameIndexer._get_setitem_indexer(self,key)
pandas.core.indexing._NDFrameIndexer._get_slice_axis(self,slice_obj:slice,axis:int)
pandas.core.indexing._NDFrameIndexer._getitem_axis(self,key,axis:int)
pandas.core.indexing._NDFrameIndexer._getitem_iterable(self,key,axis:int)
pandas.core.indexing._NDFrameIndexer._getitem_lowerdim(self,tup:Tuple)
pandas.core.indexing._NDFrameIndexer._getitem_nested_tuple(self,tup:Tuple)
pandas.core.indexing._NDFrameIndexer._getitem_tuple(self,tup:Tuple)
pandas.core.indexing._NDFrameIndexer._handle_lowerdim_multi_index_axis0(self,tup:Tuple)
pandas.core.indexing._NDFrameIndexer._has_valid_positional_setitem_indexer(self,indexer)->bool
pandas.core.indexing._NDFrameIndexer._has_valid_setitem_indexer(self,indexer)->bool
pandas.core.indexing._NDFrameIndexer._has_valid_tuple(self,key:Tuple)
pandas.core.indexing._NDFrameIndexer._is_nested_tuple_indexer(self,tup:Tuple)->bool
pandas.core.indexing._NDFrameIndexer._multi_take(self,tup:Tuple)
pandas.core.indexing._NDFrameIndexer._multi_take_opportunity(self,tup:Tuple)->bool
pandas.core.indexing._NDFrameIndexer._setitem_with_indexer(self,indexer,value)
pandas.core.indexing._NDFrameIndexer._setitem_with_indexer_missing(self,indexer,value)
pandas.core.indexing._NDFrameIndexer._slice(self,obj,axis:int,kind=None)
pandas.core.indexing._NDFrameIndexer._validate_key(self,key,axis:int)
pandas.core.indexing._NDFrameIndexer._validate_read_indexer(self,key,indexer,axis:int,raise_missing:bool=False)
pandas.core.indexing._ScalarAccessIndexer(_NDFrameIndexerBase)
pandas.core.indexing._ScalarAccessIndexer.__getitem__(self,key)
pandas.core.indexing._ScalarAccessIndexer.__setitem__(self,key,value)
pandas.core.indexing._ScalarAccessIndexer._convert_key(self,key,is_setter:bool=False)
pandas.core.indexing._can_do_equal_len(labels,value,plane_indexer,lplane_indexer,obj)->bool
pandas.core.indexing._iAtIndexer(_ScalarAccessIndexer)
pandas.core.indexing._iAtIndexer._convert_key(self,key,is_setter:bool=False)
pandas.core.indexing._iLocIndexer(_LocationIndexer)
pandas.core.indexing._iLocIndexer._convert_to_indexer(self,obj,axis:int,raise_missing:bool=False)
pandas.core.indexing._iLocIndexer._get_list_axis(self,key,axis:int)
pandas.core.indexing._iLocIndexer._getitem_axis(self,key,axis:int)
pandas.core.indexing._iLocIndexer._getitem_scalar(self,key)
pandas.core.indexing._iLocIndexer._getitem_tuple(self,tup:Tuple)
pandas.core.indexing._iLocIndexer._has_valid_setitem_indexer(self,indexer)
pandas.core.indexing._iLocIndexer._is_scalar_access(self,key:Tuple)->bool
pandas.core.indexing._iLocIndexer._validate_integer(self,key:int,axis:int)->None
pandas.core.indexing._iLocIndexer._validate_key(self,key,axis:int)
pandas.core.indexing._maybe_numeric_slice(df,slice_,include_bool=False)
pandas.core.indexing._non_reducing_slice(slice_)
pandas.core.indexing._tuplify(ndim:int,loc:Hashable)->Tuple[Union[Hashable, slice], ...]
pandas.core.indexing.check_bool_indexer(index:Index,key)->np.ndarray
pandas.core.indexing.convert_from_missing_indexer_tuple(indexer,axes)
pandas.core.indexing.convert_missing_indexer(indexer)
pandas.core.indexing.convert_to_index_sliceable(obj,key)
pandas.core.indexing.is_label_like(key)->bool
pandas.core.indexing.is_nested_tuple(tup,labels)->bool
pandas.core.indexing.maybe_convert_ix(*args)
pandas.core.indexing.need_slice(obj)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/common.py----------------------------------------
A:pandas.core.common.value->pandas._libs.tslibs.Timedelta(value)
A:pandas.core.common.key->numpy.asarray(values_from_object(key))
A:pandas.core.common.arr->numpy.asarray(key)
A:pandas.core.common.listed->list(iterable)
A:pandas.core.common.values->list(values)
A:pandas.core.common.result->construct_1d_object_array_from_listlike(values)
A:pandas.core.common.labels->asarray_tuplesafe(labels, dtype=dtype)
A:pandas.core.common.into->type(into)
pandas.core.common.SettingWithCopyError(ValueError)
pandas.core.common.SettingWithCopyWarning(Warning)
pandas.core.common.all_none(*args)
pandas.core.common.all_not_none(*args)
pandas.core.common.any_none(*args)
pandas.core.common.any_not_none(*args)
pandas.core.common.apply_if_callable(maybe_callable,obj,**kwargs)
pandas.core.common.asarray_tuplesafe(values,dtype=None)
pandas.core.common.cast_scalar_indexer(val)
pandas.core.common.consensus_name_attr(objs)
pandas.core.common.count_not_none(*args)
pandas.core.common.dict_compat(d)
pandas.core.common.flatten(l)
pandas.core.common.get_callable_name(obj)
pandas.core.common.get_rename_function(mapper)
pandas.core.common.index_labels_to_array(labels,dtype=None)
pandas.core.common.is_bool_indexer(key:Any)->bool
pandas.core.common.is_full_slice(obj,l)
pandas.core.common.is_null_slice(obj)
pandas.core.common.is_true_slices(l)
pandas.core.common.maybe_box(indexer,values,obj,key)
pandas.core.common.maybe_box_datetimelike(value)
pandas.core.common.maybe_box_dtlike(value)
pandas.core.common.maybe_iterable_to_list(obj:Union[Iterable[T],T])->Union[Collection[T], T]
pandas.core.common.maybe_make_list(obj)
pandas.core.common.not_none(*args)
pandas.core.common.pipe(obj,func,*args,**kwargs)
pandas.core.common.random_state(state=None)
pandas.core.common.standardize_mapping(into)
pandas.core.common.try_sort(iterable)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/construction.py----------------------------------------
A:pandas.core.construction.data->numpy.array(data, dtype=dtype, copy=False)
A:pandas.core.construction.cls->cast(ExtensionDtype, dtype).construct_array_type()
A:pandas.core.construction.inferred_dtype->pandas._libs.lib.infer_dtype(data, skipna=True)
A:pandas.core.construction.result->pandas.core.arrays.PandasArray._from_sequence(data, dtype=dtype, copy=copy)
A:pandas.core.construction.obj->obj.to_numpy().to_numpy()
A:pandas.core.construction.dtype->cast(ExtensionDtype, dtype)
A:pandas.core.construction.mask->numpy.ma.getmaskarray(data)
A:pandas.core.construction.(data, fill_value)->maybe_upcast(data, copy=True)
A:pandas.core.construction.subarr->numpy.array(arr, dtype=object, copy=copy)
A:pandas.core.construction.arr->numpy.arange(data.start, data.stop, data.step, dtype='int64')
A:pandas.core.construction.(dtype, value)->infer_dtype_from_scalar(value)
A:pandas.core.construction.value->maybe_cast_to_datetime(value, dtype)
A:pandas.core.construction.inferred->pandas._libs.lib.infer_dtype(subarr, skipna=False)
pandas.core.construction._try_cast(arr,dtype:Optional[Union[np.dtype,'ExtensionDtype']],copy:bool,raise_cast_failure:bool)
pandas.core.construction.array(data:Sequence[object],dtype:Optional[Union[str,np.dtype,ExtensionDtype]]=None,copy:bool=True)->ABCExtensionArray
pandas.core.construction.create_series_with_explicit_dtype(data:Any=None,index:Optional[Union[ArrayLike,'Index']]=None,dtype:Optional[Dtype]=None,name:Optional[str]=None,copy:bool=False,fastpath:bool=False,dtype_if_empty:Dtype=object)->'Series'
pandas.core.construction.extract_array(obj,extract_numpy=False)
pandas.core.construction.is_empty_data(data:Any)->bool
pandas.core.construction.sanitize_array(data,index,dtype=None,copy:bool=False,raise_cast_failure:bool=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/base.py----------------------------------------
A:pandas.core.base._indexops_doc_kwargs->dict(klass='IndexOpsMixin', inplace='', unique='IndexOpsMixin', duplicated='IndexOpsMixin')
A:pandas.core.base.mem->mem.sum().sum()
A:pandas.core.base._internal_names_set->set(_internal_names)
A:pandas.core.base.bad_keys->list(set(key).difference(self.obj.columns))
A:pandas.core.base.f->self._get_cython_func(arg)
A:pandas.core.base._axis->getattr(self, 'axis', 0)
A:pandas.core.base.keys->list(arg.keys())
A:pandas.core.base.colg->self._gotitem(col, ndim=1, subset=obj.iloc[:, index])
A:pandas.core.base.result[fname]->func(fname, agg_how)
A:pandas.core.base.sl->set(self._selection_list)
A:pandas.core.base.result->unique1d(values)
A:pandas.core.base.new_res->self._gotitem(col, ndim=1, subset=obj.iloc[:, index]).aggregate(arg)
A:pandas.core.base.obj->self._selected_obj.copy()
A:pandas.core.base.kwargs[attr]->getattr(self, attr)
A:pandas.core.base.T->property(transpose, doc='\n        Return the transpose, which is by definition self.\n        ')
A:pandas.core.base.msg->"to_numpy() got an unexpected keyword argument '{}'".format(list(kwargs.keys())[0])
A:pandas.core.base.func->getattr(self, name, None)
A:pandas.core.base.mapper->create_series_with_explicit_dtype(mapper, dtype_if_empty=np.float64)
A:pandas.core.base.indexer->create_series_with_explicit_dtype(mapper, dtype_if_empty=np.float64).index.get_indexer(values)
A:pandas.core.base.new_values->map_f(values, mapper)
A:pandas.core.base.values->getattr(values, 'values', values)
A:pandas.core.base.uniqs->self.unique()
A:pandas.core.base.n->len(uniqs)
A:pandas.core.base.inplace->validate_bool_kwarg(inplace, 'inplace')
A:pandas.core.base.duplicated->self.duplicated(keep=keep)
pandas.core.base.DataError(GroupByError)
pandas.core.base.GroupByError(Exception)
pandas.core.base.IndexOpsMixin
pandas.core.base.IndexOpsMixin.__iter__(self)
pandas.core.base.IndexOpsMixin._map_values(self,mapper,na_action=None)
pandas.core.base.IndexOpsMixin._ndarray_values(self)->np.ndarray
pandas.core.base.IndexOpsMixin._reduce(self,op,name,axis=0,skipna=True,numeric_only=None,filter_type=None,**kwds)
pandas.core.base.IndexOpsMixin._update_inplace(self,result,verify_is_copy=True,**kwargs)
pandas.core.base.IndexOpsMixin.argmax(self,axis=None,skipna=True,*args,**kwargs)
pandas.core.base.IndexOpsMixin.argmin(self,axis=None,skipna=True,*args,**kwargs)
pandas.core.base.IndexOpsMixin.array(self)->ExtensionArray
pandas.core.base.IndexOpsMixin.drop_duplicates(self,keep='first',inplace=False)
pandas.core.base.IndexOpsMixin.duplicated(self,keep='first')
pandas.core.base.IndexOpsMixin.empty(self)
pandas.core.base.IndexOpsMixin.factorize(self,sort=False,na_sentinel=-1)
pandas.core.base.IndexOpsMixin.hasnans(self)
pandas.core.base.IndexOpsMixin.is_monotonic(self)
pandas.core.base.IndexOpsMixin.is_monotonic_decreasing(self)->bool
pandas.core.base.IndexOpsMixin.is_unique(self)
pandas.core.base.IndexOpsMixin.item(self)
pandas.core.base.IndexOpsMixin.max(self,axis=None,skipna=True,*args,**kwargs)
pandas.core.base.IndexOpsMixin.memory_usage(self,deep=False)
pandas.core.base.IndexOpsMixin.min(self,axis=None,skipna=True,*args,**kwargs)
pandas.core.base.IndexOpsMixin.nbytes(self)
pandas.core.base.IndexOpsMixin.ndim(self)->int
pandas.core.base.IndexOpsMixin.nunique(self,dropna=True)
pandas.core.base.IndexOpsMixin.searchsorted(self,value,side='left',sorter=None)
pandas.core.base.IndexOpsMixin.shape(self)
pandas.core.base.IndexOpsMixin.size(self)
pandas.core.base.IndexOpsMixin.to_numpy(self,dtype=None,copy=False,na_value=lib.no_default,**kwargs)
pandas.core.base.IndexOpsMixin.tolist(self)
pandas.core.base.IndexOpsMixin.transpose(self,*args,**kwargs)
pandas.core.base.IndexOpsMixin.unique(self)
pandas.core.base.IndexOpsMixin.value_counts(self,normalize=False,sort=True,ascending=False,bins=None,dropna=True)
pandas.core.base.NoNewAttributesMixin
pandas.core.base.NoNewAttributesMixin.__setattr__(self,key,value)
pandas.core.base.NoNewAttributesMixin._freeze(self)
pandas.core.base.PandasObject(DirNamesMixin)
pandas.core.base.PandasObject.__repr__(self)->str
pandas.core.base.PandasObject.__sizeof__(self)
pandas.core.base.PandasObject._constructor(self)
pandas.core.base.PandasObject._reset_cache(self,key=None)
pandas.core.base.SelectionMixin
pandas.core.base.SelectionMixin.__getitem__(self,key)
pandas.core.base.SelectionMixin._aggregate(self,arg,*args,**kwargs)
pandas.core.base.SelectionMixin._aggregate_multiple_funcs(self,arg,_axis)
pandas.core.base.SelectionMixin._get_cython_func(self,arg:str)->Optional[str]
pandas.core.base.SelectionMixin._gotitem(self,key,ndim,subset=None)
pandas.core.base.SelectionMixin._is_builtin_func(self,arg)
pandas.core.base.SelectionMixin._obj_with_exclusions(self)
pandas.core.base.SelectionMixin._selected_obj(self)
pandas.core.base.SelectionMixin._selection_list(self)
pandas.core.base.SelectionMixin._selection_name(self)
pandas.core.base.SelectionMixin._try_aggregate_string_function(self,arg:str,*args,**kwargs)
pandas.core.base.SelectionMixin.aggregate(self,func,*args,**kwargs)
pandas.core.base.SelectionMixin.ndim(self)->int
pandas.core.base.ShallowMixin
pandas.core.base.ShallowMixin._shallow_copy(self,obj=None,**kwargs)
pandas.core.base.SpecificationError(GroupByError)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/strings.py----------------------------------------
A:pandas.core.strings.arr_of_cols->numpy.asarray(list_of_columns, dtype=object)
A:pandas.core.strings.arr_with_sep->numpy.asarray(list_with_sep, dtype=object)
A:pandas.core.strings.result->str_index(self._parent, sub, start=start, end=end, side='right')
A:pandas.core.strings.dtype->_result_dtype(arr)
A:pandas.core.strings.arr->arr.fillna('').fillna('')
A:pandas.core.strings.mask->isna(arr)
A:pandas.core.strings.na_value_is_na->isna(na_value)
A:pandas.core.strings.regex->re.compile(pat)
A:pandas.core.strings.upper_pat->pat.upper()
A:pandas.core.strings.uppered->_na_map(lambda x: x.upper(), arr)
A:pandas.core.strings.is_compiled_re->is_re(pat)
A:pandas.core.strings.compiled->re.compile(pat, flags=flags)
A:pandas.core.strings.repeats->numpy.asarray(repeats, dtype=object)
A:pandas.core.strings.m->re.compile(pat).search(x)
A:pandas.core.strings.groups_or_na->_groups_or_na_fun(regex)
A:pandas.core.strings.name->getattr(result, 'name', None)
A:pandas.core.strings.names->dict(zip(regex.groupindex.values(), regex.groupindex.keys()))
A:pandas.core.strings.(result, name)->str_get_dummies(data, sep)
A:pandas.core.strings.result_key->tuple(subject_key + (match_i,))
A:pandas.core.strings.index->pandas.MultiIndex.from_tuples(index_list, names=arr.index.names + ['match'])
A:pandas.core.strings.tags->sorted(tags - {''})
A:pandas.core.strings.dummies->numpy.empty((len(arr), len(tags)), dtype=np.int64)
A:pandas.core.strings.dummies[:, i]->pandas._libs.lib.map_infer(arr.to_numpy(), lambda x: pat in x)
A:pandas.core.strings.res->_na_map(f, arr)
A:pandas.core.strings.obj->slice(start, stop, step)
A:pandas.core.strings.tw->textwrap.TextWrapper(**kwargs)
A:pandas.core.strings.decoder->codecs.getdecoder(encoding)
A:pandas.core.strings.encoder->codecs.getencoder(encoding)
A:pandas.core.strings.self._inferred_dtype->self._validate(data)
A:pandas.core.strings.self._is_categorical->is_categorical_dtype(data)
A:pandas.core.strings.values->getattr(values, 'categories', values)
A:pandas.core.strings.inferred_dtype->pandas._libs.lib.infer_dtype(values, skipna=True)
A:pandas.core.strings.g->self.get(i)
A:pandas.core.strings.max_len->max((len(x) for x in result))
A:pandas.core.strings.out->out.get_level_values(0).get_level_values(0)
A:pandas.core.strings.others->concat(others, axis=1, join=join if join == 'inner' else 'outer', keys=range(len(others)), sort=False, copy=False)
A:pandas.core.strings.data->numpy.where(na_mask, na_rep, data)
A:pandas.core.strings.na_mask->isna(data)
A:pandas.core.strings.(data, others)->numpy.where(na_mask, na_rep, data).align(others, join=join)
A:pandas.core.strings.na_masks->numpy.array([isna(x) for x in all_cols])
A:pandas.core.strings.union_mask->numpy.logical_or.reduce(na_masks, axis=0)
A:pandas.core.strings.result[not_masked]->cat_safe([x[not_masked] for x in all_cols], sep)
A:pandas.core.strings.count->_pat_wrapper(str_count, flags=True, name='count', returns_string=False)
A:pandas.core.strings.startswith->_pat_wrapper(str_startswith, na=True, name='startswith', returns_string=False)
A:pandas.core.strings.endswith->_pat_wrapper(str_endswith, na=True, name='endswith', returns_string=False)
A:pandas.core.strings.findall->_pat_wrapper(str_findall, flags=True, name='findall', returns_string=False)
A:pandas.core.strings.len->_noarg_wrapper(len, docstring=_shared_docs['len'], forbidden_types=None, dtype='int64', returns_string=False)
A:pandas.core.strings._doc_args['lower']->dict(type='lowercase', method='lower', version='')
A:pandas.core.strings._doc_args['upper']->dict(type='uppercase', method='upper', version='')
A:pandas.core.strings._doc_args['title']->dict(type='titlecase', method='title', version='')
A:pandas.core.strings._doc_args['capitalize']->dict(type='be capitalized', method='capitalize', version='')
A:pandas.core.strings._doc_args['swapcase']->dict(type='be swapcased', method='swapcase', version='')
A:pandas.core.strings._doc_args['casefold']->dict(type='be casefolded', method='casefold', version='\n    .. versionadded:: 0.25.0\n')
A:pandas.core.strings.lower->_noarg_wrapper(lambda x: x.lower(), name='lower', docstring=_shared_docs['casemethods'] % _doc_args['lower'], dtype=str)
A:pandas.core.strings.upper->_noarg_wrapper(lambda x: x.upper(), name='upper', docstring=_shared_docs['casemethods'] % _doc_args['upper'], dtype=str)
A:pandas.core.strings.title->_noarg_wrapper(lambda x: x.title(), name='title', docstring=_shared_docs['casemethods'] % _doc_args['title'], dtype=str)
A:pandas.core.strings.capitalize->_noarg_wrapper(lambda x: x.capitalize(), name='capitalize', docstring=_shared_docs['casemethods'] % _doc_args['capitalize'], dtype=str)
A:pandas.core.strings.swapcase->_noarg_wrapper(lambda x: x.swapcase(), name='swapcase', docstring=_shared_docs['casemethods'] % _doc_args['swapcase'], dtype=str)
A:pandas.core.strings.casefold->_noarg_wrapper(lambda x: x.casefold(), name='casefold', docstring=_shared_docs['casemethods'] % _doc_args['casefold'], dtype=str)
A:pandas.core.strings._doc_args['isalnum']->dict(type='alphanumeric', method='isalnum')
A:pandas.core.strings._doc_args['isalpha']->dict(type='alphabetic', method='isalpha')
A:pandas.core.strings._doc_args['isdigit']->dict(type='digits', method='isdigit')
A:pandas.core.strings._doc_args['isspace']->dict(type='whitespace', method='isspace')
A:pandas.core.strings._doc_args['islower']->dict(type='lowercase', method='islower')
A:pandas.core.strings._doc_args['isupper']->dict(type='uppercase', method='isupper')
A:pandas.core.strings._doc_args['istitle']->dict(type='titlecase', method='istitle')
A:pandas.core.strings._doc_args['isnumeric']->dict(type='numeric', method='isnumeric')
A:pandas.core.strings._doc_args['isdecimal']->dict(type='decimal', method='isdecimal')
A:pandas.core.strings.isalnum->_noarg_wrapper(lambda x: x.isalnum(), name='isalnum', docstring=_shared_docs['ismethods'] % _doc_args['isalnum'], returns_string=False, dtype=bool)
A:pandas.core.strings.isalpha->_noarg_wrapper(lambda x: x.isalpha(), name='isalpha', docstring=_shared_docs['ismethods'] % _doc_args['isalpha'], returns_string=False, dtype=bool)
A:pandas.core.strings.isdigit->_noarg_wrapper(lambda x: x.isdigit(), name='isdigit', docstring=_shared_docs['ismethods'] % _doc_args['isdigit'], returns_string=False, dtype=bool)
A:pandas.core.strings.isspace->_noarg_wrapper(lambda x: x.isspace(), name='isspace', docstring=_shared_docs['ismethods'] % _doc_args['isspace'], returns_string=False, dtype=bool)
A:pandas.core.strings.islower->_noarg_wrapper(lambda x: x.islower(), name='islower', docstring=_shared_docs['ismethods'] % _doc_args['islower'], returns_string=False, dtype=bool)
A:pandas.core.strings.isupper->_noarg_wrapper(lambda x: x.isupper(), name='isupper', docstring=_shared_docs['ismethods'] % _doc_args['isupper'], returns_string=False, dtype=bool)
A:pandas.core.strings.istitle->_noarg_wrapper(lambda x: x.istitle(), name='istitle', docstring=_shared_docs['ismethods'] % _doc_args['istitle'], returns_string=False, dtype=bool)
A:pandas.core.strings.isnumeric->_noarg_wrapper(lambda x: x.isnumeric(), name='isnumeric', docstring=_shared_docs['ismethods'] % _doc_args['isnumeric'], returns_string=False, dtype=bool)
A:pandas.core.strings.isdecimal->_noarg_wrapper(lambda x: x.isdecimal(), name='isdecimal', docstring=_shared_docs['ismethods'] % _doc_args['isdecimal'], returns_string=False, dtype=bool)
pandas.core.strings.StringMethods(self,data)
pandas.core.strings.StringMethods.__getitem__(self,key)
pandas.core.strings.StringMethods.__init__(self,data)
pandas.core.strings.StringMethods.__iter__(self)
pandas.core.strings.StringMethods._get_series_list(self,others)
pandas.core.strings.StringMethods._make_accessor(cls,data)
pandas.core.strings.StringMethods._validate(data)
pandas.core.strings.StringMethods._wrap_result(self,result,use_codes=True,name=None,expand=None,fill_value=np.nan,returns_string=True)
pandas.core.strings.StringMethods.cat(self,others=None,sep=None,na_rep=None,join='left')
pandas.core.strings.StringMethods.center(self,width,fillchar='')
pandas.core.strings.StringMethods.contains(self,pat,case=True,flags=0,na=np.nan,regex=True)
pandas.core.strings.StringMethods.decode(self,encoding,errors='strict')
pandas.core.strings.StringMethods.encode(self,encoding,errors='strict')
pandas.core.strings.StringMethods.extract(self,pat,flags=0,expand=True)
pandas.core.strings.StringMethods.extractall(self,pat,flags=0)
pandas.core.strings.StringMethods.find(self,sub,start=0,end=None)
pandas.core.strings.StringMethods.get(self,i)
pandas.core.strings.StringMethods.get_dummies(self,sep='|')
pandas.core.strings.StringMethods.index(self,sub,start=0,end=None)
pandas.core.strings.StringMethods.join(self,sep)
pandas.core.strings.StringMethods.ljust(self,width,fillchar='')
pandas.core.strings.StringMethods.lstrip(self,to_strip=None)
pandas.core.strings.StringMethods.match(self,pat,case=True,flags=0,na=np.nan)
pandas.core.strings.StringMethods.normalize(self,form)
pandas.core.strings.StringMethods.pad(self,width,side='left',fillchar='')
pandas.core.strings.StringMethods.partition(self,sep='',expand=True)
pandas.core.strings.StringMethods.repeat(self,repeats)
pandas.core.strings.StringMethods.replace(self,pat,repl,n=-1,case=None,flags=0,regex=True)
pandas.core.strings.StringMethods.rfind(self,sub,start=0,end=None)
pandas.core.strings.StringMethods.rindex(self,sub,start=0,end=None)
pandas.core.strings.StringMethods.rjust(self,width,fillchar='')
pandas.core.strings.StringMethods.rpartition(self,sep='',expand=True)
pandas.core.strings.StringMethods.rsplit(self,pat=None,n=-1,expand=False)
pandas.core.strings.StringMethods.rstrip(self,to_strip=None)
pandas.core.strings.StringMethods.slice(self,start=None,stop=None,step=None)
pandas.core.strings.StringMethods.slice_replace(self,start=None,stop=None,repl=None)
pandas.core.strings.StringMethods.split(self,pat=None,n=-1,expand=False)
pandas.core.strings.StringMethods.strip(self,to_strip=None)
pandas.core.strings.StringMethods.translate(self,table)
pandas.core.strings.StringMethods.wrap(self,width,**kwargs)
pandas.core.strings.StringMethods.zfill(self,width)
pandas.core.strings._get_single_group_name(rx)
pandas.core.strings._groups_or_na_fun(regex)
pandas.core.strings._map_object(f,arr,na_mask=False,na_value=np.nan,dtype=object)
pandas.core.strings._map_stringarray(func:Callable[[str],Any],arr:'StringArray',na_value:Any,dtype:Dtype)->ArrayLike
pandas.core.strings._na_map(f,arr,na_result=None,dtype=object)
pandas.core.strings._noarg_wrapper(f,name=None,docstring=None,forbidden_types=['bytes'],returns_string=True,**kargs)
pandas.core.strings._pat_wrapper(f,flags=False,na=False,name=None,forbidden_types=['bytes'],returns_string=True,**kwargs)
pandas.core.strings._result_dtype(arr)
pandas.core.strings._str_extract_frame(arr,pat,flags=0)
pandas.core.strings._str_extract_noexpand(arr,pat,flags=0)
pandas.core.strings.cat_core(list_of_columns:List,sep:str)
pandas.core.strings.cat_safe(list_of_columns:List,sep:str)
pandas.core.strings.copy(source)
pandas.core.strings.forbid_nonstring_types(forbidden,name=None)
pandas.core.strings.str_contains(arr,pat,case=True,flags=0,na=np.nan,regex=True)
pandas.core.strings.str_count(arr,pat,flags=0)
pandas.core.strings.str_decode(arr,encoding,errors='strict')
pandas.core.strings.str_encode(arr,encoding,errors='strict')
pandas.core.strings.str_endswith(arr,pat,na=np.nan)
pandas.core.strings.str_extract(arr,pat,flags=0,expand=True)
pandas.core.strings.str_extractall(arr,pat,flags=0)
pandas.core.strings.str_find(arr,sub,start=0,end=None,side='left')
pandas.core.strings.str_findall(arr,pat,flags=0)
pandas.core.strings.str_get(arr,i)
pandas.core.strings.str_get_dummies(arr,sep='|')
pandas.core.strings.str_index(arr,sub,start=0,end=None,side='left')
pandas.core.strings.str_join(arr,sep)
pandas.core.strings.str_match(arr,pat,case=True,flags=0,na=np.nan)
pandas.core.strings.str_pad(arr,width,side='left',fillchar='')
pandas.core.strings.str_repeat(arr,repeats)
pandas.core.strings.str_replace(arr,pat,repl,n=-1,case=None,flags=0,regex=True)
pandas.core.strings.str_rsplit(arr,pat=None,n=None)
pandas.core.strings.str_slice(arr,start=None,stop=None,step=None)
pandas.core.strings.str_slice_replace(arr,start=None,stop=None,repl=None)
pandas.core.strings.str_split(arr,pat=None,n=None)
pandas.core.strings.str_startswith(arr,pat,na=np.nan)
pandas.core.strings.str_strip(arr,to_strip=None,side='both')
pandas.core.strings.str_translate(arr,table)
pandas.core.strings.str_wrap(arr,width,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/nanops.py----------------------------------------
A:pandas.core.nanops.bn->import_optional_dependency('bottleneck', raise_on_missing=False, on_version='warn')
A:pandas.core.nanops.self.dtypes->tuple((pandas_dtype(dtype).type for dtype in dtypes))
A:pandas.core.nanops.obj_iter->itertools.chain(args, kwargs.values())
A:pandas.core.nanops.f_name->get_corr_func(method).__name__.replace('nan', '')
A:pandas.core.nanops.bn_func->getattr(bn, bn_name)
A:pandas.core.nanops.result->nanpercentile(values.view('i8'), q, axis, na_value.view('i8'), mask, ndim, interpolation)
A:pandas.core.nanops.mask->mask.reshape(values.shape).reshape(values.shape)
A:pandas.core.nanops.values->values.copy().copy()
A:pandas.core.nanops.dtype_ok->_na_ok_dtype(dtype)
A:pandas.core.nanops.fill_value->na_value_for_dtype(values.dtype)
A:pandas.core.nanops.(values, _)->maybe_upcast_putmask(values, mask, fill_value)
A:pandas.core.nanops.tz->getattr(dtype, 'tz', None)
A:pandas.core.nanops.(values, _, _, _, _)->_get_values(values, skipna, fill_value=True, mask=mask)
A:pandas.core.nanops.(values, mask, dtype, dtype_max, _)->_get_values(values, skipna, mask=mask)
A:pandas.core.nanops.the_sum->_ensure_numeric(values.sum(axis, dtype=dtype_sum))
A:pandas.core.nanops.count->_get_counts(values.shape, mask, axis, dtype=values.dtype)
A:pandas.core.nanops.shp->numpy.array(values.shape)
A:pandas.core.nanops.dims->numpy.arange(values.ndim)
A:pandas.core.nanops.ret->numpy.empty(shp[dims != axis])
A:pandas.core.nanops.dtype->_get_dtype(dtype)
A:pandas.core.nanops.(values, mask, dtype, dtype_max, fill_value)->_get_values(values, skipna, fill_value_typ=fill_value_typ, mask=mask)
A:pandas.core.nanops.(count, d)->_get_counts_nanvar(values.shape, mask, axis, ddof)
A:pandas.core.nanops.avg->numpy.expand_dims(avg, axis)
A:pandas.core.nanops.sqr->_ensure_numeric((avg - values) ** 2)
A:pandas.core.nanops.(count, _)->_get_counts_nanvar(values.shape, mask, axis, ddof, values.dtype)
A:pandas.core.nanops.var->nanvar(values, axis, skipna, ddof=ddof)
A:pandas.core.nanops.nanmin->_nanminmax('min', fill_value_typ='+inf')
A:pandas.core.nanops.nanmax->_nanminmax('max', fill_value_typ='-inf')
A:pandas.core.nanops.(values, mask, dtype, _, _)->_get_values(values, True, fill_value_typ='+inf', mask=mask)
A:pandas.core.nanops.mean->numpy.expand_dims(mean, axis)
A:pandas.core.nanops.m2->adjusted2.sum(axis, dtype=np.float64)
A:pandas.core.nanops.m3->_zero_out_fperr(m3)
A:pandas.core.nanops.m4->adjusted4.sum(axis, dtype=np.float64)
A:pandas.core.nanops.numer->_zero_out_fperr(numer)
A:pandas.core.nanops.denom->_zero_out_fperr(denom)
A:pandas.core.nanops.na_mask->mask.reshape(values.shape).reshape(values.shape).any(axis)
A:pandas.core.nanops.n->numpy.prod(values_shape)
A:pandas.core.nanops.null_mask->numpy.prod(shape)
A:pandas.core.nanops.f->get_corr_func(method)
A:pandas.core.nanops.rs->kendalltau(a, b)
A:pandas.core.nanops.x->complex(x)
A:pandas.core.nanops.xmask->isna(x)
A:pandas.core.nanops.ymask->isna(y)
A:pandas.core.nanops.nangt->make_nancomp(operator.gt)
A:pandas.core.nanops.nange->make_nancomp(operator.ge)
A:pandas.core.nanops.nanlt->make_nancomp(operator.lt)
A:pandas.core.nanops.nanle->make_nancomp(operator.le)
A:pandas.core.nanops.naneq->make_nancomp(operator.eq)
A:pandas.core.nanops.nanne->make_nancomp(operator.ne)
pandas.core.nanops._bn_ok_dtype(dt,name:str)->bool
pandas.core.nanops._ensure_numeric(x)
pandas.core.nanops._get_counts(values_shape:Tuple[int],mask:Optional[np.ndarray],axis:Optional[int],dtype=float)->Union[int, np.ndarray]
pandas.core.nanops._get_counts_nanvar(value_counts:Tuple[int],mask:Optional[np.ndarray],axis:Optional[int],ddof:int,dtype=float)->Tuple[Union[int, np.ndarray], Union[int, np.ndarray]]
pandas.core.nanops._get_fill_value(dtype,fill_value=None,fill_value_typ=None)
pandas.core.nanops._get_values(values:np.ndarray,skipna:bool,fill_value:Any=None,fill_value_typ:Optional[str]=None,mask:Optional[np.ndarray]=None)->Tuple[np.ndarray, Optional[np.ndarray], np.dtype, np.dtype, Any]
pandas.core.nanops._has_infs(result)->bool
pandas.core.nanops._maybe_arg_null_out(result:np.ndarray,axis:Optional[int],mask:Optional[np.ndarray],skipna:bool)->Union[np.ndarray, int]
pandas.core.nanops._maybe_get_mask(values:np.ndarray,skipna:bool,mask:Optional[np.ndarray])->Optional[np.ndarray]
pandas.core.nanops._maybe_null_out(result:np.ndarray,axis:Optional[int],mask:Optional[np.ndarray],shape:Tuple,min_count:int=1)->np.ndarray
pandas.core.nanops._na_for_min_count(values,axis:Optional[int])
pandas.core.nanops._na_ok_dtype(dtype)
pandas.core.nanops._nanminmax(meth,fill_value_typ)
pandas.core.nanops._nanpercentile_1d(values,mask,q,na_value,interpolation)
pandas.core.nanops._wrap_results(result,dtype,fill_value=None)
pandas.core.nanops._zero_out_fperr(arg)
pandas.core.nanops.bottleneck_switch(self,name=None,**kwargs)
pandas.core.nanops.bottleneck_switch.__init__(self,name=None,**kwargs)
pandas.core.nanops.disallow(self,*dtypes)
pandas.core.nanops.disallow.__init__(self,*dtypes)
pandas.core.nanops.disallow.check(self,obj)->bool
pandas.core.nanops.get_corr_func(method)
pandas.core.nanops.make_nancomp(op)
pandas.core.nanops.nanall(values,axis=None,skipna:bool=True,mask=None)
pandas.core.nanops.nanany(values,axis=None,skipna:bool=True,mask=None)
pandas.core.nanops.nanargmax(values,axis=None,skipna=True,mask=None)
pandas.core.nanops.nanargmin(values,axis=None,skipna=True,mask=None)
pandas.core.nanops.nancorr(a,b,method='pearson',min_periods=None)
pandas.core.nanops.nancov(a,b,min_periods=None)
pandas.core.nanops.nankurt(values,axis=None,skipna=True,mask=None)
pandas.core.nanops.nanmean(values,axis=None,skipna=True,mask=None)
pandas.core.nanops.nanmedian(values,axis=None,skipna=True,mask=None)
pandas.core.nanops.nanpercentile(values,q,axis,na_value,mask,ndim,interpolation)
pandas.core.nanops.nanprod(values,axis=None,skipna=True,min_count=0,mask=None)
pandas.core.nanops.nansem(values,axis=None,skipna=True,ddof=1,mask=None)
pandas.core.nanops.nanskew(values,axis=None,skipna=True,mask=None)
pandas.core.nanops.nanstd(values,axis=None,skipna=True,ddof=1,mask=None)
pandas.core.nanops.nansum(values,axis=None,skipna=True,min_count=0,mask=None)
pandas.core.nanops.nanvar(values,axis=None,skipna=True,ddof=1,mask=None)
pandas.core.nanops.set_use_bottleneck(v=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/resample.py----------------------------------------
A:pandas.core.resample.self.exclusions->set()
A:pandas.core.resample.obj->obj.to_timestamp(how=self.convention).to_timestamp(how=self.convention)
A:pandas.core.resample.(self.binner, self.grouper)->self._get_binner()
A:pandas.core.resample.(binner, bins, binlabels)->self._get_binner_for_time()
A:pandas.core.resample.bin_grouper->BinGrouper(bins, binlabels, indexer=self.groupby.indexer)
A:pandas.core.resample._agg_see_also_doc->dedent('\n    See Also\n    --------\n    DataFrame.groupby.aggregate\n    DataFrame.resample.transform\n    DataFrame.aggregate\n    ')
A:pandas.core.resample._agg_examples_doc->dedent("\n    Examples\n    --------\n    >>> s = pd.Series([1,2,3,4,5],\n                      index=pd.date_range('20130101', periods=5,freq='s'))\n    2013-01-01 00:00:00    1\n    2013-01-01 00:00:01    2\n    2013-01-01 00:00:02    3\n    2013-01-01 00:00:03    4\n    2013-01-01 00:00:04    5\n    Freq: S, dtype: int64\n\n    >>> r = s.resample('2s')\n    DatetimeIndexResampler [freq=<2 * Seconds>, axis=0, closed=left,\n                            label=left, convention=start, base=0]\n\n    >>> r.agg(np.sum)\n    2013-01-01 00:00:00    3\n    2013-01-01 00:00:02    7\n    2013-01-01 00:00:04    5\n    Freq: 2S, dtype: int64\n\n    >>> r.agg(['sum','mean','max'])\n                         sum  mean  max\n    2013-01-01 00:00:00    3   1.5    2\n    2013-01-01 00:00:02    7   3.5    4\n    2013-01-01 00:00:04    5   5.0    5\n\n    >>> r.agg({'result' : lambda x: x.mean() / x.std(),\n               'total' : np.sum})\n                         total    result\n    2013-01-01 00:00:00      3  2.121320\n    2013-01-01 00:00:02      7  4.949747\n    2013-01-01 00:00:04      5       NaN\n    ")
A:pandas.core.resample.(result, how)->self._aggregate(func, *args, **kwargs)
A:pandas.core.resample.result->super()._wrap_result(result)
A:pandas.core.resample.grouped->get_groupby(obj, by=None, grouper=grouper, axis=self.axis)
A:pandas.core.resample.result.index->super()._wrap_result(result).index.to_period(self.freq)
A:pandas.core.resample.result.name->getattr(obj, 'name', None)
A:pandas.core.resample.parent->kwargs.pop('parent', None)
A:pandas.core.resample.groupby->kwargs.pop('groupby', None)
A:pandas.core.resample.self.groupby->copy.copy(parent.groupby)
A:pandas.core.resample.x->self._shallow_copy(x, groupby=self.groupby)
A:pandas.core.resample.res_index->self._adjust_binner_for_upsample(binner)
A:pandas.core.resample.memb->ax.asfreq(self.freq, how=self.convention)
A:pandas.core.resample.indexer->ax.asfreq(self.freq, how=self.convention).get_indexer(new_index, method=method, limit=limit)
A:pandas.core.resample.tg->TimeGrouper(freq=rule, **kwargs)
A:pandas.core.resample.kwargs['key']->kwargs.pop('on', None)
A:pandas.core.resample.resampler->TimeGrouper(freq=rule, **kwargs)._get_resampler(groupby.obj, kind=kind)
A:pandas.core.resample.freq->to_offset(freq)
A:pandas.core.resample.self.convention->self.convention.lower()
A:pandas.core.resample.loffset->to_offset(loffset)
A:pandas.core.resample.r->self._get_resampler(obj)
A:pandas.core.resample.binnerlabels->PeriodIndex(data=[], freq=self.freq, name=ax.name)
A:pandas.core.resample.(first, last)->_get_timestamp_range_edges(first, last, offset, closed=closed, base=base)
A:pandas.core.resample.(binner, bin_edges)->self._adjust_bin_edges(binner, ax_values)
A:pandas.core.resample.bins->numpy.insert(bins, 0, nat_count)
A:pandas.core.resample.binner->binner.insert(0, NaT).insert(0, NaT)
A:pandas.core.resample.labels->labels.insert(0, NaT).insert(0, NaT)
A:pandas.core.resample.bin_edges->binner.insert(0, NaT).insert(0, NaT).tz_localize(None)
A:pandas.core.resample.labelsbinner->period_range(start=start, end=end, freq=self.freq, name=ax.name)
A:pandas.core.resample.end_stamps->end_stamps.tz_localize(ax.tzinfo).tz_localize(ax.tzinfo)
A:pandas.core.resample.nat_count->numpy.sum(memb._isnan)
A:pandas.core.resample.start->ax.min().asfreq(self.freq, how=self.convention)
A:pandas.core.resample.end->ax.max().asfreq(self.freq, how='end')
A:pandas.core.resample.(p_start, end)->_get_period_range_edges(start, end, self.freq, closed=self.closed, base=self.base)
A:pandas.core.resample.rng->numpy.arange(i8[0], i8[-1] + i8_extend, freq_mult)
A:pandas.core.resample.prng->type(memb._data)(rng, dtype=memb.dtype)
A:pandas.core.resample.new_values->pandas.core.algorithms.take_1d(obj.values, indexer)
A:pandas.core.resample.first->first.tz_convert('UTC').tz_convert('UTC')
A:pandas.core.resample.last->last.tz_convert('UTC').tz_convert('UTC')
A:pandas.core.resample.adjust_last->offset.is_on_offset(last)
A:pandas.core.resample.fresult->fresult.tz_localize('UTC').tz_convert(first_tzinfo).tz_localize('UTC').tz_convert(first_tzinfo)
A:pandas.core.resample.lresult->lresult.tz_localize('UTC').tz_convert(last_tzinfo).tz_localize('UTC').tz_convert(last_tzinfo)
A:pandas.core.resample.new_obj->obj.to_timestamp(how=self.convention).to_timestamp(how=self.convention).reindex(dti, method=method, fill_value=fill_value)
A:pandas.core.resample.new_obj.index->obj.to_timestamp(how=self.convention).to_timestamp(how=self.convention).reindex(dti, method=method, fill_value=fill_value).index.normalize()
A:pandas.core.resample.dti->date_range(obj.index[0], obj.index[-1], freq=freq)
pandas.core.resample.DatetimeIndexResampler(Resampler)
pandas.core.resample.DatetimeIndexResampler._adjust_binner_for_upsample(self,binner)
pandas.core.resample.DatetimeIndexResampler._downsample(self,how,**kwargs)
pandas.core.resample.DatetimeIndexResampler._get_binner_for_time(self)
pandas.core.resample.DatetimeIndexResampler._resampler_for_grouping(self)
pandas.core.resample.DatetimeIndexResampler._upsample(self,method,limit=None,fill_value=None)
pandas.core.resample.DatetimeIndexResampler._wrap_result(self,result)
pandas.core.resample.DatetimeIndexResamplerGroupby(_GroupByMixin,DatetimeIndexResampler)
pandas.core.resample.DatetimeIndexResamplerGroupby._constructor(self)
pandas.core.resample.PeriodIndexResampler(DatetimeIndexResampler)
pandas.core.resample.PeriodIndexResampler._convert_obj(self,obj)
pandas.core.resample.PeriodIndexResampler._downsample(self,how,**kwargs)
pandas.core.resample.PeriodIndexResampler._get_binner_for_time(self)
pandas.core.resample.PeriodIndexResampler._resampler_for_grouping(self)
pandas.core.resample.PeriodIndexResampler._upsample(self,method,limit=None,fill_value=None)
pandas.core.resample.PeriodIndexResamplerGroupby(_GroupByMixin,PeriodIndexResampler)
pandas.core.resample.PeriodIndexResamplerGroupby._constructor(self)
pandas.core.resample.Resampler(self,obj,groupby=None,axis=0,kind=None,**kwargs)
pandas.core.resample.Resampler.__getattr__(self,attr:str)
pandas.core.resample.Resampler.__init__(self,obj,groupby=None,axis=0,kind=None,**kwargs)
pandas.core.resample.Resampler.__iter__(self)
pandas.core.resample.Resampler.__str__(self)->str
pandas.core.resample.Resampler._apply_loffset(self,result)
pandas.core.resample.Resampler._assure_grouper(self)
pandas.core.resample.Resampler._convert_obj(self,obj)
pandas.core.resample.Resampler._downsample(self,f)
pandas.core.resample.Resampler._from_selection(self)->bool
pandas.core.resample.Resampler._get_binner(self)
pandas.core.resample.Resampler._get_binner_for_time(self)
pandas.core.resample.Resampler._get_resampler_for_grouping(self,groupby,**kwargs)
pandas.core.resample.Resampler._gotitem(self,key,ndim:int,subset=None)
pandas.core.resample.Resampler._groupby_and_aggregate(self,how,grouper=None,*args,**kwargs)
pandas.core.resample.Resampler._set_binner(self)
pandas.core.resample.Resampler._typ(self)->str
pandas.core.resample.Resampler._upsample(self,f,limit=None,fill_value=None)
pandas.core.resample.Resampler._wrap_result(self,result)
pandas.core.resample.Resampler.aggregate(self,func,*args,**kwargs)
pandas.core.resample.Resampler.asfreq(self,fill_value=None)
pandas.core.resample.Resampler.ax(self)
pandas.core.resample.Resampler.backfill(self,limit=None)
pandas.core.resample.Resampler.count(self)
pandas.core.resample.Resampler.fillna(self,method,limit=None)
pandas.core.resample.Resampler.interpolate(self,method='linear',axis=0,limit=None,inplace=False,limit_direction='forward',limit_area=None,downcast=None,**kwargs)
pandas.core.resample.Resampler.nearest(self,limit=None)
pandas.core.resample.Resampler.obj(self)
pandas.core.resample.Resampler.pad(self,limit=None)
pandas.core.resample.Resampler.pipe(self,func,*args,**kwargs)
pandas.core.resample.Resampler.quantile(self,q=0.5,**kwargs)
pandas.core.resample.Resampler.size(self)
pandas.core.resample.Resampler.std(self,ddof=1,*args,**kwargs)
pandas.core.resample.Resampler.transform(self,arg,*args,**kwargs)
pandas.core.resample.Resampler.var(self,ddof=1,*args,**kwargs)
pandas.core.resample.TimeGrouper(self,freq='Min',closed=None,label=None,how='mean',axis=0,fill_method=None,limit=None,loffset=None,kind=None,convention=None,base=0,**kwargs)
pandas.core.resample.TimeGrouper.__init__(self,freq='Min',closed=None,label=None,how='mean',axis=0,fill_method=None,limit=None,loffset=None,kind=None,convention=None,base=0,**kwargs)
pandas.core.resample.TimeGrouper._adjust_bin_edges(self,binner,ax_values)
pandas.core.resample.TimeGrouper._get_grouper(self,obj,validate:bool=True)
pandas.core.resample.TimeGrouper._get_period_bins(self,ax)
pandas.core.resample.TimeGrouper._get_resampler(self,obj,kind=None)
pandas.core.resample.TimeGrouper._get_time_bins(self,ax)
pandas.core.resample.TimeGrouper._get_time_delta_bins(self,ax)
pandas.core.resample.TimeGrouper._get_time_period_bins(self,ax)
pandas.core.resample.TimedeltaIndexResampler(DatetimeIndexResampler)
pandas.core.resample.TimedeltaIndexResampler._adjust_binner_for_upsample(self,binner)
pandas.core.resample.TimedeltaIndexResampler._get_binner_for_time(self)
pandas.core.resample.TimedeltaIndexResampler._resampler_for_grouping(self)
pandas.core.resample.TimedeltaIndexResamplerGroupby(_GroupByMixin,TimedeltaIndexResampler)
pandas.core.resample.TimedeltaIndexResamplerGroupby._constructor(self)
pandas.core.resample._GroupByMixin(self,obj,*args,**kwargs)
pandas.core.resample._GroupByMixin.__init__(self,obj,*args,**kwargs)
pandas.core.resample._GroupByMixin._apply(self,f,grouper=None,*args,**kwargs)
pandas.core.resample._adjust_dates_anchored(first,last,offset,closed='right',base=0)
pandas.core.resample._get_period_range_edges(first,last,offset,closed='left',base=0)
pandas.core.resample._get_timestamp_range_edges(first,last,offset,closed='left',base=0)
pandas.core.resample._take_new_index(obj,indexer,new_index,axis=0)
pandas.core.resample.asfreq(obj,freq,method=None,how=None,normalize=False,fill_value=None)
pandas.core.resample.get_resampler_for_grouping(groupby,rule,how=None,fill_method=None,limit=None,kind=None,**kwargs)
pandas.core.resample.resample(obj,kind=None,**kwds)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/accessor.py----------------------------------------
A:pandas.core.accessor.rv->set(dir(type(self)))
A:pandas.core.accessor.f->_create_delegator_method(name)
A:pandas.core.accessor.accessor_obj->self._accessor(obj)
pandas.core.accessor.CachedAccessor(self,name:str,accessor)
pandas.core.accessor.CachedAccessor.__get__(self,obj,cls)
pandas.core.accessor.CachedAccessor.__init__(self,name:str,accessor)
pandas.core.accessor.DirNamesMixin
pandas.core.accessor.DirNamesMixin.__dir__(self)
pandas.core.accessor.DirNamesMixin._dir_additions(self)
pandas.core.accessor.DirNamesMixin._dir_deletions(self)
pandas.core.accessor.PandasDelegate
pandas.core.accessor.PandasDelegate._add_delegate_accessors(cls,delegate,accessors,typ:str,overwrite:bool=False)
pandas.core.accessor.PandasDelegate._delegate_method(self,name,*args,**kwargs)
pandas.core.accessor.PandasDelegate._delegate_property_get(self,name,*args,**kwargs)
pandas.core.accessor.PandasDelegate._delegate_property_set(self,name,value,*args,**kwargs)
pandas.core.accessor._register_accessor(name,cls)
pandas.core.accessor.delegate_names(delegate,accessors,typ:str,overwrite:bool=False)
pandas.core.accessor.register_dataframe_accessor(name)
pandas.core.accessor.register_index_accessor(name)
pandas.core.accessor.register_series_accessor(name)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/reshape/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/reshape/api.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/reshape/reshape.py----------------------------------------
A:pandas.core.reshape.reshape.self.index->numpy.arange(len(data)).remove_unused_levels()
A:pandas.core.reshape.reshape.self.level->self.index._get_level_number(level)
A:pandas.core.reshape.reshape.self.new_index_levels->list(self.index.levels)
A:pandas.core.reshape.reshape.self.new_index_names->list(self.index.names)
A:pandas.core.reshape.reshape.self.removed_name->self.new_index_names.pop(self.level)
A:pandas.core.reshape.reshape.self.removed_level->self.new_index_levels.pop(self.level)
A:pandas.core.reshape.reshape.num_rows->numpy.max([index_level.size for index_level in self.new_index_levels])
A:pandas.core.reshape.reshape.num_cells->numpy.multiply(num_rows, num_columns, dtype=np.int32)
A:pandas.core.reshape.reshape.codes->codes.copy().copy()
A:pandas.core.reshape.reshape.levs->list(self.index.levels)
A:pandas.core.reshape.reshape.(comp_index, obs_ids)->get_compressed_ids(remaining_labels, level_sizes)
A:pandas.core.reshape.reshape.ngroups->len(obs_ids)
A:pandas.core.reshape.reshape.indexer->ensure_platform_int(indexer)
A:pandas.core.reshape.reshape.self.sorted_values->pandas.core.algorithms.take_nd(self.values, indexer, axis=0)
A:pandas.core.reshape.reshape.comp_index->ensure_platform_int(comp_index)
A:pandas.core.reshape.reshape.mask->notna(new_values)
A:pandas.core.reshape.reshape.self.compressor->ensure_platform_int(comp_index).searchsorted(np.arange(ngroups))
A:pandas.core.reshape.reshape.(values, _)->self.get_new_values()
A:pandas.core.reshape.reshape.columns->self.get_new_columns()
A:pandas.core.reshape.reshape.index->numpy.arange(len(data))
A:pandas.core.reshape.reshape.mask_all->notna(new_values).all()
A:pandas.core.reshape.reshape.new_values->frame.values.ravel()
A:pandas.core.reshape.reshape.new_mask->numpy.zeros(result_shape, dtype=bool)
A:pandas.core.reshape.reshape.(dtype, fill_value)->maybe_promote(values.dtype, self.fill_value)
A:pandas.core.reshape.reshape.sorted_values->sorted_values.astype(name, copy=False).astype(name, copy=False)
A:pandas.core.reshape.reshape.lev->self.removed_level.insert(0, item=self.removed_level._na_value)
A:pandas.core.reshape.reshape.width->len(self.value_columns)
A:pandas.core.reshape.reshape.propagator->numpy.repeat(np.arange(width), stride)
A:pandas.core.reshape.reshape.repeater->numpy.insert(repeater, 0, -1)
A:pandas.core.reshape.reshape.level->obj.index._get_level_number(level)
A:pandas.core.reshape.reshape.group_index->get_group_index(ccodes, shape, sort=False, xnull=False)
A:pandas.core.reshape.reshape.(comp_ids, obs_ids)->compress_group_index(group_index, sort=False)
A:pandas.core.reshape.reshape.recons_codes->decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)
A:pandas.core.reshape.reshape.dummy_index->MultiIndex(levels=rlevels + [obs_ids], codes=rcodes + [comp_ids], names=rnames + ['__placeholder__'], verify_integrity=False)
A:pandas.core.reshape.reshape.dummy->_get_dummies_1d(col[1], prefix=pre, prefix_sep=sep, dummy_na=dummy_na, sparse=sparse, drop_first=drop_first, dtype=dtype)
A:pandas.core.reshape.reshape.unstacked->_get_dummies_1d(col[1], prefix=pre, prefix_sep=sep, dummy_na=dummy_na, sparse=sparse, drop_first=drop_first, dtype=dtype).unstack('__placeholder__', fill_value=fill_value)
A:pandas.core.reshape.reshape.result->_get_dummies_1d(data, prefix, prefix_sep, dummy_na, sparse=sparse, drop_first=drop_first, dtype=dtype)
A:pandas.core.reshape.reshape.new_columns->new_columns.difference(drop_cols).difference(drop_cols)
A:pandas.core.reshape.reshape.unstacker->_Unstacker(obj.values, obj.index, level=level, value_columns=obj.columns, fill_value=fill_value, constructor=obj._constructor)
A:pandas.core.reshape.reshape.blocks->obj._data.unstack(unstacker, fill_value=fill_value)
A:pandas.core.reshape.reshape.dummy_arr->numpy.arange(len(series))
A:pandas.core.reshape.reshape.values->extract_array(series, extract_numpy=False)
A:pandas.core.reshape.reshape.(codes, categories)->factorize_from_iterable(index)
A:pandas.core.reshape.reshape.level_num->frame.columns._get_level_number(level)
A:pandas.core.reshape.reshape.new_levels->list(this.index.levels)
A:pandas.core.reshape.reshape.(clev, clab)->factorize(frame.columns)
A:pandas.core.reshape.reshape.new_names->list(this.index.names)
A:pandas.core.reshape.reshape.new_index->MultiIndex(levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False)
A:pandas.core.reshape.reshape.(levels, (ilab, clab))->zip(*map(factorize, (frame.index, frame.columns)))
A:pandas.core.reshape.reshape.dtypes->list(frame.dtypes.values)
A:pandas.core.reshape.reshape.arr->numpy.dtype(dtype).construct_array_type()
A:pandas.core.reshape.reshape.this->this.sort_index(level=level_to_sort, axis=1).sort_index(level=level_to_sort, axis=1)
A:pandas.core.reshape.reshape.lev1->_convert_level_number(i, roll_columns)
A:pandas.core.reshape.reshape.lev2->_convert_level_number(i + 1, roll_columns)
A:pandas.core.reshape.reshape.roll_columns->roll_columns.swaplevel(lev1, lev2).swaplevel(lev1, lev2)
A:pandas.core.reshape.reshape.level_to_sort->_convert_level_number(0, this.columns)
A:pandas.core.reshape.reshape.tuples->list(zip(*[lev.take(level_codes) for (lev, level_codes) in zip(this.columns.levels[:-1], this.columns.codes[:-1])]))
A:pandas.core.reshape.reshape.level_codes->sorted(set(this.columns.codes[-1]))
A:pandas.core.reshape.reshape.levsize->len(level_codes)
A:pandas.core.reshape.reshape.loc->this.sort_index(level=level_to_sort, axis=1).sort_index(level=level_to_sort, axis=1).columns.get_loc(key)
A:pandas.core.reshape.reshape.slice_len->len(loc)
A:pandas.core.reshape.reshape.chunk.columns->level_vals.take(chunk.columns.codes[-1])
A:pandas.core.reshape.reshape.value_slice->value_slice.ravel().ravel()
A:pandas.core.reshape.reshape.idx->numpy.arange(n_rows * n_columns).reshape(n_columns, n_rows).T.ravel()
A:pandas.core.reshape.reshape.N->len(data)
A:pandas.core.reshape.reshape.(old_codes, old_levels)->factorize_from_iterable(this.index)
A:pandas.core.reshape.reshape.data_to_encode->data.select_dtypes(include=dtypes_to_encode)
A:pandas.core.reshape.reshape.len_msg->len_msg.format(name=name, len_item=len(item), len_enc=data_to_encode.shape[1]).format(name=name, len_item=len(item), len_enc=data_to_encode.shape[1])
A:pandas.core.reshape.reshape.prefix->itertools.cycle([prefix])
A:pandas.core.reshape.reshape.prefix_sep->itertools.cycle([prefix_sep])
A:pandas.core.reshape.reshape.(codes, levels)->factorize_from_iterable(Series(data))
A:pandas.core.reshape.reshape.dtype->numpy.dtype(dtype)
A:pandas.core.reshape.reshape.codes[codes == -1]->len(levels)
A:pandas.core.reshape.reshape.levels->numpy.append(levels, np.nan)
A:pandas.core.reshape.reshape.number_of_cols->len(levels)
A:pandas.core.reshape.reshape.sarr->SparseArray(np.ones(len(ixs), dtype=dtype), sparse_index=IntIndex(N, ixs), fill_value=fill_value, dtype=dtype)
A:pandas.core.reshape.reshape.out->concat(sparse_series, axis=1, copy=False)
A:pandas.core.reshape.reshape.dummy_mat->numpy.eye(number_of_cols, dtype=dtype).take(codes, axis=0)
pandas.core.reshape.reshape._Unstacker(self,values:np.ndarray,index,level=-1,value_columns=None,fill_value=None,constructor=None)
pandas.core.reshape.reshape._Unstacker.__init__(self,values:np.ndarray,index,level=-1,value_columns=None,fill_value=None,constructor=None)
pandas.core.reshape.reshape._Unstacker._make_selectors(self)
pandas.core.reshape.reshape._Unstacker._make_sorted_values_labels(self)
pandas.core.reshape.reshape._Unstacker.get_new_columns(self)
pandas.core.reshape.reshape._Unstacker.get_new_index(self)
pandas.core.reshape.reshape._Unstacker.get_new_values(self)
pandas.core.reshape.reshape._Unstacker.get_result(self)
pandas.core.reshape.reshape._get_dummies_1d(data,prefix,prefix_sep='_',dummy_na=False,sparse=False,drop_first=False,dtype=None)
pandas.core.reshape.reshape._reorder_for_extension_array_stack(arr,n_rows:int,n_columns:int)
pandas.core.reshape.reshape._stack_multi_columns(frame,level_num=-1,dropna=True)
pandas.core.reshape.reshape._unstack_extension_series(series,level,fill_value)
pandas.core.reshape.reshape._unstack_frame(obj,level,fill_value=None)
pandas.core.reshape.reshape._unstack_multiple(data,clocs,fill_value=None)
pandas.core.reshape.reshape.get_dummies(data,prefix=None,prefix_sep='_',dummy_na=False,columns=None,sparse=False,drop_first=False,dtype=None)->'DataFrame'
pandas.core.reshape.reshape.stack(frame,level=-1,dropna=True)
pandas.core.reshape.reshape.stack_multiple(frame,level,dropna=True)
pandas.core.reshape.reshape.unstack(obj,level,fill_value=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/reshape/concat.py----------------------------------------
A:pandas.core.reshape.concat.op->_Concatenator(objs, axis=axis, ignore_index=ignore_index, join=join, keys=keys, levels=levels, names=names, verify_integrity=verify_integrity, copy=copy, sort=sort)
A:pandas.core.reshape.concat.keys->Index(clean_keys, name=name)
A:pandas.core.reshape.concat.objs->list(com.not_none(*objs))
A:pandas.core.reshape.concat.name->pandas.core.common.consensus_name_attr(self.objs)
A:pandas.core.reshape.concat.ndims->set()
A:pandas.core.reshape.concat.msg->"cannot concatenate object of type '{typ}'; only Series and DataFrame objs are valid".format(typ=type(obj))
A:pandas.core.reshape.concat.max_ndim->max(ndims)
A:pandas.core.reshape.concat.axis->sample._get_axis_number(axis)
A:pandas.core.reshape.concat.self._is_frame->isinstance(sample, DataFrame)
A:pandas.core.reshape.concat.self._is_series->isinstance(sample, Series)
A:pandas.core.reshape.concat.obj->sample._constructor({name: obj})
A:pandas.core.reshape.concat.self.new_axes->self._get_new_axes()
A:pandas.core.reshape.concat.mgr->self.objs[0]._data.concat([x._data for x in self.objs], self.new_axes)
A:pandas.core.reshape.concat.data->dict(zip(range(len(self.objs)), self.objs))
A:pandas.core.reshape.concat.df->cons(data, index=index)
A:pandas.core.reshape.concat.new_data->concatenate_block_managers(mgrs_indexers, self.new_axes, concat_axis=self.axis, copy=self.copy)
A:pandas.core.reshape.concat.ndim->self._get_result_dim()
A:pandas.core.reshape.concat.data_axis->self.objs[0]._get_block_manager_axis(i)
A:pandas.core.reshape.concat.idx->pandas.core.indexes.base.default_index(sum((len(i) for i in indexes)))
A:pandas.core.reshape.concat.concat_axis->_make_concat_multiindex(indexes, self.keys, self.levels, self.names)
A:pandas.core.reshape.concat.overlap->concat_index[concat_index.duplicated()].unique()
A:pandas.core.reshape.concat.zipped->list(zip(*keys))
A:pandas.core.reshape.concat.(_, levels)->factorize_from_iterables(zipped)
A:pandas.core.reshape.concat.i->level.get_loc(key)
A:pandas.core.reshape.concat.concat_index->_concat_indexes(indexes)
A:pandas.core.reshape.concat.(codes, categories)->factorize_from_iterable(concat_index)
A:pandas.core.reshape.concat.names->list(names)
A:pandas.core.reshape.concat.n->len(new_index)
A:pandas.core.reshape.concat.kpieces->len(indexes)
A:pandas.core.reshape.concat.new_names->list(names)
A:pandas.core.reshape.concat.new_levels->list(levels)
A:pandas.core.reshape.concat.hlevel->ensure_index(hlevel)
A:pandas.core.reshape.concat.mapped->level.get_indexer(hlevel)
pandas.core.reshape.concat._Concatenator(self,objs,axis=0,join:str='outer',keys=None,levels=None,names=None,ignore_index:bool=False,verify_integrity:bool=False,copy:bool=True,sort=False)
pandas.core.reshape.concat._Concatenator.__init__(self,objs,axis=0,join:str='outer',keys=None,levels=None,names=None,ignore_index:bool=False,verify_integrity:bool=False,copy:bool=True,sort=False)
pandas.core.reshape.concat._Concatenator._get_comb_axis(self,i:int)->Index
pandas.core.reshape.concat._Concatenator._get_concat_axis(self)->Index
pandas.core.reshape.concat._Concatenator._get_new_axes(self)->List[Index]
pandas.core.reshape.concat._Concatenator._get_result_dim(self)->int
pandas.core.reshape.concat._Concatenator._maybe_check_integrity(self,concat_index:Index)
pandas.core.reshape.concat._Concatenator.get_result(self)
pandas.core.reshape.concat._concat_indexes(indexes)->Index
pandas.core.reshape.concat._make_concat_multiindex(indexes,keys,levels=None,names=None)->MultiIndex
pandas.core.reshape.concat.concat(objs:Union[Iterable[FrameOrSeriesUnion],Mapping[Optional[Hashable],FrameOrSeriesUnion]],axis=0,join='outer',ignore_index:bool=False,keys=None,levels=None,names=None,verify_integrity:bool=False,sort:bool=False,copy:bool=True)->FrameOrSeriesUnion


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/reshape/pivot.py----------------------------------------
A:pandas.core.reshape.pivot.index->pandas.core.common.maybe_make_list(index)
A:pandas.core.reshape.pivot.columns->pandas.core.common.maybe_make_list(columns)
A:pandas.core.reshape.pivot.table->table.fillna(0).fillna(0)
A:pandas.core.reshape.pivot.values->list(values)
A:pandas.core.reshape.pivot.grouped->data.groupby(keys, observed=observed)
A:pandas.core.reshape.pivot.agged->agged.dropna(how='all').dropna(how='all')
A:pandas.core.reshape.pivot.agged[v]->maybe_downcast_to_dtype(agged[v], data[v].dtype)
A:pandas.core.reshape.pivot.m->pandas.core.indexes.api.MultiIndex.from_arrays(cartesian_product(table.columns.levels), names=table.columns.names)
A:pandas.core.reshape.pivot._table->table.fillna(0).fillna(0).fillna(fill_value, downcast='infer')
A:pandas.core.reshape.pivot.msg->'Conflicting name "{name}" in margins'.format(name=margins_name)
A:pandas.core.reshape.pivot.grand_margin->_compute_grand_margin(data, values, aggfunc, margins_name)
A:pandas.core.reshape.pivot.marginal_result_set->_generate_marginal_results_without_values(table, data, rows, cols, aggfunc, observed, margins_name)
A:pandas.core.reshape.pivot.row_margin->Series(np.nan, index=result.columns)
A:pandas.core.reshape.pivot.margin_dummy[cols]->margin_dummy[cols].apply(maybe_downcast_to_dtype, args=(dtype,)).apply(maybe_downcast_to_dtype, args=(dtype,))
A:pandas.core.reshape.pivot.result->concat(table_pieces, axis=cat_axis)
A:pandas.core.reshape.pivot.result.index->concat(table_pieces, axis=cat_axis).index._to_safe_for_reshape()
A:pandas.core.reshape.pivot.grand_margin[k]->aggfunc(v)
A:pandas.core.reshape.pivot.margin->data.groupby(level=0, axis=0, observed=observed).apply(aggfunc)
A:pandas.core.reshape.pivot.all_key->_all_key()
A:pandas.core.reshape.pivot.piece->piece.copy().copy()
A:pandas.core.reshape.pivot.row_margin.index->Series(np.nan, index=result.columns).index.reorder_levels(new_order)
A:pandas.core.reshape.pivot.by->list(by)
A:pandas.core.reshape.pivot.indexed->data._constructor_sliced(data[values].values, index=index)
A:pandas.core.reshape.pivot.rownames->_get_names(index, rownames, prefix='row')
A:pandas.core.reshape.pivot.colnames->_get_names(columns, colnames, prefix='col')
A:pandas.core.reshape.pivot.common_idx->get_objs_combined_axis(pass_objs, intersect=True, sort=False)
A:pandas.core.reshape.pivot.df->DataFrame(data, index=common_idx)
A:pandas.core.reshape.pivot.names->list(names)
pandas.core.reshape.pivot._add_margins(table:Union['Series','DataFrame'],data,values,rows,cols,aggfunc,observed=None,margins_name:str='All',fill_value=None)
pandas.core.reshape.pivot._compute_grand_margin(data,values,aggfunc,margins_name:str='All')
pandas.core.reshape.pivot._convert_by(by)
pandas.core.reshape.pivot._generate_marginal_results(table,data,values,rows,cols,aggfunc,observed,grand_margin,margins_name:str='All')
pandas.core.reshape.pivot._generate_marginal_results_without_values(table:'DataFrame',data,rows,cols,aggfunc,observed,margins_name:str='All')
pandas.core.reshape.pivot._get_names(arrs,names,prefix:str='row')
pandas.core.reshape.pivot._normalize(table,normalize,margins:bool,margins_name='All')
pandas.core.reshape.pivot.crosstab(index,columns,values=None,rownames=None,colnames=None,aggfunc=None,margins=False,margins_name:str='All',dropna:bool=True,normalize=False)->'DataFrame'
pandas.core.reshape.pivot.pivot(data:'DataFrame',index=None,columns=None,values=None)->'DataFrame'
pandas.core.reshape.pivot.pivot_table(data,values=None,index=None,columns=None,aggfunc='mean',fill_value=None,margins=False,dropna=True,margins_name='All',observed=False)->'DataFrame'


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/reshape/melt.py----------------------------------------
A:pandas.core.reshape.melt.cols->list(frame.columns)
A:pandas.core.reshape.melt.id_vars->list(set(df.columns.tolist()).difference(value_vars_flattened))
A:pandas.core.reshape.melt.missing->Index(com.flatten(value_vars)).difference(cols)
A:pandas.core.reshape.melt.value_vars->list(value_vars)
A:pandas.core.reshape.melt.frame->frame.copy().copy()
A:pandas.core.reshape.melt.frame.columns->frame.copy().copy().columns.get_level_values(col_level)
A:pandas.core.reshape.melt.id_data->numpy.tile(id_data.values, K)
A:pandas.core.reshape.melt.mdata[value_name]->frame.copy().copy().values.ravel('F')
A:pandas.core.reshape.melt.mdata[col]->numpy.tile(data[col].values, K)
A:pandas.core.reshape.melt.keys->list(groups.keys())
A:pandas.core.reshape.melt.values->list(groups.values())
A:pandas.core.reshape.melt.(keys, values)->zip(*groups)
A:pandas.core.reshape.melt.all_cols->list(set.union(*[set(x) for x in values]))
A:pandas.core.reshape.melt.id_cols->list(data.columns.difference(all_cols))
A:pandas.core.reshape.melt.K->len(values[0])
A:pandas.core.reshape.melt.mdata[target]->concat_compat(to_concat)
A:pandas.core.reshape.melt.mask->numpy.ones(len(mdata[pivot_cols[0]]), dtype=bool)
A:pandas.core.reshape.melt.regex->'^{stub}{sep}{suffix}$'.format(stub=re.escape(stub), sep=re.escape(sep), suffix=suffix)
A:pandas.core.reshape.melt.pattern->re.compile(regex)
A:pandas.core.reshape.melt.newdf->melt(df, id_vars=i, value_vars=value_vars, value_name=stub.rstrip(sep), var_name=j)
A:pandas.core.reshape.melt.newdf[j]->to_numeric(newdf[j], errors='ignore')
A:pandas.core.reshape.melt.stubnames->list(stubnames)
A:pandas.core.reshape.melt.i->list(i)
A:pandas.core.reshape.melt.melted->_melted[0].join(_melted[1:], how='outer')
A:pandas.core.reshape.melt.new->df[id_vars].merge(melted.reset_index(), on=i).set_index(i + [j])
pandas.core.reshape.melt.lreshape(data:DataFrame,groups,dropna:bool=True,label=None)->DataFrame
pandas.core.reshape.melt.melt(frame:DataFrame,id_vars=None,value_vars=None,var_name=None,value_name='value',col_level=None)->DataFrame
pandas.core.reshape.melt.wide_to_long(df:DataFrame,stubnames,i,j,sep:str='',suffix:str='\\d+')->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/reshape/tile.py----------------------------------------
A:pandas.core.reshape.tile.x->numpy.asarray(x)
A:pandas.core.reshape.tile.(x, dtype)->_coerce_to_type(x)
A:pandas.core.reshape.tile.bins->_convert_bin_to_datelike_type(bins, dtype)
A:pandas.core.reshape.tile.(fac, bins)->_bins_to_cuts(x, bins, labels=labels, precision=precision, include_lowest=True, dtype=dtype, duplicates=duplicates)
A:pandas.core.reshape.tile.quantiles->numpy.linspace(0, 1, q + 1)
A:pandas.core.reshape.tile.ids->ensure_int64(bins.searchsorted(x, side=side))
A:pandas.core.reshape.tile.result->result.astype(np.float64).astype(np.float64)
A:pandas.core.reshape.tile.unique_bins->pandas.core.algorithms.unique(bins)
A:pandas.core.reshape.tile.has_nas->na_mask.any()
A:pandas.core.reshape.tile.labels->Categorical(labels, categories=labels, ordered=True)
A:pandas.core.reshape.tile.dtype->numpy.dtype('timedelta64[ns]')
A:pandas.core.reshape.tile.bins_dtype->infer_dtype(bins, skipna=False)
A:pandas.core.reshape.tile.precision->_infer_precision(precision, bins)
A:pandas.core.reshape.tile.breaks[0]->adjust(breaks[0])
A:pandas.core.reshape.tile.ndim->getattr(x, 'ndim', None)
A:pandas.core.reshape.tile.fac->original._constructor(fac, index=original.index, name=original.name)
A:pandas.core.reshape.tile.(frac, whole)->numpy.modf(x)
pandas.core.reshape.tile._bins_to_cuts(x,bins,right:bool=True,labels=None,precision:int=3,include_lowest:bool=False,dtype=None,duplicates:str='raise')
pandas.core.reshape.tile._coerce_to_type(x)
pandas.core.reshape.tile._convert_bin_to_datelike_type(bins,dtype)
pandas.core.reshape.tile._convert_bin_to_numeric_type(bins,dtype)
pandas.core.reshape.tile._format_labels(bins,precision:int,right:bool=True,include_lowest:bool=False,dtype=None)
pandas.core.reshape.tile._infer_precision(base_precision:int,bins)->int
pandas.core.reshape.tile._postprocess_for_cut(fac,bins,retbins:bool,dtype,original)
pandas.core.reshape.tile._preprocess_for_cut(x)
pandas.core.reshape.tile._round_frac(x,precision:int)
pandas.core.reshape.tile.cut(x,bins,right:bool=True,labels=None,retbins:bool=False,precision:int=3,include_lowest:bool=False,duplicates:str='raise')
pandas.core.reshape.tile.qcut(x,q,labels=None,retbins:bool=False,precision:int=3,duplicates:str='raise')


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/reshape/util.py----------------------------------------
A:pandas.core.reshape.util.lenX->numpy.fromiter((len(x) for x in X), dtype=np.intp)
A:pandas.core.reshape.util.cumprodX->numpy.cumproduct(lenX)
A:pandas.core.reshape.util.a->numpy.roll(cumprodX, 1)
A:pandas.core.reshape.util.b->numpy.zeros_like(cumprodX)
pandas.core.reshape.util.cartesian_product(X)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/reshape/merge.py----------------------------------------
A:pandas.core.reshape.merge.op->_AsOfMerge(left, right, on=on, left_on=left_on, right_on=right_on, left_index=left_index, right_index=right_index, by=by, left_by=left_by, right_by=right_by, suffixes=suffixes, how='asof', tolerance=tolerance, allow_exact_matches=allow_exact_matches, direction=direction)
A:pandas.core.reshape.merge.lby->left.copy().groupby(by, sort=False)
A:pandas.core.reshape.merge._right->_validate_operand(right)
A:pandas.core.reshape.merge.rby->right.copy().groupby(by, sort=False)
A:pandas.core.reshape.merge.rhs->right.copy().take(rby.indices[key])
A:pandas.core.reshape.merge.lcols->lhs.columns.tolist()
A:pandas.core.reshape.merge.merged->_merge_pieces(lhs, rhs)
A:pandas.core.reshape.merge.merged.index->range(len(merged))
A:pandas.core.reshape.merge.result->typ(result_data).__finalize__(self, method=self._merge_type)
A:pandas.core.reshape.merge.(result, _)->_groupby_and_merge(right_by, on, right, left, lambda x, y: _merger(y, x), check_duplicates=False)
A:pandas.core.reshape.merge._left->_validate_operand(left)
A:pandas.core.reshape.merge.self.on->pandas.core.common.maybe_make_list(on)
A:pandas.core.reshape.merge.self.left_on->pandas.core.common.maybe_make_list(left_on)
A:pandas.core.reshape.merge.self.right_on->pandas.core.common.maybe_make_list(right_on)
A:pandas.core.reshape.merge.msg->'incompatible tolerance {tolerance}, must be compat with type {lkdtype}'.format(tolerance=type(self.tolerance), lkdtype=repr(lt.dtype))
A:pandas.core.reshape.merge.(self.left_join_keys, self.right_join_keys, self.join_names)->self._get_merge_keys()
A:pandas.core.reshape.merge.(self.left, self.right)->self._indicator_pre_merge(self.left, self.right)
A:pandas.core.reshape.merge.(join_index, left_indexer, right_indexer)->self._get_join_info()
A:pandas.core.reshape.merge.(llabels, rlabels)->_items_overlap_with_suffix(ldata.items, lsuf, rdata.items, rsuf)
A:pandas.core.reshape.merge.result_data->concatenate_block_managers([(ldata, lindexers), (rdata, rindexers)], axes=[llabels.append(rlabels), join_index], concat_axis=0, copy=self.copy)
A:pandas.core.reshape.merge.columns->left.copy().columns.union(right.columns)
A:pandas.core.reshape.merge.left->left.copy().copy()
A:pandas.core.reshape.merge.right->right.copy().copy()
A:pandas.core.reshape.merge.left['_left_indicator']->left['_left_indicator'].astype('int8').astype('int8')
A:pandas.core.reshape.merge.right['_right_indicator']->right['_right_indicator'].astype('int8').astype('int8')
A:pandas.core.reshape.merge.result['_left_indicator']->result['_left_indicator'].fillna(0).fillna(0)
A:pandas.core.reshape.merge.result['_right_indicator']->result['_right_indicator'].fillna(0).fillna(0)
A:pandas.core.reshape.merge.result[self.indicator_name]->result[self.indicator_name].cat.rename_categories(['left_only', 'right_only', 'both'])
A:pandas.core.reshape.merge.keys->zip(self.join_names, self.left_on, self.right_on)
A:pandas.core.reshape.merge.left_has_missing->(left_indexer == -1).any()
A:pandas.core.reshape.merge.right_has_missing->(right_indexer == -1).any()
A:pandas.core.reshape.merge.lfill->na_value_for_dtype(take_left.dtype)
A:pandas.core.reshape.merge.lvals->pandas.core.algorithms.take_1d(take_left, left_indexer, fill_value=lfill)
A:pandas.core.reshape.merge.rfill->na_value_for_dtype(take_right.dtype)
A:pandas.core.reshape.merge.rvals->pandas.core.algorithms.take_1d(take_right, right_indexer, fill_value=rfill)
A:pandas.core.reshape.merge.key_col->Index(lvals).where(~mask, rvals)
A:pandas.core.reshape.merge.result.index->Index(key_col, name=name)
A:pandas.core.reshape.merge.(join_index, right_indexer, left_indexer)->_left_join_on_index(right_ax, left_ax, self.right_join_keys, sort=self.sort)
A:pandas.core.reshape.merge.(left_indexer, right_indexer)->_get_single_indexer(jkey, right_ax, sort=sort)
A:pandas.core.reshape.merge.join_index->left_ax.take(left_indexer)
A:pandas.core.reshape.merge.left_indexer->numpy.array([-1] * len(join_index))
A:pandas.core.reshape.merge.right_indexer->numpy.array([-1] * len(join_index))
A:pandas.core.reshape.merge.fill_value->na_value_for_dtype(index.dtype, compat=False)
A:pandas.core.reshape.merge.index->index.append(Index([fill_value])).append(Index([fill_value]))
A:pandas.core.reshape.merge.self.left->self.left.assign(**{name: self.left[name].astype(typ)})
A:pandas.core.reshape.merge.self.right->self.right.assign(**{name: self.right[name].astype(typ)})
A:pandas.core.reshape.merge.lk_is_cat->is_categorical_dtype(lk)
A:pandas.core.reshape.merge.rk_is_cat->is_categorical_dtype(rk)
A:pandas.core.reshape.merge.lk_is_object->is_object_dtype(lk)
A:pandas.core.reshape.merge.rk_is_object->is_object_dtype(rk)
A:pandas.core.reshape.merge.inferred_left->pandas._libs.lib.infer_dtype(lk, skipna=False)
A:pandas.core.reshape.merge.inferred_right->pandas._libs.lib.infer_dtype(rk, skipna=False)
A:pandas.core.reshape.merge.common_cols->self.left.columns.intersection(self.right.columns)
A:pandas.core.reshape.merge.n->len(self.right_on)
A:pandas.core.reshape.merge.zipped->zip(*mapped)
A:pandas.core.reshape.merge.(lkey, rkey)->_get_join_keys(lcodes, rcodes, shape, sort)
A:pandas.core.reshape.merge.(lkey, rkey, count)->_factorize_keys(lkey, rkey, sort=sort)
A:pandas.core.reshape.merge.kwargs->copy.copy(kwargs)
A:pandas.core.reshape.merge.lindexer->range(left.size)
A:pandas.core.reshape.merge.rindexer->range(right.size)
A:pandas.core.reshape.merge.name_idx->idx.names.index(dropped_level_name)
A:pandas.core.reshape.merge.restore_codes->pandas.core.algorithms.take_nd(codes, indexer, fill_value=-1)
A:pandas.core.reshape.merge.left_join_indexer->pandas._libs.join.ffill_indexer(left_indexer)
A:pandas.core.reshape.merge.right_join_indexer->pandas._libs.join.ffill_indexer(right_indexer)
A:pandas.core.reshape.merge.name->'asof_join_{dir}_on_X_by_Y'.format(dir=direction)
A:pandas.core.reshape.merge.(left_join_keys, right_join_keys, join_names)->super()._get_merge_keys()
A:pandas.core.reshape.merge.labels->numpy.concatenate([left, right])
A:pandas.core.reshape.merge.labeled_dtypes->list(zip(labels, dtypes))
A:pandas.core.reshape.merge.left_values->left_values.view('i8').view('i8')
A:pandas.core.reshape.merge.right_values->right_values.view('i8').view('i8')
A:pandas.core.reshape.merge.tolerance->Timedelta(tolerance)
A:pandas.core.reshape.merge.left_by_values->by_type_caster(left_by_values)
A:pandas.core.reshape.merge.right_by_values->by_type_caster(right_by_values)
A:pandas.core.reshape.merge.by_type->_get_cython_type_upcast(left_by_values.dtype)
A:pandas.core.reshape.merge.func->_asof_function(self.direction)
A:pandas.core.reshape.merge.rcodes->list(map(i8copy, index.codes))
A:pandas.core.reshape.merge.(left_key, right_key, count)->_factorize_keys(join_key, index, sort=sort)
A:pandas.core.reshape.merge.(right_indexer, left_indexer)->pandas._libs.join.left_outer_join(y, x, max_groups)
A:pandas.core.reshape.merge.rk->ensure_object(rk)
A:pandas.core.reshape.merge.lk->ensure_object(lk)
A:pandas.core.reshape.merge.(lk, _)->ensure_object(lk)._values_for_factorize()
A:pandas.core.reshape.merge.(rk, _)->ensure_object(rk)._values_for_factorize()
A:pandas.core.reshape.merge.rizer->klass(max(len(lk), len(rk)))
A:pandas.core.reshape.merge.llab->klass(max(len(lk), len(rk))).factorize(lk)
A:pandas.core.reshape.merge.rlab->klass(max(len(lk), len(rk))).factorize(rk)
A:pandas.core.reshape.merge.count->klass(max(len(lk), len(rk))).get_count()
A:pandas.core.reshape.merge.uniques->klass(max(len(lk), len(rk))).uniques.to_array()
A:pandas.core.reshape.merge.(llab, rlab)->_sort_labels(uniques, llab, rlab)
A:pandas.core.reshape.merge.lany->lmask.any()
A:pandas.core.reshape.merge.rany->rmask.any()
A:pandas.core.reshape.merge.llength->len(left)
A:pandas.core.reshape.merge.(_, new_labels)->pandas.core.algorithms.safe_sort(uniques, labels, na_sentinel=-1)
A:pandas.core.reshape.merge.new_labels->ensure_int64(new_labels)
A:pandas.core.reshape.merge.nlev->next(filter(pred, range(len(shape), 0, -1)))
A:pandas.core.reshape.merge.stride->numpy.prod(shape[1:nlev], dtype='i8')
A:pandas.core.reshape.merge.to_rename->left.copy().copy().intersection(right)
A:pandas.core.reshape.merge.lrenamer->partial(renamer, suffix=lsuffix)
A:pandas.core.reshape.merge.rrenamer->partial(renamer, suffix=rsuffix)
pandas.core.reshape.merge._AsOfMerge(self,left,right,on=None,left_on=None,right_on=None,left_index:bool=False,right_index:bool=False,by=None,left_by=None,right_by=None,axis=1,suffixes=('_x','_y'),copy:bool=True,fill_method=None,how:str='asof',tolerance=None,allow_exact_matches:bool=True,direction:str='backward')
pandas.core.reshape.merge._AsOfMerge.__init__(self,left,right,on=None,left_on=None,right_on=None,left_index:bool=False,right_index:bool=False,by=None,left_by=None,right_by=None,axis=1,suffixes=('_x','_y'),copy:bool=True,fill_method=None,how:str='asof',tolerance=None,allow_exact_matches:bool=True,direction:str='backward')
pandas.core.reshape.merge._AsOfMerge._asof_key(self)
pandas.core.reshape.merge._AsOfMerge._get_join_indexers(self)
pandas.core.reshape.merge._AsOfMerge._get_merge_keys(self)
pandas.core.reshape.merge._AsOfMerge._validate_specification(self)
pandas.core.reshape.merge._MergeOperation(self,left:Union['Series','DataFrame'],right:Union['Series','DataFrame'],how:str='inner',on=None,left_on=None,right_on=None,axis=1,left_index:bool=False,right_index:bool=False,sort:bool=True,suffixes=('_x','_y'),copy:bool=True,indicator:bool=False,validate=None)
pandas.core.reshape.merge._MergeOperation.__init__(self,left:Union['Series','DataFrame'],right:Union['Series','DataFrame'],how:str='inner',on=None,left_on=None,right_on=None,axis=1,left_index:bool=False,right_index:bool=False,sort:bool=True,suffixes=('_x','_y'),copy:bool=True,indicator:bool=False,validate=None)
pandas.core.reshape.merge._MergeOperation._create_join_index(self,index:Index,other_index:Index,indexer,other_indexer,how:str='left')
pandas.core.reshape.merge._MergeOperation._get_join_indexers(self)
pandas.core.reshape.merge._MergeOperation._get_join_info(self)
pandas.core.reshape.merge._MergeOperation._get_merge_keys(self)
pandas.core.reshape.merge._MergeOperation._indicator_post_merge(self,result)
pandas.core.reshape.merge._MergeOperation._indicator_pre_merge(self,left:'DataFrame',right:'DataFrame')->Tuple['DataFrame', 'DataFrame']
pandas.core.reshape.merge._MergeOperation._maybe_add_join_keys(self,result,left_indexer,right_indexer)
pandas.core.reshape.merge._MergeOperation._maybe_coerce_merge_keys(self)
pandas.core.reshape.merge._MergeOperation._maybe_restore_index_levels(self,result)
pandas.core.reshape.merge._MergeOperation._validate(self,validate:str)
pandas.core.reshape.merge._MergeOperation._validate_specification(self)
pandas.core.reshape.merge._MergeOperation.get_result(self)
pandas.core.reshape.merge._OrderedMerge(self,left,right,on=None,left_on=None,right_on=None,left_index:bool=False,right_index:bool=False,axis=1,suffixes=('_x','_y'),copy:bool=True,fill_method=None,how:str='outer')
pandas.core.reshape.merge._OrderedMerge.__init__(self,left,right,on=None,left_on=None,right_on=None,left_index:bool=False,right_index:bool=False,axis=1,suffixes=('_x','_y'),copy:bool=True,fill_method=None,how:str='outer')
pandas.core.reshape.merge._OrderedMerge.get_result(self)
pandas.core.reshape.merge._any(x)->bool
pandas.core.reshape.merge._asof_by_function(direction:str)
pandas.core.reshape.merge._asof_function(direction:str)
pandas.core.reshape.merge._factorize_keys(lk,rk,sort=True)
pandas.core.reshape.merge._get_cython_type_upcast(dtype)
pandas.core.reshape.merge._get_join_indexers(left_keys,right_keys,sort:bool=False,how:str='inner',**kwargs)
pandas.core.reshape.merge._get_join_keys(llab,rlab,shape,sort:bool)
pandas.core.reshape.merge._get_multiindex_indexer(join_keys,index:MultiIndex,sort:bool)
pandas.core.reshape.merge._get_single_indexer(join_key,index,sort:bool=False)
pandas.core.reshape.merge._groupby_and_merge(by,on,left,right:'DataFrame',_merge_pieces,check_duplicates:bool=True)
pandas.core.reshape.merge._items_overlap_with_suffix(left:Index,lsuffix,right:Index,rsuffix)
pandas.core.reshape.merge._left_join_on_index(left_ax:Index,right_ax:Index,join_keys,sort:bool=False)
pandas.core.reshape.merge._restore_dropped_levels_multijoin(left:MultiIndex,right:MultiIndex,dropped_level_names,join_index,lindexer,rindexer)
pandas.core.reshape.merge._right_outer_join(x,y,max_groups)
pandas.core.reshape.merge._should_fill(lname,rname)->bool
pandas.core.reshape.merge._sort_labels(uniques:np.ndarray,left,right)
pandas.core.reshape.merge._validate_operand(obj:FrameOrSeries)->'DataFrame'
pandas.core.reshape.merge.merge(left,right,how:str='inner',on=None,left_on=None,right_on=None,left_index:bool=False,right_index:bool=False,sort:bool=False,suffixes=('_x','_y'),copy:bool=True,indicator:bool=False,validate=None)->'DataFrame'
pandas.core.reshape.merge.merge_asof(left,right,on=None,left_on=None,right_on=None,left_index:bool=False,right_index:bool=False,by=None,left_by=None,right_by=None,suffixes=('_x','_y'),tolerance=None,allow_exact_matches:bool=True,direction:str='backward')->'DataFrame'
pandas.core.reshape.merge.merge_ordered(left,right,on=None,left_on=None,right_on=None,left_by=None,right_by=None,fill_method=None,suffixes=('_x','_y'),how:str='outer')->'DataFrame'


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/arrays/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/arrays/string_.py----------------------------------------
A:pandas.core.arrays.string_.str_arr->StringArray._from_sequence(np.array(arr))
A:pandas.core.arrays.string_.values->self._ndarray.copy()
A:pandas.core.arrays.string_.skip_validation->isinstance(values, type(self))
A:pandas.core.arrays.string_.self._dtype->StringDtype()
A:pandas.core.arrays.string_.result->numpy.zeros(len(self._ndarray), dtype='bool')
A:pandas.core.arrays.string_.na_values->isna(result)
A:pandas.core.arrays.string_.type->pyarrow.string()
A:pandas.core.arrays.string_.arr->self._ndarray.copy()
A:pandas.core.arrays.string_.mask->self.isna()
A:pandas.core.arrays.string_.value->numpy.asarray(value, dtype=object)
A:pandas.core.arrays.string_.key->check_array_indexer(self, key)
A:pandas.core.arrays.string_.scalar_key->pandas._libs.lib.is_scalar(key)
A:pandas.core.arrays.string_.scalar_value->pandas._libs.lib.is_scalar(value)
A:pandas.core.arrays.string_.dtype->pandas_dtype(dtype)
A:pandas.core.arrays.string_.other->numpy.asarray(other)
A:pandas.core.arrays.string_.result[valid]->op(self._ndarray[valid], other)
A:pandas.core.arrays.string_.cls.__add__->cls._create_arithmetic_method(operator.add)
A:pandas.core.arrays.string_.cls.__radd__->cls._create_arithmetic_method(ops.radd)
A:pandas.core.arrays.string_.cls.__mul__->cls._create_arithmetic_method(operator.mul)
A:pandas.core.arrays.string_.cls.__rmul__->cls._create_arithmetic_method(ops.rmul)
pandas.core.arrays.StringArray(self,values,copy=False)
pandas.core.arrays.StringArray.__arrow_array__(self,type=None)
pandas.core.arrays.StringArray.__setitem__(self,key,value)
pandas.core.arrays.StringArray._add_arithmetic_ops(cls)
pandas.core.arrays.StringArray._create_arithmetic_method(cls,op)
pandas.core.arrays.StringArray._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.core.arrays.StringArray._from_sequence_of_strings(cls,strings,dtype=None,copy=False)
pandas.core.arrays.StringArray._reduce(self,name,skipna=True,**kwargs)
pandas.core.arrays.StringArray._validate(self)
pandas.core.arrays.StringArray._values_for_factorize(self)
pandas.core.arrays.StringArray.astype(self,dtype,copy=True)
pandas.core.arrays.StringArray.fillna(self,value=None,method=None,limit=None)
pandas.core.arrays.StringArray.value_counts(self,dropna=False)
pandas.core.arrays.string_.StringArray(self,values,copy=False)
pandas.core.arrays.string_.StringArray.__arrow_array__(self,type=None)
pandas.core.arrays.string_.StringArray.__init__(self,values,copy=False)
pandas.core.arrays.string_.StringArray.__setitem__(self,key,value)
pandas.core.arrays.string_.StringArray._add_arithmetic_ops(cls)
pandas.core.arrays.string_.StringArray._create_arithmetic_method(cls,op)
pandas.core.arrays.string_.StringArray._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.core.arrays.string_.StringArray._from_sequence_of_strings(cls,strings,dtype=None,copy=False)
pandas.core.arrays.string_.StringArray._reduce(self,name,skipna=True,**kwargs)
pandas.core.arrays.string_.StringArray._validate(self)
pandas.core.arrays.string_.StringArray._values_for_factorize(self)
pandas.core.arrays.string_.StringArray.astype(self,dtype,copy=True)
pandas.core.arrays.string_.StringArray.fillna(self,value=None,method=None,limit=None)
pandas.core.arrays.string_.StringArray.value_counts(self,dropna=False)
pandas.core.arrays.string_.StringDtype(ExtensionDtype)
pandas.core.arrays.string_.StringDtype.__from_arrow__(self,array)
pandas.core.arrays.string_.StringDtype.__repr__(self)->str
pandas.core.arrays.string_.StringDtype.construct_array_type(cls)->'Type[StringArray]'
pandas.core.arrays.string_.StringDtype.type(self)->Type


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/arrays/categorical.py----------------------------------------
A:pandas.core.arrays.categorical.other_codes->_recode_for_categories(other.codes, other.categories, self.categories)
A:pandas.core.arrays.categorical.f->getattr(self._codes, opname)
A:pandas.core.arrays.categorical.ret->numpy.asarray(ret)
A:pandas.core.arrays.categorical.i->self.categories.get_loc(other)
A:pandas.core.arrays.categorical.loc->Categorical(values, ordered=False).categories.get_loc(key)
A:pandas.core.arrays.categorical._dtype->CategoricalDtype(ordered=False)
A:pandas.core.arrays.categorical.dtype->str(self.categories.dtype)
A:pandas.core.arrays.categorical.self._codes->coerce_indexer_dtype(codes, dtype.categories)
A:pandas.core.arrays.categorical.self._dtype->self._dtype.update_dtype(dtype)
A:pandas.core.arrays.categorical.null_mask->numpy.asarray(isna(values))
A:pandas.core.arrays.categorical.values->extract_array(values)
A:pandas.core.arrays.categorical.(codes, categories)->factorize(values, sort=False)
A:pandas.core.arrays.categorical.codes->self._codes.repeat(repeats)
A:pandas.core.arrays.categorical.new_dtype->pandas.core.dtypes.dtypes.CategoricalDtype._from_fastpath(new_categories, ordered=self.ordered)
A:pandas.core.arrays.categorical.cats->cats.isin(true_values).isin(true_values)
A:pandas.core.arrays.categorical.unsorted->cats.isin(true_values).isin(true_values).copy()
A:pandas.core.arrays.categorical.categories->Categorical.from_codes(cat_codes, dtype=values.dtype)
A:pandas.core.arrays.categorical.v->self._codes.view()
A:pandas.core.arrays.categorical.inplace->validate_bool_kwarg(inplace, 'inplace')
A:pandas.core.arrays.categorical.cat._codes->coerce_indexer_dtype(inv, new_dtype.categories)
A:pandas.core.arrays.categorical.removal_set->set(removals)
A:pandas.core.arrays.categorical.(idx, inv)->numpy.unique(cat._codes, return_inverse=True)
A:pandas.core.arrays.categorical.new_categories->new_categories.insert(len(new_categories), np.nan).insert(len(new_categories), np.nan)
A:pandas.core.arrays.categorical.__eq__->_cat_compare_op(operator.eq)
A:pandas.core.arrays.categorical.__ne__->_cat_compare_op(operator.ne)
A:pandas.core.arrays.categorical.__lt__->_cat_compare_op(operator.lt)
A:pandas.core.arrays.categorical.__gt__->_cat_compare_op(operator.gt)
A:pandas.core.arrays.categorical.__le__->_cat_compare_op(operator.le)
A:pandas.core.arrays.categorical.__ge__->_cat_compare_op(operator.ge)
A:pandas.core.arrays.categorical.fill_value->self.categories.get_loc(fill_value)
A:pandas.core.arrays.categorical.result->concat([counts, freqs], axis=1)
A:pandas.core.arrays.categorical.state['_dtype']->CategoricalDtype(state['_categories'], state['_ordered'])
A:pandas.core.arrays.categorical.count->numpy.bincount(np.where(mask, code, ncat))
A:pandas.core.arrays.categorical.ix->self._constructor(ix, dtype=self.dtype, fastpath=True)
A:pandas.core.arrays.categorical.sorted_idx->nargsort(self, ascending=ascending, na_position=na_position)
A:pandas.core.arrays.categorical.(value, method)->validate_fillna_kwargs(value, method, validate_scalar_dict_value=False)
A:pandas.core.arrays.categorical.values_codes->_get_codes_for_values(value, self.categories)
A:pandas.core.arrays.categorical.indexer->coerce_indexer_dtype(new_categories.get_indexer(old_categories), new_categories)
A:pandas.core.arrays.categorical.codes[mask]->self.categories.get_loc(value)
A:pandas.core.arrays.categorical.head->pandas.io.formats.format.format_array(self.categories[:num], None)
A:pandas.core.arrays.categorical.tail->pandas.io.formats.format.format_array(self.categories[-num:], None)
A:pandas.core.arrays.categorical.category_strs->self._repr_categories()
A:pandas.core.arrays.categorical.(width, height)->get_terminal_size()
A:pandas.core.arrays.categorical.cur_col_len->len(levheader)
A:pandas.core.arrays.categorical.info->self._repr_categories_info()
A:pandas.core.arrays.categorical.formatter->pandas.io.formats.format.CategoricalFormatter(self, length=length, na_rep=na_rep, footer=footer)
A:pandas.core.arrays.categorical.msg->self._get_repr(length=False, footer=True).replace('\n', ', ')
A:pandas.core.arrays.categorical.key->check_array_indexer(self, key)
A:pandas.core.arrays.categorical.value->Categorical.from_codes(new_codes, dtype=self.dtype)
A:pandas.core.arrays.categorical.new_codes->take_1d(indexer, codes.copy(), fill_value=-1)
A:pandas.core.arrays.categorical.to_add->Index(rvalue).difference(self.categories)
A:pandas.core.arrays.categorical.lindexer->self._maybe_coerce_indexer(lindexer)
A:pandas.core.arrays.categorical.(r, counts)->pandas._libs.algos.groupsort_indexer(self.codes.astype('int64'), categories.size)
A:pandas.core.arrays.categorical.counts->self.value_counts(dropna=False)
A:pandas.core.arrays.categorical.func->getattr(self, name, None)
A:pandas.core.arrays.categorical.pointer->self._codes.max()
A:pandas.core.arrays.categorical.unique_codes->unique1d(self.codes)
A:pandas.core.arrays.categorical.cat->Categorical(values, ordered=False)
A:pandas.core.arrays.categorical.take_codes->numpy.sort(take_codes)
A:pandas.core.arrays.categorical.code_values->self.categories.get_indexer(values)
A:pandas.core.arrays.categorical.index->Categorical.from_codes(cat_codes, dtype=values.dtype).index(replace_value)
A:pandas.core.arrays.categorical.value_index->Categorical.from_codes(cat_codes, dtype=values.dtype).index(new_value)
A:pandas.core.arrays.categorical.method->getattr(self._parent, name)
A:pandas.core.arrays.categorical.res->method(*args, **kwargs)
A:pandas.core.arrays.categorical.dtype_equal->is_dtype_equal(values.dtype, categories.dtype)
A:pandas.core.arrays.categorical.cls->Categorical.from_codes(cat_codes, dtype=values.dtype).dtype.construct_array_type()
A:pandas.core.arrays.categorical.(hash_klass, vals)->_get_data_algo(values)
A:pandas.core.arrays.categorical.(_, cats)->_get_data_algo(categories)
A:pandas.core.arrays.categorical.t->hash_klass(len(cats))
A:pandas.core.arrays.categorical.cat_codes->numpy.arange(len(values.categories), dtype=values.codes.dtype)
pandas.core.arrays.Categorical(self,values,categories=None,ordered=None,dtype=None,fastpath=False)
pandas.core.arrays.Categorical.T(self)
pandas.core.arrays.Categorical.__array__(self,dtype=None)->np.ndarray
pandas.core.arrays.Categorical.__array_ufunc__(self,ufunc,method,*inputs,**kwargs)
pandas.core.arrays.Categorical.__contains__(self,key)->bool
pandas.core.arrays.Categorical.__getitem__(self,key)
pandas.core.arrays.Categorical.__iter__(self)
pandas.core.arrays.Categorical.__len__(self)->int
pandas.core.arrays.Categorical.__repr__(self)->str
pandas.core.arrays.Categorical.__setitem__(self,key,value)
pandas.core.arrays.Categorical.__setstate__(self,state)
pandas.core.arrays.Categorical._can_hold_na(self)
pandas.core.arrays.Categorical._concat_same_type(self,to_concat)
pandas.core.arrays.Categorical._constructor(self)->Type['Categorical']
pandas.core.arrays.Categorical._formatter(self,boxed=False)
pandas.core.arrays.Categorical._from_factorized(cls,uniques,original)
pandas.core.arrays.Categorical._from_inferred_categories(cls,inferred_categories,inferred_codes,dtype,true_values=None)
pandas.core.arrays.Categorical._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.core.arrays.Categorical._get_codes(self)
pandas.core.arrays.Categorical._get_repr(self,length=True,na_rep='NaN',footer=True)->str
pandas.core.arrays.Categorical._internal_get_values(self)
pandas.core.arrays.Categorical._maybe_coerce_indexer(self,indexer)
pandas.core.arrays.Categorical._ndarray_values(self)->np.ndarray
pandas.core.arrays.Categorical._reduce(self,name,axis=0,**kwargs)
pandas.core.arrays.Categorical._repr_categories(self)
pandas.core.arrays.Categorical._repr_categories_info(self)->str
pandas.core.arrays.Categorical._repr_footer(self)->str
pandas.core.arrays.Categorical._reverse_indexer(self)->Dict[Hashable, np.ndarray]
pandas.core.arrays.Categorical._set_categories(self,categories,fastpath=False)
pandas.core.arrays.Categorical._set_codes(self,codes)
pandas.core.arrays.Categorical._set_dtype(self,dtype:CategoricalDtype)->'Categorical'
pandas.core.arrays.Categorical._tidy_repr(self,max_vals=10,footer=True)->str
pandas.core.arrays.Categorical._values_for_argsort(self)
pandas.core.arrays.Categorical._values_for_factorize(self)
pandas.core.arrays.Categorical._values_for_rank(self)
pandas.core.arrays.Categorical.add_categories(self,new_categories,inplace=False)
pandas.core.arrays.Categorical.argsort(self,ascending=True,kind='quicksort',*args,**kwargs)
pandas.core.arrays.Categorical.as_ordered(self,inplace=False)
pandas.core.arrays.Categorical.as_unordered(self,inplace=False)
pandas.core.arrays.Categorical.astype(self,dtype:Dtype,copy:bool=True)->ArrayLike
pandas.core.arrays.Categorical.categories(self)
pandas.core.arrays.Categorical.categories(self,categories)
pandas.core.arrays.Categorical.check_for_ordered(self,op)
pandas.core.arrays.Categorical.copy(self)->'Categorical'
pandas.core.arrays.Categorical.describe(self)
pandas.core.arrays.Categorical.dropna(self)
pandas.core.arrays.Categorical.dtype(self)->CategoricalDtype
pandas.core.arrays.Categorical.equals(self,other)
pandas.core.arrays.Categorical.fillna(self,value=None,method=None,limit=None)
pandas.core.arrays.Categorical.from_codes(cls,codes,categories=None,ordered=None,dtype=None)
pandas.core.arrays.Categorical.is_dtype_equal(self,other)
pandas.core.arrays.Categorical.isin(self,values)
pandas.core.arrays.Categorical.isna(self)
pandas.core.arrays.Categorical.itemsize(self)->int
pandas.core.arrays.Categorical.map(self,mapper)
pandas.core.arrays.Categorical.max(self,skipna=True,**kwargs)
pandas.core.arrays.Categorical.memory_usage(self,deep=False)
pandas.core.arrays.Categorical.min(self,skipna=True,**kwargs)
pandas.core.arrays.Categorical.mode(self,dropna=True)
pandas.core.arrays.Categorical.nbytes(self)
pandas.core.arrays.Categorical.notna(self)
pandas.core.arrays.Categorical.ordered(self)->Ordered
pandas.core.arrays.Categorical.put(self,*args,**kwargs)
pandas.core.arrays.Categorical.remove_categories(self,removals,inplace=False)
pandas.core.arrays.Categorical.remove_unused_categories(self,inplace=False)
pandas.core.arrays.Categorical.rename_categories(self,new_categories,inplace=False)
pandas.core.arrays.Categorical.reorder_categories(self,new_categories,ordered=None,inplace=False)
pandas.core.arrays.Categorical.repeat(self,repeats,axis=None)
pandas.core.arrays.Categorical.replace(self,to_replace,value,inplace:bool=False)
pandas.core.arrays.Categorical.searchsorted(self,value,side='left',sorter=None)
pandas.core.arrays.Categorical.set_categories(self,new_categories,ordered=None,rename=False,inplace=False)
pandas.core.arrays.Categorical.set_ordered(self,value,inplace=False)
pandas.core.arrays.Categorical.shape(self)
pandas.core.arrays.Categorical.shift(self,periods,fill_value=None)
pandas.core.arrays.Categorical.size(self)->int
pandas.core.arrays.Categorical.sort_values(self,inplace=False,ascending=True,na_position='last')
pandas.core.arrays.Categorical.take(self,indexer,allow_fill:bool=False,fill_value=None)
pandas.core.arrays.Categorical.take_nd(self,indexer,allow_fill:bool=False,fill_value=None)
pandas.core.arrays.Categorical.to_dense(self)
pandas.core.arrays.Categorical.tolist(self)->List[Scalar]
pandas.core.arrays.Categorical.unique(self)
pandas.core.arrays.Categorical.value_counts(self,dropna=True)
pandas.core.arrays.Categorical.view(self,dtype=None)
pandas.core.arrays.CategoricalAccessor(self,data)
pandas.core.arrays.CategoricalAccessor._delegate_method(self,name,*args,**kwargs)
pandas.core.arrays.CategoricalAccessor._delegate_property_get(self,name)
pandas.core.arrays.CategoricalAccessor._delegate_property_set(self,name,new_values)
pandas.core.arrays.CategoricalAccessor._validate(data)
pandas.core.arrays.CategoricalAccessor.codes(self)
pandas.core.arrays.categorical.Categorical(self,values,categories=None,ordered=None,dtype=None,fastpath=False)
pandas.core.arrays.categorical.Categorical.T(self)
pandas.core.arrays.categorical.Categorical.__array__(self,dtype=None)->np.ndarray
pandas.core.arrays.categorical.Categorical.__array_ufunc__(self,ufunc,method,*inputs,**kwargs)
pandas.core.arrays.categorical.Categorical.__contains__(self,key)->bool
pandas.core.arrays.categorical.Categorical.__getitem__(self,key)
pandas.core.arrays.categorical.Categorical.__init__(self,values,categories=None,ordered=None,dtype=None,fastpath=False)
pandas.core.arrays.categorical.Categorical.__iter__(self)
pandas.core.arrays.categorical.Categorical.__len__(self)->int
pandas.core.arrays.categorical.Categorical.__repr__(self)->str
pandas.core.arrays.categorical.Categorical.__setitem__(self,key,value)
pandas.core.arrays.categorical.Categorical.__setstate__(self,state)
pandas.core.arrays.categorical.Categorical._can_hold_na(self)
pandas.core.arrays.categorical.Categorical._concat_same_type(self,to_concat)
pandas.core.arrays.categorical.Categorical._constructor(self)->Type['Categorical']
pandas.core.arrays.categorical.Categorical._formatter(self,boxed=False)
pandas.core.arrays.categorical.Categorical._from_factorized(cls,uniques,original)
pandas.core.arrays.categorical.Categorical._from_inferred_categories(cls,inferred_categories,inferred_codes,dtype,true_values=None)
pandas.core.arrays.categorical.Categorical._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.core.arrays.categorical.Categorical._get_codes(self)
pandas.core.arrays.categorical.Categorical._get_repr(self,length=True,na_rep='NaN',footer=True)->str
pandas.core.arrays.categorical.Categorical._internal_get_values(self)
pandas.core.arrays.categorical.Categorical._maybe_coerce_indexer(self,indexer)
pandas.core.arrays.categorical.Categorical._ndarray_values(self)->np.ndarray
pandas.core.arrays.categorical.Categorical._reduce(self,name,axis=0,**kwargs)
pandas.core.arrays.categorical.Categorical._repr_categories(self)
pandas.core.arrays.categorical.Categorical._repr_categories_info(self)->str
pandas.core.arrays.categorical.Categorical._repr_footer(self)->str
pandas.core.arrays.categorical.Categorical._reverse_indexer(self)->Dict[Hashable, np.ndarray]
pandas.core.arrays.categorical.Categorical._set_categories(self,categories,fastpath=False)
pandas.core.arrays.categorical.Categorical._set_codes(self,codes)
pandas.core.arrays.categorical.Categorical._set_dtype(self,dtype:CategoricalDtype)->'Categorical'
pandas.core.arrays.categorical.Categorical._tidy_repr(self,max_vals=10,footer=True)->str
pandas.core.arrays.categorical.Categorical._values_for_argsort(self)
pandas.core.arrays.categorical.Categorical._values_for_factorize(self)
pandas.core.arrays.categorical.Categorical._values_for_rank(self)
pandas.core.arrays.categorical.Categorical.add_categories(self,new_categories,inplace=False)
pandas.core.arrays.categorical.Categorical.argsort(self,ascending=True,kind='quicksort',*args,**kwargs)
pandas.core.arrays.categorical.Categorical.as_ordered(self,inplace=False)
pandas.core.arrays.categorical.Categorical.as_unordered(self,inplace=False)
pandas.core.arrays.categorical.Categorical.astype(self,dtype:Dtype,copy:bool=True)->ArrayLike
pandas.core.arrays.categorical.Categorical.categories(self)
pandas.core.arrays.categorical.Categorical.categories(self,categories)
pandas.core.arrays.categorical.Categorical.check_for_ordered(self,op)
pandas.core.arrays.categorical.Categorical.copy(self)->'Categorical'
pandas.core.arrays.categorical.Categorical.describe(self)
pandas.core.arrays.categorical.Categorical.dropna(self)
pandas.core.arrays.categorical.Categorical.dtype(self)->CategoricalDtype
pandas.core.arrays.categorical.Categorical.equals(self,other)
pandas.core.arrays.categorical.Categorical.fillna(self,value=None,method=None,limit=None)
pandas.core.arrays.categorical.Categorical.from_codes(cls,codes,categories=None,ordered=None,dtype=None)
pandas.core.arrays.categorical.Categorical.is_dtype_equal(self,other)
pandas.core.arrays.categorical.Categorical.isin(self,values)
pandas.core.arrays.categorical.Categorical.isna(self)
pandas.core.arrays.categorical.Categorical.itemsize(self)->int
pandas.core.arrays.categorical.Categorical.map(self,mapper)
pandas.core.arrays.categorical.Categorical.max(self,skipna=True,**kwargs)
pandas.core.arrays.categorical.Categorical.memory_usage(self,deep=False)
pandas.core.arrays.categorical.Categorical.min(self,skipna=True,**kwargs)
pandas.core.arrays.categorical.Categorical.mode(self,dropna=True)
pandas.core.arrays.categorical.Categorical.nbytes(self)
pandas.core.arrays.categorical.Categorical.notna(self)
pandas.core.arrays.categorical.Categorical.ordered(self)->Ordered
pandas.core.arrays.categorical.Categorical.put(self,*args,**kwargs)
pandas.core.arrays.categorical.Categorical.remove_categories(self,removals,inplace=False)
pandas.core.arrays.categorical.Categorical.remove_unused_categories(self,inplace=False)
pandas.core.arrays.categorical.Categorical.rename_categories(self,new_categories,inplace=False)
pandas.core.arrays.categorical.Categorical.reorder_categories(self,new_categories,ordered=None,inplace=False)
pandas.core.arrays.categorical.Categorical.repeat(self,repeats,axis=None)
pandas.core.arrays.categorical.Categorical.replace(self,to_replace,value,inplace:bool=False)
pandas.core.arrays.categorical.Categorical.searchsorted(self,value,side='left',sorter=None)
pandas.core.arrays.categorical.Categorical.set_categories(self,new_categories,ordered=None,rename=False,inplace=False)
pandas.core.arrays.categorical.Categorical.set_ordered(self,value,inplace=False)
pandas.core.arrays.categorical.Categorical.shape(self)
pandas.core.arrays.categorical.Categorical.shift(self,periods,fill_value=None)
pandas.core.arrays.categorical.Categorical.size(self)->int
pandas.core.arrays.categorical.Categorical.sort_values(self,inplace=False,ascending=True,na_position='last')
pandas.core.arrays.categorical.Categorical.take(self,indexer,allow_fill:bool=False,fill_value=None)
pandas.core.arrays.categorical.Categorical.take_nd(self,indexer,allow_fill:bool=False,fill_value=None)
pandas.core.arrays.categorical.Categorical.to_dense(self)
pandas.core.arrays.categorical.Categorical.tolist(self)->List[Scalar]
pandas.core.arrays.categorical.Categorical.unique(self)
pandas.core.arrays.categorical.Categorical.value_counts(self,dropna=True)
pandas.core.arrays.categorical.Categorical.view(self,dtype=None)
pandas.core.arrays.categorical.CategoricalAccessor(self,data)
pandas.core.arrays.categorical.CategoricalAccessor.__init__(self,data)
pandas.core.arrays.categorical.CategoricalAccessor._delegate_method(self,name,*args,**kwargs)
pandas.core.arrays.categorical.CategoricalAccessor._delegate_property_get(self,name)
pandas.core.arrays.categorical.CategoricalAccessor._delegate_property_set(self,name,new_values)
pandas.core.arrays.categorical.CategoricalAccessor._validate(data)
pandas.core.arrays.categorical.CategoricalAccessor.codes(self)
pandas.core.arrays.categorical._cat_compare_op(op)
pandas.core.arrays.categorical._convert_to_list_like(list_like)
pandas.core.arrays.categorical._get_codes_for_values(values,categories)
pandas.core.arrays.categorical._recode_for_categories(codes:np.ndarray,old_categories,new_categories)
pandas.core.arrays.categorical.contains(cat,key,container)
pandas.core.arrays.categorical.factorize_from_iterable(values)
pandas.core.arrays.categorical.factorize_from_iterables(iterables)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/arrays/boolean.py----------------------------------------
A:pandas.core.arrays.boolean.bool_arr->BooleanArray._from_sequence(np.array(arr))
A:pandas.core.arrays.boolean.values->self._data.copy()
A:pandas.core.arrays.boolean.mask->self._mask.copy()
A:pandas.core.arrays.boolean.mask_values->isna(values_object)
A:pandas.core.arrays.boolean.values_bool->numpy.zeros(len(values), dtype=bool)
A:pandas.core.arrays.boolean.values_bool[~mask_values]->values_object[~mask_values].astype(bool).astype(bool)
A:pandas.core.arrays.boolean.values_object->numpy.asarray(values, dtype=object)
A:pandas.core.arrays.boolean.inferred_dtype->pandas._libs.lib.infer_dtype(values_object, skipna=True)
A:pandas.core.arrays.boolean.values[~mask_values]->values_object[~mask_values].astype(bool)
A:pandas.core.arrays.boolean.self._dtype->BooleanDtype()
A:pandas.core.arrays.boolean.(values, mask)->coerce_to_array(self, copy=copy)
A:pandas.core.arrays.boolean.data->self.to_numpy('float64', na_value=np.nan)
A:pandas.core.arrays.boolean.out->kwargs.get('out', ())
A:pandas.core.arrays.boolean.result->op(self._data, other)
A:pandas.core.arrays.boolean.m->self._mask.copy().copy()
A:pandas.core.arrays.boolean._is_scalar->is_scalar(value)
A:pandas.core.arrays.boolean.(value, mask)->coerce_to_array(value)
A:pandas.core.arrays.boolean.key->check_array_indexer(self, key)
A:pandas.core.arrays.boolean.dtype->pandas_dtype(dtype)
A:pandas.core.arrays.boolean.other->numpy.asarray(other)
A:pandas.core.arrays.boolean.other_is_booleanarray->isinstance(other, BooleanArray)
A:pandas.core.arrays.boolean.other_is_scalar->pandas._libs.lib.is_scalar(other)
A:pandas.core.arrays.boolean.(other, mask)->coerce_to_array(other, copy=False)
A:pandas.core.arrays.boolean.(result, mask)->pandas.core.ops.kleene_xor(self._data, other, self._mask, mask)
A:pandas.core.arrays.boolean.op->getattr(nanops, 'nan' + name)
A:pandas.core.arrays.boolean.int_result->numpy.int64(result)
pandas.core.arrays.BooleanArray(self,values:np.ndarray,mask:np.ndarray,copy:bool=False)
pandas.core.arrays.BooleanArray.__array_ufunc__(self,ufunc,method,*inputs,**kwargs)
pandas.core.arrays.BooleanArray.__setitem__(self,key,value)
pandas.core.arrays.BooleanArray._create_arithmetic_method(cls,op)
pandas.core.arrays.BooleanArray._create_comparison_method(cls,op)
pandas.core.arrays.BooleanArray._create_logical_method(cls,op)
pandas.core.arrays.BooleanArray._from_factorized(cls,values,original:'BooleanArray')
pandas.core.arrays.BooleanArray._from_sequence(cls,scalars,dtype=None,copy:bool=False)
pandas.core.arrays.BooleanArray._from_sequence_of_strings(cls,strings:List[str],dtype=None,copy:bool=False)
pandas.core.arrays.BooleanArray._maybe_mask_result(self,result,mask,other,op_name)
pandas.core.arrays.BooleanArray._reduce(self,name,skipna=True,**kwargs)
pandas.core.arrays.BooleanArray._values_for_argsort(self)->np.ndarray
pandas.core.arrays.BooleanArray._values_for_factorize(self)->Tuple[np.ndarray, Any]
pandas.core.arrays.BooleanArray.all(self,skipna:bool=True,**kwargs)
pandas.core.arrays.BooleanArray.any(self,skipna:bool=True,**kwargs)
pandas.core.arrays.BooleanArray.astype(self,dtype,copy=True)
pandas.core.arrays.BooleanArray.dtype(self)
pandas.core.arrays.boolean.BooleanArray(self,values:np.ndarray,mask:np.ndarray,copy:bool=False)
pandas.core.arrays.boolean.BooleanArray.__array_ufunc__(self,ufunc,method,*inputs,**kwargs)
pandas.core.arrays.boolean.BooleanArray.__init__(self,values:np.ndarray,mask:np.ndarray,copy:bool=False)
pandas.core.arrays.boolean.BooleanArray.__setitem__(self,key,value)
pandas.core.arrays.boolean.BooleanArray._create_arithmetic_method(cls,op)
pandas.core.arrays.boolean.BooleanArray._create_comparison_method(cls,op)
pandas.core.arrays.boolean.BooleanArray._create_logical_method(cls,op)
pandas.core.arrays.boolean.BooleanArray._from_factorized(cls,values,original:'BooleanArray')
pandas.core.arrays.boolean.BooleanArray._from_sequence(cls,scalars,dtype=None,copy:bool=False)
pandas.core.arrays.boolean.BooleanArray._from_sequence_of_strings(cls,strings:List[str],dtype=None,copy:bool=False)
pandas.core.arrays.boolean.BooleanArray._maybe_mask_result(self,result,mask,other,op_name)
pandas.core.arrays.boolean.BooleanArray._reduce(self,name,skipna=True,**kwargs)
pandas.core.arrays.boolean.BooleanArray._values_for_argsort(self)->np.ndarray
pandas.core.arrays.boolean.BooleanArray._values_for_factorize(self)->Tuple[np.ndarray, Any]
pandas.core.arrays.boolean.BooleanArray.all(self,skipna:bool=True,**kwargs)
pandas.core.arrays.boolean.BooleanArray.any(self,skipna:bool=True,**kwargs)
pandas.core.arrays.boolean.BooleanArray.astype(self,dtype,copy=True)
pandas.core.arrays.boolean.BooleanArray.dtype(self)
pandas.core.arrays.boolean.BooleanDtype(ExtensionDtype)
pandas.core.arrays.boolean.BooleanDtype.__from_arrow__(self,array)
pandas.core.arrays.boolean.BooleanDtype.__repr__(self)->str
pandas.core.arrays.boolean.BooleanDtype._is_boolean(self)->bool
pandas.core.arrays.boolean.BooleanDtype.construct_array_type(cls)->'Type[BooleanArray]'
pandas.core.arrays.boolean.BooleanDtype.kind(self)->str
pandas.core.arrays.boolean.BooleanDtype.na_value(self)->'Scalar'
pandas.core.arrays.boolean.BooleanDtype.type(self)->Type
pandas.core.arrays.boolean.coerce_to_array(values,mask=None,copy:bool=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/arrays/period.py----------------------------------------
A:pandas.core.arrays.period.(base, mult)->pandas._libs.tslibs.frequencies.get_freq_code(freq)
A:pandas.core.arrays.period.result->super()._add_timedeltalike_scalar(other.n)
A:pandas.core.arrays.period.freq->pandas._libs.tslibs.period.Period._maybe_convert_freq(freq)
A:pandas.core.arrays.period.values->numpy.array([formatter(dt) for dt in values])
A:pandas.core.arrays.period.self._dtype->PeriodDtype(freq)
A:pandas.core.arrays.period.scalars->scalars.copy().copy()
A:pandas.core.arrays.period.periods->pandas.core.arrays.datetimelike.validate_periods(periods)
A:pandas.core.arrays.period.ordinals->super()._add_timedeltalike_scalar(other)
A:pandas.core.arrays.period.(data, freq)->dt64arr_to_periodarr(data, freq, tz)
A:pandas.core.arrays.period.field_count->len(fields)
A:pandas.core.arrays.period.(subarr, freq)->_range_from_fields(freq=freq, **fields)
A:pandas.core.arrays.period.period_type->ArrowPeriodType(self.freqstr)
A:pandas.core.arrays.period.storage_array->pyarrow.array(self._data, mask=self.isna(), type='int64')
A:pandas.core.arrays.period.year->_field_accessor('year', 0, '\n        The year of the period.\n        ')
A:pandas.core.arrays.period.month->_field_accessor('month', 3, '\n        The month as January=1, December=12.\n        ')
A:pandas.core.arrays.period.day->_field_accessor('day', 4, '\n        The days of the period.\n        ')
A:pandas.core.arrays.period.hour->_field_accessor('hour', 5, '\n        The hour of the period.\n        ')
A:pandas.core.arrays.period.minute->_field_accessor('minute', 6, '\n        The minute of the period.\n        ')
A:pandas.core.arrays.period.second->_field_accessor('second', 7, '\n        The second of the period.\n        ')
A:pandas.core.arrays.period.weekofyear->_field_accessor('week', 8, '\n        The week ordinal of the year.\n        ')
A:pandas.core.arrays.period.dayofweek->_field_accessor('dayofweek', 10, '\n        The day of the week with Monday=0, Sunday=6.\n        ')
A:pandas.core.arrays.period.dayofyearday_of_year->_field_accessor('dayofyear', 9, '\n        The ordinal day of the year.\n        ')
A:pandas.core.arrays.period.quarter->_field_accessor('quarter', 2, '\n        The quarter of the date.\n        ')
A:pandas.core.arrays.period.qyear->_field_accessor('qyear', 1)
A:pandas.core.arrays.period.days_in_month->_field_accessor('days_in_month', 11, '\n        The number of days in the month.\n        ')
A:pandas.core.arrays.period.how->pandas._libs.tslibs.period._validate_end_alias(how)
A:pandas.core.arrays.period.adjust->Timedelta(1, 'ns')
A:pandas.core.arrays.period.new_data->numpy.array([self.freq * x for x in new_data])
A:pandas.core.arrays.period.(base1, mult1)->pandas._libs.tslibs.frequencies.get_freq_code(self.freq)
A:pandas.core.arrays.period.(base2, mult2)->pandas._libs.tslibs.frequencies.get_freq_code(freq)
A:pandas.core.arrays.period.values[imask]->numpy.array([formatter(dt) for dt in values[imask]])
A:pandas.core.arrays.period.dtype->pandas_dtype(dtype)
A:pandas.core.arrays.period.res_values->res_values.view('i8').view('i8')
A:pandas.core.arrays.period.base->pandas._libs.tslibs.frequencies.get_base_alias(other.rule_code)
A:pandas.core.arrays.period.other->other.astype(_TD_DTYPE).astype(_TD_DTYPE)
A:pandas.core.arrays.period.delta->self._check_timedeltalike_freq_compat(other)
A:pandas.core.arrays.period.new_ordinals->super()._add_delta(other)
A:pandas.core.arrays.period.own_offset->pandas.tseries.frequencies.to_offset(self.freq.rule_code)
A:pandas.core.arrays.period.base_nanos->delta_to_nanoseconds(own_offset)
A:pandas.core.arrays.period.nanos->other.astype(_TD_DTYPE).astype(_TD_DTYPE).view('i8')
A:pandas.core.arrays.period.msg->pandas._libs.tslibs.period.DIFFERENT_FREQ.format(cls=type(left).__name__, own_freq=left.freqstr, other_freq=other_freq)
A:pandas.core.arrays.period.data->numpy.arange(start.ordinal, end.ordinal + 1, mult, dtype=np.int64)
A:pandas.core.arrays.period.(_, mult)->pandas._libs.tslibs.frequencies.get_freq_code(freq)
A:pandas.core.arrays.period.start->Period(start, freq)
A:pandas.core.arrays.period.end->Period(end, freq)
A:pandas.core.arrays.period.is_start_per->isinstance(start, Period)
A:pandas.core.arrays.period.is_end_per->isinstance(end, Period)
A:pandas.core.arrays.period.(year, quarter)->_make_field_arrays(year, quarter)
A:pandas.core.arrays.period.(y, m)->pandas._libs.tslibs.period.quarter_to_myear(y, q, freq)
A:pandas.core.arrays.period.val->pandas._libs.tslibs.period.period_ordinal(y, m, 1, 1, 1, 1, 0, 0, base)
A:pandas.core.arrays.period.arrays->_make_field_arrays(year, month, day, hour, minute, second)
A:pandas.core.arrays.period.length->len(x)
pandas.core.arrays.PeriodArray(self,values,freq=None,dtype=None,copy=False)
pandas.core.arrays.PeriodArray.__array__(self,dtype=None)->np.ndarray
pandas.core.arrays.PeriodArray.__arrow_array__(self,type=None)
pandas.core.arrays.PeriodArray._add_delta(self,other)
pandas.core.arrays.PeriodArray._add_delta_tdi(self,other)
pandas.core.arrays.PeriodArray._add_offset(self,other)
pandas.core.arrays.PeriodArray._add_timedeltalike_scalar(self,other)
pandas.core.arrays.PeriodArray._addsub_int_array(self,other:np.ndarray,op:Callable[[Any,Any],Any])->'PeriodArray'
pandas.core.arrays.PeriodArray._box_func(self)
pandas.core.arrays.PeriodArray._check_compatible_with(self,other,setitem:bool=False)
pandas.core.arrays.PeriodArray._check_timedeltalike_freq_compat(self,other)
pandas.core.arrays.PeriodArray._format_native_types(self,na_rep='NaT',date_format=None,**kwargs)
pandas.core.arrays.PeriodArray._formatter(self,boxed=False)
pandas.core.arrays.PeriodArray._from_dt64(cls,data,freq,tz=None)
pandas.core.arrays.PeriodArray._from_sequence(cls,scalars:Sequence[Optional[Period]],dtype:Optional[PeriodDtype]=None,copy:bool=False)->ABCPeriodArray
pandas.core.arrays.PeriodArray._from_sequence_of_strings(cls,strings,dtype=None,copy=False)
pandas.core.arrays.PeriodArray._generate_range(cls,start,end,periods,freq,fields)
pandas.core.arrays.PeriodArray._scalar_from_string(self,value:str)->Period
pandas.core.arrays.PeriodArray._simple_new(cls,values,freq=None,**kwargs)
pandas.core.arrays.PeriodArray._sub_datelike(self,other)
pandas.core.arrays.PeriodArray._sub_period(self,other)
pandas.core.arrays.PeriodArray._time_shift(self,periods,freq=None)
pandas.core.arrays.PeriodArray._unbox_scalar(self,value:Union[Period,NaTType])->int
pandas.core.arrays.PeriodArray._values_for_argsort(self)
pandas.core.arrays.PeriodArray.asfreq(self,freq=None,how='E')
pandas.core.arrays.PeriodArray.astype(self,dtype,copy=True)
pandas.core.arrays.PeriodArray.dtype(self)
pandas.core.arrays.PeriodArray.end_time(self)
pandas.core.arrays.PeriodArray.freq(self)
pandas.core.arrays.PeriodArray.is_leap_year(self)
pandas.core.arrays.PeriodArray.start_time(self)
pandas.core.arrays.PeriodArray.to_timestamp(self,freq=None,how='start')
pandas.core.arrays.period.PeriodArray(self,values,freq=None,dtype=None,copy=False)
pandas.core.arrays.period.PeriodArray.__array__(self,dtype=None)->np.ndarray
pandas.core.arrays.period.PeriodArray.__arrow_array__(self,type=None)
pandas.core.arrays.period.PeriodArray.__init__(self,values,freq=None,dtype=None,copy=False)
pandas.core.arrays.period.PeriodArray._add_delta(self,other)
pandas.core.arrays.period.PeriodArray._add_delta_tdi(self,other)
pandas.core.arrays.period.PeriodArray._add_offset(self,other)
pandas.core.arrays.period.PeriodArray._add_timedeltalike_scalar(self,other)
pandas.core.arrays.period.PeriodArray._addsub_int_array(self,other:np.ndarray,op:Callable[[Any,Any],Any])->'PeriodArray'
pandas.core.arrays.period.PeriodArray._box_func(self)
pandas.core.arrays.period.PeriodArray._check_compatible_with(self,other,setitem:bool=False)
pandas.core.arrays.period.PeriodArray._check_timedeltalike_freq_compat(self,other)
pandas.core.arrays.period.PeriodArray._format_native_types(self,na_rep='NaT',date_format=None,**kwargs)
pandas.core.arrays.period.PeriodArray._formatter(self,boxed=False)
pandas.core.arrays.period.PeriodArray._from_datetime64(cls,data,freq,tz=None)
pandas.core.arrays.period.PeriodArray._from_sequence(cls,scalars:Sequence[Optional[Period]],dtype:Optional[PeriodDtype]=None,copy:bool=False)->ABCPeriodArray
pandas.core.arrays.period.PeriodArray._from_sequence_of_strings(cls,strings,dtype=None,copy=False)
pandas.core.arrays.period.PeriodArray._generate_range(cls,start,end,periods,freq,fields)
pandas.core.arrays.period.PeriodArray._scalar_from_string(self,value:str)->Period
pandas.core.arrays.period.PeriodArray._simple_new(cls,values,freq=None,**kwargs)
pandas.core.arrays.period.PeriodArray._sub_datelike(self,other)
pandas.core.arrays.period.PeriodArray._sub_period(self,other)
pandas.core.arrays.period.PeriodArray._time_shift(self,periods,freq=None)
pandas.core.arrays.period.PeriodArray._unbox_scalar(self,value:Union[Period,NaTType])->int
pandas.core.arrays.period.PeriodArray._values_for_argsort(self)
pandas.core.arrays.period.PeriodArray.asfreq(self,freq=None,how='E')
pandas.core.arrays.period.PeriodArray.astype(self,dtype,copy=True)
pandas.core.arrays.period.PeriodArray.dtype(self)
pandas.core.arrays.period.PeriodArray.end_time(self)
pandas.core.arrays.period.PeriodArray.freq(self)
pandas.core.arrays.period.PeriodArray.is_leap_year(self)
pandas.core.arrays.period.PeriodArray.start_time(self)
pandas.core.arrays.period.PeriodArray.to_timestamp(self,freq=None,how='start')
pandas.core.arrays.period._field_accessor(name,alias,docstring=None)
pandas.core.arrays.period._get_ordinal_range(start,end,periods,freq,mult=1)
pandas.core.arrays.period._make_field_arrays(*fields)
pandas.core.arrays.period._range_from_fields(year=None,month=None,quarter=None,day=None,hour=None,minute=None,second=None,freq=None)
pandas.core.arrays.period.dt64arr_to_periodarr(data,freq,tz=None)
pandas.core.arrays.period.period_array(data:Sequence[Optional[Period]],freq:Optional[Union[str,Tick]]=None,copy:bool=False)->PeriodArray
pandas.core.arrays.period.raise_on_incompatible(left,right)
pandas.core.arrays.period.validate_dtype_freq(dtype,freq)
pandas.core.arrays.period_array(data:Sequence[Optional[Period]],freq:Optional[Union[str,Tick]]=None,copy:bool=False)->PeriodArray


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/arrays/datetimelike.py----------------------------------------
A:pandas.core.arrays.datetimelike.other->DatetimeArray(other)
A:pandas.core.arrays.datetimelike.other_i8->self._unbox_scalar(other)
A:pandas.core.arrays.datetimelike.result->pandas.core.nanops.nanmean(values.view('i8'), skipna=skipna)
A:pandas.core.arrays.datetimelike.o_mask->isna(other)
A:pandas.core.arrays.datetimelike.naive->self.tz_localize(None)
A:pandas.core.arrays.datetimelike.aware->pandas.core.nanops.nanmean(values.view('i8'), skipna=skipna).tz_localize(self.tz, ambiguous=ambiguous, nonexistent=nonexistent)
A:pandas.core.arrays.datetimelike.values->values.copy().copy()
A:pandas.core.arrays.datetimelike.data->self._data.ravel(*args, **kwargs)
A:pandas.core.arrays.datetimelike.is_int->pandas._libs.lib.is_integer(key)
A:pandas.core.arrays.datetimelike.val->getitem(key)
A:pandas.core.arrays.datetimelike.key->check_array_indexer(self, key)
A:pandas.core.arrays.datetimelike.is_period->is_period_dtype(self)
A:pandas.core.arrays.datetimelike.value->pandas.tseries.frequencies.to_offset(value)
A:pandas.core.arrays.datetimelike.is_slice->isinstance(key, slice)
A:pandas.core.arrays.datetimelike.dtype->pandas_dtype(dtype)
A:pandas.core.arrays.datetimelike.fill_value->self._unbox_scalar(fill_value)
A:pandas.core.arrays.datetimelike.new_values->numpy.array([self.freq.base * x for x in new_values])
A:pandas.core.arrays.datetimelike.new_fill->self._scalar_type(fill_value)
A:pandas.core.arrays.datetimelike.axis_indexer[axis]->slice(periods, None)
A:pandas.core.arrays.datetimelike.cls->type(self)
A:pandas.core.arrays.datetimelike.index->Index(cls(result.index.view('i8'), dtype=self.dtype), name=result.index.name)
A:pandas.core.arrays.datetimelike.(value, method)->validate_fillna_kwargs(value, method)
A:pandas.core.arrays.datetimelike.mask->self.isna()
A:pandas.core.arrays.datetimelike.on_freq->type(self)._generate_range(start=index[0], end=None, periods=len(index), freq=freq, **kwargs)
A:pandas.core.arrays.datetimelike._create_comparison_method->classmethod(_datetimelike_array_cmp)
A:pandas.core.arrays.datetimelike.__pow__->make_invalid_op('__pow__')
A:pandas.core.arrays.datetimelike.__rpow__->make_invalid_op('__rpow__')
A:pandas.core.arrays.datetimelike.__mul__->make_invalid_op('__mul__')
A:pandas.core.arrays.datetimelike.__rmul__->make_invalid_op('__rmul__')
A:pandas.core.arrays.datetimelike.__truediv__->make_invalid_op('__truediv__')
A:pandas.core.arrays.datetimelike.__rtruediv__->make_invalid_op('__rtruediv__')
A:pandas.core.arrays.datetimelike.__floordiv__->make_invalid_op('__floordiv__')
A:pandas.core.arrays.datetimelike.__rfloordiv__->make_invalid_op('__rfloordiv__')
A:pandas.core.arrays.datetimelike.__mod__->make_invalid_op('__mod__')
A:pandas.core.arrays.datetimelike.__rmod__->make_invalid_op('__rmod__')
A:pandas.core.arrays.datetimelike.__divmod__->make_invalid_op('__divmod__')
A:pandas.core.arrays.datetimelike.__rdivmod__->make_invalid_op('__rdivmod__')
A:pandas.core.arrays.datetimelike.inc->delta_to_nanoseconds(other)
A:pandas.core.arrays.datetimelike.msg->pandas._libs.tslibs.period.DIFFERENT_FREQ.format(cls=type(self).__name__, own_freq=self.freqstr, other_freq=other.freqstr)
A:pandas.core.arrays.datetimelike.left->self.astype('O')
A:pandas.core.arrays.datetimelike.res_values->op(left, np.array(other))
A:pandas.core.arrays.datetimelike.res->type(self)._from_sequence(res_values, **kwargs)
A:pandas.core.arrays.datetimelike.freq->pandas.tseries.frequencies.to_offset(freq)
A:pandas.core.arrays.datetimelike.op->getattr(self, name, None)
A:pandas.core.arrays.datetimelike.periods->int(periods)
pandas.core.arrays.datetimelike.AttributesMixin
pandas.core.arrays.datetimelike.AttributesMixin._check_compatible_with(self,other:Union[Period,Timestamp,Timedelta,NaTType],setitem:bool=False)->None
pandas.core.arrays.datetimelike.AttributesMixin._scalar_from_string(self,value:str)->Union[Period, Timestamp, Timedelta, NaTType]
pandas.core.arrays.datetimelike.AttributesMixin._scalar_type(self)->Type[DatetimeLikeScalar]
pandas.core.arrays.datetimelike.AttributesMixin._simple_new(cls,values,**kwargs)
pandas.core.arrays.datetimelike.AttributesMixin._unbox_scalar(self,value:Union[Period,Timestamp,Timedelta,NaTType])->int
pandas.core.arrays.datetimelike.DatelikeOps
pandas.core.arrays.datetimelike.DatelikeOps.strftime(self,date_format)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin(ExtensionOpsMixin,AttributesMixin,ExtensionArray)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__add__(self,other)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__array__(self,dtype=None)->np.ndarray
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__getitem__(self,key)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__iadd__(self,other)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__isub__(self,other)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__iter__(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__len__(self)->int
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__radd__(self,other)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__rsub__(self,other)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__setitem__(self,key:Union[int,Sequence[int],Sequence[bool],slice],value:Union[NaTType,Any,Sequence[Any]])->None
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__sub__(self,other)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_datetimelike_scalar(self,other)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_delta(self,other)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_delta_tdi(self,other)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_nat(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_offset(self,offset)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_timedeltalike_scalar(self,other)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._addsub_object_array(self,other:np.ndarray,op)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._box_func(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._box_values(self,values)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._concat_same_type(cls,to_concat)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._format_native_types(self,na_rep='NaT',date_format=None)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._formatter(self,boxed=False)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._from_factorized(cls,values,original)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._hasnans(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._is_monotonic_decreasing(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._is_monotonic_increasing(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._is_unique(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._isnan(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._maybe_clear_freq(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._maybe_mask_results(self,result,fill_value=iNaT,convert=None)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._ndarray_values(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._reduce(self,name,axis=0,skipna=True,**kwargs)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._resolution(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._sub_datetimelike_scalar(self,other)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._sub_nat(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._sub_period(self,other)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._sub_period_array(self,other)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._time_shift(self,periods,freq=None)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_fill_value(self,fill_value)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_frequency(cls,index,freq,**kwargs)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._values_for_argsort(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._values_for_factorize(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.asi8(self)->np.ndarray
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.astype(self,dtype,copy=True)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.copy(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.fillna(self,value=None,method=None,limit=None)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq(self,value)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freqstr(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.inferred_freq(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.isna(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.map(self,mapper)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.max(self,axis=None,skipna=True,*args,**kwargs)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.mean(self,skipna=True)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.min(self,axis=None,skipna=True,*args,**kwargs)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.nbytes(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.ndim(self)->int
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.ravel(self,*args,**kwargs)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.repeat(self,repeats,*args,**kwargs)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.reshape(self,*args,**kwargs)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.resolution(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.searchsorted(self,value,side='left',sorter=None)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.shape(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.shift(self,periods=1,fill_value=None,axis=0)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.size(self)->int
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.take(self,indices,allow_fill=False,fill_value=None)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.unique(self)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.value_counts(self,dropna=False)
pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.view(self,dtype=None)
pandas.core.arrays.datetimelike.TimelikeOps
pandas.core.arrays.datetimelike.TimelikeOps._round(self,freq,mode,ambiguous,nonexistent)
pandas.core.arrays.datetimelike.TimelikeOps.ceil(self,freq,ambiguous='raise',nonexistent='raise')
pandas.core.arrays.datetimelike.TimelikeOps.floor(self,freq,ambiguous='raise',nonexistent='raise')
pandas.core.arrays.datetimelike.TimelikeOps.round(self,freq,ambiguous='raise',nonexistent='raise')
pandas.core.arrays.datetimelike._datetimelike_array_cmp(cls,op)
pandas.core.arrays.datetimelike.maybe_infer_freq(freq)
pandas.core.arrays.datetimelike.validate_endpoints(closed)
pandas.core.arrays.datetimelike.validate_inferred_freq(freq,inferred_freq,freq_infer)
pandas.core.arrays.datetimelike.validate_periods(periods)
pandas.core.arrays.dtlike.AttributesMixin
pandas.core.arrays.dtlike.AttributesMixin._check_compatible_with(self,other:Union[Period,Timestamp,Timedelta,NaTType],setitem:bool=False)->None
pandas.core.arrays.dtlike.AttributesMixin._scalar_from_string(self,value:str)->Union[Period, Timestamp, Timedelta, NaTType]
pandas.core.arrays.dtlike.AttributesMixin._scalar_type(self)->Type[DatetimeLikeScalar]
pandas.core.arrays.dtlike.AttributesMixin._simple_new(cls,values,**kwargs)
pandas.core.arrays.dtlike.AttributesMixin._unbox_scalar(self,value:Union[Period,Timestamp,Timedelta,NaTType])->int
pandas.core.arrays.dtlike.DatelikeOps
pandas.core.arrays.dtlike.DatelikeOps.strftime(self,date_format)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin(ExtensionOpsMixin,AttributesMixin,ExtensionArray)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.__add__(self,other)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.__array__(self,dtype=None)->np.ndarray
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.__getitem__(self,key)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.__iadd__(self,other)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.__isub__(self,other)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.__iter__(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.__len__(self)->int
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.__radd__(self,other)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.__rsub__(self,other)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.__setitem__(self,key:Union[int,Sequence[int],Sequence[bool],slice],value:Union[NaTType,Any,Sequence[Any]])->None
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.__sub__(self,other)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._add_delta(self,other)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._add_delta_tdi(self,other)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._add_dtlike_scalar(self,other)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._add_nat(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._add_offset(self,offset)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._add_timedeltalike_scalar(self,other)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._addsub_object_array(self,other:np.ndarray,op)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._box_func(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._box_values(self,values)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._concat_same_type(cls,to_concat)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._format_native_types(self,na_rep='NaT',date_format=None)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._formatter(self,boxed=False)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._from_factorized(cls,values,original)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._hasnans(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._is_monotonic_decreasing(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._is_monotonic_increasing(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._is_unique(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._isnan(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._maybe_clear_freq(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._maybe_mask_results(self,result,fill_value=iNaT,convert=None)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._ndarray_values(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._reduce(self,name,axis=0,skipna=True,**kwargs)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._resolution(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._sub_dtlike_scalar(self,other)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._sub_nat(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._sub_period(self,other)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._sub_period_array(self,other)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._time_shift(self,periods,freq=None)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._validate_fill_value(self,fill_value)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._validate_frequency(cls,index,freq,**kwargs)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._values_for_argsort(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin._values_for_factorize(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.asi8(self)->np.ndarray
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.astype(self,dtype,copy=True)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.copy(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.fillna(self,value=None,method=None,limit=None)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.freq(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.freq(self,value)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.freqstr(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.inferred_freq(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.isna(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.map(self,mapper)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.max(self,axis=None,skipna=True,*args,**kwargs)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.mean(self,skipna=True)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.min(self,axis=None,skipna=True,*args,**kwargs)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.nbytes(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.ndim(self)->int
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.ravel(self,*args,**kwargs)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.repeat(self,repeats,*args,**kwargs)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.reshape(self,*args,**kwargs)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.resolution(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.searchsorted(self,value,side='left',sorter=None)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.shape(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.shift(self,periods=1,fill_value=None,axis=0)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.size(self)->int
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.take(self,indices,allow_fill=False,fill_value=None)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.unique(self)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.value_counts(self,dropna=False)
pandas.core.arrays.dtlike.DatetimeLikeArrayMixin.view(self,dtype=None)
pandas.core.arrays.dtlike.TimelikeOps
pandas.core.arrays.dtlike.TimelikeOps._round(self,freq,mode,ambiguous,nonexistent)
pandas.core.arrays.dtlike.TimelikeOps.ceil(self,freq,ambiguous='raise',nonexistent='raise')
pandas.core.arrays.dtlike.TimelikeOps.floor(self,freq,ambiguous='raise',nonexistent='raise')
pandas.core.arrays.dtlike.TimelikeOps.round(self,freq,ambiguous='raise',nonexistent='raise')
pandas.core.arrays.dtlike._dtlike_array_cmp(cls,op)
pandas.core.arrays.dtlike.maybe_infer_freq(freq)
pandas.core.arrays.dtlike.validate_endpoints(closed)
pandas.core.arrays.dtlike.validate_inferred_freq(freq,inferred_freq,freq_infer)
pandas.core.arrays.dtlike.validate_periods(periods)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/arrays/datetimes.py----------------------------------------
A:pandas.core.arrays.datetimes._midnight->time(0, 0)
A:pandas.core.arrays.datetimes.values->self._local_timestamps()
A:pandas.core.arrays.datetimes.month_kw->kwds.get('startingMonth', kwds.get('month', 12))
A:pandas.core.arrays.datetimes.result->result.copy().copy()
A:pandas.core.arrays.datetimes.inferred_freq->getattr(values, '_freq', None)
A:pandas.core.arrays.datetimes.dtz->getattr(dtype, 'tz', None)
A:pandas.core.arrays.datetimes.dtype->pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_from_string(dtype)
A:pandas.core.arrays.datetimes.freq->get_period_alias(freq)
A:pandas.core.arrays.datetimes.(freq, freq_infer)->pandas.core.arrays.datetimelike.validate_inferred_freq(freq, inferred_freq, freq_infer)
A:pandas.core.arrays.datetimes.(subarr, tz, inferred_freq)->sequence_to_dt64ns(data, dtype=dtype, copy=copy, tz=tz, dayfirst=dayfirst, yearfirst=yearfirst, ambiguous=ambiguous)
A:pandas.core.arrays.datetimes.result._freq->to_offset(result.inferred_freq)
A:pandas.core.arrays.datetimes.periods->pandas.core.arrays.datetimelike.validate_periods(periods)
A:pandas.core.arrays.datetimes.start->normalize_date(start)
A:pandas.core.arrays.datetimes.end->normalize_date(end)
A:pandas.core.arrays.datetimes.(left_closed, right_closed)->pandas.core.arrays.datetimelike.validate_endpoints(closed)
A:pandas.core.arrays.datetimes.(start, end, _normalized)->_maybe_normalize_endpoints(start, end, normalize)
A:pandas.core.arrays.datetimes.tz->pandas._libs.tslibs.timezones.maybe_get_tz(tz)
A:pandas.core.arrays.datetimes.(values, _tz)->generate_regular_range(start, end, periods, freq)
A:pandas.core.arrays.datetimes.index->cls._simple_new(arr.astype('M8[ns]', copy=False), freq=None, dtype=dtype)
A:pandas.core.arrays.datetimes.arr->pandas._libs.tslibs.conversion.tz_localize_to_utc(index.asi8, tz, ambiguous=ambiguous, nonexistent=nonexistent)
A:pandas.core.arrays.datetimes.length->len(self)
A:pandas.core.arrays.datetimes.end_i->min((i + 1) * chunksize, length)
A:pandas.core.arrays.datetimes.converted->pandas._libs.tslib.ints_to_pydatetime(data[start_i:end_i], tz=self.tz, freq=self.freq, box='timestamp')
A:pandas.core.arrays.datetimes.new_tz->getattr(dtype, 'tz', None)
A:pandas.core.arrays.datetimes.fmt->_get_format_datetime64_from_values(self, date_format)
A:pandas.core.arrays.datetimes.other->Timestamp(other)
A:pandas.core.arrays.datetimes.vzone->pandas._libs.tslibs.timezones.get_timezone(getattr(other, 'tzinfo', '__no_tz__'))
A:pandas.core.arrays.datetimes.other_tz->getattr(other, 'tzinfo', None)
A:pandas.core.arrays.datetimes.new_values->pandas._libs.tslibs.conversion.normalize_i8_timestamps(self.asi8, self.tz)
A:pandas.core.arrays.datetimes.new_dates->new_dates.view(_NS_DTYPE).view(_NS_DTYPE)
A:pandas.core.arrays.datetimes.m8delta->i8delta.view('m8[ns]')
A:pandas.core.arrays.datetimes.timestamps->self._local_timestamps()
A:pandas.core.arrays.datetimes.year->numpy.asarray(self.year)
A:pandas.core.arrays.datetimes.month->numpy.asarray(self.month)
A:pandas.core.arrays.datetimes.day->numpy.asarray(self.day)
A:pandas.core.arrays.datetimes.hour->_field_accessor('hour', 'h', '\n        The hours of the datetime.\n        ')
A:pandas.core.arrays.datetimes.minute->_field_accessor('minute', 'm', '\n        The minutes of the datetime.\n        ')
A:pandas.core.arrays.datetimes.second->_field_accessor('second', 's', '\n        The seconds of the datetime.\n        ')
A:pandas.core.arrays.datetimes.microsecond->_field_accessor('microsecond', 'us', '\n        The microseconds of the datetime.\n        ')
A:pandas.core.arrays.datetimes.nanosecond->_field_accessor('nanosecond', 'ns', '\n        The nanoseconds of the datetime.\n        ')
A:pandas.core.arrays.datetimes.weekofyear->_field_accessor('weekofyear', 'woy', '\n        The week ordinal of the year.\n        ')
A:pandas.core.arrays.datetimes.dayofweek->_field_accessor('dayofweek', 'dow', _dayofweek_doc)
A:pandas.core.arrays.datetimes.dayofyear->_field_accessor('dayofyear', 'doy', '\n        The ordinal day of the year.\n        ')
A:pandas.core.arrays.datetimes.quarter->_field_accessor('quarter', 'q', '\n        The quarter of the date.\n        ')
A:pandas.core.arrays.datetimes.days_in_month->_field_accessor('days_in_month', 'dim', '\n        The number of days in the month.\n        ')
A:pandas.core.arrays.datetimes.is_month_start->_field_accessor('is_month_start', 'is_month_start', _is_month_doc.format(first_or_last='first'))
A:pandas.core.arrays.datetimes.is_month_end->_field_accessor('is_month_end', 'is_month_end', _is_month_doc.format(first_or_last='last'))
A:pandas.core.arrays.datetimes.is_quarter_start->_field_accessor('is_quarter_start', 'is_quarter_start', '\n        Indicator for whether the date is the first day of a quarter.\n\n        Returns\n        -------\n        is_quarter_start : Series or DatetimeIndex\n            The same type as the original data with boolean values. Series will\n            have the same name and index. DatetimeIndex will have the same\n            name.\n\n        See Also\n        --------\n        quarter : Return the quarter of the date.\n        is_quarter_end : Similar property for indicating the quarter start.\n\n        Examples\n        --------\n        This method is available on Series with datetime values under\n        the ``.dt`` accessor, and directly on DatetimeIndex.\n\n        >>> df = pd.DataFrame({\'dates\': pd.date_range("2017-03-30",\n        ...                   periods=4)})\n        >>> df.assign(quarter=df.dates.dt.quarter,\n        ...           is_quarter_start=df.dates.dt.is_quarter_start)\n               dates  quarter  is_quarter_start\n        0 2017-03-30        1             False\n        1 2017-03-31        1             False\n        2 2017-04-01        2              True\n        3 2017-04-02        2             False\n\n        >>> idx = pd.date_range(\'2017-03-30\', periods=4)\n        >>> idx\n        DatetimeIndex([\'2017-03-30\', \'2017-03-31\', \'2017-04-01\', \'2017-04-02\'],\n                      dtype=\'datetime64[ns]\', freq=\'D\')\n\n        >>> idx.is_quarter_start\n        array([False, False,  True, False])\n        ')
A:pandas.core.arrays.datetimes.is_quarter_end->_field_accessor('is_quarter_end', 'is_quarter_end', '\n        Indicator for whether the date is the last day of a quarter.\n\n        Returns\n        -------\n        is_quarter_end : Series or DatetimeIndex\n            The same type as the original data with boolean values. Series will\n            have the same name and index. DatetimeIndex will have the same\n            name.\n\n        See Also\n        --------\n        quarter : Return the quarter of the date.\n        is_quarter_start : Similar property indicating the quarter start.\n\n        Examples\n        --------\n        This method is available on Series with datetime values under\n        the ``.dt`` accessor, and directly on DatetimeIndex.\n\n        >>> df = pd.DataFrame({\'dates\': pd.date_range("2017-03-30",\n        ...                    periods=4)})\n        >>> df.assign(quarter=df.dates.dt.quarter,\n        ...           is_quarter_end=df.dates.dt.is_quarter_end)\n               dates  quarter    is_quarter_end\n        0 2017-03-30        1             False\n        1 2017-03-31        1              True\n        2 2017-04-01        2             False\n        3 2017-04-02        2             False\n\n        >>> idx = pd.date_range(\'2017-03-30\', periods=4)\n        >>> idx\n        DatetimeIndex([\'2017-03-30\', \'2017-03-31\', \'2017-04-01\', \'2017-04-02\'],\n                      dtype=\'datetime64[ns]\', freq=\'D\')\n\n        >>> idx.is_quarter_end\n        array([False,  True, False, False])\n        ')
A:pandas.core.arrays.datetimes.is_year_start->_field_accessor('is_year_start', 'is_year_start', '\n        Indicate whether the date is the first day of a year.\n\n        Returns\n        -------\n        Series or DatetimeIndex\n            The same type as the original data with boolean values. Series will\n            have the same name and index. DatetimeIndex will have the same\n            name.\n\n        See Also\n        --------\n        is_year_end : Similar property indicating the last day of the year.\n\n        Examples\n        --------\n        This method is available on Series with datetime values under\n        the ``.dt`` accessor, and directly on DatetimeIndex.\n\n        >>> dates = pd.Series(pd.date_range("2017-12-30", periods=3))\n        >>> dates\n        0   2017-12-30\n        1   2017-12-31\n        2   2018-01-01\n        dtype: datetime64[ns]\n\n        >>> dates.dt.is_year_start\n        0    False\n        1    False\n        2    True\n        dtype: bool\n\n        >>> idx = pd.date_range("2017-12-30", periods=3)\n        >>> idx\n        DatetimeIndex([\'2017-12-30\', \'2017-12-31\', \'2018-01-01\'],\n                      dtype=\'datetime64[ns]\', freq=\'D\')\n\n        >>> idx.is_year_start\n        array([False, False,  True])\n        ')
A:pandas.core.arrays.datetimes.is_year_end->_field_accessor('is_year_end', 'is_year_end', '\n        Indicate whether the date is the last day of the year.\n\n        Returns\n        -------\n        Series or DatetimeIndex\n            The same type as the original data with boolean values. Series will\n            have the same name and index. DatetimeIndex will have the same\n            name.\n\n        See Also\n        --------\n        is_year_start : Similar property indicating the start of the year.\n\n        Examples\n        --------\n        This method is available on Series with datetime values under\n        the ``.dt`` accessor, and directly on DatetimeIndex.\n\n        >>> dates = pd.Series(pd.date_range("2017-12-30", periods=3))\n        >>> dates\n        0   2017-12-30\n        1   2017-12-31\n        2   2018-01-01\n        dtype: datetime64[ns]\n\n        >>> dates.dt.is_year_end\n        0    False\n        1     True\n        2    False\n        dtype: bool\n\n        >>> idx = pd.date_range("2017-12-30", periods=3)\n        >>> idx\n        DatetimeIndex([\'2017-12-30\', \'2017-12-31\', \'2018-01-01\'],\n                      dtype=\'datetime64[ns]\', freq=\'D\')\n\n        >>> idx.is_year_end\n        array([False,  True, False])\n        ')
A:pandas.core.arrays.datetimes.is_leap_year->_field_accessor('is_leap_year', 'is_leap_year', '\n        Boolean indicator if the date belongs to a leap year.\n\n        A leap year is a year, which has 366 days (instead of 365) including\n        29th of February as an intercalary day.\n        Leap years are years which are multiples of four with the exception\n        of years divisible by 100 but not by 400.\n\n        Returns\n        -------\n        Series or ndarray\n             Booleans indicating if dates belong to a leap year.\n\n        Examples\n        --------\n        This method is available on Series with datetime values under\n        the ``.dt`` accessor, and directly on DatetimeIndex.\n\n        >>> idx = pd.date_range("2012-01-01", "2015-01-01", freq="Y")\n        >>> idx\n        DatetimeIndex([\'2012-12-31\', \'2013-12-31\', \'2014-12-31\'],\n                      dtype=\'datetime64[ns]\', freq=\'A-DEC\')\n        >>> idx.is_leap_year\n        array([ True, False, False], dtype=bool)\n\n        >>> dates = pd.Series(idx)\n        >>> dates_series\n        0   2012-12-31\n        1   2013-12-31\n        2   2014-12-31\n        dtype: datetime64[ns]\n        >>> dates_series.dt.is_leap_year\n        0     True\n        1    False\n        2    False\n        dtype: bool\n        ')
A:pandas.core.arrays.datetimes.data->numpy.array(data, dtype=np.object_)
A:pandas.core.arrays.datetimes.(data, copy)->maybe_convert_dtype(data, copy)
A:pandas.core.arrays.datetimes.(data, inferred_tz)->objects_to_datetime64ns(data, dayfirst=dayfirst, yearfirst=yearfirst)
A:pandas.core.arrays.datetimes.(result, tz_parsed)->pandas._libs.tslib.array_to_datetime(data, errors=errors, utc=utc, dayfirst=dayfirst, yearfirst=yearfirst, require_iso8601=require_iso8601)
A:pandas.core.arrays.datetimes.(values, tz_parsed)->pandas._libs.tslibs.conversion.datetime_to_datetime64(data)
A:pandas.core.arrays.datetimes.inferred_tz->pandas._libs.tslibs.timezones.maybe_get_tz(inferred_tz)
A:pandas.core.arrays.datetimes.ts->ts.tz_localize(**localize_args).tz_localize(**localize_args)
pandas.core.arrays.DatetimeArray(self,values,dtype=_NS_DTYPE,freq=None,copy=False)
pandas.core.arrays.DatetimeArray.__array__(self,dtype=None)->np.ndarray
pandas.core.arrays.DatetimeArray.__iter__(self)
pandas.core.arrays.DatetimeArray._add_delta(self,delta)
pandas.core.arrays.DatetimeArray._add_offset(self,offset)
pandas.core.arrays.DatetimeArray._assert_tzawareness_compat(self,other)
pandas.core.arrays.DatetimeArray._box_func(self)
pandas.core.arrays.DatetimeArray._check_compatible_with(self,other,setitem:bool=False)
pandas.core.arrays.DatetimeArray._format_native_types(self,na_rep='NaT',date_format=None,**kwargs)
pandas.core.arrays.DatetimeArray._from_sequence(cls,data,dtype=None,copy=False,tz=None,freq=None,dayfirst=False,yearfirst=False,ambiguous='raise')
pandas.core.arrays.DatetimeArray._generate_range(cls,start,end,periods,freq,tz=None,normalize=False,ambiguous='raise',nonexistent='raise',closed=None)
pandas.core.arrays.DatetimeArray._has_same_tz(self,other)
pandas.core.arrays.DatetimeArray._local_timestamps(self)
pandas.core.arrays.DatetimeArray._maybe_clear_freq(self)
pandas.core.arrays.DatetimeArray._resolution(self)
pandas.core.arrays.DatetimeArray._scalar_from_string(self,value)
pandas.core.arrays.DatetimeArray._simple_new(cls,values,freq=None,dtype=_NS_DTYPE)
pandas.core.arrays.DatetimeArray._sub_dt_arraylike(self,other)
pandas.core.arrays.DatetimeArray._sub_dtlike_scalar(self,other)
pandas.core.arrays.DatetimeArray._timezone(self)
pandas.core.arrays.DatetimeArray._unbox_scalar(self,value)
pandas.core.arrays.DatetimeArray.astype(self,dtype,copy=True)
pandas.core.arrays.DatetimeArray.date(self)
pandas.core.arrays.DatetimeArray.day_name(self,locale=None)
pandas.core.arrays.DatetimeArray.dtype(self)->Union[np.dtype, DatetimeTZDtype]
pandas.core.arrays.DatetimeArray.is_normalized(self)
pandas.core.arrays.DatetimeArray.month_name(self,locale=None)
pandas.core.arrays.DatetimeArray.normalize(self)
pandas.core.arrays.DatetimeArray.time(self)
pandas.core.arrays.DatetimeArray.timetz(self)
pandas.core.arrays.DatetimeArray.to_julian_date(self)
pandas.core.arrays.DatetimeArray.to_period(self,freq=None)
pandas.core.arrays.DatetimeArray.to_perioddelta(self,freq)
pandas.core.arrays.DatetimeArray.to_pydt(self)
pandas.core.arrays.DatetimeArray.tz(self)
pandas.core.arrays.DatetimeArray.tz(self,value)
pandas.core.arrays.DatetimeArray.tz_convert(self,tz)
pandas.core.arrays.DatetimeArray.tz_localize(self,tz,ambiguous='raise',nonexistent='raise')
pandas.core.arrays.DatetimeArray.tzinfo(self)
pandas.core.arrays.datetimes.DatetimeArray(self,values,dtype=_NS_DTYPE,freq=None,copy=False)
pandas.core.arrays.datetimes.DatetimeArray.__array__(self,dtype=None)->np.ndarray
pandas.core.arrays.datetimes.DatetimeArray.__init__(self,values,dtype=_NS_DTYPE,freq=None,copy=False)
pandas.core.arrays.datetimes.DatetimeArray.__iter__(self)
pandas.core.arrays.datetimes.DatetimeArray._add_delta(self,delta)
pandas.core.arrays.datetimes.DatetimeArray._add_offset(self,offset)
pandas.core.arrays.datetimes.DatetimeArray._assert_tzawareness_compat(self,other)
pandas.core.arrays.datetimes.DatetimeArray._box_func(self)
pandas.core.arrays.datetimes.DatetimeArray._check_compatible_with(self,other,setitem:bool=False)
pandas.core.arrays.datetimes.DatetimeArray._format_native_types(self,na_rep='NaT',date_format=None,**kwargs)
pandas.core.arrays.datetimes.DatetimeArray._from_sequence(cls,data,dtype=None,copy=False,tz=None,freq=None,dayfirst=False,yearfirst=False,ambiguous='raise')
pandas.core.arrays.datetimes.DatetimeArray._generate_range(cls,start,end,periods,freq,tz=None,normalize=False,ambiguous='raise',nonexistent='raise',closed=None)
pandas.core.arrays.datetimes.DatetimeArray._has_same_tz(self,other)
pandas.core.arrays.datetimes.DatetimeArray._local_timestamps(self)
pandas.core.arrays.datetimes.DatetimeArray._maybe_clear_freq(self)
pandas.core.arrays.datetimes.DatetimeArray._resolution(self)
pandas.core.arrays.datetimes.DatetimeArray._scalar_from_string(self,value)
pandas.core.arrays.datetimes.DatetimeArray._simple_new(cls,values,freq=None,dtype=_NS_DTYPE)
pandas.core.arrays.datetimes.DatetimeArray._sub_datetime_arraylike(self,other)
pandas.core.arrays.datetimes.DatetimeArray._sub_datetimelike_scalar(self,other)
pandas.core.arrays.datetimes.DatetimeArray._timezone(self)
pandas.core.arrays.datetimes.DatetimeArray._unbox_scalar(self,value)
pandas.core.arrays.datetimes.DatetimeArray.astype(self,dtype,copy=True)
pandas.core.arrays.datetimes.DatetimeArray.date(self)
pandas.core.arrays.datetimes.DatetimeArray.day_name(self,locale=None)
pandas.core.arrays.datetimes.DatetimeArray.dtype(self)->Union[np.dtype, DatetimeTZDtype]
pandas.core.arrays.datetimes.DatetimeArray.is_normalized(self)
pandas.core.arrays.datetimes.DatetimeArray.month_name(self,locale=None)
pandas.core.arrays.datetimes.DatetimeArray.normalize(self)
pandas.core.arrays.datetimes.DatetimeArray.time(self)
pandas.core.arrays.datetimes.DatetimeArray.timetz(self)
pandas.core.arrays.datetimes.DatetimeArray.to_julian_date(self)
pandas.core.arrays.datetimes.DatetimeArray.to_period(self,freq=None)
pandas.core.arrays.datetimes.DatetimeArray.to_perioddelta(self,freq)
pandas.core.arrays.datetimes.DatetimeArray.to_pydatetime(self)
pandas.core.arrays.datetimes.DatetimeArray.tz(self)
pandas.core.arrays.datetimes.DatetimeArray.tz(self,value)
pandas.core.arrays.datetimes.DatetimeArray.tz_convert(self,tz)
pandas.core.arrays.datetimes.DatetimeArray.tz_localize(self,tz,ambiguous='raise',nonexistent='raise')
pandas.core.arrays.datetimes.DatetimeArray.tzinfo(self)
pandas.core.arrays.datetimes._field_accessor(name,field,docstring=None)
pandas.core.arrays.datetimes._infer_tz_from_endpoints(start,end,tz)
pandas.core.arrays.datetimes._maybe_localize_point(ts,is_none,is_not_none,freq,tz,ambiguous,nonexistent)
pandas.core.arrays.datetimes._maybe_normalize_endpoints(start,end,normalize)
pandas.core.arrays.datetimes._validate_dt64_dtype(dtype)
pandas.core.arrays.datetimes.maybe_convert_dtype(data,copy)
pandas.core.arrays.datetimes.maybe_infer_tz(tz,inferred_tz)
pandas.core.arrays.datetimes.objects_to_datetime64ns(data,dayfirst,yearfirst,utc=False,errors='raise',require_iso8601=False,allow_object=False)
pandas.core.arrays.datetimes.sequence_to_dt64ns(data,dtype=None,copy=False,tz=None,dayfirst=False,yearfirst=False,ambiguous='raise')
pandas.core.arrays.datetimes.tz_to_dtype(tz)
pandas.core.arrays.datetimes.validate_tz_from_dtype(dtype,tz)
pandas.core.arrays.dts._field_accessor(name,field,docstring=None)
pandas.core.arrays.dts._infer_tz_from_endpoints(start,end,tz)
pandas.core.arrays.dts._maybe_localize_point(ts,is_none,is_not_none,freq,tz,ambiguous,nonexistent)
pandas.core.arrays.dts._maybe_normalize_endpoints(start,end,normalize)
pandas.core.arrays.dts._validate_dt64_dtype(dtype)
pandas.core.arrays.dts.maybe_convert_dtype(data,copy)
pandas.core.arrays.dts.maybe_infer_tz(tz,inferred_tz)
pandas.core.arrays.dts.objects_to_dt64ns(data,dayfirst,yearfirst,utc=False,errors='raise',require_iso8601=False,allow_object=False)
pandas.core.arrays.dts.sequence_to_dt64ns(data,dtype=None,copy=False,tz=None,dayfirst=False,yearfirst=False,ambiguous='raise')
pandas.core.arrays.dts.tz_to_dtype(tz)
pandas.core.arrays.dts.validate_tz_from_dtype(dtype,tz)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/arrays/_ranges.py----------------------------------------
A:pandas.core.arrays._ranges.e->_generate_range_overflow_safe(b, periods, stride, side='start')
A:pandas.core.arrays._ranges.b->_generate_range_overflow_safe(e, periods, stride, side='end')
A:pandas.core.arrays._ranges.values->numpy.array([x.value for x in xdr], dtype=np.int64)
A:pandas.core.arrays._ranges.xdr->generate_range(start=start, end=end, periods=periods, offset=freq)
A:pandas.core.arrays._ranges.i64max->numpy.uint64(np.iinfo(np.int64).max)
A:pandas.core.arrays._ranges.midpoint->_generate_range_overflow_safe(endpoint, mid_periods, stride, side)
pandas.core.arrays._ranges._generate_range_overflow_safe(endpoint:int,periods:int,stride:int,side:str='start')->int
pandas.core.arrays._ranges._generate_range_overflow_safe_signed(endpoint:int,periods:int,stride:int,side:str)->int
pandas.core.arrays._ranges.generate_regular_range(start:Timestamp,end:Timestamp,periods:int,freq:DateOffset)->Tuple[np.ndarray, str]


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/arrays/masked.py----------------------------------------
A:pandas.core.arrays.masked.item->check_array_indexer(self, item)
A:pandas.core.arrays.masked.data->data.copy().copy()
A:pandas.core.arrays.masked.mask->numpy.zeros(len(counts), dtype='bool')
A:pandas.core.arrays.masked.result->take(self._data, indexer, fill_value=data_fill_value, allow_fill=allow_fill)
A:pandas.core.arrays.masked.value_counts->Index(data).value_counts()
A:pandas.core.arrays.masked.index->Index(np.concatenate([index, np.array([self.dtype.na_value], dtype=object)]), dtype=object)
A:pandas.core.arrays.masked.counts->IntegerArray(counts, mask)
A:pandas.core.arrays.masked.counts[-1]->self._mask.sum()
pandas.core.arrays.masked.BaseMaskedArray(ExtensionArray,ExtensionOpsMixin)
pandas.core.arrays.masked.BaseMaskedArray.__array__(self,dtype=None)->np.ndarray
pandas.core.arrays.masked.BaseMaskedArray.__arrow_array__(self,type=None)
pandas.core.arrays.masked.BaseMaskedArray.__getitem__(self,item)
pandas.core.arrays.masked.BaseMaskedArray.__invert__(self)
pandas.core.arrays.masked.BaseMaskedArray.__iter__(self)
pandas.core.arrays.masked.BaseMaskedArray.__len__(self)->int
pandas.core.arrays.masked.BaseMaskedArray._concat_same_type(cls,to_concat)
pandas.core.arrays.masked.BaseMaskedArray._hasna(self)->bool
pandas.core.arrays.masked.BaseMaskedArray._na_value(self)
pandas.core.arrays.masked.BaseMaskedArray.copy(self)
pandas.core.arrays.masked.BaseMaskedArray.isna(self)
pandas.core.arrays.masked.BaseMaskedArray.nbytes(self)
pandas.core.arrays.masked.BaseMaskedArray.take(self,indexer,allow_fill=False,fill_value=None)
pandas.core.arrays.masked.BaseMaskedArray.to_numpy(self,dtype=None,copy=False,na_value:'Scalar'=lib.no_default)
pandas.core.arrays.masked.BaseMaskedArray.value_counts(self,dropna=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/arrays/interval.py----------------------------------------
A:pandas.core.arrays.interval._shared_docs_kwargs->dict(klass='IntervalArray', qualname='arrays.IntervalArray', name='')
A:pandas.core.arrays.interval.data->self._format_data()
A:pandas.core.arrays.interval.(left, right, infer_closed)->intervals_to_interval_bounds(data, validate_closed=closed is None)
A:pandas.core.arrays.interval.result->numpy.empty(len(left), dtype=object)
A:pandas.core.arrays.interval.left->self.left.copy(deep=True)
A:pandas.core.arrays.interval.right->self.right.copy(deep=True)
A:pandas.core.arrays.interval.dtype->pandas_dtype(dtype)
A:pandas.core.arrays.interval.values->numpy.asarray(values)
A:pandas.core.arrays.interval._interval_shared_docs['from_breaks']->textwrap.dedent("\n    Construct an %(klass)s from an array of splits.\n\n    Parameters\n    ----------\n    breaks : array-like (1-dimensional)\n        Left and right bounds for each interval.\n    closed : {'left', 'right', 'both', 'neither'}, default 'right'\n        Whether the intervals are closed on the left-side, right-side, both\n        or neither.\n    copy : bool, default False\n        Copy the data.\n    dtype : dtype or None, default None\n        If None, dtype will be inferred.\n\n        .. versionadded:: 0.23.0\n\n    Returns\n    -------\n    %(klass)s\n\n    See Also\n    --------\n    interval_range : Function to create a fixed frequency IntervalIndex.\n    %(klass)s.from_arrays : Construct from a left and right array.\n    %(klass)s.from_tuples : Construct from a sequence of tuples.\n\n    %(examples)s    ")
A:pandas.core.arrays.interval.breaks->maybe_convert_platform_interval(breaks)
A:pandas.core.arrays.interval._interval_shared_docs['from_arrays']->textwrap.dedent("\n        Construct from two arrays defining the left and right bounds.\n\n        Parameters\n        ----------\n        left : array-like (1-dimensional)\n            Left bounds for each interval.\n        right : array-like (1-dimensional)\n            Right bounds for each interval.\n        closed : {'left', 'right', 'both', 'neither'}, default 'right'\n            Whether the intervals are closed on the left-side, right-side, both\n            or neither.\n        copy : bool, default False\n            Copy the data.\n        dtype : dtype, optional\n            If None, dtype will be inferred.\n\n            .. versionadded:: 0.23.0\n\n        Returns\n        -------\n        %(klass)s\n\n        Raises\n        ------\n        ValueError\n            When a value is missing in only one of `left` or `right`.\n            When a value in `left` is greater than the corresponding value\n            in `right`.\n\n        See Also\n        --------\n        interval_range : Function to create a fixed frequency IntervalIndex.\n        %(klass)s.from_breaks : Construct an %(klass)s from an array of\n            splits.\n        %(klass)s.from_tuples : Construct an %(klass)s from an\n            array-like of tuples.\n\n        Notes\n        -----\n        Each element of `left` must be less than or equal to the `right`\n        element at the same position. If an element is missing, it must be\n        missing in both `left` and `right`. A TypeError is raised when\n        using an unsupported type for `left` or `right`. At the moment,\n        'category', 'object', and 'string' subtypes are not supported.\n\n        %(examples)s        ")
A:pandas.core.arrays.interval._interval_shared_docs['from_tuples']->textwrap.dedent("\n    Construct an %(klass)s from an array-like of tuples.\n\n    Parameters\n    ----------\n    data : array-like (1-dimensional)\n        Array of tuples.\n    closed : {'left', 'right', 'both', 'neither'}, default 'right'\n        Whether the intervals are closed on the left-side, right-side, both\n        or neither.\n    copy : bool, default False\n        By-default copy the data, this is compat only and ignored.\n    dtype : dtype or None, default None\n        If None, dtype will be inferred.\n\n        .. versionadded:: 0.23.0\n\n    Returns\n    -------\n    %(klass)s\n\n    See Also\n    --------\n    interval_range : Function to create a fixed frequency IntervalIndex.\n    %(klass)s.from_arrays : Construct an %(klass)s from a left and\n                                right array.\n    %(klass)s.from_breaks : Construct an %(klass)s from an array of\n                                splits.\n\n    %(examples)s    ")
A:pandas.core.arrays.interval.left_mask->notna(self.left)
A:pandas.core.arrays.interval.right_mask->notna(self.right)
A:pandas.core.arrays.interval.value->getattr(value, '_values', value)
A:pandas.core.arrays.interval.array->IntervalArray(value)
A:pandas.core.arrays.interval.key->check_array_indexer(self, key)
A:pandas.core.arrays.interval.other->other.categories.take(other.codes).categories.take(other.codes)
A:pandas.core.arrays.interval.new_left->self.left.astype(dtype.subtype)
A:pandas.core.arrays.interval.new_right->self.right.astype(dtype.subtype)
A:pandas.core.arrays.interval.closed->closed.pop().pop()
A:pandas.core.arrays.interval.empty_len->min(abs(periods), len(self))
A:pandas.core.arrays.interval.empty->self._from_sequence([fill_value] * empty_len)
A:pandas.core.arrays.interval.left_take->take(self.left, indices, allow_fill=allow_fill, fill_value=fill_left)
A:pandas.core.arrays.interval.right_take->take(self.right, indices, allow_fill=allow_fill, fill_value=fill_right)
A:pandas.core.arrays.interval.n->min(max_seq_items // 2, 10)
A:pandas.core.arrays.interval.max_seq_items->min((get_option('display.max_seq_items') or n) // 10, 10)
A:pandas.core.arrays.interval.first->formatter(self[0])
A:pandas.core.arrays.interval.last->formatter(self[-1])
A:pandas.core.arrays.interval.head_str->', '.join(head)
A:pandas.core.arrays.interval.tail_str->', '.join(tail)
A:pandas.core.arrays.interval._interval_shared_docs['set_closed']->textwrap.dedent("\n        Return an %(klass)s identical to the current one, but closed on the\n        specified side.\n\n        .. versionadded:: 0.24.0\n\n        Parameters\n        ----------\n        closed : {'left', 'right', 'both', 'neither'}\n            Whether the intervals are closed on the left-side, right-side, both\n            or neither.\n\n        Returns\n        -------\n        new_index : %(klass)s\n\n        %(examples)s        ")
A:pandas.core.arrays.interval.mask->self.isna()
A:pandas.core.arrays.interval.result[i]->Interval(left[i], right[i], closed)
A:pandas.core.arrays.interval.subtype->pyarrow.from_numpy_dtype(self.dtype.subtype)
A:pandas.core.arrays.interval.interval_type->ArrowIntervalType(subtype, self.closed)
A:pandas.core.arrays.interval.storage_array->pyarrow.StructArray.from_buffers(storage_array.type, len(storage_array), [null_bitmap], children=[storage_array.field(0), storage_array.field(1)])
A:pandas.core.arrays.interval.tuples->numpy.where(~self.isna(), tuples, np.nan)
A:pandas.core.arrays.interval.left_repeat->self.left.repeat(repeats)
A:pandas.core.arrays.interval.right_repeat->self.right.repeat(repeats)
A:pandas.core.arrays.interval._interval_shared_docs['contains']->textwrap.dedent('\n        Check elementwise if the Intervals contain the value.\n\n        Return a boolean mask whether the value is contained in the Intervals\n        of the %(klass)s.\n\n        .. versionadded:: 0.25.0\n\n        Parameters\n        ----------\n        other : scalar\n            The value to check whether it is contained in the Intervals.\n\n        Returns\n        -------\n        boolean array\n\n        See Also\n        --------\n        Interval.contains : Check whether Interval object contains value.\n        %(klass)s.overlaps : Check if an Interval overlaps the values in the\n            %(klass)s.\n\n        Examples\n        --------\n        %(examples)s\n        >>> intervals.contains(0.5)\n        array([ True, False, False])\n    ')
A:pandas.core.arrays.interval._interval_shared_docs['overlaps']->textwrap.dedent("\n        Check elementwise if an Interval overlaps the values in the %(klass)s.\n\n        Two intervals overlap if they share a common point, including closed\n        endpoints. Intervals that only have an open endpoint in common do not\n        overlap.\n\n        .. versionadded:: 0.24.0\n\n        Parameters\n        ----------\n        other : %(klass)s\n            Interval to check against for an overlap.\n\n        Returns\n        -------\n        ndarray\n            Boolean array positionally indicating where an overlap occurs.\n\n        See Also\n        --------\n        Interval.overlaps : Check whether two Interval objects overlap.\n\n        Examples\n        --------\n        %(examples)s\n        >>> intervals.overlaps(pd.Interval(0.5, 1.5))\n        array([ True,  True, False])\n\n        Intervals that share closed endpoints overlap:\n\n        >>> intervals.overlaps(pd.Interval(1, 3, closed='left'))\n        array([ True,  True, True])\n\n        Intervals that only have an open endpoint in common do not overlap:\n\n        >>> intervals.overlaps(pd.Interval(1, 2, closed='right'))\n        array([False,  True, False])\n        ")
pandas.core.arrays.IntervalArray(cls,data,closed=None,dtype=None,copy=False,verify_integrity=True)
pandas.core.arrays.IntervalArray.__array__(self,dtype=None)->np.ndarray
pandas.core.arrays.IntervalArray.__arrow_array__(self,type=None)
pandas.core.arrays.IntervalArray.__eq__(self,other)
pandas.core.arrays.IntervalArray.__getitem__(self,value)
pandas.core.arrays.IntervalArray.__iter__(self)
pandas.core.arrays.IntervalArray.__len__(self)->int
pandas.core.arrays.IntervalArray.__ne__(self,other)
pandas.core.arrays.IntervalArray.__repr__(self)->str
pandas.core.arrays.IntervalArray.__setitem__(self,key,value)
pandas.core.arrays.IntervalArray._concat_same_type(cls,to_concat)
pandas.core.arrays.IntervalArray._format_data(self)
pandas.core.arrays.IntervalArray._format_space(self)
pandas.core.arrays.IntervalArray._from_factorized(cls,values,original)
pandas.core.arrays.IntervalArray._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.core.arrays.IntervalArray._shallow_copy(self,left=None,right=None,closed=None)
pandas.core.arrays.IntervalArray._simple_new(cls,left,right,closed=None,copy=False,dtype=None,verify_integrity=True)
pandas.core.arrays.IntervalArray._validate(self)
pandas.core.arrays.IntervalArray.astype(self,dtype,copy=True)
pandas.core.arrays.IntervalArray.closed(self)
pandas.core.arrays.IntervalArray.contains(self,other)
pandas.core.arrays.IntervalArray.copy(self)
pandas.core.arrays.IntervalArray.dtype(self)
pandas.core.arrays.IntervalArray.fillna(self,value=None,method=None,limit=None)
pandas.core.arrays.IntervalArray.from_arrays(cls,left,right,closed='right',copy=False,dtype=None)
pandas.core.arrays.IntervalArray.from_breaks(cls,breaks,closed='right',copy=False,dtype=None)
pandas.core.arrays.IntervalArray.from_tuples(cls,data,closed='right',copy=False,dtype=None)
pandas.core.arrays.IntervalArray.is_non_overlapping_monotonic(self)
pandas.core.arrays.IntervalArray.isna(self)
pandas.core.arrays.IntervalArray.left(self)
pandas.core.arrays.IntervalArray.length(self)
pandas.core.arrays.IntervalArray.mid(self)
pandas.core.arrays.IntervalArray.nbytes(self)->int
pandas.core.arrays.IntervalArray.overlaps(self,other)
pandas.core.arrays.IntervalArray.repeat(self,repeats,axis=None)
pandas.core.arrays.IntervalArray.right(self)
pandas.core.arrays.IntervalArray.set_closed(self,closed)
pandas.core.arrays.IntervalArray.shift(self,periods:int=1,fill_value:object=None)->ABCExtensionArray
pandas.core.arrays.IntervalArray.size(self)->int
pandas.core.arrays.IntervalArray.take(self,indices,allow_fill=False,fill_value=None,axis=None,**kwargs)
pandas.core.arrays.IntervalArray.to_tuples(self,na_tuple=True)
pandas.core.arrays.IntervalArray.value_counts(self,dropna=True)
pandas.core.arrays.interval.IntervalArray(cls,data,closed=None,dtype=None,copy=False,verify_integrity=True)
pandas.core.arrays.interval.IntervalArray.__array__(self,dtype=None)->np.ndarray
pandas.core.arrays.interval.IntervalArray.__arrow_array__(self,type=None)
pandas.core.arrays.interval.IntervalArray.__eq__(self,other)
pandas.core.arrays.interval.IntervalArray.__getitem__(self,value)
pandas.core.arrays.interval.IntervalArray.__iter__(self)
pandas.core.arrays.interval.IntervalArray.__len__(self)->int
pandas.core.arrays.interval.IntervalArray.__ne__(self,other)
pandas.core.arrays.interval.IntervalArray.__new__(cls,data,closed=None,dtype=None,copy=False,verify_integrity=True)
pandas.core.arrays.interval.IntervalArray.__repr__(self)->str
pandas.core.arrays.interval.IntervalArray.__setitem__(self,key,value)
pandas.core.arrays.interval.IntervalArray._concat_same_type(cls,to_concat)
pandas.core.arrays.interval.IntervalArray._format_data(self)
pandas.core.arrays.interval.IntervalArray._format_space(self)
pandas.core.arrays.interval.IntervalArray._from_factorized(cls,values,original)
pandas.core.arrays.interval.IntervalArray._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.core.arrays.interval.IntervalArray._shallow_copy(self,left=None,right=None,closed=None)
pandas.core.arrays.interval.IntervalArray._simple_new(cls,left,right,closed=None,copy=False,dtype=None,verify_integrity=True)
pandas.core.arrays.interval.IntervalArray._validate(self)
pandas.core.arrays.interval.IntervalArray.astype(self,dtype,copy=True)
pandas.core.arrays.interval.IntervalArray.closed(self)
pandas.core.arrays.interval.IntervalArray.contains(self,other)
pandas.core.arrays.interval.IntervalArray.copy(self)
pandas.core.arrays.interval.IntervalArray.dtype(self)
pandas.core.arrays.interval.IntervalArray.fillna(self,value=None,method=None,limit=None)
pandas.core.arrays.interval.IntervalArray.from_arrays(cls,left,right,closed='right',copy=False,dtype=None)
pandas.core.arrays.interval.IntervalArray.from_breaks(cls,breaks,closed='right',copy=False,dtype=None)
pandas.core.arrays.interval.IntervalArray.from_tuples(cls,data,closed='right',copy=False,dtype=None)
pandas.core.arrays.interval.IntervalArray.is_non_overlapping_monotonic(self)
pandas.core.arrays.interval.IntervalArray.isna(self)
pandas.core.arrays.interval.IntervalArray.left(self)
pandas.core.arrays.interval.IntervalArray.length(self)
pandas.core.arrays.interval.IntervalArray.mid(self)
pandas.core.arrays.interval.IntervalArray.nbytes(self)->int
pandas.core.arrays.interval.IntervalArray.overlaps(self,other)
pandas.core.arrays.interval.IntervalArray.repeat(self,repeats,axis=None)
pandas.core.arrays.interval.IntervalArray.right(self)
pandas.core.arrays.interval.IntervalArray.set_closed(self,closed)
pandas.core.arrays.interval.IntervalArray.shift(self,periods:int=1,fill_value:object=None)->ABCExtensionArray
pandas.core.arrays.interval.IntervalArray.size(self)->int
pandas.core.arrays.interval.IntervalArray.take(self,indices,allow_fill=False,fill_value=None,axis=None,**kwargs)
pandas.core.arrays.interval.IntervalArray.to_tuples(self,na_tuple=True)
pandas.core.arrays.interval.IntervalArray.value_counts(self,dropna=True)
pandas.core.arrays.interval.maybe_convert_platform_interval(values)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/arrays/_arrow_utils.py----------------------------------------
A:pandas.core.arrays._arrow_utils.buflist->arr.buffers()
A:pandas.core.arrays._arrow_utils.mask->numpy.ones(len(arr), dtype=bool)
A:pandas.core.arrays._arrow_utils.metadata->json.loads(serialized.decode())
A:pandas.core.arrays._arrow_utils._period_type->ArrowPeriodType('D')
A:pandas.core.arrays._arrow_utils.subtype->pyarrow.type_for_alias(metadata['subtype'])
A:pandas.core.arrays._arrow_utils.storage_type->pyarrow.struct([('left', subtype), ('right', subtype)])
A:pandas.core.arrays._arrow_utils._interval_type->ArrowIntervalType(pyarrow.int64(), 'left')
pandas.core.arrays._arrow_utils.pyarrow_array_to_numpy_and_mask(arr,dtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/arrays/base.py----------------------------------------
A:pandas.core.arrays.base.result->nargsort(self, kind=kind, ascending=ascending, na_position='last')
A:pandas.core.arrays.base.ascending->pandas.compat.numpy.function.validate_argsort_with_ascending(ascending, args, kwargs)
A:pandas.core.arrays.base.(value, method)->validate_fillna_kwargs(value, method)
A:pandas.core.arrays.base.mask->self.isna()
A:pandas.core.arrays.base.new_values->self.copy()
A:pandas.core.arrays.base.empty->self._from_sequence([fill_value] * min(abs(periods), len(self)), dtype=self.dtype)
A:pandas.core.arrays.base.uniques->self._from_factorized(uniques, self)
A:pandas.core.arrays.base.arr->self.astype(object)
A:pandas.core.arrays.base.(arr, na_value)->self._values_for_factorize()
A:pandas.core.arrays.base.(codes, uniques)->_factorize_array(arr, na_sentinel=na_sentinel, na_value=na_value)
A:pandas.core.arrays.base.ind->numpy.arange(len(self)).repeat(repeats)
A:pandas.core.arrays.base.data->format_object_summary(self, self._formatter(), indent_for_name=False).rstrip(', \n')
A:pandas.core.arrays.base.cls.__add__->cls._create_arithmetic_method(operator.add)
A:pandas.core.arrays.base.cls.__radd__->cls._create_arithmetic_method(ops.radd)
A:pandas.core.arrays.base.cls.__sub__->cls._create_arithmetic_method(operator.sub)
A:pandas.core.arrays.base.cls.__rsub__->cls._create_arithmetic_method(ops.rsub)
A:pandas.core.arrays.base.cls.__mul__->cls._create_arithmetic_method(operator.mul)
A:pandas.core.arrays.base.cls.__rmul__->cls._create_arithmetic_method(ops.rmul)
A:pandas.core.arrays.base.cls.__pow__->cls._create_arithmetic_method(operator.pow)
A:pandas.core.arrays.base.cls.__rpow__->cls._create_arithmetic_method(ops.rpow)
A:pandas.core.arrays.base.cls.__mod__->cls._create_arithmetic_method(operator.mod)
A:pandas.core.arrays.base.cls.__rmod__->cls._create_arithmetic_method(ops.rmod)
A:pandas.core.arrays.base.cls.__floordiv__->cls._create_arithmetic_method(operator.floordiv)
A:pandas.core.arrays.base.cls.__rfloordiv__->cls._create_arithmetic_method(ops.rfloordiv)
A:pandas.core.arrays.base.cls.__truediv__->cls._create_arithmetic_method(operator.truediv)
A:pandas.core.arrays.base.cls.__rtruediv__->cls._create_arithmetic_method(ops.rtruediv)
A:pandas.core.arrays.base.cls.__divmod__->cls._create_arithmetic_method(divmod)
A:pandas.core.arrays.base.cls.__rdivmod__->cls._create_arithmetic_method(ops.rdivmod)
A:pandas.core.arrays.base.cls.__eq__->cls._create_comparison_method(operator.eq)
A:pandas.core.arrays.base.cls.__ne__->cls._create_comparison_method(operator.ne)
A:pandas.core.arrays.base.cls.__lt__->cls._create_comparison_method(operator.lt)
A:pandas.core.arrays.base.cls.__gt__->cls._create_comparison_method(operator.gt)
A:pandas.core.arrays.base.cls.__le__->cls._create_comparison_method(operator.le)
A:pandas.core.arrays.base.cls.__ge__->cls._create_comparison_method(operator.ge)
A:pandas.core.arrays.base.cls.__and__->cls._create_logical_method(operator.and_)
A:pandas.core.arrays.base.cls.__rand__->cls._create_logical_method(ops.rand_)
A:pandas.core.arrays.base.cls.__or__->cls._create_logical_method(operator.or_)
A:pandas.core.arrays.base.cls.__ror__->cls._create_logical_method(ops.ror_)
A:pandas.core.arrays.base.cls.__xor__->cls._create_logical_method(operator.xor)
A:pandas.core.arrays.base.cls.__rxor__->cls._create_logical_method(ops.rxor)
A:pandas.core.arrays.base.rvalues->convert_values(other)
A:pandas.core.arrays.base.res->numpy.asarray(arr)
A:pandas.core.arrays.base.(a, b)->zip(*res)
A:pandas.core.arrays.base.op_name->pandas.core.ops._get_op_name(op, True)
pandas.core.arrays.ExtensionArray
pandas.core.arrays.ExtensionArray.__getitem__(self,item)
pandas.core.arrays.ExtensionArray.__iter__(self)
pandas.core.arrays.ExtensionArray.__len__(self)->int
pandas.core.arrays.ExtensionArray.__repr__(self)->str
pandas.core.arrays.ExtensionArray.__setitem__(self,key:Union[int,np.ndarray],value:Any)->None
pandas.core.arrays.ExtensionArray._concat_same_type(cls,to_concat:Sequence[ABCExtensionArray])->ABCExtensionArray
pandas.core.arrays.ExtensionArray._formatter(self,boxed:bool=False)->Callable[[Any], Optional[str]]
pandas.core.arrays.ExtensionArray._from_factorized(cls,values,original)
pandas.core.arrays.ExtensionArray._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.core.arrays.ExtensionArray._from_sequence_of_strings(cls,strings,dtype=None,copy=False)
pandas.core.arrays.ExtensionArray._ndarray_values(self)->np.ndarray
pandas.core.arrays.ExtensionArray._reduce(self,name,skipna=True,**kwargs)
pandas.core.arrays.ExtensionArray._values_for_argsort(self)->np.ndarray
pandas.core.arrays.ExtensionArray._values_for_factorize(self)->Tuple[np.ndarray, Any]
pandas.core.arrays.ExtensionArray.argsort(self,ascending:bool=True,kind:str='quicksort',*args,**kwargs)->np.ndarray
pandas.core.arrays.ExtensionArray.astype(self,dtype,copy=True)
pandas.core.arrays.ExtensionArray.copy(self)->ABCExtensionArray
pandas.core.arrays.ExtensionArray.dropna(self)
pandas.core.arrays.ExtensionArray.dtype(self)->ExtensionDtype
pandas.core.arrays.ExtensionArray.factorize(self,na_sentinel:int=-1)->Tuple[np.ndarray, ABCExtensionArray]
pandas.core.arrays.ExtensionArray.fillna(self,value=None,method=None,limit=None)
pandas.core.arrays.ExtensionArray.isna(self)->ArrayLike
pandas.core.arrays.ExtensionArray.nbytes(self)->int
pandas.core.arrays.ExtensionArray.ndim(self)->int
pandas.core.arrays.ExtensionArray.ravel(self,order='C')->ABCExtensionArray
pandas.core.arrays.ExtensionArray.repeat(self,repeats,axis=None)
pandas.core.arrays.ExtensionArray.searchsorted(self,value,side='left',sorter=None)
pandas.core.arrays.ExtensionArray.shape(self)->Tuple[int, ...]
pandas.core.arrays.ExtensionArray.shift(self,periods:int=1,fill_value:object=None)->ABCExtensionArray
pandas.core.arrays.ExtensionArray.size(self)->int
pandas.core.arrays.ExtensionArray.take(self,indices:Sequence[int],allow_fill:bool=False,fill_value:Any=None)->ABCExtensionArray
pandas.core.arrays.ExtensionArray.to_numpy(self,dtype=None,copy=False,na_value=lib.no_default)
pandas.core.arrays.ExtensionArray.unique(self)
pandas.core.arrays.ExtensionArray.view(self,dtype=None)->Union[ABCExtensionArray, np.ndarray]
pandas.core.arrays.ExtensionOpsMixin
pandas.core.arrays.ExtensionOpsMixin._add_arithmetic_ops(cls)
pandas.core.arrays.ExtensionOpsMixin._add_comparison_ops(cls)
pandas.core.arrays.ExtensionOpsMixin._add_logical_ops(cls)
pandas.core.arrays.ExtensionScalarOpsMixin(ExtensionOpsMixin)
pandas.core.arrays.ExtensionScalarOpsMixin._create_arithmetic_method(cls,op)
pandas.core.arrays.ExtensionScalarOpsMixin._create_comparison_method(cls,op)
pandas.core.arrays.ExtensionScalarOpsMixin._create_method(cls,op,coerce_to_dtype=True)
pandas.core.arrays.base.ExtensionArray
pandas.core.arrays.base.ExtensionArray.__getitem__(self,item)
pandas.core.arrays.base.ExtensionArray.__iter__(self)
pandas.core.arrays.base.ExtensionArray.__len__(self)->int
pandas.core.arrays.base.ExtensionArray.__repr__(self)->str
pandas.core.arrays.base.ExtensionArray.__setitem__(self,key:Union[int,np.ndarray],value:Any)->None
pandas.core.arrays.base.ExtensionArray._concat_same_type(cls,to_concat:Sequence[ABCExtensionArray])->ABCExtensionArray
pandas.core.arrays.base.ExtensionArray._formatter(self,boxed:bool=False)->Callable[[Any], Optional[str]]
pandas.core.arrays.base.ExtensionArray._from_factorized(cls,values,original)
pandas.core.arrays.base.ExtensionArray._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.core.arrays.base.ExtensionArray._from_sequence_of_strings(cls,strings,dtype=None,copy=False)
pandas.core.arrays.base.ExtensionArray._ndarray_values(self)->np.ndarray
pandas.core.arrays.base.ExtensionArray._reduce(self,name,skipna=True,**kwargs)
pandas.core.arrays.base.ExtensionArray._values_for_argsort(self)->np.ndarray
pandas.core.arrays.base.ExtensionArray._values_for_factorize(self)->Tuple[np.ndarray, Any]
pandas.core.arrays.base.ExtensionArray.argsort(self,ascending:bool=True,kind:str='quicksort',*args,**kwargs)->np.ndarray
pandas.core.arrays.base.ExtensionArray.astype(self,dtype,copy=True)
pandas.core.arrays.base.ExtensionArray.copy(self)->ABCExtensionArray
pandas.core.arrays.base.ExtensionArray.dropna(self)
pandas.core.arrays.base.ExtensionArray.dtype(self)->ExtensionDtype
pandas.core.arrays.base.ExtensionArray.factorize(self,na_sentinel:int=-1)->Tuple[np.ndarray, ABCExtensionArray]
pandas.core.arrays.base.ExtensionArray.fillna(self,value=None,method=None,limit=None)
pandas.core.arrays.base.ExtensionArray.isna(self)->ArrayLike
pandas.core.arrays.base.ExtensionArray.nbytes(self)->int
pandas.core.arrays.base.ExtensionArray.ndim(self)->int
pandas.core.arrays.base.ExtensionArray.ravel(self,order='C')->ABCExtensionArray
pandas.core.arrays.base.ExtensionArray.repeat(self,repeats,axis=None)
pandas.core.arrays.base.ExtensionArray.searchsorted(self,value,side='left',sorter=None)
pandas.core.arrays.base.ExtensionArray.shape(self)->Tuple[int, ...]
pandas.core.arrays.base.ExtensionArray.shift(self,periods:int=1,fill_value:object=None)->ABCExtensionArray
pandas.core.arrays.base.ExtensionArray.size(self)->int
pandas.core.arrays.base.ExtensionArray.take(self,indices:Sequence[int],allow_fill:bool=False,fill_value:Any=None)->ABCExtensionArray
pandas.core.arrays.base.ExtensionArray.to_numpy(self,dtype=None,copy=False,na_value=lib.no_default)
pandas.core.arrays.base.ExtensionArray.unique(self)
pandas.core.arrays.base.ExtensionArray.view(self,dtype=None)->Union[ABCExtensionArray, np.ndarray]
pandas.core.arrays.base.ExtensionOpsMixin
pandas.core.arrays.base.ExtensionOpsMixin._add_arithmetic_ops(cls)
pandas.core.arrays.base.ExtensionOpsMixin._add_comparison_ops(cls)
pandas.core.arrays.base.ExtensionOpsMixin._add_logical_ops(cls)
pandas.core.arrays.base.ExtensionScalarOpsMixin(ExtensionOpsMixin)
pandas.core.arrays.base.ExtensionScalarOpsMixin._create_arithmetic_method(cls,op)
pandas.core.arrays.base.ExtensionScalarOpsMixin._create_comparison_method(cls,op)
pandas.core.arrays.base.ExtensionScalarOpsMixin._create_method(cls,op,coerce_to_dtype=True)
pandas.core.arrays.base.try_cast_to_ea(cls_or_instance,obj,dtype=None)
pandas.core.arrays.try_cast_to_ea(cls_or_instance,obj,dtype=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/arrays/timedeltas.py----------------------------------------
A:pandas.core.arrays.timedeltas.result->array_to_timedelta64(values, unit=unit, errors=errors)
A:pandas.core.arrays.timedeltas.inferred_freq->getattr(values, '_freq', None)
A:pandas.core.arrays.timedeltas.freq->to_offset(freq)
A:pandas.core.arrays.timedeltas.(freq, _)->pandas.core.arrays.datetimelike.validate_inferred_freq(freq, values.freq, False)
A:pandas.core.arrays.timedeltas.values->numpy.array(data, dtype=np.object_, copy=False)
A:pandas.core.arrays.timedeltas.dtype->pandas_dtype(dtype)
A:pandas.core.arrays.timedeltas.result._data->numpy.array(data, dtype=np.object_, copy=False).view(_TD_DTYPE)
A:pandas.core.arrays.timedeltas.result._freq->to_offset(result.inferred_freq)
A:pandas.core.arrays.timedeltas.(freq, freq_infer)->pandas.core.arrays.datetimelike.validate_inferred_freq(freq, inferred_freq, freq_infer)
A:pandas.core.arrays.timedeltas.(data, inferred_freq)->sequence_to_td64ns(data, copy=copy, unit=unit)
A:pandas.core.arrays.timedeltas.periods->pandas.core.arrays.datetimelike.validate_periods(periods)
A:pandas.core.arrays.timedeltas.start->Timedelta(start)
A:pandas.core.arrays.timedeltas.end->Timedelta(end)
A:pandas.core.arrays.timedeltas.(left_closed, right_closed)->pandas.core.arrays.datetimelike.validate_endpoints(closed)
A:pandas.core.arrays.timedeltas.index->numpy.linspace(start.value, end.value, periods).astype('i8')
A:pandas.core.arrays.timedeltas.formatter->_get_format_timedelta64(self._data, na_rep)
A:pandas.core.arrays.timedeltas.new_values->super()._add_delta(delta)
A:pandas.core.arrays.timedeltas.other->Timedelta(other)
A:pandas.core.arrays.timedeltas.(result, _)->sequence_to_td64ns(result)
A:pandas.core.arrays.timedeltas.days->_field_accessor('days', 'days', 'Number of days for each element.')
A:pandas.core.arrays.timedeltas.seconds->_field_accessor('seconds', 'seconds', 'Number of seconds (>= 0 and less than 1 day) for each element.')
A:pandas.core.arrays.timedeltas.microseconds->_field_accessor('microseconds', 'microseconds', 'Number of microseconds (>= 0 and less than 1 second) for each element.')
A:pandas.core.arrays.timedeltas.nanoseconds->_field_accessor('nanoseconds', 'nanoseconds', 'Number of nanoseconds (>= 0 and less than 1 microsecond) for each element.')
A:pandas.core.arrays.timedeltas.unit->parse_timedelta_unit(unit)
A:pandas.core.arrays.timedeltas.data->numpy.arange(b, e, stride, dtype=np.int64)
A:pandas.core.arrays.timedeltas.(data, copy_made)->ints_to_td64ns(data, unit=unit)
A:pandas.core.arrays.timedeltas.mask->numpy.isnan(data)
A:pandas.core.arrays.timedeltas.(m, p)->precision_from_unit(unit)
A:pandas.core.arrays.timedeltas.base->numpy.arange(b, e, stride, dtype=np.int64).astype(np.int64)
A:pandas.core.arrays.timedeltas.frac->numpy.round(frac, p)
pandas.core.arrays.TimedeltaArray(self,values,dtype=_TD_DTYPE,freq=None,copy=False)
pandas.core.arrays.TimedeltaArray.__abs__(self)
pandas.core.arrays.TimedeltaArray.__divmod__(self,other)
pandas.core.arrays.TimedeltaArray.__floordiv__(self,other)
pandas.core.arrays.TimedeltaArray.__mod__(self,other)
pandas.core.arrays.TimedeltaArray.__mul__(self,other)
pandas.core.arrays.TimedeltaArray.__neg__(self)
pandas.core.arrays.TimedeltaArray.__pos__(self)
pandas.core.arrays.TimedeltaArray.__rdivmod__(self,other)
pandas.core.arrays.TimedeltaArray.__rfloordiv__(self,other)
pandas.core.arrays.TimedeltaArray.__rmod__(self,other)
pandas.core.arrays.TimedeltaArray.__rtruediv__(self,other)
pandas.core.arrays.TimedeltaArray.__truediv__(self,other)
pandas.core.arrays.TimedeltaArray._add_delta(self,delta)
pandas.core.arrays.TimedeltaArray._add_dt_arraylike(self,other)
pandas.core.arrays.TimedeltaArray._add_dtlike_scalar(self,other)
pandas.core.arrays.TimedeltaArray._add_offset(self,other)
pandas.core.arrays.TimedeltaArray._addsub_object_array(self,other,op)
pandas.core.arrays.TimedeltaArray._box_func(self)
pandas.core.arrays.TimedeltaArray._check_compatible_with(self,other,setitem:bool=False)
pandas.core.arrays.TimedeltaArray._format_native_types(self,na_rep='NaT',date_format=None,**kwargs)
pandas.core.arrays.TimedeltaArray._formatter(self,boxed=False)
pandas.core.arrays.TimedeltaArray._from_sequence(cls,data,dtype=_TD_DTYPE,copy=False,freq=None,unit=None)
pandas.core.arrays.TimedeltaArray._generate_range(cls,start,end,periods,freq,closed=None)
pandas.core.arrays.TimedeltaArray._maybe_clear_freq(self)
pandas.core.arrays.TimedeltaArray._scalar_from_string(self,value)
pandas.core.arrays.TimedeltaArray._simple_new(cls,values,freq=None,dtype=_TD_DTYPE)
pandas.core.arrays.TimedeltaArray._unbox_scalar(self,value)
pandas.core.arrays.TimedeltaArray.astype(self,dtype,copy=True)
pandas.core.arrays.TimedeltaArray.components(self)
pandas.core.arrays.TimedeltaArray.dtype(self)
pandas.core.arrays.TimedeltaArray.median(self,axis=None,out=None,overwrite_input:bool=False,keepdims:bool=False,skipna:bool=True)
pandas.core.arrays.TimedeltaArray.std(self,axis=None,dtype=None,out=None,ddof:int=1,keepdims:bool=False,skipna:bool=True)
pandas.core.arrays.TimedeltaArray.sum(self,axis=None,dtype=None,out=None,keepdims:bool=False,initial=None,skipna:bool=True,min_count:int=0)
pandas.core.arrays.TimedeltaArray.to_pytimedelta(self)
pandas.core.arrays.TimedeltaArray.total_seconds(self)
pandas.core.arrays.timedeltas.TimedeltaArray(self,values,dtype=_TD_DTYPE,freq=None,copy=False)
pandas.core.arrays.timedeltas.TimedeltaArray.__abs__(self)
pandas.core.arrays.timedeltas.TimedeltaArray.__divmod__(self,other)
pandas.core.arrays.timedeltas.TimedeltaArray.__floordiv__(self,other)
pandas.core.arrays.timedeltas.TimedeltaArray.__init__(self,values,dtype=_TD_DTYPE,freq=None,copy=False)
pandas.core.arrays.timedeltas.TimedeltaArray.__mod__(self,other)
pandas.core.arrays.timedeltas.TimedeltaArray.__mul__(self,other)
pandas.core.arrays.timedeltas.TimedeltaArray.__neg__(self)
pandas.core.arrays.timedeltas.TimedeltaArray.__pos__(self)
pandas.core.arrays.timedeltas.TimedeltaArray.__rdivmod__(self,other)
pandas.core.arrays.timedeltas.TimedeltaArray.__rfloordiv__(self,other)
pandas.core.arrays.timedeltas.TimedeltaArray.__rmod__(self,other)
pandas.core.arrays.timedeltas.TimedeltaArray.__rtruediv__(self,other)
pandas.core.arrays.timedeltas.TimedeltaArray.__truediv__(self,other)
pandas.core.arrays.timedeltas.TimedeltaArray._add_datetime_arraylike(self,other)
pandas.core.arrays.timedeltas.TimedeltaArray._add_datetimelike_scalar(self,other)
pandas.core.arrays.timedeltas.TimedeltaArray._add_delta(self,delta)
pandas.core.arrays.timedeltas.TimedeltaArray._add_offset(self,other)
pandas.core.arrays.timedeltas.TimedeltaArray._addsub_object_array(self,other,op)
pandas.core.arrays.timedeltas.TimedeltaArray._box_func(self)
pandas.core.arrays.timedeltas.TimedeltaArray._check_compatible_with(self,other,setitem:bool=False)
pandas.core.arrays.timedeltas.TimedeltaArray._format_native_types(self,na_rep='NaT',date_format=None,**kwargs)
pandas.core.arrays.timedeltas.TimedeltaArray._formatter(self,boxed=False)
pandas.core.arrays.timedeltas.TimedeltaArray._from_sequence(cls,data,dtype=_TD_DTYPE,copy=False,freq=None,unit=None)
pandas.core.arrays.timedeltas.TimedeltaArray._generate_range(cls,start,end,periods,freq,closed=None)
pandas.core.arrays.timedeltas.TimedeltaArray._maybe_clear_freq(self)
pandas.core.arrays.timedeltas.TimedeltaArray._scalar_from_string(self,value)
pandas.core.arrays.timedeltas.TimedeltaArray._simple_new(cls,values,freq=None,dtype=_TD_DTYPE)
pandas.core.arrays.timedeltas.TimedeltaArray._unbox_scalar(self,value)
pandas.core.arrays.timedeltas.TimedeltaArray.astype(self,dtype,copy=True)
pandas.core.arrays.timedeltas.TimedeltaArray.components(self)
pandas.core.arrays.timedeltas.TimedeltaArray.dtype(self)
pandas.core.arrays.timedeltas.TimedeltaArray.median(self,axis=None,out=None,overwrite_input:bool=False,keepdims:bool=False,skipna:bool=True)
pandas.core.arrays.timedeltas.TimedeltaArray.std(self,axis=None,dtype=None,out=None,ddof:int=1,keepdims:bool=False,skipna:bool=True)
pandas.core.arrays.timedeltas.TimedeltaArray.sum(self,axis=None,dtype=None,out=None,keepdims:bool=False,initial=None,skipna:bool=True,min_count:int=0)
pandas.core.arrays.timedeltas.TimedeltaArray.to_pytimedelta(self)
pandas.core.arrays.timedeltas.TimedeltaArray.total_seconds(self)
pandas.core.arrays.timedeltas._field_accessor(name,alias,docstring=None)
pandas.core.arrays.timedeltas._generate_regular_range(start,end,periods,offset)
pandas.core.arrays.timedeltas._is_convertible_to_td(key)
pandas.core.arrays.timedeltas._validate_td64_dtype(dtype)
pandas.core.arrays.timedeltas.ints_to_td64ns(data,unit='ns')
pandas.core.arrays.timedeltas.objects_to_td64ns(data,unit='ns',errors='raise')
pandas.core.arrays.timedeltas.sequence_to_td64ns(data,copy=False,unit='ns',errors='raise')


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/arrays/integer.py----------------------------------------
A:pandas.core.arrays.integer.pyarrow_type->pyarrow.from_numpy_dtype(self.type)
A:pandas.core.arrays.integer.array->array.cast(pyarrow_type).cast(pyarrow_type)
A:pandas.core.arrays.integer.(data, mask)->pyarrow_array_to_numpy_and_mask(arr, dtype=self.type)
A:pandas.core.arrays.integer.int_arr->IntegerArray(data.copy(), ~mask, copy=False)
A:pandas.core.arrays.integer.(values, mask)->coerce_to_array(values, dtype=dtype, copy=copy)
A:pandas.core.arrays.integer.casted->values.copy().astype(dtype, copy=copy)
A:pandas.core.arrays.integer.dtype->pandas_dtype(dtype)
A:pandas.core.arrays.integer.values->values.copy().copy()
A:pandas.core.arrays.integer.mask->numpy.where((self._data == 0) & ~self._mask, False, mask)
A:pandas.core.arrays.integer.inferred_type->pandas._libs.lib.infer_dtype(values, skipna=True)
A:pandas.core.arrays.integer.scalars->to_numeric(strings, errors='raise')
A:pandas.core.arrays.integer.out->dict(na_value=np.nan).get('out', ())
A:pandas.core.arrays.integer.result->op(self._data, other)
A:pandas.core.arrays.integer.m->numpy.where((self._data == 0) & ~self._mask, False, mask).copy()
A:pandas.core.arrays.integer._is_scalar->is_scalar(value)
A:pandas.core.arrays.integer.(value, mask)->coerce_to_array(value, dtype=self.dtype)
A:pandas.core.arrays.integer.key->check_array_indexer(self, key)
A:pandas.core.arrays.integer.kwargs->dict(na_value=np.nan)
A:pandas.core.arrays.integer.data->self.to_numpy('float64', na_value=np.nan)
A:pandas.core.arrays.integer.other->numpy.asarray(other)
A:pandas.core.arrays.integer.method->getattr(self._data, f'__{op_name}__')
A:pandas.core.arrays.integer.op->getattr(nanops, 'nan' + name)
A:pandas.core.arrays.integer.int_result->int(result)
A:pandas.core.arrays.integer.Int8Dtype->register_extension_dtype(type('Int8Dtype', (_IntegerDtype,), {'type': np.int8, 'name': 'Int8', '__doc__': _dtype_docstring.format(dtype='int8')}))
A:pandas.core.arrays.integer.Int16Dtype->register_extension_dtype(type('Int16Dtype', (_IntegerDtype,), {'type': np.int16, 'name': 'Int16', '__doc__': _dtype_docstring.format(dtype='int16')}))
A:pandas.core.arrays.integer.Int32Dtype->register_extension_dtype(type('Int32Dtype', (_IntegerDtype,), {'type': np.int32, 'name': 'Int32', '__doc__': _dtype_docstring.format(dtype='int32')}))
A:pandas.core.arrays.integer.Int64Dtype->register_extension_dtype(type('Int64Dtype', (_IntegerDtype,), {'type': np.int64, 'name': 'Int64', '__doc__': _dtype_docstring.format(dtype='int64')}))
A:pandas.core.arrays.integer.UInt8Dtype->register_extension_dtype(type('UInt8Dtype', (_IntegerDtype,), {'type': np.uint8, 'name': 'UInt8', '__doc__': _dtype_docstring.format(dtype='uint8')}))
A:pandas.core.arrays.integer.UInt16Dtype->register_extension_dtype(type('UInt16Dtype', (_IntegerDtype,), {'type': np.uint16, 'name': 'UInt16', '__doc__': _dtype_docstring.format(dtype='uint16')}))
A:pandas.core.arrays.integer.UInt32Dtype->register_extension_dtype(type('UInt32Dtype', (_IntegerDtype,), {'type': np.uint32, 'name': 'UInt32', '__doc__': _dtype_docstring.format(dtype='uint32')}))
A:pandas.core.arrays.integer.UInt64Dtype->register_extension_dtype(type('UInt64Dtype', (_IntegerDtype,), {'type': np.uint64, 'name': 'UInt64', '__doc__': _dtype_docstring.format(dtype='uint64')}))
pandas.core.arrays.IntegerArray(self,values,mask,copy=False)
pandas.core.arrays.IntegerArray.__array_ufunc__(self,ufunc,method,*inputs,**kwargs)
pandas.core.arrays.IntegerArray.__setitem__(self,key,value)
pandas.core.arrays.IntegerArray._create_arithmetic_method(cls,op)
pandas.core.arrays.IntegerArray._create_comparison_method(cls,op)
pandas.core.arrays.IntegerArray._from_factorized(cls,values,original)
pandas.core.arrays.IntegerArray._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.core.arrays.IntegerArray._from_sequence_of_strings(cls,strings,dtype=None,copy=False)
pandas.core.arrays.IntegerArray._maybe_mask_result(self,result,mask,other,op_name)
pandas.core.arrays.IntegerArray._ndarray_values(self)->np.ndarray
pandas.core.arrays.IntegerArray._reduce(self,name,skipna=True,**kwargs)
pandas.core.arrays.IntegerArray._values_for_argsort(self)->np.ndarray
pandas.core.arrays.IntegerArray._values_for_factorize(self)->Tuple[np.ndarray, Any]
pandas.core.arrays.IntegerArray.astype(self,dtype,copy=True)
pandas.core.arrays.IntegerArray.dtype(self)
pandas.core.arrays.integer.IntegerArray(self,values,mask,copy=False)
pandas.core.arrays.integer.IntegerArray.__array_ufunc__(self,ufunc,method,*inputs,**kwargs)
pandas.core.arrays.integer.IntegerArray.__init__(self,values,mask,copy=False)
pandas.core.arrays.integer.IntegerArray.__setitem__(self,key,value)
pandas.core.arrays.integer.IntegerArray._create_arithmetic_method(cls,op)
pandas.core.arrays.integer.IntegerArray._create_comparison_method(cls,op)
pandas.core.arrays.integer.IntegerArray._from_factorized(cls,values,original)
pandas.core.arrays.integer.IntegerArray._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.core.arrays.integer.IntegerArray._from_sequence_of_strings(cls,strings,dtype=None,copy=False)
pandas.core.arrays.integer.IntegerArray._maybe_mask_result(self,result,mask,other,op_name)
pandas.core.arrays.integer.IntegerArray._ndarray_values(self)->np.ndarray
pandas.core.arrays.integer.IntegerArray._reduce(self,name,skipna=True,**kwargs)
pandas.core.arrays.integer.IntegerArray._values_for_argsort(self)->np.ndarray
pandas.core.arrays.integer.IntegerArray._values_for_factorize(self)->Tuple[np.ndarray, Any]
pandas.core.arrays.integer.IntegerArray.astype(self,dtype,copy=True)
pandas.core.arrays.integer.IntegerArray.dtype(self)
pandas.core.arrays.integer._IntegerDtype(ExtensionDtype)
pandas.core.arrays.integer._IntegerDtype.__from_arrow__(self,array)
pandas.core.arrays.integer._IntegerDtype.__repr__(self)->str
pandas.core.arrays.integer._IntegerDtype._is_numeric(self)
pandas.core.arrays.integer._IntegerDtype.construct_array_type(cls)
pandas.core.arrays.integer._IntegerDtype.is_signed_integer(self)
pandas.core.arrays.integer._IntegerDtype.is_unsigned_integer(self)
pandas.core.arrays.integer._IntegerDtype.itemsize(self)
pandas.core.arrays.integer._IntegerDtype.kind(self)
pandas.core.arrays.integer._IntegerDtype.numpy_dtype(self)
pandas.core.arrays.integer.coerce_to_array(values,dtype,mask=None,copy=False)
pandas.core.arrays.integer.integer_array(values,dtype=None,copy=False)
pandas.core.arrays.integer.safe_cast(values,dtype,copy)
pandas.core.arrays.integer_array(values,dtype=None,copy=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/arrays/numpy_.py----------------------------------------
A:pandas.core.arrays.numpy_.dtype->numpy.dtype(dtype)
A:pandas.core.arrays.numpy_.values->values.copy().copy()
A:pandas.core.arrays.numpy_.self._dtype->PandasDtype(values.dtype)
A:pandas.core.arrays.numpy_.result->op(self._ndarray, other)
A:pandas.core.arrays.numpy_.out->kwargs.get('out', ())
A:pandas.core.arrays.numpy_.inputs->tuple((x._ndarray if isinstance(x, PandasArray) else x for x in inputs))
A:pandas.core.arrays.numpy_.kwargs['out']->tuple((x._ndarray if isinstance(x, PandasArray) else x for x in out))
A:pandas.core.arrays.numpy_.item->check_array_indexer(self, item)
A:pandas.core.arrays.numpy_.value->numpy.asarray(value, dtype=self._ndarray.dtype)
A:pandas.core.arrays.numpy_.key->check_array_indexer(self, key)
A:pandas.core.arrays.numpy_.scalar_value->pandas._libs.lib.is_scalar(value)
A:pandas.core.arrays.numpy_.(value, method)->validate_fillna_kwargs(value, method)
A:pandas.core.arrays.numpy_.mask->self.isna()
A:pandas.core.arrays.numpy_.new_values->self.copy()
A:pandas.core.arrays.numpy_.meth->getattr(self, name, None)
pandas.core.arrays.PandasArray(self,values:Union[np.ndarray,'PandasArray'],copy:bool=False)
pandas.core.arrays.PandasArray.__array__(self,dtype=None)->np.ndarray
pandas.core.arrays.PandasArray.__array_ufunc__(self,ufunc,method,*inputs,**kwargs)
pandas.core.arrays.PandasArray.__getitem__(self,item)
pandas.core.arrays.PandasArray.__invert__(self)
pandas.core.arrays.PandasArray.__len__(self)->int
pandas.core.arrays.PandasArray.__setitem__(self,key,value)
pandas.core.arrays.PandasArray._concat_same_type(cls,to_concat)
pandas.core.arrays.PandasArray._create_arithmetic_method(cls,op)
pandas.core.arrays.PandasArray._from_factorized(cls,values,original)
pandas.core.arrays.PandasArray._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.core.arrays.PandasArray._reduce(self,name,skipna=True,**kwargs)
pandas.core.arrays.PandasArray._values_for_argsort(self)
pandas.core.arrays.PandasArray._values_for_factorize(self)
pandas.core.arrays.PandasArray.all(self,axis=None,out=None,keepdims=False,skipna=True)
pandas.core.arrays.PandasArray.any(self,axis=None,out=None,keepdims=False,skipna=True)
pandas.core.arrays.PandasArray.copy(self)
pandas.core.arrays.PandasArray.dtype(self)
pandas.core.arrays.PandasArray.fillna(self,value=None,method=None,limit=None)
pandas.core.arrays.PandasArray.isna(self)
pandas.core.arrays.PandasArray.kurt(self,axis=None,dtype=None,out=None,keepdims=False,skipna=True)
pandas.core.arrays.PandasArray.max(self,axis=None,out=None,keepdims=False,skipna=True)
pandas.core.arrays.PandasArray.mean(self,axis=None,dtype=None,out=None,keepdims=False,skipna=True)
pandas.core.arrays.PandasArray.median(self,axis=None,out=None,overwrite_input=False,keepdims=False,skipna=True)
pandas.core.arrays.PandasArray.min(self,axis=None,out=None,keepdims=False,skipna=True)
pandas.core.arrays.PandasArray.nbytes(self)->int
pandas.core.arrays.PandasArray.prod(self,axis=None,dtype=None,out=None,keepdims=False,initial=None,skipna=True,min_count=0)
pandas.core.arrays.PandasArray.searchsorted(self,value,side='left',sorter=None)
pandas.core.arrays.PandasArray.sem(self,axis=None,dtype=None,out=None,ddof=1,keepdims=False,skipna=True)
pandas.core.arrays.PandasArray.skew(self,axis=None,dtype=None,out=None,keepdims=False,skipna=True)
pandas.core.arrays.PandasArray.std(self,axis=None,dtype=None,out=None,ddof=1,keepdims=False,skipna=True)
pandas.core.arrays.PandasArray.sum(self,axis=None,dtype=None,out=None,keepdims=False,initial=None,skipna=True,min_count=0)
pandas.core.arrays.PandasArray.take(self,indices,allow_fill=False,fill_value=None)
pandas.core.arrays.PandasArray.to_numpy(self,dtype=None,copy=False,na_value=lib.no_default)
pandas.core.arrays.PandasArray.unique(self)
pandas.core.arrays.PandasArray.var(self,axis=None,dtype=None,out=None,ddof=1,keepdims=False,skipna=True)
pandas.core.arrays.PandasDtype(self,dtype)
pandas.core.arrays.PandasDtype.__repr__(self)->str
pandas.core.arrays.PandasDtype._is_boolean(self)
pandas.core.arrays.PandasDtype._is_numeric(self)
pandas.core.arrays.PandasDtype.construct_array_type(cls)
pandas.core.arrays.PandasDtype.construct_from_string(cls,string)
pandas.core.arrays.PandasDtype.itemsize(self)
pandas.core.arrays.PandasDtype.kind(self)
pandas.core.arrays.PandasDtype.name(self)
pandas.core.arrays.PandasDtype.numpy_dtype(self)
pandas.core.arrays.PandasDtype.type(self)
pandas.core.arrays.numpy_.PandasArray(self,values:Union[np.ndarray,'PandasArray'],copy:bool=False)
pandas.core.arrays.numpy_.PandasArray.__array__(self,dtype=None)->np.ndarray
pandas.core.arrays.numpy_.PandasArray.__array_ufunc__(self,ufunc,method,*inputs,**kwargs)
pandas.core.arrays.numpy_.PandasArray.__getitem__(self,item)
pandas.core.arrays.numpy_.PandasArray.__init__(self,values:Union[np.ndarray,'PandasArray'],copy:bool=False)
pandas.core.arrays.numpy_.PandasArray.__invert__(self)
pandas.core.arrays.numpy_.PandasArray.__len__(self)->int
pandas.core.arrays.numpy_.PandasArray.__setitem__(self,key,value)
pandas.core.arrays.numpy_.PandasArray._concat_same_type(cls,to_concat)
pandas.core.arrays.numpy_.PandasArray._create_arithmetic_method(cls,op)
pandas.core.arrays.numpy_.PandasArray._from_factorized(cls,values,original)
pandas.core.arrays.numpy_.PandasArray._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.core.arrays.numpy_.PandasArray._reduce(self,name,skipna=True,**kwargs)
pandas.core.arrays.numpy_.PandasArray._values_for_argsort(self)
pandas.core.arrays.numpy_.PandasArray._values_for_factorize(self)
pandas.core.arrays.numpy_.PandasArray.all(self,axis=None,out=None,keepdims=False,skipna=True)
pandas.core.arrays.numpy_.PandasArray.any(self,axis=None,out=None,keepdims=False,skipna=True)
pandas.core.arrays.numpy_.PandasArray.copy(self)
pandas.core.arrays.numpy_.PandasArray.dtype(self)
pandas.core.arrays.numpy_.PandasArray.fillna(self,value=None,method=None,limit=None)
pandas.core.arrays.numpy_.PandasArray.isna(self)
pandas.core.arrays.numpy_.PandasArray.kurt(self,axis=None,dtype=None,out=None,keepdims=False,skipna=True)
pandas.core.arrays.numpy_.PandasArray.max(self,axis=None,out=None,keepdims=False,skipna=True)
pandas.core.arrays.numpy_.PandasArray.mean(self,axis=None,dtype=None,out=None,keepdims=False,skipna=True)
pandas.core.arrays.numpy_.PandasArray.median(self,axis=None,out=None,overwrite_input=False,keepdims=False,skipna=True)
pandas.core.arrays.numpy_.PandasArray.min(self,axis=None,out=None,keepdims=False,skipna=True)
pandas.core.arrays.numpy_.PandasArray.nbytes(self)->int
pandas.core.arrays.numpy_.PandasArray.prod(self,axis=None,dtype=None,out=None,keepdims=False,initial=None,skipna=True,min_count=0)
pandas.core.arrays.numpy_.PandasArray.searchsorted(self,value,side='left',sorter=None)
pandas.core.arrays.numpy_.PandasArray.sem(self,axis=None,dtype=None,out=None,ddof=1,keepdims=False,skipna=True)
pandas.core.arrays.numpy_.PandasArray.skew(self,axis=None,dtype=None,out=None,keepdims=False,skipna=True)
pandas.core.arrays.numpy_.PandasArray.std(self,axis=None,dtype=None,out=None,ddof=1,keepdims=False,skipna=True)
pandas.core.arrays.numpy_.PandasArray.sum(self,axis=None,dtype=None,out=None,keepdims=False,initial=None,skipna=True,min_count=0)
pandas.core.arrays.numpy_.PandasArray.take(self,indices,allow_fill=False,fill_value=None)
pandas.core.arrays.numpy_.PandasArray.to_numpy(self,dtype=None,copy=False,na_value=lib.no_default)
pandas.core.arrays.numpy_.PandasArray.unique(self)
pandas.core.arrays.numpy_.PandasArray.var(self,axis=None,dtype=None,out=None,ddof=1,keepdims=False,skipna=True)
pandas.core.arrays.numpy_.PandasDtype(self,dtype)
pandas.core.arrays.numpy_.PandasDtype.__init__(self,dtype)
pandas.core.arrays.numpy_.PandasDtype.__repr__(self)->str
pandas.core.arrays.numpy_.PandasDtype._is_boolean(self)
pandas.core.arrays.numpy_.PandasDtype._is_numeric(self)
pandas.core.arrays.numpy_.PandasDtype.construct_array_type(cls)
pandas.core.arrays.numpy_.PandasDtype.construct_from_string(cls,string)
pandas.core.arrays.numpy_.PandasDtype.itemsize(self)
pandas.core.arrays.numpy_.PandasDtype.kind(self)
pandas.core.arrays.numpy_.PandasDtype.name(self)
pandas.core.arrays.numpy_.PandasDtype.numpy_dtype(self)
pandas.core.arrays.numpy_.PandasDtype.type(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/arrays/sparse/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/arrays/sparse/dtype.py----------------------------------------
A:pandas.core.arrays.sparse.dtype.dtype->cls(dtype, fill_value=fill_value)
A:pandas.core.arrays.sparse.dtype.fill_value->astype_nansafe(np.array(self.fill_value), dtype).item()
A:pandas.core.arrays.sparse.dtype.other->self.construct_from_string(other)
A:pandas.core.arrays.sparse.dtype.(sub_type, has_fill_value)->type(self)._parse_subtype(string)
A:pandas.core.arrays.sparse.dtype.result->SparseDtype(sub_type)
A:pandas.core.arrays.sparse.dtype.xpr->re.compile('Sparse\\[(?P<subtype>[^,]*)(, )?(?P<fill_value>.*?)?\\]$')
A:pandas.core.arrays.sparse.dtype.m->re.compile('Sparse\\[(?P<subtype>[^,]*)(, )?(?P<fill_value>.*?)?\\]$').match(dtype)
A:pandas.core.arrays.sparse.dtype.has_fill_value->bool(m.groupdict()['fill_value'])
A:pandas.core.arrays.sparse.dtype.(sub_type, _)->type(self)._parse_subtype(dtype)
A:pandas.core.arrays.sparse.dtype.cls->type(self)
pandas.SparseDtype(self,dtype:Dtype=np.float64,fill_value:Any=None)
pandas.SparseDtype.__eq__(self,other:Any)->bool
pandas.SparseDtype.__hash__(self)
pandas.SparseDtype.__repr__(self)->str
pandas.SparseDtype._is_boolean(self)
pandas.SparseDtype._is_na_fill_value(self)
pandas.SparseDtype._is_numeric(self)
pandas.SparseDtype._parse_subtype(dtype:str)->Tuple[str, bool]
pandas.SparseDtype._subtype_with_str(self)
pandas.SparseDtype.construct_array_type(cls)
pandas.SparseDtype.construct_from_string(cls,string)
pandas.SparseDtype.fill_value(self)
pandas.SparseDtype.is_dtype(cls,dtype)
pandas.SparseDtype.kind(self)
pandas.SparseDtype.name(self)
pandas.SparseDtype.subtype(self)
pandas.SparseDtype.type(self)
pandas.SparseDtype.update_dtype(self,dtype)
pandas.core.arrays.sparse.dtype.SparseDtype(self,dtype:Dtype=np.float64,fill_value:Any=None)
pandas.core.arrays.sparse.dtype.SparseDtype.__eq__(self,other:Any)->bool
pandas.core.arrays.sparse.dtype.SparseDtype.__hash__(self)
pandas.core.arrays.sparse.dtype.SparseDtype.__init__(self,dtype:Dtype=np.float64,fill_value:Any=None)
pandas.core.arrays.sparse.dtype.SparseDtype.__repr__(self)->str
pandas.core.arrays.sparse.dtype.SparseDtype._is_boolean(self)
pandas.core.arrays.sparse.dtype.SparseDtype._is_na_fill_value(self)
pandas.core.arrays.sparse.dtype.SparseDtype._is_numeric(self)
pandas.core.arrays.sparse.dtype.SparseDtype._parse_subtype(dtype:str)->Tuple[str, bool]
pandas.core.arrays.sparse.dtype.SparseDtype._subtype_with_str(self)
pandas.core.arrays.sparse.dtype.SparseDtype.construct_array_type(cls)
pandas.core.arrays.sparse.dtype.SparseDtype.construct_from_string(cls,string)
pandas.core.arrays.sparse.dtype.SparseDtype.fill_value(self)
pandas.core.arrays.sparse.dtype.SparseDtype.is_dtype(cls,dtype)
pandas.core.arrays.sparse.dtype.SparseDtype.kind(self)
pandas.core.arrays.sparse.dtype.SparseDtype.name(self)
pandas.core.arrays.sparse.dtype.SparseDtype.subtype(self)
pandas.core.arrays.sparse.dtype.SparseDtype.type(self)
pandas.core.arrays.sparse.dtype.SparseDtype.update_dtype(self,dtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/arrays/sparse/array.py----------------------------------------
A:pandas.core.arrays.sparse.array._sparray_doc_kwargs->dict(klass='SparseArray')
A:pandas.core.arrays.sparse.array.subtype->numpy.result_type(fill_value, self.dtype.subtype)
A:pandas.core.arrays.sparse.array.ltype->SparseDtype(subtype, left.fill_value)
A:pandas.core.arrays.sparse.array.rtype->SparseDtype(subtype, right.fill_value)
A:pandas.core.arrays.sparse.array.left->left.astype(ltype).astype(ltype)
A:pandas.core.arrays.sparse.array.right->right.astype(rtype).astype(rtype)
A:pandas.core.arrays.sparse.array.result->op(self.sp_values, other)
A:pandas.core.arrays.sparse.array.fill->op(_get_fill(self), np.asarray(other))
A:pandas.core.arrays.sparse.array.left_sp_values->left.astype(ltype).astype(ltype).sp_values.view(np.uint8)
A:pandas.core.arrays.sparse.array.right_sp_values->right.astype(rtype).astype(rtype).sp_values.view(np.uint8)
A:pandas.core.arrays.sparse.array.sparse_op->getattr(splib, opname)
A:pandas.core.arrays.sparse.array.(result, index, fill)->sparse_op(left_sp_values, left.sp_index, left.fill_value, right_sp_values, right.sp_index, right.fill_value)
A:pandas.core.arrays.sparse.array.fill_value->na_value_for_dtype(arr.dtype)
A:pandas.core.arrays.sparse.array.dtype->getattr(other, 'dtype', None)
A:pandas.core.arrays.sparse.array.npoints->len(index)
A:pandas.core.arrays.sparse.array.data->numpy.concatenate(values)
A:pandas.core.arrays.sparse.array.sparse_values->numpy.array([])
A:pandas.core.arrays.sparse.array.(sparse_values, sparse_index, fill_value)->make_sparse(data, kind=kind, fill_value=fill_value, dtype=dtype)
A:pandas.core.arrays.sparse.array.self._dtype->SparseDtype(sparse_values.dtype, fill_value)
A:pandas.core.arrays.sparse.array.new->cls([])
A:pandas.core.arrays.sparse.array.(idx, _)->numpy.concatenate(values).nonzero()
A:pandas.core.arrays.sparse.array.loc->numpy.argsort(idx)
A:pandas.core.arrays.sparse.array.arr->arr.astype(object).astype(object)
A:pandas.core.arrays.sparse.array.zero->numpy.array(0, dtype=arr.dtype).item()
A:pandas.core.arrays.sparse.array.index->IntIndex(length, indices)
A:pandas.core.arrays.sparse.array.out->kwargs.get('out', ())
A:pandas.core.arrays.sparse.array.mask->pandas._libs.sparse.make_mask_object_ndarray(arr, fill_value)
A:pandas.core.arrays.sparse.array.filled->interpolate_2d(np.asarray(self), method=method, limit=limit)
A:pandas.core.arrays.sparse.array.new_values->numpy.where(isna(self.sp_values), value, self.sp_values)
A:pandas.core.arrays.sparse.array.new_dtype->SparseDtype(self.dtype.subtype, fill_value=value)
A:pandas.core.arrays.sparse.array.empty->self._from_sequence([fill_value] * min(abs(periods), len(self)), dtype=arr.dtype)
A:pandas.core.arrays.sparse.array.uniques->SparseArray(uniques, dtype=self.dtype)
A:pandas.core.arrays.sparse.array.fill_loc->self._first_fill_value_loc()
A:pandas.core.arrays.sparse.array.(codes, uniques)->pandas.core.algorithms.factorize(np.asarray(self), na_sentinel=na_sentinel)
A:pandas.core.arrays.sparse.array.(keys, counts)->pandas.core.algorithms._value_counts_arraylike(self.sp_values, dropna=dropna)
A:pandas.core.arrays.sparse.array.keys->Index(keys)
A:pandas.core.arrays.sparse.array.counts->numpy.insert(counts, 0, fcounts)
A:pandas.core.arrays.sparse.array.key->check_bool_indexer(self, key)
A:pandas.core.arrays.sparse.array.n->len(self)
A:pandas.core.arrays.sparse.array.sp_loc->self.sp_index.lookup(loc)
A:pandas.core.arrays.sparse.array.indices->pandas._libs.sparse.make_mask_object_ndarray(arr, fill_value).nonzero()[0].astype(np.int32)
A:pandas.core.arrays.sparse.array.taken->taken.astype(result_type).astype(result_type)
A:pandas.core.arrays.sparse.array.sp_indexer->self.sp_index.lookup_array(indices)
A:pandas.core.arrays.sparse.array.result_type->numpy.result_type(taken, type(self.fill_value))
A:pandas.core.arrays.sparse.array.(arr, sp_index, fill_value)->make_sparse(out, fill_value=self.fill_value)
A:pandas.core.arrays.sparse.array.v->numpy.asarray(v)
A:pandas.core.arrays.sparse.array.values->op(self.sp_values)
A:pandas.core.arrays.sparse.array.idx->arr.astype(object).astype(object).sp_index.to_block_index()
A:pandas.core.arrays.sparse.array.sp_index->BlockIndex(length, blocs, blengths)
A:pandas.core.arrays.sparse.array.blocs->numpy.concatenate(blocs)
A:pandas.core.arrays.sparse.array.blengths->numpy.concatenate(blengths)
A:pandas.core.arrays.sparse.array.sp_values->getattr(ufunc, method)(self.sp_values, **kwargs)
A:pandas.core.arrays.sparse.array.mapper->mapper.to_dict().to_dict()
A:pandas.core.arrays.sparse.array.method->getattr(self, name, None)
A:pandas.core.arrays.sparse.array.sp_sum->valid_vals.sum()
A:pandas.core.arrays.sparse.array.ct->len(valid_vals)
A:pandas.core.arrays.sparse.array.arrays->tuple((self._simple_new(sp_value, self.sp_index, SparseDtype(sp_value.dtype, fv)) for (sp_value, fv) in zip(sp_values, fill_value)))
A:pandas.core.arrays.sparse.array.other->SparseArray(other, fill_value=self.fill_value)
A:pandas.core.arrays.sparse.array.cls.__pos__->cls._create_unary_method(operator.pos)
A:pandas.core.arrays.sparse.array.cls.__neg__->cls._create_unary_method(operator.neg)
A:pandas.core.arrays.sparse.array.cls.__invert__->cls._create_unary_method(operator.invert)
A:pandas.core.arrays.sparse.array.cls.__and__->cls._create_comparison_method(operator.and_)
A:pandas.core.arrays.sparse.array.cls.__or__->cls._create_comparison_method(operator.or_)
A:pandas.core.arrays.sparse.array.cls.__xor__->cls._create_arithmetic_method(operator.xor)
A:pandas.core.arrays.sparse.array.pp_str->pandas.io.formats.printing.pprint_thing(self)
A:pandas.core.arrays.sparse.array.pp_fill->pandas.io.formats.printing.pprint_thing(self.fill_value)
A:pandas.core.arrays.sparse.array.pp_index->pandas.io.formats.printing.pprint_thing(self.sp_index)
A:pandas.core.arrays.sparse.array.length->len(arr)
A:pandas.core.arrays.sparse.array.sparsified_values->astype_nansafe(sparsified_values, dtype=dtype)
A:pandas.core.arrays.sparse.array.(locs, lens)->pandas._libs.sparse.get_blocks(indices)
pandas.core.arrays.SparseArray(self,data,sparse_index=None,index=None,fill_value=None,kind='integer',dtype=None,copy=False)
pandas.core.arrays.SparseArray.T(self)
pandas.core.arrays.SparseArray.__abs__(self)
pandas.core.arrays.SparseArray.__array__(self,dtype=None,copy=True)->np.ndarray
pandas.core.arrays.SparseArray.__array_ufunc__(self,ufunc,method,*inputs,**kwargs)
pandas.core.arrays.SparseArray.__getitem__(self,key)
pandas.core.arrays.SparseArray.__len__(self)->int
pandas.core.arrays.SparseArray.__repr__(self)->str
pandas.core.arrays.SparseArray.__setitem__(self,key,value)
pandas.core.arrays.SparseArray.__setstate__(self,state)
pandas.core.arrays.SparseArray._add_comparison_ops(cls)
pandas.core.arrays.SparseArray._add_unary_ops(cls)
pandas.core.arrays.SparseArray._concat_same_type(cls,to_concat)
pandas.core.arrays.SparseArray._create_arithmetic_method(cls,op)
pandas.core.arrays.SparseArray._create_comparison_method(cls,op)
pandas.core.arrays.SparseArray._create_unary_method(cls,op)->Callable[['SparseArray'], 'SparseArray']
pandas.core.arrays.SparseArray._fill_value_matches(self,fill_value)
pandas.core.arrays.SparseArray._first_fill_value_loc(self)
pandas.core.arrays.SparseArray._formatter(self,boxed=False)
pandas.core.arrays.SparseArray._from_factorized(cls,values,original)
pandas.core.arrays.SparseArray._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.core.arrays.SparseArray._get_val_at(self,loc)
pandas.core.arrays.SparseArray._null_fill_value(self)
pandas.core.arrays.SparseArray._reduce(self,name,skipna=True,**kwargs)
pandas.core.arrays.SparseArray._simple_new(cls,sparse_array:np.ndarray,sparse_index:SparseIndex,dtype:SparseDtype)->'SparseArray'
pandas.core.arrays.SparseArray._take_with_fill(self,indices,fill_value=None)
pandas.core.arrays.SparseArray._take_without_fill(self,indices)
pandas.core.arrays.SparseArray._valid_sp_values(self)
pandas.core.arrays.SparseArray._values_for_factorize(self)
pandas.core.arrays.SparseArray.all(self,axis=None,*args,**kwargs)
pandas.core.arrays.SparseArray.any(self,axis=0,*args,**kwargs)
pandas.core.arrays.SparseArray.astype(self,dtype=None,copy=True)
pandas.core.arrays.SparseArray.copy(self)
pandas.core.arrays.SparseArray.cumsum(self,axis=0,*args,**kwargs)
pandas.core.arrays.SparseArray.density(self)
pandas.core.arrays.SparseArray.dtype(self)
pandas.core.arrays.SparseArray.factorize(self,na_sentinel=-1)
pandas.core.arrays.SparseArray.fill_value(self)
pandas.core.arrays.SparseArray.fill_value(self,value)
pandas.core.arrays.SparseArray.fillna(self,value=None,method=None,limit=None)
pandas.core.arrays.SparseArray.from_spmatrix(cls,data)
pandas.core.arrays.SparseArray.isna(self)
pandas.core.arrays.SparseArray.kind(self)->str
pandas.core.arrays.SparseArray.map(self,mapper)
pandas.core.arrays.SparseArray.mean(self,axis=0,*args,**kwargs)
pandas.core.arrays.SparseArray.nbytes(self)->int
pandas.core.arrays.SparseArray.nonzero(self)
pandas.core.arrays.SparseArray.npoints(self)->int
pandas.core.arrays.SparseArray.searchsorted(self,v,side='left',sorter=None)
pandas.core.arrays.SparseArray.shift(self,periods=1,fill_value=None)
pandas.core.arrays.SparseArray.sp_index(self)
pandas.core.arrays.SparseArray.sp_values(self)
pandas.core.arrays.SparseArray.sum(self,axis=0,*args,**kwargs)
pandas.core.arrays.SparseArray.take(self,indices,allow_fill=False,fill_value=None)
pandas.core.arrays.SparseArray.to_dense(self)
pandas.core.arrays.SparseArray.transpose(self,*axes)
pandas.core.arrays.SparseArray.unique(self)
pandas.core.arrays.SparseArray.value_counts(self,dropna=True)
pandas.core.arrays.sparse._make_index(length,indices,kind)
pandas.core.arrays.sparse.array.SparseArray(self,data,sparse_index=None,index=None,fill_value=None,kind='integer',dtype=None,copy=False)
pandas.core.arrays.sparse.array.SparseArray.T(self)
pandas.core.arrays.sparse.array.SparseArray.__abs__(self)
pandas.core.arrays.sparse.array.SparseArray.__array__(self,dtype=None,copy=True)->np.ndarray
pandas.core.arrays.sparse.array.SparseArray.__array_ufunc__(self,ufunc,method,*inputs,**kwargs)
pandas.core.arrays.sparse.array.SparseArray.__getitem__(self,key)
pandas.core.arrays.sparse.array.SparseArray.__init__(self,data,sparse_index=None,index=None,fill_value=None,kind='integer',dtype=None,copy=False)
pandas.core.arrays.sparse.array.SparseArray.__len__(self)->int
pandas.core.arrays.sparse.array.SparseArray.__repr__(self)->str
pandas.core.arrays.sparse.array.SparseArray.__setitem__(self,key,value)
pandas.core.arrays.sparse.array.SparseArray.__setstate__(self,state)
pandas.core.arrays.sparse.array.SparseArray._add_comparison_ops(cls)
pandas.core.arrays.sparse.array.SparseArray._add_unary_ops(cls)
pandas.core.arrays.sparse.array.SparseArray._concat_same_type(cls,to_concat)
pandas.core.arrays.sparse.array.SparseArray._create_arithmetic_method(cls,op)
pandas.core.arrays.sparse.array.SparseArray._create_comparison_method(cls,op)
pandas.core.arrays.sparse.array.SparseArray._create_unary_method(cls,op)->Callable[['SparseArray'], 'SparseArray']
pandas.core.arrays.sparse.array.SparseArray._fill_value_matches(self,fill_value)
pandas.core.arrays.sparse.array.SparseArray._first_fill_value_loc(self)
pandas.core.arrays.sparse.array.SparseArray._formatter(self,boxed=False)
pandas.core.arrays.sparse.array.SparseArray._from_factorized(cls,values,original)
pandas.core.arrays.sparse.array.SparseArray._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.core.arrays.sparse.array.SparseArray._get_val_at(self,loc)
pandas.core.arrays.sparse.array.SparseArray._null_fill_value(self)
pandas.core.arrays.sparse.array.SparseArray._reduce(self,name,skipna=True,**kwargs)
pandas.core.arrays.sparse.array.SparseArray._simple_new(cls,sparse_array:np.ndarray,sparse_index:SparseIndex,dtype:SparseDtype)->'SparseArray'
pandas.core.arrays.sparse.array.SparseArray._take_with_fill(self,indices,fill_value=None)
pandas.core.arrays.sparse.array.SparseArray._take_without_fill(self,indices)
pandas.core.arrays.sparse.array.SparseArray._valid_sp_values(self)
pandas.core.arrays.sparse.array.SparseArray._values_for_factorize(self)
pandas.core.arrays.sparse.array.SparseArray.all(self,axis=None,*args,**kwargs)
pandas.core.arrays.sparse.array.SparseArray.any(self,axis=0,*args,**kwargs)
pandas.core.arrays.sparse.array.SparseArray.astype(self,dtype=None,copy=True)
pandas.core.arrays.sparse.array.SparseArray.copy(self)
pandas.core.arrays.sparse.array.SparseArray.cumsum(self,axis=0,*args,**kwargs)
pandas.core.arrays.sparse.array.SparseArray.density(self)
pandas.core.arrays.sparse.array.SparseArray.dtype(self)
pandas.core.arrays.sparse.array.SparseArray.factorize(self,na_sentinel=-1)
pandas.core.arrays.sparse.array.SparseArray.fill_value(self)
pandas.core.arrays.sparse.array.SparseArray.fill_value(self,value)
pandas.core.arrays.sparse.array.SparseArray.fillna(self,value=None,method=None,limit=None)
pandas.core.arrays.sparse.array.SparseArray.from_spmatrix(cls,data)
pandas.core.arrays.sparse.array.SparseArray.isna(self)
pandas.core.arrays.sparse.array.SparseArray.kind(self)->str
pandas.core.arrays.sparse.array.SparseArray.map(self,mapper)
pandas.core.arrays.sparse.array.SparseArray.mean(self,axis=0,*args,**kwargs)
pandas.core.arrays.sparse.array.SparseArray.nbytes(self)->int
pandas.core.arrays.sparse.array.SparseArray.nonzero(self)
pandas.core.arrays.sparse.array.SparseArray.npoints(self)->int
pandas.core.arrays.sparse.array.SparseArray.searchsorted(self,v,side='left',sorter=None)
pandas.core.arrays.sparse.array.SparseArray.shift(self,periods=1,fill_value=None)
pandas.core.arrays.sparse.array.SparseArray.sp_index(self)
pandas.core.arrays.sparse.array.SparseArray.sp_values(self)
pandas.core.arrays.sparse.array.SparseArray.sum(self,axis=0,*args,**kwargs)
pandas.core.arrays.sparse.array.SparseArray.take(self,indices,allow_fill=False,fill_value=None)
pandas.core.arrays.sparse.array.SparseArray.to_dense(self)
pandas.core.arrays.sparse.array.SparseArray.transpose(self,*axes)
pandas.core.arrays.sparse.array.SparseArray.unique(self)
pandas.core.arrays.sparse.array.SparseArray.value_counts(self,dropna=True)
pandas.core.arrays.sparse.array._get_fill(arr:ABCSparseArray)->np.ndarray
pandas.core.arrays.sparse.array._make_index(length,indices,kind)
pandas.core.arrays.sparse.array._sparse_array_op(left:ABCSparseArray,right:ABCSparseArray,op:Callable,name:str)->Any
pandas.core.arrays.sparse.array._wrap_result(name,data,sparse_index,fill_value,dtype=None)
pandas.core.arrays.sparse.array.make_sparse(arr,kind='block',fill_value=None,dtype=None,copy=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/arrays/sparse/scipy_sparse.py----------------------------------------
A:pandas.core.arrays.sparse.scipy_sparse.whole->set(whole)
A:pandas.core.arrays.sparse.scipy_sparse.nonnull_labels->ss.dropna()
A:pandas.core.arrays.sparse.scipy_sparse.labels->sorted(labels)
A:pandas.core.arrays.sparse.scipy_sparse.ilabels->list(zip(*[index._get_level_values(i) for i in subset]))
A:pandas.core.arrays.sparse.scipy_sparse.labels_to_i->_get_index_subset_to_coord_dict(ss.index, levels, sort_labels=sort_labels)
A:pandas.core.arrays.sparse.scipy_sparse.labels_to_i.index->Index((x[0] for x in labels_to_i.index))
A:pandas.core.arrays.sparse.scipy_sparse.i_coord->labels_to_i[values_ilabels].tolist()
A:pandas.core.arrays.sparse.scipy_sparse.i_labels->_get_index_subset_to_coord_dict(ss.index, levels, sort_labels=sort_labels).index.tolist()
A:pandas.core.arrays.sparse.scipy_sparse.(i_coord, i_labels)->get_indexers(row_levels)
A:pandas.core.arrays.sparse.scipy_sparse.(j_coord, j_labels)->get_indexers(column_levels)
A:pandas.core.arrays.sparse.scipy_sparse.(v, i, j, rows, columns)->_to_ijv(ss, row_levels=row_levels, column_levels=column_levels, sort_labels=sort_labels)
A:pandas.core.arrays.sparse.scipy_sparse.sparse_matrix->scipy.sparse.coo_matrix((v, (i, j)), shape=(len(rows), len(columns)))
A:pandas.core.arrays.sparse.scipy_sparse.s->s.reindex(ind).reindex(ind)
A:pandas.core.arrays.sparse.scipy_sparse.i->range(A.shape[0])
A:pandas.core.arrays.sparse.scipy_sparse.j->range(A.shape[1])
A:pandas.core.arrays.sparse.scipy_sparse.ind->pandas.core.indexes.api.MultiIndex.from_product([i, j])
pandas.core.arrays.sparse.scipy_sparse._check_is_partition(parts,whole)
pandas.core.arrays.sparse.scipy_sparse._coo_to_sparse_series(A,dense_index:bool=False)
pandas.core.arrays.sparse.scipy_sparse._sparse_series_to_coo(ss,row_levels=(0,),column_levels=(1,),sort_labels=False)
pandas.core.arrays.sparse.scipy_sparse._to_ijv(ss,row_levels=(0,),column_levels=(1,),sort_labels=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/arrays/sparse/accessor.py----------------------------------------
A:pandas.core.arrays.sparse.accessor.result->DataFrame(data, index=index)
A:pandas.core.arrays.sparse.accessor.(A, rows, columns)->_sparse_series_to_coo(self._parent, row_levels, column_levels, sort_labels=sort_labels)
A:pandas.core.arrays.sparse.accessor.data->dict(enumerate(sparrays))
A:pandas.core.arrays.sparse.accessor.(index, columns)->cls._prep_index(data, index, columns)
A:pandas.core.arrays.sparse.accessor.dtype->find_common_type(self._parent.dtypes)
A:pandas.core.arrays.sparse.accessor.cols->numpy.concatenate(cols)
A:pandas.core.arrays.sparse.accessor.rows->numpy.concatenate(rows)
A:pandas.core.arrays.sparse.accessor.datas->numpy.concatenate(datas)
A:pandas.core.arrays.sparse.accessor.index->pandas.core.indexes.base.default_index(N)
A:pandas.core.arrays.sparse.accessor.columns->pandas.core.indexes.base.default_index(K)
pandas.core.arrays.sparse.SparseAccessor(BaseAccessor,PandasDelegate)
pandas.core.arrays.sparse.SparseAccessor._delegate_method(self,name,*args,**kwargs)
pandas.core.arrays.sparse.SparseAccessor._delegate_property_get(self,name,*args,**kwargs)
pandas.core.arrays.sparse.SparseAccessor._validate(self,data)
pandas.core.arrays.sparse.SparseAccessor.from_coo(cls,A,dense_index=False)
pandas.core.arrays.sparse.SparseAccessor.to_coo(self,row_levels=(0,),column_levels=(1,),sort_labels=False)
pandas.core.arrays.sparse.SparseAccessor.to_dense(self)
pandas.core.arrays.sparse.SparseFrameAccessor(BaseAccessor,PandasDelegate)
pandas.core.arrays.sparse.SparseFrameAccessor._prep_index(data,index,columns)
pandas.core.arrays.sparse.SparseFrameAccessor._validate(self,data)
pandas.core.arrays.sparse.SparseFrameAccessor.density(self)->float
pandas.core.arrays.sparse.SparseFrameAccessor.from_spmatrix(cls,data,index=None,columns=None)
pandas.core.arrays.sparse.SparseFrameAccessor.to_coo(self)
pandas.core.arrays.sparse.SparseFrameAccessor.to_dense(self)
pandas.core.arrays.sparse.accessor.BaseAccessor(self,data=None)
pandas.core.arrays.sparse.accessor.BaseAccessor.__init__(self,data=None)
pandas.core.arrays.sparse.accessor.BaseAccessor._validate(self,data)
pandas.core.arrays.sparse.accessor.SparseAccessor(BaseAccessor,PandasDelegate)
pandas.core.arrays.sparse.accessor.SparseAccessor._delegate_method(self,name,*args,**kwargs)
pandas.core.arrays.sparse.accessor.SparseAccessor._delegate_property_get(self,name,*args,**kwargs)
pandas.core.arrays.sparse.accessor.SparseAccessor._validate(self,data)
pandas.core.arrays.sparse.accessor.SparseAccessor.from_coo(cls,A,dense_index=False)
pandas.core.arrays.sparse.accessor.SparseAccessor.to_coo(self,row_levels=(0,),column_levels=(1,),sort_labels=False)
pandas.core.arrays.sparse.accessor.SparseAccessor.to_dense(self)
pandas.core.arrays.sparse.accessor.SparseFrameAccessor(BaseAccessor,PandasDelegate)
pandas.core.arrays.sparse.accessor.SparseFrameAccessor._prep_index(data,index,columns)
pandas.core.arrays.sparse.accessor.SparseFrameAccessor._validate(self,data)
pandas.core.arrays.sparse.accessor.SparseFrameAccessor.density(self)->float
pandas.core.arrays.sparse.accessor.SparseFrameAccessor.from_spmatrix(cls,data,index=None,columns=None)
pandas.core.arrays.sparse.accessor.SparseFrameAccessor.to_coo(self)
pandas.core.arrays.sparse.accessor.SparseFrameAccessor.to_dense(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/sparse/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/sparse/api.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/dtypes/inference.py----------------------------------------
pandas.core.dtypes.inference._iterable_not_string(obj)->bool
pandas.core.dtypes.inference.is_array_like(obj)->bool
pandas.core.dtypes.inference.is_dict_like(obj)->bool
pandas.core.dtypes.inference.is_file_like(obj)->bool
pandas.core.dtypes.inference.is_hashable(obj)->bool
pandas.core.dtypes.inference.is_iterator(obj)->bool
pandas.core.dtypes.inference.is_named_tuple(obj)->bool
pandas.core.dtypes.inference.is_nested_list_like(obj)->bool
pandas.core.dtypes.inference.is_number(obj)->bool
pandas.core.dtypes.inference.is_re(obj)->bool
pandas.core.dtypes.inference.is_re_compilable(obj)->bool
pandas.core.dtypes.inference.is_sequence(obj)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/dtypes/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/dtypes/generic.py----------------------------------------
A:pandas.core.dtypes.generic.dct->dict(__instancecheck__=_check, __subclasscheck__=_check)
A:pandas.core.dtypes.generic.meta->type('ABCBase', (type,), dct)
A:pandas.core.dtypes.generic.ABCIndex->create_pandas_abc_type('ABCIndex', '_typ', ('index',))
A:pandas.core.dtypes.generic.ABCInt64Index->create_pandas_abc_type('ABCInt64Index', '_typ', ('int64index',))
A:pandas.core.dtypes.generic.ABCUInt64Index->create_pandas_abc_type('ABCUInt64Index', '_typ', ('uint64index',))
A:pandas.core.dtypes.generic.ABCRangeIndex->create_pandas_abc_type('ABCRangeIndex', '_typ', ('rangeindex',))
A:pandas.core.dtypes.generic.ABCFloat64Index->create_pandas_abc_type('ABCFloat64Index', '_typ', ('float64index',))
A:pandas.core.dtypes.generic.ABCMultiIndex->create_pandas_abc_type('ABCMultiIndex', '_typ', ('multiindex',))
A:pandas.core.dtypes.generic.ABCDatetimeIndex->create_pandas_abc_type('ABCDatetimeIndex', '_typ', ('datetimeindex',))
A:pandas.core.dtypes.generic.ABCTimedeltaIndex->create_pandas_abc_type('ABCTimedeltaIndex', '_typ', ('timedeltaindex',))
A:pandas.core.dtypes.generic.ABCPeriodIndex->create_pandas_abc_type('ABCPeriodIndex', '_typ', ('periodindex',))
A:pandas.core.dtypes.generic.ABCCategoricalIndex->create_pandas_abc_type('ABCCategoricalIndex', '_typ', ('categoricalindex',))
A:pandas.core.dtypes.generic.ABCIntervalIndex->create_pandas_abc_type('ABCIntervalIndex', '_typ', ('intervalindex',))
A:pandas.core.dtypes.generic.ABCIndexClass->create_pandas_abc_type('ABCIndexClass', '_typ', ('index', 'int64index', 'rangeindex', 'float64index', 'uint64index', 'multiindex', 'datetimeindex', 'timedeltaindex', 'periodindex', 'categoricalindex', 'intervalindex'))
A:pandas.core.dtypes.generic.ABCSeries->create_pandas_abc_type('ABCSeries', '_typ', ('series',))
A:pandas.core.dtypes.generic.ABCDataFrame->create_pandas_abc_type('ABCDataFrame', '_typ', ('dataframe',))
A:pandas.core.dtypes.generic.ABCSparseArray->create_pandas_abc_type('ABCSparseArray', '_subtyp', ('sparse_array', 'sparse_series'))
A:pandas.core.dtypes.generic.ABCCategorical->create_pandas_abc_type('ABCCategorical', '_typ', 'categorical')
A:pandas.core.dtypes.generic.ABCDatetimeArray->create_pandas_abc_type('ABCDatetimeArray', '_typ', 'datetimearray')
A:pandas.core.dtypes.generic.ABCTimedeltaArray->create_pandas_abc_type('ABCTimedeltaArray', '_typ', 'timedeltaarray')
A:pandas.core.dtypes.generic.ABCPeriodArray->create_pandas_abc_type('ABCPeriodArray', '_typ', ('periodarray',))
A:pandas.core.dtypes.generic.ABCPeriod->create_pandas_abc_type('ABCPeriod', '_typ', ('period',))
A:pandas.core.dtypes.generic.ABCDateOffset->create_pandas_abc_type('ABCDateOffset', '_typ', ('dateoffset',))
A:pandas.core.dtypes.generic.ABCInterval->create_pandas_abc_type('ABCInterval', '_typ', ('interval',))
A:pandas.core.dtypes.generic.ABCExtensionArray->create_pandas_abc_type('ABCExtensionArray', '_typ', ('extension', 'categorical', 'periodarray', 'datetimearray', 'timedeltaarray'))
A:pandas.core.dtypes.generic.ABCPandasArray->create_pandas_abc_type('ABCPandasArray', '_typ', ('npy_extension',))
A:pandas.core.dtypes.generic.ABCGeneric->_ABCGeneric('ABCGeneric', tuple(), {})
pandas.core.dtypes.generic._ABCGeneric(type)
pandas.core.dtypes.generic._ABCGeneric.__instancecheck__(cls,inst)->bool
pandas.core.dtypes.generic.create_pandas_abc_type(name,attr,comp)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/dtypes/dtypes.py----------------------------------------
A:pandas.core.dtypes.dtypes.dtype_type->type(dtype)
A:pandas.core.dtypes.dtypes.registry->Registry()
A:pandas.core.dtypes.dtypes.base->numpy.dtype('O')
A:pandas.core.dtypes.dtypes.self->cls.__new__(cls)
A:pandas.core.dtypes.dtypes.dtype->cast(CategoricalDtype, dtype)
A:pandas.core.dtypes.dtypes.categories->Index(categories, tupleize_cols=False)
A:pandas.core.dtypes.dtypes.self._categories->state.pop('categories', None)
A:pandas.core.dtypes.dtypes.self._ordered->state.pop('ordered', False)
A:pandas.core.dtypes.dtypes.data->cls.__new__(cls).categories._format_data(name=type(self).__name__)
A:pandas.core.dtypes.dtypes.cat_array->numpy.vstack([cat_array, np.arange(len(cat_array), dtype=cat_array.dtype)])
A:pandas.core.dtypes.dtypes.hashed->_combine_hash_arrays(iter(cat_array), num_items=len(cat_array))
A:pandas.core.dtypes.dtypes._match->re.compile('(I|i)nterval\\[(?P<subtype>.+)\\]')
A:pandas.core.dtypes.dtypes.result->type(self).construct_from_string(unit)
A:pandas.core.dtypes.dtypes.tz->pandas._libs.tslibs.timezones.tz_standardize(tz)
A:pandas.core.dtypes.dtypes.match->cls._match.match(string)
A:pandas.core.dtypes.dtypes.d->cls._match.match(string).groupdict()
A:pandas.core.dtypes.dtypes.u->object.__new__(cls)
A:pandas.core.dtypes.dtypes.freq->to_offset(freq)
A:pandas.core.dtypes.dtypes.m->cls._match.search(subtype)
A:pandas.core.dtypes.dtypes.(data, mask)->pyarrow_array_to_numpy_and_mask(arr, dtype='int64')
A:pandas.core.dtypes.dtypes.parr->PeriodArray(data.copy(), freq=self.freq, copy=False)
A:pandas.core.dtypes.dtypes.subtype->pandas_dtype(subtype)
A:pandas.core.dtypes.dtypes.left->numpy.asarray(arr.storage.field('left'), dtype=self.subtype)
A:pandas.core.dtypes.dtypes.right->numpy.asarray(arr.storage.field('right'), dtype=self.subtype)
A:pandas.core.dtypes.dtypes.iarr->pandas.core.arrays.IntervalArray.from_arrays(left, right, closed=array.type.closed)
pandas.core.dtypes.dtypes.CategoricalDtype(self,categories=None,ordered:Ordered=False)
pandas.core.dtypes.dtypes.CategoricalDtype.__eq__(self,other:Any)->bool
pandas.core.dtypes.dtypes.CategoricalDtype.__hash__(self)->int
pandas.core.dtypes.dtypes.CategoricalDtype.__init__(self,categories=None,ordered:Ordered=False)
pandas.core.dtypes.dtypes.CategoricalDtype.__repr__(self)->str_type
pandas.core.dtypes.dtypes.CategoricalDtype.__setstate__(self,state:MutableMapping[str_type,Any])->None
pandas.core.dtypes.dtypes.CategoricalDtype._finalize(self,categories,ordered:Ordered,fastpath:bool=False)->None
pandas.core.dtypes.dtypes.CategoricalDtype._from_categorical_dtype(cls,dtype:'CategoricalDtype',categories=None,ordered:Ordered=None)->'CategoricalDtype'
pandas.core.dtypes.dtypes.CategoricalDtype._from_fastpath(cls,categories=None,ordered:Optional[bool]=None)->'CategoricalDtype'
pandas.core.dtypes.dtypes.CategoricalDtype._from_values_or_dtype(cls,values=None,categories=None,ordered:Optional[bool]=None,dtype:Optional['CategoricalDtype']=None)->'CategoricalDtype'
pandas.core.dtypes.dtypes.CategoricalDtype._hash_categories(categories,ordered:Ordered=True)->int
pandas.core.dtypes.dtypes.CategoricalDtype._is_boolean(self)->bool
pandas.core.dtypes.dtypes.CategoricalDtype.categories(self)
pandas.core.dtypes.dtypes.CategoricalDtype.construct_array_type(cls)
pandas.core.dtypes.dtypes.CategoricalDtype.construct_from_string(cls,string:str_type)->'CategoricalDtype'
pandas.core.dtypes.dtypes.CategoricalDtype.ordered(self)->Ordered
pandas.core.dtypes.dtypes.CategoricalDtype.update_dtype(self,dtype:Union[str_type,'CategoricalDtype'])->'CategoricalDtype'
pandas.core.dtypes.dtypes.CategoricalDtype.validate_categories(categories,fastpath:bool=False)
pandas.core.dtypes.dtypes.CategoricalDtype.validate_ordered(ordered:Ordered)->None
pandas.core.dtypes.dtypes.CategoricalDtypeType(type)
pandas.core.dtypes.dtypes.DatetimeTZDtype(self,unit='ns',tz=None)
pandas.core.dtypes.dtypes.DatetimeTZDtype.__eq__(self,other:Any)->bool
pandas.core.dtypes.dtypes.DatetimeTZDtype.__hash__(self)->int
pandas.core.dtypes.dtypes.DatetimeTZDtype.__init__(self,unit='ns',tz=None)
pandas.core.dtypes.dtypes.DatetimeTZDtype.__setstate__(self,state)
pandas.core.dtypes.dtypes.DatetimeTZDtype.__str__(self)->str_type
pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_array_type(cls)
pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_from_string(cls,string:str_type)
pandas.core.dtypes.dtypes.DatetimeTZDtype.name(self)->str_type
pandas.core.dtypes.dtypes.DatetimeTZDtype.tz(self)
pandas.core.dtypes.dtypes.DatetimeTZDtype.unit(self)
pandas.core.dtypes.dtypes.IntervalDtype(cls,subtype=None)
pandas.core.dtypes.dtypes.IntervalDtype.__eq__(self,other:Any)->bool
pandas.core.dtypes.dtypes.IntervalDtype.__from_arrow__(self,array)
pandas.core.dtypes.dtypes.IntervalDtype.__hash__(self)->int
pandas.core.dtypes.dtypes.IntervalDtype.__new__(cls,subtype=None)
pandas.core.dtypes.dtypes.IntervalDtype.__setstate__(self,state)
pandas.core.dtypes.dtypes.IntervalDtype.__str__(self)->str_type
pandas.core.dtypes.dtypes.IntervalDtype.construct_array_type(cls)
pandas.core.dtypes.dtypes.IntervalDtype.construct_from_string(cls,string)
pandas.core.dtypes.dtypes.IntervalDtype.is_dtype(cls,dtype)->bool
pandas.core.dtypes.dtypes.IntervalDtype.subtype(self)
pandas.core.dtypes.dtypes.IntervalDtype.type(self)
pandas.core.dtypes.dtypes.PandasExtensionDtype(ExtensionDtype)
pandas.core.dtypes.dtypes.PandasExtensionDtype.__getstate__(self)->Dict[str_type, Any]
pandas.core.dtypes.dtypes.PandasExtensionDtype.__hash__(self)->int
pandas.core.dtypes.dtypes.PandasExtensionDtype.__repr__(self)->str_type
pandas.core.dtypes.dtypes.PandasExtensionDtype.__str__(self)->str_type
pandas.core.dtypes.dtypes.PandasExtensionDtype.reset_cache(cls)->None
pandas.core.dtypes.dtypes.PeriodDtype(cls,freq=None)
pandas.core.dtypes.dtypes.PeriodDtype.__eq__(self,other:Any)->bool
pandas.core.dtypes.dtypes.PeriodDtype.__from_arrow__(self,array)
pandas.core.dtypes.dtypes.PeriodDtype.__hash__(self)->int
pandas.core.dtypes.dtypes.PeriodDtype.__new__(cls,freq=None)
pandas.core.dtypes.dtypes.PeriodDtype.__setstate__(self,state)
pandas.core.dtypes.dtypes.PeriodDtype.__str__(self)->str_type
pandas.core.dtypes.dtypes.PeriodDtype._parse_dtype_strict(cls,freq)
pandas.core.dtypes.dtypes.PeriodDtype.construct_array_type(cls)
pandas.core.dtypes.dtypes.PeriodDtype.construct_from_string(cls,string)
pandas.core.dtypes.dtypes.PeriodDtype.freq(self)
pandas.core.dtypes.dtypes.PeriodDtype.is_dtype(cls,dtype)->bool
pandas.core.dtypes.dtypes.PeriodDtype.na_value(self)
pandas.core.dtypes.dtypes.PeriodDtype.name(self)->str_type
pandas.core.dtypes.dtypes.Registry(self)
pandas.core.dtypes.dtypes.Registry.__init__(self)
pandas.core.dtypes.dtypes.Registry.find(self,dtype:Union[Type[ExtensionDtype],str])->Optional[Type[ExtensionDtype]]
pandas.core.dtypes.dtypes.Registry.register(self,dtype:Type[ExtensionDtype])->None
pandas.core.dtypes.dtypes.register_extension_dtype(cls:Type[ExtensionDtype])->Type[ExtensionDtype]


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/dtypes/api.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/dtypes/missing.py----------------------------------------
A:pandas.core.dtypes.missing.flag->get_option(key)
A:pandas.core.dtypes.missing.is_extension->is_extension_array_dtype(obj)
A:pandas.core.dtypes.missing.values->getattr(obj, 'values', obj)
A:pandas.core.dtypes.missing.result->obj._constructor(result, index=obj.index, name=obj.name, copy=False)
A:pandas.core.dtypes.missing.vec->pandas._libs.missing.isnaobj_old(values.ravel())
A:pandas.core.dtypes.missing.result[...]->pandas._libs.missing.isnaobj_old(values.ravel()).reshape(shape)
A:pandas.core.dtypes.missing.result[:]->pandas._libs.missing.isnaobj_old(values.ravel()).reshape(shape)
A:pandas.core.dtypes.missing.res->isna(obj)
A:pandas.core.dtypes.missing.left->left.view('i8').view('i8')
A:pandas.core.dtypes.missing.right->right.view('i8').view('i8')
A:pandas.core.dtypes.missing.val->numpy.array(val, copy=False)
A:pandas.core.dtypes.missing.dtype->pandas_dtype(dtype)
pandas.core.dtypes.missing._infer_fill_value(val)
pandas.core.dtypes.missing._isna_compat(arr,fill_value=np.nan)->bool
pandas.core.dtypes.missing._isna_ndarraylike(obj)
pandas.core.dtypes.missing._isna_ndarraylike_old(obj)
pandas.core.dtypes.missing._isna_new(obj)
pandas.core.dtypes.missing._isna_old(obj)
pandas.core.dtypes.missing._maybe_fill(arr,fill_value=np.nan)
pandas.core.dtypes.missing._use_inf_as_na(key)
pandas.core.dtypes.missing.array_equivalent(left,right,strict_nan:bool=False)->bool
pandas.core.dtypes.missing.is_valid_nat_for_dtype(obj,dtype)->bool
pandas.core.dtypes.missing.isna(obj)
pandas.core.dtypes.missing.na_value_for_dtype(dtype,compat:bool=True)
pandas.core.dtypes.missing.notna(obj)
pandas.core.dtypes.missing.remove_na_arraylike(arr)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/dtypes/concat.py----------------------------------------
A:pandas.core.dtypes.concat.typs->get_dtype_kinds(to_concat)
A:pandas.core.dtypes.concat.typ->str(arr.dtype)
A:pandas.core.dtypes.concat._contains_datetime->any((typ.startswith('datetime') for typ in typs))
A:pandas.core.dtypes.concat._contains_period->any((typ.startswith('period') for typ in typs))
A:pandas.core.dtypes.concat.all_empty->all((not is_nonempty(x) for x in to_concat))
A:pandas.core.dtypes.concat.result->result.reshape(1, len(result)).reshape(1, len(result))
A:pandas.core.dtypes.concat.new_codes->numpy.concatenate(new_codes)
A:pandas.core.dtypes.concat.categories->categories.sort_values().sort_values()
A:pandas.core.dtypes.concat.indexer->categories.sort_values().sort_values().get_indexer(first.categories)
A:pandas.core.dtypes.concat.cats->first.categories.append([c.categories for c in to_union[1:]])
A:pandas.core.dtypes.concat.new_values->cls._concat_same_type(to_concat)
A:pandas.core.dtypes.concat.x->x.reshape(shape).reshape(shape)
pandas.core.dtypes.concat._concat_datetimetz(to_concat,name=None)
pandas.core.dtypes.concat._concat_dttz(to_concat,name=None)
pandas.core.dtypes.concat._concat_sparse(to_concat,axis=0,typs=None)
pandas.core.dtypes.concat._concatenate_2d(to_concat,axis:int)
pandas.core.dtypes.concat._convert_datetimelike_to_object(x)
pandas.core.dtypes.concat._convert_dtlike_to_object(x)
pandas.core.dtypes.concat.concat_categorical(to_concat,axis:int=0)
pandas.core.dtypes.concat.concat_compat(to_concat,axis:int=0)
pandas.core.dtypes.concat.concat_datetime(to_concat,axis=0,typs=None)
pandas.core.dtypes.concat.concat_dt(to_concat,axis=0,typs=None)
pandas.core.dtypes.concat.get_dtype_kinds(l)
pandas.core.dtypes.concat.union_categoricals(to_union,sort_categories:bool=False,ignore_order:bool=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/dtypes/cast.py----------------------------------------
A:pandas.core.dtypes.cast.values->numpy.empty(shape, dtype=dtype)
A:pandas.core.dtypes.cast.inferred_type->pandas._libs.lib.infer_datetimelike_array(ensure_object(v))
A:pandas.core.dtypes.cast.dtype->numpy.dtype('float64')
A:pandas.core.dtypes.cast.converted->pandas._libs.lib.maybe_convert_numeric(values, set(), coerce_numeric=True)
A:pandas.core.dtypes.cast.result->numpy.empty(len(values), dtype='object')
A:pandas.core.dtypes.cast.r->int(r)
A:pandas.core.dtypes.cast.arr->numpy.asarray(arr)
A:pandas.core.dtypes.cast.new_result->numpy.empty(len(values), dtype='object').values.copy()
A:pandas.core.dtypes.cast.other->numpy.array(other, dtype=result.dtype)
A:pandas.core.dtypes.cast.om_at->om.astype(result.dtype)
A:pandas.core.dtypes.cast.(r, _)->maybe_upcast(result, fill_value=other, copy=True)
A:pandas.core.dtypes.cast.(new_dtype, _)->maybe_promote(result.dtype, other)
A:pandas.core.dtypes.cast.fill_value->_ensure_dtype_type(fill_value, dtype)
A:pandas.core.dtypes.cast.fv->pandas._libs.tslibs.Timedelta(fill_value)
A:pandas.core.dtypes.cast.mst->numpy.min_scalar_type(fill_value)
A:pandas.core.dtypes.cast.val->pandas._libs.tslibs.Timestamp(val)
A:pandas.core.dtypes.cast.inferred->pandas._libs.lib.infer_dtype(arr, skipna=False)
A:pandas.core.dtypes.cast.element->numpy.asarray(element)
A:pandas.core.dtypes.cast.(new_dtype, fill_value)->maybe_promote(dtype, fill_value)
A:pandas.core.dtypes.cast.length->len(categories)
A:pandas.core.dtypes.cast.mask->isna(arr)
A:pandas.core.dtypes.cast.new_values->pandas._libs.lib.maybe_convert_numeric(values, set(), coerce_numeric=True)
A:pandas.core.dtypes.cast.conversion_count->sum((datetime, numeric, timedelta))
A:pandas.core.dtypes.cast.is_extension->is_extension_array_dtype(input_array.dtype)
A:pandas.core.dtypes.cast.inferred_dtype->pandas.core.arrays.integer._dtypes.get(input_array.dtype.name, target_int_dtype)
A:pandas.core.dtypes.cast.v->v.ravel().ravel()
A:pandas.core.dtypes.cast.(values, tz)->pandas._libs.tslibs.conversion.datetime_to_datetime64(v)
A:pandas.core.dtypes.cast.value->ensure_str(value)
A:pandas.core.dtypes.cast.is_datetime64->is_datetime64_dtype(dtype)
A:pandas.core.dtypes.cast.is_datetime64tz->is_datetime64tz_dtype(dtype)
A:pandas.core.dtypes.cast.is_timedelta64->is_timedelta64_dtype(dtype)
A:pandas.core.dtypes.cast.is_dt_string->is_string_dtype(value)
A:pandas.core.dtypes.cast.ints->numpy.asarray(value).view('i8')
A:pandas.core.dtypes.cast.is_array->isinstance(value, np.ndarray)
A:pandas.core.dtypes.cast.has_bools->any((is_bool_dtype(t) for t in types))
A:pandas.core.dtypes.cast.(dtype, fill_value)->infer_dtype_from_scalar(value)
A:pandas.core.dtypes.cast.cls->numpy.dtype('float64').construct_array_type()
A:pandas.core.dtypes.cast.subarr->numpy.array(values, dtype=dtype, copy=copy)
A:pandas.core.dtypes.cast.na_values->isna(values)
A:pandas.core.dtypes.cast.subarr2->numpy.array(values, dtype=dtype, copy=copy).astype(object)
A:pandas.core.dtypes.cast.casted->numpy.asarray(arr).astype(dtype, copy=copy)
pandas.core.dtypes.cast._ensure_dtype_type(value,dtype)
pandas.core.dtypes.cast.astype_nansafe(arr,dtype,copy:bool=True,skipna:bool=False)
pandas.core.dtypes.cast.cast_scalar_to_array(shape,value,dtype=None)
pandas.core.dtypes.cast.coerce_indexer_dtype(indexer,categories)
pandas.core.dtypes.cast.coerce_to_dtypes(result,dtypes)
pandas.core.dtypes.cast.construct_1d_arraylike_from_scalar(value,length:int,dtype)
pandas.core.dtypes.cast.construct_1d_ndarray_preserving_na(values,dtype=None,copy:bool=False)
pandas.core.dtypes.cast.construct_1d_object_array_from_listlike(values)
pandas.core.dtypes.cast.convert_dtypes(input_array,convert_string:bool=True,convert_integer:bool=True,convert_boolean:bool=True)->Dtype
pandas.core.dtypes.cast.find_common_type(types)
pandas.core.dtypes.cast.infer_dtype_from(val,pandas_dtype:bool=False)
pandas.core.dtypes.cast.infer_dtype_from_array(arr,pandas_dtype:bool=False)
pandas.core.dtypes.cast.infer_dtype_from_scalar(val,pandas_dtype:bool=False)
pandas.core.dtypes.cast.invalidate_string_dtypes(dtype_set)
pandas.core.dtypes.cast.is_nested_object(obj)->bool
pandas.core.dtypes.cast.maybe_cast_to_datetime(value,dtype,errors:str='raise')
pandas.core.dtypes.cast.maybe_cast_to_dt(value,dtype,errors:str='raise')
pandas.core.dtypes.cast.maybe_cast_to_integer_array(arr,dtype,copy:bool=False)
pandas.core.dtypes.cast.maybe_castable(arr)->bool
pandas.core.dtypes.cast.maybe_convert_objects(values:np.ndarray,convert_numeric:bool=True)
pandas.core.dtypes.cast.maybe_convert_platform(values)
pandas.core.dtypes.cast.maybe_downcast_numeric(result,dtype,do_round:bool=False)
pandas.core.dtypes.cast.maybe_downcast_to_dtype(result,dtype)
pandas.core.dtypes.cast.maybe_infer_dtype_type(element)
pandas.core.dtypes.cast.maybe_infer_to_datetimelike(value,convert_dates:bool=False)
pandas.core.dtypes.cast.maybe_infer_to_dtlike(value,convert_dates:bool=False)
pandas.core.dtypes.cast.maybe_promote(dtype,fill_value=np.nan)
pandas.core.dtypes.cast.maybe_upcast(values,fill_value=np.nan,dtype=None,copy:bool=False)
pandas.core.dtypes.cast.maybe_upcast_putmask(result:np.ndarray,mask:np.ndarray,other)
pandas.core.dtypes.cast.soft_convert_objects(values:np.ndarray,datetime:bool=True,numeric:bool=True,timedelta:bool=True,coerce:bool=False,copy:bool=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/dtypes/common.py----------------------------------------
A:pandas.core.dtypes.common._INT64_DTYPE->numpy.dtype(np.int64)
A:pandas.core.dtypes.common.arr->Categorical(arr)
A:pandas.core.dtypes.common.value->str(value)
A:pandas.core.dtypes.common.new_value->int(value)
A:pandas.core.dtypes.common.dtype->pandas_dtype(dtype)
A:pandas.core.dtypes.common.source->_get_dtype(source)
A:pandas.core.dtypes.common.target->_get_dtype(target)
A:pandas.core.dtypes.common.tipo->_get_dtype(arr_or_dtype.dtype)
A:pandas.core.dtypes.common.is_a_array->isinstance(a, np.ndarray)
A:pandas.core.dtypes.common.is_b_array->isinstance(b, np.ndarray)
A:pandas.core.dtypes.common.a->numpy.asarray(a)
A:pandas.core.dtypes.common.b->numpy.asarray(b)
A:pandas.core.dtypes.common.result->pandas.core.dtypes.dtypes.registry.find(dtype)
A:pandas.core.dtypes.common.npdtype->numpy.dtype(dtype)
pandas.core.dtypes.common._get_dtype(arr_or_dtype)
pandas.core.dtypes.common._is_dtype(arr_or_dtype,condition)->bool
pandas.core.dtypes.common._is_dtype_type(arr_or_dtype,condition)->bool
pandas.core.dtypes.common._is_unorderable_exception(e:TypeError)->bool
pandas.core.dtypes.common._validate_date_like_dtype(dtype)->None
pandas.core.dtypes.common.classes(*klasses)->Callable
pandas.core.dtypes.common.classes_and_not_datetimelike(*klasses)->Callable
pandas.core.dtypes.common.classes_and_not_dtlike(*klasses)->Callable
pandas.core.dtypes.common.ensure_categorical(arr)
pandas.core.dtypes.common.ensure_float(arr)
pandas.core.dtypes.common.ensure_int_or_float(arr:ArrayLike,copy:bool=False)->np.array
pandas.core.dtypes.common.ensure_python_int(value:Union[int,np.integer])->int
pandas.core.dtypes.common.ensure_str(value:Union[bytes,Any])->str
pandas.core.dtypes.common.infer_dtype_from_object(dtype)
pandas.core.dtypes.common.is_any_int_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_bool_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_categorical(arr)->bool
pandas.core.dtypes.common.is_categorical_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_complex_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_datetime64_any_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_datetime64_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_datetime64_ns_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_datetime64tz_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_datetime_arraylike(arr)->bool
pandas.core.dtypes.common.is_datetime_or_timedelta_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_datetimelike_v_numeric(a,b)
pandas.core.dtypes.common.is_dt64_any_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_dt64_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_dt64_ns_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_dt64tz_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_dt_arraylike(arr)->bool
pandas.core.dtypes.common.is_dt_or_timedelta_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_dtlike_v_numeric(a,b)
pandas.core.dtypes.common.is_dtype_equal(source,target)->bool
pandas.core.dtypes.common.is_extension_array_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_extension_type(arr)->bool
pandas.core.dtypes.common.is_float_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_int64_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_integer_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_interval_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_numeric_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_numeric_v_string_like(a,b)
pandas.core.dtypes.common.is_object_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_period_arraylike(arr)->bool
pandas.core.dtypes.common.is_period_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_scipy_sparse(arr)->bool
pandas.core.dtypes.common.is_signed_integer_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_sparse(arr)->bool
pandas.core.dtypes.common.is_string_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_string_like_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_timedelta64_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_timedelta64_ns_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.is_unsigned_integer_dtype(arr_or_dtype)->bool
pandas.core.dtypes.common.needs_i8_conversion(arr_or_dtype)->bool
pandas.core.dtypes.common.pandas_dtype(dtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/dtypes/base.py----------------------------------------
A:pandas.core.dtypes.base.other->self.construct_from_string(other)
A:pandas.core.dtypes.base.dtype->getattr(dtype, 'dtype', dtype)
pandas.core.dtypes.base.ExtensionDtype
pandas.core.dtypes.base.ExtensionDtype.__eq__(self,other:Any)->bool
pandas.core.dtypes.base.ExtensionDtype.__hash__(self)->int
pandas.core.dtypes.base.ExtensionDtype.__ne__(self,other)->bool
pandas.core.dtypes.base.ExtensionDtype.__str__(self)->str
pandas.core.dtypes.base.ExtensionDtype._is_boolean(self)->bool
pandas.core.dtypes.base.ExtensionDtype._is_numeric(self)->bool
pandas.core.dtypes.base.ExtensionDtype.construct_array_type(cls)
pandas.core.dtypes.base.ExtensionDtype.construct_from_string(cls,string:str)
pandas.core.dtypes.base.ExtensionDtype.is_dtype(cls,dtype)->bool
pandas.core.dtypes.base.ExtensionDtype.kind(self)->str
pandas.core.dtypes.base.ExtensionDtype.na_value(self)
pandas.core.dtypes.base.ExtensionDtype.name(self)->str
pandas.core.dtypes.base.ExtensionDtype.names(self)->Optional[List[str]]
pandas.core.dtypes.base.ExtensionDtype.type(self)->Type


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/tools/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/tools/datetimes.py----------------------------------------
A:pandas.core.tools.datetimes.DatetimeScalar->TypeVar('DatetimeScalar', Scalar, datetime)
A:pandas.core.tools.datetimes.check_count->int(len(arg) * 0.1)
A:pandas.core.tools.datetimes.unique_elements->set(islice(arg, check_count))
A:pandas.core.tools.datetimes.cache_array->Series([], dtype=object)
A:pandas.core.tools.datetimes.unique_dates->unique(arg)
A:pandas.core.tools.datetimes.cache_dates->convert_listlike(unique_dates, format)
A:pandas.core.tools.datetimes.result->numpy.empty(carg.shape, dtype='M8[ns]')
A:pandas.core.tools.datetimes.tz_results->numpy.array([Timestamp(res).tz_localize(zone) for (res, zone) in zip(result, timezones)])
A:pandas.core.tools.datetimes.arg->ensure_object(arg)
A:pandas.core.tools.datetimes.mask->ensure_object(arg).isna()
A:pandas.core.tools.datetimes.(result, tz_parsed)->objects_to_datetime64ns(arg, dayfirst=dayfirst, yearfirst=yearfirst, utc=utc, errors=errors, require_iso8601=require_iso8601, allow_object=True)
A:pandas.core.tools.datetimes.(arg, _)->maybe_convert_dtype(arg, copy=False)
A:pandas.core.tools.datetimes.format->_guess_time_format_for_array(arg)
A:pandas.core.tools.datetimes.format_is_iso8601->_format_is_iso(format)
A:pandas.core.tools.datetimes.orig_arg->ensure_object(orig_arg)
A:pandas.core.tools.datetimes.(result, timezones)->array_strptime(arg, format, exact=exact, errors=errors)
A:pandas.core.tools.datetimes.iresult->numpy.empty(carg.shape, dtype='M8[ns]').view('i8')
A:pandas.core.tools.datetimes.(values, tz)->pandas._libs.tslibs.conversion.datetime_to_datetime64(arg)
A:pandas.core.tools.datetimes.j0->Timestamp(0).to_julian_date()
A:pandas.core.tools.datetimes.offset->Timestamp(origin)
A:pandas.core.tools.datetimes.convert_listlike->partial(convert_listlike, name=arg.name)
A:pandas.core.tools.datetimes.values->_convert_listlike(arg._values, format)
A:pandas.core.tools.datetimes.req->sorted(set(required) - set(unit_rev.keys()))
A:pandas.core.tools.datetimes.required->','.join(req)
A:pandas.core.tools.datetimes.excess->','.join(excess)
A:pandas.core.tools.datetimes.value->unit_rev.get(u)
A:pandas.core.tools.datetimes.carg->ensure_object(arg).astype(np.float64)
A:pandas.core.tools.datetimes.parsed->pandas._libs.tslibs.parsing.try_parse_year_month_day(carg / 10000, carg / 100 % 100, carg % 100)
A:pandas.core.tools.datetimes.masked_result->calc(carg[mask].astype(np.float64).astype(np.int64))
A:pandas.core.tools.datetimes.result[mask]->calc(carg[mask].astype(np.float64).astype(np.int64)).astype('M8[ns]')
A:pandas.core.tools.datetimes.time_object->datetime.datetime.strptime(element, time_format).time()
A:pandas.core.tools.datetimes.fmt->formats.pop(formats.index(time_format))
pandas.core.tools.datetimes._adjust_to_origin(arg,origin,unit)
pandas.core.tools.datetimes._assemble_from_unit_mappings(arg,errors,tz)
pandas.core.tools.datetimes._attempt_YYYYMMDD(arg,errors)
pandas.core.tools.datetimes._box_as_indexlike(dt_array:ArrayLike,utc:Optional[bool]=None,name:Optional[str]=None)->Union[ABCIndex, ABCDatetimeIndex]
pandas.core.tools.datetimes._convert_and_box_cache(arg:DatetimeScalarOrArrayConvertible,cache_array:ABCSeries,name:Optional[str]=None)->ABCIndexClass
pandas.core.tools.datetimes._convert_listlike_datetimes(arg,format,name=None,tz=None,unit=None,errors=None,infer_datetime_format=None,dayfirst=None,yearfirst=None,exact=None)
pandas.core.tools.datetimes._guess_datetime_format_for_array(arr,**kwargs)
pandas.core.tools.datetimes._guess_time_format_for_array(arr)
pandas.core.tools.datetimes._maybe_cache(arg,format,cache,convert_listlike)
pandas.core.tools.datetimes._return_parsed_timezone_results(result,timezones,tz,name)
pandas.core.tools.datetimes.should_cache(arg:ArrayConvertible,unique_share:float=0.7,check_count:Optional[int]=None)->bool
pandas.core.tools.datetimes.to_datetime(arg,errors='raise',dayfirst=False,yearfirst=False,utc=None,format=None,exact=True,unit=None,infer_datetime_format=False,origin='unix',cache=True)
pandas.core.tools.datetimes.to_time(arg,format=None,infer_time_format=False,errors='raise')
pandas.core.tools.dts._adjust_to_origin(arg,origin,unit)
pandas.core.tools.dts._assemble_from_unit_mappings(arg,errors,tz)
pandas.core.tools.dts._attempt_YYYYMMDD(arg,errors)
pandas.core.tools.dts._box_as_indexlike(dt_array:ArrayLike,utc:Optional[bool]=None,name:Optional[str]=None)->Union[ABCIndex, ABCDatetimeIndex]
pandas.core.tools.dts._convert_and_box_cache(arg:DatetimeScalarOrArrayConvertible,cache_array:ABCSeries,name:Optional[str]=None)->ABCIndexClass
pandas.core.tools.dts._convert_listlike_dts(arg,format,name=None,tz=None,unit=None,errors=None,infer_datetime_format=None,dayfirst=None,yearfirst=None,exact=None)
pandas.core.tools.dts._guess_dt_format_for_array(arr,**kwargs)
pandas.core.tools.dts._guess_time_format_for_array(arr)
pandas.core.tools.dts._maybe_cache(arg,format,cache,convert_listlike)
pandas.core.tools.dts._return_parsed_timezone_results(result,timezones,tz,name)
pandas.core.tools.dts.should_cache(arg:ArrayConvertible,unique_share:float=0.7,check_count:Optional[int]=None)->bool
pandas.core.tools.dts.to_dt(arg,errors='raise',dayfirst=False,yearfirst=False,utc=None,format=None,exact=True,unit=None,infer_datetime_format=False,origin='unix',cache=True)
pandas.core.tools.dts.to_time(arg,format=None,infer_time_format=False,errors='raise')


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/tools/numeric.py----------------------------------------
A:pandas.core.tools.numeric.values->maybe_downcast_to_dtype(values, dtype)
A:pandas.core.tools.numeric.float_32_ind->typecodes.index(float_32_char)
pandas.core.tools.numeric.to_numeric(arg,errors='raise',downcast=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/tools/timedeltas.py----------------------------------------
A:pandas.core.tools.timedeltas.unit->parse_timedelta_unit(unit)
A:pandas.core.tools.timedeltas.values->_convert_listlike(arg._values, unit=unit, errors=errors)
A:pandas.core.tools.timedeltas.arg->numpy.array(list(arg), dtype=object)
A:pandas.core.tools.timedeltas.result->Timedelta(r, unit)
A:pandas.core.tools.timedeltas.value->TimedeltaIndex(value, unit='ns', name=name)
pandas.core.tools.timedeltas._coerce_scalar_to_timedelta_type(r,unit='ns',errors='raise')
pandas.core.tools.timedeltas._convert_listlike(arg,unit='ns',errors='raise',name=None)
pandas.core.tools.timedeltas.to_timedelta(arg,unit='ns',errors='raise')


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/groupby/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/groupby/generic.py----------------------------------------
A:pandas.core.groupby.generic.NamedAgg->namedtuple('NamedAgg', ['column', 'aggfunc'])
A:pandas.core.groupby.generic.ScalarResult->typing.TypeVar('ScalarResult')
A:pandas.core.groupby.generic.parent_method->getattr(klass, name)
A:pandas.core.groupby.generic.prop->generate_property(name, klass)
A:pandas.core.groupby.generic._agg_see_also_doc->dedent('\n    See Also\n    --------\n    pandas.DataFrame.groupby.apply\n    pandas.DataFrame.groupby.transform\n    pandas.DataFrame.aggregate\n    ')
A:pandas.core.groupby.generic._agg_examples_doc->dedent('\n    Examples\n    --------\n\n    >>> df = pd.DataFrame({\'A\': [1, 1, 2, 2],\n    ...                    \'B\': [1, 2, 3, 4],\n    ...                    \'C\': np.random.randn(4)})\n\n    >>> df\n       A  B         C\n    0  1  1  0.362838\n    1  1  2  0.227877\n    2  2  3  1.267767\n    3  2  4 -0.562860\n\n    The aggregation is for each column.\n\n    >>> df.groupby(\'A\').agg(\'min\')\n       B         C\n    A\n    1  1  0.227877\n    2  3 -0.562860\n\n    Multiple aggregations\n\n    >>> df.groupby(\'A\').agg([\'min\', \'max\'])\n        B             C\n      min max       min       max\n    A\n    1   1   2  0.227877  0.362838\n    2   3   4 -0.562860  1.267767\n\n    Select a column for aggregation\n\n    >>> df.groupby(\'A\').B.agg([\'min\', \'max\'])\n       min  max\n    A\n    1    1    2\n    2    3    4\n\n    Different aggregations per column\n\n    >>> df.groupby(\'A\').agg({\'B\': [\'min\', \'max\'], \'C\': \'sum\'})\n        B             C\n      min max       sum\n    A\n    1   1   2  0.590716\n    2   3   4  0.704907\n\n    To control the output names with different aggregations per column,\n    pandas supports "named aggregation"\n\n    >>> df.groupby("A").agg(\n    ...     b_min=pd.NamedAgg(column="B", aggfunc="min"),\n    ...     c_sum=pd.NamedAgg(column="C", aggfunc="sum"))\n       b_min     c_sum\n    A\n    1      1 -1.956929\n    2      3 -0.322183\n\n    - The keywords are the *output* column names\n    - The values are tuples whose first element is the column to select\n      and the second element is the aggregation to apply to that column.\n      Pandas provides the ``pandas.NamedAgg`` namedtuple with the fields\n      ``[\'column\', \'aggfunc\']`` to make it clearer what the arguments are.\n      As usual, the aggregation can be a callable or a string alias.\n\n    See :ref:`groupby.aggregate.named` for more.\n    ')
A:pandas.core.groupby.generic.columns->Index((key.label for key in output))
A:pandas.core.groupby.generic.func->_maybe_mangle_lambdas(func)
A:pandas.core.groupby.generic.ret->concat(ret, axis=1)
A:pandas.core.groupby.generic.cyfunc->self._get_cython_func(func)
A:pandas.core.groupby.generic.result->result.copy().copy()
A:pandas.core.groupby.generic.index->numpy.arange(blocks[0].values.shape[-1])
A:pandas.core.groupby.generic.arg->zip(columns, arg)
A:pandas.core.groupby.generic.obj->copy.copy(obj)
A:pandas.core.groupby.generic.results[name]->copy.copy(obj).aggregate(func)
A:pandas.core.groupby.generic.output->func(group, *args, **kwargs)
A:pandas.core.groupby.generic.klass->type(self._selected_obj)
A:pandas.core.groupby.generic.res->res.squeeze().squeeze()
A:pandas.core.groupby.generic.indexer->Index(keys).get_indexer(key_index)
A:pandas.core.groupby.generic.ser->klass(res, indexer)
A:pandas.core.groupby.generic.cast->self._transform_should_cast(func_nm)
A:pandas.core.groupby.generic.out->numpy.bincount(ids[mask], minlength=minlength)
A:pandas.core.groupby.generic.b->wrapper(x, *args, **kwargs)
A:pandas.core.groupby.generic.filtered->self._apply_filter(indices, dropna)
A:pandas.core.groupby.generic.val->self.obj._internal_get_values()
A:pandas.core.groupby.generic.(codes, _)->pandas.core.algorithms.factorize(val, sort=False)
A:pandas.core.groupby.generic.sorter->numpy.lexsort((out if ascending else -out, left[0]))
A:pandas.core.groupby.generic.(lab, lev)->pandas.core.algorithms.factorize(val, sort=True)
A:pandas.core.groupby.generic.lab->lev.take(lab.cat.codes)
A:pandas.core.groupby.generic.rep->partial(np.repeat, repeats=np.add.reduceat(inc, idx))
A:pandas.core.groupby.generic.d->numpy.diff(np.r_[idx, len(ids)])
A:pandas.core.groupby.generic.acc->rep(d)
A:pandas.core.groupby.generic.mi->MultiIndex(levels=levels, codes=codes, names=names, verify_integrity=False)
A:pandas.core.groupby.generic.diff->numpy.zeros(len(out), dtype='bool')
A:pandas.core.groupby.generic.(_, idx)->_get_join_indexers(left, right, sort=False, how='left')
A:pandas.core.groupby.generic.ids->ensure_platform_int(ids)
A:pandas.core.groupby.generic.filled->getattr(self, fill_method)(limit=limit)
A:pandas.core.groupby.generic.fill_grp->getattr(self, fill_method)(limit=limit).groupby(self.grouper.codes)
A:pandas.core.groupby.generic.shifted->getattr(self, fill_method)(limit=limit).groupby(self.grouper.codes).shift(periods=periods, freq=freq)
A:pandas.core.groupby.generic.(func, columns, order)->_normalize_keyword_aggregation(kwargs)
A:pandas.core.groupby.generic.(result, how)->self._aggregate(func, *args, **kwargs)
A:pandas.core.groupby.generic.result.columns->result.copy().copy().columns.rename([self._selected_obj.columns.name] * result.columns.nlevels).droplevel(-1)
A:pandas.core.groupby.generic.result.index->numpy.arange(len(result))
A:pandas.core.groupby.generic.(agg_blocks, agg_items)->self._cython_agg_blocks(how, alt=alt, numeric_only=numeric_only, min_count=min_count)
A:pandas.core.groupby.generic.data->self._get_data_to_aggregate()
A:pandas.core.groupby.generic.no_result->object()
A:pandas.core.groupby.generic.(result, _)->self.grouper.aggregate(block.values, how, axis=1, min_count=min_count)
A:pandas.core.groupby.generic.s->get_groupby(obj, self.grouper)
A:pandas.core.groupby.generic.agg_items->self._get_data_to_aggregate().items.take(np.sort(indexer))
A:pandas.core.groupby.generic.deleted->numpy.concatenate(deleted_items)
A:pandas.core.groupby.generic.ai->numpy.arange(len(data))
A:pandas.core.groupby.generic.mask->numpy.zeros(len(data))
A:pandas.core.groupby.generic.loc->len(blk.mgr_locs)
A:pandas.core.groupby.generic.fres->func(data, *args, **kwargs)
A:pandas.core.groupby.generic.colg->SeriesGroupBy(data, selection=item, grouper=self.grouper)
A:pandas.core.groupby.generic.result[item]->self._try_cast(result[item], data)
A:pandas.core.groupby.generic.result_columns->result_columns.drop(cannot_agg).drop(cannot_agg)
A:pandas.core.groupby.generic.v->first_not_none(values)
A:pandas.core.groupby.generic.key_lookup->Index(keys)
A:pandas.core.groupby.generic.key_index->Index(keys, name=key_names[0])
A:pandas.core.groupby.generic.kwargs->first_not_none(values)._construct_axes_dict()
A:pandas.core.groupby.generic.backup->first_not_none(values)._constructor(**kwargs)
A:pandas.core.groupby.generic.applied_index->self._selected_obj._get_axis(self.axis)
A:pandas.core.groupby.generic.all_indexed_same->all_indexes_same([x.index for x in values])
A:pandas.core.groupby.generic.stacked_values->numpy.vstack([np.asarray(v) for v in values])
A:pandas.core.groupby.generic.should_coerce->any((isinstance(x, Timestamp) for x in values))
A:pandas.core.groupby.generic.gen->self.grouper.get_iterator(obj, axis=self.axis)
A:pandas.core.groupby.generic.(fast_path, slow_path)->self._define_paths(func, *args, **kwargs)
A:pandas.core.groupby.generic.(path, res)->self._choose_path(fast_path, slow_path, group)
A:pandas.core.groupby.generic.r->DataFrame(np.concatenate([res.values] * len(group.index)).reshape(group.shape), columns=group.columns, index=group.index)
A:pandas.core.groupby.generic.concatenated->concatenated.reindex(concat_index, axis=other_axis, copy=False).reindex(concat_index, axis=other_axis, copy=False)
A:pandas.core.groupby.generic.res_fast->fast_path(group)
A:pandas.core.groupby.generic.output[col]->self[col].transform(wrapper)
A:pandas.core.groupby.generic.izip->zip(*map(reversed, (self.grouper.names, self.grouper.get_group_levels(), [grp.in_axis for grp in self.grouper.groupings])))
A:pandas.core.groupby.generic.mgr->BlockManager(blocks, axes=[items, index])
A:pandas.core.groupby.generic.results->concat(results, axis=1)
A:pandas.core.groupby.generic.axis_number->copy.copy(obj)._get_axis_number(self.axis)
A:pandas.core.groupby.generic.other_axis->int(not axis_number)
A:pandas.core.groupby.generic.results.index->pandas.core.indexes.base.default_index(len(results))
A:pandas.core.groupby.generic.aggspec->defaultdict(list)
A:pandas.core.groupby.generic.(columns, pairs)->list(zip(*kwargs.items()))
A:pandas.core.groupby.generic.uniquified_order->_make_unique(order)
A:pandas.core.groupby.generic.uniquified_aggspec->_make_unique(aggspec_order)
A:pandas.core.groupby.generic.col_idx_order->Index(uniquified_aggspec).get_indexer(uniquified_order)
A:pandas.core.groupby.generic.aggfunc->partial(aggfunc)
A:pandas.core.groupby.generic.is_dict->is_dict_like(agg_spec)
A:pandas.core.groupby.generic.mangled_aggspec->_managle_lambda_list(agg_spec)
A:pandas.core.groupby.generic.mangled_aggfuncs->_managle_lambda_list(aggfuncs)
A:pandas.core.groupby.generic.converted->maybe_convert_objects(result.iloc[:, n].values, convert_numeric=False)
pandas.core.groupby.DataFrameGroupBy(GroupBy)
pandas.core.groupby.DataFrameGroupBy.__getitem__(self,key)
pandas.core.groupby.DataFrameGroupBy._aggregate_frame(self,func,*args,**kwargs)->DataFrame
pandas.core.groupby.DataFrameGroupBy._aggregate_item_by_item(self,func,*args,**kwargs)->DataFrame
pandas.core.groupby.DataFrameGroupBy._apply_to_column_groupbys(self,func)
pandas.core.groupby.DataFrameGroupBy._choose_path(self,fast_path:Callable,slow_path:Callable,group:DataFrame)
pandas.core.groupby.DataFrameGroupBy._cython_agg_blocks(self,how:str,alt=None,numeric_only:bool=True,min_count:int=-1)->'Tuple[List[Block], Index]'
pandas.core.groupby.DataFrameGroupBy._cython_agg_general(self,how:str,alt=None,numeric_only:bool=True,min_count:int=-1)->DataFrame
pandas.core.groupby.DataFrameGroupBy._define_paths(self,func,*args,**kwargs)
pandas.core.groupby.DataFrameGroupBy._get_data_to_aggregate(self)->BlockManager
pandas.core.groupby.DataFrameGroupBy._gotitem(self,key,ndim:int,subset=None)
pandas.core.groupby.DataFrameGroupBy._insert_inaxis_grouper_inplace(self,result)
pandas.core.groupby.DataFrameGroupBy._iterate_column_groupbys(self)
pandas.core.groupby.DataFrameGroupBy._iterate_slices(self)->Iterable[Series]
pandas.core.groupby.DataFrameGroupBy._transform_fast(self,result:DataFrame,func_nm:str)->DataFrame
pandas.core.groupby.DataFrameGroupBy._transform_general(self,func,*args,**kwargs)
pandas.core.groupby.DataFrameGroupBy._transform_item_by_item(self,obj:DataFrame,wrapper)->DataFrame
pandas.core.groupby.DataFrameGroupBy._wrap_agged_blocks(self,blocks:'Sequence[Block]',items:Index)->DataFrame
pandas.core.groupby.DataFrameGroupBy._wrap_aggregated_output(self,output:Mapping[base.OutputKey,Union[Series,np.ndarray]])->DataFrame
pandas.core.groupby.DataFrameGroupBy._wrap_applied_output(self,keys,values,not_indexed_same=False)
pandas.core.groupby.DataFrameGroupBy._wrap_frame_output(self,result,obj)->DataFrame
pandas.core.groupby.DataFrameGroupBy._wrap_transformed_output(self,output:Mapping[base.OutputKey,Union[Series,np.ndarray]])->DataFrame
pandas.core.groupby.DataFrameGroupBy.aggregate(self,func=None,*args,**kwargs)
pandas.core.groupby.DataFrameGroupBy.count(self)
pandas.core.groupby.DataFrameGroupBy.filter(self,func,dropna=True,*args,**kwargs)
pandas.core.groupby.DataFrameGroupBy.nunique(self,dropna:bool=True)
pandas.core.groupby.DataFrameGroupBy.transform(self,func,*args,**kwargs)
pandas.core.groupby.SeriesGroupBy(GroupBy)
pandas.core.groupby.SeriesGroupBy._aggregate_multiple_funcs(self,arg)
pandas.core.groupby.SeriesGroupBy._aggregate_named(self,func,*args,**kwargs)
pandas.core.groupby.SeriesGroupBy._apply_to_column_groupbys(self,func)
pandas.core.groupby.SeriesGroupBy._iterate_slices(self)->Iterable[Series]
pandas.core.groupby.SeriesGroupBy._selection_name(self)
pandas.core.groupby.SeriesGroupBy._transform_fast(self,result,func_nm:str)->Series
pandas.core.groupby.SeriesGroupBy._transform_general(self,func,*args,**kwargs)
pandas.core.groupby.SeriesGroupBy._wrap_aggregated_output(self,output:Mapping[base.OutputKey,Union[Series,np.ndarray]])->Union[Series, DataFrame]
pandas.core.groupby.SeriesGroupBy._wrap_applied_output(self,keys,values,not_indexed_same=False)
pandas.core.groupby.SeriesGroupBy._wrap_series_output(self,output:Mapping[base.OutputKey,Union[Series,np.ndarray]],index:Index)->Union[Series, DataFrame]
pandas.core.groupby.SeriesGroupBy._wrap_transformed_output(self,output:Mapping[base.OutputKey,Union[Series,np.ndarray]])->Series
pandas.core.groupby.SeriesGroupBy.aggregate(self,func=None,*args,**kwargs)
pandas.core.groupby.SeriesGroupBy.apply(self,func,*args,**kwargs)
pandas.core.groupby.SeriesGroupBy.count(self)->Series
pandas.core.groupby.SeriesGroupBy.describe(self,**kwargs)
pandas.core.groupby.SeriesGroupBy.filter(self,func,dropna=True,*args,**kwargs)
pandas.core.groupby.SeriesGroupBy.nunique(self,dropna:bool=True)->Series
pandas.core.groupby.SeriesGroupBy.pct_change(self,periods=1,fill_method='pad',limit=None,freq=None)
pandas.core.groupby.SeriesGroupBy.transform(self,func,*args,**kwargs)
pandas.core.groupby.SeriesGroupBy.value_counts(self,normalize=False,sort=True,ascending=False,bins=None,dropna=True)
pandas.core.groupby.generic.DataFrameGroupBy(GroupBy)
pandas.core.groupby.generic.DataFrameGroupBy.__getitem__(self,key)
pandas.core.groupby.generic.DataFrameGroupBy._aggregate_frame(self,func,*args,**kwargs)->DataFrame
pandas.core.groupby.generic.DataFrameGroupBy._aggregate_item_by_item(self,func,*args,**kwargs)->DataFrame
pandas.core.groupby.generic.DataFrameGroupBy._apply_to_column_groupbys(self,func)
pandas.core.groupby.generic.DataFrameGroupBy._choose_path(self,fast_path:Callable,slow_path:Callable,group:DataFrame)
pandas.core.groupby.generic.DataFrameGroupBy._cython_agg_blocks(self,how:str,alt=None,numeric_only:bool=True,min_count:int=-1)->'Tuple[List[Block], Index]'
pandas.core.groupby.generic.DataFrameGroupBy._cython_agg_general(self,how:str,alt=None,numeric_only:bool=True,min_count:int=-1)->DataFrame
pandas.core.groupby.generic.DataFrameGroupBy._define_paths(self,func,*args,**kwargs)
pandas.core.groupby.generic.DataFrameGroupBy._get_data_to_aggregate(self)->BlockManager
pandas.core.groupby.generic.DataFrameGroupBy._gotitem(self,key,ndim:int,subset=None)
pandas.core.groupby.generic.DataFrameGroupBy._insert_inaxis_grouper_inplace(self,result)
pandas.core.groupby.generic.DataFrameGroupBy._iterate_column_groupbys(self)
pandas.core.groupby.generic.DataFrameGroupBy._iterate_slices(self)->Iterable[Series]
pandas.core.groupby.generic.DataFrameGroupBy._transform_fast(self,result:DataFrame,func_nm:str)->DataFrame
pandas.core.groupby.generic.DataFrameGroupBy._transform_general(self,func,*args,**kwargs)
pandas.core.groupby.generic.DataFrameGroupBy._transform_item_by_item(self,obj:DataFrame,wrapper)->DataFrame
pandas.core.groupby.generic.DataFrameGroupBy._wrap_agged_blocks(self,blocks:'Sequence[Block]',items:Index)->DataFrame
pandas.core.groupby.generic.DataFrameGroupBy._wrap_aggregated_output(self,output:Mapping[base.OutputKey,Union[Series,np.ndarray]])->DataFrame
pandas.core.groupby.generic.DataFrameGroupBy._wrap_applied_output(self,keys,values,not_indexed_same=False)
pandas.core.groupby.generic.DataFrameGroupBy._wrap_frame_output(self,result,obj)->DataFrame
pandas.core.groupby.generic.DataFrameGroupBy._wrap_transformed_output(self,output:Mapping[base.OutputKey,Union[Series,np.ndarray]])->DataFrame
pandas.core.groupby.generic.DataFrameGroupBy.aggregate(self,func=None,*args,**kwargs)
pandas.core.groupby.generic.DataFrameGroupBy.count(self)
pandas.core.groupby.generic.DataFrameGroupBy.filter(self,func,dropna=True,*args,**kwargs)
pandas.core.groupby.generic.DataFrameGroupBy.nunique(self,dropna:bool=True)
pandas.core.groupby.generic.DataFrameGroupBy.transform(self,func,*args,**kwargs)
pandas.core.groupby.generic.SeriesGroupBy(GroupBy)
pandas.core.groupby.generic.SeriesGroupBy._aggregate_multiple_funcs(self,arg)
pandas.core.groupby.generic.SeriesGroupBy._aggregate_named(self,func,*args,**kwargs)
pandas.core.groupby.generic.SeriesGroupBy._apply_to_column_groupbys(self,func)
pandas.core.groupby.generic.SeriesGroupBy._iterate_slices(self)->Iterable[Series]
pandas.core.groupby.generic.SeriesGroupBy._selection_name(self)
pandas.core.groupby.generic.SeriesGroupBy._transform_fast(self,result,func_nm:str)->Series
pandas.core.groupby.generic.SeriesGroupBy._transform_general(self,func,*args,**kwargs)
pandas.core.groupby.generic.SeriesGroupBy._wrap_aggregated_output(self,output:Mapping[base.OutputKey,Union[Series,np.ndarray]])->Union[Series, DataFrame]
pandas.core.groupby.generic.SeriesGroupBy._wrap_applied_output(self,keys,values,not_indexed_same=False)
pandas.core.groupby.generic.SeriesGroupBy._wrap_series_output(self,output:Mapping[base.OutputKey,Union[Series,np.ndarray]],index:Index)->Union[Series, DataFrame]
pandas.core.groupby.generic.SeriesGroupBy._wrap_transformed_output(self,output:Mapping[base.OutputKey,Union[Series,np.ndarray]])->Series
pandas.core.groupby.generic.SeriesGroupBy.aggregate(self,func=None,*args,**kwargs)
pandas.core.groupby.generic.SeriesGroupBy.apply(self,func,*args,**kwargs)
pandas.core.groupby.generic.SeriesGroupBy.count(self)->Series
pandas.core.groupby.generic.SeriesGroupBy.describe(self,**kwargs)
pandas.core.groupby.generic.SeriesGroupBy.filter(self,func,dropna=True,*args,**kwargs)
pandas.core.groupby.generic.SeriesGroupBy.nunique(self,dropna:bool=True)->Series
pandas.core.groupby.generic.SeriesGroupBy.pct_change(self,periods=1,fill_method='pad',limit=None,freq=None)
pandas.core.groupby.generic.SeriesGroupBy.transform(self,func,*args,**kwargs)
pandas.core.groupby.generic.SeriesGroupBy.value_counts(self,normalize=False,sort=True,ascending=False,bins=None,dropna=True)
pandas.core.groupby.generic._is_multi_agg_with_relabel(**kwargs)->bool
pandas.core.groupby.generic._make_unique(seq)
pandas.core.groupby.generic._managle_lambda_list(aggfuncs:Sequence[Any])->Sequence[Any]
pandas.core.groupby.generic._maybe_mangle_lambdas(agg_spec:Any)->Any
pandas.core.groupby.generic._normalize_keyword_aggregation(kwargs)
pandas.core.groupby.generic._recast_datetimelike_result(result:DataFrame)->DataFrame
pandas.core.groupby.generic._recast_dtlike_result(result:DataFrame)->DataFrame
pandas.core.groupby.generic.generate_property(name:str,klass:Type[FrameOrSeries])
pandas.core.groupby.generic.pin_whitelisted_properties(klass:Type[FrameOrSeries],whitelist:FrozenSet[str])


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/groupby/categorical.py----------------------------------------
A:pandas.core.groupby.categorical.unique_codes->unique1d(c.codes)
A:pandas.core.groupby.categorical.take_codes->numpy.sort(take_codes)
A:pandas.core.groupby.categorical.categories->c.categories.take(take_codes)
A:pandas.core.groupby.categorical.codes->_recode_for_categories(c.codes, c.categories, categories)
A:pandas.core.groupby.categorical.dtype->CategoricalDtype(categories, ordered=c.ordered)
A:pandas.core.groupby.categorical.cat->cat.add_categories(c.categories[~c.categories.isin(cat.categories)]).add_categories(c.categories[~c.categories.isin(cat.categories)])
pandas.core.groupby.categorical.recode_for_groupby(c:Categorical,sort:bool,observed:bool)
pandas.core.groupby.categorical.recode_from_groupby(c:Categorical,sort:bool,ci)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/groupby/groupby.py----------------------------------------
A:pandas.core.groupby.groupby._apply_docs->dict(template='\n    Apply function `func`  group-wise and combine the results together.\n\n    The function passed to `apply` must take a {input} as its first\n    argument and return a DataFrame, Series or scalar. `apply` will\n    then take care of combining the results back together into a single\n    dataframe or series. `apply` is therefore a highly flexible\n    grouping method.\n\n    While `apply` is a very flexible method, its downside is that\n    using it can be quite a bit slower than using more specific methods\n    like `agg` or `transform`. Pandas offers a wide range of method that will\n    be much faster than using `apply` for their specific purposes, so try to\n    use them before reaching for `apply`.\n\n    Parameters\n    ----------\n    func : callable\n        A callable that takes a {input} as its first argument, and\n        returns a dataframe, a series or a scalar. In addition the\n        callable may take positional and keyword arguments.\n    args, kwargs : tuple and dict\n        Optional positional and keyword arguments to pass to `func`.\n\n    Returns\n    -------\n    applied : Series or DataFrame\n\n    See Also\n    --------\n    pipe : Apply function to the full GroupBy object instead of to each\n        group.\n    aggregate : Apply aggregate function to the GroupBy object.\n    transform : Apply function column-by-column to the GroupBy object.\n    Series.apply : Apply a function to a Series.\n    DataFrame.apply : Apply a function to each row or column of a DataFrame.\n    ', dataframe_examples="\n    >>> df = pd.DataFrame({'A': 'a a b'.split(),\n                           'B': [1,2,3],\n                           'C': [4,6, 5]})\n    >>> g = df.groupby('A')\n\n    Notice that ``g`` has two groups, ``a`` and ``b``.\n    Calling `apply` in various ways, we can get different grouping results:\n\n    Example 1: below the function passed to `apply` takes a DataFrame as\n    its argument and returns a DataFrame. `apply` combines the result for\n    each group together into a new DataFrame:\n\n    >>> g[['B', 'C']].apply(lambda x: x / x.sum())\n              B    C\n    0  0.333333  0.4\n    1  0.666667  0.6\n    2  1.000000  1.0\n\n    Example 2: The function passed to `apply` takes a DataFrame as\n    its argument and returns a Series.  `apply` combines the result for\n    each group together into a new DataFrame:\n\n    >>> g[['B', 'C']].apply(lambda x: x.max() - x.min())\n       B  C\n    A\n    a  1  2\n    b  0  0\n\n    Example 3: The function passed to `apply` takes a DataFrame as\n    its argument and returns a scalar. `apply` combines the result for\n    each group together into a Series, including setting the index as\n    appropriate:\n\n    >>> g.apply(lambda x: x.C.max() - x.B.min())\n    A\n    a    5\n    b    2\n    dtype: int64\n    ", series_examples="\n    >>> s = pd.Series([0, 1, 2], index='a a b'.split())\n    >>> g = s.groupby(s.index)\n\n    From ``s`` above we can see that ``g`` has two groups, ``a`` and ``b``.\n    Calling `apply` in various ways, we can get different grouping results:\n\n    Example 1: The function passed to `apply` takes a Series as\n    its argument and returns a Series.  `apply` combines the result for\n    each group together into a new Series:\n\n    >>> g.apply(lambda x:  x*2 if x.name == 'b' else x/2)\n    0    0.0\n    1    0.5\n    2    4.0\n    dtype: float64\n\n    Example 2: The function passed to `apply` takes a Series as\n    its argument and returns a scalar. `apply` combines the result for\n    each group together into a Series, including setting the index as\n    appropriate:\n\n    >>> g.apply(lambda x: x.max() - x.min())\n    a    1\n    b    0\n    dtype: int64\n\n    Notes\n    -----\n    In the current implementation `apply` calls `func` twice on the\n    first group to decide whether it can take a fast or slow code\n    path. This can lead to unexpected behavior if `func` has\n    side-effects, as they will take effect twice for the first\n    group.\n\n    Examples\n    --------\n    {examples}\n    ")
A:pandas.core.groupby.groupby.(grouper, exclusions, obj)->get_grouper(obj, keys, axis=axis, level=level, sort=sort, observed=observed, mutated=self.mutated)
A:pandas.core.groupby.groupby.self.axis->obj._get_axis_number(axis)
A:pandas.core.groupby.groupby.index_sample->next(iter(self.indices))
A:pandas.core.groupby.groupby.converter->get_converter(index_sample)
A:pandas.core.groupby.groupby.self._group_selection->self._selected_obj._get_axis(self.axis).difference(Index(groupers), sort=False).tolist()
A:pandas.core.groupby.groupby.index->Index(np.concatenate(self._get_indices(self.grouper.result_index)))
A:pandas.core.groupby.groupby.result->post_processing(result, inferences)
A:pandas.core.groupby.groupby.plot->property(GroupByPlot)
A:pandas.core.groupby.groupby.f->getattr(nanops, 'nan' + func)
A:pandas.core.groupby.groupby.sig->inspect.signature(f)
A:pandas.core.groupby.groupby.inds->self._get_index(name)
A:pandas.core.groupby.groupby.func->partial(func, ngroups)
A:pandas.core.groupby.groupby.(keys, values, mutated)->self.grouper.apply(f, self._selected_obj, self.axis)
A:pandas.core.groupby.groupby.sorter->get_group_index_sorter(ids, ngroups)
A:pandas.core.groupby.groupby.rep->numpy.diff(np.r_[np.nonzero(run)[0], count])
A:pandas.core.groupby.groupby.out->self._reindex_output(out)
A:pandas.core.groupby.groupby.rev->numpy.empty(count, dtype=np.intp)
A:pandas.core.groupby.groupby.rev[sorter]->numpy.arange(count, dtype=np.intp)
A:pandas.core.groupby.groupby.cls->dtype.construct_array_type()
A:pandas.core.groupby.groupby.is_numeric->is_numeric_dtype(obj.dtype)
A:pandas.core.groupby.groupby.(result, _)->self.grouper.transform(obj.values, how, **kwargs)
A:pandas.core.groupby.groupby.key->pandas.core.groupby.base.OutputKey(label=name, position=idx)
A:pandas.core.groupby.groupby.(result, agg_names)->self.grouper.aggregate(obj._values, how, min_count=min_count)
A:pandas.core.groupby.groupby.output[key]->self._try_cast(values[mask], result)
A:pandas.core.groupby.groupby.(result, counts)->self.grouper.agg_series(obj, f)
A:pandas.core.groupby.groupby.values->reset_identity(values)
A:pandas.core.groupby.groupby.ax->self._selected_obj._get_axis(self.axis)
A:pandas.core.groupby.groupby.indexer->pandas.core.algorithms.unique1d(result.index.get_indexer_for(ax.values))
A:pandas.core.groupby.groupby.keys->list(range(len(values)))
A:pandas.core.groupby.groupby.indices->numpy.arange(len(result)).reshape([len(q), self.ngroups]).T.flatten()
A:pandas.core.groupby.groupby.filtered->self._selected_obj.where(mask)
A:pandas.core.groupby.groupby.mask->isna(values).view(np.uint8)
A:pandas.core.groupby.groupby.vals->vals.astype(inference).astype(inference)
A:pandas.core.groupby.groupby.x->x.to_numpy().to_numpy()
A:pandas.core.groupby.groupby.cls.sum->groupby_function('sum', 'add', np.sum, min_count=0)
A:pandas.core.groupby.groupby.cls.prod->groupby_function('prod', 'prod', np.prod, min_count=0)
A:pandas.core.groupby.groupby.cls.min->groupby_function('min', 'min', np.min, numeric_only=False)
A:pandas.core.groupby.groupby.cls.max->groupby_function('max', 'max', np.max, numeric_only=False)
A:pandas.core.groupby.groupby.cls.first->groupby_function('first', 'first', first_compat, numeric_only=False)
A:pandas.core.groupby.groupby.cls.last->groupby_function('last', 'last', last_compat, numeric_only=False)
A:pandas.core.groupby.groupby.nth_values->list(set(n))
A:pandas.core.groupby.groupby.nth_array->numpy.array(nth_values, dtype=np.intp)
A:pandas.core.groupby.groupby.mask_left->numpy.in1d(self._cumcount_array(), nth_array)
A:pandas.core.groupby.groupby.mask_right->numpy.in1d(self._cumcount_array(ascending=False) + 1, -nth_array)
A:pandas.core.groupby.groupby.dropped->self.obj.dropna(how=dropna, axis=self.axis)
A:pandas.core.groupby.groupby.(grouper, _, _)->get_grouper(dropped, key=self.keys, axis=self.axis, level=self.level, sort=self.sort, mutated=self.mutated)
A:pandas.core.groupby.groupby.grb->self.obj.dropna(how=dropna, axis=self.axis).groupby(grouper, as_index=self.as_index, sort=self.sort)
A:pandas.core.groupby.groupby.index_names->numpy.array(result.index.names)
A:pandas.core.groupby.groupby.result.index.names->numpy.arange(len(index_names))
A:pandas.core.groupby.groupby.cumcounts->self._cumcount_array(ascending=ascending)
A:pandas.core.groupby.groupby.base_func->getattr(libgroupby, how)
A:pandas.core.groupby.groupby.result_sz->len(values)
A:pandas.core.groupby.groupby.(vals, inferences)->pre_processing(vals)
A:pandas.core.groupby.groupby.filled->getattr(self, fill_method)(limit=limit)
A:pandas.core.groupby.groupby.fill_grp->getattr(self, fill_method)(limit=limit).groupby(self.grouper.codes)
A:pandas.core.groupby.groupby.shifted->getattr(self, fill_method)(limit=limit).groupby(self.grouper.codes).shift(periods=periods, freq=freq)
A:pandas.core.groupby.groupby.(index, _)->pandas.core.indexes.api.MultiIndex.from_product(levels_list, names=self.grouper.names).sortlevel()
A:pandas.core.groupby.groupby.(g_nums, g_names)->zip(*in_axis_grps)
A:pandas.core.groupby.groupby.output->output.reset_index(level=g_nums).reset_index(level=g_nums)
pandas.core.groupby.GroupBy(_GroupBy)
pandas.core.groupby.GroupBy._add_numeric_operations(cls)
pandas.core.groupby.GroupBy._bool_agg(self,val_test,skipna)
pandas.core.groupby.GroupBy._fill(self,direction,limit=None)
pandas.core.groupby.GroupBy._get_cythonized_result(self,how:str,cython_dtype:np.dtype,aggregate:bool=False,needs_values:bool=False,needs_mask:bool=False,needs_ngroups:bool=False,result_is_index:bool=False,pre_processing=None,post_processing=None,**kwargs)
pandas.core.groupby.GroupBy._reindex_output(self,output:FrameOrSeries,fill_value:Scalar=np.NaN)->FrameOrSeries
pandas.core.groupby.GroupBy.all(self,skipna:bool=True)
pandas.core.groupby.GroupBy.any(self,skipna:bool=True)
pandas.core.groupby.GroupBy.backfill(self,limit=None)
pandas.core.groupby.GroupBy.count(self)
pandas.core.groupby.GroupBy.cumcount(self,ascending:bool=True)
pandas.core.groupby.GroupBy.cummax(self,axis=0,**kwargs)
pandas.core.groupby.GroupBy.cummin(self,axis=0,**kwargs)
pandas.core.groupby.GroupBy.cumprod(self,axis=0,*args,**kwargs)
pandas.core.groupby.GroupBy.cumsum(self,axis=0,*args,**kwargs)
pandas.core.groupby.GroupBy.describe(self,**kwargs)
pandas.core.groupby.GroupBy.expanding(self,*args,**kwargs)
pandas.core.groupby.GroupBy.head(self,n=5)
pandas.core.groupby.GroupBy.mean(self,*args,**kwargs)
pandas.core.groupby.GroupBy.median(self,**kwargs)
pandas.core.groupby.GroupBy.ngroup(self,ascending:bool=True)
pandas.core.groupby.GroupBy.nth(self,n:Union[int,List[int]],dropna:Optional[str]=None)->DataFrame
pandas.core.groupby.GroupBy.ohlc(self)->DataFrame
pandas.core.groupby.GroupBy.pad(self,limit=None)
pandas.core.groupby.GroupBy.pct_change(self,periods=1,fill_method='pad',limit=None,freq=None,axis=0)
pandas.core.groupby.GroupBy.quantile(self,q=0.5,interpolation:str='linear')
pandas.core.groupby.GroupBy.rank(self,method:str='average',ascending:bool=True,na_option:str='keep',pct:bool=False,axis:int=0)
pandas.core.groupby.GroupBy.resample(self,rule,*args,**kwargs)
pandas.core.groupby.GroupBy.rolling(self,*args,**kwargs)
pandas.core.groupby.GroupBy.sem(self,ddof:int=1)
pandas.core.groupby.GroupBy.shift(self,periods=1,freq=None,axis=0,fill_value=None)
pandas.core.groupby.GroupBy.size(self)
pandas.core.groupby.GroupBy.std(self,ddof:int=1,*args,**kwargs)
pandas.core.groupby.GroupBy.tail(self,n=5)
pandas.core.groupby.GroupBy.var(self,ddof:int=1,*args,**kwargs)
pandas.core.groupby.GroupByPlot(self,groupby)
pandas.core.groupby.GroupByPlot.__getattr__(self,name:str)
pandas.core.groupby.groupby.GroupBy(_GroupBy)
pandas.core.groupby.groupby.GroupBy._add_numeric_operations(cls)
pandas.core.groupby.groupby.GroupBy._bool_agg(self,val_test,skipna)
pandas.core.groupby.groupby.GroupBy._fill(self,direction,limit=None)
pandas.core.groupby.groupby.GroupBy._get_cythonized_result(self,how:str,cython_dtype:np.dtype,aggregate:bool=False,needs_values:bool=False,needs_mask:bool=False,needs_ngroups:bool=False,result_is_index:bool=False,pre_processing=None,post_processing=None,**kwargs)
pandas.core.groupby.groupby.GroupBy._reindex_output(self,output:FrameOrSeries,fill_value:Scalar=np.NaN)->FrameOrSeries
pandas.core.groupby.groupby.GroupBy.all(self,skipna:bool=True)
pandas.core.groupby.groupby.GroupBy.any(self,skipna:bool=True)
pandas.core.groupby.groupby.GroupBy.backfill(self,limit=None)
pandas.core.groupby.groupby.GroupBy.count(self)
pandas.core.groupby.groupby.GroupBy.cumcount(self,ascending:bool=True)
pandas.core.groupby.groupby.GroupBy.cummax(self,axis=0,**kwargs)
pandas.core.groupby.groupby.GroupBy.cummin(self,axis=0,**kwargs)
pandas.core.groupby.groupby.GroupBy.cumprod(self,axis=0,*args,**kwargs)
pandas.core.groupby.groupby.GroupBy.cumsum(self,axis=0,*args,**kwargs)
pandas.core.groupby.groupby.GroupBy.describe(self,**kwargs)
pandas.core.groupby.groupby.GroupBy.expanding(self,*args,**kwargs)
pandas.core.groupby.groupby.GroupBy.head(self,n=5)
pandas.core.groupby.groupby.GroupBy.mean(self,*args,**kwargs)
pandas.core.groupby.groupby.GroupBy.median(self,**kwargs)
pandas.core.groupby.groupby.GroupBy.ngroup(self,ascending:bool=True)
pandas.core.groupby.groupby.GroupBy.nth(self,n:Union[int,List[int]],dropna:Optional[str]=None)->DataFrame
pandas.core.groupby.groupby.GroupBy.ohlc(self)->DataFrame
pandas.core.groupby.groupby.GroupBy.pad(self,limit=None)
pandas.core.groupby.groupby.GroupBy.pct_change(self,periods=1,fill_method='pad',limit=None,freq=None,axis=0)
pandas.core.groupby.groupby.GroupBy.quantile(self,q=0.5,interpolation:str='linear')
pandas.core.groupby.groupby.GroupBy.rank(self,method:str='average',ascending:bool=True,na_option:str='keep',pct:bool=False,axis:int=0)
pandas.core.groupby.groupby.GroupBy.resample(self,rule,*args,**kwargs)
pandas.core.groupby.groupby.GroupBy.rolling(self,*args,**kwargs)
pandas.core.groupby.groupby.GroupBy.sem(self,ddof:int=1)
pandas.core.groupby.groupby.GroupBy.shift(self,periods=1,freq=None,axis=0,fill_value=None)
pandas.core.groupby.groupby.GroupBy.size(self)
pandas.core.groupby.groupby.GroupBy.std(self,ddof:int=1,*args,**kwargs)
pandas.core.groupby.groupby.GroupBy.tail(self,n=5)
pandas.core.groupby.groupby.GroupBy.var(self,ddof:int=1,*args,**kwargs)
pandas.core.groupby.groupby.GroupByPlot(self,groupby)
pandas.core.groupby.groupby.GroupByPlot.__getattr__(self,name:str)
pandas.core.groupby.groupby.GroupByPlot.__init__(self,groupby)
pandas.core.groupby.groupby._GroupBy(self,obj:NDFrame,keys:Optional[_KeysArgType]=None,axis:int=0,level=None,grouper:'Optional[ops.BaseGrouper]'=None,exclusions=None,selection=None,as_index:bool=True,sort:bool=True,group_keys:bool=True,squeeze:bool=False,observed:bool=False,mutated:bool=False)
pandas.core.groupby.groupby._GroupBy.__getattr__(self,attr:str)
pandas.core.groupby.groupby._GroupBy.__init__(self,obj:NDFrame,keys:Optional[_KeysArgType]=None,axis:int=0,level=None,grouper:'Optional[ops.BaseGrouper]'=None,exclusions=None,selection=None,as_index:bool=True,sort:bool=True,group_keys:bool=True,squeeze:bool=False,observed:bool=False,mutated:bool=False)
pandas.core.groupby.groupby._GroupBy.__iter__(self)
pandas.core.groupby.groupby._GroupBy.__len__(self)->int
pandas.core.groupby.groupby._GroupBy.__repr__(self)->str
pandas.core.groupby.groupby._GroupBy._apply_filter(self,indices,dropna)
pandas.core.groupby.groupby._GroupBy._assure_grouper(self)
pandas.core.groupby.groupby._GroupBy._concat_objects(self,keys,values,not_indexed_same:bool=False)
pandas.core.groupby.groupby._GroupBy._cumcount_array(self,ascending:bool=True)
pandas.core.groupby.groupby._GroupBy._cython_agg_general(self,how:str,alt=None,numeric_only:bool=True,min_count:int=-1)
pandas.core.groupby.groupby._GroupBy._cython_transform(self,how:str,numeric_only:bool=True,**kwargs)
pandas.core.groupby.groupby._GroupBy._dir_additions(self)
pandas.core.groupby.groupby._GroupBy._get_index(self,name)
pandas.core.groupby.groupby._GroupBy._get_indices(self,names)
pandas.core.groupby.groupby._GroupBy._iterate_slices(self)->Iterable[Series]
pandas.core.groupby.groupby._GroupBy._make_wrapper(self,name)
pandas.core.groupby.groupby._GroupBy._python_agg_general(self,func,*args,**kwargs)
pandas.core.groupby.groupby._GroupBy._python_apply_general(self,f)
pandas.core.groupby.groupby._GroupBy._reset_group_selection(self)
pandas.core.groupby.groupby._GroupBy._selected_obj(self)
pandas.core.groupby.groupby._GroupBy._set_group_selection(self)
pandas.core.groupby.groupby._GroupBy._set_result_index_ordered(self,result)
pandas.core.groupby.groupby._GroupBy._transform_should_cast(self,func_nm:str)->bool
pandas.core.groupby.groupby._GroupBy._try_cast(self,result,obj,numeric_only:bool=False)
pandas.core.groupby.groupby._GroupBy._wrap_aggregated_output(self,output:Mapping[base.OutputKey,np.ndarray])
pandas.core.groupby.groupby._GroupBy._wrap_applied_output(self,keys,values,not_indexed_same:bool=False)
pandas.core.groupby.groupby._GroupBy._wrap_transformed_output(self,output:Mapping[base.OutputKey,np.ndarray])
pandas.core.groupby.groupby._GroupBy.apply(self,func,*args,**kwargs)
pandas.core.groupby.groupby._GroupBy.get_group(self,name,obj=None)
pandas.core.groupby.groupby._GroupBy.groups(self)
pandas.core.groupby.groupby._GroupBy.indices(self)
pandas.core.groupby.groupby._GroupBy.ngroups(self)
pandas.core.groupby.groupby._GroupBy.pipe(self,func,*args,**kwargs)
pandas.core.groupby.groupby._GroupBy.transform(self,func,*args,**kwargs)
pandas.core.groupby.groupby._group_selection_context(groupby)
pandas.core.groupby.groupby.get_groupby(obj:NDFrame,by:Optional[_KeysArgType]=None,axis:int=0,level=None,grouper:'Optional[ops.BaseGrouper]'=None,exclusions=None,selection=None,as_index:bool=True,sort:bool=True,group_keys:bool=True,squeeze:bool=False,observed:bool=False,mutated:bool=False)->GroupBy


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/groupby/grouper.py----------------------------------------
A:pandas.core.groupby.grouper.(self.grouper, _, self.obj)->get_grouper(self.obj, [self.key], axis=self.axis, level=self.level, sort=self.sort, validate=validate)
A:pandas.core.groupby.grouper.ax->ax.take(indexer).take(indexer)
A:pandas.core.groupby.grouper.level->index.names.index(level)
A:pandas.core.groupby.grouper.indexerself.indexer->ax.take(indexer).take(indexer).argsort(kind='mergesort')
A:pandas.core.groupby.grouper.obj->obj.take(indexer, axis=self.axis).take(indexer, axis=self.axis)
A:pandas.core.groupby.grouper.attrs->', '.join(attrs_list)
A:pandas.core.groupby.grouper.self.grouper->self.grouper.astype('timedelta64[ns]')
A:pandas.core.groupby.grouper.(self.grouper, self._codes, self._group_index)->index._get_grouper_for_level(self.grouper, level)
A:pandas.core.groupby.grouper.(_, grouper, _)->self.grouper._get_grouper(self.obj, validate=False)
A:pandas.core.groupby.grouper.(self.grouper, self.all_grouper)->recode_for_groupby(self.grouper, self.sort, observed)
A:pandas.core.groupby.grouper.codes->numpy.arange(len(categories))
A:pandas.core.groupby.grouper.self._group_index->CategoricalIndex(Categorical.from_codes(codes=codes, categories=categories, ordered=self.grouper.ordered), name=self.name)
A:pandas.core.groupby.grouper.grper->pprint_thing(self.grouper)
A:pandas.core.groupby.grouper.values->ensure_categorical(self.grouper)
A:pandas.core.groupby.grouper.(codes, uniques)->pandas.core.algorithms.factorize(self.grouper, sort=self.sort)
A:pandas.core.groupby.grouper.uniques->Index(uniques, name=self.name)
A:pandas.core.groupby.grouper.group_axis->obj.take(indexer, axis=self.axis).take(indexer, axis=self.axis)._get_axis(axis)
A:pandas.core.groupby.grouper.key->obj.take(indexer, axis=self.axis).take(indexer, axis=self.axis)._get_axis(axis).get_level_values(level)
A:pandas.core.groupby.grouper.nlevels->len(level)
A:pandas.core.groupby.grouper.(binner, grouper, obj)->obj.take(indexer, axis=self.axis).take(indexer, axis=self.axis)._get_axis(axis).get_level_values(level)._get_grouper(obj, validate=False)
A:pandas.core.groupby.grouper.any_callable->any((callable(g) or isinstance(g, dict) for g in keys))
A:pandas.core.groupby.grouper.any_groupers->any((isinstance(g, Grouper) for g in keys))
A:pandas.core.groupby.grouper.any_arraylike->any((isinstance(g, (list, tuple, Series, Index, np.ndarray)) for g in keys))
A:pandas.core.groupby.grouper.all_in_columns_index->all((g in obj.index.names for g in keys))
A:pandas.core.groupby.grouper.grouper->pandas.core.groupby.ops.BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)
pandas.core.groupby.Grouper(self,key=None,level=None,freq=None,axis=0,sort=False)
pandas.core.groupby.Grouper.__repr__(self)->str
pandas.core.groupby.Grouper._get_grouper(self,obj,validate:bool=True)
pandas.core.groupby.Grouper._set_grouper(self,obj:FrameOrSeries,sort:bool=False)
pandas.core.groupby.Grouper.ax(self)
pandas.core.groupby.Grouper.groups(self)
pandas.core.groupby.grouper.Grouper(self,key=None,level=None,freq=None,axis=0,sort=False)
pandas.core.groupby.grouper.Grouper.__init__(self,key=None,level=None,freq=None,axis=0,sort=False)
pandas.core.groupby.grouper.Grouper.__repr__(self)->str
pandas.core.groupby.grouper.Grouper._get_grouper(self,obj,validate:bool=True)
pandas.core.groupby.grouper.Grouper._set_grouper(self,obj:FrameOrSeries,sort:bool=False)
pandas.core.groupby.grouper.Grouper.ax(self)
pandas.core.groupby.grouper.Grouper.groups(self)
pandas.core.groupby.grouper.Grouping(self,index:Index,grouper=None,obj:Optional[FrameOrSeries]=None,name=None,level=None,sort:bool=True,observed:bool=False,in_axis:bool=False)
pandas.core.groupby.grouper.Grouping.__init__(self,index:Index,grouper=None,obj:Optional[FrameOrSeries]=None,name=None,level=None,sort:bool=True,observed:bool=False,in_axis:bool=False)
pandas.core.groupby.grouper.Grouping.__iter__(self)
pandas.core.groupby.grouper.Grouping.__repr__(self)->str
pandas.core.groupby.grouper.Grouping._make_codes(self)->None
pandas.core.groupby.grouper.Grouping.codes(self)->np.ndarray
pandas.core.groupby.grouper.Grouping.group_index(self)->Index
pandas.core.groupby.grouper.Grouping.groups(self)->Dict[Hashable, np.ndarray]
pandas.core.groupby.grouper.Grouping.indices(self)
pandas.core.groupby.grouper.Grouping.ngroups(self)->int
pandas.core.groupby.grouper.Grouping.result_index(self)->Index
pandas.core.groupby.grouper._convert_grouper(axis:Index,grouper)
pandas.core.groupby.grouper._is_label_like(val)->bool
pandas.core.groupby.grouper.get_grouper(obj:FrameOrSeries,key=None,axis:int=0,level=None,sort:bool=True,observed:bool=False,mutated:bool=False,validate:bool=True)->'Tuple[ops.BaseGrouper, List[Hashable], FrameOrSeries]'


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/groupby/ops.py----------------------------------------
A:pandas.core.groupby.ops.splitter->get_splitter(obj, group_index, ngroups, axis=0)
A:pandas.core.groupby.ops.keys->self._get_group_keys()
A:pandas.core.groupby.ops.group_keys->self._get_group_keys()
A:pandas.core.groupby.ops.(result_values, mutated)->get_splitter(obj, group_index, ngroups, axis=0).fast_apply(f, group_keys)
A:pandas.core.groupby.ops.res->res.item().item()
A:pandas.core.groupby.ops.ids->ensure_platform_int(ids)
A:pandas.core.groupby.ops.out->numpy.bincount(ids[ids != -1], minlength=ngroup)
A:pandas.core.groupby.ops.to_groupby->Index(to_groupby)
A:pandas.core.groupby.ops.(comp_ids, obs_group_ids)->self._get_compressed_codes()
A:pandas.core.groupby.ops.ngroups->len(obs_group_ids)
A:pandas.core.groupby.ops.comp_ids->numpy.repeat(np.r_[-1, np.arange(ngroups)], rep)
A:pandas.core.groupby.ops.sorter->numpy.lexsort((codes, self.indexer))
A:pandas.core.groupby.ops.group_index->pandas.core.algorithms.take_nd(group_index, indexer, allow_fill=False)
A:pandas.core.groupby.ops.result->pandas._libs.lib.maybe_convert_objects(result, try_float=0)
A:pandas.core.groupby.ops.codes->ensure_platform_int(codes)
A:pandas.core.groupby.ops.levels->ping.result_index.take(codes)
A:pandas.core.groupby.ops.f->getattr(libgroupby, ftype, None)
A:pandas.core.groupby.ops.f2->getattr(libgroupby, f'{ftype}_{dt}', None)
A:pandas.core.groupby.ops.func->self._is_builtin_func(func)
A:pandas.core.groupby.ops.values->values.astype(object).astype(object)
A:pandas.core.groupby.ops.is_datetimelike->needs_i8_conversion(values.dtype)
A:pandas.core.groupby.ops.is_numeric->is_numeric_dtype(values.dtype)
A:pandas.core.groupby.ops.arity->self._cython_arity.get(how, 1)
A:pandas.core.groupby.ops.(func, values)->self._get_cython_func_and_vals(kind, how, values, is_numeric)
A:pandas.core.groupby.ops.counts->numpy.zeros(ngroups, dtype=int)
A:pandas.core.groupby.ops.dummy->obj.take(indexer)._get_values(slice(None, 0))
A:pandas.core.groupby.ops.indexer->get_group_index_sorter(group_index, ngroups)
A:pandas.core.groupby.ops.obj->obj.take(indexer).take(indexer)
A:pandas.core.groupby.ops.grouper->pandas._libs.reduction.SeriesBinGrouper(obj, func, self.bins, dummy)
A:pandas.core.groupby.ops.(result, counts)->pandas._libs.reduction.SeriesBinGrouper(obj, func, self.bins, dummy).get_result()
A:pandas.core.groupby.ops.self.bins->ensure_int64(bins)
A:pandas.core.groupby.ops.self.binlabels->ensure_index(binlabels)
A:pandas.core.groupby.ops.length->len(data.axes[axis])
A:pandas.core.groupby.ops.indices->collections.defaultdict(list)
A:pandas.core.groupby.ops.indices[label]->list(range(i, bin))
A:pandas.core.groupby.ops.obs_group_ids->numpy.arange(ngroups)
A:pandas.core.groupby.ops.rep->ensure_platform_int(rep)
A:pandas.core.groupby.ops.self.labels->ensure_int64(labels)
A:pandas.core.groupby.ops.sdata->self._get_sorted_data()
A:pandas.core.groupby.ops.(starts, ends)->pandas._libs.lib.generate_slices(self.slabels, self.ngroups)
pandas.core.groupby.ops.BaseGrouper(self,axis:Index,groupings:'Sequence[grouper.Grouping]',sort:bool=True,group_keys:bool=True,mutated:bool=False,indexer:Optional[np.ndarray]=None)
pandas.core.groupby.ops.BaseGrouper.__init__(self,axis:Index,groupings:'Sequence[grouper.Grouping]',sort:bool=True,group_keys:bool=True,mutated:bool=False,indexer:Optional[np.ndarray]=None)
pandas.core.groupby.ops.BaseGrouper.__iter__(self)
pandas.core.groupby.ops.BaseGrouper._aggregate(self,result,counts,values,comp_ids,agg_func,is_datetimelike:bool,min_count:int=-1)
pandas.core.groupby.ops.BaseGrouper._aggregate_series_fast(self,obj:Series,func)
pandas.core.groupby.ops.BaseGrouper._aggregate_series_pure_python(self,obj:Series,func)
pandas.core.groupby.ops.BaseGrouper._cython_operation(self,kind:str,values,how:str,axis,min_count:int=-1,**kwargs)->Tuple[np.ndarray, Optional[List[str]]]
pandas.core.groupby.ops.BaseGrouper._get_compressed_codes(self)->Tuple[np.ndarray, np.ndarray]
pandas.core.groupby.ops.BaseGrouper._get_cython_func_and_vals(self,kind:str,how:str,values:np.ndarray,is_numeric:bool)
pandas.core.groupby.ops.BaseGrouper._get_cython_function(self,kind:str,how:str,values,is_numeric:bool)
pandas.core.groupby.ops.BaseGrouper._get_group_keys(self)
pandas.core.groupby.ops.BaseGrouper._get_grouper(self)
pandas.core.groupby.ops.BaseGrouper._get_splitter(self,data:FrameOrSeries,axis:int=0)->'DataSplitter'
pandas.core.groupby.ops.BaseGrouper._is_builtin_func(self,arg)
pandas.core.groupby.ops.BaseGrouper._transform(self,result,values,comp_ids,transform_func,is_datetimelike:bool,**kwargs)
pandas.core.groupby.ops.BaseGrouper.agg_series(self,obj:Series,func)
pandas.core.groupby.ops.BaseGrouper.aggregate(self,values,how:str,axis:int=0,min_count:int=-1)->Tuple[np.ndarray, Optional[List[str]]]
pandas.core.groupby.ops.BaseGrouper.apply(self,f,data:FrameOrSeries,axis:int=0)
pandas.core.groupby.ops.BaseGrouper.codes(self)->List[np.ndarray]
pandas.core.groupby.ops.BaseGrouper.codes_info(self)->np.ndarray
pandas.core.groupby.ops.BaseGrouper.get_group_levels(self)
pandas.core.groupby.ops.BaseGrouper.get_iterator(self,data:FrameOrSeries,axis:int=0)
pandas.core.groupby.ops.BaseGrouper.group_info(self)
pandas.core.groupby.ops.BaseGrouper.groupings(self)->List['grouper.Grouping']
pandas.core.groupby.ops.BaseGrouper.groups(self)
pandas.core.groupby.ops.BaseGrouper.indices(self)
pandas.core.groupby.ops.BaseGrouper.is_monotonic(self)->bool
pandas.core.groupby.ops.BaseGrouper.levels(self)->List[Index]
pandas.core.groupby.ops.BaseGrouper.names(self)
pandas.core.groupby.ops.BaseGrouper.ngroups(self)->int
pandas.core.groupby.ops.BaseGrouper.nkeys(self)->int
pandas.core.groupby.ops.BaseGrouper.reconstructed_codes(self)->List[np.ndarray]
pandas.core.groupby.ops.BaseGrouper.result_index(self)->Index
pandas.core.groupby.ops.BaseGrouper.shape(self)
pandas.core.groupby.ops.BaseGrouper.size(self)->Series
pandas.core.groupby.ops.BaseGrouper.transform(self,values,how:str,axis:int=0,**kwargs)
pandas.core.groupby.ops.BinGrouper(self,bins,binlabels,filter_empty:bool=False,mutated:bool=False,indexer=None)
pandas.core.groupby.ops.BinGrouper.__init__(self,bins,binlabels,filter_empty:bool=False,mutated:bool=False,indexer=None)
pandas.core.groupby.ops.BinGrouper._get_grouper(self)
pandas.core.groupby.ops.BinGrouper.agg_series(self,obj:Series,func)
pandas.core.groupby.ops.BinGrouper.get_iterator(self,data:FrameOrSeries,axis:int=0)
pandas.core.groupby.ops.BinGrouper.group_info(self)
pandas.core.groupby.ops.BinGrouper.groupings(self)->'List[grouper.Grouping]'
pandas.core.groupby.ops.BinGrouper.groups(self)
pandas.core.groupby.ops.BinGrouper.indices(self)
pandas.core.groupby.ops.BinGrouper.levels(self)
pandas.core.groupby.ops.BinGrouper.names(self)
pandas.core.groupby.ops.BinGrouper.nkeys(self)->int
pandas.core.groupby.ops.BinGrouper.reconstructed_codes(self)->List[np.ndarray]
pandas.core.groupby.ops.BinGrouper.result_index(self)
pandas.core.groupby.ops.DataSplitter(self,data:FrameOrSeries,labels,ngroups:int,axis:int=0)
pandas.core.groupby.ops.DataSplitter.__init__(self,data:FrameOrSeries,labels,ngroups:int,axis:int=0)
pandas.core.groupby.ops.DataSplitter.__iter__(self)
pandas.core.groupby.ops.DataSplitter._chop(self,sdata,slice_obj:slice)->NDFrame
pandas.core.groupby.ops.DataSplitter._get_sorted_data(self)->FrameOrSeries
pandas.core.groupby.ops.DataSplitter.slabels(self)
pandas.core.groupby.ops.DataSplitter.sort_idx(self)
pandas.core.groupby.ops.FrameSplitter(DataSplitter)
pandas.core.groupby.ops.FrameSplitter._chop(self,sdata:DataFrame,slice_obj:slice)->DataFrame
pandas.core.groupby.ops.FrameSplitter.fast_apply(self,f,names)
pandas.core.groupby.ops.SeriesSplitter(DataSplitter)
pandas.core.groupby.ops.SeriesSplitter._chop(self,sdata:Series,slice_obj:slice)->Series
pandas.core.groupby.ops._is_indexed_like(obj,axes)->bool
pandas.core.groupby.ops.get_splitter(data:FrameOrSeries,*args,**kwargs)->DataSplitter


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/groupby/base.py----------------------------------------
A:pandas.core.groupby.base.OutputKey->collections.namedtuple('OutputKey', ['label', 'position'])
A:pandas.core.groupby.base.self->type(self)(subset, groupby=groupby, parent=self, **kwargs)
A:pandas.core.groupby.base.plotting_methods->frozenset(['plot', 'hist'])
A:pandas.core.groupby.base.cythonized_kernels->frozenset(['cumprod', 'cumsum', 'shift', 'cummin', 'cummax'])
A:pandas.core.groupby.base.cython_cast_blacklist->frozenset(['rank', 'count', 'size', 'idxmin', 'idxmax'])
A:pandas.core.groupby.base.reduction_kernels->frozenset(['all', 'any', 'count', 'first', 'idxmax', 'idxmin', 'last', 'mad', 'max', 'mean', 'median', 'min', 'ngroup', 'nth', 'nunique', 'prod', 'quantile', 'sem', 'size', 'skew', 'std', 'sum', 'var'])
A:pandas.core.groupby.base.transformation_kernels->frozenset(['backfill', 'bfill', 'corrwith', 'cumcount', 'cummax', 'cummin', 'cumprod', 'cumsum', 'diff', 'ffill', 'fillna', 'pad', 'pct_change', 'rank', 'shift', 'tshift'])
A:pandas.core.groupby.base.groupby_other_methods->frozenset(['agg', 'aggregate', 'apply', 'boxplot', 'corr', 'cov', 'describe', 'dtypes', 'expanding', 'filter', 'get_group', 'groups', 'head', 'hist', 'indices', 'ndim', 'ngroups', 'ohlc', 'pipe', 'plot', 'resample', 'rolling', 'tail', 'take', 'transform'])
pandas.core.groupby.base.GroupByMixin
pandas.core.groupby.base.GroupByMixin._gotitem(self,key,ndim,subset=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/indexes/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/indexes/period.py----------------------------------------
A:pandas.core.indexes.period._index_doc_kwargs->dict(ibase._index_doc_kwargs)
A:pandas.core.indexes.period.values->PeriodArray(values, freq=self.freq)
A:pandas.core.indexes.period.freq->pandas._libs.tslibs.period.Period._maybe_convert_freq(freq)
A:pandas.core.indexes.period.name->maybe_extract_name(name, data, cls)
A:pandas.core.indexes.period.(data, freq2)->pandas.core.arrays.period.PeriodArray._generate_range(None, None, None, freq, fields)
A:pandas.core.indexes.period.data->PeriodArray(data, freq=freq)
A:pandas.core.indexes.period.ordinal->numpy.asarray(ordinal, dtype=np.int64)
A:pandas.core.indexes.period.result->super().memory_usage(deep=deep)
A:pandas.core.indexes.period.attributes->self._get_attributes_dict()
A:pandas.core.indexes.period.offset->pandas.tseries.frequencies.to_offset(self.freq.rule_code)
A:pandas.core.indexes.period.delta->self._data._check_timedeltalike_freq_compat(other)
A:pandas.core.indexes.period.base->pandas._libs.tslibs.frequencies.get_base_alias(freqstr)
A:pandas.core.indexes.period.period->Period(key, self.freq)
A:pandas.core.indexes.period.where_idx->PeriodIndex(where_idx.values, freq=self.freq)
A:pandas.core.indexes.period.locs->numpy.where(locs > 0, locs - 1, 0)
A:pandas.core.indexes.period.first->mask.argmax()
A:pandas.core.indexes.period.dtype->pandas_dtype(dtype)
A:pandas.core.indexes.period.tz->getattr(dtype, 'tz', None)
A:pandas.core.indexes.period.value->super().get_value(s, key)
A:pandas.core.indexes.period.s->pandas.core.common.values_from_object(series)
A:pandas.core.indexes.period.(asdt, parsed, reso)->parse_time_string(key, self.freq)
A:pandas.core.indexes.period.grp->pandas._libs.tslibs.resolution.Resolution.get_freq_group(reso)
A:pandas.core.indexes.period.freqn->pandas._libs.tslibs.resolution.get_freq_group(self.freq)
A:pandas.core.indexes.period.iv->Period(asdt, freq=(grp, 1))
A:pandas.core.indexes.period.pos->numpy.searchsorted(self._ndarray_values, [ord1, ord2])
A:pandas.core.indexes.period.key->Period(key, freq=self.freq)
A:pandas.core.indexes.period.target->ensure_index(target)
A:pandas.core.indexes.period.tolerance->pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._convert_tolerance(self, tolerance, target)
A:pandas.core.indexes.period.(indexer, missing)->self._int64index.get_indexer_non_unique(target)
A:pandas.core.indexes.period.(_, parsed, reso)->parse_time_string(label, self.freq)
A:pandas.core.indexes.period.bounds->self._parsed_string_to_bounds(reso, parsed)
A:pandas.core.indexes.period.t1->Period(year=parsed.year, month=parsed.month, day=parsed.day, hour=parsed.hour, minute=parsed.minute, second=parsed.second, freq='S')
A:pandas.core.indexes.period.(key, parsed, reso)->parse_time_string(key, self.freq)
A:pandas.core.indexes.period.(t1, t2)->self._parsed_string_to_bounds(reso, parsed)
A:pandas.core.indexes.period.idx->numpy.concatenate((self[:loc].asi8, np.array([item.ordinal]), self[loc:].asi8))
A:pandas.core.indexes.period.res_name->get_op_result_name(self, other)
A:pandas.core.indexes.period.other->other.astype('O').astype('O')
A:pandas.core.indexes.period.this->self.astype('O')
A:pandas.core.indexes.period.i8self->pandas.core.indexes.numeric.Int64Index._simple_new(self.asi8)
A:pandas.core.indexes.period.i8other->pandas.core.indexes.numeric.Int64Index._simple_new(other.asi8)
A:pandas.core.indexes.period.i8result->pandas.core.indexes.numeric.Int64Index._simple_new(self.asi8)._union(i8other, sort=sort)
A:pandas.core.indexes.period.rawarr->PeriodIndex._simple_new(rawarr, freq=self.freq, name=self.name)
A:pandas.core.indexes.period.(data, freq)->pandas.core.arrays.period.PeriodArray._generate_range(start, end, periods, freq, fields={})
pandas.core.indexes.period.PeriodDelegateMixin(DatetimelikeDelegateMixin)
pandas.core.indexes.period.PeriodIndex(cls,data=None,ordinal=None,freq=None,tz=None,dtype=None,copy=False,name=None,**fields)
pandas.core.indexes.period.PeriodIndex.__array__(self,dtype=None)->np.ndarray
pandas.core.indexes.period.PeriodIndex.__array_wrap__(self,result,context=None)
pandas.core.indexes.period.PeriodIndex.__contains__(self,key)->bool
pandas.core.indexes.period.PeriodIndex.__new__(cls,data=None,ordinal=None,freq=None,tz=None,dtype=None,copy=False,name=None,**fields)
pandas.core.indexes.period.PeriodIndex._apply_meta(self,rawarr)
pandas.core.indexes.period.PeriodIndex._assert_can_do_setop(self,other)
pandas.core.indexes.period.PeriodIndex._box_func(self)
pandas.core.indexes.period.PeriodIndex._convert_tolerance(self,tolerance,target)
pandas.core.indexes.period.PeriodIndex._engine(self)
pandas.core.indexes.period.PeriodIndex._formatter_func(self)
pandas.core.indexes.period.PeriodIndex._get_string_slice(self,key)
pandas.core.indexes.period.PeriodIndex._has_complex_internals(self)
pandas.core.indexes.period.PeriodIndex._int64index(self)
pandas.core.indexes.period.PeriodIndex._maybe_cast_slice_bound(self,label,side,kind)
pandas.core.indexes.period.PeriodIndex._maybe_convert_timedelta(self,other)
pandas.core.indexes.period.PeriodIndex._mpl_repr(self)
pandas.core.indexes.period.PeriodIndex._parsed_string_to_bounds(self,reso,parsed)
pandas.core.indexes.period.PeriodIndex._shallow_copy(self,values=None,**kwargs)
pandas.core.indexes.period.PeriodIndex._shallow_copy_with_infer(self,values=None,**kwargs)
pandas.core.indexes.period.PeriodIndex._simple_new(cls,values,name=None,freq=None,**kwargs)
pandas.core.indexes.period.PeriodIndex._union(self,other,sort)
pandas.core.indexes.period.PeriodIndex.asof_locs(self,where,mask)
pandas.core.indexes.period.PeriodIndex.astype(self,dtype,copy=True,how='start')
pandas.core.indexes.period.PeriodIndex.difference(self,other,sort=None)
pandas.core.indexes.period.PeriodIndex.get_indexer(self,target,method=None,limit=None,tolerance=None)
pandas.core.indexes.period.PeriodIndex.get_indexer_non_unique(self,target)
pandas.core.indexes.period.PeriodIndex.get_loc(self,key,method=None,tolerance=None)
pandas.core.indexes.period.PeriodIndex.get_value(self,series,key)
pandas.core.indexes.period.PeriodIndex.inferred_type(self)->str
pandas.core.indexes.period.PeriodIndex.insert(self,loc,item)
pandas.core.indexes.period.PeriodIndex.intersection(self,other,sort=False)
pandas.core.indexes.period.PeriodIndex.is_full(self)->bool
pandas.core.indexes.period.PeriodIndex.join(self,other,how='left',level=None,return_indexers=False,sort=False)
pandas.core.indexes.period.PeriodIndex.memory_usage(self,deep=False)
pandas.core.indexes.period.PeriodIndex.searchsorted(self,value,side='left',sorter=None)
pandas.core.indexes.period.PeriodIndex.values(self)
pandas.core.indexes.period._new_PeriodIndex(cls,**d)
pandas.core.indexes.period.period_range(start=None,end=None,periods=None,freq=None,name=None)->PeriodIndex


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/indexes/datetimelike.py----------------------------------------
A:pandas.core.indexes.datetimelike._index_doc_kwargs->dict(ibase._index_doc_kwargs)
A:pandas.core.indexes.datetimelike.left->left.view('i8').view('i8')
A:pandas.core.indexes.datetimelike.right->right.view('i8').view('i8')
A:pandas.core.indexes.datetimelike.results->joinf(left, right)
A:pandas.core.indexes.datetimelike.join_index->join_index.view(dtype).view(dtype)
A:pandas.core.indexes.datetimelike.hasnans->cache_readonly(DatetimeLikeArrayMixin._hasnans.fget)
A:pandas.core.indexes.datetimelike.result->Index(result, name=self.name)
A:pandas.core.indexes.datetimelike.attrs->super()._format_attrs()
A:pandas.core.indexes.datetimelike.other->other.tz_convert('UTC').tz_convert('UTC')
A:pandas.core.indexes.datetimelike.res->self.get_loc(key)
A:pandas.core.indexes.datetimelike._as->self.argsort()
A:pandas.core.indexes.datetimelike.sorted_index->self.take(_as)
A:pandas.core.indexes.datetimelike.sorted_values->numpy.sort(self.asi8)
A:pandas.core.indexes.datetimelike.attribs->self._get_attributes_dict()
A:pandas.core.indexes.datetimelike.indices->ensure_int64(indices)
A:pandas.core.indexes.datetimelike.maybe_slice->pandas._libs.lib.maybe_indices_to_slice(indices, len(self))
A:pandas.core.indexes.datetimelike.tolerance->numpy.asarray(to_timedelta(tolerance).to_numpy())
A:pandas.core.indexes.datetimelike.min_stamp->i8.copy().min()
A:pandas.core.indexes.datetimelike.i8->i8.copy().copy()
A:pandas.core.indexes.datetimelike.max_stamp->i8.copy().copy().max()
A:pandas.core.indexes.datetimelike.freq->to_offset(self.inferred_freq)
A:pandas.core.indexes.datetimelike.is_int->is_integer(key)
A:pandas.core.indexes.datetimelike.is_flt->is_float(key)
A:pandas.core.indexes.datetimelike.__add__->make_wrapped_arith_op('__add__')
A:pandas.core.indexes.datetimelike.__radd__->make_wrapped_arith_op('__radd__')
A:pandas.core.indexes.datetimelike.__sub__->make_wrapped_arith_op('__sub__')
A:pandas.core.indexes.datetimelike.__rsub__->make_wrapped_arith_op('__rsub__')
A:pandas.core.indexes.datetimelike.__pow__->make_wrapped_arith_op('__pow__')
A:pandas.core.indexes.datetimelike.__rpow__->make_wrapped_arith_op('__rpow__')
A:pandas.core.indexes.datetimelike.__mul__->make_wrapped_arith_op('__mul__')
A:pandas.core.indexes.datetimelike.__rmul__->make_wrapped_arith_op('__rmul__')
A:pandas.core.indexes.datetimelike.__floordiv__->make_wrapped_arith_op('__floordiv__')
A:pandas.core.indexes.datetimelike.__rfloordiv__->make_wrapped_arith_op('__rfloordiv__')
A:pandas.core.indexes.datetimelike.__mod__->make_wrapped_arith_op('__mod__')
A:pandas.core.indexes.datetimelike.__rmod__->make_wrapped_arith_op('__rmod__')
A:pandas.core.indexes.datetimelike.__divmod__->make_wrapped_arith_op('__divmod__')
A:pandas.core.indexes.datetimelike.__rdivmod__->make_wrapped_arith_op('__rdivmod__')
A:pandas.core.indexes.datetimelike.__truediv__->make_wrapped_arith_op('__truediv__')
A:pandas.core.indexes.datetimelike.__rtruediv__->make_wrapped_arith_op('__rtruediv__')
A:pandas.core.indexes.datetimelike.values->self.view('i8')
A:pandas.core.indexes.datetimelike.new_i8s->numpy.delete(self.asi8, loc)
A:pandas.core.indexes.datetimelike.loc->right.view('i8').view('i8').searchsorted(left_end, side='right')
A:pandas.core.indexes.datetimelike.attributes->self._get_attributes_dict()
A:pandas.core.indexes.datetimelike.new_idx->super().difference(other, sort=sort)
A:pandas.core.indexes.datetimelike.end->min(left[-1], right[-1])
A:pandas.core.indexes.datetimelike.lslice->slice(*left.slice_locs(start, end))
A:pandas.core.indexes.datetimelike.dates->concat_compat((left.values, right_chunk))
A:pandas.core.indexes.datetimelike.(this, other)->self._maybe_utc_convert(other)
A:pandas.core.indexes.datetimelike._inner_indexer->_join_i8_wrapper(libjoin.inner_join_indexer)
A:pandas.core.indexes.datetimelike._outer_indexer->_join_i8_wrapper(libjoin.outer_join_indexer)
A:pandas.core.indexes.datetimelike._left_indexer->_join_i8_wrapper(libjoin.left_join_indexer)
A:pandas.core.indexes.datetimelike._left_indexer_unique->_join_i8_wrapper(libjoin.left_join_indexer_unique, with_indexers=False)
A:pandas.core.indexes.datetimelike.this->self.tz_convert('UTC')
A:pandas.core.indexes.datetimelike.name->get_op_result_name(self, other)
A:pandas.core.indexes.datetimelike.new_data->type(self._data)._simple_new(joined, dtype=self.dtype, freq=freq)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin(ExtensionIndex)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.__array_wrap__(self,result,context=None)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.__contains__(self,key)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._concat_same_dtype(self,to_concat,name)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._convert_scalar_indexer(self,key,kind=None)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._convert_tolerance(self,tolerance,target)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._format_attrs(self)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._format_with_header(self,header,na_rep='NaT',**kwargs)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._formatter_func(self)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._summary(self,name=None)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.argmax(self,axis=None,skipna=True,*args,**kwargs)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.argmin(self,axis=None,skipna=True,*args,**kwargs)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.delete(self,loc)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.equals(self,other)->bool
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.is_all_dates(self)->bool
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.isin(self,values,level=None)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.max(self,axis=None,skipna=True,*args,**kwargs)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.min(self,axis=None,skipna=True,*args,**kwargs)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.shift(self,periods=1,freq=None)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.sort_values(self,return_indexer=False,ascending=True)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.take(self,indices,axis=0,allow_fill=True,fill_value=None,**kwargs)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.tolist(self)->List
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.values(self)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.where(self,cond,other=None)
pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin(DatetimeIndexOpsMixin,Int64Index)
pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._can_fast_union(self,other)->bool
pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._fast_union(self,other,sort=None)
pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._is_convertible_to_index_for_join(cls,other:Index)->bool
pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._maybe_utc_convert(self,other)
pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._set_freq(self,freq)
pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._shallow_copy(self,values=None,**kwargs)
pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._union(self,other,sort)
pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._wrap_joined_index(self,joined:np.ndarray,other)
pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin.difference(self,other,sort=None)
pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin.intersection(self,other,sort=False)
pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin.join(self,other,how:str='left',level=None,return_indexers=False,sort=False)
pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin(PandasDelegate)
pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin._delegate_method(self,name,*args,**kwargs)
pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin._delegate_property_get(self,name,*args,**kwargs)
pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin._delegate_property_set(self,name,value,*args,**kwargs)
pandas.core.indexes.datetimelike._join_i8_wrapper(joinf,with_indexers:bool=True)
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin(ExtensionIndex)
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin.__array_wrap__(self,result,context=None)
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin.__contains__(self,key)
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin._concat_same_dtype(self,to_concat,name)
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin._convert_scalar_indexer(self,key,kind=None)
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin._convert_tolerance(self,tolerance,target)
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin._format_attrs(self)
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin._format_with_header(self,header,na_rep='NaT',**kwargs)
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin._formatter_func(self)
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin._summary(self,name=None)
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin.argmax(self,axis=None,skipna=True,*args,**kwargs)
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin.argmin(self,axis=None,skipna=True,*args,**kwargs)
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin.delete(self,loc)
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin.equals(self,other)->bool
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin.is_all_dates(self)->bool
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin.isin(self,values,level=None)
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin.max(self,axis=None,skipna=True,*args,**kwargs)
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin.min(self,axis=None,skipna=True,*args,**kwargs)
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin.shift(self,periods=1,freq=None)
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin.sort_values(self,return_indexer=False,ascending=True)
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin.take(self,indices,axis=0,allow_fill=True,fill_value=None,**kwargs)
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin.tolist(self)->List
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin.values(self)
pandas.core.indexes.dtlike.DatetimeIndexOpsMixin.where(self,cond,other=None)
pandas.core.indexes.dtlike.DatetimeTimedeltaMixin(DatetimeIndexOpsMixin,Int64Index)
pandas.core.indexes.dtlike.DatetimeTimedeltaMixin._can_fast_union(self,other)->bool
pandas.core.indexes.dtlike.DatetimeTimedeltaMixin._fast_union(self,other,sort=None)
pandas.core.indexes.dtlike.DatetimeTimedeltaMixin._is_convertible_to_index_for_join(cls,other:Index)->bool
pandas.core.indexes.dtlike.DatetimeTimedeltaMixin._maybe_utc_convert(self,other)
pandas.core.indexes.dtlike.DatetimeTimedeltaMixin._set_freq(self,freq)
pandas.core.indexes.dtlike.DatetimeTimedeltaMixin._shallow_copy(self,values=None,**kwargs)
pandas.core.indexes.dtlike.DatetimeTimedeltaMixin._union(self,other,sort)
pandas.core.indexes.dtlike.DatetimeTimedeltaMixin._wrap_joined_index(self,joined:np.ndarray,other)
pandas.core.indexes.dtlike.DatetimeTimedeltaMixin.difference(self,other,sort=None)
pandas.core.indexes.dtlike.DatetimeTimedeltaMixin.intersection(self,other,sort=False)
pandas.core.indexes.dtlike.DatetimeTimedeltaMixin.join(self,other,how:str='left',level=None,return_indexers=False,sort=False)
pandas.core.indexes.dtlike.DatetimelikeDelegateMixin(PandasDelegate)
pandas.core.indexes.dtlike.DatetimelikeDelegateMixin._delegate_method(self,name,*args,**kwargs)
pandas.core.indexes.dtlike.DatetimelikeDelegateMixin._delegate_property_get(self,name,*args,**kwargs)
pandas.core.indexes.dtlike.DatetimelikeDelegateMixin._delegate_property_set(self,name,value,*args,**kwargs)
pandas.core.indexes.dtlike._join_i8_wrapper(joinf,with_indexers:bool=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/indexes/datetimes.py----------------------------------------
A:pandas.core.indexes.datetimes.data->pandas._libs.tslibs.ccalendar.get_days_in_month(parsed.year, qe).pop('data')
A:pandas.core.indexes.datetimes.result->object.__new__(cls)
A:pandas.core.indexes.datetimes._raw_methods->set(_extra_raw_methods)
A:pandas.core.indexes.datetimes.name->get_op_result_name(self, other)
A:pandas.core.indexes.datetimes.dtarr->pandas.core.arrays.datetimes.DatetimeArray._generate_range(start=start, end=end, periods=periods, freq=freq, tz=tz, normalize=normalize, closed=closed, **kwargs)
A:pandas.core.indexes.datetimes.subarr->cls._simple_new(dtarr, name=name, freq=dtarr.freq, tz=dtarr.tz)
A:pandas.core.indexes.datetimes.tz->validate_tz_from_dtype(dtype, tz)
A:pandas.core.indexes.datetimes.dtype->tz_to_dtype(tz)
A:pandas.core.indexes.datetimes.values->self._engine.get_value(com.values_from_object(series), key, tz=self.tz)
A:pandas.core.indexes.datetimes.d->pandas._libs.tslibs.ccalendar.get_days_in_month(parsed.year, qe)
A:pandas.core.indexes.datetimes.formatter->_get_format_datetime64(is_dates_only=self._is_dates_only)
A:pandas.core.indexes.datetimes.this->pandas.core.indexes.base.Index.union(this, other)
A:pandas.core.indexes.datetimes.other->DatetimeIndex(other)
A:pandas.core.indexes.datetimes.(this, other)->pandas.core.indexes.base.Index.union(this, other)._maybe_utc_convert(other)
A:pandas.core.indexes.datetimes.index->self._shallow_copy()
A:pandas.core.indexes.datetimes.freq->prefix_mapping[freq](holidays=holidays, weekmask=weekmask)
A:pandas.core.indexes.datetimes.snapped->numpy.empty(len(self), dtype=_NS_DTYPE)
A:pandas.core.indexes.datetimes.t0->prefix_mapping[freq](holidays=holidays, weekmask=weekmask).rollback(s)
A:pandas.core.indexes.datetimes.t1->prefix_mapping[freq](holidays=holidays, weekmask=weekmask).rollforward(s)
A:pandas.core.indexes.datetimes.start->datetime.datetime.combine(start, time(0, 0))
A:pandas.core.indexes.datetimes.end->datetime.datetime.combine(end, time(0, 0))
A:pandas.core.indexes.datetimes.(t1, t2)->self._parsed_string_to_bounds(reso, parsed)
A:pandas.core.indexes.datetimes.locs->self.indexer_at_time(key)
A:pandas.core.indexes.datetimes.value->self._data._scalar_type(value)
A:pandas.core.indexes.datetimes.loc->self._partial_date_slice(reso, parsed, use_lhs=use_lhs, use_rhs=use_rhs)
A:pandas.core.indexes.datetimes.key->Timestamp(key).tz_convert(self.tz)
A:pandas.core.indexes.datetimes.tolerance->self._convert_tolerance(tolerance, np.asarray(key))
A:pandas.core.indexes.datetimes.stamp->stamp.tz_localize(self.tz).tz_localize(self.tz)
A:pandas.core.indexes.datetimes.(_, parsed, reso)->pandas._libs.tslibs.parsing.parse_time_string(key, freq)
A:pandas.core.indexes.datetimes.(lower, upper)->self._parsed_string_to_bounds(reso, parsed)
A:pandas.core.indexes.datetimes.start_casted->self._maybe_cast_slice_bound(start, 'left', kind)
A:pandas.core.indexes.datetimes.end_casted->self._maybe_cast_slice_bound(end, 'right', kind)
A:pandas.core.indexes.datetimes.item->self._data._scalar_type(item)
A:pandas.core.indexes.datetimes.new_i8s->numpy.concatenate((self[:loc].asi8, [item.view(np.int64)], self[loc:].asi8))
A:pandas.core.indexes.datetimes.time->parse(time).time()
A:pandas.core.indexes.datetimes.time_micros->self._get_time_micros()
A:pandas.core.indexes.datetimes.micros->_time_to_micros(time)
A:pandas.core.indexes.datetimes.start_time->pandas.core.tools.datetimes.to_time(start_time)
A:pandas.core.indexes.datetimes.end_time->pandas.core.tools.datetimes.to_time(end_time)
A:pandas.core.indexes.datetimes.start_micros->_time_to_micros(start_time)
A:pandas.core.indexes.datetimes.end_micros->_time_to_micros(end_time)
A:pandas.core.indexes.datetimes.mask->join_op(lop(start_micros, time_micros), rop(time_micros, end_micros))
pandas.core.indexes.datetimes.DatetimeDelegateMixin(DatetimelikeDelegateMixin)
pandas.core.indexes.datetimes.DatetimeIndex(cls,data=None,freq=None,tz=None,normalize=False,closed=None,ambiguous='raise',dayfirst=False,yearfirst=False,dtype=None,copy=False,name=None)
pandas.core.indexes.datetimes.DatetimeIndex.__array__(self,dtype=None)->np.ndarray
pandas.core.indexes.datetimes.DatetimeIndex.__new__(cls,data=None,freq=None,tz=None,normalize=False,closed=None,ambiguous='raise',dayfirst=False,yearfirst=False,dtype=None,copy=False,name=None)
pandas.core.indexes.datetimes.DatetimeIndex.__reduce__(self)
pandas.core.indexes.datetimes.DatetimeIndex._convert_for_op(self,value)
pandas.core.indexes.datetimes.DatetimeIndex._formatter_func(self)
pandas.core.indexes.datetimes.DatetimeIndex._get_string_slice(self,key:str,use_lhs:bool=True,use_rhs:bool=True)
pandas.core.indexes.datetimes.DatetimeIndex._get_time_micros(self)
pandas.core.indexes.datetimes.DatetimeIndex._is_dates_only(self)->bool
pandas.core.indexes.datetimes.DatetimeIndex._maybe_cast_slice_bound(self,label,side,kind)
pandas.core.indexes.datetimes.DatetimeIndex._maybe_promote(self,other)
pandas.core.indexes.datetimes.DatetimeIndex._mpl_repr(self)
pandas.core.indexes.datetimes.DatetimeIndex._parsed_string_to_bounds(self,reso,parsed)
pandas.core.indexes.datetimes.DatetimeIndex._partial_date_slice(self,reso:str,parsed,use_lhs:bool=True,use_rhs:bool=True)
pandas.core.indexes.datetimes.DatetimeIndex._simple_new(cls,values,name=None,freq=None,tz=None,dtype=None)
pandas.core.indexes.datetimes.DatetimeIndex._wrap_setop_result(self,other,result)
pandas.core.indexes.datetimes.DatetimeIndex.get_loc(self,key,method=None,tolerance=None)
pandas.core.indexes.datetimes.DatetimeIndex.get_value(self,series,key)
pandas.core.indexes.datetimes.DatetimeIndex.get_value_maybe_box(self,series,key)
pandas.core.indexes.datetimes.DatetimeIndex.indexer_at_time(self,time,asof=False)
pandas.core.indexes.datetimes.DatetimeIndex.indexer_between_time(self,start_time,end_time,include_start=True,include_end=True)
pandas.core.indexes.datetimes.DatetimeIndex.inferred_type(self)->str
pandas.core.indexes.datetimes.DatetimeIndex.insert(self,loc,item)
pandas.core.indexes.datetimes.DatetimeIndex.is_type_compatible(self,typ)->bool
pandas.core.indexes.datetimes.DatetimeIndex.searchsorted(self,value,side='left',sorter=None)
pandas.core.indexes.datetimes.DatetimeIndex.slice_indexer(self,start=None,end=None,step=None,kind=None)
pandas.core.indexes.datetimes.DatetimeIndex.snap(self,freq='S')
pandas.core.indexes.datetimes.DatetimeIndex.to_series(self,keep_tz=lib.no_default,index=None,name=None)
pandas.core.indexes.datetimes.DatetimeIndex.union_many(self,others)
pandas.core.indexes.datetimes._new_DatetimeIndex(cls,d)
pandas.core.indexes.datetimes._time_to_micros(time)
pandas.core.indexes.datetimes.bdate_range(start=None,end=None,periods=None,freq='B',tz=None,normalize=True,name=None,weekmask=None,holidays=None,closed=None,**kwargs)->DatetimeIndex
pandas.core.indexes.datetimes.date_range(start=None,end=None,periods=None,freq=None,tz=None,normalize=False,name=None,closed=None,**kwargs)->DatetimeIndex
pandas.core.indexes.dts.DatetimeDelegateMixin(DatetimelikeDelegateMixin)
pandas.core.indexes.dts.DatetimeIndex(cls,data=None,freq=None,tz=None,normalize=False,closed=None,ambiguous='raise',dayfirst=False,yearfirst=False,dtype=None,copy=False,name=None)
pandas.core.indexes.dts.DatetimeIndex.__array__(self,dtype=None)->np.ndarray
pandas.core.indexes.dts.DatetimeIndex.__reduce__(self)
pandas.core.indexes.dts.DatetimeIndex._convert_for_op(self,value)
pandas.core.indexes.dts.DatetimeIndex._formatter_func(self)
pandas.core.indexes.dts.DatetimeIndex._get_string_slice(self,key:str,use_lhs:bool=True,use_rhs:bool=True)
pandas.core.indexes.dts.DatetimeIndex._get_time_micros(self)
pandas.core.indexes.dts.DatetimeIndex._is_dates_only(self)->bool
pandas.core.indexes.dts.DatetimeIndex._maybe_cast_slice_bound(self,label,side,kind)
pandas.core.indexes.dts.DatetimeIndex._maybe_promote(self,other)
pandas.core.indexes.dts.DatetimeIndex._mpl_repr(self)
pandas.core.indexes.dts.DatetimeIndex._parsed_string_to_bounds(self,reso,parsed)
pandas.core.indexes.dts.DatetimeIndex._partial_date_slice(self,reso:str,parsed,use_lhs:bool=True,use_rhs:bool=True)
pandas.core.indexes.dts.DatetimeIndex._simple_new(cls,values,name=None,freq=None,tz=None,dtype=None)
pandas.core.indexes.dts.DatetimeIndex._wrap_setop_result(self,other,result)
pandas.core.indexes.dts.DatetimeIndex.get_loc(self,key,method=None,tolerance=None)
pandas.core.indexes.dts.DatetimeIndex.get_value(self,series,key)
pandas.core.indexes.dts.DatetimeIndex.get_value_maybe_box(self,series,key)
pandas.core.indexes.dts.DatetimeIndex.indexer_at_time(self,time,asof=False)
pandas.core.indexes.dts.DatetimeIndex.indexer_between_time(self,start_time,end_time,include_start=True,include_end=True)
pandas.core.indexes.dts.DatetimeIndex.inferred_type(self)->str
pandas.core.indexes.dts.DatetimeIndex.insert(self,loc,item)
pandas.core.indexes.dts.DatetimeIndex.is_type_compatible(self,typ)->bool
pandas.core.indexes.dts.DatetimeIndex.searchsorted(self,value,side='left',sorter=None)
pandas.core.indexes.dts.DatetimeIndex.slice_indexer(self,start=None,end=None,step=None,kind=None)
pandas.core.indexes.dts.DatetimeIndex.snap(self,freq='S')
pandas.core.indexes.dts.DatetimeIndex.to_series(self,keep_tz=lib.no_default,index=None,name=None)
pandas.core.indexes.dts.DatetimeIndex.union_many(self,others)
pandas.core.indexes.dts._new_DatetimeIndex(cls,d)
pandas.core.indexes.dts._time_to_micros(time)
pandas.core.indexes.dts.bdate_range(start=None,end=None,periods=None,freq='B',tz=None,normalize=True,name=None,weekmask=None,holidays=None,closed=None,**kwargs)->DatetimeIndex
pandas.core.indexes.dts.date_range(start=None,end=None,periods=None,freq=None,tz=None,normalize=False,name=None,closed=None,**kwargs)->DatetimeIndex


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/indexes/extension.py----------------------------------------
A:pandas.core.indexes.extension.attr->getattr(delegate, name)
A:pandas.core.indexes.extension.method->property(fget, fset)
A:pandas.core.indexes.extension.result->Index(result)
A:pandas.core.indexes.extension.meth->getattr(self._data, opname)
A:pandas.core.indexes.extension.other->_maybe_unwrap_index(other)
A:pandas.core.indexes.extension.op->getattr(self._data, opname)
A:pandas.core.indexes.extension.res_name->get_op_result_name(self, other)
A:pandas.core.indexes.extension.__eq__->_make_wrapped_comparison_op('__eq__')
A:pandas.core.indexes.extension.__ne__->_make_wrapped_comparison_op('__ne__')
A:pandas.core.indexes.extension.__lt__->_make_wrapped_comparison_op('__lt__')
A:pandas.core.indexes.extension.__gt__->_make_wrapped_comparison_op('__gt__')
A:pandas.core.indexes.extension.__le__->_make_wrapped_comparison_op('__le__')
A:pandas.core.indexes.extension.__ge__->_make_wrapped_comparison_op('__ge__')
A:pandas.core.indexes.extension.indices->ensure_platform_int(indices)
A:pandas.core.indexes.extension.taken->self._assert_take_fillable(self._data, indices, allow_fill=allow_fill, fill_value=fill_value, na_value=self._na_value)
A:pandas.core.indexes.extension.new_values->self._data.astype(dtype, copy=copy)
pandas.core.indexes.extension.ExtensionIndex(Index)
pandas.core.indexes.extension.ExtensionIndex.__getitem__(self,key)
pandas.core.indexes.extension.ExtensionIndex.__iter__(self)
pandas.core.indexes.extension.ExtensionIndex._get_unique_index(self,dropna=False)
pandas.core.indexes.extension.ExtensionIndex._ndarray_values(self)->np.ndarray
pandas.core.indexes.extension.ExtensionIndex.astype(self,dtype,copy=True)
pandas.core.indexes.extension.ExtensionIndex.dropna(self,how='any')
pandas.core.indexes.extension.ExtensionIndex.map(self,mapper,na_action=None)
pandas.core.indexes.extension.ExtensionIndex.repeat(self,repeats,axis=None)
pandas.core.indexes.extension.ExtensionIndex.take(self,indices,axis=0,allow_fill=True,fill_value=None,**kwargs)
pandas.core.indexes.extension.ExtensionIndex.unique(self,level=None)
pandas.core.indexes.extension._make_wrapped_comparison_op(opname)
pandas.core.indexes.extension._maybe_unwrap_index(obj)
pandas.core.indexes.extension._wrap_arithmetic_op(self,other,result)
pandas.core.indexes.extension.inherit_from_data(name:str,delegate,cache:bool=False,wrap:bool=False)
pandas.core.indexes.extension.inherit_names(names:List[str],delegate,cache:bool=False,wrap:bool=False)
pandas.core.indexes.extension.make_wrapped_arith_op(opname)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/indexes/api.py----------------------------------------
A:pandas.core.indexes.api._sort_msg->textwrap.dedent("Sorting because non-concatenation axis is not aligned. A future version\nof pandas will change to not sort by default.\n\nTo accept the future behavior, pass 'sort=False'.\n\nTo retain the current behavior and silence the warning, pass 'sort=True'.\n")
A:pandas.core.indexes.api.indexes->_get_distinct_objs(indexes)
A:pandas.core.indexes.api.index->index._shallow_copy(name=name)._shallow_copy(name=name)
A:pandas.core.indexes.api.result->result.union(other).union(other)
A:pandas.core.indexes.api.(indexes, kind)->_sanitize_and_check(indexes)
A:pandas.core.indexes.api.i->i.tolist().tolist()
A:pandas.core.indexes.api.kinds->list({type(index) for index in indexes})
pandas.core.indexes.api._get_combined_index(indexes:List[Index],intersect:bool=False,sort:bool=False)->Index
pandas.core.indexes.api._get_distinct_objs(objs:List[Index])->List[Index]
pandas.core.indexes.api._sanitize_and_check(indexes)
pandas.core.indexes.api.all_indexes_same(indexes)
pandas.core.indexes.api.get_consensus_names(indexes)
pandas.core.indexes.api.get_objs_combined_axis(objs,intersect:bool=False,axis=0,sort:bool=True)->Index
pandas.core.indexes.api.union_indexes(indexes,sort=True)->Index


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/indexes/category.py----------------------------------------
A:pandas.core.indexes.category._index_doc_kwargs->dict(ibase._index_doc_kwargs)
A:pandas.core.indexes.category.dtype->self.dtype.update_dtype(dtype)
A:pandas.core.indexes.category.name->get_op_result_name(self, other)
A:pandas.core.indexes.category.data->data._set_dtype(dtype)._set_dtype(dtype)
A:pandas.core.indexes.category.cat->Categorical(values, dtype=self.dtype)
A:pandas.core.indexes.category.result->self._create_from_codes(codes, name=name)
A:pandas.core.indexes.category.values->numpy.where(cond, self.values, other)
A:pandas.core.indexes.category.other->self._is_dtype_compat(other)
A:pandas.core.indexes.category.codes->numpy.concatenate([self._is_dtype_compat(c).codes for c in to_concat])
A:pandas.core.indexes.category.code->self.categories.get_indexer([item])
A:pandas.core.indexes.category.k->self._convert_scalar_indexer(k, kind='getitem')
A:pandas.core.indexes.category.indexer->self.categories.get_indexer(np.asarray(keyarr))
A:pandas.core.indexes.category.target->pandas.core.indexes.base.ensure_index(target)
A:pandas.core.indexes.category.(indexer, missing)->self._engine.get_indexer_non_unique(codes)
A:pandas.core.indexes.category.new_target->self._shallow_copy(new_target)
A:pandas.core.indexes.category.cats->self.categories.get_indexer(target)
A:pandas.core.indexes.category.(new_target, indexer, _)->self._create_from_codes(codes, name=name)._reindex_non_unique(np.array(target))
A:pandas.core.indexes.category.(new_target, indexer)->self.reindex(target)
A:pandas.core.indexes.category.new_indexer->numpy.arange(len(self.take(indexer)))
A:pandas.core.indexes.category.method->getattr(self._values, name)
A:pandas.core.indexes.category.code_indexer->self.categories.get_indexer(target.categories)
A:pandas.core.indexes.category.(indexer, _)->self._engine.get_indexer_non_unique(codes)
A:pandas.core.indexes.category.keyarr->pandas.core.common.asarray_tuplesafe(keyarr)
A:pandas.core.indexes.category.prop->getattr(self._values, name)
A:pandas.core.indexes.category.res->method(*args, **kwargs)
pandas.core.indexes.category.CategoricalIndex(cls,data=None,categories=None,ordered=None,dtype=None,copy=False,name=None)
pandas.core.indexes.category.CategoricalIndex.__array__(self,dtype=None)->np.ndarray
pandas.core.indexes.category.CategoricalIndex.__contains__(self,key)->bool
pandas.core.indexes.category.CategoricalIndex.__new__(cls,data=None,categories=None,ordered=None,dtype=None,copy=False,name=None)
pandas.core.indexes.category.CategoricalIndex._concat(self,to_concat,name)
pandas.core.indexes.category.CategoricalIndex._concat_same_dtype(self,to_concat,name)
pandas.core.indexes.category.CategoricalIndex._convert_arr_indexer(self,keyarr)
pandas.core.indexes.category.CategoricalIndex._convert_index_indexer(self,keyarr)
pandas.core.indexes.category.CategoricalIndex._convert_list_indexer(self,keyarr,kind=None)
pandas.core.indexes.category.CategoricalIndex._convert_scalar_indexer(self,key,kind=None)
pandas.core.indexes.category.CategoricalIndex._create_categorical(cls,data,dtype=None)
pandas.core.indexes.category.CategoricalIndex._create_from_codes(self,codes,dtype=None,name=None)
pandas.core.indexes.category.CategoricalIndex._delegate_method(self,name,*args,**kwargs)
pandas.core.indexes.category.CategoricalIndex._delegate_property_get(self,name,*args,**kwargs)
pandas.core.indexes.category.CategoricalIndex._engine(self)
pandas.core.indexes.category.CategoricalIndex._engine_type(self)
pandas.core.indexes.category.CategoricalIndex._format_attrs(self)
pandas.core.indexes.category.CategoricalIndex._formatter_func(self)
pandas.core.indexes.category.CategoricalIndex._has_complex_internals(self)
pandas.core.indexes.category.CategoricalIndex._is_dtype_compat(self,other)->bool
pandas.core.indexes.category.CategoricalIndex._isnan(self)
pandas.core.indexes.category.CategoricalIndex._maybe_cast_slice_bound(self,label,side,kind)
pandas.core.indexes.category.CategoricalIndex._reindex_non_unique(self,target)
pandas.core.indexes.category.CategoricalIndex._shallow_copy(self,values=None,dtype=None,**kwargs)
pandas.core.indexes.category.CategoricalIndex._simple_new(cls,values,name=None,dtype=None)
pandas.core.indexes.category.CategoricalIndex._to_safe_for_reshape(self)
pandas.core.indexes.category.CategoricalIndex._wrap_setop_result(self,other,result)
pandas.core.indexes.category.CategoricalIndex.astype(self,dtype,copy=True)
pandas.core.indexes.category.CategoricalIndex.delete(self,loc)
pandas.core.indexes.category.CategoricalIndex.duplicated(self,keep='first')
pandas.core.indexes.category.CategoricalIndex.equals(self,other)
pandas.core.indexes.category.CategoricalIndex.fillna(self,value,downcast=None)
pandas.core.indexes.category.CategoricalIndex.get_indexer(self,target,method=None,limit=None,tolerance=None)
pandas.core.indexes.category.CategoricalIndex.get_indexer_non_unique(self,target)
pandas.core.indexes.category.CategoricalIndex.get_loc(self,key,method=None)
pandas.core.indexes.category.CategoricalIndex.get_value(self,series:AnyArrayLike,key:Any)
pandas.core.indexes.category.CategoricalIndex.inferred_type(self)->str
pandas.core.indexes.category.CategoricalIndex.insert(self,loc,item)
pandas.core.indexes.category.CategoricalIndex.is_monotonic_decreasing(self)->bool
pandas.core.indexes.category.CategoricalIndex.is_monotonic_increasing(self)
pandas.core.indexes.category.CategoricalIndex.is_unique(self)->bool
pandas.core.indexes.category.CategoricalIndex.map(self,mapper)
pandas.core.indexes.category.CategoricalIndex.reindex(self,target,method=None,level=None,limit=None,tolerance=None)
pandas.core.indexes.category.CategoricalIndex.take_nd(self,*args,**kwargs)
pandas.core.indexes.category.CategoricalIndex.unique(self,level=None)
pandas.core.indexes.category.CategoricalIndex.values(self)
pandas.core.indexes.category.CategoricalIndex.where(self,cond,other=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/indexes/multi.py----------------------------------------
A:pandas.core.indexes.multi._index_doc_kwargs->dict(ibase._index_doc_kwargs)
A:pandas.core.indexes.multi._names->FrozenList()
A:pandas.core.indexes.multi._levels->FrozenList()
A:pandas.core.indexes.multi._codes->FrozenList()
A:pandas.core.indexes.multi.result->Series(Index(indexer).isin(r).nonzero()[0])
A:pandas.core.indexes.multi.result.sortorder->int(sortorder)
A:pandas.core.indexes.multi.new_codes->list(self.codes)
A:pandas.core.indexes.multi.null_mask->isna(level)
A:pandas.core.indexes.multi.code->self._get_loc_single_level_index(level_index, key)
A:pandas.core.indexes.multi.codes_length->len(codes[0])
A:pandas.core.indexes.multi.arrays->zip(*tuples)
A:pandas.core.indexes.multi.(codes, levels)->factorize_from_iterables(iterables)
A:pandas.core.indexes.multi.tuples->list(tuples)
A:pandas.core.indexes.multi.iterables->list(iterables)
A:pandas.core.indexes.multi.codes->list(self.codes)
A:pandas.core.indexes.multi.(column_names, columns)->zip(*df.items())
A:pandas.core.indexes.multi.new_levels->list(self.levels)
A:pandas.core.indexes.multi.new_levels[lev_num]->ensure_index(lev, copy=copy)._shallow_copy()
A:pandas.core.indexes.multi.levels->state.get('levels')
A:pandas.core.indexes.multi.idx->self._get_loc_single_level_index(lev, lab)
A:pandas.core.indexes.multi.new_codes[lev_num]->_coerce_indexer_frozen(level_codes, lev, copy=copy)
A:pandas.core.indexes.multi.name->kwargs.get('name')
A:pandas.core.indexes.multi.names->state.get('names')
A:pandas.core.indexes.multi.level_nbytes->sum((i.memory_usage(deep=deep) for i in self.levels))
A:pandas.core.indexes.multi.label_nbytes->sum((i.nbytes for i in self.codes))
A:pandas.core.indexes.multi.names_nbytes->sum((getsizeof(i, objsize) for i in self.names))
A:pandas.core.indexes.multi.level->level.insert(lev_loc, k).insert(lev_loc, k)
A:pandas.core.indexes.multi.nan_index->len(level)
A:pandas.core.indexes.multi.level_codes->pandas.core.algorithms.take_1d(ri, level_codes)
A:pandas.core.indexes.multi.mi->MultiIndex(levels=new_levels, codes=new_codes, names=self.names, sortorder=self.sortorder, verify_integrity=False)
A:pandas.core.indexes.multi.formatted->formatted.tolist().tolist()
A:pandas.core.indexes.multi.sparsify->get_option('display.multi_sparse')
A:pandas.core.indexes.multi.result_levels->_sparsify(result_levels, start=int(names), sentinel=sentinel)
A:pandas.core.indexes.multi.adj->_get_adjustment()
A:pandas.core.indexes.multi.level_values->self.levels[level].take(indexer)
A:pandas.core.indexes.multi.grouper->level_index.copy().take(codes)
A:pandas.core.indexes.multi.(codes, uniques)->pandas.core.algorithms.factorize(indexer, sort=True)
A:pandas.core.indexes.multi.(ok_codes, uniques)->pandas.core.algorithms.factorize(indexer[mask], sort=True)
A:pandas.core.indexes.multi.level_index->level_index.copy().copy()
A:pandas.core.indexes.multi.count->self.names.count(level)
A:pandas.core.indexes.multi.sizes->numpy.ceil(np.log2([len(l) + 1 for l in self.levels]))
A:pandas.core.indexes.multi.offsets->numpy.concatenate([lev_bits[1:], [0]]).astype('uint64')
A:pandas.core.indexes.multi.vals->numpy.array(vals, copy=False)
A:pandas.core.indexes.multi.self._tuples->pandas._libs.lib.fast_zip(values)
A:pandas.core.indexes.multi.sort_order->numpy.lexsort(values)
A:pandas.core.indexes.multi.k->len(label_list)
A:pandas.core.indexes.multi.key->tuple(key)
A:pandas.core.indexes.multi.shape->list(self.levshape)
A:pandas.core.indexes.multi.ids->get_group_index(self.codes, shape, sort=False, xnull=False)
A:pandas.core.indexes.multi.indexer->indexer.take((indexer != -1).nonzero()[0]).take((indexer != -1).nonzero()[0])
A:pandas.core.indexes.multi.s->pandas.core.common.values_from_object(series)
A:pandas.core.indexes.multi.loc->numpy.arange(start, stop, dtype='int64')
A:pandas.core.indexes.multi.new_index->maybe_mi_droplevels(indexer, [0], drop_level)
A:pandas.core.indexes.multi.filled->pandas.core.algorithms.take_1d(lev._values, level_codes, fill_value=lev._na_value)
A:pandas.core.indexes.multi.values->index.droplevel(0).get_indexer(codes)
A:pandas.core.indexes.multi.lev->lev.take(uniques[has_na:]).take(uniques[has_na:])
A:pandas.core.indexes.multi.ri->pandas._libs.lib.get_reverse_indexer(indexer, len(indexer))
A:pandas.core.indexes.multi.has_na->int(len(uniques) and uniques[0] == -1)
A:pandas.core.indexes.multi.uniques->pandas.core.algorithms.unique(level_codes)
A:pandas.core.indexes.multi.code_mapping->numpy.zeros(len(lev) + has_na)
A:pandas.core.indexes.multi.d->dict(levels=list(self.levels), codes=list(self.codes), sortorder=self.sortorder, names=list(self.names))
A:pandas.core.indexes.multi.sortorder->state.get('sortorder')
A:pandas.core.indexes.multi.indices->ensure_platform_int(indices)
A:pandas.core.indexes.multi.taken->self._assert_take_fillable(self.codes, indices, allow_fill=allow_fill, fill_value=fill_value, na_value=-1)
A:pandas.core.indexes.multi.label->self._get_level_values(i)
A:pandas.core.indexes.multi.new_tuples->numpy.concatenate(to_concat)
A:pandas.core.indexes.multi.repeats->ensure_platform_int(repeats)
A:pandas.core.indexes.multi.i->pandas.core.algorithms.take_1d(ri, level_codes).searchsorted(code, side='left')
A:pandas.core.indexes.multi.new_names->list(self.names)
A:pandas.core.indexes.multi.j->pandas.core.algorithms.take_1d(ri, level_codes).searchsorted(code, side='right')
A:pandas.core.indexes.multi.primary->tuple((codes[lev] for lev in level))
A:pandas.core.indexes.multi.primshp->tuple((shape[lev] for lev in level))
A:pandas.core.indexes.multi.(indexer, keyarr)->super()._convert_listlike_indexer(keyarr, kind=kind)
A:pandas.core.indexes.multi.(_, indexer)->self.reindex(keyarr, level=level)
A:pandas.core.indexes.multi.check->self.levels[0].get_indexer(keyarr)
A:pandas.core.indexes.multi.method->pandas.core.missing.clean_reindex_fill_method(method)
A:pandas.core.indexes.multi.target->target.copy(deep=False).copy(deep=False)
A:pandas.core.indexes.multi.attrs->self._get_loc_single_level_index(lev, lab)._get_attributes_dict()
A:pandas.core.indexes.multi.(target, indexer, _)->self._join_level(target, level, how='right', return_indexers=True, keep_order=False)
A:pandas.core.indexes.multi.n->len(self)
A:pandas.core.indexes.multi.zipped->zip(tup, self.levels, self.codes)
A:pandas.core.indexes.multi.mask->numpy.zeros(len(self), dtype=bool)
A:pandas.core.indexes.multi.keylen->len(key)
A:pandas.core.indexes.multi.(loc, new_index)->self.get_loc_level(k, level=lev)
A:pandas.core.indexes.multi.r->numpy.arange(start, stop, step)
A:pandas.core.indexes.multi.mapper->Series(indexer)
A:pandas.core.indexes.multi.m->numpy.zeros(n, dtype=bool)
A:pandas.core.indexes.multi.start->getattr(start, 'start', start)
A:pandas.core.indexes.multi.stop->getattr(stop, 'stop', stop)
A:pandas.core.indexes.multi.startstop->level_index.copy().copy().slice_indexer(key.start, key.stop, key.step, kind='loc')
A:pandas.core.indexes.multi.locs->numpy.array(level_codes == code, dtype=bool, copy=False)
A:pandas.core.indexes.multi.idxrs->_convert_to_indexer(self._get_level_indexer(x, level=i, indexer=indexer))
A:pandas.core.indexes.multi.(i, j)->self.levels[0].slice_locs(before, after)
A:pandas.core.indexes.multi.(left, right)->self.slice_locs(before, after)
A:pandas.core.indexes.multi.other_vals->pandas.core.common.values_from_object(ensure_index(other))
A:pandas.core.indexes.multi.self_values->pandas.core.algorithms.take_nd(np.asarray(self.levels[i]._values), self_codes, allow_fill=False)
A:pandas.core.indexes.multi.other_values->pandas.core.algorithms.take_nd(np.asarray(other.levels[i]._values), other_codes, allow_fill=False)
A:pandas.core.indexes.multi.(other, result_names)->self._convert_can_do_setop(other)
A:pandas.core.indexes.multi.uniq_tuples->sorted(uniq_tuples)
A:pandas.core.indexes.multi.this->self._get_unique_index()
A:pandas.core.indexes.multi.label_diff->numpy.setdiff1d(np.arange(this.size), indexer, assume_unique=True)
A:pandas.core.indexes.multi.difference->sorted(difference)
A:pandas.core.indexes.multi.dtype->pandas_dtype(dtype)
A:pandas.core.indexes.multi.other->MultiIndex.from_tuples(other)
A:pandas.core.indexes.multi.lev_loc->level.insert(lev_loc, k).insert(lev_loc, k).get_loc(k)
A:pandas.core.indexes.multi.num->self._get_level_number(level)
A:pandas.core.indexes.multi.levs->self.get_level_values(num)
A:pandas.core.indexes.multi.pivoted->list(zip(*label_list))
A:pandas.core.indexes.multi.index->index.droplevel(0).droplevel(0)
A:pandas.core.indexes.multi.array_like->array_like.copy().copy()
pandas.core.indexes.multi.MultiIndex(cls,levels=None,codes=None,sortorder=None,names=None,dtype=None,copy=False,name=None,verify_integrity:bool=True,_set_identity:bool=True)
pandas.core.indexes.multi.MultiIndex.__array__(self,dtype=None)->np.ndarray
pandas.core.indexes.multi.MultiIndex.__contains__(self,key)->bool
pandas.core.indexes.multi.MultiIndex.__getitem__(self,key)
pandas.core.indexes.multi.MultiIndex.__len__(self)->int
pandas.core.indexes.multi.MultiIndex.__new__(cls,levels=None,codes=None,sortorder=None,names=None,dtype=None,copy=False,name=None,verify_integrity:bool=True,_set_identity:bool=True)
pandas.core.indexes.multi.MultiIndex.__reduce__(self)
pandas.core.indexes.multi.MultiIndex.__setstate__(self,state)
pandas.core.indexes.multi.MultiIndex._assert_take_fillable(self,values,indices,allow_fill=True,fill_value=None,na_value=None)
pandas.core.indexes.multi.MultiIndex._constructor(self)
pandas.core.indexes.multi.MultiIndex._convert_can_do_setop(self,other)
pandas.core.indexes.multi.MultiIndex._convert_listlike_indexer(self,keyarr,kind=None)
pandas.core.indexes.multi.MultiIndex._drop_from_level(self,codes,level,errors='raise')
pandas.core.indexes.multi.MultiIndex._engine(self)
pandas.core.indexes.multi.MultiIndex._format_attrs(self)
pandas.core.indexes.multi.MultiIndex._format_data(self,name=None)
pandas.core.indexes.multi.MultiIndex._format_native_types(self,na_rep='nan',**kwargs)
pandas.core.indexes.multi.MultiIndex._formatter_func(self,tup)
pandas.core.indexes.multi.MultiIndex._get_codes_for_sorting(self)
pandas.core.indexes.multi.MultiIndex._get_grouper_for_level(self,mapper,level)
pandas.core.indexes.multi.MultiIndex._get_level_indexer(self,key,level=0,indexer=None)
pandas.core.indexes.multi.MultiIndex._get_level_number(self,level)->int
pandas.core.indexes.multi.MultiIndex._get_level_values(self,level,unique=False)
pandas.core.indexes.multi.MultiIndex._get_loc_single_level_index(self,level_index:Index,key:Hashable)->int
pandas.core.indexes.multi.MultiIndex._get_names(self)
pandas.core.indexes.multi.MultiIndex._has_complex_internals(self)
pandas.core.indexes.multi.MultiIndex._hashed_indexing_key(self,key)
pandas.core.indexes.multi.MultiIndex._hashed_values(self)
pandas.core.indexes.multi.MultiIndex._have_mixed_levels(self)
pandas.core.indexes.multi.MultiIndex._inferred_type_levels(self)
pandas.core.indexes.multi.MultiIndex._is_memory_usage_qualified(self)->bool
pandas.core.indexes.multi.MultiIndex._lexsort_depth(self)->int
pandas.core.indexes.multi.MultiIndex._nbytes(self,deep:bool=False)->int
pandas.core.indexes.multi.MultiIndex._partial_tup_index(self,tup,side='left')
pandas.core.indexes.multi.MultiIndex._set_codes(self,codes,level=None,copy=False,validate=True,verify_integrity=False)
pandas.core.indexes.multi.MultiIndex._set_levels(self,levels,level=None,copy=False,validate=True,verify_integrity=False)
pandas.core.indexes.multi.MultiIndex._set_names(self,names,level=None,validate=True)
pandas.core.indexes.multi.MultiIndex._shallow_copy(self,values=None,**kwargs)
pandas.core.indexes.multi.MultiIndex._shallow_copy_with_infer(self,values,**kwargs)
pandas.core.indexes.multi.MultiIndex._sort_levels_monotonic(self)
pandas.core.indexes.multi.MultiIndex._to_safe_for_reshape(self)
pandas.core.indexes.multi.MultiIndex._validate_codes(self,level:List,code:List)
pandas.core.indexes.multi.MultiIndex._values(self)
pandas.core.indexes.multi.MultiIndex._verify_integrity(self,codes:Optional[List]=None,levels:Optional[List]=None)
pandas.core.indexes.multi.MultiIndex._wrap_joined_index(self,joined,other)
pandas.core.indexes.multi.MultiIndex.append(self,other)
pandas.core.indexes.multi.MultiIndex.argsort(self,*args,**kwargs)
pandas.core.indexes.multi.MultiIndex.array(self)
pandas.core.indexes.multi.MultiIndex.astype(self,dtype,copy=True)
pandas.core.indexes.multi.MultiIndex.codes(self)
pandas.core.indexes.multi.MultiIndex.copy(self,names=None,dtype=None,levels=None,codes=None,deep=False,_set_identity=False,**kwargs)
pandas.core.indexes.multi.MultiIndex.delete(self,loc)
pandas.core.indexes.multi.MultiIndex.difference(self,other,sort=None)
pandas.core.indexes.multi.MultiIndex.drop(self,codes,level=None,errors='raise')
pandas.core.indexes.multi.MultiIndex.dropna(self,how='any')
pandas.core.indexes.multi.MultiIndex.dtype(self)->np.dtype
pandas.core.indexes.multi.MultiIndex.duplicated(self,keep='first')
pandas.core.indexes.multi.MultiIndex.equal_levels(self,other)
pandas.core.indexes.multi.MultiIndex.equals(self,other)->bool
pandas.core.indexes.multi.MultiIndex.fillna(self,value=None,downcast=None)
pandas.core.indexes.multi.MultiIndex.format(self,space=2,sparsify=None,adjoin=True,names=False,na_rep=None,formatter=None)
pandas.core.indexes.multi.MultiIndex.from_arrays(cls,arrays,sortorder=None,names=lib.no_default)
pandas.core.indexes.multi.MultiIndex.from_frame(cls,df,sortorder=None,names=None)
pandas.core.indexes.multi.MultiIndex.from_product(cls,iterables,sortorder=None,names=lib.no_default)
pandas.core.indexes.multi.MultiIndex.from_tuples(cls,tuples,sortorder=None,names=None)
pandas.core.indexes.multi.MultiIndex.get_indexer(self,target,method=None,limit=None,tolerance=None)
pandas.core.indexes.multi.MultiIndex.get_indexer_non_unique(self,target)
pandas.core.indexes.multi.MultiIndex.get_level_values(self,level)
pandas.core.indexes.multi.MultiIndex.get_loc(self,key,method=None)
pandas.core.indexes.multi.MultiIndex.get_loc_level(self,key,level=0,drop_level:bool=True)
pandas.core.indexes.multi.MultiIndex.get_locs(self,seq)
pandas.core.indexes.multi.MultiIndex.get_slice_bound(self,label:Union[Hashable,Sequence[Hashable]],side:str,kind:str)->int
pandas.core.indexes.multi.MultiIndex.get_value(self,series,key)
pandas.core.indexes.multi.MultiIndex.inferred_type(self)->str
pandas.core.indexes.multi.MultiIndex.insert(self,loc,item)
pandas.core.indexes.multi.MultiIndex.intersection(self,other,sort=False)
pandas.core.indexes.multi.MultiIndex.is_all_dates(self)->bool
pandas.core.indexes.multi.MultiIndex.is_lexsorted(self)->bool
pandas.core.indexes.multi.MultiIndex.is_monotonic_decreasing(self)->bool
pandas.core.indexes.multi.MultiIndex.is_monotonic_increasing(self)->bool
pandas.core.indexes.multi.MultiIndex.isin(self,values,level=None)
pandas.core.indexes.multi.MultiIndex.levels(self)
pandas.core.indexes.multi.MultiIndex.levshape(self)
pandas.core.indexes.multi.MultiIndex.lexsort_depth(self)
pandas.core.indexes.multi.MultiIndex.memory_usage(self,deep:bool=False)->int
pandas.core.indexes.multi.MultiIndex.nbytes(self)->int
pandas.core.indexes.multi.MultiIndex.nlevels(self)->int
pandas.core.indexes.multi.MultiIndex.reindex(self,target,method=None,level=None,limit=None,tolerance=None)
pandas.core.indexes.multi.MultiIndex.remove_unused_levels(self)
pandas.core.indexes.multi.MultiIndex.reorder_levels(self,order)
pandas.core.indexes.multi.MultiIndex.repeat(self,repeats,axis=None)
pandas.core.indexes.multi.MultiIndex.set_codes(self,codes,level=None,inplace=False,verify_integrity=True)
pandas.core.indexes.multi.MultiIndex.set_levels(self,levels,level=None,inplace=False,verify_integrity=True)
pandas.core.indexes.multi.MultiIndex.shape(self)
pandas.core.indexes.multi.MultiIndex.slice_locs(self,start=None,end=None,step=None,kind=None)
pandas.core.indexes.multi.MultiIndex.sortlevel(self,level=0,ascending=True,sort_remaining=True)
pandas.core.indexes.multi.MultiIndex.swaplevel(self,i=-2,j=-1)
pandas.core.indexes.multi.MultiIndex.take(self,indices,axis=0,allow_fill=True,fill_value=None,**kwargs)
pandas.core.indexes.multi.MultiIndex.to_flat_index(self)
pandas.core.indexes.multi.MultiIndex.to_frame(self,index=True,name=None)
pandas.core.indexes.multi.MultiIndex.truncate(self,before=None,after=None)
pandas.core.indexes.multi.MultiIndex.union(self,other,sort=None)
pandas.core.indexes.multi.MultiIndex.unique(self,level=None)
pandas.core.indexes.multi.MultiIndex.values(self)
pandas.core.indexes.multi.MultiIndex.view(self,cls=None)
pandas.core.indexes.multi.MultiIndex.where(self,cond,other=None)
pandas.core.indexes.multi.MultiIndexPyIntEngine(libindex.BaseMultiIndexCodesEngine,libindex.ObjectEngine)
pandas.core.indexes.multi.MultiIndexPyIntEngine._codes_to_ints(self,codes)
pandas.core.indexes.multi.MultiIndexUIntEngine(libindex.BaseMultiIndexCodesEngine,libindex.UInt64Engine)
pandas.core.indexes.multi.MultiIndexUIntEngine._codes_to_ints(self,codes)
pandas.core.indexes.multi._coerce_indexer_frozen(array_like,categories,copy:bool=False)->np.ndarray
pandas.core.indexes.multi._get_na_rep(dtype)->str
pandas.core.indexes.multi._sparsify(label_list,start:int=0,sentinel='')
pandas.core.indexes.multi.maybe_droplevels(index,key)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/indexes/accessors.py----------------------------------------
A:pandas.core.indexes.accessors.self.name->getattr(data, 'name', None)
A:pandas.core.indexes.accessors.values->self._get_values()
A:pandas.core.indexes.accessors.result->Series(result, index=self._parent.index, name=self.name)
A:pandas.core.indexes.accessors.method->getattr(values, name)
A:pandas.core.indexes.accessors.data->Series(orig.array, name=orig.name, copy=False, dtype=orig.values.categories.dtype)
pandas.core.indexes.accessors.CombinedDatetimelikeProperties(cls,data)
pandas.core.indexes.accessors.CombinedDatetimelikeProperties.__new__(cls,data)
pandas.core.indexes.accessors.DatetimeProperties(Properties)
pandas.core.indexes.accessors.DatetimeProperties.freq(self)
pandas.core.indexes.accessors.DatetimeProperties.to_pydatetime(self)
pandas.core.indexes.accessors.DatetimeProperties.to_pydt(self)
pandas.core.indexes.accessors.PeriodProperties(Properties)
pandas.core.indexes.accessors.Properties(self,data,orig)
pandas.core.indexes.accessors.Properties.__init__(self,data,orig)
pandas.core.indexes.accessors.Properties._delegate_method(self,name,*args,**kwargs)
pandas.core.indexes.accessors.Properties._delegate_property_get(self,name)
pandas.core.indexes.accessors.Properties._delegate_property_set(self,name,value,*args,**kwargs)
pandas.core.indexes.accessors.Properties._get_values(self)
pandas.core.indexes.accessors.TimedeltaProperties(Properties)
pandas.core.indexes.accessors.TimedeltaProperties.components(self)
pandas.core.indexes.accessors.TimedeltaProperties.freq(self)
pandas.core.indexes.accessors.TimedeltaProperties.to_pytimedelta(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/indexes/numeric.py----------------------------------------
A:pandas.core.indexes.numeric._num_index_shared_docs->dict()
A:pandas.core.indexes.numeric.data->numpy.asarray(data, dtype=dtype)
A:pandas.core.indexes.numeric.subarr->numpy.array(data, dtype=cls._default_dtype, copy=copy)
A:pandas.core.indexes.numeric.name->get_op_result_name(self, other)
A:pandas.core.indexes.numeric.tolerance->numpy.asarray(tolerance)
A:pandas.core.indexes.numeric.result->type(indexes[0])(np.concatenate([x._values for x in indexes]))
A:pandas.core.indexes.numeric.first->self.astype('float')
A:pandas.core.indexes.numeric.second->self._constructor(other).astype('float')
A:pandas.core.indexes.numeric._int64_descr_args->dict(klass='Int64Index', ltype='integer', dtype='int64', extra='')
A:pandas.core.indexes.numeric.key->self._maybe_cast_indexer(key)
A:pandas.core.indexes.numeric._uint64_descr_args->dict(klass='UInt64Index', ltype='unsigned integer', dtype='uint64', extra='')
A:pandas.core.indexes.numeric._float64_descr_args->dict(klass='Float64Index', dtype='float64', ltype='float', extra='')
A:pandas.core.indexes.numeric.dtype->pandas_dtype(dtype)
A:pandas.core.indexes.numeric.arr->astype_nansafe(self.values, dtype=dtype)
A:pandas.core.indexes.numeric.formatter->FloatArrayFormatter(self.values, na_rep=na_rep, float_format=float_format, decimal=decimal, quoting=quoting, fixed_width=False)
A:pandas.core.indexes.numeric.k->pandas.core.common.values_from_object(key)
A:pandas.core.indexes.numeric.loc->self.get_loc(k)
A:pandas.core.indexes.numeric.other->self._constructor(other)
pandas.core.indexes.numeric.Float64Index(NumericIndex)
pandas.core.indexes.numeric.Float64Index.__contains__(self,other)->bool
pandas.core.indexes.numeric.Float64Index._convert_scalar_indexer(self,key,kind=None)
pandas.core.indexes.numeric.Float64Index._convert_slice_indexer(self,key,kind=None)
pandas.core.indexes.numeric.Float64Index._format_native_types(self,na_rep='',float_format=None,decimal='.',quoting=None,**kwargs)
pandas.core.indexes.numeric.Float64Index._is_compatible_with_other(self,other)
pandas.core.indexes.numeric.Float64Index.astype(self,dtype,copy=True)
pandas.core.indexes.numeric.Float64Index.equals(self,other)->bool
pandas.core.indexes.numeric.Float64Index.get_loc(self,key,method=None,tolerance=None)
pandas.core.indexes.numeric.Float64Index.get_value(self,series,key)
pandas.core.indexes.numeric.Float64Index.inferred_type(self)->str
pandas.core.indexes.numeric.Float64Index.is_unique(self)->bool
pandas.core.indexes.numeric.Float64Index.isin(self,values,level=None)
pandas.core.indexes.numeric.Int64Index(IntegerIndex)
pandas.core.indexes.numeric.Int64Index._assert_safe_casting(cls,data,subarr)
pandas.core.indexes.numeric.Int64Index._convert_scalar_indexer(self,key,kind=None)
pandas.core.indexes.numeric.Int64Index._is_compatible_with_other(self,other)
pandas.core.indexes.numeric.Int64Index._wrap_joined_index(self,joined,other)
pandas.core.indexes.numeric.Int64Index.asi8(self)->np.ndarray
pandas.core.indexes.numeric.Int64Index.inferred_type(self)->str
pandas.core.indexes.numeric.IntegerIndex(NumericIndex)
pandas.core.indexes.numeric.IntegerIndex.__contains__(self,key)->bool
pandas.core.indexes.numeric.NumericIndex(cls,data=None,dtype=None,copy=False,name=None)
pandas.core.indexes.numeric.NumericIndex.__new__(cls,data=None,dtype=None,copy=False,name=None)
pandas.core.indexes.numeric.NumericIndex._assert_safe_casting(cls,data,subarr)
pandas.core.indexes.numeric.NumericIndex._concat_same_dtype(self,indexes,name)
pandas.core.indexes.numeric.NumericIndex._convert_for_op(self,value)
pandas.core.indexes.numeric.NumericIndex._convert_tolerance(self,tolerance,target)
pandas.core.indexes.numeric.NumericIndex._maybe_cast_slice_bound(self,label,side,kind)
pandas.core.indexes.numeric.NumericIndex._shallow_copy(self,values=None,**kwargs)
pandas.core.indexes.numeric.NumericIndex._union(self,other,sort)
pandas.core.indexes.numeric.NumericIndex._validate_dtype(cls,dtype:Dtype)->None
pandas.core.indexes.numeric.NumericIndex.insert(self,loc,item)
pandas.core.indexes.numeric.NumericIndex.is_all_dates(self)->bool
pandas.core.indexes.numeric.UInt64Index(IntegerIndex)
pandas.core.indexes.numeric.UInt64Index._assert_safe_casting(cls,data,subarr)
pandas.core.indexes.numeric.UInt64Index._convert_arr_indexer(self,keyarr)
pandas.core.indexes.numeric.UInt64Index._convert_index_indexer(self,keyarr)
pandas.core.indexes.numeric.UInt64Index._convert_scalar_indexer(self,key,kind=None)
pandas.core.indexes.numeric.UInt64Index._is_compatible_with_other(self,other)
pandas.core.indexes.numeric.UInt64Index._wrap_joined_index(self,joined,other)
pandas.core.indexes.numeric.UInt64Index.asi8(self)->np.ndarray
pandas.core.indexes.numeric.UInt64Index.inferred_type(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/indexes/range.py----------------------------------------
A:pandas.core.indexes.range.name->kwargs.get('name', self.name)
A:pandas.core.indexes.range.stop->ensure_python_int(stop)
A:pandas.core.indexes.range.rng->range(start, stop, step)
A:pandas.core.indexes.range.result->result.astype('float64').astype('float64')
A:pandas.core.indexes.range.values->range(0, 0, 1)
A:pandas.core.indexes.range.self._cached_data->numpy.arange(self.start, self.stop, self.step, dtype=np.int64)
A:pandas.core.indexes.range.d->self._get_attributes_dict()
A:pandas.core.indexes.range.attrs->self._get_attributes_dict()
A:pandas.core.indexes.range.key->ensure_python_int(key)
A:pandas.core.indexes.range.new_key->int(key)
A:pandas.core.indexes.range.target_array->numpy.asarray(target)
A:pandas.core.indexes.range.int_low->max(first.start, second.start)
A:pandas.core.indexes.range.int_high->min(first.stop, second.stop)
A:pandas.core.indexes.range.(gcd, s, t)->self._extended_gcd(first.step, second.step)
A:pandas.core.indexes.range.new_range->range(start, start + 1, 1)
A:pandas.core.indexes.range.new_index->new_index.sort_values().sort_values()
A:pandas.core.indexes.range.new_start->new_index.sort_values().sort_values()._min_fitting_element(int_low)
A:pandas.core.indexes.range.step_sstep_o->abs(self.start - other.start)
A:pandas.core.indexes.range.start_r->min(start_s, start_o)
A:pandas.core.indexes.range.end_r->max(end_s, end_o)
A:pandas.core.indexes.range.other->extract_array(other, extract_numpy=True)
A:pandas.core.indexes.range.rstep->step(left.step, right)
A:pandas.core.indexes.range.rstart->op(left.start, right)
A:pandas.core.indexes.range.rstop->op(left.stop, right)
A:pandas.core.indexes.range.cls.__add__->_make_evaluate_binop(operator.add)
A:pandas.core.indexes.range.cls.__radd__->_make_evaluate_binop(ops.radd)
A:pandas.core.indexes.range.cls.__sub__->_make_evaluate_binop(operator.sub)
A:pandas.core.indexes.range.cls.__rsub__->_make_evaluate_binop(ops.rsub)
A:pandas.core.indexes.range.cls.__mul__->_make_evaluate_binop(operator.mul, step=operator.mul)
A:pandas.core.indexes.range.cls.__rmul__->_make_evaluate_binop(ops.rmul, step=ops.rmul)
A:pandas.core.indexes.range.cls.__truediv__->_make_evaluate_binop(operator.truediv, step=operator.truediv)
A:pandas.core.indexes.range.cls.__rtruediv__->_make_evaluate_binop(ops.rtruediv, step=ops.rtruediv)
pandas.core.indexes.range.RangeIndex(cls,start=None,stop=None,step=None,dtype=None,copy=False,name=None)
pandas.core.indexes.range.RangeIndex.__contains__(self,key:Union[int,np.integer])->bool
pandas.core.indexes.range.RangeIndex.__floordiv__(self,other)
pandas.core.indexes.range.RangeIndex.__getitem__(self,key)
pandas.core.indexes.range.RangeIndex.__len__(self)->int
pandas.core.indexes.range.RangeIndex.__new__(cls,start=None,stop=None,step=None,dtype=None,copy=False,name=None)
pandas.core.indexes.range.RangeIndex.__reduce__(self)
pandas.core.indexes.range.RangeIndex._add_numeric_methods_binary(cls)
pandas.core.indexes.range.RangeIndex._concat_same_dtype(self,indexes,name)
pandas.core.indexes.range.RangeIndex._constructor(self)
pandas.core.indexes.range.RangeIndex._data(self)
pandas.core.indexes.range.RangeIndex._extended_gcd(self,a,b)
pandas.core.indexes.range.RangeIndex._format_attrs(self)
pandas.core.indexes.range.RangeIndex._format_data(self,name=None)
pandas.core.indexes.range.RangeIndex._format_with_header(self,header,na_rep='NaN',**kwargs)
pandas.core.indexes.range.RangeIndex._get_data_as_items(self)
pandas.core.indexes.range.RangeIndex._int64index(self)
pandas.core.indexes.range.RangeIndex._max_fitting_element(self,upper_limit)
pandas.core.indexes.range.RangeIndex._min_fitting_element(self,lower_limit)
pandas.core.indexes.range.RangeIndex._minmax(self,meth)
pandas.core.indexes.range.RangeIndex._shallow_copy(self,values=None,**kwargs)
pandas.core.indexes.range.RangeIndex._simple_new(cls,values,name=None,dtype=None)
pandas.core.indexes.range.RangeIndex._start(self)
pandas.core.indexes.range.RangeIndex._step(self)
pandas.core.indexes.range.RangeIndex._stop(self)
pandas.core.indexes.range.RangeIndex._union(self,other,sort)
pandas.core.indexes.range.RangeIndex.all(self)->bool
pandas.core.indexes.range.RangeIndex.any(self)->bool
pandas.core.indexes.range.RangeIndex.argsort(self,*args,**kwargs)
pandas.core.indexes.range.RangeIndex.copy(self,name=None,deep=False,dtype=None,**kwargs)
pandas.core.indexes.range.RangeIndex.dtype(self)->np.dtype
pandas.core.indexes.range.RangeIndex.equals(self,other)
pandas.core.indexes.range.RangeIndex.from_range(cls,data,name=None,dtype=None)
pandas.core.indexes.range.RangeIndex.get_indexer(self,target,method=None,limit=None,tolerance=None)
pandas.core.indexes.range.RangeIndex.get_loc(self,key,method=None,tolerance=None)
pandas.core.indexes.range.RangeIndex.has_duplicates(self)->bool
pandas.core.indexes.range.RangeIndex.intersection(self,other,sort=False)
pandas.core.indexes.range.RangeIndex.is_monotonic_decreasing(self)->bool
pandas.core.indexes.range.RangeIndex.is_monotonic_increasing(self)->bool
pandas.core.indexes.range.RangeIndex.is_unique(self)->bool
pandas.core.indexes.range.RangeIndex.join(self,other,how='left',level=None,return_indexers=False,sort=False)
pandas.core.indexes.range.RangeIndex.max(self,axis=None,skipna=True,*args,**kwargs)
pandas.core.indexes.range.RangeIndex.memory_usage(self,deep:bool=False)->int
pandas.core.indexes.range.RangeIndex.min(self,axis=None,skipna=True,*args,**kwargs)
pandas.core.indexes.range.RangeIndex.nbytes(self)->int
pandas.core.indexes.range.RangeIndex.size(self)->int
pandas.core.indexes.range.RangeIndex.start(self)
pandas.core.indexes.range.RangeIndex.step(self)
pandas.core.indexes.range.RangeIndex.stop(self)
pandas.core.indexes.range.RangeIndex.tolist(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/indexes/interval.py----------------------------------------
A:pandas.core.indexes.interval._index_doc_kwargs->dict(ibase._index_doc_kwargs)
A:pandas.core.indexes.interval.dtype->getattr(label, 'dtype', type(label))
A:pandas.core.indexes.interval.other->Index(getattr(other, '.values', other))
A:pandas.core.indexes.interval.result->result.values.astype(self.dtype.subtype).values.astype(self.dtype.subtype)
A:pandas.core.indexes.interval.common_subtype->find_common_type([self.dtype.subtype, target_as_index.dtype.subtype])
A:pandas.core.indexes.interval.name->maybe_extract_name(name, data, cls)
A:pandas.core.indexes.interval.array->pandas.core.arrays.interval.IntervalArray.from_arrays(left, right, closed, copy=copy, dtype=dtype)
A:pandas.core.indexes.interval.arr->pandas.core.arrays.interval.IntervalArray.from_tuples(data, closed=closed, copy=copy, dtype=dtype)
A:pandas.core.indexes.interval.attributes->self._get_attributes_dict()
A:pandas.core.indexes.interval.self._mask->isna(self.left)
A:pandas.core.indexes.interval.left->self._maybe_convert_i8(key.left)
A:pandas.core.indexes.interval.right->self._maybe_convert_i8(key.right)
A:pandas.core.indexes.interval.d->dict(left=self.left, right=self.right)
A:pandas.core.indexes.interval.new_values->self.values.astype(dtype, copy=copy)
A:pandas.core.indexes.interval.seen_pairs->set()
A:pandas.core.indexes.interval.locs->numpy.array([-1])
A:pandas.core.indexes.interval.key->ensure_index(key)
A:pandas.core.indexes.interval.scalar->is_scalar(key)
A:pandas.core.indexes.interval.(key_dtype, key_i8)->infer_dtype_from_scalar(key, pandas_dtype=True)
A:pandas.core.indexes.interval.key_i8->key_i8.where(~key._isnan).where(~key._isnan)
A:pandas.core.indexes.interval.label->_get_prev_label(label)
A:pandas.core.indexes.interval.matches->numpy.zeros(len(self), dtype=bool).sum()
A:pandas.core.indexes.interval.target_as_index->self._maybe_convert_i8(target_as_index)
A:pandas.core.indexes.interval.left_indexer->self.left.get_indexer(target_as_index.left)
A:pandas.core.indexes.interval.right_indexer->self.right.get_indexer(target_as_index.right)
A:pandas.core.indexes.interval.indexer->self.left.get_indexer(other.left).take(match.nonzero()[0])
A:pandas.core.indexes.interval.categories_indexer->self.get_indexer(target_as_index.categories)
A:pandas.core.indexes.interval.loc->self.get_loc(key)
A:pandas.core.indexes.interval.(indexer, missing)->self._engine.get_indexer_non_unique(target_as_index.values)
A:pandas.core.indexes.interval.(loc, missing)->self.get_indexer_non_unique(key)
A:pandas.core.indexes.interval.values->numpy.where(cond, self.values, other)
A:pandas.core.indexes.interval.new_left->self.left.insert(loc, left_insert)
A:pandas.core.indexes.interval.new_right->self.right.insert(loc, right_insert)
A:pandas.core.indexes.interval.n->min(max_seq_items // 2, 10)
A:pandas.core.indexes.interval.max_seq_items->min((get_option('display.max_seq_items') or n) // 10, 10)
A:pandas.core.indexes.interval.first->formatter(self[0])
A:pandas.core.indexes.interval.last->formatter(self[-1])
A:pandas.core.indexes.interval.head_joined->', '.join(head)
A:pandas.core.indexes.interval.tail_joined->', '.join(tail)
A:pandas.core.indexes.interval.joined->', '.join(tail)
A:pandas.core.indexes.interval.taken->taken.sort_values().sort_values()
A:pandas.core.indexes.interval.lindexer->self.left.get_indexer(other.left)
A:pandas.core.indexes.interval.rindexer->self.right.get_indexer(other.right)
A:pandas.core.indexes.interval.mask->numpy.zeros(len(self), dtype=bool)
A:pandas.core.indexes.interval.other_tups->set(zip(other.left, other.right))
A:pandas.core.indexes.interval.result_name->get_op_result_name(self, other)
A:pandas.core.indexes.interval.union->_setop('union')
A:pandas.core.indexes.interval.difference->_setop('difference')
A:pandas.core.indexes.interval.symmetric_difference->_setop('symmetric_difference')
A:pandas.core.indexes.interval.start->pandas.core.common.maybe_box_datetimelike(start)
A:pandas.core.indexes.interval.end->pandas.core.common.maybe_box_datetimelike(end)
A:pandas.core.indexes.interval.periods->int(periods)
A:pandas.core.indexes.interval.freq->to_offset(freq)
A:pandas.core.indexes.interval.breaks->range_func(start=start, end=end, periods=periods, freq=freq)
pandas.core.indexes.interval.IntervalIndex(cls,data,closed=None,dtype=None,copy:bool=False,name=None,verify_integrity:bool=True)
pandas.core.indexes.interval.IntervalIndex.__array_wrap__(self,result,context=None)
pandas.core.indexes.interval.IntervalIndex.__contains__(self,key)->bool
pandas.core.indexes.interval.IntervalIndex.__ge__(self,other)
pandas.core.indexes.interval.IntervalIndex.__getitem__(self,value)
pandas.core.indexes.interval.IntervalIndex.__gt__(self,other)
pandas.core.indexes.interval.IntervalIndex.__le__(self,other)
pandas.core.indexes.interval.IntervalIndex.__lt__(self,other)
pandas.core.indexes.interval.IntervalIndex.__new__(cls,data,closed=None,dtype=None,copy:bool=False,name=None,verify_integrity:bool=True)
pandas.core.indexes.interval.IntervalIndex.__reduce__(self)
pandas.core.indexes.interval.IntervalIndex._can_reindex(self,indexer:np.ndarray)->None
pandas.core.indexes.interval.IntervalIndex._check_method(self,method)
pandas.core.indexes.interval.IntervalIndex._concat_same_dtype(self,to_concat,name)
pandas.core.indexes.interval.IntervalIndex._convert_list_indexer(self,keyarr,kind=None)
pandas.core.indexes.interval.IntervalIndex._convert_scalar_indexer(self,key,kind=None)
pandas.core.indexes.interval.IntervalIndex._engine(self)
pandas.core.indexes.interval.IntervalIndex._format_attrs(self)
pandas.core.indexes.interval.IntervalIndex._format_data(self,name=None)
pandas.core.indexes.interval.IntervalIndex._format_native_types(self,na_rep='NaN',quoting=None,**kwargs)
pandas.core.indexes.interval.IntervalIndex._format_space(self)->str
pandas.core.indexes.interval.IntervalIndex._format_with_header(self,header,**kwargs)
pandas.core.indexes.interval.IntervalIndex._has_complex_internals(self)
pandas.core.indexes.interval.IntervalIndex._intersection_non_unique(self,other:'IntervalIndex')->'IntervalIndex'
pandas.core.indexes.interval.IntervalIndex._intersection_unique(self,other:'IntervalIndex')->'IntervalIndex'
pandas.core.indexes.interval.IntervalIndex._isnan(self)
pandas.core.indexes.interval.IntervalIndex._maybe_cast_slice_bound(self,label,side,kind)
pandas.core.indexes.interval.IntervalIndex._maybe_convert_i8(self,key)
pandas.core.indexes.interval.IntervalIndex._multiindex(self)
pandas.core.indexes.interval.IntervalIndex._needs_i8_conversion(self,key)
pandas.core.indexes.interval.IntervalIndex._searchsorted_monotonic(self,label,side,exclude_label=False)
pandas.core.indexes.interval.IntervalIndex._setop(op_name:str,sort=None)
pandas.core.indexes.interval.IntervalIndex._shallow_copy(self,left=None,right=None,**kwargs)
pandas.core.indexes.interval.IntervalIndex._simple_new(cls,array,name,closed=None)
pandas.core.indexes.interval.IntervalIndex._values(self)
pandas.core.indexes.interval.IntervalIndex.argsort(self,*args,**kwargs)
pandas.core.indexes.interval.IntervalIndex.astype(self,dtype,copy=True)
pandas.core.indexes.interval.IntervalIndex.delete(self,loc)
pandas.core.indexes.interval.IntervalIndex.equals(self,other)->bool
pandas.core.indexes.interval.IntervalIndex.from_arrays(cls,left,right,closed:str='right',name=None,copy:bool=False,dtype=None)
pandas.core.indexes.interval.IntervalIndex.from_breaks(cls,breaks,closed:str='right',name=None,copy:bool=False,dtype=None)
pandas.core.indexes.interval.IntervalIndex.from_tuples(cls,data,closed:str='right',name=None,copy:bool=False,dtype=None)
pandas.core.indexes.interval.IntervalIndex.get_indexer(self,target:AnyArrayLike,method:Optional[str]=None,limit:Optional[int]=None,tolerance:Optional[Any]=None)->np.ndarray
pandas.core.indexes.interval.IntervalIndex.get_indexer_for(self,target:AnyArrayLike,**kwargs)->np.ndarray
pandas.core.indexes.interval.IntervalIndex.get_indexer_non_unique(self,target:AnyArrayLike)->Tuple[np.ndarray, np.ndarray]
pandas.core.indexes.interval.IntervalIndex.get_loc(self,key:Any,method:Optional[str]=None,tolerance=None)->Union[int, slice, np.ndarray]
pandas.core.indexes.interval.IntervalIndex.get_value(self,series:ABCSeries,key:Any)->Any
pandas.core.indexes.interval.IntervalIndex.inferred_type(self)->str
pandas.core.indexes.interval.IntervalIndex.insert(self,loc,item)
pandas.core.indexes.interval.IntervalIndex.intersection(self,other:'IntervalIndex',sort:bool=False)->'IntervalIndex'
pandas.core.indexes.interval.IntervalIndex.is_all_dates(self)->bool
pandas.core.indexes.interval.IntervalIndex.is_monotonic(self)->bool
pandas.core.indexes.interval.IntervalIndex.is_monotonic_decreasing(self)->bool
pandas.core.indexes.interval.IntervalIndex.is_monotonic_increasing(self)->bool
pandas.core.indexes.interval.IntervalIndex.is_overlapping(self)
pandas.core.indexes.interval.IntervalIndex.is_unique(self)
pandas.core.indexes.interval.IntervalIndex.memory_usage(self,deep:bool=False)->int
pandas.core.indexes.interval.IntervalIndex.take(self,indices,axis=0,allow_fill=True,fill_value=None,**kwargs)
pandas.core.indexes.interval.IntervalIndex.values(self)
pandas.core.indexes.interval.IntervalIndex.where(self,cond,other=None)
pandas.core.indexes.interval.SetopCheck(self,op_name)
pandas.core.indexes.interval.SetopCheck.__init__(self,op_name)
pandas.core.indexes.interval._get_next_label(label)
pandas.core.indexes.interval._get_prev_label(label)
pandas.core.indexes.interval._is_type_compatible(a,b)->bool
pandas.core.indexes.interval._is_valid_endpoint(endpoint)->bool
pandas.core.indexes.interval._new_IntervalIndex(cls,d)
pandas.core.indexes.interval.interval_range(start=None,end=None,periods=None,freq=None,name=None,closed='right')


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/indexes/frozen.py----------------------------------------
A:pandas.core.indexes.frozen.other->list(other)
pandas.core.indexes.frozen.FrozenList(PandasObject,list)
pandas.core.indexes.frozen.FrozenList.__eq__(self,other:Any)->bool
pandas.core.indexes.frozen.FrozenList.__getitem__(self,n)
pandas.core.indexes.frozen.FrozenList.__hash__(self)
pandas.core.indexes.frozen.FrozenList.__mul__(self,other)
pandas.core.indexes.frozen.FrozenList.__radd__(self,other)
pandas.core.indexes.frozen.FrozenList.__reduce__(self)
pandas.core.indexes.frozen.FrozenList.__repr__(self)->str
pandas.core.indexes.frozen.FrozenList.__str__(self)->str
pandas.core.indexes.frozen.FrozenList._disabled(self,*args,**kwargs)
pandas.core.indexes.frozen.FrozenList.difference(self,other)->'FrozenList'
pandas.core.indexes.frozen.FrozenList.union(self,other)->'FrozenList'


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/indexes/base.py----------------------------------------
A:pandas.core.indexes.base._unsortable_types->frozenset(('mixed', 'mixed-integer'))
A:pandas.core.indexes.base._index_doc_kwargs->dict(klass='Index', inplace='', target_klass='Index', raises_section='', unique='Index', duplicated='np.ndarray')
A:pandas.core.indexes.base._index_shared_docs->dict()
A:pandas.core.indexes.base.left->type(other)(self._values, dtype=other.dtype)
A:pandas.core.indexes.base.result->f(self.values)
A:pandas.core.indexes.base._o_dtype->numpy.dtype(object)
A:pandas.core.indexes.base.d['codes']->dict(data=self._data).pop('labels')
A:pandas.core.indexes.base.str->CachedAccessor('str', StringMethods)
A:pandas.core.indexes.base.name->get_op_result_name(self, other)
A:pandas.core.indexes.base.data->pandas.core.arrays.PeriodArray._from_sequence(subarr)
A:pandas.core.indexes.base.closed->kwargs.pop('closed', None)
A:pandas.core.indexes.base.ea_cls->dtype.construct_array_type()
A:pandas.core.indexes.base.subarr->pandas.core.common.asarray_tuplesafe(data, dtype=object)
A:pandas.core.indexes.base.(new_data, new_dtype)->_maybe_cast_data_without_dtype(subarr)
A:pandas.core.indexes.base.values->ensure_categorical(values)
A:pandas.core.indexes.base.attributes->self._get_attributes_dict()
A:pandas.core.indexes.base.self._id->_Identity()
A:pandas.core.indexes.base.attrs->self._get_attributes_dict()
A:pandas.core.indexes.base.casted->self.values.astype(dtype, copy=copy)
A:pandas.core.indexes.base.indices->ensure_platform_int(indices)
A:pandas.core.indexes.base.taken->pandas.core.algorithms.safe_sort(taken.values)
A:pandas.core.indexes.base.repeats->ensure_platform_int(repeats)
A:pandas.core.indexes.base.new_index->self._shallow_copy_with_infer(new_labels)
A:pandas.core.indexes.base.names->property(fset=_set_names, fget=_get_names)
A:pandas.core.indexes.base.space->self._format_space()
A:pandas.core.indexes.base.prepr->f',{space}'.join(attrs_str)
A:pandas.core.indexes.base.mask->isna(self)
A:pandas.core.indexes.base.head->head.format().format()
A:pandas.core.indexes.base.tail->tail.format().format()
A:pandas.core.indexes.base.index->self._shallow_copy()
A:pandas.core.indexes.base.idx->numpy.concatenate((_self[:loc], item, _self[loc:]))
A:pandas.core.indexes.base.new_levels->list(left.levels)
A:pandas.core.indexes.base.new_codes->list(left.codes)
A:pandas.core.indexes.base.new_names->list(self.names)
A:pandas.core.indexes.base.grouper->self.map(mapper)
A:pandas.core.indexes.base.d->dict(data=self._data)
A:pandas.core.indexes.base.this->self.astype('O')
A:pandas.core.indexes.base.other->other.astype('O').astype('O')
A:pandas.core.indexes.base.value_set->set(lvals)
A:pandas.core.indexes.base.indexer->self.get_indexer(labels)
A:pandas.core.indexes.base.other_diff->pandas.core.algorithms.take_nd(rvals, indexer, allow_fill=False)
A:pandas.core.indexes.base.res_name->get_op_result_name(self, other)
A:pandas.core.indexes.base.(other, result_name)->self._convert_can_do_setop(other)
A:pandas.core.indexes.base.label_diff->numpy.setdiff1d(np.arange(this.size), indexer, assume_unique=True)
A:pandas.core.indexes.base.the_diff->pandas.core.algorithms.safe_sort(the_diff)
A:pandas.core.indexes.base.(other, result_name_update)->self._convert_can_do_setop(other)
A:pandas.core.indexes.base.common_indexer->self.get_indexer(labels).take((indexer != -1).nonzero()[0])
A:pandas.core.indexes.base.left_indexer->_get_leaf_sorter(new_codes[:level + 1])
A:pandas.core.indexes.base.left_diff->self.astype('O')._values.take(left_indexer)
A:pandas.core.indexes.base.right_diff->other.astype('O').astype('O')._values.take(right_indexer)
A:pandas.core.indexes.base.attribs->self._get_attributes_dict()
A:pandas.core.indexes.base.result_name->get_op_result_name(self, other)
A:pandas.core.indexes.base.loc->self.get_loc(label, method='pad')
A:pandas.core.indexes.base.method->ensure_platform_int(missing).clean_reindex_fill_method(method)
A:pandas.core.indexes.base.target->ensure_index(target)
A:pandas.core.indexes.base.tolerance->numpy.asarray(tolerance)
A:pandas.core.indexes.base.(pself, ptarget)->self._maybe_promote(target)
A:pandas.core.indexes.base.indexer[nonexact]->self._searchsorted_monotonic(target[nonexact], side)
A:pandas.core.indexes.base.right_indexer->pandas.core.algorithms.take_nd(right_lev_indexer, join_index.codes[level], allow_fill=False)
A:pandas.core.indexes.base.left_distances->numpy.abs(self._values[left_indexer] - target_values)
A:pandas.core.indexes.base.right_distances->numpy.abs(self._values[right_indexer] - target_values)
A:pandas.core.indexes.base.distance->abs(self._values[indexer] - target)
A:pandas.core.indexes.base.keyarr->numpy.where(keyarr < 0, len(self) + keyarr, keyarr)
A:pandas.core.indexes.base.indexer[indexer < 0]->len(self)
A:pandas.core.indexes.base.(_, indexer, _)->self._join_level(target, level, how='right', return_indexers=True)
A:pandas.core.indexes.base.(indexer, missing)->self._engine.get_indexer_non_unique(tgt_values)
A:pandas.core.indexes.base.new_labels->numpy.empty(tuple([len(indexer)]), dtype=object)
A:pandas.core.indexes.base.length->numpy.arange(len(indexer))
A:pandas.core.indexes.base.missing->ensure_platform_int(missing)
A:pandas.core.indexes.base.missing_labels->ensure_index(target).take(missing)
A:pandas.core.indexes.base.missing_indexer->ensure_int64(length[~check])
A:pandas.core.indexes.base.cur_indexer->ensure_int64(length[check])
A:pandas.core.indexes.base.new_indexer->numpy.arange(len(self.take(indexer)))
A:pandas.core.indexes.base.new_indexer[cur_indexer]->numpy.arange(len(cur_labels))
A:pandas.core.indexes.base.self_is_mi->isinstance(self, MultiIndex)
A:pandas.core.indexes.base.other_is_mi->isinstance(other, MultiIndex)
A:pandas.core.indexes.base.join_index->self._wrap_joined_index(join_index, other)
A:pandas.core.indexes.base.rindexer->other.astype('O').astype('O').get_indexer(join_index)
A:pandas.core.indexes.base.lindexer->self.get_indexer(join_index)
A:pandas.core.indexes.base.how->{'right': 'left', 'left': 'right'}.get(how, how)
A:pandas.core.indexes.base.self_names->set(com.not_none(*self.names))
A:pandas.core.indexes.base.other_names->set(com.not_none(*other.names))
A:pandas.core.indexes.base.ldrop_names->list(self_names - overlap)
A:pandas.core.indexes.base.rdrop_names->list(other_names - overlap)
A:pandas.core.indexes.base.other_jnlevels->other.astype('O').astype('O').droplevel(rdrop_names)
A:pandas.core.indexes.base.self_jnlevels->self.droplevel(ldrop_names)
A:pandas.core.indexes.base.(join_idx, lidx, ridx)->self.droplevel(ldrop_names).join(other_jnlevels, how, return_indexers=True)
A:pandas.core.indexes.base.(levels, codes, names)->_restore_dropped_levels_multijoin(self, other, dropped_names, join_idx, lidx, ridx)
A:pandas.core.indexes.base.multi_join_idx->multi_join_idx.remove_unused_levels().remove_unused_levels()
A:pandas.core.indexes.base.level->type(other)(self._values, dtype=other.dtype)._get_level_number(level)
A:pandas.core.indexes.base.(left_idx, right_idx)->_get_join_indexers([self._ndarray_values], [other._ndarray_values], how=how, sort=True)
A:pandas.core.indexes.base.left_idx->ensure_platform_int(left_idx)
A:pandas.core.indexes.base.right_idx->ensure_platform_int(right_idx)
A:pandas.core.indexes.base.lab->ensure_int64(labels[-1])
A:pandas.core.indexes.base.(sorter, _)->pandas._libs.algos.groupsort_indexer(lab, 1 + lab.max())
A:pandas.core.indexes.base.(new_level, left_lev_indexer, right_lev_indexer)->old_level.join(right, how=how, return_indexers=True)
A:pandas.core.indexes.base.left_lev_indexer->ensure_int64(left_lev_indexer)
A:pandas.core.indexes.base.rev_indexer->pandas._libs.lib.get_reverse_indexer(left_lev_indexer, len(old_level))
A:pandas.core.indexes.base.new_lev_codes->pandas.core.algorithms.take_nd(rev_indexer, left.codes[level], allow_fill=False)
A:pandas.core.indexes.base.(left_indexer, counts)->pandas._libs.algos.groupsort_indexer(new_lev_codes, ngroups)
A:pandas.core.indexes.base.mask_all->isna(self).all()
A:pandas.core.indexes.base.ridx->self._left_indexer_unique(sv, ov)
A:pandas.core.indexes.base.lidx->self._left_indexer_unique(ov, sv)
A:pandas.core.indexes.base.(join_index, lidx, ridx)->self._outer_indexer(sv, ov)
A:pandas.core.indexes.base.(join_index, ridx, lidx)->self._left_indexer(ov, sv)
A:pandas.core.indexes.base.array->PandasArray(array)
A:pandas.core.indexes.base.key->pandas.core.common.values_from_object(key)
A:pandas.core.indexes.base.typs->pandas.core.dtypes.concat.get_dtype_kinds(to_concat)
A:pandas.core.indexes.base.locs->numpy.where(locs > 0, locs - 1, 0)
A:pandas.core.indexes.base.first->isna(self).argmax()
A:pandas.core.indexes.base._as->self.argsort()
A:pandas.core.indexes.base.sorted_index->self.take(_as)
A:pandas.core.indexes.base.s->pandas.core.common.values_from_object(series)
A:pandas.core.indexes.base.iloc->self.get_loc(key)
A:pandas.core.indexes.base.k->self._convert_scalar_indexer(k, kind='getitem')
A:pandas.core.indexes.base.tgt_values->numpy.asarray(target)
A:pandas.core.indexes.base.(indexer, _)->self.get_indexer_non_unique(target, **kwargs)
A:pandas.core.indexes.base.new_values->super()._map_values(mapper, na_action=na_action)
A:pandas.core.indexes.base.(start_slice, end_slice)->self.slice_locs(start, end, step=step, kind=kind)
A:pandas.core.indexes.base.ckey->int(key)
A:pandas.core.indexes.base.pos->self[::-1].searchsorted(label, side='right' if side == 'left' else 'left')
A:pandas.core.indexes.base.label->self._maybe_cast_slice_bound(label, side, kind)
A:pandas.core.indexes.base.slc->pandas._libs.lib.maybe_indices_to_slice(slc.astype('i8'), len(self))
A:pandas.core.indexes.base.ts_start->Timestamp(start)
A:pandas.core.indexes.base.ts_end->Timestamp(end)
A:pandas.core.indexes.base.start_slice->self.get_slice_bound(start, 'left', kind)
A:pandas.core.indexes.base.end_slice->len(self)
A:pandas.core.indexes.base._self->numpy.asarray(self)
A:pandas.core.indexes.base.labels->pandas.core.common.index_labels_to_array(labels, dtype=arr_dtype)
A:pandas.core.indexes.base.cls.__eq__->_make_comparison_op(operator.eq, cls)
A:pandas.core.indexes.base.cls.__ne__->_make_comparison_op(operator.ne, cls)
A:pandas.core.indexes.base.cls.__lt__->_make_comparison_op(operator.lt, cls)
A:pandas.core.indexes.base.cls.__gt__->_make_comparison_op(operator.gt, cls)
A:pandas.core.indexes.base.cls.__le__->_make_comparison_op(operator.le, cls)
A:pandas.core.indexes.base.cls.__ge__->_make_comparison_op(operator.ge, cls)
A:pandas.core.indexes.base.cls.__add__->_make_arithmetic_op(operator.add, cls)
A:pandas.core.indexes.base.cls.__radd__->_make_arithmetic_op(ops.radd, cls)
A:pandas.core.indexes.base.cls.__iadd__->make_invalid_op('__iadd__')
A:pandas.core.indexes.base.cls.__sub__->_make_arithmetic_op(operator.sub, cls)
A:pandas.core.indexes.base.cls.__rsub__->_make_arithmetic_op(ops.rsub, cls)
A:pandas.core.indexes.base.cls.__isub__->make_invalid_op('__isub__')
A:pandas.core.indexes.base.cls.__pow__->_make_arithmetic_op(operator.pow, cls)
A:pandas.core.indexes.base.cls.__rpow__->_make_arithmetic_op(ops.rpow, cls)
A:pandas.core.indexes.base.cls.__mul__->_make_arithmetic_op(operator.mul, cls)
A:pandas.core.indexes.base.cls.__rmul__->_make_arithmetic_op(ops.rmul, cls)
A:pandas.core.indexes.base.cls.__floordiv__->_make_arithmetic_op(operator.floordiv, cls)
A:pandas.core.indexes.base.cls.__rfloordiv__->_make_arithmetic_op(ops.rfloordiv, cls)
A:pandas.core.indexes.base.cls.__truediv__->_make_arithmetic_op(operator.truediv, cls)
A:pandas.core.indexes.base.cls.__rtruediv__->_make_arithmetic_op(ops.rtruediv, cls)
A:pandas.core.indexes.base.cls.__mod__->_make_arithmetic_op(operator.mod, cls)
A:pandas.core.indexes.base.cls.__divmod__->_make_arithmetic_op(divmod, cls)
A:pandas.core.indexes.base.cls.__neg__->_make_evaluate_unary(operator.neg, '__neg__')
A:pandas.core.indexes.base.cls.__pos__->_make_evaluate_unary(operator.pos, '__pos__')
A:pandas.core.indexes.base.cls.__abs__->_make_evaluate_unary(np.abs, '__abs__')
A:pandas.core.indexes.base.cls.__inv__->_make_evaluate_unary(lambda x: -x, '__inv__')
A:pandas.core.indexes.base._index_shared_docs['index_all']->dedent('\n\n        See Also\n        --------\n        Index.any : Return whether any element in an Index is True.\n        Series.any : Return whether any element in a Series is True.\n        Series.all : Return whether all elements in a Series are True.\n\n        Notes\n        -----\n        Not a Number (NaN), positive infinity and negative infinity\n        evaluate to True because these are not equal to zero.\n\n        Examples\n        --------\n        **all**\n\n        True, because nonzero integers are considered True.\n\n        >>> pd.Index([1, 2, 3]).all()\n        True\n\n        False, because ``0`` is considered False.\n\n        >>> pd.Index([0, 1, 2]).all()\n        False\n\n        **any**\n\n        True, because ``1`` is considered True.\n\n        >>> pd.Index([0, 0, 1]).any()\n        True\n\n        False, because ``0`` is considered False.\n\n        >>> pd.Index([0, 0, 0]).any()\n        False\n        ')
A:pandas.core.indexes.base._index_shared_docs['index_any']->dedent('\n\n        See Also\n        --------\n        Index.all : Return whether all elements are True.\n        Series.all : Return whether all elements are True.\n\n        Notes\n        -----\n        Not a Number (NaN), positive infinity and negative infinity\n        evaluate to True because these are not equal to zero.\n\n        Examples\n        --------\n        >>> index = pd.Index([0, 1, 2])\n        >>> index.any()\n        True\n\n        >>> index = pd.Index([0, 0, 0])\n        >>> index.any()\n        False\n        ')
A:pandas.core.indexes.base.cls.all->make_invalid_op('all')
A:pandas.core.indexes.base.cls.any->make_invalid_op('any')
A:pandas.core.indexes.base.index_like->copy(index_like)
A:pandas.core.indexes.base.(converted, all_arrays)->pandas._libs.lib.clean_index_list(index_like)
A:pandas.core.indexes.base.inferred->pandas._libs.lib.infer_dtype(subarr, skipna=False)
A:pandas.core.indexes.base.res->pandas.core.arrays.PeriodArray._from_sequence(subarr).astype('u8', copy=False)
pandas.core.indexes.base.Index(cls,data=None,dtype=None,copy=False,name=None,tupleize_cols=True,**kwargs)
pandas.core.indexes.base.Index.__add__(self,other)
pandas.core.indexes.base.Index.__and__(self,other)
pandas.core.indexes.base.Index.__array__(self,dtype=None)->np.ndarray
pandas.core.indexes.base.Index.__array_wrap__(self,result,context=None)
pandas.core.indexes.base.Index.__contains__(self,key)->bool
pandas.core.indexes.base.Index.__copy__(self,**kwargs)
pandas.core.indexes.base.Index.__deepcopy__(self,memo=None)
pandas.core.indexes.base.Index.__getitem__(self,key)
pandas.core.indexes.base.Index.__hash__(self)
pandas.core.indexes.base.Index.__iadd__(self,other)
pandas.core.indexes.base.Index.__len__(self)->int
pandas.core.indexes.base.Index.__new__(cls,data=None,dtype=None,copy=False,name=None,tupleize_cols=True,**kwargs)
pandas.core.indexes.base.Index.__nonzero__(self)
pandas.core.indexes.base.Index.__or__(self,other)
pandas.core.indexes.base.Index.__radd__(self,other)
pandas.core.indexes.base.Index.__reduce__(self)
pandas.core.indexes.base.Index.__repr__(self)
pandas.core.indexes.base.Index.__rsub__(self,other)
pandas.core.indexes.base.Index.__setitem__(self,key,value)
pandas.core.indexes.base.Index.__sub__(self,other)
pandas.core.indexes.base.Index.__xor__(self,other)
pandas.core.indexes.base.Index._add_comparison_methods(cls)
pandas.core.indexes.base.Index._add_logical_methods(cls)
pandas.core.indexes.base.Index._add_logical_methods_disabled(cls)
pandas.core.indexes.base.Index._add_numeric_methods(cls)
pandas.core.indexes.base.Index._add_numeric_methods_add_sub_disabled(cls)
pandas.core.indexes.base.Index._add_numeric_methods_binary(cls)
pandas.core.indexes.base.Index._add_numeric_methods_disabled(cls)
pandas.core.indexes.base.Index._add_numeric_methods_unary(cls)
pandas.core.indexes.base.Index._assert_can_do_op(self,value)
pandas.core.indexes.base.Index._assert_can_do_setop(self,other)
pandas.core.indexes.base.Index._assert_take_fillable(self,values,indices,allow_fill=True,fill_value=None,na_value=np.nan)
pandas.core.indexes.base.Index._can_hold_identifiers_and_holds_name(self,name)->bool
pandas.core.indexes.base.Index._can_reindex(self,indexer)
pandas.core.indexes.base.Index._cleanup(self)
pandas.core.indexes.base.Index._coerce_scalar_to_index(self,item)
pandas.core.indexes.base.Index._concat(self,to_concat,name)
pandas.core.indexes.base.Index._concat_same_dtype(self,to_concat,name)
pandas.core.indexes.base.Index._constructor(self)
pandas.core.indexes.base.Index._convert_arr_indexer(self,keyarr)
pandas.core.indexes.base.Index._convert_can_do_setop(self,other)
pandas.core.indexes.base.Index._convert_for_op(self,value)
pandas.core.indexes.base.Index._convert_index_indexer(self,keyarr)
pandas.core.indexes.base.Index._convert_list_indexer(self,keyarr,kind=None)
pandas.core.indexes.base.Index._convert_listlike_indexer(self,keyarr,kind=None)
pandas.core.indexes.base.Index._convert_scalar_indexer(self,key,kind=None)
pandas.core.indexes.base.Index._convert_slice_indexer(self,key:slice,kind=None)
pandas.core.indexes.base.Index._convert_tolerance(self,tolerance,target)
pandas.core.indexes.base.Index._engine(self)
pandas.core.indexes.base.Index._filter_indexer_tolerance(self,target,indexer,tolerance)
pandas.core.indexes.base.Index._format_attrs(self)
pandas.core.indexes.base.Index._format_data(self,name=None)
pandas.core.indexes.base.Index._format_native_types(self,na_rep='',quoting=None,**kwargs)
pandas.core.indexes.base.Index._format_space(self)
pandas.core.indexes.base.Index._format_with_header(self,header,na_rep='NaN',**kwargs)
pandas.core.indexes.base.Index._formatter_func(self)
pandas.core.indexes.base.Index._get_attributes_dict(self)
pandas.core.indexes.base.Index._get_fill_indexer(self,target,method,limit=None,tolerance=None)
pandas.core.indexes.base.Index._get_fill_indexer_searchsorted(self,target,method,limit=None)
pandas.core.indexes.base.Index._get_grouper_for_level(self,mapper,level=None)
pandas.core.indexes.base.Index._get_level_number(self,level)
pandas.core.indexes.base.Index._get_level_values(self,level)
pandas.core.indexes.base.Index._get_names(self)
pandas.core.indexes.base.Index._get_nearest_indexer(self,target,limit,tolerance)
pandas.core.indexes.base.Index._get_reconciled_name_object(self,other)
pandas.core.indexes.base.Index._get_string_slice(self,key,use_lhs=True,use_rhs=True)
pandas.core.indexes.base.Index._get_unique_index(self,dropna=False)
pandas.core.indexes.base.Index._has_complex_internals(self)
pandas.core.indexes.base.Index._inner_indexer(self,left,right)
pandas.core.indexes.base.Index._internal_get_values(self)
pandas.core.indexes.base.Index._invalid_indexer(self,form,key)
pandas.core.indexes.base.Index._is_compatible_with_other(self,other)
pandas.core.indexes.base.Index._is_memory_usage_qualified(self)->bool
pandas.core.indexes.base.Index._is_strictly_monotonic_decreasing(self)->bool
pandas.core.indexes.base.Index._is_strictly_monotonic_increasing(self)->bool
pandas.core.indexes.base.Index._isnan(self)
pandas.core.indexes.base.Index._join_level(self,other,level,how='left',return_indexers=False,keep_order=True)
pandas.core.indexes.base.Index._join_monotonic(self,other,how='left',return_indexers=False)
pandas.core.indexes.base.Index._join_multi(self,other,how,return_indexers=True)
pandas.core.indexes.base.Index._join_non_unique(self,other,how='left',return_indexers=False)
pandas.core.indexes.base.Index._left_indexer(self,left,right)
pandas.core.indexes.base.Index._left_indexer_unique(self,left,right)
pandas.core.indexes.base.Index._maybe_cast_indexer(self,key)
pandas.core.indexes.base.Index._maybe_cast_slice_bound(self,label,side,kind)
pandas.core.indexes.base.Index._maybe_promote(self,other)
pandas.core.indexes.base.Index._mpl_repr(self)
pandas.core.indexes.base.Index._nan_idxs(self)
pandas.core.indexes.base.Index._outer_indexer(self,left,right)
pandas.core.indexes.base.Index._reindex_non_unique(self,target)
pandas.core.indexes.base.Index._reset_identity(self)
pandas.core.indexes.base.Index._scalar_data_error(cls,data)
pandas.core.indexes.base.Index._searchsorted_monotonic(self,label,side='left')
pandas.core.indexes.base.Index._set_names(self,values,level=None)
pandas.core.indexes.base.Index._shallow_copy(self,values=None,**kwargs)
pandas.core.indexes.base.Index._shallow_copy_with_infer(self,values,**kwargs)
pandas.core.indexes.base.Index._simple_new(cls,values,name=None,dtype=None)
pandas.core.indexes.base.Index._sort_levels_monotonic(self)
pandas.core.indexes.base.Index._string_data_error(cls,data)
pandas.core.indexes.base.Index._summary(self,name=None)
pandas.core.indexes.base.Index._to_safe_for_reshape(self)
pandas.core.indexes.base.Index._union(self,other,sort)
pandas.core.indexes.base.Index._union_incompatible_dtypes(self,other,sort)
pandas.core.indexes.base.Index._update_inplace(self,result,**kwargs)
pandas.core.indexes.base.Index._validate_index_level(self,level)
pandas.core.indexes.base.Index._validate_indexer(self,form,key,kind)
pandas.core.indexes.base.Index._validate_names(self,name=None,names=None,deep=False)
pandas.core.indexes.base.Index._validate_sort_keyword(self,sort)
pandas.core.indexes.base.Index._values(self)->Union[ExtensionArray, ABCIndexClass, np.ndarray]
pandas.core.indexes.base.Index._wrap_joined_index(self,joined,other)
pandas.core.indexes.base.Index._wrap_setop_result(self,other,result)
pandas.core.indexes.base.Index.append(self,other)
pandas.core.indexes.base.Index.argsort(self,*args,**kwargs)
pandas.core.indexes.base.Index.array(self)->ExtensionArray
pandas.core.indexes.base.Index.asi8(self)
pandas.core.indexes.base.Index.asof(self,label)
pandas.core.indexes.base.Index.asof_locs(self,where,mask)
pandas.core.indexes.base.Index.astype(self,dtype,copy=True)
pandas.core.indexes.base.Index.copy(self,name=None,deep=False,dtype=None,**kwargs)
pandas.core.indexes.base.Index.delete(self,loc)
pandas.core.indexes.base.Index.difference(self,other,sort=None)
pandas.core.indexes.base.Index.drop(self,labels,errors='raise')
pandas.core.indexes.base.Index.drop_duplicates(self,keep='first')
pandas.core.indexes.base.Index.droplevel(self,level=0)
pandas.core.indexes.base.Index.dropna(self,how='any')
pandas.core.indexes.base.Index.dtype(self)
pandas.core.indexes.base.Index.duplicated(self,keep='first')
pandas.core.indexes.base.Index.equals(self,other)->bool
pandas.core.indexes.base.Index.fillna(self,value=None,downcast=None)
pandas.core.indexes.base.Index.format(self,name=False,formatter=None,**kwargs)
pandas.core.indexes.base.Index.get_indexer(self,target,method=None,limit=None,tolerance=None)
pandas.core.indexes.base.Index.get_indexer_for(self,target,**kwargs)
pandas.core.indexes.base.Index.get_indexer_non_unique(self,target)
pandas.core.indexes.base.Index.get_loc(self,key,method=None,tolerance=None)
pandas.core.indexes.base.Index.get_slice_bound(self,label,side,kind)
pandas.core.indexes.base.Index.get_value(self,series,key)
pandas.core.indexes.base.Index.groupby(self,values)->Dict[Hashable, np.ndarray]
pandas.core.indexes.base.Index.has_duplicates(self)->bool
pandas.core.indexes.base.Index.hasnans(self)
pandas.core.indexes.base.Index.holds_integer(self)
pandas.core.indexes.base.Index.identical(self,other)->bool
pandas.core.indexes.base.Index.inferred_type(self)
pandas.core.indexes.base.Index.insert(self,loc,item)
pandas.core.indexes.base.Index.intersection(self,other,sort=False)
pandas.core.indexes.base.Index.is_(self,other)->bool
pandas.core.indexes.base.Index.is_all_dates(self)->bool
pandas.core.indexes.base.Index.is_boolean(self)->bool
pandas.core.indexes.base.Index.is_categorical(self)->bool
pandas.core.indexes.base.Index.is_floating(self)->bool
pandas.core.indexes.base.Index.is_integer(self)->bool
pandas.core.indexes.base.Index.is_interval(self)->bool
pandas.core.indexes.base.Index.is_mixed(self)->bool
pandas.core.indexes.base.Index.is_monotonic(self)->bool
pandas.core.indexes.base.Index.is_monotonic_decreasing(self)->bool
pandas.core.indexes.base.Index.is_monotonic_increasing(self)
pandas.core.indexes.base.Index.is_numeric(self)->bool
pandas.core.indexes.base.Index.is_object(self)->bool
pandas.core.indexes.base.Index.is_type_compatible(self,kind)->bool
pandas.core.indexes.base.Index.is_unique(self)->bool
pandas.core.indexes.base.Index.isin(self,values,level=None)
pandas.core.indexes.base.Index.isna(self)
pandas.core.indexes.base.Index.join(self,other,how='left',level=None,return_indexers=False,sort=False)
pandas.core.indexes.base.Index.map(self,mapper,na_action=None)
pandas.core.indexes.base.Index.memory_usage(self,deep=False)
pandas.core.indexes.base.Index.name(self)
pandas.core.indexes.base.Index.name(self,value)
pandas.core.indexes.base.Index.nlevels(self)->int
pandas.core.indexes.base.Index.notna(self)
pandas.core.indexes.base.Index.putmask(self,mask,value)
pandas.core.indexes.base.Index.ravel(self,order='C')
pandas.core.indexes.base.Index.reindex(self,target,method=None,level=None,limit=None,tolerance=None)
pandas.core.indexes.base.Index.rename(self,name,inplace=False)
pandas.core.indexes.base.Index.repeat(self,repeats,axis=None)
pandas.core.indexes.base.Index.set_names(self,names,level=None,inplace=False)
pandas.core.indexes.base.Index.set_value(self,arr,key,value)
pandas.core.indexes.base.Index.shape(self)
pandas.core.indexes.base.Index.shift(self,periods=1,freq=None)
pandas.core.indexes.base.Index.slice_indexer(self,start=None,end=None,step=None,kind=None)
pandas.core.indexes.base.Index.slice_locs(self,start=None,end=None,step=None,kind=None)
pandas.core.indexes.base.Index.sort(self,*args,**kwargs)
pandas.core.indexes.base.Index.sort_values(self,return_indexer=False,ascending=True)
pandas.core.indexes.base.Index.sortlevel(self,level=None,ascending=True,sort_remaining=None)
pandas.core.indexes.base.Index.symmetric_difference(self,other,result_name=None,sort=None)
pandas.core.indexes.base.Index.take(self,indices,axis=0,allow_fill=True,fill_value=None,**kwargs)
pandas.core.indexes.base.Index.to_flat_index(self)
pandas.core.indexes.base.Index.to_frame(self,index=True,name=None)
pandas.core.indexes.base.Index.to_native_types(self,slicer=None,**kwargs)
pandas.core.indexes.base.Index.to_series(self,index=None,name=None)
pandas.core.indexes.base.Index.union(self,other,sort=None)
pandas.core.indexes.base.Index.unique(self,level=None)
pandas.core.indexes.base.Index.values(self)
pandas.core.indexes.base.Index.view(self,cls=None)
pandas.core.indexes.base.Index.where(self,cond,other=None)
pandas.core.indexes.base.InvalidIndexError(Exception)
pandas.core.indexes.base._ensure_has_len(seq)
pandas.core.indexes.base._make_arithmetic_op(op,cls)
pandas.core.indexes.base._make_comparison_op(op,cls)
pandas.core.indexes.base._maybe_cast_data_without_dtype(subarr)
pandas.core.indexes.base._maybe_cast_with_dtype(data:np.ndarray,dtype:np.dtype,copy:bool)->np.ndarray
pandas.core.indexes.base._new_Index(cls,d)
pandas.core.indexes.base._trim_front(strings)
pandas.core.indexes.base._try_convert_to_int_array(data:np.ndarray,copy:bool,dtype:np.dtype)->np.ndarray
pandas.core.indexes.base._validate_join_method(method)
pandas.core.indexes.base.default_index(n)
pandas.core.indexes.base.ensure_index(index_like,copy=False)
pandas.core.indexes.base.ensure_index_from_sequences(sequences,names=None)
pandas.core.indexes.base.maybe_extract_name(name,obj,cls)->Optional[Hashable]


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/indexes/timedeltas.py----------------------------------------
A:pandas.core.indexes.timedeltas.name->maybe_extract_name(name, data, cls)
A:pandas.core.indexes.timedeltas.data->data.copy().copy()
A:pandas.core.indexes.timedeltas.tdarr->pandas.core.arrays.timedeltas.TimedeltaArray._generate_range(start, end, periods, freq, closed=closed)
A:pandas.core.indexes.timedeltas.values->self._engine.get_value(com.values_from_object(series), key)
A:pandas.core.indexes.timedeltas.result->self._data.astype(dtype, copy=copy)
A:pandas.core.indexes.timedeltas.dtype->pandas_dtype(dtype)
A:pandas.core.indexes.timedeltas.other->TimedeltaIndex(other)
A:pandas.core.indexes.timedeltas.key->Timedelta(key)
A:pandas.core.indexes.timedeltas.value->self._data._scalar_type(value)
A:pandas.core.indexes.timedeltas.loc->self._partial_td_slice(key)
A:pandas.core.indexes.timedeltas.tolerance->self._convert_tolerance(tolerance, np.asarray(key))
A:pandas.core.indexes.timedeltas.stamp->Timedelta(key)
A:pandas.core.indexes.timedeltas.parsed->Timedelta(label)
A:pandas.core.indexes.timedeltas.lbound->Timedelta(label).round(parsed.resolution_string)
A:pandas.core.indexes.timedeltas.item->self._data._scalar_type(item)
A:pandas.core.indexes.timedeltas.new_i8s->numpy.concatenate((self[:loc].asi8, [item.view(np.int64)], self[loc:].asi8))
A:pandas.core.indexes.timedeltas.(freq, freq_infer)->pandas.core.arrays.datetimelike.maybe_infer_freq(freq)
pandas.core.indexes.timedeltas.TimedeltaDelegateMixin(DatetimelikeDelegateMixin)
pandas.core.indexes.timedeltas.TimedeltaIndex(cls,data=None,unit=None,freq=None,closed=None,dtype=_TD_DTYPE,copy=False,name=None)
pandas.core.indexes.timedeltas.TimedeltaIndex.__new__(cls,data=None,unit=None,freq=None,closed=None,dtype=_TD_DTYPE,copy=False,name=None)
pandas.core.indexes.timedeltas.TimedeltaIndex._formatter_func(self)
pandas.core.indexes.timedeltas.TimedeltaIndex._get_string_slice(self,key)
pandas.core.indexes.timedeltas.TimedeltaIndex._maybe_cast_slice_bound(self,label,side,kind)
pandas.core.indexes.timedeltas.TimedeltaIndex._maybe_promote(self,other)
pandas.core.indexes.timedeltas.TimedeltaIndex._partial_td_slice(self,key)
pandas.core.indexes.timedeltas.TimedeltaIndex._simple_new(cls,values,name=None,freq=None,dtype=_TD_DTYPE)
pandas.core.indexes.timedeltas.TimedeltaIndex.astype(self,dtype,copy=True)
pandas.core.indexes.timedeltas.TimedeltaIndex.get_loc(self,key,method=None,tolerance=None)
pandas.core.indexes.timedeltas.TimedeltaIndex.get_value(self,series,key)
pandas.core.indexes.timedeltas.TimedeltaIndex.get_value_maybe_box(self,series,key:Timedelta)
pandas.core.indexes.timedeltas.TimedeltaIndex.inferred_type(self)->str
pandas.core.indexes.timedeltas.TimedeltaIndex.insert(self,loc,item)
pandas.core.indexes.timedeltas.TimedeltaIndex.is_type_compatible(self,typ)->bool
pandas.core.indexes.timedeltas.TimedeltaIndex.searchsorted(self,value,side='left',sorter=None)
pandas.core.indexes.timedeltas.timedelta_range(start=None,end=None,periods=None,freq=None,name=None,closed=None)->TimedeltaIndex


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/ops/__init__.py----------------------------------------
A:pandas.core.ops.__init__.name->_get_op_name(op, special)
A:pandas.core.ops.__init__.a_has->hasattr(a, 'name')
A:pandas.core.ops.__init__.b_has->hasattr(b, 'name')
A:pandas.core.ops.__init__.obj->obj.astype('timedelta64[ns]').astype('timedelta64[ns]')
A:pandas.core.ops.__init__.right->to_series(right)
A:pandas.core.ops.__init__.opname->op.__name__.strip('_')
A:pandas.core.ops.__init__.left_mask->isna(left)
A:pandas.core.ops.__init__.right_mask->isna(right)
A:pandas.core.ops.__init__.left->left.astype(object).astype(object)
A:pandas.core.ops.__init__.array_op->get_array_op(func, str_rep=str_rep)
A:pandas.core.ops.__init__.bm->left.astype(object).astype(object)._data.apply(array_op, right=right)
A:pandas.core.ops.__init__.new_data->dispatch_to_series(self, other, op)
A:pandas.core.ops.__init__.(left, right)->self.fillna(fill_value).align(other, join='outer', level=level, copy=False)
A:pandas.core.ops.__init__.out->out.__finalize__(left).__finalize__(left)
A:pandas.core.ops.__init__.str_rep->_get_opstr(op)
A:pandas.core.ops.__init__.op_name->_get_op_name(op, special)
A:pandas.core.ops.__init__.res_name->get_op_result_name(self, other)
A:pandas.core.ops.__init__.lvalues->extract_array(self, extract_numpy=True)
A:pandas.core.ops.__init__.rvalues->extract_array(other, extract_numpy=True)
A:pandas.core.ops.__init__.result->op(new_left, new_right)
A:pandas.core.ops.__init__.res_values->logical_op(lvalues, rvalues, op)
A:pandas.core.ops.__init__.(self, other)->self.fillna(fill_value).align(other, 'outer', level=level, copy=False)
A:pandas.core.ops.__init__.doc->pandas.core.ops.docstrings._flex_comp_doc_FRAME.format(op_name=op_name, desc=_op_descriptions[op_name]['desc'])
A:pandas.core.ops.__init__.other->_align_method_FRAME(self, other, axis=None)
A:pandas.core.ops.__init__.self->self.fillna(fill_value).fillna(fill_value)
A:pandas.core.ops.__init__.axis->self.fillna(fill_value).fillna(fill_value)._get_axis_number(axis)
A:pandas.core.ops.__init__.cols->left.astype(object).astype(object).columns.intersection(right.columns)
A:pandas.core.ops.__init__.(join_columns, _, _)->left.astype(object).astype(object).columns.join(right.columns, how='outer', level=None, return_indexers=True)
A:pandas.core.ops.__init__.default_axis->_get_frame_op_default_axis(op_name)
A:pandas.core.ops.__init__.na_op->define_na_arithmetic_op(op, str_rep)
pandas.core.ops.__init__._align_method_FRAME(left,right,axis)
pandas.core.ops.__init__._align_method_SERIES(left,right,align_asobject=False)
pandas.core.ops.__init__._arith_method_FRAME(cls,op,special)
pandas.core.ops.__init__._arith_method_SERIES(cls,op,special)
pandas.core.ops.__init__._bool_method_SERIES(cls,op,special)
pandas.core.ops.__init__._combine_series_frame(self,other,func,fill_value=None,axis=None,level=None)
pandas.core.ops.__init__._comp_method_FRAME(cls,op,special)
pandas.core.ops.__init__._comp_method_SERIES(cls,op,special)
pandas.core.ops.__init__._construct_result(left:ABCSeries,result:Union[np.ndarray,ABCExtensionArray],index:ABCIndexClass,name)
pandas.core.ops.__init__._flex_comp_method_FRAME(cls,op,special)
pandas.core.ops.__init__._flex_method_SERIES(cls,op,special)
pandas.core.ops.__init__._frame_arith_method_with_reindex(left:'DataFrame',right:'DataFrame',op)->'DataFrame'
pandas.core.ops.__init__._get_frame_op_default_axis(name)
pandas.core.ops.__init__._get_op_name(op,special)
pandas.core.ops.__init__._get_opstr(op)
pandas.core.ops.__init__._maybe_match_name(a,b)
pandas.core.ops.__init__._should_reindex_frame_op(left:'DataFrame',right,op,axis,default_axis:int,fill_value,level)->bool
pandas.core.ops.__init__.dispatch_to_series(left,right,func,str_rep=None,axis=None)
pandas.core.ops.__init__.fill_binop(left,right,fill_value)
pandas.core.ops.__init__.get_op_result_name(left,right)
pandas.core.ops.__init__.maybe_upcast_for_op(obj,shape:Tuple[int,...])


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/ops/array_ops.py----------------------------------------
A:pandas.core.ops.array_ops.y->bool(y)
A:pandas.core.ops.array_ops.result->pandas._libs.ops.scalar_binop(x, y, op)
A:pandas.core.ops.array_ops.xrav->x.astype(bool).ravel()
A:pandas.core.ops.array_ops.dtype->find_common_type([x.dtype, y.dtype])
A:pandas.core.ops.array_ops.yrav->bool(y).ravel()
A:pandas.core.ops.array_ops.result[mask]->op(xrav[mask], y)
A:pandas.core.ops.array_ops.mask->isna(x)
A:pandas.core.ops.array_ops.(result, _)->maybe_upcast_putmask(result, ~mask, np.nan)
A:pandas.core.ops.array_ops.rvalues->numpy.asarray(rvalues)
A:pandas.core.ops.array_ops.res_values->filler(res_values)
A:pandas.core.ops.array_ops.method->getattr(lvalues, op_name)
A:pandas.core.ops.array_ops.typ->type(rvalues)
A:pandas.core.ops.array_ops.x->x.astype(bool).astype(bool)
A:pandas.core.ops.array_ops.is_self_int_dtype->is_integer_dtype(left.dtype)
A:pandas.core.ops.array_ops.right->construct_1d_object_array_from_listlike(right)
A:pandas.core.ops.array_ops.is_other_int_dtype->pandas._libs.lib.is_integer(rvalues)
A:pandas.core.ops.array_ops.op_name->op.__name__.strip('_')
pandas.core.ops.arithmetic_op(left:Union[np.ndarray,ABCExtensionArray],right:Any,op,str_rep:str)
pandas.core.ops.array_ops.arithmetic_op(left:Union[np.ndarray,ABCExtensionArray],right:Any,op,str_rep:str)
pandas.core.ops.array_ops.comp_method_OBJECT_ARRAY(op,x,y)
pandas.core.ops.array_ops.comparison_op(left:Union[np.ndarray,ABCExtensionArray],right:Any,op)->Union[np.ndarray, ABCExtensionArray]
pandas.core.ops.array_ops.define_na_arithmetic_op(op,str_rep:str)
pandas.core.ops.array_ops.get_array_op(op,str_rep:Optional[str]=None)
pandas.core.ops.array_ops.logical_op(left:Union[np.ndarray,ABCExtensionArray],right:Any,op)->Union[np.ndarray, ABCExtensionArray]
pandas.core.ops.array_ops.masked_arith_op(x,y,op)
pandas.core.ops.array_ops.na_arithmetic_op(left,right,op,str_rep:str)
pandas.core.ops.array_ops.na_logical_op(x:np.ndarray,y,op)
pandas.core.ops.comp_method_OBJECT_ARRAY(op,x,y)
pandas.core.ops.comparison_op(left:Union[np.ndarray,ABCExtensionArray],right:Any,op)->Union[np.ndarray, ABCExtensionArray]
pandas.core.ops.define_na_arithmetic_op(op,str_rep:str)
pandas.core.ops.get_array_op(op,str_rep:Optional[str]=None)
pandas.core.ops.logical_op(left:Union[np.ndarray,ABCExtensionArray],right:Any,op)->Union[np.ndarray, ABCExtensionArray]


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/ops/invalid.py----------------------------------------
A:pandas.core.ops.invalid.res_values->numpy.ones(left.shape, dtype=bool)
pandas.core.ops.invalid.invalid_comparison(left,right,op)
pandas.core.ops.invalid.make_invalid_op(name:str)
pandas.core.ops.invalid_comparison(left,right,op)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/ops/dispatch.py----------------------------------------
A:pandas.core.ops.dispatch.left->array(left)
A:pandas.core.ops.dispatch.res_values->op(left, right)
pandas.core.ops.dispatch.dispatch_to_extension_op(op,left:Union[ABCExtensionArray,np.ndarray],right:Any)
pandas.core.ops.dispatch.should_extension_dispatch(left:ABCSeries,right:Any)->bool
pandas.core.ops.dispatch.should_series_dispatch(left,right,op)
pandas.core.ops.should_series_dispatch(left,right,op)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/ops/missing.py----------------------------------------
A:pandas.core.ops.missing.is_scalar_type->is_scalar(y)
A:pandas.core.ops.missing.y->numpy.array(y)
A:pandas.core.ops.missing.mask->((y == 0) & ~np.isnan(result)).ravel()
A:pandas.core.ops.missing.result->fill_zeros(result, right, left)
A:pandas.core.ops.missing.nan_mask->(zmask & (x == 0)).ravel()
A:pandas.core.ops.missing.neginf_mask->(zpos_mask & (x < 0) | zneg_mask & (x > 0)).ravel()
A:pandas.core.ops.missing.posinf_mask->(zpos_mask & (x > 0) | zneg_mask & (x < 0)).ravel()
pandas.core.ops.missing.dispatch_fill_zeros(op,left,right,result)
pandas.core.ops.missing.fill_zeros(result,x,y)
pandas.core.ops.missing.mask_zero_div_zero(x,y,result)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/ops/docstrings.py----------------------------------------
A:pandas.core.ops.docstrings.op_name->op_name.replace('__', '').replace('__', '')
A:pandas.core.ops.docstrings.doc_no_examples->base_doc.format(desc=op_desc['desc'], op_name=op_name, equiv=equiv, reverse=op_desc['reverse'])
A:pandas.core.ops.docstrings.doc->base_doc.format(desc=op_desc['desc'], op_name=op_name, equiv=equiv, reverse=op_desc['reverse'])
A:pandas.core.ops.docstrings._op_names->list(_op_descriptions.keys())
A:pandas.core.ops.docstrings._op_descriptions[reverse_op]->_op_descriptions[key].copy()
pandas.core.ops._make_flex_doc(op_name,typ)
pandas.core.ops.docstrings._make_flex_doc(op_name,typ)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/ops/common.py----------------------------------------
A:pandas.core.ops.common.other->item_from_zerodim(other)
pandas.core.ops.common._unpack_zerodim_and_defer(method,name:str)
pandas.core.ops.common.unpack_zerodim_and_defer(name:str)
pandas.core.ops.unpack_zerodim_and_defer(name:str)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/ops/roperator.py----------------------------------------
pandas.core.ops.radd(left,right)
pandas.core.ops.rand_(left,right)
pandas.core.ops.rdiv(left,right)
pandas.core.ops.rdivmod(left,right)
pandas.core.ops.rfloordiv(left,right)
pandas.core.ops.rmod(left,right)
pandas.core.ops.rmul(left,right)
pandas.core.ops.roperator.radd(left,right)
pandas.core.ops.roperator.rand_(left,right)
pandas.core.ops.roperator.rdiv(left,right)
pandas.core.ops.roperator.rdivmod(left,right)
pandas.core.ops.roperator.rfloordiv(left,right)
pandas.core.ops.roperator.rmod(left,right)
pandas.core.ops.roperator.rmul(left,right)
pandas.core.ops.roperator.ror_(left,right)
pandas.core.ops.roperator.rpow(left,right)
pandas.core.ops.roperator.rsub(left,right)
pandas.core.ops.roperator.rtruediv(left,right)
pandas.core.ops.roperator.rxor(left,right)
pandas.core.ops.ror_(left,right)
pandas.core.ops.rpow(left,right)
pandas.core.ops.rsub(left,right)
pandas.core.ops.rtruediv(left,right)
pandas.core.ops.rxor(left,right)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/ops/methods.py----------------------------------------
A:pandas.core.ops.methods.(_, _, arith_method, comp_method, bool_method)->_get_method_wrappers(cls)
A:pandas.core.ops.methods.new_methods->dict(add=arith_method(cls, operator.add, special), radd=arith_method(cls, radd, special), sub=arith_method(cls, operator.sub, special), mul=arith_method(cls, operator.mul, special), truediv=arith_method(cls, operator.truediv, special), floordiv=arith_method(cls, operator.floordiv, special), mod=arith_method(cls, operator.mod, special), pow=arith_method(cls, operator.pow, special), rmul=arith_method(cls, rmul, special), rsub=arith_method(cls, rsub, special), rtruediv=arith_method(cls, rtruediv, special), rfloordiv=arith_method(cls, rfloordiv, special), rpow=arith_method(cls, rpow, special), rmod=arith_method(cls, rmod, special))
A:pandas.core.ops.methods.result->method(self, other)
A:pandas.core.ops.methods.name->method.__name__.strip('__')
A:pandas.core.ops.methods.(flex_arith_method, flex_comp_method, _, _, _)->_get_method_wrappers(cls)
A:pandas.core.ops.methods.have_divmod->issubclass(cls, ABCSeries)
A:pandas.core.ops.methods.new_methods['divmod']->arith_method(cls, divmod, special)
A:pandas.core.ops.methods.new_methods['rdivmod']->arith_method(cls, rdivmod, special)
pandas.core.ops.add_flex_arithmetic_methods(cls)
pandas.core.ops.add_special_arithmetic_methods(cls)
pandas.core.ops.methods._add_methods(cls,new_methods)
pandas.core.ops.methods._create_methods(cls,arith_method,comp_method,bool_method,special)
pandas.core.ops.methods._get_method_wrappers(cls)
pandas.core.ops.methods.add_flex_arithmetic_methods(cls)
pandas.core.ops.methods.add_special_arithmetic_methods(cls)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/ops/mask_ops.py----------------------------------------
A:pandas.core.ops.mask_ops.result->numpy.zeros_like(left)
A:pandas.core.ops.mask_ops.mask->left_mask.copy()
pandas.core.ops.kleene_and(left:Union[bool,libmissing.NAType,np.ndarray],right:Union[bool,libmissing.NAType,np.ndarray],left_mask:Optional[np.ndarray],right_mask:Optional[np.ndarray])
pandas.core.ops.kleene_or(left:Union[bool,np.ndarray],right:Union[bool,np.ndarray],left_mask:Optional[np.ndarray],right_mask:Optional[np.ndarray])
pandas.core.ops.kleene_xor(left:Union[bool,np.ndarray],right:Union[bool,np.ndarray],left_mask:Optional[np.ndarray],right_mask:Optional[np.ndarray])
pandas.core.ops.mask_ops.kleene_and(left:Union[bool,libmissing.NAType,np.ndarray],right:Union[bool,libmissing.NAType,np.ndarray],left_mask:Optional[np.ndarray],right_mask:Optional[np.ndarray])
pandas.core.ops.mask_ops.kleene_or(left:Union[bool,np.ndarray],right:Union[bool,np.ndarray],left_mask:Optional[np.ndarray],right_mask:Optional[np.ndarray])
pandas.core.ops.mask_ops.kleene_xor(left:Union[bool,np.ndarray],right:Union[bool,np.ndarray],left_mask:Optional[np.ndarray],right_mask:Optional[np.ndarray])
pandas.core.ops.mask_ops.raise_for_nan(value,method)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/computation/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/computation/pytables.py----------------------------------------
A:pandas.core.computation.pytables.res->pr(left.prune(klass), right.prune(klass))
A:pandas.core.computation.pytables.rhs->self.conform(self.rhs)
A:pandas.core.computation.pytables.val->bool(v).tostring(self.encoding)
A:pandas.core.computation.pytables.encoder->partial(pprint_thing_encoded, encoding=self.encoding)
A:pandas.core.computation.pytables.kind->_ensure_decoded(self.kind)
A:pandas.core.computation.pytables.meta->_ensure_decoded(self.meta)
A:pandas.core.computation.pytables.v->bool(v)
A:pandas.core.computation.pytables.metadata->pandas.core.common.values_from_object(self.metadata)
A:pandas.core.computation.pytables.result->pandas.core.common.values_from_object(self.metadata).searchsorted(v, side='left')
A:pandas.core.computation.pytables.f->list(self.filter)
A:pandas.core.computation.pytables.f[1]->self.generate_filter_op(invert=True)
A:pandas.core.computation.pytables.self.filter->self.terms.prune(FilterBinOp)
A:pandas.core.computation.pytables.values->list(rhs)
A:pandas.core.computation.pytables.filter_op->self.generate_filter_op()
A:pandas.core.computation.pytables.self.condition->self.terms.prune(ConditionBinOp)
A:pandas.core.computation.pytables.operand->operand.prune(klass).prune(klass)
A:pandas.core.computation.pytables.cmpr->ast.Compare(ops=[ast.Eq()], left=node.targets[0], comparators=[node.value])
A:pandas.core.computation.pytables.value->self.visit(node.value)
A:pandas.core.computation.pytables.slobj->self.visit(node.slice)
A:pandas.core.computation.pytables.ctx->type(node.ctx)
A:pandas.core.computation.pytables.resolved->self.visit(value)
A:pandas.core.computation.pytables.where->list(where)
A:pandas.core.computation.pytables.w->_validate_where(w)
A:pandas.core.computation.pytables._where->' & '.join((f'({w})' for w in com.flatten(where)))
A:pandas.core.computation.pytables.self.env->PyTablesScope(scope_level + 1, local_dict=local_dict)
A:pandas.core.computation.pytables.self._visitor->PyTablesExprVisitor(self.env, queryables=queryables, parser='pytables', engine='pytables', encoding=encoding)
A:pandas.core.computation.pytables.self.terms->self.parse()
pandas.core.computation.pytables.BinOp(self,op:str,lhs,rhs,queryables:Dict[str,Any],encoding)
pandas.core.computation.pytables.BinOp.__init__(self,op:str,lhs,rhs,queryables:Dict[str,Any],encoding)
pandas.core.computation.pytables.BinOp._disallow_scalar_only_bool_ops(self)
pandas.core.computation.pytables.BinOp.conform(self,rhs)
pandas.core.computation.pytables.BinOp.convert_value(self,v)->'TermValue'
pandas.core.computation.pytables.BinOp.convert_values(self)
pandas.core.computation.pytables.BinOp.generate(self,v)->str
pandas.core.computation.pytables.BinOp.is_in_table(self)->bool
pandas.core.computation.pytables.BinOp.is_valid(self)->bool
pandas.core.computation.pytables.BinOp.kind(self)
pandas.core.computation.pytables.BinOp.meta(self)
pandas.core.computation.pytables.BinOp.metadata(self)
pandas.core.computation.pytables.BinOp.prune(self,klass)
pandas.core.computation.pytables.ConditionBinOp(BinOp)
pandas.core.computation.pytables.ConditionBinOp.__repr__(self)->str
pandas.core.computation.pytables.ConditionBinOp.evaluate(self)
pandas.core.computation.pytables.ConditionBinOp.format(self)
pandas.core.computation.pytables.ConditionBinOp.invert(self)
pandas.core.computation.pytables.Constant(self,value,env:PyTablesScope,side=None,encoding=None)
pandas.core.computation.pytables.Constant.__init__(self,value,env:PyTablesScope,side=None,encoding=None)
pandas.core.computation.pytables.Constant._resolve_name(self)
pandas.core.computation.pytables.FilterBinOp(BinOp)
pandas.core.computation.pytables.FilterBinOp.__repr__(self)->str
pandas.core.computation.pytables.FilterBinOp.evaluate(self)
pandas.core.computation.pytables.FilterBinOp.format(self)
pandas.core.computation.pytables.FilterBinOp.generate_filter_op(self,invert:bool=False)
pandas.core.computation.pytables.FilterBinOp.invert(self)
pandas.core.computation.pytables.JointConditionBinOp(ConditionBinOp)
pandas.core.computation.pytables.JointConditionBinOp.evaluate(self)
pandas.core.computation.pytables.JointFilterBinOp(FilterBinOp)
pandas.core.computation.pytables.JointFilterBinOp.evaluate(self)
pandas.core.computation.pytables.JointFilterBinOp.format(self)
pandas.core.computation.pytables.PyTablesExpr(self,where,queryables:Optional[Dict[str,Any]]=None,encoding=None,scope_level:int=0)
pandas.core.computation.pytables.PyTablesExpr.__init__(self,where,queryables:Optional[Dict[str,Any]]=None,encoding=None,scope_level:int=0)
pandas.core.computation.pytables.PyTablesExpr.__repr__(self)->str
pandas.core.computation.pytables.PyTablesExpr.evaluate(self)
pandas.core.computation.pytables.PyTablesExprVisitor(self,env,engine,parser,**kwargs)
pandas.core.computation.pytables.PyTablesExprVisitor.__init__(self,env,engine,parser,**kwargs)
pandas.core.computation.pytables.PyTablesExprVisitor._rewrite_membership_op(self,node,left,right)
pandas.core.computation.pytables.PyTablesExprVisitor.translate_In(self,op)
pandas.core.computation.pytables.PyTablesExprVisitor.visit_Assign(self,node,**kwargs)
pandas.core.computation.pytables.PyTablesExprVisitor.visit_Attribute(self,node,**kwargs)
pandas.core.computation.pytables.PyTablesExprVisitor.visit_Index(self,node,**kwargs)
pandas.core.computation.pytables.PyTablesExprVisitor.visit_Subscript(self,node,**kwargs)
pandas.core.computation.pytables.PyTablesExprVisitor.visit_UnaryOp(self,node,**kwargs)
pandas.core.computation.pytables.PyTablesScope(self,level:int,global_dict=None,local_dict=None,queryables:Optional[Dict[str,Any]]=None)
pandas.core.computation.pytables.PyTablesScope.__init__(self,level:int,global_dict=None,local_dict=None,queryables:Optional[Dict[str,Any]]=None)
pandas.core.computation.pytables.Term(self,name,env:PyTablesScope,side=None,encoding=None)
pandas.core.computation.pytables.Term.__init__(self,name,env:PyTablesScope,side=None,encoding=None)
pandas.core.computation.pytables.Term._resolve_name(self)
pandas.core.computation.pytables.Term.value(self)
pandas.core.computation.pytables.TermValue(self,value,converted,kind:str)
pandas.core.computation.pytables.TermValue.__init__(self,value,converted,kind:str)
pandas.core.computation.pytables.TermValue.tostring(self,encoding)->str
pandas.core.computation.pytables.UnaryOp(ops.UnaryOp)
pandas.core.computation.pytables.UnaryOp.prune(self,klass)
pandas.core.computation.pytables._validate_where(w)
pandas.core.computation.pytables.maybe_expression(s)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/computation/api.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/computation/scope.py----------------------------------------
A:pandas.core.computation.scope.hexin->ord(x)
A:pandas.core.computation.scope.packed->struct.pack('@P', id(obj))
A:pandas.core.computation.scope.sio->StringIO()
A:pandas.core.computation.scope.self.scope->self.scope.new_child(d)
A:pandas.core.computation.scope.frame->sys._getframe(self.level)
A:pandas.core.computation.scope.self.resolvers->DeepChainMap(*resolvers)
A:pandas.core.computation.scope.scope_keys->_get_pretty_string(list(self.scope.keys()))
A:pandas.core.computation.scope.res_keys->_get_pretty_string(list(self.resolvers.keys()))
A:pandas.core.computation.scope.variables->itertools.product(scopes, stack)
A:pandas.core.computation.scope.d->getattr(frame, 'f_' + scope)
A:pandas.core.computation.scope.stack->inspect.stack()
pandas.core.computation.scope.Scope(self,level,global_dict=None,local_dict=None,resolvers=(),target=None)
pandas.core.computation.scope.Scope.__init__(self,level,global_dict=None,local_dict=None,resolvers=(),target=None)
pandas.core.computation.scope.Scope.__repr__(self)->str
pandas.core.computation.scope.Scope._get_vars(self,stack,scopes:List[str])
pandas.core.computation.scope.Scope._update(self,level:int)
pandas.core.computation.scope.Scope.add_tmp(self,value)->str
pandas.core.computation.scope.Scope.full_scope(self)
pandas.core.computation.scope.Scope.has_resolvers(self)->bool
pandas.core.computation.scope.Scope.ntemps(self)->int
pandas.core.computation.scope.Scope.resolve(self,key:str,is_local:bool)
pandas.core.computation.scope.Scope.swapkey(self,old_key:str,new_key:str,new_value=None)
pandas.core.computation.scope._get_pretty_string(obj)->str
pandas.core.computation.scope._raw_hex_id(obj)->str
pandas.core.computation.scope._replacer(x)->str
pandas.core.computation.scope.ensure_scope(level:int,global_dict=None,local_dict=None,resolvers=(),target=None,**kwargs)->'Scope'


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/computation/eval.py----------------------------------------
A:pandas.core.computation.eval.valid->list(_engines.keys())
A:pandas.core.computation.eval.s->pprint_thing(expr)
A:pandas.core.computation.eval.inplace->validate_bool_kwarg(inplace, 'inplace')
A:pandas.core.computation.eval.engine->_check_engine(engine)
A:pandas.core.computation.eval.expr->_convert_expression(expr)
A:pandas.core.computation.eval.env->ensure_scope(level + 1, global_dict=global_dict, local_dict=local_dict, resolvers=resolvers, target=target)
A:pandas.core.computation.eval.parsed_expr->Expr(expr, engine=engine, parser=parser, env=env)
A:pandas.core.computation.eval.eng_inst->eng(parsed_expr)
A:pandas.core.computation.eval.ret->eng(parsed_expr).evaluate()
A:pandas.core.computation.eval.target->ensure_scope(level + 1, global_dict=global_dict, local_dict=local_dict, resolvers=resolvers, target=target).target.copy()
pandas.core.computation.eval._check_engine(engine:Optional[str])->str
pandas.core.computation.eval._check_expression(expr)
pandas.core.computation.eval._check_for_locals(expr:str,stack_level:int,parser:str)
pandas.core.computation.eval._check_parser(parser:str)
pandas.core.computation.eval._check_resolvers(resolvers)
pandas.core.computation.eval._convert_expression(expr)->str
pandas.core.computation.eval.eval(expr,parser='pandas',engine:Optional[str]=None,truediv=no_default,local_dict=None,global_dict=None,resolvers=(),level=0,target=None,inplace=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/computation/align.py----------------------------------------
A:pandas.core.computation.align.typ->type(terms.value)
A:pandas.core.computation.align.axes->_zip_axes_from_type(typ, term.value.axes)
A:pandas.core.computation.align.ndims->Series(dict(zip(term_index, term_dims)))
A:pandas.core.computation.align.naxes->len(axes)
A:pandas.core.computation.align.is_series->isinstance(value, ABCSeries)
A:pandas.core.computation.align.axes[ax]->axes[ax].join(itm, how='outer').join(itm, how='outer')
A:pandas.core.computation.align.term_axis_size->len(ti.axes[axis])
A:pandas.core.computation.align.reindexer_size->len(reindexer)
A:pandas.core.computation.align.ordm->numpy.log10(max(1, abs(reindexer_size - term_axis_size)))
A:pandas.core.computation.align.f->partial(ti.reindex, reindexer, axis=axis, copy=False)
A:pandas.core.computation.align.terms->list(com.flatten(terms))
A:pandas.core.computation.align.(typ, axes)->_align_core(terms)
A:pandas.core.computation.align.res_t->numpy.result_type(obj.dtype, dtype)
A:pandas.core.computation.align.ret_value->numpy.array([ret_value]).astype(res_t)
pandas.core.computation.align._align_core(terms)
pandas.core.computation.align._align_core_single_unary_op(term)->Tuple[Union[partial, Type[FrameOrSeries]], Optional[Dict[str, int]]]
pandas.core.computation.align._any_pandas_objects(terms)->bool
pandas.core.computation.align._filter_special_cases(f)
pandas.core.computation.align._zip_axes_from_type(typ:Type[FrameOrSeries],new_axes:Sequence[int])->Dict[str, int]
pandas.core.computation.align.align_terms(terms)
pandas.core.computation.align.reconstruct_object(typ,obj,axes,dtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/computation/engines.py----------------------------------------
A:pandas.core.computation.engines._ne_builtins->frozenset(_mathops + _reductions)
A:pandas.core.computation.engines.s->self.convert()
A:pandas.core.computation.engines.(self.result_type, self.aligned_axes)->align_terms(self.expr.terms)
A:pandas.core.computation.engines.res->self._evaluate()
pandas.core.computation.engines.AbstractEngine(self,expr)
pandas.core.computation.engines.AbstractEngine.__init__(self,expr)
pandas.core.computation.engines.AbstractEngine._evaluate(self)
pandas.core.computation.engines.AbstractEngine._is_aligned(self)->bool
pandas.core.computation.engines.AbstractEngine.convert(self)->str
pandas.core.computation.engines.AbstractEngine.evaluate(self)->object
pandas.core.computation.engines.NumExprClobberingError(NameError)
pandas.core.computation.engines.NumExprEngine(AbstractEngine)
pandas.core.computation.engines.NumExprEngine._evaluate(self)
pandas.core.computation.engines.PythonEngine(AbstractEngine)
pandas.core.computation.engines.PythonEngine._evaluate(self)->None
pandas.core.computation.engines.PythonEngine.evaluate(self)
pandas.core.computation.engines._check_ne_builtin_clash(expr)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/computation/expressions.py----------------------------------------
A:pandas.core.computation.expressions.n->numexpr.detect_number_of_cores()
A:pandas.core.computation.expressions.dtypes->set()
A:pandas.core.computation.expressions.s->o.dtypes.value_counts()
A:pandas.core.computation.expressions.is_reversed->op.__name__.strip('_').startswith('r')
A:pandas.core.computation.expressions.a_value->getattr(a, 'values', a)
A:pandas.core.computation.expressions.b_value->getattr(b, 'values', b)
A:pandas.core.computation.expressions.result->_where_standard(cond, a, b)
A:pandas.core.computation.expressions.cond_value->getattr(cond, 'values', cond)
pandas.core.computation.expressions._bool_arith_check(op_str,a,b,not_allowed=frozenset(('/','//','**')),unsupported=None)
pandas.core.computation.expressions._can_use_numexpr(op,op_str,a,b,dtype_check)
pandas.core.computation.expressions._evaluate_numexpr(op,op_str,a,b)
pandas.core.computation.expressions._evaluate_standard(op,op_str,a,b)
pandas.core.computation.expressions._has_bool_dtype(x)
pandas.core.computation.expressions._store_test_result(used_numexpr)
pandas.core.computation.expressions._where_numexpr(cond,a,b)
pandas.core.computation.expressions._where_standard(cond,a,b)
pandas.core.computation.expressions.evaluate(op,op_str,a,b,use_numexpr=True)
pandas.core.computation.expressions.get_test_result()
pandas.core.computation.expressions.set_numexpr_threads(n=None)
pandas.core.computation.expressions.set_test_mode(v=True)
pandas.core.computation.expressions.set_use_numexpr(v=True)
pandas.core.computation.expressions.where(cond,a,b,use_numexpr=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/computation/parsing.py----------------------------------------
A:pandas.core.computation.parsing.name->''.join((special_characters_replacements.get(char, char) for char in name))
A:pandas.core.computation.parsing.tokenized->tokenize_string(f'`{name}`')
A:pandas.core.computation.parsing.token_generator->tokenize.generate_tokens(line_reader)
pandas.core.computation.parsing.clean_backtick_quoted_toks(tok:Tuple[int,str])->Tuple[int, str]
pandas.core.computation.parsing.clean_column_name(name:str)->str
pandas.core.computation.parsing.create_valid_python_identifier(name:str)->str
pandas.core.computation.parsing.tokenize_backtick_quoted_string(token_generator:Iterator[tokenize.TokenInfo],source:str,string_start:int)->Tuple[int, str]
pandas.core.computation.parsing.tokenize_string(source:str)->Iterator[Tuple[int, str]]


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/computation/common.py----------------------------------------
A:pandas.core.computation.common.s->s.decode(get_option('display.encoding')).decode(get_option('display.encoding'))
pandas.core.computation.common.NameResolutionError(NameError)
pandas.core.computation.common._ensure_decoded(s)
pandas.core.computation.common.result_type_many(*arrays_and_dtypes)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/computation/ops.py----------------------------------------
A:pandas.core.computation.ops.tname->str(name)
A:pandas.core.computation.ops.self._value->self._resolve_name()
A:pandas.core.computation.ops.res->eval(self, local_dict=env, engine=engine, parser=parser)
A:pandas.core.computation.ops.self.op->_bool_op_map.get(op, op)
A:pandas.core.computation.ops.self.encoding->kwargs.get('encoding', None)
A:pandas.core.computation.ops.obj_dtype_set->frozenset([np.dtype('object')])
A:pandas.core.computation.ops._cmp_ops_dict->dict(zip(_cmp_ops_syms, _cmp_ops_funcs))
A:pandas.core.computation.ops._bool_ops_dict->dict(zip(_bool_ops_syms, _bool_ops_funcs))
A:pandas.core.computation.ops._arith_ops_dict->dict(zip(_arith_ops_syms, _arith_ops_funcs))
A:pandas.core.computation.ops._special_case_arith_ops_dict->dict(zip(_special_case_arith_ops_syms, _special_case_arith_ops_funcs))
A:pandas.core.computation.ops.dt->numpy.dtype(dtype)
A:pandas.core.computation.ops.new_value->numpy.dtype(dtype).type(term.value)
A:pandas.core.computation.ops.keys->list(_binary_ops_dict.keys())
A:pandas.core.computation.ops.left->self.lhs.evaluate(env, engine=engine, parser=parser, term_type=term_type, eval_in_python=eval_in_python)
A:pandas.core.computation.ops.right->self.rhs.evaluate(env, engine=engine, parser=parser, term_type=term_type, eval_in_python=eval_in_python)
A:pandas.core.computation.ops.name->env.add_tmp(res)
A:pandas.core.computation.ops.encoder->partial(pprint_thing_encoded, encoding=self.encoding)
A:pandas.core.computation.ops.v->v.tz_convert('UTC').tz_convert('UTC')
A:pandas.core.computation.ops._unary_ops_dict->dict(zip(_unary_ops_syms, _unary_ops_funcs))
A:pandas.core.computation.ops.operand->self.operand(env)
A:pandas.core.computation.ops.operands->map(str, self.operands)
A:pandas.core.computation.ops.self.func->getattr(np, name)
pandas.core.computation.ops.BinOp(self,op:str,lhs,rhs,**kwargs)
pandas.core.computation.ops.BinOp.__init__(self,op:str,lhs,rhs,**kwargs)
pandas.core.computation.ops.BinOp._disallow_scalar_only_bool_ops(self)
pandas.core.computation.ops.BinOp.convert_values(self)
pandas.core.computation.ops.BinOp.evaluate(self,env,engine:str,parser,term_type,eval_in_python)
pandas.core.computation.ops.Constant(self,value,env,side=None,encoding=None)
pandas.core.computation.ops.Constant.__init__(self,value,env,side=None,encoding=None)
pandas.core.computation.ops.Constant.__repr__(self)->str
pandas.core.computation.ops.Constant._resolve_name(self)
pandas.core.computation.ops.Constant.name(self)
pandas.core.computation.ops.Div(self,lhs,rhs,**kwargs)
pandas.core.computation.ops.Div.__init__(self,lhs,rhs,**kwargs)
pandas.core.computation.ops.FuncNode(self,name:str)
pandas.core.computation.ops.FuncNode.__init__(self,name:str)
pandas.core.computation.ops.MathCall(self,func,args)
pandas.core.computation.ops.MathCall.__init__(self,func,args)
pandas.core.computation.ops.MathCall.__repr__(self)->str
pandas.core.computation.ops.Op(self,op:str,operands,*args,**kwargs)
pandas.core.computation.ops.Op.__init__(self,op:str,operands,*args,**kwargs)
pandas.core.computation.ops.Op.__iter__(self)
pandas.core.computation.ops.Op.__repr__(self)->str
pandas.core.computation.ops.Op.has_invalid_return_type(self)->bool
pandas.core.computation.ops.Op.is_datetime(self)->bool
pandas.core.computation.ops.Op.is_dt(self)->bool
pandas.core.computation.ops.Op.is_scalar(self)->bool
pandas.core.computation.ops.Op.operand_types(self)
pandas.core.computation.ops.Op.return_type(self)
pandas.core.computation.ops.Term(self,name,env,side=None,encoding=None)
pandas.core.computation.ops.Term.__init__(self,name,env,side=None,encoding=None)
pandas.core.computation.ops.Term.__repr__(self)->str
pandas.core.computation.ops.Term._resolve_name(self)
pandas.core.computation.ops.Term.evaluate(self,*args,**kwargs)
pandas.core.computation.ops.Term.is_datetime(self)->bool
pandas.core.computation.ops.Term.is_dt(self)->bool
pandas.core.computation.ops.Term.is_scalar(self)->bool
pandas.core.computation.ops.Term.local_name(self)->str
pandas.core.computation.ops.Term.name(self)
pandas.core.computation.ops.Term.ndim(self)->int
pandas.core.computation.ops.Term.raw(self)->str
pandas.core.computation.ops.Term.type(self)
pandas.core.computation.ops.Term.update(self,value)
pandas.core.computation.ops.Term.value(self)
pandas.core.computation.ops.Term.value(self,new_value)
pandas.core.computation.ops.UnaryOp(self,op:str,operand)
pandas.core.computation.ops.UnaryOp.__init__(self,op:str,operand)
pandas.core.computation.ops.UnaryOp.__repr__(self)->str
pandas.core.computation.ops.UnaryOp.return_type(self)->np.dtype
pandas.core.computation.ops.UndefinedVariableError(self,name,is_local:bool)
pandas.core.computation.ops.UndefinedVariableError.__init__(self,name,is_local:bool)
pandas.core.computation.ops._cast_inplace(terms,acceptable_dtypes,dtype)
pandas.core.computation.ops._in(x,y)
pandas.core.computation.ops._not_in(x,y)
pandas.core.computation.ops.is_term(obj)->bool
pandas.core.computation.ops.isnumeric(dtype)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/computation/check.py----------------------------------------
A:pandas.core.computation.check.ne->import_optional_dependency('numexpr', raise_on_missing=False, on_version='warn')


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/computation/expr.py----------------------------------------
A:pandas.core.computation.expr._is_list->_is_type(list)
A:pandas.core.computation.expr._is_str->_is_type(str)
A:pandas.core.computation.expr._all_nodes->frozenset(filter(lambda x: isinstance(x, type) and issubclass(x, ast.AST), (getattr(ast, node) for node in dir(ast))))
A:pandas.core.computation.expr._all_node_names->frozenset(map(lambda x: x.__name__, _all_nodes))
A:pandas.core.computation.expr._mod_nodes->_filter_nodes(ast.mod)
A:pandas.core.computation.expr._stmt_nodes->_filter_nodes(ast.stmt)
A:pandas.core.computation.expr._expr_nodes->_filter_nodes(ast.expr)
A:pandas.core.computation.expr._expr_context_nodes->_filter_nodes(ast.expr_context)
A:pandas.core.computation.expr._slice_nodes->_filter_nodes(ast.slice)
A:pandas.core.computation.expr._boolop_nodes->_filter_nodes(ast.boolop)
A:pandas.core.computation.expr._operator_nodes->_filter_nodes(ast.operator)
A:pandas.core.computation.expr._unary_op_nodes->_filter_nodes(ast.unaryop)
A:pandas.core.computation.expr._cmp_op_nodes->_filter_nodes(ast.cmpop)
A:pandas.core.computation.expr._comprehension_nodes->_filter_nodes(ast.comprehension)
A:pandas.core.computation.expr._handler_nodes->_filter_nodes(ast.excepthandler)
A:pandas.core.computation.expr._arguments_nodes->_filter_nodes(ast.arguments)
A:pandas.core.computation.expr._keyword_nodes->_filter_nodes(ast.keyword)
A:pandas.core.computation.expr._alias_nodes->_filter_nodes(ast.alias)
A:pandas.core.computation.expr._hacked_nodes->frozenset(['Assign', 'Module', 'Expr'])
A:pandas.core.computation.expr._unsupported_expr_nodes->frozenset(['Yield', 'GeneratorExp', 'IfExp', 'DictComp', 'SetComp', 'Repr', 'Lambda', 'Set', 'AST', 'Is', 'IsNot'])
A:pandas.core.computation.expr.new_method->_node_not_implemented(node, cls)
A:pandas.core.computation.expr.ops->getattr(cls, f'{op_attr_name}_ops')
A:pandas.core.computation.expr.ops_map->getattr(cls, f'{op_attr_name}_op_nodes_map')
A:pandas.core.computation.expr.made_op->_op_maker(op_class, op)
A:pandas.core.computation.expr.binary_op_nodes_map->dict(zip(binary_ops, binary_op_nodes))
A:pandas.core.computation.expr.unary_op_nodes_map->dict(zip(unary_ops, unary_op_nodes))
A:pandas.core.computation.expr.clean->self.preparser(node)
A:pandas.core.computation.expr.node->ast.fix_missing_locations(ast.parse(clean))
A:pandas.core.computation.expr.visitor->getattr(self, method)
A:pandas.core.computation.expr.op_type->type(op_instance)
A:pandas.core.computation.expr.(left_list, right_list)->map(_is_list, (left, right))
A:pandas.core.computation.expr.(left_str, right_str)->map(_is_str, (left, right))
A:pandas.core.computation.expr.op_instance->self.rewrite_map[op_type]()
A:pandas.core.computation.expr.name->self.env.add_tmp(v)
A:pandas.core.computation.expr.right->self.term_type(name, self.env)
A:pandas.core.computation.expr.left->self.term_type(name, self.env)
A:pandas.core.computation.expr.op->self.translate_In(ops[0])
A:pandas.core.computation.expr.(op, op_class, left, right)->self._maybe_transform_eq_ne(node)
A:pandas.core.computation.expr.f32->numpy.dtype(np.float32)
A:pandas.core.computation.expr.res->FuncNode(node.func.id)
A:pandas.core.computation.expr.(left, right)->self._maybe_downcast_constants(left, right)
A:pandas.core.computation.expr.operand->self.visit(node.operand)
A:pandas.core.computation.expr.value->self.visit(node.value)
A:pandas.core.computation.expr.slobj->self.visit(node.slice)
A:pandas.core.computation.expr.result->pandas.eval(slobj, local_dict=self.env, engine=self.engine, parser=self.parser)
A:pandas.core.computation.expr.lhs->self._try_visit_binop(x)
A:pandas.core.computation.expr.assigner->self.visit(node.targets[0], **kwargs)
A:pandas.core.computation.expr.self.assigner->getattr(assigner, 'name', assigner)
A:pandas.core.computation.expr.v->getattr(resolved, attr)
A:pandas.core.computation.expr.binop->ast.BinOp(op=op, left=node.left, right=comps[0])
A:pandas.core.computation.expr.new_node->self.visit(ast.Compare(comparators=[comp], left=left, ops=[self.translate_In(op)]))
A:pandas.core.computation.expr.rhs->self._try_visit_binop(y)
A:pandas.core.computation.expr.(op, op_class, lhs, rhs)->self._maybe_transform_eq_ne(node, lhs, rhs)
A:pandas.core.computation.expr._python_not_supported->frozenset(['Dict', 'BoolOp', 'In', 'NotIn'])
A:pandas.core.computation.expr._numexpr_supported_calls->frozenset(_reductions + _mathops)
A:pandas.core.computation.expr.self._visitor->_parsers[parser](self.env, self.engine, self.parser)
A:pandas.core.computation.expr.self.terms->self.parse()
pandas.core.computation.expr.BaseExprVisitor(self,env,engine,parser,preparser=_preparse)
pandas.core.computation.expr.BaseExprVisitor.__init__(self,env,engine,parser,preparser=_preparse)
pandas.core.computation.expr.BaseExprVisitor._maybe_downcast_constants(self,left,right)
pandas.core.computation.expr.BaseExprVisitor._maybe_eval(self,binop,eval_in_python)
pandas.core.computation.expr.BaseExprVisitor._maybe_evaluate_binop(self,op,op_class,lhs,rhs,eval_in_python=('in','notin'),maybe_eval_in_python=('==','!=','<','>','<=','>='))
pandas.core.computation.expr.BaseExprVisitor._maybe_transform_eq_ne(self,node,left=None,right=None)
pandas.core.computation.expr.BaseExprVisitor._rewrite_membership_op(self,node,left,right)
pandas.core.computation.expr.BaseExprVisitor._try_visit_binop(self,bop)
pandas.core.computation.expr.BaseExprVisitor.translate_In(self,op)
pandas.core.computation.expr.BaseExprVisitor.visit(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Assign(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Attribute(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_BinOp(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_BoolOp(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Call(self,node,side=None,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Compare(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Constant(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Div(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Expr(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Index(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_List(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Module(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Name(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_NameConstant(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Num(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Slice(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Str(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Subscript(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_UnaryOp(self,node,**kwargs)
pandas.core.computation.expr.Expr(self,expr,engine:str='numexpr',parser:str='pandas',env:Optional[Scope]=None,level:int=0)
pandas.core.computation.expr.Expr.__init__(self,expr,engine:str='numexpr',parser:str='pandas',env:Optional[Scope]=None,level:int=0)
pandas.core.computation.expr.Expr.__len__(self)->int
pandas.core.computation.expr.Expr.__repr__(self)->str
pandas.core.computation.expr.Expr.assigner(self)
pandas.core.computation.expr.Expr.names(self)
pandas.core.computation.expr.Expr.parse(self)
pandas.core.computation.expr.PandasExprVisitor(self,env,engine,parser,preparser=partial(_preparse,f=_compose(_replace_locals,_replace_booleans,clean_backtick_quoted_toks)))
pandas.core.computation.expr.PandasExprVisitor.__init__(self,env,engine,parser,preparser=partial(_preparse,f=_compose(_replace_locals,_replace_booleans,clean_backtick_quoted_toks)))
pandas.core.computation.expr.PythonExprVisitor(self,env,engine,parser,preparser=lambdax:x)
pandas.core.computation.expr.PythonExprVisitor.__init__(self,env,engine,parser,preparser=lambdax:x)
pandas.core.computation.expr._compose(*funcs)
pandas.core.computation.expr._compose2(f,g)
pandas.core.computation.expr._filter_nodes(superclass,all_nodes=_all_nodes)
pandas.core.computation.expr._is_type(t)
pandas.core.computation.expr._node_not_implemented(node_name,cls)
pandas.core.computation.expr._op_maker(op_class,op_symbol)
pandas.core.computation.expr._preparse(source:str,f=_compose(_replace_locals,_replace_booleans,_rewrite_assign,clean_backtick_quoted_toks))
pandas.core.computation.expr._replace_booleans(tok)
pandas.core.computation.expr._replace_locals(tok)
pandas.core.computation.expr._rewrite_assign(tok)
pandas.core.computation.expr.add_ops(op_classes)
pandas.core.computation.expr.disallow(nodes)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/internals/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/internals/managers.py----------------------------------------
A:pandas.core.internals.managers.blocks->form_blocks(arrays, names, axes)
A:pandas.core.internals.managers.new_labels->self.axes[axis].take(indexer)
A:pandas.core.internals.managers.old_len->len(self.axes[axis])
A:pandas.core.internals.managers.new_len->len(new_labels)
A:pandas.core.internals.managers.obj->self.copy(deep=copy)
A:pandas.core.internals.managers.new_blknos->numpy.empty(self.nblocks, dtype=np.int64)
A:pandas.core.internals.managers.new_blklocs->numpy.empty(self.shape[0], dtype=np.int64)
A:pandas.core.internals.managers.new_blklocs[rl.indexer]->numpy.arange(len(rl))
A:pandas.core.internals.managers.counts->numpy.bincount(arr.astype(np.int_))
A:pandas.core.internals.managers.v->f(b)
A:pandas.core.internals.managers.dtypes->numpy.array([blk.dtype for blk in self.blocks])
A:pandas.core.internals.managers.axes_array->list(self.axes)
A:pandas.core.internals.managers.self.blocks->tuple([block])
A:pandas.core.internals.managers.tot_items->sum((b.shape[0] for b in blocks))
A:pandas.core.internals.managers.bres->func(blk.values, *args, **kwargs)
A:pandas.core.internals.managers.new_res->zip(blk.mgr_locs.as_array, bres)
A:pandas.core.internals.managers.nr->dict(new_res)
A:pandas.core.internals.managers.filter_locs->set(self.items.get_indexer_for(filter))
A:pandas.core.internals.managers.kwargs[k]->self.copy(deep=copy).reindex(b_items, axis=axis, copy=align_copy)
A:pandas.core.internals.managers.applied->getattr(b, f)(**kwargs)
A:pandas.core.internals.managers.result_blocks->_extend_blocks(applied, result_blocks)
A:pandas.core.internals.managers.bm->BlockManager(new_blocks, [new_columns, new_index])
A:pandas.core.internals.managers.ax->Float64Index(qs)
A:pandas.core.internals.managers.block->make_block(values, placement=placement)
A:pandas.core.internals.managers.axe->get_axe(b, qs, axes=self.axes)
A:pandas.core.internals.managers.new_axes->list(self.axes)
A:pandas.core.internals.managers.new_axes[axis]->Index(np.concatenate([ax.values for ax in axes]))
A:pandas.core.internals.managers.values->values.view().view()
A:pandas.core.internals.managers.indexer->maybe_convert_indices(indexer, length)
A:pandas.core.internals.managers.inplace->validate_bool_kwarg(inplace, 'inplace')
A:pandas.core.internals.managers.result->op(a)
A:pandas.core.internals.managers.new_rb->_extend_blocks(result, new_rb)
A:pandas.core.internals.managers.inv_indexer->pandas._libs.lib.get_reverse_indexer(indexer, self.shape[0])
A:pandas.core.internals.managers.b->make_block(concatenate_join_units(join_units, concat_axis, copy=copy), placement=placement)
A:pandas.core.internals.managers.b.mgr_locs->pandas.core.algorithms.take_1d(inv_indexer, b.mgr_locs.as_array, axis=0, allow_fill=False)
A:pandas.core.internals.managers.axes->list(self.axes)
A:pandas.core.internals.managers.axes[0]->self.items.take(indexer)
A:pandas.core.internals.managers.new_blocks->_extend_blocks(merged_blocks, new_blocks)
A:pandas.core.internals.managers.slicer->tuple(_slicer)
A:pandas.core.internals.managers.res->self.apply('copy', deep=deep)
A:pandas.core.internals.managers.arr->BlockManager(blocks, axes)._interleave()
A:pandas.core.internals.managers.mgr->BlockManager(blocks, axes)
A:pandas.core.internals.managers.dtype->_interleaved_dtype(block)
A:pandas.core.internals.managers.itemmask->numpy.zeros(self.shape[0])
A:pandas.core.internals.managers.result[rl.indexer]->blk.get_values(dtype)
A:pandas.core.internals.managers.n->len(items)
A:pandas.core.internals.managers.result[rl]->blk.iget((i, loc))
A:pandas.core.internals.managers.loc->self.items.get_loc(item)
A:pandas.core.internals.managers.is_deleted->numpy.zeros(self.nblocks, dtype=np.bool_)
A:pandas.core.internals.managers.blk.mgr_locs->blk.mgr_locs.add(1)
A:pandas.core.internals.managers.value_is_extension_type->is_extension_array_dtype(value)
A:pandas.core.internals.managers.value->_safe_reshape(value, (1,) + value.shape)
A:pandas.core.internals.managers.blklocs->pandas.core.algorithms.take_1d(self._blklocs, slobj, fill_value=-1, allow_fill=allow_fill)
A:pandas.core.internals.managers.self._blklocs[blk.mgr_locs.indexer]->numpy.arange(len(blk))
A:pandas.core.internals.managers.new_blknos[~is_deleted]->numpy.arange(self.nblocks - len(removed_blknos))
A:pandas.core.internals.managers.self._blknos->numpy.insert(self._blknos, loc, len(self.blocks))
A:pandas.core.internals.managers.unfit_mgr_locs->numpy.concatenate(unfit_mgr_locs)
A:pandas.core.internals.managers.unfit_count->len(unfit_mgr_locs)
A:pandas.core.internals.managers.unfit_val_items->unfit_val_locs[0].append(unfit_val_locs[1:])
A:pandas.core.internals.managers.self._blknos[unfit_mgr_locs]->len(self.blocks)
A:pandas.core.internals.managers.self._blklocs[unfit_mgr_locs]->numpy.arange(unfit_count)
A:pandas.core.internals.managers.new_axis->self.items.insert(loc, item)
A:pandas.core.internals.managers.new_mgr_locs->blk.mgr_locs.as_array.copy()
A:pandas.core.internals.managers.self._blklocs->numpy.insert(self._blklocs, loc, 0)
A:pandas.core.internals.managers.new_index->unstacker_func(np.empty((0, 0)), value_columns=self.items).get_new_index()
A:pandas.core.internals.managers.(new_index, indexer)->self.axes[axis].reindex(new_index, method=method, limit=limit)
A:pandas.core.internals.managers.result.axes->list(self.axes)
A:pandas.core.internals.managers.(sl_type, slobj, sllen)->_preprocess_slice_or_indexer(slice_or_indexer, self.shape[0], allow_fill=allow_fill)
A:pandas.core.internals.managers.(_, fill_value)->maybe_promote(blk.dtype)
A:pandas.core.internals.managers.blknos->pandas.core.algorithms.take_1d(self._blknos, slobj, fill_value=-1, allow_fill=allow_fill)
A:pandas.core.internals.managers.newblk->blk.copy(deep=True)
A:pandas.core.internals.managers.newblk.mgr_locs->slice(mgr_loc, mgr_loc + 1)
A:pandas.core.internals.managers.block_shape->list(self.shape)
A:pandas.core.internals.managers.block_shape[0]->len(placement)
A:pandas.core.internals.managers.(dtype, fill_value)->infer_dtype_from_scalar(fill_value)
A:pandas.core.internals.managers.block_values->numpy.empty(shape, dtype=object)
A:pandas.core.internals.managers.self_blocks->sorted(self.blocks, key=canonicalize)
A:pandas.core.internals.managers.other_blocks->sorted(other.blocks, key=canonicalize)
A:pandas.core.internals.managers.dummy->unstacker_func(np.empty((0, 0)), value_columns=self.items)
A:pandas.core.internals.managers.new_columns->unstacker_func(np.empty((0, 0)), value_columns=self.items).get_new_columns()
A:pandas.core.internals.managers.(blocks, mask)->blk._unstack(partial(unstacker_func, value_columns=self.items[blk.mgr_locs.indexer]), new_columns, n_rows, fill_value)
A:pandas.core.internals.managers.self.axes[0]->self.axes[0].delete(loc)
A:pandas.core.internals.managers.new_block->make_block(values, placement=slice(0, len(values), 1))
A:pandas.core.internals.managers.passed->tuple(map(int, [tot_items] + list(block_shape)))
A:pandas.core.internals.managers.implied->tuple((len(ax) for ax in axes))
A:pandas.core.internals.managers.items_dict->defaultdict(list)
A:pandas.core.internals.managers.names_idx->ensure_index(names)
A:pandas.core.internals.managers.names_indexer->ensure_index(names).get_indexer_for(axes[0])
A:pandas.core.internals.managers.block_type->get_block_type(v)
A:pandas.core.internals.managers.float_blocks->_multi_blockify(items_dict['FloatBlock'])
A:pandas.core.internals.managers.complex_blocks->_multi_blockify(items_dict['ComplexBlock'])
A:pandas.core.internals.managers.timedelta_blocks->_multi_blockify(items_dict['TimeDeltaBlock'])
A:pandas.core.internals.managers.int_blocks->_multi_blockify(items_dict['IntBlock'])
A:pandas.core.internals.managers.datetime_blocks->_simple_blockify(items_dict['DatetimeBlock'], _NS_DTYPE)
A:pandas.core.internals.managers.bool_blocks->_simple_blockify(items_dict['BoolBlock'], np.bool_)
A:pandas.core.internals.managers.object_blocks->_simple_blockify(items_dict['ObjectBlock'], np.object_)
A:pandas.core.internals.managers.na_block->make_block(block_values, placement=extra_locs)
A:pandas.core.internals.managers.(values, placement)->_stack_arrays(list(tup_block), dtype)
A:pandas.core.internals.managers.grouper->itertools.groupby(sorted(blocks, key=gkey), gkey)
A:pandas.core.internals.managers.(placement, names, arrays)->zip(*tuples)
A:pandas.core.internals.managers.stacked->numpy.empty(shape, dtype=dtype)
A:pandas.core.internals.managers.stacked[i]->_asarray_compat(arr)
A:pandas.core.internals.managers.merged_blocks->_merge_blocks(list(group_blocks), dtype=dtype, _can_consolidate=_can_consolidate)
A:pandas.core.internals.managers.op->numpy.vectorize(lambda x: bool(re.search(b, x)) if isinstance(x, str) else False)
A:pandas.core.internals.managers.is_a_array->isinstance(a, np.ndarray)
A:pandas.core.internals.managers.is_b_array->isinstance(b, np.ndarray)
A:pandas.core.internals.managers.concat_plan->combine_concat_plans(concat_plans, concat_axis)
pandas.core.internals.BlockManager(self,blocks:Sequence[Block],axes:Sequence[Index],do_integrity_check:bool=True)
pandas.core.internals.BlockManager.__contains__(self,item)->bool
pandas.core.internals.BlockManager.__getstate__(self)
pandas.core.internals.BlockManager.__len__(self)->int
pandas.core.internals.BlockManager.__nonzero__(self)
pandas.core.internals.BlockManager.__repr__(self)->str
pandas.core.internals.BlockManager.__setstate__(self,state)
pandas.core.internals.BlockManager._consolidate_check(self)
pandas.core.internals.BlockManager._consolidate_inplace(self)
pandas.core.internals.BlockManager._get_counts(self,f)
pandas.core.internals.BlockManager._interleave(self)
pandas.core.internals.BlockManager._is_single_block(self)
pandas.core.internals.BlockManager._make_na_block(self,placement,fill_value=None)
pandas.core.internals.BlockManager._post_setstate(self)
pandas.core.internals.BlockManager._rebuild_blknos_and_blklocs(self)
pandas.core.internals.BlockManager._slice_take_blocks_ax0(self,slice_or_indexer,fill_tuple=None)
pandas.core.internals.BlockManager._verify_integrity(self)
pandas.core.internals.BlockManager.any_extension_types(self)
pandas.core.internals.BlockManager.apply(self,f,filter=None,**kwargs)
pandas.core.internals.BlockManager.as_array(self,transpose=False,items=None)
pandas.core.internals.BlockManager.astype(self,dtype,copy:bool=False,errors:str='raise')
pandas.core.internals.BlockManager.combine(self,blocks,copy=True)
pandas.core.internals.BlockManager.consolidate(self)
pandas.core.internals.BlockManager.convert(self,**kwargs)
pandas.core.internals.BlockManager.copy(self,deep=True)
pandas.core.internals.BlockManager.delete(self,item)
pandas.core.internals.BlockManager.diff(self,**kwargs)
pandas.core.internals.BlockManager.downcast(self,**kwargs)
pandas.core.internals.BlockManager.equals(self,other)
pandas.core.internals.BlockManager.fast_xs(self,loc)
pandas.core.internals.BlockManager.fillna(self,**kwargs)
pandas.core.internals.BlockManager.get(self,item)
pandas.core.internals.BlockManager.get_bool_data(self,copy=False)
pandas.core.internals.BlockManager.get_dtype_counts(self)
pandas.core.internals.BlockManager.get_dtypes(self)
pandas.core.internals.BlockManager.get_numeric_data(self,copy=False)
pandas.core.internals.BlockManager.get_slice(self,slobj:slice,axis:int=0)
pandas.core.internals.BlockManager.iget(self,i)
pandas.core.internals.BlockManager.insert(self,loc:int,item,value,allow_duplicates:bool=False)
pandas.core.internals.BlockManager.interpolate(self,**kwargs)
pandas.core.internals.BlockManager.is_consolidated(self)
pandas.core.internals.BlockManager.is_datelike_mixed_type(self)
pandas.core.internals.BlockManager.is_mixed_type(self)
pandas.core.internals.BlockManager.is_numeric_mixed_type(self)
pandas.core.internals.BlockManager.is_view(self)
pandas.core.internals.BlockManager.isna(self,func)
pandas.core.internals.BlockManager.items(self)
pandas.core.internals.BlockManager.make_empty(self,axes=None)
pandas.core.internals.BlockManager.nblocks(self)->int
pandas.core.internals.BlockManager.ndim(self)->int
pandas.core.internals.BlockManager.putmask(self,**kwargs)
pandas.core.internals.BlockManager.quantile(self,axis=0,consolidate=True,transposed=False,interpolation='linear',qs=None,numeric_only=None)
pandas.core.internals.BlockManager.reduce(self,func,*args,**kwargs)
pandas.core.internals.BlockManager.reindex_axis(self,new_index,axis,method=None,limit=None,fill_value=None,copy=True)
pandas.core.internals.BlockManager.reindex_indexer(self,new_axis,indexer,axis,fill_value=None,allow_dups=False,copy=True)
pandas.core.internals.BlockManager.rename_axis(self,mapper,axis,copy=True,level=None)
pandas.core.internals.BlockManager.replace(self,value,**kwargs)
pandas.core.internals.BlockManager.replace_list(self,src_list,dest_list,inplace=False,regex=False)
pandas.core.internals.BlockManager.set(self,item,value)
pandas.core.internals.BlockManager.set_axis(self,axis,new_labels)
pandas.core.internals.BlockManager.setitem(self,**kwargs)
pandas.core.internals.BlockManager.shape(self)
pandas.core.internals.BlockManager.shift(self,**kwargs)
pandas.core.internals.BlockManager.take(self,indexer,axis=1,verify=True,convert=True)
pandas.core.internals.BlockManager.to_dict(self,copy=True)
pandas.core.internals.BlockManager.unstack(self,unstacker_func,fill_value)
pandas.core.internals.BlockManager.where(self,**kwargs)
pandas.core.internals.SingleBlockManager(self,block:Block,axis:Union[Index,List[Index]],do_integrity_check:bool=False,fastpath:bool=False)
pandas.core.internals.SingleBlockManager._blklocs(self)
pandas.core.internals.SingleBlockManager._blknos(self)
pandas.core.internals.SingleBlockManager._block(self)
pandas.core.internals.SingleBlockManager._can_hold_na(self)
pandas.core.internals.SingleBlockManager._consolidate_check(self)
pandas.core.internals.SingleBlockManager._consolidate_inplace(self)
pandas.core.internals.SingleBlockManager._post_setstate(self)
pandas.core.internals.SingleBlockManager._values(self)
pandas.core.internals.SingleBlockManager.array_dtype(self)
pandas.core.internals.SingleBlockManager.concat(self,to_concat,new_axis)
pandas.core.internals.SingleBlockManager.delete(self,item)
pandas.core.internals.SingleBlockManager.dtype(self)
pandas.core.internals.SingleBlockManager.external_values(self)
pandas.core.internals.SingleBlockManager.fast_xs(self,loc)
pandas.core.internals.SingleBlockManager.get_dtype_counts(self)
pandas.core.internals.SingleBlockManager.get_dtypes(self)
pandas.core.internals.SingleBlockManager.get_slice(self,slobj,axis=0)
pandas.core.internals.SingleBlockManager.get_values(self)
pandas.core.internals.SingleBlockManager.index(self)
pandas.core.internals.SingleBlockManager.internal_values(self)
pandas.core.internals.SingleBlockManager.is_consolidated(self)
pandas.core.internals._transform_index(index,func,level=None)
pandas.core.internals.concatenate_block_managers(mgrs_indexers,axes,concat_axis,copy)
pandas.core.internals.create_block_manager_from_arrays(arrays,names,axes)
pandas.core.internals.create_block_manager_from_blocks(blocks,axes)
pandas.core.internals.managers.BlockManager(self,blocks:Sequence[Block],axes:Sequence[Index],do_integrity_check:bool=True)
pandas.core.internals.managers.BlockManager.__contains__(self,item)->bool
pandas.core.internals.managers.BlockManager.__getstate__(self)
pandas.core.internals.managers.BlockManager.__init__(self,blocks:Sequence[Block],axes:Sequence[Index],do_integrity_check:bool=True)
pandas.core.internals.managers.BlockManager.__len__(self)->int
pandas.core.internals.managers.BlockManager.__nonzero__(self)
pandas.core.internals.managers.BlockManager.__repr__(self)->str
pandas.core.internals.managers.BlockManager.__setstate__(self,state)
pandas.core.internals.managers.BlockManager._consolidate_check(self)
pandas.core.internals.managers.BlockManager._consolidate_inplace(self)
pandas.core.internals.managers.BlockManager._get_counts(self,f)
pandas.core.internals.managers.BlockManager._interleave(self)
pandas.core.internals.managers.BlockManager._is_single_block(self)
pandas.core.internals.managers.BlockManager._make_na_block(self,placement,fill_value=None)
pandas.core.internals.managers.BlockManager._post_setstate(self)
pandas.core.internals.managers.BlockManager._rebuild_blknos_and_blklocs(self)
pandas.core.internals.managers.BlockManager._slice_take_blocks_ax0(self,slice_or_indexer,fill_tuple=None)
pandas.core.internals.managers.BlockManager._verify_integrity(self)
pandas.core.internals.managers.BlockManager.any_extension_types(self)
pandas.core.internals.managers.BlockManager.apply(self,f,filter=None,**kwargs)
pandas.core.internals.managers.BlockManager.as_array(self,transpose=False,items=None)
pandas.core.internals.managers.BlockManager.astype(self,dtype,copy:bool=False,errors:str='raise')
pandas.core.internals.managers.BlockManager.combine(self,blocks,copy=True)
pandas.core.internals.managers.BlockManager.consolidate(self)
pandas.core.internals.managers.BlockManager.convert(self,**kwargs)
pandas.core.internals.managers.BlockManager.copy(self,deep=True)
pandas.core.internals.managers.BlockManager.delete(self,item)
pandas.core.internals.managers.BlockManager.diff(self,**kwargs)
pandas.core.internals.managers.BlockManager.downcast(self,**kwargs)
pandas.core.internals.managers.BlockManager.equals(self,other)
pandas.core.internals.managers.BlockManager.fast_xs(self,loc)
pandas.core.internals.managers.BlockManager.fillna(self,**kwargs)
pandas.core.internals.managers.BlockManager.get(self,item)
pandas.core.internals.managers.BlockManager.get_bool_data(self,copy=False)
pandas.core.internals.managers.BlockManager.get_dtype_counts(self)
pandas.core.internals.managers.BlockManager.get_dtypes(self)
pandas.core.internals.managers.BlockManager.get_numeric_data(self,copy=False)
pandas.core.internals.managers.BlockManager.get_slice(self,slobj:slice,axis:int=0)
pandas.core.internals.managers.BlockManager.iget(self,i)
pandas.core.internals.managers.BlockManager.insert(self,loc:int,item,value,allow_duplicates:bool=False)
pandas.core.internals.managers.BlockManager.interpolate(self,**kwargs)
pandas.core.internals.managers.BlockManager.is_consolidated(self)
pandas.core.internals.managers.BlockManager.is_datelike_mixed_type(self)
pandas.core.internals.managers.BlockManager.is_mixed_type(self)
pandas.core.internals.managers.BlockManager.is_numeric_mixed_type(self)
pandas.core.internals.managers.BlockManager.is_view(self)
pandas.core.internals.managers.BlockManager.isna(self,func)
pandas.core.internals.managers.BlockManager.items(self)
pandas.core.internals.managers.BlockManager.make_empty(self,axes=None)
pandas.core.internals.managers.BlockManager.nblocks(self)->int
pandas.core.internals.managers.BlockManager.ndim(self)->int
pandas.core.internals.managers.BlockManager.putmask(self,**kwargs)
pandas.core.internals.managers.BlockManager.quantile(self,axis=0,consolidate=True,transposed=False,interpolation='linear',qs=None,numeric_only=None)
pandas.core.internals.managers.BlockManager.reduce(self,func,*args,**kwargs)
pandas.core.internals.managers.BlockManager.reindex_axis(self,new_index,axis,method=None,limit=None,fill_value=None,copy=True)
pandas.core.internals.managers.BlockManager.reindex_indexer(self,new_axis,indexer,axis,fill_value=None,allow_dups=False,copy=True)
pandas.core.internals.managers.BlockManager.rename_axis(self,mapper,axis,copy=True,level=None)
pandas.core.internals.managers.BlockManager.replace(self,value,**kwargs)
pandas.core.internals.managers.BlockManager.replace_list(self,src_list,dest_list,inplace=False,regex=False)
pandas.core.internals.managers.BlockManager.set(self,item,value)
pandas.core.internals.managers.BlockManager.set_axis(self,axis,new_labels)
pandas.core.internals.managers.BlockManager.setitem(self,**kwargs)
pandas.core.internals.managers.BlockManager.shape(self)
pandas.core.internals.managers.BlockManager.shift(self,**kwargs)
pandas.core.internals.managers.BlockManager.take(self,indexer,axis=1,verify=True,convert=True)
pandas.core.internals.managers.BlockManager.to_dict(self,copy=True)
pandas.core.internals.managers.BlockManager.unstack(self,unstacker_func,fill_value)
pandas.core.internals.managers.BlockManager.where(self,**kwargs)
pandas.core.internals.managers.SingleBlockManager(self,block:Block,axis:Union[Index,List[Index]],do_integrity_check:bool=False,fastpath:bool=False)
pandas.core.internals.managers.SingleBlockManager.__init__(self,block:Block,axis:Union[Index,List[Index]],do_integrity_check:bool=False,fastpath:bool=False)
pandas.core.internals.managers.SingleBlockManager._blklocs(self)
pandas.core.internals.managers.SingleBlockManager._blknos(self)
pandas.core.internals.managers.SingleBlockManager._block(self)
pandas.core.internals.managers.SingleBlockManager._can_hold_na(self)
pandas.core.internals.managers.SingleBlockManager._consolidate_check(self)
pandas.core.internals.managers.SingleBlockManager._consolidate_inplace(self)
pandas.core.internals.managers.SingleBlockManager._post_setstate(self)
pandas.core.internals.managers.SingleBlockManager._values(self)
pandas.core.internals.managers.SingleBlockManager.array_dtype(self)
pandas.core.internals.managers.SingleBlockManager.concat(self,to_concat,new_axis)
pandas.core.internals.managers.SingleBlockManager.delete(self,item)
pandas.core.internals.managers.SingleBlockManager.dtype(self)
pandas.core.internals.managers.SingleBlockManager.external_values(self)
pandas.core.internals.managers.SingleBlockManager.fast_xs(self,loc)
pandas.core.internals.managers.SingleBlockManager.get_dtype_counts(self)
pandas.core.internals.managers.SingleBlockManager.get_dtypes(self)
pandas.core.internals.managers.SingleBlockManager.get_slice(self,slobj,axis=0)
pandas.core.internals.managers.SingleBlockManager.get_values(self)
pandas.core.internals.managers.SingleBlockManager.index(self)
pandas.core.internals.managers.SingleBlockManager.internal_values(self)
pandas.core.internals.managers.SingleBlockManager.is_consolidated(self)
pandas.core.internals.managers._compare_or_regex_search(a,b,regex=False)
pandas.core.internals.managers._consolidate(blocks)
pandas.core.internals.managers._fast_count_smallints(arr)
pandas.core.internals.managers._interleaved_dtype(blocks:List[Block])->Optional[Union[np.dtype, ExtensionDtype]]
pandas.core.internals.managers._multi_blockify(tuples,dtype=None)
pandas.core.internals.managers._preprocess_slice_or_indexer(slice_or_indexer,length,allow_fill)
pandas.core.internals.managers._simple_blockify(tuples,dtype)
pandas.core.internals.managers._stack_arrays(tuples,dtype)
pandas.core.internals.managers._transform_index(index,func,level=None)
pandas.core.internals.managers.concatenate_block_managers(mgrs_indexers,axes,concat_axis,copy)
pandas.core.internals.managers.construction_error(tot_items,block_shape,axes,e=None)
pandas.core.internals.managers.create_block_manager_from_arrays(arrays,names,axes)
pandas.core.internals.managers.create_block_manager_from_blocks(blocks,axes)
pandas.core.internals.managers.form_blocks(arrays,names,axes)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/internals/blocks.py----------------------------------------
A:pandas.core.internals.blocks._concatenator->staticmethod(concat_categorical)
A:pandas.core.internals.blocks.self.ndim->self.coerce_to_target_dtype(value)._check_ndim(values, ndim)
A:pandas.core.internals.blocks.new_mgr_locs->numpy.concatenate([b.mgr_locs.as_array for b in blocks])
A:pandas.core.internals.blocks.shape->' x '.join((pprint_thing(s) for s in self.shape))
A:pandas.core.internals.blocks.self.mgr_locs->self.coerce_to_target_dtype(value).mgr_locs.delete(loc)
A:pandas.core.internals.blocks.new_values->numpy.vstack([b.values for b in blocks])
A:pandas.core.internals.blocks.values->values.reshape(tuple((1,) + shape)).reshape(tuple((1,) + shape))
A:pandas.core.internals.blocks.self.values->numpy.delete(self.values, loc, 0)
A:pandas.core.internals.blocks.result->self.astype(dtype)._replace_single(to_rep, value, inplace=inplace, filter=filter, regex=regex, convert=convert)
A:pandas.core.internals.blocks.nv->v.astype(dtype).copy()
A:pandas.core.internals.blocks.block->super()._replace_coerce(to_replace=to_replace, value=value, inplace=inplace, regex=regex, convert=convert, mask=mask)
A:pandas.core.internals.blocks.inplace->validate_bool_kwarg(inplace, 'inplace')
A:pandas.core.internals.blocks.mask->isna(values)
A:pandas.core.internals.blocks.limit->pandas._libs.algos._validate_limit(None, limit=limit)
A:pandas.core.internals.blocks.blocks->self.coerce_to_target_dtype(value).split_and_operate(None, f, False)
A:pandas.core.internals.blocks.val->maybe_downcast_to_dtype(val, dtype='infer')
A:pandas.core.internals.blocks.dtype->pandas_dtype(dtype)
A:pandas.core.internals.blocks.vals1d->values.reshape(tuple((1,) + shape)).reshape(tuple((1,) + shape)).ravel()
A:pandas.core.internals.blocks.newb->make_block(obj_vals, placement=self.mgr_locs, klass=ObjectBlock, ndim=self.ndim)
A:pandas.core.internals.blocks.tipo->maybe_infer_dtype_type(element)
A:pandas.core.internals.blocks.itemsize->pandas._libs.writers.word_len(na_rep)
A:pandas.core.internals.blocks.to_replace->convert_scalar(values, to_replace)
A:pandas.core.internals.blocks.value->convert_scalar(values, value)
A:pandas.core.internals.blocks.(dtype, _)->maybe_promote(n.dtype)
A:pandas.core.internals.blocks.b->self.coerce_to_target_dtype(value).astype(dtype)
A:pandas.core.internals.blocks.arr_value->numpy.array(value)
A:pandas.core.internals.blocks.new->new.reshape(tuple(new_shape)).reshape(tuple(new_shape))
A:pandas.core.internals.blocks.new_shape->list(new.shape)
A:pandas.core.internals.blocks.n->numpy.asarray(n)
A:pandas.core.internals.blocks.new_blocks->self.coerce_to_target_dtype(value).split_and_operate(mask, f, inplace)
A:pandas.core.internals.blocks.mytz->getattr(self.dtype, 'tz', None)
A:pandas.core.internals.blocks.othertz->getattr(dtype, 'tz', None)
A:pandas.core.internals.blocks.m->pandas.core.missing.clean_interp_method(method, **kwargs)
A:pandas.core.internals.blocks.r->maybe_downcast_numeric(taken, self.dtype)
A:pandas.core.internals.blocks.fill_value->numpy.timedelta64('NaT', 'ns')
A:pandas.core.internals.blocks.data->data.astype(np.float64).astype(np.float64)
A:pandas.core.internals.blocks.interp_values->numpy.apply_along_axis(func, axis, data)
A:pandas.core.internals.blocks.(new_values, fill_value)->maybe_upcast(self.values, fill_value)
A:pandas.core.internals.blocks.axis_indexer[axis]->slice(periods, None)
A:pandas.core.internals.blocks.other->extract_array(other, extract_numpy=True)
A:pandas.core.internals.blocks.cond->extract_array(cond, extract_numpy=True)
A:pandas.core.internals.blocks.fastres->pandas.core.computation.expressions.where(cond, values, other)
A:pandas.core.internals.blocks.taken->self.astype(dtype)._replace_single(to_rep, value, inplace=inplace, filter=filter, regex=regex, convert=convert).take(m.nonzero()[0], axis=axis)
A:pandas.core.internals.blocks.nb->self.coerce_to_target_dtype(value).make_block(r.T, placement=self.mgr_locs[m])
A:pandas.core.internals.blocks.unstacker->dummy_unstacker(dummy_arr)
A:pandas.core.internals.blocks.new_items->dummy_unstacker(dummy_arr).get_new_columns()
A:pandas.core.internals.blocks.new_placement->new_columns.get_indexer(new_items)
A:pandas.core.internals.blocks.(new_values, mask)->dummy_unstacker(dummy_arr).get_new_values()
A:pandas.core.internals.blocks.ndim->numpy.ndim(result)
A:pandas.core.internals.blocks.self->self.coerce_to_target_dtype(value).coerce_to_target_dtype(value)
A:pandas.core.internals.blocks.placement->pandas._libs.internals.BlockPlacement(placement)
A:pandas.core.internals.blocks.dummy_arr->numpy.arange(n_rows)
A:pandas.core.internals.blocks.dummy_unstacker->functools.partial(unstacker_func, fill_value=-1)
A:pandas.core.internals.blocks.(new_placement, new_values, mask)->self.coerce_to_target_dtype(value).coerce_to_target_dtype(value)._get_unstack_items(unstacker, new_columns)
A:pandas.core.internals.blocks.formatter->FloatArrayFormatter(values, na_rep=na_rep, float_format=float_format, decimal=decimal, quoting=quoting, fixed_width=False)
A:pandas.core.internals.blocks.i8values->self.coerce_to_target_dtype(value).coerce_to_target_dtype(value).values.view('i8')
A:pandas.core.internals.blocks.fmt->_get_format_datetime64_from_values(values, date_format)
A:pandas.core.internals.blocks.obj_vals->self.coerce_to_target_dtype(value).coerce_to_target_dtype(value).values.astype(object)
A:pandas.core.internals.blocks.naive->naive.reshape(self.shape).reshape(self.shape)
A:pandas.core.internals.blocks.blk->self.coerce_to_target_dtype(value).coerce_to_target_dtype(value).make_block(naive)
A:pandas.core.internals.blocks.res_blk->self.coerce_to_target_dtype(value).coerce_to_target_dtype(value).make_block(naive).quantile(qs, interpolation=interpolation, axis=axis)
A:pandas.core.internals.blocks.aware->self.coerce_to_target_dtype(value).coerce_to_target_dtype(value)._holder(res_blk.values.ravel(), dtype=self.dtype)
A:pandas.core.internals.blocks.rvalues->numpy.empty(values.shape, dtype=object)
A:pandas.core.internals.blocks.imask->(~mask).ravel()
A:pandas.core.internals.blocks.rvalues.flat[imask]->numpy.array([Timedelta(val)._repr_base(format='all') for val in values.ravel()[imask]], dtype=object)
A:pandas.core.internals.blocks.to_replace_values->numpy.atleast_1d(to_replace)
A:pandas.core.internals.blocks.to_rep_is_list->is_list_like(to_replace)
A:pandas.core.internals.blocks.value_is_list->is_list_like(value)
A:pandas.core.internals.blocks.result_blocks->_extend_blocks(result, result_blocks)
A:pandas.core.internals.blocks.regex_re->is_re_compilable(regex)
A:pandas.core.internals.blocks.rx->re.compile(to_replace)
A:pandas.core.internals.blocks.f->numpy.vectorize(re_replacer, otypes=[self.dtype])
A:pandas.core.internals.blocks.filt->slice(None)
A:pandas.core.internals.blocks.new_values[filt]->f(new_values[filt])
A:pandas.core.internals.blocks.new_values[filt][mask]->f(new_values[filt][mask])
A:pandas.core.internals.blocks.klass->get_block_type(values, dtype)
A:pandas.core.internals.blocks.argsort->numpy.argsort(new_mgr_locs)
A:pandas.core.internals.blocks.arr->arr.reshape(new_shape).reshape(new_shape)
A:pandas.core.internals.blocks.nn_at->nn.astype(v.dtype)
A:pandas.core.internals.blocks.v->v.astype(dtype).astype(dtype)
pandas.core.internals.Block(self,values,placement,ndim=None)
pandas.core.internals.Block.__getstate__(self)
pandas.core.internals.Block.__len__(self)->int
pandas.core.internals.Block.__repr__(self)->str
pandas.core.internals.Block.__setstate__(self,state)
pandas.core.internals.Block._can_hold_element(self,element:Any)->bool
pandas.core.internals.Block._check_ndim(self,values,ndim)
pandas.core.internals.Block._consolidate_key(self)
pandas.core.internals.Block._holder(self)
pandas.core.internals.Block._interpolate(self,method=None,index=None,values=None,fill_value=None,axis=0,limit=None,limit_direction='forward',limit_area=None,inplace=False,downcast=None,**kwargs)
pandas.core.internals.Block._interpolate_with_fill(self,method='pad',axis=0,inplace=False,limit=None,fill_value=None,coerce=False,downcast=None)
pandas.core.internals.Block._is_single_block(self)
pandas.core.internals.Block._maybe_downcast(self,blocks:List['Block'],downcast=None)->List['Block']
pandas.core.internals.Block._replace_coerce(self,to_replace,value,inplace=True,regex=False,convert=False,mask=None)
pandas.core.internals.Block._replace_single(self,*args,**kwargs)
pandas.core.internals.Block._slice(self,slicer)
pandas.core.internals.Block._unstack(self,unstacker_func,new_columns,n_rows,fill_value)
pandas.core.internals.Block.apply(self,func,**kwargs)
pandas.core.internals.Block.array_dtype(self)
pandas.core.internals.Block.array_values(self)->ExtensionArray
pandas.core.internals.Block.astype(self,dtype,copy:bool=False,errors:str='raise')
pandas.core.internals.Block.coerce_to_target_dtype(self,other)
pandas.core.internals.Block.concat_same_type(self,to_concat,placement=None)
pandas.core.internals.Block.convert(self,copy:bool=True,datetime:bool=True,numeric:bool=True,timedelta:bool=True,coerce:bool=False)
pandas.core.internals.Block.copy(self,deep=True)
pandas.core.internals.Block.delete(self,loc)
pandas.core.internals.Block.diff(self,n:int,axis:int=1)->List['Block']
pandas.core.internals.Block.downcast(self,dtypes=None)
pandas.core.internals.Block.dtype(self)
pandas.core.internals.Block.equals(self,other)->bool
pandas.core.internals.Block.external_values(self,dtype=None)
pandas.core.internals.Block.fill_value(self)
pandas.core.internals.Block.fillna(self,value,limit=None,inplace=False,downcast=None)
pandas.core.internals.Block.ftype(self)
pandas.core.internals.Block.get_block_values(self,dtype=None)
pandas.core.internals.Block.get_values(self,dtype=None)
pandas.core.internals.Block.getitem_block(self,slicer,new_mgr_locs=None)
pandas.core.internals.Block.iget(self,i)
pandas.core.internals.Block.internal_values(self,dtype=None)
pandas.core.internals.Block.interpolate(self,method='pad',axis=0,index=None,values=None,inplace=False,limit=None,limit_direction='forward',limit_area=None,fill_value=None,coerce=False,downcast=None,**kwargs)
pandas.core.internals.Block.is_categorical_astype(self,dtype)
pandas.core.internals.Block.is_datelike(self)
pandas.core.internals.Block.is_view(self)
pandas.core.internals.Block.make_block(self,values,placement=None)->'Block'
pandas.core.internals.Block.make_block_same_class(self,values,placement=None,ndim=None)
pandas.core.internals.Block.merge(self,other)
pandas.core.internals.Block.mgr_locs(self)
pandas.core.internals.Block.mgr_locs(self,new_mgr_locs)
pandas.core.internals.Block.putmask(self,mask,new,align=True,inplace=False,axis=0,transpose=False)
pandas.core.internals.Block.quantile(self,qs,interpolation='linear',axis=0)
pandas.core.internals.Block.replace(self,to_replace,value,inplace=False,filter=None,regex=False,convert=True)
pandas.core.internals.Block.set(self,locs,values)
pandas.core.internals.Block.setitem(self,indexer,value)
pandas.core.internals.Block.shape(self)
pandas.core.internals.Block.shift(self,periods,axis=0,fill_value=None)
pandas.core.internals.Block.split_and_operate(self,mask,f,inplace:bool)
pandas.core.internals.Block.take_nd(self,indexer,axis,new_mgr_locs=None,fill_tuple=None)
pandas.core.internals.Block.to_dense(self)
pandas.core.internals.Block.to_native_types(self,slicer=None,na_rep='nan',quoting=None,**kwargs)
pandas.core.internals.Block.where(self,other,cond,align=True,errors='raise',try_cast:bool=False,axis:int=0)->List['Block']
pandas.core.internals.BoolBlock(NumericBlock)
pandas.core.internals.BoolBlock._can_hold_element(self,element:Any)->bool
pandas.core.internals.BoolBlock.replace(self,to_replace,value,inplace=False,filter=None,regex=False,convert=True)
pandas.core.internals.BoolBlock.should_store(self,value)
pandas.core.internals.CategoricalBlock(self,values,placement,ndim=None)
pandas.core.internals.CategoricalBlock._holder(self)
pandas.core.internals.CategoricalBlock.array_dtype(self)
pandas.core.internals.CategoricalBlock.concat_same_type(self,to_concat,placement=None)
pandas.core.internals.CategoricalBlock.replace(self,to_replace,value,inplace:bool=False,filter=None,regex:bool=False,convert:bool=True)
pandas.core.internals.CategoricalBlock.to_dense(self)
pandas.core.internals.CategoricalBlock.to_native_types(self,slicer=None,na_rep='',quoting=None,**kwargs)
pandas.core.internals.ComplexBlock(FloatOrComplexBlock)
pandas.core.internals.ComplexBlock._can_hold_element(self,element:Any)->bool
pandas.core.internals.ComplexBlock.should_store(self,value)
pandas.core.internals.DatetimeBlock(self,values,placement,ndim=None)
pandas.core.internals.DatetimeBlock._can_hold_element(self,element:Any)->bool
pandas.core.internals.DatetimeBlock._can_hold_na(self)
pandas.core.internals.DatetimeBlock._maybe_coerce_values(self,values)
pandas.core.internals.DatetimeBlock.array_values(self)->ExtensionArray
pandas.core.internals.DatetimeBlock.astype(self,dtype,copy:bool=False,errors:str='raise')
pandas.core.internals.DatetimeBlock.external_values(self)
pandas.core.internals.DatetimeBlock.set(self,locs,values)
pandas.core.internals.DatetimeBlock.should_store(self,value)
pandas.core.internals.DatetimeBlock.to_native_types(self,slicer=None,na_rep=None,date_format=None,quoting=None,**kwargs)
pandas.core.internals.DatetimeTZBlock(ExtensionBlock,DatetimeBlock)
pandas.core.internals.DatetimeTZBlock._holder(self)
pandas.core.internals.DatetimeTZBlock._maybe_coerce_values(self,values)
pandas.core.internals.DatetimeTZBlock._slice(self,slicer)
pandas.core.internals.DatetimeTZBlock.concat_same_type(self,to_concat,placement=None)
pandas.core.internals.DatetimeTZBlock.diff(self,n:int,axis:int=0)->List['Block']
pandas.core.internals.DatetimeTZBlock.equals(self,other)->bool
pandas.core.internals.DatetimeTZBlock.fillna(self,value,limit=None,inplace=False,downcast=None)
pandas.core.internals.DatetimeTZBlock.get_values(self,dtype=None)
pandas.core.internals.DatetimeTZBlock.is_view(self)
pandas.core.internals.DatetimeTZBlock.quantile(self,qs,interpolation='linear',axis=0)
pandas.core.internals.DatetimeTZBlock.setitem(self,indexer,value)
pandas.core.internals.DatetimeTZBlock.to_dense(self)
pandas.core.internals.ExtensionBlock(self,values,placement,ndim=None)
pandas.core.internals.ExtensionBlock._can_hold_element(self,element:Any)->bool
pandas.core.internals.ExtensionBlock._can_hold_na(self)
pandas.core.internals.ExtensionBlock._ftype(self)
pandas.core.internals.ExtensionBlock._holder(self)
pandas.core.internals.ExtensionBlock._maybe_coerce_values(self,values)
pandas.core.internals.ExtensionBlock._slice(self,slicer)
pandas.core.internals.ExtensionBlock._unstack(self,unstacker_func,new_columns,n_rows,fill_value)
pandas.core.internals.ExtensionBlock.array_values(self)->ExtensionArray
pandas.core.internals.ExtensionBlock.concat_same_type(self,to_concat,placement=None)
pandas.core.internals.ExtensionBlock.diff(self,n:int,axis:int=1)->List['Block']
pandas.core.internals.ExtensionBlock.fill_value(self)
pandas.core.internals.ExtensionBlock.fillna(self,value,limit=None,inplace=False,downcast=None)
pandas.core.internals.ExtensionBlock.get_values(self,dtype=None)
pandas.core.internals.ExtensionBlock.interpolate(self,method='pad',axis=0,inplace=False,limit=None,fill_value=None,**kwargs)
pandas.core.internals.ExtensionBlock.is_numeric(self)
pandas.core.internals.ExtensionBlock.is_view(self)
pandas.core.internals.ExtensionBlock.setitem(self,indexer,value)
pandas.core.internals.ExtensionBlock.shift(self,periods:int,axis:int=0,fill_value:Any=None)->List['ExtensionBlock']
pandas.core.internals.ExtensionBlock.take_nd(self,indexer,axis=0,new_mgr_locs=None,fill_tuple=None)
pandas.core.internals.ExtensionBlock.to_dense(self)
pandas.core.internals.ExtensionBlock.to_native_types(self,slicer=None,na_rep='nan',quoting=None,**kwargs)
pandas.core.internals.ExtensionBlock.where(self,other,cond,align=True,errors='raise',try_cast:bool=False,axis:int=0)->List['Block']
pandas.core.internals.FloatBlock(FloatOrComplexBlock)
pandas.core.internals.FloatBlock._can_hold_element(self,element:Any)->bool
pandas.core.internals.FloatBlock.should_store(self,value)
pandas.core.internals.FloatBlock.to_native_types(self,slicer=None,na_rep='',float_format=None,decimal='.',quoting=None,**kwargs)
pandas.core.internals.IntBlock(NumericBlock)
pandas.core.internals.IntBlock._can_hold_element(self,element:Any)->bool
pandas.core.internals.IntBlock.should_store(self,value)
pandas.core.internals.ObjectBlock(self,values,placement=None,ndim=2)
pandas.core.internals.ObjectBlock._can_hold_element(self,element:Any)->bool
pandas.core.internals.ObjectBlock._maybe_downcast(self,blocks:List['Block'],downcast=None)->List['Block']
pandas.core.internals.ObjectBlock._replace_coerce(self,to_replace,value,inplace=True,regex=False,convert=False,mask=None)
pandas.core.internals.ObjectBlock._replace_single(self,to_replace,value,inplace=False,filter=None,regex=False,convert=True,mask=None)
pandas.core.internals.ObjectBlock.convert(self,copy:bool=True,datetime:bool=True,numeric:bool=True,timedelta:bool=True,coerce:bool=False)
pandas.core.internals.ObjectBlock.is_bool(self)
pandas.core.internals.ObjectBlock.replace(self,to_replace,value,inplace=False,filter=None,regex=False,convert=True)
pandas.core.internals.ObjectBlock.should_store(self,value)
pandas.core.internals.TimeDeltaBlock(self,values,placement,ndim=None)
pandas.core.internals.TimeDeltaBlock._can_hold_element(self,element:Any)->bool
pandas.core.internals.TimeDeltaBlock._holder(self)
pandas.core.internals.TimeDeltaBlock.array_values(self)->ExtensionArray
pandas.core.internals.TimeDeltaBlock.external_values(self,dtype=None)
pandas.core.internals.TimeDeltaBlock.fillna(self,value,**kwargs)
pandas.core.internals.TimeDeltaBlock.should_store(self,value)
pandas.core.internals.TimeDeltaBlock.to_native_types(self,slicer=None,na_rep=None,quoting=None,**kwargs)
pandas.core.internals._block_shape(values,ndim=1,shape=None)
pandas.core.internals._safe_reshape(arr,new_shape)
pandas.core.internals.blocks.Block(self,values,placement,ndim=None)
pandas.core.internals.blocks.Block.__getstate__(self)
pandas.core.internals.blocks.Block.__init__(self,values,placement,ndim=None)
pandas.core.internals.blocks.Block.__len__(self)->int
pandas.core.internals.blocks.Block.__repr__(self)->str
pandas.core.internals.blocks.Block.__setstate__(self,state)
pandas.core.internals.blocks.Block._can_hold_element(self,element:Any)->bool
pandas.core.internals.blocks.Block._check_ndim(self,values,ndim)
pandas.core.internals.blocks.Block._consolidate_key(self)
pandas.core.internals.blocks.Block._holder(self)
pandas.core.internals.blocks.Block._interpolate(self,method=None,index=None,values=None,fill_value=None,axis=0,limit=None,limit_direction='forward',limit_area=None,inplace=False,downcast=None,**kwargs)
pandas.core.internals.blocks.Block._interpolate_with_fill(self,method='pad',axis=0,inplace=False,limit=None,fill_value=None,coerce=False,downcast=None)
pandas.core.internals.blocks.Block._is_single_block(self)
pandas.core.internals.blocks.Block._maybe_downcast(self,blocks:List['Block'],downcast=None)->List['Block']
pandas.core.internals.blocks.Block._replace_coerce(self,to_replace,value,inplace=True,regex=False,convert=False,mask=None)
pandas.core.internals.blocks.Block._replace_single(self,*args,**kwargs)
pandas.core.internals.blocks.Block._slice(self,slicer)
pandas.core.internals.blocks.Block._unstack(self,unstacker_func,new_columns,n_rows,fill_value)
pandas.core.internals.blocks.Block.apply(self,func,**kwargs)
pandas.core.internals.blocks.Block.array_dtype(self)
pandas.core.internals.blocks.Block.array_values(self)->ExtensionArray
pandas.core.internals.blocks.Block.astype(self,dtype,copy:bool=False,errors:str='raise')
pandas.core.internals.blocks.Block.coerce_to_target_dtype(self,other)
pandas.core.internals.blocks.Block.concat_same_type(self,to_concat,placement=None)
pandas.core.internals.blocks.Block.convert(self,copy:bool=True,datetime:bool=True,numeric:bool=True,timedelta:bool=True,coerce:bool=False)
pandas.core.internals.blocks.Block.copy(self,deep=True)
pandas.core.internals.blocks.Block.delete(self,loc)
pandas.core.internals.blocks.Block.diff(self,n:int,axis:int=1)->List['Block']
pandas.core.internals.blocks.Block.downcast(self,dtypes=None)
pandas.core.internals.blocks.Block.dtype(self)
pandas.core.internals.blocks.Block.equals(self,other)->bool
pandas.core.internals.blocks.Block.external_values(self,dtype=None)
pandas.core.internals.blocks.Block.fill_value(self)
pandas.core.internals.blocks.Block.fillna(self,value,limit=None,inplace=False,downcast=None)
pandas.core.internals.blocks.Block.ftype(self)
pandas.core.internals.blocks.Block.get_block_values(self,dtype=None)
pandas.core.internals.blocks.Block.get_values(self,dtype=None)
pandas.core.internals.blocks.Block.getitem_block(self,slicer,new_mgr_locs=None)
pandas.core.internals.blocks.Block.iget(self,i)
pandas.core.internals.blocks.Block.internal_values(self,dtype=None)
pandas.core.internals.blocks.Block.interpolate(self,method='pad',axis=0,index=None,values=None,inplace=False,limit=None,limit_direction='forward',limit_area=None,fill_value=None,coerce=False,downcast=None,**kwargs)
pandas.core.internals.blocks.Block.is_categorical_astype(self,dtype)
pandas.core.internals.blocks.Block.is_datelike(self)
pandas.core.internals.blocks.Block.is_view(self)
pandas.core.internals.blocks.Block.make_block(self,values,placement=None)->'Block'
pandas.core.internals.blocks.Block.make_block_same_class(self,values,placement=None,ndim=None)
pandas.core.internals.blocks.Block.merge(self,other)
pandas.core.internals.blocks.Block.mgr_locs(self)
pandas.core.internals.blocks.Block.mgr_locs(self,new_mgr_locs)
pandas.core.internals.blocks.Block.putmask(self,mask,new,align=True,inplace=False,axis=0,transpose=False)
pandas.core.internals.blocks.Block.quantile(self,qs,interpolation='linear',axis=0)
pandas.core.internals.blocks.Block.replace(self,to_replace,value,inplace=False,filter=None,regex=False,convert=True)
pandas.core.internals.blocks.Block.set(self,locs,values)
pandas.core.internals.blocks.Block.setitem(self,indexer,value)
pandas.core.internals.blocks.Block.shape(self)
pandas.core.internals.blocks.Block.shift(self,periods,axis=0,fill_value=None)
pandas.core.internals.blocks.Block.split_and_operate(self,mask,f,inplace:bool)
pandas.core.internals.blocks.Block.take_nd(self,indexer,axis,new_mgr_locs=None,fill_tuple=None)
pandas.core.internals.blocks.Block.to_dense(self)
pandas.core.internals.blocks.Block.to_native_types(self,slicer=None,na_rep='nan',quoting=None,**kwargs)
pandas.core.internals.blocks.Block.where(self,other,cond,align=True,errors='raise',try_cast:bool=False,axis:int=0)->List['Block']
pandas.core.internals.blocks.BoolBlock(NumericBlock)
pandas.core.internals.blocks.BoolBlock._can_hold_element(self,element:Any)->bool
pandas.core.internals.blocks.BoolBlock.replace(self,to_replace,value,inplace=False,filter=None,regex=False,convert=True)
pandas.core.internals.blocks.BoolBlock.should_store(self,value)
pandas.core.internals.blocks.CategoricalBlock(self,values,placement,ndim=None)
pandas.core.internals.blocks.CategoricalBlock.__init__(self,values,placement,ndim=None)
pandas.core.internals.blocks.CategoricalBlock._holder(self)
pandas.core.internals.blocks.CategoricalBlock.array_dtype(self)
pandas.core.internals.blocks.CategoricalBlock.concat_same_type(self,to_concat,placement=None)
pandas.core.internals.blocks.CategoricalBlock.replace(self,to_replace,value,inplace:bool=False,filter=None,regex:bool=False,convert:bool=True)
pandas.core.internals.blocks.CategoricalBlock.to_dense(self)
pandas.core.internals.blocks.CategoricalBlock.to_native_types(self,slicer=None,na_rep='',quoting=None,**kwargs)
pandas.core.internals.blocks.ComplexBlock(FloatOrComplexBlock)
pandas.core.internals.blocks.ComplexBlock._can_hold_element(self,element:Any)->bool
pandas.core.internals.blocks.ComplexBlock.should_store(self,value)
pandas.core.internals.blocks.DatetimeBlock(self,values,placement,ndim=None)
pandas.core.internals.blocks.DatetimeBlock.__init__(self,values,placement,ndim=None)
pandas.core.internals.blocks.DatetimeBlock._can_hold_element(self,element:Any)->bool
pandas.core.internals.blocks.DatetimeBlock._can_hold_na(self)
pandas.core.internals.blocks.DatetimeBlock._maybe_coerce_values(self,values)
pandas.core.internals.blocks.DatetimeBlock.array_values(self)->ExtensionArray
pandas.core.internals.blocks.DatetimeBlock.astype(self,dtype,copy:bool=False,errors:str='raise')
pandas.core.internals.blocks.DatetimeBlock.external_values(self)
pandas.core.internals.blocks.DatetimeBlock.set(self,locs,values)
pandas.core.internals.blocks.DatetimeBlock.should_store(self,value)
pandas.core.internals.blocks.DatetimeBlock.to_native_types(self,slicer=None,na_rep=None,date_format=None,quoting=None,**kwargs)
pandas.core.internals.blocks.DatetimeLikeBlockMixin
pandas.core.internals.blocks.DatetimeLikeBlockMixin._holder(self)
pandas.core.internals.blocks.DatetimeLikeBlockMixin.fill_value(self)
pandas.core.internals.blocks.DatetimeLikeBlockMixin.get_values(self,dtype=None)
pandas.core.internals.blocks.DatetimeLikeBlockMixin.iget(self,key)
pandas.core.internals.blocks.DatetimeLikeBlockMixin.shift(self,periods,axis=0,fill_value=None)
pandas.core.internals.blocks.DatetimeTZBlock(ExtensionBlock,DatetimeBlock)
pandas.core.internals.blocks.DatetimeTZBlock._holder(self)
pandas.core.internals.blocks.DatetimeTZBlock._maybe_coerce_values(self,values)
pandas.core.internals.blocks.DatetimeTZBlock._slice(self,slicer)
pandas.core.internals.blocks.DatetimeTZBlock.concat_same_type(self,to_concat,placement=None)
pandas.core.internals.blocks.DatetimeTZBlock.diff(self,n:int,axis:int=0)->List['Block']
pandas.core.internals.blocks.DatetimeTZBlock.equals(self,other)->bool
pandas.core.internals.blocks.DatetimeTZBlock.fillna(self,value,limit=None,inplace=False,downcast=None)
pandas.core.internals.blocks.DatetimeTZBlock.get_values(self,dtype=None)
pandas.core.internals.blocks.DatetimeTZBlock.is_view(self)
pandas.core.internals.blocks.DatetimeTZBlock.quantile(self,qs,interpolation='linear',axis=0)
pandas.core.internals.blocks.DatetimeTZBlock.setitem(self,indexer,value)
pandas.core.internals.blocks.DatetimeTZBlock.to_dense(self)
pandas.core.internals.blocks.ExtensionBlock(self,values,placement,ndim=None)
pandas.core.internals.blocks.ExtensionBlock.__init__(self,values,placement,ndim=None)
pandas.core.internals.blocks.ExtensionBlock._can_hold_element(self,element:Any)->bool
pandas.core.internals.blocks.ExtensionBlock._can_hold_na(self)
pandas.core.internals.blocks.ExtensionBlock._ftype(self)
pandas.core.internals.blocks.ExtensionBlock._holder(self)
pandas.core.internals.blocks.ExtensionBlock._maybe_coerce_values(self,values)
pandas.core.internals.blocks.ExtensionBlock._slice(self,slicer)
pandas.core.internals.blocks.ExtensionBlock._unstack(self,unstacker_func,new_columns,n_rows,fill_value)
pandas.core.internals.blocks.ExtensionBlock.array_values(self)->ExtensionArray
pandas.core.internals.blocks.ExtensionBlock.concat_same_type(self,to_concat,placement=None)
pandas.core.internals.blocks.ExtensionBlock.diff(self,n:int,axis:int=1)->List['Block']
pandas.core.internals.blocks.ExtensionBlock.fill_value(self)
pandas.core.internals.blocks.ExtensionBlock.fillna(self,value,limit=None,inplace=False,downcast=None)
pandas.core.internals.blocks.ExtensionBlock.get_values(self,dtype=None)
pandas.core.internals.blocks.ExtensionBlock.interpolate(self,method='pad',axis=0,inplace=False,limit=None,fill_value=None,**kwargs)
pandas.core.internals.blocks.ExtensionBlock.is_numeric(self)
pandas.core.internals.blocks.ExtensionBlock.is_view(self)
pandas.core.internals.blocks.ExtensionBlock.setitem(self,indexer,value)
pandas.core.internals.blocks.ExtensionBlock.shift(self,periods:int,axis:int=0,fill_value:Any=None)->List['ExtensionBlock']
pandas.core.internals.blocks.ExtensionBlock.take_nd(self,indexer,axis=0,new_mgr_locs=None,fill_tuple=None)
pandas.core.internals.blocks.ExtensionBlock.to_dense(self)
pandas.core.internals.blocks.ExtensionBlock.to_native_types(self,slicer=None,na_rep='nan',quoting=None,**kwargs)
pandas.core.internals.blocks.ExtensionBlock.where(self,other,cond,align=True,errors='raise',try_cast:bool=False,axis:int=0)->List['Block']
pandas.core.internals.blocks.FloatBlock(FloatOrComplexBlock)
pandas.core.internals.blocks.FloatBlock._can_hold_element(self,element:Any)->bool
pandas.core.internals.blocks.FloatBlock.should_store(self,value)
pandas.core.internals.blocks.FloatBlock.to_native_types(self,slicer=None,na_rep='',float_format=None,decimal='.',quoting=None,**kwargs)
pandas.core.internals.blocks.FloatOrComplexBlock(NumericBlock)
pandas.core.internals.blocks.FloatOrComplexBlock.equals(self,other)->bool
pandas.core.internals.blocks.IntBlock(NumericBlock)
pandas.core.internals.blocks.IntBlock._can_hold_element(self,element:Any)->bool
pandas.core.internals.blocks.IntBlock.should_store(self,value)
pandas.core.internals.blocks.NonConsolidatableMixIn(self,values,placement,ndim=None)
pandas.core.internals.blocks.NonConsolidatableMixIn.__init__(self,values,placement,ndim=None)
pandas.core.internals.blocks.NonConsolidatableMixIn._get_unstack_items(self,unstacker,new_columns)
pandas.core.internals.blocks.NonConsolidatableMixIn.iget(self,col)
pandas.core.internals.blocks.NonConsolidatableMixIn.putmask(self,mask,new,align=True,inplace=False,axis=0,transpose=False)
pandas.core.internals.blocks.NonConsolidatableMixIn.set(self,locs,values,check=False)
pandas.core.internals.blocks.NonConsolidatableMixIn.shape(self)
pandas.core.internals.blocks.NonConsolidatableMixIn.should_store(self,value)
pandas.core.internals.blocks.NumericBlock(Block)
pandas.core.internals.blocks.ObjectBlock(self,values,placement=None,ndim=2)
pandas.core.internals.blocks.ObjectBlock.__init__(self,values,placement=None,ndim=2)
pandas.core.internals.blocks.ObjectBlock._can_hold_element(self,element:Any)->bool
pandas.core.internals.blocks.ObjectBlock._maybe_downcast(self,blocks:List['Block'],downcast=None)->List['Block']
pandas.core.internals.blocks.ObjectBlock._replace_coerce(self,to_replace,value,inplace=True,regex=False,convert=False,mask=None)
pandas.core.internals.blocks.ObjectBlock._replace_single(self,to_replace,value,inplace=False,filter=None,regex=False,convert=True,mask=None)
pandas.core.internals.blocks.ObjectBlock.convert(self,copy:bool=True,datetime:bool=True,numeric:bool=True,timedelta:bool=True,coerce:bool=False)
pandas.core.internals.blocks.ObjectBlock.is_bool(self)
pandas.core.internals.blocks.ObjectBlock.replace(self,to_replace,value,inplace=False,filter=None,regex=False,convert=True)
pandas.core.internals.blocks.ObjectBlock.should_store(self,value)
pandas.core.internals.blocks.ObjectValuesExtensionBlock(ExtensionBlock)
pandas.core.internals.blocks.ObjectValuesExtensionBlock.external_values(self,dtype=None)
pandas.core.internals.blocks.TimeDeltaBlock(self,values,placement,ndim=None)
pandas.core.internals.blocks.TimeDeltaBlock.__init__(self,values,placement,ndim=None)
pandas.core.internals.blocks.TimeDeltaBlock._can_hold_element(self,element:Any)->bool
pandas.core.internals.blocks.TimeDeltaBlock._holder(self)
pandas.core.internals.blocks.TimeDeltaBlock.array_values(self)->ExtensionArray
pandas.core.internals.blocks.TimeDeltaBlock.external_values(self,dtype=None)
pandas.core.internals.blocks.TimeDeltaBlock.fillna(self,value,**kwargs)
pandas.core.internals.blocks.TimeDeltaBlock.should_store(self,value)
pandas.core.internals.blocks.TimeDeltaBlock.to_native_types(self,slicer=None,na_rep=None,quoting=None,**kwargs)
pandas.core.internals.blocks._block_shape(values,ndim=1,shape=None)
pandas.core.internals.blocks._extend_blocks(result,blocks=None)
pandas.core.internals.blocks._merge_blocks(blocks,dtype=None,_can_consolidate=True)
pandas.core.internals.blocks._putmask_smart(v,mask,n)
pandas.core.internals.blocks._safe_reshape(arr,new_shape)
pandas.core.internals.blocks.get_block_type(values,dtype=None)
pandas.core.internals.blocks.make_block(values,placement,klass=None,ndim=None,dtype=None)
pandas.core.internals.make_block(values,placement,klass=None,ndim=None,dtype=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/internals/concat.py----------------------------------------
A:pandas.core.internals.concat.mgr_shape->tuple(mgr_shape)
A:pandas.core.internals.concat.mgr_shape[ax]->len(indexer)
A:pandas.core.internals.concat.ax0_indexer->indexers.pop(0)
A:pandas.core.internals.concat.blknos->pandas.core.algorithms.take_1d(mgr._blknos, ax0_indexer, fill_value=-1)
A:pandas.core.internals.concat.blklocs->pandas.core.algorithms.take_1d(mgr._blklocs, ax0_indexer, fill_value=-1)
A:pandas.core.internals.concat.join_unit_indexers->indexers.copy()
A:pandas.core.internals.concat.shape->tuple(shape)
A:pandas.core.internals.concat.shape[0]->len(placements)
A:pandas.core.internals.concat.unit->JoinUnit(blk, shape, join_unit_indexers)
A:pandas.core.internals.concat.values_flat->pandas.core.algorithms.take_nd(values, indexer, axis=ax, fill_value=fill_value).ravel(order='K')
A:pandas.core.internals.concat.chunk_len->max(total_len // 40, 1000)
A:pandas.core.internals.concat.values->pandas.core.algorithms.take_nd(values, indexer, axis=ax, fill_value=fill_value)
A:pandas.core.internals.concat.array->empty_dtype.construct_array_type()
A:pandas.core.internals.concat.missing_arr->numpy.empty(self.shape, dtype=empty_dtype)
A:pandas.core.internals.concat.(empty_dtype, upcasted_na)->_get_empty_dtype_and_na(join_units)
A:pandas.core.internals.concat.concat_values->concat_compat(to_concat, axis=concat_axis)
A:pandas.core.internals.concat.upcast_classes->defaultdict(list)
A:pandas.core.internals.concat.null_upcast_classes->defaultdict(list)
A:pandas.core.internals.concat.g->numpy.find_common_type(upcast_classes, [])
A:pandas.core.internals.concat.extra_block->join_unit.block.getitem_block(slice(length, None))
A:pandas.core.internals.concat.join_unit.block->join_unit.block.getitem_block(slice(length))
A:pandas.core.internals.concat.extra_indexers->copy.copy(join_unit.indexers)
A:pandas.core.internals.concat.retval->next(seq, None)
A:pandas.core.internals.concat.plans->list(map(iter, plans))
A:pandas.core.internals.concat.next_items->list(map(_next_or_none, plans))
A:pandas.core.internals.concat.(placements, units)->zip(*next_items)
A:pandas.core.internals.concat.lengths->list(map(len, placements))
A:pandas.core.internals.concat.next_items[:]->map(_next_or_none, plans)
A:pandas.core.internals.concat.next_items[i]->_next_or_none(plans[i])
pandas.core.internals.concat.JoinUnit(self,block,shape,indexers=None)
pandas.core.internals.concat.JoinUnit.__init__(self,block,shape,indexers=None)
pandas.core.internals.concat.JoinUnit.__repr__(self)->str
pandas.core.internals.concat.JoinUnit.dtype(self)
pandas.core.internals.concat.JoinUnit.get_reindexed_values(self,empty_dtype,upcasted_na)
pandas.core.internals.concat.JoinUnit.is_na(self)
pandas.core.internals.concat.JoinUnit.needs_filling(self)
pandas.core.internals.concat._get_empty_dtype_and_na(join_units)
pandas.core.internals.concat._is_uniform_reindex(join_units)->bool
pandas.core.internals.concat._trim_join_unit(join_unit,length)
pandas.core.internals.concat.combine_concat_plans(plans,concat_axis)
pandas.core.internals.concat.concatenate_join_units(join_units,concat_axis,copy)
pandas.core.internals.concat.get_mgr_concatenation_plan(mgr,indexers)
pandas.core.internals.concat.is_uniform_join_units(join_units)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/internals/construction.py----------------------------------------
A:pandas.core.internals.construction.index->pandas.core.indexes.base.default_index(len(s))
A:pandas.core.internals.construction.arrays->Series(data, index=columns, dtype=object)
A:pandas.core.internals.construction.fdata->numpy.ma.getdata(data)
A:pandas.core.internals.construction.columns->pandas.core.indexes.base.default_index(len(content))
A:pandas.core.internals.construction.(arrays, arr_columns)->reorder_arrays(new_arrays, arr_columns, columns)
A:pandas.core.internals.construction.mask->numpy.ma.getmaskarray(data[col])
A:pandas.core.internals.construction.(arr, fv)->maybe_upcast(arr, fill_value=fv, copy=True)
A:pandas.core.internals.construction.mgr->mgr.copy().copy()
A:pandas.core.internals.construction.values->numpy.vstack(aligned_values)
A:pandas.core.internals.construction.(index, columns)->_get_axes(*values.shape, index=index, columns=columns)
A:pandas.core.internals.construction.dvals_list[n]->dvals_list[n].reshape(1, -1).reshape(1, -1)
A:pandas.core.internals.construction.datelike_vals->maybe_infer_to_datetimelike(values)
A:pandas.core.internals.construction.missing->Series(data, index=columns, dtype=object).isna()
A:pandas.core.internals.construction.val->sanitize_array(val, index, dtype=dtype, copy=False, raise_cast_failure=False)
A:pandas.core.internals.construction.keys->list(data.keys())
A:pandas.core.internals.construction.columnsdata_names->Index(keys)
A:pandas.core.internals.construction.arr->maybe_cast_to_datetime(arr, dtype)
A:pandas.core.internals.construction.oindex->pandas.core.indexes.base.default_index(len(s)).astype('O')
A:pandas.core.internals.construction.lengths->list(set(raw_lengths))
A:pandas.core.internals.construction.indexer->ensure_index(arr_columns).get_indexer(columns)
A:pandas.core.internals.construction.arr_columns->ensure_index([arr_columns[i] for i in indexer])
A:pandas.core.internals.construction.has_some_name->any((getattr(s, 'name', None) is not None for s in data))
A:pandas.core.internals.construction.n->getattr(s, 'name', None)
A:pandas.core.internals.construction.content->list(lib.dicts_to_array(data, list(columns)).T)
A:pandas.core.internals.construction.result->_convert_object_array(content, columns, dtype=dtype, coerce_float=coerce_float)
A:pandas.core.internals.construction.indexerindexer_cache[id(index)]->pandas.core.indexes.base.default_index(len(s)).get_indexer(columns)
A:pandas.core.internals.construction.data->sanitize_array(data, index, copy=copy)
pandas.core.internals.construction._convert_object_array(content,columns,coerce_float=False,dtype=None)
pandas.core.internals.construction._get_axes(N,K,index,columns)
pandas.core.internals.construction._homogenize(data,index,dtype=None)
pandas.core.internals.construction._list_of_dict_to_arrays(data,columns,coerce_float=False,dtype=None)
pandas.core.internals.construction._list_of_series_to_arrays(data,columns,coerce_float=False,dtype=None)
pandas.core.internals.construction._list_to_arrays(data,columns,coerce_float=False,dtype=None)
pandas.core.internals.construction.arrays_to_mgr(arrays,arr_names,index,columns,dtype=None)
pandas.core.internals.construction.extract_index(data)
pandas.core.internals.construction.get_names_from_index(data)
pandas.core.internals.construction.init_dict(data,index,columns,dtype=None)
pandas.core.internals.construction.init_ndarray(values,index,columns,dtype=None,copy=False)
pandas.core.internals.construction.masked_rec_array_to_mgr(data,index,columns,dtype,copy)
pandas.core.internals.construction.prep_ndarray(values,copy=True)->np.ndarray
pandas.core.internals.construction.reorder_arrays(arrays,arr_columns,columns)
pandas.core.internals.construction.sanitize_index(data,index,copy=False)
pandas.core.internals.construction.to_arrays(data,columns,coerce_float=False,dtype=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/window/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/window/indexers.py----------------------------------------
A:pandas.core.window.indexers.start_s->numpy.zeros(self.window_size, dtype='int64')
pandas.core.window.indexers.BaseIndexer(self,index_array:Optional[np.ndarray]=None,window_size:int=0,**kwargs)
pandas.core.window.indexers.BaseIndexer.__init__(self,index_array:Optional[np.ndarray]=None,window_size:int=0,**kwargs)
pandas.core.window.indexers.BaseIndexer.get_window_bounds(self,num_values:int=0,min_periods:Optional[int]=None,center:Optional[bool]=None,closed:Optional[str]=None)->Tuple[np.ndarray, np.ndarray]
pandas.core.window.indexers.ExpandingIndexer(BaseIndexer)
pandas.core.window.indexers.ExpandingIndexer.get_window_bounds(self,num_values:int=0,min_periods:Optional[int]=None,center:Optional[bool]=None,closed:Optional[str]=None)->Tuple[np.ndarray, np.ndarray]
pandas.core.window.indexers.FixedWindowIndexer(BaseIndexer)
pandas.core.window.indexers.FixedWindowIndexer.get_window_bounds(self,num_values:int=0,min_periods:Optional[int]=None,center:Optional[bool]=None,closed:Optional[str]=None)->Tuple[np.ndarray, np.ndarray]
pandas.core.window.indexers.VariableWindowIndexer(BaseIndexer)
pandas.core.window.indexers.VariableWindowIndexer.get_window_bounds(self,num_values:int=0,min_periods:Optional[int]=None,center:Optional[bool]=None,closed:Optional[str]=None)->Tuple[np.ndarray, np.ndarray]


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/window/expanding.py----------------------------------------
A:pandas.core.window.expanding.axis->self.obj._get_axis(self.axis)
A:pandas.core.window.expanding._agg_see_also_doc->dedent('\n    See Also\n    --------\n    DataFrame.expanding.aggregate\n    DataFrame.rolling.aggregate\n    DataFrame.aggregate\n    ')
A:pandas.core.window.expanding._agg_examples_doc->dedent("\n    Examples\n    --------\n\n    >>> df = pd.DataFrame(np.random.randn(10, 3), columns=['A', 'B', 'C'])\n    >>> df\n              A         B         C\n    0 -2.385977 -0.102758  0.438822\n    1 -1.004295  0.905829 -0.954544\n    2  0.735167 -0.165272 -1.619346\n    3 -0.702657 -1.340923 -0.706334\n    4 -0.246845  0.211596 -0.901819\n    5  2.463718  3.157577 -1.380906\n    6 -1.142255  2.340594 -0.039875\n    7  1.396598 -1.647453  1.677227\n    8 -0.543425  1.761277 -0.220481\n    9 -0.640505  0.289374 -1.550670\n\n    >>> df.ewm(alpha=0.5).mean()\n              A         B         C\n    0 -2.385977 -0.102758  0.438822\n    1 -1.464856  0.569633 -0.490089\n    2 -0.207700  0.149687 -1.135379\n    3 -0.471677 -0.645305 -0.906555\n    4 -0.355635 -0.203033 -0.904111\n    5  1.076417  1.503943 -1.146293\n    6 -0.041654  1.925562 -0.588728\n    7  0.680292  0.132049  0.548693\n    8  0.067236  0.948257  0.163353\n    9 -0.286980  0.618493 -0.694496\n    ")
A:pandas.core.window.expanding._agg_doc->dedent('\n    Examples\n    --------\n\n    The example below will show an expanding calculation with a window size of\n    four matching the equivalent function call using `scipy.stats`.\n\n    >>> arr = [1, 2, 3, 4, 999]\n    >>> import scipy.stats\n    >>> print(f"{scipy.stats.kurtosis(arr[:-1], bias=False):.6f}")\n    -1.200000\n    >>> print(f"{scipy.stats.kurtosis(arr, bias=False):.6f}")\n    4.999874\n    >>> s = pd.Series(arr)\n    >>> s.expanding(4).kurt()\n    0         NaN\n    1         NaN\n    2         NaN\n    3   -1.200000\n    4    4.999874\n    dtype: float64\n    ')
pandas.core.window.Expanding(self,obj,min_periods=1,center=False,axis=0,**kwargs)
pandas.core.window.Expanding._constructor(self)
pandas.core.window.Expanding._get_window(self,other=None,**kwargs)
pandas.core.window.Expanding.aggregate(self,func,*args,**kwargs)
pandas.core.window.Expanding.apply(self,func,raw=False,args=(),kwargs={})
pandas.core.window.Expanding.corr(self,other=None,pairwise=None,**kwargs)
pandas.core.window.Expanding.count(self,**kwargs)
pandas.core.window.Expanding.cov(self,other=None,pairwise=None,ddof=1,**kwargs)
pandas.core.window.Expanding.kurt(self,**kwargs)
pandas.core.window.Expanding.max(self,*args,**kwargs)
pandas.core.window.Expanding.mean(self,*args,**kwargs)
pandas.core.window.Expanding.median(self,**kwargs)
pandas.core.window.Expanding.min(self,*args,**kwargs)
pandas.core.window.Expanding.quantile(self,quantile,interpolation='linear',**kwargs)
pandas.core.window.Expanding.skew(self,**kwargs)
pandas.core.window.Expanding.std(self,ddof=1,*args,**kwargs)
pandas.core.window.Expanding.sum(self,*args,**kwargs)
pandas.core.window.Expanding.var(self,ddof=1,*args,**kwargs)
pandas.core.window.ExpandingGroupby(WindowGroupByMixin,Expanding)
pandas.core.window.ExpandingGroupby._constructor(self)
pandas.core.window.expanding.Expanding(self,obj,min_periods=1,center=False,axis=0,**kwargs)
pandas.core.window.expanding.Expanding.__init__(self,obj,min_periods=1,center=False,axis=0,**kwargs)
pandas.core.window.expanding.Expanding._constructor(self)
pandas.core.window.expanding.Expanding._get_window(self,other=None,**kwargs)
pandas.core.window.expanding.Expanding.aggregate(self,func,*args,**kwargs)
pandas.core.window.expanding.Expanding.apply(self,func,raw=False,args=(),kwargs={})
pandas.core.window.expanding.Expanding.corr(self,other=None,pairwise=None,**kwargs)
pandas.core.window.expanding.Expanding.count(self,**kwargs)
pandas.core.window.expanding.Expanding.cov(self,other=None,pairwise=None,ddof=1,**kwargs)
pandas.core.window.expanding.Expanding.kurt(self,**kwargs)
pandas.core.window.expanding.Expanding.max(self,*args,**kwargs)
pandas.core.window.expanding.Expanding.mean(self,*args,**kwargs)
pandas.core.window.expanding.Expanding.median(self,**kwargs)
pandas.core.window.expanding.Expanding.min(self,*args,**kwargs)
pandas.core.window.expanding.Expanding.quantile(self,quantile,interpolation='linear',**kwargs)
pandas.core.window.expanding.Expanding.skew(self,**kwargs)
pandas.core.window.expanding.Expanding.std(self,ddof=1,*args,**kwargs)
pandas.core.window.expanding.Expanding.sum(self,*args,**kwargs)
pandas.core.window.expanding.Expanding.var(self,ddof=1,*args,**kwargs)
pandas.core.window.expanding.ExpandingGroupby(WindowGroupByMixin,Expanding)
pandas.core.window.expanding.ExpandingGroupby._constructor(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/window/rolling.py----------------------------------------
A:pandas.core.window.rolling.get_window_bounds_signature->inspect.signature(window.get_window_bounds).parameters.keys()
A:pandas.core.window.rolling.expected_signature->inspect.signature(BaseIndexer().get_window_bounds).parameters.keys()
A:pandas.core.window.rolling.obj->obj.reindex(columns=obj.columns.difference([self.on]), copy=False).reindex(columns=obj.columns.difference([self.on]), copy=False)
A:pandas.core.window.rolling.blocks->obj.reindex(columns=obj.columns.difference([self.on]), copy=False).reindex(columns=obj.columns.difference([self.on]), copy=False)._to_dict_of_blocks(copy=False).values()
A:pandas.core.window.rolling.self->self._shallow_copy(subset)._shallow_copy(subset)
A:pandas.core.window.rolling.attrs->','.join(attrs_list)
A:pandas.core.window.rolling.values->Series(values, index=self.obj.index)
A:pandas.core.window.rolling.inf->numpy.isinf(values)
A:pandas.core.window.rolling.result->self._shallow_copy(subset)._shallow_copy(subset)._constructor(result, window=self._get_window(), min_periods=self.min_periods or 0, center=self.center, axis=self.axis, closed=self.closed).sum()
A:pandas.core.window.rolling.selection->ensure_index(self._selection)
A:pandas.core.window.rolling.indexer->columns.take(sorted(indexer)).get_indexer(selection.tolist() + [name])
A:pandas.core.window.rolling.columns->columns.take(sorted(indexer)).take(sorted(indexer))
A:pandas.core.window.rolling.offset->calculate_center_offset(window)
A:pandas.core.window.rolling.lead_indexer[self.axis]->slice(offset, None)
A:pandas.core.window.rolling.window_func->self._shallow_copy(subset)._shallow_copy(subset)._get_roll_func('roll_count')
A:pandas.core.window.rolling.win_type->self._shallow_copy(subset)._shallow_copy(subset)._get_win_type(kwargs)
A:pandas.core.window.rolling.window->self._shallow_copy(subset)._shallow_copy(subset)._get_window(other)
A:pandas.core.window.rolling.(blocks, obj)->self._shallow_copy(subset)._shallow_copy(subset)._create_blocks()
A:pandas.core.window.rolling.block_list->list(blocks)
A:pandas.core.window.rolling.window_indexer->self._shallow_copy(subset)._shallow_copy(subset)._get_window_indexer(window)
A:pandas.core.window.rolling.additional_nans->numpy.array([np.nan] * offset)
A:pandas.core.window.rolling.x->numpy.concatenate((x, additional_nans))
A:pandas.core.window.rolling.min_periods->calculate_min_periods(self.min_periods or 1, self.min_periods, len(x), require_min_periods, floor)
A:pandas.core.window.rolling.(start, end)->self._shallow_copy(subset)._shallow_copy(subset)._get_window_indexer(window).get_window_bounds(num_values=len(x), min_periods=self.min_periods, center=self.center, closed=self.closed)
A:pandas.core.window.rolling.(result, how)->self._shallow_copy(subset)._shallow_copy(subset)._aggregate(func, *args, **kwargs)
A:pandas.core.window.rolling._shared_docs['sum']->dedent('\n    Calculate %(name)s sum of given DataFrame or Series.\n\n    Parameters\n    ----------\n    *args, **kwargs\n        For compatibility with other %(name)s methods. Has no effect\n        on the computed value.\n\n    Returns\n    -------\n    Series or DataFrame\n        Same type as the input, with the same index, containing the\n        %(name)s sum.\n\n    See Also\n    --------\n    Series.sum : Reducing sum for Series.\n    DataFrame.sum : Reducing sum for DataFrame.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3, 4, 5])\n    >>> s\n    0    1\n    1    2\n    2    3\n    3    4\n    4    5\n    dtype: int64\n\n    >>> s.rolling(3).sum()\n    0     NaN\n    1     NaN\n    2     6.0\n    3     9.0\n    4    12.0\n    dtype: float64\n\n    >>> s.expanding(3).sum()\n    0     NaN\n    1     NaN\n    2     6.0\n    3    10.0\n    4    15.0\n    dtype: float64\n\n    >>> s.rolling(3, center=True).sum()\n    0     NaN\n    1     6.0\n    2     9.0\n    3    12.0\n    4     NaN\n    dtype: float64\n\n    For DataFrame, each %(name)s sum is computed column-wise.\n\n    >>> df = pd.DataFrame({"A": s, "B": s ** 2})\n    >>> df\n       A   B\n    0  1   1\n    1  2   4\n    2  3   9\n    3  4  16\n    4  5  25\n\n    >>> df.rolling(3).sum()\n          A     B\n    0   NaN   NaN\n    1   NaN   NaN\n    2   6.0  14.0\n    3   9.0  29.0\n    4  12.0  50.0\n    ')
A:pandas.core.window.rolling._shared_docs['mean']->dedent('\n    Calculate the %(name)s mean of the values.\n\n    Parameters\n    ----------\n    *args\n        Under Review.\n    **kwargs\n        Under Review.\n\n    Returns\n    -------\n    Series or DataFrame\n        Returned object type is determined by the caller of the %(name)s\n        calculation.\n\n    See Also\n    --------\n    Series.%(name)s : Calling object with Series data.\n    DataFrame.%(name)s : Calling object with DataFrames.\n    Series.mean : Equivalent method for Series.\n    DataFrame.mean : Equivalent method for DataFrame.\n\n    Examples\n    --------\n    The below examples will show rolling mean calculations with window sizes of\n    two and three, respectively.\n\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> s.rolling(2).mean()\n    0    NaN\n    1    1.5\n    2    2.5\n    3    3.5\n    dtype: float64\n\n    >>> s.rolling(3).mean()\n    0    NaN\n    1    NaN\n    2    2.0\n    3    3.0\n    dtype: float64\n    ')
A:pandas.core.window.rolling._shared_docs['var']->dedent('\n    Calculate unbiased %(name)s variance.\n    %(versionadded)s\n    Normalized by N-1 by default. This can be changed using the `ddof`\n    argument.\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Delta Degrees of Freedom.  The divisor used in calculations\n        is ``N - ddof``, where ``N`` represents the number of elements.\n    *args, **kwargs\n        For NumPy compatibility. No additional arguments are used.\n\n    Returns\n    -------\n    Series or DataFrame\n        Returns the same object type as the caller of the %(name)s calculation.\n\n    See Also\n    --------\n    Series.%(name)s : Calling object with Series data.\n    DataFrame.%(name)s : Calling object with DataFrames.\n    Series.var : Equivalent method for Series.\n    DataFrame.var : Equivalent method for DataFrame.\n    numpy.var : Equivalent method for Numpy array.\n\n    Notes\n    -----\n    The default `ddof` of 1 used in :meth:`Series.var` is different than the\n    default `ddof` of 0 in :func:`numpy.var`.\n\n    A minimum of 1 period is required for the rolling calculation.\n\n    Examples\n    --------\n    >>> s = pd.Series([5, 5, 6, 7, 5, 5, 5])\n    >>> s.rolling(3).var()\n    0         NaN\n    1         NaN\n    2    0.333333\n    3    1.000000\n    4    1.000000\n    5    1.333333\n    6    0.000000\n    dtype: float64\n\n    >>> s.expanding(3).var()\n    0         NaN\n    1         NaN\n    2    0.333333\n    3    0.916667\n    4    0.800000\n    5    0.700000\n    6    0.619048\n    dtype: float64\n    ')
A:pandas.core.window.rolling._shared_docs['std']->dedent('\n    Calculate %(name)s standard deviation.\n    %(versionadded)s\n    Normalized by N-1 by default. This can be changed using the `ddof`\n    argument.\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Delta Degrees of Freedom.  The divisor used in calculations\n        is ``N - ddof``, where ``N`` represents the number of elements.\n    *args, **kwargs\n        For NumPy compatibility. No additional arguments are used.\n\n    Returns\n    -------\n    Series or DataFrame\n        Returns the same object type as the caller of the %(name)s calculation.\n\n    See Also\n    --------\n    Series.%(name)s : Calling object with Series data.\n    DataFrame.%(name)s : Calling object with DataFrames.\n    Series.std : Equivalent method for Series.\n    DataFrame.std : Equivalent method for DataFrame.\n    numpy.std : Equivalent method for Numpy array.\n\n    Notes\n    -----\n    The default `ddof` of 1 used in Series.std is different than the default\n    `ddof` of 0 in numpy.std.\n\n    A minimum of one period is required for the rolling calculation.\n\n    Examples\n    --------\n    >>> s = pd.Series([5, 5, 6, 7, 5, 5, 5])\n    >>> s.rolling(3).std()\n    0         NaN\n    1         NaN\n    2    0.577350\n    3    1.000000\n    4    1.000000\n    5    1.154701\n    6    0.000000\n    dtype: float64\n\n    >>> s.expanding(3).std()\n    0         NaN\n    1         NaN\n    2    0.577350\n    3    0.957427\n    4    0.894427\n    5    0.836660\n    6    0.786796\n    dtype: float64\n    ')
A:pandas.core.window.rolling.win_args->_pop_args(win_type, arg_map[win_type], kwargs)
A:pandas.core.window.rolling._agg_see_also_doc->dedent('\n    See Also\n    --------\n    Series.rolling\n    DataFrame.rolling\n    ')
A:pandas.core.window.rolling._agg_examples_doc->dedent("\n    Examples\n    --------\n\n    >>> df = pd.DataFrame(np.random.randn(10, 3), columns=['A', 'B', 'C'])\n    >>> df\n              A         B         C\n    0 -2.385977 -0.102758  0.438822\n    1 -1.004295  0.905829 -0.954544\n    2  0.735167 -0.165272 -1.619346\n    3 -0.702657 -1.340923 -0.706334\n    4 -0.246845  0.211596 -0.901819\n    5  2.463718  3.157577 -1.380906\n    6 -1.142255  2.340594 -0.039875\n    7  1.396598 -1.647453  1.677227\n    8 -0.543425  1.761277 -0.220481\n    9 -0.640505  0.289374 -1.550670\n\n    >>> df.rolling(3).sum()\n              A         B         C\n    0       NaN       NaN       NaN\n    1       NaN       NaN       NaN\n    2 -2.655105  0.637799 -2.135068\n    3 -0.971785 -0.600366 -3.280224\n    4 -0.214334 -1.294599 -3.227500\n    5  1.514216  2.028250 -2.989060\n    6  1.074618  5.709767 -2.322600\n    7  2.718061  3.850718  0.256446\n    8 -0.289082  2.454418  1.416871\n    9  0.212668  0.403198 -0.093924\n\n    >>> df.rolling(3).agg({'A':'sum', 'B':'min'})\n              A         B\n    0       NaN       NaN\n    1       NaN       NaN\n    2 -2.655105 -0.165272\n    3 -0.971785 -1.340923\n    4 -0.214334 -1.340923\n    5  1.514216 -1.340923\n    6  1.074618  0.211596\n    7  2.718061 -1.647453\n    8 -0.289082 -1.647453\n    9  0.212668 -1.647453\n    ")
A:pandas.core.window.rolling._shared_docs['count']->dedent('\n    The %(name)s count of any non-NaN observations inside the window.\n\n    Returns\n    -------\n    Series or DataFrame\n        Returned object type is determined by the caller of the %(name)s\n        calculation.\n\n    See Also\n    --------\n    Series.%(name)s : Calling object with Series data.\n    DataFrame.%(name)s : Calling object with DataFrames.\n    DataFrame.count : Count of the full DataFrame.\n\n    Examples\n    --------\n    >>> s = pd.Series([2, 3, np.nan, 10])\n    >>> s.rolling(2).count()\n    0    1.0\n    1    2.0\n    2    1.0\n    3    1.0\n    dtype: float64\n    >>> s.rolling(3).count()\n    0    1.0\n    1    2.0\n    2    2.0\n    3    2.0\n    dtype: float64\n    >>> s.rolling(4).count()\n    0    1.0\n    1    2.0\n    2    2.0\n    3    3.0\n    dtype: float64\n    ')
A:pandas.core.window.rolling._shared_docs['apply']->dedent("\n    The %(name)s function's apply function.\n\n    Parameters\n    ----------\n    func : function\n        Must produce a single value from an ndarray input if ``raw=True``\n        or a single value from a Series if ``raw=False``. Can also accept a\n        Numba JIT function with ``engine='numba'`` specified.\n\n        .. versionchanged:: 1.0.0\n\n    raw : bool, default None\n        * ``False`` : passes each row or column as a Series to the\n          function.\n        * ``True`` : the passed function will receive ndarray\n          objects instead.\n          If you are just applying a NumPy reduction function this will\n          achieve much better performance.\n    engine : str, default 'cython'\n        * ``'cython'`` : Runs rolling apply through C-extensions from cython.\n        * ``'numba'`` : Runs rolling apply through JIT compiled code from numba.\n          Only available when ``raw`` is set to ``True``.\n\n          .. versionadded:: 1.0.0\n\n    engine_kwargs : dict, default None\n        * For ``'cython'`` engine, there are no accepted ``engine_kwargs``\n        * For ``'numba'`` engine, the engine can accept ``nopython``, ``nogil``\n          and ``parallel`` dictionary keys. The values must either be ``True`` or\n          ``False``. The default ``engine_kwargs`` for the ``'numba'`` engine is\n          ``{'nopython': True, 'nogil': False, 'parallel': False}`` and will be\n          applied to both the ``func`` and the ``apply`` rolling aggregation.\n\n          .. versionadded:: 1.0.0\n\n    args : tuple, default None\n        Positional arguments to be passed into func.\n    kwargs : dict, default None\n        Keyword arguments to be passed into func.\n\n    Returns\n    -------\n    Series or DataFrame\n        Return type is determined by the caller.\n\n    See Also\n    --------\n    Series.%(name)s : Series %(name)s.\n    DataFrame.%(name)s : DataFrame %(name)s.\n\n    Notes\n    -----\n    See :ref:`stats.rolling_apply` for extended documentation and performance\n    considerations for the Numba engine.\n    ")
A:pandas.core.window.rolling.apply_func->generate_numba_apply_func(args, kwargs, func, engine_kwargs)
A:pandas.core.window.rolling._shared_docs['max']->dedent('\n    Calculate the %(name)s maximum.\n\n    Parameters\n    ----------\n    *args, **kwargs\n        Arguments and keyword arguments to be passed into func.\n    ')
A:pandas.core.window.rolling._shared_docs['min']->dedent('\n    Calculate the %(name)s minimum.\n\n    Parameters\n    ----------\n    **kwargs\n        Under Review.\n\n    Returns\n    -------\n    Series or DataFrame\n        Returned object type is determined by the caller of the %(name)s\n        calculation.\n\n    See Also\n    --------\n    Series.%(name)s : Calling object with a Series.\n    DataFrame.%(name)s : Calling object with a DataFrame.\n    Series.min : Similar method for Series.\n    DataFrame.min : Similar method for DataFrame.\n\n    Examples\n    --------\n    Performing a rolling minimum with a window size of 3.\n\n    >>> s = pd.Series([4, 3, 5, 2, 6])\n    >>> s.rolling(3).min()\n    0    NaN\n    1    NaN\n    2    3.0\n    3    2.0\n    4    2.0\n    dtype: float64\n    ')
A:pandas.core.window.rolling._shared_docs['median']->dedent('\n    Calculate the %(name)s median.\n\n    Parameters\n    ----------\n    **kwargs\n        For compatibility with other %(name)s methods. Has no effect\n        on the computed median.\n\n    Returns\n    -------\n    Series or DataFrame\n        Returned type is the same as the original object.\n\n    See Also\n    --------\n    Series.%(name)s : Calling object with Series data.\n    DataFrame.%(name)s : Calling object with DataFrames.\n    Series.median : Equivalent method for Series.\n    DataFrame.median : Equivalent method for DataFrame.\n\n    Examples\n    --------\n    Compute the rolling median of a series with a window size of 3.\n\n    >>> s = pd.Series([0, 1, 2, 3, 4])\n    >>> s.rolling(3).median()\n    0    NaN\n    1    NaN\n    2    1.0\n    3    2.0\n    4    3.0\n    dtype: float64\n    ')
A:pandas.core.window.rolling._shared_docs['kurt']->dedent("\n    Calculate unbiased %(name)s kurtosis.\n\n    This function uses Fisher's definition of kurtosis without bias.\n\n    Parameters\n    ----------\n    **kwargs\n        Under Review.\n\n    Returns\n    -------\n    Series or DataFrame\n        Returned object type is determined by the caller of the %(name)s\n        calculation.\n\n    See Also\n    --------\n    Series.%(name)s : Calling object with Series data.\n    DataFrame.%(name)s : Calling object with DataFrames.\n    Series.kurt : Equivalent method for Series.\n    DataFrame.kurt : Equivalent method for DataFrame.\n    scipy.stats.skew : Third moment of a probability density.\n    scipy.stats.kurtosis : Reference SciPy method.\n\n    Notes\n    -----\n    A minimum of 4 periods is required for the %(name)s calculation.\n    ")
A:pandas.core.window.rolling._shared_docs['quantile']->dedent("\n    Calculate the %(name)s quantile.\n\n    Parameters\n    ----------\n    quantile : float\n        Quantile to compute. 0 <= quantile <= 1.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        .. versionadded:: 0.23.0\n\n        This optional parameter specifies the interpolation method to use,\n        when the desired quantile lies between two data points `i` and `j`:\n\n            * linear: `i + (j - i) * fraction`, where `fraction` is the\n              fractional part of the index surrounded by `i` and `j`.\n            * lower: `i`.\n            * higher: `j`.\n            * nearest: `i` or `j` whichever is nearest.\n            * midpoint: (`i` + `j`) / 2.\n    **kwargs\n        For compatibility with other %(name)s methods. Has no effect on\n        the result.\n\n    Returns\n    -------\n    Series or DataFrame\n        Returned object type is determined by the caller of the %(name)s\n        calculation.\n\n    See Also\n    --------\n    Series.quantile : Computes value at the given quantile over all data\n        in Series.\n    DataFrame.quantile : Computes values at the given quantile over\n        requested axis in DataFrame.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> s.rolling(2).quantile(.4, interpolation='lower')\n    0    NaN\n    1    1.0\n    2    2.0\n    3    3.0\n    dtype: float64\n\n    >>> s.rolling(2).quantile(.4, interpolation='midpoint')\n    0    NaN\n    1    1.5\n    2    2.5\n    3    3.5\n    dtype: float64\n    ")
A:pandas.core.window.rolling.other->self._shallow_copy(subset)._shallow_copy(subset)._shallow_copy(other)
A:pandas.core.window.rolling.X->X.astype('float64').astype('float64')
A:pandas.core.window.rolling.Y->Y.astype('float64').astype('float64')
A:pandas.core.window.rolling.count->(X + Y).rolling(window=window, min_periods=0, center=self.center).count(**kwargs)
A:pandas.core.window.rolling._shared_docs['corr']->dedent('\n    Calculate %(name)s correlation.\n\n    Parameters\n    ----------\n    other : Series, DataFrame, or ndarray, optional\n        If not supplied then will default to self.\n    pairwise : bool, default None\n        Calculate pairwise combinations of columns within a\n        DataFrame. If `other` is not specified, defaults to `True`,\n        otherwise defaults to `False`.\n        Not relevant for :class:`~pandas.Series`.\n    **kwargs\n        Unused.\n\n    Returns\n    -------\n    Series or DataFrame\n        Returned object type is determined by the caller of the\n        %(name)s calculation.\n\n    See Also\n    --------\n    Series.%(name)s : Calling object with Series data.\n    DataFrame.%(name)s : Calling object with DataFrames.\n    Series.corr : Equivalent method for Series.\n    DataFrame.corr : Equivalent method for DataFrame.\n    %(name)s.cov : Similar method to calculate covariance.\n    numpy.corrcoef : NumPy Pearson\'s correlation calculation.\n\n    Notes\n    -----\n    This function uses Pearson\'s definition of correlation\n    (https://en.wikipedia.org/wiki/Pearson_correlation_coefficient).\n\n    When `other` is not specified, the output will be self correlation (e.g.\n    all 1\'s), except for :class:`~pandas.DataFrame` inputs with `pairwise`\n    set to `True`.\n\n    Function will return ``NaN`` for correlations of equal valued sequences;\n    this is the result of a 0/0 division error.\n\n    When `pairwise` is set to `False`, only matching columns between `self` and\n    `other` will be used.\n\n    When `pairwise` is set to `True`, the output will be a MultiIndex DataFrame\n    with the original index on the first level, and the `other` DataFrame\n    columns on the second level.\n\n    In the case of missing elements, only complete pairwise observations\n    will be used.\n\n    Examples\n    --------\n    The below example shows a rolling calculation with a window size of\n    four matching the equivalent function call using :meth:`numpy.corrcoef`.\n\n    >>> v1 = [3, 3, 3, 5, 8]\n    >>> v2 = [3, 4, 4, 4, 8]\n    >>> # numpy returns a 2X2 array, the correlation coefficient\n    >>> # is the number at entry [0][1]\n    >>> print(f"{np.corrcoef(v1[:-1], v2[:-1])[0][1]:.6f}")\n    0.333333\n    >>> print(f"{np.corrcoef(v1[1:], v2[1:])[0][1]:.6f}")\n    0.916949\n    >>> s1 = pd.Series(v1)\n    >>> s2 = pd.Series(v2)\n    >>> s1.rolling(4).corr(s2)\n    0         NaN\n    1         NaN\n    2         NaN\n    3    0.333333\n    4    0.916949\n    dtype: float64\n\n    The below example shows a similar rolling calculation on a\n    DataFrame using the pairwise option.\n\n    >>> matrix = np.array([[51., 35.], [49., 30.], [47., 32.],    [46., 31.], [50., 36.]])\n    >>> print(np.corrcoef(matrix[:-1,0], matrix[:-1,1]).round(7))\n    [[1.         0.6263001]\n     [0.6263001  1.       ]]\n    >>> print(np.corrcoef(matrix[1:,0], matrix[1:,1]).round(7))\n    [[1.         0.5553681]\n     [0.5553681  1.        ]]\n    >>> df = pd.DataFrame(matrix, columns=[\'X\',\'Y\'])\n    >>> df\n          X     Y\n    0  51.0  35.0\n    1  49.0  30.0\n    2  47.0  32.0\n    3  46.0  31.0\n    4  50.0  36.0\n    >>> df.rolling(4).corr(pairwise=True)\n                X         Y\n    0 X       NaN       NaN\n      Y       NaN       NaN\n    1 X       NaN       NaN\n      Y       NaN       NaN\n    2 X       NaN       NaN\n      Y       NaN       NaN\n    3 X  1.000000  0.626300\n      Y  0.626300  1.000000\n    4 X  1.000000  0.555368\n      Y  0.555368  1.000000\n    ')
A:pandas.core.window.rolling.a->a.rolling(window=window, min_periods=self.min_periods, center=self.center).rolling(window=window, min_periods=self.min_periods, center=self.center)
A:pandas.core.window.rolling.b->b.rolling(window=window, min_periods=self.min_periods, center=self.center).rolling(window=window, min_periods=self.min_periods, center=self.center)
A:pandas.core.window.rolling.freq->self._shallow_copy(subset)._shallow_copy(subset)._validate_freq()
A:pandas.core.window.rolling._agg_doc->dedent('\n    Examples\n    --------\n\n    The example below will show a rolling calculation with a window size of\n    four matching the equivalent function call using `scipy.stats`.\n\n    >>> arr = [1, 2, 3, 4, 999]\n    >>> import scipy.stats\n    >>> print(f"{scipy.stats.kurtosis(arr[:-1], bias=False):.6f}")\n    -1.200000\n    >>> print(f"{scipy.stats.kurtosis(arr[1:], bias=False):.6f}")\n    3.999946\n    >>> s = pd.Series(arr)\n    >>> s.rolling(4).kurt()\n    0         NaN\n    1         NaN\n    2         NaN\n    3   -1.200000\n    4    3.999946\n    dtype: float64\n    ')
A:pandas.core.window.rolling.self._groupby.obj->self._shallow_copy(subset)._shallow_copy(subset)._groupby.obj.set_index(self._on)
pandas.core.window.Rolling(_Rolling_and_Expanding)
pandas.core.window.Rolling._on(self)->Index
pandas.core.window.Rolling._validate_freq(self)
pandas.core.window.Rolling._validate_monotonic(self)
pandas.core.window.Rolling.aggregate(self,func,*args,**kwargs)
pandas.core.window.Rolling.apply(self,func,raw=False,engine='cython',engine_kwargs=None,args=None,kwargs=None)
pandas.core.window.Rolling.corr(self,other=None,pairwise=None,**kwargs)
pandas.core.window.Rolling.count(self)
pandas.core.window.Rolling.cov(self,other=None,pairwise=None,ddof=1,**kwargs)
pandas.core.window.Rolling.is_dtlike(self)->bool
pandas.core.window.Rolling.kurt(self,**kwargs)
pandas.core.window.Rolling.max(self,*args,**kwargs)
pandas.core.window.Rolling.mean(self,*args,**kwargs)
pandas.core.window.Rolling.median(self,**kwargs)
pandas.core.window.Rolling.min(self,*args,**kwargs)
pandas.core.window.Rolling.quantile(self,quantile,interpolation='linear',**kwargs)
pandas.core.window.Rolling.skew(self,**kwargs)
pandas.core.window.Rolling.std(self,ddof=1,*args,**kwargs)
pandas.core.window.Rolling.sum(self,*args,**kwargs)
pandas.core.window.Rolling.validate(self)
pandas.core.window.Rolling.var(self,ddof=1,*args,**kwargs)
pandas.core.window.RollingGroupby(WindowGroupByMixin,Rolling)
pandas.core.window.RollingGroupby._constructor(self)
pandas.core.window.RollingGroupby._gotitem(self,key,ndim,subset=None)
pandas.core.window.RollingGroupby._validate_monotonic(self)
pandas.core.window.Window(_Window)
pandas.core.window.Window._get_win_type(self,kwargs:Dict)->Union[str, Tuple]
pandas.core.window.Window._get_window(self,other=None,win_type:Optional[Union[str,Tuple]]=None)->np.ndarray
pandas.core.window.Window.aggregate(self,func,*args,**kwargs)
pandas.core.window.Window.mean(self,*args,**kwargs)
pandas.core.window.Window.std(self,ddof=1,*args,**kwargs)
pandas.core.window.Window.sum(self,*args,**kwargs)
pandas.core.window.Window.validate(self)
pandas.core.window.Window.var(self,ddof=1,*args,**kwargs)
pandas.core.window.rolling.Rolling(_Rolling_and_Expanding)
pandas.core.window.rolling.Rolling._on(self)->Index
pandas.core.window.rolling.Rolling._validate_freq(self)
pandas.core.window.rolling.Rolling._validate_monotonic(self)
pandas.core.window.rolling.Rolling.aggregate(self,func,*args,**kwargs)
pandas.core.window.rolling.Rolling.apply(self,func,raw=False,engine='cython',engine_kwargs=None,args=None,kwargs=None)
pandas.core.window.rolling.Rolling.corr(self,other=None,pairwise=None,**kwargs)
pandas.core.window.rolling.Rolling.count(self)
pandas.core.window.rolling.Rolling.cov(self,other=None,pairwise=None,ddof=1,**kwargs)
pandas.core.window.rolling.Rolling.is_datetimelike(self)->bool
pandas.core.window.rolling.Rolling.kurt(self,**kwargs)
pandas.core.window.rolling.Rolling.max(self,*args,**kwargs)
pandas.core.window.rolling.Rolling.mean(self,*args,**kwargs)
pandas.core.window.rolling.Rolling.median(self,**kwargs)
pandas.core.window.rolling.Rolling.min(self,*args,**kwargs)
pandas.core.window.rolling.Rolling.quantile(self,quantile,interpolation='linear',**kwargs)
pandas.core.window.rolling.Rolling.skew(self,**kwargs)
pandas.core.window.rolling.Rolling.std(self,ddof=1,*args,**kwargs)
pandas.core.window.rolling.Rolling.sum(self,*args,**kwargs)
pandas.core.window.rolling.Rolling.validate(self)
pandas.core.window.rolling.Rolling.var(self,ddof=1,*args,**kwargs)
pandas.core.window.rolling.RollingGroupby(WindowGroupByMixin,Rolling)
pandas.core.window.rolling.RollingGroupby._constructor(self)
pandas.core.window.rolling.RollingGroupby._gotitem(self,key,ndim,subset=None)
pandas.core.window.rolling.RollingGroupby._validate_monotonic(self)
pandas.core.window.rolling.Window(_Window)
pandas.core.window.rolling.Window._get_win_type(self,kwargs:Dict)->Union[str, Tuple]
pandas.core.window.rolling.Window._get_window(self,other=None,win_type:Optional[Union[str,Tuple]]=None)->np.ndarray
pandas.core.window.rolling.Window.aggregate(self,func,*args,**kwargs)
pandas.core.window.rolling.Window.mean(self,*args,**kwargs)
pandas.core.window.rolling.Window.std(self,ddof=1,*args,**kwargs)
pandas.core.window.rolling.Window.sum(self,*args,**kwargs)
pandas.core.window.rolling.Window.validate(self)
pandas.core.window.rolling.Window.var(self,ddof=1,*args,**kwargs)
pandas.core.window.rolling._Rolling(_Window)
pandas.core.window.rolling._Rolling._constructor(self)
pandas.core.window.rolling._Rolling_and_Expanding(_Rolling)
pandas.core.window.rolling._Rolling_and_Expanding._generate_cython_apply_func(self,args,kwargs,raw,offset,func)
pandas.core.window.rolling._Rolling_and_Expanding.apply(self,func,raw:bool=False,engine:str='cython',engine_kwargs:Optional[Dict]=None,args:Optional[Tuple]=None,kwargs:Optional[Dict]=None)
pandas.core.window.rolling._Rolling_and_Expanding.corr(self,other=None,pairwise=None,**kwargs)
pandas.core.window.rolling._Rolling_and_Expanding.count(self)
pandas.core.window.rolling._Rolling_and_Expanding.cov(self,other=None,pairwise=None,ddof=1,**kwargs)
pandas.core.window.rolling._Rolling_and_Expanding.kurt(self,**kwargs)
pandas.core.window.rolling._Rolling_and_Expanding.max(self,*args,**kwargs)
pandas.core.window.rolling._Rolling_and_Expanding.mean(self,*args,**kwargs)
pandas.core.window.rolling._Rolling_and_Expanding.median(self,**kwargs)
pandas.core.window.rolling._Rolling_and_Expanding.min(self,*args,**kwargs)
pandas.core.window.rolling._Rolling_and_Expanding.quantile(self,quantile,interpolation='linear',**kwargs)
pandas.core.window.rolling._Rolling_and_Expanding.skew(self,**kwargs)
pandas.core.window.rolling._Rolling_and_Expanding.std(self,ddof=1,*args,**kwargs)
pandas.core.window.rolling._Rolling_and_Expanding.sum(self,*args,**kwargs)
pandas.core.window.rolling._Rolling_and_Expanding.var(self,ddof=1,*args,**kwargs)
pandas.core.window.rolling._Window(self,obj,window=None,min_periods:Optional[int]=None,center:Optional[bool]=False,win_type:Optional[str]=None,axis:Axis=0,on:Optional[Union[str,Index]]=None,closed:Optional[str]=None,**kwargs)
pandas.core.window.rolling._Window.__getattr__(self,attr:str)
pandas.core.window.rolling._Window.__init__(self,obj,window=None,min_periods:Optional[int]=None,center:Optional[bool]=False,win_type:Optional[str]=None,axis:Axis=0,on:Optional[Union[str,Index]]=None,closed:Optional[str]=None,**kwargs)
pandas.core.window.rolling._Window.__iter__(self)
pandas.core.window.rolling._Window.__repr__(self)->str
pandas.core.window.rolling._Window._apply(self,func:Callable,center:bool,require_min_periods:int=0,floor:int=1,is_weighted:bool=False,name:Optional[str]=None,use_numba_cache:bool=False,**kwargs)
pandas.core.window.rolling._Window._center_window(self,result,window)->np.ndarray
pandas.core.window.rolling._Window._constructor(self)
pandas.core.window.rolling._Window._create_blocks(self)
pandas.core.window.rolling._Window._dir_additions(self)
pandas.core.window.rolling._Window._get_cython_func_type(self,func:str)->Callable
pandas.core.window.rolling._Window._get_roll_func(self,func_name:str)->Callable
pandas.core.window.rolling._Window._get_win_type(self,kwargs:Dict)
pandas.core.window.rolling._Window._get_window(self,other=None,win_type:Optional[str]=None)->int
pandas.core.window.rolling._Window._get_window_indexer(self,window:int)->BaseIndexer
pandas.core.window.rolling._Window._gotitem(self,key,ndim,subset=None)
pandas.core.window.rolling._Window._on(self)
pandas.core.window.rolling._Window._prep_values(self,values:Optional[np.ndarray]=None)->np.ndarray
pandas.core.window.rolling._Window._validate_get_window_bounds_signature(window:BaseIndexer)->None
pandas.core.window.rolling._Window._window_type(self)->str
pandas.core.window.rolling._Window._wrap_result(self,result,block=None,obj=None)
pandas.core.window.rolling._Window._wrap_results(self,results,blocks,obj,exclude=None)->FrameOrSeries
pandas.core.window.rolling._Window.aggregate(self,func,*args,**kwargs)
pandas.core.window.rolling._Window.is_datetimelike(self)->Optional[bool]
pandas.core.window.rolling._Window.is_dtlike(self)->Optional[bool]
pandas.core.window.rolling._Window.is_freq_type(self)->bool
pandas.core.window.rolling._Window.validate(self)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/window/ewm.py----------------------------------------
A:pandas.core.window.ewm.self.com->_get_center_of_mass(com, span, halflife, alpha)
A:pandas.core.window.ewm._agg_see_also_doc->dedent('\n    See Also\n    --------\n    pandas.DataFrame.rolling.aggregate\n    ')
A:pandas.core.window.ewm._agg_examples_doc->dedent("\n    Examples\n    --------\n\n    >>> df = pd.DataFrame(np.random.randn(10, 3), columns=['A', 'B', 'C'])\n    >>> df\n              A         B         C\n    0 -2.385977 -0.102758  0.438822\n    1 -1.004295  0.905829 -0.954544\n    2  0.735167 -0.165272 -1.619346\n    3 -0.702657 -1.340923 -0.706334\n    4 -0.246845  0.211596 -0.901819\n    5  2.463718  3.157577 -1.380906\n    6 -1.142255  2.340594 -0.039875\n    7  1.396598 -1.647453  1.677227\n    8 -0.543425  1.761277 -0.220481\n    9 -0.640505  0.289374 -1.550670\n\n    >>> df.ewm(alpha=0.5).mean()\n              A         B         C\n    0 -2.385977 -0.102758  0.438822\n    1 -1.464856  0.569633 -0.490089\n    2 -0.207700  0.149687 -1.135379\n    3 -0.471677 -0.645305 -0.906555\n    4 -0.355635 -0.203033 -0.904111\n    5  1.076417  1.503943 -1.146293\n    6 -0.041654  1.925562 -0.588728\n    7  0.680292  0.132049  0.548693\n    8  0.067236  0.948257  0.163353\n    9 -0.286980  0.618493 -0.694496\n    ")
A:pandas.core.window.ewm.(blocks, obj)->self._create_blocks()
A:pandas.core.window.ewm.block_list->list(blocks)
A:pandas.core.window.ewm.values->self._prep_values(b.values)
A:pandas.core.window.ewm.cfunc->getattr(window_aggregations, func, None)
A:pandas.core.window.ewm.other->self._shallow_copy(other)
A:pandas.core.window.ewm.X->self._shallow_copy(X)
A:pandas.core.window.ewm.Y->self._shallow_copy(Y)
A:pandas.core.window.ewm.cov->_cov(x_values, y_values)
A:pandas.core.window.ewm.x_values->self._shallow_copy(X)._prep_values()
A:pandas.core.window.ewm.y_values->self._shallow_copy(Y)._prep_values()
A:pandas.core.window.ewm.x_var->_cov(x_values, x_values)
A:pandas.core.window.ewm.y_var->_cov(y_values, y_values)
pandas.core.window.EWM(self,obj,com=None,span=None,halflife=None,alpha=None,min_periods=0,adjust=True,ignore_na=False,axis=0)
pandas.core.window.EWM._apply(self,func,**kwargs)
pandas.core.window.EWM._constructor(self)
pandas.core.window.EWM.aggregate(self,func,*args,**kwargs)
pandas.core.window.EWM.corr(self,other=None,pairwise=None,**kwargs)
pandas.core.window.EWM.cov(self,other=None,pairwise=None,bias=False,**kwargs)
pandas.core.window.EWM.mean(self,*args,**kwargs)
pandas.core.window.EWM.std(self,bias=False,*args,**kwargs)
pandas.core.window.EWM.var(self,bias=False,*args,**kwargs)
pandas.core.window.ewm.EWM(self,obj,com=None,span=None,halflife=None,alpha=None,min_periods=0,adjust=True,ignore_na=False,axis=0)
pandas.core.window.ewm.EWM.__init__(self,obj,com=None,span=None,halflife=None,alpha=None,min_periods=0,adjust=True,ignore_na=False,axis=0)
pandas.core.window.ewm.EWM._apply(self,func,**kwargs)
pandas.core.window.ewm.EWM._constructor(self)
pandas.core.window.ewm.EWM.aggregate(self,func,*args,**kwargs)
pandas.core.window.ewm.EWM.corr(self,other=None,pairwise=None,**kwargs)
pandas.core.window.ewm.EWM.cov(self,other=None,pairwise=None,bias=False,**kwargs)
pandas.core.window.ewm.EWM.mean(self,*args,**kwargs)
pandas.core.window.ewm.EWM.std(self,bias=False,*args,**kwargs)
pandas.core.window.ewm.EWM.var(self,bias=False,*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/window/common.py----------------------------------------
A:pandas.core.window.common._shared_docs->dict(**_shared_docs)
A:pandas.core.window.common.x->self._shallow_copy(x)
A:pandas.core.window.common.groupby->kwargs.pop('groupby', None)
A:pandas.core.window.common.count->_dispatch('count')
A:pandas.core.window.common.corr->_dispatch('corr', other=None, pairwise=None)
A:pandas.core.window.common.cov->_dispatch('cov', other=None, pairwise=None)
A:pandas.core.window.common.(X, Y)->arg1.align(arg2, join='outer')
A:pandas.core.window.common.result->numpy.sqrt(x)
A:pandas.core.window.common.results[i]->f(arg1.iloc[:, i], arg2.iloc[:, i])
A:pandas.core.window.common.res_columns->arg1.columns.union(arg2.columns)
A:pandas.core.window.common.results[col]->f(X[col], Y[col])
A:pandas.core.window.common.results->defaultdict(dict)
A:pandas.core.window.common.results[i][j]->f(*prep_binary(arg1.iloc[:, i], arg2.iloc[:, j]))
A:pandas.core.window.common.result_index->arg1.index.union(arg2.index)
A:pandas.core.window.common.result.index->numpy.sqrt(x).index.set_names(result_index.names + arg2.columns.names)
A:pandas.core.window.common.result.columns->numpy.sqrt(x).columns.set_names(arg1.columns.names)
A:pandas.core.window.common.valid_count->pandas.core.common.count_not_none(comass, span, halflife, alpha)
A:pandas.core.window.common.window->len(window)
A:pandas.core.window.common.min_periods->len(window)
pandas.core.window.common.WindowGroupByMixin(self,obj,*args,**kwargs)
pandas.core.window.common.WindowGroupByMixin.__init__(self,obj,*args,**kwargs)
pandas.core.window.common.WindowGroupByMixin._apply(self,func:Callable,center:bool,require_min_periods:int=0,floor:int=1,is_weighted:bool=False,name:Optional[str]=None,use_numba_cache:bool=False,**kwargs)
pandas.core.window.common._dispatch(name:str,*args,**kwargs)
pandas.core.window.common._flex_binary_moment(arg1,arg2,f,pairwise=False)
pandas.core.window.common._get_center_of_mass(comass,span,halflife,alpha)
pandas.core.window.common.calculate_center_offset(window)
pandas.core.window.common.calculate_min_periods(window:int,min_periods:Optional[int],num_values:int,required_min_periods:int,floor:int)->int
pandas.core.window.common.get_weighted_roll_func(cfunc:Callable)->Callable
pandas.core.window.common.prep_binary(arg1,arg2)
pandas.core.window.common.zsqrt(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/window/numba_.py----------------------------------------
A:pandas.core.window.numba_.numba->import_optional_dependency('numba')
A:pandas.core.window.numba_.is_jitted->isinstance(func, numba.targets.registry.CPUDispatcher)
A:pandas.core.window.numba_.jf->import_optional_dependency('numba').jit(func, nopython=nopython, nogil=nogil)
A:pandas.core.window.numba_.result->numpy.empty(len(begin))
A:pandas.core.window.numba_.count_nan->numpy.sum(np.isnan(window))
A:pandas.core.window.numba_.result[i]->numba_func(window, *args)
A:pandas.core.window.numba_.nopython->engine_kwargs.get('nopython', True)
A:pandas.core.window.numba_.nogil->engine_kwargs.get('nogil', False)
A:pandas.core.window.numba_.parallel->engine_kwargs.get('parallel', False)
pandas.core.window.numba_.generate_numba_apply_func(args:Tuple,kwargs:Dict[str,Any],func:Callable[...,Scalar],engine_kwargs:Optional[Dict[str,bool]])
pandas.core.window.numba_.make_rolling_apply(func:Callable[...,Scalar],args:Tuple,nogil:bool,parallel:bool,nopython:bool)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/util/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/core/util/hashing.py----------------------------------------
A:pandas.core.util.hashing.first->next(arrays)
A:pandas.core.util.hashing.arrays->itertools.chain([h], index_iter)
A:pandas.core.util.hashing.mult->numpy.uint64(1000003)
A:pandas.core.util.hashing.h->_combine_hash_arrays(hashes, len(vals))
A:pandas.core.util.hashing.num_items->len(obj.columns)
A:pandas.core.util.hashing._hashes->itertools.chain(hashes, index_hash_generator)
A:pandas.core.util.hashing.vals->numpy.array([val], dtype=dtype)
A:pandas.core.util.hashing.values->numpy.asarray(c.categories.values)
A:pandas.core.util.hashing.hashed->hash_array(values, encoding, hash_key, categorize=False)
A:pandas.core.util.hashing.mask->c.isna()
A:pandas.core.util.hashing.result->numpy.zeros(len(mask), dtype='uint64')
A:pandas.core.util.hashing.(vals, _)->numpy.array([val], dtype=dtype)._values_for_factorize()
A:pandas.core.util.hashing.(codes, categories)->factorize(vals, sort=False)
A:pandas.core.util.hashing.cat->Categorical(codes, Index(categories), ordered=False, fastpath=True)
A:pandas.core.util.hashing.val->val.tz_convert(None).tz_convert(None)
A:pandas.core.util.hashing.(dtype, val)->infer_dtype_from_scalar(val)
pandas.core.util.hashing._combine_hash_arrays(arrays,num_items:int)
pandas.core.util.hashing._hash_categorical(c,encoding:str,hash_key:str)
pandas.core.util.hashing._hash_scalar(val,encoding:str='utf8',hash_key:str=_default_hash_key)->np.ndarray
pandas.core.util.hashing.hash_array(vals,encoding:str='utf8',hash_key:str=_default_hash_key,categorize:bool=True)
pandas.core.util.hashing.hash_pandas_object(obj,index:bool=True,encoding:str='utf8',hash_key:Optional[str]=_default_hash_key,categorize:bool=True)
pandas.core.util.hashing.hash_tuple(val,encoding:str='utf8',hash_key:str=_default_hash_key)
pandas.core.util.hashing.hash_tuples(vals,encoding='utf8',hash_key:str=_default_hash_key)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/plotting/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/plotting/_misc.py----------------------------------------
A:pandas.plotting._misc.plot_backend->_get_plot_backend('matplotlib')
A:pandas.plotting._misc.key->self._get_canonical_key(key)
A:pandas.plotting._misc.plot_params->_Options()
pandas.plotting._misc._Options(self,deprecated=False)
pandas.plotting._misc._Options.__contains__(self,key)->bool
pandas.plotting._misc._Options.__delitem__(self,key)
pandas.plotting._misc._Options.__getitem__(self,key)
pandas.plotting._misc._Options.__init__(self,deprecated=False)
pandas.plotting._misc._Options.__setitem__(self,key,value)
pandas.plotting._misc._Options._get_canonical_key(self,key)
pandas.plotting._misc._Options.reset(self)
pandas.plotting._misc._Options.use(self,key,value)
pandas.plotting._misc.andrews_curves(frame,class_column,ax=None,samples=200,color=None,colormap=None,**kwargs)
pandas.plotting._misc.autocorrelation_plot(series,ax=None,**kwargs)
pandas.plotting._misc.bootstrap_plot(series,fig=None,size=50,samples=500,**kwds)
pandas.plotting._misc.deregister()
pandas.plotting._misc.lag_plot(series,lag=1,ax=None,**kwds)
pandas.plotting._misc.parallel_coordinates(frame,class_column,cols=None,ax=None,color=None,use_columns=False,xticks=None,colormap=None,axvlines=True,axvlines_kwds=None,sort_labels=False,**kwargs)
pandas.plotting._misc.radviz(frame,class_column,ax=None,color=None,colormap=None,**kwds)
pandas.plotting._misc.register()
pandas.plotting._misc.scatter_matrix(frame,alpha=0.5,figsize=None,ax=None,grid=False,diagonal='hist',marker='.',density_kwds=None,hist_kwds=None,range_padding=0.05,**kwargs)
pandas.plotting._misc.table(ax,data,rowLabels=None,colLabels=None,**kwargs)
pandas.plotting.andrews_curves(frame,class_column,ax=None,samples=200,color=None,colormap=None,**kwargs)
pandas.plotting.autocorrelation_plot(series,ax=None,**kwargs)
pandas.plotting.bootstrap_plot(series,fig=None,size=50,samples=500,**kwds)
pandas.plotting.deregister_matplotlib_converters()
pandas.plotting.lag_plot(series,lag=1,ax=None,**kwds)
pandas.plotting.parallel_coordinates(frame,class_column,cols=None,ax=None,color=None,use_columns=False,xticks=None,colormap=None,axvlines=True,axvlines_kwds=None,sort_labels=False,**kwargs)
pandas.plotting.radviz(frame,class_column,ax=None,color=None,colormap=None,**kwds)
pandas.plotting.register_matplotlib_converters()
pandas.plotting.scatter_matrix(frame,alpha=0.5,figsize=None,ax=None,grid=False,diagonal='hist',marker='.',density_kwds=None,hist_kwds=None,range_padding=0.05,**kwargs)
pandas.plotting.table(ax,data,rowLabels=None,colLabels=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/plotting/_core.py----------------------------------------
A:pandas.plotting._core.plot_backend->_get_plot_backend(kwargs.pop('backend', None))
A:pandas.plotting._core.keyword_args->', '.join((f'{name}={repr(value)}' for ((name, default), value) in zip(arg_def, args)))
A:pandas.plotting._core.kwargs->dict(pos_args, **kwargs)
A:pandas.plotting._core.x->dict(pos_args, **kwargs).pop('x', None)
A:pandas.plotting._core.y->dict(pos_args, **kwargs).pop('y', None)
A:pandas.plotting._core.kind->self._kind_aliases.get(kind, kind)
A:pandas.plotting._core.(x, y, kind, kwargs)->self._get_call_args(plot_backend.__name__, self._parent, args, kwargs)
A:pandas.plotting._core.data->data[y].copy()
A:pandas.plotting._core._backends[entry_point.name]->entry_point.load()
A:pandas.plotting._core.module->_find_backend(backend)
pandas.plotting.PlotAccessor(self,data)
pandas.plotting.PlotAccessor._get_call_args(backend_name,data,args,kwargs)
pandas.plotting.PlotAccessor.area(self,x=None,y=None,**kwargs)
pandas.plotting.PlotAccessor.bar(self,x=None,y=None,**kwargs)
pandas.plotting.PlotAccessor.barh(self,x=None,y=None,**kwargs)
pandas.plotting.PlotAccessor.box(self,by=None,**kwargs)
pandas.plotting.PlotAccessor.hexbin(self,x,y,C=None,reduce_C_function=None,gridsize=None,**kwargs)
pandas.plotting.PlotAccessor.hist(self,by=None,bins=10,**kwargs)
pandas.plotting.PlotAccessor.kde(self,bw_method=None,ind=None,**kwargs)
pandas.plotting.PlotAccessor.line(self,x=None,y=None,**kwargs)
pandas.plotting.PlotAccessor.pie(self,**kwargs)
pandas.plotting.PlotAccessor.scatter(self,x,y,s=None,c=None,**kwargs)
pandas.plotting._core.PlotAccessor(self,data)
pandas.plotting._core.PlotAccessor.__init__(self,data)
pandas.plotting._core.PlotAccessor._get_call_args(backend_name,data,args,kwargs)
pandas.plotting._core.PlotAccessor.area(self,x=None,y=None,**kwargs)
pandas.plotting._core.PlotAccessor.bar(self,x=None,y=None,**kwargs)
pandas.plotting._core.PlotAccessor.barh(self,x=None,y=None,**kwargs)
pandas.plotting._core.PlotAccessor.box(self,by=None,**kwargs)
pandas.plotting._core.PlotAccessor.hexbin(self,x,y,C=None,reduce_C_function=None,gridsize=None,**kwargs)
pandas.plotting._core.PlotAccessor.hist(self,by=None,bins=10,**kwargs)
pandas.plotting._core.PlotAccessor.kde(self,bw_method=None,ind=None,**kwargs)
pandas.plotting._core.PlotAccessor.line(self,x=None,y=None,**kwargs)
pandas.plotting._core.PlotAccessor.pie(self,**kwargs)
pandas.plotting._core.PlotAccessor.scatter(self,x,y,s=None,c=None,**kwargs)
pandas.plotting._core._find_backend(backend:str)
pandas.plotting._core._get_plot_backend(backend=None)
pandas.plotting._core.boxplot(data,column=None,by=None,ax=None,fontsize=None,rot=0,grid=True,figsize=None,layout=None,return_type=None,**kwargs)
pandas.plotting._core.boxplot_frame(self,column=None,by=None,ax=None,fontsize=None,rot=0,grid=True,figsize=None,layout=None,return_type=None,backend=None,**kwargs)
pandas.plotting._core.boxplot_frame_groupby(grouped,subplots=True,column=None,fontsize=None,rot=0,grid=True,ax=None,figsize=None,layout=None,sharex=False,sharey=True,backend=None,**kwargs)
pandas.plotting._core.hist_frame(data,column=None,by=None,grid=True,xlabelsize=None,xrot=None,ylabelsize=None,yrot=None,ax=None,sharex=False,sharey=False,figsize=None,layout=None,bins=10,backend=None,**kwargs)
pandas.plotting._core.hist_series(self,by=None,ax=None,grid=True,xlabelsize=None,xrot=None,ylabelsize=None,yrot=None,figsize=None,bins=10,backend=None,**kwargs)
pandas.plotting.boxplot(data,column=None,by=None,ax=None,fontsize=None,rot=0,grid=True,figsize=None,layout=None,return_type=None,**kwargs)
pandas.plotting.boxplot_frame(self,column=None,by=None,ax=None,fontsize=None,rot=0,grid=True,figsize=None,layout=None,return_type=None,backend=None,**kwargs)
pandas.plotting.boxplot_frame_groupby(grouped,subplots=True,column=None,fontsize=None,rot=0,grid=True,ax=None,figsize=None,layout=None,sharex=False,sharey=True,backend=None,**kwargs)
pandas.plotting.hist_frame(data,column=None,by=None,grid=True,xlabelsize=None,xrot=None,ylabelsize=None,yrot=None,ax=None,sharex=False,sharey=False,figsize=None,layout=None,bins=10,backend=None,**kwargs)
pandas.plotting.hist_series(self,by=None,ax=None,grid=True,xlabelsize=None,xrot=None,ylabelsize=None,yrot=None,figsize=None,bins=10,backend=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/plotting/_matplotlib/__init__.py----------------------------------------
A:pandas.plotting._matplotlib.__init__.ax->matplotlib.pyplot.gca()
A:pandas.plotting._matplotlib.__init__.kwargs['ax']->getattr(ax, 'left_ax', ax)
A:pandas.plotting._matplotlib.__init__.plot_obj->PLOT_CLASSES[kind](data, **kwargs)
pandas.plotting._matplotlib.__init__.plot(data,kind,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/plotting/_matplotlib/boxplot.py----------------------------------------
A:pandas.plotting._matplotlib.boxplot.BP->namedtuple('Boxplot', ['ax', 'lines'])
A:pandas.plotting._matplotlib.boxplot.y->remove_na_arraylike(y)
A:pandas.plotting._matplotlib.boxplot.bp->boxplot(self, column=column, by=by, ax=ax, fontsize=fontsize, grid=grid, rot=rot, figsize=figsize, layout=layout, return_type=return_type, **kwds).boxplot(values, **kwds)
A:pandas.plotting._matplotlib.boxplot.self.color->self.kwds.pop('color')
A:pandas.plotting._matplotlib.boxplot.colors->_get_colors()
A:pandas.plotting._matplotlib.boxplot.boxes->self.color.get('boxes', self._boxes_c)
A:pandas.plotting._matplotlib.boxplot.whiskers->self.color.get('whiskers', self._whiskers_c)
A:pandas.plotting._matplotlib.boxplot.medians->self.color.get('medians', self._medians_c)
A:pandas.plotting._matplotlib.boxplot.caps->self.color.get('caps', self._caps_c)
A:pandas.plotting._matplotlib.boxplot.self._return_obj->pandas.Series(dtype=object)
A:pandas.plotting._matplotlib.boxplot.ax->boxplot(self, column=column, by=by, ax=ax, fontsize=fontsize, grid=grid, rot=rot, figsize=figsize, layout=layout, return_type=return_type, **kwds)
A:pandas.plotting._matplotlib.boxplot.kwds->self.kwds.copy()
A:pandas.plotting._matplotlib.boxplot.(ret, bp)->self._plot(ax, y, column_num=0, return_type=self.return_type, **kwds)
A:pandas.plotting._matplotlib.boxplot.grouped->data._get_numeric_data().groupby(by)
A:pandas.plotting._matplotlib.boxplot.columns->data._get_numeric_data()._get_numeric_data().columns.difference(by)
A:pandas.plotting._matplotlib.boxplot.naxes->len(grouped)
A:pandas.plotting._matplotlib.boxplot.(fig, axes)->_subplots(naxes=naxes, squeeze=False, ax=ax, sharex=sharex, sharey=sharey, figsize=figsize, layout=layout)
A:pandas.plotting._matplotlib.boxplot._axes->_flatten(axes)
A:pandas.plotting._matplotlib.boxplot.(keys, values)->zip(*gp_col)
A:pandas.plotting._matplotlib.boxplot.re_plotf->plotf(keys, values, ax, **kwargs)
A:pandas.plotting._matplotlib.boxplot.result->plot_group(columns, data.values.T, ax)
A:pandas.plotting._matplotlib.boxplot.data->data._get_numeric_data()._get_numeric_data()
A:pandas.plotting._matplotlib.boxplot.key_to_index->dict(zip(valid_keys, range(4)))
A:pandas.plotting._matplotlib.boxplot.axes->_flatten(axes)
A:pandas.plotting._matplotlib.boxplot.ret->frames[0].join(frames[1:]).boxplot(column=column, fontsize=fontsize, rot=rot, grid=grid, ax=ax, figsize=figsize, layout=layout, **kwds)
A:pandas.plotting._matplotlib.boxplot.d->group.boxplot(ax=ax, column=column, fontsize=fontsize, rot=rot, grid=grid, **kwds)
A:pandas.plotting._matplotlib.boxplot.(keys, frames)->zip(*grouped)
A:pandas.plotting._matplotlib.boxplot.df->frames[0].join(frames[1:])
pandas.plotting._matplotlib.BoxPlot(self,data,return_type='axes',**kwargs)
pandas.plotting._matplotlib.BoxPlot._args_adjust(self)
pandas.plotting._matplotlib.BoxPlot._get_colors(self,num_colors=None,color_kwds='color')
pandas.plotting._matplotlib.BoxPlot._make_legend(self)
pandas.plotting._matplotlib.BoxPlot._make_plot(self)
pandas.plotting._matplotlib.BoxPlot._plot(cls,ax,y,column_num=None,return_type='axes',**kwds)
pandas.plotting._matplotlib.BoxPlot._post_plot_logic(self,ax,data)
pandas.plotting._matplotlib.BoxPlot._set_ticklabels(self,ax,labels)
pandas.plotting._matplotlib.BoxPlot._validate_color_args(self)
pandas.plotting._matplotlib.BoxPlot.maybe_color_bp(self,bp)
pandas.plotting._matplotlib.BoxPlot.orientation(self)
pandas.plotting._matplotlib.BoxPlot.result(self)
pandas.plotting._matplotlib.boxplot(data,column=None,by=None,ax=None,fontsize=None,rot=0,grid=True,figsize=None,layout=None,return_type=None,**kwds)
pandas.plotting._matplotlib.boxplot.BoxPlot(self,data,return_type='axes',**kwargs)
pandas.plotting._matplotlib.boxplot.BoxPlot.__init__(self,data,return_type='axes',**kwargs)
pandas.plotting._matplotlib.boxplot.BoxPlot._args_adjust(self)
pandas.plotting._matplotlib.boxplot.BoxPlot._get_colors(self,num_colors=None,color_kwds='color')
pandas.plotting._matplotlib.boxplot.BoxPlot._make_legend(self)
pandas.plotting._matplotlib.boxplot.BoxPlot._make_plot(self)
pandas.plotting._matplotlib.boxplot.BoxPlot._plot(cls,ax,y,column_num=None,return_type='axes',**kwds)
pandas.plotting._matplotlib.boxplot.BoxPlot._post_plot_logic(self,ax,data)
pandas.plotting._matplotlib.boxplot.BoxPlot._set_ticklabels(self,ax,labels)
pandas.plotting._matplotlib.boxplot.BoxPlot._validate_color_args(self)
pandas.plotting._matplotlib.boxplot.BoxPlot.maybe_color_bp(self,bp)
pandas.plotting._matplotlib.boxplot.BoxPlot.orientation(self)
pandas.plotting._matplotlib.boxplot.BoxPlot.result(self)
pandas.plotting._matplotlib.boxplot._grouped_plot_by_column(plotf,data,columns=None,by=None,numeric_only=True,grid=False,figsize=None,ax=None,layout=None,return_type=None,**kwargs)
pandas.plotting._matplotlib.boxplot.boxplot(data,column=None,by=None,ax=None,fontsize=None,rot=0,grid=True,figsize=None,layout=None,return_type=None,**kwds)
pandas.plotting._matplotlib.boxplot.boxplot_frame(self,column=None,by=None,ax=None,fontsize=None,rot=0,grid=True,figsize=None,layout=None,return_type=None,**kwds)
pandas.plotting._matplotlib.boxplot.boxplot_frame_groupby(grouped,subplots=True,column=None,fontsize=None,rot=0,grid=True,ax=None,figsize=None,layout=None,sharex=False,sharey=True,**kwds)
pandas.plotting._matplotlib.boxplot_frame(self,column=None,by=None,ax=None,fontsize=None,rot=0,grid=True,figsize=None,layout=None,return_type=None,**kwds)
pandas.plotting._matplotlib.boxplot_frame_groupby(grouped,subplots=True,column=None,fontsize=None,rot=0,grid=True,ax=None,figsize=None,layout=None,sharex=False,sharey=True,**kwds)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/plotting/_matplotlib/core.py----------------------------------------
A:pandas.plotting._matplotlib.core.value->self.kwds.copy().pop(attr, self._attr_defaults.get(attr, None))
A:pandas.plotting._matplotlib.core.xerr->self.kwds.copy().pop('xerr', None)
A:pandas.plotting._matplotlib.core.yerr->self.kwds.copy().pop('yerr', None)
A:pandas.plotting._matplotlib.core.self.colormap->self.kwds.copy().pop('cmap')
A:pandas.plotting._matplotlib.core.data->data.fillna(value=0).fillna(value=0)
A:pandas.plotting._matplotlib.core.(fig, axes)->_subplots(naxes=self.nseries, sharex=self.sharex, sharey=self.sharey, figsize=self.figsize, ax=self.ax, layout=self.layout, layout_type=self._layout_type)
A:pandas.plotting._matplotlib.core.fig->self.ax.get_figure()
A:pandas.plotting._matplotlib.core.axes->self._get_subplots()
A:pandas.plotting._matplotlib.core.invalid_log->next(iter(input_log - valid_log))
A:pandas.plotting._matplotlib.core.numeric_data->numeric_data.copy().copy()
A:pandas.plotting._matplotlib.core.numeric_data[col]->numpy.asarray(numeric_data[col])
A:pandas.plotting._matplotlib.core.ax->self._get_ax(i)
A:pandas.plotting._matplotlib.core.all_axes->self._get_subplots()
A:pandas.plotting._matplotlib.core.(nrows, ncols)->self._get_axes_layout()
A:pandas.plotting._matplotlib.core.name->self._get_index_name()
A:pandas.plotting._matplotlib.core.stringified->map(pprint_thing, self.data.columns.names)
A:pandas.plotting._matplotlib.core.(ax, leg, handle)->self._get_ax_legend_handle(self.axes[0])
A:pandas.plotting._matplotlib.core.title->ax.get_legend().get_title().get_text()
A:pandas.plotting._matplotlib.core.self.legend_handles->reversed(self.legend_handles)
A:pandas.plotting._matplotlib.core.self.legend_labels->reversed(self.legend_labels)
A:pandas.plotting._matplotlib.core.leg->self._get_ax(i).get_legend()
A:pandas.plotting._matplotlib.core.(handle, _)->self._get_ax(i).get_legend_handles_labels()
A:pandas.plotting._matplotlib.core.other_leg->other_ax.get_legend()
A:pandas.plotting._matplotlib.core.self.data->self.data.fillna(value=0)
A:pandas.plotting._matplotlib.core.x->self._get_xticks(convert_period=True)
A:pandas.plotting._matplotlib.core.mask->isna(y)
A:pandas.plotting._matplotlib.core.y->numpy.ma.masked_where(mask, y)
A:pandas.plotting._matplotlib.core.kwds['xerr']->numpy.array(kwds.get('xerr'))
A:pandas.plotting._matplotlib.core.kwds['yerr']->numpy.array(kwds.get('yerr'))
A:pandas.plotting._matplotlib.core.style->self.style.get(label, style)
A:pandas.plotting._matplotlib.core.e->e.reindex(data.index).reindex(data.index)
A:pandas.plotting._matplotlib.core.err->numpy.tile([err], (self.nseries, len(self.data)))
A:pandas.plotting._matplotlib.core.x_set->set()
A:pandas.plotting._matplotlib.core.y_set->set()
A:pandas.plotting._matplotlib.core.points->self._get_ax(i).get_position().get_points()
A:pandas.plotting._matplotlib.core.cbar->self.fig.colorbar(img, ax=ax, **kwds)
A:pandas.plotting._matplotlib.core.cbar_points->self.fig.colorbar(img, ax=ax, **kwds).ax.get_position().get_points()
A:pandas.plotting._matplotlib.core.cb->self.kwds.pop('colorbar', True)
A:pandas.plotting._matplotlib.core.cmap->self.plt.cm.get_cmap(cmap)
A:pandas.plotting._matplotlib.core.color->self.kwds.pop('color', None)
A:pandas.plotting._matplotlib.core.scatter->self._get_ax(i).scatter(data[x].values, data[y].values, c=c_values, label=label, cmap=cmap, **self.kwds)
A:pandas.plotting._matplotlib.core.errors_x->self._get_errorbars(label=x, index=0, yerr=False)
A:pandas.plotting._matplotlib.core.errors_y->self._get_errorbars(label=y, index=0, xerr=False)
A:pandas.plotting._matplotlib.core.err_kwds->dict(errors_x, **errors_y)
A:pandas.plotting._matplotlib.core.self.x_compat->bool(self.kwds.pop('x_compat'))
A:pandas.plotting._matplotlib.core.it->self._iter_data()
A:pandas.plotting._matplotlib.core.stacking_id->self._get_stacking_id()
A:pandas.plotting._matplotlib.core.is_errorbar->pandas.core.common.any_not_none(*self.errors.values())
A:pandas.plotting._matplotlib.core.colors->self._get_colors(num_colors=len(self.data), color_kwds='colors')
A:pandas.plotting._matplotlib.core.kwds->self.kwds.copy()
A:pandas.plotting._matplotlib.core.(style, kwds)->self._apply_style_colors(colors, kwds, i, label)
A:pandas.plotting._matplotlib.core.errors->self._get_errorbars(label=label, index=i)
A:pandas.plotting._matplotlib.core.label->pprint_thing(label)
A:pandas.plotting._matplotlib.core.newlines->plotf(ax, x, y, style=style, column_num=i, stacking_id=stacking_id, is_errorbar=is_errorbar, **kwds)
A:pandas.plotting._matplotlib.core.lines->MPLPlot._plot(ax, x, y_values, style=style, **line_kwds)
A:pandas.plotting._matplotlib.core.(left, right)->_get_xlim(lines)
A:pandas.plotting._matplotlib.core.y_values->cls._get_stacked_values(ax, stacking_id, y, kwds['label'])
A:pandas.plotting._matplotlib.core.(freq, data)->_maybe_resample(data, ax, kwds)
A:pandas.plotting._matplotlib.core.ax._stacker_pos_prior[stacking_id]->numpy.zeros(n)
A:pandas.plotting._matplotlib.core.ax._stacker_neg_prior[stacking_id]->numpy.zeros(n)
A:pandas.plotting._matplotlib.core.xticks->self._get_ax(i).get_xticks()
A:pandas.plotting._matplotlib.core.index_name->self._get_index_name()
A:pandas.plotting._matplotlib.core.line_kwds->self.kwds.copy().copy()
A:pandas.plotting._matplotlib.core.(xdata, y_values)->lines[0].get_data(orig=False)
A:pandas.plotting._matplotlib.core.start->numpy.zeros(len(y))
A:pandas.plotting._matplotlib.core.kwds['color']->lines[0].get_color()
A:pandas.plotting._matplotlib.core.rect->self._plot(ax, self.ax_pos + (i + 0.5) * w, y, w, start=start, label=label, log=self.log, **kwds)
A:pandas.plotting._matplotlib.core.self._is_series->isinstance(data, ABCSeries)
A:pandas.plotting._matplotlib.core.self.bar_width->kwargs.pop('width', 0.5)
A:pandas.plotting._matplotlib.core.pos->kwargs.pop('position', 0.5)
A:pandas.plotting._matplotlib.core.self.tick_pos->numpy.arange(len(data))
A:pandas.plotting._matplotlib.core.self.bottom->numpy.array(self.bottom)
A:pandas.plotting._matplotlib.core.self.left->numpy.array(self.left)
A:pandas.plotting._matplotlib.core.self.log->kwargs.pop('log', False)
A:pandas.plotting._matplotlib.core.ncolors->len(colors)
A:pandas.plotting._matplotlib.core.pos_priorneg_prior->numpy.zeros(len(self.data))
A:pandas.plotting._matplotlib.core.labels->self.kwds.copy().pop('labels', idx)
A:pandas.plotting._matplotlib.core.results->self._get_ax(i).pie(y, labels=blabels, **kwds)
pandas.plotting._matplotlib.AreaPlot(self,data,**kwargs)
pandas.plotting._matplotlib.AreaPlot._plot(cls,ax,x,y,style=None,column_num=None,stacking_id=None,is_errorbar=False,**kwds)
pandas.plotting._matplotlib.AreaPlot._post_plot_logic(self,ax,data)
pandas.plotting._matplotlib.BarPlot(self,data,**kwargs)
pandas.plotting._matplotlib.BarPlot._args_adjust(self)
pandas.plotting._matplotlib.BarPlot._decorate_ticks(self,ax,name,ticklabels,start_edge,end_edge)
pandas.plotting._matplotlib.BarPlot._make_plot(self)
pandas.plotting._matplotlib.BarPlot._plot(cls,ax,x,y,w,start=0,log=False,**kwds)
pandas.plotting._matplotlib.BarPlot._post_plot_logic(self,ax,data)
pandas.plotting._matplotlib.BarPlot._start_base(self)
pandas.plotting._matplotlib.BarhPlot(BarPlot)
pandas.plotting._matplotlib.BarhPlot._decorate_ticks(self,ax,name,ticklabels,start_edge,end_edge)
pandas.plotting._matplotlib.BarhPlot._plot(cls,ax,x,y,w,start=0,log=False,**kwds)
pandas.plotting._matplotlib.BarhPlot._start_base(self)
pandas.plotting._matplotlib.HexBinPlot(self,data,x,y,C=None,**kwargs)
pandas.plotting._matplotlib.HexBinPlot._make_legend(self)
pandas.plotting._matplotlib.HexBinPlot._make_plot(self)
pandas.plotting._matplotlib.LinePlot(self,data,**kwargs)
pandas.plotting._matplotlib.LinePlot._get_stacked_values(cls,ax,stacking_id,values,label)
pandas.plotting._matplotlib.LinePlot._get_stacking_id(self)
pandas.plotting._matplotlib.LinePlot._initialize_stacker(cls,ax,stacking_id,n)
pandas.plotting._matplotlib.LinePlot._is_ts_plot(self)
pandas.plotting._matplotlib.LinePlot._make_plot(self)
pandas.plotting._matplotlib.LinePlot._plot(cls,ax,x,y,style=None,column_num=None,stacking_id=None,**kwds)
pandas.plotting._matplotlib.LinePlot._post_plot_logic(self,ax,data)
pandas.plotting._matplotlib.LinePlot._ts_plot(cls,ax,x,data,style=None,**kwds)
pandas.plotting._matplotlib.LinePlot._update_stacker(cls,ax,stacking_id,values)
pandas.plotting._matplotlib.LinePlot._use_dynamic_x(self)
pandas.plotting._matplotlib.MPLPlot(self,data,kind=None,by=None,subplots=False,sharex=None,sharey=False,use_index=True,figsize=None,grid=None,legend=True,rot=None,ax=None,fig=None,title=None,xlim=None,ylim=None,xticks=None,yticks=None,sort_columns=False,fontsize=None,secondary_y=False,colormap=None,table=False,layout=None,include_bool=False,**kwds)
pandas.plotting._matplotlib.MPLPlot._add_legend_handle(self,handle,label,index=None)
pandas.plotting._matplotlib.MPLPlot._add_table(self)
pandas.plotting._matplotlib.MPLPlot._adorn_subplots(self)
pandas.plotting._matplotlib.MPLPlot._apply_axis_properties(self,axis,rot=None,fontsize=None)
pandas.plotting._matplotlib.MPLPlot._apply_style_colors(self,colors,kwds,col_num,label)
pandas.plotting._matplotlib.MPLPlot._args_adjust(self)
pandas.plotting._matplotlib.MPLPlot._compute_plot_data(self)
pandas.plotting._matplotlib.MPLPlot._get_ax(self,i)
pandas.plotting._matplotlib.MPLPlot._get_ax_layer(cls,ax,primary=True)
pandas.plotting._matplotlib.MPLPlot._get_ax_legend_handle(self,ax)
pandas.plotting._matplotlib.MPLPlot._get_axes_layout(self)
pandas.plotting._matplotlib.MPLPlot._get_colors(self,num_colors=None,color_kwds='color')
pandas.plotting._matplotlib.MPLPlot._get_errorbars(self,label=None,index=None,xerr=True,yerr=True)
pandas.plotting._matplotlib.MPLPlot._get_index_name(self)
pandas.plotting._matplotlib.MPLPlot._get_subplots(self)
pandas.plotting._matplotlib.MPLPlot._get_xticks(self,convert_period=False)
pandas.plotting._matplotlib.MPLPlot._has_plotted_object(self,ax)
pandas.plotting._matplotlib.MPLPlot._iter_data(self,data=None,keep_index=False,fillna=None)
pandas.plotting._matplotlib.MPLPlot._kind(self)
pandas.plotting._matplotlib.MPLPlot._make_legend(self)
pandas.plotting._matplotlib.MPLPlot._make_plot(self)
pandas.plotting._matplotlib.MPLPlot._maybe_right_yaxis(self,ax,axes_num)
pandas.plotting._matplotlib.MPLPlot._parse_errorbars(self,label,err)
pandas.plotting._matplotlib.MPLPlot._plot(cls,ax,x,y,style=None,is_errorbar=False,**kwds)
pandas.plotting._matplotlib.MPLPlot._post_plot_logic(self,ax,data)
pandas.plotting._matplotlib.MPLPlot._post_plot_logic_common(self,ax,data)
pandas.plotting._matplotlib.MPLPlot._setup_subplots(self)
pandas.plotting._matplotlib.MPLPlot._validate_color_args(self)
pandas.plotting._matplotlib.MPLPlot.draw(self)
pandas.plotting._matplotlib.MPLPlot.generate(self)
pandas.plotting._matplotlib.MPLPlot.get_default_ax(cls,ax)
pandas.plotting._matplotlib.MPLPlot.legend_title(self)
pandas.plotting._matplotlib.MPLPlot.nseries(self)
pandas.plotting._matplotlib.MPLPlot.on_right(self,i)
pandas.plotting._matplotlib.MPLPlot.plt(self)
pandas.plotting._matplotlib.MPLPlot.result(self)
pandas.plotting._matplotlib.PiePlot(self,data,kind=None,**kwargs)
pandas.plotting._matplotlib.PiePlot._args_adjust(self)
pandas.plotting._matplotlib.PiePlot._make_plot(self)
pandas.plotting._matplotlib.PiePlot._validate_color_args(self)
pandas.plotting._matplotlib.ScatterPlot(self,data,x,y,s=None,c=None,**kwargs)
pandas.plotting._matplotlib.ScatterPlot._make_plot(self)
pandas.plotting._matplotlib.core.AreaPlot(self,data,**kwargs)
pandas.plotting._matplotlib.core.AreaPlot.__init__(self,data,**kwargs)
pandas.plotting._matplotlib.core.AreaPlot._plot(cls,ax,x,y,style=None,column_num=None,stacking_id=None,is_errorbar=False,**kwds)
pandas.plotting._matplotlib.core.AreaPlot._post_plot_logic(self,ax,data)
pandas.plotting._matplotlib.core.BarPlot(self,data,**kwargs)
pandas.plotting._matplotlib.core.BarPlot.__init__(self,data,**kwargs)
pandas.plotting._matplotlib.core.BarPlot._args_adjust(self)
pandas.plotting._matplotlib.core.BarPlot._decorate_ticks(self,ax,name,ticklabels,start_edge,end_edge)
pandas.plotting._matplotlib.core.BarPlot._make_plot(self)
pandas.plotting._matplotlib.core.BarPlot._plot(cls,ax,x,y,w,start=0,log=False,**kwds)
pandas.plotting._matplotlib.core.BarPlot._post_plot_logic(self,ax,data)
pandas.plotting._matplotlib.core.BarPlot._start_base(self)
pandas.plotting._matplotlib.core.BarhPlot(BarPlot)
pandas.plotting._matplotlib.core.BarhPlot._decorate_ticks(self,ax,name,ticklabels,start_edge,end_edge)
pandas.plotting._matplotlib.core.BarhPlot._plot(cls,ax,x,y,w,start=0,log=False,**kwds)
pandas.plotting._matplotlib.core.BarhPlot._start_base(self)
pandas.plotting._matplotlib.core.HexBinPlot(self,data,x,y,C=None,**kwargs)
pandas.plotting._matplotlib.core.HexBinPlot.__init__(self,data,x,y,C=None,**kwargs)
pandas.plotting._matplotlib.core.HexBinPlot._make_legend(self)
pandas.plotting._matplotlib.core.HexBinPlot._make_plot(self)
pandas.plotting._matplotlib.core.LinePlot(self,data,**kwargs)
pandas.plotting._matplotlib.core.LinePlot.__init__(self,data,**kwargs)
pandas.plotting._matplotlib.core.LinePlot._get_stacked_values(cls,ax,stacking_id,values,label)
pandas.plotting._matplotlib.core.LinePlot._get_stacking_id(self)
pandas.plotting._matplotlib.core.LinePlot._initialize_stacker(cls,ax,stacking_id,n)
pandas.plotting._matplotlib.core.LinePlot._is_ts_plot(self)
pandas.plotting._matplotlib.core.LinePlot._make_plot(self)
pandas.plotting._matplotlib.core.LinePlot._plot(cls,ax,x,y,style=None,column_num=None,stacking_id=None,**kwds)
pandas.plotting._matplotlib.core.LinePlot._post_plot_logic(self,ax,data)
pandas.plotting._matplotlib.core.LinePlot._ts_plot(cls,ax,x,data,style=None,**kwds)
pandas.plotting._matplotlib.core.LinePlot._update_stacker(cls,ax,stacking_id,values)
pandas.plotting._matplotlib.core.LinePlot._use_dynamic_x(self)
pandas.plotting._matplotlib.core.MPLPlot(self,data,kind=None,by=None,subplots=False,sharex=None,sharey=False,use_index=True,figsize=None,grid=None,legend=True,rot=None,ax=None,fig=None,title=None,xlim=None,ylim=None,xticks=None,yticks=None,sort_columns=False,fontsize=None,secondary_y=False,colormap=None,table=False,layout=None,include_bool=False,**kwds)
pandas.plotting._matplotlib.core.MPLPlot.__init__(self,data,kind=None,by=None,subplots=False,sharex=None,sharey=False,use_index=True,figsize=None,grid=None,legend=True,rot=None,ax=None,fig=None,title=None,xlim=None,ylim=None,xticks=None,yticks=None,sort_columns=False,fontsize=None,secondary_y=False,colormap=None,table=False,layout=None,include_bool=False,**kwds)
pandas.plotting._matplotlib.core.MPLPlot._add_legend_handle(self,handle,label,index=None)
pandas.plotting._matplotlib.core.MPLPlot._add_table(self)
pandas.plotting._matplotlib.core.MPLPlot._adorn_subplots(self)
pandas.plotting._matplotlib.core.MPLPlot._apply_axis_properties(self,axis,rot=None,fontsize=None)
pandas.plotting._matplotlib.core.MPLPlot._apply_style_colors(self,colors,kwds,col_num,label)
pandas.plotting._matplotlib.core.MPLPlot._args_adjust(self)
pandas.plotting._matplotlib.core.MPLPlot._compute_plot_data(self)
pandas.plotting._matplotlib.core.MPLPlot._get_ax(self,i)
pandas.plotting._matplotlib.core.MPLPlot._get_ax_layer(cls,ax,primary=True)
pandas.plotting._matplotlib.core.MPLPlot._get_ax_legend_handle(self,ax)
pandas.plotting._matplotlib.core.MPLPlot._get_axes_layout(self)
pandas.plotting._matplotlib.core.MPLPlot._get_colors(self,num_colors=None,color_kwds='color')
pandas.plotting._matplotlib.core.MPLPlot._get_errorbars(self,label=None,index=None,xerr=True,yerr=True)
pandas.plotting._matplotlib.core.MPLPlot._get_index_name(self)
pandas.plotting._matplotlib.core.MPLPlot._get_subplots(self)
pandas.plotting._matplotlib.core.MPLPlot._get_xticks(self,convert_period=False)
pandas.plotting._matplotlib.core.MPLPlot._has_plotted_object(self,ax)
pandas.plotting._matplotlib.core.MPLPlot._iter_data(self,data=None,keep_index=False,fillna=None)
pandas.plotting._matplotlib.core.MPLPlot._kind(self)
pandas.plotting._matplotlib.core.MPLPlot._make_legend(self)
pandas.plotting._matplotlib.core.MPLPlot._make_plot(self)
pandas.plotting._matplotlib.core.MPLPlot._maybe_right_yaxis(self,ax,axes_num)
pandas.plotting._matplotlib.core.MPLPlot._parse_errorbars(self,label,err)
pandas.plotting._matplotlib.core.MPLPlot._plot(cls,ax,x,y,style=None,is_errorbar=False,**kwds)
pandas.plotting._matplotlib.core.MPLPlot._post_plot_logic(self,ax,data)
pandas.plotting._matplotlib.core.MPLPlot._post_plot_logic_common(self,ax,data)
pandas.plotting._matplotlib.core.MPLPlot._setup_subplots(self)
pandas.plotting._matplotlib.core.MPLPlot._validate_color_args(self)
pandas.plotting._matplotlib.core.MPLPlot.draw(self)
pandas.plotting._matplotlib.core.MPLPlot.generate(self)
pandas.plotting._matplotlib.core.MPLPlot.get_default_ax(cls,ax)
pandas.plotting._matplotlib.core.MPLPlot.legend_title(self)
pandas.plotting._matplotlib.core.MPLPlot.nseries(self)
pandas.plotting._matplotlib.core.MPLPlot.on_right(self,i)
pandas.plotting._matplotlib.core.MPLPlot.plt(self)
pandas.plotting._matplotlib.core.MPLPlot.result(self)
pandas.plotting._matplotlib.core.PiePlot(self,data,kind=None,**kwargs)
pandas.plotting._matplotlib.core.PiePlot.__init__(self,data,kind=None,**kwargs)
pandas.plotting._matplotlib.core.PiePlot._args_adjust(self)
pandas.plotting._matplotlib.core.PiePlot._make_plot(self)
pandas.plotting._matplotlib.core.PiePlot._validate_color_args(self)
pandas.plotting._matplotlib.core.PlanePlot(self,data,x,y,**kwargs)
pandas.plotting._matplotlib.core.PlanePlot.__init__(self,data,x,y,**kwargs)
pandas.plotting._matplotlib.core.PlanePlot._plot_colorbar(self,ax,**kwds)
pandas.plotting._matplotlib.core.PlanePlot._post_plot_logic(self,ax,data)
pandas.plotting._matplotlib.core.PlanePlot.nseries(self)
pandas.plotting._matplotlib.core.ScatterPlot(self,data,x,y,s=None,c=None,**kwargs)
pandas.plotting._matplotlib.core.ScatterPlot.__init__(self,data,x,y,s=None,c=None,**kwargs)
pandas.plotting._matplotlib.core.ScatterPlot._make_plot(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/plotting/_matplotlib/style.py----------------------------------------
A:pandas.plotting._matplotlib.style.colormap->matplotlib.cm.get_cmap(colormap)
A:pandas.plotting._matplotlib.style.colors->list(colors)
A:pandas.plotting._matplotlib.style.rs->pandas.core.common.random_state(column)
A:pandas.plotting._matplotlib.style.conv->matplotlib.colors.ColorConverter()
A:pandas.plotting._matplotlib.style.maybe_single_color->_maybe_valid_colors([colors])
A:pandas.plotting._matplotlib.style.maybe_color_cycle->_maybe_valid_colors(list(colors))
pandas.plotting._matplotlib.style._get_standard_colors(num_colors=None,colormap=None,color_type='default',color=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/plotting/_matplotlib/hist.py----------------------------------------
A:pandas.plotting._matplotlib.hist.values->numpy.ravel(values)
A:pandas.plotting._matplotlib.hist.(_, self.bins)->numpy.histogram(values, bins=self.bins, range=self.kwds.get('range', None), weights=self.kwds.get('weights', None))
A:pandas.plotting._matplotlib.hist.self.bottom->numpy.array(self.bottom)
A:pandas.plotting._matplotlib.hist.base->numpy.zeros(len(bins) - 1)
A:pandas.plotting._matplotlib.hist.(n, bins, patches)->fig.gca().hist(y, bins=bins, bottom=bottom, **kwds)
A:pandas.plotting._matplotlib.hist.colors->self._get_colors()
A:pandas.plotting._matplotlib.hist.stacking_id->self._get_stacking_id()
A:pandas.plotting._matplotlib.hist.ax->kwds.pop('figure', plt.gcf() if plt.get_fignums() else plt.figure(figsize=figsize)).gca()
A:pandas.plotting._matplotlib.hist.kwds->self._make_plot_keywords(kwds, y)
A:pandas.plotting._matplotlib.hist.label->pprint_thing(label)
A:pandas.plotting._matplotlib.hist.(style, kwds)->self._apply_style_colors(colors, kwds, i, label)
A:pandas.plotting._matplotlib.hist.artists->self._plot(ax, y, column_num=i, stacking_id=stacking_id, **kwds)
A:pandas.plotting._matplotlib.hist.ind->numpy.linspace(np.nanmin(y) - 0.5 * sample_range, np.nanmax(y) + 0.5 * sample_range, self.ind)
A:pandas.plotting._matplotlib.hist.y->gaussian_kde(y, bw_method=bw_method).evaluate(ind)
A:pandas.plotting._matplotlib.hist.gkde->gaussian_kde(y, bw_method=bw_method)
A:pandas.plotting._matplotlib.hist.lines->pandas.plotting._matplotlib.core.MPLPlot._plot(ax, ind, y, style=style, **kwds)
A:pandas.plotting._matplotlib.hist.kwds['ind']->self._get_ind(y)
A:pandas.plotting._matplotlib.hist.grouped->data._get_numeric_data().groupby(by)
A:pandas.plotting._matplotlib.hist.naxes->len(data.columns)
A:pandas.plotting._matplotlib.hist.(fig, axes)->_subplots(naxes=naxes, ax=ax, squeeze=False, sharex=sharex, sharey=sharey, figsize=figsize, layout=layout)
A:pandas.plotting._matplotlib.hist._axes->_flatten(axes)
A:pandas.plotting._matplotlib.hist.group->group._get_numeric_data()._get_numeric_data()
A:pandas.plotting._matplotlib.hist.fig->self._make_plot_keywords(kwds, y).pop('figure', plt.gcf() if plt.get_fignums() else plt.figure(figsize=figsize))
A:pandas.plotting._matplotlib.hist.axes->_grouped_hist(data, column=column, by=by, ax=ax, grid=grid, figsize=figsize, sharex=sharex, sharey=sharey, layout=layout, bins=bins, xlabelsize=xlabelsize, xrot=xrot, ylabelsize=ylabelsize, yrot=yrot, **kwds)
A:pandas.plotting._matplotlib.hist.data->data._get_numeric_data()._get_numeric_data()
pandas.plotting._matplotlib.HistPlot(self,data,bins=10,bottom=0,**kwargs)
pandas.plotting._matplotlib.HistPlot._args_adjust(self)
pandas.plotting._matplotlib.HistPlot._make_plot(self)
pandas.plotting._matplotlib.HistPlot._make_plot_keywords(self,kwds,y)
pandas.plotting._matplotlib.HistPlot._plot(cls,ax,y,style=None,bins=None,bottom=0,column_num=0,stacking_id=None,**kwds)
pandas.plotting._matplotlib.HistPlot._post_plot_logic(self,ax,data)
pandas.plotting._matplotlib.HistPlot.orientation(self)
pandas.plotting._matplotlib.KdePlot(self,data,bw_method=None,ind=None,**kwargs)
pandas.plotting._matplotlib.KdePlot._args_adjust(self)
pandas.plotting._matplotlib.KdePlot._get_ind(self,y)
pandas.plotting._matplotlib.KdePlot._make_plot_keywords(self,kwds,y)
pandas.plotting._matplotlib.KdePlot._plot(cls,ax,y,style=None,bw_method=None,ind=None,column_num=None,stacking_id=None,**kwds)
pandas.plotting._matplotlib.KdePlot._post_plot_logic(self,ax,data)
pandas.plotting._matplotlib.hist.HistPlot(self,data,bins=10,bottom=0,**kwargs)
pandas.plotting._matplotlib.hist.HistPlot.__init__(self,data,bins=10,bottom=0,**kwargs)
pandas.plotting._matplotlib.hist.HistPlot._args_adjust(self)
pandas.plotting._matplotlib.hist.HistPlot._make_plot(self)
pandas.plotting._matplotlib.hist.HistPlot._make_plot_keywords(self,kwds,y)
pandas.plotting._matplotlib.hist.HistPlot._plot(cls,ax,y,style=None,bins=None,bottom=0,column_num=0,stacking_id=None,**kwds)
pandas.plotting._matplotlib.hist.HistPlot._post_plot_logic(self,ax,data)
pandas.plotting._matplotlib.hist.HistPlot.orientation(self)
pandas.plotting._matplotlib.hist.KdePlot(self,data,bw_method=None,ind=None,**kwargs)
pandas.plotting._matplotlib.hist.KdePlot.__init__(self,data,bw_method=None,ind=None,**kwargs)
pandas.plotting._matplotlib.hist.KdePlot._args_adjust(self)
pandas.plotting._matplotlib.hist.KdePlot._get_ind(self,y)
pandas.plotting._matplotlib.hist.KdePlot._make_plot_keywords(self,kwds,y)
pandas.plotting._matplotlib.hist.KdePlot._plot(cls,ax,y,style=None,bw_method=None,ind=None,column_num=None,stacking_id=None,**kwds)
pandas.plotting._matplotlib.hist.KdePlot._post_plot_logic(self,ax,data)
pandas.plotting._matplotlib.hist._grouped_hist(data,column=None,by=None,ax=None,bins=50,figsize=None,layout=None,sharex=False,sharey=False,rot=90,grid=True,xlabelsize=None,xrot=None,ylabelsize=None,yrot=None,**kwargs)
pandas.plotting._matplotlib.hist._grouped_plot(plotf,data,column=None,by=None,numeric_only=True,figsize=None,sharex=True,sharey=True,layout=None,rot=0,ax=None,**kwargs)
pandas.plotting._matplotlib.hist.hist_frame(data,column=None,by=None,grid=True,xlabelsize=None,xrot=None,ylabelsize=None,yrot=None,ax=None,sharex=False,sharey=False,figsize=None,layout=None,bins=10,**kwds)
pandas.plotting._matplotlib.hist.hist_series(self,by=None,ax=None,grid=True,xlabelsize=None,xrot=None,ylabelsize=None,yrot=None,figsize=None,bins=10,**kwds)
pandas.plotting._matplotlib.hist_frame(data,column=None,by=None,grid=True,xlabelsize=None,xrot=None,ylabelsize=None,yrot=None,ax=None,sharex=False,sharey=False,figsize=None,layout=None,bins=10,**kwds)
pandas.plotting._matplotlib.hist_series(self,by=None,ax=None,grid=True,xlabelsize=None,xrot=None,ylabelsize=None,yrot=None,figsize=None,bins=10,**kwds)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/plotting/_matplotlib/converter.py----------------------------------------
A:pandas.plotting._matplotlib.converter.value->get_option('plotting.matplotlib.register_converters')
A:pandas.plotting._matplotlib.converter.pairs->get_pairs()
A:pandas.plotting._matplotlib.converter.units.registry[type_]->cls()
A:pandas.plotting._matplotlib.converter.parsed->pandas.core.tools.datetimes.to_datetime(d)
A:pandas.plotting._matplotlib.converter.majloc->PandasAutoDateLocator(tz=tz)
A:pandas.plotting._matplotlib.converter.majfmt->PandasAutoDateFormatter(majloc, tz=tz)
A:pandas.plotting._matplotlib.converter.s->int(x)
A:pandas.plotting._matplotlib.converter.msus->int(round((x - s) * 1000000.0))
A:pandas.plotting._matplotlib.converter.(m, s)->divmod(s, 60)
A:pandas.plotting._matplotlib.converter.(h, m)->divmod(m, 60)
A:pandas.plotting._matplotlib.converter.(_, h)->divmod(h, 24)
A:pandas.plotting._matplotlib.converter.values->_dt_to_float_ordinal(values)
A:pandas.plotting._matplotlib.converter.base->matplotlib.dates.date2num(dt)
A:pandas.plotting._matplotlib.converter.datemin->datetime.date(2000, 1, 1)
A:pandas.plotting._matplotlib.converter.datemax->datetime.date(2010, 1, 1)
A:pandas.plotting._matplotlib.converter.delta->relativedelta(dmax, dmin)
A:pandas.plotting._matplotlib.converter.locator->MilliSecondLocator(self.tz)
A:pandas.plotting._matplotlib.converter.unit->matplotlib.dates.RRuleLocator.get_unit_generic(freq)
A:pandas.plotting._matplotlib.converter.(dmin, dmax)->self.datalim_to_dt()
A:pandas.plotting._matplotlib.converter.(nmax, nmin)->matplotlib.dates.date2num((dmax, dmin))
A:pandas.plotting._matplotlib.converter.interval->self._get_interval()
A:pandas.plotting._matplotlib.converter.tz->self.tz.tzname(None)
A:pandas.plotting._matplotlib.converter.st->_from_ordinal(dates.date2num(dmin))
A:pandas.plotting._matplotlib.converter.ed->_from_ordinal(dates.date2num(dmax))
A:pandas.plotting._matplotlib.converter.all_dates->date_range(start=st, end=ed, freq=freq, tz=tz).astype(object)
A:pandas.plotting._matplotlib.converter.locs->self._get_default_locs(vmin, vmax)
A:pandas.plotting._matplotlib.converter.lims->matplotlib.dates.date2num([dmin, dmax])
A:pandas.plotting._matplotlib.converter.vmin->matplotlib.dates.date2num(dmin)
A:pandas.plotting._matplotlib.converter.vmax->matplotlib.dates.date2num(dmax)
A:pandas.plotting._matplotlib.converter.ix->int(x)
A:pandas.plotting._matplotlib.converter.dt->dt.astimezone(tz).astimezone(tz)
A:pandas.plotting._matplotlib.converter.(hour, remainder)->divmod(24 * remainder, 1)
A:pandas.plotting._matplotlib.converter.(minute, remainder)->divmod(60 * remainder, 1)
A:pandas.plotting._matplotlib.converter.(second, remainder)->divmod(60 * remainder, 1)
A:pandas.plotting._matplotlib.converter.microsecond->int(1000000.0 * remainder)
A:pandas.plotting._matplotlib.converter.current->getattr(dates, period)
A:pandas.plotting._matplotlib.converter.previous->getattr(dates - 1 * dates.freq, period)
A:pandas.plotting._matplotlib.converter.dates_->period_range(start=vmin, end=vmax, freq=freq)
A:pandas.plotting._matplotlib.converter.info->numpy.zeros(span, dtype=[('val', int), ('maj', bool), ('min', bool), ('fmt', '|S8')])
A:pandas.plotting._matplotlib.converter.day_start->period_break(dates_, 'day')
A:pandas.plotting._matplotlib.converter.month_start->period_break(dates_, 'month')
A:pandas.plotting._matplotlib.converter.year_start->period_break(dates_, 'year')
A:pandas.plotting._matplotlib.converter.hour_start->period_break(dates_, 'hour')
A:pandas.plotting._matplotlib.converter.minute_start->period_break(dates_, 'minute')
A:pandas.plotting._matplotlib.converter.week_start->period_break(dates_, 'week')
A:pandas.plotting._matplotlib.converter.quarter_start->(dates_ % 3 == 0).nonzero()
A:pandas.plotting._matplotlib.converter.(min_anndef, maj_anndef)->_get_default_annual_spacing(span)
A:pandas.plotting._matplotlib.converter.info['val']->numpy.arange(vmin, vmax + 1)
A:pandas.plotting._matplotlib.converter.freq->get_freq(freq)
A:pandas.plotting._matplotlib.converter.fgroup->pandas._libs.tslibs.resolution.get_freq_group(freq)
A:pandas.plotting._matplotlib.converter.self.finder->get_finder(freq)
A:pandas.plotting._matplotlib.converter.self.plot_obj.date_axis_info->self.finder(vmin, vmax, self.freq)
A:pandas.plotting._matplotlib.converter.vi->tuple(self.axis.get_view_interval())
A:pandas.plotting._matplotlib.converter.(d, m)->divmod(vmin, base)
A:pandas.plotting._matplotlib.converter.(vmin, vmax)->tuple(self.axis.get_view_interval())
A:pandas.plotting._matplotlib.converter.format->numpy.compress(info['maj'], info)
A:pandas.plotting._matplotlib.converter.(vmin, vmax)vi->tuple(self.axis.get_view_interval())
A:pandas.plotting._matplotlib.converter.fmt->fmt.decode('utf-8').decode('utf-8')
A:pandas.plotting._matplotlib.converter.(s, ns)->divmod(x, 1000000000.0)
A:pandas.plotting._matplotlib.converter.(d, h)->divmod(h, 24)
A:pandas.plotting._matplotlib.converter.decimals->int(ns * 10 ** (n_decimals - 9))
A:pandas.plotting._matplotlib.converter.n_decimals->int(np.ceil(np.log10(100 * 1000000000.0 / (vmax - vmin))))
pandas.plotting._matplotlib.converter.DatetimeConverter(dates.DateConverter)
pandas.plotting._matplotlib.converter.DatetimeConverter._convert_1d(values,unit,axis)
pandas.plotting._matplotlib.converter.DatetimeConverter.axisinfo(unit,axis)
pandas.plotting._matplotlib.converter.DatetimeConverter.convert(values,unit,axis)
pandas.plotting._matplotlib.converter.MilliSecondLocator(self,tz)
pandas.plotting._matplotlib.converter.MilliSecondLocator.__init__(self,tz)
pandas.plotting._matplotlib.converter.MilliSecondLocator._get_interval(self)
pandas.plotting._matplotlib.converter.MilliSecondLocator._get_unit(self)
pandas.plotting._matplotlib.converter.MilliSecondLocator.autoscale(self)
pandas.plotting._matplotlib.converter.MilliSecondLocator.get_unit_generic(freq)
pandas.plotting._matplotlib.converter.PandasAutoDateFormatter(self,locator,tz=None,defaultfmt='%Y-%m-%d')
pandas.plotting._matplotlib.converter.PandasAutoDateFormatter.__init__(self,locator,tz=None,defaultfmt='%Y-%m-%d')
pandas.plotting._matplotlib.converter.PandasAutoDateLocator(dates.AutoDateLocator)
pandas.plotting._matplotlib.converter.PandasAutoDateLocator._get_unit(self)
pandas.plotting._matplotlib.converter.PandasAutoDateLocator.get_locator(self,dmin,dmax)
pandas.plotting._matplotlib.converter.PeriodConverter(dates.DateConverter)
pandas.plotting._matplotlib.converter.PeriodConverter._convert_1d(values,units,axis)
pandas.plotting._matplotlib.converter.PeriodConverter.convert(values,units,axis)
pandas.plotting._matplotlib.converter.TimeConverter(units.ConversionInterface)
pandas.plotting._matplotlib.converter.TimeConverter.axisinfo(unit,axis)
pandas.plotting._matplotlib.converter.TimeConverter.convert(value,unit,axis)
pandas.plotting._matplotlib.converter.TimeConverter.default_units(x,axis)
pandas.plotting._matplotlib.converter.TimeFormatter(self,locs)
pandas.plotting._matplotlib.converter.TimeFormatter.__init__(self,locs)
pandas.plotting._matplotlib.converter.TimeSeries_DateFormatter(self,freq,minor_locator=False,dynamic_mode=True,plot_obj=None)
pandas.plotting._matplotlib.converter.TimeSeries_DateFormatter.__init__(self,freq,minor_locator=False,dynamic_mode=True,plot_obj=None)
pandas.plotting._matplotlib.converter.TimeSeries_DateFormatter._set_default_format(self,vmin,vmax)
pandas.plotting._matplotlib.converter.TimeSeries_DateFormatter.set_locs(self,locs)
pandas.plotting._matplotlib.converter.TimeSeries_DateLocator(self,freq,minor_locator=False,dynamic_mode=True,base=1,quarter=1,month=1,day=1,plot_obj=None)
pandas.plotting._matplotlib.converter.TimeSeries_DateLocator.__init__(self,freq,minor_locator=False,dynamic_mode=True,base=1,quarter=1,month=1,day=1,plot_obj=None)
pandas.plotting._matplotlib.converter.TimeSeries_DateLocator._get_default_locs(self,vmin,vmax)
pandas.plotting._matplotlib.converter.TimeSeries_DateLocator.autoscale(self)
pandas.plotting._matplotlib.converter.TimeSeries_TimedeltaFormatter(self,x,pos=0)
pandas.plotting._matplotlib.converter.TimeSeries_TimedeltaFormatter.__call__(self,x,pos=0)
pandas.plotting._matplotlib.converter.TimeSeries_TimedeltaFormatter.format_timedelta_ticks(x,pos,n_decimals)
pandas.plotting._matplotlib.converter._annual_finder(vmin,vmax,freq)
pandas.plotting._matplotlib.converter._daily_finder(vmin,vmax,freq)
pandas.plotting._matplotlib.converter._dt_to_float_ordinal(dt)
pandas.plotting._matplotlib.converter._from_ordinal(x,tz=None)
pandas.plotting._matplotlib.converter._get_default_annual_spacing(nyears)
pandas.plotting._matplotlib.converter._monthly_finder(vmin,vmax,freq)
pandas.plotting._matplotlib.converter._quarterly_finder(vmin,vmax,freq)
pandas.plotting._matplotlib.converter._to_ordinalf(tm)
pandas.plotting._matplotlib.converter.deregister()
pandas.plotting._matplotlib.converter.get_datevalue(date,freq)
pandas.plotting._matplotlib.converter.get_finder(freq)
pandas.plotting._matplotlib.converter.get_pairs()
pandas.plotting._matplotlib.converter.has_level_label(label_flags,vmin)
pandas.plotting._matplotlib.converter.pandas_converters()
pandas.plotting._matplotlib.converter.period_break(dates,period)
pandas.plotting._matplotlib.converter.register()
pandas.plotting._matplotlib.converter.register_pandas_matplotlib_converters(func)
pandas.plotting._matplotlib.converter.time2num(d)
pandas.plotting._matplotlib.deregister()
pandas.plotting._matplotlib.register()
pandas.plotting._matplotlib.register_pandas_matplotlib_converters(func)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/plotting/_matplotlib/misc.py----------------------------------------
A:pandas.plotting._matplotlib.misc.df->frame.drop(class_column, axis=1)
A:pandas.plotting._matplotlib.misc.(fig, axes)->_subplots(naxes=naxes, figsize=figsize, ax=ax, squeeze=False)
A:pandas.plotting._matplotlib.misc.mask->notna(df)
A:pandas.plotting._matplotlib.misc.marker->_get_marker_compat(marker)
A:pandas.plotting._matplotlib.misc.gkde->gaussian_kde(y)
A:pandas.plotting._matplotlib.misc.ind->numpy.linspace(y.min(), y.max(), 1000)
A:pandas.plotting._matplotlib.misc.locs->locs.astype(int).astype(int)
A:pandas.plotting._matplotlib.misc.lim0->axes[0][0].get_ylim()
A:pandas.plotting._matplotlib.misc.a->min(series)
A:pandas.plotting._matplotlib.misc.b->max(series)
A:pandas.plotting._matplotlib.misc.n->len(series)
A:pandas.plotting._matplotlib.misc.classes->sorted(classes)
A:pandas.plotting._matplotlib.misc.ax->matplotlib.pyplot.gca(xlim=(1, n), ylim=(-1.0, 1.0))
A:pandas.plotting._matplotlib.misc.colors->dict(zip(classes, color_values))
A:pandas.plotting._matplotlib.misc.s->numpy.array([(np.cos(t), np.sin(t)) for t in [2.0 * np.pi * (i / float(m)) for i in range(m)]])
A:pandas.plotting._matplotlib.misc.row_->numpy.repeat(np.expand_dims(row, axis=1), 2, axis=1)
A:pandas.plotting._matplotlib.misc.coeffs->numpy.delete(np.copy(amplitudes), 0)
A:pandas.plotting._matplotlib.misc.trig_args->numpy.outer(harmonics, t)
A:pandas.plotting._matplotlib.misc.t->numpy.linspace(-np.pi, np.pi, samples)
A:pandas.plotting._matplotlib.misc.used_legends->set()
A:pandas.plotting._matplotlib.misc.color_values->sorted(color_values)
A:pandas.plotting._matplotlib.misc.f->function(row)
A:pandas.plotting._matplotlib.misc.y->f(t)
A:pandas.plotting._matplotlib.misc.label->pprint_thing(kls)
A:pandas.plotting._matplotlib.misc.data->numpy.asarray(series)
A:pandas.plotting._matplotlib.misc.means->numpy.array([np.mean(sampling) for sampling in samplings])
A:pandas.plotting._matplotlib.misc.medians->numpy.array([np.median(sampling) for sampling in samplings])
A:pandas.plotting._matplotlib.misc.midranges->numpy.array([(min(sampling) + max(sampling)) * 0.5 for sampling in samplings])
A:pandas.plotting._matplotlib.misc.fig->matplotlib.pyplot.figure()
A:pandas.plotting._matplotlib.misc.x->list(range(ncols))
A:pandas.plotting._matplotlib.misc.ax1->matplotlib.pyplot.figure().add_subplot(2, 3, 1)
A:pandas.plotting._matplotlib.misc.ax2->matplotlib.pyplot.figure().add_subplot(2, 3, 2)
A:pandas.plotting._matplotlib.misc.ax3->matplotlib.pyplot.figure().add_subplot(2, 3, 3)
A:pandas.plotting._matplotlib.misc.ax4->matplotlib.pyplot.figure().add_subplot(2, 3, 4)
A:pandas.plotting._matplotlib.misc.ax5->matplotlib.pyplot.figure().add_subplot(2, 3, 5)
A:pandas.plotting._matplotlib.misc.ax6->matplotlib.pyplot.figure().add_subplot(2, 3, 6)
A:pandas.plotting._matplotlib.misc.ncols->len(df.columns)
A:pandas.plotting._matplotlib.misc.mean->numpy.mean(data)
pandas.plotting._matplotlib.andrews_curves(frame,class_column,ax=None,samples=200,color=None,colormap=None,**kwds)
pandas.plotting._matplotlib.autocorrelation_plot(series,ax=None,**kwds)
pandas.plotting._matplotlib.bootstrap_plot(series,fig=None,size=50,samples=500,**kwds)
pandas.plotting._matplotlib.lag_plot(series,lag=1,ax=None,**kwds)
pandas.plotting._matplotlib.misc._get_marker_compat(marker)
pandas.plotting._matplotlib.misc.andrews_curves(frame,class_column,ax=None,samples=200,color=None,colormap=None,**kwds)
pandas.plotting._matplotlib.misc.autocorrelation_plot(series,ax=None,**kwds)
pandas.plotting._matplotlib.misc.bootstrap_plot(series,fig=None,size=50,samples=500,**kwds)
pandas.plotting._matplotlib.misc.lag_plot(series,lag=1,ax=None,**kwds)
pandas.plotting._matplotlib.misc.parallel_coordinates(frame,class_column,cols=None,ax=None,color=None,use_columns=False,xticks=None,colormap=None,axvlines=True,axvlines_kwds=None,sort_labels=False,**kwds)
pandas.plotting._matplotlib.misc.radviz(frame,class_column,ax=None,color=None,colormap=None,**kwds)
pandas.plotting._matplotlib.misc.scatter_matrix(frame,alpha=0.5,figsize=None,ax=None,grid=False,diagonal='hist',marker='.',density_kwds=None,hist_kwds=None,range_padding=0.05,**kwds)
pandas.plotting._matplotlib.parallel_coordinates(frame,class_column,cols=None,ax=None,color=None,use_columns=False,xticks=None,colormap=None,axvlines=True,axvlines_kwds=None,sort_labels=False,**kwds)
pandas.plotting._matplotlib.radviz(frame,class_column,ax=None,color=None,colormap=None,**kwds)
pandas.plotting._matplotlib.scatter_matrix(frame,alpha=0.5,figsize=None,ax=None,grid=False,diagonal='hist',marker='.',density_kwds=None,hist_kwds=None,range_padding=0.05,**kwds)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/plotting/_matplotlib/compat.py----------------------------------------
A:pandas.plotting._matplotlib.compat._mpl_ge_2_2_3->_mpl_version('2.2.3', operator.ge)
A:pandas.plotting._matplotlib.compat._mpl_ge_3_0_0->_mpl_version('3.0.0', operator.ge)
A:pandas.plotting._matplotlib.compat._mpl_ge_3_1_0->_mpl_version('3.1.0', operator.ge)
A:pandas.plotting._matplotlib.compat._mpl_ge_3_2_0->_mpl_version('3.2.0', operator.ge)
pandas.plotting._matplotlib.compat._mpl_version(version,op)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/plotting/_matplotlib/timeseries.py----------------------------------------
A:pandas.plotting._matplotlib.timeseries.(freq, ax_freq)->_get_freq(ax, series)
A:pandas.plotting._matplotlib.timeseries.series->series.copy().copy()
A:pandas.plotting._matplotlib.timeseries.series.index->series.copy().copy().index.asfreq(ax_freq, how='s')
A:pandas.plotting._matplotlib.timeseries.how->kwargs.pop('how', 'last')
A:pandas.plotting._matplotlib.timeseries.legend->ax.get_legend()
A:pandas.plotting._matplotlib.timeseries.(lines, labels)->_replot_ax(ax, freq, kwargs)
A:pandas.plotting._matplotlib.timeseries.(rlines, rlabels)->_replot_ax(other_ax, freq, kwargs)
A:pandas.plotting._matplotlib.timeseries.title->ax.get_legend().get_title().get_text()
A:pandas.plotting._matplotlib.timeseries.data->data.tz_localize(None).to_period(freq=freq).tz_localize(None).to_period(freq=freq)
A:pandas.plotting._matplotlib.timeseries.idx->series.copy().copy().index.asfreq(freq, how='S')
A:pandas.plotting._matplotlib.timeseries.xaxis->ax.get_xaxis()
A:pandas.plotting._matplotlib.timeseries.ax_freq->_get_ax_freq(ax)
A:pandas.plotting._matplotlib.timeseries.shared_axes->ax.get_shared_x_axes().get_siblings(ax)
A:pandas.plotting._matplotlib.timeseries.freq->pandas.tseries.frequencies.get_period_alias(freq)
A:pandas.plotting._matplotlib.timeseries.base->get_freq(freq)
A:pandas.plotting._matplotlib.timeseries.weekdays->numpy.unique(data.index.dayofweek)
A:pandas.plotting._matplotlib.timeseries.data.index->data.tz_localize(None).to_period(freq=freq).tz_localize(None).to_period(freq=freq).index.asfreq(freq=freq)
A:pandas.plotting._matplotlib.timeseries.time_period->Period(ordinal=int(t), freq=freq)
A:pandas.plotting._matplotlib.timeseries.majlocator->TimeSeries_DateLocator(freq, dynamic_mode=True, minor_locator=False, plot_obj=subplot)
A:pandas.plotting._matplotlib.timeseries.minlocator->TimeSeries_DateLocator(freq, dynamic_mode=True, minor_locator=True, plot_obj=subplot)
A:pandas.plotting._matplotlib.timeseries.majformatter->TimeSeries_DateFormatter(freq, dynamic_mode=True, minor_locator=False, plot_obj=subplot)
A:pandas.plotting._matplotlib.timeseries.minformatter->TimeSeries_DateFormatter(freq, dynamic_mode=True, minor_locator=True, plot_obj=subplot)
A:pandas.plotting._matplotlib.timeseries.subplot.format_coord->functools.partial(_format_coord, freq)
pandas.plotting._matplotlib.timeseries._decorate_axes(ax,freq,kwargs)
pandas.plotting._matplotlib.timeseries._format_coord(freq,t,y)
pandas.plotting._matplotlib.timeseries._get_ax_freq(ax)
pandas.plotting._matplotlib.timeseries._get_freq(ax,series)
pandas.plotting._matplotlib.timeseries._get_index_freq(data)
pandas.plotting._matplotlib.timeseries._is_sub(f1,f2)
pandas.plotting._matplotlib.timeseries._is_sup(f1,f2)
pandas.plotting._matplotlib.timeseries._maybe_convert_index(ax,data)
pandas.plotting._matplotlib.timeseries._maybe_resample(series,ax,kwargs)
pandas.plotting._matplotlib.timeseries._replot_ax(ax,freq,kwargs)
pandas.plotting._matplotlib.timeseries._upsample_others(ax,freq,kwargs)
pandas.plotting._matplotlib.timeseries._use_dynamic_x(ax,data)
pandas.plotting._matplotlib.timeseries.format_dateaxis(subplot,freq,index)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/plotting/_matplotlib/tools.py----------------------------------------
A:pandas.plotting._matplotlib.tools.fig->fig.add_subplot(nrows, ncols, i + 1, **kwds).get_figure()
A:pandas.plotting._matplotlib.tools.data->data.to_frame().to_frame()
A:pandas.plotting._matplotlib.tools.table->matplotlib.table.table(ax, cellText=cellText, rowLabels=rowLabels, colLabels=colLabels, **kwargs)
A:pandas.plotting._matplotlib.tools.ax->fig.add_subplot(nrows, ncols, i + 1, **kwds).get_figure().add_subplot(nrows, ncols, i + 1, **kwds)
A:pandas.plotting._matplotlib.tools.(nrows, ncols)->_get_layout(naxes, layout=layout, layout_type=layout_type)
A:pandas.plotting._matplotlib.tools.axarr->numpy.empty(nplots, dtype=object)
A:pandas.plotting._matplotlib.tools.ax0->fig.add_subplot(nrows, ncols, i + 1, **kwds).get_figure().add_subplot(nrows, ncols, 1, **subplot_kw)
A:pandas.plotting._matplotlib.tools.kwds->subplot_kw.copy()
A:pandas.plotting._matplotlib.tools.axes->numpy.empty(nplots, dtype=object).reshape(nrows, ncols)
A:pandas.plotting._matplotlib.tools.layout->numpy.zeros((nrows + 1, ncols + 1), dtype=np.bool)
A:pandas.plotting._matplotlib.tools.layout[row_num(ax), col_num(ax)]->fig.add_subplot(nrows, ncols, i + 1, **kwds).get_figure().add_subplot(nrows, ncols, i + 1, **kwds).get_visible()
A:pandas.plotting._matplotlib.tools.lines->fig.add_subplot(nrows, ncols, i + 1, **kwds).get_figure().add_subplot(nrows, ncols, i + 1, **kwds).get_lines()
A:pandas.plotting._matplotlib.tools.x->l.get_xdata(orig=False)
A:pandas.plotting._matplotlib.tools.left->min(np.nanmin(x), left)
A:pandas.plotting._matplotlib.tools.right->max(np.nanmax(x), right)
pandas.plotting._matplotlib.table(ax,data,rowLabels=None,colLabels=None,**kwargs)
pandas.plotting._matplotlib.tools._flatten(axes)
pandas.plotting._matplotlib.tools._get_all_lines(ax)
pandas.plotting._matplotlib.tools._get_layout(nplots,layout=None,layout_type='box')
pandas.plotting._matplotlib.tools._get_xlim(lines)
pandas.plotting._matplotlib.tools._handle_shared_axes(axarr,nplots,naxes,nrows,ncols,sharex,sharey)
pandas.plotting._matplotlib.tools._remove_labels_from_axis(axis)
pandas.plotting._matplotlib.tools._set_ticks_props(axes,xlabelsize=None,xrot=None,ylabelsize=None,yrot=None)
pandas.plotting._matplotlib.tools._subplots(naxes=None,sharex=False,sharey=False,squeeze=True,subplot_kw=None,ax=None,layout=None,layout_type='box',**fig_kw)
pandas.plotting._matplotlib.tools.format_date_labels(ax,rot)
pandas.plotting._matplotlib.tools.table(ax,data,rowLabels=None,colLabels=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/arrays/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/clipboards.py----------------------------------------
A:pandas.io.clipboards.encoding->kwargs.pop('encoding', 'utf-8')
A:pandas.io.clipboards.text->StringIO().getvalue()
A:pandas.io.clipboards.buf->StringIO()
A:pandas.io.clipboards.objstr->str(obj)
pandas.io.clipboards.read_clipboard(sep='\\s+',**kwargs)
pandas.io.clipboards.to_clipboard(obj,excel=True,sep=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/feather_format.py----------------------------------------
A:pandas.io.feather_format.path->stringify_path(path)
A:pandas.io.feather_format.typ->type(df.index)
pandas.io.feather_format.read_feather(path,columns=None,use_threads:bool=True)
pandas.io.feather_format.to_feather(df:DataFrame,path)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/pytables.py----------------------------------------
A:pandas.io.pytables.s->super().read(where=where, columns=columns, start=start, stop=stop)
A:pandas.io.pytables.name->getattr(values, 'name', None)
A:pandas.io.pytables.where->numpy.asarray(where)
A:pandas.io.pytables.path_or_buf->stringify_path(path_or_buf)
A:pandas.io.pytables.exists->os.path.exists(path_or_buf)
A:pandas.io.pytables.store->HDFStore(path_or_buf, mode=mode, errors=errors, **kwargs)
A:pandas.io.pytables.groups->list(diff[diff > 1].index)
A:pandas.io.pytables.tables->_tables()
A:pandas.io.pytables.self._path->stringify_path(path)
A:pandas.io.pytables.node->getattr(self.group, f'block{i}_items')
A:pandas.io.pytables.pstr->pprint_thing(self._path)
A:pandas.io.pytables.self._filters->_tables().Filters(self._complevel, self._complib, fletcher32=self._fletcher32)
A:pandas.io.pytables.self._handle->_tables().open_file(self._path, 'r', **kwargs)
A:pandas.io.pytables.hdf_version->_tables().get_hdf5_version()
A:pandas.io.pytables.err->ValueError(f'PyTables [{tables.__version__}] no longer supports opening multiple files\neven in read-only mode on this HDF5 version [{hdf_version}]. You can accept this\nand not open the same file multiple times at once,\nupgrade the HDF5 version, or downgrade to PyTables 3.0.0 which allows\nfiles to be opened multiple times at once\n')
A:pandas.io.pytables.group->self._handle.create_group(path, p)
A:pandas.io.pytables.it->TableIterator(self, s, func, where=where, nrows=nrows, start=start, stop=stop, iterator=iterator, chunksize=chunksize, auto_close=auto_close)
A:pandas.io.pytables.tbl->self.get_storer(key)
A:pandas.io.pytables.format->self._validate_format(format)
A:pandas.io.pytables.dropna->get_option('io.hdf.dropna_table')
A:pandas.io.pytables.ordd->sorted(ordered.get_indexer(ordd))
A:pandas.io.pytables.d[remain_key]->ordered.take(ordd)
A:pandas.io.pytables.valid_index->valid_index.intersection(index).intersection(index)
A:pandas.io.pytables.val->getattr(self, key, None).reindex(v, axis=axis)
A:pandas.io.pytables.pandas_type->getattr(child._v_attrs, 'pandas_type', None)
A:pandas.io.pytables.new_store->HDFStore(file, mode=mode, complib=complib, complevel=complevel, fletcher32=fletcher32)
A:pandas.io.pytables.keys->list(self.keys())
A:pandas.io.pytables.data->numpy.asarray(data)
A:pandas.io.pytables.path->pprint_thing(self._path)
A:pandas.io.pytables.lkeys->sorted(self.keys())
A:pandas.io.pytables.dstr->pprint_thing(detail)
A:pandas.io.pytables.pt->_ensure_decoded(getattr(group._v_attrs, 'pandas_type', None))
A:pandas.io.pytables.tt->_ensure_decoded(getattr(group._v_attrs, 'table_type', None))
A:pandas.io.pytables.index->numpy.asarray(data[0])
A:pandas.io.pytables.paths->key.split('/')
A:pandas.io.pytables.stop->min(current + self.chunksize, self.stop)
A:pandas.io.pytables.self.chunksize->int(chunksize)
A:pandas.io.pytables.value->getattr(self, key, None)
A:pandas.io.pytables.self.coordinates->self.s.read_coordinates(where=self.where)
A:pandas.io.pytables.results->self.func(self.start, self.stop, where)
A:pandas.io.pytables.temp->tuple(map(pprint_thing, (self.name, self.cname, self.dtype, self.kind, self.shape)))
A:pandas.io.pytables.val_kind->_ensure_decoded(self.kind)
A:pandas.io.pytables.values->conv(values)
A:pandas.io.pytables.kwargs->dict()
A:pandas.io.pytables.kwargs['name']->_ensure_decoded(self.index_name)
A:pandas.io.pytables.kwargs['freq']->_ensure_decoded(self.freq)
A:pandas.io.pytables.new_pd_index->_set_tz(new_pd_index, self.tz)
A:pandas.io.pytables.min_itemsize->int(min_itemsize.get(name) or min_itemsize.get('values') or 0)
A:pandas.io.pytables.self.typ->_tables().StringCol(itemsize=min_itemsize, pos=self.pos)
A:pandas.io.pytables.existing_kind->getattr(self.attrs, self.kind_attr, None)
A:pandas.io.pytables.idx->new_info.setdefault(idx, {}).get(self.name)
A:pandas.io.pytables.existing_value->new_info.setdefault(idx, {}).get(self.name).get(key)
A:pandas.io.pytables.cur_metadata->handler.read_metadata(self.cname)
A:pandas.io.pytables.(data, dtype_name)->_get_data_and_dtype_name(data_converted)
A:pandas.io.pytables.self.kind->_dtype_to_kind(dtype_name)
A:pandas.io.pytables.atom->_tables().ObjectAtom()
A:pandas.io.pytables.kcap->_dtype_to_kind(dtype_name).capitalize()
A:pandas.io.pytables.existing_fields->getattr(self.attrs, self.kind_attr, None)
A:pandas.io.pytables.existing_dtype->getattr(self.attrs, self.dtype_attr, None)
A:pandas.io.pytables.(converted, dtype_name)->_get_data_and_dtype_name(index)
A:pandas.io.pytables.kind->_dtype_to_kind(dtype_name)
A:pandas.io.pytables.meta->getattr(table_attrs, f'{adj_name}_meta', None)
A:pandas.io.pytables.dtype->getattr(table_attrs, f'{adj_name}_dtype', None)
A:pandas.io.pytables.converted->_convert_string_array(values, encoding, errors)
A:pandas.io.pytables.codes->_convert_string_array(values, encoding, errors).ravel()
A:pandas.io.pytables.categories->Index([], dtype=np.float64)
A:pandas.io.pytables.mask->mask.ravel().ravel()
A:pandas.io.pytables.self.encoding->_ensure_encoding(getattr(self.attrs, 'encoding', None))
A:pandas.io.pytables.version->tuple((int(x) for x in version.split('.')))
A:pandas.io.pytables.jshape->','.join((pprint_thing(x) for x in s))
A:pandas.io.pytables.self.attrs.pandas_type->str(self.pandas_kind)
A:pandas.io.pytables.self.attrs.pandas_version->str(_version)
A:pandas.io.pytables.new_self->copy.copy(self)
A:pandas.io.pytables.result->self._read_axes(where=where, start=start, stop=stop)
A:pandas.io.pytables.self.errors->_ensure_decoded(getattr(self.attrs, 'errors', 'strict'))
A:pandas.io.pytables.transposed->getattr(attrs, 'transposed', False)
A:pandas.io.pytables.shape->list(shape[0:ndim - 1])
A:pandas.io.pytables.ret->numpy.asarray(ret, dtype='m8[ns]')
A:pandas.io.pytables.tz->pandas._libs.tslibs.timezones.get_timezone(_ensure_decoded(tz))
A:pandas.io.pytables.variety->_ensure_decoded(getattr(self.attrs, f'{key}_variety'))
A:pandas.io.pytables.node._v_attrs.index_class->self._class_to_alias(type(index))
A:pandas.io.pytables.node._v_attrs.tz->_get_tz(value.tz)
A:pandas.io.pytables.conv_level->_convert_index(level_key, lev, self.encoding, self.errors)
A:pandas.io.pytables.nlevels->getattr(self.attrs, f'{key}_nlevels')
A:pandas.io.pytables.lev->self.read_index_node(node, start=start, stop=stop)
A:pandas.io.pytables.level_codes->self.read_array(label_key, start=start, stop=stop)
A:pandas.io.pytables.index_class->self._alias_to_class(_ensure_decoded(getattr(node._v_attrs, 'index_class', '')))
A:pandas.io.pytables.factory->self._get_index_factory(index_class)
A:pandas.io.pytables.kwargs['tz']->getattr(self.group, f'block{i}_items')._v_attrs['tz'].decode('utf-8')
A:pandas.io.pytables.arr->numpy.empty((1,) * value.ndim)
A:pandas.io.pytables.node._v_attrs.value_type->str(value.dtype)
A:pandas.io.pytables.ca->self._handle.create_carray(self.group, key, atom, value.shape, filters=self._filters)
A:pandas.io.pytables.inferred_type->pandas._libs.lib.infer_dtype(col.ravel(), skipna=False)
A:pandas.io.pytables.vlarr->self._handle.create_vlarray(self.group, key, _tables().ObjectAtom())
A:pandas.io.pytables.select_axis->self.obj_type()._get_block_manager_axis(0)
A:pandas.io.pytables.ax->obj.to_frame(name)._get_axis(axis)
A:pandas.io.pytables.blk_items->get_blk_items(mgr, blocks)
A:pandas.io.pytables.df->df.set_index(self.levels).set_index(self.levels)
A:pandas.io.pytables.out->out.reindex(columns=items, copy=False).reindex(columns=items, copy=False)
A:pandas.io.pytables.self.attrs.nblocks->len(data.blocks)
A:pandas.io.pytables.jver->'.'.join((str(x) for x in self.version))
A:pandas.io.pytables.jindex_axes->','.join((a.name for a in self.index_axes))
A:pandas.io.pytables.sv->getattr(self, c, None)
A:pandas.io.pytables.ov->getattr(other, c, None)
A:pandas.io.pytables.self.attrs.table_type->str(self.table_type)
A:pandas.io.pytables.self.attrs.index_cols->self.index_cols()
A:pandas.io.pytables.self.attrs.values_cols->self.values_cols()
A:pandas.io.pytables.self.nan_rep->getattr(self.attrs, 'nan_rep', None)
A:pandas.io.pytables.q->self.table.queryables()
A:pandas.io.pytables.md->self.read_metadata(n)
A:pandas.io.pytables.index_col->GenericIndexCol(name='index', axis=0, table=self.table, meta=meta, metadata=md)
A:pandas.io.pytables.dc->GenericDataIndexableCol(name=n, pos=i, values=[n], typ=atom, table=self.table, meta=meta, metadata=md)
A:pandas.io.pytables.base_pos->len(_indexables)
A:pandas.io.pytables.adj_name->_maybe_adjust_name(new_name, self.version)
A:pandas.io.pytables.obj->obj.to_frame(name).to_frame(name)
A:pandas.io.pytables.kw->dict()
A:pandas.io.pytables.v->getattr(table.cols, c, None)
A:pandas.io.pytables.selection->Selection(self, where=where, start=start, stop=stop)
A:pandas.io.pytables.res->a.convert(values, nan_rep=self.nan_rep, encoding=self.encoding, errors=self.errors)
A:pandas.io.pytables.info->new_info.setdefault(idx, {})
A:pandas.io.pytables.data_columns->obj.to_frame(name).to_frame(name).columns.tolist()
A:pandas.io.pytables.existing_data_columns->set(data_columns)
A:pandas.io.pytables.append_axis->list(a)
A:pandas.io.pytables.indexer->len(new_non_index_axes)
A:pandas.io.pytables.info['names']->list(a.names)
A:pandas.io.pytables.new_index->_convert_index(axis_name, a, self.encoding, self.errors)
A:pandas.io.pytables.j->len(new_index_axes)
A:pandas.io.pytables.block_obj->self.get_object(obj, transposed)._consolidate()
A:pandas.io.pytables.(blocks, blk_items)->self._get_blocks_and_items(block_obj, table_exists, new_non_index_axes, self.values_axes, data_columns)
A:pandas.io.pytables.data_converted->data_converted.astype(f'|S{itemsize}', copy=False).astype(f'|S{itemsize}', copy=False)
A:pandas.io.pytables.typ->klass._get_atom(data_converted)
A:pandas.io.pytables.metadata->numpy.array(data_converted.categories, copy=False).ravel()
A:pandas.io.pytables.col->block.fillna(nan_rep, downcast=False).iget(i)
A:pandas.io.pytables.new_table->type(self)(parent=self.parent, group=self.group, encoding=self.encoding, errors=self.errors, index_axes=new_index_axes, non_index_axes=new_non_index_axes, values_axes=vaxes, data_columns=dcs, info=new_info, nan_rep=nan_rep)
A:pandas.io.pytables.new_labels->Index(axis_labels).difference(Index(data_columns))
A:pandas.io.pytables.blocks->list(mgr.blocks)
A:pandas.io.pytables.items->tuple(ea.values)
A:pandas.io.pytables.(b, b_items)->by_items.pop(items)
A:pandas.io.pytables.jitems->','.join((pprint_thing(item) for item in items))
A:pandas.io.pytables.columns->list(columns)
A:pandas.io.pytables.axis_number->obj.to_frame(name).to_frame(name)._get_axis_number(axis_name)
A:pandas.io.pytables.axis_values->obj.to_frame(name).to_frame(name)._get_axis(axis_name)
A:pandas.io.pytables.filt->ensure_index(filt)
A:pandas.io.pytables.takers->op(values, filt)
A:pandas.io.pytables.expectedrows->max(self.nrows_expected, 10000)
A:pandas.io.pytables.d->dict(name='table', expectedrows=expectedrows)
A:pandas.io.pytables.filters->_tables().Filters(complevel=complevel, complib=complib, fletcher32=fletcher32 or self._fletcher32)
A:pandas.io.pytables.coords->Selection(self, where=where, start=start, stop=stop).select_coords()
A:pandas.io.pytables.c->getattr(self.table.cols, column)
A:pandas.io.pytables.col_values->a.convert(c[start:stop], nan_rep=self.nan_rep, encoding=self.encoding, errors=self.errors)
A:pandas.io.pytables.table->self._create_axes(axes=axes, obj=obj, validate=append, min_itemsize=min_itemsize, nan_rep=nan_rep, data_columns=data_columns)
A:pandas.io.pytables.options->self._create_axes(axes=axes, obj=obj, validate=append, min_itemsize=min_itemsize, nan_rep=nan_rep, data_columns=data_columns).create_description(complib=complib, complevel=complevel, fletcher32=fletcher32, expectedrows=expectedrows)
A:pandas.io.pytables.nindexes->len(indexes)
A:pandas.io.pytables.rows->Series(values).sort_values().take(range(g, pg))
A:pandas.io.pytables.end_i->min((i + 1) * chunksize, nrows)
A:pandas.io.pytables.nrows->self.table.remove_rows(start=start, stop=stop)
A:pandas.io.pytables.sorted_series->Series(values).sort_values()
A:pandas.io.pytables.ln->len(sorted_series)
A:pandas.io.pytables.diff->Series(values).sort_values().diff()
A:pandas.io.pytables.pg->list(diff[diff > 1].index).pop()
A:pandas.io.pytables.cols->list(self.levels)
A:pandas.io.pytables.names->new_info.setdefault(idx, {}).get('names')
A:pandas.io.pytables.cols_->Index(index, name=getattr(index, 'name', None))
A:pandas.io.pytables.index_->Index(index, name=getattr(index, 'name', None))
A:pandas.io.pytables.(obj, self.levels)->self.validate_multiindex(obj)
A:pandas.io.pytables._re_levels->re.compile('^level_\\d+$')
A:pandas.io.pytables.df.index->df.set_index(self.levels).set_index(self.levels).index.set_names([None if self._re_levels.search(l) else l for l in df.index.names])
A:pandas.io.pytables.labels->ensure_index(other.unique()).intersection(labels, sort=False)
A:pandas.io.pytables.other->ensure_index(other)
A:pandas.io.pytables.zone->pandas._libs.tslibs.timezones.get_timezone(tz)
A:pandas.io.pytables.block->block.fillna(nan_rep, downcast=False).fillna(nan_rep, downcast=False)
A:pandas.io.pytables.itemsize->pandas._libs.writers.max_len_string_array(ensure_object(data))
A:pandas.io.pytables.eci->existing_col.validate_col(itemsize)
A:pandas.io.pytables.ensured->ensure_object(data.ravel())
A:pandas.io.pytables.conv->_get_converter(val_kind, encoding, errors)
A:pandas.io.pytables.m->re.search('values_block_(\\d+)', name)
A:pandas.io.pytables.dtype_str->_ensure_decoded(dtype_str)
A:pandas.io.pytables.inferred->pandas._libs.lib.infer_dtype(where, skipna=False)
A:pandas.io.pytables.self.terms->self.generate(where)
A:pandas.io.pytables.(self.condition, self.filter)->self.terms.evaluate()
A:pandas.io.pytables.qkeys->','.join(q.keys())
pandas.io.pytables.AppendableFrameTable(AppendableTable)
pandas.io.pytables.AppendableFrameTable.get_object(cls,obj,transposed:bool)
pandas.io.pytables.AppendableFrameTable.is_transposed(self)->bool
pandas.io.pytables.AppendableFrameTable.read(self,where=None,columns=None,start:Optional[int]=None,stop:Optional[int]=None)
pandas.io.pytables.AppendableMultiFrameTable(AppendableFrameTable)
pandas.io.pytables.AppendableMultiFrameTable.read(self,where=None,columns=None,start:Optional[int]=None,stop:Optional[int]=None)
pandas.io.pytables.AppendableMultiFrameTable.table_type_short(self)->str
pandas.io.pytables.AppendableMultiFrameTable.write(self,obj,data_columns=None,**kwargs)
pandas.io.pytables.AppendableMultiSeriesTable(AppendableSeriesTable)
pandas.io.pytables.AppendableMultiSeriesTable.write(self,obj,**kwargs)
pandas.io.pytables.AppendableSeriesTable(AppendableFrameTable)
pandas.io.pytables.AppendableSeriesTable.get_object(cls,obj,transposed:bool)
pandas.io.pytables.AppendableSeriesTable.is_transposed(self)->bool
pandas.io.pytables.AppendableSeriesTable.read(self,where=None,columns=None,start:Optional[int]=None,stop:Optional[int]=None)->Series
pandas.io.pytables.AppendableSeriesTable.write(self,obj,data_columns=None,**kwargs)
pandas.io.pytables.AppendableTable(Table)
pandas.io.pytables.AppendableTable.delete(self,where=None,start:Optional[int]=None,stop:Optional[int]=None)
pandas.io.pytables.AppendableTable.write(self,obj,axes=None,append=False,complib=None,complevel=None,fletcher32=None,min_itemsize=None,chunksize=None,expectedrows=None,dropna=False,nan_rep=None,data_columns=None)
pandas.io.pytables.AppendableTable.write_data(self,chunksize:Optional[int],dropna:bool=False)
pandas.io.pytables.AppendableTable.write_data_chunk(self,rows:np.ndarray,indexes:List[np.ndarray],mask:Optional[np.ndarray],values:List[np.ndarray])
pandas.io.pytables.AttributeConflictWarning(Warning)
pandas.io.pytables.BlockManagerFixed(GenericFixed)
pandas.io.pytables.BlockManagerFixed.read(self,where=None,columns=None,start:Optional[int]=None,stop:Optional[int]=None)
pandas.io.pytables.BlockManagerFixed.shape(self)
pandas.io.pytables.BlockManagerFixed.write(self,obj,**kwargs)
pandas.io.pytables.ClosedFileError(Exception)
pandas.io.pytables.DataCol(self,name:str,values=None,kind=None,typ=None,cname=None,pos=None,tz=None,ordered=None,table=None,meta=None,metadata=None,dtype=None,data=None)
pandas.io.pytables.DataCol.__eq__(self,other:Any)->bool
pandas.io.pytables.DataCol.__init__(self,name:str,values=None,kind=None,typ=None,cname=None,pos=None,tz=None,ordered=None,table=None,meta=None,metadata=None,dtype=None,data=None)
pandas.io.pytables.DataCol.__repr__(self)->str
pandas.io.pytables.DataCol._get_atom(cls,values:Union[np.ndarray,ABCExtensionArray])->'Col'
pandas.io.pytables.DataCol.convert(self,values:np.ndarray,nan_rep,encoding:str,errors:str)
pandas.io.pytables.DataCol.cvalues(self)
pandas.io.pytables.DataCol.dtype_attr(self)->str
pandas.io.pytables.DataCol.get_atom_coltype(cls,kind:str)->Type['Col']
pandas.io.pytables.DataCol.get_atom_data(cls,shape,kind:str)->'Col'
pandas.io.pytables.DataCol.get_atom_datetime64(cls,shape)
pandas.io.pytables.DataCol.get_atom_dt64(cls,shape)
pandas.io.pytables.DataCol.get_atom_string(cls,shape,itemsize)
pandas.io.pytables.DataCol.get_atom_timedelta64(cls,shape)
pandas.io.pytables.DataCol.meta_attr(self)->str
pandas.io.pytables.DataCol.set_attr(self)
pandas.io.pytables.DataCol.set_data(self,data:Union[np.ndarray,ABCExtensionArray])
pandas.io.pytables.DataCol.shape(self)
pandas.io.pytables.DataCol.take_data(self)
pandas.io.pytables.DataCol.validate_attr(self,append)
pandas.io.pytables.DataIndexableCol(DataCol)
pandas.io.pytables.DataIndexableCol.get_atom_data(cls,shape,kind:str)->'Col'
pandas.io.pytables.DataIndexableCol.get_atom_datetime64(cls,shape)
pandas.io.pytables.DataIndexableCol.get_atom_dt64(cls,shape)
pandas.io.pytables.DataIndexableCol.get_atom_string(cls,shape,itemsize)
pandas.io.pytables.DataIndexableCol.get_atom_timedelta64(cls,shape)
pandas.io.pytables.DataIndexableCol.validate_names(self)
pandas.io.pytables.DuplicateWarning(Warning)
pandas.io.pytables.Fixed(self,parent:HDFStore,group:'Node',encoding:str='UTF-8',errors:str='strict')
pandas.io.pytables.Fixed.__init__(self,parent:HDFStore,group:'Node',encoding:str='UTF-8',errors:str='strict')
pandas.io.pytables.Fixed.__repr__(self)->str
pandas.io.pytables.Fixed._complevel(self)->int
pandas.io.pytables.Fixed._filters(self)
pandas.io.pytables.Fixed._fletcher32(self)->bool
pandas.io.pytables.Fixed._handle(self)
pandas.io.pytables.Fixed.attrs(self)
pandas.io.pytables.Fixed.copy(self)
pandas.io.pytables.Fixed.delete(self,where=None,start:Optional[int]=None,stop:Optional[int]=None)
pandas.io.pytables.Fixed.get_attrs(self)
pandas.io.pytables.Fixed.infer_axes(self)
pandas.io.pytables.Fixed.is_exists(self)->bool
pandas.io.pytables.Fixed.is_old_version(self)->bool
pandas.io.pytables.Fixed.nrows(self)
pandas.io.pytables.Fixed.pandas_type(self)
pandas.io.pytables.Fixed.pathname(self)
pandas.io.pytables.Fixed.read(self,where=None,columns=None,start:Optional[int]=None,stop:Optional[int]=None)
pandas.io.pytables.Fixed.set_attrs(self)
pandas.io.pytables.Fixed.set_object_info(self)
pandas.io.pytables.Fixed.shape(self)
pandas.io.pytables.Fixed.storable(self)
pandas.io.pytables.Fixed.validate(self,other)
pandas.io.pytables.Fixed.validate_version(self,where=None)
pandas.io.pytables.Fixed.version(self)->Tuple[int, int, int]
pandas.io.pytables.Fixed.write(self,**kwargs)
pandas.io.pytables.FrameFixed(BlockManagerFixed)
pandas.io.pytables.GenericDataIndexableCol(DataIndexableCol)
pandas.io.pytables.GenericFixed(Fixed)
pandas.io.pytables.GenericFixed._alias_to_class(self,alias)
pandas.io.pytables.GenericFixed._class_to_alias(self,cls)->str
pandas.io.pytables.GenericFixed._get_index_factory(self,klass)
pandas.io.pytables.GenericFixed.get_attrs(self)
pandas.io.pytables.GenericFixed.is_exists(self)->bool
pandas.io.pytables.GenericFixed.read_array(self,key:str,start:Optional[int]=None,stop:Optional[int]=None)
pandas.io.pytables.GenericFixed.read_index(self,key:str,start:Optional[int]=None,stop:Optional[int]=None)->Index
pandas.io.pytables.GenericFixed.read_index_node(self,node:'Node',start:Optional[int]=None,stop:Optional[int]=None)->Index
pandas.io.pytables.GenericFixed.read_multi_index(self,key:str,start:Optional[int]=None,stop:Optional[int]=None)->MultiIndex
pandas.io.pytables.GenericFixed.set_attrs(self)
pandas.io.pytables.GenericFixed.validate_read(self,columns,where)
pandas.io.pytables.GenericFixed.write(self,obj,**kwargs)
pandas.io.pytables.GenericFixed.write_array(self,key:str,value:ArrayLike,items:Optional[Index]=None)
pandas.io.pytables.GenericFixed.write_array_empty(self,key:str,value:ArrayLike)
pandas.io.pytables.GenericFixed.write_index(self,key:str,index:Index)
pandas.io.pytables.GenericFixed.write_multi_index(self,key:str,index:MultiIndex)
pandas.io.pytables.GenericIndexCol(IndexCol)
pandas.io.pytables.GenericIndexCol.convert(self,values:np.ndarray,nan_rep,encoding:str,errors:str)
pandas.io.pytables.GenericIndexCol.is_indexed(self)->bool
pandas.io.pytables.GenericIndexCol.set_attr(self)
pandas.io.pytables.GenericTable(AppendableFrameTable)
pandas.io.pytables.GenericTable.get_attrs(self)
pandas.io.pytables.GenericTable.indexables(self)
pandas.io.pytables.GenericTable.pandas_type(self)->str
pandas.io.pytables.GenericTable.storable(self)
pandas.io.pytables.GenericTable.write(self,**kwargs)
pandas.io.pytables.HDFStore(self,path,mode:str='a',complevel:Optional[int]=None,complib=None,fletcher32:bool=False,**kwargs)
pandas.io.pytables.HDFStore.__contains__(self,key:str)->bool
pandas.io.pytables.HDFStore.__delitem__(self,key:str)
pandas.io.pytables.HDFStore.__enter__(self)
pandas.io.pytables.HDFStore.__exit__(self,exc_type,exc_value,traceback)
pandas.io.pytables.HDFStore.__fspath__(self)
pandas.io.pytables.HDFStore.__getattr__(self,name:str)
pandas.io.pytables.HDFStore.__getitem__(self,key:str)
pandas.io.pytables.HDFStore.__init__(self,path,mode:str='a',complevel:Optional[int]=None,complib=None,fletcher32:bool=False,**kwargs)
pandas.io.pytables.HDFStore.__iter__(self)
pandas.io.pytables.HDFStore.__len__(self)->int
pandas.io.pytables.HDFStore.__repr__(self)->str
pandas.io.pytables.HDFStore.__setitem__(self,key:str,value)
pandas.io.pytables.HDFStore._check_if_open(self)
pandas.io.pytables.HDFStore._create_storer(self,group,format=None,value:Optional[FrameOrSeries]=None,encoding:str='UTF-8',errors:str='strict')->Union['GenericFixed', 'Table']
pandas.io.pytables.HDFStore._read_group(self,group:'Node')
pandas.io.pytables.HDFStore._validate_format(self,format:str)->str
pandas.io.pytables.HDFStore._write_to_group(self,key:str,value:FrameOrSeries,format,axes=None,index=True,append=False,complib=None,complevel:Optional[int]=None,fletcher32=None,min_itemsize:Optional[Union[int,Dict[str,int]]]=None,chunksize=None,expectedrows=None,dropna=False,nan_rep=None,data_columns=None,encoding=None,errors:str='strict')
pandas.io.pytables.HDFStore.append(self,key:str,value:FrameOrSeries,format=None,axes=None,index=True,append=True,complib=None,complevel:Optional[int]=None,columns=None,min_itemsize:Optional[Union[int,Dict[str,int]]]=None,nan_rep=None,chunksize=None,expectedrows=None,dropna:Optional[bool]=None,data_columns:Optional[List[str]]=None,encoding=None,errors:str='strict')
pandas.io.pytables.HDFStore.append_to_multiple(self,d:Dict,value,selector,data_columns=None,axes=None,dropna=False,**kwargs)
pandas.io.pytables.HDFStore.close(self)
pandas.io.pytables.HDFStore.copy(self,file,mode='w',propindexes:bool=True,keys=None,complib=None,complevel:Optional[int]=None,fletcher32:bool=False,overwrite=True)
pandas.io.pytables.HDFStore.create_table_index(self,key:str,columns=None,optlevel:Optional[int]=None,kind:Optional[str]=None)
pandas.io.pytables.HDFStore.filename(self)
pandas.io.pytables.HDFStore.flush(self,fsync:bool=False)
pandas.io.pytables.HDFStore.get(self,key:str)
pandas.io.pytables.HDFStore.get_node(self,key:str)->Optional['Node']
pandas.io.pytables.HDFStore.get_storer(self,key:str)->Union['GenericFixed', 'Table']
pandas.io.pytables.HDFStore.groups(self)
pandas.io.pytables.HDFStore.info(self)->str
pandas.io.pytables.HDFStore.is_open(self)->bool
pandas.io.pytables.HDFStore.items(self)
pandas.io.pytables.HDFStore.keys(self)->List[str]
pandas.io.pytables.HDFStore.open(self,mode:str='a',**kwargs)
pandas.io.pytables.HDFStore.put(self,key:str,value:FrameOrSeries,format=None,index=True,append=False,complib=None,complevel:Optional[int]=None,min_itemsize:Optional[Union[int,Dict[str,int]]]=None,nan_rep=None,data_columns:Optional[List[str]]=None,encoding=None,errors:str='strict')
pandas.io.pytables.HDFStore.remove(self,key:str,where=None,start=None,stop=None)
pandas.io.pytables.HDFStore.root(self)
pandas.io.pytables.HDFStore.select(self,key:str,where=None,start=None,stop=None,columns=None,iterator=False,chunksize=None,auto_close:bool=False)
pandas.io.pytables.HDFStore.select_as_coordinates(self,key:str,where=None,start:Optional[int]=None,stop:Optional[int]=None)
pandas.io.pytables.HDFStore.select_as_multiple(self,keys,where=None,selector=None,columns=None,start=None,stop=None,iterator=False,chunksize=None,auto_close:bool=False)
pandas.io.pytables.HDFStore.select_column(self,key:str,column:str,start:Optional[int]=None,stop:Optional[int]=None)
pandas.io.pytables.HDFStore.walk(self,where='/')
pandas.io.pytables.IncompatibilityWarning(Warning)
pandas.io.pytables.IndexCol(self,name:str,values=None,kind=None,typ=None,cname:Optional[str]=None,axis=None,pos=None,freq=None,tz=None,index_name=None,ordered=None,table=None,meta=None,metadata=None)
pandas.io.pytables.IndexCol.__eq__(self,other:Any)->bool
pandas.io.pytables.IndexCol.__init__(self,name:str,values=None,kind=None,typ=None,cname:Optional[str]=None,axis=None,pos=None,freq=None,tz=None,index_name=None,ordered=None,table=None,meta=None,metadata=None)
pandas.io.pytables.IndexCol.__iter__(self)
pandas.io.pytables.IndexCol.__ne__(self,other)->bool
pandas.io.pytables.IndexCol.__repr__(self)->str
pandas.io.pytables.IndexCol.attrs(self)
pandas.io.pytables.IndexCol.col(self)
pandas.io.pytables.IndexCol.convert(self,values:np.ndarray,nan_rep,encoding:str,errors:str)
pandas.io.pytables.IndexCol.cvalues(self)
pandas.io.pytables.IndexCol.description(self)
pandas.io.pytables.IndexCol.is_indexed(self)->bool
pandas.io.pytables.IndexCol.itemsize(self)->int
pandas.io.pytables.IndexCol.kind_attr(self)->str
pandas.io.pytables.IndexCol.maybe_set_size(self,min_itemsize=None)
pandas.io.pytables.IndexCol.set_attr(self)
pandas.io.pytables.IndexCol.set_info(self,info)
pandas.io.pytables.IndexCol.set_pos(self,pos:int)
pandas.io.pytables.IndexCol.take_data(self)
pandas.io.pytables.IndexCol.update_info(self,info)
pandas.io.pytables.IndexCol.validate_and_set(self,handler:'AppendableTable',append:bool)
pandas.io.pytables.IndexCol.validate_attr(self,append:bool)
pandas.io.pytables.IndexCol.validate_col(self,itemsize=None)
pandas.io.pytables.IndexCol.validate_metadata(self,handler:'AppendableTable')
pandas.io.pytables.IndexCol.validate_names(self)
pandas.io.pytables.IndexCol.write_metadata(self,handler:'AppendableTable')
pandas.io.pytables.PossibleDataLossError(Exception)
pandas.io.pytables.Selection(self,table:Table,where=None,start:Optional[int]=None,stop:Optional[int]=None)
pandas.io.pytables.Selection.__init__(self,table:Table,where=None,start:Optional[int]=None,stop:Optional[int]=None)
pandas.io.pytables.Selection.generate(self,where)
pandas.io.pytables.Selection.select(self)
pandas.io.pytables.Selection.select_coords(self)
pandas.io.pytables.SeriesFixed(GenericFixed)
pandas.io.pytables.SeriesFixed.read(self,where=None,columns=None,start:Optional[int]=None,stop:Optional[int]=None)
pandas.io.pytables.SeriesFixed.shape(self)
pandas.io.pytables.SeriesFixed.write(self,obj,**kwargs)
pandas.io.pytables.Table(self,parent:HDFStore,group:'Node',encoding=None,errors:str='strict',index_axes=None,non_index_axes=None,values_axes=None,data_columns=None,info=None,nan_rep=None)
pandas.io.pytables.Table.__getitem__(self,c:str)
pandas.io.pytables.Table.__init__(self,parent:HDFStore,group:'Node',encoding=None,errors:str='strict',index_axes=None,non_index_axes=None,values_axes=None,data_columns=None,info=None,nan_rep=None)
pandas.io.pytables.Table.__repr__(self)->str
pandas.io.pytables.Table._create_axes(self,axes,obj:DataFrame,validate:bool=True,nan_rep=None,data_columns=None,min_itemsize=None)
pandas.io.pytables.Table._get_blocks_and_items(block_obj,table_exists,new_non_index_axes,values_axes,data_columns)
pandas.io.pytables.Table._get_metadata_path(self,key:str)->str
pandas.io.pytables.Table._read_axes(self,where,start:Optional[int]=None,stop:Optional[int]=None)->List[Tuple[ArrayLike, ArrayLike]]
pandas.io.pytables.Table.axes(self)
pandas.io.pytables.Table.create_description(self,complib,complevel:Optional[int],fletcher32:bool,expectedrows:Optional[int])->Dict[str, Any]
pandas.io.pytables.Table.create_index(self,columns=None,optlevel=None,kind:Optional[str]=None)
pandas.io.pytables.Table.data_orientation(self)
pandas.io.pytables.Table.description(self)
pandas.io.pytables.Table.dtype(self)
pandas.io.pytables.Table.get_attrs(self)
pandas.io.pytables.Table.get_object(cls,obj,transposed:bool)
pandas.io.pytables.Table.index_cols(self)
pandas.io.pytables.Table.indexables(self)
pandas.io.pytables.Table.is_exists(self)->bool
pandas.io.pytables.Table.is_multi_index(self)->bool
pandas.io.pytables.Table.is_transposed(self)->bool
pandas.io.pytables.Table.ncols(self)->int
pandas.io.pytables.Table.nrows_expected(self)->int
pandas.io.pytables.Table.process_axes(self,obj,selection:'Selection',columns=None)
pandas.io.pytables.Table.queryables(self)->Dict[str, Any]
pandas.io.pytables.Table.read_column(self,column:str,where=None,start:Optional[int]=None,stop:Optional[int]=None)
pandas.io.pytables.Table.read_coordinates(self,where=None,start:Optional[int]=None,stop:Optional[int]=None)
pandas.io.pytables.Table.read_metadata(self,key:str)
pandas.io.pytables.Table.set_attrs(self)
pandas.io.pytables.Table.storable(self)
pandas.io.pytables.Table.table(self)
pandas.io.pytables.Table.table_type_short(self)->str
pandas.io.pytables.Table.validate(self,other)
pandas.io.pytables.Table.validate_data_columns(self,data_columns,min_itemsize,non_index_axes)
pandas.io.pytables.Table.validate_min_itemsize(self,min_itemsize)
pandas.io.pytables.Table.validate_multiindex(self,obj)
pandas.io.pytables.Table.validate_version(self,where=None)
pandas.io.pytables.Table.values_cols(self)->List[str]
pandas.io.pytables.Table.write_metadata(self,key:str,values:np.ndarray)
pandas.io.pytables.TableIterator(self,store:HDFStore,s:Union['GenericFixed','Table'],func,where,nrows,start=None,stop=None,iterator:bool=False,chunksize:Optional[int]=None,auto_close:bool=False)
pandas.io.pytables.TableIterator.__init__(self,store:HDFStore,s:Union['GenericFixed','Table'],func,where,nrows,start=None,stop=None,iterator:bool=False,chunksize:Optional[int]=None,auto_close:bool=False)
pandas.io.pytables.TableIterator.__iter__(self)
pandas.io.pytables.TableIterator.close(self)
pandas.io.pytables.TableIterator.get_result(self,coordinates:bool=False)
pandas.io.pytables.WORMTable(Table)
pandas.io.pytables.WORMTable.read(self,where=None,columns=None,start:Optional[int]=None,stop:Optional[int]=None)
pandas.io.pytables.WORMTable.write(self,**kwargs)
pandas.io.pytables._convert_index(name:str,index:Index,encoding:str,errors:str)->IndexCol
pandas.io.pytables._convert_string_array(data:np.ndarray,encoding:str,errors:str)->np.ndarray
pandas.io.pytables._dtype_to_kind(dtype_str:str)->str
pandas.io.pytables._ensure_decoded(s)
pandas.io.pytables._ensure_encoding(encoding)
pandas.io.pytables._ensure_str(name)
pandas.io.pytables._ensure_term(where,scope_level:int)
pandas.io.pytables._get_converter(kind:str,encoding:str,errors:str)
pandas.io.pytables._get_data_and_dtype_name(data:Union[np.ndarray,ABCExtensionArray])
pandas.io.pytables._get_tz(tz:tzinfo)->Union[str, tzinfo]
pandas.io.pytables._is_metadata_of(group:'Node',parent_group:'Node')->bool
pandas.io.pytables._maybe_adjust_name(name:str,version)->str
pandas.io.pytables._maybe_convert(values:np.ndarray,val_kind:str,encoding:str,errors:str)
pandas.io.pytables._maybe_convert_for_string_atom(name:str,block,existing_col,min_itemsize,nan_rep,encoding,errors)
pandas.io.pytables._need_convert(kind:str)->bool
pandas.io.pytables._reindex_axis(obj:DataFrame,axis:int,labels:Index,other=None)->DataFrame
pandas.io.pytables._set_tz(values:Union[np.ndarray,Index],tz:Optional[Union[str,tzinfo]],coerce:bool=False)->Union[np.ndarray, DatetimeIndex]
pandas.io.pytables._tables()
pandas.io.pytables._unconvert_index(data,kind:str,encoding:str,errors:str)->Union[np.ndarray, Index]
pandas.io.pytables._unconvert_string_array(data:np.ndarray,nan_rep,encoding:str,errors:str)->np.ndarray
pandas.io.pytables.read_hdf(path_or_buf,key=None,mode:str='r',errors:str='strict',where=None,start:Optional[int]=None,stop:Optional[int]=None,columns=None,iterator=False,chunksize:Optional[int]=None,**kwargs)
pandas.io.pytables.to_hdf(path_or_buf,key:str,value:FrameOrSeries,mode:str='a',complevel:Optional[int]=None,complib:Optional[str]=None,append:bool=False,format:Optional[str]=None,index:bool=True,min_itemsize:Optional[Union[int,Dict[str,int]]]=None,nan_rep=None,dropna:Optional[bool]=None,data_columns:Optional[List[str]]=None,errors:str='strict',encoding:str='UTF-8')


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/html.py----------------------------------------
A:pandas.io.html.bs4->import_optional_dependency('bs4')
A:pandas.io.html.lxml->import_optional_dependency('lxml.etree', raise_on_missing=False, on_version='ignore')
A:pandas.io.html.html5lib->import_optional_dependency('html5lib', raise_on_missing=False, on_version='ignore')
A:pandas.io.html._RE_WHITESPACE->re.compile('[\\r\\n]+|\\s{2,}')
A:pandas.io.html.text->_remove_whitespace(self._text_getter(td))
A:pandas.io.html.tables->parser(io, compiled_match, attrs, encoding, displayed_only).parse_tables()
A:pandas.io.html.header_rows->self._parse_thead_tr(table_html)
A:pandas.io.html.body_rows->self._parse_tbody_tr(table_html)
A:pandas.io.html.footer_rows->self._parse_tfoot_tr(table_html)
A:pandas.io.html.header->kwargs.pop('header')
A:pandas.io.html.body->self._expand_colspan_rowspan(body_rows)
A:pandas.io.html.footer->self._expand_colspan_rowspan(footer_rows)
A:pandas.io.html.tds->self._parse_td(tr)
A:pandas.io.html.(prev_i, prev_text, prev_rowspan)->remainder.pop(0)
A:pandas.io.html.rowspan->int(self._attr_getter(td, 'rowspan') or 1)
A:pandas.io.html.colspan->int(self._attr_getter(td, 'colspan') or 1)
A:pandas.io.html.self._strainer->SoupStrainer('table')
A:pandas.io.html.unique_tables->set()
A:pandas.io.html.from_tbody->table.xpath('.//tbody//tr')
A:pandas.io.html.from_root->table.xpath('./tr')
A:pandas.io.html.raw_text->_read(self.io)
A:pandas.io.html.bdoc->self._setup_build_doc()
A:pandas.io.html.udoc->self._setup_build_doc().decode(self.encoding)
A:pandas.io.html.attrs['class']->attrs.pop('class_')
A:pandas.io.html.s->' and '.join([f'@{k}={repr(v)}' for (k, v) in attrs.items()])
A:pandas.io.html.parser->_parser_dispatch(flav)
A:pandas.io.html.r->r.getroot().getroot()
A:pandas.io.html.elements_at_root->thead.xpath('./td|./th')
A:pandas.io.html.lens->create_series_with_explicit_dtype(data, dtype_if_empty=object)
A:pandas.io.html.lens_max->create_series_with_explicit_dtype(data, dtype_if_empty=object).max()
A:pandas.io.html.(head, body, foot)->kwargs.pop('data')
A:pandas.io.html.kwargs['skiprows']->_get_skiprows(kwargs['skiprows'])
A:pandas.io.html.tp->TextParser(body, header=header, **kwargs)
A:pandas.io.html.df->TextParser(body, header=header, **kwargs).read()
A:pandas.io.html.valid_parsers->list(_valid_parsers.keys())
A:pandas.io.html.arg->', '.join((pprint_thing(el) for el in s))
A:pandas.io.html.flavor->_validate_flavor(flavor)
A:pandas.io.html.valid_flavors->set(_valid_parsers)
A:pandas.io.html.flavor_set->set(flavor)
A:pandas.io.html.compiled_match->re.compile(match)
A:pandas.io.html.p->parser(io, compiled_match, attrs, encoding, displayed_only)
pandas.io.html._BeautifulSoupHtml5LibFrameParser(self,*args,**kwargs)
pandas.io.html._BeautifulSoupHtml5LibFrameParser.__init__(self,*args,**kwargs)
pandas.io.html._BeautifulSoupHtml5LibFrameParser._build_doc(self)
pandas.io.html._BeautifulSoupHtml5LibFrameParser._equals_tag(self,obj,tag)
pandas.io.html._BeautifulSoupHtml5LibFrameParser._parse_tables(self,doc,match,attrs)
pandas.io.html._BeautifulSoupHtml5LibFrameParser._parse_tbody_tr(self,table)
pandas.io.html._BeautifulSoupHtml5LibFrameParser._parse_td(self,row)
pandas.io.html._BeautifulSoupHtml5LibFrameParser._parse_tfoot_tr(self,table)
pandas.io.html._BeautifulSoupHtml5LibFrameParser._parse_thead_tr(self,table)
pandas.io.html._BeautifulSoupHtml5LibFrameParser._setup_build_doc(self)
pandas.io.html._BeautifulSoupHtml5LibFrameParser._text_getter(self,obj)
pandas.io.html._HtmlFrameParser(self,io,match,attrs,encoding,displayed_only)
pandas.io.html._HtmlFrameParser.__init__(self,io,match,attrs,encoding,displayed_only)
pandas.io.html._HtmlFrameParser._attr_getter(self,obj,attr)
pandas.io.html._HtmlFrameParser._build_doc(self)
pandas.io.html._HtmlFrameParser._equals_tag(self,obj,tag)
pandas.io.html._HtmlFrameParser._expand_colspan_rowspan(self,rows)
pandas.io.html._HtmlFrameParser._handle_hidden_tables(self,tbl_list,attr_name)
pandas.io.html._HtmlFrameParser._parse_tables(self,doc,match,attrs)
pandas.io.html._HtmlFrameParser._parse_tbody_tr(self,table)
pandas.io.html._HtmlFrameParser._parse_td(self,obj)
pandas.io.html._HtmlFrameParser._parse_tfoot_tr(self,table)
pandas.io.html._HtmlFrameParser._parse_thead_tbody_tfoot(self,table_html)
pandas.io.html._HtmlFrameParser._parse_thead_tr(self,table)
pandas.io.html._HtmlFrameParser._text_getter(self,obj)
pandas.io.html._HtmlFrameParser.parse_tables(self)
pandas.io.html._LxmlFrameParser(self,*args,**kwargs)
pandas.io.html._LxmlFrameParser.__init__(self,*args,**kwargs)
pandas.io.html._LxmlFrameParser._build_doc(self)
pandas.io.html._LxmlFrameParser._equals_tag(self,obj,tag)
pandas.io.html._LxmlFrameParser._parse_tables(self,doc,match,kwargs)
pandas.io.html._LxmlFrameParser._parse_tbody_tr(self,table)
pandas.io.html._LxmlFrameParser._parse_td(self,row)
pandas.io.html._LxmlFrameParser._parse_tfoot_tr(self,table)
pandas.io.html._LxmlFrameParser._parse_thead_tr(self,table)
pandas.io.html._LxmlFrameParser._text_getter(self,obj)
pandas.io.html._build_xpath_expr(attrs)->str
pandas.io.html._data_to_frame(**kwargs)
pandas.io.html._expand_elements(body)
pandas.io.html._get_skiprows(skiprows)
pandas.io.html._importers()
pandas.io.html._parse(flavor,io,match,attrs,encoding,displayed_only,**kwargs)
pandas.io.html._parser_dispatch(flavor)
pandas.io.html._print_as_set(s)->str
pandas.io.html._read(obj)
pandas.io.html._remove_whitespace(s:str,regex=_RE_WHITESPACE)->str
pandas.io.html._validate_flavor(flavor)
pandas.io.html.read_html(io,match='.+',flavor=None,header=None,index_col=None,skiprows=None,attrs=None,parse_dates=False,thousands=',',encoding=None,decimal='.',converters=None,na_values=None,keep_default_na=True,displayed_only=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/sql.py----------------------------------------
A:pandas.io.sql.parse_dates->_process_parse_dates_argument(parse_dates)
A:pandas.io.sql.data_frame[col_name]->_handle_date_column(df_col, format=fmt)
A:pandas.io.sql.frame->_wrap_result(data, columns, index_col=index_col, coerce_float=coerce_float, parse_dates=parse_dates)
A:pandas.io.sql.pandas_sql->pandasSQL_builder(con=con)
A:pandas.io.sql.args->_convert_params(sql, params)
A:pandas.io.sql.con->_engine_builder(con)
A:pandas.io.sql.meta->MetaData(self.connectable, schema=schema)
A:pandas.io.sql.table->SQLiteTable(table_name, self, frame=frame, index=False, keys=keys, dtype=dtype)
A:pandas.io.sql._is_table_name->pandasSQL_builder(con=con).has_table(sql)
A:pandas.io.sql.self.index->self._index_name(index, index_label)
A:pandas.io.sql.self.table->self.table.tometadata(self.pd_sql.meta)
A:pandas.io.sql.temp->self.frame.copy()
A:pandas.io.sql.column_names->list(result).keys()
A:pandas.io.sql.ncols->len(column_names)
A:pandas.io.sql.d->numpy.array(b.get_values(), dtype=object)
A:pandas.io.sql.mask->isna(d)
A:pandas.io.sql.exec_insert->partial(method, self)
A:pandas.io.sql.(keys, data_list)->self.insert_data()
A:pandas.io.sql.nrows->len(self.frame)
A:pandas.io.sql.end_i->min((i + 1) * chunksize, nrows)
A:pandas.io.sql.chunk_iter->zip(*[arr[start_i:end_i] for arr in data_list])
A:pandas.io.sql.data->self._fetchall_as_list(cursor)
A:pandas.io.sql.self.frame->pandas.core.api.DataFrame.from_records(data, columns=column_names, coerce_float=coerce_float)
A:pandas.io.sql.sql_select->self.table.select()
A:pandas.io.sql.result->list(result)
A:pandas.io.sql.idx_type->dtype_mapper(self.frame.index._get_level_values(i))
A:pandas.io.sql.column_names_and_types->self._get_column_names_and_types(self._sql_type_name)
A:pandas.io.sql.pkc->PrimaryKeyConstraint(*keys, name=self.name + '_pk')
A:pandas.io.sql.self.frame[col_name]->df_col.astype(col_type, copy=False)
A:pandas.io.sql.col_type->pandas._libs.lib.infer_dtype(col, skipna=True)
A:pandas.io.sql.columns->list(result).keys()
A:pandas.io.sql.table_names->engine.table_names(schema=schema or self.meta.schema, connection=conn)
A:pandas.io.sql.tbl->self.meta.tables.get(table_name)
A:pandas.io.sql.uname->_get_unicode_name(name)
A:pandas.io.sql.nul_index->_get_unicode_name(name).find('\x00')
A:pandas.io.sql.names->list(map(str, self.frame.columns))
A:pandas.io.sql.col_names->','.join(bracketed_names)
A:pandas.io.sql.wildcards->','.join([wld] * len(names))
A:pandas.io.sql.data_list->list(data_iter)
A:pandas.io.sql.pat->re.compile('\\s+')
A:pandas.io.sql.cnames_br->','.join((escape(c) for c in ix_cols))
A:pandas.io.sql.cnames->'_'.join(ix_cols)
A:pandas.io.sql.cur->self.con.cursor()
A:pandas.io.sql.ex->DatabaseError(f"Execution failed on sql '{args[0]}': {exc}")
A:pandas.io.sql.cursor->self.execute(*args)
pandas.io.sql.DatabaseError(IOError)
pandas.io.sql.PandasSQL(PandasObject)
pandas.io.sql.PandasSQL.read_sql(self,*args,**kwargs)
pandas.io.sql.PandasSQL.to_sql(self,*args,**kwargs)
pandas.io.sql.SQLAlchemyRequired(ImportError)
pandas.io.sql.SQLDatabase(self,engine,schema=None,meta=None)
pandas.io.sql.SQLDatabase.__init__(self,engine,schema=None,meta=None)
pandas.io.sql.SQLDatabase._create_sql_schema(self,frame,table_name,keys=None,dtype=None)
pandas.io.sql.SQLDatabase._query_iterator(result,chunksize,columns,index_col=None,coerce_float=True,parse_dates=None)
pandas.io.sql.SQLDatabase.drop_table(self,table_name,schema=None)
pandas.io.sql.SQLDatabase.execute(self,*args,**kwargs)
pandas.io.sql.SQLDatabase.get_table(self,table_name,schema=None)
pandas.io.sql.SQLDatabase.has_table(self,name,schema=None)
pandas.io.sql.SQLDatabase.read_query(self,sql,index_col=None,coerce_float=True,parse_dates=None,params=None,chunksize=None)
pandas.io.sql.SQLDatabase.read_table(self,table_name,index_col=None,coerce_float=True,parse_dates=None,columns=None,schema=None,chunksize=None)
pandas.io.sql.SQLDatabase.run_transaction(self)
pandas.io.sql.SQLDatabase.tables(self)
pandas.io.sql.SQLDatabase.to_sql(self,frame,name,if_exists='fail',index=True,index_label=None,schema=None,chunksize=None,dtype=None,method=None)
pandas.io.sql.SQLTable(self,name,pandas_sql_engine,frame=None,index=True,if_exists='fail',prefix='pandas',index_label=None,schema=None,keys=None,dtype=None)
pandas.io.sql.SQLTable.__init__(self,name,pandas_sql_engine,frame=None,index=True,if_exists='fail',prefix='pandas',index_label=None,schema=None,keys=None,dtype=None)
pandas.io.sql.SQLTable._create_table_setup(self)
pandas.io.sql.SQLTable._execute_create(self)
pandas.io.sql.SQLTable._execute_insert(self,conn,keys,data_iter)
pandas.io.sql.SQLTable._execute_insert_multi(self,conn,keys,data_iter)
pandas.io.sql.SQLTable._get_column_names_and_types(self,dtype_mapper)
pandas.io.sql.SQLTable._get_dtype(self,sqltype)
pandas.io.sql.SQLTable._harmonize_columns(self,parse_dates=None)
pandas.io.sql.SQLTable._index_name(self,index,index_label)
pandas.io.sql.SQLTable._query_iterator(self,result,chunksize,columns,coerce_float=True,parse_dates=None)
pandas.io.sql.SQLTable._sqlalchemy_type(self,col)
pandas.io.sql.SQLTable.create(self)
pandas.io.sql.SQLTable.exists(self)
pandas.io.sql.SQLTable.insert(self,chunksize=None,method=None)
pandas.io.sql.SQLTable.insert_data(self)
pandas.io.sql.SQLTable.read(self,coerce_float=True,parse_dates=None,columns=None,chunksize=None)
pandas.io.sql.SQLTable.sql_schema(self)
pandas.io.sql.SQLiteDatabase(self,con,is_cursor=False)
pandas.io.sql.SQLiteDatabase.__init__(self,con,is_cursor=False)
pandas.io.sql.SQLiteDatabase._create_sql_schema(self,frame,table_name,keys=None,dtype=None)
pandas.io.sql.SQLiteDatabase._fetchall_as_list(self,cur)
pandas.io.sql.SQLiteDatabase._query_iterator(cursor,chunksize,columns,index_col=None,coerce_float=True,parse_dates=None)
pandas.io.sql.SQLiteDatabase.drop_table(self,name,schema=None)
pandas.io.sql.SQLiteDatabase.execute(self,*args,**kwargs)
pandas.io.sql.SQLiteDatabase.get_table(self,table_name,schema=None)
pandas.io.sql.SQLiteDatabase.has_table(self,name,schema=None)
pandas.io.sql.SQLiteDatabase.read_query(self,sql,index_col=None,coerce_float=True,params=None,parse_dates=None,chunksize=None)
pandas.io.sql.SQLiteDatabase.run_transaction(self)
pandas.io.sql.SQLiteDatabase.to_sql(self,frame,name,if_exists='fail',index=True,index_label=None,schema=None,chunksize=None,dtype=None,method=None)
pandas.io.sql.SQLiteTable(self,*args,**kwargs)
pandas.io.sql.SQLiteTable.__init__(self,*args,**kwargs)
pandas.io.sql.SQLiteTable._create_table_setup(self)
pandas.io.sql.SQLiteTable._execute_create(self)
pandas.io.sql.SQLiteTable._execute_insert(self,conn,keys,data_iter)
pandas.io.sql.SQLiteTable._sql_type_name(self,col)
pandas.io.sql.SQLiteTable.insert_statement(self)
pandas.io.sql.SQLiteTable.sql_schema(self)
pandas.io.sql._convert_params(sql,params)
pandas.io.sql._engine_builder(con)
pandas.io.sql._get_unicode_name(name)
pandas.io.sql._get_valid_sqlite_name(name)
pandas.io.sql._handle_date_column(col,utc=None,format=None)
pandas.io.sql._is_sqlalchemy_connectable(con)
pandas.io.sql._parse_date_columns(data_frame,parse_dates)
pandas.io.sql._process_parse_dates_argument(parse_dates)
pandas.io.sql._wrap_result(data,columns,index_col=None,coerce_float=True,parse_dates=None)
pandas.io.sql.execute(sql,con,cur=None,params=None)
pandas.io.sql.get_schema(frame,name,keys=None,con=None,dtype=None)
pandas.io.sql.has_table(table_name,con,schema=None)
pandas.io.sql.pandasSQL_builder(con,schema=None,meta=None,is_cursor=False)
pandas.io.sql.read_sql(sql,con,index_col=None,coerce_float=True,params=None,parse_dates=None,columns=None,chunksize=None)
pandas.io.sql.read_sql_query(sql,con,index_col=None,coerce_float=True,params=None,parse_dates=None,chunksize=None)
pandas.io.sql.read_sql_table(table_name,con,schema=None,index_col=None,coerce_float=True,parse_dates=None,columns=None,chunksize=None)
pandas.io.sql.to_sql(frame,name,con,schema=None,if_exists='fail',index=True,index_label=None,chunksize=None,dtype=None,method=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/api.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/s3.py----------------------------------------
A:pandas.io.s3.s3fs->import_optional_dependency('s3fs', extra='The s3fs package is required to handle s3 files.')
A:pandas.io.s3.result->parse_url(url, allow_fragments=False)
A:pandas.io.s3.fs->get_fs()
A:pandas.io.s3.file->get_fs().open(_strip_schema(filepath_or_buffer), mode)
A:pandas.io.s3.(file, _fs)->get_file_and_filesystem(filepath_or_buffer, mode=mode)
pandas.io.s3._strip_schema(url)
pandas.io.s3.get_file_and_filesystem(filepath_or_buffer:FilePathOrBuffer,mode:Optional[str]=None)->Tuple[IO, Any]
pandas.io.s3.get_filepath_or_buffer(filepath_or_buffer:FilePathOrBuffer,encoding:Optional[str]=None,compression:Optional[str]=None,mode:Optional[str]=None)->Tuple[IO, Optional[str], Optional[str], bool]
pandas.io.s3.get_fs()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/parsers.py----------------------------------------
A:pandas.io.parsers.val->int(val)
A:pandas.io.parsers.encoding->kwds.copy().get('encoding')
A:pandas.io.parsers.compression->infer_compression(filepath_or_buffer, compression)
A:pandas.io.parsers.(fp_or_buf, _, compression, should_close)->get_filepath_or_buffer(filepath_or_buffer, encoding, compression)
A:pandas.io.parsers.iterator->kwds.copy().get('iterator', False)
A:pandas.io.parsers.chunksize->_validate_integer('chunksize', kwds.get('chunksize', None), 1)
A:pandas.io.parsers.nrows->_validate_integer('nrows', nrows)
A:pandas.io.parsers.parser->TextFileReader(fp_or_buf, **kwds)
A:pandas.io.parsers.data->self._convert_data(data)
A:pandas.io.parsers.kwds->kwds.copy().copy()
A:pandas.io.parsers.read_csv->Appender(_doc_read_csv_and_table.format(func_name='read_csv', summary='Read a comma-separated values (csv) file into DataFrame.', _default_sep="','"))(read_csv)
A:pandas.io.parsers.read_table->Appender(_doc_read_csv_and_table.format(func_name='read_table', summary='Read general delimited file into DataFrame.', _default_sep="'\\\\t' (tab-stop)"))(read_table)
A:pandas.io.parsers.self._engine_specified->kwds.copy().copy().get('engine_specified', engine_specified)
A:pandas.io.parsers.dialect->csv.get_dialect(dialect)
A:pandas.io.parsers.dialect_val->getattr(dialect, param)
A:pandas.io.parsers.provided->kwds.copy().copy().get(param, parser_default)
A:pandas.io.parsers.options->self._get_options_with_defaults(engine)
A:pandas.io.parsers.self.chunksize->self._get_options_with_defaults(engine).pop('chunksize', None)
A:pandas.io.parsers.self.nrows->self._get_options_with_defaults(engine).pop('nrows', None)
A:pandas.io.parsers.self.squeeze->self._get_options_with_defaults(engine).pop('squeeze', False)
A:pandas.io.parsers.self.engine->self._check_file_or_buffer(f, engine)
A:pandas.io.parsers.(self.options, self.engine)->self._clean_options(options, engine)
A:pandas.io.parsers.value->_deprecated_defaults.get(argname, default)
A:pandas.io.parsers.options[argname]->kwds.copy().copy().get(argname, default)
A:pandas.io.parsers.result->set()
A:pandas.io.parsers.(na_values, na_fvalues)->_clean_na_values(na_values, keep_default_na)
A:pandas.io.parsers.skiprows->set()
A:pandas.io.parsers.self._engine->klass(self.f, **self.options)
A:pandas.io.parsers.ret->self._remove_empty_lines([line])
A:pandas.io.parsers.(index, columns, col_dict)->_get_empty_meta(names, self.index_col, self.index_names, self.dtype)
A:pandas.io.parsers.new_rows->len(index)
A:pandas.io.parsers.index->ensure_index_from_sequences(data, names=index_names)
A:pandas.io.parsers.df->DataFrame(col_dict, columns=columns, index=index)
A:pandas.io.parsers.size->min(size, self.nrows - self._currow)
A:pandas.io.parsers.usecols_dtype->pandas._libs.lib.infer_dtype(usecols, skipna=False)
A:pandas.io.parsers.usecols->_evaluate_usecols(self.usecols, names)
A:pandas.io.parsers.self.names->list(range(self._reader.table_width))
A:pandas.io.parsers.self.prefix->kwds.copy().copy().pop('prefix', None)
A:pandas.io.parsers.self.index_col->list(range(implicit_first_cols))
A:pandas.io.parsers.self.unnamed_cols->set()
A:pandas.io.parsers.self.parse_dates->_validate_parse_dates_arg(kwds.pop('parse_dates', False))
A:pandas.io.parsers.self.date_parser->kwds.copy().copy().pop('date_parser', None)
A:pandas.io.parsers.self.dayfirst->kwds.copy().copy().pop('dayfirst', False)
A:pandas.io.parsers.self.keep_date_col->kwds.copy().copy().pop('keep_date_col', False)
A:pandas.io.parsers.self.na_values->kwds.copy().copy().get('na_values')
A:pandas.io.parsers.self.na_fvalues->kwds.copy().copy().get('na_fvalues')
A:pandas.io.parsers.self.na_filter->kwds.copy().copy().get('na_filter', False)
A:pandas.io.parsers.self.keep_default_na->kwds.copy().copy().get('keep_default_na', True)
A:pandas.io.parsers.self.true_values->kwds.copy().copy().get('true_values')
A:pandas.io.parsers.self.false_values->kwds.copy().copy().get('false_values')
A:pandas.io.parsers.self.mangle_dupe_cols->kwds.copy().copy().get('mangle_dupe_cols', True)
A:pandas.io.parsers.self.infer_datetime_format->kwds.copy().copy().pop('infer_datetime_format', False)
A:pandas.io.parsers.self.cache_dates->kwds.copy().copy().pop('cache_dates', True)
A:pandas.io.parsers.self._date_conv->_make_date_converter(date_parser=self.date_parser, dayfirst=self.dayfirst, infer_datetime_format=self.infer_datetime_format, cache_dates=self.cache_dates)
A:pandas.io.parsers.self.header->kwds.copy().copy().get('header')
A:pandas.io.parsers.is_sequence->isinstance(self.index_col, (list, tuple, np.ndarray))
A:pandas.io.parsers.sic->set(ic)
A:pandas.io.parsers.index_names->header.pop(-1)
A:pandas.io.parsers.(index_names, names, index_col)->_clean_index_names(index_names, self.index_col, self.unnamed_cols)
A:pandas.io.parsers.field_count->len(header[0])
A:pandas.io.parsers.columns->list(columns)
A:pandas.io.parsers.names->self._maybe_dedup_names(self.orig_names)
A:pandas.io.parsers.counts->defaultdict(int)
A:pandas.io.parsers.is_potential_mi->_is_potential_multi_index(names)
A:pandas.io.parsers.(self.index_names, _, self.index_col)->_clean_index_names(list(columns), self.index_col, self.unnamed_cols)
A:pandas.io.parsers.i->ix(idx)
A:pandas.io.parsers.name->_get_name(idx)
A:pandas.io.parsers.arr->self._date_conv(arr)
A:pandas.io.parsers.col_na_values->set()
A:pandas.io.parsers.col_na_fvalues->set()
A:pandas.io.parsers.(col_na_values, col_na_fvalues)->_get_na_values(c, na_values, na_fvalues, self.keep_default_na)
A:pandas.io.parsers.(arr, _)->self._infer_types(arr, col_na_values | col_na_fvalues)
A:pandas.io.parsers.cast_type->pandas_dtype(cast_type)
A:pandas.io.parsers.values->self._date_conv(values)
A:pandas.io.parsers.mask->numpy.zeros(max_len + 1, dtype=int)
A:pandas.io.parsers.(cvals, na_count)->self._infer_types(values, set(col_na_values) | col_na_fvalues, try_num_bool)
A:pandas.io.parsers.cvals->self._cast_types(cvals, cast_type, c)
A:pandas.io.parsers.na_count->pandas._libs.parsers.sanitize_objects(values, na_values, False)
A:pandas.io.parsers.cats->Index(values).unique().dropna()
A:pandas.io.parsers.array_type->pandas_dtype(cast_type).construct_array_type()
A:pandas.io.parsers.(data, names)->_process_date_conversion(data, self._date_conv, self.parse_dates, self.index_col, self.index_names, names, keep_date_col=self.keep_date_col)
A:pandas.io.parsers.src->TextIOWrapper(src, encoding=encoding, newline='')
A:pandas.io.parsers.(self.usecols, self.usecols_dtype)->_validate_usecols_arg(kwds['usecols'])
A:pandas.io.parsers.self._reader->pandas._libs.parsers.TextReader(src, **kwds)
A:pandas.io.parsers.(self.names, self.index_names, self.col_names, passed_names)->self._extract_multi_indexer_columns(self._reader.header, self.index_names, self.col_names, passed_names)
A:pandas.io.parsers.(index_names, self.names, self.index_col)->_clean_index_names(self.names, self.index_col, self.unnamed_cols)
A:pandas.io.parsers.x->self._maybe_dedup_names(self.orig_names).index(x)
A:pandas.io.parsers.col_dict->dict(filter(lambda item: item[0] in columns, col_dict.items()))
A:pandas.io.parsers.(names, data)->self._do_date_conversions(names, data)
A:pandas.io.parsers.(index, names)->self._make_index(data, alldata, names)
A:pandas.io.parsers.(idx_names, names, self.index_col)->_clean_index_names(names, self.index_col, self.unnamed_cols)
A:pandas.io.parsers.self.skipfooter->_validate_skipfooter_arg(kwds['skipfooter'])
A:pandas.io.parsers.self.quotechar->str(self.quotechar)
A:pandas.io.parsers.(self.usecols, _)->_validate_usecols_arg(kwds['usecols'])
A:pandas.io.parsers.(f, handles)->get_handle(f, 'r', encoding=self.encoding, compression=self.compression, memory_map=self.memory_map)
A:pandas.io.parsers.(self.columns, self.num_original_columns, self.unnamed_cols)->self._infer_columns()
A:pandas.io.parsers.(self.columns, self.index_names, self.col_names, _)->self._extract_multi_indexer_columns(self.columns, self.index_names, self.col_names)
A:pandas.io.parsers.self.num_original_columns->len(columns)
A:pandas.io.parsers.self.orig_names->list(self.columns)
A:pandas.io.parsers.(index_names, self.orig_names, self.columns)->self._get_index_name(self.columns)
A:pandas.io.parsers.self._no_thousands_columns->self._set_no_thousands_columns()
A:pandas.io.parsers.self.nonnum->re.compile(f'[^-^0-9^{self.thousands}^{self.decimal}]+')
A:pandas.io.parsers.noconvert_columns->set()
A:pandas.io.parsers.line->next(self.f)
A:pandas.io.parsers.sniffed->csv.Sniffer().sniff(line)
A:pandas.io.parsers.line_rdr->csv.reader(StringIO(line), dialect=dia)
A:pandas.io.parsers.reader->_read()
A:pandas.io.parsers.pat->re.compile(sep)
A:pandas.io.parsers.content->self._get_lines(rows)
A:pandas.io.parsers.count_empty_content_vals->count_empty_vals(content[0])
A:pandas.io.parsers.alldata->self._rows_to_cols(content)
A:pandas.io.parsers.(columns, data)->self._do_date_conversions(columns, data)
A:pandas.io.parsers.(index, columns)->self._make_index(data, alldata, columns, indexnamerow)
A:pandas.io.parsers.clean_conv->_clean_mapping(self.converters)
A:pandas.io.parsers.clean_dtypes->_clean_mapping(self.dtype)
A:pandas.io.parsers.unnamed_cols->set()
A:pandas.io.parsers.lc->len(this_columns)
A:pandas.io.parsers.unnamed_count->len(this_unnamed_cols)
A:pandas.io.parsers.num_original_columns->len(names)
A:pandas.io.parsers.ncols->len(line)
A:pandas.io.parsers.col_indices->_evaluate_usecols(self.usecols, usecols_key)
A:pandas.io.parsers.orig_line->self._next_iter_line(row_num=self.pos + 1)
A:pandas.io.parsers.msg->str(e)
A:pandas.io.parsers.orig_names->list(columns)
A:pandas.io.parsers.next_line->self._next_line()
A:pandas.io.parsers.(index_name, columns_, self.index_col)->_clean_index_names(columns, self.index_col, self.unnamed_cols)
A:pandas.io.parsers.max_len->max(map(len, rows))
A:pandas.io.parsers.iter_content->enumerate(content)
A:pandas.io.parsers.content_len->len(content)
A:pandas.io.parsers.actual_len->len(l)
A:pandas.io.parsers.zipped_content->list(lib.to_object_array(content, min_width=col_len).T)
A:pandas.io.parsers.new_pos->len(self.data)
A:pandas.io.parsers.new_row->self._next_iter_line(row_num=self.pos + rows + 1)
A:pandas.io.parsers.lines->self._check_thousands(lines)
A:pandas.io.parsers.strs->pandas._libs.tslibs.parsing._concat_date_cols(date_cols)
A:pandas.io.parsers.date_cols->set()
A:pandas.io.parsers.data_dict[colspec]->converter(data_dict[colspec])
A:pandas.io.parsers.(new_name, col, old_names)->_try_convert_dates(converter, colspec, data_dict, orig_names)
A:pandas.io.parsers.(_, col, old_names)->_try_convert_dates(converter, colspec, data_dict, orig_names)
A:pandas.io.parsers.colset->set(columns)
A:pandas.io.parsers.new_name->'_'.join((str(x) for x in colnames))
A:pandas.io.parsers.new_col->parser(*to_parse)
A:pandas.io.parsers.na_values->_stringify_na_values(na_values)
A:pandas.io.parsers.na_fvalues->_floatify_na_values(na_values)
A:pandas.io.parsers.old_na_values->_stringify_na_values(na_values).copy()
A:pandas.io.parsers.cp_cols->list(columns)
A:pandas.io.parsers.index_col->list(index_col)
A:pandas.io.parsers.dtype->defaultdict(lambda : np.object)
A:pandas.io.parsers._dtype->defaultdict(lambda : np.object).copy()
A:pandas.io.parsers.v->int(v)
A:pandas.io.parsers.self.colspecs->kwds.copy().copy().pop('colspecs')
A:pandas.io.parsers.self.buffer->iter(buffer_rows)
A:pandas.io.parsers.delimiters->''.join(('\\{}'.format(x) for x in self.delimiter))
A:pandas.io.parsers.pattern->re.compile('([^{}]+)'.format(delimiters))
A:pandas.io.parsers.rows->self.get_rows(infer_nrows, skiprows)
A:pandas.io.parsers.shifted->numpy.roll(mask, 1)
A:pandas.io.parsers.edge_pairs->list(zip(edges[::2], edges[1::2]))
A:pandas.io.parsers.self.infer_nrows->kwds.copy().copy().pop('infer_nrows')
A:pandas.io.parsers.self.data->FixedWidthReader(f, self.colspecs, self.delimiter, self.comment, self.skiprows, self.infer_nrows)
pandas.io.parsers.CParserWrapper(self,src,**kwds)
pandas.io.parsers.CParserWrapper.__init__(self,src,**kwds)
pandas.io.parsers.CParserWrapper._filter_usecols(self,names)
pandas.io.parsers.CParserWrapper._get_index_names(self)
pandas.io.parsers.CParserWrapper._maybe_parse_dates(self,values,index,try_parse_dates=True)
pandas.io.parsers.CParserWrapper._set_noconvert_columns(self)
pandas.io.parsers.CParserWrapper.close(self)
pandas.io.parsers.CParserWrapper.read(self,nrows=None)
pandas.io.parsers.CParserWrapper.set_error_bad_lines(self,status)
pandas.io.parsers.FixedWidthFieldParser(self,f,**kwds)
pandas.io.parsers.FixedWidthFieldParser.__init__(self,f,**kwds)
pandas.io.parsers.FixedWidthFieldParser._make_reader(self,f)
pandas.io.parsers.FixedWidthReader(self,f,colspecs,delimiter,comment,skiprows=None,infer_nrows=100)
pandas.io.parsers.FixedWidthReader.__init__(self,f,colspecs,delimiter,comment,skiprows=None,infer_nrows=100)
pandas.io.parsers.FixedWidthReader.__next__(self)
pandas.io.parsers.FixedWidthReader.detect_colspecs(self,infer_nrows=100,skiprows=None)
pandas.io.parsers.FixedWidthReader.get_rows(self,infer_nrows,skiprows=None)
pandas.io.parsers.ParserBase(self,kwds)
pandas.io.parsers.ParserBase.__init__(self,kwds)
pandas.io.parsers.ParserBase._agg_index(self,index,try_parse_dates=True)
pandas.io.parsers.ParserBase._cast_types(self,values,cast_type,column)
pandas.io.parsers.ParserBase._convert_to_ndarrays(self,dct,na_values,na_fvalues,verbose=False,converters=None,dtypes=None)
pandas.io.parsers.ParserBase._do_date_conversions(self,names,data)
pandas.io.parsers.ParserBase._extract_multi_indexer_columns(self,header,index_names,col_names,passed_names=False)
pandas.io.parsers.ParserBase._get_complex_date_index(self,data,col_names)
pandas.io.parsers.ParserBase._get_simple_index(self,data,columns)
pandas.io.parsers.ParserBase._has_complex_date_col(self)
pandas.io.parsers.ParserBase._infer_types(self,values,na_values,try_num_bool=True)
pandas.io.parsers.ParserBase._make_index(self,data,alldata,columns,indexnamerow=False)
pandas.io.parsers.ParserBase._maybe_dedup_names(self,names)
pandas.io.parsers.ParserBase._maybe_make_multi_index_columns(self,columns,col_names=None)
pandas.io.parsers.ParserBase._should_parse_dates(self,i)
pandas.io.parsers.ParserBase.close(self)
pandas.io.parsers.PythonParser(self,f,**kwds)
pandas.io.parsers.PythonParser.__init__(self,f,**kwds)
pandas.io.parsers.PythonParser._alert_malformed(self,msg,row_num)
pandas.io.parsers.PythonParser._buffered_line(self)
pandas.io.parsers.PythonParser._check_comments(self,lines)
pandas.io.parsers.PythonParser._check_decimal(self,lines)
pandas.io.parsers.PythonParser._check_for_bom(self,first_row)
pandas.io.parsers.PythonParser._check_thousands(self,lines)
pandas.io.parsers.PythonParser._clear_buffer(self)
pandas.io.parsers.PythonParser._convert_data(self,data)
pandas.io.parsers.PythonParser._exclude_implicit_index(self,alldata)
pandas.io.parsers.PythonParser._get_index_name(self,columns)
pandas.io.parsers.PythonParser._get_lines(self,rows=None)
pandas.io.parsers.PythonParser._handle_usecols(self,columns,usecols_key)
pandas.io.parsers.PythonParser._infer_columns(self)
pandas.io.parsers.PythonParser._is_line_empty(self,line)
pandas.io.parsers.PythonParser._make_reader(self,f)
pandas.io.parsers.PythonParser._next_iter_line(self,row_num)
pandas.io.parsers.PythonParser._next_line(self)
pandas.io.parsers.PythonParser._remove_empty_lines(self,lines)
pandas.io.parsers.PythonParser._rows_to_cols(self,content)
pandas.io.parsers.PythonParser._search_replace_num_columns(self,lines,search,replace)
pandas.io.parsers.PythonParser._set_no_thousands_columns(self)
pandas.io.parsers.PythonParser.get_chunk(self,size=None)
pandas.io.parsers.PythonParser.read(self,rows=None)
pandas.io.parsers.TextFileReader(self,f,engine=None,**kwds)
pandas.io.parsers.TextFileReader.__init__(self,f,engine=None,**kwds)
pandas.io.parsers.TextFileReader.__next__(self)
pandas.io.parsers.TextFileReader._check_file_or_buffer(self,f,engine)
pandas.io.parsers.TextFileReader._clean_options(self,options,engine)
pandas.io.parsers.TextFileReader._create_index(self,ret)
pandas.io.parsers.TextFileReader._failover_to_python(self)
pandas.io.parsers.TextFileReader._get_options_with_defaults(self,engine)
pandas.io.parsers.TextFileReader._make_engine(self,engine='c')
pandas.io.parsers.TextFileReader.close(self)
pandas.io.parsers.TextFileReader.get_chunk(self,size=None)
pandas.io.parsers.TextFileReader.read(self,nrows=None)
pandas.io.parsers.TextParser(*args,**kwds)
pandas.io.parsers._clean_index_names(columns,index_col,unnamed_cols)
pandas.io.parsers._clean_na_values(na_values,keep_default_na=True)
pandas.io.parsers._evaluate_usecols(usecols,names)
pandas.io.parsers._floatify_na_values(na_values)
pandas.io.parsers._get_col_names(colspec,columns)
pandas.io.parsers._get_empty_meta(columns,index_col,index_names,dtype=None)
pandas.io.parsers._get_na_values(col,na_values,na_fvalues,keep_default_na)
pandas.io.parsers._is_index_col(col)
pandas.io.parsers._is_potential_multi_index(columns)
pandas.io.parsers._make_date_converter(date_parser=None,dayfirst=False,infer_datetime_format=False,cache_dates=True)
pandas.io.parsers._make_parser_function(name,default_sep=',')
pandas.io.parsers._process_date_conversion(data_dict,converter,parse_spec,index_col,index_names,columns,keep_date_col=False)
pandas.io.parsers._read(filepath_or_buffer:FilePathOrBuffer,kwds)
pandas.io.parsers._stringify_na_values(na_values)
pandas.io.parsers._try_convert_dates(parser,colspec,data_dict,columns)
pandas.io.parsers._validate_integer(name,val,min_val=0)
pandas.io.parsers._validate_names(names)
pandas.io.parsers._validate_parse_dates_arg(parse_dates)
pandas.io.parsers._validate_skipfooter_arg(skipfooter)
pandas.io.parsers._validate_usecols_arg(usecols)
pandas.io.parsers._validate_usecols_names(usecols,names)
pandas.io.parsers.count_empty_vals(vals)
pandas.io.parsers.read_fwf(filepath_or_buffer:FilePathOrBuffer,colspecs='infer',widths=None,infer_nrows=100,**kwds)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/gbq.py----------------------------------------
A:pandas.io.gbq.pandas_gbq->_try_import()
pandas.io.gbq._try_import()
pandas.io.gbq.read_gbq(query:str,project_id:Optional[str]=None,index_col:Optional[str]=None,col_order:Optional[List[str]]=None,reauth:bool=False,auth_local_webserver:bool=False,dialect:Optional[str]=None,location:Optional[str]=None,configuration:Optional[Dict[str,Any]]=None,credentials=None,use_bqstorage_api:Optional[bool]=None,private_key=None,verbose=None,progress_bar_type:Optional[str]=None)->'DataFrame'
pandas.io.gbq.to_gbq(dataframe:'DataFrame',destination_table:str,project_id:Optional[str]=None,chunksize:Optional[int]=None,reauth:bool=False,if_exists:str='fail',auth_local_webserver:bool=False,table_schema:Optional[List[Dict[str,str]]]=None,location:Optional[str]=None,progress_bar:bool=True,credentials=None,verbose=None,private_key=None)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/parquet.py----------------------------------------
A:pandas.io.parquet.engine->get_option('io.parquet.engine')
A:pandas.io.parquet.valid_names->all((isinstance(name, str) for name in df.index.names if name is not None))
A:pandas.io.parquet.(file_obj_or_path, _, _, should_close)->get_filepath_or_buffer(path, mode='wb')
A:pandas.io.parquet.table->self.api.Table.from_pandas(df, **from_pandas_kwargs)
A:pandas.io.parquet.parquet_ds->self.api.parquet.ParquetDataset(path, filesystem=get_fs_for_path(path), **kwargs)
A:pandas.io.parquet.result->self.api.parquet.ParquetDataset(path, filesystem=get_fs_for_path(path), **kwargs).read_pandas(**kwargs).to_pandas()
A:pandas.io.parquet.fastparquet->import_optional_dependency('fastparquet', extra='fastparquet is required for parquet support.')
A:pandas.io.parquet.partition_cols->kwargs.pop('partition_on')
A:pandas.io.parquet.(path, _, _, _)->get_filepath_or_buffer(path)
A:pandas.io.parquet.(s3, filesystem)->get_file_and_filesystem(path)
A:pandas.io.parquet.parquet_file->self.api.ParquetFile(path)
A:pandas.io.parquet.impl->get_engine(engine)
pandas.io.parquet.BaseImpl
pandas.io.parquet.BaseImpl.read(self,path,columns=None,**kwargs)
pandas.io.parquet.BaseImpl.validate_dataframe(df:DataFrame)
pandas.io.parquet.BaseImpl.write(self,df:DataFrame,path,compression,**kwargs)
pandas.io.parquet.FastParquetImpl(self)
pandas.io.parquet.FastParquetImpl.__init__(self)
pandas.io.parquet.FastParquetImpl.read(self,path,columns=None,**kwargs)
pandas.io.parquet.FastParquetImpl.write(self,df:DataFrame,path,compression='snappy',index=None,partition_cols=None,**kwargs)
pandas.io.parquet.PyArrowImpl(self)
pandas.io.parquet.PyArrowImpl.__init__(self)
pandas.io.parquet.PyArrowImpl.read(self,path,columns=None,**kwargs)
pandas.io.parquet.PyArrowImpl.write(self,df:DataFrame,path,compression='snappy',coerce_timestamps='ms',index:Optional[bool]=None,partition_cols=None,**kwargs)
pandas.io.parquet.get_engine(engine:str)->'BaseImpl'
pandas.io.parquet.read_parquet(path,engine:str='auto',columns=None,**kwargs)
pandas.io.parquet.to_parquet(df:DataFrame,path,engine:str='auto',compression='snappy',index:Optional[bool]=None,partition_cols=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/pickle.py----------------------------------------
A:pandas.io.pickle.(fp_or_buf, _, compression, should_close)->get_filepath_or_buffer(filepath_or_buffer, compression=compression)
A:pandas.io.pickle.(f, fh)->get_handle(fp_or_buf, 'rb', compression=compression, is_text=False)
pandas.io.pickle.read_pickle(filepath_or_buffer:FilePathOrBuffer,compression:Optional[str]='infer')
pandas.io.pickle.to_pickle(obj:Any,filepath_or_buffer:FilePathOrBuffer,compression:Optional[str]='infer',protocol:int=pickle.HIGHEST_PROTOCOL)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/common.py----------------------------------------
A:pandas.io.common.lzma->_import_lzma()
A:pandas.io.common._VALID_URLS->set(uses_relative + uses_netloc + uses_params)
A:pandas.io.common.filepath_or_buffer->stringify_path(filepath_or_buffer)
A:pandas.io.common.req->urlopen(filepath_or_buffer)
A:pandas.io.common.content_encoding->urlopen(filepath_or_buffer).headers.get('Content-Encoding', None)
A:pandas.io.common.reader->BytesIO(req.read())
A:pandas.io.common.compression_args->dict(compression)
A:pandas.io.common.compression->infer_compression(path_or_buf, compression)
A:pandas.io.common.path_or_buf->stringify_path(path_or_buf)
A:pandas.io.common.is_path->isinstance(path_or_buf, str)
A:pandas.io.common.(compression, compression_args)->get_compression_method(compression)
A:pandas.io.common.f->open(path_or_buf, mode)
A:pandas.io.common.zf->_BytesZipFile(path_or_buf, mode, **compression_args)
A:pandas.io.common.zip_names->_BytesZipFile(path_or_buf, mode, **compression_args).namelist()
A:pandas.io.common.g->TextIOWrapper(f, encoding=encoding, newline='')
A:pandas.io.common.wrapped->_MMapWrapper(f)
A:pandas.io.common.mode->mode.replace('b', '').replace('b', '')
A:pandas.io.common.self.mmap->mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)
A:pandas.io.common.newbytes->self.mmap.readline()
A:pandas.io.common.newline->self.mmap.readline().decode('utf-8')
pandas.io.common._BytesZipFile(self,file:FilePathOrBuffer,mode:str,archive_name:Optional[str]=None,**kwargs)
pandas.io.common._BytesZipFile.__init__(self,file:FilePathOrBuffer,mode:str,archive_name:Optional[str]=None,**kwargs)
pandas.io.common._BytesZipFile.closed(self)
pandas.io.common._BytesZipFile.write(self,data)
pandas.io.common._MMapWrapper(self,f:IO)
pandas.io.common._MMapWrapper.__getattr__(self,name:str)
pandas.io.common._MMapWrapper.__init__(self,f:IO)
pandas.io.common._MMapWrapper.__iter__(self)->'_MMapWrapper'
pandas.io.common._MMapWrapper.__next__(self)->str
pandas.io.common._expand_user(filepath_or_buffer:FilePathOrBuffer[AnyStr])->FilePathOrBuffer[AnyStr]
pandas.io.common.file_path_to_url(path:str)->str
pandas.io.common.get_compression_method(compression:Optional[Union[str,Mapping[str,str]]])->Tuple[Optional[str], Dict[str, str]]
pandas.io.common.get_filepath_or_buffer(filepath_or_buffer:FilePathOrBuffer,encoding:Optional[str]=None,compression:Optional[str]=None,mode:Optional[str]=None)
pandas.io.common.get_fs_for_path(filepath:str)
pandas.io.common.get_handle(path_or_buf,mode:str,encoding=None,compression:Optional[Union[str,Mapping[str,Any]]]=None,memory_map:bool=False,is_text:bool=True)
pandas.io.common.infer_compression(filepath_or_buffer:FilePathOrBuffer,compression:Optional[str])->Optional[str]
pandas.io.common.is_gcs_url(url)->bool
pandas.io.common.is_s3_url(url)->bool
pandas.io.common.is_url(url)->bool
pandas.io.common.stringify_path(filepath_or_buffer:FilePathOrBuffer[AnyStr])->FilePathOrBuffer[AnyStr]
pandas.io.common.urlopen(*args,**kwargs)
pandas.io.common.validate_header_arg(header)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/gcs.py----------------------------------------
A:pandas.io.gcs.gcsfs->import_optional_dependency('gcsfs', extra='The gcsfs library is required to handle GCS files')
A:pandas.io.gcs.fs->get_fs()
A:pandas.io.gcs.filepath_or_buffer->get_fs().open(filepath_or_buffer, mode)
pandas.io.gcs.get_filepath_or_buffer(filepath_or_buffer,encoding=None,compression=None,mode=None)
pandas.io.gcs.get_fs()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/stata.py----------------------------------------
A:pandas.io.stata.reader->StataReader(filepath_or_buffer, convert_dates=convert_dates, convert_categoricals=convert_categoricals, index_col=index_col, convert_missing=convert_missing, preserve_dtypes=preserve_dtypes, columns=columns, order_categoricals=order_categoricals, chunksize=chunksize)
A:pandas.io.stata.data->self._convert_strls(data)
A:pandas.io.stata.stata_epoch->datetime.datetime(1960, 1, 1)
A:pandas.io.stata.index->getattr(deltas, 'index', None)
A:pandas.io.stata.base->to_datetime(base)
A:pandas.io.stata.deltas->to_timedelta(deltas, unit=unit)
A:pandas.io.stata.bad_locs->numpy.isnan(dates)
A:pandas.io.stata.data_col->Series(dates)
A:pandas.io.stata.dates->Series(dates)
A:pandas.io.stata.conv_dates->Series(conv_dates, dtype=np.float64)
A:pandas.io.stata.month->numpy.ones_like(dates)
A:pandas.io.stata.v->numpy.vectorize(f)
A:pandas.io.stata.d['delta']->v(delta)
A:pandas.io.stata.year_month->Series(dates).apply(lambda x: 100 * x.year + x.month)
A:pandas.io.stata.d['days']->v(dates)
A:pandas.io.stata.bad_loc->isna(dates)
A:pandas.io.stata.dates[bad_loc]->to_datetime(stata_epoch)
A:pandas.io.stata.d->parse_dates_safe(dates, year=True)
A:pandas.io.stata.ws->invalid_name_doc.format('\n    '.join(conversion_warning))
A:pandas.io.stata.data[col]->data[col].astype(stype).astype(stype)
A:pandas.io.stata.value->property(lambda self: self._value, doc='The binary representation of the missing value.')
A:pandas.io.stata.self.value_labels->list(zip(np.arange(len(categories)), categories))
A:pandas.io.stata.self.text_len->numpy.int32(0)
A:pandas.io.stata.category->category.encode(encoding).encode(encoding)
A:pandas.io.stata.self.off->numpy.array(self.off, dtype=np.int32)
A:pandas.io.stata.self.val->numpy.array(self.val, dtype=np.int32)
A:pandas.io.stata.bio->BytesIO()
A:pandas.io.stata.labname->self._decode(self.path_or_buf.read(129))
A:pandas.io.stata.float32_base->struct.pack('<i', int_value)
A:pandas.io.stata.float64_base->struct.pack('q', int_value)
A:pandas.io.stata.string->property(lambda self: self._str, doc="The Stata representation of the missing value: '.', '.a'..'.z'")
A:pandas.io.stata.self.DTYPE_MAP->dict(list(zip(range(1, 245), ['a' + str(i) for i in range(1, 245)])) + [(251, np.int8), (252, np.int16), (253, np.int32), (254, np.float32), (255, np.float64)])
A:pandas.io.stata.self.DTYPE_MAP_XML->dict([(32768, np.uint8), (65526, np.float64), (65527, np.float32), (65528, np.int32), (65529, np.int16), (65530, np.int8)])
A:pandas.io.stata.self.TYPE_MAP_XML->dict([(32768, 'Q'), (65526, 'd'), (65527, 'f'), (65528, 'l'), (65529, 'h'), (65530, 'b')])
A:pandas.io.stata.self._native_byteorder->_set_endianness(sys.byteorder)
A:pandas.io.stata.path_or_buf->stringify_path(path_or_buf)
A:pandas.io.stata.(path_or_buf, encoding, _, should_close)->get_filepath_or_buffer(path_or_buf)
A:pandas.io.stata.self.path_or_buf->BytesIO(contents)
A:pandas.io.stata.contents->stringify_path(path_or_buf).read()
A:pandas.io.stata.first_char->self.path_or_buf.read(1)
A:pandas.io.stata.self.format_version->int(self.path_or_buf.read(3))
A:pandas.io.stata.self.nobs->self._get_nobs()
A:pandas.io.stata.self._data_label->self._get_data_label()
A:pandas.io.stata.self.time_stamp->self._get_time_stamp()
A:pandas.io.stata.self._seek_variable_labels->self._get_seek_variable_labels()
A:pandas.io.stata.(self.typlist, self.dtyplist)->self._get_dtypes(self._seek_vartypes)
A:pandas.io.stata.self.varlist->self._convert_strls(data).columns.tolist()
A:pandas.io.stata.self.fmtlist->self._get_fmtlist()
A:pandas.io.stata.self.lbllist->self._get_lbllist()
A:pandas.io.stata.self._variable_labels->self._get_variable_labels()
A:pandas.io.stata.buf->self.path_or_buf.read(12)
A:pandas.io.stata.typlistb->numpy.frombuffer(buf, dtype=np.uint8)
A:pandas.io.stata.invalid_types->','.join((str(x) for x in typlist))
A:pandas.io.stata.invalid_dtypes->','.join((str(x) for x in typlist))
A:pandas.io.stata.self.data_location->self.path_or_buf.tell()
A:pandas.io.stata.dtype->dtype.newbyteorder(self._byteorder).newbyteorder(self._byteorder)
A:pandas.io.stata.self.value_label_dict->dict()
A:pandas.io.stata.slength->self.path_or_buf.read(4)
A:pandas.io.stata.off->numpy.frombuffer(self.path_or_buf.read(4 * n), dtype=self.byteorder + 'i4', count=n)
A:pandas.io.stata.val->bytes(val, 'utf-8')
A:pandas.io.stata.ii->numpy.argsort(off)
A:pandas.io.stata.txt->self.path_or_buf.read(txtlen)
A:pandas.io.stata.self.value_label_dict[labname]->dict()
A:pandas.io.stata.self.value_label_dict[labname][val[i]]->self._decode(txt[off[i]:end])
A:pandas.io.stata.va->va[0:-1].decode(self._encoding)
A:pandas.io.stata.read_len->min(read_len, max_read_len)
A:pandas.io.stata.read_lines->min(nrows, self.nobs - self._lines_read)
A:pandas.io.stata.ix->numpy.arange(self._lines_read - read_lines, self._lines_read)
A:pandas.io.stata.missing->numpy.logical_or(series < nmin, series > nmax)
A:pandas.io.stata.missing_loc->numpy.argwhere(missing._ndarray_values)
A:pandas.io.stata.(umissing, umissing_loc)->numpy.unique(series[missing], return_inverse=True)
A:pandas.io.stata.replacement->Series(series, dtype=dtype)
A:pandas.io.stata.missing_value->StataMissingValue(um)
A:pandas.io.stata.replacements->DataFrame(replacements)
A:pandas.io.stata.column_set->set(columns)
A:pandas.io.stata.unmatched->set(columns).difference(data.columns)
A:pandas.io.stata.i->self._convert_strls(data).columns.get_loc(col)
A:pandas.io.stata.value_labels->list(value_label_dict.keys())
A:pandas.io.stata.cat_data->Series(cat_data, index=data.index)
A:pandas.io.stata.vc->Series(categories).value_counts()
A:pandas.io.stata.repeats->list(vc.index[vc > 1])
A:pandas.io.stata.itemsize->max(itemsize, 1)
A:pandas.io.stata.self._byteorder->_set_endianness(byteorder)
A:pandas.io.stata.self._fname->stringify_path(fname)
A:pandas.io.stata.svl->StataValueLabel(data[col], encoding=self._encoding)
A:pandas.io.stata.values->numpy.array(values, dtype=dtype)
A:pandas.io.stata.values[values == -1]->get_base_missing_value(dtype)
A:pandas.io.stata.data[c]->data[c].fillna(replacement).fillna(replacement)
A:pandas.io.stata.name->name.replace(c, '_').replace(c, '_')
A:pandas.io.stata.columns->list(gso_df.columns)
A:pandas.io.stata.orig_name->orig_name.encode('utf-8').encode('utf-8')
A:pandas.io.stata.self._convert_dates->_maybe_convert_to_int_keys(self._convert_dates, self.varlist)
A:pandas.io.stata.new_type->_convert_datetime_to_stata_type(self._convert_dates[key])
A:pandas.io.stata.dtypes[key]->numpy.dtype(new_type)
A:pandas.io.stata.convert_strl->getattr(self, '_convert_strl', [])
A:pandas.io.stata.inferred_dtype->infer_dtype(column, skipna=True)
A:pandas.io.stata.encoded->label.encode(self._encoding).encode(self._encoding)
A:pandas.io.stata.(self._file, self._own_file)->_open_file_binary_write(self._fname)
A:pandas.io.stata.time_stamp->datetime.datetime.now()
A:pandas.io.stata.srtlist->_pad_bytes('', 2 * (self.nvar + 1))
A:pandas.io.stata.blank->_pad_bytes_new('', vl_len + 1)
A:pandas.io.stata.is_latin1->all((ord(c) < 256 for c in label))
A:pandas.io.stata.self.data->self._convert_strls(data).to_records(index=False, column_dtypes=dtypes)
A:pandas.io.stata.s->s.encode(self._encoding).encode(self._encoding)
A:pandas.io.stata.keys->numpy.empty(selected.shape, dtype=np.uint64)
A:pandas.io.stata.key->gso_table.get(val, None)
A:pandas.io.stata.keys[o, j]->self._convert_key(key)
A:pandas.io.stata.gso->bytes('GSO', 'ascii')
A:pandas.io.stata.gso_type->struct.pack(self._byteorder + 'B', 130)
A:pandas.io.stata.null->struct.pack(self._byteorder + 'B', 0)
A:pandas.io.stata.utf8_string->bytes(strl, 'utf-8')
A:pandas.io.stata.self._map[tag]->self._file.tell()
A:pandas.io.stata.label->label.encode(self._encoding).encode(self._encoding)
A:pandas.io.stata.label_len->struct.pack(byteorder + label_size, len(label))
A:pandas.io.stata.self._map->dict((('stata_data', 0), ('map', self._file.tell()), ('variable_types', 0), ('varnames', 0), ('sortlist', 0), ('formats', 0), ('value_label_names', 0), ('variable_labels', 0), ('characteristics', 0), ('data', 0), ('strls', 0), ('value_labels', 0), ('stata_data_close', 0), ('end-of-file', 0)))
A:pandas.io.stata.lab->self._tag(lab, 'lbl')
A:pandas.io.stata.idx->self._convert_strl.index(orig)
A:pandas.io.stata.ssw->StataStrLWriter(data, convert_cols, version=self._dta_version)
A:pandas.io.stata.(tab, new_data)->StataStrLWriter(data, convert_cols, version=self._dta_version).generate_table()
A:pandas.io.stata.self._strl_blob->StataStrLWriter(data, convert_cols, version=self._dta_version).generate_blob(tab)
A:pandas.io.stata.fmt->_dtype_to_default_stata_fmt(dtype, self.data[col], dta_version=self._dta_version, force_strl=force_strl)
pandas.io.stata.InvalidColumnName(Warning)
pandas.io.stata.PossiblePrecisionLoss(Warning)
pandas.io.stata.StataMissingValue(self,value)
pandas.io.stata.StataMissingValue.__eq__(self,other:Any)->bool
pandas.io.stata.StataMissingValue.__init__(self,value)
pandas.io.stata.StataMissingValue.__repr__(self)->str
pandas.io.stata.StataMissingValue.__str__(self)->str
pandas.io.stata.StataMissingValue.get_base_missing_value(cls,dtype)
pandas.io.stata.StataParser(self)
pandas.io.stata.StataParser.__init__(self)
pandas.io.stata.StataReader(self,path_or_buf,convert_dates=True,convert_categoricals=True,index_col=None,convert_missing=False,preserve_dtypes=True,columns=None,order_categoricals=True,chunksize=None)
pandas.io.stata.StataReader.__enter__(self)
pandas.io.stata.StataReader.__exit__(self,exc_type,exc_value,traceback)
pandas.io.stata.StataReader.__init__(self,path_or_buf,convert_dates=True,convert_categoricals=True,index_col=None,convert_missing=False,preserve_dtypes=True,columns=None,order_categoricals=True,chunksize=None)
pandas.io.stata.StataReader.__next__(self)
pandas.io.stata.StataReader._calcsize(self,fmt)
pandas.io.stata.StataReader._decode(self,s)
pandas.io.stata.StataReader._do_convert_categoricals(self,data,value_label_dict,lbllist,order_categoricals)
pandas.io.stata.StataReader._do_convert_missing(self,data,convert_missing)
pandas.io.stata.StataReader._do_select_columns(self,data,columns)
pandas.io.stata.StataReader._get_data_label(self)
pandas.io.stata.StataReader._get_dtypes(self,seek_vartypes)
pandas.io.stata.StataReader._get_fmtlist(self)
pandas.io.stata.StataReader._get_lbllist(self)
pandas.io.stata.StataReader._get_nobs(self)
pandas.io.stata.StataReader._get_seek_variable_labels(self)
pandas.io.stata.StataReader._get_time_stamp(self)
pandas.io.stata.StataReader._get_variable_labels(self)
pandas.io.stata.StataReader._get_varlist(self)
pandas.io.stata.StataReader._insert_strls(self,data)
pandas.io.stata.StataReader._read_header(self)
pandas.io.stata.StataReader._read_new_header(self,first_char)
pandas.io.stata.StataReader._read_old_header(self,first_char)
pandas.io.stata.StataReader._read_strls(self)
pandas.io.stata.StataReader._read_value_labels(self)
pandas.io.stata.StataReader._set_encoding(self)
pandas.io.stata.StataReader._setup_dtype(self)
pandas.io.stata.StataReader.close(self)
pandas.io.stata.StataReader.data_label(self)
pandas.io.stata.StataReader.get_chunk(self,size=None)
pandas.io.stata.StataReader.read(self,nrows=None,convert_dates=None,convert_categoricals=None,index_col=None,convert_missing=None,preserve_dtypes=None,columns=None,order_categoricals=None)
pandas.io.stata.StataReader.value_labels(self)
pandas.io.stata.StataReader.variable_labels(self)
pandas.io.stata.StataStrLWriter(self,df,columns,version=117,byteorder=None)
pandas.io.stata.StataStrLWriter.__init__(self,df,columns,version=117,byteorder=None)
pandas.io.stata.StataStrLWriter._convert_key(self,key)
pandas.io.stata.StataStrLWriter.generate_blob(self,gso_table)
pandas.io.stata.StataStrLWriter.generate_table(self)
pandas.io.stata.StataValueLabel(self,catarray,encoding='latin-1')
pandas.io.stata.StataValueLabel.__init__(self,catarray,encoding='latin-1')
pandas.io.stata.StataValueLabel._encode(self,s)
pandas.io.stata.StataValueLabel.generate_value_label(self,byteorder)
pandas.io.stata.StataWriter(self,fname,data,convert_dates=None,write_index=True,byteorder=None,time_stamp=None,data_label=None,variable_labels=None)
pandas.io.stata.StataWriter.__init__(self,fname,data,convert_dates=None,write_index=True,byteorder=None,time_stamp=None,data_label=None,variable_labels=None)
pandas.io.stata.StataWriter._check_column_names(self,data)
pandas.io.stata.StataWriter._close(self)
pandas.io.stata.StataWriter._convert_strls(self,data)
pandas.io.stata.StataWriter._encode_strings(self)
pandas.io.stata.StataWriter._null_terminate(self,s,as_string=False)
pandas.io.stata.StataWriter._prepare_categoricals(self,data)
pandas.io.stata.StataWriter._prepare_data(self)
pandas.io.stata.StataWriter._prepare_pandas(self,data)
pandas.io.stata.StataWriter._replace_nans(self,data)
pandas.io.stata.StataWriter._set_formats_and_types(self,dtypes)
pandas.io.stata.StataWriter._update_strl_names(self)
pandas.io.stata.StataWriter._validate_variable_name(self,name)
pandas.io.stata.StataWriter._write(self,to_write)
pandas.io.stata.StataWriter._write_characteristics(self)
pandas.io.stata.StataWriter._write_data(self)
pandas.io.stata.StataWriter._write_expansion_fields(self)
pandas.io.stata.StataWriter._write_file_close_tag(self)
pandas.io.stata.StataWriter._write_formats(self)
pandas.io.stata.StataWriter._write_header(self,data_label=None,time_stamp=None)
pandas.io.stata.StataWriter._write_map(self)
pandas.io.stata.StataWriter._write_sortlist(self)
pandas.io.stata.StataWriter._write_strls(self)
pandas.io.stata.StataWriter._write_value_label_names(self)
pandas.io.stata.StataWriter._write_value_labels(self)
pandas.io.stata.StataWriter._write_variable_labels(self)
pandas.io.stata.StataWriter._write_variable_types(self)
pandas.io.stata.StataWriter._write_varnames(self)
pandas.io.stata.StataWriter.write_file(self)
pandas.io.stata.StataWriter117(self,fname,data,convert_dates=None,write_index=True,byteorder=None,time_stamp=None,data_label=None,variable_labels=None,convert_strl=None)
pandas.io.stata.StataWriter117.__init__(self,fname,data,convert_dates=None,write_index=True,byteorder=None,time_stamp=None,data_label=None,variable_labels=None,convert_strl=None)
pandas.io.stata.StataWriter117._convert_strls(self,data)
pandas.io.stata.StataWriter117._set_formats_and_types(self,dtypes)
pandas.io.stata.StataWriter117._tag(val,tag)
pandas.io.stata.StataWriter117._update_map(self,tag)
pandas.io.stata.StataWriter117._update_strl_names(self)
pandas.io.stata.StataWriter117._write_characteristics(self)
pandas.io.stata.StataWriter117._write_data(self)
pandas.io.stata.StataWriter117._write_expansion_fields(self)
pandas.io.stata.StataWriter117._write_file_close_tag(self)
pandas.io.stata.StataWriter117._write_formats(self)
pandas.io.stata.StataWriter117._write_header(self,data_label=None,time_stamp=None)
pandas.io.stata.StataWriter117._write_map(self)
pandas.io.stata.StataWriter117._write_sortlist(self)
pandas.io.stata.StataWriter117._write_strls(self)
pandas.io.stata.StataWriter117._write_value_label_names(self)
pandas.io.stata.StataWriter117._write_value_labels(self)
pandas.io.stata.StataWriter117._write_variable_labels(self)
pandas.io.stata.StataWriter117._write_variable_types(self)
pandas.io.stata.StataWriter117._write_varnames(self)
pandas.io.stata.StataWriterUTF8(self,fname:FilePathOrBuffer,data:DataFrame,convert_dates:Optional[Dict[Hashable,str]]=None,write_index:bool=True,byteorder:Optional[str]=None,time_stamp:Optional[datetime.datetime]=None,data_label:Optional[str]=None,variable_labels:Optional[Dict[Hashable,str]]=None,convert_strl:Optional[Sequence[Hashable]]=None,version:Optional[int]=None)
pandas.io.stata.StataWriterUTF8.__init__(self,fname:FilePathOrBuffer,data:DataFrame,convert_dates:Optional[Dict[Hashable,str]]=None,write_index:bool=True,byteorder:Optional[str]=None,time_stamp:Optional[datetime.datetime]=None,data_label:Optional[str]=None,variable_labels:Optional[Dict[Hashable,str]]=None,convert_strl:Optional[Sequence[Hashable]]=None,version:Optional[int]=None)
pandas.io.stata.StataWriterUTF8._validate_variable_name(self,name:str)->str
pandas.io.stata.ValueLabelTypeMismatch(Warning)
pandas.io.stata._cast_to_stata_types(data)
pandas.io.stata._convert_datetime_to_stata_type(fmt)
pandas.io.stata._convert_dt_to_stata_type(fmt)
pandas.io.stata._datetime_to_stata_elapsed_vec(dates,fmt)
pandas.io.stata._dt_to_stata_elapsed_vec(dates,fmt)
pandas.io.stata._dtype_to_default_stata_fmt(dtype,column,dta_version=114,force_strl=False)
pandas.io.stata._dtype_to_stata_type(dtype,column)
pandas.io.stata._dtype_to_stata_type_117(dtype,column,force_strl)
pandas.io.stata._maybe_convert_to_int_keys(convert_dates,varlist)
pandas.io.stata._open_file_binary_write(fname)
pandas.io.stata._pad_bytes(name,length)
pandas.io.stata._pad_bytes_new(name,length)
pandas.io.stata._set_endianness(endianness)
pandas.io.stata._stata_elapsed_date_to_datetime_vec(dates,fmt)
pandas.io.stata._stata_elapsed_date_to_dt_vec(dates,fmt)
pandas.io.stata.read_stata(filepath_or_buffer,convert_dates=True,convert_categoricals=True,index_col=None,convert_missing=False,preserve_dtypes=True,columns=None,order_categoricals=True,chunksize=None,iterator=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/spss.py----------------------------------------
A:pandas.io.spss.pyreadstat->import_optional_dependency('pyreadstat')
A:pandas.io.spss.usecols->list(usecols)
A:pandas.io.spss.(df, _)->import_optional_dependency('pyreadstat').read_sav(path, usecols=usecols, apply_value_formats=convert_categoricals)
pandas.io.spss.read_spss(path:Union[str,Path],usecols:Optional[Sequence[str]]=None,convert_categoricals:bool=True)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/date_converters.py----------------------------------------
A:pandas.io.date_converters.date_col->_maybe_cast(date_col)
A:pandas.io.date_converters.time_col->_maybe_cast(time_col)
A:pandas.io.date_converters.year_col->_maybe_cast(year_col)
A:pandas.io.date_converters.month_col->_maybe_cast(month_col)
A:pandas.io.date_converters.day_col->_maybe_cast(day_col)
A:pandas.io.date_converters.hour_col->_maybe_cast(hour_col)
A:pandas.io.date_converters.minute_col->_maybe_cast(minute_col)
A:pandas.io.date_converters.second_col->_maybe_cast(second_col)
A:pandas.io.date_converters.N->len(head)
A:pandas.io.date_converters.results->numpy.empty(N, dtype=object)
A:pandas.io.date_converters.results[i]->parse_func(*args)
A:pandas.io.date_converters.arr->numpy.array(arr, dtype=object)
pandas.io.date_converters._check_columns(cols)
pandas.io.date_converters._maybe_cast(arr)
pandas.io.date_converters.generic_parser(parse_func,*cols)
pandas.io.date_converters.parse_all_fields(year_col,month_col,day_col,hour_col,minute_col,second_col)
pandas.io.date_converters.parse_date_fields(year_col,month_col,day_col)
pandas.io.date_converters.parse_date_time(date_col,time_col)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/orc.py----------------------------------------
A:pandas.io.orc.(path, _, _, _)->get_filepath_or_buffer(path)
A:pandas.io.orc.orc_file->pyarrow.orc.ORCFile(path)
A:pandas.io.orc.result->pyarrow.orc.ORCFile(path).read(columns=columns, **kwargs).to_pandas()
pandas.io.orc.read_orc(path:FilePathOrBuffer,columns:Optional[List[str]]=None,**kwargs)->'DataFrame'


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/excel/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/excel/_xlsxwriter.py----------------------------------------
A:pandas.io.excel._xlsxwriter.style_dict->style_dict.copy().copy()
A:pandas.io.excel._xlsxwriter.style_dict['border']->style_dict.copy().copy().pop('borders')
A:pandas.io.excel._xlsxwriter.props[k]->['none', 'thin', 'medium', 'dashed', 'dotted', 'thick', 'double', 'hair', 'mediumDashed', 'dashDot', 'mediumDashDot', 'dashDotDot', 'mediumDashDotDot', 'slantDashDot'].index(props[k])
A:pandas.io.excel._xlsxwriter.props['font_script']->['baseline', 'superscript', 'subscript'].index(props['font_script'])
A:pandas.io.excel._xlsxwriter.self.book->xlsxwriter.Workbook(path, **engine_kwargs)
A:pandas.io.excel._xlsxwriter.sheet_name->self._get_sheet_name(sheet_name)
A:pandas.io.excel._xlsxwriter.wks->self.book.add_worksheet(sheet_name)
A:pandas.io.excel._xlsxwriter.(val, fmt)->self._value_with_fmt(cell.val)
A:pandas.io.excel._xlsxwriter.stylekey->pandas._libs.json.dumps(cell.style)
A:pandas.io.excel._xlsxwriter.style->self.book.add_format(_XlsxStyler.convert(cell.style, fmt))
pandas.io.excel._XlsxWriter(self,path,engine=None,date_format=None,datetime_format=None,mode='w',**engine_kwargs)
pandas.io.excel._XlsxWriter.save(self)
pandas.io.excel._XlsxWriter.write_cells(self,cells,sheet_name=None,startrow=0,startcol=0,freeze_panes=None)
pandas.io.excel._xlsxwriter._XlsxStyler
pandas.io.excel._xlsxwriter._XlsxStyler.convert(cls,style_dict,num_format_str=None)
pandas.io.excel._xlsxwriter._XlsxWriter(self,path,engine=None,date_format=None,datetime_format=None,mode='w',**engine_kwargs)
pandas.io.excel._xlsxwriter._XlsxWriter.__init__(self,path,engine=None,date_format=None,datetime_format=None,mode='w',**engine_kwargs)
pandas.io.excel._xlsxwriter._XlsxWriter.save(self)
pandas.io.excel._xlsxwriter._XlsxWriter.write_cells(self,cells,sheet_name=None,startrow=0,startcol=0,freeze_panes=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/excel/_util.py----------------------------------------
A:pandas.io.excel._util.xlsxwriter->import_optional_dependency('xlsxwriter', raise_on_missing=False, on_version='warn')
A:pandas.io.excel._util.cp->ord(c)
A:pandas.io.excel._util.rng->rng.split(':').split(':')
pandas.io.excel._util._excel2num(x)
pandas.io.excel._util._fill_mi_header(row,control_row)
pandas.io.excel._util._get_default_writer(ext)
pandas.io.excel._util._maybe_convert_usecols(usecols)
pandas.io.excel._util._pop_header_name(row,index_col)
pandas.io.excel._util._range2cols(areas)
pandas.io.excel._util._trim_excel_header(row)
pandas.io.excel._util._validate_freeze_panes(freeze_panes)
pandas.io.excel._util.get_writer(engine_name)
pandas.io.excel._util.register_writer(klass)
pandas.io.excel.register_writer(klass)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/excel/_odfreader.py----------------------------------------
A:pandas.io.excel._odfreader.tables->self.book.getElementsByType(Table)
A:pandas.io.excel._odfreader.sheet_rows->sheet.getElementsByType(TableRow)
A:pandas.io.excel._odfreader.value->self._get_cell_value(sheet_cell, convert_float)
A:pandas.io.excel._odfreader.column_repeat->self._get_column_repeat(sheet_cell)
A:pandas.io.excel._odfreader.max_row_len->len(table_row)
A:pandas.io.excel._odfreader.row_repeat->self._get_row_repeat(sheet_row)
A:pandas.io.excel._odfreader.cell_type->cell.attributes.get((OFFICENS, 'value-type'))
A:pandas.io.excel._odfreader.cell_value->cell.attributes.get((OFFICENS, 'date-value'))
A:pandas.io.excel._odfreader.val->int(cell_value)
pandas.io.excel._odfreader._ODFReader(self,filepath_or_buffer:FilePathOrBuffer)
pandas.io.excel._odfreader._ODFReader.__init__(self,filepath_or_buffer:FilePathOrBuffer)
pandas.io.excel._odfreader._ODFReader._get_cell_value(self,cell,convert_float:bool)->Scalar
pandas.io.excel._odfreader._ODFReader._get_column_repeat(self,cell)->int
pandas.io.excel._odfreader._ODFReader._get_row_repeat(self,row)->int
pandas.io.excel._odfreader._ODFReader._is_empty_row(self,row)->bool
pandas.io.excel._odfreader._ODFReader._workbook_class(self)
pandas.io.excel._odfreader._ODFReader.empty_value(self)->str
pandas.io.excel._odfreader._ODFReader.get_sheet_by_index(self,index:int)
pandas.io.excel._odfreader._ODFReader.get_sheet_by_name(self,name:str)
pandas.io.excel._odfreader._ODFReader.get_sheet_data(self,sheet,convert_float:bool)->List[List[Scalar]]
pandas.io.excel._odfreader._ODFReader.load_workbook(self,filepath_or_buffer:FilePathOrBuffer)
pandas.io.excel._odfreader._ODFReader.sheet_names(self)->List[str]


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py----------------------------------------
A:pandas.io.excel._xlrd.data->filepath_or_buffer.read()
A:pandas.io.excel._xlrd.cell_contents->bool(cell_contents)
A:pandas.io.excel._xlrd.val->int(cell_contents)
pandas.io.excel._xlrd._XlrdReader(self,filepath_or_buffer)
pandas.io.excel._xlrd._XlrdReader.__init__(self,filepath_or_buffer)
pandas.io.excel._xlrd._XlrdReader._workbook_class(self)
pandas.io.excel._xlrd._XlrdReader.get_sheet_by_index(self,index)
pandas.io.excel._xlrd._XlrdReader.get_sheet_by_name(self,name)
pandas.io.excel._xlrd._XlrdReader.get_sheet_data(self,sheet,convert_float)
pandas.io.excel._xlrd._XlrdReader.load_workbook(self,filepath_or_buffer)
pandas.io.excel._xlrd._XlrdReader.sheet_names(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/excel/_xlwt.py----------------------------------------
A:pandas.io.excel._xlwt.self.book->xlwt.Workbook(encoding=encoding)
A:pandas.io.excel._xlwt.self.fm_datetime->xlwt.easyxf(num_format_str=self.datetime_format)
A:pandas.io.excel._xlwt.self.fm_date->xlwt.easyxf(num_format_str=self.date_format)
A:pandas.io.excel._xlwt.sheet_name->self._get_sheet_name(sheet_name)
A:pandas.io.excel._xlwt.wks->self.book.add_sheet(sheet_name)
A:pandas.io.excel._xlwt.(val, fmt)->self._value_with_fmt(cell.val)
A:pandas.io.excel._xlwt.stylekey->pandas._libs.json.dumps(cell.style)
A:pandas.io.excel._xlwt.style->xlwt.XFStyle()
A:pandas.io.excel._xlwt.item->item.replace('False', 'off').replace('False', 'off')
A:pandas.io.excel._xlwt.xlwt_stylestr->cls._style_to_xlwt(style_dict)
pandas.io.excel._XlwtWriter(self,path,engine=None,encoding=None,mode='w',**engine_kwargs)
pandas.io.excel._XlwtWriter._convert_to_style(cls,style_dict,num_format_str=None)
pandas.io.excel._XlwtWriter._style_to_xlwt(cls,item,firstlevel:bool=True,field_sep=',',line_sep=';')->str
pandas.io.excel._XlwtWriter.save(self)
pandas.io.excel._XlwtWriter.write_cells(self,cells,sheet_name=None,startrow=0,startcol=0,freeze_panes=None)
pandas.io.excel._xlwt._XlwtWriter(self,path,engine=None,encoding=None,mode='w',**engine_kwargs)
pandas.io.excel._xlwt._XlwtWriter.__init__(self,path,engine=None,encoding=None,mode='w',**engine_kwargs)
pandas.io.excel._xlwt._XlwtWriter._convert_to_style(cls,style_dict,num_format_str=None)
pandas.io.excel._xlwt._XlwtWriter._style_to_xlwt(cls,item,firstlevel:bool=True,field_sep=',',line_sep=';')->str
pandas.io.excel._xlwt._XlwtWriter.save(self)
pandas.io.excel._xlwt._XlwtWriter.write_cells(self,cells,sheet_name=None,startrow=0,startcol=0,freeze_panes=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/excel/_pyxlsb.py----------------------------------------
A:pandas.io.excel._pyxlsb.val->int(cell.v)
pandas.io.excel._pyxlsb._PyxlsbReader(self,filepath_or_buffer:FilePathOrBuffer)
pandas.io.excel._pyxlsb._PyxlsbReader.__init__(self,filepath_or_buffer:FilePathOrBuffer)
pandas.io.excel._pyxlsb._PyxlsbReader._convert_cell(self,cell,convert_float:bool)->Scalar
pandas.io.excel._pyxlsb._PyxlsbReader._workbook_class(self)
pandas.io.excel._pyxlsb._PyxlsbReader.get_sheet_by_index(self,index:int)
pandas.io.excel._pyxlsb._PyxlsbReader.get_sheet_by_name(self,name:str)
pandas.io.excel._pyxlsb._PyxlsbReader.get_sheet_data(self,sheet,convert_float:bool)->List[List[Scalar]]
pandas.io.excel._pyxlsb._PyxlsbReader.load_workbook(self,filepath_or_buffer:FilePathOrBuffer)
pandas.io.excel._pyxlsb._PyxlsbReader.sheet_names(self)->List[str]


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/excel/_base.py----------------------------------------
A:pandas.io.excel._base.io->ExcelFile(io, engine=engine)
A:pandas.io.excel._base.filepath_or_buffer->BytesIO(urlopen(filepath_or_buffer).read())
A:pandas.io.excel._base.(filepath_or_buffer, _, _, _)->get_filepath_or_buffer(filepath_or_buffer)
A:pandas.io.excel._base.self.book->self.load_workbook(BytesIO(filepath_or_buffer))
A:pandas.io.excel._base.sheets->list(dict.fromkeys(sheets).keys())
A:pandas.io.excel._base.sheet->self.get_sheet_by_index(asheetname)
A:pandas.io.excel._base.data->self.get_sheet_data(sheet, convert_float)
A:pandas.io.excel._base.usecols->_maybe_convert_usecols(usecols)
A:pandas.io.excel._base.output[asheetname]->DataFrame()
A:pandas.io.excel._base.(data[row], control_row)->_fill_mi_header(data[row], control_row)
A:pandas.io.excel._base.(header_name, _)->_pop_header_name(data[row], index_col)
A:pandas.io.excel._base.parser->TextParser(data, names=names, header=header, index_col=index_col, has_index_names=has_index_names, squeeze=squeeze, dtype=dtype, true_values=true_values, false_values=false_values, skiprows=skiprows, nrows=nrows, na_values=na_values, parse_dates=parse_dates, date_parser=date_parser, thousands=thousands, comment=comment, skipfooter=skipfooter, usecols=usecols, mangle_dupe_cols=mangle_dupe_cols, **kwds)
A:pandas.io.excel._base.output[asheetname].columns->DataFrame().columns.set_names(header_names)
A:pandas.io.excel._base.engine->_get_default_writer(ext)
A:pandas.io.excel._base.cls->get_writer(engine)
A:pandas.io.excel._base.val->str(val)
A:pandas.io.excel._base.self._io->stringify_path(io)
A:pandas.io.excel._base.self._reader->self._engines[engine](self._io)
pandas.io.excel.ExcelFile(self,io,engine=None)
pandas.io.excel.ExcelFile.__del__(self)
pandas.io.excel.ExcelFile.__enter__(self)
pandas.io.excel.ExcelFile.__exit__(self,exc_type,exc_value,traceback)
pandas.io.excel.ExcelFile.__fspath__(self)
pandas.io.excel.ExcelFile.book(self)
pandas.io.excel.ExcelFile.close(self)
pandas.io.excel.ExcelFile.parse(self,sheet_name=0,header=0,names=None,index_col=None,usecols=None,squeeze=False,converters=None,true_values=None,false_values=None,skiprows=None,nrows=None,na_values=None,parse_dates=False,date_parser=None,thousands=None,comment=None,skipfooter=0,convert_float=True,mangle_dupe_cols=True,**kwds)
pandas.io.excel.ExcelFile.sheet_names(self)
pandas.io.excel.ExcelWriter(self,path,engine=None,date_format=None,datetime_format=None,mode='w',**engine_kwargs)
pandas.io.excel.ExcelWriter.__enter__(self)
pandas.io.excel.ExcelWriter.__exit__(self,exc_type,exc_value,traceback)
pandas.io.excel.ExcelWriter.__fspath__(self)
pandas.io.excel.ExcelWriter._get_sheet_name(self,sheet_name)
pandas.io.excel.ExcelWriter._value_with_fmt(self,val)
pandas.io.excel.ExcelWriter.check_extension(cls,ext)
pandas.io.excel.ExcelWriter.close(self)
pandas.io.excel.ExcelWriter.engine(self)
pandas.io.excel.ExcelWriter.save(self)
pandas.io.excel.ExcelWriter.supported_extensions(self)
pandas.io.excel.ExcelWriter.write_cells(self,cells,sheet_name=None,startrow=0,startcol=0,freeze_panes=None)
pandas.io.excel._base.ExcelFile(self,io,engine=None)
pandas.io.excel._base.ExcelFile.__del__(self)
pandas.io.excel._base.ExcelFile.__enter__(self)
pandas.io.excel._base.ExcelFile.__exit__(self,exc_type,exc_value,traceback)
pandas.io.excel._base.ExcelFile.__fspath__(self)
pandas.io.excel._base.ExcelFile.__init__(self,io,engine=None)
pandas.io.excel._base.ExcelFile.book(self)
pandas.io.excel._base.ExcelFile.close(self)
pandas.io.excel._base.ExcelFile.parse(self,sheet_name=0,header=0,names=None,index_col=None,usecols=None,squeeze=False,converters=None,true_values=None,false_values=None,skiprows=None,nrows=None,na_values=None,parse_dates=False,date_parser=None,thousands=None,comment=None,skipfooter=0,convert_float=True,mangle_dupe_cols=True,**kwds)
pandas.io.excel._base.ExcelFile.sheet_names(self)
pandas.io.excel._base.ExcelWriter(self,path,engine=None,date_format=None,datetime_format=None,mode='w',**engine_kwargs)
pandas.io.excel._base.ExcelWriter.__enter__(self)
pandas.io.excel._base.ExcelWriter.__exit__(self,exc_type,exc_value,traceback)
pandas.io.excel._base.ExcelWriter.__fspath__(self)
pandas.io.excel._base.ExcelWriter.__init__(self,path,engine=None,date_format=None,datetime_format=None,mode='w',**engine_kwargs)
pandas.io.excel._base.ExcelWriter._get_sheet_name(self,sheet_name)
pandas.io.excel._base.ExcelWriter._value_with_fmt(self,val)
pandas.io.excel._base.ExcelWriter.check_extension(cls,ext)
pandas.io.excel._base.ExcelWriter.close(self)
pandas.io.excel._base.ExcelWriter.engine(self)
pandas.io.excel._base.ExcelWriter.save(self)
pandas.io.excel._base.ExcelWriter.supported_extensions(self)
pandas.io.excel._base.ExcelWriter.write_cells(self,cells,sheet_name=None,startrow=0,startcol=0,freeze_panes=None)
pandas.io.excel._base._BaseExcelReader(self,filepath_or_buffer)
pandas.io.excel._base._BaseExcelReader.__init__(self,filepath_or_buffer)
pandas.io.excel._base._BaseExcelReader._workbook_class(self)
pandas.io.excel._base._BaseExcelReader.close(self)
pandas.io.excel._base._BaseExcelReader.get_sheet_by_index(self,index)
pandas.io.excel._base._BaseExcelReader.get_sheet_by_name(self,name)
pandas.io.excel._base._BaseExcelReader.get_sheet_data(self,sheet,convert_float)
pandas.io.excel._base._BaseExcelReader.load_workbook(self,filepath_or_buffer)
pandas.io.excel._base._BaseExcelReader.parse(self,sheet_name=0,header=0,names=None,index_col=None,usecols=None,squeeze=False,dtype=None,true_values=None,false_values=None,skiprows=None,nrows=None,na_values=None,verbose=False,parse_dates=False,date_parser=None,thousands=None,comment=None,skipfooter=0,convert_float=True,mangle_dupe_cols=True,**kwds)
pandas.io.excel._base._BaseExcelReader.sheet_names(self)
pandas.io.excel._base.read_excel(io,sheet_name=0,header=0,names=None,index_col=None,usecols=None,squeeze=False,dtype=None,engine=None,converters=None,true_values=None,false_values=None,skiprows=None,nrows=None,na_values=None,keep_default_na=True,verbose=False,parse_dates=False,date_parser=None,thousands=None,comment=None,skipfooter=0,convert_float=True,mangle_dupe_cols=True,**kwds)
pandas.io.excel.read_excel(io,sheet_name=0,header=0,names=None,index_col=None,usecols=None,squeeze=False,dtype=None,engine=None,converters=None,true_values=None,false_values=None,skiprows=None,nrows=None,na_values=None,keep_default_na=True,verbose=False,parse_dates=False,date_parser=None,thousands=None,comment=None,skipfooter=0,convert_float=True,mangle_dupe_cols=True,**kwds)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py----------------------------------------
A:pandas.io.excel._openpyxl.book->load_workbook(self.path)
A:pandas.io.excel._openpyxl.self.book->Workbook()
A:pandas.io.excel._openpyxl.xls_style->Style()
A:pandas.io.excel._openpyxl._conv_to_x->getattr(cls, f'_convert_to_{k}', lambda x: None)
A:pandas.io.excel._openpyxl.new_v->_conv_to_x(v)
A:pandas.io.excel._openpyxl.v->cls._convert_to_side(v)
A:pandas.io.excel._openpyxl.sheet_name->self._get_sheet_name(sheet_name)
A:pandas.io.excel._openpyxl.wks->self.book.create_sheet()
A:pandas.io.excel._openpyxl.wks.freeze_panes->self.book.create_sheet().cell(row=freeze_panes[0] + 1, column=freeze_panes[1] + 1)
A:pandas.io.excel._openpyxl.xcell->self.book.create_sheet().cell(column=col, row=row)
A:pandas.io.excel._openpyxl.(xcell.value, fmt)->self._value_with_fmt(cell.val)
A:pandas.io.excel._openpyxl.key->str(cell.style)
A:pandas.io.excel._openpyxl.style_kwargs->self._convert_to_style_kwargs(cell.style)
A:pandas.io.excel._openpyxl.val->int(cell.value)
pandas.io.excel._OpenpyxlWriter(self,path,engine=None,mode='w',**engine_kwargs)
pandas.io.excel._OpenpyxlWriter._convert_to_alignment(cls,alignment_dict)
pandas.io.excel._OpenpyxlWriter._convert_to_border(cls,border_dict)
pandas.io.excel._OpenpyxlWriter._convert_to_color(cls,color_spec)
pandas.io.excel._OpenpyxlWriter._convert_to_fill(cls,fill_dict)
pandas.io.excel._OpenpyxlWriter._convert_to_font(cls,font_dict)
pandas.io.excel._OpenpyxlWriter._convert_to_number_format(cls,number_format_dict)
pandas.io.excel._OpenpyxlWriter._convert_to_protection(cls,protection_dict)
pandas.io.excel._OpenpyxlWriter._convert_to_side(cls,side_spec)
pandas.io.excel._OpenpyxlWriter._convert_to_stop(cls,stop_seq)
pandas.io.excel._OpenpyxlWriter._convert_to_style(cls,style_dict)
pandas.io.excel._OpenpyxlWriter._convert_to_style_kwargs(cls,style_dict)
pandas.io.excel._OpenpyxlWriter.save(self)
pandas.io.excel._OpenpyxlWriter.write_cells(self,cells,sheet_name=None,startrow=0,startcol=0,freeze_panes=None)
pandas.io.excel._openpyxl._OpenpyxlReader(self,filepath_or_buffer:FilePathOrBuffer)
pandas.io.excel._openpyxl._OpenpyxlReader.__init__(self,filepath_or_buffer:FilePathOrBuffer)
pandas.io.excel._openpyxl._OpenpyxlReader._convert_cell(self,cell,convert_float:bool)->Scalar
pandas.io.excel._openpyxl._OpenpyxlReader._workbook_class(self)
pandas.io.excel._openpyxl._OpenpyxlReader.close(self)
pandas.io.excel._openpyxl._OpenpyxlReader.get_sheet_by_index(self,index:int)
pandas.io.excel._openpyxl._OpenpyxlReader.get_sheet_by_name(self,name:str)
pandas.io.excel._openpyxl._OpenpyxlReader.get_sheet_data(self,sheet,convert_float:bool)->List[List[Scalar]]
pandas.io.excel._openpyxl._OpenpyxlReader.load_workbook(self,filepath_or_buffer:FilePathOrBuffer)
pandas.io.excel._openpyxl._OpenpyxlReader.sheet_names(self)->List[str]
pandas.io.excel._openpyxl._OpenpyxlWriter(self,path,engine=None,mode='w',**engine_kwargs)
pandas.io.excel._openpyxl._OpenpyxlWriter.__init__(self,path,engine=None,mode='w',**engine_kwargs)
pandas.io.excel._openpyxl._OpenpyxlWriter._convert_to_alignment(cls,alignment_dict)
pandas.io.excel._openpyxl._OpenpyxlWriter._convert_to_border(cls,border_dict)
pandas.io.excel._openpyxl._OpenpyxlWriter._convert_to_color(cls,color_spec)
pandas.io.excel._openpyxl._OpenpyxlWriter._convert_to_fill(cls,fill_dict)
pandas.io.excel._openpyxl._OpenpyxlWriter._convert_to_font(cls,font_dict)
pandas.io.excel._openpyxl._OpenpyxlWriter._convert_to_number_format(cls,number_format_dict)
pandas.io.excel._openpyxl._OpenpyxlWriter._convert_to_protection(cls,protection_dict)
pandas.io.excel._openpyxl._OpenpyxlWriter._convert_to_side(cls,side_spec)
pandas.io.excel._openpyxl._OpenpyxlWriter._convert_to_stop(cls,stop_seq)
pandas.io.excel._openpyxl._OpenpyxlWriter._convert_to_style(cls,style_dict)
pandas.io.excel._openpyxl._OpenpyxlWriter._convert_to_style_kwargs(cls,style_dict)
pandas.io.excel._openpyxl._OpenpyxlWriter.save(self)
pandas.io.excel._openpyxl._OpenpyxlWriter.write_cells(self,cells,sheet_name=None,startrow=0,startcol=0,freeze_panes=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/formats/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/formats/printing.py----------------------------------------
A:pandas.io.formats.printing.strlen->kwargs.pop('strlen', len)
A:pandas.io.formats.printing.justfunc->kwargs.pop('justfunc', justify)
A:pandas.io.formats.printing.maxLen->max(map(len, lists))
A:pandas.io.formats.printing.nl->justfunc(lst, lengths[i], mode='left')
A:pandas.io.formats.printing.toJoin->zip(*newLists)
A:pandas.io.formats.printing.nitems->len(seq)
A:pandas.io.formats.printing.s->iter(seq)
A:pandas.io.formats.printing.body->', '.join(r)
A:pandas.io.formats.printing.escape_chars->list(escape_chars.keys())
A:pandas.io.formats.printing.result->as_escaped_string(thing)
A:pandas.io.formats.printing.value->pprint_thing(object)
A:pandas.io.formats.printing.ip->get_ipython()
A:pandas.io.formats.printing.formatters[mimetype]->TableSchemaFormatter()
A:pandas.io.formats.printing.(display_width, _)->get_console_size()
A:pandas.io.formats.printing.name_len->len(name)
A:pandas.io.formats.printing.n->min(max_seq_items // 2, 10)
A:pandas.io.formats.printing.adj->_get_adjustment()
A:pandas.io.formats.printing.first->formatter(obj[0])
A:pandas.io.formats.printing.last->formatter(obj[-1])
A:pandas.io.formats.printing.(head, tail)->_justify(head, tail)
A:pandas.io.formats.printing.max_length->max(best_len(head), best_len(tail))
A:pandas.io.formats.printing.pprinted_seq->_pprint_seq(value, max_seq_items=max_items)
A:pandas.io.formats.printing.(summary, line)->_extend_line(summary, line, tail[-1], display_width - 2, space2)
pandas.io.formats.printing._enable_data_resource_formatter(enable:bool)->None
pandas.io.formats.printing._justify(head:List[Sequence[str]],tail:List[Sequence[str]])->Tuple[List[Tuple[str, ...]], List[Tuple[str, ...]]]
pandas.io.formats.printing._pprint_dict(seq:Mapping,_nest_lvl:int=0,max_seq_items:Optional[int]=None,**kwds)->str
pandas.io.formats.printing._pprint_seq(seq:Sequence,_nest_lvl:int=0,max_seq_items:Optional[int]=None,**kwds)->str
pandas.io.formats.printing.adjoin(space:int,*lists:List[str],**kwargs)->str
pandas.io.formats.printing.format_object_attrs(obj:Sequence,include_dtype:bool=True)->List[Tuple[str, Union[str, int]]]
pandas.io.formats.printing.format_object_summary(obj,formatter:Callable,is_justify:bool=True,name:Optional[str]=None,indent_for_name:bool=True,line_break_each_value:bool=False)->str
pandas.io.formats.printing.justify(texts:Iterable[str],max_len:int,mode:str='right')->List[str]
pandas.io.formats.printing.pprint_thing(thing:Any,_nest_lvl:int=0,escape_chars:Optional[EscapeChars]=None,default_escapes:bool=False,quote_strings:bool=False,max_seq_items:Optional[int]=None)->str
pandas.io.formats.printing.pprint_thing_encoded(object,encoding:str='utf-8',errors:str='replace')->bytes


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/formats/html.py----------------------------------------
A:pandas.io.formats.html.border->cast(int, get_option('display.html.border'))
A:pandas.io.formats.html.self.fmt.col_space->'{colspace}px'.format(colspace=self.fmt.col_space)
A:pandas.io.formats.html.rs->pprint_thing(s, escape_chars=esc).strip()
A:pandas.io.formats.html.start_tag->'<{kind}>'.format(kind=kind)
A:pandas.io.formats.html.rs_unescaped->pprint_thing(s, escape_chars={}).strip()
A:pandas.io.formats.html.val_tag->tags.get(i, None)
A:pandas.io.formats.html.by->chr(215)
A:pandas.io.formats.html.use_mathjax->get_option('display.html.use_mathjax')
A:pandas.io.formats.html.self.classes->self.classes.split()
A:pandas.io.formats.html.id_section->' id="{table_id}"'.format(table_id=self.table_id)
A:pandas.io.formats.html.levels->frame.index.format(sparsify=sentinel, adjoin=False, names=False)
A:pandas.io.formats.html.level_lengths->get_level_lengths(levels, sentinel)
A:pandas.io.formats.html.j->len(row)
A:pandas.io.formats.html.tags[j]->dedent('\n'.join((template_first, template_mid, template_last))).format(span=records[i])
A:pandas.io.formats.html.fmt_values->self._get_formatted_values()
A:pandas.io.formats.html.nrows->len(frame)
A:pandas.io.formats.html.fmt->self.fmt._get_formatter('__index__')
A:pandas.io.formats.html.index_values->self.fmt.tr_frame.index.format()
A:pandas.io.formats.html.idx_values->list(zip(*frame.index.format(sparsify=False, adjoin=False, names=False)))
A:pandas.io.formats.html.ins_row->cast(int, ins_row)
A:pandas.io.formats.html.dot_row->list(idx_values[ins_row])
A:pandas.io.formats.html.idx_values[ins_row]->tuple(dot_row)
A:pandas.io.formats.html.template_mid->'\n\n'.join(map(lambda t: template_select % t, element_props))
A:pandas.io.formats.html.template->dedent('\n'.join((template_first, template_mid, template_last)))
pandas.io.formats.html.HTMLFormatter(self,formatter:DataFrameFormatter,classes:Optional[Union[str,List[str],Tuple[str,...]]]=None,border:Optional[int]=None)
pandas.io.formats.html.HTMLFormatter.__init__(self,formatter:DataFrameFormatter,classes:Optional[Union[str,List[str],Tuple[str,...]]]=None,border:Optional[int]=None)
pandas.io.formats.html.HTMLFormatter._get_columns_formatted_values(self)->Iterable
pandas.io.formats.html.HTMLFormatter._get_formatted_values(self)->Dict[int, List[str]]
pandas.io.formats.html.HTMLFormatter._write_body(self,indent:int)->None
pandas.io.formats.html.HTMLFormatter._write_cell(self,s:Any,kind:str='td',indent:int=0,tags:Optional[str]=None)->None
pandas.io.formats.html.HTMLFormatter._write_col_header(self,indent:int)->None
pandas.io.formats.html.HTMLFormatter._write_header(self,indent:int)->None
pandas.io.formats.html.HTMLFormatter._write_hierarchical_rows(self,fmt_values:Mapping[int,List[str]],indent:int)->None
pandas.io.formats.html.HTMLFormatter._write_regular_rows(self,fmt_values:Mapping[int,List[str]],indent:int)->None
pandas.io.formats.html.HTMLFormatter._write_row_header(self,indent:int)->None
pandas.io.formats.html.HTMLFormatter._write_table(self,indent:int=0)->None
pandas.io.formats.html.HTMLFormatter.is_truncated(self)->bool
pandas.io.formats.html.HTMLFormatter.ncols(self)->int
pandas.io.formats.html.HTMLFormatter.render(self)->List[str]
pandas.io.formats.html.HTMLFormatter.row_levels(self)->int
pandas.io.formats.html.HTMLFormatter.show_col_idx_names(self)->bool
pandas.io.formats.html.HTMLFormatter.show_row_idx_names(self)->bool
pandas.io.formats.html.HTMLFormatter.write(self,s:Any,indent:int=0)->None
pandas.io.formats.html.HTMLFormatter.write_result(self,buf:IO[str])->None
pandas.io.formats.html.HTMLFormatter.write_td(self,s:Any,indent:int=0,tags:Optional[str]=None)->None
pandas.io.formats.html.HTMLFormatter.write_th(self,s:Any,header:bool=False,indent:int=0,tags:Optional[str]=None)->None
pandas.io.formats.html.HTMLFormatter.write_tr(self,line:Iterable,indent:int=0,indent_delta:int=0,header:bool=False,align:Optional[str]=None,tags:Optional[Dict[int,str]]=None,nindex_levels:int=0)->None
pandas.io.formats.html.NotebookFormatter(HTMLFormatter)
pandas.io.formats.html.NotebookFormatter._get_columns_formatted_values(self)->List[str]
pandas.io.formats.html.NotebookFormatter._get_formatted_values(self)->Dict[int, List[str]]
pandas.io.formats.html.NotebookFormatter.render(self)->List[str]
pandas.io.formats.html.NotebookFormatter.write_style(self)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/formats/style.py----------------------------------------
A:pandas.io.formats.style.jinja2->import_optional_dependency('jinja2', extra='DataFrame.style requires jinja2.')
A:pandas.io.formats.style.loader->import_optional_dependency('jinja2', extra='DataFrame.style requires jinja2.').ChoiceLoader([jinja2.FileSystemLoader(searchpath), cls.loader])
A:pandas.io.formats.style.env->import_optional_dependency('jinja2', extra='DataFrame.style requires jinja2.').Environment(loader=loader)
A:pandas.io.formats.style.template->import_optional_dependency('jinja2', extra='DataFrame.style requires jinja2.').Environment(loader=loader).get_template(name)
A:pandas.io.formats.style.data->data.to_frame().to_frame()
A:pandas.io.formats.style.precision->get_option('display.precision')
A:pandas.io.formats.style.formatter->_maybe_wrap_formatter(formatter, na_rep)
A:pandas.io.formats.style.idx_lengths->_get_level_lengths(self.index)
A:pandas.io.formats.style.col_lengths->_get_level_lengths(self.columns, hidden_columns)
A:pandas.io.formats.style.cell_context->dict()
A:pandas.io.formats.style.rlabels->self.data.index.tolist()
A:pandas.io.formats.style.clabels->list(zip(*clabels))
A:pandas.io.formats.style.colspan->_get_level_lengths(self.columns, hidden_columns).get((r, c), 0)
A:pandas.io.formats.style.rowspan->_get_level_lengths(self.index).get((c, r), 0)
A:pandas.io.formats.style.row_dict['id']->'_'.join(cs[1:])
A:pandas.io.formats.style.use_mathjax->get_option('display.html.use_mathjax')
A:pandas.io.formats.style.table_attr->table_attr.replace('class="', 'class="tex2jax_ignore ').replace('class="', 'class="tex2jax_ignore ')
A:pandas.io.formats.style.row_locs->self.data.index.get_indexer_for(sub_df.index)
A:pandas.io.formats.style.col_locs->self.data.columns.get_indexer_for(sub_df.columns)
A:pandas.io.formats.style.subset->_non_reducing_slice(_maybe_numeric_slice(self.data, subset))
A:pandas.io.formats.style.col_formatter->_maybe_wrap_formatter(col_formatter, na_rep)
A:pandas.io.formats.style.locs->product(*(row_locs, col_locs))
A:pandas.io.formats.style.d->self._translate()
A:pandas.io.formats.style.styler->Styler(self.data, precision=self.precision, caption=self.caption, uuid=self.uuid, table_styles=self.table_styles, na_rep=self.na_rep)
A:pandas.io.formats.style.styler.ctx->copy.deepcopy(self.ctx)
A:pandas.io.formats.style.styler._todo->copy.deepcopy(self._todo)
A:pandas.io.formats.style.r->func(self)(*args, **kwargs)
A:pandas.io.formats.style.result->self.data.loc[subset].applymap(func)
A:pandas.io.formats.style.func->partial(func, **kwargs)
A:pandas.io.formats.style.self.hidden_columns->self.columns.get_indexer_for(hidden_df.columns)
A:pandas.io.formats.style.norm->matplotlib.colors.Normalize(smin - rng * low, smax + rng * high)
A:pandas.io.formats.style.rgbas->matplotlib.pyplot.cm.get_cmap(cmap)(norm(s.to_numpy(dtype=float)))
A:pandas.io.formats.style.values->';'.join((f'{p}: {v}' for (p, v) in kwargs.items()))
A:pandas.io.formats.style.smin->min(0, smin)
A:pandas.io.formats.style.smax->max(abs(smin), abs(smax))
A:pandas.io.formats.style.e->min(end, width)
A:pandas.io.formats.style.levels->index.format(sparsify=lib.no_default, adjoin=False, names=False)
pandas.io.formats.style.Styler(self,data,precision=None,table_styles=None,uuid=None,caption=None,table_attributes=None,cell_ids=True,na_rep:Optional[str]=None)
pandas.io.formats.style.Styler.__copy__(self)
pandas.io.formats.style.Styler.__deepcopy__(self,memo)
pandas.io.formats.style.Styler.__init__(self,data,precision=None,table_styles=None,uuid=None,caption=None,table_attributes=None,cell_ids=True,na_rep:Optional[str]=None)
pandas.io.formats.style.Styler._apply(self,func,axis=0,subset=None,**kwargs)
pandas.io.formats.style.Styler._applymap(self,func,subset=None,**kwargs)
pandas.io.formats.style.Styler._background_gradient(s,cmap='PuBu',low=0,high=0,text_color_threshold=0.408,vmin:Optional[float]=None,vmax:Optional[float]=None)
pandas.io.formats.style.Styler._bar(s,align,colors,width=100,vmin=None,vmax=None)
pandas.io.formats.style.Styler._compute(self)
pandas.io.formats.style.Styler._copy(self,deepcopy=False)
pandas.io.formats.style.Styler._highlight_extrema(data,color='yellow',max_=True)
pandas.io.formats.style.Styler._highlight_handler(self,subset=None,color='yellow',axis=None,max_=True)
pandas.io.formats.style.Styler._highlight_null(v,null_color)
pandas.io.formats.style.Styler._repr_html_(self)
pandas.io.formats.style.Styler._translate(self)
pandas.io.formats.style.Styler._update_ctx(self,attrs)
pandas.io.formats.style.Styler.apply(self,func,axis=0,subset=None,**kwargs)
pandas.io.formats.style.Styler.applymap(self,func,subset=None,**kwargs)
pandas.io.formats.style.Styler.background_gradient(self,cmap='PuBu',low=0,high=0,axis=0,subset=None,text_color_threshold=0.408,vmin:Optional[float]=None,vmax:Optional[float]=None)
pandas.io.formats.style.Styler.bar(self,subset=None,axis=0,color='#d65f5f',width=100,align='left',vmin=None,vmax=None)
pandas.io.formats.style.Styler.clear(self)
pandas.io.formats.style.Styler.export(self)
pandas.io.formats.style.Styler.format(self,formatter,subset=None,na_rep:Optional[str]=None)
pandas.io.formats.style.Styler.from_custom_template(cls,searchpath,name)
pandas.io.formats.style.Styler.hide_columns(self,subset)
pandas.io.formats.style.Styler.hide_index(self)
pandas.io.formats.style.Styler.highlight_max(self,subset=None,color='yellow',axis=0)
pandas.io.formats.style.Styler.highlight_min(self,subset=None,color='yellow',axis=0)
pandas.io.formats.style.Styler.highlight_null(self,null_color='red')
pandas.io.formats.style.Styler.pipe(self,func,*args,**kwargs)
pandas.io.formats.style.Styler.render(self,**kwargs)
pandas.io.formats.style.Styler.set_caption(self,caption)
pandas.io.formats.style.Styler.set_na_rep(self,na_rep:str)->'Styler'
pandas.io.formats.style.Styler.set_precision(self,precision)
pandas.io.formats.style.Styler.set_properties(self,subset=None,**kwargs)
pandas.io.formats.style.Styler.set_table_attributes(self,attributes)
pandas.io.formats.style.Styler.set_table_styles(self,table_styles)
pandas.io.formats.style.Styler.set_uuid(self,uuid)
pandas.io.formats.style.Styler.to_excel(self,excel_writer,sheet_name='Sheet1',na_rep='',float_format=None,columns=None,header=True,index=True,index_label=None,startrow=0,startcol=0,engine=None,merge_cells=True,encoding=None,inf_rep='inf',verbose=True,freeze_panes=None)
pandas.io.formats.style.Styler.use(self,styles)
pandas.io.formats.style.Styler.where(self,cond,value,other=None,subset=None,**kwargs)
pandas.io.formats.style._get_level_lengths(index,hidden_elements=None)
pandas.io.formats.style._is_visible(idx_row,idx_col,lengths)
pandas.io.formats.style._maybe_wrap_formatter(formatter,na_rep:Optional[str])
pandas.io.formats.style._mpl(func)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/formats/console.py----------------------------------------
A:pandas.io.formats.console.display_width->get_option('display.width')
A:pandas.io.formats.console.display_height->get_option('display.max_rows')
A:pandas.io.formats.console.terminal_width->get_default_val('display.width')
A:pandas.io.formats.console.terminal_height->get_default_val('display.max_rows')
A:pandas.io.formats.console.(terminal_width, terminal_height)->get_terminal_size()
A:pandas.io.formats.console.ip->get_ipython()
pandas.io.formats.console.get_console_size()
pandas.io.formats.console.in_interactive_session()
pandas.io.formats.console.in_ipython_frontend()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/formats/format.py----------------------------------------
A:pandas.io.formats.format.level_info->self.tr_series._values._repr_categories_info()
A:pandas.io.formats.format.fmt_values->format_array(array, formatter, float_format=self.float_format, na_rep=self.na_rep, digits=self.digits, space=self.space, justify=self.justify, leading_space=self.leading_space)
A:pandas.io.formats.format.values->self.values.astype(object)
A:pandas.io.formats.format.footer->self._get_footer()
A:pandas.io.formats.format.float_format->partial('{value: .{digits:d}e}'.format, digits=self.digits)
A:pandas.io.formats.format.self.adj->_get_adjustment()
A:pandas.io.formats.format.max_rows->min(self.min_rows, max_rows)
A:pandas.io.formats.format.series->concat((series.iloc[:row_num], series.iloc[-row_num:]))
A:pandas.io.formats.format.series_name->pprint_thing(name, escape_chars=('\t', '\r', '\n'))
A:pandas.io.formats.format.name->getattr(self.tr_series.dtype, 'name', None)
A:pandas.io.formats.format.is_multi->isinstance(index, ABCMultiIndex)
A:pandas.io.formats.format.have_header->any((name for name in index.names))
A:pandas.io.formats.format.fmt_index->index.format(sparsify=self.sparsify, adjoin=False, names=self.show_row_idx_names, formatter=fmt)
A:pandas.io.formats.format.(fmt_index, have_header)->self._get_formatted_index()
A:pandas.io.formats.format.row_num->cast(int, row_num)
A:pandas.io.formats.format.width->self.adj.len(fmt_values[row_num - 1])
A:pandas.io.formats.format.result->_get_adjustment().justify(strings, max_len, mode=justify)
A:pandas.io.formats.format.self.encoding->get_option('display.encoding')
A:pandas.io.formats.format.use_east_asian_width->get_option('display.unicode.east_asian_width')
A:pandas.io.formats.format.i->cast(int, i)
A:pandas.io.formats.format.buf->StringIO()
A:pandas.io.formats.format.sparsify->get_option('display.multi_sparse')
A:pandas.io.formats.format.self.max_rows_displayed->min(max_rows or len(self.frame), len(self.frame))
A:pandas.io.formats.format.self.justify->get_option('display.colheader_justify')
A:pandas.io.formats.format.self.columns->ensure_index(columns)
A:pandas.io.formats.format.(w, h)->get_terminal_size()
A:pandas.io.formats.format.self.header->cast(List[str], self.header)
A:pandas.io.formats.format.max_cols_adj->max(max_cols_adj, 2)
A:pandas.io.formats.format.col_num->len(frame.columns)
A:pandas.io.formats.format.max_cols->cast(int, max_cols)
A:pandas.io.formats.format.frame->concat((frame.iloc[:row_num, :], frame.iloc[-row_num:, :]))
A:pandas.io.formats.format.max_rows_adj->cast(int, max_rows_adj)
A:pandas.io.formats.format.self.is_truncated->bool(self.truncate_h or self.truncate_v)
A:pandas.io.formats.format.self.col_space->cast(int, self.col_space)
A:pandas.io.formats.format.str_index->self._get_formatted_index(frame)
A:pandas.io.formats.format.str_columns->_sparsify(str_columns)
A:pandas.io.formats.format.header_colwidth->max(self.col_space or 0, *(self.adj.len(x) for x in cheader))
A:pandas.io.formats.format.max_len->max(minimum, max_len)
A:pandas.io.formats.format.cheader->self.adj.justify(cheader, max_len, mode=self.justify)
A:pandas.io.formats.format.cwidth->self.adj.len(strcols[ix][row_num])
A:pandas.io.formats.format.info_line->'Empty {name}\nColumns: {col}\nIndex: {idx}'.format(name=type(self.frame).__name__, col=pprint_thing(frame.columns), idx=pprint_thing(frame.index))
A:pandas.io.formats.format.strcols->list(args)
A:pandas.io.formats.format.text->self.adj.adjoin(1, *strcols)
A:pandas.io.formats.format.lines->self.adj.adjoin(1, *strcols).split('\n')
A:pandas.io.formats.format.col_lens->col_lens.drop(mid_ix).drop(mid_ix)
A:pandas.io.formats.format.n_cols->len(col_lens)
A:pandas.io.formats.format.mid->int(round(n_cols / 2.0))
A:pandas.io.formats.format.idx->list(args).pop(0)
A:pandas.io.formats.format.col_bins->_binify(col_widths, lwidth)
A:pandas.io.formats.format.nbins->len(col_bins)
A:pandas.io.formats.format.self.max_rows_adj->cast(int, self.max_rows_adj)
A:pandas.io.formats.format.nrows->len(self.frame)
A:pandas.io.formats.format.formatter->self.values.astype(object)._formatter(boxed=True)
A:pandas.io.formats.format.fmt_columns->columns.format()
A:pandas.io.formats.format.restrict_formatting->any((l.is_floating for l in columns.levels))
A:pandas.io.formats.format.need_leadsp->dict(zip(fmt_columns, map(is_numeric_dtype, dtypes)))
A:pandas.io.formats.format.fmt->self._get_formatter('__index__')
A:pandas.io.formats.format.adjoined->self.adj.adjoin(1, *fmt_index).split('\n')
A:pandas.io.formats.format.space->get_option('display.column_space')
A:pandas.io.formats.format.digits->get_option('display.precision')
A:pandas.io.formats.format.fmt_obj->fmt_klass(values, digits=digits, na_rep=na_rep, float_format=float_format, formatter=formatter, space=space, justify=justify, decimal=decimal, leading_space=leading_space)
A:pandas.io.formats.format.fmt_str->'{{x: .{prec:d}g}}'.format(prec=get_option('display.precision'))
A:pandas.io.formats.format.leading_space->is_float_type.any()
A:pandas.io.formats.format.threshold->get_option('display.chop_threshold')
A:pandas.io.formats.format.is_complex->is_complex_dtype(values)
A:pandas.io.formats.format.mask->isna(values)
A:pandas.io.formats.format.imask->(~mask).ravel()
A:pandas.io.formats.format.values.flat[imask]->numpy.array([formatter(val) for val in values.ravel()[imask]])
A:pandas.io.formats.format.formatted_values->format_values_with(float_format)
A:pandas.io.formats.format.maxlen->max((len(x) for x in formatted_values))
A:pandas.io.formats.format.abs_vals->numpy.abs(self.values)
A:pandas.io.formats.format.has_large_values->(abs_vals > 1000000.0).any()
A:pandas.io.formats.format.has_small_values->((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()
A:pandas.io.formats.format.array->numpy.asarray(values)
A:pandas.io.formats.format.percentiles->numpy.asarray(percentiles)
A:pandas.io.formats.format.int_idx->numpy.isclose(percentiles.astype(int), percentiles)
A:pandas.io.formats.format.out->numpy.empty_like(percentiles, dtype=object)
A:pandas.io.formats.format.unique_pcts->numpy.unique(percentiles)
A:pandas.io.formats.format.prec->max(1, prec)
A:pandas.io.formats.format.out[int_idx]->percentiles[int_idx].astype(int).astype(str)
A:pandas.io.formats.format.out[~int_idx]->percentiles[~int_idx].round(prec).astype(str)
A:pandas.io.formats.format.x->Timedelta(x)
A:pandas.io.formats.format.is_dates_only->_is_dates_only(values)
A:pandas.io.formats.format.values_int->self.values.astype(object).astype(np.int64)
A:pandas.io.formats.format.adj->_get_adjustment()
A:pandas.io.formats.format.conf_max->get_option('display.max_colwidth')
A:pandas.io.formats.format.dnum->decimal.Decimal(str(num))
A:pandas.io.formats.format.pow10->pow10.max(min(self.ENG_PREFIXES.keys())).max(min(self.ENG_PREFIXES.keys()))
A:pandas.io.formats.format.int_pow10->int(pow10)
A:pandas.io.formats.format.prefix->'E+{pow10:02d}'.format(pow10=int_pow10)
A:pandas.io.formats.format.format_str->'{{mant: .{acc:d}f}}{{prefix}}'.format(acc=self.accuracy)
A:pandas.io.formats.format.formatted->'{{mant: .{acc:d}f}}{{prefix}}'.format(acc=self.accuracy).format(mant=mant, prefix=prefix)
pandas.io.formats.format.CategoricalFormatter(self,categorical:'Categorical',buf:Optional[IO[str]]=None,length:bool=True,na_rep:str='NaN',footer:bool=True)
pandas.io.formats.format.CategoricalFormatter.__init__(self,categorical:'Categorical',buf:Optional[IO[str]]=None,length:bool=True,na_rep:str='NaN',footer:bool=True)
pandas.io.formats.format.CategoricalFormatter._get_footer(self)->str
pandas.io.formats.format.CategoricalFormatter._get_formatted_values(self)->List[str]
pandas.io.formats.format.CategoricalFormatter.to_string(self)->str
pandas.io.formats.format.DataFrameFormatter(self,frame:'DataFrame',columns:Optional[Sequence[str]]=None,col_space:Optional[Union[str,int]]=None,header:Union[bool,Sequence[str]]=True,index:bool=True,na_rep:str='NaN',formatters:Optional[formatters_type]=None,justify:Optional[str]=None,float_format:Optional[float_format_type]=None,sparsify:Optional[bool]=None,index_names:bool=True,line_width:Optional[int]=None,max_rows:Optional[int]=None,min_rows:Optional[int]=None,max_cols:Optional[int]=None,show_dimensions:Union[bool,str]=False,decimal:str='.',table_id:Optional[str]=None,render_links:bool=False,bold_rows:bool=False,escape:bool=True)
pandas.io.formats.format.DataFrameFormatter.__init__(self,frame:'DataFrame',columns:Optional[Sequence[str]]=None,col_space:Optional[Union[str,int]]=None,header:Union[bool,Sequence[str]]=True,index:bool=True,na_rep:str='NaN',formatters:Optional[formatters_type]=None,justify:Optional[str]=None,float_format:Optional[float_format_type]=None,sparsify:Optional[bool]=None,index_names:bool=True,line_width:Optional[int]=None,max_rows:Optional[int]=None,min_rows:Optional[int]=None,max_cols:Optional[int]=None,show_dimensions:Union[bool,str]=False,decimal:str='.',table_id:Optional[str]=None,render_links:bool=False,bold_rows:bool=False,escape:bool=True)
pandas.io.formats.format.DataFrameFormatter._chk_truncate(self)->None
pandas.io.formats.format.DataFrameFormatter._format_col(self,i:int)->List[str]
pandas.io.formats.format.DataFrameFormatter._get_column_name_list(self)->List[str]
pandas.io.formats.format.DataFrameFormatter._get_formatted_column_labels(self,frame:'DataFrame')->List[List[str]]
pandas.io.formats.format.DataFrameFormatter._get_formatted_index(self,frame:'DataFrame')->List[str]
pandas.io.formats.format.DataFrameFormatter._join_multiline(self,*args)->str
pandas.io.formats.format.DataFrameFormatter._to_str_columns(self)->List[List[str]]
pandas.io.formats.format.DataFrameFormatter.has_column_names(self)->bool
pandas.io.formats.format.DataFrameFormatter.has_index_names(self)->bool
pandas.io.formats.format.DataFrameFormatter.show_col_idx_names(self)->bool
pandas.io.formats.format.DataFrameFormatter.show_row_idx_names(self)->bool
pandas.io.formats.format.DataFrameFormatter.to_html(self,buf:Optional[FilePathOrBuffer[str]]=None,encoding:Optional[str]=None,classes:Optional[Union[str,List,Tuple]]=None,notebook:bool=False,border:Optional[int]=None)->Optional[str]
pandas.io.formats.format.DataFrameFormatter.to_latex(self,buf:Optional[FilePathOrBuffer[str]]=None,column_format:Optional[str]=None,longtable:bool=False,encoding:Optional[str]=None,multicolumn:bool=False,multicolumn_format:Optional[str]=None,multirow:bool=False,caption:Optional[str]=None,label:Optional[str]=None)->Optional[str]
pandas.io.formats.format.DataFrameFormatter.to_string(self,buf:Optional[FilePathOrBuffer[str]]=None,encoding:Optional[str]=None)->Optional[str]
pandas.io.formats.format.DataFrameFormatter.write_result(self,buf:IO[str])->None
pandas.io.formats.format.Datetime64Formatter(self,values:Union[np.ndarray,'Series',DatetimeIndex,DatetimeArray],nat_rep:str='NaT',date_format:None=None,**kwargs)
pandas.io.formats.format.Datetime64Formatter.__init__(self,values:Union[np.ndarray,'Series',DatetimeIndex,DatetimeArray],nat_rep:str='NaT',date_format:None=None,**kwargs)
pandas.io.formats.format.Datetime64Formatter._format_strings(self)->List[str]
pandas.io.formats.format.Datetime64TZFormatter(Datetime64Formatter)
pandas.io.formats.format.Datetime64TZFormatter._format_strings(self)->List[str]
pandas.io.formats.format.EastAsianTextAdjustment(self)
pandas.io.formats.format.EastAsianTextAdjustment.__init__(self)
pandas.io.formats.format.EastAsianTextAdjustment.justify(self,texts:Iterable[str],max_len:int,mode:str='right')->List[str]
pandas.io.formats.format.EastAsianTextAdjustment.len(self,text:str)->int
pandas.io.formats.format.EngFormatter(self,accuracy:Optional[int]=None,use_eng_prefix:bool=False)
pandas.io.formats.format.EngFormatter.__init__(self,accuracy:Optional[int]=None,use_eng_prefix:bool=False)
pandas.io.formats.format.ExtensionArrayFormatter(GenericArrayFormatter)
pandas.io.formats.format.ExtensionArrayFormatter._format_strings(self)->List[str]
pandas.io.formats.format.FloatArrayFormatter(self,*args,**kwargs)
pandas.io.formats.format.FloatArrayFormatter.__init__(self,*args,**kwargs)
pandas.io.formats.format.FloatArrayFormatter._format_strings(self)->List[str]
pandas.io.formats.format.FloatArrayFormatter._value_formatter(self,float_format:Optional[float_format_type]=None,threshold:Optional[Union[float,int]]=None)->Callable
pandas.io.formats.format.FloatArrayFormatter.get_result_as_array(self)->np.ndarray
pandas.io.formats.format.GenericArrayFormatter(self,values:Any,digits:int=7,formatter:Optional[Callable]=None,na_rep:str='NaN',space:Union[str,int]=12,float_format:Optional[float_format_type]=None,justify:str='right',decimal:str='.',quoting:Optional[int]=None,fixed_width:bool=True,leading_space:Optional[bool]=None)
pandas.io.formats.format.GenericArrayFormatter.__init__(self,values:Any,digits:int=7,formatter:Optional[Callable]=None,na_rep:str='NaN',space:Union[str,int]=12,float_format:Optional[float_format_type]=None,justify:str='right',decimal:str='.',quoting:Optional[int]=None,fixed_width:bool=True,leading_space:Optional[bool]=None)
pandas.io.formats.format.GenericArrayFormatter._format_strings(self)->List[str]
pandas.io.formats.format.GenericArrayFormatter.get_result(self)->List[str]
pandas.io.formats.format.IntArrayFormatter(GenericArrayFormatter)
pandas.io.formats.format.IntArrayFormatter._format_strings(self)->List[str]
pandas.io.formats.format.SeriesFormatter(self,series:'Series',buf:Optional[IO[str]]=None,length:Union[bool,str]=True,header:bool=True,index:bool=True,na_rep:str='NaN',name:bool=False,float_format:Optional[str]=None,dtype:bool=True,max_rows:Optional[int]=None,min_rows:Optional[int]=None)
pandas.io.formats.format.SeriesFormatter.__init__(self,series:'Series',buf:Optional[IO[str]]=None,length:Union[bool,str]=True,header:bool=True,index:bool=True,na_rep:str='NaN',name:bool=False,float_format:Optional[str]=None,dtype:bool=True,max_rows:Optional[int]=None,min_rows:Optional[int]=None)
pandas.io.formats.format.SeriesFormatter._chk_truncate(self)->None
pandas.io.formats.format.SeriesFormatter._get_footer(self)->str
pandas.io.formats.format.SeriesFormatter._get_formatted_index(self)->Tuple[List[str], bool]
pandas.io.formats.format.SeriesFormatter._get_formatted_values(self)->List[str]
pandas.io.formats.format.SeriesFormatter.to_string(self)->str
pandas.io.formats.format.TableFormatter
pandas.io.formats.format.TableFormatter._get_formatter(self,i:Union[str,int])->Optional[Callable]
pandas.io.formats.format.TableFormatter.get_buffer(self,buf:Optional[FilePathOrBuffer[str]],encoding:Optional[str]=None)
pandas.io.formats.format.TableFormatter.get_result(self,buf:Optional[FilePathOrBuffer[str]]=None,encoding:Optional[str]=None)->Optional[str]
pandas.io.formats.format.TableFormatter.should_show_dimensions(self)->bool
pandas.io.formats.format.TableFormatter.write_result(self,buf:IO[str])->None
pandas.io.formats.format.TextAdjustment(self)
pandas.io.formats.format.TextAdjustment.__init__(self)
pandas.io.formats.format.TextAdjustment.adjoin(self,space:int,*lists,**kwargs)->str
pandas.io.formats.format.TextAdjustment.justify(self,texts:Any,max_len:int,mode:str='right')->List[str]
pandas.io.formats.format.TextAdjustment.len(self,text:str)->int
pandas.io.formats.format.Timedelta64Formatter(self,values:Union[np.ndarray,TimedeltaIndex],nat_rep:str='NaT',box:bool=False,**kwargs)
pandas.io.formats.format.Timedelta64Formatter.__init__(self,values:Union[np.ndarray,TimedeltaIndex],nat_rep:str='NaT',box:bool=False,**kwargs)
pandas.io.formats.format.Timedelta64Formatter._format_strings(self)->List[str]
pandas.io.formats.format._binify(cols:List[int],line_width:int)->List[int]
pandas.io.formats.format._format_datetime64(x:Union[NaTType,Timestamp],tz:Optional[tzinfo]=None,nat_rep:str='NaT')->str
pandas.io.formats.format._format_datetime64_dateonly(x:Union[NaTType,Timestamp],nat_rep:str='NaT',date_format:None=None)->str
pandas.io.formats.format._format_dt64(x:Union[NaTType,Timestamp],tz:Optional[tzinfo]=None,nat_rep:str='NaT')->str
pandas.io.formats.format._format_dt64_dateonly(x:Union[NaTType,Timestamp],nat_rep:str='NaT',date_format:None=None)->str
pandas.io.formats.format._get_adjustment()->TextAdjustment
pandas.io.formats.format._get_format_datetime64(is_dates_only:bool,nat_rep:str='NaT',date_format:None=None)->Callable
pandas.io.formats.format._get_format_datetime64_from_values(values:Union[np.ndarray,DatetimeArray,DatetimeIndex],date_format:Optional[str])->Optional[str]
pandas.io.formats.format._get_format_dt64(is_dates_only:bool,nat_rep:str='NaT',date_format:None=None)->Callable
pandas.io.formats.format._get_format_dt64_from_values(values:Union[np.ndarray,DatetimeArray,DatetimeIndex],date_format:Optional[str])->Optional[str]
pandas.io.formats.format._get_format_timedelta64(values:Union[np.ndarray,TimedeltaIndex,TimedeltaArray],nat_rep:str='NaT',box:bool=False)->Callable
pandas.io.formats.format._has_names(index:Index)->bool
pandas.io.formats.format._is_dates_only(values:Union[np.ndarray,DatetimeArray,Index,DatetimeIndex])->bool
pandas.io.formats.format._make_fixed_width(strings:List[str],justify:str='right',minimum:Optional[int]=None,adj:Optional[TextAdjustment]=None)->List[str]
pandas.io.formats.format._trim_zeros_complex(str_complexes:np.ndarray,na_rep:str='NaN')->List[str]
pandas.io.formats.format._trim_zeros_float(str_floats:Union[np.ndarray,List[str]],na_rep:str='NaN')->List[str]
pandas.io.formats.format.buffer_put_lines(buf:IO[str],lines:List[str])->None
pandas.io.formats.format.format_array(values:Any,formatter:Optional[Callable],float_format:Optional[float_format_type]=None,na_rep:str='NaN',digits:Optional[int]=None,space:Optional[Union[str,int]]=None,justify:str='right',decimal:str='.',leading_space:Optional[bool]=None)->List[str]
pandas.io.formats.format.format_percentiles(percentiles:Union[np.ndarray,List[Union[int,float]],List[float],List[Union[str,float]]])->List[str]
pandas.io.formats.format.get_level_lengths(levels:Any,sentinel:Union[bool,object,str]='')->List[Dict[int, int]]
pandas.io.formats.format.set_eng_float_format(accuracy:int=3,use_eng_prefix:bool=False)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/formats/css.py----------------------------------------
A:pandas.io.formats.css.tokens->value.split()
A:pandas.io.formats.css.props->dict(self.atomize(self.parse(declarations_str)))
A:pandas.io.formats.css.val->val.strip().lower().strip().lower()
A:pandas.io.formats.css.em_pt->float(em_pt[:-2])
A:pandas.io.formats.css.props['font-size']->self.size_to_pt(props['font-size'], em_pt, conversions=self.FONT_SIZE_RATIOS)
A:pandas.io.formats.css.font_size->float(props['font-size'][:-2])
A:pandas.io.formats.css.props[prop]->self.size_to_pt(props[prop], em_pt=font_size, conversions=self.MARGIN_RATIOS)
A:pandas.io.formats.css.FONT_SIZE_RATIOS->UNIT_RATIOS.copy()
A:pandas.io.formats.css.MARGIN_RATIOS->UNIT_RATIOS.copy()
A:pandas.io.formats.css.BORDER_WIDTH_RATIOS->UNIT_RATIOS.copy()
A:pandas.io.formats.css.(val, unit)->re.match('^(\\S*?)([a-zA-Z%!].*)', in_val).groups()
A:pandas.io.formats.css.expand->getattr(self, attr)
A:pandas.io.formats.css.expand_border_color->_side_expander('border-{:s}-color')
A:pandas.io.formats.css.expand_border_style->_side_expander('border-{:s}-style')
A:pandas.io.formats.css.expand_border_width->_side_expander('border-{:s}-width')
A:pandas.io.formats.css.expand_margin->_side_expander('margin-{:s}')
A:pandas.io.formats.css.expand_padding->_side_expander('padding-{:s}')
A:pandas.io.formats.css.(prop, sep, val)->decl.partition(':')
A:pandas.io.formats.css.prop->prop.strip().lower().strip().lower()
pandas.io.formats.css.CSSResolver(self,declarations_str,inherited=None)
pandas.io.formats.css.CSSResolver.__call__(self,declarations_str,inherited=None)
pandas.io.formats.css.CSSResolver.atomize(self,declarations)
pandas.io.formats.css.CSSResolver.parse(self,declarations_str:str)
pandas.io.formats.css.CSSResolver.size_to_pt(self,in_val,em_pt=None,conversions=UNIT_RATIOS)
pandas.io.formats.css.CSSWarning(UserWarning)
pandas.io.formats.css._side_expander(prop_fmt:str)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/formats/latex.py----------------------------------------
A:pandas.io.formats.latex.info_line->'Empty {name}\nColumns: {col}\nIndex: {idx}'.format(name=type(self.frame).__name__, col=self.frame.columns, idx=self.frame.index)
A:pandas.io.formats.latex.strcols->self.fmt._to_str_columns()
A:pandas.io.formats.latex.out->self.frame.index.format(adjoin=False, sparsify=self.fmt.sparsify, names=self.fmt.has_index_names, na_rep=self.fmt.na_rep)
A:pandas.io.formats.latex.column_format->''.join(map(get_col_type, dtypes))
A:pandas.io.formats.latex.strrows->list(zip(*strcols))
A:pandas.io.formats.latex.crow->self._format_multirow(crow, ilevels, i, strrows)
A:pandas.io.formats.latex.row2->list(row[:ilevels])
A:pandas.io.formats.latex.row[j]->'\\multirow{{{nrow:d}}}{{*}}{{{row:s}}}'.format(nrow=nrow, row=row[j].strip())
A:pandas.io.formats.latex.caption_->'\n\\caption{{{}}}'.format(self.caption)
A:pandas.io.formats.latex.label_->'\n\\label{{{}}}'.format(self.label)
pandas.io.formats.latex.LatexFormatter(self,formatter:DataFrameFormatter,column_format:Optional[str]=None,longtable:bool=False,multicolumn:bool=False,multicolumn_format:Optional[str]=None,multirow:bool=False,caption:Optional[str]=None,label:Optional[str]=None)
pandas.io.formats.latex.LatexFormatter.__init__(self,formatter:DataFrameFormatter,column_format:Optional[str]=None,longtable:bool=False,multicolumn:bool=False,multicolumn_format:Optional[str]=None,multirow:bool=False,caption:Optional[str]=None,label:Optional[str]=None)
pandas.io.formats.latex.LatexFormatter._format_multicolumn(self,row:List[str],ilevels:int)->List[str]
pandas.io.formats.latex.LatexFormatter._format_multirow(self,row:List[str],ilevels:int,i:int,rows:List[Tuple[str,...]])->List[str]
pandas.io.formats.latex.LatexFormatter._print_cline(self,buf:IO[str],i:int,icol:int)->None
pandas.io.formats.latex.LatexFormatter._write_longtable_begin(self,buf,column_format:str)
pandas.io.formats.latex.LatexFormatter._write_longtable_end(buf)
pandas.io.formats.latex.LatexFormatter._write_tabular_begin(self,buf,column_format:str)
pandas.io.formats.latex.LatexFormatter._write_tabular_end(self,buf)
pandas.io.formats.latex.LatexFormatter.write_result(self,buf:IO[str])->None


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/formats/csvs.py----------------------------------------
A:pandas.io.formats.csvs.path_or_buf->StringIO()
A:pandas.io.formats.csvs.(compression, self.compression_args)->get_compression_method(compression)
A:pandas.io.formats.csvs.(self.path_or_buf, _, _, self.should_close)->get_filepath_or_buffer(path_or_buf, encoding=encoding, compression=compression, mode=mode)
A:pandas.io.formats.csvs.self.compression->infer_compression(self.path_or_buf, compression)
A:pandas.io.formats.csvs.self.has_mi_columns->isinstance(obj.columns, ABCMultiIndex)
A:pandas.io.formats.csvs.cols->list(cols)
A:pandas.io.formats.csvs.ncols->sum((b.shape[0] for b in self.blocks))
A:pandas.io.formats.csvs.self.chunksize->int(chunksize)
A:pandas.io.formats.csvs.self.data_index->Index([x.strftime(date_format) if notna(x) else '' for x in self.data_index])
A:pandas.io.formats.csvs.self.nlevels->getattr(self.data_index, 'nlevels', 1)
A:pandas.io.formats.csvs.f->StringIO()
A:pandas.io.formats.csvs.(f, handles)->get_handle(self.path_or_buf, self.mode, encoding=self.encoding, compression=compression)
A:pandas.io.formats.csvs.self.writer->csv.writer(f, lineterminator=self.line_terminator, delimiter=self.sep, quoting=self.quoting, doublequote=self.doublequote, escapechar=self.escapechar, quotechar=self.quotechar)
A:pandas.io.formats.csvs.buf->StringIO().getvalue()
A:pandas.io.formats.csvs.compression->dict(self.compression_args, method=self.compression)
A:pandas.io.formats.csvs.has_aliases->isinstance(header, (tuple, list, np.ndarray, ABCIndexClass))
A:pandas.io.formats.csvs.encoded_labels->list(index_label)
A:pandas.io.formats.csvs.nrows->len(self.data_index)
A:pandas.io.formats.csvs.end_i->min((i + 1) * chunksize, nrows)
A:pandas.io.formats.csvs.slicer->slice(start_i, end_i)
A:pandas.io.formats.csvs.d->b.to_native_types(slicer=slicer, na_rep=self.na_rep, float_format=self.float_format, decimal=self.decimal, date_format=self.date_format, quoting=self.quoting)
A:pandas.io.formats.csvs.ix->data_index.to_native_types(slicer=slicer, na_rep=self.na_rep, float_format=self.float_format, decimal=self.decimal, date_format=self.date_format, quoting=self.quoting)
pandas.io.formats.csvs.CSVFormatter(self,obj,path_or_buf:Optional[FilePathOrBuffer[str]]=None,sep:str=',',na_rep:str='',float_format:Optional[str]=None,cols=None,header:Union[bool,Sequence[Hashable]]=True,index:bool=True,index_label:Optional[Union[bool,Hashable,Sequence[Hashable]]]=None,mode:str='w',encoding:Optional[str]=None,compression:Union[str,Mapping[str,str],None]='infer',quoting:Optional[int]=None,line_terminator='\n',chunksize:Optional[int]=None,quotechar='"',date_format:Optional[str]=None,doublequote:bool=True,escapechar:Optional[str]=None,decimal='.')
pandas.io.formats.csvs.CSVFormatter.__init__(self,obj,path_or_buf:Optional[FilePathOrBuffer[str]]=None,sep:str=',',na_rep:str='',float_format:Optional[str]=None,cols=None,header:Union[bool,Sequence[Hashable]]=True,index:bool=True,index_label:Optional[Union[bool,Hashable,Sequence[Hashable]]]=None,mode:str='w',encoding:Optional[str]=None,compression:Union[str,Mapping[str,str],None]='infer',quoting:Optional[int]=None,line_terminator='\n',chunksize:Optional[int]=None,quotechar='"',date_format:Optional[str]=None,doublequote:bool=True,escapechar:Optional[str]=None,decimal='.')
pandas.io.formats.csvs.CSVFormatter._save(self)->None
pandas.io.formats.csvs.CSVFormatter._save_chunk(self,start_i:int,end_i:int)->None
pandas.io.formats.csvs.CSVFormatter._save_header(self)
pandas.io.formats.csvs.CSVFormatter.save(self)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/formats/excel.py----------------------------------------
A:pandas.io.formats.excel.inherited->self.compute_css(inherited)
A:pandas.io.formats.excel.compute_css->CSSResolver()
A:pandas.io.formats.excel.properties->self.compute_css(declarations_str, self.inherited)
A:pandas.io.formats.excel.width->float(width[:-2])
A:pandas.io.formats.excel.fill_color->props.get('background-color')
A:pandas.io.formats.excel.size->float(size[:-2])
A:pandas.io.formats.excel.font_names_tmp->re.findall('(?x)\n            (\n            "(?:[^"]|\\\\")+"\n            |\n            \'(?:[^\']|\\\\\')+\'\n            |\n            [^\'",]+\n            )(?=,|\\s*$)\n        ', props.get('font-family', ''))
A:pandas.io.formats.excel.name->name.strip().strip()
A:pandas.io.formats.excel.decoration->decoration.split().split()
A:pandas.io.formats.excel.style_converter->CSSToExcelConverter()
A:pandas.io.formats.excel.self.df->df.reindex(columns=cols)
A:pandas.io.formats.excel.val->float(self.float_format % val)
A:pandas.io.formats.excel.has_aliases->isinstance(self.header, (tuple, list, np.ndarray, Index))
A:pandas.io.formats.excel.level_strs->self.df.index.format(sparsify=True, adjoin=False, names=False)
A:pandas.io.formats.excel.level_lengths->get_level_lengths(level_strs)
A:pandas.io.formats.excel.values->levels.take(level_codes, allow_fill=levels._can_hold_na, fill_value=True)
A:pandas.io.formats.excel.v->'.'.join(map(pprint_thing, values))
A:pandas.io.formats.excel.coloffset->len(self.df.index[0])
A:pandas.io.formats.excel.gen->self._format_header_regular()
A:pandas.io.formats.excel.index_values->self.df.index.to_timestamp()
A:pandas.io.formats.excel.xlstyle->self.style_converter(';'.join(styles[i, colidx]))
A:pandas.io.formats.excel.cell.val->self._format_value(cell.val)
A:pandas.io.formats.excel.writer->ExcelWriter(stringify_path(writer), engine=engine)
A:pandas.io.formats.excel.formatted_cells->self.get_formatted_cells()
pandas.io.formats.excel.CSSToExcelConverter(self,inherited:Optional[str]=None)
pandas.io.formats.excel.CSSToExcelConverter.__init__(self,inherited:Optional[str]=None)
pandas.io.formats.excel.CSSToExcelConverter._border_style(self,style:Optional[str],width)
pandas.io.formats.excel.CSSToExcelConverter.build_alignment(self,props)->Dict[str, Optional[Union[bool, str]]]
pandas.io.formats.excel.CSSToExcelConverter.build_border(self,props:Dict)->Dict[str, Dict[str, str]]
pandas.io.formats.excel.CSSToExcelConverter.build_fill(self,props:Dict[str,str])
pandas.io.formats.excel.CSSToExcelConverter.build_font(self,props)->Dict[str, Optional[Union[bool, int, str]]]
pandas.io.formats.excel.CSSToExcelConverter.build_number_format(self,props:Dict)->Dict[str, Optional[str]]
pandas.io.formats.excel.CSSToExcelConverter.build_xlstyle(self,props:Dict[str,str])->Dict[str, Dict[str, str]]
pandas.io.formats.excel.CSSToExcelConverter.color_to_excel(self,val:Optional[str])
pandas.io.formats.excel.ExcelCell(self,row:int,col:int,val,style=None,mergestart=None,mergeend=None)
pandas.io.formats.excel.ExcelCell.__init__(self,row:int,col:int,val,style=None,mergestart=None,mergeend=None)
pandas.io.formats.excel.ExcelFormatter(self,df,na_rep:str='',float_format:Optional[str]=None,cols:Optional[Sequence]=None,header:Union[bool,List[str]]=True,index:bool=True,index_label:Union[str,Sequence,None]=None,merge_cells:bool=False,inf_rep:str='inf',style_converter:Optional[Callable]=None)
pandas.io.formats.excel.ExcelFormatter.__init__(self,df,na_rep:str='',float_format:Optional[str]=None,cols:Optional[Sequence]=None,header:Union[bool,List[str]]=True,index:bool=True,index_label:Union[str,Sequence,None]=None,merge_cells:bool=False,inf_rep:str='inf',style_converter:Optional[Callable]=None)
pandas.io.formats.excel.ExcelFormatter._format_body(self)
pandas.io.formats.excel.ExcelFormatter._format_header(self)
pandas.io.formats.excel.ExcelFormatter._format_header_mi(self)
pandas.io.formats.excel.ExcelFormatter._format_header_regular(self)
pandas.io.formats.excel.ExcelFormatter._format_hierarchical_rows(self)
pandas.io.formats.excel.ExcelFormatter._format_regular_rows(self)
pandas.io.formats.excel.ExcelFormatter._format_value(self,val)
pandas.io.formats.excel.ExcelFormatter._generate_body(self,coloffset:int)
pandas.io.formats.excel.ExcelFormatter.get_formatted_cells(self)
pandas.io.formats.excel.ExcelFormatter.header_style(self)
pandas.io.formats.excel.ExcelFormatter.write(self,writer,sheet_name='Sheet1',startrow=0,startcol=0,freeze_panes=None,engine=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/sas/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/sas/sasreader.py----------------------------------------
A:pandas.io.sas.sasreader.filepath_or_buffer->stringify_path(filepath_or_buffer)
A:pandas.io.sas.sasreader.fname->stringify_path(filepath_or_buffer).lower()
A:pandas.io.sas.sasreader.reader->SAS7BDATReader(filepath_or_buffer, index=index, encoding=encoding, chunksize=chunksize)
A:pandas.io.sas.sasreader.data->SAS7BDATReader(filepath_or_buffer, index=index, encoding=encoding, chunksize=chunksize).read()
pandas.io.sas.read_sas(filepath_or_buffer,format=None,index=None,encoding=None,chunksize=None,iterator=False)
pandas.io.sas.sasreader.read_sas(filepath_or_buffer,format=None,index=None,encoding=None,chunksize=None,iterator=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/sas/sas_constants.py----------------------------------------
pandas.io.sas.sas_constants.SASIndex


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/sas/sas7bdat.py----------------------------------------
A:pandas.io.sas.sas7bdat.(self._path_or_buf, _, _, _)->get_filepath_or_buffer(path_or_buf)
A:pandas.io.sas.sas7bdat.self._path_or_buf->open(self._path_or_buf, 'rb')
A:pandas.io.sas.sas7bdat.self._cached_page->self._path_or_buf.read(self._page_length)
A:pandas.io.sas.sas7bdat.buf->self._read_bytes(offset1, self._lcs)
A:pandas.io.sas.sas7bdat.self.name->self.name.decode(self.encoding or self.default_encoding)
A:pandas.io.sas.sas7bdat.self.file_type->self.file_type.decode(self.encoding or self.default_encoding)
A:pandas.io.sas.sas7bdat.epoch->datetime(1960, 1, 1)
A:pandas.io.sas.sas7bdat.x->self._read_int(text_subheader_format, const.column_format_text_subheader_index_length)
A:pandas.io.sas.sas7bdat.self.header_length->self._read_int(const.header_size_offset + align1, const.header_size_length)
A:pandas.io.sas.sas7bdat.self._page_length->self._read_int(const.page_size_offset + align1, const.page_size_length)
A:pandas.io.sas.sas7bdat.self._page_count->self._read_int(const.page_count_offset + align1, const.page_count_length)
A:pandas.io.sas.sas7bdat.self.sas_release->self.sas_release.decode(self.encoding or self.default_encoding)
A:pandas.io.sas.sas7bdat.self.server_type->self.server_type.decode(self.encoding or self.default_encoding)
A:pandas.io.sas.sas7bdat.self.os_version->self.os_version.decode(self.encoding or self.default_encoding)
A:pandas.io.sas.sas7bdat.self.os_name->self.os_name.decode(self.encoding or self.default_encoding)
A:pandas.io.sas.sas7bdat.da->self.read(nrows=self.chunksize or 1)
A:pandas.io.sas.sas7bdat.done->self._process_page_meta()
A:pandas.io.sas.sas7bdat.self._current_page_type->self._read_int(tx, const.page_type_length)
A:pandas.io.sas.sas7bdat.self._current_page_block_count->self._read_int(tx, const.block_count_length)
A:pandas.io.sas.sas7bdat.self._current_page_subheaders_count->self._read_int(tx, const.subheader_count_length)
A:pandas.io.sas.sas7bdat.pointer->self._process_subheader_pointers(const.subheader_pointers_offset + bit_offset, i)
A:pandas.io.sas.sas7bdat.subheader_signature->self._read_bytes(offset, self._int_length)
A:pandas.io.sas.sas7bdat.subheader_index->self._get_subheader_index(subheader_signature, pointer.compression, pointer.ptype)
A:pandas.io.sas.sas7bdat.index->pandas.io.sas.sas_constants.subheader_signature_to_index.get(signature)
A:pandas.io.sas.sas7bdat.subheader_offset->self._read_int(total_offset, self._int_length)
A:pandas.io.sas.sas7bdat.subheader_length->self._read_int(total_offset, self._int_length)
A:pandas.io.sas.sas7bdat.subheader_compression->self._read_int(total_offset, 1)
A:pandas.io.sas.sas7bdat.subheader_type->self._read_int(total_offset, 1)
A:pandas.io.sas.sas7bdat.self.row_length->self._read_int(offset + const.row_length_offset_multiplier * int_len, int_len)
A:pandas.io.sas.sas7bdat.self.row_count->self._read_int(offset + const.row_count_offset_multiplier * int_len, int_len)
A:pandas.io.sas.sas7bdat.self.col_count_p1->self._read_int(offset + const.col_count_p1_multiplier * int_len, int_len)
A:pandas.io.sas.sas7bdat.self.col_count_p2->self._read_int(offset + const.col_count_p2_multiplier * int_len, int_len)
A:pandas.io.sas.sas7bdat.self._mix_page_row_count->self._read_int(offset + mx, int_len)
A:pandas.io.sas.sas7bdat.self._lcs->self._read_int(lcs_offset, 2)
A:pandas.io.sas.sas7bdat.self._lcp->self._read_int(lcp_offset, 2)
A:pandas.io.sas.sas7bdat.self.column_count->self._read_int(offset, int_len)
A:pandas.io.sas.sas7bdat.text_block_size->self._read_int(offset, const.text_block_size_length)
A:pandas.io.sas.sas7bdat.cname_raw->buf[0:text_block_size].rstrip(b'\x00 ')
A:pandas.io.sas.sas7bdat.cname->cname.decode(self.encoding or self.default_encoding).decode(self.encoding or self.default_encoding)
A:pandas.io.sas.sas7bdat.compression_literal->self._read_bytes(offset1, self._lcs).rstrip(b'\x00')
A:pandas.io.sas.sas7bdat.self.creator_proc->self.creator_proc.decode(self.encoding or self.default_encoding)
A:pandas.io.sas.sas7bdat.idx->self._read_int(text_subheader, const.column_name_text_subheader_length)
A:pandas.io.sas.sas7bdat.col_offset->self._read_int(col_name_offset, const.column_name_offset_length)
A:pandas.io.sas.sas7bdat.col_len->self._read_int(col_name_length, const.column_name_length_length)
A:pandas.io.sas.sas7bdat.format_idx->min(x, len(self.column_names_strings) - 1)
A:pandas.io.sas.sas7bdat.format_start->self._read_int(col_format_offset, const.column_format_offset_length)
A:pandas.io.sas.sas7bdat.format_len->self._read_int(col_format_len, const.column_format_length_length)
A:pandas.io.sas.sas7bdat.label_idx->min(label_idx, len(self.column_names_strings) - 1)
A:pandas.io.sas.sas7bdat.label_start->self._read_int(col_label_offset, const.column_label_offset_length)
A:pandas.io.sas.sas7bdat.label_len->self._read_int(col_label_len, const.column_label_length_length)
A:pandas.io.sas.sas7bdat.current_column_number->len(self.columns)
A:pandas.io.sas.sas7bdat.col->_column()
A:pandas.io.sas.sas7bdat.nd->self._column_types.count(b'd')
A:pandas.io.sas.sas7bdat.ns->self._column_types.count(b's')
A:pandas.io.sas.sas7bdat.self._string_chunk->numpy.empty((ns, nrows), dtype=np.object)
A:pandas.io.sas.sas7bdat.self._byte_chunk->numpy.zeros((nd, 8 * nrows), dtype=np.uint8)
A:pandas.io.sas.sas7bdat.p->Parser(self)
A:pandas.io.sas.sas7bdat.rslt->pandas.DataFrame(index=ix)
A:pandas.io.sas.sas7bdat.ix->range(m - n, m)
A:pandas.io.sas.sas7bdat.rslt[name]->rslt[name].str.decode(self.encoding or self.default_encoding).str.decode(self.encoding or self.default_encoding)
pandas.io.sas.sas7bdat.SAS7BDATReader(self,path_or_buf,index=None,convert_dates=True,blank_missing=True,chunksize=None,encoding=None,convert_text=True,convert_header_text=True)
pandas.io.sas.sas7bdat.SAS7BDATReader.__init__(self,path_or_buf,index=None,convert_dates=True,blank_missing=True,chunksize=None,encoding=None,convert_text=True,convert_header_text=True)
pandas.io.sas.sas7bdat.SAS7BDATReader.__next__(self)
pandas.io.sas.sas7bdat.SAS7BDATReader._chunk_to_dataframe(self)
pandas.io.sas.sas7bdat.SAS7BDATReader._get_properties(self)
pandas.io.sas.sas7bdat.SAS7BDATReader._get_subheader_index(self,signature,compression,ptype)
pandas.io.sas.sas7bdat.SAS7BDATReader._parse_metadata(self)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_columnattributes_subheader(self,offset,length)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_columnlist_subheader(self,offset,length)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_columnname_subheader(self,offset,length)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_columnsize_subheader(self,offset,length)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_columntext_subheader(self,offset,length)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_format_subheader(self,offset,length)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_page_meta(self)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_page_metadata(self)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_rowsize_subheader(self,offset,length)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_subheader(self,subheader_index,pointer)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_subheader_counts(self,offset,length)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_subheader_pointers(self,offset,subheader_pointer_index)
pandas.io.sas.sas7bdat.SAS7BDATReader._read_bytes(self,offset,length)
pandas.io.sas.sas7bdat.SAS7BDATReader._read_float(self,offset,width)
pandas.io.sas.sas7bdat.SAS7BDATReader._read_int(self,offset,width)
pandas.io.sas.sas7bdat.SAS7BDATReader._read_next_page(self)
pandas.io.sas.sas7bdat.SAS7BDATReader._read_page_header(self)
pandas.io.sas.sas7bdat.SAS7BDATReader._read_subheader_signature(self,offset)
pandas.io.sas.sas7bdat.SAS7BDATReader.close(self)
pandas.io.sas.sas7bdat.SAS7BDATReader.column_data_lengths(self)
pandas.io.sas.sas7bdat.SAS7BDATReader.column_data_offsets(self)
pandas.io.sas.sas7bdat.SAS7BDATReader.column_types(self)
pandas.io.sas.sas7bdat.SAS7BDATReader.read(self,nrows=None)
pandas.io.sas.sas7bdat._column
pandas.io.sas.sas7bdat._subheader_pointer


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/sas/sas_xport.py----------------------------------------
A:pandas.io.sas.sas_xport.out[name]->s[start:start + length].strip()
A:pandas.io.sas.sas_xport.vec1->_handle_truncated_float_vec(vec, self.fields[j]['field_length']).view(dtype=dtype)
A:pandas.io.sas.sas_xport.dtype->numpy.dtype(dtypel)
A:pandas.io.sas.sas_xport.vec2->_handle_truncated_float_vec(vec, self.fields[j]['field_length']).view(dtype=dtype).view(dtype=dtype)
A:pandas.io.sas.sas_xport.shift->numpy.zeros(len(vec), dtype=np.uint8)
A:pandas.io.sas.sas_xport.ieee->ieee.astype('f8').astype('f8')
A:pandas.io.sas.sas_xport.(filepath_or_buffer, encoding, compression, should_close)->get_filepath_or_buffer(filepath_or_buffer, encoding=encoding)
A:pandas.io.sas.sas_xport.self.filepath_or_buffer->BytesIO(contents)
A:pandas.io.sas.sas_xport.contents->contents.encode(self._encoding).encode(self._encoding)
A:pandas.io.sas.sas_xport.line1->self._get_row()
A:pandas.io.sas.sas_xport.line2->self._get_row()
A:pandas.io.sas.sas_xport.file_info->_split_line(line2, fif)
A:pandas.io.sas.sas_xport.file_info['created']->_parse_date(file_info['created'])
A:pandas.io.sas.sas_xport.line3->self._get_row()
A:pandas.io.sas.sas_xport.file_info['modified']->_parse_date(line3[:16])
A:pandas.io.sas.sas_xport.header1->self._get_row()
A:pandas.io.sas.sas_xport.header2->self._get_row()
A:pandas.io.sas.sas_xport.headflag1->self._get_row().startswith(_correct_header1)
A:pandas.io.sas.sas_xport.fieldnamelength->int(header1[-5:-2])
A:pandas.io.sas.sas_xport.member_info->_split_line(self._get_row(), mem)
A:pandas.io.sas.sas_xport.member_info['modified']->_parse_date(member_info['modified'])
A:pandas.io.sas.sas_xport.member_info['created']->_parse_date(member_info['created'])
A:pandas.io.sas.sas_xport.fieldcount->int(self._get_row()[54:58])
A:pandas.io.sas.sas_xport.fielddata->self.filepath_or_buffer.read(datalength)
A:pandas.io.sas.sas_xport.field->dict(zip(_fieldkeys, fieldstruct))
A:pandas.io.sas.sas_xport.fieldstruct->struct.unpack('>hhhh8s40s8shhh2s8shhl52s', field)
A:pandas.io.sas.sas_xport.field[k]->_parse_float_vec(vec).strip()
A:pandas.io.sas.sas_xport.header->self._get_row()
A:pandas.io.sas.sas_xport.self.record_start->self.filepath_or_buffer.tell()
A:pandas.io.sas.sas_xport.self.nobs->self._record_count()
A:pandas.io.sas.sas_xport.last_card->numpy.frombuffer(last_card, dtype=np.uint64)
A:pandas.io.sas.sas_xport.ix->numpy.flatnonzero(last_card == 2314885530818453536)
A:pandas.io.sas.sas_xport.v->_parse_float_vec(vec)
A:pandas.io.sas.sas_xport.read_lines->min(nrows, self.nobs - self._lines_read)
A:pandas.io.sas.sas_xport.raw->self.filepath_or_buffer.read(read_len)
A:pandas.io.sas.sas_xport.data->numpy.frombuffer(raw, dtype=self._dtype, count=read_lines)
A:pandas.io.sas.sas_xport.df->df.set_index(self._index).set_index(self._index)
A:pandas.io.sas.sas_xport.vec->_handle_truncated_float_vec(vec, self.fields[j]['field_length'])
A:pandas.io.sas.sas_xport.miss->self._missing_double(vec)
A:pandas.io.sas.sas_xport.df.index->range(self._lines_read, self._lines_read + read_lines)
pandas.io.sas.sas_xport.XportReader(self,filepath_or_buffer,index=None,encoding='ISO-8859-1',chunksize=None)
pandas.io.sas.sas_xport.XportReader.__init__(self,filepath_or_buffer,index=None,encoding='ISO-8859-1',chunksize=None)
pandas.io.sas.sas_xport.XportReader.__next__(self)
pandas.io.sas.sas_xport.XportReader._get_row(self)
pandas.io.sas.sas_xport.XportReader._missing_double(self,vec)
pandas.io.sas.sas_xport.XportReader._read_header(self)
pandas.io.sas.sas_xport.XportReader._record_count(self)->int
pandas.io.sas.sas_xport.XportReader.close(self)
pandas.io.sas.sas_xport.XportReader.get_chunk(self,size=None)
pandas.io.sas.sas_xport.XportReader.read(self,nrows=None)
pandas.io.sas.sas_xport._handle_truncated_float_vec(vec,nbytes)
pandas.io.sas.sas_xport._parse_date(datestr:str)->datetime
pandas.io.sas.sas_xport._parse_float_vec(vec)
pandas.io.sas.sas_xport._split_line(s:str,parts)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/json/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/json/_normalize.py----------------------------------------
A:pandas.io.json._normalize.new_d->copy.deepcopy(d)
A:pandas.io.json._normalize.k->str(k)
A:pandas.io.json._normalize.v->copy.deepcopy(d).pop(k)
A:pandas.io.json._normalize.result->result.rename(columns=lambda x: f'{record_prefix}{x}').rename(columns=lambda x: f'{record_prefix}{x}')
A:pandas.io.json._normalize.data->nested_to_record(data, sep=sep, max_level=max_level)
A:pandas.io.json._normalize.seen_meta[key]->_pull_field(obj, val[-1])
A:pandas.io.json._normalize.recs->_pull_records(obj, path[0])
A:pandas.io.json._normalize.meta_val->_pull_field(obj, val[level:])
A:pandas.io.json._normalize.result[k]->numpy.array(v, dtype=object).repeat(lengths)
A:pandas.io.json._normalize.json_normalize->deprecate('pandas.io.json.json_normalize', _json_normalize, '1.0.0', 'pandas.json_normalize')
pandas.io.json._normalize._json_normalize(data:Union[Dict,List[Dict]],record_path:Optional[Union[str,List]]=None,meta:Optional[Union[str,List[Union[str,List[str]]]]]=None,meta_prefix:Optional[str]=None,record_prefix:Optional[str]=None,errors:Optional[str]='raise',sep:str='.',max_level:Optional[int]=None)->'DataFrame'
pandas.io.json._normalize.convert_to_line_delimits(s)
pandas.io.json._normalize.nested_to_record(ds,prefix:str='',sep:str='.',level:int=0,max_level:Optional[int]=None)
pandas.json_normalize(data:Union[Dict,List[Dict]],record_path:Optional[Union[str,List]]=None,meta:Optional[Union[str,List[Union[str,List[str]]]]]=None,meta_prefix:Optional[str]=None,record_prefix:Optional[str]=None,errors:Optional[str]='raise',sep:str='.',max_level:Optional[int]=None)->'DataFrame'


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/json/_json.py----------------------------------------
A:pandas.io.json._json.path_or_buf->stringify_path(path_or_buf)
A:pandas.io.json._json.obj->self._get_object_parser(lines_json)
A:pandas.io.json._json.s->convert_to_line_delimits(s)
A:pandas.io.json._json.(fh, handles)->get_handle(path_or_buf, 'w', compression=compression)
A:pandas.io.json._json.self.schema->build_table_schema(obj, index=self.index)
A:pandas.io.json._json.obj[timedeltas]->obj[timedeltas].applymap(lambda x: x.isoformat()).applymap(lambda x: x.isoformat())
A:pandas.io.json._json.obj.index->range(self.nrows_seen, self.nrows_seen + len(obj))
A:pandas.io.json._json.self.obj->DataFrame(loads(json, precise_float=self.precise_float), dtype=None)
A:pandas.io.json._json.serialized->super()._write(table_obj, orient, double_precision, ensure_ascii, date_unit, iso_dates, default_handler, indent)
A:pandas.io.json._json.compression->infer_compression(path_or_buf, compression)
A:pandas.io.json._json.(filepath_or_buffer, _, compression, should_close)->get_filepath_or_buffer(path_or_buf, encoding=encoding, compression=compression)
A:pandas.io.json._json.json_reader->JsonReader(filepath_or_buffer, orient=orient, typ=typ, dtype=dtype, convert_axes=convert_axes, convert_dates=convert_dates, keep_default_dates=keep_default_dates, numpy=numpy, precise_float=precise_float, date_unit=date_unit, encoding=encoding, lines=lines, chunksize=chunksize, compression=compression)
A:pandas.io.json._json.result->JsonReader(filepath_or_buffer, orient=orient, typ=typ, dtype=dtype, convert_axes=convert_axes, convert_dates=convert_dates, keep_default_dates=keep_default_dates, numpy=numpy, precise_float=precise_float, date_unit=date_unit, encoding=encoding, lines=lines, chunksize=chunksize, compression=compression).read()
A:pandas.io.json._json.self.chunksize->_validate_integer('chunksize', self.chunksize, 1)
A:pandas.io.json._json.data->loads_(self.json)
A:pandas.io.json._json.self.data->self._preprocess_data(data)
A:pandas.io.json._json.exists->os.path.exists(filepath_or_buffer)
A:pandas.io.json._json.(data, _)->get_handle(filepath_or_buffer, 'r', encoding=self.encoding, compression=self.compression)
A:pandas.io.json._json.lines->list(islice(self.data, self.chunksize))
A:pandas.io.json._json.lines_json->self._combine_lines(lines)
A:pandas.io.json._json.date_unit->date_unit.lower().lower()
A:pandas.io.json._json.bad_keys->', '.join(bad_keys)
A:pandas.io.json._json.(new_axis, result)->self._try_convert_data(axis, self.obj._get_axis(axis), use_dtypes=False, convert_dates=True)
A:pandas.io.json._json.dtype->numpy.dtype(dtype)
A:pandas.io.json._json.(new_data, result)->f(col, c)
A:pandas.io.json._json.new_data->to_datetime(new_data, errors='raise', unit=date_unit)
A:pandas.io.json._json.loads_->functools.partial(loads, **load_kwargs)
A:pandas.io.json._json.(obj, result)->self._try_convert_data('data', self.obj, convert_dates=self.convert_dates)
A:pandas.io.json._json.args->loads(json, dtype=None, numpy=True, labelled=True, precise_float=self.precise_float)
A:pandas.io.json._json.decoded->loads(json, dtype=None, numpy=True, precise_float=self.precise_float)
A:pandas.io.json._json.new_obj->DataFrame(new_obj, index=self.obj.index)
A:pandas.io.json._json.convert_dates->set(convert_dates)
A:pandas.io.json._json.col_lower->col.lower()
pandas.io.json._json.FrameParser(Parser)
pandas.io.json._json.FrameParser._parse_no_numpy(self)
pandas.io.json._json.FrameParser._parse_numpy(self)
pandas.io.json._json.FrameParser._process_converter(self,f,filt=None)
pandas.io.json._json.FrameParser._try_convert_dates(self)
pandas.io.json._json.FrameParser._try_convert_types(self)
pandas.io.json._json.FrameWriter(Writer)
pandas.io.json._json.FrameWriter._format_axes(self)
pandas.io.json._json.FrameWriter._write(self,obj,orient:Optional[str],double_precision:int,ensure_ascii:bool,date_unit:str,iso_dates:bool,default_handler:Optional[Callable[[Any],JSONSerializable]],indent:int)
pandas.io.json._json.JSONTableWriter(self,obj,orient:Optional[str],date_format:str,double_precision:int,ensure_ascii:bool,date_unit:str,index:bool,default_handler:Optional[Callable[[Any],JSONSerializable]]=None,indent:int=0)
pandas.io.json._json.JSONTableWriter.__init__(self,obj,orient:Optional[str],date_format:str,double_precision:int,ensure_ascii:bool,date_unit:str,index:bool,default_handler:Optional[Callable[[Any],JSONSerializable]]=None,indent:int=0)
pandas.io.json._json.JSONTableWriter._write(self,obj,orient,double_precision,ensure_ascii,date_unit,iso_dates,default_handler,indent)
pandas.io.json._json.JsonReader(self,filepath_or_buffer,orient,typ,dtype,convert_axes,convert_dates,keep_default_dates,numpy,precise_float,date_unit,encoding,lines,chunksize,compression)
pandas.io.json._json.JsonReader.__init__(self,filepath_or_buffer,orient,typ,dtype,convert_axes,convert_dates,keep_default_dates,numpy,precise_float,date_unit,encoding,lines,chunksize,compression)
pandas.io.json._json.JsonReader.__next__(self)
pandas.io.json._json.JsonReader._combine_lines(self,lines)->str
pandas.io.json._json.JsonReader._get_data_from_filepath(self,filepath_or_buffer)
pandas.io.json._json.JsonReader._get_object_parser(self,json)
pandas.io.json._json.JsonReader._preprocess_data(self,data)
pandas.io.json._json.JsonReader.close(self)
pandas.io.json._json.JsonReader.read(self)
pandas.io.json._json.Parser(self,json,orient,dtype=None,convert_axes=True,convert_dates=True,keep_default_dates=False,numpy=False,precise_float=False,date_unit=None)
pandas.io.json._json.Parser.__init__(self,json,orient,dtype=None,convert_axes=True,convert_dates=True,keep_default_dates=False,numpy=False,precise_float=False,date_unit=None)
pandas.io.json._json.Parser._convert_axes(self)
pandas.io.json._json.Parser._try_convert_data(self,name,data,use_dtypes=True,convert_dates=True)
pandas.io.json._json.Parser._try_convert_dates(self)
pandas.io.json._json.Parser._try_convert_to_date(self,data)
pandas.io.json._json.Parser._try_convert_types(self)
pandas.io.json._json.Parser.check_keys_split(self,decoded)
pandas.io.json._json.Parser.parse(self)
pandas.io.json._json.SeriesParser(Parser)
pandas.io.json._json.SeriesParser._parse_no_numpy(self)
pandas.io.json._json.SeriesParser._parse_numpy(self)
pandas.io.json._json.SeriesParser._try_convert_types(self)
pandas.io.json._json.SeriesWriter(Writer)
pandas.io.json._json.SeriesWriter._format_axes(self)
pandas.io.json._json.SeriesWriter._write(self,obj,orient:Optional[str],double_precision:int,ensure_ascii:bool,date_unit:str,iso_dates:bool,default_handler:Optional[Callable[[Any],JSONSerializable]],indent:int)
pandas.io.json._json.Writer(self,obj,orient:Optional[str],date_format:str,double_precision:int,ensure_ascii:bool,date_unit:str,index:bool,default_handler:Optional[Callable[[Any],JSONSerializable]]=None,indent:int=0)
pandas.io.json._json.Writer.__init__(self,obj,orient:Optional[str],date_format:str,double_precision:int,ensure_ascii:bool,date_unit:str,index:bool,default_handler:Optional[Callable[[Any],JSONSerializable]]=None,indent:int=0)
pandas.io.json._json.Writer._format_axes(self)
pandas.io.json._json.Writer._write(self,obj,orient:Optional[str],double_precision:int,ensure_ascii:bool,date_unit:str,iso_dates:bool,default_handler:Optional[Callable[[Any],JSONSerializable]],indent:int)
pandas.io.json._json.Writer.write(self)
pandas.io.json._json.read_json(path_or_buf=None,orient=None,typ='frame',dtype=None,convert_axes=None,convert_dates=True,keep_default_dates=True,numpy=False,precise_float=False,date_unit=None,encoding=None,lines=False,chunksize=None,compression='infer')
pandas.io.json._json.to_json(path_or_buf,obj,orient:Optional[str]=None,date_format:str='epoch',double_precision:int=10,force_ascii:bool=True,date_unit:str='ms',default_handler:Optional[Callable[[Any],JSONSerializable]]=None,lines:bool=False,compression:Optional[str]='infer',index:bool=True,indent:int=0)
pandas.io.json.read_json(path_or_buf=None,orient=None,typ='frame',dtype=None,convert_axes=None,convert_dates=True,keep_default_dates=True,numpy=False,precise_float=False,date_unit=None,encoding=None,lines=False,chunksize=None,compression='infer')
pandas.io.json.to_json(path_or_buf,obj,orient:Optional[str]=None,date_format:str='epoch',double_precision:int=10,force_ascii:bool=True,date_unit:str='ms',default_handler:Optional[Callable[[Any],JSONSerializable]]=None,lines:bool=False,compression:Optional[str]='infer',index:bool=True,indent:int=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/json/_table_schema.py----------------------------------------
A:pandas.io.json._table_schema.data->set_default_names(data)
A:pandas.io.json._table_schema.new_field->convert_pandas_type_to_json_field(level)
A:pandas.io.json._table_schema.table->loads(json, precise_float=precise_float)
A:pandas.io.json._table_schema.df->df.set_index(table['schema']['primaryKey']).set_index(table['schema']['primaryKey'])
pandas.io.json._table_schema.as_json_table_type(x)
pandas.io.json._table_schema.build_table_schema(data,index=True,primary_key=None,version=True)
pandas.io.json._table_schema.convert_json_field_to_pandas_type(field)
pandas.io.json._table_schema.convert_pandas_type_to_json_field(arr,dtype=None)
pandas.io.json._table_schema.parse_table_schema(json,precise_float)
pandas.io.json._table_schema.set_default_names(data)
pandas.io.json.build_table_schema(data,index=True,primary_key=None,version=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/io/clipboard/__init__.py----------------------------------------
A:pandas.io.clipboard.__init__.HAS_DISPLAY->os.getenv('DISPLAY', False)
A:pandas.io.clipboard.__init__.text->_stringifyText(text)
A:pandas.io.clipboard.__init__.p->subprocess.Popen(['powershell.exe', '-command', 'Get-Clipboard'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True)
A:pandas.io.clipboard.__init__.(stdout, stderr)->subprocess.Popen(['powershell.exe', '-command', 'Get-Clipboard'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True).communicate()
A:pandas.io.clipboard.__init__.newStr->Foundation.NSString.stringWithString_(text).nsstring()
A:pandas.io.clipboard.__init__.newData->Foundation.NSString.stringWithString_(text).nsstring().dataUsingEncoding_(Foundation.NSUTF8StringEncoding)
A:pandas.io.clipboard.__init__.board->AppKit.NSPasteboard.generalPasteboard()
A:pandas.io.clipboard.__init__.content->fo.read()
A:pandas.io.clipboard.__init__.app->QApplication([])
A:pandas.io.clipboard.__init__.cb->QApplication([]).clipboard()
A:pandas.io.clipboard.__init__.clipboardContents->stdout.decode(ENCODING)
A:pandas.io.clipboard.__init__.ret->self.f(*args)
A:pandas.io.clipboard.__init__.msvcrt->ctypes.CDLL('msvcrt')
A:pandas.io.clipboard.__init__.safeCreateWindowExA->CheckedCall(windll.user32.CreateWindowExA)
A:pandas.io.clipboard.__init__.safeDestroyWindow->CheckedCall(windll.user32.DestroyWindow)
A:pandas.io.clipboard.__init__.safeCloseClipboard->CheckedCall(windll.user32.CloseClipboard)
A:pandas.io.clipboard.__init__.safeEmptyClipboard->CheckedCall(windll.user32.EmptyClipboard)
A:pandas.io.clipboard.__init__.safeGetClipboardData->CheckedCall(windll.user32.GetClipboardData)
A:pandas.io.clipboard.__init__.safeSetClipboardData->CheckedCall(windll.user32.SetClipboardData)
A:pandas.io.clipboard.__init__.safeGlobalAlloc->CheckedCall(windll.kernel32.GlobalAlloc)
A:pandas.io.clipboard.__init__.safeGlobalLock->CheckedCall(windll.kernel32.GlobalLock)
A:pandas.io.clipboard.__init__.safeGlobalUnlock->CheckedCall(windll.kernel32.GlobalUnlock)
A:pandas.io.clipboard.__init__.wcslen->CheckedCall(msvcrt.wcslen)
A:pandas.io.clipboard.__init__.hwnd->safeCreateWindowExA(0, b'STATIC', None, 0, 0, 0, 0, 0, None, None, None, None)
A:pandas.io.clipboard.__init__.success->OpenClipboard(hwnd)
A:pandas.io.clipboard.__init__.handle->safeGetClipboardData(CF_UNICODETEXT)
A:pandas.io.clipboard.__init__.locked_handle->safeGlobalLock(handle)
A:pandas.io.clipboard.__init__.(copy, paste)->determine_clipboard()
pandas.io.clipboard.__init__.CheckedCall(self,f)
pandas.io.clipboard.__init__.CheckedCall.__init__(self,f)
pandas.io.clipboard.__init__.CheckedCall.__setattr__(self,key,value)
pandas.io.clipboard.__init__.PyperclipException(RuntimeError)
pandas.io.clipboard.__init__.PyperclipWindowsException(self,message)
pandas.io.clipboard.__init__.PyperclipWindowsException.__init__(self,message)
pandas.io.clipboard.__init__._executable_exists(name)
pandas.io.clipboard.__init__._stringifyText(text)->str
pandas.io.clipboard.__init__.determine_clipboard()
pandas.io.clipboard.__init__.init_dev_clipboard_clipboard()
pandas.io.clipboard.__init__.init_klipper_clipboard()
pandas.io.clipboard.__init__.init_no_clipboard()
pandas.io.clipboard.__init__.init_osx_pbcopy_clipboard()
pandas.io.clipboard.__init__.init_osx_pyobjc_clipboard()
pandas.io.clipboard.__init__.init_qt_clipboard()
pandas.io.clipboard.__init__.init_windows_clipboard()
pandas.io.clipboard.__init__.init_wsl_clipboard()
pandas.io.clipboard.__init__.init_xclip_clipboard()
pandas.io.clipboard.__init__.init_xsel_clipboard()
pandas.io.clipboard.__init__.is_available()->bool
pandas.io.clipboard.__init__.lazy_load_stub_copy(text)
pandas.io.clipboard.__init__.lazy_load_stub_paste()
pandas.io.clipboard.__init__.set_clipboard(clipboard)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/test_multilevel.py----------------------------------------
A:pandas.tests.test_multilevel.index->MultiIndex(levels=levels, codes=[[0, 0, 1, 0, 1, 1], [0, 1, 0, 2, 2, 1]], sortorder=0)
A:pandas.tests.test_multilevel.self.frame->DataFrame(np.random.randn(10, 3), index=index, columns=Index(['A', 'B', 'C'], name='exp'))
A:pandas.tests.test_multilevel.self.single_level->MultiIndex(levels=[['foo', 'bar', 'baz', 'qux']], codes=[[0, 1, 2, 3]], names=['first'])
A:pandas.tests.test_multilevel.tuples->zip(*arrays)
A:pandas.tests.test_multilevel.s->Series(range(8), index=mi)
A:pandas.tests.test_multilevel.self.tdf->pandas._testing.makeTimeDataFrame(100)
A:pandas.tests.test_multilevel.self.ymd->self.tdf.groupby([lambda x: x.year, lambda x: x.month, lambda x: x.day]).sum()
A:pandas.tests.test_multilevel.result->Series(range(8), index=mi).sort_index(level=['third', 'first'], ascending=[False, True])
A:pandas.tests.test_multilevel.idx1->idx1.append(idx1).append(idx1)
A:pandas.tests.test_multilevel.idx2->idx2.append(idx2).append(idx2).append(idx2).append(idx2)
A:pandas.tests.test_multilevel.idx3->pandas.period_range('2005', periods=6, freq='A')
A:pandas.tests.test_multilevel.midx_lv2->pandas.MultiIndex.from_arrays([idx1, idx2])
A:pandas.tests.test_multilevel.midx_lv3->pandas.MultiIndex.from_arrays([idx1, idx2, idx3])
A:pandas.tests.test_multilevel.tz->pytz.timezone('Asia/Tokyo')
A:pandas.tests.test_multilevel.expected->DataFrame({'date': pd.to_datetime(['20121002', '20121007', '20130130', '20130202', '20130305', '20121002', '20121207', '20130130', '20130202', '20130305', '20130202', '20130305']), 'user_id': [1, 1, 1, 1, 1, 3, 3, 3, 5, 5, 5, 5], 'whole_cost': [1790, np.nan, 280, 259, np.nan, 623, 90, 312, np.nan, 301, 359, 801], 'cost': [12, 15, 10, 24, 39, 1, 0, np.nan, 45, 34, 1, 12]}).set_index(['date', 'user_id']).sort_index().dropna()
A:pandas.tests.test_multilevel.multi->DataFrame(np.arange(16).reshape(4, 4), index=mi, columns=list('ABCD')).set_index(['DATE', 'ID'])
A:pandas.tests.test_multilevel.month_sums->self.ymd.sum(level='month')
A:pandas.tests.test_multilevel.op->getattr(Series, opname)
A:pandas.tests.test_multilevel.broadcasted->self.ymd['A'].groupby(level='month').transform(np.sum)
A:pandas.tests.test_multilevel.unpickled->pandas._testing.round_trip_pickle(frame)
A:pandas.tests.test_multilevel.chunk->ymdT.reindex(columns=new_index)
A:pandas.tests.test_multilevel.buf->StringIO()
A:pandas.tests.test_multilevel.df->DataFrame(np.arange(16).reshape(4, 4), index=mi, columns=list('ABCD'))
A:pandas.tests.test_multilevel.lines->repr(df).split('\n')
A:pandas.tests.test_multilevel.deleveled->self.series.reset_index(drop=True)
A:pandas.tests.test_multilevel.unstacked->self.ymd.unstack('month')
A:pandas.tests.test_multilevel.restacked->restacked.sort_index(level=0).sort_index(level=0)
A:pandas.tests.test_multilevel.unlexsorted->unlexsorted.swaplevel(0, 1).swaplevel(0, 1)
A:pandas.tests.test_multilevel.stacked->Series(range(8), index=mi).sort_index(level=['third', 'first'], ascending=[False, True]).stack()
A:pandas.tests.test_multilevel.ymd_stacked->self.ymd.stack()
A:pandas.tests.test_multilevel.mi->pandas.MultiIndex.from_tuples(tuples, names=['first', 'second', 'third'])
A:pandas.tests.test_multilevel.df.index->numpy.arange(len(df))
A:pandas.tests.test_multilevel.recons->Series(range(8), index=mi).sort_index(level=['third', 'first'], ascending=[False, True]).stack()
A:pandas.tests.test_multilevel.s_unstacked->Series(range(8), index=mi).unstack(['year', 'month'])
A:pandas.tests.test_multilevel.idx->MultiIndex([['A', 'B', 'C'], ['c', 'b', 'a']], [[0, 1, 2, 0, 1, 2], [0, 2, 1, 1, 0, 2]])
A:pandas.tests.test_multilevel.result1->DataFrame(np.arange(16).reshape(4, 4), index=mi, columns=list('ABCD')).unstack()
A:pandas.tests.test_multilevel.result2->DataFrame(np.random.randn(6, 4), index=index).xs(('foo', 'bar'))
A:pandas.tests.test_multilevel.result3->DataFrame(np.arange(16).reshape(4, 4), index=mi, columns=list('ABCD')).unstack(level=0)
A:pandas.tests.test_multilevel.e_idx->pandas.PeriodIndex(['2013-01', '2013-02', '2013-03'], freq='M', name='period1')
A:pandas.tests.test_multilevel.e_cols->pandas.MultiIndex.from_arrays(['A A B B'.split(), e_1])
A:pandas.tests.test_multilevel.e_1->pandas.PeriodIndex(['2014-01', '2014-02', '2014-01', '2014-02'], freq='M', name='period1')
A:pandas.tests.test_multilevel.e_2->pandas.PeriodIndex(['2013-10', '2013-12', '2014-02'], freq='M', name='period2')
A:pandas.tests.test_multilevel.date->pandas.to_datetime(['2013-01-03', '2013-01-04', '2013-01-05'] * 2)
A:pandas.tests.test_multilevel.var1->numpy.random.randint(0, 100, 6)
A:pandas.tests.test_multilevel.unst->DataFrame(np.arange(16).reshape(4, 4), index=mi, columns=list('ABCD')).set_index(['DATE', 'ID']).unstack('ID')
A:pandas.tests.test_multilevel.down->DataFrame(np.arange(16).reshape(4, 4), index=mi, columns=list('ABCD')).set_index(['DATE', 'ID']).unstack('ID').resample('W-THU').mean()
A:pandas.tests.test_multilevel.rs->self.frame.copy()
A:pandas.tests.test_multilevel.xp->DataFrame(np.arange(16).reshape(4, 4), index=mi, columns=list('ABCD')).set_index(['DATE', 'ID']).unstack('ID').loc[:, ['VAR1']].resample('W-THU').mean().stack('ID')
A:pandas.tests.test_multilevel.grouper->Series(range(8), index=mi).index.get_level_values(0)
A:pandas.tests.test_multilevel.grouped->DataFrame(np.random.randn(6, 4), index=index).groupby(level=level, axis=axis, sort=sort)
A:pandas.tests.test_multilevel.applied->DataFrame(np.random.randn(6, 4), index=index).groupby(level=level, axis=axis, sort=sort).apply(lambda x: x * 2)
A:pandas.tests.test_multilevel.idf->DataFrame({'A' * 30: {('A', 'A0006000', 'nuit'): 'A0006000'}, 'B' * 30: {('A', 'A0006000', 'nuit'): np.nan}, 'C' * 30: {('A', 'A0006000', 'nuit'): np.nan}, 'D' * 30: {('A', 'A0006000', 'nuit'): np.nan}, 'E' * 30: {('A', 'A0006000', 'nuit'): 'A'}, 'F' * 30: {('A', 'A0006000', 'nuit'): np.nan}}).set_index(['A' * 30, 'C' * 30])
A:pandas.tests.test_multilevel.levels_poss->itertools.product(itertools.permutations([0, 1, 2], width), repeat=2)
A:pandas.tests.test_multilevel.columns->pandas.MultiIndex.from_tuples([('red', i) for i in gen])
A:pandas.tests.test_multilevel.df_stacked->DataFrame(np.arange(16).reshape(4, 4), index=mi, columns=list('ABCD')).stack(stack_lev)
A:pandas.tests.test_multilevel.midx->pandas.MultiIndex.from_tuples([('f1', 's1'), ('f1', 's2'), ('f2', 's1'), ('f2', 's2'), ('f3', 's1'), ('f3', 's2')])
A:pandas.tests.test_multilevel.joined->a.join(b, how='outer').reindex(self.frame.index)
A:pandas.tests.test_multilevel.swapped->ft.swaplevel('first', 'second', axis=1)
A:pandas.tests.test_multilevel.swapped2->self.frame['A'].swaplevel(0)
A:pandas.tests.test_multilevel.swapped3->self.frame['A'].swaplevel(0, 1)
A:pandas.tests.test_multilevel.swapped4->self.frame['A'].swaplevel('first', 'second')
A:pandas.tests.test_multilevel.back->ft.swaplevel('first', 'second', axis=1).swaplevel()
A:pandas.tests.test_multilevel.back2->ft.swaplevel('first', 'second', axis=1).swaplevel(0)
A:pandas.tests.test_multilevel.back3->ft.swaplevel('first', 'second', axis=1).swaplevel(0, 1)
A:pandas.tests.test_multilevel.back4->ft.swaplevel('first', 'second', axis=1).swaplevel('second', 'first')
A:pandas.tests.test_multilevel.x->Series(data=[1, 2, 3], index=MultiIndex.from_tuples([('A', 1), ('A', 2), ('B', 3)]))
A:pandas.tests.test_multilevel.y->Series(data=[4, 5, 6], index=MultiIndex.from_tuples([('Z', 1), ('Z', 2), ('B', 3)]))
A:pandas.tests.test_multilevel.exp_index->Series(data=[1, 2, 3], index=MultiIndex.from_tuples([('A', 1), ('A', 2), ('B', 3)])).index.union(y.index)
A:pandas.tests.test_multilevel.frame->DataFrame(np.random.randn(6, 4), index=index)
A:pandas.tests.test_multilevel.expect->self.series.count(level=0).rename_axis('a')
A:pandas.tests.test_multilevel.series->Series(np.random.randn(6), index=index)
A:pandas.tests.test_multilevel.leftside->DataFrame(np.random.randn(6, 4), index=index).groupby(level=level, axis=axis, sort=sort).agg(aggf)
A:pandas.tests.test_multilevel.rightside->rightside.sort_index(level=level, axis=axis).sort_index(level=level, axis=axis)
A:pandas.tests.test_multilevel.level_index->DataFrame(np.random.randn(6, 4), index=index)._get_axis(axis).levels[level].rename(level_name)
A:pandas.tests.test_multilevel.obj->Series([10.0], index=MultiIndex.from_tuples([(2, 3)]))
A:pandas.tests.test_multilevel.ex->DataFrame({'data': [False, False]}, index=['one', 'two'])
A:pandas.tests.test_multilevel.k1->self.ymd.index.get_level_values(0)
A:pandas.tests.test_multilevel.k2->self.ymd.index.get_level_values(1)
A:pandas.tests.test_multilevel.df['Totals', '']->DataFrame(np.arange(16).reshape(4, 4), index=mi, columns=list('ABCD')).sum(1)
A:pandas.tests.test_multilevel.codes->numpy.tile(np.arange(500), 2)
A:pandas.tests.test_multilevel.level->numpy.arange(500)
A:pandas.tests.test_multilevel.idces->range(len(keys))
A:pandas.tests.test_multilevel.missing->tuple([0, 1] * 5 * N)
A:pandas.tests.test_multilevel.expected.index->DataFrame({'date': pd.to_datetime(['20121002', '20121007', '20130130', '20130202', '20130305', '20121002', '20121207', '20130130', '20130202', '20130305', '20130202', '20130305']), 'user_id': [1, 1, 1, 1, 1, 3, 3, 3, 5, 5, 5, 5], 'whole_cost': [1790, np.nan, 280, 259, np.nan, 623, 90, 312, np.nan, 301, 359, 801], 'cost': [12, 15, 10, 24, 39, 1, 0, np.nan, 45, 34, 1, 12]}).set_index(['date', 'user_id']).sort_index().dropna().index.droplevel(0)
A:pandas.tests.test_multilevel.grp_size->DataFrame(np.arange(16).reshape(4, 4), index=mi, columns=list('ABCD')).groupby('var1').size()
A:pandas.tests.test_multilevel.df1->df1.set_index(['a', 'b']).set_index(['a', 'b'])
A:pandas.tests.test_multilevel.df2->DataFrame({'date': pd.to_datetime(['20121002', '20121007', '20130130', '20130202', '20130305', '20121002', '20121207', '20130130', '20130202', '20130305', '20130202', '20130305']), 'user_id': [1, 1, 1, 1, 1, 3, 3, 3, 5, 5, 5, 5], 'whole_cost': [1790, np.nan, 280, 259, np.nan, 623, 90, 312, np.nan, 301, 359, 801], 'cost': [12, 15, 10, 24, 39, 1, 0, np.nan, 45, 34, 1, 12]}).set_index(['date', 'user_id'])
A:pandas.tests.test_multilevel.idxdt->pandas.to_datetime(['201603231400', '201603231500', '201603231600', '201603231600', '201603231700'])
A:pandas.tests.test_multilevel.ts->Timestamp('201603231600')
A:pandas.tests.test_multilevel.start->Timestamp('2017-10-29', tz='Europe/Berlin')
A:pandas.tests.test_multilevel.end->Timestamp('2017-10-29 04:00:00', tz='Europe/Berlin')
A:pandas.tests.test_multilevel.data->numpy.random.randn(3, 4)
A:pandas.tests.test_multilevel.expected_start->Timestamp('2017-10-29 00:15:00', tz='Europe/Berlin')
A:pandas.tests.test_multilevel.expected_idx->pandas.date_range(expected_start, end, freq='15min')
A:pandas.tests.test_multilevel.s1->Series([1, 2, 3, 4], index=MultiIndex.from_tuples([(1, 2), (1, 3), (2, 2), (2, 4)]))
A:pandas.tests.test_multilevel.s2->Series([1, 2, 3, 4], index=MultiIndex.from_tuples([(1, 2), (1, 3), (3, 2), (3, 4)]))
A:pandas.tests.test_multilevel.s3->Series(dtype=object)
A:pandas.tests.test_multilevel.g->df[df.a == 2].groupby(group_keys)
A:pandas.tests.test_multilevel.df3->DataFrame({'A' * 30: {('A', 'A0006000', 'nuit'): 'A0006000'}, 'B' * 30: {('A', 'A0006000', 'nuit'): np.nan}, 'C' * 30: {('A', 'A0006000', 'nuit'): np.nan}, 'D' * 30: {('A', 'A0006000', 'nuit'): np.nan}, 'E' * 30: {('A', 'A0006000', 'nuit'): 'A'}, 'F' * 30: {('A', 'A0006000', 'nuit'): np.nan}})
A:pandas.tests.test_multilevel.duplicated->MultiIndex([['A', 'B', 'C'], ['c', 'b', 'a']], [[0, 1, 2, 0, 1, 2], [0, 2, 1, 1, 0, 2]]).duplicated(keep=False)
A:pandas.tests.test_multilevel.expected1->pandas.period_range('2011-01-01', periods=3, freq='M')
A:pandas.tests.test_multilevel.date1->datetime.date.today()
A:pandas.tests.test_multilevel.date2->datetime.datetime.today()
A:pandas.tests.test_multilevel.date3->pandas.Timestamp.today()
A:pandas.tests.test_multilevel.expected2->pandas.period_range('2013-01-01 09:00', periods=2, freq='H')
A:pandas.tests.test_multilevel.expected['idx1']->expected['idx1'].apply(lambda d: Timestamp(d, tz=tz)).apply(lambda d: Timestamp(d, tz=tz))
A:pandas.tests.test_multilevel.expected['idx3']->expected['idx3'].apply(lambda d: Timestamp(d, tz='Europe/Paris')).apply(lambda d: Timestamp(d, tz='Europe/Paris'))
A:pandas.tests.test_multilevel.expected['level_1']->expected['level_1'].apply(lambda d: Timestamp(d, freq='D', tz=tz)).apply(lambda d: Timestamp(d, freq='D', tz=tz))
A:pandas.tests.test_multilevel.idx_col->DataFrame([[0], [1]], columns=MultiIndex.from_tuples([('C', 'c', 'ii')]))
A:pandas.tests.test_multilevel.m_idx->pandas.MultiIndex.from_tuples([(1, 2), (3, 4), (5, 6), (7, 8)])
A:pandas.tests.test_multilevel.m_df->Series(data, index=m_idx)
A:pandas.tests.test_multilevel.a_sorted->self.frame['A'].sort_index(level=0)
A:pandas.tests.test_multilevel.sorted_before->dft.sort_index(level=1, axis=1)
A:pandas.tests.test_multilevel.sorted_after->dft.sort_index(level=1, axis=1)
A:pandas.tests.test_multilevel.concatted->pandas.concat([df, df], keys=[0.8, 0.5])
A:pandas.tests.test_multilevel.result.index->Series(range(8), index=mi).sort_index(level=['third', 'first'], ascending=[False, True]).index._sort_levels_monotonic()
A:pandas.tests.test_multilevel.sorted->DataFrame(np.arange(16).reshape(4, 4), index=mi, columns=list('ABCD')).sort_index()
pandas.tests.test_multilevel.Base
pandas.tests.test_multilevel.Base.setup_method(self,method)
pandas.tests.test_multilevel.TestMultiLevel(Base)
pandas.tests.test_multilevel.TestMultiLevel.test_alignment(self)
pandas.tests.test_multilevel.TestMultiLevel.test_append(self)
pandas.tests.test_multilevel.TestMultiLevel.test_append_index(self)
pandas.tests.test_multilevel.TestMultiLevel.test_assign_index_sequences(self)
pandas.tests.test_multilevel.TestMultiLevel.test_binops_level(self)
pandas.tests.test_multilevel.TestMultiLevel.test_constructor_with_tz(self)
pandas.tests.test_multilevel.TestMultiLevel.test_count(self)
pandas.tests.test_multilevel.TestMultiLevel.test_count_level(self)
pandas.tests.test_multilevel.TestMultiLevel.test_count_level_corner(self)
pandas.tests.test_multilevel.TestMultiLevel.test_count_level_series(self)
pandas.tests.test_multilevel.TestMultiLevel.test_dataframe_constructor(self)
pandas.tests.test_multilevel.TestMultiLevel.test_datetimeindex(self)
pandas.tests.test_multilevel.TestMultiLevel.test_delevel_infer_dtype(self)
pandas.tests.test_multilevel.TestMultiLevel.test_drop_level(self)
pandas.tests.test_multilevel.TestMultiLevel.test_drop_level_nonunique_datetime(self)
pandas.tests.test_multilevel.TestMultiLevel.test_drop_level_nonunique_dt(self)
pandas.tests.test_multilevel.TestMultiLevel.test_drop_multiindex_other_level_nan(self)
pandas.tests.test_multilevel.TestMultiLevel.test_drop_nonunique(self)
pandas.tests.test_multilevel.TestMultiLevel.test_drop_preserve_names(self)
pandas.tests.test_multilevel.TestMultiLevel.test_drop_tz_aware_timestamp_across_dst(self,box)
pandas.tests.test_multilevel.TestMultiLevel.test_dtindex(self)
pandas.tests.test_multilevel.TestMultiLevel.test_duplicate_groupby_issues(self)
pandas.tests.test_multilevel.TestMultiLevel.test_duplicate_mi(self)
pandas.tests.test_multilevel.TestMultiLevel.test_duplicated_drop_duplicates(self)
pandas.tests.test_multilevel.TestMultiLevel.test_empty_frame_groupby_dtypes_consistency(self,d)
pandas.tests.test_multilevel.TestMultiLevel.test_frame_any_all_group(self)
pandas.tests.test_multilevel.TestMultiLevel.test_frame_dict_constructor_empty_series(self)
pandas.tests.test_multilevel.TestMultiLevel.test_frame_group_ops(self,op,level,axis,skipna,sort)
pandas.tests.test_multilevel.TestMultiLevel.test_frame_series_agg_multiple_levels(self)
pandas.tests.test_multilevel.TestMultiLevel.test_get_level_number_out_of_bounds(self)
pandas.tests.test_multilevel.TestMultiLevel.test_groupby_corner(self)
pandas.tests.test_multilevel.TestMultiLevel.test_groupby_level_no_obs(self)
pandas.tests.test_multilevel.TestMultiLevel.test_groupby_multilevel(self)
pandas.tests.test_multilevel.TestMultiLevel.test_groupby_multilevel_with_transform(self)
pandas.tests.test_multilevel.TestMultiLevel.test_groupby_transform(self)
pandas.tests.test_multilevel.TestMultiLevel.test_insert_index(self)
pandas.tests.test_multilevel.TestMultiLevel.test_join(self)
pandas.tests.test_multilevel.TestMultiLevel.test_join_segfault(self)
pandas.tests.test_multilevel.TestMultiLevel.test_level_with_tuples(self)
pandas.tests.test_multilevel.TestMultiLevel.test_loc_preserve_names(self)
pandas.tests.test_multilevel.TestMultiLevel.test_mixed_depth_drop(self)
pandas.tests.test_multilevel.TestMultiLevel.test_mixed_depth_pop(self)
pandas.tests.test_multilevel.TestMultiLevel.test_multiindex_na_repr(self)
pandas.tests.test_multilevel.TestMultiLevel.test_multiindex_set_index(self)
pandas.tests.test_multilevel.TestMultiLevel.test_multilevel_consolidate(self)
pandas.tests.test_multilevel.TestMultiLevel.test_pickle(self)
pandas.tests.test_multilevel.TestMultiLevel.test_pyint_engine(self)
pandas.tests.test_multilevel.TestMultiLevel.test_reindex(self)
pandas.tests.test_multilevel.TestMultiLevel.test_reindex_level(self)
pandas.tests.test_multilevel.TestMultiLevel.test_reindex_level_partial_selection(self)
pandas.tests.test_multilevel.TestMultiLevel.test_reindex_preserve_levels(self)
pandas.tests.test_multilevel.TestMultiLevel.test_reorder_levels(self)
pandas.tests.test_multilevel.TestMultiLevel.test_repeat(self)
pandas.tests.test_multilevel.TestMultiLevel.test_repr_name_coincide(self)
pandas.tests.test_multilevel.TestMultiLevel.test_repr_to_string(self)
pandas.tests.test_multilevel.TestMultiLevel.test_reset_index_datetime(self)
pandas.tests.test_multilevel.TestMultiLevel.test_reset_index_dt(self)
pandas.tests.test_multilevel.TestMultiLevel.test_reset_index_multiindex_columns(self)
pandas.tests.test_multilevel.TestMultiLevel.test_reset_index_period(self)
pandas.tests.test_multilevel.TestMultiLevel.test_reset_index_with_drop(self)
pandas.tests.test_multilevel.TestMultiLevel.test_series_any_timedelta(self)
pandas.tests.test_multilevel.TestMultiLevel.test_series_constructor(self)
pandas.tests.test_multilevel.TestMultiLevel.test_series_group_min_max(self,op,level,skipna,sort)
pandas.tests.test_multilevel.TestMultiLevel.test_set_index_datetime(self)
pandas.tests.test_multilevel.TestMultiLevel.test_set_index_dt(self)
pandas.tests.test_multilevel.TestMultiLevel.test_set_index_period(self)
pandas.tests.test_multilevel.TestMultiLevel.test_stack(self)
pandas.tests.test_multilevel.TestMultiLevel.test_stack_dropna(self)
pandas.tests.test_multilevel.TestMultiLevel.test_stack_level_name(self)
pandas.tests.test_multilevel.TestMultiLevel.test_stack_mixed_dtype(self)
pandas.tests.test_multilevel.TestMultiLevel.test_stack_multiple_bug(self)
pandas.tests.test_multilevel.TestMultiLevel.test_stack_multiple_out_of_bounds(self)
pandas.tests.test_multilevel.TestMultiLevel.test_stack_names_and_numbers(self)
pandas.tests.test_multilevel.TestMultiLevel.test_stack_order_with_unsorted_levels(self)
pandas.tests.test_multilevel.TestMultiLevel.test_stack_unstack_multiple(self)
pandas.tests.test_multilevel.TestMultiLevel.test_stack_unstack_preserve_names(self)
pandas.tests.test_multilevel.TestMultiLevel.test_stack_unstack_wrong_level_name(self,method)
pandas.tests.test_multilevel.TestMultiLevel.test_stat_op_corner(self)
pandas.tests.test_multilevel.TestMultiLevel.test_std_var_pass_ddof(self)
pandas.tests.test_multilevel.TestMultiLevel.test_subsets_multiindex_dtype(self)
pandas.tests.test_multilevel.TestMultiLevel.test_swaplevel(self)
pandas.tests.test_multilevel.TestMultiLevel.test_to_html(self)
pandas.tests.test_multilevel.TestMultiLevel.test_tuples_have_na(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unicode_repr_issues(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unicode_repr_level_names(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_bug(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_group_index_overflow(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_level_name(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_multiple_hierarchical(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_multiple_no_empty_columns(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_number_of_levels_larger_than_int32(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_odd_failure(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_partial(self,result_rows,result_columns,index_product,expected_row)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_period_frame(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_period_series(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_preserve_types(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_sparse_keyspace(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_unobserved_keys(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unused_level_raises(self)
pandas.tests.test_multilevel.TestSorted(Base)
pandas.tests.test_multilevel.TestSorted.test_is_lexsorted(self)
pandas.tests.test_multilevel.TestSorted.test_lexsort_depth(self)
pandas.tests.test_multilevel.TestSorted.test_raise_invalid_sortorder(self)
pandas.tests.test_multilevel.TestSorted.test_sort_ascending_list(self)
pandas.tests.test_multilevel.TestSorted.test_sort_index_and_reconstruction(self)
pandas.tests.test_multilevel.TestSorted.test_sort_index_and_reconstruction_doc_example(self)
pandas.tests.test_multilevel.TestSorted.test_sort_index_level(self)
pandas.tests.test_multilevel.TestSorted.test_sort_index_level_by_name(self)
pandas.tests.test_multilevel.TestSorted.test_sort_index_level_large_cardinality(self)
pandas.tests.test_multilevel.TestSorted.test_sort_index_level_mixed(self)
pandas.tests.test_multilevel.TestSorted.test_sort_index_nan(self)
pandas.tests.test_multilevel.TestSorted.test_sort_index_non_existent_label_multiindex(self)
pandas.tests.test_multilevel.TestSorted.test_sort_index_preserve_levels(self)
pandas.tests.test_multilevel.TestSorted.test_sort_index_reorder_on_ops(self)
pandas.tests.test_multilevel.TestSorted.test_sort_non_lexsorted(self)
pandas.tests.test_multilevel.TestSorted.test_sorting_repr_8017(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/test_expressions.py----------------------------------------
A:pandas.tests.test_expressions._frame->DataFrame(randn(10000, 4), columns=list('ABCD'), dtype='float64')
A:pandas.tests.test_expressions._frame2->DataFrame(randn(100, 4), columns=list('ABCD'), dtype='float64')
A:pandas.tests.test_expressions._mixed->DataFrame({'A': _frame['A'].copy(), 'B': _frame['B'].astype('float32'), 'C': _frame['C'].astype('int64'), 'D': _frame['D'].astype('int32')})
A:pandas.tests.test_expressions._mixed2->DataFrame({'A': _frame2['A'].copy(), 'B': _frame2['B'].astype('float32'), 'C': _frame2['C'].astype('int64'), 'D': _frame2['D'].astype('int32')})
A:pandas.tests.test_expressions._integer->DataFrame(np.random.randint(1, 100, size=(10001, 4)), columns=list('ABCD'), dtype='int64')
A:pandas.tests.test_expressions._integer2->DataFrame(np.random.randint(1, 100, size=(101, 4)), columns=list('ABCD'), dtype='int64')
A:pandas.tests.test_expressions.self.frame->DataFrame(randn(10000, 4), columns=list('ABCD'), dtype='float64').copy()
A:pandas.tests.test_expressions.self.frame2->DataFrame(randn(100, 4), columns=list('ABCD'), dtype='float64').copy()
A:pandas.tests.test_expressions.self.mixed->DataFrame({'A': _frame['A'].copy(), 'B': _frame['B'].astype('float32'), 'C': _frame['C'].astype('int64'), 'D': _frame['D'].astype('int32')}).copy()
A:pandas.tests.test_expressions.self.mixed2->DataFrame({'A': _frame2['A'].copy(), 'B': _frame2['B'].astype('float32'), 'C': _frame2['C'].astype('int64'), 'D': _frame2['D'].astype('int32')}).copy()
A:pandas.tests.test_expressions.op->getattr(operator, opname)
A:pandas.tests.test_expressions.expected->op_func(other, axis=axis)
A:pandas.tests.test_expressions.result->op_func(other, axis=axis)
A:pandas.tests.test_expressions.used_numexpr->pandas.core.computation.expressions.get_test_result()
A:pandas.tests.test_expressions.c->numpy.empty(df.shape, dtype=np.bool_)
A:pandas.tests.test_expressions.df->DataFrame({'a': np.random.rand(n) > 0.5, 'b': np.random.rand(n) > 0.5})
A:pandas.tests.test_expressions.f->getattr(operator, opname)
A:pandas.tests.test_expressions.err_msg->re.escape(msg)
A:pandas.tests.test_expressions.fe->getattr(operator, sub_funcs[subs[op_str]])
A:pandas.tests.test_expressions.r->f(df, True)
A:pandas.tests.test_expressions.e->fe(df, True)
A:pandas.tests.test_expressions.op_func->getattr(df, arith)
pandas.tests.test_expressions.TestExpressions
pandas.tests.test_expressions.TestExpressions.run_arithmetic(self,df,other)
pandas.tests.test_expressions.TestExpressions.run_binary(self,df,other)
pandas.tests.test_expressions.TestExpressions.run_frame(self,df,other,run_binary=True)
pandas.tests.test_expressions.TestExpressions.setup_method(self,method)
pandas.tests.test_expressions.TestExpressions.teardown_method(self,method)
pandas.tests.test_expressions.TestExpressions.test_arithmetic(self,df)
pandas.tests.test_expressions.TestExpressions.test_binary_ops(self,opname,op_str,left,right)
pandas.tests.test_expressions.TestExpressions.test_bool_ops_column_name_dtype(self,test_input,expected)
pandas.tests.test_expressions.TestExpressions.test_bool_ops_raise_on_arithmetic(self,op_str,opname)
pandas.tests.test_expressions.TestExpressions.test_bool_ops_warn_on_arithmetic(self,op_str,opname)
pandas.tests.test_expressions.TestExpressions.test_comparison_ops(self,opname,op_str,left,right)
pandas.tests.test_expressions.TestExpressions.test_frame_series_axis(self,axis,arith)
pandas.tests.test_expressions.TestExpressions.test_invalid(self)
pandas.tests.test_expressions.TestExpressions.test_where(self,cond,df)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/test_sorting.py----------------------------------------
A:pandas.tests.test_sorting.B->numpy.concatenate((np.arange(1000), np.arange(1000), np.arange(500)))
A:pandas.tests.test_sorting.A->numpy.arange(2500)
A:pandas.tests.test_sorting.df->df.sort_values(df.columns.tolist()).sort_values(df.columns.tolist())
A:pandas.tests.test_sorting.lg->df.sort_values(df.columns.tolist()).sort_values(df.columns.tolist()).groupby(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'])
A:pandas.tests.test_sorting.rg->df.sort_values(df.columns.tolist()).sort_values(df.columns.tolist()).groupby(['H', 'G', 'F', 'E', 'D', 'C', 'B', 'A'])
A:pandas.tests.test_sorting.(exp_index, _)->right.iloc[i].copy().index.sortlevel(0)
A:pandas.tests.test_sorting.tups->pandas.core.common.asarray_tuplesafe(tups)
A:pandas.tests.test_sorting.values->numpy.array(['b', 1, 0, 'a'], dtype=object)
A:pandas.tests.test_sorting.data->pandas.DataFrame.from_dict({'a': values, 'b': values, 'c': values, 'd': values})
A:pandas.tests.test_sorting.grouped->pandas.DataFrame.from_dict({'a': values, 'b': values, 'c': values, 'd': values}).groupby(['a', 'b', 'c', 'd'])
A:pandas.tests.test_sorting.arr->numpy.array([1, 2, datetime.now(), 0, 3], dtype=object)
A:pandas.tests.test_sorting.i->numpy.random.permutation(len(right))
A:pandas.tests.test_sorting.gr->df.sort_values(df.columns.tolist()).sort_values(df.columns.tolist()).groupby(list('abcde'))
A:pandas.tests.test_sorting.mi->pandas.MultiIndex.from_tuples(jim.keys(), names=list('abcde'))
A:pandas.tests.test_sorting.res->merge(left, right, how=how, sort=sort)
A:pandas.tests.test_sorting.result->safe_sort(a)
A:pandas.tests.test_sorting.items2->numpy.array(items, dtype='O')
A:pandas.tests.test_sorting.df1->DataFrame(np.random.randn(1000, 7), columns=list('ABCDEF') + ['G1'])
A:pandas.tests.test_sorting.df2->DataFrame(np.random.randn(1000, 7), columns=list('ABCDEF') + ['G2'])
A:pandas.tests.test_sorting.left->left.iloc[i].copy().iloc[i].copy()
A:pandas.tests.test_sorting.left['left']->numpy.random.randn(len(left))
A:pandas.tests.test_sorting.right->right.iloc[i].copy().iloc[i].copy()
A:pandas.tests.test_sorting.right.index->numpy.arange(len(right))
A:pandas.tests.test_sorting.out->align(out)
A:pandas.tests.test_sorting.out.index->numpy.arange(len(out))
A:pandas.tests.test_sorting.right['right']->numpy.random.randn(len(right))
A:pandas.tests.test_sorting.left.index->numpy.arange(len(left))
A:pandas.tests.test_sorting.rval->rdict.get(k, [np.nan])
A:pandas.tests.test_sorting.df.index->numpy.arange(len(df))
A:pandas.tests.test_sorting.kcols->list('ABCDEFG')
A:pandas.tests.test_sorting.frame->align(out[mask].copy())
A:pandas.tests.test_sorting.group_index->get_group_index(codes_list, shape, sort=True, xnull=True)
A:pandas.tests.test_sorting.codes_list2->decons_group_index(group_index, shape)
A:pandas.tests.test_sorting.expected->array([1, 2, 3], dtype='Int64')
A:pandas.tests.test_sorting.(result, result_codes)->safe_sort(values, codes)
A:pandas.tests.test_sorting.expected_codes->numpy.array([0, 2, na_sentinel, 1], dtype=np.intp)
A:pandas.tests.test_sorting.a->array([1, 3, 2], dtype='Int64')
A:pandas.tests.test_sorting.(result, codes)->safe_sort(a, [0, 1, na_sentinel, 2], na_sentinel=na_sentinel, verify=verify)
A:pandas.tests.test_sorting.expected_values->array([1, 2, 3], dtype='Int64')
pandas.tests.test_sorting.TestMerge
pandas.tests.test_sorting.TestMerge.test_int64_overflow_issues(self)
pandas.tests.test_sorting.TestSafeSort
pandas.tests.test_sorting.TestSafeSort.test_basic_sort(self)
pandas.tests.test_sorting.TestSafeSort.test_codes(self,verify)
pandas.tests.test_sorting.TestSafeSort.test_codes_out_of_bound(self,na_sentinel)
pandas.tests.test_sorting.TestSafeSort.test_exceptions(self)
pandas.tests.test_sorting.TestSafeSort.test_extension_array(self)
pandas.tests.test_sorting.TestSafeSort.test_extension_array_codes(self,verify,na_sentinel)
pandas.tests.test_sorting.TestSafeSort.test_mixed_integer(self)
pandas.tests.test_sorting.TestSafeSort.test_mixed_integer_from_list(self)
pandas.tests.test_sorting.TestSafeSort.test_unsortable(self)
pandas.tests.test_sorting.TestSorting
pandas.tests.test_sorting.TestSorting.test_int64_overflow(self)
pandas.tests.test_sorting.TestSorting.test_int64_overflow_moar(self)
pandas.tests.test_sorting.TestSorting.test_lexsort_indexer(self)
pandas.tests.test_sorting.TestSorting.test_nargsort(self)
pandas.tests.test_sorting.test_decons()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/test_join.py----------------------------------------
A:pandas.tests.test_join.left->numpy.array([0, 1, 0, 1, 1, 2, 3, 1, 0, 2, 1, 2, 0, 1, 1, 2, 3, 2, 3, 2, 1, 1, 3, 0, 3, 2, 3, 0, 0, 2, 3, 2, 0, 3, 1, 3, 0, 1, 3, 0, 0, 1, 0, 3, 1, 0, 1, 0, 1, 1, 0, 2, 2, 2, 2, 2, 0, 3, 1, 2, 0, 0, 3, 1, 3, 2, 2, 0, 1, 3, 0, 2, 3, 2, 3, 3, 2, 3, 3, 1, 3, 2, 0, 0, 3, 1, 1, 1, 0, 2, 3, 3, 1, 2, 0, 3, 1, 2, 0, 2], dtype=np.int64)
A:pandas.tests.test_join.right->numpy.array([3, 1], dtype=np.int64)
A:pandas.tests.test_join.empty->numpy.array([], dtype=dtype)
A:pandas.tests.test_join.(result, lindexer, rindexer)->indexer(left, empty)
A:pandas.tests.test_join.exp->numpy.array([-1, -1, -1], dtype=np.int64)
A:pandas.tests.test_join.a->DataFrame(a)
A:pandas.tests.test_join.b->numpy.array([5], dtype=np.int64)
A:pandas.tests.test_join.result->DataFrame(a).join(b, on=['Cat1', 'Int1'])
A:pandas.tests.test_join.expected->expected.drop(['Cat', 'Int'], axis=1).drop(['Cat', 'Int'], axis=1)
A:pandas.tests.test_join.(lidx, ridx)->pandas._libs.join.left_outer_join(left, right, max_groups, sort=False)
A:pandas.tests.test_join.exp_lidx->numpy.array([0, 0, 1, 2], dtype=np.int64)
A:pandas.tests.test_join.(index, ares, bres)->pandas._libs.join.left_join_indexer(a, b)
A:pandas.tests.test_join.index_exp->numpy.array([0, 1, 2, 3, 4, 5, 7, 9], dtype=np.int64)
A:pandas.tests.test_join.aexp->numpy.array([0, 1, 2, 3, 4], dtype=np.int64)
A:pandas.tests.test_join.bexp->numpy.array([-1, -1, 1, -1, 2], dtype=np.int64)
A:pandas.tests.test_join.idx->Index([1, 1, 2, 5])
A:pandas.tests.test_join.idx2->Index([1, 2, 5, 7, 9])
A:pandas.tests.test_join.(res, lidx, ridx)->pandas._libs.join.inner_join_indexer(idx2.values, idx.values)
A:pandas.tests.test_join.exp_res->numpy.array([1, 1, 2, 5], dtype=np.int64)
A:pandas.tests.test_join.exp_ridx->numpy.array([0, 1, 2, 3], dtype=np.int64)
pandas.tests.test_join.TestIndexer
pandas.tests.test_join.TestIndexer.test_outer_join_indexer(self,dtype)
pandas.tests.test_join.test_inner_join_indexer()
pandas.tests.test_join.test_inner_join_indexer2()
pandas.tests.test_join.test_left_join_indexer()
pandas.tests.test_join.test_left_join_indexer2()
pandas.tests.test_join.test_left_join_indexer_unique()
pandas.tests.test_join.test_left_outer_join_bug()
pandas.tests.test_join.test_merge_join_categorical_multiindex()
pandas.tests.test_join.test_outer_join_indexer()
pandas.tests.test_join.test_outer_join_indexer2()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/test_strings.py----------------------------------------
A:pandas.tests.test_strings.(ids, _, _)->zip(*_any_string_method)
A:pandas.tests.test_strings.(ids, _)->zip(*_any_allowed_skipna_inferred_dtype)
A:pandas.tests.test_strings.values->Series([to_type([to_type([1, 2])])])
A:pandas.tests.test_strings.mi->pandas.MultiIndex.from_arrays([['a', 'b', 'c']])
A:pandas.tests.test_strings.t->Series(['d', 'a', 'e', 'b'], index=[3, 0, 4, 1])
A:pandas.tests.test_strings.method->getattr(t.str, method_name)
A:pandas.tests.test_strings.s->Series(['a', None, '1'], dtype='string')
A:pandas.tests.test_strings.c->Series(['a', None, '1'], dtype='string').astype('category')
A:pandas.tests.test_strings.result->result.astype(object).astype(object)
A:pandas.tests.test_strings.expected->Series(['a1', 'b2', 'cc'], dtype='object').str.extract(pat, expand=False)
A:pandas.tests.test_strings.ds->Series([slice(None, randint(10), randint(10, 20)) for _ in range(4)])
A:pandas.tests.test_strings.other->other(values)
A:pandas.tests.test_strings.z->Series(['1', '2', '3'])
A:pandas.tests.test_strings.d->concat([t, t], axis=1)
A:pandas.tests.test_strings.e->DataFrame(e_list, columns=['letter', 'digit'])
A:pandas.tests.test_strings.u->numpy.array(['A', 'B', 'C', 'D'])
A:pandas.tests.test_strings.(sa, ta)->Series(['a', None, '1'], dtype='string').align(t, join=join)
A:pandas.tests.test_strings.sa->Index(sa)
A:pandas.tests.test_strings.expected_outer->Series(['aaA', 'bbB', 'c-C', 'ddD', '-e-'])
A:pandas.tests.test_strings.df->df.reset_index().reset_index()
A:pandas.tests.test_strings.str_year->df.reset_index().reset_index().year.astype('str')
A:pandas.tests.test_strings.str_month->df.reset_index().reset_index().month.astype('str')
A:pandas.tests.test_strings.str_both->df.reset_index().reset_index().year.astype('str').str.cat(str_month, sep=' ')
A:pandas.tests.test_strings.str_multiple->df.reset_index().reset_index().year.astype('str').str.cat([str_month, str_month], sep=' ')
A:pandas.tests.test_strings.exp->Series([b'a', b'b', b'a\x9d']).map(f)
A:pandas.tests.test_strings.mixed->Series(['a_b_c', np.nan, 'c_d_e', True, datetime.today(), None, 1, 2.0])
A:pandas.tests.test_strings.rs->Series(mixed).str.split('_').str.get(1)
A:pandas.tests.test_strings.xp->Series(['b', np.nan, 'd', np.nan, np.nan, np.nan, np.nan, np.nan])
A:pandas.tests.test_strings.pat->re.compile('[a-z][A-Z]{2}')
A:pandas.tests.test_strings.compiled_pat->re.compile('[a-z][A-Z]{2}')
A:pandas.tests.test_strings.res->pandas.MultiIndex.from_tuples([('a', 'b'), ('a', 'b')]).str.partition(',', expand=False)
A:pandas.tests.test_strings.result_unspecified->Series([to_type([to_type([1, 2])])]).str.extract('.*(BAD[_]+).*')
A:pandas.tests.test_strings.result_true->Series([to_type([to_type([1, 2])])]).str.extract('.*(BAD[_]+).*', expand=True)
A:pandas.tests.test_strings.idx->pandas.MultiIndex.from_tuples([('a', 'b'), ('a', 'b')])
A:pandas.tests.test_strings.s_or_idx->klass(['A1', 'A2'])
A:pandas.tests.test_strings.r->Series(['a', None, '1'], dtype='string').index.str.extract('(?P<letter>[A-Z])(?P<digit>[0-9])', expand=True)
A:pandas.tests.test_strings.result_df->klass(['A1', 'A2']).str.extract('(?P<uno>A)\\d', expand=True)
A:pandas.tests.test_strings.S->Series(subject_list)
A:pandas.tests.test_strings.expected_index->pandas.MultiIndex.from_tuples([(1, 0), (2, 0), (2, 1)], names=(None, 'match'))
A:pandas.tests.test_strings.expected_df->DataFrame([('A', '1'), (np.nan, '3'), (np.nan, '2')], expected_index, columns=[0, 'number'])
A:pandas.tests.test_strings.computed_df->Series(subject_list).str.extractall(pattern)
A:pandas.tests.test_strings.series_index->pandas.MultiIndex.from_tuples([('single', 'Dave'), ('single', 'Toby'), ('single', 'Maude'), ('multiple', 'robAndSteve'), ('multiple', 'abcdef'), ('none', 'missing'), ('none', 'empty')])
A:pandas.tests.test_strings.Si->Series(subject_list, series_index)
A:pandas.tests.test_strings.Sn->Series(subject_list, series_index)
A:pandas.tests.test_strings.i->pandas.MultiIndex.from_tuples([('A', 'first'), ('B', 'second'), ('C', 'third')], names=('capital', 'ordinal'))
A:pandas.tests.test_strings.n->len(data)
A:pandas.tests.test_strings.ei->pandas.MultiIndex.from_tuples([], names=names + ('match',))
A:pandas.tests.test_strings.exp_idx->pandas.MultiIndex.from_tuples([('XX', 0), ('XX', 1), ('yy', 0)], names=['idx_name', 'match'])
A:pandas.tests.test_strings.extract_two_noname->Series(['a', None, '1'], dtype='string').str.extract(pattern_two_noname, expand=True)
A:pandas.tests.test_strings.has_multi_index->Series(['a', None, '1'], dtype='string').str.extractall(pattern_one_noname)
A:pandas.tests.test_strings.no_multi_index->Series(['a', None, '1'], dtype='string').str.extractall(pattern_one_noname).xs(0, level='match')
A:pandas.tests.test_strings.extract_two_named->Series(['a', None, '1'], dtype='string').str.extract(pattern_two_named, expand=True)
A:pandas.tests.test_strings.extract_one_named->Series(['a', None, '1'], dtype='string').str.extract(pattern_one_named, expand=True)
A:pandas.tests.test_strings.extract_one_noname->Series(['a', None, '1'], dtype='string').str.extract(pattern_one_noname, expand=True)
A:pandas.tests.test_strings.has_match_index->Series(['a', None, '1'], dtype='string').str.extractall(pattern_one_noname)
A:pandas.tests.test_strings.no_match_index->Series(['a', None, '1'], dtype='string').str.extractall(pattern_one_noname).xs(0, level='match')
A:pandas.tests.test_strings.empty_strempty->Series(dtype=object)
A:pandas.tests.test_strings.empty_int->Series(dtype='int64')
A:pandas.tests.test_strings.empty_bool->Series(dtype=bool)
A:pandas.tests.test_strings.empty_bytes->Series(dtype=object)
A:pandas.tests.test_strings.table->str.maketrans('abc', 'cde')
A:pandas.tests.test_strings.empty->Series(dtype=str)
A:pandas.tests.test_strings.empty_df->DataFrame()
A:pandas.tests.test_strings.str_s->Series(values)
A:pandas.tests.test_strings.data->Series(data)
A:pandas.tests.test_strings.base->Series(['a', 'b', 'aä'])
A:pandas.tests.test_strings.series->Series(['a', 'b', 'aä']).str.encode('utf-8')
A:pandas.tests.test_strings.encodeBase->Series(['a', 'b', 'a\x9d'])
A:pandas.tests.test_strings.decodeBase->Series([b'a', b'b', b'a\x9d'])
A:pandas.tests.test_strings.lhs->Series(np.array(list('abc'), 'S1').astype(object))
A:pandas.tests.test_strings.rhs->Series(np.array(list('def'), 'S1').astype(object))
A:pandas.tests.test_strings.a->Series(['a1', 'b2', 'cc'], dtype='string')
A:pandas.tests.test_strings.b->Series(['a1', 'b2', 'cc'], dtype='object')
A:pandas.tests.test_strings.result[columns]->result[columns].astype(object).astype(object)
pandas.tests.test_strings.TestStringMethods
pandas.tests.test_strings.TestStringMethods.test_api(self)
pandas.tests.test_strings.TestStringMethods.test_api_for_categorical(self,any_string_method)
pandas.tests.test_strings.TestStringMethods.test_api_mi_raises(self)
pandas.tests.test_strings.TestStringMethods.test_api_per_dtype(self,index_or_series,dtype,any_skipna_inferred_dtype)
pandas.tests.test_strings.TestStringMethods.test_api_per_method(self,index_or_series,dtype,any_allowed_skipna_inferred_dtype,any_string_method)
pandas.tests.test_strings.TestStringMethods.test_capitalize(self)
pandas.tests.test_strings.TestStringMethods.test_casefold(self)
pandas.tests.test_strings.TestStringMethods.test_casemethods(self)
pandas.tests.test_strings.TestStringMethods.test_cat_on_filtered_index(self)
pandas.tests.test_strings.TestStringMethods.test_center_ljust_rjust(self)
pandas.tests.test_strings.TestStringMethods.test_center_ljust_rjust_fillchar(self)
pandas.tests.test_strings.TestStringMethods.test_contains(self)
pandas.tests.test_strings.TestStringMethods.test_contains_for_object_category(self)
pandas.tests.test_strings.TestStringMethods.test_contains_moar(self)
pandas.tests.test_strings.TestStringMethods.test_contains_nan(self)
pandas.tests.test_strings.TestStringMethods.test_count(self)
pandas.tests.test_strings.TestStringMethods.test_empty_str_methods(self)
pandas.tests.test_strings.TestStringMethods.test_empty_str_methods_to_frame(self)
pandas.tests.test_strings.TestStringMethods.test_encode_decode(self)
pandas.tests.test_strings.TestStringMethods.test_encode_decode_errors(self)
pandas.tests.test_strings.TestStringMethods.test_endswith(self)
pandas.tests.test_strings.TestStringMethods.test_extract_expand_False(self)
pandas.tests.test_strings.TestStringMethods.test_extract_expand_None(self)
pandas.tests.test_strings.TestStringMethods.test_extract_expand_True(self)
pandas.tests.test_strings.TestStringMethods.test_extract_expand_unspecified(self)
pandas.tests.test_strings.TestStringMethods.test_extract_index_one_two_groups(self)
pandas.tests.test_strings.TestStringMethods.test_extract_optional_groups(self)
pandas.tests.test_strings.TestStringMethods.test_extract_series(self)
pandas.tests.test_strings.TestStringMethods.test_extract_single_group_returns_frame(self)
pandas.tests.test_strings.TestStringMethods.test_extractall(self)
pandas.tests.test_strings.TestStringMethods.test_extractall_errors(self)
pandas.tests.test_strings.TestStringMethods.test_extractall_no_matches(self,data,names)
pandas.tests.test_strings.TestStringMethods.test_extractall_same_as_extract(self)
pandas.tests.test_strings.TestStringMethods.test_extractall_same_as_extract_subject_index(self)
pandas.tests.test_strings.TestStringMethods.test_extractall_single_group(self)
pandas.tests.test_strings.TestStringMethods.test_extractall_single_group_with_quantifier(self)
pandas.tests.test_strings.TestStringMethods.test_extractall_stringindex(self)
pandas.tests.test_strings.TestStringMethods.test_find(self)
pandas.tests.test_strings.TestStringMethods.test_find_nan(self)
pandas.tests.test_strings.TestStringMethods.test_findall(self)
pandas.tests.test_strings.TestStringMethods.test_get(self)
pandas.tests.test_strings.TestStringMethods.test_get_complex(self)
pandas.tests.test_strings.TestStringMethods.test_get_complex_nested(self,to_type)
pandas.tests.test_strings.TestStringMethods.test_get_dummies(self)
pandas.tests.test_strings.TestStringMethods.test_get_dummies_with_name_dummy(self)
pandas.tests.test_strings.TestStringMethods.test_index(self)
pandas.tests.test_strings.TestStringMethods.test_index_str_accessor_visibility(self)
pandas.tests.test_strings.TestStringMethods.test_ismethods(self)
pandas.tests.test_strings.TestStringMethods.test_isnumeric(self)
pandas.tests.test_strings.TestStringMethods.test_iter(self)
pandas.tests.test_strings.TestStringMethods.test_iter_empty(self)
pandas.tests.test_strings.TestStringMethods.test_iter_object_try_string(self)
pandas.tests.test_strings.TestStringMethods.test_iter_single_element(self)
pandas.tests.test_strings.TestStringMethods.test_join(self)
pandas.tests.test_strings.TestStringMethods.test_len(self)
pandas.tests.test_strings.TestStringMethods.test_lower_upper(self)
pandas.tests.test_strings.TestStringMethods.test_match(self)
pandas.tests.test_strings.TestStringMethods.test_match_findall_flags(self)
pandas.tests.test_strings.TestStringMethods.test_method_on_bytes(self)
pandas.tests.test_strings.TestStringMethods.test_normalize(self)
pandas.tests.test_strings.TestStringMethods.test_pad(self)
pandas.tests.test_strings.TestStringMethods.test_pad_fillchar(self)
pandas.tests.test_strings.TestStringMethods.test_pad_width(self,f)
pandas.tests.test_strings.TestStringMethods.test_partition_index(self)
pandas.tests.test_strings.TestStringMethods.test_partition_sep_kwarg(self)
pandas.tests.test_strings.TestStringMethods.test_partition_series(self)
pandas.tests.test_strings.TestStringMethods.test_partition_to_dataframe(self)
pandas.tests.test_strings.TestStringMethods.test_partition_with_name(self)
pandas.tests.test_strings.TestStringMethods.test_pipe_failures(self)
pandas.tests.test_strings.TestStringMethods.test_repeat(self)
pandas.tests.test_strings.TestStringMethods.test_repeat_with_null(self)
pandas.tests.test_strings.TestStringMethods.test_replace(self)
pandas.tests.test_strings.TestStringMethods.test_replace_callable(self)
pandas.tests.test_strings.TestStringMethods.test_replace_compiled_regex(self)
pandas.tests.test_strings.TestStringMethods.test_replace_literal(self)
pandas.tests.test_strings.TestStringMethods.test_replace_moar(self)
pandas.tests.test_strings.TestStringMethods.test_rsplit(self)
pandas.tests.test_strings.TestStringMethods.test_rsplit_to_dataframe_expand(self)
pandas.tests.test_strings.TestStringMethods.test_rsplit_to_multiindex_expand(self)
pandas.tests.test_strings.TestStringMethods.test_slice(self,start,stop,step,expected)
pandas.tests.test_strings.TestStringMethods.test_slice_replace(self)
pandas.tests.test_strings.TestStringMethods.test_split(self)
pandas.tests.test_strings.TestStringMethods.test_split_blank_string(self)
pandas.tests.test_strings.TestStringMethods.test_split_maxsplit(self)
pandas.tests.test_strings.TestStringMethods.test_split_nan_expand(self)
pandas.tests.test_strings.TestStringMethods.test_split_no_pat_with_nonzero_n(self)
pandas.tests.test_strings.TestStringMethods.test_split_noargs(self)
pandas.tests.test_strings.TestStringMethods.test_split_to_dataframe(self)
pandas.tests.test_strings.TestStringMethods.test_split_to_multiindex_expand(self)
pandas.tests.test_strings.TestStringMethods.test_split_with_name(self)
pandas.tests.test_strings.TestStringMethods.test_startswith(self)
pandas.tests.test_strings.TestStringMethods.test_str_accessor_no_new_attributes(self)
pandas.tests.test_strings.TestStringMethods.test_str_cat(self,index_or_series)
pandas.tests.test_strings.TestStringMethods.test_str_cat_align_indexed(self,index_or_series,join)
pandas.tests.test_strings.TestStringMethods.test_str_cat_align_mixed_inputs(self,join)
pandas.tests.test_strings.TestStringMethods.test_str_cat_all_na(self,index_or_series,other)
pandas.tests.test_strings.TestStringMethods.test_str_cat_categorical(self,index_or_series,dtype_caller,dtype_target,sep)
pandas.tests.test_strings.TestStringMethods.test_str_cat_mixed_inputs(self,index_or_series)
pandas.tests.test_strings.TestStringMethods.test_str_cat_name(self,index_or_series,other)
pandas.tests.test_strings.TestStringMethods.test_str_cat_raises_intuitive_error(self,index_or_series)
pandas.tests.test_strings.TestStringMethods.test_str_cat_special_cases(self)
pandas.tests.test_strings.TestStringMethods.test_str_cat_wrong_dtype_raises(self,box,data)
pandas.tests.test_strings.TestStringMethods.test_string_slice_get_syntax(self)
pandas.tests.test_strings.TestStringMethods.test_string_slice_out_of_bounds(self)
pandas.tests.test_strings.TestStringMethods.test_strip_lstrip_rstrip(self)
pandas.tests.test_strings.TestStringMethods.test_strip_lstrip_rstrip_args(self)
pandas.tests.test_strings.TestStringMethods.test_strip_lstrip_rstrip_mixed(self)
pandas.tests.test_strings.TestStringMethods.test_swapcase(self)
pandas.tests.test_strings.TestStringMethods.test_title(self)
pandas.tests.test_strings.TestStringMethods.test_translate(self)
pandas.tests.test_strings.TestStringMethods.test_wrap(self)
pandas.tests.test_strings.TestStringMethods.test_zfill(self)
pandas.tests.test_strings.any_allowed_skipna_inferred_dtype(request)
pandas.tests.test_strings.any_string_method(request)
pandas.tests.test_strings.assert_series_or_index_equal(left,right)
pandas.tests.test_strings.test_string_array(any_string_method)
pandas.tests.test_strings.test_string_array_boolean_array(method,expected)
pandas.tests.test_strings.test_string_array_extract()
pandas.tests.test_strings.test_string_array_numeric_integer_array(method,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/test_algos.py----------------------------------------
A:pandas.tests.test_algos.(codes, uniques)->pandas.core.algorithms.factorize(data, sort=sort, na_sentinel=na_sentinel)
A:pandas.tests.test_algos.exp->Series(['2 min', '1 day'], dtype='timedelta64[ns]')
A:pandas.tests.test_algos.x->Series([v1, v2, v1, v1, v2, v2, v1])
A:pandas.tests.test_algos.v1->pandas.to_timedelta('1 day 1 min')
A:pandas.tests.test_algos.v2->pandas.to_timedelta('1 day')
A:pandas.tests.test_algos.key->numpy.array([0, np.nan, 1], dtype='O')
A:pandas.tests.test_algos.rizer->pandas._libs.hashtable.Factorizer(len(key))
A:pandas.tests.test_algos.ids->pandas._libs.hashtable.Factorizer(len(key)).factorize(key, sort=False, na_sentinel=na_sentinel)
A:pandas.tests.test_algos.expected->expected.astype(np.int64).astype(np.int64)
A:pandas.tests.test_algos.expected_uniques_array->pandas.core.common.asarray_tuplesafe(expected_uniques, dtype=object)
A:pandas.tests.test_algos.x17->numpy.array([complex(i) for i in range(17)], dtype=object)
A:pandas.tests.test_algos.data->numpy.array([2 ** 63, 1, 2 ** 63], dtype=np.uint64)
A:pandas.tests.test_algos.expected_codes->numpy.array([0, 1, na_sentinel, 0], dtype=np.intp)
A:pandas.tests.test_algos.expected_uniques->pandas.core.algorithms.safe_sort(uniques)
A:pandas.tests.test_algos.arr->numpy.arange(100, dtype=np.intp)
A:pandas.tests.test_algos.result->pandas._libs.algos.ensure_platform_int(arr)
A:pandas.tests.test_algos.mindex->mindex.repeat(2).repeat(2)
A:pandas.tests.test_algos.dt_index->pandas.to_datetime(['2015-01-03T00:00:00.000000000', '2015-01-01T00:00:00.000000000', '2015-01-01T00:00:00.000000000'])
A:pandas.tests.test_algos.s->Series([1, 2 ** 63], dtype=np.uint64)
A:pandas.tests.test_algos.a->numpy.random.randint(0, 1000, 100).astype(np.int64)
A:pandas.tests.test_algos.td_index->pandas.to_timedelta([31200, 45678, 31200, 10000, 45678])
A:pandas.tests.test_algos.expected_o->Categorical(list('bac'), categories=list('abc'), ordered=True)
A:pandas.tests.test_algos.c->Categorical([1, 1, 2, 3, 3])
A:pandas.tests.test_algos.ci->CategoricalIndex(Categorical(list('baabc'), categories=list('bac')))
A:pandas.tests.test_algos.vals->numpy.array(np.random.randn(1000), dtype=dtype)
A:pandas.tests.test_algos.Sd->Series(Categorical(1).from_codes(vals, cats))
A:pandas.tests.test_algos.St->Series(Categorical(1).from_codes(np.array([0, 1]), cats))
A:pandas.tests.test_algos.comps->numpy.array(['nan', np.nan * 1j, float('nan')], dtype=np.object)
A:pandas.tests.test_algos.lookup1->numpy.array([NAN1], dtype=np.float64)
A:pandas.tests.test_algos.lookup2->numpy.array([NAN2], dtype=np.float64)
A:pandas.tests.test_algos.factor->cut(arr, 4)
A:pandas.tests.test_algos.index->pandas.IntervalIndex.from_breaks(breaks).astype(CDT(ordered=True))
A:pandas.tests.test_algos.td->Series([np.timedelta64(10000), pd.NaT], dtype='timedelta64[ns]')
A:pandas.tests.test_algos.dt->pandas.to_datetime(['NaT', '2014-01-01'])
A:pandas.tests.test_algos.vc->pandas.core.algorithms.value_counts(s)
A:pandas.tests.test_algos.vc_with_na->pandas.core.algorithms.value_counts(s, dropna=False)
A:pandas.tests.test_algos.exp_dt->Series({Timestamp('2014-01-01 00:00:00'): 1})
A:pandas.tests.test_algos.res->pandas.to_datetime(Series(['2362-01-01', np.nan]), errors='ignore')
A:pandas.tests.test_algos.exp_index->Index([datetime(3000, 1, 1), datetime(5000, 1, 1), datetime(6000, 1, 1)], dtype=object)
A:pandas.tests.test_algos.expected.index->expected.astype(np.int64).astype(np.int64).index.as_ordered()
A:pandas.tests.test_algos.s_typed->Series([1, 2 ** 63], dtype=np.uint64).astype(t)
A:pandas.tests.test_algos.keys->numpy.empty(8, dtype=object)
A:pandas.tests.test_algos.exp_first->numpy.array([False, False, True, False, False, True, False, True, True, False])
A:pandas.tests.test_algos.exp_last->numpy.array([True, True, True, True, False, False, False, False, False, False])
A:pandas.tests.test_algos.res_first->Series([1, 2 ** 63], dtype=np.uint64).duplicated(keep='first')
A:pandas.tests.test_algos.res_last->Series([1, 2 ** 63], dtype=np.uint64).duplicated(keep='last')
A:pandas.tests.test_algos.res_false->Series([1, 2 ** 63], dtype=np.uint64).duplicated(keep=False)
A:pandas.tests.test_algos.prng->RandomState(1234)
A:pandas.tests.test_algos.out->numpy.array([[np.nan]], dtype=self.dtype)
A:pandas.tests.test_algos.counts->numpy.array([0], dtype='int64')
A:pandas.tests.test_algos.labels->numpy.zeros(10 ** 6, dtype='int64')
A:pandas.tests.test_algos.expected_out->numpy.vstack([values[:, 0].reshape(5, 2, order='F').std(ddof=1, axis=1) ** 2, np.nan * np.ones(5)]).T.astype(self.dtype)
A:pandas.tests.test_algos.algo->staticmethod(libgroupby.group_var_float32)
A:pandas.tests.test_algos.values->(prng.rand(10 ** 6) + 10 ** 12).astype(self.dtype)
A:pandas.tests.test_algos.tbl->hashtable(size_hint=size_hint)
A:pandas.tests.test_algos.xs->numpy.array([1, 2, 2 ** 63], dtype=np.uint64)
A:pandas.tests.test_algos.m->pandas._libs.hashtable.UInt64HashTable()
A:pandas.tests.test_algos.htable->htable()
A:pandas.tests.test_algos.uniques->uniques()
A:pandas.tests.test_algos.tmp->uniques().to_array()
A:pandas.tests.test_algos.maker->getattr(tm, 'make' + tm_dtype + 'Index')
A:pandas.tests.test_algos.s_duplicated->Series([1, 2 ** 63], dtype=np.uint64).sample(frac=3, replace=True).reset_index(drop=True)
A:pandas.tests.test_algos.result_unique->htable().unique(s_duplicated.values)
A:pandas.tests.test_algos.(result_unique, result_inverse)->htable().factorize(s_duplicated.values)
A:pandas.tests.test_algos.left->pandas._libs.hashtable.unique_label_indices(a)
A:pandas.tests.test_algos.old->Index([5, 10])
A:pandas.tests.test_algos.new->Index(np.arange(5))
A:pandas.tests.test_algos.filler->pandas._libs.algos.pad['int64_t'](old.values, new.values)
A:pandas.tests.test_algos.expect_filler->numpy.array([-1, -1, -1, -1, -1], dtype=np.int64)
A:pandas.tests.test_algos.b->numpy.random.randint(0, 1000, 100).astype(np.int64)
A:pandas.tests.test_algos.Inf->pandas._libs.algos.Infinity()
A:pandas.tests.test_algos.NegInf->pandas._libs.algos.NegInfinity()
A:pandas.tests.test_algos.idx->Index(['1 day', '1 day', '-1 day', '-1 day 2 min', '2 min', '2 min'], dtype='timedelta64[ns]')
pandas.tests.test_algos.GroupVarTestMixin
pandas.tests.test_algos.GroupVarTestMixin.test_group_var_constant(self)
pandas.tests.test_algos.GroupVarTestMixin.test_group_var_generic_1d(self)
pandas.tests.test_algos.GroupVarTestMixin.test_group_var_generic_1d_flat_labels(self)
pandas.tests.test_algos.GroupVarTestMixin.test_group_var_generic_2d_all_finite(self)
pandas.tests.test_algos.GroupVarTestMixin.test_group_var_generic_2d_some_nan(self)
pandas.tests.test_algos.TestDuplicated
pandas.tests.test_algos.TestDuplicated.test_datetime_likes(self)
pandas.tests.test_algos.TestDuplicated.test_dt_likes(self)
pandas.tests.test_algos.TestDuplicated.test_duplicated_with_nas(self)
pandas.tests.test_algos.TestDuplicated.test_numeric_object_likes(self,case)
pandas.tests.test_algos.TestDuplicated.test_unique_index(self)
pandas.tests.test_algos.TestDuplicated.test_unique_tuples(self,arr,unique)
pandas.tests.test_algos.TestFactorize
pandas.tests.test_algos.TestFactorize.test_basic(self)
pandas.tests.test_algos.TestFactorize.test_complex_sorting(self)
pandas.tests.test_algos.TestFactorize.test_datelike(self)
pandas.tests.test_algos.TestFactorize.test_deprecate_order(self)
pandas.tests.test_algos.TestFactorize.test_factorize_na_sentinel(self,sort,na_sentinel,data,uniques)
pandas.tests.test_algos.TestFactorize.test_factorize_nan(self)
pandas.tests.test_algos.TestFactorize.test_factorize_tuple_list(self,data,expected_codes,expected_uniques)
pandas.tests.test_algos.TestFactorize.test_float64_factorize(self,writable)
pandas.tests.test_algos.TestFactorize.test_int64_factorize(self,writable)
pandas.tests.test_algos.TestFactorize.test_mixed(self)
pandas.tests.test_algos.TestFactorize.test_object_factorize(self,writable)
pandas.tests.test_algos.TestFactorize.test_parametrized_factorize_na_value(self,data,na_value)
pandas.tests.test_algos.TestFactorize.test_parametrized_factorize_na_value_default(self,data)
pandas.tests.test_algos.TestFactorize.test_string_factorize(self,writable)
pandas.tests.test_algos.TestFactorize.test_uint64_factorize(self,writable)
pandas.tests.test_algos.TestGroupVarFloat32(GroupVarTestMixin)
pandas.tests.test_algos.TestGroupVarFloat64(GroupVarTestMixin)
pandas.tests.test_algos.TestGroupVarFloat64.test_group_var_large_inputs(self)
pandas.tests.test_algos.TestHashTable
pandas.tests.test_algos.TestHashTable.test_add_different_nans(self)
pandas.tests.test_algos.TestHashTable.test_add_signed_zeros(self)
pandas.tests.test_algos.TestHashTable.test_get_unique(self)
pandas.tests.test_algos.TestHashTable.test_hashtable_factorize(self,htable,tm_dtype,writable)
pandas.tests.test_algos.TestHashTable.test_hashtable_large_sizehint(self,hashtable)
pandas.tests.test_algos.TestHashTable.test_hashtable_unique(self,htable,tm_dtype,writable)
pandas.tests.test_algos.TestHashTable.test_lookup_nan(self,writable)
pandas.tests.test_algos.TestHashTable.test_lookup_overflow(self,writable)
pandas.tests.test_algos.TestHashTable.test_string_hashtable_set_item_signature(self)
pandas.tests.test_algos.TestHashTable.test_vector_resize(self,writable,htable,uniques,dtype,safely_resizes,nvals)
pandas.tests.test_algos.TestIsin
pandas.tests.test_algos.TestIsin.test_basic(self)
pandas.tests.test_algos.TestIsin.test_categorical_from_codes(self)
pandas.tests.test_algos.TestIsin.test_different_nan_objects(self)
pandas.tests.test_algos.TestIsin.test_different_nans(self)
pandas.tests.test_algos.TestIsin.test_different_nans_as_float64(self)
pandas.tests.test_algos.TestIsin.test_empty(self,empty)
pandas.tests.test_algos.TestIsin.test_i8(self)
pandas.tests.test_algos.TestIsin.test_invalid(self)
pandas.tests.test_algos.TestIsin.test_large(self)
pandas.tests.test_algos.TestIsin.test_no_cast(self)
pandas.tests.test_algos.TestIsin.test_same_nan_is_in(self)
pandas.tests.test_algos.TestIsin.test_same_object_is_in(self)
pandas.tests.test_algos.TestMode
pandas.tests.test_algos.TestMode.test_categorical(self)
pandas.tests.test_algos.TestMode.test_datelike_mode(self)
pandas.tests.test_algos.TestMode.test_index(self)
pandas.tests.test_algos.TestMode.test_mixed_dtype(self)
pandas.tests.test_algos.TestMode.test_mode_single(self)
pandas.tests.test_algos.TestMode.test_no_mode(self)
pandas.tests.test_algos.TestMode.test_number_mode(self)
pandas.tests.test_algos.TestMode.test_strobj_mode(self)
pandas.tests.test_algos.TestMode.test_timedelta_mode(self)
pandas.tests.test_algos.TestMode.test_uint64_overflow(self)
pandas.tests.test_algos.TestRank
pandas.tests.test_algos.TestRank.test_basic(self)
pandas.tests.test_algos.TestRank.test_pct_max_many_rows(self,values)
pandas.tests.test_algos.TestRank.test_scipy_compat(self)
pandas.tests.test_algos.TestRank.test_too_many_ndims(self)
pandas.tests.test_algos.TestRank.test_uint64_overflow(self)
pandas.tests.test_algos.TestTseriesUtil
pandas.tests.test_algos.TestTseriesUtil.test_backfill(self)
pandas.tests.test_algos.TestTseriesUtil.test_combineFunc(self)
pandas.tests.test_algos.TestTseriesUtil.test_groupby(self)
pandas.tests.test_algos.TestTseriesUtil.test_groupby_withnull(self)
pandas.tests.test_algos.TestTseriesUtil.test_isna(self)
pandas.tests.test_algos.TestTseriesUtil.test_pad(self)
pandas.tests.test_algos.TestTseriesUtil.test_reindex(self)
pandas.tests.test_algos.TestUnique
pandas.tests.test_algos.TestUnique.test_categorical(self)
pandas.tests.test_algos.TestUnique.test_datetime64_dtype_array_returned(self)
pandas.tests.test_algos.TestUnique.test_datetime64tz_aware(self)
pandas.tests.test_algos.TestUnique.test_datetime_non_ns(self)
pandas.tests.test_algos.TestUnique.test_different_nans(self)
pandas.tests.test_algos.TestUnique.test_do_not_mangle_na_values(self,unique_nulls_fixture,unique_nulls_fixture2)
pandas.tests.test_algos.TestUnique.test_dt64_dtype_array_returned(self)
pandas.tests.test_algos.TestUnique.test_dt64tz_aware(self)
pandas.tests.test_algos.TestUnique.test_dt_non_ns(self)
pandas.tests.test_algos.TestUnique.test_dtype_preservation(self,any_numpy_dtype)
pandas.tests.test_algos.TestUnique.test_first_nan_kept(self)
pandas.tests.test_algos.TestUnique.test_ints(self)
pandas.tests.test_algos.TestUnique.test_nan_in_object_array(self)
pandas.tests.test_algos.TestUnique.test_obj_none_preservation(self)
pandas.tests.test_algos.TestUnique.test_object_refcount_bug(self)
pandas.tests.test_algos.TestUnique.test_objects(self)
pandas.tests.test_algos.TestUnique.test_on_index_object(self)
pandas.tests.test_algos.TestUnique.test_order_of_appearance(self)
pandas.tests.test_algos.TestUnique.test_signed_zero(self)
pandas.tests.test_algos.TestUnique.test_timedelta64_dtype_array_returned(self)
pandas.tests.test_algos.TestUnique.test_timedelta_non_ns(self)
pandas.tests.test_algos.TestUnique.test_tuple_with_strings(self,arg,expected)
pandas.tests.test_algos.TestUnique.test_uint64_overflow(self)
pandas.tests.test_algos.TestValueCounts
pandas.tests.test_algos.TestValueCounts.test_categorical(self)
pandas.tests.test_algos.TestValueCounts.test_categorical_nans(self)
pandas.tests.test_algos.TestValueCounts.test_categorical_zeroes(self)
pandas.tests.test_algos.TestValueCounts.test_dropna(self)
pandas.tests.test_algos.TestValueCounts.test_value_counts(self)
pandas.tests.test_algos.TestValueCounts.test_value_counts_bins(self)
pandas.tests.test_algos.TestValueCounts.test_value_counts_datetime_outofbounds(self)
pandas.tests.test_algos.TestValueCounts.test_value_counts_dt_outofbounds(self)
pandas.tests.test_algos.TestValueCounts.test_value_counts_dtypes(self)
pandas.tests.test_algos.TestValueCounts.test_value_counts_nat(self)
pandas.tests.test_algos.TestValueCounts.test_value_counts_normalized(self)
pandas.tests.test_algos.TestValueCounts.test_value_counts_uint64(self)
pandas.tests.test_algos.test_ensure_platform_int()
pandas.tests.test_algos.test_groupsort_indexer()
pandas.tests.test_algos.test_infinity_against_nan()
pandas.tests.test_algos.test_infinity_sort()
pandas.tests.test_algos.test_int64_add_overflow()
pandas.tests.test_algos.test_is_lexsorted()
pandas.tests.test_algos.test_pad_backfill_object_segfault()
pandas.tests.test_algos.test_quantile()
pandas.tests.test_algos.test_unique_label_indices()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/test_optional_dependency.py----------------------------------------
A:pandas.tests.test_optional_dependency.result->import_optional_dependency('fakemodule')
A:pandas.tests.test_optional_dependency.module->types.ModuleType(name)
pandas.tests.test_optional_dependency.test_bad_version()
pandas.tests.test_optional_dependency.test_import_optional()
pandas.tests.test_optional_dependency.test_no_version_raises()
pandas.tests.test_optional_dependency.test_xlrd_version_fallback()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/test_take.py----------------------------------------
A:pandas.tests.test_take.fill_error->re.compile('Incompatible type for fill_value')
A:pandas.tests.test_take.data->numpy.random.randint(0, 2, (5, 4, 3)).astype(dtype)
A:pandas.tests.test_take.out->numpy.empty((len(indexer), arr.shape[1]), dtype='float32')
A:pandas.tests.test_take.expected->numpy.array([1, 1])
A:pandas.tests.test_take.result->pandas.core.algorithms.take(arr, [0, 0])
A:pandas.tests.test_take.out0->numpy.empty((4, 4, 3), dtype=dtype)
A:pandas.tests.test_take.out1->numpy.empty((5, 4, 3), dtype=dtype)
A:pandas.tests.test_take.expected0->numpy.random.randint(0, 2, (5, 4, 3)).astype(dtype).take(indexer, axis=0)
A:pandas.tests.test_take.expected1->numpy.random.randint(0, 2, (5, 4, 3)).astype(dtype).take(indexer, axis=1)
A:pandas.tests.test_take.out2->numpy.empty((5, 4, 4), dtype=dtype)
A:pandas.tests.test_take.expected2->numpy.random.randint(0, 2, (5, 4, 3)).astype(dtype).take(indexer, axis=2)
A:pandas.tests.test_take.arr->numpy.array([], dtype=np.int64)
A:pandas.tests.test_take.result2->numpy.empty_like(result)
A:pandas.tests.test_take.expected[[2, 4], :]->datetime(2007, 1, 1)
A:pandas.tests.test_take.expected[:, [2, 4]]->datetime(2007, 1, 1)
pandas.tests.test_take.TestExtensionTake
pandas.tests.test_take.TestExtensionTake.test_bounds_check_large(self)
pandas.tests.test_take.TestExtensionTake.test_bounds_check_small(self)
pandas.tests.test_take.TestExtensionTake.test_take_coerces_list(self)
pandas.tests.test_take.TestExtensionTake.test_take_empty(self,allow_fill)
pandas.tests.test_take.TestExtensionTake.test_take_na_empty(self)
pandas.tests.test_take.TestTake
pandas.tests.test_take.TestTake.test_1d_bool(self)
pandas.tests.test_take.TestTake.test_1d_fill_nonna(self,dtype_fill_out_dtype)
pandas.tests.test_take.TestTake.test_1d_other_dtypes(self)
pandas.tests.test_take.TestTake.test_1d_with_out(self,dtype_can_hold_na,writeable)
pandas.tests.test_take.TestTake.test_2d_bool(self)
pandas.tests.test_take.TestTake.test_2d_datetime64(self)
pandas.tests.test_take.TestTake.test_2d_dt64(self)
pandas.tests.test_take.TestTake.test_2d_fill_nonna(self,dtype_fill_out_dtype)
pandas.tests.test_take.TestTake.test_2d_float32(self)
pandas.tests.test_take.TestTake.test_2d_other_dtypes(self)
pandas.tests.test_take.TestTake.test_2d_with_out(self,dtype_can_hold_na,writeable)
pandas.tests.test_take.TestTake.test_3d_fill_nonna(self,dtype_fill_out_dtype)
pandas.tests.test_take.TestTake.test_3d_with_out(self,dtype_can_hold_na)
pandas.tests.test_take.TestTake.test_take_axis_0(self)
pandas.tests.test_take.TestTake.test_take_axis_1(self)
pandas.tests.test_take.dtype_can_hold_na(request)
pandas.tests.test_take.dtype_fill_out_dtype(request)
pandas.tests.test_take.writeable(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/test_register_accessor.py----------------------------------------
A:pandas.tests.test_register_accessor.before->set(dir(obj))
A:pandas.tests.test_register_accessor.after->set(dir(obj))
A:pandas.tests.test_register_accessor.s->pandas.Series([1, 2])
A:pandas.tests.test_register_accessor.msg->str(w[0].message)
pandas.tests.test_register_accessor.MyAccessor(self,obj)
pandas.tests.test_register_accessor.MyAccessor.__init__(self,obj)
pandas.tests.test_register_accessor.MyAccessor.method(self)
pandas.tests.test_register_accessor.MyAccessor.prop(self)
pandas.tests.test_register_accessor.ensure_removed(obj,attr)
pandas.tests.test_register_accessor.test_accessor_works()
pandas.tests.test_register_accessor.test_overwrite_warns()
pandas.tests.test_register_accessor.test_raises_attribute_error()
pandas.tests.test_register_accessor.test_register(obj,registrar)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/test_lib.py----------------------------------------
A:pandas.tests.test_lib.arra->numpy.array(['foo', 'b', np.nan], dtype='object')
A:pandas.tests.test_lib.arr->numpy.array([0, 0, 1, 1, 1, 0, 1], dtype=np.uint8)
A:pandas.tests.test_lib.expected->numpy.array([4, 2, 3, 6, 7], dtype=np.int64)
A:pandas.tests.test_lib.out->pandas._libs.lib.fast_unique_multiple_list_gen(gen, sort=False)
A:pandas.tests.test_lib.target->numpy.arange(100)
A:pandas.tests.test_lib.indices->numpy.array(case, dtype=np.int64)
A:pandas.tests.test_lib.maybe_slice->pandas._libs.lib.maybe_indices_to_slice(indices, len(target))
A:pandas.tests.test_lib.result->pandas._libs.lib.get_reverse_indexer(indexer, 5)
A:pandas.tests.test_lib.indexer->numpy.array([-1, -1, 1, 2, 0, -1, 3, 4], dtype=np.int64)
pandas.tests.test_lib.TestIndexing
pandas.tests.test_lib.TestIndexing.test_get_reverse_indexer(self)
pandas.tests.test_lib.TestIndexing.test_maybe_booleans_to_slice(self)
pandas.tests.test_lib.TestIndexing.test_maybe_indices_to_slice_both_edges(self)
pandas.tests.test_lib.TestIndexing.test_maybe_indices_to_slice_left_edge(self)
pandas.tests.test_lib.TestIndexing.test_maybe_indices_to_slice_middle(self)
pandas.tests.test_lib.TestIndexing.test_maybe_indices_to_slice_right_edge(self)
pandas.tests.test_lib.TestMisc
pandas.tests.test_lib.TestMisc.test_fast_unique_multiple_list_gen_sort(self)
pandas.tests.test_lib.TestMisc.test_max_len_string_array(self)
pandas.tests.test_lib.test_cache_readonly_preserve_docstrings()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/test_errors.py----------------------------------------
A:pandas.tests.test_errors.e->getattr(errors, exc)
pandas.tests.test_errors.Foo
pandas.tests.test_errors.Foo.classmethod(cls)
pandas.tests.test_errors.Foo.method(self)
pandas.tests.test_errors.Foo.property(self)
pandas.tests.test_errors.test_AbstractMethodError_classmethod()
pandas.tests.test_errors.test_catch_oob()
pandas.tests.test_errors.test_exception_importable(exc)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/test_common.py----------------------------------------
A:pandas.tests.test_common.part1->partial(fn)
A:pandas.tests.test_common.part2->partial(part1)
A:pandas.tests.test_common.state->pandas.core.common.random_state(5)
A:pandas.tests.test_common.state2->numpy.random.RandomState(10)
A:pandas.tests.test_common.dd->collections.defaultdict(list)
pandas.tests.test_common.test_all_not_none()
pandas.tests.test_common.test_any_none()
pandas.tests.test_common.test_dict_compat()
pandas.tests.test_common.test_get_callable_name()
pandas.tests.test_common.test_git_version()
pandas.tests.test_common.test_maybe_match_name(left,right,expected)
pandas.tests.test_common.test_random_state()
pandas.tests.test_common.test_standardize_mapping()
pandas.tests.test_common.test_version_tag()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/test_nanops.py----------------------------------------
A:pandas.tests.test_nanops.has_c16->hasattr(np, 'complex128')
A:pandas.tests.test_nanops.self.arr_float->numpy.random.randn(*arr_shape)
A:pandas.tests.test_nanops.self.arr_float1->numpy.random.randn(*arr_shape)
A:pandas.tests.test_nanops.self.arr_int->numpy.random.randint(-10, 10, arr_shape)
A:pandas.tests.test_nanops.self.arr_str->numpy.abs(self.arr_float).astype('S')
A:pandas.tests.test_nanops.self.arr_utf->numpy.abs(self.arr_float).astype('U')
A:pandas.tests.test_nanops.self.arr_date->numpy.random.randint(0, 20000, arr_shape).astype('M8[ns]')
A:pandas.tests.test_nanops.self.arr_tdelta->numpy.random.randint(0, 20000, arr_shape).astype('m8[ns]')
A:pandas.tests.test_nanops.self.arr_nan->numpy.tile(np.nan, arr_shape)
A:pandas.tests.test_nanops.self.arr_float_nan->numpy.vstack([self.arr_float, self.arr_nan])
A:pandas.tests.test_nanops.self.arr_float1_nan->numpy.vstack([self.arr_float1, self.arr_nan])
A:pandas.tests.test_nanops.self.arr_nan_float1->numpy.vstack([self.arr_nan, self.arr_float1])
A:pandas.tests.test_nanops.self.arr_nan_nan->numpy.vstack([self.arr_nan, self.arr_nan])
A:pandas.tests.test_nanops.self.arr_float_inf->numpy.vstack([self.arr_float, self.arr_inf])
A:pandas.tests.test_nanops.self.arr_nan_inf->numpy.vstack([self.arr_nan, self.arr_inf])
A:pandas.tests.test_nanops.self.arr_float_nan_inf->numpy.vstack([self.arr_float, self.arr_nan, self.arr_inf])
A:pandas.tests.test_nanops.self.arr_nan_nan_inf->numpy.vstack([self.arr_nan, self.arr_nan, self.arr_inf])
A:pandas.tests.test_nanops.self.arr_obj->numpy.vstack(objs)
A:pandas.tests.test_nanops.self.arr_complex_nan->numpy.vstack([self.arr_complex, self.arr_nan_nanj])
A:pandas.tests.test_nanops.self.arr_complex_nan_infj->numpy.vstack([self.arr_complex, self.arr_nan_infj])
A:pandas.tests.test_nanops.res->func(value, axis)
A:pandas.tests.test_nanops.targ->targfunc(targartempval, axis=axis, **kwargs)
A:pandas.tests.test_nanops.(targ, res)->_coerce_tds(targ, res)
A:pandas.tests.test_nanops.testarval2->numpy.take(testarval, 0, axis=-1)
A:pandas.tests.test_nanops.targarval2->numpy.take(targarval, 0, axis=-1)
A:pandas.tests.test_nanops.testarval->getattr(self, testar)
A:pandas.tests.test_nanops.targarval->getattr(self, targar)
A:pandas.tests.test_nanops.targfunc->partial(self._badobj_wrap, func=targfunc, allow_complex=allow_complex)
A:pandas.tests.test_nanops.value->numpy.take(value, 0, axis=-1)
A:pandas.tests.test_nanops.s->pandas.Series([1, 2, np.nan, 3, np.nan, 4])
A:pandas.tests.test_nanops.result->numpy_op(pd.Series([1, 2, 3, 4]))
A:pandas.tests.test_nanops.np_result->pandas.Series([1, 2, np.nan, 3, np.nan, 4]).values.mean()
A:pandas.tests.test_nanops.nans->numpy.min(value, axis)
A:pandas.tests.test_nanops.nullnan->isna(nans)
A:pandas.tests.test_nanops.func->partial(self._skew_kurt_wrap, func=func1)
A:pandas.tests.test_nanops.values->numpy.array([1, 2, 3])
A:pandas.tests.test_nanops.func1->partial(kurtosis, fisher=True)
A:pandas.tests.test_nanops.res00->checkfun(self.arr_float_1d, self.arr_float1_1d, **kwargs)
A:pandas.tests.test_nanops.res01->checkfun(self.arr_float_1d, self.arr_float1_1d, min_periods=len(self.arr_float_1d) - 1, **kwargs)
A:pandas.tests.test_nanops.res10->checkfun(self.arr_float_nan_1d, self.arr_float1_nan_1d, **kwargs)
A:pandas.tests.test_nanops.res11->checkfun(self.arr_float_nan_1d, self.arr_float1_nan_1d, min_periods=len(self.arr_float_1d) - 1, **kwargs)
A:pandas.tests.test_nanops.res20->checkfun(self.arr_nan_1d, self.arr_float1_1d, **kwargs)
A:pandas.tests.test_nanops.res21->checkfun(self.arr_float_1d, self.arr_nan_1d, **kwargs)
A:pandas.tests.test_nanops.res22->checkfun(self.arr_nan_1d, self.arr_nan_1d, **kwargs)
A:pandas.tests.test_nanops.res23->checkfun(self.arr_float_nan_1d, self.arr_nan_float1_1d, **kwargs)
A:pandas.tests.test_nanops.res24->checkfun(self.arr_float_nan_1d, self.arr_nan_float1_1d, min_periods=len(self.arr_float_1d) - 1, **kwargs)
A:pandas.tests.test_nanops.res25->checkfun(self.arr_float_1d, self.arr_float1_1d, min_periods=len(self.arr_float_1d) + 1, **kwargs)
A:pandas.tests.test_nanops.res0->func(value)
A:pandas.tests.test_nanops.targ1->numpy.hstack([targ0, arr_nan])
A:pandas.tests.test_nanops.res1->checkfun(arr_float_nan, arr_float1_nan)
A:pandas.tests.test_nanops.res2->checkfun(arr_float_nan, arr_nan_float1)
A:pandas.tests.test_nanops.arr_float->numpy.take(arr_float, 0, axis=-1)
A:pandas.tests.test_nanops.arr_float1->numpy.take(arr_float1, 0, axis=-1)
A:pandas.tests.test_nanops.arr_nan->numpy.take(arr_nan, 0, axis=-1)
A:pandas.tests.test_nanops.arr_nan_nan->numpy.take(arr_nan_nan, 0, axis=-1)
A:pandas.tests.test_nanops.arr_float_nan->numpy.take(arr_float_nan, 0, axis=-1)
A:pandas.tests.test_nanops.arr_float1_nan->numpy.take(arr_float1_nan, 0, axis=-1)
A:pandas.tests.test_nanops.arr_nan_float1->numpy.take(arr_nan_float1, 0, axis=-1)
A:pandas.tests.test_nanops.targ0->op(self.arr_float, self.arr_float1)
A:pandas.tests.test_nanops.val->getattr(self, arr)
A:pandas.tests.test_nanops.o_values->numpy.array([1, 2, 3]).astype(object)
A:pandas.tests.test_nanops.s_values->numpy.array(['foo', 'bar', 'baz'], dtype=object)
A:pandas.tests.test_nanops.self.samples->numpy.sin(np.linspace(0, 1, 200))
A:pandas.tests.test_nanops.actual_variance->pandas.core.nanops.nanvar(samples, axis=1)
A:pandas.tests.test_nanops.actual_std->pandas.core.nanops.nanvar(samples, skipna=False)
A:pandas.tests.test_nanops.samples_unif->self.prng.uniform(size=samples_norm.shape[0])
A:pandas.tests.test_nanops.samples->numpy.hstack([self.samples, np.nan])
A:pandas.tests.test_nanops.variance_0->pandas.core.nanops.nanvar(samples, axis=1, skipna=True, ddof=0).mean()
A:pandas.tests.test_nanops.variance_1->pandas.core.nanops.nanvar(samples, axis=1, skipna=True, ddof=1).mean()
A:pandas.tests.test_nanops.variance_2->pandas.core.nanops.nanvar(samples, axis=1, skipna=True, ddof=2).mean()
A:pandas.tests.test_nanops.samples[:3, :3]->numpy.array([[0.97303362, 0.21869576, 0.55560287], [0.72980153, 0.03109364, 0.99155171], [0.09317602, 0.60078248, 0.15871292]])
A:pandas.tests.test_nanops.variance->numpy.array([[[0.13762259, 0.05619224, 0.11568816], [0.20643388, 0.08428837, 0.17353224], [0.41286776, 0.16857673, 0.34706449]], [[0.09519783, 0.16435395, 0.05082054], [0.14279674, 0.24653093, 0.07623082], [0.28559348, 0.49306186, 0.15246163]]])
A:pandas.tests.test_nanops.var->pandas.core.nanops.nanvar(samples, skipna=True, axis=axis, ddof=ddof)
A:pandas.tests.test_nanops.std->pandas.core.nanops.nanstd(samples, skipna=True, axis=axis, ddof=ddof)
A:pandas.tests.test_nanops.data->Series(766897346 * np.ones(10))
A:pandas.tests.test_nanops.skew->pandas.core.nanops.nanskew(samples, skipna=True)
A:pandas.tests.test_nanops.left_tailed->self.prng.beta(alpha, beta, size=100)
A:pandas.tests.test_nanops.right_tailed->self.prng.beta(alpha, beta, size=100)
A:pandas.tests.test_nanops.kurt->pandas.core.nanops.nankurt(samples, skipna=True)
A:pandas.tests.test_nanops.dti->pandas.date_range('2016-01-01', periods=3, tz=tz)
A:pandas.tests.test_nanops.dti2->pandas.date_range('2016-01-01', periods=3, tz=tz).insert(1, pd.NaT)
A:pandas.tests.test_nanops.mask->pandas.Series([1, 2, np.nan, 3, np.nan, 4]).isna()
A:pandas.tests.test_nanops.median_expected->operation(s)
A:pandas.tests.test_nanops.median_result->operation(s, mask=mask)
pandas.tests.test_nanops.TestDatetime64NaNOps
pandas.tests.test_nanops.TestDatetime64NaNOps.test_nanmean(self,tz)
pandas.tests.test_nanops.TestEnsureNumeric
pandas.tests.test_nanops.TestEnsureNumeric.test_convertable_values(self)
pandas.tests.test_nanops.TestEnsureNumeric.test_ndarray(self)
pandas.tests.test_nanops.TestEnsureNumeric.test_non_convertable_values(self)
pandas.tests.test_nanops.TestEnsureNumeric.test_numeric_values(self)
pandas.tests.test_nanops.TestNankurtFixedValues
pandas.tests.test_nanops.TestNankurtFixedValues.prng(self)
pandas.tests.test_nanops.TestNankurtFixedValues.setup_method(self,method)
pandas.tests.test_nanops.TestNankurtFixedValues.test_all_finite(self)
pandas.tests.test_nanops.TestNankurtFixedValues.test_axis(self)
pandas.tests.test_nanops.TestNankurtFixedValues.test_constant_series(self)
pandas.tests.test_nanops.TestNankurtFixedValues.test_ground_truth(self)
pandas.tests.test_nanops.TestNankurtFixedValues.test_nans(self)
pandas.tests.test_nanops.TestNankurtFixedValues.test_nans_skipna(self)
pandas.tests.test_nanops.TestNanskewFixedValues
pandas.tests.test_nanops.TestNanskewFixedValues.prng(self)
pandas.tests.test_nanops.TestNanskewFixedValues.setup_method(self,method)
pandas.tests.test_nanops.TestNanskewFixedValues.test_all_finite(self)
pandas.tests.test_nanops.TestNanskewFixedValues.test_axis(self)
pandas.tests.test_nanops.TestNanskewFixedValues.test_constant_series(self)
pandas.tests.test_nanops.TestNanskewFixedValues.test_ground_truth(self)
pandas.tests.test_nanops.TestNanskewFixedValues.test_nans(self)
pandas.tests.test_nanops.TestNanskewFixedValues.test_nans_skipna(self)
pandas.tests.test_nanops.TestNanvarFixedValues
pandas.tests.test_nanops.TestNanvarFixedValues.prng(self)
pandas.tests.test_nanops.TestNanvarFixedValues.setup_method(self,method)
pandas.tests.test_nanops.TestNanvarFixedValues.test_ground_truth(self)
pandas.tests.test_nanops.TestNanvarFixedValues.test_nanstd_nans(self)
pandas.tests.test_nanops.TestNanvarFixedValues.test_nanstd_roundoff(self)
pandas.tests.test_nanops.TestNanvarFixedValues.test_nanvar_all_finite(self)
pandas.tests.test_nanops.TestNanvarFixedValues.test_nanvar_axis(self)
pandas.tests.test_nanops.TestNanvarFixedValues.test_nanvar_ddof(self)
pandas.tests.test_nanops.TestNanvarFixedValues.test_nanvar_nans(self)
pandas.tests.test_nanops.TestnanopsDataFrame
pandas.tests.test_nanops.TestnanopsDataFrame._argminmax_wrap(self,value,axis=None,func=None)
pandas.tests.test_nanops.TestnanopsDataFrame._badobj_wrap(self,value,func,allow_complex=True,**kwargs)
pandas.tests.test_nanops.TestnanopsDataFrame._skew_kurt_wrap(self,values,axis=None,func=None)
pandas.tests.test_nanops.TestnanopsDataFrame.check_bool(self,func,value,correct)
pandas.tests.test_nanops.TestnanopsDataFrame.check_fun(self,testfunc,targfunc,testar,empty_targfunc=None,**kwargs)
pandas.tests.test_nanops.TestnanopsDataFrame.check_fun_data(self,testfunc,targfunc,testarval,targarval,check_dtype=True,empty_targfunc=None,**kwargs)
pandas.tests.test_nanops.TestnanopsDataFrame.check_funs(self,testfunc,targfunc,allow_complex=True,allow_all_nan=True,allow_date=True,allow_tdelta=True,allow_obj=True,**kwargs)
pandas.tests.test_nanops.TestnanopsDataFrame.check_nancomp(self,checkfun,targ0)
pandas.tests.test_nanops.TestnanopsDataFrame.check_nancorr_nancov_1d(self,checkfun,targ0,targ1,**kwargs)
pandas.tests.test_nanops.TestnanopsDataFrame.check_nancorr_nancov_2d(self,checkfun,targ0,targ1,**kwargs)
pandas.tests.test_nanops.TestnanopsDataFrame.check_results(self,targ,res,axis,check_dtype=True)
pandas.tests.test_nanops.TestnanopsDataFrame.setup_method(self,method)
pandas.tests.test_nanops.TestnanopsDataFrame.teardown_method(self,method)
pandas.tests.test_nanops.TestnanopsDataFrame.test__bn_ok_dtype(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test__has_infs(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_invalid_method(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nan_comparison(self,op,nanop)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nan_funcs(self,nan_op,np_op)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanargmax(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanargmin(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nancorr(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nancorr_kendall(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nancorr_pearson(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nancorr_spearman(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nancov(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nankurt(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanmean(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanmean_overflow(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanmedian(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanops_with_warnings(self,nan_op,np_op)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanprod(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nansem(self,ddof)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanskew(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanstd(self,ddof)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nansum(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanvar(self,ddof)
pandas.tests.test_nanops.TestnanopsDataFrame.test_returned_dtype(self,dtype)
pandas.tests.test_nanops.test_nanops_independent_of_mask_param(operation)
pandas.tests.test_nanops.test_numpy_ops(numpy_op,expected)
pandas.tests.test_nanops.test_use_bottleneck()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/test_downstream.py----------------------------------------
A:pandas.tests.test_downstream.toolz->import_module('toolz')
A:pandas.tests.test_downstream.dask->import_module('dask')
A:pandas.tests.test_downstream.ddf->dask.dataframe.from_pandas(df, npartitions=3)
A:pandas.tests.test_downstream.xarray->import_module('xarray')
A:pandas.tests.test_downstream.times->import_module('xarray').cftime_range('0001', periods=2)
A:pandas.tests.test_downstream.result->pyarrow.Table.from_pandas(df).to_pandas()
A:pandas.tests.test_downstream.statsmodels->import_module('statsmodels')
A:pandas.tests.test_downstream.sklearn->import_module('sklearn')
A:pandas.tests.test_downstream.digits->sklearn.datasets.load_digits()
A:pandas.tests.test_downstream.clf->sklearn.svm.SVC(gamma=0.001, C=100.0)
A:pandas.tests.test_downstream.seaborn->import_module('seaborn')
A:pandas.tests.test_downstream.tips->import_module('seaborn').load_dataset('tips')
A:pandas.tests.test_downstream.pandas_gbq->import_module('pandas_gbq')
A:pandas.tests.test_downstream.pandas_datareader->import_module('pandas_datareader')
A:pandas.tests.test_downstream.geopandas->import_module('geopandas')
A:pandas.tests.test_downstream.fp->import_module('geopandas').datasets.get_path('naturalearth_lowres')
A:pandas.tests.test_downstream.s->Series(range(5))
A:pandas.tests.test_downstream.pyarrow->import_module('pyarrow')
A:pandas.tests.test_downstream.table->import_module('pyarrow').Table.from_pandas(df)
A:pandas.tests.test_downstream.output->exc.value.stdout.decode()
pandas.tests.test_downstream.df()
pandas.tests.test_downstream.import_module(name)
pandas.tests.test_downstream.test_dask(df)
pandas.tests.test_downstream.test_geopandas()
pandas.tests.test_downstream.test_geopandas_coordinate_indexer()
pandas.tests.test_downstream.test_missing_required_dependency()
pandas.tests.test_downstream.test_oo_optimizable()
pandas.tests.test_downstream.test_pandas_datareader()
pandas.tests.test_downstream.test_pandas_gbq(df)
pandas.tests.test_downstream.test_pyarrow(df)
pandas.tests.test_downstream.test_scikit_learn(df)
pandas.tests.test_downstream.test_seaborn()
pandas.tests.test_downstream.test_statsmodels()
pandas.tests.test_downstream.test_xarray(df)
pandas.tests.test_downstream.test_xarray_cftimeindex_nearest()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/test_compat.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arithmetic/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arithmetic/test_timedelta64.py----------------------------------------
A:pandas.tests.arithmetic.test_timedelta64.tdi->pandas._testing.box_expected(tdi, box)
A:pandas.tests.arithmetic.test_timedelta64.other->numpy.array([2, 4, 2], dtype='m8[h]')
A:pandas.tests.arithmetic.test_timedelta64.expected->pandas._testing.box_expected(expected, xbox)
A:pandas.tests.arithmetic.test_timedelta64.ser->Series([1.5, 3, 4.5, 6, 7.5], dtype=np.float64, name=names[1])
A:pandas.tests.arithmetic.test_timedelta64.rng->pandas._testing.box_expected(rng, box_with_array)
A:pandas.tests.arithmetic.test_timedelta64.obj->pandas._testing.box_expected(tdi, box)
A:pandas.tests.arithmetic.test_timedelta64.left->pandas.TimedeltaIndex([pd.Timedelta('1 days'), pd.NaT, pd.Timedelta('3 days')])
A:pandas.tests.arithmetic.test_timedelta64.right->pandas.TimedeltaIndex([pd.NaT, pd.NaT, pd.Timedelta('3 days')])
A:pandas.tests.arithmetic.test_timedelta64.tdidx1->pandas.TimedeltaIndex(['1 day', pd.NaT, '1 day 00:00:01', pd.NaT, '1 day 00:00:01', '5 day 00:00:03'])
A:pandas.tests.arithmetic.test_timedelta64.tdidx2->pandas.TimedeltaIndex(['2 day', '2 day', pd.NaT, pd.NaT, '1 day 00:00:02', '5 days 00:00:03'])
A:pandas.tests.arithmetic.test_timedelta64.tdarr->pandas._testing.box_expected(tdi, box_with_array)
A:pandas.tests.arithmetic.test_timedelta64.idx->pandas._testing.box_expected(idx, box_with_array)
A:pandas.tests.arithmetic.test_timedelta64.exp->TimedeltaIndex([pd.NaT, pd.NaT, '5 hours'])
A:pandas.tests.arithmetic.test_timedelta64.dti->pandas.date_range('2016-01-01', periods=3)
A:pandas.tests.arithmetic.test_timedelta64.td->Series([timedelta(minutes=5, seconds=3)] * 3)
A:pandas.tests.arithmetic.test_timedelta64.dt->Timestamp('20130101')
A:pandas.tests.arithmetic.test_timedelta64.ts->Timestamp('20130101')
A:pandas.tests.arithmetic.test_timedelta64.dti_tz->pandas.date_range('20130101', periods=3).tz_localize('US/Eastern')
A:pandas.tests.arithmetic.test_timedelta64.ts_tz->Timestamp('20130101').tz_localize('US/Eastern')
A:pandas.tests.arithmetic.test_timedelta64.ts_tz2->Timestamp('20130101').tz_localize('CET')
A:pandas.tests.arithmetic.test_timedelta64.dt_tz->Timestamp('20130101').tz_localize('US/Eastern').to_pydatetime()
A:pandas.tests.arithmetic.test_timedelta64.index->pandas.date_range('1/1/2000', periods=50, freq=freq)
A:pandas.tests.arithmetic.test_timedelta64.s->Series(rng)
A:pandas.tests.arithmetic.test_timedelta64.result2->DatetimeIndex(s - np.timedelta64(100000000))
A:pandas.tests.arithmetic.test_timedelta64.result4->DatetimeIndex(s - pd.offsets.Hour(1))
A:pandas.tests.arithmetic.test_timedelta64.result->Series([1.5, 3, 4.5, 6, 7.5], dtype=np.float64, name=names[1]).__rdiv__(tdi)
A:pandas.tests.arithmetic.test_timedelta64.tdinat->pandas.to_timedelta(['24658 days 11:15:00', 'NaT'])
A:pandas.tests.arithmetic.test_timedelta64.tsneg->Timestamp('1950-01-01')
A:pandas.tests.arithmetic.test_timedelta64.tspos->Timestamp('1980-01-01')
A:pandas.tests.arithmetic.test_timedelta64.s1->pandas.to_timedelta(Series(['00:00:01']))
A:pandas.tests.arithmetic.test_timedelta64.s2->pandas.to_timedelta(Series(['00:00:02']))
A:pandas.tests.arithmetic.test_timedelta64.sn->pandas.to_timedelta(Series([pd.NaT], dtype='m8[ns]'))
A:pandas.tests.arithmetic.test_timedelta64.df1->pandas.DataFrame(['00:00:01']).apply(pd.to_timedelta)
A:pandas.tests.arithmetic.test_timedelta64.df2->pandas.DataFrame(['00:00:02']).apply(pd.to_timedelta)
A:pandas.tests.arithmetic.test_timedelta64.dfn->pandas.DataFrame([pd.NaT.value]).apply(pd.to_timedelta)
A:pandas.tests.arithmetic.test_timedelta64.scalar1->pandas.to_timedelta('00:00:01')
A:pandas.tests.arithmetic.test_timedelta64.scalar2->pandas.to_timedelta('00:00:02')
A:pandas.tests.arithmetic.test_timedelta64.timedelta_NaT->pandas.to_timedelta('NaT')
A:pandas.tests.arithmetic.test_timedelta64.v1->pandas.date_range('2012-1-1', periods=3, freq='D')
A:pandas.tests.arithmetic.test_timedelta64.v2->pandas.date_range('2012-1-2', periods=3, freq='D')
A:pandas.tests.arithmetic.test_timedelta64.xp->Series(1000000000.0 * 3600 * 24, rs.index).astype('int64').astype('timedelta64[ns]')
A:pandas.tests.arithmetic.test_timedelta64.df->pandas._testing.box_expected(tdi, box).to_frame()
A:pandas.tests.arithmetic.test_timedelta64.maxa->df['A'].max()
A:pandas.tests.arithmetic.test_timedelta64.d->datetime(2001, 1, 1, 3, 4)
A:pandas.tests.arithmetic.test_timedelta64.timedelta_series->Series([NaT, Timedelta('1s')])
A:pandas.tests.arithmetic.test_timedelta64.nat_series_dtype_timedelta->Series([NaT, NaT], dtype='timedelta64[ns]')
A:pandas.tests.arithmetic.test_timedelta64.single_nat_dtype_timedelta->Series([NaT], dtype='timedelta64[ns]')
A:pandas.tests.arithmetic.test_timedelta64.expected2->pandas._testing.box_expected(expected2, box_with_array)
A:pandas.tests.arithmetic.test_timedelta64.tdser->pandas._testing.box_expected(tdser, box_with_array)
A:pandas.tests.arithmetic.test_timedelta64.pi->pandas.date_range('2016-01-01', periods=3).to_period(pi_freq)
A:pandas.tests.arithmetic.test_timedelta64.vector->vector.astype(any_real_dtype).astype(any_real_dtype)
A:pandas.tests.arithmetic.test_timedelta64.td1->pandas._testing.box_expected(td1, box_with_array)
A:pandas.tests.arithmetic.test_timedelta64.td2->pandas.to_timedelta('00:05:04')
A:pandas.tests.arithmetic.test_timedelta64.op->getattr(pd.offsets, do)
A:pandas.tests.arithmetic.test_timedelta64.expected_add->pandas._testing.box_expected(expected_add, box2)
A:pandas.tests.arithmetic.test_timedelta64.expected_sub->pandas._testing.box_expected(expected_sub, box2)
A:pandas.tests.arithmetic.test_timedelta64.anchored->obox([pd.offsets.MonthEnd(), pd.offsets.Day(n=2)])
A:pandas.tests.arithmetic.test_timedelta64.startdate->Series(pd.date_range('2013-01-01', '2013-01-03'))
A:pandas.tests.arithmetic.test_timedelta64.enddate->Series(pd.date_range('2013-03-01', '2013-03-03'))
A:pandas.tests.arithmetic.test_timedelta64.rng5->numpy.arange(5, dtype='int64')
A:pandas.tests.arithmetic.test_timedelta64.rng5f->numpy.arange(5, dtype='float64')
A:pandas.tests.arithmetic.test_timedelta64.xbox->get_upcast_box(box_with_array, vector)
A:pandas.tests.arithmetic.test_timedelta64.res->pandas._testing.box_expected(tdi, box).__rfloordiv__(scalar_td)
pandas.tests.arithmetic.test_timedelta64.TestAddSubNaTMasking
pandas.tests.arithmetic.test_timedelta64.TestAddSubNaTMasking.test_tdi_add_overflow(self)
pandas.tests.arithmetic.test_timedelta64.TestAddSubNaTMasking.test_tdi_add_timestamp_nat_masking(self)
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_addition_ops(self)
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_dti_tdi_numeric_ops(self)
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_subtraction_ops(self)
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_subtraction_ops_with_tz(self)
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_tda_add_sub_index(self)
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_tdi_iadd_timedeltalike(self,two_hours)
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_tdi_isub_timedeltalike(self,two_hours)
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_tdi_ops_attributes(self)
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_timedelta(self,freq)
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_ufunc_coercions(self)
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayComparisons
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayComparisons.test_comp_nat(self,dtype)
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayComparisons.test_comparisons_coverage(self)
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayComparisons.test_comparisons_nat(self)
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayLikeArithmetic
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayLikeArithmetic.test_td64arr_pow_invalid(self,scalar_td,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayLikeComparisons
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayLikeComparisons.test_compare_timedelta64_zerodim(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayLikeComparisons.test_compare_timedeltalike_scalar(self,box_with_array,td_scalar)
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayLikeComparisons.test_td64_comparisons_invalid(self,box_with_array,invalid)
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayLikeComparisons.test_td64arr_cmp_arraylike_invalid(self,other)
pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayLikeComparisons.test_td64arr_cmp_mixed_invalid(self)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_operators_timedelta64(self)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_operators_timedelta64_with_timedelta(self,scalar_td)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64_df_add_int_frame(self)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_datetime64_nat(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_dt64_nat(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_offset_array(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_offset_index(self,names,box)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_sub_datetimelike_scalar(self,ts,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_sub_dtlike_scalar(self,ts,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_sub_int(self,box_with_array,one)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_sub_integer_array(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_sub_object_array(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_sub_td64_nat(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_sub_tdi(self,box,names)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_td64_array(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_timedeltalike(self,two_hours,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_timestamp(self,box_with_array,tz_naive_fixture)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_addsub_anchored_offset_arraylike(self,obox,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_addsub_integer_array_no_freq(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_addsub_numeric_arr_invalid(self,box_with_array,vec,any_real_dtype)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_addsub_numeric_scalar_invalid(self,box_with_array,other)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_NaT(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_offset_array(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_offset_index(self,names,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_periodlike(self,box_with_array,tdi_freq,pi_freq)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_td64_array(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_timedeltalike(self,two_hours,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_timestamp_raises(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_with_offset_series(self,names,box_df_fail)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_tdi_add_dt64_array(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_tdi_sub_dt64_array(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_timedelta64_operations_with_DateOffset(self)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_timedelta64_operations_with_timedeltas(self)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_timedelta64_ops_nat(self)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_timedelta_ops_with_missing_values(self)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_float_series_rdiv_td64arr(self,box_with_array,names)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_int(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_nat_invalid(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_numeric_array(self,box_with_array,vector,any_real_dtype)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_numeric_scalar(self,box_with_array,two)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_td64_ndarray(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_td64nat(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_tdlike_scalar(self,two_hours,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_tdlike_scalar_with_nat(self,two_hours,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_floordiv_int(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_floordiv_tdlike_scalar(self,two_hours,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_floordiv_tdscalar(self,box_with_array,scalar_td)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mod_int(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mod_tdscalar(self,box_with_array,three_days)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mul_int(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mul_int_series(self,box_df_fail,names)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mul_numeric_scalar(self,box_with_array,one)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mul_td64arr_raises(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mul_tdlike_scalar_raises(self,two_hours,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mul_tdscalar_invalid(self,box_with_array,scalar_td)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mul_too_short_raises(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_rfloordiv_tdlike_scalar(self,scalar_td,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_rfloordiv_tdscalar(self,box_with_array,scalar_td)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_rfloordiv_tdscalar_explicit(self,box_with_array,scalar_td)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_rmod_tdscalar(self,box_with_array,three_days)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_rmul_numeric_array(self,box_with_array,vector,any_real_dtype)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_tdarr_div_length_mismatch(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_tdi_mul_float_series(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_tdi_mul_int_array(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_tdi_mul_int_array_zerodim(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_tdi_mul_int_series(self,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_tdi_rmul_arraylike(self,other,box_with_array)
pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_timedelta64_conversions(self,m,unit)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arithmetic/test_period.py----------------------------------------
A:pandas.tests.arithmetic.test_period.pi->pandas.period_range('2000-12-31', periods=3, freq='D')
A:pandas.tests.arithmetic.test_period.other->numpy.array([pd.Timedelta(days=1), pd.offsets.Day(2), 3])
A:pandas.tests.arithmetic.test_period.expected->PeriodIndex(['2011-07', '2011-08', 'NaT', '2011-10'], freq='2M', name='idx')
A:pandas.tests.arithmetic.test_period.parr->pandas._testing.box_expected(pi, box_with_array)
A:pandas.tests.arithmetic.test_period.idx->PeriodIndex(['2011-01', 'NaT', '2011-03', '2011-04'], freq='M', name='idx')
A:pandas.tests.arithmetic.test_period.val->Period('2000-01-04', freq='D')
A:pandas.tests.arithmetic.test_period.ser->pandas.Series(idx)
A:pandas.tests.arithmetic.test_period.base->Series([Period('2011', freq='A'), Period('2011-02', freq='M'), Period('2013', freq='A'), Period('2011-04', freq='M')])
A:pandas.tests.arithmetic.test_period.per->pandas.Period('2015-01-10', freq='D')
A:pandas.tests.arithmetic.test_period.exp->pandas.TimedeltaIndex([np.nan, np.nan, np.nan, np.nan], name='idx')
A:pandas.tests.arithmetic.test_period.idx1->PeriodIndex(['2011-01', '2011-02', 'NaT', '2011-05'], freq=freq)
A:pandas.tests.arithmetic.test_period.idx2->PeriodIndex(['2011-02', '2011-01', '2011-04', 'NaT'], freq=freq)
A:pandas.tests.arithmetic.test_period.diff->PeriodIndex(['2011-02', '2011-01', '2011-04', 'NaT'], freq='4M')
A:pandas.tests.arithmetic.test_period.left->left.astype(dtype).astype(dtype)
A:pandas.tests.arithmetic.test_period.right->right.astype(dtype).astype(dtype)
A:pandas.tests.arithmetic.test_period.result->numpy.subtract(pd.Period('2012-01', freq='M'), idx)
A:pandas.tests.arithmetic.test_period.s->pandas.Series(values)
A:pandas.tests.arithmetic.test_period.df->pandas.DataFrame({'A': [pd.Period('2015-01', freq='M'), pd.Period('2015-02', freq='M')], 'B': [pd.Period('2014-01', freq='M'), pd.Period('2014-02', freq='M')]})
A:pandas.tests.arithmetic.test_period.p->pandas.Period('2015-03', freq='M')
A:pandas.tests.arithmetic.test_period.df2->pandas.DataFrame({'A': [pd.Period('2015-05', freq='M'), pd.Period('2015-06', freq='M')], 'B': [pd.Period('2015-05', freq='M'), pd.Period('2015-06', freq='M')]})
A:pandas.tests.arithmetic.test_period.rng->pandas.period_range('2014-01', '2016-12', freq='M')
A:pandas.tests.arithmetic.test_period.p1->pandas.PeriodIndex([p1_d], freq=freq)
A:pandas.tests.arithmetic.test_period.p2->pandas.PeriodIndex([p2_d], freq=freq)
A:pandas.tests.arithmetic.test_period.freq->offset(n, normalize=False, **kwds)
A:pandas.tests.arithmetic.test_period.dti->pandas.DatetimeIndex(['2011-01-01', '2011-01-02'], freq='D')
A:pandas.tests.arithmetic.test_period.tdi->pandas.TimedeltaIndex(['-1 Day', '-1 Day', '-1 Day'])
A:pandas.tests.arithmetic.test_period.offs->box([pd.offsets.QuarterEnd(n=1, startingMonth=12), pd.offsets.QuarterEnd(n=-2, startingMonth=12)])
A:pandas.tests.arithmetic.test_period.unanchored->numpy.array([pd.offsets.Hour(n=1), pd.offsets.Minute(n=-2)])
A:pandas.tests.arithmetic.test_period.anchored->box([pd.offsets.MonthEnd(), pd.offsets.Day(n=2)])
A:pandas.tests.arithmetic.test_period.obj->pandas._testing.box_expected(idx, box_with_array)
A:pandas.tests.arithmetic.test_period.s2->pandas.Series([pd.Period('2015-01-05', freq='D'), pd.Period('2015-01-04', freq='D')], name='xxx')
pandas.tests.arithmetic.test_period.TestPeriodArrayLikeComparisons
pandas.tests.arithmetic.test_period.TestPeriodArrayLikeComparisons.test_compare_invalid_listlike(self,box_with_array,other)
pandas.tests.arithmetic.test_period.TestPeriodArrayLikeComparisons.test_compare_invalid_scalar(self,box_with_array,scalar)
pandas.tests.arithmetic.test_period.TestPeriodArrayLikeComparisons.test_compare_object_dtype(self,box_with_array,other_box)
pandas.tests.arithmetic.test_period.TestPeriodArrayLikeComparisons.test_compare_zerodim(self,box_with_array)
pandas.tests.arithmetic.test_period.TestPeriodFrameArithmetic
pandas.tests.arithmetic.test_period.TestPeriodFrameArithmetic.test_ops_frame_period(self)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_add_iadd_timedeltalike_annual(self)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_add_iadd_parr_raises(self,box_with_array)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_add_sub_float_raises(self,op,other,box_with_array)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_add_sub_index(self)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_add_sub_invalid(self,other,box_with_array)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_add_sub_object_array(self)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_add_sub_td64_nat(self,box_with_array,transpose)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_add_sub_tdt64_nat_array(self,box_with_array,other)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_sub_pi_mismatched_freq(self,box_with_array)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_iadd_int(self,one)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_iadd_timedeltalike_M(self)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_iadd_timedeltalike_daily(self,three_days)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_iadd_timedeltalike_hourly(self,two_hours)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_intarray(self,int_holder,op)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_offset_array(self,box)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_offset_n_gt1(self,box_with_array,transpose)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_offset_n_gt1_not_divisible(self,box_with_array)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_sub_td64_array_non_tick_raises(self)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_sub_td64_array_tick(self)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_sub_timedeltalike_freq_mismatch_annual(self,mismatched_freq)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_sub_timedeltalike_freq_mismatch_daily(self,not_daily)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_sub_timedeltalike_freq_mismatch_monthly(self,mismatched_freq)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_timedeltalike_minute_gt1(self,three_days)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_timedeltalike_mismatched_freq_hourly(self,not_hourly)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_timedeltalike_tick_gt1(self,three_days,freqstr)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_intarray(self,int_holder)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_intlike(self,five)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_isub_int(self,one)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_isub_offset(self)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_isub_pi(self)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_isub_timedeltalike_daily(self,three_days)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_isub_timedeltalike_hourly(self,two_hours)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_offset_array(self,box)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_pi_with_nat(self)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_sub_n_gt_1_offsets(self,offset,kwd_name,n)
pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_sub_n_gt_1_ticks(self,tick_classes,n)
pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons
pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_comp_nat(self,dtype)
pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_eq(self,other)
pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_eq_integer_disallowed(self,other)
pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_parr_cmp_period_scalar(self,freq,box_with_array)
pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_parr_cmp_period_scalar2(self,box_with_array)
pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_parr_cmp_pi(self,freq,box_with_array)
pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_parr_cmp_pi_mismatched_freq_raises(self,freq,box_with_array)
pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_pi_cmp_nat(self,freq)
pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_pi_cmp_nat_mismatched_freq_raises(self,freq)
pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_pi_cmp_period(self)
pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesComparisonConsistency
pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesComparisonConsistency._check(self,values,func,expected)
pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesComparisonConsistency.test_pi_comp_period(self)
pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesComparisonConsistency.test_pi_comp_period_nat(self)
pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods
pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods._check(self,values,func,expected)
pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_parr_ops_errors(self,ng,func,box_with_array)
pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_offset_errors(self)
pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_ops(self)
pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_ops_array_int(self)
pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_ops_nat(self)
pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_ops_offset(self)
pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_sub_pdnat(self)
pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_sub_period(self)
pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_sub_period_nat(self)
pandas.tests.arithmetic.test_period.TestPeriodSeriesArithmetic
pandas.tests.arithmetic.test_period.TestPeriodSeriesArithmetic.test_ops_series_period(self)
pandas.tests.arithmetic.test_period.TestPeriodSeriesArithmetic.test_ops_series_timedelta(self)
pandas.tests.arithmetic.test_period.TestPeriodSeriesComparisons
pandas.tests.arithmetic.test_period.TestPeriodSeriesComparisons.test_cmp_series_period_series_mixed_freq(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arithmetic/test_object.py----------------------------------------
A:pandas.tests.arithmetic.test_object.ser->pandas.Series([1, 2, 3])
A:pandas.tests.arithmetic.test_object.shifted->pandas.Series([1, 2, 3]).shift(2)
A:pandas.tests.arithmetic.test_object.func->getattr(operator, op)
A:pandas.tests.arithmetic.test_object.result->object.__new__(cls)
A:pandas.tests.arithmetic.test_object.expected->pandas.Index([Decimal(1), Decimal(0)])
A:pandas.tests.arithmetic.test_object.left->Series(['a', np.nan, 'c'], dtype=dtype)
A:pandas.tests.arithmetic.test_object.right->Series(['a', np.nan, 'd'], dtype=dtype)
A:pandas.tests.arithmetic.test_object.a->MyIndex._simple_new(values)
A:pandas.tests.arithmetic.test_object.b->Series([1, np.nan, np.nan, 1], dtype=object)
A:pandas.tests.arithmetic.test_object.arr->pandas._testing.box_expected(arr, box_with_array)
A:pandas.tests.arithmetic.test_object.obj_ser->pandas._testing.box_expected(obj_ser, box)
A:pandas.tests.arithmetic.test_object.exp->pandas.Series([pd.Timedelta('01:30:00'), pd.Timedelta('02:30:00')], name='xxx')
A:pandas.tests.arithmetic.test_object.ser2->pandas.Series([pd.Timestamp('2015-01-03', tz='US/Eastern'), pd.Timestamp('2015-01-05', tz='Asia/Tokyo')], name='xxx')
A:pandas.tests.arithmetic.test_object.index->pandas.Index([Decimal(1), Decimal(2)])
A:pandas.tests.arithmetic.test_object.values->numpy.array([datetime.date(2000, 1, 1), datetime.date(2000, 1, 2)], dtype=object)
A:pandas.tests.arithmetic.test_object.other->pandas.Index(other)
pandas.tests.arithmetic.test_object.MyIndex(pd.Index)
pandas.tests.arithmetic.test_object.MyIndex.__add__(self,other)
pandas.tests.arithmetic.test_object.MyIndex.__radd__(self,other)
pandas.tests.arithmetic.test_object.MyIndex._simple_new(cls,values,name=None,dtype=None)
pandas.tests.arithmetic.test_object.TestArithmetic
pandas.tests.arithmetic.test_object.TestArithmetic.test_add(self)
pandas.tests.arithmetic.test_object.TestArithmetic.test_add_extension_scalar(self,other,box_with_array,op)
pandas.tests.arithmetic.test_object.TestArithmetic.test_add_string(self)
pandas.tests.arithmetic.test_object.TestArithmetic.test_iadd_preserves_name(self)
pandas.tests.arithmetic.test_object.TestArithmetic.test_iadd_string(self)
pandas.tests.arithmetic.test_object.TestArithmetic.test_mixed_timezone_series_ops_object(self)
pandas.tests.arithmetic.test_object.TestArithmetic.test_objarr_add_invalid(self,op,box_with_array)
pandas.tests.arithmetic.test_object.TestArithmetic.test_objarr_add_str(self,box)
pandas.tests.arithmetic.test_object.TestArithmetic.test_objarr_radd_str(self,box)
pandas.tests.arithmetic.test_object.TestArithmetic.test_objarr_radd_str_invalid(self,dtype,data,box_with_array)
pandas.tests.arithmetic.test_object.TestArithmetic.test_operators_na_handling(self)
pandas.tests.arithmetic.test_object.TestArithmetic.test_pow_ops_object(self)
pandas.tests.arithmetic.test_object.TestArithmetic.test_rsub_object(self)
pandas.tests.arithmetic.test_object.TestArithmetic.test_series_with_dtype_radd_timedelta(self,dtype)
pandas.tests.arithmetic.test_object.TestArithmetic.test_sub_fail(self)
pandas.tests.arithmetic.test_object.TestArithmetic.test_sub_object(self)
pandas.tests.arithmetic.test_object.TestObjectComparisons
pandas.tests.arithmetic.test_object.TestObjectComparisons.test_comparison_object_numeric_nas(self)
pandas.tests.arithmetic.test_object.TestObjectComparisons.test_more_na_comparisons(self,dtype)
pandas.tests.arithmetic.test_object.TestObjectComparisons.test_object_comparisons(self)
pandas.tests.arithmetic.test_object.test_index_ops_defer_to_unknown_subclasses(other)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arithmetic/test_datetime64.py----------------------------------------
A:pandas.tests.arithmetic.test_datetime64.dti->DatetimeIndex([Timestamp('2000-01-05 00:15:00'), Timestamp('2000-01-31 00:23:00'), Timestamp('2000-01-01'), Timestamp('2000-02-29'), Timestamp('2000-12-31')])
A:pandas.tests.arithmetic.test_datetime64.other->other_box([pd.offsets.MonthEnd(), pd.Timedelta(days=4)])
A:pandas.tests.arithmetic.test_datetime64.dtarr->pandas._testing.box_expected(dti, box_with_array)
A:pandas.tests.arithmetic.test_datetime64.expected->DatetimeIndex(raw)
A:pandas.tests.arithmetic.test_datetime64.rng->pandas.date_range('2000-01-01 09:00', freq='H', periods=10, tz=tz)
A:pandas.tests.arithmetic.test_datetime64.ts->Timestamp(datetime(1993, 1, 7, 13, 30, 0))
A:pandas.tests.arithmetic.test_datetime64.ser->Series([Timedelta(seconds=5)] * 2, index=index, name=names[1])
A:pandas.tests.arithmetic.test_datetime64.obj->pandas._testing.box_expected(dti, box_with_array, transpose=False)
A:pandas.tests.arithmetic.test_datetime64.left->pandas._testing.box_expected(left, box_with_array)
A:pandas.tests.arithmetic.test_datetime64.right->pandas._testing.box_expected(right, box_with_array)
A:pandas.tests.arithmetic.test_datetime64.ser2->pandas._testing.box_expected(ser2, box_with_array)
A:pandas.tests.arithmetic.test_datetime64.series->Series(date_range('1/1/2000', periods=10))
A:pandas.tests.arithmetic.test_datetime64.s_nat->Series([Timedelta(seconds=5)] * 2, index=index, name=names[1]).copy(deep=True)
A:pandas.tests.arithmetic.test_datetime64.ser[0]->pandas.Timestamp('nat')
A:pandas.tests.arithmetic.test_datetime64.ser[3]->pandas.Timestamp('nat')
A:pandas.tests.arithmetic.test_datetime64.left_f->getattr(operator, left)
A:pandas.tests.arithmetic.test_datetime64.right_f->getattr(operator, right)
A:pandas.tests.arithmetic.test_datetime64.result->DatetimeIndex([Timestamp('2017-01-01', tz=tz)] * 10)
A:pandas.tests.arithmetic.test_datetime64.index->DatetimeIndex(['2016-06-28 05:30', '2016-06-28 05:31'], tz=tz, name=names[0])
A:pandas.tests.arithmetic.test_datetime64.element->Timestamp(element).to_datetime64()
A:pandas.tests.arithmetic.test_datetime64.arr->numpy.array(index)
A:pandas.tests.arithmetic.test_datetime64.arr_result->op(arr, element)
A:pandas.tests.arithmetic.test_datetime64.index_result->op(index, element)
A:pandas.tests.arithmetic.test_datetime64.fidx1->pandas.Index([1.0, np.nan, 3.0, np.nan, 5.0, 7.0])
A:pandas.tests.arithmetic.test_datetime64.fidx2->pandas.Index([2.0, 3.0, np.nan, np.nan, 6.0, 7.0])
A:pandas.tests.arithmetic.test_datetime64.didx1->pandas.DatetimeIndex(['2014-01-01', pd.NaT, '2014-03-01', pd.NaT, '2014-05-01', '2014-07-01'])
A:pandas.tests.arithmetic.test_datetime64.didx2->pandas.DatetimeIndex(['2014-02-01', '2014-03-01', pd.NaT, pd.NaT, '2014-06-01', '2014-07-01'])
A:pandas.tests.arithmetic.test_datetime64.darr->numpy.array([np_datetime64_compat('2014-02-01 00:00Z'), np_datetime64_compat('2014-03-01 00:00Z'), np_datetime64_compat('nat'), np.datetime64('nat'), np_datetime64_compat('2014-06-01 00:00Z'), np_datetime64_compat('2014-07-01 00:00Z')])
A:pandas.tests.arithmetic.test_datetime64.dr->pandas._testing.box_expected(dr, box_with_array)
A:pandas.tests.arithmetic.test_datetime64.dz->pandas._testing.box_expected(dz, box_with_array)
A:pandas.tests.arithmetic.test_datetime64.ts_tz->pandas.Timestamp('2000-03-14 01:59', tz='Europe/Amsterdam')
A:pandas.tests.arithmetic.test_datetime64.tdi->pandas.timedelta_range('0 days', periods=10)
A:pandas.tests.arithmetic.test_datetime64.idx->date_range('2011-01-01', periods=3, freq='2D', name='x')
A:pandas.tests.arithmetic.test_datetime64.dt64->numpy.datetime64('2013-01-01')
A:pandas.tests.arithmetic.test_datetime64.delta_series->pandas.Series([np.timedelta64(0, 'D'), np.timedelta64(1, 'D')])
A:pandas.tests.arithmetic.test_datetime64.dti_tz->date_range('20130101', periods=3).tz_localize('US/Eastern')
A:pandas.tests.arithmetic.test_datetime64.ser_tz->pandas._testing.box_expected(dti_tz, box_with_array)
A:pandas.tests.arithmetic.test_datetime64.msg->'|'.join(['cannot perform __neg__ with this index type:', 'ufunc subtract cannot use operands with types', 'cannot subtract DatetimeArray from'])
A:pandas.tests.arithmetic.test_datetime64.pi->DatetimeIndex([Timestamp('2000-01-05 00:15:00'), Timestamp('2000-01-31 00:23:00'), Timestamp('2000-01-01'), Timestamp('2000-02-29'), Timestamp('2000-12-31')]).to_period(pi_freq)
A:pandas.tests.arithmetic.test_datetime64.parr->pandas._testing.box_expected(pi, box_with_array2)
A:pandas.tests.arithmetic.test_datetime64.offset_cls->getattr(pd.offsets, cls_name)
A:pandas.tests.arithmetic.test_datetime64.dates->pandas._testing.box_expected(dates, box_with_array)
A:pandas.tests.arithmetic.test_datetime64.vec->pandas._testing.box_expected(vec, box_with_array)
A:pandas.tests.arithmetic.test_datetime64.off->pandas.DateOffset(**dict(relative_kwargs[:i + 1]))
A:pandas.tests.arithmetic.test_datetime64.offset->offset_cls(n, normalize=normalize, **kwargs)
A:pandas.tests.arithmetic.test_datetime64.s->Series([Timestamp('20130101 9:01'), Timestamp('20130101 9:02')])
A:pandas.tests.arithmetic.test_datetime64.exp->DatetimeIndex(['2010-12-31', '2011-01-01', '2011-01-02'], freq='D', name='x')
A:pandas.tests.arithmetic.test_datetime64.date->pandas._testing.box_expected(date, box_with_array, False)
A:pandas.tests.arithmetic.test_datetime64.mth->getattr(date, op)
A:pandas.tests.arithmetic.test_datetime64.dt->datetime(2016, 8, 22, 12, tzinfo=pytz.utc)
A:pandas.tests.arithmetic.test_datetime64.td->pandas.Timedelta('20000 Days')
A:pandas.tests.arithmetic.test_datetime64.dtimax->pandas.to_datetime(['now', pd.Timestamp.max])
A:pandas.tests.arithmetic.test_datetime64.dtimin->pandas.to_datetime(['now', pd.Timestamp.min])
A:pandas.tests.arithmetic.test_datetime64.tsneg->Timestamp('1950-01-01')
A:pandas.tests.arithmetic.test_datetime64.tspos->Timestamp('1980-01-01')
A:pandas.tests.arithmetic.test_datetime64.ts_neg->pandas.to_datetime(['1950-01-01', '1950-01-01'])
A:pandas.tests.arithmetic.test_datetime64.ts_pos->pandas.to_datetime(['1980-01-01', '1980-01-01'])
A:pandas.tests.arithmetic.test_datetime64.tmin->pandas.to_datetime([pd.Timestamp.min])
A:pandas.tests.arithmetic.test_datetime64.tmax->pandas.to_datetime([pd.Timestamp.max])
A:pandas.tests.arithmetic.test_datetime64.a->Series(dtype='M8[ns]')
A:pandas.tests.arithmetic.test_datetime64.b->Series(dtype='m8[ns]')
A:pandas.tests.arithmetic.test_datetime64.td1->Series(pd.timedelta_range('1 days 1 min', periods=5, freq='H'))
A:pandas.tests.arithmetic.test_datetime64.dt1->Series(date_range('2000-01-01 09:00:00', periods=5, tz=tz), name='foo')
A:pandas.tests.arithmetic.test_datetime64.dt2->Series(date_range('2000-01-01 09:00:00', periods=5, tz=tz), name='foo').copy()
A:pandas.tests.arithmetic.test_datetime64.op->getattr(get_ser, op_str, None)
A:pandas.tests.arithmetic.test_datetime64.td2->Series(pd.timedelta_range('1 days 1 min', periods=5, freq='H')).copy()
A:pandas.tests.arithmetic.test_datetime64.s1->Series([pd.Timestamp('2016-02-10', tz='America/Sao_Paulo')])
A:pandas.tests.arithmetic.test_datetime64.s2->Series([pd.Timestamp('2016-02-08', tz='America/Sao_Paulo')])
A:pandas.tests.arithmetic.test_datetime64.datetime_series->Series([NaT, Timestamp('19900315')])
A:pandas.tests.arithmetic.test_datetime64.nat_series_dtype_timestamp->Series([NaT, NaT], dtype='datetime64[ns]')
A:pandas.tests.arithmetic.test_datetime64.single_nat_dtype_datetime->Series([NaT], dtype='datetime64[ns]')
A:pandas.tests.arithmetic.test_datetime64.method->getattr(ser, op)
A:pandas.tests.arithmetic.test_datetime64.dti_tz2->date_range('20130101', periods=3).tz_localize('UTC')
A:pandas.tests.arithmetic.test_datetime64.dti1->DatetimeIndex(['2012-01-01', np.nan, '2012-01-03'])
A:pandas.tests.arithmetic.test_datetime64.dti2->DatetimeIndex(['2012-01-02', '2012-01-03', np.nan])
A:pandas.tests.arithmetic.test_datetime64.nptd->timedelta64(d, h, m, s, us)
A:pandas.tests.arithmetic.test_datetime64.pytd->timedelta(days=d, hours=h, minutes=m, seconds=s, microseconds=us)
A:pandas.tests.arithmetic.test_datetime64.lhs->op(ser, nptd)
A:pandas.tests.arithmetic.test_datetime64.rhs->op(ser, pytd)
A:pandas.tests.arithmetic.test_datetime64.timedelta_series->Series([NaT, Timedelta('1s')])
A:pandas.tests.arithmetic.test_datetime64.nat_series_dtype_timedelta->Series([NaT, NaT], dtype='timedelta64[ns]')
A:pandas.tests.arithmetic.test_datetime64.single_nat_dtype_timedelta->Series([NaT], dtype='timedelta64[ns]')
A:pandas.tests.arithmetic.test_datetime64.delta->numpy.array([np.timedelta64(1, 'D'), np.timedelta64(2, 'D'), np.timedelta64(3, 'D')])
A:pandas.tests.arithmetic.test_datetime64.xbox->get_upcast_box(box_with_array, other)
A:pandas.tests.arithmetic.test_datetime64.res->op(dti, other)
A:pandas.tests.arithmetic.test_datetime64.actual->DatetimeIndex(shift_months(dti.asi8, years * 12 + months))
pandas.tests.arithmetic.test_datetime64.TestDatetime64Arithmetic
pandas.tests.arithmetic.test_datetime64.TestDatetime64Arithmetic.test_dt64arr_add_dt64ndarray_raises(self,tz_naive_fixture,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64Arithmetic.test_dt64arr_add_sub_invalid(self,dti_freq,other,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64Arithmetic.test_dt64arr_add_sub_parr(self,dti_freq,pi_freq,box_with_array,box_with_array2)
pandas.tests.arithmetic.test_datetime64.TestDatetime64Arithmetic.test_dt64arr_add_sub_td64_nat(self,box_with_array,tz_naive_fixture)
pandas.tests.arithmetic.test_datetime64.TestDatetime64Arithmetic.test_dt64arr_add_sub_td64ndarray(self,tz_naive_fixture,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64Arithmetic.test_dt64arr_add_td64_scalar(self,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64Arithmetic.test_dt64arr_add_timedeltalike_scalar(self,tz_naive_fixture,two_hours,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64Arithmetic.test_dt64arr_add_timestamp_raises(self,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64Arithmetic.test_dt64arr_aware_sub_dt64ndarray_raises(self,tz_aware_fixture,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64Arithmetic.test_dt64arr_iadd_timedeltalike_scalar(self,tz_naive_fixture,two_hours,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64Arithmetic.test_dt64arr_isub_timedeltalike_scalar(self,tz_naive_fixture,two_hours,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64Arithmetic.test_dt64arr_naive_sub_dt64ndarray(self,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64Arithmetic.test_dt64arr_sub_NaT(self,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64Arithmetic.test_dt64arr_sub_datetime64_not_ns(self,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64Arithmetic.test_dt64arr_sub_dtscalar(self,box_with_array,ts)
pandas.tests.arithmetic.test_datetime64.TestDatetime64Arithmetic.test_dt64arr_sub_timedeltalike_scalar(self,tz_naive_fixture,two_hours,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64Arithmetic.test_dt64arr_sub_timestamp(self,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64ArrayLikeComparisons
pandas.tests.arithmetic.test_datetime64.TestDatetime64ArrayLikeComparisons.test_compare_zerodim(self,tz_naive_fixture,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64ArrayLikeComparisons.test_dt64arr_cmp_arraylike_invalid(self,other,tz_naive_fixture)
pandas.tests.arithmetic.test_datetime64.TestDatetime64ArrayLikeComparisons.test_dt64arr_cmp_mixed_invalid(self,tz_naive_fixture)
pandas.tests.arithmetic.test_datetime64.TestDatetime64ArrayLikeComparisons.test_dt64arr_cmp_scalar_invalid(self,other,tz_naive_fixture,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64ArrayLikeComparisons.test_dt64arr_nat_comparison(self,tz_naive_fixture,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64DateOffsetArithmetic
pandas.tests.arithmetic.test_datetime64.TestDatetime64DateOffsetArithmetic.test_dt64arr_add_mixed_offset_array(self,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64DateOffsetArithmetic.test_dt64arr_add_sub_DateOffset(self,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64DateOffsetArithmetic.test_dt64arr_add_sub_DateOffsets(self,box_with_array,n,normalize,cls_and_kwargs)
pandas.tests.arithmetic.test_datetime64.TestDatetime64DateOffsetArithmetic.test_dt64arr_add_sub_offset_ndarray(self,tz_naive_fixture,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64DateOffsetArithmetic.test_dt64arr_add_sub_relativedelta_offsets(self,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64DateOffsetArithmetic.test_dt64arr_add_sub_tick_DateOffset_smoke(self,cls_name,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64DateOffsetArithmetic.test_dt64arr_series_add_tick_DateOffset(self,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64DateOffsetArithmetic.test_dt64arr_series_sub_tick_DateOffset(self,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64DateOffsetArithmetic.test_dti_add_sub_nonzero_mth_offset(self,op,offset,exp,exp_freq,tz_aware_fixture,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64DateOffsetArithmetic.test_dti_add_tick_tzaware(self,tz_aware_fixture,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64OverflowHandling
pandas.tests.arithmetic.test_datetime64.TestDatetime64OverflowHandling.test_datetimeindex_sub_datetimeindex_overflow(self)
pandas.tests.arithmetic.test_datetime64.TestDatetime64OverflowHandling.test_datetimeindex_sub_timestamp_overflow(self)
pandas.tests.arithmetic.test_datetime64.TestDatetime64OverflowHandling.test_dt64_overflow_masking(self,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64OverflowHandling.test_dt64_series_arith_overflow(self)
pandas.tests.arithmetic.test_datetime64.TestDatetime64SeriesComparison
pandas.tests.arithmetic.test_datetime64.TestDatetime64SeriesComparison.test_comparison_invalid(self,tz_naive_fixture,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64SeriesComparison.test_dt64arr_timestamp_equality(self,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64SeriesComparison.test_nat_comparisons(self,dtype,index_or_series,reverse,pair)
pandas.tests.arithmetic.test_datetime64.TestDatetime64SeriesComparison.test_nat_comparisons_scalar(self,dtype,data,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetime64SeriesComparison.test_series_comparison_scalars(self,val)
pandas.tests.arithmetic.test_datetime64.TestDatetime64SeriesComparison.test_timestamp_compare_series(self,left,right)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic.test_add_datetimelike_and_dtarr(self,box_with_array,addend,tz)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic.test_dta_add_sub_index(self,tz_naive_fixture)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic.test_dti_add_intarray_no_freq(self,int_holder)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic.test_dti_add_intarray_non_tick(self,int_holder,freq)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic.test_dti_add_intarray_tick(self,int_holder,freq)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic.test_dti_add_series(self,tz,names)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic.test_dti_add_tdi(self,tz_naive_fixture)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic.test_dti_addsub_int(self,tz_naive_fixture,one)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic.test_dti_addsub_object_arraylike(self,tz_naive_fixture,box_with_array,other_box)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic.test_dti_addsub_offset_arraylike(self,tz_naive_fixture,names,op,index_or_series)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic.test_dti_iadd_tdi(self,tz_naive_fixture)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic.test_dti_isub_tdi(self,tz_naive_fixture)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic.test_dti_sub_tdi(self,tz_naive_fixture)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic.test_ops_nat_mixed_datetime64_timedelta64(self)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic.test_sub_dti_dti(self)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic.test_timedelta64_equal_timedelta_supported_ops(self,op)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic.test_ufunc_coercions(self)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexComparisons
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexComparisons.test_comparators(self,op)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexComparisons.test_comparison_tzawareness_compat(self,op,box_df_fail)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexComparisons.test_comparison_tzawareness_compat_scalars(self,op,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexComparisons.test_dti_cmp_datetimelike(self,other,tz_naive_fixture)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexComparisons.test_dti_cmp_list(self)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexComparisons.test_dti_cmp_nat(self,dtype,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexComparisons.test_dti_cmp_nat_behaves_like_float_cmp_nan(self)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexComparisons.test_dti_cmp_object_dtype(self)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexComparisons.test_dti_cmp_str(self,tz_naive_fixture)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexComparisons.test_dti_cmp_tdi_tzawareness(self,other)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexComparisons.test_nat_comparison_tzawareness(self,op)
pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexComparisons.test_scalar_comparison_tzawareness(self,op,other,tz_aware_fixture,box_with_array)
pandas.tests.arithmetic.test_datetime64.TestTimestampSeriesArithmetic
pandas.tests.arithmetic.test_datetime64.TestTimestampSeriesArithmetic.test_datetime64_ops_nat(self)
pandas.tests.arithmetic.test_datetime64.TestTimestampSeriesArithmetic.test_dt64_mul_div_numeric_invalid(self,one,dt64_series)
pandas.tests.arithmetic.test_datetime64.TestTimestampSeriesArithmetic.test_dt64_series_add_intlike(self,tz,op)
pandas.tests.arithmetic.test_datetime64.TestTimestampSeriesArithmetic.test_dt64_series_add_mixed_tick_DateOffset(self)
pandas.tests.arithmetic.test_datetime64.TestTimestampSeriesArithmetic.test_dt64ser_sub_datetime_dtype(self)
pandas.tests.arithmetic.test_datetime64.TestTimestampSeriesArithmetic.test_dt64tz_series_sub_dtitz(self)
pandas.tests.arithmetic.test_datetime64.TestTimestampSeriesArithmetic.test_empty_series_add_sub(self)
pandas.tests.arithmetic.test_datetime64.TestTimestampSeriesArithmetic.test_operators_datetimelike(self)
pandas.tests.arithmetic.test_datetime64.TestTimestampSeriesArithmetic.test_operators_datetimelike_invalid(self,all_arithmetic_operators)
pandas.tests.arithmetic.test_datetime64.TestTimestampSeriesArithmetic.test_operators_datetimelike_with_timezones(self)
pandas.tests.arithmetic.test_datetime64.TestTimestampSeriesArithmetic.test_sub_datetime_compat(self)
pandas.tests.arithmetic.test_datetime64.TestTimestampSeriesArithmetic.test_sub_single_tz(self)
pandas.tests.arithmetic.test_datetime64.test_shift_months(years,months)
pandas.tests.arithmetic.test_dt64.TestDatetime64Arithmetic
pandas.tests.arithmetic.test_dt64.TestDatetime64Arithmetic.test_dt64arr_add_dt64ndarray_raises(self,tz_naive_fixture,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64Arithmetic.test_dt64arr_add_sub_invalid(self,dti_freq,other,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64Arithmetic.test_dt64arr_add_sub_parr(self,dti_freq,pi_freq,box_with_array,box_with_array2)
pandas.tests.arithmetic.test_dt64.TestDatetime64Arithmetic.test_dt64arr_add_sub_td64_nat(self,box_with_array,tz_naive_fixture)
pandas.tests.arithmetic.test_dt64.TestDatetime64Arithmetic.test_dt64arr_add_sub_td64ndarray(self,tz_naive_fixture,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64Arithmetic.test_dt64arr_add_td64_scalar(self,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64Arithmetic.test_dt64arr_add_timedeltalike_scalar(self,tz_naive_fixture,two_hours,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64Arithmetic.test_dt64arr_add_timestamp_raises(self,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64Arithmetic.test_dt64arr_aware_sub_dt64ndarray_raises(self,tz_aware_fixture,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64Arithmetic.test_dt64arr_iadd_timedeltalike_scalar(self,tz_naive_fixture,two_hours,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64Arithmetic.test_dt64arr_isub_timedeltalike_scalar(self,tz_naive_fixture,two_hours,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64Arithmetic.test_dt64arr_naive_sub_dt64ndarray(self,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64Arithmetic.test_dt64arr_sub_NaT(self,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64Arithmetic.test_dt64arr_sub_dt64_not_ns(self,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64Arithmetic.test_dt64arr_sub_dtscalar(self,box_with_array,ts)
pandas.tests.arithmetic.test_dt64.TestDatetime64Arithmetic.test_dt64arr_sub_timedeltalike_scalar(self,tz_naive_fixture,two_hours,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64Arithmetic.test_dt64arr_sub_timestamp(self,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64ArrayLikeComparisons
pandas.tests.arithmetic.test_dt64.TestDatetime64ArrayLikeComparisons.test_compare_zerodim(self,tz_naive_fixture,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64ArrayLikeComparisons.test_dt64arr_cmp_arraylike_invalid(self,other,tz_naive_fixture)
pandas.tests.arithmetic.test_dt64.TestDatetime64ArrayLikeComparisons.test_dt64arr_cmp_mixed_invalid(self,tz_naive_fixture)
pandas.tests.arithmetic.test_dt64.TestDatetime64ArrayLikeComparisons.test_dt64arr_cmp_scalar_invalid(self,other,tz_naive_fixture,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64ArrayLikeComparisons.test_dt64arr_nat_comparison(self,tz_naive_fixture,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64DateOffsetArithmetic
pandas.tests.arithmetic.test_dt64.TestDatetime64DateOffsetArithmetic.test_dt64arr_add_mixed_offset_array(self,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64DateOffsetArithmetic.test_dt64arr_add_sub_DateOffset(self,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64DateOffsetArithmetic.test_dt64arr_add_sub_DateOffsets(self,box_with_array,n,normalize,cls_and_kwargs)
pandas.tests.arithmetic.test_dt64.TestDatetime64DateOffsetArithmetic.test_dt64arr_add_sub_offset_ndarray(self,tz_naive_fixture,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64DateOffsetArithmetic.test_dt64arr_add_sub_relativedelta_offsets(self,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64DateOffsetArithmetic.test_dt64arr_add_sub_tick_DateOffset_smoke(self,cls_name,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64DateOffsetArithmetic.test_dt64arr_series_add_tick_DateOffset(self,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64DateOffsetArithmetic.test_dt64arr_series_sub_tick_DateOffset(self,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64DateOffsetArithmetic.test_dti_add_sub_nonzero_mth_offset(self,op,offset,exp,exp_freq,tz_aware_fixture,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64DateOffsetArithmetic.test_dti_add_tick_tzaware(self,tz_aware_fixture,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64OverflowHandling
pandas.tests.arithmetic.test_dt64.TestDatetime64OverflowHandling.test_dt64_overflow_masking(self,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64OverflowHandling.test_dt64_series_arith_overflow(self)
pandas.tests.arithmetic.test_dt64.TestDatetime64OverflowHandling.test_dtindex_sub_dtindex_overflow(self)
pandas.tests.arithmetic.test_dt64.TestDatetime64OverflowHandling.test_dtindex_sub_timestamp_overflow(self)
pandas.tests.arithmetic.test_dt64.TestDatetime64SeriesComparison
pandas.tests.arithmetic.test_dt64.TestDatetime64SeriesComparison.test_comparison_invalid(self,tz_naive_fixture,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64SeriesComparison.test_dt64arr_timestamp_equality(self,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64SeriesComparison.test_nat_comparisons(self,dtype,index_or_series,reverse,pair)
pandas.tests.arithmetic.test_dt64.TestDatetime64SeriesComparison.test_nat_comparisons_scalar(self,dtype,data,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetime64SeriesComparison.test_series_comparison_scalars(self,val)
pandas.tests.arithmetic.test_dt64.TestDatetime64SeriesComparison.test_timestamp_compare_series(self,left,right)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexArithmetic
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexArithmetic.test_add_dtlike_and_dtarr(self,box_with_array,addend,tz)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexArithmetic.test_dta_add_sub_index(self,tz_naive_fixture)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexArithmetic.test_dti_add_intarray_no_freq(self,int_holder)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexArithmetic.test_dti_add_intarray_non_tick(self,int_holder,freq)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexArithmetic.test_dti_add_intarray_tick(self,int_holder,freq)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexArithmetic.test_dti_add_series(self,tz,names)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexArithmetic.test_dti_add_tdi(self,tz_naive_fixture)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexArithmetic.test_dti_addsub_int(self,tz_naive_fixture,one)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexArithmetic.test_dti_addsub_object_arraylike(self,tz_naive_fixture,box_with_array,other_box)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexArithmetic.test_dti_addsub_offset_arraylike(self,tz_naive_fixture,names,op,index_or_series)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexArithmetic.test_dti_iadd_tdi(self,tz_naive_fixture)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexArithmetic.test_dti_isub_tdi(self,tz_naive_fixture)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexArithmetic.test_dti_sub_tdi(self,tz_naive_fixture)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexArithmetic.test_ops_nat_mixed_dt64_timedelta64(self)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexArithmetic.test_sub_dti_dti(self)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexArithmetic.test_timedelta64_equal_timedelta_supported_ops(self,op)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexArithmetic.test_ufunc_coercions(self)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexComparisons
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexComparisons.test_comparators(self,op)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexComparisons.test_comparison_tzawareness_compat(self,op,box_df_fail)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexComparisons.test_comparison_tzawareness_compat_scalars(self,op,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexComparisons.test_dti_cmp_dtlike(self,other,tz_naive_fixture)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexComparisons.test_dti_cmp_list(self)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexComparisons.test_dti_cmp_nat(self,dtype,box_with_array)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexComparisons.test_dti_cmp_nat_behaves_like_float_cmp_nan(self)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexComparisons.test_dti_cmp_object_dtype(self)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexComparisons.test_dti_cmp_str(self,tz_naive_fixture)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexComparisons.test_dti_cmp_tdi_tzawareness(self,other)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexComparisons.test_nat_comparison_tzawareness(self,op)
pandas.tests.arithmetic.test_dt64.TestDatetimeIndexComparisons.test_scalar_comparison_tzawareness(self,op,other,tz_aware_fixture,box_with_array)
pandas.tests.arithmetic.test_dt64.TestTimestampSeriesArithmetic
pandas.tests.arithmetic.test_dt64.TestTimestampSeriesArithmetic.test_dt64_mul_div_numeric_invalid(self,one,dt64_series)
pandas.tests.arithmetic.test_dt64.TestTimestampSeriesArithmetic.test_dt64_ops_nat(self)
pandas.tests.arithmetic.test_dt64.TestTimestampSeriesArithmetic.test_dt64_series_add_intlike(self,tz,op)
pandas.tests.arithmetic.test_dt64.TestTimestampSeriesArithmetic.test_dt64_series_add_mixed_tick_DateOffset(self)
pandas.tests.arithmetic.test_dt64.TestTimestampSeriesArithmetic.test_dt64ser_sub_dt_dtype(self)
pandas.tests.arithmetic.test_dt64.TestTimestampSeriesArithmetic.test_dt64tz_series_sub_dtitz(self)
pandas.tests.arithmetic.test_dt64.TestTimestampSeriesArithmetic.test_empty_series_add_sub(self)
pandas.tests.arithmetic.test_dt64.TestTimestampSeriesArithmetic.test_operators_dtlike(self)
pandas.tests.arithmetic.test_dt64.TestTimestampSeriesArithmetic.test_operators_dtlike_invalid(self,all_arithmetic_operators)
pandas.tests.arithmetic.test_dt64.TestTimestampSeriesArithmetic.test_operators_dtlike_with_timezones(self)
pandas.tests.arithmetic.test_dt64.TestTimestampSeriesArithmetic.test_sub_dt_compat(self)
pandas.tests.arithmetic.test_dt64.TestTimestampSeriesArithmetic.test_sub_single_tz(self)
pandas.tests.arithmetic.test_dt64.test_shift_months(years,months)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arithmetic/common.py----------------------------------------
A:pandas.tests.arithmetic.common.expected->xbox(np.zeros(result.shape, dtype=np.bool_))
pandas.tests.arithmetic.common.assert_invalid_addsub_type(left,right,msg=None)
pandas.tests.arithmetic.common.assert_invalid_comparison(left,right,box)
pandas.tests.arithmetic.common.get_upcast_box(box,vector)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arithmetic/test_numeric.py----------------------------------------
A:pandas.tests.arithmetic.test_numeric.ts->pandas._testing.makeTimeSeries()
A:pandas.tests.arithmetic.test_numeric.df->pandas.DataFrame({'A': [0, 1, 2], 'B': [1.1, None, 1.1]})
A:pandas.tests.arithmetic.test_numeric.a->pandas.Series(np.random.randn(5), name=0)
A:pandas.tests.arithmetic.test_numeric.b->pandas.Series(np.random.randn(5))
A:pandas.tests.arithmetic.test_numeric.b.name->pandas.Timestamp('2000-01-01')
A:pandas.tests.arithmetic.test_numeric.right->pandas.Series([np.inf, 2.0])
A:pandas.tests.arithmetic.test_numeric.expected->pandas.DataFrame({'A': [np.inf, 1.0, 0.0, 1.0], 'B': [0.0, np.nan, 0.0, np.nan]})
A:pandas.tests.arithmetic.test_numeric.td->Timedelta('1 day')
A:pandas.tests.arithmetic.test_numeric.other->pandas.DataFrame({'A': [1.1, 1.2, 1.3]}, index=[0, 2, 3])
A:pandas.tests.arithmetic.test_numeric.index->pandas.Index([10, 11, 12], dtype=dtype)
A:pandas.tests.arithmetic.test_numeric.arr->pandas.Series(np.random.randn(10), index=np.arange(10), dtype=object)
A:pandas.tests.arithmetic.test_numeric.obj->holder([1, 2, 3], name='x')
A:pandas.tests.arithmetic.test_numeric.left->pandas.Series([np.inf, 1.0])
A:pandas.tests.arithmetic.test_numeric.expected2->adjust_negative_zero(zero, expected)
A:pandas.tests.arithmetic.test_numeric.exleft->adjust_negative_zero(zero, exleft)
A:pandas.tests.arithmetic.test_numeric.exright->pandas.Index([np.nan, np.nan, np.nan, np.nan, np.nan], dtype=np.float64)
A:pandas.tests.arithmetic.test_numeric.result->pandas.DataFrame({'A': [0, 1, 2], 'B': [1.1, None, 1.1]}).rfloordiv(other, fill_value=1)
A:pandas.tests.arithmetic.test_numeric.first->Series([1, 0], name='first')
A:pandas.tests.arithmetic.test_numeric.second->Series([-0.01, -0.02], name='second')
A:pandas.tests.arithmetic.test_numeric.expected[0]->expected[0].astype(np.float64).astype(np.float64)
A:pandas.tests.arithmetic.test_numeric.zero_array->numpy.array([0] * 5)
A:pandas.tests.arithmetic.test_numeric.data->numpy.random.randn(5)
A:pandas.tests.arithmetic.test_numeric.ser->pandas._testing.box_expected(ser, box)
A:pandas.tests.arithmetic.test_numeric.result2->pandas.DataFrame(arr, index=df.index, columns=df.columns)
A:pandas.tests.arithmetic.test_numeric.idx->pandas.RangeIndex(0, 1000, 2)
A:pandas.tests.arithmetic.test_numeric.rng5->numpy.arange(5, dtype='float64')
A:pandas.tests.arithmetic.test_numeric.(div, mod)->divmod(idx.values, other)
A:pandas.tests.arithmetic.test_numeric.vals->pandas.Series(tm.rands_array(5, 10))
A:pandas.tests.arithmetic.test_numeric.p->p.astype('float64').astype('float64')
A:pandas.tests.arithmetic.test_numeric.s->pandas.Series([0, 1, 2], index=[1, 2, 3], name='x')
A:pandas.tests.arithmetic.test_numeric.s1->pandas.Series([1, 2, 3], index=list('ABC'), name='x')
A:pandas.tests.arithmetic.test_numeric.s2->pandas.Series([2, 2, 2], index=list('ABD'), name='x')
A:pandas.tests.arithmetic.test_numeric.exp->pandas._testing.box_expected(exp, box)
A:pandas.tests.arithmetic.test_numeric.s3->pandas.Series([1, 2, 3], index=list('ABC'), name='x')
A:pandas.tests.arithmetic.test_numeric.s4->pandas.Series([2, 2, 2, 2], index=list('ABCD'), name='x')
A:pandas.tests.arithmetic.test_numeric.frame->pandas.DataFrame({'vals': vals})
A:pandas.tests.arithmetic.test_numeric.now->pandas.Timestamp.now().to_pydatetime()
A:pandas.tests.arithmetic.test_numeric.df['date']->pandas.Timestamp('20130102')
A:pandas.tests.arithmetic.test_numeric.frame2->pandas.DataFrame(float_frame, columns=['D', 'C', 'B', 'A'])
A:pandas.tests.arithmetic.test_numeric.garbage->numpy.random.random(4)
A:pandas.tests.arithmetic.test_numeric.colSeries->pandas.Series(garbage, index=np.array(frame.columns))
A:pandas.tests.arithmetic.test_numeric.cython_or_numpy->op(left, right)
A:pandas.tests.arithmetic.test_numeric.python->pandas.Series([np.inf, 1.0]).combine(right, op)
A:pandas.tests.arithmetic.test_numeric.tser->pandas._testing.makeTimeSeries().rename('ts')
A:pandas.tests.arithmetic.test_numeric.results->divmod(series, other)
A:pandas.tests.arithmetic.test_numeric.other_np->numpy.asarray(other_np)
A:pandas.tests.arithmetic.test_numeric.expecteds->divmod(series.values, np.asarray(other_np))
A:pandas.tests.arithmetic.test_numeric.exp1->pandas.Float64Index([0.0, 0.0, 0.0], name='x')
A:pandas.tests.arithmetic.test_numeric.exp2->pandas.Float64Index([1.0, 2.0, 3.0], name='x')
A:pandas.tests.arithmetic.test_numeric.delta->dtype(delta)
A:pandas.tests.arithmetic.test_numeric.pdf1->pandas.DataFrame({'A': np.arange(10), 'B': [np.nan, 1, 2, 3, 4] * 2, 'C': [np.nan] * 10, 'D': np.arange(10)}, index=list('abcdefghij'), columns=list('ABCD'))
A:pandas.tests.arithmetic.test_numeric.pdf2->pandas.DataFrame(np.random.randn(10, 4), index=list('abcdefghjk'), columns=list('ABCX'))
pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction
pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.test_arith_ops_df_compat(self)
pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.test_datetime64_with_index(self)
pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.test_divmod(self)
pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.test_dt64_with_index(self)
pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.test_frame_operators(self,float_frame)
pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.test_series_divmod_zero(self)
pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.test_series_frame_radd_bug(self)
pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.test_series_operators(self)
pandas.tests.arithmetic.test_numeric.TestDivisionByZero
pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_div_zero_array(self)
pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_div_zero_df(self)
pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_div_zero_int(self)
pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_div_zero_series_does_not_commute(self)
pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_mod_zero_array(self)
pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_mod_zero_df(self)
pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_mod_zero_int(self)
pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_mod_zero_series_does_not_commute(self)
pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_div_negative_zero(self,zero,numeric_idx,op)
pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_div_zero(self,zero,numeric_idx)
pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_div_zero_inf_signs(self)
pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_divmod_zero(self,zero,numeric_idx)
pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_floordiv_div(self)
pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_floordiv_zero(self,zero,numeric_idx)
pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_mod_zero(self,zero,numeric_idx)
pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_rdiv_zero(self)
pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_rdiv_zero_compat(self)
pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_ser_div_ser(self,dtype1,any_real_dtype)
pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_ser_divmod_inf(self)
pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_ser_divmod_zero(self,dtype1,any_real_dtype)
pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision
pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_div_equiv_binop(self)
pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_div_int(self,numeric_idx)
pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_divide_decimal(self,box)
pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_divmod_ndarray(self,numeric_idx)
pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_divmod_scalar(self,numeric_idx)
pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_divmod_series(self,numeric_idx)
pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_modulo(self,numeric_idx,box_with_array)
pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_modulo2(self)
pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_modulo_zero_int(self)
pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_mul_datelike_raises(self,numeric_idx)
pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_mul_float_series(self,numeric_idx)
pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_mul_index(self,numeric_idx)
pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_mul_int_array(self,numeric_idx)
pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_mul_int_identity(self,op,numeric_idx,box_with_array)
pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_mul_int_series(self,numeric_idx)
pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_mul_size_mismatch_raises(self,numeric_idx)
pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_operators_frame(self)
pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_ops_np_scalar(self,other)
pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_pow_float(self,op,numeric_idx,box_with_array)
pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted
pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted.check_binop(self,ops,scalars,idxs)
pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted.test_addsub_arithmetic(self,dtype,delta)
pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted.test_arithmetic_with_frame_or_series(self,op)
pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted.test_binops(self)
pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted.test_binops_pow(self)
pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted.test_numeric_compat2(self)
pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithDatetimeLike
pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithDatetimeLike.test_add_sub_datetimelike_invalid(self,numeric_idx,other,box)
pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithDatetimeLike.test_add_sub_dtlike_invalid(self,numeric_idx,other,box)
pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithDatetimeLike.test_add_sub_timedeltalike_invalid(self,numeric_idx,other,box)
pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithDatetimeLike.test_div_td64arr(self,left,box_cls)
pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithDatetimeLike.test_mul_td64arr(self,left,box_cls)
pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithDatetimeLike.test_numeric_arr_mul_tdscalar(self,scalar_td,numeric_idx,box)
pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithDatetimeLike.test_numeric_arr_mul_tdscalar_numexpr_path(self,scalar_td,box)
pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithDatetimeLike.test_numeric_arr_rdiv_tdscalar(self,three_days,numeric_idx,box)
pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithDatetimeLike.test_ops_series(self)
pandas.tests.arithmetic.test_numeric.TestNumericComparisons
pandas.tests.arithmetic.test_numeric.TestNumericComparisons.test_compare_invalid(self)
pandas.tests.arithmetic.test_numeric.TestNumericComparisons.test_df_numeric_cmp_dt64_raises(self)
pandas.tests.arithmetic.test_numeric.TestNumericComparisons.test_operator_series_comparison_zerorank(self)
pandas.tests.arithmetic.test_numeric.TestObjectDtypeEquivalence
pandas.tests.arithmetic.test_numeric.TestObjectDtypeEquivalence.test_numarr_with_dtype_add_int(self,dtype,box_with_array)
pandas.tests.arithmetic.test_numeric.TestObjectDtypeEquivalence.test_numarr_with_dtype_add_nan(self,dtype,box_with_array)
pandas.tests.arithmetic.test_numeric.TestObjectDtypeEquivalence.test_operators_reverse_object(self,op)
pandas.tests.arithmetic.test_numeric.TestUFuncCompat
pandas.tests.arithmetic.test_numeric.TestUFuncCompat.test_ufunc_at(self)
pandas.tests.arithmetic.test_numeric.TestUFuncCompat.test_ufunc_coercions(self,holder)
pandas.tests.arithmetic.test_numeric.TestUFuncCompat.test_ufunc_compat(self,holder)
pandas.tests.arithmetic.test_numeric.TestUFuncCompat.test_ufunc_multiple_return_values(self,holder)
pandas.tests.arithmetic.test_numeric.adjust_negative_zero(zero,expected)
pandas.tests.arithmetic.test_numeric.test_dataframe_div_silenced()
pandas.tests.arithmetic.test_numeric.test_fill_value_inf_masking()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arithmetic/conftest.py----------------------------------------
pandas.tests.arithmetic.conftest.box(request)
pandas.tests.arithmetic.conftest.box_df_fail(request)
pandas.tests.arithmetic.conftest.box_with_array(request)
pandas.tests.arithmetic.conftest.id_func(x)
pandas.tests.arithmetic.conftest.mismatched_freq(request)
pandas.tests.arithmetic.conftest.not_daily(request)
pandas.tests.arithmetic.conftest.not_hourly(request)
pandas.tests.arithmetic.conftest.numeric_idx(request)
pandas.tests.arithmetic.conftest.one(request)
pandas.tests.arithmetic.conftest.scalar_td(request)
pandas.tests.arithmetic.conftest.three_days(request)
pandas.tests.arithmetic.conftest.two_hours(request)
pandas.tests.arithmetic.conftest.zero(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arithmetic/test_interval.py----------------------------------------
A:pandas.tests.arithmetic.test_interval.result->op(index, other)
A:pandas.tests.arithmetic.test_interval.expected->expected_type(self.elementwise_comparison(op, index, other))
A:pandas.tests.arithmetic.test_interval.other->pandas.core.arrays.IntervalArray.from_breaks(breaks)
A:pandas.tests.arithmetic.test_interval.array->pandas.core.arrays.IntervalArray.from_arrays(range(4), range(1, 5))
A:pandas.tests.arithmetic.test_interval.breaks->range(4)
A:pandas.tests.arithmetic.test_interval.index->constructor(IntervalIndex.from_breaks(breaks))
pandas.tests.arithmetic.test_interval.TestComparison
pandas.tests.arithmetic.test_interval.TestComparison.elementwise_comparison(self,op,array,other)
pandas.tests.arithmetic.test_interval.TestComparison.interval_constructor(self,request)
pandas.tests.arithmetic.test_interval.TestComparison.op(self,request)
pandas.tests.arithmetic.test_interval.TestComparison.test_compare_length_mismatch_errors(self,op,other_constructor,length)
pandas.tests.arithmetic.test_interval.TestComparison.test_compare_list_like_interval(self,op,array,interval_constructor)
pandas.tests.arithmetic.test_interval.TestComparison.test_compare_list_like_interval_mixed_closed(self,op,interval_constructor,closed,other_closed)
pandas.tests.arithmetic.test_interval.TestComparison.test_compare_list_like_nan(self,op,array,nulls_fixture)
pandas.tests.arithmetic.test_interval.TestComparison.test_compare_list_like_object(self,op,array,other)
pandas.tests.arithmetic.test_interval.TestComparison.test_compare_list_like_other(self,op,array,other)
pandas.tests.arithmetic.test_interval.TestComparison.test_compare_scalar_interval(self,op,array)
pandas.tests.arithmetic.test_interval.TestComparison.test_compare_scalar_interval_mixed_closed(self,op,closed,other_closed)
pandas.tests.arithmetic.test_interval.TestComparison.test_compare_scalar_na(self,op,array,nulls_fixture)
pandas.tests.arithmetic.test_interval.TestComparison.test_compare_scalar_other(self,op,array,other)
pandas.tests.arithmetic.test_interval.TestComparison.test_index_series_compat(self,op,constructor,expected_type,assert_func)
pandas.tests.arithmetic.test_interval.array(left_right_dtypes)
pandas.tests.arithmetic.test_interval.create_categorical_intervals(left,right,closed='right')
pandas.tests.arithmetic.test_interval.create_series_categorical_intervals(left,right,closed='right')
pandas.tests.arithmetic.test_interval.create_series_intervals(left,right,closed='right')
pandas.tests.arithmetic.test_interval.left_right_dtypes(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/base/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/base/test_conversion.py----------------------------------------
A:pandas.tests.base.test_conversion.s->pandas.Series([1, 2, 3], dtype='Int64')
A:pandas.tests.base.test_conversion.rdtype->tuple([rdtype])
A:pandas.tests.base.test_conversion.i->CategoricalIndex([Timestamp('1999-12-31'), Timestamp('2000-12-31')])
A:pandas.tests.base.test_conversion.ser->pandas.Series(dtype=any_numpy_dtype)
A:pandas.tests.base.test_conversion.expected->numpy.array(expected)
A:pandas.tests.base.test_conversion.array->getattr(array, attr)
A:pandas.tests.base.test_conversion.result->pandas.Series([1, 2, 3], dtype='Int64').to_numpy(dtype=dtype, na_value=na_value)
A:pandas.tests.base.test_conversion.idx->pandas.MultiIndex.from_product([['A'], ['a', 'b']])
A:pandas.tests.base.test_conversion.thing->box(array)
A:pandas.tests.base.test_conversion.obj->pandas.Series(obj)
pandas.tests.base.test_conversion.TestToIterable
pandas.tests.base.test_conversion.TestToIterable.test_categorial_datetimelike(self,method)
pandas.tests.base.test_conversion.TestToIterable.test_categorial_dtlike(self,method)
pandas.tests.base.test_conversion.TestToIterable.test_iter_box(self)
pandas.tests.base.test_conversion.TestToIterable.test_iterable(self,index_or_series,method,dtype,rdtype)
pandas.tests.base.test_conversion.TestToIterable.test_iterable_items(self,dtype,rdtype)
pandas.tests.base.test_conversion.TestToIterable.test_iterable_map(self,index_or_series,dtype,rdtype)
pandas.tests.base.test_conversion.TestToIterable.test_iterable_object_and_category(self,index_or_series,method,dtype,rdtype,obj)
pandas.tests.base.test_conversion.test_array(array,attr,index_or_series)
pandas.tests.base.test_conversion.test_array_multiindex_raises()
pandas.tests.base.test_conversion.test_ndarray_values(array,expected)
pandas.tests.base.test_conversion.test_numpy_array(arr)
pandas.tests.base.test_conversion.test_numpy_array_all_dtypes(any_numpy_dtype)
pandas.tests.base.test_conversion.test_to_numpy(array,expected,index_or_series)
pandas.tests.base.test_conversion.test_to_numpy_copy(arr,as_series)
pandas.tests.base.test_conversion.test_to_numpy_dtype(as_series)
pandas.tests.base.test_conversion.test_to_numpy_kwargs_raises()
pandas.tests.base.test_conversion.test_to_numpy_na_value_numpy_dtype(container,values,dtype,na_value,expected)
pandas.tests.base.test_conversion.test_values_consistent(array,expected_type,dtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/base/test_ops.py----------------------------------------
A:pandas.tests.base.test_ops.self.bool_index->pandas._testing.makeBoolIndex(10, name='a')
A:pandas.tests.base.test_ops.self.int_index->pandas._testing.makeIntIndex(10, name='a')
A:pandas.tests.base.test_ops.self.float_index->pandas._testing.makeFloatIndex(10, name='a')
A:pandas.tests.base.test_ops.self.dt_index->pandas._testing.makeDateIndex(10, name='a')
A:pandas.tests.base.test_ops.self.dt_tz_index->pandas._testing.makeDateIndex(10, name='a').tz_localize(tz='US/Eastern')
A:pandas.tests.base.test_ops.self.period_index->pandas._testing.makePeriodIndex(10, name='a')
A:pandas.tests.base.test_ops.self.string_index->pandas._testing.makeStringIndex(10, name='a')
A:pandas.tests.base.test_ops.self.unicode_index->pandas._testing.makeUnicodeIndex(10, name='a')
A:pandas.tests.base.test_ops.arr->numpy.random.randn(10)
A:pandas.tests.base.test_ops.self.bool_series->Series(arr, index=self.bool_index, name='a')
A:pandas.tests.base.test_ops.self.int_series->Series(arr, index=self.int_index, name='a')
A:pandas.tests.base.test_ops.self.float_series->Series(arr, index=self.float_index, name='a')
A:pandas.tests.base.test_ops.self.dt_series->Series(arr, index=self.dt_index, name='a')
A:pandas.tests.base.test_ops.self.dt_tz_series->self.dt_tz_index.to_series()
A:pandas.tests.base.test_ops.self.period_series->Series(arr, index=self.period_index, name='a')
A:pandas.tests.base.test_ops.self.string_series->Series(arr, index=self.string_index, name='a')
A:pandas.tests.base.test_ops.self.unicode_series->Series(arr, index=self.unicode_index, name='a')
A:pandas.tests.base.test_ops.self.float32_series->Series(arr.astype(np.float32), index=index, name='a')
A:pandas.tests.base.test_ops.arr_int->numpy.random.choice(10, size=10, replace=False)
A:pandas.tests.base.test_ops.self.int8_series->Series(arr_int.astype(np.int8), index=index, name='a')
A:pandas.tests.base.test_ops.self.int16_series->Series(arr_int.astype(np.int16), index=index, name='a')
A:pandas.tests.base.test_ops.self.int32_series->Series(arr_int.astype(np.int32), index=index, name='a')
A:pandas.tests.base.test_ops.self.uint8_series->Series(arr_int.astype(np.uint8), index=index, name='a')
A:pandas.tests.base.test_ops.self.uint16_series->Series(arr_int.astype(np.uint16), index=index, name='a')
A:pandas.tests.base.test_ops.self.uint32_series->Series(arr_int.astype(np.uint32), index=index, name='a')
A:pandas.tests.base.test_ops.expected->klass(expected, dtype=orig.dtype)
A:pandas.tests.base.test_ops.result->klass(values).fillna(fill_value)
A:pandas.tests.base.test_ops.operand1->type(o).__name__.lower()
A:pandas.tests.base.test_ops.expected_str->' '.join([operand2, op, operand1])
A:pandas.tests.base.test_ops.o->klass(values)
A:pandas.tests.base.test_ops.klass->type(o)
A:pandas.tests.base.test_ops.expected_index->Index(values)
A:pandas.tests.base.test_ops.idx->pandas.to_datetime(['2010-01-01 00:00:00', '2008-09-09 00:00:00', '2009-01-01 00:00:00'])
A:pandas.tests.base.test_ops.indices->numpy.repeat(np.arange(len(o)), range(1, len(o) + 1))
A:pandas.tests.base.test_ops.rep->o.values.copy().take(indices)
A:pandas.tests.base.test_ops.expected_s->Series([6], index=[Timedelta('1day')], name='dt')
A:pandas.tests.base.test_ops.values->klass(values).values.copy()
A:pandas.tests.base.test_ops.nanloc->numpy.zeros(len(o), dtype=np.bool)
A:pandas.tests.base.test_ops.exp->numpy.array(['a', 'b', np.nan, 'd'], dtype=object)
A:pandas.tests.base.test_ops.expected_s_na->Series(list(range(10, 2, -1)) + [3], index=expected_index[9:0:-1], dtype='int64', name='a')
A:pandas.tests.base.test_ops.result_s_na->klass(values).value_counts(dropna=False)
A:pandas.tests.base.test_ops.result_s->klass(values).value_counts()
A:pandas.tests.base.test_ops.s->pandas.Series(idx)
A:pandas.tests.base.test_ops.hist->pandas.Series(idx).value_counts(normalize=True)
A:pandas.tests.base.test_ops.s1->Series([1, 1, 2, 3])
A:pandas.tests.base.test_ops.res1->Series([1, 1, 2, 3]).value_counts(bins=1)
A:pandas.tests.base.test_ops.exp1->Series({Interval(0.997, 3.0): 4})
A:pandas.tests.base.test_ops.res1n->Series([1, 1, 2, 3]).value_counts(bins=1, normalize=True)
A:pandas.tests.base.test_ops.exp1n->Series({Interval(0.997, 3.0): 1.0})
A:pandas.tests.base.test_ops.res4->Series([1, 1, 2, 3]).value_counts(bins=4, dropna=False)
A:pandas.tests.base.test_ops.intervals->pandas.IntervalIndex.from_breaks([0.997, 1.5, 2.0, 2.5, 3.0])
A:pandas.tests.base.test_ops.exp4->Series([2, 1, 1, 0], index=intervals.take([0, 3, 1, 2]))
A:pandas.tests.base.test_ops.res4n->Series([1, 1, 2, 3]).value_counts(bins=4, normalize=True)
A:pandas.tests.base.test_ops.exp4n->Series([0.5, 0.25, 0.25, 0], index=intervals.take([0, 3, 1, 2]))
A:pandas.tests.base.test_ops.txt->'\n'.join(['xxyyzz20100101PIE', 'xxyyzz20100101GUM', 'xxyyzz20100101EGG', 'xxyyww20090101EGG', 'foofoo20080909PIE', 'foofoo20080909GUM'])
A:pandas.tests.base.test_ops.f->StringIO(txt)
A:pandas.tests.base.test_ops.df->pandas.DataFrame({'a': [1, 1, 1, 'one', 'one'], 'b': [2, 2, np.nan, np.nan, np.nan], 'c': [3, 3, np.nan, np.nan, 'three'], 'd': [1, 2, 3, 4, 4], 'e': [datetime(2015, 1, 1), datetime(2015, 1, 1), datetime(2015, 2, 1), pd.NaT, pd.NaT]})
A:pandas.tests.base.test_ops.unique->pandas.Series(idx).unique()
A:pandas.tests.base.test_ops.exp_idx->DatetimeIndex(expected.tolist() + [pd.NaT])
A:pandas.tests.base.test_ops.td->klass(td, name='dt')
A:pandas.tests.base.test_ops.td2->klass(td2, name='dt')
A:pandas.tests.base.test_ops.result2->klass(td2, name='dt').value_counts()
A:pandas.tests.base.test_ops.exp_arr->numpy.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4], np.intp)
A:pandas.tests.base.test_ops.exp_uniques->Index([False, True])
A:pandas.tests.base.test_ops.(codes, uniques)->o[5:].append(o).factorize(sort=False)
A:pandas.tests.base.test_ops.n->o[5:].append(o)
A:pandas.tests.base.test_ops.indexer->klass(values).argsort()
A:pandas.tests.base.test_ops.duplicated->pandas.to_datetime(['2010-01-01 00:00:00', '2008-09-09 00:00:00', '2009-01-01 00:00:00']).duplicated(keep=False)
A:pandas.tests.base.test_ops.dropped_frame->df[[column]].drop_duplicates(keep=keep)
A:pandas.tests.base.test_ops.dropped_series->df[column].drop_duplicates(keep=keep)
A:pandas.tests.base.test_ops.res->klass(values).memory_usage()
A:pandas.tests.base.test_ops.res_deep->klass(values).memory_usage(deep=True)
A:pandas.tests.base.test_ops.index->numpy.searchsorted(o, max(o), sorter=range(len(o)))
A:pandas.tests.base.test_ops.(indexes, missing)->pandas.Index(['A', 'B']).get_indexer_non_unique(pd.Index([0]))
pandas.tests.base.test_ops.Ops
pandas.tests.base.test_ops.Ops._allow_na_ops(self,obj)
pandas.tests.base.test_ops.Ops.check_ops_properties(self,props,filter=None,ignore_failures=False)
pandas.tests.base.test_ops.Ops.setup_method(self,method)
pandas.tests.base.test_ops.Ops.test_binary_ops_docs(self,klass)
pandas.tests.base.test_ops.TestIndexOps(Ops)
pandas.tests.base.test_ops.TestIndexOps.setup_method(self,method)
pandas.tests.base.test_ops.TestIndexOps.test_bool_indexing(self,indexer_klass,indexer)
pandas.tests.base.test_ops.TestIndexOps.test_drop_duplicates_series_vs_dataframe(self)
pandas.tests.base.test_ops.TestIndexOps.test_duplicated_drop_duplicates_index(self)
pandas.tests.base.test_ops.TestIndexOps.test_factorize(self)
pandas.tests.base.test_ops.TestIndexOps.test_factorize_repeated(self)
pandas.tests.base.test_ops.TestIndexOps.test_fillna(self)
pandas.tests.base.test_ops.TestIndexOps.test_get_indexer_non_unique_dtype_mismatch(self)
pandas.tests.base.test_ops.TestIndexOps.test_getitem(self)
pandas.tests.base.test_ops.TestIndexOps.test_memory_usage(self)
pandas.tests.base.test_ops.TestIndexOps.test_ndarray_compat_properties(self)
pandas.tests.base.test_ops.TestIndexOps.test_none_comparison(self)
pandas.tests.base.test_ops.TestIndexOps.test_searchsorted(self)
pandas.tests.base.test_ops.TestIndexOps.test_validate_bool_args(self)
pandas.tests.base.test_ops.TestIndexOps.test_value_counts_bins(self,index_or_series)
pandas.tests.base.test_ops.TestIndexOps.test_value_counts_datetime64(self,index_or_series)
pandas.tests.base.test_ops.TestIndexOps.test_value_counts_dt64(self,index_or_series)
pandas.tests.base.test_ops.TestIndexOps.test_value_counts_inferred(self,index_or_series)
pandas.tests.base.test_ops.TestIndexOps.test_value_counts_unique_nunique(self)
pandas.tests.base.test_ops.TestIndexOps.test_value_counts_unique_nunique_null(self,null_obj)
pandas.tests.base.test_ops.TestTranspose(Ops)
pandas.tests.base.test_ops.TestTranspose.test_numpy_transpose(self)
pandas.tests.base.test_ops.TestTranspose.test_transpose(self)
pandas.tests.base.test_ops.TestTranspose.test_transpose_non_default_axes(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/base/test_constructors.py----------------------------------------
A:pandas.tests.base.test_constructors.foo->property(_get_foo, _set_foo, doc='foo property')
A:pandas.tests.base.test_constructors.delegate->self.Delegate(self.Delegator())
A:pandas.tests.base.test_constructors.t->T()
A:pandas.tests.base.test_constructors.result->klass(a)
pandas.tests.base.test_constructors.TestConstruction
pandas.tests.base.test_constructors.TestConstruction.test_constructor_datetime_outofbound(self,a,klass)
pandas.tests.base.test_constructors.TestConstruction.test_constructor_dt_outofbound(self,a,klass)
pandas.tests.base.test_constructors.TestNoNewAttributesMixin
pandas.tests.base.test_constructors.TestNoNewAttributesMixin.test_mixin(self)
pandas.tests.base.test_constructors.TestPandasDelegate
pandas.tests.base.test_constructors.TestPandasDelegate.Delegate(self,obj)
pandas.tests.base.test_constructors.TestPandasDelegate.Delegate.__init__(self,obj)
pandas.tests.base.test_constructors.TestPandasDelegate.Delegator
pandas.tests.base.test_constructors.TestPandasDelegate.Delegator._get_foo(self)
pandas.tests.base.test_constructors.TestPandasDelegate.Delegator._set_foo(self,value)
pandas.tests.base.test_constructors.TestPandasDelegate.Delegator.bar(self,*args,**kwargs)
pandas.tests.base.test_constructors.TestPandasDelegate.setup_method(self,method)
pandas.tests.base.test_constructors.TestPandasDelegate.test_invalid_delegation(self)
pandas.tests.base.test_constructors.TestPandasDelegate.test_memory_usage(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/reductions/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/reductions/test_stat_reductions.py----------------------------------------
A:pandas.tests.reductions.test_stat_reductions.dti->dti.take([4, 1, 3, 10, 9, 7, 8, 5, 0, 2, 6]).take([4, 1, 3, 10, 9, 7, 8, 5, 0, 2, 6])
A:pandas.tests.reductions.test_stat_reductions.obj->box(tdarr)
A:pandas.tests.reductions.test_stat_reductions.parr->dti.take([4, 1, 3, 10, 9, 7, 8, 5, 0, 2, 6]).take([4, 1, 3, 10, 9, 7, 8, 5, 0, 2, 6])._data.to_period('H')
A:pandas.tests.reductions.test_stat_reductions.tdi->pandas.TimedeltaIndex([0, 3, -2, -7, 1, 2, -1, 3, 5, -2, 4], unit='D')
A:pandas.tests.reductions.test_stat_reductions.result->Series(np.ones(i)).sem(ddof=1)
A:pandas.tests.reductions.test_stat_reductions.expected->numpy.var(datetime_series.values, ddof=4)
A:pandas.tests.reductions.test_stat_reductions.result2->box(tdarr).mean(skipna=True)
A:pandas.tests.reductions.test_stat_reductions.f->getattr(Series, name)
A:pandas.tests.reductions.test_stat_reductions.ds->Series(pd.date_range('1/1/2001', periods=10))
A:pandas.tests.reductions.test_stat_reductions.nona->string_series_.dropna()
A:pandas.tests.reductions.test_stat_reductions.s->Series(np.ones(i))
A:pandas.tests.reductions.test_stat_reductions.res->f(s)
A:pandas.tests.reductions.test_stat_reductions.exp->alternate(s)
A:pandas.tests.reductions.test_stat_reductions.string_series->pandas._testing.makeStringSeries().rename('series')
A:pandas.tests.reductions.test_stat_reductions.int_ts->Series(np.ones(10, dtype=int), index=range(10))
A:pandas.tests.reductions.test_stat_reductions.datetime_series->pandas._testing.makeTimeSeries().rename('ts')
A:pandas.tests.reductions.test_stat_reductions.df->DataFrame(np.ones((i, i)))
A:pandas.tests.reductions.test_stat_reductions.index->pandas.MultiIndex(levels=[['bar'], ['one', 'two', 'three'], [0, 1]], codes=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2], [0, 1, 0, 1, 0, 1]])
pandas.tests.reductions.test_stat_reductions.TestDatetimeLikeStatReductions
pandas.tests.reductions.test_stat_reductions.TestDatetimeLikeStatReductions.test_dt64_mean(self,tz_naive_fixture,box)
pandas.tests.reductions.test_stat_reductions.TestDatetimeLikeStatReductions.test_period_mean(self,box)
pandas.tests.reductions.test_stat_reductions.TestDatetimeLikeStatReductions.test_td64_mean(self,box)
pandas.tests.reductions.test_stat_reductions.TestSeriesStatReductions
pandas.tests.reductions.test_stat_reductions.TestSeriesStatReductions._check_stat_op(self,name,alternate,string_series_,check_objects=False,check_allna=False)
pandas.tests.reductions.test_stat_reductions.TestSeriesStatReductions.test_kurt(self)
pandas.tests.reductions.test_stat_reductions.TestSeriesStatReductions.test_max(self)
pandas.tests.reductions.test_stat_reductions.TestSeriesStatReductions.test_mean(self)
pandas.tests.reductions.test_stat_reductions.TestSeriesStatReductions.test_median(self)
pandas.tests.reductions.test_stat_reductions.TestSeriesStatReductions.test_min(self)
pandas.tests.reductions.test_stat_reductions.TestSeriesStatReductions.test_prod(self)
pandas.tests.reductions.test_stat_reductions.TestSeriesStatReductions.test_sem(self)
pandas.tests.reductions.test_stat_reductions.TestSeriesStatReductions.test_skew(self)
pandas.tests.reductions.test_stat_reductions.TestSeriesStatReductions.test_sum(self)
pandas.tests.reductions.test_stat_reductions.TestSeriesStatReductions.test_var_std(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/reductions/test_reductions.py----------------------------------------
A:pandas.tests.reductions.test_reductions.arr->numpy.random.randn(100, 100).astype('f4')
A:pandas.tests.reductions.test_reductions.objs->get_objs()
A:pandas.tests.reductions.test_reductions.result->result.sort_values().reset_index(drop=True).sort_values().reset_index(drop=True)
A:pandas.tests.reductions.test_reductions.expected->Series(['foo', np.nan])
A:pandas.tests.reductions.test_reductions.obj->PeriodIndex([NaT, NaT, NaT], freq='M')
A:pandas.tests.reductions.test_reductions.df->DataFrame({'TS': rng, 'V': np.random.randn(len(rng)), 'L': lvls})
A:pandas.tests.reductions.test_reductions.df['b']->DataFrame({'TS': rng, 'V': np.random.randn(len(rng)), 'L': lvls}).a.subtract(pd.Timedelta(seconds=3600))
A:pandas.tests.reductions.test_reductions.arg->pandas.to_datetime(['2019']).tz_localize(tz)
A:pandas.tests.reductions.test_reductions.idx->RangeIndex(0, 10, 3)
A:pandas.tests.reductions.test_reductions.result2->RangeIndex(0, 10, 3).min(skipna=False)
A:pandas.tests.reductions.test_reductions.idx1->pandas.PeriodIndex([NaT, '2011-01-01', '2011-01-02', '2011-01-03'], freq='D')
A:pandas.tests.reductions.test_reductions.idx2->pandas.PeriodIndex(['2011-01-01', NaT, '2011-01-03', '2011-01-02', NaT], freq='D')
A:pandas.tests.reductions.test_reductions.td->Series([1, 'foo', 'foo', np.nan, np.nan]).diff()
A:pandas.tests.reductions.test_reductions.s->Series([1, 'foo', 'foo', np.nan, np.nan])
A:pandas.tests.reductions.test_reductions.msg->msg.format(op=opname).format(op=opname)
A:pandas.tests.reductions.test_reductions.dr->pandas.date_range(start='2016-01-15', end='2016-01-20')
A:pandas.tests.reductions.test_reductions.pr->pandas.period_range(start='2016-01-15', end='2016-01-20')
A:pandas.tests.reductions.test_reductions.ci->pandas.CategoricalIndex(list('aabbca'), categories=list('cab'), ordered=True)
A:pandas.tests.reductions.test_reductions.s2->Series(pd.date_range('20120102', periods=3))
A:pandas.tests.reductions.test_reductions.res->pandas.core.nanops.nansum(arr, axis=1)
A:pandas.tests.reductions.test_reductions.tdser->Series([], dtype='m8[ns]')
A:pandas.tests.reductions.test_reductions.ser->Series([1.0, np.nan], index=[0, 1])
A:pandas.tests.reductions.test_reductions.v->numpy.arange(5000000, dtype=dtype)
A:pandas.tests.reductions.test_reductions.data->numpy.arange(1, 11)
A:pandas.tests.reductions.test_reductions.string_series->pandas._testing.makeStringSeries().rename('series')
A:pandas.tests.reductions.test_reductions.nona->pandas._testing.makeStringSeries().rename('series').dropna()
A:pandas.tests.reductions.test_reductions.ts->pandas._testing.makeTimeSeries()
A:pandas.tests.reductions.test_reductions.s1->Series(pd.date_range('20120101', periods=3))
A:pandas.tests.reductions.test_reductions.dti->pandas.date_range('2012-1-1', periods=3, freq='D')
A:pandas.tests.reductions.test_reductions.rng->pandas.date_range('1/1/2000', periods=10, freq='4h')
A:pandas.tests.reductions.test_reductions.rng2->pandas.date_range('1/1/2000', periods=10, freq='4h').take(np.random.permutation(len(rng)))
A:pandas.tests.reductions.test_reductions.the_min->pandas.date_range('1/1/2000', periods=10, freq='4h').take(np.random.permutation(len(rng))).min()
A:pandas.tests.reductions.test_reductions.the_max->pandas.date_range('1/1/2000', periods=10, freq='4h').take(np.random.permutation(len(rng))).max()
A:pandas.tests.reductions.test_reductions.exp->pandas.Timestamp(df.TS.iat[0])
A:pandas.tests.reductions.test_reductions.cat->Series(Categorical(['a', 'b', np.nan, 'a'], categories=['b', 'a'], ordered=True))
A:pandas.tests.reductions.test_reductions._min->Series(Categorical(['a', 'b', np.nan, 'a'], categories=['b', 'a'], ordered=True)).min(skipna=skipna)
A:pandas.tests.reductions.test_reductions._max->Series(Categorical(['a', 'b', np.nan, 'a'], categories=['b', 'a'], ordered=True)).max(skipna=skipna)
A:pandas.tests.reductions.test_reductions.expected1->Series(expected1, dtype=np.uint64)
A:pandas.tests.reductions.test_reductions.expected2->Series(expected2, dtype=np.uint64)
A:pandas.tests.reductions.test_reductions.expected3->Series(expected3, dtype='category')
pandas.tests.reductions.test_reductions.TestCategoricalSeriesReductions
pandas.tests.reductions.test_reductions.TestCategoricalSeriesReductions.test_min_max(self)
pandas.tests.reductions.test_reductions.TestCategoricalSeriesReductions.test_min_max_skipna(self,skipna)
pandas.tests.reductions.test_reductions.TestDatetime64SeriesReductions
pandas.tests.reductions.test_reductions.TestDatetime64SeriesReductions.test_min_max(self)
pandas.tests.reductions.test_reductions.TestDatetime64SeriesReductions.test_min_max_series(self)
pandas.tests.reductions.test_reductions.TestDatetime64SeriesReductions.test_minmax_nat_dataframe(self,nat_df)
pandas.tests.reductions.test_reductions.TestDatetime64SeriesReductions.test_minmax_nat_series(self,nat_ser)
pandas.tests.reductions.test_reductions.TestIndexReductions
pandas.tests.reductions.test_reductions.TestIndexReductions.test_invalid_td64_reductions(self,opname)
pandas.tests.reductions.test_reductions.TestIndexReductions.test_max_min_range(self,start,stop,step)
pandas.tests.reductions.test_reductions.TestIndexReductions.test_min_max_categorical(self)
pandas.tests.reductions.test_reductions.TestIndexReductions.test_minmax_nat_datetime64(self,op)
pandas.tests.reductions.test_reductions.TestIndexReductions.test_minmax_nat_dt64(self,op)
pandas.tests.reductions.test_reductions.TestIndexReductions.test_minmax_period(self)
pandas.tests.reductions.test_reductions.TestIndexReductions.test_minmax_timedelta64(self)
pandas.tests.reductions.test_reductions.TestIndexReductions.test_minmax_tz(self,tz_naive_fixture)
pandas.tests.reductions.test_reductions.TestIndexReductions.test_numpy_minmax_datetime64(self)
pandas.tests.reductions.test_reductions.TestIndexReductions.test_numpy_minmax_dt64(self)
pandas.tests.reductions.test_reductions.TestIndexReductions.test_numpy_minmax_integer(self)
pandas.tests.reductions.test_reductions.TestIndexReductions.test_numpy_minmax_period(self)
pandas.tests.reductions.test_reductions.TestIndexReductions.test_numpy_minmax_range(self)
pandas.tests.reductions.test_reductions.TestIndexReductions.test_numpy_minmax_timedelta64(self)
pandas.tests.reductions.test_reductions.TestIndexReductions.test_timedelta_ops(self)
pandas.tests.reductions.test_reductions.TestReductions
pandas.tests.reductions.test_reductions.TestReductions.test_nanops(self)
pandas.tests.reductions.test_reductions.TestReductions.test_numpy_reduction_with_tz_aware_dtype(self,tz_aware_fixture,func)
pandas.tests.reductions.test_reductions.TestReductions.test_ops(self,opname,obj)
pandas.tests.reductions.test_reductions.TestReductions.test_same_tz_min_max_axis_1(self,op,expected_col)
pandas.tests.reductions.test_reductions.TestSeriesMode
pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_category(self,dropna,expected1,expected2,expected3)
pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_datetime(self,dropna,expected1,expected2)
pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_dt(self,dropna,expected1,expected2)
pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_empty(self,dropna,expected)
pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_intoverflow(self,dropna,expected1,expected2)
pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_mixeddtype(self,dropna,expected1,expected2)
pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_numerical(self,dropna,data,expected,dt)
pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_numerical_nan(self,dropna,expected)
pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_sortwarning(self)
pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_str_obj(self,dropna,expected1,expected2,expected3)
pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_timedelta(self,dropna,expected1,expected2)
pandas.tests.reductions.test_reductions.TestSeriesReductions
pandas.tests.reductions.test_reductions.TestSeriesReductions.test_all_any(self)
pandas.tests.reductions.test_reductions.TestSeriesReductions.test_all_any_params(self)
pandas.tests.reductions.test_reductions.TestSeriesReductions.test_assert_idxminmax_raises(self,test_input,error_type)
pandas.tests.reductions.test_reductions.TestSeriesReductions.test_empty(self,method,unit,use_bottleneck)
pandas.tests.reductions.test_reductions.TestSeriesReductions.test_empty_multi(self,method,unit)
pandas.tests.reductions.test_reductions.TestSeriesReductions.test_empty_timeseries_reductions_return_nat(self)
pandas.tests.reductions.test_reductions.TestSeriesReductions.test_idxmax(self)
pandas.tests.reductions.test_reductions.TestSeriesReductions.test_idxmin(self)
pandas.tests.reductions.test_reductions.TestSeriesReductions.test_idxminmax_with_inf(self)
pandas.tests.reductions.test_reductions.TestSeriesReductions.test_nansum_buglet(self)
pandas.tests.reductions.test_reductions.TestSeriesReductions.test_numpy_argmax(self)
pandas.tests.reductions.test_reductions.TestSeriesReductions.test_numpy_argmin(self)
pandas.tests.reductions.test_reductions.TestSeriesReductions.test_ops_consistency_on_empty(self,method)
pandas.tests.reductions.test_reductions.TestSeriesReductions.test_sum_inf(self)
pandas.tests.reductions.test_reductions.TestSeriesReductions.test_sum_overflow(self,use_bottleneck)
pandas.tests.reductions.test_reductions.TestSeriesReductions.test_timedelta64_analytics(self)
pandas.tests.reductions.test_reductions.get_objs()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/plotting/test_misc.py----------------------------------------
A:pandas.tests.plotting.test_misc.df->DataFrame(np.random.randn(48, 4), columns=list('ABCD'))
A:pandas.tests.plotting.test_misc.(x, y, kind, kwargs)->func(backend_name='pandas.plotting._matplotlib', data=Series(dtype=object), args=[], kwargs={})
A:pandas.tests.plotting.test_misc.self.ts->pandas._testing.makeTimeSeries()
A:pandas.tests.plotting.test_misc.ax->DataFrame(np.random.randn(48, 4), columns=list('ABCD')).client.value_counts().plot.bar()
A:pandas.tests.plotting.test_misc.axes->_check_plot_works(scatter_matrix, filterwarnings='always', frame=df, range_padding=0.1)
A:pandas.tests.plotting.test_misc.axes0_labels->axes[0][0].yaxis.get_majorticklabels()
A:pandas.tests.plotting.test_misc.(handles, labels)->DataFrame(np.random.randn(48, 4), columns=list('ABCD')).client.value_counts().plot.bar().get_legend_handles_labels()
A:pandas.tests.plotting.test_misc.nlines->len(ax.get_lines())
A:pandas.tests.plotting.test_misc.nxticks->len(ax.xaxis.get_ticklabels())
A:pandas.tests.plotting.test_misc.(polylines, labels)->DataFrame(np.random.randn(48, 4), columns=list('ABCD')).client.value_counts().plot.bar().get_legend_handles_labels()
A:pandas.tests.plotting.test_misc.color_label_tuples->zip([polyline.get_color() for polyline in polylines], labels)
A:pandas.tests.plotting.test_misc.ordered_color_label_tuples->sorted(color_label_tuples, key=lambda x: x[1])
A:pandas.tests.plotting.test_misc.prev_next_tupels->zip(list(ordered_color_label_tuples[0:-1]), list(ordered_color_label_tuples[1:]))
A:pandas.tests.plotting.test_misc.title->list(df.columns)
A:pandas.tests.plotting.test_misc.plot->DataFrame(np.random.randn(48, 4), columns=list('ABCD')).drop('SepalWidth', axis=1).plot(subplots=True, layout=(2, 2), title=title[:-1])
A:pandas.tests.plotting.test_misc.rand1->numpy.random.random()
A:pandas.tests.plotting.test_misc.rand2->numpy.random.random()
A:pandas.tests.plotting.test_misc.color1->_get_standard_colors(1, color_type='default')
A:pandas.tests.plotting.test_misc.color2->_get_standard_colors(9, color_type='default')
A:pandas.tests.plotting.test_misc.color3->_get_standard_colors(20, color_type='default')
A:pandas.tests.plotting.test_misc.color_before->matplotlib.cm.gnuplot(range(5))
A:pandas.tests.plotting.test_misc.color_after->_get_standard_colors(1, color=color_before)
A:pandas.tests.plotting.test_misc.color_list->matplotlib.cm.gnuplot(np.linspace(0, 1, 16))
A:pandas.tests.plotting.test_misc.p->DataFrame(np.random.randn(48, 4), columns=list('ABCD')).A.plot.bar(figsize=(16, 7), color=color_list)
pandas.tests.plotting.test_misc.TestDataFramePlots(TestPlotBase)
pandas.tests.plotting.test_misc.TestDataFramePlots.test_andrews_curves(self,iris)
pandas.tests.plotting.test_misc.TestDataFramePlots.test_get_standard_colors_default_num_colors(self)
pandas.tests.plotting.test_misc.TestDataFramePlots.test_get_standard_colors_no_appending(self)
pandas.tests.plotting.test_misc.TestDataFramePlots.test_get_standard_colors_random_seed(self)
pandas.tests.plotting.test_misc.TestDataFramePlots.test_parallel_coordinates(self,iris)
pandas.tests.plotting.test_misc.TestDataFramePlots.test_parallel_coordinates_with_sorted_labels(self)
pandas.tests.plotting.test_misc.TestDataFramePlots.test_plot_single_color(self)
pandas.tests.plotting.test_misc.TestDataFramePlots.test_radviz(self,iris)
pandas.tests.plotting.test_misc.TestDataFramePlots.test_scatter_matrix_axis(self)
pandas.tests.plotting.test_misc.TestDataFramePlots.test_subplot_titles(self,iris)
pandas.tests.plotting.test_misc.TestSeriesPlots(TestPlotBase)
pandas.tests.plotting.test_misc.TestSeriesPlots.setup_method(self,method)
pandas.tests.plotting.test_misc.TestSeriesPlots.test_autocorrelation_plot(self)
pandas.tests.plotting.test_misc.TestSeriesPlots.test_bootstrap_plot(self)
pandas.tests.plotting.test_misc.TestSeriesPlots.test_lag_plot(self)
pandas.tests.plotting.test_misc.test_get_accessor_args()
pandas.tests.plotting.test_misc.test_import_error_message()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/plotting/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/plotting/test_groupby.py----------------------------------------
A:pandas.tests.plotting.test_groupby.weight->Series(np.random.normal(166, 20, size=n))
A:pandas.tests.plotting.test_groupby.height->Series(np.random.normal(60, 10, size=n))
A:pandas.tests.plotting.test_groupby.gender->numpy.random.choice(['male', 'female'], size=n)
A:pandas.tests.plotting.test_groupby.df->DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 2, 1], 'z': list('ababa')})
A:pandas.tests.plotting.test_groupby.bins->numpy.arange(80, 100 + 2, 1)
A:pandas.tests.plotting.test_groupby.res->DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 2, 1], 'z': list('ababa')}).groupby('z').plot.scatter(x='x', y='y')
pandas.tests.plotting.test_groupby.TestDataFrameGroupByPlots(TestPlotBase)
pandas.tests.plotting.test_groupby.TestDataFrameGroupByPlots.test_hist_single_row(self)
pandas.tests.plotting.test_groupby.TestDataFrameGroupByPlots.test_plot_kwargs(self)
pandas.tests.plotting.test_groupby.TestDataFrameGroupByPlots.test_plot_submethod_works(self)
pandas.tests.plotting.test_groupby.TestDataFrameGroupByPlots.test_plotting_with_float_index_works(self)
pandas.tests.plotting.test_groupby.TestDataFrameGroupByPlots.test_series_groupby_plotting_nominally_works(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/plotting/test_series.py----------------------------------------
A:pandas.tests.plotting.test_series.self.ts->pandas._testing.makeTimeSeries()
A:pandas.tests.plotting.test_series.self.series->pandas._testing.makeStringSeries()
A:pandas.tests.plotting.test_series.self.iseries->pandas._testing.makePeriodSeries()
A:pandas.tests.plotting.test_series.axes->_check_plot_works(s.plot.kde)
A:pandas.tests.plotting.test_series.ax->pandas.Series([1, 2]).plot(style='s', color='C3')
A:pandas.tests.plotting.test_series.(_, ax)->self.plt.subplots()
A:pandas.tests.plotting.test_series.(fig, ax)->self.plt.subplots(1, 1)
A:pandas.tests.plotting.test_series.(xmin, xmax)->pandas.Series([1, 2]).plot(style='s', color='C3').get_xlim()
A:pandas.tests.plotting.test_series.lines->pandas.Series([1, 2]).plot(style='s', color='C3').get_lines()
A:pandas.tests.plotting.test_series.tz_ts->self.ts.copy()
A:pandas.tests.plotting.test_series.tz_ts.index->self.ts.copy().tz_localize('GMT').tz_convert('CET')
A:pandas.tests.plotting.test_series.s->pandas.Series([1, 2])
A:pandas.tests.plotting.test_series.ts->Series(np.arange(12), index=ix, name='x')
A:pandas.tests.plotting.test_series.masked->pandas.Series([1, 2]).plot(style='s', color='C3').lines[0].get_ydata()
A:pandas.tests.plotting.test_series.exp->numpy.array(list(range(0, 11, 2)))
A:pandas.tests.plotting.test_series.expected->numpy.array([1e-05, 0.0001, 0.001, 0.01, 0.1, 1.0, 10.0])
A:pandas.tests.plotting.test_series.label->pandas.Series([1, 2]).plot(style='s', color='C3').get_xlabel()
A:pandas.tests.plotting.test_series.ax2->Series(np.random.randn(30)).plot(secondary_y=True, logy=input_logy)
A:pandas.tests.plotting.test_series.label2->Series(np.random.randn(30)).plot(secondary_y=True, logy=input_logy).get_xlabel()
A:pandas.tests.plotting.test_series.res->pandas.Series([1, 2]).plot(style='s', color='C3').get_xlim()
A:pandas.tests.plotting.test_series.df->pandas.Series(['a', 'b', 'c'])
A:pandas.tests.plotting.test_series.rng->date_range('1/1/2000', '3/1/2000')
A:pandas.tests.plotting.test_series.ser->Series([0.0, 1.0, np.nan, 3.0, 4.0, 5.0, 6.0], index=[1.0, 0.0, 3.0, 2.0, np.nan, 3.0, 2.0])
A:pandas.tests.plotting.test_series.xp->datetime(1999, 1, 1).toordinal()
A:pandas.tests.plotting.test_series.series->Series([1, 2, np.nan, 4], index=['a', 'b', 'c', 'd'], name='YLABEL')
A:pandas.tests.plotting.test_series.expected_texts->list(chain.from_iterable(zip(series.index, pcts)))
A:pandas.tests.plotting.test_series.(fig, (ax1, ax2))->self.plt.subplots(1, 2)
A:pandas.tests.plotting.test_series.x->Series(randn(2))
A:pandas.tests.plotting.test_series.y->Series(randn(2))
A:pandas.tests.plotting.test_series.fig->gcf()
A:pandas.tests.plotting.test_series.s1->Series(np.random.randn(30))
A:pandas.tests.plotting.test_series.s2->Series(np.random.randn(30))
A:pandas.tests.plotting.test_series.ax1->Series(np.random.randn(30)).plot(logy=input_logy)
A:pandas.tests.plotting.test_series.xlabels->pandas.Series([1, 2]).plot(style='s', color='C3').get_xticklabels()
A:pandas.tests.plotting.test_series.ylabels->pandas.Series([1, 2]).plot(style='s', color='C3').get_yticklabels()
A:pandas.tests.plotting.test_series.sample_points->numpy.linspace(-100, 100, 20)
A:pandas.tests.plotting.test_series.dr1->date_range('1/1/2009', periods=4)
A:pandas.tests.plotting.test_series.dr2->date_range('1/2/2009', periods=4)
A:pandas.tests.plotting.test_series.index->date_range('1/1/2000', periods=12)
A:pandas.tests.plotting.test_series.values->randn(index.size)
A:pandas.tests.plotting.test_series.s_err->numpy.random.randn(10)
A:pandas.tests.plotting.test_series.d_err->DataFrame(randn(10, 2), index=s.index, columns=['x', 'y'])
A:pandas.tests.plotting.test_series.ix->date_range('1/1/2000', '1/1/2001', freq='M')
A:pandas.tests.plotting.test_series.ts_err->Series(np.random.randn(12), index=ix)
A:pandas.tests.plotting.test_series.td_err->DataFrame(randn(12, 2), index=ix, columns=['x', 'y'])
A:pandas.tests.plotting.test_series.result->_get_standard_colors(num_colors=3, color=[c])
A:pandas.tests.plotting.test_series.def_colors->self._unpack_cycler(mpl.rcParams)
A:pandas.tests.plotting.test_series.before->pandas.Series([1, 2]).plot(style='s', color='C3').xaxis.get_ticklocs()
A:pandas.tests.plotting.test_series.after->pandas.Series([1, 2]).plot(style='s', color='C3').xaxis.get_ticklocs()
A:pandas.tests.plotting.test_series.xlims->pandas.Series([1, 2]).plot(style='s', color='C3').get_xlim()
pandas.tests.plotting.test_series.TestSeriesPlots(TestPlotBase)
pandas.tests.plotting.test_series.TestSeriesPlots.setup_method(self,method)
pandas.tests.plotting.test_series.TestSeriesPlots.test_bar_ignore_index(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_bar_log(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_bar_user_colors(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_boolean(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_boxplot_series(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_custom_business_day_freq(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_df_series_secondary_legend(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_dont_modify_rcParams(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_dup_datetime_index_plot(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_dup_dt_index_plot(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_errorbar_plot(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_hist_bins_legacy(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_hist_df_kwargs(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_hist_df_with_nonnumerics(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_hist_kde(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_hist_kde_color(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_hist_kwargs(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_hist_layout(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_hist_layout_with_by(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_hist_legacy(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_hist_no_overlap(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_hist_secondary_legend(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_invalid_kind(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_invalid_plot_data(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_irregular_datetime(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_irregular_dt(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_kde_kwargs(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_kde_missing_vals(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_kind_both_ways(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_label(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_line_area_nan_series(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_line_use_index_false(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_partially_invalid_plot_data(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_pie_nan(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_pie_series(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_plot(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_plot_accessor_updates_on_inplace(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_plot_fails_with_dupe_color_and_style(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_plot_figsize_and_title(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_plot_no_numeric_data(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_plot_no_rows(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_plot_xlim_for_series(self,kind)
pandas.tests.plotting.test_series.TestSeriesPlots.test_rotation(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_secondary_logy(self,input_logy,expected_scale)
pandas.tests.plotting.test_series.TestSeriesPlots.test_series_grid_settings(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_series_plot_color_kwargs(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_standard_colors(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_standard_colors_all(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_style_single_ok(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_table(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_time_series_plot_color_kwargs(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_time_series_plot_color_with_empty_kwargs(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_ts_area_lim(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_ts_line_lim(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_unsorted_index_xlim(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_valid_object_plot(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_xtick_barPlot(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_xticklabels(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/plotting/test_backend.py----------------------------------------
A:pandas.tests.plotting.test_backend.dummy_backend->types.ModuleType('pandas_dummy_backend')
A:pandas.tests.plotting.test_backend.df->pandas.DataFrame({'A': [1, 2, 3]})
A:pandas.tests.plotting.test_backend.dist->pkg_resources.get_distribution('pandas')
A:pandas.tests.plotting.test_backend.mod->types.ModuleType('my_backend')
A:pandas.tests.plotting.test_backend.backends->pkg_resources.get_entry_map('pandas')
A:pandas.tests.plotting.test_backend.my_entrypoint->pkg_resources.EntryPoint('pandas_plotting_backend', mod.__name__, dist=dist)
A:pandas.tests.plotting.test_backend.result->pandas.plotting._core._get_plot_backend()
A:pandas.tests.plotting.test_backend.module->types.ModuleType('pandas_plot_backend')
pandas.tests.plotting.test_backend.restore_backend()
pandas.tests.plotting.test_backend.test_backend_can_be_set_in_plot_call(monkeypatch,restore_backend)
pandas.tests.plotting.test_backend.test_backend_is_correct(monkeypatch,restore_backend)
pandas.tests.plotting.test_backend.test_backend_is_not_module()
pandas.tests.plotting.test_backend.test_extra_kinds_ok(monkeypatch,restore_backend)
pandas.tests.plotting.test_backend.test_no_matplotlib_ok()
pandas.tests.plotting.test_backend.test_register_entrypoint(restore_backend)
pandas.tests.plotting.test_backend.test_setting_backend_without_plot_raises()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/plotting/test_converter.py----------------------------------------
A:pandas.tests.plotting.test_converter.plt->pytest.importorskip('matplotlib.pyplot')
A:pandas.tests.plotting.test_converter.s->Series(range(12), index=date_range('2017', periods=12))
A:pandas.tests.plotting.test_converter.(_, ax)->pytest.importorskip('matplotlib.pyplot').subplots()
A:pandas.tests.plotting.test_converter.units->pytest.importorskip('matplotlib.units')
A:pandas.tests.plotting.test_converter.ctx->pandas._config.config.option_context('plotting.matplotlib.register_converters', False)
A:pandas.tests.plotting.test_converter.dates->pytest.importorskip('matplotlib.dates')
A:pandas.tests.plotting.test_converter.original->dict(units.registry)
A:pandas.tests.plotting.test_converter.date_converter->pytest.importorskip('matplotlib.dates').DateConverter()
A:pandas.tests.plotting.test_converter.self.dtc->pandas.plotting._matplotlib.converter.DatetimeConverter()
A:pandas.tests.plotting.test_converter.self.tc->pandas.plotting._matplotlib.converter.TimeFormatter(None)
A:pandas.tests.plotting.test_converter.r1->self.pc.convert([data, data], None, self.axis)
A:pandas.tests.plotting.test_converter.r2->self.pc.convert('2012-1-1', None, self.axis)
A:pandas.tests.plotting.test_converter.xp->pandas.plotting._matplotlib.converter.dates.date2num(dateindex._mpl_repr())
A:pandas.tests.plotting.test_converter.rs->self.pc.convert([0, 1], None, self.axis)
A:pandas.tests.plotting.test_converter.ts->Timestamp('2012-1-1')
A:pandas.tests.plotting.test_converter.result->tdc.format_timedelta_ticks(x, pos=None, n_decimals=decimal)
A:pandas.tests.plotting.test_converter.dateindex->pandas._testing.makeDateIndex(k=10, freq=freq)
A:pandas.tests.plotting.test_converter.val1->self.dtc.convert(ts1, None, None)
A:pandas.tests.plotting.test_converter.val2->self.dtc.convert(ts2, None, None)
A:pandas.tests.plotting.test_converter.self.pc->pandas.plotting._matplotlib.converter.PeriodConverter()
A:pandas.tests.plotting.test_converter.self.axis->Axis()
pandas.tests.plotting.test_converter.TestDateTimeConverter
pandas.tests.plotting.test_converter.TestDateTimeConverter.setup_method(self,method)
pandas.tests.plotting.test_converter.TestDateTimeConverter.test_conversion(self)
pandas.tests.plotting.test_converter.TestDateTimeConverter.test_conversion_float(self)
pandas.tests.plotting.test_converter.TestDateTimeConverter.test_conversion_outofbounds_datetime(self)
pandas.tests.plotting.test_converter.TestDateTimeConverter.test_conversion_outofbounds_dt(self)
pandas.tests.plotting.test_converter.TestDateTimeConverter.test_convert_accepts_unicode(self)
pandas.tests.plotting.test_converter.TestDateTimeConverter.test_convert_nested(self)
pandas.tests.plotting.test_converter.TestDateTimeConverter.test_dateindex_conversion(self)
pandas.tests.plotting.test_converter.TestDateTimeConverter.test_resolution(self)
pandas.tests.plotting.test_converter.TestDateTimeConverter.test_time_formatter(self,time,format_expected)
pandas.tests.plotting.test_converter.TestPeriodConverter
pandas.tests.plotting.test_converter.TestPeriodConverter.setup_method(self,method)
pandas.tests.plotting.test_converter.TestPeriodConverter.test_conversion(self)
pandas.tests.plotting.test_converter.TestPeriodConverter.test_convert_accepts_unicode(self)
pandas.tests.plotting.test_converter.TestPeriodConverter.test_convert_nested(self)
pandas.tests.plotting.test_converter.TestPeriodConverter.test_integer_passthrough(self)
pandas.tests.plotting.test_converter.TestRegistration
pandas.tests.plotting.test_converter.TestRegistration.test_matplotlib_formatters(self)
pandas.tests.plotting.test_converter.TestRegistration.test_option_no_warning(self)
pandas.tests.plotting.test_converter.TestRegistration.test_pandas_plots_register(self)
pandas.tests.plotting.test_converter.TestRegistration.test_register_by_default(self)
pandas.tests.plotting.test_converter.TestRegistration.test_registering_no_warning(self)
pandas.tests.plotting.test_converter.TestRegistration.test_registry_resets(self)
pandas.tests.plotting.test_converter.TestTimeDeltaConverter
pandas.tests.plotting.test_converter.TestTimeDeltaConverter.test_format_timedelta_ticks(self,x,decimal,format_expected)
pandas.tests.plotting.test_converter.test_registry_mpl_resets()
pandas.tests.plotting.test_converter.test_timtetonum_accepts_unicode()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/plotting/test_hist_method.py----------------------------------------
A:pandas.tests.plotting.test_hist_method.self.ts->pandas._testing.makeTimeSeries()
A:pandas.tests.plotting.test_hist_method.(fig, ax)->self.plt.subplots(1, 1)
A:pandas.tests.plotting.test_hist_method.(fig, (ax1, ax2))->self.plt.subplots(1, 2)
A:pandas.tests.plotting.test_hist_method.df->DataFrame(randn(500, 2), columns=['A', 'B'])
A:pandas.tests.plotting.test_hist_method.axes->DataFrame(randn(500, 2), columns=['A', 'B']).hist(column='height', ax=axes)
A:pandas.tests.plotting.test_hist_method.x->Series(randn(2))
A:pandas.tests.plotting.test_hist_method.y->Series(randn(2))
A:pandas.tests.plotting.test_hist_method.fig->gcf()
A:pandas.tests.plotting.test_hist_method.fig1->figure()
A:pandas.tests.plotting.test_hist_method.fig2->figure()
A:pandas.tests.plotting.test_hist_method.ax1->figure().add_subplot(111)
A:pandas.tests.plotting.test_hist_method.ax->ser.hist(log=True)
A:pandas.tests.plotting.test_hist_method.df_o->DataFrame(randn(500, 2), columns=['A', 'B']).astype(np.object)
A:pandas.tests.plotting.test_hist_method.df['C']->numpy.random.randint(0, 4, 500)
A:pandas.tests.plotting.test_hist_method.height->Series(np.random.normal(60, 10, size=n))
A:pandas.tests.plotting.test_hist_method.weight->Series(np.random.normal(166, 20, size=n))
A:pandas.tests.plotting.test_hist_method.gender_int->numpy.random.choice([0, 1], size=n)
A:pandas.tests.plotting.test_hist_method.df_int->DataFrame({'height': height, 'weight': weight, 'gender': gender_int})
A:pandas.tests.plotting.test_hist_method.gb->DataFrame({'height': height, 'weight': weight, 'gender': gender_int}).groupby('gender')
A:pandas.tests.plotting.test_hist_method.(fig, axes)->self.plt.subplots(2, 3)
A:pandas.tests.plotting.test_hist_method.returned->DataFrame(randn(500, 2), columns=['A', 'B']).hist(by='classroom', ax=axes[1])
A:pandas.tests.plotting.test_hist_method.(ax1, ax2)->DataFrame(randn(500, 2), columns=['A', 'B']).hist(column='height', by=df.gender, sharex=True, sharey=True)
pandas.tests.plotting.test_hist_method.TestDataFrameGroupByPlots(TestPlotBase)
pandas.tests.plotting.test_hist_method.TestDataFrameGroupByPlots.test_axis_share_x(self)
pandas.tests.plotting.test_hist_method.TestDataFrameGroupByPlots.test_axis_share_xy(self)
pandas.tests.plotting.test_hist_method.TestDataFrameGroupByPlots.test_axis_share_y(self)
pandas.tests.plotting.test_hist_method.TestDataFrameGroupByPlots.test_grouped_hist_layout(self)
pandas.tests.plotting.test_hist_method.TestDataFrameGroupByPlots.test_grouped_hist_legacy(self)
pandas.tests.plotting.test_hist_method.TestDataFrameGroupByPlots.test_grouped_hist_legacy2(self)
pandas.tests.plotting.test_hist_method.TestDataFrameGroupByPlots.test_grouped_hist_multiple_axes(self)
pandas.tests.plotting.test_hist_method.TestDataFramePlots(TestPlotBase)
pandas.tests.plotting.test_hist_method.TestDataFramePlots.test_hist_df_legacy(self)
pandas.tests.plotting.test_hist_method.TestDataFramePlots.test_hist_layout(self)
pandas.tests.plotting.test_hist_method.TestDataFramePlots.test_hist_non_numerical_raises(self)
pandas.tests.plotting.test_hist_method.TestDataFramePlots.test_hist_subplot_xrot(self)
pandas.tests.plotting.test_hist_method.TestDataFramePlots.test_tight_layout(self)
pandas.tests.plotting.test_hist_method.TestSeriesPlots(TestPlotBase)
pandas.tests.plotting.test_hist_method.TestSeriesPlots.setup_method(self,method)
pandas.tests.plotting.test_hist_method.TestSeriesPlots.test_hist_bins_legacy(self)
pandas.tests.plotting.test_hist_method.TestSeriesPlots.test_hist_by_no_extra_plots(self)
pandas.tests.plotting.test_hist_method.TestSeriesPlots.test_hist_layout(self)
pandas.tests.plotting.test_hist_method.TestSeriesPlots.test_hist_layout_with_by(self)
pandas.tests.plotting.test_hist_method.TestSeriesPlots.test_hist_legacy(self)
pandas.tests.plotting.test_hist_method.TestSeriesPlots.test_hist_no_overlap(self)
pandas.tests.plotting.test_hist_method.TestSeriesPlots.test_plot_fails_when_ax_differs_from_figure(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/plotting/test_boxplot_method.py----------------------------------------
A:pandas.tests.plotting.test_boxplot_method.df->DataFrame({'a': [1, 2, 3, 4, 5, 6], 'b': [0, 0, 0, 1, 1, 1]})
A:pandas.tests.plotting.test_boxplot_method.df['X']->Series(['A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B'])
A:pandas.tests.plotting.test_boxplot_method.df['Y']->Series(['A'] * 10)
A:pandas.tests.plotting.test_boxplot_method.(fig, ax)->self.plt.subplots()
A:pandas.tests.plotting.test_boxplot_method.axes->DataFrame({'a': [1, 2, 3, 4, 5, 6], 'b': [0, 0, 0, 1, 1, 1]}).groupby('classroom').boxplot(ax=axes)
A:pandas.tests.plotting.test_boxplot_method.d->DataFrame({'a': [1, 2, 3, 4, 5, 6], 'b': [0, 0, 0, 1, 1, 1]}).boxplot(ax=ax, return_type='dict')
A:pandas.tests.plotting.test_boxplot_method.lines->list(itertools.chain.from_iterable(d.values()))
A:pandas.tests.plotting.test_boxplot_method.result->DataFrame({'a': [1, 2, 3, 4, 5, 6], 'b': [0, 0, 0, 1, 1, 1]}).groupby('gender').boxplot(return_type='dict')
A:pandas.tests.plotting.test_boxplot_method.(y_min, y_max)->df.plot(kind='box').get_ylim()
A:pandas.tests.plotting.test_boxplot_method.df['age']->numpy.random.randint(1, 20, df.shape[0])
A:pandas.tests.plotting.test_boxplot_method.(height_ax, weight_ax)->DataFrame({'a': [1, 2, 3, 4, 5, 6], 'b': [0, 0, 0, 1, 1, 1]}).boxplot(['height', 'weight'], by='category')
A:pandas.tests.plotting.test_boxplot_method.p->DataFrame({'a': [1, 2, 3, 4, 5, 6], 'b': [0, 0, 0, 1, 1, 1]}).boxplot(['height', 'weight', 'age'], by='category')
A:pandas.tests.plotting.test_boxplot_method.ax->DataFrame({'a': [1, 2, 3, 4, 5, 6], 'b': [0, 0, 0, 1, 1, 1]}).plot(kind='box')
A:pandas.tests.plotting.test_boxplot_method.grouped->DataFrame({'a': [1, 2, 3, 4, 5, 6], 'b': [0, 0, 0, 1, 1, 1]}).unstack(level=1).groupby(level=0, axis=1)
A:pandas.tests.plotting.test_boxplot_method.tuples->zip(string.ascii_letters[:10], range(10))
A:pandas.tests.plotting.test_boxplot_method.weight->Series(np.random.normal(166, 20, size=n))
A:pandas.tests.plotting.test_boxplot_method.height->Series(np.random.normal(60, 10, size=n))
A:pandas.tests.plotting.test_boxplot_method.gender->numpy.random.choice(['male', 'female'], size=n)
A:pandas.tests.plotting.test_boxplot_method.gb->DataFrame({'a': [1, 2, 3, 4, 5, 6], 'b': [0, 0, 0, 1, 1, 1]}).groupby('gender')
A:pandas.tests.plotting.test_boxplot_method.res->DataFrame({'a': [1, 2, 3, 4, 5, 6], 'b': [0, 0, 0, 1, 1, 1]}).groupby('gender').hist()
A:pandas.tests.plotting.test_boxplot_method.columns2->'X B C D A G Y N Q O'.split()
A:pandas.tests.plotting.test_boxplot_method.df2->DataFrame(random.randn(50, 10), columns=columns2)
A:pandas.tests.plotting.test_boxplot_method.categories2->'A B C D E F G H I J'.split()
A:pandas.tests.plotting.test_boxplot_method.returned->numpy.array(list(returned.values))
A:pandas.tests.plotting.test_boxplot_method.box->DataFrame({'a': [1, 2, 3, 4, 5, 6], 'b': [0, 0, 0, 1, 1, 1]}).groupby('classroom').boxplot(column=['height', 'weight', 'category'], layout=(1, -1), return_type='dict')
A:pandas.tests.plotting.test_boxplot_method.(fig, axes)->self.plt.subplots(2, 3)
pandas.tests.plotting.test_boxplot_method.TestDataFrameGroupByPlots(TestPlotBase)
pandas.tests.plotting.test_boxplot_method.TestDataFrameGroupByPlots.test_boxplot_legacy1(self)
pandas.tests.plotting.test_boxplot_method.TestDataFrameGroupByPlots.test_boxplot_legacy2(self)
pandas.tests.plotting.test_boxplot_method.TestDataFrameGroupByPlots.test_boxplot_legacy3(self)
pandas.tests.plotting.test_boxplot_method.TestDataFrameGroupByPlots.test_fontsize(self)
pandas.tests.plotting.test_boxplot_method.TestDataFrameGroupByPlots.test_grouped_box_layout(self)
pandas.tests.plotting.test_boxplot_method.TestDataFrameGroupByPlots.test_grouped_box_multiple_axes(self)
pandas.tests.plotting.test_boxplot_method.TestDataFrameGroupByPlots.test_grouped_box_return_type(self)
pandas.tests.plotting.test_boxplot_method.TestDataFrameGroupByPlots.test_grouped_plot_fignums(self)
pandas.tests.plotting.test_boxplot_method.TestDataFramePlots(TestPlotBase)
pandas.tests.plotting.test_boxplot_method.TestDataFramePlots.test_boxplot_axis_limits(self)
pandas.tests.plotting.test_boxplot_method.TestDataFramePlots.test_boxplot_empty_column(self)
pandas.tests.plotting.test_boxplot_method.TestDataFramePlots.test_boxplot_legacy1(self)
pandas.tests.plotting.test_boxplot_method.TestDataFramePlots.test_boxplot_legacy2(self)
pandas.tests.plotting.test_boxplot_method.TestDataFramePlots.test_boxplot_numeric_data(self)
pandas.tests.plotting.test_boxplot_method.TestDataFramePlots.test_boxplot_return_type_legacy(self)
pandas.tests.plotting.test_boxplot_method.TestDataFramePlots.test_boxplot_return_type_none(self)
pandas.tests.plotting.test_boxplot_method.TestDataFramePlots.test_color_kwd(self,colors_kwd,expected)
pandas.tests.plotting.test_boxplot_method.TestDataFramePlots.test_color_kwd_errors(self,dict_colors,msg)
pandas.tests.plotting.test_boxplot_method.TestDataFramePlots.test_figsize(self)
pandas.tests.plotting.test_boxplot_method.TestDataFramePlots.test_fontsize(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/plotting/test_datetimelike.py----------------------------------------
A:pandas.tests.plotting.test_datetimelike.index->timedelta_range('1 day 2 hr 30 min 10 s', periods=10, freq='1 ns')
A:pandas.tests.plotting.test_datetimelike.ts->Series(1, index=rng)
A:pandas.tests.plotting.test_datetimelike.df->DataFrame(np.random.RandomState(0).rand(10, 2), columns=['x', 'y'])
A:pandas.tests.plotting.test_datetimelike.(fig, ax)->self.plt.subplots()
A:pandas.tests.plotting.test_datetimelike.idx->idx[[0, 2, 5, 9]].astype(object)
A:pandas.tests.plotting.test_datetimelike.df2->DataFrame(np.random.RandomState(0).rand(10, 2), columns=['x', 'y']).copy()
A:pandas.tests.plotting.test_datetimelike.i->numpy.array([1, 2, 3])
A:pandas.tests.plotting.test_datetimelike.a->DataFrame(i, index=i)
A:pandas.tests.plotting.test_datetimelike.(_, ax)->self.plt.subplots()
A:pandas.tests.plotting.test_datetimelike.s->Series(np.random.randn(10), index=date_range('1970-01-02', periods=10))
A:pandas.tests.plotting.test_datetimelike.rng->date_range('1/1/2011', periods=10, freq='H')
A:pandas.tests.plotting.test_datetimelike.ser->Series(np.random.randn(10))
A:pandas.tests.plotting.test_datetimelike.annual->Series(1, index=date_range('2014-01-01', periods=3, freq='A-DEC'))
A:pandas.tests.plotting.test_datetimelike.daily->Series(1, index=date_range('2014-01-01', periods=3, freq='D'))
A:pandas.tests.plotting.test_datetimelike.dr->Index([datetime(2000, 1, 1), datetime(2000, 1, 6), datetime(2000, 1, 11)])
A:pandas.tests.plotting.test_datetimelike.axis->fig.add_subplot(212).get_xaxis()
A:pandas.tests.plotting.test_datetimelike.tlocs->fig.add_subplot(212).get_xaxis().get_ticklocs()
A:pandas.tests.plotting.test_datetimelike.tlabels->fig.add_subplot(212).get_xaxis().get_ticklabels()
A:pandas.tests.plotting.test_datetimelike.xp->time(h, m, s, us).strftime('%H:%M')
A:pandas.tests.plotting.test_datetimelike.rs->l.get_text()
A:pandas.tests.plotting.test_datetimelike.diffs->Series(ax.get_lines()[0].get_xydata()[:, 0]).diff()
A:pandas.tests.plotting.test_datetimelike.df2.index->DataFrame(np.random.RandomState(0).rand(10, 2), columns=['x', 'y']).index.astype(object)
A:pandas.tests.plotting.test_datetimelike.ret->f(*args, **kwargs)
A:pandas.tests.plotting.test_datetimelike.bts->DataFrame({'a': tm.makeTimeSeries()})
A:pandas.tests.plotting.test_datetimelike.xlim->fig.add_subplot(212).get_xlim()
A:pandas.tests.plotting.test_datetimelike.result->fig.add_subplot(212).get_xlim()
A:pandas.tests.plotting.test_datetimelike.fig->matplotlib.pyplot.gcf()
A:pandas.tests.plotting.test_datetimelike.axes->DataFrame(np.random.RandomState(0).rand(10, 2), columns=['x', 'y']).plot(kind='bar', secondary_y=['a', 'c'], subplots=True)
A:pandas.tests.plotting.test_datetimelike.xaxis->fig.add_subplot(212).get_xaxis()
A:pandas.tests.plotting.test_datetimelike.(vmin, vmax)->fig.add_subplot(212).get_xlim()
A:pandas.tests.plotting.test_datetimelike.lines->fig.add_subplot(212).plot(x, y, label='Y')
A:pandas.tests.plotting.test_datetimelike.data->numpy.ma.MaskedArray(data, mask=isna(data), fill_value=np.nan)
A:pandas.tests.plotting.test_datetimelike.ax->matplotlib.pyplot.gcf().add_subplot(212)
A:pandas.tests.plotting.test_datetimelike.low->Series(np.random.randn(len(idxl)), idxl)
A:pandas.tests.plotting.test_datetimelike.idxh->date_range('1/1/1999', periods=365, freq='D')
A:pandas.tests.plotting.test_datetimelike.ser2->Series(np.random.randn(10), idx)
A:pandas.tests.plotting.test_datetimelike.(fig, _)->self.plt.subplots()
A:pandas.tests.plotting.test_datetimelike.(_, ax2)->self.plt.subplots()
A:pandas.tests.plotting.test_datetimelike.ax2->ax1.twinx()
A:pandas.tests.plotting.test_datetimelike.s1->Series([1, 2, 3], index=[datetime(1995, 12, 31), datetime(2000, 12, 31), datetime(2005, 12, 31)])
A:pandas.tests.plotting.test_datetimelike.idx1->date_range('2015-01-01', periods=3, freq='M')
A:pandas.tests.plotting.test_datetimelike.idx2->idx1[:1].union(idx1[2:])
A:pandas.tests.plotting.test_datetimelike.(left, right)->matplotlib.pyplot.gcf().add_subplot(212).get_xlim()
A:pandas.tests.plotting.test_datetimelike.pidx->Series([1, 2, 3], index=[datetime(1995, 12, 31), datetime(2000, 12, 31), datetime(2005, 12, 31)]).index.to_period()
A:pandas.tests.plotting.test_datetimelike.x1->lines[0].get_xdata()
A:pandas.tests.plotting.test_datetimelike.x2->lines[1].get_xdata()
A:pandas.tests.plotting.test_datetimelike.idxl->date_range('1/1/1999', periods=12, freq='M')
A:pandas.tests.plotting.test_datetimelike.high->Series(np.random.randn(len(idxh)), idxh)
A:pandas.tests.plotting.test_datetimelike.ts_ind->date_range('2012-01-01 13:00', '2012-01-02', freq='H')
A:pandas.tests.plotting.test_datetimelike.ts_data->numpy.random.randn(12)
A:pandas.tests.plotting.test_datetimelike.ts2->Series(1, index=rng).asfreq('T').interpolate()
A:pandas.tests.plotting.test_datetimelike.leg->matplotlib.pyplot.gcf().add_subplot(212).get_legend()
A:pandas.tests.plotting.test_datetimelike.ps->Series(np.random.randn(len(rng)), rng)
A:pandas.tests.plotting.test_datetimelike.s2->Series([1, 2, 3], index=[datetime(1997, 12, 31), datetime(2003, 12, 31), datetime(2008, 12, 31)])
A:pandas.tests.plotting.test_datetimelike.(fig, (ax1, ax2))->self.plt.subplots(nrows=2, sharex=True)
A:pandas.tests.plotting.test_datetimelike.(fig, ax1)->self.plt.subplots()
A:pandas.tests.plotting.test_datetimelike.dti->DatetimeIndex(['2015-01-01', NaT, '2015-01-03'])
A:pandas.tests.plotting.test_datetimelike.xdata->l.get_xdata(orig=False)
A:pandas.tests.plotting.test_datetimelike.expected_h->date_range('1/1/1999', periods=365, freq='D').to_period().asi8.astype(np.float64)
A:pandas.tests.plotting.test_datetimelike.expected_l->numpy.array([1514, 1519, 1523, 1527, 1531, 1536, 1540, 1544, 1549, 1553, 1558, 1562], dtype=np.float64)
A:pandas.tests.plotting.test_datetimelike.expected_x->numpy.array([1514, 1519, 1523, 1527, 1531, 1536, 1540, 1544, 1549, 1553, 1558, 1562], dtype=np.float64)
A:pandas.tests.plotting.test_datetimelike.expected_y->numpy.zeros(len(expected_x), dtype=np.float64)
A:pandas.tests.plotting.test_datetimelike.t->datetime(1, 1, 1, 3, 30, 0)
A:pandas.tests.plotting.test_datetimelike.deltas->numpy.random.randint(1, 20, 3).cumsum()
A:pandas.tests.plotting.test_datetimelike.ticks->matplotlib.pyplot.gcf().add_subplot(212).get_xticks()
A:pandas.tests.plotting.test_datetimelike.labels->matplotlib.pyplot.gcf().add_subplot(212).get_xticklabels()
A:pandas.tests.plotting.test_datetimelike.(m, s)->divmod(int(t), 60)
A:pandas.tests.plotting.test_datetimelike.(h, m)->divmod(m, 60)
A:pandas.tests.plotting.test_datetimelike.us->int(round((t - int(t)) * 1000000.0))
A:pandas.tests.plotting.test_datetimelike.colors->set()
A:pandas.tests.plotting.test_datetimelike.x->date_range(start='2012-01-02', periods=10, freq='D')
A:pandas.tests.plotting.test_datetimelike.y->list(range(len(x)))
A:pandas.tests.plotting.test_datetimelike.values1->numpy.arange(10.0, 11.0, 0.5)
A:pandas.tests.plotting.test_datetimelike.values2->numpy.arange(11.0, 12.0, 0.5)
A:pandas.tests.plotting.test_datetimelike.kw->dict(fmt='-', lw=4)
A:pandas.tests.plotting.test_datetimelike.(line1, line2)->matplotlib.pyplot.gcf().add_subplot(212).get_lines()
A:pandas.tests.plotting.test_datetimelike.exp->numpy.array([x.toordinal() for x in dates], dtype=np.float64)
A:pandas.tests.plotting.test_datetimelike.(left_before, right_before)->matplotlib.pyplot.gcf().add_subplot(212).get_xlim()
A:pandas.tests.plotting.test_datetimelike.(left_after, right_after)->matplotlib.pyplot.gcf().add_subplot(212).get_xlim()
A:pandas.tests.plotting.test_datetimelike.index_1->date_range(start='2000-01-01', periods=4, freq='D')
A:pandas.tests.plotting.test_datetimelike.index_2->date_range(start='2000-01-05', periods=4, freq='D')
A:pandas.tests.plotting.test_datetimelike.w1->numpy.arange(0, 1, 0.1)
A:pandas.tests.plotting.test_datetimelike.df['time']->date_range('2018-01-01', periods=10, freq='D')
A:pandas.tests.plotting.test_datetimelike.orig_ax->kwargs.pop('ax', plt.gca())
A:pandas.tests.plotting.test_datetimelike.orig_axfreq->getattr(orig_ax, 'freq', None)
pandas.tests.plotting.test_datetimelike.TestTSPlot(TestPlotBase)
pandas.tests.plotting.test_datetimelike.TestTSPlot.setup_method(self,method)
pandas.tests.plotting.test_datetimelike.TestTSPlot.teardown_method(self,method)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_add_matplotlib_datetime64(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_ax_plot(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_axis_limits(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_both_style_and_color(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_business_freq(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_business_freq_convert(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_dataframe(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_fake_inferred_business(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_finder_annual(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_finder_daily(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_finder_hourly(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_finder_minutely(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_finder_monthly(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_finder_monthly_long(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_finder_quarterly(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_fontsize_set_correctly(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_format_date_axis(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_format_timedelta_ticks_narrow(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_format_timedelta_ticks_wide(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_frame_inferred(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_from_resampling_area_line_mixed(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_from_weekly_resampling(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_gap_upsample(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_gaps(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_get_datevalue(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_get_finder(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_high_freq(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_hist(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_irreg_dtypes(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_irreg_hf(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_irregular_datetime64_repr_bug(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_irregular_ts_shared_ax_xlim(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_is_error_nozeroindex(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_line_plot_datetime_frame(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_line_plot_datetime_series(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_line_plot_inferred_freq(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_line_plot_period_frame(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_line_plot_period_mlt_frame(self,frqncy)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_line_plot_period_mlt_series(self,frqncy)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_line_plot_period_series(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_matplotlib_scatter_datetime64(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_mixed_freq_alignment(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_mixed_freq_hf_first(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_mixed_freq_irreg_period(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_mixed_freq_irregular_first(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_mixed_freq_irregular_first_df(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_mixed_freq_lf_first(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_mixed_freq_regular_first(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_mixed_freq_regular_first_df(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_mixed_freq_second_millisecond(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_mixed_freq_shared_ax(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_mpl_nopandas(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_nat_handling(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_nonnumeric_exclude(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_nonzero_base(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_overlapping_datetime(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_plot_multiple_inferred_freq(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_plot_offset_freq(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_plot_outofbounds_datetime(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_bar(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_bar_frame(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_frame(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_kde(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_legend(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_upsample(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_y(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_y_irregular_ts_xlim(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_y_mixed_freq_ts_xlim(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_y_non_ts_xlim(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_y_regular_ts_xlim(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_y_ts(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_time(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_time_change_xlim(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_time_musec(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_timedelta_plot(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_to_weekly_resampling(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_ts_plot_format_coord(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_ts_plot_with_tz(self,tz_aware_fixture)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_tsplot(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_uhf(self)
pandas.tests.plotting.test_datetimelike._check_plot_works(f,freq=None,series=None,*args,**kwargs)
pandas.tests.plotting.test_dtlike.TestTSPlot(TestPlotBase)
pandas.tests.plotting.test_dtlike.TestTSPlot.setup_method(self,method)
pandas.tests.plotting.test_dtlike.TestTSPlot.teardown_method(self,method)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_add_matplotlib_dt64(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_ax_plot(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_axis_limits(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_both_style_and_color(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_business_freq(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_business_freq_convert(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_dataframe(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_fake_inferred_business(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_finder_annual(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_finder_daily(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_finder_hourly(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_finder_minutely(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_finder_monthly(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_finder_monthly_long(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_finder_quarterly(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_fontsize_set_correctly(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_format_date_axis(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_format_timedelta_ticks_narrow(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_format_timedelta_ticks_wide(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_frame_inferred(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_from_resampling_area_line_mixed(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_from_weekly_resampling(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_gap_upsample(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_gaps(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_get_datevalue(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_get_finder(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_high_freq(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_hist(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_irreg_dtypes(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_irreg_hf(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_irregular_dt64_repr_bug(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_irregular_ts_shared_ax_xlim(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_is_error_nozeroindex(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_line_plot_dt_frame(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_line_plot_dt_series(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_line_plot_inferred_freq(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_line_plot_period_frame(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_line_plot_period_mlt_frame(self,frqncy)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_line_plot_period_mlt_series(self,frqncy)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_line_plot_period_series(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_matplotlib_scatter_dt64(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_mixed_freq_alignment(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_mixed_freq_hf_first(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_mixed_freq_irreg_period(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_mixed_freq_irregular_first(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_mixed_freq_irregular_first_df(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_mixed_freq_lf_first(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_mixed_freq_regular_first(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_mixed_freq_regular_first_df(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_mixed_freq_second_millisecond(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_mixed_freq_shared_ax(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_mpl_nopandas(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_nat_handling(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_nonnumeric_exclude(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_nonzero_base(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_overlapping_dt(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_plot_multiple_inferred_freq(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_plot_offset_freq(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_plot_outofbounds_dt(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_secondary_bar(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_secondary_bar_frame(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_secondary_frame(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_secondary_kde(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_secondary_legend(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_secondary_upsample(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_secondary_y(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_secondary_y_irregular_ts_xlim(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_secondary_y_mixed_freq_ts_xlim(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_secondary_y_non_ts_xlim(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_secondary_y_regular_ts_xlim(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_secondary_y_ts(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_time(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_time_change_xlim(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_time_musec(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_timedelta_plot(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_to_weekly_resampling(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_ts_plot_format_coord(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_ts_plot_with_tz(self,tz_aware_fixture)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_tsplot(self)
pandas.tests.plotting.test_dtlike.TestTSPlot.test_uhf(self)
pandas.tests.plotting.test_dtlike._check_plot_works(f,freq=None,series=None,*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/plotting/common.py----------------------------------------
A:pandas.tests.plotting.common.self.mpl_ge_2_2_3->pandas.plotting._matplotlib.compat._mpl_ge_2_2_3()
A:pandas.tests.plotting.common.self.mpl_ge_3_0_0->pandas.plotting._matplotlib.compat._mpl_ge_3_0_0()
A:pandas.tests.plotting.common.self.mpl_ge_3_1_0->pandas.plotting._matplotlib.compat._mpl_ge_3_1_0()
A:pandas.tests.plotting.common.self.mpl_ge_3_2_0->pandas.plotting._matplotlib.compat._mpl_ge_3_2_0()
A:pandas.tests.plotting.common.gender->numpy.random.choice(['Male', 'Female'], size=n)
A:pandas.tests.plotting.common.classroom->numpy.random.choice(['A', 'B', 'C'], size=n)
A:pandas.tests.plotting.common.self.hist_df->DataFrame({'gender': gender, 'classroom': classroom, 'height': random.normal(66, 4, size=n), 'weight': random.normal(161, 32, size=n), 'category': random.randint(4, size=n)})
A:pandas.tests.plotting.common.self.tdf->pandas._testing.makeTimeDataFrame()
A:pandas.tests.plotting.common.self.hexbin_df->DataFrame({'A': np.random.uniform(size=20), 'B': np.random.uniform(size=20), 'C': np.arange(20) + np.random.uniform(size=20)})
A:pandas.tests.plotting.common.axes->self._flatten_visible(axes)
A:pandas.tests.plotting.common.(handles, _)->ax.get_legend_handles_labels()
A:pandas.tests.plotting.common.xp_lines->xp.get_lines()
A:pandas.tests.plotting.common.rs_lines->rs.get_lines()
A:pandas.tests.plotting.common.xpdata->xpl.get_xydata()
A:pandas.tests.plotting.common.rsdata->rsl.get_xydata()
A:pandas.tests.plotting.common.unique->series.unique()
A:pandas.tests.plotting.common.mapped->dict(zip(unique, colors))
A:pandas.tests.plotting.common.linecolors->self._get_colors_mapped(mapping, linecolors)
A:pandas.tests.plotting.common.result->self._get_axes_layout(_flatten(axes))
A:pandas.tests.plotting.common.expected->conv.to_rgba(color)
A:pandas.tests.plotting.common.facecolors->self._get_colors_mapped(mapping, facecolors)
A:pandas.tests.plotting.common.labels->ax.get_yticklabels()
A:pandas.tests.plotting.common.visible_axes->self._flatten_visible(axes)
A:pandas.tests.plotting.common.x_set->set()
A:pandas.tests.plotting.common.y_set->set()
A:pandas.tests.plotting.common.points->ax.get_position().get_points()
A:pandas.tests.plotting.common.has_xerr->getattr(c, 'has_xerr', False)
A:pandas.tests.plotting.common.has_yerr->getattr(c, 'has_yerr', False)
A:pandas.tests.plotting.common.xticks->self.plt.gca().xaxis.get_major_ticks()
A:pandas.tests.plotting.common.yticks->self.plt.gca().yaxis.get_major_ticks()
A:pandas.tests.plotting.common.xoff->all((not g.gridOn for g in xticks))
A:pandas.tests.plotting.common.yoff->all((not g.gridOn for g in yticks))
A:pandas.tests.plotting.common.fig->matplotlib.pyplot.gcf()
A:pandas.tests.plotting.common.ret->f(**kwargs)
A:pandas.tests.plotting.common.kwargs['ax']->matplotlib.pyplot.gcf().add_subplot(212)
A:pandas.tests.plotting.common.(pth, _)->os.path.split(os.path.abspath(__file__))
pandas.tests.plotting.common.TestPlotBase
pandas.tests.plotting.common.TestPlotBase._check_ax_scales(self,axes,xaxis='linear',yaxis='linear')
pandas.tests.plotting.common.TestPlotBase._check_axes_shape(self,axes,axes_num=None,layout=None,figsize=None)
pandas.tests.plotting.common.TestPlotBase._check_box_return_type(self,returned,return_type,expected_keys=None,check_ax_title=True)
pandas.tests.plotting.common.TestPlotBase._check_colors(self,collections,linecolors=None,facecolors=None,mapping=None)
pandas.tests.plotting.common.TestPlotBase._check_data(self,xp,rs)
pandas.tests.plotting.common.TestPlotBase._check_grid_settings(self,obj,kinds,kws={})
pandas.tests.plotting.common.TestPlotBase._check_has_errorbars(self,axes,xerr=0,yerr=0)
pandas.tests.plotting.common.TestPlotBase._check_legend_labels(self,axes,labels=None,visible=True)
pandas.tests.plotting.common.TestPlotBase._check_legend_marker(self,ax,expected_markers=None,visible=True)
pandas.tests.plotting.common.TestPlotBase._check_text_labels(self,texts,expected)
pandas.tests.plotting.common.TestPlotBase._check_ticks_props(self,axes,xlabelsize=None,xrot=None,ylabelsize=None,yrot=None)
pandas.tests.plotting.common.TestPlotBase._check_visible(self,collections,visible=True)
pandas.tests.plotting.common.TestPlotBase._flatten_visible(self,axes)
pandas.tests.plotting.common.TestPlotBase._get_axes_layout(self,axes)
pandas.tests.plotting.common.TestPlotBase._get_colors_mapped(self,series,colors)
pandas.tests.plotting.common.TestPlotBase._unpack_cycler(self,rcParams,field='color')
pandas.tests.plotting.common.TestPlotBase.colorconverter(self)
pandas.tests.plotting.common.TestPlotBase.plt(self)
pandas.tests.plotting.common.TestPlotBase.setup_method(self,method)
pandas.tests.plotting.common.TestPlotBase.teardown_method(self,method)
pandas.tests.plotting.common._check_plot_works(f,filterwarnings='always',**kwargs)
pandas.tests.plotting.common.curpath()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/plotting/test_frame.py----------------------------------------
A:pandas.tests.plotting.test_frame.self.tdf->pandas._testing.makeTimeDataFrame()
A:pandas.tests.plotting.test_frame.self.hexbin_df->DataFrame({'A': np.random.uniform(size=20), 'B': np.random.uniform(size=20), 'C': np.arange(20) + np.random.uniform(size=20)})
A:pandas.tests.plotting.test_frame.axes->pandas.DataFrame({'A': [1, 2, 3, 4, 5, 6], 'B': [2, 4, 1, 3, 2, 4], 'C': [3, 3, 2, 6, 4, 2], 'X': [1, 2, 3, 4, 5, 6]}).plot(subplots=True, ax=axes, sharex=True, sharey=True)
A:pandas.tests.plotting.test_frame.df->pandas.DataFrame({'A': [1, 2, 3, 4, 5, 6], 'B': [2, 4, 1, 3, 2, 4], 'C': [3, 3, 2, 6, 4, 2], 'X': [1, 2, 3, 4, 5, 6]})
A:pandas.tests.plotting.test_frame.tuples->zip(string.ascii_letters[:10], range(10))
A:pandas.tests.plotting.test_frame.index->pandas.MultiIndex.from_product([[2012, 2013], [1, 2]])
A:pandas.tests.plotting.test_frame.columns->pandas.MultiIndex.from_tuples([('bar', 'Δ'), ('bar', 'Ε')], names=['c0', 'c1'])
A:pandas.tests.plotting.test_frame.(fig, ax)->self.plt.subplots()
A:pandas.tests.plotting.test_frame.arr->integer_array([1, 2, 3, 4], dtype='UInt32')
A:pandas.tests.plotting.test_frame.s->Series([1, 2])
A:pandas.tests.plotting.test_frame.ax->pandas.DataFrame({'A': [1, 2, 3, 4, 5, 6], 'B': [2, 4, 1, 3, 2, 4], 'C': [3, 3, 2, 6, 4, 2], 'X': [1, 2, 3, 4, 5, 6]}).plot(y=['A'], marker='x', linestyle='solid')
A:pandas.tests.plotting.test_frame.df.columns->numpy.arange(1, len(df.columns) + 1)
A:pandas.tests.plotting.test_frame.lines->pandas.DataFrame({'A': [1, 2, 3, 4, 5, 6], 'B': [2, 4, 1, 3, 2, 4], 'C': [3, 3, 2, 6, 4, 2], 'X': [1, 2, 3, 4, 5, 6]}).plot(y=['A'], marker='x', linestyle='solid').get_lines()
A:pandas.tests.plotting.test_frame.rs->Series(rs[:, 1], rs[:, 0], dtype=np.int64, name='y')
A:pandas.tests.plotting.test_frame.df.index->pandas.Index(np.arange(99, -1, -1), dtype=np.float64)
A:pandas.tests.plotting.test_frame.(xmin, xmax)->pandas.DataFrame({'A': [1, 2, 3, 4, 5, 6], 'B': [2, 4, 1, 3, 2, 4], 'C': [3, 3, 2, 6, 4, 2], 'X': [1, 2, 3, 4, 5, 6]}).plot(y=['A'], marker='x', linestyle='solid').get_xlim()
A:pandas.tests.plotting.test_frame.idx->date_range(start='2014-07-01', freq='M', periods=10)
A:pandas.tests.plotting.test_frame.testdata->pandas.DataFrame(data)
A:pandas.tests.plotting.test_frame.ax_numeric->pandas.DataFrame(data).plot(y='numeric')
A:pandas.tests.plotting.test_frame.ax_timedelta->pandas.DataFrame(data).plot(y='timedelta')
A:pandas.tests.plotting.test_frame.ax_datetime_no_tz->pandas.DataFrame(data).plot(y='datetime_no_tz')
A:pandas.tests.plotting.test_frame.ax_datetime_all_tz->pandas.DataFrame(data).plot(y='datetime_all_tz')
A:pandas.tests.plotting.test_frame.ax_period->pandas.DataFrame(data).plot(x='numeric', y='period')
A:pandas.tests.plotting.test_frame.ax_categorical->pandas.DataFrame(data).plot(x='numeric', y='categorical')
A:pandas.tests.plotting.test_frame.ax_datetime_mixed_tz->pandas.DataFrame(data).plot(x='numeric', y='datetime_mixed_tz')
A:pandas.tests.plotting.test_frame.(fig, axes)->matplotlib.pyplot.subplots(2, 1)
A:pandas.tests.plotting.test_frame.returned->pandas.DataFrame({'A': [1, 2, 3, 4, 5, 6], 'B': [2, 4, 1, 3, 2, 4], 'C': [3, 3, 2, 6, 4, 2], 'X': [1, 2, 3, 4, 5, 6]}).plot.box(return_type=t, subplots=True)
A:pandas.tests.plotting.test_frame.base->numpy.zeros(len(normal_lines[0].get_data()[1]))
A:pandas.tests.plotting.test_frame.sep_df->DataFrame({'w': rand(6), 'x': rand(6), 'y': -rand(6), 'z': -rand(6)})
A:pandas.tests.plotting.test_frame.mixed_df->DataFrame(randn(6, 4), index=list(string.ascii_letters[:6]), columns=['w', 'x', 'y', 'z'])
A:pandas.tests.plotting.test_frame.ax1->self.plt.figure().add_subplot(gs[:2, :2])
A:pandas.tests.plotting.test_frame.ax2->self.plt.figure().add_subplot(gs[:2, 2])
A:pandas.tests.plotting.test_frame.df2->DataFrame(randn(3, 3), columns=['d', 'e', 'f'], index=ind)
A:pandas.tests.plotting.test_frame.tdf->DataFrame(d, index=ix)
A:pandas.tests.plotting.test_frame.masked1->pandas.DataFrame({'A': [1, 2, 3, 4, 5, 6], 'B': [2, 4, 1, 3, 2, 4], 'C': [3, 3, 2, 6, 4, 2], 'X': [1, 2, 3, 4, 5, 6]}).plot(y=['A'], marker='x', linestyle='solid').lines[0].get_ydata()
A:pandas.tests.plotting.test_frame.masked2->pandas.DataFrame({'A': [1, 2, 3, 4, 5, 6], 'B': [2, 4, 1, 3, 2, 4], 'C': [3, 3, 2, 6, 4, 2], 'X': [1, 2, 3, 4, 5, 6]}).plot(y=['A'], marker='x', linestyle='solid').lines[1].get_ydata()
A:pandas.tests.plotting.test_frame.exp->numpy.array([3, 2, 1], dtype=np.float64)
A:pandas.tests.plotting.test_frame.expected1->numpy.array([1, 2, 0, 3], dtype=np.float64)
A:pandas.tests.plotting.test_frame.expected2->numpy.array([3, 0, 2, 1], dtype=np.float64)
A:pandas.tests.plotting.test_frame.(ymin, ymax)->pandas.DataFrame({'A': [1, 2, 3, 4, 5, 6], 'B': [2, 4, 1, 3, 2, 4], 'C': [3, 3, 2, 6, 4, 2], 'X': [1, 2, 3, 4, 5, 6]}).plot(y=['A'], marker='x', linestyle='solid').get_ylim()
A:pandas.tests.plotting.test_frame.default_colors->self._unpack_cycler(self.plt.rcParams)
A:pandas.tests.plotting.test_frame.ticks->pandas.DataFrame({'A': [1, 2, 3, 4, 5, 6], 'B': [2, 4, 1, 3, 2, 4], 'C': [3, 3, 2, 6, 4, 2], 'X': [1, 2, 3, 4, 5, 6]}).plot(y=['A'], marker='x', linestyle='solid').xaxis.get_ticklocs()
A:pandas.tests.plotting.test_frame.df1->pandas.DataFrame(np.random.randn(6, 5), index=pd.Index(list('ABCDEF')), columns=pd.Index(list('abcde')))
A:pandas.tests.plotting.test_frame.dates->pandas.date_range(start=date(2019, 1, 1), periods=12, freq='W')
A:pandas.tests.plotting.test_frame.vals->numpy.random.normal(0, 1, len(dates))
A:pandas.tests.plotting.test_frame.random_array->numpy.random.random((1000, 3))
A:pandas.tests.plotting.test_frame.points->numpy.array([ax.get_position().get_points() for ax in fig.axes])
A:pandas.tests.plotting.test_frame.rgba_array->numpy.array([red_rgba, green_rgba])
A:pandas.tests.plotting.test_frame.float_array->numpy.array([0.0, 1.0])
A:pandas.tests.plotting.test_frame.(ax_min, ax_max)->pandas.DataFrame({'A': [1, 2, 3, 4, 5, 6], 'B': [2, 4, 1, 3, 2, 4], 'C': [3, 3, 2, 6, 4, 2], 'X': [1, 2, 3, 4, 5, 6]}).plot(y=['A'], marker='x', linestyle='solid').get_ylim()
A:pandas.tests.plotting.test_frame.min_edge->min((p.get_y() for p in ax.patches))
A:pandas.tests.plotting.test_frame.max_edge->max((p.get_y() + p.get_height() for p in ax.patches))
A:pandas.tests.plotting.test_frame.edge->p.get_y()
A:pandas.tests.plotting.test_frame.expected->list(base_expected)
A:pandas.tests.plotting.test_frame.positions->numpy.array([3, 2, 8])
A:pandas.tests.plotting.test_frame.result->pandas.DataFrame({'A': [1, 2, 3, 4, 5, 6], 'B': [2, 4, 1, 3, 2, 4], 'C': [3, 3, 2, 6, 4, 2], 'X': [1, 2, 3, 4, 5, 6]}).plot.box(subplots=True)
A:pandas.tests.plotting.test_frame.result_y->numpy.array([p.get_y() for p in patches])
A:pandas.tests.plotting.test_frame.result_height->numpy.array([p.get_height() for p in patches])
A:pandas.tests.plotting.test_frame.result_x->numpy.array([p.get_x() for p in patches])
A:pandas.tests.plotting.test_frame.result_width->numpy.array([p.get_width() for p in patches])
A:pandas.tests.plotting.test_frame.normal_df->DataFrame({'A': np.repeat(np.array([1, 2, 3, 4, 5]), np.array([10, 9, 8, 7, 6])), 'B': np.repeat(np.array([1, 2, 3, 4, 5]), np.array([8, 8, 8, 8, 8])), 'C': np.repeat(np.array([1, 2, 3, 4, 5]), np.array([6, 7, 8, 9, 10]))}, columns=['A', 'B', 'C'])
A:pandas.tests.plotting.test_frame.nan_df->DataFrame({'A': np.repeat(np.array([np.nan, 1, 2, 3, 4, 5]), np.array([3, 10, 9, 8, 7, 6])), 'B': np.repeat(np.array([1, np.nan, 2, 3, 4, 5]), np.array([8, 3, 8, 8, 8, 8])), 'C': np.repeat(np.array([1, 2, 3, np.nan, 4, 5]), np.array([6, 7, 8, 3, 9, 10]))}, columns=['A', 'B', 'C'])
A:pandas.tests.plotting.test_frame.df3->DataFrame(randn(3, 3), columns=['g', 'h', 'i'], index=ind)
A:pandas.tests.plotting.test_frame.df4->DataFrame(rand(3, 3), columns=['j', 'k', 'l'])
A:pandas.tests.plotting.test_frame.ind->date_range('1/1/2014', periods=3)
A:pandas.tests.plotting.test_frame.df5->pandas.DataFrame({'A': [1, 2, 3, 4, 5, 6], 'B': [2, 4, 1, 3, 2, 4], 'C': [3, 3, 2, 6, 4, 2], 'X': [1, 2, 3, 4, 5, 6]}).set_index('a')
A:pandas.tests.plotting.test_frame.multi->DataFrame(randn(4, 4), columns=[np.array(['a', 'a', 'b', 'b']), np.array(['x', 'y', 'x', 'y'])])
A:pandas.tests.plotting.test_frame.leg_title->pandas.DataFrame({'A': [1, 2, 3, 4, 5, 6], 'B': [2, 4, 1, 3, 2, 4], 'C': [3, 3, 2, 6, 4, 2], 'X': [1, 2, 3, 4, 5, 6]}).plot(y=['A'], marker='x', linestyle='solid').legend_.get_title()
A:pandas.tests.plotting.test_frame.fig->self.plt.figure()
A:pandas.tests.plotting.test_frame.lines2->self.plt.figure().add_subplot(gs[:2, 2]).get_lines()
A:pandas.tests.plotting.test_frame.styles->list('rgcby')
A:pandas.tests.plotting.test_frame.(handles, labels)->pandas.DataFrame({'A': [1, 2, 3, 4, 5, 6], 'B': [2, 4, 1, 3, 2, 4], 'C': [3, 3, 2, 6, 4, 2], 'X': [1, 2, 3, 4, 5, 6]}).plot(y=['A'], marker='x', linestyle='solid').get_legend_handles_labels()
A:pandas.tests.plotting.test_frame.bp->pandas.DataFrame({'A': [1, 2, 3, 4, 5, 6], 'B': [2, 4, 1, 3, 2, 4], 'C': [3, 3, 2, 6, 4, 2], 'X': [1, 2, 3, 4, 5, 6]}).plot.box(color=(0, 1, 0), sym='#123456', return_type='dict')
A:pandas.tests.plotting.test_frame.dict_colors->dict(whiskers='c', medians='m')
A:pandas.tests.plotting.test_frame.colors->list('rgbk')
A:pandas.tests.plotting.test_frame.plt.rcParams['axes.prop_cycle']->cycler.cycler('color', colors)
A:pandas.tests.plotting.test_frame.xticks->pandas.DataFrame({'A': [1, 2, 3, 4, 5, 6], 'B': [2, 4, 1, 3, 2, 4], 'C': [3, 3, 2, 6, 4, 2], 'X': [1, 2, 3, 4, 5, 6]}).plot(y=['A'], marker='x', linestyle='solid').lines[0].get_xdata()
A:pandas.tests.plotting.test_frame.ydata->pandas.DataFrame({'A': [1, 2, 3, 4, 5, 6], 'B': [2, 4, 1, 3, 2, 4], 'C': [3, 3, 2, 6, 4, 2], 'X': [1, 2, 3, 4, 5, 6]}).plot(y=['A'], marker='x', linestyle='solid').lines[0].get_ydata()
A:pandas.tests.plotting.test_frame.df_err->DataFrame(np.random.randn(5, 2) / 5, index=range(5), columns=['x', 'y'])
A:pandas.tests.plotting.test_frame.s_df->pandas.DataFrame({'A': [1, 2, 3, 4, 5, 6], 'B': [2, 4, 1, 3, 2, 4], 'C': [3, 3, 2, 6, 4, 2], 'X': [1, 2, 3, 4, 5, 6]}).copy()
A:pandas.tests.plotting.test_frame.ix->date_range('1/1/2000', '1/1/2001', freq='M')
A:pandas.tests.plotting.test_frame.tdf_err->DataFrame(d_err, index=ix)
A:pandas.tests.plotting.test_frame.err->numpy.random.rand(3, 2, 5)
A:pandas.tests.plotting.test_frame.(gs, axes)->_generate_4_axes_via_gridspec()
A:pandas.tests.plotting.test_frame.results[kind]->weakref.proxy(df.plot(kind=kind, **args))
A:pandas.tests.plotting.test_frame.ts->Series(np.random.randn(10), index=date_range('1/1/2000', periods=10))
A:pandas.tests.plotting.test_frame.gs->matplotlib.gridspec.GridSpec(2, 2)
A:pandas.tests.plotting.test_frame.(ax1, ax2)->_get_horizontal_grid()
A:pandas.tests.plotting.test_frame.ax3->self.plt.figure().add_subplot(gs[2, :2])
A:pandas.tests.plotting.test_frame.ax4->self.plt.figure().add_subplot(gs[2, 2])
A:pandas.tests.plotting.test_frame.divider->make_axes_locatable(ax)
A:pandas.tests.plotting.test_frame.cax->make_axes_locatable(ax).append_axes('right', size='5%', pad=0.05)
A:pandas.tests.plotting.test_frame.iax->inset_axes(ax, width='30%', height=1.0, loc=3)
A:pandas.tests.plotting.test_frame.colormap->matplotlib.colors.ListedColormap(color_tuples)
A:pandas.tests.plotting.test_frame.barplot->pandas.DataFrame([[1, 2, 3]]).plot(kind='bar')
A:pandas.tests.plotting.test_frame.kwargs->dict(secondary_y=sy, fontsize=fontsize, mark_right=True)
A:pandas.tests.plotting.test_frame.labels_position->dict(zip(xticklabels, ax.get_xticks()))
A:pandas.tests.plotting.test_frame.xlims->pandas.DataFrame({'A': [1, 2, 3, 4, 5, 6], 'B': [2, 4, 1, 3, 2, 4], 'C': [3, 3, 2, 6, 4, 2], 'X': [1, 2, 3, 4, 5, 6]}).plot(y=['A'], marker='x', linestyle='solid').get_xlim()
A:pandas.tests.plotting.test_frame.(figs, axs)->self.plt.subplots(2, 1)
A:pandas.tests.plotting.test_frame.expected_ax1->numpy.arange(4.5, 10, 0.5)
A:pandas.tests.plotting.test_frame.expected_ax2->numpy.arange(-0.5, 5, 0.5)
A:pandas.tests.plotting.test_frame.ax_tl->matplotlib.pyplot.subplot(gs[0, 0])
A:pandas.tests.plotting.test_frame.ax_ll->matplotlib.pyplot.subplot(gs[1, 0])
A:pandas.tests.plotting.test_frame.ax_tr->matplotlib.pyplot.subplot(gs[0, 1])
A:pandas.tests.plotting.test_frame.ax_lr->matplotlib.pyplot.subplot(gs[1, 1])
pandas.tests.plotting.test_frame.TestDataFramePlots(TestPlotBase)
pandas.tests.plotting.test_frame.TestDataFramePlots._assert_xtickslabels_visibility(self,axes,expected)
pandas.tests.plotting.test_frame.TestDataFramePlots._assert_ytickslabels_visibility(self,axes,expected)
pandas.tests.plotting.test_frame.TestDataFramePlots._check_bar_alignment(self,df,kind='bar',stacked=False,subplots=False,align='center',width=0.5,position=0.5)
pandas.tests.plotting.test_frame.TestDataFramePlots._check_box_coord(self,patches,expected_y=None,expected_h=None,expected_x=None,expected_w=None)
pandas.tests.plotting.test_frame.TestDataFramePlots._compare_stacked_y_cood(self,normal_lines,stacked_lines)
pandas.tests.plotting.test_frame.TestDataFramePlots.setup_method(self,method)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_all_invalid_plot_data(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_allow_cmap(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_area_colors(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_area_lim(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_align_single_column(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_barwidth(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_barwidth_position(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_barwidth_position_int(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_bottom_left(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_categorical(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_center(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_colors(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_edge(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_linewidth(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_log_no_subplots(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_log_subplots(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_nan(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_stacked_center(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_subplots_center(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_user_colors(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_boxplot(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_boxplot_colors(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_boxplot_return_type(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_boxplot_subplots_return_type(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_boxplot_vertical(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_color_and_style_arguments(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_color_empty_string(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_color_single_series_list(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_default_color_cycle(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_df_grid_settings(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_df_gridspec_patterns(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_df_legend_labels(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_df_subplots_patterns_minorticks(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_donot_overwrite_index_name(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_dont_modify_colors(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_errorbar_asymmetrical(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_errorbar_plot(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_errorbar_plot_iterator(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_errorbar_scatter(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_errorbar_timeseries(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_errorbar_with_integer_column_names(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_errorbar_with_partial_columns(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_groupby_boxplot_sharex(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_groupby_boxplot_sharey(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_hexbin_basic(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_hexbin_cmap(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_hexbin_with_c(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_hist_colors(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_hist_df(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_hist_df_coord(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_if_hexbin_xaxis_label_is_visible(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_if_scatterplot_colorbar_affects_xaxis_visibility(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_if_scatterplot_colorbars_are_next_to_parent_axes(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_implicit_label(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_integer_array_plot(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_invalid_colormap(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_invalid_kind(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_invalid_logscale(self,input_param)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_invalid_xy_args(self,x,y,lbl)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_invalid_xy_args_dup_cols(self,x,y)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_kde_colors(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_kde_colors_and_styles_subplots(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_kde_df(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_kde_missing_vals(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_kind_both_ways(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_legend_name(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_line_area_nan_df(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_line_area_stacked(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_line_colors(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_line_colors_and_styles_subplots(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_line_label_none(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_line_lim(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_logscales(self,input_log,expected_log)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_memory_leak(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_missing_marker_multi_plots_on_same_ax(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_missing_markers_legend(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_missing_markers_legend_using_style(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_mpl2_color_cycle_str(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_negative_log(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_no_color_bar(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_no_legend(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_nonnumeric_exclude(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_partially_invalid_plot_data(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_passed_bar_colors(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_period_compat(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_pie_df(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_pie_df_nan(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_plain_axes(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_plot(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_plot_bar(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_plot_int_columns(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_plot_no_numeric_data(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_plot_no_rows(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_plot_scatter(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_plot_scatter_with_c(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_plot_scatter_with_categorical_data(self,x,y)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_plot_xy(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_raise_error_on_datetime_time_data(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_raise_error_on_dt_time_data(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_rcParams_bar_colors(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_rgb_tuple_color(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_scatter_colors(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_scatterplot_datetime_data(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_scatterplot_dt_data(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_scatterplot_object_data(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_secondary_axis_font_size(self,method)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_sharex_and_ax(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_sharey_and_ax(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_style_by_column(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_subplots(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_subplots_dup_columns(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_subplots_layout(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_subplots_multiple_axes(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_subplots_sharex_axes_existing_axes(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_subplots_sharex_false(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_subplots_timeseries(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_subplots_timeseries_y_axis(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_subplots_timeseries_y_axis_not_supported(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_subplots_ts_share_axes(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_subplots_warnings(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_table(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_unordered_ts(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_unsorted_index(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_unsorted_index_lims(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_x_multiindex_values_ticks(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_x_string_values_ticks(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_xcompat(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_xlim_plot_line(self,kind)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_xlim_plot_line_correctly_in_mixed_plot_type(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_xy_args_integer(self,x,y,colnames)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_y_listlike(self,x,y,lbl,colors)
pandas.tests.plotting.test_frame._generate_4_axes_via_gridspec()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/generic/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/generic/test_generic.py----------------------------------------
A:pandas.tests.generic.test_generic.shape->tuple([shape] * self._ndim)
A:pandas.tests.generic.test_generic.arr->numpy.array([True, True, False, True])
A:pandas.tests.generic.test_generic.fshape->numpy.prod(shape)
A:pandas.tests.generic.test_generic.idx->pandas.MultiIndex.from_tuples([(0, 'a'), (1, 'b'), (2, 'c')])
A:pandas.tests.generic.test_generic.obj->box(dtype=object)
A:pandas.tests.generic.test_generic.result->DataFrame({'A': [1, 2, 3]}).A.pipe((f, 'y'), 0)
A:pandas.tests.generic.test_generic.expected->DataFrame({'A': [1, 4, 9]})
A:pandas.tests.generic.test_generic.o->self._construct(shape=10)
A:pandas.tests.generic.test_generic.d1->numpy.arange(4, dtype='int64')
A:pandas.tests.generic.test_generic.s->Series([1, 2, 3])
A:pandas.tests.generic.test_generic.obj1->self._construct(shape=4, value=1)
A:pandas.tests.generic.test_generic.obj2->self._construct(shape=4, value=1)
A:pandas.tests.generic.test_generic.result._data->self._construct(shape=10)._data.downcast(dtypes='infer')
A:pandas.tests.generic.test_generic.v->getattr(x, m, None)
A:pandas.tests.generic.test_generic.o2->self._construct(shape=3)
A:pandas.tests.generic.test_generic.v1->getattr(o, op)(o)
A:pandas.tests.generic.test_generic.v2->getattr(o, op)(o2)
A:pandas.tests.generic.test_generic.axis->self._construct(shape=10)._get_axis_name(0)
A:pandas.tests.generic.test_generic.seed->numpy.random.randint(0, 100)
A:pandas.tests.generic.test_generic.bad_weight_series->Series([0, 0, 0.2])
A:pandas.tests.generic.test_generic.df->DataFrame({'A': [1, 2, 3]})
A:pandas.tests.generic.test_generic.df2->df1.set_index(index).set_index(['floats'], append=True)
A:pandas.tests.generic.test_generic.ca->pandas.Categorical([0, 0, 2, 2, 3, np.nan])
A:pandas.tests.generic.test_generic.ts->df['joe'].copy()
A:pandas.tests.generic.test_generic.f->pandas.Series(index=range(2), dtype=object).copy()
A:pandas.tests.generic.test_generic.out->DataFrame({'A': [1, 2, 3]}).take(indices)
A:pandas.tests.generic.test_generic.small->self._construct(shape, dtype='int8', value=1)
A:pandas.tests.generic.test_generic.big->self._construct(shape, dtype='int8', value=1)
A:pandas.tests.generic.test_generic.obj_copy->func(obj)
A:pandas.tests.generic.test_generic.func->getattr(obj, 'pct_change')
A:pandas.tests.generic.test_generic.res->func(periods=periods, fill_method=fill_method, limit=limit)
A:pandas.tests.generic.test_generic.sample1->DataFrame({'A': [1, 2, 3]}).sample(n=1, axis=1, weights=easy_weight_list)
A:pandas.tests.generic.test_generic.s2->Series([1, 2, np.nan], index=idx).copy()
A:pandas.tests.generic.test_generic.s3->Series([0.01, 0], index=[3, 5])
A:pandas.tests.generic.test_generic.s4->Series([1, 0], index=[1, 2])
A:pandas.tests.generic.test_generic.empty_series->Series([], name='five', dtype=np.float64)
A:pandas.tests.generic.test_generic.empty_frame->DataFrame([empty_series])
A:pandas.tests.generic.test_generic.s1->Series([1, 2, np.nan], index=idx)
A:pandas.tests.generic.test_generic.index->pandas.date_range('2000-1-1', periods=10, freq='T')
A:pandas.tests.generic.test_generic.df1->df1.set_index(index).set_index(index)
A:pandas.tests.generic.test_generic.df1['text']->'the sky is so blue. we could use more chocolate.'.split()
A:pandas.tests.generic.test_generic.df1['start']->date_range('2000-1-1', periods=10, freq='T')
A:pandas.tests.generic.test_generic.df1['end']->date_range('2000-1-1', periods=10, freq='D')
A:pandas.tests.generic.test_generic.different->df1.set_index(index).set_index(['floats'], append=True).copy()
A:pandas.tests.generic.test_generic.different['floats']->different['floats'].astype('float32').astype('float32')
A:pandas.tests.generic.test_generic.df3->df1.set_index(index).set_index(index).set_index(['floats'], append=True)
A:pandas.tests.generic.test_generic.a->pandas.Series([False, np.nan])
A:pandas.tests.generic.test_generic.b->pandas.Series([False, np.nan])
A:pandas.tests.generic.test_generic.c->pandas.Series(index=range(2), dtype=object)
A:pandas.tests.generic.test_generic.d->pandas.Series(index=range(2), dtype=object).copy()
A:pandas.tests.generic.test_generic.e->pandas.Series(index=range(2), dtype=object).copy()
pandas.tests.generic.test_generic.Generic
pandas.tests.generic.test_generic.Generic._axes(self)
pandas.tests.generic.test_generic.Generic._compare(self,result,expected)
pandas.tests.generic.test_generic.Generic._construct(self,shape,value=None,dtype=None,**kwargs)
pandas.tests.generic.test_generic.Generic._ndim(self)
pandas.tests.generic.test_generic.Generic.check_metadata(self,x,y=None)
pandas.tests.generic.test_generic.Generic.test_api_compat(self)
pandas.tests.generic.test_generic.Generic.test_constructor_compound_dtypes(self)
pandas.tests.generic.test_generic.Generic.test_copy_and_deepcopy(self)
pandas.tests.generic.test_generic.Generic.test_downcast(self)
pandas.tests.generic.test_generic.Generic.test_get_default(self)
pandas.tests.generic.test_generic.Generic.test_get_numeric_data(self)
pandas.tests.generic.test_generic.Generic.test_head_tail(self)
pandas.tests.generic.test_generic.Generic.test_metadata_propagation(self)
pandas.tests.generic.test_generic.Generic.test_nonzero(self)
pandas.tests.generic.test_generic.Generic.test_pct_change(self,periods,fill_method,limit,exp)
pandas.tests.generic.test_generic.Generic.test_rename(self)
pandas.tests.generic.test_generic.Generic.test_sample(self)
pandas.tests.generic.test_generic.Generic.test_sample_is_copy(self)
pandas.tests.generic.test_generic.Generic.test_sample_upsampling_without_replacement(self)
pandas.tests.generic.test_generic.Generic.test_size_compat(self)
pandas.tests.generic.test_generic.Generic.test_split_compat(self)
pandas.tests.generic.test_generic.Generic.test_stat_non_defaults_args(self)
pandas.tests.generic.test_generic.Generic.test_stat_unexpected_keyword(self)
pandas.tests.generic.test_generic.Generic.test_truncate_out_of_bounds(self)
pandas.tests.generic.test_generic.Generic.test_unexpected_keyword(self)
pandas.tests.generic.test_generic.Generic.test_validate_bool_args(self)
pandas.tests.generic.test_generic.TestNDFrame
pandas.tests.generic.test_generic.TestNDFrame.test_axis_classmethods(self,box)
pandas.tests.generic.test_generic.TestNDFrame.test_depr_take_kwarg_is_copy(self,is_copy)
pandas.tests.generic.test_generic.TestNDFrame.test_equals(self)
pandas.tests.generic.test_generic.TestNDFrame.test_numpy_squeeze(self)
pandas.tests.generic.test_generic.TestNDFrame.test_numpy_transpose(self)
pandas.tests.generic.test_generic.TestNDFrame.test_pipe(self)
pandas.tests.generic.test_generic.TestNDFrame.test_pipe_tuple(self)
pandas.tests.generic.test_generic.TestNDFrame.test_pipe_tuple_error(self)
pandas.tests.generic.test_generic.TestNDFrame.test_sample(sel)
pandas.tests.generic.test_generic.TestNDFrame.test_squeeze(self)
pandas.tests.generic.test_generic.TestNDFrame.test_take(self)
pandas.tests.generic.test_generic.TestNDFrame.test_take_invalid_kwargs(self)
pandas.tests.generic.test_generic.TestNDFrame.test_transpose(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/generic/test_series.py----------------------------------------
A:pandas.tests.generic.test_series.self.ts->pandas._testing.makeTimeSeries()
A:pandas.tests.generic.test_series.self.series->pandas._testing.makeStringSeries()
A:pandas.tests.generic.test_series.s->pandas.Series(range(5), index=pd.date_range('2017', periods=5))
A:pandas.tests.generic.test_series.result->pandas.Series(range(5), index=pd.date_range('2017', periods=5)).to_xarray()
A:pandas.tests.generic.test_series.o->Series(range(3), range(3))
A:pandas.tests.generic.test_series.expected->Series([], dtype='M8[ns]', index=pd.Index([], dtype=object))
A:pandas.tests.generic.test_series.o2->Series(range(3), range(3))
A:pandas.tests.generic.test_series.ts->Series(np.random.rand(1000), index=date_range('20130101', periods=1000, freq='s'), name='foo')
A:pandas.tests.generic.test_series.value->'+'.join([getattr(o, name) for o in other.objs if getattr(o, name, None)])
A:pandas.tests.generic.test_series.index->getattr(tm, f'make{index}')
A:pandas.tests.generic.test_series.s.index->pandas.MultiIndex.from_product([['a', 'b'], range(3)], names=['one', 'two'])
pandas.tests.generic.test_series.TestSeries(Generic)
pandas.tests.generic.test_series.TestSeries.setup_method(self)
pandas.tests.generic.test_series.TestSeries.test_datetime_shift_always_copy(self,move_by_freq)
pandas.tests.generic.test_series.TestSeries.test_dt_shift_always_copy(self,move_by_freq)
pandas.tests.generic.test_series.TestSeries.test_get_numeric_data_preserve_dtype(self)
pandas.tests.generic.test_series.TestSeries.test_metadata_propagation_indiv(self)
pandas.tests.generic.test_series.TestSeries.test_nonzero_single_element(self)
pandas.tests.generic.test_series.TestSeries.test_rename_mi(self)
pandas.tests.generic.test_series.TestSeries.test_set_axis_name(self)
pandas.tests.generic.test_series.TestSeries.test_set_axis_name_mi(self)
pandas.tests.generic.test_series.TestSeries.test_set_axis_name_raises(self)
pandas.tests.generic.test_series.TestSeries.test_shift_always_copy(self,s,shift_size)
pandas.tests.generic.test_series.TestSeries.test_to_xarray(self)
pandas.tests.generic.test_series.TestSeries.test_to_xarray_index_types(self,index)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/generic/test_label_or_level_utils.py----------------------------------------
A:pandas.tests.generic.test_label_or_level_utils.df->pandas.concat([df, df['L2']], axis=1)
A:pandas.tests.generic.test_label_or_level_utils.expected_labels->list(df_levels.columns)
A:pandas.tests.generic.test_label_or_level_utils.(expected_labels, expected_levels)->get_labels_levels(df_levels)
A:pandas.tests.generic.test_label_or_level_utils.result->frame._get_label_or_level_values(level, axis=axis)
A:pandas.tests.generic.test_label_or_level_utils.df_dropped->frame._drop_labels_or_levels(level, axis=axis)
pandas.tests.generic.test_label_or_level_utils.assert_label_reference(frame,labels,axis)
pandas.tests.generic.test_label_or_level_utils.assert_label_values(frame,labels,axis)
pandas.tests.generic.test_label_or_level_utils.assert_labels_dropped(frame,labels,axis)
pandas.tests.generic.test_label_or_level_utils.assert_level_reference(frame,levels,axis)
pandas.tests.generic.test_label_or_level_utils.assert_level_values(frame,levels,axis)
pandas.tests.generic.test_label_or_level_utils.assert_levels_dropped(frame,levels,axis)
pandas.tests.generic.test_label_or_level_utils.df()
pandas.tests.generic.test_label_or_level_utils.df_ambig(df)
pandas.tests.generic.test_label_or_level_utils.df_duplabels(df)
pandas.tests.generic.test_label_or_level_utils.df_levels(request,df)
pandas.tests.generic.test_label_or_level_utils.get_labels_levels(df_levels)
pandas.tests.generic.test_label_or_level_utils.test_check_label_or_level_ambiguity_df(df_ambig,axis)
pandas.tests.generic.test_label_or_level_utils.test_check_label_or_level_ambiguity_series(df)
pandas.tests.generic.test_label_or_level_utils.test_check_label_or_level_ambiguity_series_axis1_error(df)
pandas.tests.generic.test_label_or_level_utils.test_drop_labels_or_levels_df(df_levels,axis)
pandas.tests.generic.test_label_or_level_utils.test_drop_labels_or_levels_series(df)
pandas.tests.generic.test_label_or_level_utils.test_get_label_or_level_values_df_ambig(df_ambig,axis)
pandas.tests.generic.test_label_or_level_utils.test_get_label_or_level_values_df_duplabels(df_duplabels,axis)
pandas.tests.generic.test_label_or_level_utils.test_get_label_or_level_values_df_simple(df_levels,axis)
pandas.tests.generic.test_label_or_level_utils.test_get_label_or_level_values_series_axis0(df)
pandas.tests.generic.test_label_or_level_utils.test_get_label_or_level_values_series_axis1_error(df)
pandas.tests.generic.test_label_or_level_utils.test_is_level_or_label_reference_df_simple(df_levels,axis)
pandas.tests.generic.test_label_or_level_utils.test_is_level_reference_df_ambig(df_ambig,axis)
pandas.tests.generic.test_label_or_level_utils.test_is_level_reference_series_axis1_error(df)
pandas.tests.generic.test_label_or_level_utils.test_is_level_reference_series_simple_axis0(df)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/generic/test_frame.py----------------------------------------
A:pandas.tests.generic.test_frame.df->DataFrame({'a': list('abc'), 'b': list(range(1, 4)), 'c': np.arange(3, 6).astype('u1'), 'd': np.arange(4.0, 7.0, dtype='float64'), 'e': [True, False, True], 'f': pd.Categorical(list('abc')), 'g': pd.date_range('20130101', periods=3), 'h': pd.date_range('20130101', periods=3, tz='US/Eastern')})
A:pandas.tests.generic.test_frame.result->result.to_dataframe().to_dataframe()
A:pandas.tests.generic.test_frame.o->DataFrame({'A': [1, '2', 3.0]})
A:pandas.tests.generic.test_frame.expected->DataFrame({'a': list('abc'), 'b': list(range(1, 4)), 'c': np.arange(3, 6).astype('u1'), 'd': np.arange(4.0, 7.0, dtype='float64'), 'e': [True, False, True], 'f': pd.Categorical(list('abc')), 'g': pd.date_range('20130101', periods=3), 'h': pd.date_range('20130101', periods=3, tz='US/Eastern')}).copy()
A:pandas.tests.generic.test_frame.df1->DataFrame(np.random.randint(0, 4, (3, 2)), columns=list('ab'))
A:pandas.tests.generic.test_frame.df2->DataFrame(np.random.randint(0, 4, (3, 2)), columns=['c', 'd'])
A:pandas.tests.generic.test_frame.value->'+'.join([getattr(o, name) for o in other.objs if getattr(o, name, None)])
A:pandas.tests.generic.test_frame.index->getattr(tm, f'make{index}')
A:pandas.tests.generic.test_frame.df.index->pandas.MultiIndex.from_product([['a'], range(3)], names=['one', 'two'])
A:pandas.tests.generic.test_frame.expected['f']->expected['f'].astype(object).astype(object)
A:pandas.tests.generic.test_frame.empty_frame->DataFrame(data=[], index=[], columns=['A'])
A:pandas.tests.generic.test_frame.empty_frame_copy->deepcopy(empty_frame)
pandas.tests.generic.test_frame.TestDataFrame(Generic)
pandas.tests.generic.test_frame.TestDataFrame.test_deepcopy_empty(self)
pandas.tests.generic.test_frame.TestDataFrame.test_get_numeric_data_preserve_dtype(self)
pandas.tests.generic.test_frame.TestDataFrame.test_metadata_propagation_indiv(self)
pandas.tests.generic.test_frame.TestDataFrame.test_nonzero_single_element(self)
pandas.tests.generic.test_frame.TestDataFrame.test_rename_mi(self)
pandas.tests.generic.test_frame.TestDataFrame.test_set_attribute(self)
pandas.tests.generic.test_frame.TestDataFrame.test_set_axis_name(self)
pandas.tests.generic.test_frame.TestDataFrame.test_set_axis_name_mi(self)
pandas.tests.generic.test_frame.TestDataFrame.test_to_xarray(self)
pandas.tests.generic.test_frame.TestDataFrame.test_to_xarray_index_types(self,index)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/reshape/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/reshape/test_concat.py----------------------------------------
A:pandas.tests.reshape.test_concat.exp_data->pandas.Categorical(list(vals1) + list(vals2))
A:pandas.tests.reshape.test_concat.exp_data3->pandas.Categorical(list(vals1) + list(vals2) + list(vals3))
A:pandas.tests.reshape.test_concat.res->pandas.concat([df2, df2])
A:pandas.tests.reshape.test_concat.exp->pandas.DataFrame({0: [1, 1, np.nan, np.nan], 1: [np.nan, 2, 2, np.nan], 2: [np.nan, np.nan, 3, 3]}, columns=[0, 1, 2], index=exp_idx)
A:pandas.tests.reshape.test_concat.i1->pandas.Index(vals1, name='x')
A:pandas.tests.reshape.test_concat.i2->pandas.Index(vals2, name='x')
A:pandas.tests.reshape.test_concat.s1->pandas.Series({'a': 1, 'b': 2}, name=s1name)
A:pandas.tests.reshape.test_concat.s2->pandas.Series({'c': 5, 'd': 6}, name=s2name)
A:pandas.tests.reshape.test_concat.dti->pandas.DatetimeIndex(['2011-01-01', '2011-01-02'])
A:pandas.tests.reshape.test_concat.tdi->pandas.TimedeltaIndex(['1 days', '2 days'])
A:pandas.tests.reshape.test_concat.dts->pandas.Series(dti)
A:pandas.tests.reshape.test_concat.tds->pandas.Series(tdi)
A:pandas.tests.reshape.test_concat.dti1->pandas.DatetimeIndex(['2011-01-01', '2011-01-02'], tz=tz)
A:pandas.tests.reshape.test_concat.dti2->pandas.DatetimeIndex(['2012-01-01', '2012-01-02'])
A:pandas.tests.reshape.test_concat.dts1->pandas.Series(dti1)
A:pandas.tests.reshape.test_concat.dts2->pandas.Series(dti2)
A:pandas.tests.reshape.test_concat.ix1->pandas.date_range(start='2014-07-15', end='2014-07-17', freq='D', tz=tz)
A:pandas.tests.reshape.test_concat.ix2->pandas.DatetimeIndex(['2014-07-11', '2014-07-21'], tz=tz)
A:pandas.tests.reshape.test_concat.df1->pandas.DataFrame({'a': [1, 2], 'b': [1, 2], 'c': [1, 2]}, columns=['b', 'a', 'c'])
A:pandas.tests.reshape.test_concat.df2->pandas.DataFrame({'a': [1, 2], 'b': [3, 4]}, index=[3, 4])
A:pandas.tests.reshape.test_concat.exp_idx->DatetimeIndex(['2010-12-31 15:00:00+00:00', '2010-12-31 16:00:00+00:00', '2010-12-31 17:00:00+00:00', '2010-12-31 23:00:00+00:00', '2011-01-01 00:00:00+00:00', '2011-01-01 01:00:00+00:00'])
A:pandas.tests.reshape.test_concat.dti3->pandas.DatetimeIndex(['2012-01-01', '2012-01-02'], tz='US/Pacific')
A:pandas.tests.reshape.test_concat.dts3->pandas.Series(dti3)
A:pandas.tests.reshape.test_concat.pi1->pandas.PeriodIndex(['2011-01', '2011-02'], freq='M')
A:pandas.tests.reshape.test_concat.pi2->pandas.PeriodIndex(['2012-01-01', '2012-02-01'], freq='D')
A:pandas.tests.reshape.test_concat.ps1->pandas.Series(pi1)
A:pandas.tests.reshape.test_concat.ps2->pandas.Series(pi2)
A:pandas.tests.reshape.test_concat.a->pandas.Series(SparseArray([0, 1, 2]))
A:pandas.tests.reshape.test_concat.b->pandas.Series(['a', 'b'], dtype='category')
A:pandas.tests.reshape.test_concat.result->pandas.concat([a, a], axis=1)
A:pandas.tests.reshape.test_concat.expected->pandas.DataFrame(data=[[0, 0], [1, 1], [2, 2]]).astype(pd.SparseDtype(np.int64, 0))
A:pandas.tests.reshape.test_concat.s3->pandas.Series([2, 3])
A:pandas.tests.reshape.test_concat.s4->pandas.Series([2, 2], dtype='category')
A:pandas.tests.reshape.test_concat.s5->pandas.Series([1, np.nan])
A:pandas.tests.reshape.test_concat.s6->pandas.Series([1, 3, 2], dtype='category')
A:pandas.tests.reshape.test_concat.mixed_frame->float_frame.copy()
A:pandas.tests.reshape.test_concat.begin_frame->float_frame.reindex(begin_index)
A:pandas.tests.reshape.test_concat.end_frame->float_frame.reindex(end_index)
A:pandas.tests.reshape.test_concat.appended->pandas.DataFrame({'a': [1, 2], 'b': [1, 2], 'c': [1, 2]}, columns=['b', 'a', 'c']).append(df2, ignore_index=True)
A:pandas.tests.reshape.test_concat.partial_appended->float_frame.reindex(end_index).append(begin_frame, sort=sort)
A:pandas.tests.reshape.test_concat.mixed_appended->mixed_frame[:5].append(float_frame[5:], sort=sort)
A:pandas.tests.reshape.test_concat.mixed_appended2->float_frame[:5].append(mixed_frame[5:], sort=sort)
A:pandas.tests.reshape.test_concat.empty->DataFrame()
A:pandas.tests.reshape.test_concat.df->pandas.DataFrame(pd.Series(['a', 'b', 'c'], dtype='category', name='A'))
A:pandas.tests.reshape.test_concat.row->Series([5, 6, 7], index=['a', 'b', 'c'], name='z')
A:pandas.tests.reshape.test_concat.df3->pandas.DataFrame({'b': [1, 2, 3]}, index=idx3)
A:pandas.tests.reshape.test_concat.df5->pandas.DataFrame(pd.Series(['a', 'b', 'c'], dtype='category', name='A')).append(df3, sort=sort)
A:pandas.tests.reshape.test_concat.arr1->numpy.zeros((2,), dtype='i4,f4,a10')
A:pandas.tests.reshape.test_concat.arr2->numpy.zeros((3,), dtype='i4,f4,a10')
A:pandas.tests.reshape.test_concat.chunks[-1]->chunks[-1].copy().copy()
A:pandas.tests.reshape.test_concat.ser->pandas.Series([0, 1, 2], index=[0, 1, 3], name='B')
A:pandas.tests.reshape.test_concat.idx_diff->pandas.Series([0, 1, 2], index=[0, 1, 3], name='B').index.difference(df_columns)
A:pandas.tests.reshape.test_concat.combined_columns->Index(df_columns.tolist()).append(idx_diff)
A:pandas.tests.reshape.test_concat.date->Timestamp('2018-10-24 07:30:00', tz=dateutil.tz.tzutc())
A:pandas.tests.reshape.test_concat.s->Series(list('abc'), dtype='category')
A:pandas.tests.reshape.test_concat.expected['a']->expected['a'].astype(float).astype(float)
A:pandas.tests.reshape.test_concat.expected['b']->expected['b'].astype(float).astype(float)
A:pandas.tests.reshape.test_concat.df4->DataFrame(np.random.randn(4, 1))
A:pandas.tests.reshape.test_concat.exp_index->MultiIndex(levels=[[0, 1, 2], ts.index], codes=exp_codes)
A:pandas.tests.reshape.test_concat.exp_index2->pandas.MultiIndex.from_arrays([[0, 0, 0, 1, 1, 1], [0, 1, 2, 0, 1, 2]])
A:pandas.tests.reshape.test_concat.t1->DataFrame({'value': Series([1, 2, 3], index=Index(['a', 'b', 'c'], name='id'))})
A:pandas.tests.reshape.test_concat.t2->DataFrame({'value': Series([7, 8], index=Index(['a', 'b'], name='id'))})
A:pandas.tests.reshape.test_concat.foo->Series([1, 2], name='foo')
A:pandas.tests.reshape.test_concat.bar->Series([1, 2])
A:pandas.tests.reshape.test_concat.baz->df[:5].copy()
A:pandas.tests.reshape.test_concat.sorted_keys->list(frames.keys())
A:pandas.tests.reshape.test_concat.frame1->DataFrame({'test1': ['a', 'b', 'c'], 'test2': [1, 2, 3], 'test3': [4.5, 3.2, 1.2]})
A:pandas.tests.reshape.test_concat.frame2->DataFrame({'test3': [5.2, 2.2, 4.3]})
A:pandas.tests.reshape.test_concat.frame1.index->Index(['x', 'y', 'z'])
A:pandas.tests.reshape.test_concat.frame2.index->Index(['x', 'y', 'q'])
A:pandas.tests.reshape.test_concat.v1->concat([frame1, frame2], axis=1, ignore_index=True, sort=sort)
A:pandas.tests.reshape.test_concat.index->date_range('01-Jan-2013', periods=10, freq='H')
A:pandas.tests.reshape.test_concat.frame->DataFrame(np.random.randn(10, 3), index=index, columns=Index(['A', 'B', 'C'], name='exp'))
A:pandas.tests.reshape.test_concat.df['dt']->df['dt'].apply(lambda d: Timestamp(d, tz='US/Pacific')).apply(lambda d: Timestamp(d, tz='US/Pacific'))
A:pandas.tests.reshape.test_concat.exp_idx1->DatetimeIndex(['2014-01-01', '2014-01-02', '2014-01-03'] * 2, tz='US/Pacific', name='dt')
A:pandas.tests.reshape.test_concat.exp_idx2->Index(['A', 'B', 'C'] * 2, name='b')
A:pandas.tests.reshape.test_concat.tuples->list(zip(level2, level1, no_name))
A:pandas.tests.reshape.test_concat.names->list(exp.index.names)
A:pandas.tests.reshape.test_concat.concatted->concat(frames, axis=0, sort=sort)
A:pandas.tests.reshape.test_concat.expected['foo']->expected['foo'].astype('O').astype('O')
A:pandas.tests.reshape.test_concat.arr->numpy.arange(10, dtype='int64')
A:pandas.tests.reshape.test_concat.ts->pandas._testing.makeTimeSeries()
A:pandas.tests.reshape.test_concat.ts.index->DatetimeIndex(np.array(ts.index.values, dtype='M8[ns]'))
A:pandas.tests.reshape.test_concat.rng->to_timedelta(np.arange(10), unit='s')
A:pandas.tests.reshape.test_concat.df0->DataFrame([[10, 20, 30], [10, 20, 30], [10, 20, 30]])
A:pandas.tests.reshape.test_concat.ts1->Series(np.ones(5))
A:pandas.tests.reshape.test_concat.left->concat([ts1, ts2], join='outer', axis=1)
A:pandas.tests.reshape.test_concat.right->concat([ts2, ts1], join='outer', axis=1)
A:pandas.tests.reshape.test_concat.ts0->Series(np.zeros(5))
A:pandas.tests.reshape.test_concat.df_empty->pandas.DataFrame()
A:pandas.tests.reshape.test_concat.df_a->pandas.DataFrame({'a': [1, 2]}, index=[0, 1], dtype='int64')
A:pandas.tests.reshape.test_concat.df_expected->pandas.DataFrame({'a': []}, index=[], dtype='int64')
A:pandas.tests.reshape.test_concat.reader->read_csv(StringIO(data), chunksize=1)
A:pandas.tests.reshape.test_concat.x->pandas.concat(dfs)
A:pandas.tests.reshape.test_concat.y->Series(['A', 'B'])
A:pandas.tests.reshape.test_concat.first->Series([], dtype='M8[ns]').dt.tz_localize(tz)
A:pandas.tests.reshape.test_concat.first[0]->first[0].dt.tz_localize('Europe/London').dt.tz_localize('Europe/London')
A:pandas.tests.reshape.test_concat.second->Series(values, dtype=dtype)
A:pandas.tests.reshape.test_concat.second[0]->second[0].dt.tz_localize('Europe/London').dt.tz_localize('Europe/London')
A:pandas.tests.reshape.test_concat.exp.columns->pandas.RangeIndex(2)
A:pandas.tests.reshape.test_concat.df.index->MultiIndex(levels=[pd.RangeIndex(3), pd.RangeIndex(3)], codes=[np.repeat(np.arange(3), 3), np.tile(np.arange(3), 3)])
A:pandas.tests.reshape.test_concat.example_multiindex1->pandas.MultiIndex.from_product([['a'], ['b']])
A:pandas.tests.reshape.test_concat.example_dataframe1->pandas.DataFrame([0], index=example_multiindex1)
A:pandas.tests.reshape.test_concat.example_multiindex2->pandas.MultiIndex.from_product([['a'], ['c']])
A:pandas.tests.reshape.test_concat.example_dataframe2->pandas.DataFrame([1], index=example_multiindex2)
A:pandas.tests.reshape.test_concat.expected_index->pandas.MultiIndex(levels=[['s1', 's2'], ['a'], ['b', 'c']], codes=[[0, 1], [0, 0], [0, 1]], names=['testname', None, None])
A:pandas.tests.reshape.test_concat.result_copy->pandas.concat(deepcopy(example_dict), names=['testname'])
A:pandas.tests.reshape.test_concat.result_no_copy->pandas.concat(example_dict, names=['testname'])
A:pandas.tests.reshape.test_concat.cat->Categorical(['a', 'b', 'c'])
A:pandas.tests.reshape.test_concat.cat2->Categorical(['a', 'b', 'a', 'b'], categories=['a', 'b'])
A:pandas.tests.reshape.test_concat.cat3->Categorical(['a', 'b'], categories=['a', 'b', 'c'])
A:pandas.tests.reshape.test_concat.df_different_categories->DataFrame({'cats': cat3, 'vals': vals3})
A:pandas.tests.reshape.test_concat.obj->Series(['a', 'b', 'c'])
A:pandas.tests.reshape.test_concat.num->Series([1, 2, 3])
A:pandas.tests.reshape.test_concat.df2['h']->Series(Categorical(cat_values))
A:pandas.tests.reshape.test_concat.df['grade']->Categorical(df['raw_grade'])
A:pandas.tests.reshape.test_concat.dfx->pandas.concat([df1, df2])
A:pandas.tests.reshape.test_concat.dfa->pandas.DataFrame({'a': [1, 2], 'b': [1, 2], 'c': [1, 2]}, columns=['b', 'a', 'c']).append(df2)
A:pandas.tests.reshape.test_concat.c->pandas.Series(3, index=pd.CategoricalIndex([1, 2], categories=categories))
A:pandas.tests.reshape.test_concat.idx1->pandas.date_range('2011-01-01', periods=3, freq='H', tz='Europe/Paris')
A:pandas.tests.reshape.test_concat.idx2->pandas.date_range(start=idx1[0], end=idx1[-1], freq='H')
A:pandas.tests.reshape.test_concat.idx3->pandas.date_range('2011-01-01', periods=3, freq='H', tz='Asia/Tokyo')
A:pandas.tests.reshape.test_concat.dr->pandas.date_range('01-Jan-2013', periods=100, freq='50L', tz='UTC')
A:pandas.tests.reshape.test_concat.data->list(range(100))
A:pandas.tests.reshape.test_concat.df_1->pandas.DataFrame({'Row': [0, 1, 1], 'EmptyCol': np.nan, 'NumberCol': [1, 2, 3]})
A:pandas.tests.reshape.test_concat.df_2->pandas.DataFrame(columns=df_1.columns)
pandas.tests.reshape.test_concat.TestAppend
pandas.tests.reshape.test_concat.TestAppend.test_append(self,sort,float_frame)
pandas.tests.reshape.test_concat.TestAppend.test_append_different_columns(self,sort)
pandas.tests.reshape.test_concat.TestAppend.test_append_different_columns_types(self,df_columns,series_index)
pandas.tests.reshape.test_concat.TestAppend.test_append_different_columns_types_raises(self,index_can_append,index_cannot_append_with_other)
pandas.tests.reshape.test_concat.TestAppend.test_append_dtype_coerce(self,sort)
pandas.tests.reshape.test_concat.TestAppend.test_append_empty(self,float_frame)
pandas.tests.reshape.test_concat.TestAppend.test_append_empty_frame_to_series_with_dateutil_tz(self)
pandas.tests.reshape.test_concat.TestAppend.test_append_length0_frame(self,sort)
pandas.tests.reshape.test_concat.TestAppend.test_append_many(self,sort,float_frame)
pandas.tests.reshape.test_concat.TestAppend.test_append_missing_column_proper_upcast(self,sort)
pandas.tests.reshape.test_concat.TestAppend.test_append_new_columns(self)
pandas.tests.reshape.test_concat.TestAppend.test_append_overlap_raises(self,float_frame)
pandas.tests.reshape.test_concat.TestAppend.test_append_preserve_index_name(self)
pandas.tests.reshape.test_concat.TestAppend.test_append_records(self)
pandas.tests.reshape.test_concat.TestAppend.test_append_same_columns_type(self,index)
pandas.tests.reshape.test_concat.TestAppend.test_append_sorts(self,sort)
pandas.tests.reshape.test_concat.TestConcatAppendCommon
pandas.tests.reshape.test_concat.TestConcatAppendCommon._check_expected_dtype(self,obj,label)
pandas.tests.reshape.test_concat.TestConcatAppendCommon.setup_method(self,method)
pandas.tests.reshape.test_concat.TestConcatAppendCommon.test_concat_categorical(self)
pandas.tests.reshape.test_concat.TestConcatAppendCommon.test_concat_categorical_3elem_coercion(self)
pandas.tests.reshape.test_concat.TestConcatAppendCommon.test_concat_categorical_coercion(self)
pandas.tests.reshape.test_concat.TestConcatAppendCommon.test_concat_categorical_coercion_nan(self)
pandas.tests.reshape.test_concat.TestConcatAppendCommon.test_concat_categorical_empty(self)
pandas.tests.reshape.test_concat.TestConcatAppendCommon.test_concat_categorical_multi_coercion(self)
pandas.tests.reshape.test_concat.TestConcatAppendCommon.test_concat_categorical_ordered(self)
pandas.tests.reshape.test_concat.TestConcatAppendCommon.test_concatlike_common_coerce_to_pandas_object(self)
pandas.tests.reshape.test_concat.TestConcatAppendCommon.test_concatlike_common_period(self)
pandas.tests.reshape.test_concat.TestConcatAppendCommon.test_concatlike_common_period_diff_freq_to_object(self)
pandas.tests.reshape.test_concat.TestConcatAppendCommon.test_concatlike_common_period_mixed_dt_to_object(self)
pandas.tests.reshape.test_concat.TestConcatAppendCommon.test_concatlike_datetimetz(self,tz_aware_fixture)
pandas.tests.reshape.test_concat.TestConcatAppendCommon.test_concatlike_datetimetz_short(self,tz)
pandas.tests.reshape.test_concat.TestConcatAppendCommon.test_concatlike_datetimetz_to_object(self,tz_aware_fixture)
pandas.tests.reshape.test_concat.TestConcatAppendCommon.test_concatlike_dttz(self,tz_aware_fixture)
pandas.tests.reshape.test_concat.TestConcatAppendCommon.test_concatlike_dttz_short(self,tz)
pandas.tests.reshape.test_concat.TestConcatAppendCommon.test_concatlike_dttz_to_object(self,tz_aware_fixture)
pandas.tests.reshape.test_concat.TestConcatAppendCommon.test_concatlike_dtypes_coercion(self)
pandas.tests.reshape.test_concat.TestConcatAppendCommon.test_concatlike_same_dtypes(self)
pandas.tests.reshape.test_concat.TestConcatAppendCommon.test_dtypes(self)
pandas.tests.reshape.test_concat.TestConcatAppendCommon.test_union_categorical_same_categories_different_order(self)
pandas.tests.reshape.test_concat.TestConcatenate
pandas.tests.reshape.test_concat.TestConcatenate.test_categorical_concat(self,sort)
pandas.tests.reshape.test_concat.TestConcatenate.test_categorical_concat_append(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_categorical_concat_dtypes(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_categorical_concat_gh7864(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_categorical_concat_preserve(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_categorical_index_preserver(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_NaT_dataframes(self,tz)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_NaT_dataframes_all_NaT_axis_0(self,tz1,tz2,s)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_NaT_dataframes_all_NaT_axis_1(self,tz1,tz2)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_NaT_series(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_NaT_series_dataframe_all_NaT(self,tz1,tz2)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_bug_1719(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_bug_2972(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_bug_3602(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_categoricalindex(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_copy(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_dataframe_keys_bug(self,sort)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_datetime64_block(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_datetime_timezone(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_dict(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_different_extension_dtypes_upcasts(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_dt64_block(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_dt_timezone(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_empty_series(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_empty_series_timelike(self,tz,values)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_exclude_none(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_ignore_index(self,sort)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_inner_join_empty(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_invalid(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_invalid_first_argument(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_iterables(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_keys_and_levels(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_keys_levels_no_overlap(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_keys_specific_levels(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_keys_with_none(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_mixed_objs(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_multiindex_dfs_with_deepcopy(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_multiindex_rangeindex(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_multiindex_with_keys(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_multiindex_with_none_in_index_names(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_multiindex_with_tz(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_odered_dict(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_order(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_period_multiple_freq_series(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_period_other_series(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_period_series(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_rename_index(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_series(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_series_axis1(self,sort=sort)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_series_axis1_names_applied(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_series_axis1_same_names_ignore_index(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_series_partial_columns_names(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_single_with_key(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_timedelta64_block(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_tz_frame(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_tz_series(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_tz_series_tzlocal(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_tz_series_with_datetimelike(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_tz_series_with_dtlike(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_concat_with_group_keys(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_crossed_dtypes_weird_corner(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_default_index(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_dtype_coerceion(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_dups_index(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_empty_dtype_coerce(self)
pandas.tests.reshape.test_concat.TestConcatenate.test_handle_empty_objects(self,sort)
pandas.tests.reshape.test_concat.TestConcatenate.test_with_mixed_tuples(self,sort)
pandas.tests.reshape.test_concat.sort(request)
pandas.tests.reshape.test_concat.test_concat_aligned_sort()
pandas.tests.reshape.test_concat.test_concat_aligned_sort_does_not_raise()
pandas.tests.reshape.test_concat.test_concat_categorical_tz()
pandas.tests.reshape.test_concat.test_concat_categorical_unchanged()
pandas.tests.reshape.test_concat.test_concat_datetimeindex_freq()
pandas.tests.reshape.test_concat.test_concat_dtindex_freq()
pandas.tests.reshape.test_concat.test_concat_empty_and_non_empty_frame_regression()
pandas.tests.reshape.test_concat.test_concat_empty_and_non_empty_series_regression()
pandas.tests.reshape.test_concat.test_concat_empty_df_object_dtype()
pandas.tests.reshape.test_concat.test_concat_inner_sort(sort)
pandas.tests.reshape.test_concat.test_concat_no_unnecessary_upcast(dt,pdt)
pandas.tests.reshape.test_concat.test_concat_series_name_npscalar_tuple(s1name,s2name)
pandas.tests.reshape.test_concat.test_concat_sorts_columns(sort)
pandas.tests.reshape.test_concat.test_concat_sorts_index(sort)
pandas.tests.reshape.test_concat.test_concat_sparse()
pandas.tests.reshape.test_concat.test_concat_will_upcast(dt,pdt)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/reshape/test_reshape.py----------------------------------------
A:pandas.tests.reshape.test_reshape.s_list->list('aaa')
A:pandas.tests.reshape.test_reshape.s_series->Series(s_list)
A:pandas.tests.reshape.test_reshape.s_series_index->Series(s_list, list('ABC'))
A:pandas.tests.reshape.test_reshape.expected->DataFrame({'A': c.copy(), 'B': c.copy(), 'C': c.copy(), 'D': c.copy()}, columns=Index(list('ABCD'), name='minor'), index=dti.rename('major'))
A:pandas.tests.reshape.test_reshape.result->df['str'].astype('category').unstack()
A:pandas.tests.reshape.test_reshape.expected.index->list('ABC')
A:pandas.tests.reshape.test_reshape.s_df->DataFrame({'a': [0, 1, 0, 1, 2], 'b': ['A', 'A', 'B', 'C', 'C'], 'c': [2, 3, 3, 3, 2]})
A:pandas.tests.reshape.test_reshape.dtype_name->'Sparse[{}, {}]'.format(self.effective_dtype(dtype).name, fill_value)
A:pandas.tests.reshape.test_reshape.just_na_series->Series(just_na_list)
A:pandas.tests.reshape.test_reshape.just_na_series_index->Series(just_na_list, index=['A'])
A:pandas.tests.reshape.test_reshape.res_list->get_dummies(just_na_list, sparse=sparse)
A:pandas.tests.reshape.test_reshape.res_series->get_dummies(just_na_series, sparse=sparse)
A:pandas.tests.reshape.test_reshape.res_series_index->get_dummies(just_na_series_index, sparse=sparse)
A:pandas.tests.reshape.test_reshape.res->get_dummies(s_NA, drop_first=True, sparse=sparse)
A:pandas.tests.reshape.test_reshape.exp->exp.apply(SparseArray, fill_value=0).apply(SparseArray, fill_value=0)
A:pandas.tests.reshape.test_reshape.res_na->get_dummies(s_NA, dummy_na=True, drop_first=True, sparse=sparse)
A:pandas.tests.reshape.test_reshape.exp_na->exp_na.apply(SparseArray, fill_value=0).apply(SparseArray, fill_value=0)
A:pandas.tests.reshape.test_reshape.res_just_na->get_dummies([np.nan], dummy_na=True, drop_first=True, sparse=sparse)
A:pandas.tests.reshape.test_reshape.exp_just_na->DataFrame(index=np.arange(1))
A:pandas.tests.reshape.test_reshape.eacute->unicodedata.lookup('LATIN SMALL LETTER E WITH ACUTE')
A:pandas.tests.reshape.test_reshape.typ->SparseDtype(dtype, 0)
A:pandas.tests.reshape.test_reshape.expected[cols]->expected[cols].astype(np.uint8).astype(np.uint8)
A:pandas.tests.reshape.test_reshape.df->pandas.concat({c: data[c].stack() for c in data}, axis='columns')
A:pandas.tests.reshape.test_reshape.expected[columns]->expected[columns].astype(pd.SparseDtype('uint8', 0)).astype(pd.SparseDtype('uint8', 0))
A:pandas.tests.reshape.test_reshape.df['cat']->pandas.Categorical(['x', 'y', 'y'])
A:pandas.tests.reshape.test_reshape.expected[col]->SparseArray(expected[col])
A:pandas.tests.reshape.test_reshape.data->numpy.array([[1, 0, 0], [0, 1, 0]], dtype=self.effective_dtype(dtype))
A:pandas.tests.reshape.test_reshape.expected[columns[2:]]->expected[columns[2:]].astype(dtype).astype(dtype)
A:pandas.tests.reshape.test_reshape.cat->pandas.Categorical(list('xy'), categories=list('xyz'), ordered=ordered)
A:pandas.tests.reshape.test_reshape.cols->pandas.CategoricalIndex(cat.categories, categories=cat.categories, ordered=ordered)
A:pandas.tests.reshape.test_reshape.df2->pandas.concat({c: data[c].stack() for c in data}, axis='columns').reindex(columns=['GDP'])
A:pandas.tests.reshape.test_reshape.dtype->SparseDtype('uint8', 0)
A:pandas.tests.reshape.test_reshape.df['category']->df['str'].astype('category')
A:pandas.tests.reshape.test_reshape.c->Categorical(['foo'] * len(dti))
pandas.tests.reshape.test_reshape.TestCategoricalReshape
pandas.tests.reshape.test_reshape.TestCategoricalReshape.test_reshaping_multi_index_categorical(self)
pandas.tests.reshape.test_reshape.TestGetDummies
pandas.tests.reshape.test_reshape.TestGetDummies.df(self)
pandas.tests.reshape.test_reshape.TestGetDummies.dtype(self,request)
pandas.tests.reshape.test_reshape.TestGetDummies.effective_dtype(self,dtype)
pandas.tests.reshape.test_reshape.TestGetDummies.sparse(self,request)
pandas.tests.reshape.test_reshape.TestGetDummies.test_basic(self,sparse,dtype)
pandas.tests.reshape.test_reshape.TestGetDummies.test_basic_drop_first(self,sparse)
pandas.tests.reshape.test_reshape.TestGetDummies.test_basic_drop_first_NA(self,sparse)
pandas.tests.reshape.test_reshape.TestGetDummies.test_basic_drop_first_one_level(self,sparse)
pandas.tests.reshape.test_reshape.TestGetDummies.test_basic_types(self,sparse,dtype)
pandas.tests.reshape.test_reshape.TestGetDummies.test_dataframe_dummies_all_obj(self,df,sparse)
pandas.tests.reshape.test_reshape.TestGetDummies.test_dataframe_dummies_drop_first(self,df,sparse)
pandas.tests.reshape.test_reshape.TestGetDummies.test_dataframe_dummies_drop_first_with_categorical(self,df,sparse,dtype)
pandas.tests.reshape.test_reshape.TestGetDummies.test_dataframe_dummies_drop_first_with_na(self,df,sparse)
pandas.tests.reshape.test_reshape.TestGetDummies.test_dataframe_dummies_mix_default(self,df,sparse,dtype)
pandas.tests.reshape.test_reshape.TestGetDummies.test_dataframe_dummies_prefix_bad_length(self,df,sparse)
pandas.tests.reshape.test_reshape.TestGetDummies.test_dataframe_dummies_prefix_dict(self,sparse)
pandas.tests.reshape.test_reshape.TestGetDummies.test_dataframe_dummies_prefix_list(self,df,sparse)
pandas.tests.reshape.test_reshape.TestGetDummies.test_dataframe_dummies_prefix_sep(self,df,sparse)
pandas.tests.reshape.test_reshape.TestGetDummies.test_dataframe_dummies_prefix_sep_bad_length(self,df,sparse)
pandas.tests.reshape.test_reshape.TestGetDummies.test_dataframe_dummies_prefix_str(self,df,sparse)
pandas.tests.reshape.test_reshape.TestGetDummies.test_dataframe_dummies_preserve_categorical_dtype(self,dtype)
pandas.tests.reshape.test_reshape.TestGetDummies.test_dataframe_dummies_subset(self,df,sparse)
pandas.tests.reshape.test_reshape.TestGetDummies.test_dataframe_dummies_unicode(self,get_dummies_kwargs,expected)
pandas.tests.reshape.test_reshape.TestGetDummies.test_dataframe_dummies_with_categorical(self,df,sparse,dtype)
pandas.tests.reshape.test_reshape.TestGetDummies.test_dataframe_dummies_with_na(self,df,sparse,dtype)
pandas.tests.reshape.test_reshape.TestGetDummies.test_get_dummies_all_sparse(self)
pandas.tests.reshape.test_reshape.TestGetDummies.test_get_dummies_dont_sparsify_all_columns(self,sparse)
pandas.tests.reshape.test_reshape.TestGetDummies.test_get_dummies_duplicate_columns(self,df)
pandas.tests.reshape.test_reshape.TestGetDummies.test_get_dummies_with_string_values(self,values)
pandas.tests.reshape.test_reshape.TestGetDummies.test_include_na(self,sparse,dtype)
pandas.tests.reshape.test_reshape.TestGetDummies.test_int_df(self,dtype)
pandas.tests.reshape.test_reshape.TestGetDummies.test_int_int(self)
pandas.tests.reshape.test_reshape.TestGetDummies.test_just_na(self,sparse)
pandas.tests.reshape.test_reshape.TestGetDummies.test_raises_on_dtype_object(self,df)
pandas.tests.reshape.test_reshape.TestGetDummies.test_unicode(self,sparse)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/reshape/test_pivot.py----------------------------------------
A:pandas.tests.reshape.test_pivot.self.data->DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'foo', 'foo', 'foo'], 'B': ['one', 'one', 'one', 'two', 'one', 'one', 'one', 'two', 'two', 'two', 'one'], 'C': ['dull', 'dull', 'shiny', 'dull', 'dull', 'shiny', 'shiny', 'dull', 'shiny', 'shiny', 'shiny'], 'D': np.random.randn(11), 'E': np.random.randn(11), 'F': np.random.randn(11)})
A:pandas.tests.reshape.test_pivot.table->crosstab([a, b], c, values, aggfunc=np.sum, rownames=['foo', 'bar'], colnames=['baz'])
A:pandas.tests.reshape.test_pivot.table2->df.rename(columns=str).pivot_table(values='4', index=['0', '1', '3'], columns=['2'])
A:pandas.tests.reshape.test_pivot.expected->pandas.DataFrame([[0.111111, 0.111111, 0.222222], [0.111111, 0.111111, 0.222222], [0.222222, 0.111111, 0.333333], [0.0, 0.222222, 0.222222], [0.444444, 0.555555, 1]])
A:pandas.tests.reshape.test_pivot.df->pandas.DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar'], 'B': ['one', 'one', 'one', 'two', 'two', 'one', 'one', 'two', 'two'], 'C': ['small', 'large', 'large', 'small', 'small', 'large', 'small', 'small', 'large'], 'D': [1, 2, 2, 3, 3, 4, 5, 6, 7], 'E': [2, 4, 5, 5, 6, 6, 8, 9, 9]})
A:pandas.tests.reshape.test_pivot.expected.index->MultiIndex(levels=[['Sub-Total', 'bar', 'foo'], ['', 'one', 'two']], codes=[[1, 1, 2, 2, 0], [1, 2, 1, 2, 0]], names=['A', 'B'])
A:pandas.tests.reshape.test_pivot.expected.columns->Index(['large', 'small', 'Sub-Total'], dtype='object', name='C')
A:pandas.tests.reshape.test_pivot.df.col1->pandas.DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar'], 'B': ['one', 'one', 'one', 'two', 'two', 'one', 'one', 'two', 'two'], 'C': ['small', 'large', 'large', 'small', 'small', 'large', 'small', 'small', 'large'], 'D': [1, 2, 2, 3, 3, 4, 5, 6, 7], 'E': [2, 4, 5, 5, 6, 6, 8, 9, 9]}).col1.astype('category')
A:pandas.tests.reshape.test_pivot.df.col2->pandas.DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar'], 'B': ['one', 'one', 'one', 'two', 'two', 'one', 'one', 'two', 'two'], 'C': ['small', 'large', 'large', 'small', 'small', 'large', 'small', 'small', 'large'], 'D': [1, 2, 2, 3, 3, 4, 5, 6, 7], 'E': [2, 4, 5, 5, 6, 6, 8, 9, 9]}).col2.astype('category')
A:pandas.tests.reshape.test_pivot.result->pandas.crosstab([df.A, df.B], df.C, margins=True, margins_name='Sub-Total', normalize=True)
A:pandas.tests.reshape.test_pivot.rs->pandas.DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar'], 'B': ['one', 'one', 'one', 'two', 'two', 'one', 'one', 'two', 'two'], 'C': ['small', 'large', 'large', 'small', 'small', 'large', 'small', 'small', 'large'], 'D': [1, 2, 2, 3, 3, 4, 5, 6, 7], 'E': [2, 4, 5, 5, 6, 6, 8, 9, 9]}).pivot_table(columns='cols', aggfunc={'values': 'mean'})
A:pandas.tests.reshape.test_pivot.pv_col->pandas.DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar'], 'B': ['one', 'one', 'one', 'two', 'two', 'one', 'one', 'two', 'two'], 'C': ['small', 'large', 'large', 'small', 'small', 'large', 'small', 'small', 'large'], 'D': [1, 2, 2, 3, 3, 4, 5, 6, 7], 'E': [2, 4, 5, 5, 6, 6, 8, 9, 9]}).pivot_table('quantity', 'month', ['customer', 'product'], dropna=False)
A:pandas.tests.reshape.test_pivot.pv_ind->pandas.DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar'], 'B': ['one', 'one', 'one', 'two', 'two', 'one', 'one', 'two', 'two'], 'C': ['small', 'large', 'large', 'small', 'small', 'large', 'small', 'small', 'large'], 'D': [1, 2, 2, 3, 3, 4, 5, 6, 7], 'E': [2, 4, 5, 5, 6, 6, 8, 9, 9]}).pivot_table('quantity', ['customer', 'product'], 'month', dropna=False)
A:pandas.tests.reshape.test_pivot.m->pandas.MultiIndex.from_arrays([['bar', 'bar', 'foo', 'foo', 'All'], ['one', 'two', 'one', 'two', '']], names=['a', 'b'])
A:pandas.tests.reshape.test_pivot.cat1->Categorical(['a', 'a', 'b', 'b'], categories=['a', 'b', 'z'], ordered=True)
A:pandas.tests.reshape.test_pivot.cat2->Categorical(['c', 'd', 'c', 'd'], categories=['c', 'd', 'y'], ordered=True)
A:pandas.tests.reshape.test_pivot.exp_index->pandas.MultiIndex.from_arrays([cat1, cat2], names=['A', 'B'])
A:pandas.tests.reshape.test_pivot.df['A']->df['A'].astype(CDT(categories, ordered=False)).astype(CDT(categories, ordered=False))
A:pandas.tests.reshape.test_pivot.expected_columns->pandas.CategoricalIndex(categories, categories=categories, ordered=False, name='MODEL')
A:pandas.tests.reshape.test_pivot.expected_index->pandas.Index(range(3), name='foo')
A:pandas.tests.reshape.test_pivot.ordered_cat->pandas.IntervalIndex.from_arrays([0, 0, 1, 1], [1, 1, 2, 2])
A:pandas.tests.reshape.test_pivot.pivot_tab->pandas.pivot_table(df, index='C', columns='B', values='A', aggfunc='sum', margins=True)
A:pandas.tests.reshape.test_pivot.f->DataFrame({'a': ['cat', 'bat', 'cat', 'bat'], 'v': [1.5, 2.5, 3.5, 4.5], 'i': ['a', 'b', 'a', 'b']})
A:pandas.tests.reshape.test_pivot.z->pivot_table(f, values='v', index=['a'], columns=['i'], fill_value=0, aggfunc=np.mean)
A:pandas.tests.reshape.test_pivot.v->numpy.arange(5, dtype=np.float64)
A:pandas.tests.reshape.test_pivot.df_res->pandas.DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar'], 'B': ['one', 'one', 'one', 'two', 'two', 'one', 'one', 'two', 'two'], 'C': ['small', 'large', 'large', 'small', 'small', 'large', 'small', 'small', 'large'], 'D': [1, 2, 2, 3, 3, 4, 5, 6, 7], 'E': [2, 4, 5, 5, 6, 6, 8, 9, 9]}).reset_index().pivot_table(index='index', columns=columns, values=values)
A:pandas.tests.reshape.test_pivot.idx->pandas.MultiIndex.from_tuples(tuples, names=['Date', 'PayDay'])
A:pandas.tests.reshape.test_pivot.res->pandas.crosstab(a, [b, c], rownames=['a'], colnames=['b', 'c'], dropna=False)
A:pandas.tests.reshape.test_pivot.exp_columns->pandas.MultiIndex.from_tuples([('A', pd.Timestamp('2011-01-31'))])
A:pandas.tests.reshape.test_pivot.exp->pandas.DataFrame([3], index=pd.DatetimeIndex(['2011-12-31']), columns=exp_columns)
A:pandas.tests.reshape.test_pivot.means->f(np.mean)
A:pandas.tests.reshape.test_pivot.stds->f(np.std)
A:pandas.tests.reshape.test_pivot.pv->pandas.pivot(df, index='p1', columns='p2', values='data1')
A:pandas.tests.reshape.test_pivot.df['dt1']->df['dt1'].apply(lambda d: pd.Timestamp(d)).apply(lambda d: pd.Timestamp(d))
A:pandas.tests.reshape.test_pivot.df['dt2']->df['dt2'].apply(lambda d: pd.Timestamp(d)).apply(lambda d: pd.Timestamp(d))
A:pandas.tests.reshape.test_pivot.exp_col1->Index(['sum', 'sum', 'sum', 'sum', 'mean', 'mean', 'mean', 'mean'])
A:pandas.tests.reshape.test_pivot.exp_col2->Index(['value1', 'value1', 'value2', 'value2'] * 2)
A:pandas.tests.reshape.test_pivot.exp_col->pandas.MultiIndex.from_arrays([[7, 7, 8, 8, 9, 9], [1, 2] * 3], names=['dt1', 'dt2'])
A:pandas.tests.reshape.test_pivot.mins->pandas.DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar'], 'B': ['one', 'one', 'one', 'two', 'two', 'one', 'one', 'two', 'two'], 'C': ['small', 'large', 'large', 'small', 'small', 'large', 'small', 'small', 'large'], 'D': [1, 2, 2, 3, 3, 4, 5, 6, 7], 'E': [2, 4, 5, 5, 6, 6, 8, 9, 9]}).ts.map(lambda x: x.replace(hour=0, minute=0, second=0, microsecond=0))
A:pandas.tests.reshape.test_pivot.index->pandas.Index([1, 2, 3, greek], dtype='object', name='foo')
A:pandas.tests.reshape.test_pivot.columns->MultiIndex(levels=[['bar', 'baz'], ['first', 'second']], codes=[[0, 0, 1, 1], [0, 1, 0, 1]])
A:pandas.tests.reshape.test_pivot.expected_col_margins->self.data.groupby(index)[values_col].mean()
A:pandas.tests.reshape.test_pivot.expected_ix_margins->self.data.groupby(columns)[values_col].mean()
A:pandas.tests.reshape.test_pivot.expected_total_margins->self.data[values_col].mean()
A:pandas.tests.reshape.test_pivot.rtable->self.data.pivot_table(columns=['AA', 'BB'], margins=True, aggfunc=np.mean)
A:pandas.tests.reshape.test_pivot.df[['D', 'E', 'F']]->numpy.arange(len(df) * 3).reshape(len(df), 3)
A:pandas.tests.reshape.test_pivot.mi->pandas.MultiIndex.from_arrays([range(3), range(1, 4)], names=names)
A:pandas.tests.reshape.test_pivot.data->DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'foo', 'foo', 'foo'], 'B': ['one', 'one', 'one', 'two', 'one', 'one', 'one', 'two', 'two', 'two', 'one'], 'C': range(11)})
A:pandas.tests.reshape.test_pivot.df2->pandas.DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar'], 'B': ['one', 'one', 'one', 'two', 'two', 'one', 'one', 'two', 'two'], 'C': ['small', 'large', 'large', 'small', 'small', 'large', 'small', 'small', 'large'], 'D': [1, 2, 2, 3, 3, 4, 5, 6, 7], 'E': [2, 4, 5, 5, 6, 6, 8, 9, 9]}).rename(columns=str)
A:pandas.tests.reshape.test_pivot.grouped->DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'foo', 'foo', 'foo'], 'B': ['one', 'one', 'one', 'two', 'one', 'one', 'one', 'two', 'two', 'two', 'one'], 'C': range(11)}).groupby(['a', 'b', 'c'])['value'].mean()
A:pandas.tests.reshape.test_pivot.dtype->numpy.dtype([('Index', object), ('Symbol', object), ('Year', int), ('Month', int), ('Day', int), ('Quantity', int), ('Price', float)])
A:pandas.tests.reshape.test_pivot.products->numpy.array([('SP500', 'ADBE'), ('SP500', 'NVDA'), ('SP500', 'ORCL'), ('NDQ100', 'AAPL'), ('NDQ100', 'MSFT'), ('NDQ100', 'GOOG'), ('FTSE', 'DGE.L'), ('FTSE', 'TSCO.L'), ('FTSE', 'GSK.L')], dtype=[('Index', object), ('Symbol', object)])
A:pandas.tests.reshape.test_pivot.items->numpy.empty(n, dtype=dtype)
A:pandas.tests.reshape.test_pivot.iproduct->numpy.random.randint(0, len(products), n)
A:pandas.tests.reshape.test_pivot.dr->pandas.date_range(date(2000, 1, 1), date(2010, 12, 31))
A:pandas.tests.reshape.test_pivot.items['Price']->numpy.random.lognormal(4.0, 2.0, n)
A:pandas.tests.reshape.test_pivot.pivoted->pandas.DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar'], 'B': ['one', 'one', 'one', 'two', 'two', 'one', 'one', 'two', 'two'], 'C': ['small', 'large', 'large', 'small', 'small', 'large', 'small', 'small', 'large'], 'D': [1, 2, 2, 3, 3, 4, 5, 6, 7], 'E': [2, 4, 5, 5, 6, 6, 8, 9, 9]}).pivot_table('Price', index=['Month', 'Day'], columns=['Index', 'Symbol', 'Year'], aggfunc='mean')
A:pandas.tests.reshape.test_pivot.result_list->pandas.crosstab([df.A, df.B], df.C, margins=True, margins_name='Sub-Total', normalize=True).tolist()
A:pandas.tests.reshape.test_pivot.msg->'Conflicting name "{}" in margins|margins_name argument must be a string'.format(margin_name)
A:pandas.tests.reshape.test_pivot.exp_idx->Index(['a', 'b'], name='label')
A:pandas.tests.reshape.test_pivot.exp_col3->pandas.DatetimeIndex(['2013-01-01 15:00:00', '2013-02-01 15:00:00'] * 4, tz='Asia/Tokyo', name='dt2')
A:pandas.tests.reshape.test_pivot.rng->date_range('1/1/2000', '12/31/2004', freq='M')
A:pandas.tests.reshape.test_pivot.ts->Series(np.random.randn(len(rng)), index=rng)
A:pandas.tests.reshape.test_pivot.annual->pivot_table(pd.DataFrame(ts), index=ts.index.year, columns=ts.index.month)
A:pandas.tests.reshape.test_pivot.annual.columns->pivot_table(pd.DataFrame(ts), index=ts.index.year, columns=ts.index.month).columns.droplevel(0)
A:pandas.tests.reshape.test_pivot.doy->numpy.asarray(ts.index.dayofyear)
A:pandas.tests.reshape.test_pivot.pivot_values_list->pandas.pivot_table(self.data, index=['A'], values=list(aggs.keys()), aggfunc=aggs)
A:pandas.tests.reshape.test_pivot.pivot_values_keys->pandas.pivot_table(self.data, index=['A'], values=aggs.keys(), aggfunc=aggs)
A:pandas.tests.reshape.test_pivot.pivot_values_gen->pandas.pivot_table(self.data, index=['A'], values=agg_values_gen, aggfunc=aggs)
A:pandas.tests.reshape.test_pivot.costs->pandas.DataFrame({'item': ['bacon', 'cheese', 'bacon', 'cheese'], 'cost': [2.5, 4.5, 3.2, 3.3], 'day': ['M', 'M', 'T', 'T']})
A:pandas.tests.reshape.test_pivot.ix->pandas.Index(['bacon', 'cheese', margins_name], dtype='object', name='item')
A:pandas.tests.reshape.test_pivot.cols->pandas.MultiIndex.from_tuples(tups, names=[None, None, 'day'])
A:pandas.tests.reshape.test_pivot.df.y->pandas.DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar'], 'B': ['one', 'one', 'one', 'two', 'two', 'one', 'one', 'two', 'two'], 'C': ['small', 'large', 'large', 'small', 'small', 'large', 'small', 'small', 'large'], 'D': [1, 2, 2, 3, 3, 4, 5, 6, 7], 'E': [2, 4, 5, 5, 6, 6, 8, 9, 9]}).y.astype('category')
A:pandas.tests.reshape.test_pivot.df.z->pandas.DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar'], 'B': ['one', 'one', 'one', 'two', 'two', 'one', 'one', 'two', 'two'], 'C': ['small', 'large', 'large', 'small', 'small', 'large', 'small', 'small', 'large'], 'D': [1, 2, 2, 3, 3, 4, 5, 6, 7], 'E': [2, 4, 5, 5, 6, 6, 8, 9, 9]}).z.astype('category')
A:pandas.tests.reshape.test_pivot.expected_cols->pandas.CategoricalIndex(['A', 'B'], ordered=ordered_fixture, name='Col')
A:pandas.tests.reshape.test_pivot.df['C1']->df['C1'].astype('category').astype('category')
A:pandas.tests.reshape.test_pivot.expected_data->numpy.array([[2.0, 2.0, 4.0], [2.0, 2.0, 4.0], [2.0, 2.0, 4.0], [2.0, np.nan, 2.0], [np.nan, 2.0, 2.0], [2.0, np.nan, 2.0], [np.nan, 2.0, 2.0], [2.0, np.nan, 2.0], [np.nan, 2.0, 2.0], [12.0, 12.0, 24.0]])
A:pandas.tests.reshape.test_pivot.df['Month']->df['Month'].astype('category').cat.set_categories(months).astype('category').cat.set_categories(months)
A:pandas.tests.reshape.test_pivot.frame->pandas.DataFrame({'foo': [1, 2, 3]})
A:pandas.tests.reshape.test_pivot.col->pandas.Index(['one', 'two'], name='A')
A:pandas.tests.reshape.test_pivot.foo->pandas.DataFrame({'X': [0, 0, 1, 1], 'Y': [0, 1, 0, 1], 'Z': [10, 20, 30, 40]})
A:pandas.tests.reshape.test_pivot.self.df->pandas.DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar'], 'B': ['one', 'one', 'one', 'two', 'two', 'one', 'one', 'two', 'two'], 'C': ['small', 'large', 'large', 'small', 'small', 'large', 'small', 'small', 'large'], 'D': [1, 2, 2, 3, 3, 4, 5, 6, 7], 'E': [2, 4, 5, 5, 6, 6, 8, 9, 9]}).append(df, ignore_index=True)
A:pandas.tests.reshape.test_pivot.a->numpy.array(['foo', 'foo', 'foo', 'bar', 'bar', 'foo', 'foo'], dtype=object)
A:pandas.tests.reshape.test_pivot.b->numpy.array(['one', 'one', 'two', 'one', 'two', np.nan, 'two'], dtype=object)
A:pandas.tests.reshape.test_pivot.c->numpy.array(['dull', 'dull', 'dull', 'dull', 'dull', 'shiny', 'shiny'], dtype=object)
A:pandas.tests.reshape.test_pivot.exp_cols->exp_cols.append(exp_margin).append(exp_margin)
A:pandas.tests.reshape.test_pivot.exp_margin->Series([len(df)], index=Index(['TOTAL'], name='a'))
A:pandas.tests.reshape.test_pivot.exp_rows->exp_rows.fillna(0).astype(np.int64).fillna(0).astype(np.int64)
A:pandas.tests.reshape.test_pivot.values->numpy.random.randn(100)
A:pandas.tests.reshape.test_pivot.s1->pandas.Series(range(3), name=names[0])
A:pandas.tests.reshape.test_pivot.s2->pandas.Series(range(1, 4), name=names[1])
A:pandas.tests.reshape.test_pivot.actual->pandas.crosstab([a, b], c, rownames=['a', 'b'], colnames=['c'], margins=True, dropna=True)
A:pandas.tests.reshape.test_pivot.rindex->pandas.Index([1, 2], name='a')
A:pandas.tests.reshape.test_pivot.cindex->pandas.Index([3, 4], name='b')
A:pandas.tests.reshape.test_pivot.full_normal->pandas.DataFrame([[0.2, 0], [0.2, 0.6]], index=rindex, columns=cindex)
A:pandas.tests.reshape.test_pivot.row_normal->pandas.DataFrame([[1.0, 0], [0.25, 0.75]], index=rindex, columns=cindex)
A:pandas.tests.reshape.test_pivot.col_normal->pandas.DataFrame([[0.5, 0], [0.5, 1.0]], index=rindex, columns=cindex)
A:pandas.tests.reshape.test_pivot.row_normal_margins->pandas.DataFrame([[1.0, 0], [0.25, 0.75], [0.4, 0.6]], index=pd.Index([1, 2, 'All'], name='a', dtype='object'), columns=pd.Index([3, 4], name='b', dtype='object'))
A:pandas.tests.reshape.test_pivot.col_normal_margins->pandas.DataFrame([[0.5, 0, 0.2], [0.5, 1.0, 0.8]], index=pd.Index([1, 2], name='a', dtype='object'), columns=pd.Index([3, 4, 'All'], name='b', dtype='object'))
A:pandas.tests.reshape.test_pivot.all_normal_margins->pandas.DataFrame([[0.2, 0, 0.2], [0.2, 0.6, 0.8], [0.4, 0.6, 1]], index=pd.Index([1, 2, 'All'], name='a', dtype='object'), columns=pd.Index([3, 4, 'All'], name='b', dtype='object'))
A:pandas.tests.reshape.test_pivot.norm_counts->pandas.DataFrame([[0.25, 0, 0.25], [0.25, 0.5, 0.75], [0.5, 0.5, 1]], index=pd.Index([1, 2, 'All'], name='a', dtype='object'), columns=pd.Index([3, 4, 'All'], name='b'))
A:pandas.tests.reshape.test_pivot.test_case->pandas.crosstab(df.a, df.b, df.c, aggfunc=np.sum, normalize='all', margins=True)
A:pandas.tests.reshape.test_pivot.norm_sum->pandas.DataFrame([[0, 0, 0.0], [0.4, 0.6, 1], [0.4, 0.6, 1]], index=pd.Index([1, 2, 'All'], name='a', dtype='object'), columns=pd.Index([3, 4, 'All'], name='b', dtype='object'))
A:pandas.tests.reshape.test_pivot.empty->pandas.DataFrame([[0.0, 0.0], [0.0, 0.0]], index=pd.Index([1, 2], name='a', dtype='int64'), columns=pd.Index([3, 4], name='b'))
A:pandas.tests.reshape.test_pivot.calculated->pandas.crosstab(df.a, df.b, values=df.c, aggfunc='count', normalize=False)
A:pandas.tests.reshape.test_pivot.nans->pandas.DataFrame([[0.0, np.nan], [0.0, 0.0]], index=pd.Index([1, 2], name='a', dtype='int64'), columns=pd.Index([3, 4], name='b'))
A:pandas.tests.reshape.test_pivot.df['MODEL']->df['MODEL'].astype('category').cat.set_categories(categories).astype('category').cat.set_categories(categories)
A:pandas.tests.reshape.test_pivot.expected_column->pandas.Index(['bar', 'foo', 'All'], dtype='object', name='C')
A:pandas.tests.reshape.test_pivot.s->pandas.Series(range(3), name='foo')
A:pandas.tests.reshape.test_pivot.e_idx->pandas.Index(['A', 'B', 'C'], name='row_0')
A:pandas.tests.reshape.test_pivot.e_columns->pandas.MultiIndex.from_tuples([(1, 4), (2, 6), (3, 5)], names=['b', 'a'])
pandas.tests.reshape.test_pivot.TestCrosstab
pandas.tests.reshape.test_pivot.TestCrosstab.setup_method(self,method)
pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_dropna(self)
pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_dup_index_names(self)
pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_errors(self)
pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_margins(self)
pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_margins_set_margin_name(self)
pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_multiple(self)
pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_ndarray(self)
pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_no_overlap(self)
pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_non_aligned(self)
pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_normalize(self)
pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_pass_values(self)
pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_single(self)
pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_tuple_name(self,names)
pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_unsorted_order(self)
pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_with_categorial_columns(self)
pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_with_empties(self)
pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_with_numpy_size(self)
pandas.tests.reshape.test_pivot.TestCrosstab.test_margin_dropna(self)
pandas.tests.reshape.test_pivot.TestCrosstab.test_margin_normalize(self)
pandas.tests.reshape.test_pivot.TestPivotTable
pandas.tests.reshape.test_pivot.TestPivotTable.setup_method(self,method)
pandas.tests.reshape.test_pivot.TestPivotTable.test_categorical_aggfunc(self,observed)
pandas.tests.reshape.test_pivot.TestPivotTable.test_categorical_margins(self,observed)
pandas.tests.reshape.test_pivot.TestPivotTable.test_categorical_margins_category(self,observed)
pandas.tests.reshape.test_pivot.TestPivotTable.test_categorical_pivot_index_ordering(self,observed)
pandas.tests.reshape.test_pivot.TestPivotTable.test_daily(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_margins(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_margins_casted_to_float(self,observed)
pandas.tests.reshape.test_pivot.TestPivotTable.test_margins_dtype(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_margins_dtype_len(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_margins_no_values_no_cols(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_margins_no_values_one_row_one_col(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_margins_no_values_two_row_two_cols(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_margins_no_values_two_rows(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_monthly(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pass_array(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pass_function(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_columns_lexsorted(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_complex_aggfunc(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_datetime_tz(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_dt_tz(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_dtaccessor(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_dtypes(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_index_with_nan(self,method)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_integer_columns(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_margins_name_unicode(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_multi_functions(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_multi_values(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_no_level_overlap(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_no_values(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_number_of_levels_larger_than_int32(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_periods(self,method)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_periods_with_margins(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_preserve_dtypes(self,columns,values)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_string_as_func(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_string_func_vs_func(self,f,f_numpy)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table(self,observed)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_aggfunc_dropna(self,dropna)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_aggfunc_scalar_dropna(self,dropna)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_categorical(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_categorical_observed_equal(self,observed)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_dropna(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_dropna_categoricals(self,dropna)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_empty_aggfunc(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_margins_name_with_aggfunc_list(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_multiple(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_no_column_raises(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_nocols(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_not_series(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_with_iterator_values(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_with_margins_set_margin_name(self,margin_name)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_timegrouper(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_tz_in_values(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_categorical(self,observed,ordered_fixture)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_interval_index(self,interval_values,dropna)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_interval_index_margins(self)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_list_like_values(self,values,method)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_list_like_values_nans(self,values,method)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_multiindex(self,method)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_non_observable_dropna(self,dropna)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_tuple_of_values(self,method)
pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_tz(self,method)
pandas.tests.reshape.test_pivot.dropna(request)
pandas.tests.reshape.test_pivot.interval_values(request,closed)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/reshape/test_union_categoricals.py----------------------------------------
A:pandas.tests.reshape.test_union_categoricals.result->union_categoricals([c1, c2])
A:pandas.tests.reshape.test_union_categoricals.expected->Categorical(['a', 'b', 'b', 'c'])
A:pandas.tests.reshape.test_union_categoricals.s->Categorical([0, 1.2, 2])
A:pandas.tests.reshape.test_union_categoricals.s2->Categorical([2, 3, 4])
A:pandas.tests.reshape.test_union_categoricals.res->union_categoricals([c2, c1], ignore_order=True, sort_categories=True)
A:pandas.tests.reshape.test_union_categoricals.exp->Categorical([1, 2, 3, 1, 2, 3], categories=[1, 2, 3])
A:pandas.tests.reshape.test_union_categoricals.c1->Series(c1)
A:pandas.tests.reshape.test_union_categoricals.c2->CategoricalIndex(c2)
pandas.tests.reshape.test_union_categoricals.TestUnionCategoricals
pandas.tests.reshape.test_union_categoricals.TestUnionCategoricals.test_union_categorical(self)
pandas.tests.reshape.test_union_categoricals.TestUnionCategoricals.test_union_categorical_same_categories_different_order(self)
pandas.tests.reshape.test_union_categoricals.TestUnionCategoricals.test_union_categorical_same_category(self)
pandas.tests.reshape.test_union_categoricals.TestUnionCategoricals.test_union_categorical_unwrap(self)
pandas.tests.reshape.test_union_categoricals.TestUnionCategoricals.test_union_categoricals_empty(self)
pandas.tests.reshape.test_union_categoricals.TestUnionCategoricals.test_union_categoricals_ignore_order(self)
pandas.tests.reshape.test_union_categoricals.TestUnionCategoricals.test_union_categoricals_nan(self)
pandas.tests.reshape.test_union_categoricals.TestUnionCategoricals.test_union_categoricals_ordered(self)
pandas.tests.reshape.test_union_categoricals.TestUnionCategoricals.test_union_categoricals_sort(self)
pandas.tests.reshape.test_union_categoricals.TestUnionCategoricals.test_union_categoricals_sort_false(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/reshape/test_util.py----------------------------------------
A:pandas.tests.reshape.test_util.(result1, result2)->cartesian_product([x, y])
A:pandas.tests.reshape.test_util.expected1->numpy.array([], dtype=np.asarray(x).dtype)
A:pandas.tests.reshape.test_util.expected2->numpy.array([], dtype=np.asarray(y).dtype)
A:pandas.tests.reshape.test_util.x->date_range('2000-01-01', periods=2)
A:pandas.tests.reshape.test_util.result->cartesian_product([])
pandas.tests.reshape.test_util.TestCartesianProduct
pandas.tests.reshape.test_util.TestCartesianProduct.test_datetimeindex(self)
pandas.tests.reshape.test_util.TestCartesianProduct.test_dtindex(self)
pandas.tests.reshape.test_util.TestCartesianProduct.test_empty(self)
pandas.tests.reshape.test_util.TestCartesianProduct.test_invalid_input(self,X)
pandas.tests.reshape.test_util.TestCartesianProduct.test_simple(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/reshape/test_melt.py----------------------------------------
A:pandas.tests.reshape.test_melt.self.df['id1']->(self.df['A'] > 0).astype(np.int64)
A:pandas.tests.reshape.test_melt.self.df['id2']->(self.df['B'] > 0).astype(np.int64)
A:pandas.tests.reshape.test_melt.self.df1->pandas.DataFrame([[1.067683, -1.110463, 0.20867], [-1.321405, 0.368915, -1.055342], [-0.807333, 0.08298, -0.873361]])
A:pandas.tests.reshape.test_melt.result->pandas.wide_to_long(wide_df, stubnames='PA', i=['node_id', 'A'], j='time')
A:pandas.tests.reshape.test_melt.result1->self.df.melt(id_vars=['id1'])
A:pandas.tests.reshape.test_melt.result2->self.df.melt(id_vars=['id1', 'id2'])
A:pandas.tests.reshape.test_melt.result3->self.df.melt(id_vars=['id1', 'id2'], value_vars='A')
A:pandas.tests.reshape.test_melt.result4->self.df.melt(id_vars=['id1', 'id2'], value_vars=['A', 'B'])
A:pandas.tests.reshape.test_melt.expected4->DataFrame({'id1': self.df['id1'].tolist() * 2, 'id2': self.df['id2'].tolist() * 2, 'variable': ['A'] * 10 + ['B'] * 10, 'value': self.df['A'].tolist() + self.df['B'].tolist()}, columns=['id1', 'id2', 'variable', 'value'])
A:pandas.tests.reshape.test_melt.expected->pandas.wide_to_long(wide_df, stubnames=['PA'], i=['node_id', 'A'], j='time')
A:pandas.tests.reshape.test_melt.result5->self.df.melt(var_name=self.var_name)
A:pandas.tests.reshape.test_melt.result6->self.df.melt(id_vars=['id1'], var_name=self.var_name)
A:pandas.tests.reshape.test_melt.result7->self.df.melt(id_vars=['id1', 'id2'], var_name=self.var_name)
A:pandas.tests.reshape.test_melt.result8->self.df.melt(id_vars=['id1', 'id2'], value_vars='A', var_name=self.var_name)
A:pandas.tests.reshape.test_melt.result9->self.df.melt(id_vars=['id1', 'id2'], value_vars=['A', 'B'], var_name=self.var_name)
A:pandas.tests.reshape.test_melt.expected9->DataFrame({'id1': self.df['id1'].tolist() * 2, 'id2': self.df['id2'].tolist() * 2, self.var_name: ['A'] * 10 + ['B'] * 10, 'value': self.df['A'].tolist() + self.df['B'].tolist()}, columns=['id1', 'id2', self.var_name, 'value'])
A:pandas.tests.reshape.test_melt.result10->self.df.melt(value_name=self.value_name)
A:pandas.tests.reshape.test_melt.result11->self.df.melt(id_vars=['id1'], value_name=self.value_name)
A:pandas.tests.reshape.test_melt.result12->self.df.melt(id_vars=['id1', 'id2'], value_name=self.value_name)
A:pandas.tests.reshape.test_melt.result13->self.df.melt(id_vars=['id1', 'id2'], value_vars='A', value_name=self.value_name)
A:pandas.tests.reshape.test_melt.result14->self.df.melt(id_vars=['id1', 'id2'], value_vars=['A', 'B'], value_name=self.value_name)
A:pandas.tests.reshape.test_melt.expected14->DataFrame({'id1': self.df['id1'].tolist() * 2, 'id2': self.df['id2'].tolist() * 2, 'variable': ['A'] * 10 + ['B'] * 10, self.value_name: self.df['A'].tolist() + self.df['B'].tolist()}, columns=['id1', 'id2', 'variable', self.value_name])
A:pandas.tests.reshape.test_melt.result15->self.df.melt(var_name=self.var_name, value_name=self.value_name)
A:pandas.tests.reshape.test_melt.result16->self.df.melt(id_vars=['id1'], var_name=self.var_name, value_name=self.value_name)
A:pandas.tests.reshape.test_melt.result17->self.df.melt(id_vars=['id1', 'id2'], var_name=self.var_name, value_name=self.value_name)
A:pandas.tests.reshape.test_melt.result18->self.df.melt(id_vars=['id1', 'id2'], value_vars='A', var_name=self.var_name, value_name=self.value_name)
A:pandas.tests.reshape.test_melt.result19->self.df.melt(id_vars=['id1', 'id2'], value_vars=['A', 'B'], var_name=self.var_name, value_name=self.value_name)
A:pandas.tests.reshape.test_melt.expected19->DataFrame({'id1': self.df['id1'].tolist() * 2, 'id2': self.df['id2'].tolist() * 2, self.var_name: ['A'] * 10 + ['B'] * 10, self.value_name: self.df['A'].tolist() + self.df['B'].tolist()}, columns=['id1', 'id2', self.var_name, self.value_name])
A:pandas.tests.reshape.test_melt.df20->self.df.copy()
A:pandas.tests.reshape.test_melt.result20->self.df.copy().melt()
A:pandas.tests.reshape.test_melt.res1->self.df1.melt(col_level=0)
A:pandas.tests.reshape.test_melt.res2->self.df1.melt(col_level='CAP')
A:pandas.tests.reshape.test_melt.res->self.df1.melt()
A:pandas.tests.reshape.test_melt.df->pandas.DataFrame({'treatment_1.1': [1.0, 2.0], 'treatment_2.1': [3.0, 4.0], 'result_1.2': [5.0, 6.0], 'result_1': [0, 9], 'A': ['X1', 'X2']})
A:pandas.tests.reshape.test_melt.expected_value->pandas.concat([pd.Series([1, 0, 0, 0, 0]), col], ignore_index=True)
A:pandas.tests.reshape.test_melt.data->DataFrame({'A': [1, 2], 'B': pd.Categorical(['X', 'Y'])})
A:pandas.tests.reshape.test_melt.multi->pandas.DataFrame({'treatment_1.1': [1.0, 2.0], 'treatment_2.1': [3.0, 4.0], 'result_1.2': [5.0, 6.0], 'result_1': [0, 9], 'A': ['X1', 'X2']}).copy()
A:pandas.tests.reshape.test_melt.exp->DataFrame(exp_data, columns=result.columns)
A:pandas.tests.reshape.test_melt.x->numpy.random.randn(3)
A:pandas.tests.reshape.test_melt.df_long->pandas.wide_to_long(df, stubs, i='id', j='age')
A:pandas.tests.reshape.test_melt.wide_df->pandas.DataFrame.from_dict(wide_data)
pandas.tests.reshape.test_melt.TestLreshape
pandas.tests.reshape.test_melt.TestLreshape.test_pairs(self)
pandas.tests.reshape.test_melt.TestMelt
pandas.tests.reshape.test_melt.TestMelt.setup_method(self,method)
pandas.tests.reshape.test_melt.TestMelt.test_col_level(self)
pandas.tests.reshape.test_melt.TestMelt.test_custom_value_name(self)
pandas.tests.reshape.test_melt.TestMelt.test_custom_var_and_value_name(self)
pandas.tests.reshape.test_melt.TestMelt.test_custom_var_name(self)
pandas.tests.reshape.test_melt.TestMelt.test_default_col_names(self)
pandas.tests.reshape.test_melt.TestMelt.test_melt_missing_columns_raises(self)
pandas.tests.reshape.test_melt.TestMelt.test_melt_mixed_int_str_id_vars(self)
pandas.tests.reshape.test_melt.TestMelt.test_melt_mixed_int_str_value_vars(self)
pandas.tests.reshape.test_melt.TestMelt.test_method_signatures(self)
pandas.tests.reshape.test_melt.TestMelt.test_multiindex(self)
pandas.tests.reshape.test_melt.TestMelt.test_pandas_dtypes(self,col)
pandas.tests.reshape.test_melt.TestMelt.test_preserve_category(self)
pandas.tests.reshape.test_melt.TestMelt.test_single_vars_work_with_multiindex(self)
pandas.tests.reshape.test_melt.TestMelt.test_top_level_method(self)
pandas.tests.reshape.test_melt.TestMelt.test_tuple_vars_fail_with_multiindex(self)
pandas.tests.reshape.test_melt.TestMelt.test_value_vars(self)
pandas.tests.reshape.test_melt.TestMelt.test_value_vars_types(self)
pandas.tests.reshape.test_melt.TestMelt.test_vars_work_with_multiindex(self)
pandas.tests.reshape.test_melt.TestWideToLong
pandas.tests.reshape.test_melt.TestWideToLong.test_cast_j_int(self)
pandas.tests.reshape.test_melt.TestWideToLong.test_character_overlap(self)
pandas.tests.reshape.test_melt.TestWideToLong.test_col_substring_of_stubname(self)
pandas.tests.reshape.test_melt.TestWideToLong.test_escapable_characters(self)
pandas.tests.reshape.test_melt.TestWideToLong.test_float_suffix(self)
pandas.tests.reshape.test_melt.TestWideToLong.test_identical_stubnames(self)
pandas.tests.reshape.test_melt.TestWideToLong.test_invalid_separator(self)
pandas.tests.reshape.test_melt.TestWideToLong.test_invalid_suffixtype(self)
pandas.tests.reshape.test_melt.TestWideToLong.test_mixed_type_suffix(self)
pandas.tests.reshape.test_melt.TestWideToLong.test_multiple_id_columns(self)
pandas.tests.reshape.test_melt.TestWideToLong.test_non_unique_idvars(self)
pandas.tests.reshape.test_melt.TestWideToLong.test_nonnumeric_suffix(self)
pandas.tests.reshape.test_melt.TestWideToLong.test_num_string_disambiguation(self)
pandas.tests.reshape.test_melt.TestWideToLong.test_separating_character(self)
pandas.tests.reshape.test_melt.TestWideToLong.test_simple(self)
pandas.tests.reshape.test_melt.TestWideToLong.test_stubs(self)
pandas.tests.reshape.test_melt.TestWideToLong.test_unbalanced(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/reshape/test_qcut.py----------------------------------------
A:pandas.tests.reshape.test_qcut.arr->pandas.array(np.arange(100), dtype=any_nullable_int_dtype)
A:pandas.tests.reshape.test_qcut.(labels, bins)->qcut(arr, 4, retbins=True)
A:pandas.tests.reshape.test_qcut.ex_bins->quantile(arr, [0, 0.25, 0.5, 0.75, 1.0])
A:pandas.tests.reshape.test_qcut.ex_levels->IntervalIndex([Interval(-0.001, 2.25), Interval(2.25, 4.5), Interval(4.5, 6.75), Interval(6.75, 9)])
A:pandas.tests.reshape.test_qcut.factor->qcut(arr, [0, 0.25, 0.5, 0.75, 1.0])
A:pandas.tests.reshape.test_qcut.expected->qcut(arr.astype(float), q)
A:pandas.tests.reshape.test_qcut.values->range(3)
A:pandas.tests.reshape.test_qcut.ii->qcut(values, 4)
A:pandas.tests.reshape.test_qcut.result->qcut(arr, q)
A:pandas.tests.reshape.test_qcut.cut_file->datapath(os.path.join('reshape', 'data', 'cut_data.csv'))
A:pandas.tests.reshape.test_qcut.ser->Series(arg)
A:pandas.tests.reshape.test_qcut.res->qcut(ser, [0, 0.333, 0.666, 1])
A:pandas.tests.reshape.test_qcut.exp_levels->numpy.array([Interval(-0.001, 2.664), Interval(2.664, 5.328), Interval(5.328, 8)])
A:pandas.tests.reshape.test_qcut.exp->Series(exp_levels.take([0, 0, 0, 1, 1, 1, 2, 2, 2])).astype(CDT(ordered=True))
A:pandas.tests.reshape.test_qcut.intervals->pandas.IntervalIndex.from_tuples([(ser[0] - Nano(), ser[2] - Day()), np.nan, (ser[2] - Day(), ser[2])])
A:pandas.tests.reshape.test_qcut.(result, result_bins)->qcut(ser, 2, retbins=True)
A:pandas.tests.reshape.test_qcut.data_expected->box([0, 1, 1, 0, 1] * 10)
A:pandas.tests.reshape.test_qcut.data_result->box([False, True, True, False, True] * 10)
pandas.tests.reshape.test_qcut.test_date_like_qcut_bins(arg,expected_bins)
pandas.tests.reshape.test_qcut.test_datetime_tz_qcut(bins)
pandas.tests.reshape.test_qcut.test_dt_tz_qcut(bins)
pandas.tests.reshape.test_qcut.test_qcut()
pandas.tests.reshape.test_qcut.test_qcut_all_bins_same()
pandas.tests.reshape.test_qcut.test_qcut_binning_issues(datapath)
pandas.tests.reshape.test_qcut.test_qcut_bool_coercion_to_int(bins,box,compare)
pandas.tests.reshape.test_qcut.test_qcut_bounds()
pandas.tests.reshape.test_qcut.test_qcut_duplicates_bin(kwargs,msg)
pandas.tests.reshape.test_qcut.test_qcut_include_lowest()
pandas.tests.reshape.test_qcut.test_qcut_incorrect_labels(labels)
pandas.tests.reshape.test_qcut.test_qcut_index()
pandas.tests.reshape.test_qcut.test_qcut_list_like_labels(labels,expected)
pandas.tests.reshape.test_qcut.test_qcut_nas()
pandas.tests.reshape.test_qcut.test_qcut_nat(ser)
pandas.tests.reshape.test_qcut.test_qcut_nullable_integer(q,any_nullable_int_dtype)
pandas.tests.reshape.test_qcut.test_qcut_return_intervals()
pandas.tests.reshape.test_qcut.test_qcut_specify_quantiles()
pandas.tests.reshape.test_qcut.test_qcut_wrong_length_labels(labels)
pandas.tests.reshape.test_qcut.test_single_quantile(data,start,end,length,labels)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/reshape/test_cut.py----------------------------------------
A:pandas.tests.reshape.test_cut.data->numpy.arange(6)
A:pandas.tests.reshape.test_cut.result->cut(pd.array(a, dtype='Int64'), bins, right=right, include_lowest=include_lowest)
A:pandas.tests.reshape.test_cut.expected->cut(a, bins, right=right, include_lowest=include_lowest)
A:pandas.tests.reshape.test_cut.(result, bins)->cut(ser, 2, retbins=True)
A:pandas.tests.reshape.test_cut.intervals->intervals.take([0, 0, 0, 1, 2, 0]).take([0, 0, 0, 1, 2, 0])
A:pandas.tests.reshape.test_cut.c->cut(ages, bins=[0, 18, 35, 70])
A:pandas.tests.reshape.test_cut.ages->numpy.array([10, 15, 13, 12, 23, 25, 28, 59, 60])
A:pandas.tests.reshape.test_cut.ii->pandas.IntervalIndex.from_tuples([(0, 10), (2, 12), (4, 14)])
A:pandas.tests.reshape.test_cut.ser->Series(timedelta_range('1day', periods=3))
A:pandas.tests.reshape.test_cut.ind->cut(ser, [0, 1], labels=False)
A:pandas.tests.reshape.test_cut.exp->cut(arr, 3, labels=Categorical(labels, categories=labels, ordered=True))
A:pandas.tests.reshape.test_cut.arr->numpy.random.randn(100)
A:pandas.tests.reshape.test_cut.ex_levels->pandas.IntervalIndex.from_breaks([-0.00072, 0.18, 0.36, 0.54, 0.72])
A:pandas.tests.reshape.test_cut.factor->cut(ser, 4)
A:pandas.tests.reshape.test_cut.data_ser->Series(data, dtype='int64')
A:pandas.tests.reshape.test_cut.result_ser->cut(data_ser, bins)
A:pandas.tests.reshape.test_cut.ex_uniques->pandas.IntervalIndex.from_breaks(bins)
A:pandas.tests.reshape.test_cut.mask->cut(pd.array(a, dtype='Int64'), bins, right=right, include_lowest=include_lowest).isna()
A:pandas.tests.reshape.test_cut.exp_bins->numpy.linspace(0, 8, num=4).round(3)
A:pandas.tests.reshape.test_cut.values->range(5)
A:pandas.tests.reshape.test_cut.array_1->numpy.arange(0, 100, 10)
A:pandas.tests.reshape.test_cut.array_2->numpy.arange(0, 100, 10)
A:pandas.tests.reshape.test_cut.hundred_elements->numpy.arange(100)
A:pandas.tests.reshape.test_cut.(result, _)->cut(data, 3, retbins=True)
A:pandas.tests.reshape.test_cut.s->Series(date_range('20130101', periods=3, tz=tz))
A:pandas.tests.reshape.test_cut.bins->box(bins)
A:pandas.tests.reshape.test_cut.(result, result_bins)->cut(ser, 2, retbins=True)
A:pandas.tests.reshape.test_cut.expected_bins->TimedeltaIndex(['0 days 23:57:07.200000', '2 days 00:00:00', '3 days 00:00:00'])
A:pandas.tests.reshape.test_cut.data_expected->box([0, 1, 1, 0, 1] * 10)
A:pandas.tests.reshape.test_cut.data_result->box([False, True, True, False, True] * 10)
A:pandas.tests.reshape.test_cut.a->numpy.random.randint(0, 10, size=50).astype(float)
pandas.tests.reshape.test_cut.test_array_like()
pandas.tests.reshape.test_cut.test_bins()
pandas.tests.reshape.test_cut.test_bins_from_interval_index()
pandas.tests.reshape.test_cut.test_bins_from_interval_index_doc_example()
pandas.tests.reshape.test_cut.test_bins_monotonic_not_overflowing(x,bins,expected)
pandas.tests.reshape.test_cut.test_bins_not_monotonic()
pandas.tests.reshape.test_cut.test_bins_not_overlapping_from_interval_index()
pandas.tests.reshape.test_cut.test_cut_bool_coercion_to_int(bins,box,compare)
pandas.tests.reshape.test_cut.test_cut_corner(x,bins,msg)
pandas.tests.reshape.test_cut.test_cut_duplicates_bin(kwargs,msg)
pandas.tests.reshape.test_cut.test_cut_incorrect_labels(labels)
pandas.tests.reshape.test_cut.test_cut_not_1d_arg(arg,cut_func)
pandas.tests.reshape.test_cut.test_cut_nullable_integer(bins,right,include_lowest)
pandas.tests.reshape.test_cut.test_cut_out_of_bounds()
pandas.tests.reshape.test_cut.test_cut_out_of_range_more()
pandas.tests.reshape.test_cut.test_cut_pass_labels(get_labels,get_expected)
pandas.tests.reshape.test_cut.test_cut_pass_labels_compat()
pandas.tests.reshape.test_cut.test_cut_pass_series_name_to_factor()
pandas.tests.reshape.test_cut.test_cut_read_only(array_1_writeable,array_2_writeable)
pandas.tests.reshape.test_cut.test_cut_return_intervals()
pandas.tests.reshape.test_cut.test_datetime_bin(conv)
pandas.tests.reshape.test_cut.test_datetime_cut(data)
pandas.tests.reshape.test_cut.test_datetime_cut_roundtrip(tz)
pandas.tests.reshape.test_cut.test_datetime_nan_error()
pandas.tests.reshape.test_cut.test_datetime_nan_mask()
pandas.tests.reshape.test_cut.test_datetime_tz_cut(bins,box)
pandas.tests.reshape.test_cut.test_dt_bin(conv)
pandas.tests.reshape.test_cut.test_dt_cut(data)
pandas.tests.reshape.test_cut.test_dt_cut_roundtrip(tz)
pandas.tests.reshape.test_cut.test_dt_nan_error()
pandas.tests.reshape.test_cut.test_dt_nan_mask()
pandas.tests.reshape.test_cut.test_dt_tz_cut(bins,box)
pandas.tests.reshape.test_cut.test_inf_handling()
pandas.tests.reshape.test_cut.test_int_bins_with_inf(data)
pandas.tests.reshape.test_cut.test_label_precision()
pandas.tests.reshape.test_cut.test_labels(right,breaks,closed)
pandas.tests.reshape.test_cut.test_na_handling(labels)
pandas.tests.reshape.test_cut.test_no_right()
pandas.tests.reshape.test_cut.test_right()
pandas.tests.reshape.test_cut.test_round_frac(val,precision,expected)
pandas.tests.reshape.test_cut.test_round_frac_just_works(x)
pandas.tests.reshape.test_cut.test_series_ret_bins()
pandas.tests.reshape.test_cut.test_simple()
pandas.tests.reshape.test_cut.test_single_bin(data,length)
pandas.tests.reshape.test_cut.test_timedelta_cut_roundtrip()
pandas.tests.reshape.test_cut.test_wrong_num_labels()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/reshape/merge/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/reshape/merge/test_pivot_old.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/reshape/merge/test_merge_asof.py----------------------------------------
A:pandas.tests.reshape.merge.test_merge_asof.path->datapath('reshape', 'merge', 'data', name)
A:pandas.tests.reshape.merge.test_merge_asof.x->x.drop_duplicates(['time', 'ticker'], keep='last').reset_index(drop=True).drop_duplicates(['time', 'ticker'], keep='last').reset_index(drop=True)
A:pandas.tests.reshape.merge.test_merge_asof.x.time->to_datetime(x.time)
A:pandas.tests.reshape.merge.test_merge_asof.self.trades->self.read_data(datapath, 'trades.csv')
A:pandas.tests.reshape.merge.test_merge_asof.self.quotes->self.read_data(datapath, 'quotes.csv', dedupe=True)
A:pandas.tests.reshape.merge.test_merge_asof.self.asof->self.read_data(datapath, 'asof.csv')
A:pandas.tests.reshape.merge.test_merge_asof.self.tolerance->self.read_data(datapath, 'tolerance.csv')
A:pandas.tests.reshape.merge.test_merge_asof.self.allow_exact_matches->self.read_data(datapath, 'allow_exact_matches.csv')
A:pandas.tests.reshape.merge.test_merge_asof.self.allow_exact_matches_and_tolerance->self.read_data(datapath, 'allow_exact_matches_and_tolerance.csv')
A:pandas.tests.reshape.merge.test_merge_asof.left->pandas.DataFrame([0.9, 0.8, 0.7, 0.6], columns=['xyz'], index=index[1:])
A:pandas.tests.reshape.merge.test_merge_asof.right->pandas.DataFrame({'from_date': index, 'abc': [2.46] * 4 + [2.19]})
A:pandas.tests.reshape.merge.test_merge_asof.expected->pandas.DataFrame({'from_date': index, 'abc': [2.46] * 4 + [2.19], 'xyz': [np.nan, 0.9, 0.8, 0.7, 0.6]}, index=pd.Index([0, 1, 2, 3, 4]))
A:pandas.tests.reshape.merge.test_merge_asof.result->pandas.merge_asof(left=right, right=left, right_index=True, left_on=['from_date'])
A:pandas.tests.reshape.merge.test_merge_asof.trades->self.trades.set_index('time')
A:pandas.tests.reshape.merge.test_merge_asof.quotes->self.quotes.set_index('time')
A:pandas.tests.reshape.merge.test_merge_asof.trades.ticker->self.trades.set_index('time').ticker.astype('category')
A:pandas.tests.reshape.merge.test_merge_asof.quotes.ticker->self.quotes.set_index('time').ticker.astype('category')
A:pandas.tests.reshape.merge.test_merge_asof.expected.ticker->pandas.DataFrame({'from_date': index, 'abc': [2.46] * 4 + [2.19], 'xyz': [np.nan, 0.9, 0.8, 0.7, 0.6]}, index=pd.Index([0, 1, 2, 3, 4])).ticker.astype('category')
A:pandas.tests.reshape.merge.test_merge_asof.q->pandas.concat([self.quotes, self.quotes]).sort_values(['time', 'ticker']).reset_index(drop=True)
A:pandas.tests.reshape.merge.test_merge_asof.df1->df1.sort_values('price').reset_index(drop=True).sort_values('price').reset_index(drop=True)
A:pandas.tests.reshape.merge.test_merge_asof.df2->df2.sort_values('price').reset_index(drop=True).sort_values('price').reset_index(drop=True)
A:pandas.tests.reshape.merge.test_merge_asof.df1.value->dtype(df1.value)
A:pandas.tests.reshape.merge.test_merge_asof.df2.value->dtype(df2.value)
A:pandas.tests.reshape.merge.test_merge_asof.expected.value->dtype(expected.value)
A:pandas.tests.reshape.merge.test_merge_asof.df->pandas.DataFrame({'a': non_nulls, 'right_val': [1, 6, 11]})
A:pandas.tests.reshape.merge.test_merge_asof.msg->'Merge keys contain null values on {} side'.format(side)
A:pandas.tests.reshape.merge.test_merge_asof.nulls->func([1.0, 5.0, np.nan])
A:pandas.tests.reshape.merge.test_merge_asof.non_nulls->func([1.0, 5.0, 10.0])
A:pandas.tests.reshape.merge.test_merge_asof.df_null->pandas.DataFrame({'a': nulls, 'left_val': ['a', 'b', 'c']})
A:pandas.tests.reshape.merge.test_merge_asof.expected['value_y']->numpy.array([np.nan], dtype=object)
A:pandas.tests.reshape.merge.test_merge_asof.left['time']->pandas.to_timedelta(left['time'], 'ms')
A:pandas.tests.reshape.merge.test_merge_asof.right['time']->pandas.to_timedelta(right['time'], 'ms')
A:pandas.tests.reshape.merge.test_merge_asof.expected['time']->pandas.to_timedelta(expected['time'], 'ms')
A:pandas.tests.reshape.merge.test_merge_asof.left['a']->left['a'].astype(any_int_dtype).astype(any_int_dtype)
A:pandas.tests.reshape.merge.test_merge_asof.right['a']->right['a'].astype(any_int_dtype).astype(any_int_dtype)
A:pandas.tests.reshape.merge.test_merge_asof.expected['a']->expected['a'].astype(any_int_dtype).astype(any_int_dtype)
A:pandas.tests.reshape.merge.test_merge_asof.index->pandas.date_range('2019-10-01', freq='30min', periods=5, tz='UTC')
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.read_data(self,datapath,name,dedupe=False)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.setup_method(self,datapath)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches_and_tolerance(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches_and_tolerance2(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches_and_tolerance3(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches_and_tolerance_forward(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches_and_tolerance_nearest(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches_forward(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_allow_exact_matches_nearest(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic2(self,datapath)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic_categorical(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic_left_by_right_by(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic_left_index(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic_left_index_right_index(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic_no_by(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_basic_right_index(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_by_int(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_by_mixed_tz_aware(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_examples1(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_examples2(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_examples3(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_examples4(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_forward_by(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_index_tolerance(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_int_type_tolerance(self,any_int_dtype)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_merge_by_col_tz_aware(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_merge_datatype_categorical_error_raises(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_merge_datatype_error_raises(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_merge_groupby_multiple_column_with_categorical_column(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_merge_index_column_tz(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_merge_on_nans(self,func,side)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_missing_right_by(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_multi_index(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_multiby(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_multiby_heterogeneous_types(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_multiby_indexed(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_nearest_by(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_non_sorted(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_on_and_index(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_on_float(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_on_float_by_int(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_on_specialized_type(self,any_real_dtype)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_on_specialized_type_by_int(self,any_real_dtype)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_timedelta_tolerance_nearest(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_tolerance(self,tolerance)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_tolerance_float(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_tolerance_forward(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_tolerance_nearest(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_tolerance_tz(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_valid_allow_exact_matches(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_valid_join_keys(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_valid_tolerance(self)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_with_duplicates(self,datapath)
pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge.test_with_duplicates_no_on(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/reshape/merge/test_merge_ordered.py----------------------------------------
A:pandas.tests.reshape.merge.test_merge_ordered.self.left->DataFrame({'key': ['a', 'c', 'e'], 'lvalue': [1, 2.0, 3]})
A:pandas.tests.reshape.merge.test_merge_ordered.self.right->DataFrame({'key': ['b', 'c', 'd', 'f'], 'rvalue': [1, 2, 3.0, 4]})
A:pandas.tests.reshape.merge.test_merge_ordered.result->merge_ordered(left, right, fill_method='ffill', left_by='group')
A:pandas.tests.reshape.merge.test_merge_ordered.expected->DataFrame({'group': list('aaaaabbbbb'), 'key': ['a', 'b', 'c', 'd', 'e'] * 2, 'lvalue': [1, 1, 2, 2, 3] * 2, 'rvalue': [np.nan, 1, 2, 3, 3] * 2})
A:pandas.tests.reshape.merge.test_merge_ordered.left->DataFrame({'group': list('aaabbb'), 'key': ['a', 'c', 'e', 'a', 'c', 'e'], 'lvalue': [1, 2, 3] * 2})
A:pandas.tests.reshape.merge.test_merge_ordered.result2->merge_ordered(self.right, left, on='key', right_by='group', fill_method='ffill')
A:pandas.tests.reshape.merge.test_merge_ordered.nad->NotADataFrame(self.left)
A:pandas.tests.reshape.merge.test_merge_ordered.right->DataFrame({'key': ['b', 'c', 'd'], 'rvalue': [1, 2, 3]})
pandas.tests.reshape.merge.test_merge_ordered.TestMergeOrdered
pandas.tests.reshape.merge.test_merge_ordered.TestMergeOrdered.setup_method(self,method)
pandas.tests.reshape.merge.test_merge_ordered.TestMergeOrdered.test_basic(self)
pandas.tests.reshape.merge.test_merge_ordered.TestMergeOrdered.test_doc_example(self)
pandas.tests.reshape.merge.test_merge_ordered.TestMergeOrdered.test_empty_sequence_concat(self)
pandas.tests.reshape.merge.test_merge_ordered.TestMergeOrdered.test_ffill(self)
pandas.tests.reshape.merge.test_merge_ordered.TestMergeOrdered.test_merge_type(self)
pandas.tests.reshape.merge.test_merge_ordered.TestMergeOrdered.test_multigroup(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/reshape/merge/test_join.py----------------------------------------
A:pandas.tests.reshape.merge.test_join.self.df->DataFrame({'key1': get_test_data(), 'key2': get_test_data(), 'data1': np.random.randn(N), 'data2': np.random.randn(N)})
A:pandas.tests.reshape.merge.test_join.self.df2->DataFrame({'key1': get_test_data(n=N // 5), 'key2': get_test_data(ngroups=NGROUPS // 2, n=N // 5), 'value': np.random.randn(N // 5)})
A:pandas.tests.reshape.merge.test_join.(index, data)->pandas._testing.getMixedTypeDict()
A:pandas.tests.reshape.merge.test_join.self.target->DataFrame(data, index=index)
A:pandas.tests.reshape.merge.test_join.self.source->DataFrame({'MergedA': data['A'], 'MergedD': data['D']}, index=data['C'])
A:pandas.tests.reshape.merge.test_join.left->DataFrame({'v1': range(12)}, index=leftindex)
A:pandas.tests.reshape.merge.test_join.right->DataFrame({'v2': [100 * i for i in range(1, 7)]}, index=rightindex)
A:pandas.tests.reshape.merge.test_join.(ls, rs)->pandas._libs.join.inner_join(left, right, max_group)
A:pandas.tests.reshape.merge.test_join.exp_ls->exp_ls.take(exp_li).take(exp_li)
A:pandas.tests.reshape.merge.test_join.exp_rs->exp_rs.take(exp_ri).take(exp_ri)
A:pandas.tests.reshape.merge.test_join.exp_li->a_([0, 1, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8, 8])
A:pandas.tests.reshape.merge.test_join.exp_ri->a_([0, 0, 0, 1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 5, 4, 5, 4, 5])
A:pandas.tests.reshape.merge.test_join.(rs, ls)->pandas._libs.join.left_outer_join(right, left, max_group)
A:pandas.tests.reshape.merge.test_join.joined_key2->merge(self.df, self.df2, on='key2', how='inner')
A:pandas.tests.reshape.merge.test_join.joined_both->merge(self.df, self.df2, how='inner')
A:pandas.tests.reshape.merge.test_join.joined->df_list[0].join(df_list[1:], how='inner')
A:pandas.tests.reshape.merge.test_join.merged->self.target.join(self.source.reindex([]), on='C')
A:pandas.tests.reshape.merge.test_join.df->concat([DataFrame(np.random.randn(10, 4), columns=['A', 'A', 'B', 'B']), DataFrame(np.random.randint(0, 10, size=20).reshape(10, 2), columns=['A', 'C'])], axis=1)
A:pandas.tests.reshape.merge.test_join.df2->pandas.DataFrame({'date': pd.date_range(start='2018-01-03', periods=5, tz='America/Chicago'), 'vals_2': list('tuvwx')})
A:pandas.tests.reshape.merge.test_join.expected->DataFrame([[pd.Timestamp('2012-08-02 00:00:00'), 'J', 1, 15], [pd.Timestamp('2013-04-06 00:00:00'), 'L', 2, 20]], index=[2, 4], columns=['x', 'y', 'z', 'a'])
A:pandas.tests.reshape.merge.test_join.df_a->DataFrame([[1], [2], [3]], index=['a', 'b', 'c'], columns=['one'])
A:pandas.tests.reshape.merge.test_join.df_b->DataFrame([['foo'], ['bar']], index=[1, 2], columns=['two'])
A:pandas.tests.reshape.merge.test_join.df_c->DataFrame([[1], [2]], index=[1, 2], columns=['three'])
A:pandas.tests.reshape.merge.test_join.source_copy->source.copy()
A:pandas.tests.reshape.merge.test_join.msg->'Can only merge Series or DataFrame objects, a {} was passed'.format(str(type(wrong_type)))
A:pandas.tests.reshape.merge.test_join.join_col->self.target.pop('C')
A:pandas.tests.reshape.merge.test_join.result->DataFrame([['2012-08-02', 'J', 1], ['2013-04-06', 'L', 2]], columns=['x', 'y', 'z'], index=[2, 4]).join(dfa.set_index(['x', 'y']), on=['x', 'y'])
A:pandas.tests.reshape.merge.test_join.merged2->self.target.join(self.source.reindex([]), on='C', how='inner')
A:pandas.tests.reshape.merge.test_join.ds->Series([2], index=[1], name='b')
A:pandas.tests.reshape.merge.test_join.df1->pandas.DataFrame({'date': pd.date_range(start='2018-01-01', periods=5, tz='America/Chicago'), 'vals': list('abcde')})
A:pandas.tests.reshape.merge.test_join.x->DataFrame(np.random.randn(4, 2), columns=['x', 'y'])
A:pandas.tests.reshape.merge.test_join.a->numpy.random.randint(0, 5, 100).astype('int64')
A:pandas.tests.reshape.merge.test_join.c->numpy.random.random(100).astype('float32')
A:pandas.tests.reshape.merge.test_join.d->DataFrame(randn(30, 1), columns=['q'])
A:pandas.tests.reshape.merge.test_join.index1->pandas.MultiIndex.from_arrays([['a', 'a', 'a', 'b', 'b', 'b'], [1, 2, 3, 1, 2, 3]], names=['first', 'second'])
A:pandas.tests.reshape.merge.test_join.index2->pandas.MultiIndex.from_arrays([['b', 'b', 'b', 'c', 'c', 'c'], [1, 2, 3, 1, 2, 3]], names=['first', 'second'])
A:pandas.tests.reshape.merge.test_join.ex_index->Index(index1.values).union(Index(index2.values))
A:pandas.tests.reshape.merge.test_join.data->DataFrame({'key1': key1, 'key2': key2, 'data': data})
A:pandas.tests.reshape.merge.test_join.index->pandas.period_range('2016-01-01', periods=16, freq='M')
A:pandas.tests.reshape.merge.test_join.to_join->DataFrame(np.random.randn(10, 3), index=index, columns=['j_one', 'j_two', 'j_three'])
A:pandas.tests.reshape.merge.test_join.expected2->merge(to_join, data, right_on=['key1', 'key2'], left_index=True, how='inner', sort=False)
A:pandas.tests.reshape.merge.test_join.new_df->concat([DataFrame(np.random.randn(10, 4), columns=['A', 'A', 'B', 'B']), DataFrame(np.random.randint(0, 10, size=20).reshape(10, 2), columns=['A', 'C'])], axis=1).groupby(['a']).agg({'b': [np.mean, np.sum]})
A:pandas.tests.reshape.merge.test_join.other_df->DataFrame([(1, 2, 3), (7, 10, 6)], columns=['a', 'b', 'd'])
A:pandas.tests.reshape.merge.test_join.b->numpy.random.random(100).astype('float64')
A:pandas.tests.reshape.merge.test_join.xpdf->DataFrame({'a': a, 'b': b, 'c': c})
A:pandas.tests.reshape.merge.test_join.s->Series(np.repeat(np.arange(8), 2), index=np.repeat(np.arange(8), 2), name='TEST')
A:pandas.tests.reshape.merge.test_join.rs->concat([DataFrame(np.random.randn(10, 4), columns=['A', 'A', 'B', 'B']), DataFrame(np.random.randint(0, 10, size=20).reshape(10, 2), columns=['A', 'C'])], axis=1).merge(s, left_on='a', right_index=True)
A:pandas.tests.reshape.merge.test_join.xp->DataFrame({'a': a, 'b': b, 'c': c}).merge(s, left_on='a', right_index=True)
A:pandas.tests.reshape.merge.test_join.df3->DataFrame({'a': [1, 2, 3, 4]}, index=[1, 2, 2, 'a'])
A:pandas.tests.reshape.merge.test_join.idf1->pandas.DataFrame({'date': pd.date_range(start='2018-01-01', periods=5, tz='America/Chicago'), 'vals': list('abcde')}).set_index(['a', 'b'])
A:pandas.tests.reshape.merge.test_join.idf2->pandas.DataFrame({'date': pd.date_range(start='2018-01-03', periods=5, tz='America/Chicago'), 'vals_2': list('tuvwx')}).set_index(['a', 'b'])
A:pandas.tests.reshape.merge.test_join.idf3->DataFrame({'a': [1, 2, 3, 4]}, index=[1, 2, 2, 'a']).set_index(['a', 'b'])
A:pandas.tests.reshape.merge.test_join.df_partially_merged->merge(df1, df2, on=['a', 'b'], how='inner')
A:pandas.tests.reshape.merge.test_join.expected['a']->DataFrame([[pd.Timestamp('2012-08-02 00:00:00'), 'J', 1, 15], [pd.Timestamp('2013-04-06 00:00:00'), 'L', 2, 20]], index=[2, 4], columns=['x', 'y', 'z', 'a']).a.astype('int64')
A:pandas.tests.reshape.merge.test_join.expected['b']->DataFrame([[pd.Timestamp('2012-08-02 00:00:00'), 'J', 1, 15], [pd.Timestamp('2013-04-06 00:00:00'), 'L', 2, 20]], index=[2, 4], columns=['x', 'y', 'z', 'a']).b.astype('int64')
A:pandas.tests.reshape.merge.test_join.inner->concat([DataFrame(np.random.randn(10, 4), columns=['A', 'A', 'B', 'B']), DataFrame(np.random.randint(0, 10, size=20).reshape(10, 2), columns=['A', 'C'])], axis=1).join(s, how='inner')
A:pandas.tests.reshape.merge.test_join.outer->concat([DataFrame(np.random.randn(10, 4), columns=['A', 'A', 'B', 'B']), DataFrame(np.random.randint(0, 10, size=20).reshape(10, 2), columns=['A', 'C'])], axis=1).join(s, how='outer')
A:pandas.tests.reshape.merge.test_join.df4->DataFrame({'b': [5, 6, 7, 8]}, index=[1, 2, 3, 4])
A:pandas.tests.reshape.merge.test_join.grouped->concat([DataFrame(np.random.randn(10, 4), columns=['A', 'A', 'B', 'B']), DataFrame(np.random.randint(0, 10, size=20).reshape(10, 2), columns=['A', 'C'])], axis=1).groupby('id')
A:pandas.tests.reshape.merge.test_join.mn->concat([DataFrame(np.random.randn(10, 4), columns=['A', 'A', 'B', 'B']), DataFrame(np.random.randint(0, 10, size=20).reshape(10, 2), columns=['A', 'C'])], axis=1).groupby('id').mean()
A:pandas.tests.reshape.merge.test_join.cn->concat([DataFrame(np.random.randn(10, 4), columns=['A', 'A', 'B', 'B']), DataFrame(np.random.randint(0, 10, size=20).reshape(10, 2), columns=['A', 'C'])], axis=1).groupby('id').count()
A:pandas.tests.reshape.merge.test_join.w->DataFrame(np.random.randn(4, 2), columns=['x', 'y'])
A:pandas.tests.reshape.merge.test_join.y->DataFrame(np.random.randn(4, 2), columns=['x', 'y'])
A:pandas.tests.reshape.merge.test_join.z->DataFrame(np.random.randn(4, 2), columns=['x', 'y'])
A:pandas.tests.reshape.merge.test_join.dta->dta.merge(w, left_index=True, right_index=True).merge(w, left_index=True, right_index=True)
A:pandas.tests.reshape.merge.test_join.leftindex->pandas.MultiIndex.from_product([list('abc'), list('xy'), [1, 2]], names=['abc', 'xy', 'num'])
A:pandas.tests.reshape.merge.test_join.rightindex->pandas.MultiIndex.from_product([list('abc'), list('xy')], names=['abc', 'xy'])
A:pandas.tests.reshape.merge.test_join.expected['vals_2']->pandas.Series([np.nan] * 2 + list('tuv'), dtype=object)
A:pandas.tests.reshape.merge.test_join.dfa->DataFrame([['2012-08-02', 'L', 10], ['2012-08-02', 'J', 15], ['2013-04-06', 'L', 20], ['2013-04-06', 'J', 25]], columns=['x', 'y', 'a'])
A:pandas.tests.reshape.merge.test_join.dfa['x']->pandas.to_datetime(dfa['x'])
A:pandas.tests.reshape.merge.test_join.dfb->DataFrame([['2012-08-02', 'J', 1], ['2013-04-06', 'L', 2]], columns=['x', 'y', 'z'], index=[2, 4])
A:pandas.tests.reshape.merge.test_join.dfb['x']->pandas.to_datetime(dfb['x'])
A:pandas.tests.reshape.merge.test_join.left_grouped->DataFrame({'v1': range(12)}, index=leftindex).groupby(join_col)
A:pandas.tests.reshape.merge.test_join.right_grouped->DataFrame({'v2': [100 * i for i in range(1, 7)]}, index=rightindex).groupby(join_col)
A:pandas.tests.reshape.merge.test_join.l_joined->_restrict_to_columns(group, left.columns, lsuffix)
A:pandas.tests.reshape.merge.test_join.r_joined->_restrict_to_columns(group, right.columns, rsuffix)
A:pandas.tests.reshape.merge.test_join.lgroup->DataFrame({'v1': range(12)}, index=leftindex).groupby(join_col).get_group(group_key)
A:pandas.tests.reshape.merge.test_join.rgroup->DataFrame({'v2': [100 * i for i in range(1, 7)]}, index=rightindex).groupby(join_col).get_group(group_key)
A:pandas.tests.reshape.merge.test_join.group->group.rename(columns=lambda x: x.replace(suffix, '')).rename(columns=lambda x: x.replace(suffix, ''))
A:pandas.tests.reshape.merge.test_join.join_index->numpy.random.randint(0, 5, 100).astype('int64').index.join(b.index, how=how)
A:pandas.tests.reshape.merge.test_join.a_re->numpy.random.randint(0, 5, 100).astype('int64').reindex(join_index)
A:pandas.tests.reshape.merge.test_join.b_re->numpy.random.random(100).astype('float64').reindex(join_index)
A:pandas.tests.reshape.merge.test_join.result_columns->numpy.random.randint(0, 5, 100).astype('int64').columns.append(b.columns)
pandas.tests.reshape.merge.test_join.TestJoin
pandas.tests.reshape.merge.test_join.TestJoin.setup_method(self,method)
pandas.tests.reshape.merge.test_join.TestJoin.test_cython_inner_join(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_cython_left_outer_join(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_cython_right_outer_join(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_full_outer_join(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_handle_overlap(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_handle_overlap_arbitrary_key(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_inner_join(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_datetime_string(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_dt_string(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_dups(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_empty_bug(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_float64_float32(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_hierarchical_mixed(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_index_mixed(self,join_type)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_index_mixed_overlap(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_inner_multiindex(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_many(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_many_mixed(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_many_non_unique_index(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_mixed_non_unique_index(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_multi_to_multi(self,join_type)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_multiindex(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_non_unique_period_index(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_on(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_on_fails_with_different_column_counts(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_on_fails_with_different_left_index(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_on_fails_with_different_right_index(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_on_fails_with_wrong_object_type(self,wrong_type)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_on_inner(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_on_pass_vector(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_on_series(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_on_series_buglet(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_on_singlekey_list(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_on_tz_aware_datetimeindex(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_on_tz_aware_dtindex(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_sort(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_unconsolidated(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_join_with_len0(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_left_outer_join(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_mixed_type_join_with_suffix(self)
pandas.tests.reshape.merge.test_join.TestJoin.test_right_outer_join(self)
pandas.tests.reshape.merge.test_join._assert_all_na(join_chunk,source_columns,join_col)
pandas.tests.reshape.merge.test_join._assert_same_contents(join_chunk,source)
pandas.tests.reshape.merge.test_join._check_join(left,right,result,join_col,how='left',lsuffix='_x',rsuffix='_y')
pandas.tests.reshape.merge.test_join._join_by_hand(a,b,how='left')
pandas.tests.reshape.merge.test_join._restrict_to_columns(group,columns,suffix)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/reshape/merge/test_merge.py----------------------------------------
A:pandas.tests.reshape.merge.test_merge.unique_groups->list(range(ngroups))
A:pandas.tests.reshape.merge.test_merge.arr->numpy.asarray(list(arr) + unique_groups[:n - len(arr)])
A:pandas.tests.reshape.merge.test_merge.self.df->DataFrame({'key1': get_test_data(), 'key2': get_test_data(), 'data1': np.random.randn(N), 'data2': np.random.randn(N)})
A:pandas.tests.reshape.merge.test_merge.self.df2->DataFrame({'key1': get_test_data(n=N // 5), 'key2': get_test_data(ngroups=NGROUPS // 2, n=N // 5), 'value': np.random.randn(N // 5)})
A:pandas.tests.reshape.merge.test_merge.self.left->DataFrame({'key': ['a', 'b', 'c', 'd', 'e', 'e', 'a'], 'v1': np.random.randn(7)})
A:pandas.tests.reshape.merge.test_merge.self.right->DataFrame({'v2': np.random.randn(4)}, index=['d', 'b', 'c', 'a'])
A:pandas.tests.reshape.merge.test_merge.df_empty->pandas.DataFrame()
A:pandas.tests.reshape.merge.test_merge.df_a->pandas.DataFrame({'a': [1, 2]}, index=[0, 1], dtype='int64')
A:pandas.tests.reshape.merge.test_merge.result->pandas.merge(df1, df2, how='left', on='y')
A:pandas.tests.reshape.merge.test_merge.expected->pandas.DataFrame({'x': ['a', 'b', 'c'], 'y': ['1', '2', '4'], 'z': pd.to_datetime(['2000', '2001', 'NaT'])})
A:pandas.tests.reshape.merge.test_merge.joined->merge(left, right, on='key', how='outer')
A:pandas.tests.reshape.merge.test_merge.exp->pandas.DataFrame({'entity_id': [101, 102], 'days': np.array(['nat', 'nat'], dtype=dtype)}, columns=['entity_id', 'days'])
A:pandas.tests.reshape.merge.test_merge.left->DataFrame({'a': Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype='interval')}).copy()
A:pandas.tests.reshape.merge.test_merge.right->DataFrame({'a': Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype='interval')})
A:pandas.tests.reshape.merge.test_merge.merged1->merge(left, right, left_on='key', right_index=True, how='left', sort=True)
A:pandas.tests.reshape.merge.test_merge.merged2->merge(right, left, left_on=key, right_on='key', how='outer')
A:pandas.tests.reshape.merge.test_merge.merged->pandas.merge(left, right, on='X', how=join_type)
A:pandas.tests.reshape.merge.test_merge.exp_len->(self.left['key'].value_counts() ** 2).sum()
A:pandas.tests.reshape.merge.test_merge.df1->pandas.DataFrame({'x': ['a', 'b', 'c'], 'y': ['1', '2', '4']})
A:pandas.tests.reshape.merge.test_merge.df2->pandas.DataFrame({'y': ['1', '2', '3'], 'z': pd.to_datetime(['2000', '2001', '2002'])})
A:pandas.tests.reshape.merge.test_merge.df->pandas.DataFrame({'A': pd.Series([1, 2, np.nan], dtype='Int64'), 'B': 1})
A:pandas.tests.reshape.merge.test_merge.lkey->numpy.array([1, 1, 2, 2, 3])
A:pandas.tests.reshape.merge.test_merge.rkey->numpy.array([1, 1, 2, 3, 4, 5])
A:pandas.tests.reshape.merge.test_merge.key->numpy.array([0, 1, 1, 2, 2, 3], dtype=np.int64)
A:pandas.tests.reshape.merge.test_merge.dt->datetime(2012, 5, 1)
A:pandas.tests.reshape.merge.test_merge.msg->re.escape(msg)
A:pandas.tests.reshape.merge.test_merge.dt2->datetime(2012, 5, 2)
A:pandas.tests.reshape.merge.test_merge.dt3->datetime(2012, 5, 3)
A:pandas.tests.reshape.merge.test_merge.dt4->datetime(2012, 5, 4)
A:pandas.tests.reshape.merge.test_merge.exp_in->pandas.DataFrame(columns=['a', 'b', 'c', 'x', 'y', 'z'], index=pd.Index([], dtype=object), dtype=object)
A:pandas.tests.reshape.merge.test_merge.exp_out->pandas.DataFrame({'a': [1, 4, 7], 'b': [2, 5, 8], 'c': [3, 6, 9], 'x': np.array([np.nan] * 3, dtype=object), 'y': np.array([np.nan] * 3, dtype=object), 'z': np.array([np.nan] * 3, dtype=object)}, columns=['a', 'b', 'c', 'x', 'y', 'z'])
A:pandas.tests.reshape.merge.test_merge.exp_in.index->pandas.DataFrame(columns=['a', 'b', 'c', 'x', 'y', 'z'], index=pd.Index([], dtype=object), dtype=object).index.astype(object)
A:pandas.tests.reshape.merge.test_merge.kwarg->dict(left_on='a', right_on='x')
A:pandas.tests.reshape.merge.test_merge.exp_out['a']->numpy.array([np.nan] * 3, dtype=object)
A:pandas.tests.reshape.merge.test_merge.actual->pandas.DataFrame({'key': series_of_dtype, 'value': series_of_dtype_all_na}, columns=['key', 'value']).merge(df_right, on='key')
A:pandas.tests.reshape.merge.test_merge.df_left->pandas.DataFrame({'key': series_of_dtype, 'value': series_of_dtype_all_na}, columns=['key', 'value'])
A:pandas.tests.reshape.merge.test_merge.df_right->pandas.DataFrame({'key': series_of_dtype, 'value': series_of_dtype_all_na}, columns=['key', 'value'])
A:pandas.tests.reshape.merge.test_merge.var3->pandas.DataFrame({'A': pd.Series([1, 2, np.nan], dtype='Int64'), 'B': 1}).var3.unique()
A:pandas.tests.reshape.merge.test_merge.new->pandas.DataFrame.from_dict({'var3': var3, 'var8': np.random.random(7)})
A:pandas.tests.reshape.merge.test_merge.nad->NotADataFrame(self.df)
A:pandas.tests.reshape.merge.test_merge.td->numpy.timedelta64(300000000)
A:pandas.tests.reshape.merge.test_merge.lhs->DataFrame(Series([td, td], index=['A', 'B']))
A:pandas.tests.reshape.merge.test_merge.rhs->DataFrame(Series([td], index=['A']))
A:pandas.tests.reshape.merge.test_merge.s->pandas.Series([None, None], index=[101, 102], name='days')
A:pandas.tests.reshape.merge.test_merge.dtype->'m8[{}]'.format(unit)
A:pandas.tests.reshape.merge.test_merge.dtz->pandas.DatetimeTZDtype(tz='UTC')
A:pandas.tests.reshape.merge.test_merge.df2['date']->df2['date'].astype('category').astype('category')
A:pandas.tests.reshape.merge.test_merge.index->pandas.MultiIndex.from_product((letters, numbers), names=['outer', 'inner'])
A:pandas.tests.reshape.merge.test_merge.exp_x->pandas.period_range('20151010', periods=2, freq='D')
A:pandas.tests.reshape.merge.test_merge.exp_y->pandas.period_range('20151011', periods=2, freq='D')
A:pandas.tests.reshape.merge.test_merge.df1_copy->pandas.DataFrame({'x': ['a', 'b', 'c'], 'y': ['1', '2', '4']}).copy()
A:pandas.tests.reshape.merge.test_merge.df2_copy->pandas.DataFrame({'y': ['1', '2', '3'], 'z': pd.to_datetime(['2000', '2001', '2002'])}).copy()
A:pandas.tests.reshape.merge.test_merge.df_result->DataFrame({'col1': [0, 1, 2, 3, 4, 5], 'col_conflict_x': [1, 2, np.nan, np.nan, np.nan, np.nan], 'col_left': ['a', 'b', np.nan, np.nan, np.nan, np.nan], 'col_conflict_y': [np.nan, 1, 2, 3, 4, 5], 'col_right': [np.nan, 2, 2, 2, 2, 2]})
A:pandas.tests.reshape.merge.test_merge.df_result['_merge']->Categorical(['left_only', 'both', 'right_only', 'right_only', 'right_only', 'right_only'], categories=['left_only', 'right_only', 'both'])
A:pandas.tests.reshape.merge.test_merge.test->pandas.DataFrame({'x': ['a', 'b', 'c'], 'y': ['1', '2', '4']}).merge(df2, on='col1', how='outer', indicator=True)
A:pandas.tests.reshape.merge.test_merge.df_result_custom_name->df_result_custom_name.rename(columns={'_merge': 'custom_name'}).rename(columns={'_merge': 'custom_name'})
A:pandas.tests.reshape.merge.test_merge.test_custom_name->pandas.DataFrame({'x': ['a', 'b', 'c'], 'y': ['1', '2', '4']}).merge(df2, on='col1', how='outer', indicator='custom_name')
A:pandas.tests.reshape.merge.test_merge.test2->pandas.DataFrame({'x': ['a', 'b', 'c'], 'y': ['1', '2', '4']}).merge(df2, on='col1', how='left', indicator=True)
A:pandas.tests.reshape.merge.test_merge.test3->pandas.DataFrame({'x': ['a', 'b', 'c'], 'y': ['1', '2', '4']}).merge(df2, on='col1', how='right', indicator=True)
A:pandas.tests.reshape.merge.test_merge.test4->pandas.DataFrame({'x': ['a', 'b', 'c'], 'y': ['1', '2', '4']}).merge(df2, on='col1', how='inner', indicator=True)
A:pandas.tests.reshape.merge.test_merge.df_badcolumn->DataFrame({'col1': [1, 2], 'custom_column_name': [2, 2]})
A:pandas.tests.reshape.merge.test_merge.df3->DataFrame({'col1': [0, 1], 'col2': ['a', 'b']})
A:pandas.tests.reshape.merge.test_merge.df4->DataFrame({'col1': [1, 1, 3], 'col2': ['b', 'x', 'y']})
A:pandas.tests.reshape.merge.test_merge.hand_coded_result->DataFrame({'col1': [0, 1, 1, 3], 'col2': ['a', 'b', 'x', 'y']})
A:pandas.tests.reshape.merge.test_merge.hand_coded_result['_merge']->Categorical(['left_only', 'both', 'right_only', 'right_only'], categories=['left_only', 'right_only', 'both'])
A:pandas.tests.reshape.merge.test_merge.test5->DataFrame({'col1': [0, 1], 'col2': ['a', 'b']}).merge(df4, on=['col1', 'col2'], how='outer', indicator=True)
A:pandas.tests.reshape.merge.test_merge.left_copy->DataFrame({'a': Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype='interval')}).copy().copy()
A:pandas.tests.reshape.merge.test_merge.right_copy->DataFrame({'a': Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype='interval')}).copy()
A:pandas.tests.reshape.merge.test_merge.expected_2->DataFrame({'a': ['a', 'b', 'c', 'd'], 'b': ['cat', 'dog', 'weasel', 'horse'], 'c': ['meow', 'bark', 'um... weasel noise?', 'nay']}, index=range(4))
A:pandas.tests.reshape.merge.test_merge.expected_3->DataFrame({'b': ['cat', 'dog', 'weasel', 'horse'], 'a': ['a', 'b', 'c', 'd'], 'c': ['meow', 'bark', 'um... weasel noise?', 'nay']}, columns=['b', 'a', 'c'], index=range(4))
A:pandas.tests.reshape.merge.test_merge.left_index_reset->DataFrame({'a': Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype='interval')}).copy().set_index('a')
A:pandas.tests.reshape.merge.test_merge.right_w_dups->DataFrame({'a': Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype='interval')}).append(pd.DataFrame({'a': ['e'], 'c': ['moo']}, index=[4]))
A:pandas.tests.reshape.merge.test_merge.left_w_dups->DataFrame({'a': Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype='interval')}).copy().append(pd.DataFrame({'a': ['a'], 'c': ['cow']}, index=[3]), sort=True)
A:pandas.tests.reshape.merge.test_merge.expected_multi->DataFrame({'a': ['a', 'a', 'b'], 'b': [0, 1, 0], 'c': ['cat', 'dog', 'weasel'], 'd': ['meow', 'bark', 'um... weasel noise?']}, index=range(3))
A:pandas.tests.reshape.merge.test_merge.a->pandas.DataFrame({col1: [1, 2, 3]})
A:pandas.tests.reshape.merge.test_merge.data1->pandas.DataFrame(np.arange(20).reshape((4, 5)) + 1, columns=['a', 'b', 'c', 'd', 'e'])
A:pandas.tests.reshape.merge.test_merge.data2->pandas.DataFrame(np.arange(20).reshape((5, 4)) + 1, columns=['a', 'b', 'x', 'y'])
A:pandas.tests.reshape.merge.test_merge.dtype1->numpy.dtype(d1)
A:pandas.tests.reshape.merge.test_merge.dtype2->numpy.dtype('float64')
A:pandas.tests.reshape.merge.test_merge.expected['v2']->numpy.array(np.nan, dtype=dtype2)
A:pandas.tests.reshape.merge.test_merge.A->DataFrame({'X': [1, 2, 3]})
A:pandas.tests.reshape.merge.test_merge.B->DataFrame({'Y': [np.nan, np.nan, 3.0]})
A:pandas.tests.reshape.merge.test_merge.cright->DataFrame({'a': Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype='interval')}).copy()
A:pandas.tests.reshape.merge.test_merge.cright['d']->cright['d'].astype('category').astype('category')
A:pandas.tests.reshape.merge.test_merge.expected['d']->expected['d'].astype(CategoricalDtype(['null'])).astype(CategoricalDtype(['null']))
A:pandas.tests.reshape.merge.test_merge.cleft->DataFrame({'a': Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype='interval')}).copy().copy()
A:pandas.tests.reshape.merge.test_merge.cleft['b']->cleft['b'].astype('category').astype('category')
A:pandas.tests.reshape.merge.test_merge.X->change(right.X.astype('object'))
A:pandas.tests.reshape.merge.test_merge.df['date']->df['date'].astype('category').astype('category')
A:pandas.tests.reshape.merge.test_merge.expected_outer->pandas.DataFrame([[pd.Timestamp('2001-01-01'), 1.1, 1.3], [pd.Timestamp('2001-01-02'), 1.3, np.nan], [pd.Timestamp('2001-01-03'), np.nan, 1.4]], columns=['date', 'num2', 'num4'])
A:pandas.tests.reshape.merge.test_merge.result_outer->pandas.merge(df, df2, how='outer', on=['date'])
A:pandas.tests.reshape.merge.test_merge.expected_inner->pandas.DataFrame([[pd.Timestamp('2001-01-01'), 1.1, 1.3]], columns=['date', 'num2', 'num4'])
A:pandas.tests.reshape.merge.test_merge.result_inner->pandas.merge(df, df2, how='inner', on=['date'])
A:pandas.tests.reshape.merge.test_merge.df1['cat']->df1['cat'].astype(CDT(categories, ordered=ordered)).astype(CDT(categories, ordered=ordered))
A:pandas.tests.reshape.merge.test_merge.expected['cat']->expected['cat'].astype(CDT(categories, ordered=ordered)).astype(CDT(categories, ordered=ordered))
A:pandas.tests.reshape.merge.test_merge.b->pandas.DataFrame({col2: [3, 4, 5]})
A:pandas.tests.reshape.merge.test_merge.cat_dtype->CategoricalDtype(categories=['a', 'b', 'c'], ordered=False)
A:pandas.tests.reshape.merge.test_merge.left['a']->left['a'].astype('category').astype('category')
A:pandas.tests.reshape.merge.test_merge.frame_x->pandas.DataFrame(columns=index)
A:pandas.tests.reshape.merge.test_merge.frame_y->pandas.DataFrame(columns=index)
A:pandas.tests.reshape.merge.test_merge.expected_index->pandas.MultiIndex.from_product([expected_labels, numbers], names=['outer', 'inner'])
pandas.tests.reshape.merge.test_merge.TestMerge
pandas.tests.reshape.merge.test_merge.TestMerge.setup_method(self,method)
pandas.tests.reshape.merge.test_merge.TestMerge.test_handle_join_key_pass_array(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_index_and_on_parameters_confusion(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_indicator(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_intelligently_handle_join_key(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_join_append_timedeltas(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_left_merge_empty_dataframe(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_all_na_column(self,series_of_dtype,series_of_dtype_all_na)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_common(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_copy(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_datetime64tz_with_dst_transition(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_different_column_key_names(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_dt64tz_with_dst_transition(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_empty_frame(self,series_of_dtype,series_of_dtype2)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_index_as_on_arg(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_index_singlekey_inner(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_index_singlekey_right_vs_left(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_inner_join_empty(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_join_key_dtype_cast(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_left_empty_right_empty(self,join_type,kwarg)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_left_empty_right_notempty(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_left_notempty_right_empty(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_misspecified(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_nan_right(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_nocopy(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_non_string_columns(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_non_unique_index_many_to_many(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_non_unique_indexes(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_non_unique_period_index(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_nosort(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_on_datetime64tz(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_on_datetime64tz_empty(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_on_dt64tz(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_on_dt64tz_empty(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_on_index_with_more_values(self,how,index,expected_index)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_on_periods(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_overlap(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_readonly(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_right_index_right(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_take_missing_values_from_index_of_other_dtype(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_two_empty_df_no_division_error(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_merge_type(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_no_overlap_more_informative_error(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_other_datetime_unit(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_other_dt_unit(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_other_timedelta_unit(self,unit)
pandas.tests.reshape.merge.test_merge.TestMerge.test_overlapping_columns_error_message(self)
pandas.tests.reshape.merge.test_merge.TestMerge.test_validation(self)
pandas.tests.reshape.merge.test_merge.TestMergeCategorical
pandas.tests.reshape.merge.test_merge.TestMergeCategorical.test_basic(self,left,right)
pandas.tests.reshape.merge.test_merge.TestMergeCategorical.test_dtype_on_categorical_dates(self)
pandas.tests.reshape.merge.test_merge.TestMergeCategorical.test_dtype_on_merged_different(self,change,join_type,left,right)
pandas.tests.reshape.merge.test_merge.TestMergeCategorical.test_identical(self,left)
pandas.tests.reshape.merge.test_merge.TestMergeCategorical.test_merge_categorical(self)
pandas.tests.reshape.merge.test_merge.TestMergeCategorical.test_merge_on_int_array(self)
pandas.tests.reshape.merge.test_merge.TestMergeCategorical.test_merging_with_bool_or_int_cateorical_column(self,category_column,categories,expected_categories,ordered)
pandas.tests.reshape.merge.test_merge.TestMergeCategorical.test_other_columns(self,left,right)
pandas.tests.reshape.merge.test_merge.TestMergeCategorical.test_self_join_multiple_categories(self)
pandas.tests.reshape.merge.test_merge.TestMergeCategorical.tests_merge_categorical_unordered_equal(self)
pandas.tests.reshape.merge.test_merge.TestMergeDtypes
pandas.tests.reshape.merge.test_merge.TestMergeDtypes.test_different(self,right_vals)
pandas.tests.reshape.merge.test_merge.TestMergeDtypes.test_join_multi_dtypes(self,d1,d2)
pandas.tests.reshape.merge.test_merge.TestMergeDtypes.test_merge_incompat_dtypes_are_ok(self,df1_vals,df2_vals)
pandas.tests.reshape.merge.test_merge.TestMergeDtypes.test_merge_incompat_dtypes_error(self,df1_vals,df2_vals)
pandas.tests.reshape.merge.test_merge.TestMergeDtypes.test_merge_incompat_infer_boolean_object(self)
pandas.tests.reshape.merge.test_merge.TestMergeDtypes.test_merge_key_dtype_cast(self)
pandas.tests.reshape.merge.test_merge.TestMergeDtypes.test_merge_on_ints_floats(self,int_vals,float_vals,exp_vals)
pandas.tests.reshape.merge.test_merge.TestMergeDtypes.test_merge_on_ints_floats_warning(self)
pandas.tests.reshape.merge.test_merge.TestMergeOnIndexes
pandas.tests.reshape.merge.test_merge.TestMergeOnIndexes.test_merge_on_indexes(self,left_df,right_df,how,sort,expected)
pandas.tests.reshape.merge.test_merge._check_merge(x,y)
pandas.tests.reshape.merge.test_merge.get_series()
pandas.tests.reshape.merge.test_merge.get_series_na()
pandas.tests.reshape.merge.test_merge.get_test_data(ngroups=NGROUPS,n=N)
pandas.tests.reshape.merge.test_merge.left()
pandas.tests.reshape.merge.test_merge.left_df()
pandas.tests.reshape.merge.test_merge.right()
pandas.tests.reshape.merge.test_merge.right_df()
pandas.tests.reshape.merge.test_merge.series_of_dtype(request)
pandas.tests.reshape.merge.test_merge.series_of_dtype2(request)
pandas.tests.reshape.merge.test_merge.series_of_dtype_all_na(request)
pandas.tests.reshape.merge.test_merge.test_merge_datetime_upcast_dtype()
pandas.tests.reshape.merge.test_merge.test_merge_dt_upcast_dtype()
pandas.tests.reshape.merge.test_merge.test_merge_equal_cat_dtypes(cat_dtype,reverse)
pandas.tests.reshape.merge.test_merge.test_merge_equal_cat_dtypes2()
pandas.tests.reshape.merge.test_merge.test_merge_index_types(index)
pandas.tests.reshape.merge.test_merge.test_merge_multiindex_columns()
pandas.tests.reshape.merge.test_merge.test_merge_on_cat_and_ext_array()
pandas.tests.reshape.merge.test_merge.test_merge_series(on,left_on,right_on,left_index,right_index,nm)
pandas.tests.reshape.merge.test_merge.test_merge_suffix(col1,col2,kwargs,expected_cols)
pandas.tests.reshape.merge.test_merge.test_merge_suffix_error(col1,col2,suffixes)
pandas.tests.reshape.merge.test_merge.test_merge_suffix_none_error(col1,col2,suffixes)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/reshape/merge/test_merge_index_as_string.py----------------------------------------
A:pandas.tests.reshape.merge.test_merge_index_as_string.df1->df1.set_index(levels).set_index(levels)
A:pandas.tests.reshape.merge.test_merge_index_as_string.df2->df2.set_index(levels).set_index(levels)
A:pandas.tests.reshape.merge.test_merge_index_as_string.df_left->df_left.reset_index(level=reset_left).reset_index(level=reset_left)
A:pandas.tests.reshape.merge.test_merge_index_as_string.df_right->df_right.reset_index(level=reset_right).reset_index(level=reset_right)
A:pandas.tests.reshape.merge.test_merge_index_as_string.expected->df1.set_index(left_index).reset_index().join(right_df, on=['outer', 'inner'], how=join_type, lsuffix='_x', rsuffix='_y').set_index(left_index)
A:pandas.tests.reshape.merge.test_merge_index_as_string.result->df1.set_index(left_index).join(right_df, on=['outer', 'inner'], how=join_type, lsuffix='_x', rsuffix='_y')
A:pandas.tests.reshape.merge.test_merge_index_as_string.left_df->df1.set_index(levels).set_index(levels).set_index(left_index)
A:pandas.tests.reshape.merge.test_merge_index_as_string.right_df->df2.set_index(levels).set_index(levels).set_index(['outer', 'inner'])
pandas.tests.reshape.merge.test_merge_index_as_string.compute_expected(df_left,df_right,on=None,left_on=None,right_on=None,how=None)
pandas.tests.reshape.merge.test_merge_index_as_string.df1()
pandas.tests.reshape.merge.test_merge_index_as_string.df2()
pandas.tests.reshape.merge.test_merge_index_as_string.left_df(request,df1)
pandas.tests.reshape.merge.test_merge_index_as_string.right_df(request,df2)
pandas.tests.reshape.merge.test_merge_index_as_string.test_join_indexes_and_columns_on(df1,df2,left_index,join_type)
pandas.tests.reshape.merge.test_merge_index_as_string.test_merge_indexes_and_columns_lefton_righton(left_df,right_df,left_on,right_on,how)
pandas.tests.reshape.merge.test_merge_index_as_string.test_merge_indexes_and_columns_on(left_df,right_df,on,how)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/reshape/merge/test_multi.py----------------------------------------
A:pandas.tests.reshape.merge.test_multi.data->numpy.random.randn(len(key1))
A:pandas.tests.reshape.merge.test_multi.index->pandas.MultiIndex.from_tuples([(2, 'bar'), (1, 'foo')])
A:pandas.tests.reshape.merge.test_multi.self.index->MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'], ['one', 'two', 'three']], codes=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3], [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]], names=['first', 'second'])
A:pandas.tests.reshape.merge.test_multi.self.to_join->DataFrame(np.random.randn(10, 3), index=self.index, columns=['j_one', 'j_two', 'j_three'])
A:pandas.tests.reshape.merge.test_multi.self.data->DataFrame({'key1': key1, 'key2': key2, 'data': data})
A:pandas.tests.reshape.merge.test_multi.result->pandas.DataFrame(index=midx1, data={'x': [10, 20, 30, 40]}).join(right)
A:pandas.tests.reshape.merge.test_multi.expected->pandas.DataFrame(index=midx1, data={'x': [10, 20, 30, 40], 'y': ['fing', 'foo', 'bar', np.nan]})
A:pandas.tests.reshape.merge.test_multi.res->pandas.DataFrame(index=midx1, data={'x': [10, 20, 30, 40]}).join(right, on=icols, how='left', sort=sort)
A:pandas.tests.reshape.merge.test_multi.out->merge(left, right.reset_index(), on=icols, sort=sort, how='left')
A:pandas.tests.reshape.merge.test_multi.res.index->numpy.arange(len(res))
A:pandas.tests.reshape.merge.test_multi.lc->list(map(chr, np.arange(ord('a'), ord('z') + 1)))
A:pandas.tests.reshape.merge.test_multi.left->pandas.DataFrame(index=midx1, data={'x': [10, 20, 30, 40]})
A:pandas.tests.reshape.merge.test_multi.i->numpy.random.permutation(len(left))
A:pandas.tests.reshape.merge.test_multi.right->pandas.DataFrame(index=midx3, data={'y': ['foo', 'bar', 'fing']})
A:pandas.tests.reshape.merge.test_multi.left['4th']->bind_cols(left)
A:pandas.tests.reshape.merge.test_multi.merged_left_right->pandas.DataFrame(index=midx1, data={'x': [10, 20, 30, 40]}).merge(right, left_on=on_cols, right_index=True, how='left', sort=sort)
A:pandas.tests.reshape.merge.test_multi.merge_right_left->pandas.DataFrame(index=midx3, data={'y': ['foo', 'bar', 'fing']}).merge(left, right_on=on_cols, left_index=True, how='right', sort=sort)
A:pandas.tests.reshape.merge.test_multi.s->pandas.Series(range(6), pd.MultiIndex.from_product([['A', 'B'], [1, 2, 3]], names=['lev1', 'lev2']), name='Amount')
A:pandas.tests.reshape.merge.test_multi.df->DataFrame([1, 2, 3], ['2016-01-01', '2017-01-01', '2018-01-01'], columns=['a'])
A:pandas.tests.reshape.merge.test_multi.key1->numpy.tile(key1, 2)
A:pandas.tests.reshape.merge.test_multi.df2->DataFrame({'key1': key1[::2], 'key2': key2[::2], 'value2': np.random.randn(10000)})
A:pandas.tests.reshape.merge.test_multi.expected2->pandas.DataFrame(index=midx1, data={'x': [10, 20, 30, 40], 'y': ['fing', 'foo', 'bar', np.nan]}).sort_values('tag', kind='mergesort')
A:pandas.tests.reshape.merge.test_multi.expected.index->numpy.arange(len(expected))
A:pandas.tests.reshape.merge.test_multi.rdf->pandas.DataFrame(index=midx3, data={'y': ['foo', 'bar', 'fing']}).drop(['id'], axis=1)
A:pandas.tests.reshape.merge.test_multi.frame->DataFrame(data, columns=['year', 'panel', 'data'])
A:pandas.tests.reshape.merge.test_multi.other->DataFrame(other_data, columns=['year', 'panel', 'data'])
A:pandas.tests.reshape.merge.test_multi.df.index->pandas.to_datetime(df.index)
A:pandas.tests.reshape.merge.test_multi.on_vector->box(on_vector)
A:pandas.tests.reshape.merge.test_multi.household->DataFrame(dict(household_id=[1, 2, 2, 3, 3, 3, 4], asset_id=['nl0000301109', 'nl0000301109', 'gb00b03mlx29', 'gb00b03mlx29', 'lu0197800237', 'nl0000289965', np.nan], share=[1.0, 0.4, 0.6, 0.15, 0.6, 0.25, 1.0]), columns=['household_id', 'asset_id', 'share']).set_index(['household_id', 'asset_id'])
A:pandas.tests.reshape.merge.test_multi.portfolio->DataFrame(dict(household_id=[1, 2, 2, 3, 3, 3, 4], asset_id=['nl0000301109', 'nl0000289783', 'gb00b03mlx29', 'gb00b03mlx29', 'lu0197800237', 'nl0000289965', np.nan], name=['ABN Amro', 'Robeco', 'Royal Dutch Shell', 'Royal Dutch Shell', 'AAB Eastern Europe Equity Fund', 'Postbank BioTech Fonds', np.nan], share=[1.0, 0.4, 0.6, 0.15, 0.6, 0.25, 1.0]), columns=['household_id', 'asset_id', 'name', 'share']).set_index(['household_id', 'asset_id'])
A:pandas.tests.reshape.merge.test_multi.portfolio2->DataFrame(dict(household_id=[1, 2, 2, 3, 3, 3, 4], asset_id=['nl0000301109', 'nl0000289783', 'gb00b03mlx29', 'gb00b03mlx29', 'lu0197800237', 'nl0000289965', np.nan], name=['ABN Amro', 'Robeco', 'Royal Dutch Shell', 'Royal Dutch Shell', 'AAB Eastern Europe Equity Fund', 'Postbank BioTech Fonds', np.nan], share=[1.0, 0.4, 0.6, 0.15, 0.6, 0.25, 1.0]), columns=['household_id', 'asset_id', 'name', 'share']).set_index(['household_id', 'asset_id']).copy()
A:pandas.tests.reshape.merge.test_multi.log_return->DataFrame(dict(asset_id=['gb00b03mlx29', 'gb00b03mlx29', 'gb00b03mlx29', 'lu0197800237', 'lu0197800237'], t=[233, 234, 235, 180, 181], log_return=[0.09604978, -0.06524096, 0.03532373, 0.03025441, 0.036997])).set_index(['asset_id', 't'])
A:pandas.tests.reshape.merge.test_multi.left_multi->left_multi.drop(columns=left_multi.columns).drop(columns=left_multi.columns)
A:pandas.tests.reshape.merge.test_multi.right_multi->right_multi.drop(columns=right_multi.columns).drop(columns=right_multi.columns)
A:pandas.tests.reshape.merge.test_multi.index_left->pandas.MultiIndex.from_tuples([('K0', 'X0'), ('K0', 'X1'), ('K1', 'X2')], names=['key', 'X'])
A:pandas.tests.reshape.merge.test_multi.index_right->pandas.MultiIndex.from_tuples([('K0', 'Y0'), ('K1', 'Y1'), ('K2', 'Y2'), ('K2', 'Y3')], names=['key', 'Y'])
A:pandas.tests.reshape.merge.test_multi.midx1->pandas.MultiIndex.from_product([[1, 2], [3, 4]], names=['a', 'b'])
A:pandas.tests.reshape.merge.test_multi.midx3->pandas.MultiIndex.from_tuples([(4, 1), (3, 2), (3, 1)], names=['b', 'a'])
pandas.tests.reshape.merge.test_multi.TestJoinMultiMulti
pandas.tests.reshape.merge.test_multi.TestJoinMultiMulti.test_join_multi_empty_frames(self,left_multi,right_multi,join_type,on_cols_multi,idx_cols_multi)
pandas.tests.reshape.merge.test_multi.TestJoinMultiMulti.test_join_multi_multi(self,left_multi,right_multi,join_type,on_cols_multi,idx_cols_multi)
pandas.tests.reshape.merge.test_multi.TestJoinMultiMulti.test_join_multi_wrong_order(self)
pandas.tests.reshape.merge.test_multi.TestJoinMultiMulti.test_merge_datetime_index(self,box)
pandas.tests.reshape.merge.test_multi.TestJoinMultiMulti.test_merge_dt_index(self,box)
pandas.tests.reshape.merge.test_multi.TestJoinMultiMulti.test_single_common_level(self)
pandas.tests.reshape.merge.test_multi.TestMergeMulti
pandas.tests.reshape.merge.test_multi.TestMergeMulti.setup_method(self)
pandas.tests.reshape.merge.test_multi.TestMergeMulti.test_compress_group_combinations(self)
pandas.tests.reshape.merge.test_multi.TestMergeMulti.test_join_multi_levels(self)
pandas.tests.reshape.merge.test_multi.TestMergeMulti.test_join_multi_levels2(self)
pandas.tests.reshape.merge.test_multi.TestMergeMulti.test_left_join_index_multi_match(self)
pandas.tests.reshape.merge.test_multi.TestMergeMulti.test_left_join_index_multi_match_multiindex(self)
pandas.tests.reshape.merge.test_multi.TestMergeMulti.test_left_join_index_preserve_order(self)
pandas.tests.reshape.merge.test_multi.TestMergeMulti.test_left_join_multi_index(self,left,right,sort)
pandas.tests.reshape.merge.test_multi.TestMergeMulti.test_left_merge_na_buglet(self)
pandas.tests.reshape.merge.test_multi.TestMergeMulti.test_merge_datetime_index(self,klass)
pandas.tests.reshape.merge.test_multi.TestMergeMulti.test_merge_dt_index(self,klass)
pandas.tests.reshape.merge.test_multi.TestMergeMulti.test_merge_multiple_cols_with_mixed_cols_index(self)
pandas.tests.reshape.merge.test_multi.TestMergeMulti.test_merge_na_keys(self)
pandas.tests.reshape.merge.test_multi.TestMergeMulti.test_merge_on_multikey(self,left,right,join_type)
pandas.tests.reshape.merge.test_multi.TestMergeMulti.test_merge_right_vs_left(self,left,right,sort)
pandas.tests.reshape.merge.test_multi.idx_cols_multi()
pandas.tests.reshape.merge.test_multi.left()
pandas.tests.reshape.merge.test_multi.left_multi()
pandas.tests.reshape.merge.test_multi.on_cols_multi()
pandas.tests.reshape.merge.test_multi.right()
pandas.tests.reshape.merge.test_multi.right_multi()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/test_numpy.py----------------------------------------
A:pandas.tests.arrays.test_numpy.dtype->PandasDtype(np.dtype('int64'))
A:pandas.tests.arrays.test_numpy.result->numpy.abs(arr)
A:pandas.tests.arrays.test_numpy.expected->PandasArray(np.array(['t', 'b', 'c'], dtype=dtype))
A:pandas.tests.arrays.test_numpy.ndarray->numpy.array([1, 2, 3])
A:pandas.tests.arrays.test_numpy.ser->pandas.Series([1, 2, 3])
A:pandas.tests.arrays.test_numpy.arr->PandasArray(np.array([1, 2, 3]))
A:pandas.tests.arrays.test_numpy.(r1, r2)->numpy.divmod(arr, np.add(arr, 2))
A:pandas.tests.arrays.test_numpy.(e1, e2)->numpy.divmod(arr._ndarray, np.add(arr._ndarray, 2))
A:pandas.tests.arrays.test_numpy.e1->PandasArray(e1)
A:pandas.tests.arrays.test_numpy.e2->PandasArray(e2)
A:pandas.tests.arrays.test_numpy.x->PandasArray(np.array([1, 2, 3]))
A:pandas.tests.arrays.test_numpy.view1->PandasArray(np.array([1, 2, 3])).view()
A:pandas.tests.arrays.test_numpy.view3->numpy.asarray(arr)
pandas.tests.arrays.test_numpy.any_numpy_array(request)
pandas.tests.arrays.test_numpy.test_bad_reduce_raises()
pandas.tests.arrays.test_numpy.test_basic_binop()
pandas.tests.arrays.test_numpy.test_constructor_copy()
pandas.tests.arrays.test_numpy.test_constructor_from_string()
pandas.tests.arrays.test_numpy.test_constructor_no_coercion()
pandas.tests.arrays.test_numpy.test_constructor_with_data(any_numpy_array)
pandas.tests.arrays.test_numpy.test_from_sequence_dtype()
pandas.tests.arrays.test_numpy.test_is_boolean(dtype,expected)
pandas.tests.arrays.test_numpy.test_is_numeric(dtype,expected)
pandas.tests.arrays.test_numpy.test_repr()
pandas.tests.arrays.test_numpy.test_series_constructor_with_astype()
pandas.tests.arrays.test_numpy.test_series_constructor_with_copy()
pandas.tests.arrays.test_numpy.test_setitem(any_numpy_array)
pandas.tests.arrays.test_numpy.test_setitem_no_coercion()
pandas.tests.arrays.test_numpy.test_setitem_object_typecode(dtype)
pandas.tests.arrays.test_numpy.test_setitem_preserves_views()
pandas.tests.arrays.test_numpy.test_setitem_series()
pandas.tests.arrays.test_numpy.test_to_numpy()
pandas.tests.arrays.test_numpy.test_ufunc()
pandas.tests.arrays.test_numpy.test_validate_reduction_keyword_args()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/test_boolean.py----------------------------------------
A:pandas.tests.arrays.test_boolean.values->op(a._data, b._data)
A:pandas.tests.arrays.test_boolean.mask->numpy.array([False, False, False, True], dtype='bool')
A:pandas.tests.arrays.test_boolean.result->pandas.Series(a).diff()
A:pandas.tests.arrays.test_boolean.expected->pandas.Series(expected)
A:pandas.tests.arrays.test_boolean.arr->pandas.array([True, False, pd.NA], dtype='boolean')
A:pandas.tests.arrays.test_boolean.df->pandas.DataFrame({'a': data})
A:pandas.tests.arrays.test_boolean.a->pandas.array([True, True, False, False, True, None, True, None, False], dtype='boolean')
A:pandas.tests.arrays.test_boolean.s->pandas.Series(a)
A:pandas.tests.arrays.test_boolean.op->self.get_op_from_name(all_compare_operators)
A:pandas.tests.arrays.test_boolean.short_opname->op_name.strip('_')
A:pandas.tests.arrays.test_boolean.rop->getattr(operator, short_opname[1:])
A:pandas.tests.arrays.test_boolean.b->pandas.array([True, False, None] * 3, dtype='boolean')
A:pandas.tests.arrays.test_boolean.other->pandas.Series([True] * len(data))
A:pandas.tests.arrays.test_boolean.ops->getattr(s, op)
A:pandas.tests.arrays.test_boolean.opa->getattr(data, op)
A:pandas.tests.arrays.test_boolean.data_object->numpy.array(data, dtype=object)
A:pandas.tests.arrays.test_boolean.data->pandas.array([True, False, None], dtype='boolean')
A:pandas.tests.arrays.test_boolean.table->pyarrow.table(df)
pandas.tests.arrays.test_boolean.TestArithmeticOps(BaseOpsUtil)
pandas.tests.arrays.test_boolean.TestArithmeticOps.test_error(self,data,all_arithmetic_operators)
pandas.tests.arrays.test_boolean.TestComparisonOps(BaseOpsUtil)
pandas.tests.arrays.test_boolean.TestComparisonOps._compare_other(self,data,op_name,other)
pandas.tests.arrays.test_boolean.TestComparisonOps.test_array(self,all_compare_operators)
pandas.tests.arrays.test_boolean.TestComparisonOps.test_compare_array(self,data,all_compare_operators)
pandas.tests.arrays.test_boolean.TestComparisonOps.test_compare_scalar(self,data,all_compare_operators)
pandas.tests.arrays.test_boolean.TestComparisonOps.test_scalar(self,other,all_compare_operators)
pandas.tests.arrays.test_boolean.TestLogicalOps(BaseOpsUtil)
pandas.tests.arrays.test_boolean.TestLogicalOps.get_op_from_name(self,op_name)
pandas.tests.arrays.test_boolean.TestLogicalOps.test_empty_ok(self,all_logical_operators)
pandas.tests.arrays.test_boolean.TestLogicalOps.test_kleene_and(self)
pandas.tests.arrays.test_boolean.TestLogicalOps.test_kleene_and_scalar(self,other,expected)
pandas.tests.arrays.test_boolean.TestLogicalOps.test_kleene_or(self)
pandas.tests.arrays.test_boolean.TestLogicalOps.test_kleene_or_scalar(self,other,expected)
pandas.tests.arrays.test_boolean.TestLogicalOps.test_kleene_xor(self)
pandas.tests.arrays.test_boolean.TestLogicalOps.test_kleene_xor_scalar(self,other,expected)
pandas.tests.arrays.test_boolean.TestLogicalOps.test_logical_length_mismatch_raises(self,all_logical_operators)
pandas.tests.arrays.test_boolean.TestLogicalOps.test_logical_nan_raises(self,all_logical_operators)
pandas.tests.arrays.test_boolean.TestLogicalOps.test_no_masked_assumptions(self,other,all_logical_operators)
pandas.tests.arrays.test_boolean.TestLogicalOps.test_non_bool_or_na_other_raises(self,other,all_logical_operators)
pandas.tests.arrays.test_boolean.TestLogicalOps.test_numpy_scalars_ok(self,all_logical_operators)
pandas.tests.arrays.test_boolean.TestUnaryOps
pandas.tests.arrays.test_boolean.TestUnaryOps.test_invert(self)
pandas.tests.arrays.test_boolean.data(dtype)
pandas.tests.arrays.test_boolean.dtype()
pandas.tests.arrays.test_boolean.make_data()
pandas.tests.arrays.test_boolean.test_any_all(values,exp_any,exp_all,exp_any_noskip,exp_all_noskip)
pandas.tests.arrays.test_boolean.test_arrow_array(data)
pandas.tests.arrays.test_boolean.test_arrow_roundtrip()
pandas.tests.arrays.test_boolean.test_astype()
pandas.tests.arrays.test_boolean.test_astype_to_boolean_array()
pandas.tests.arrays.test_boolean.test_astype_to_integer_array()
pandas.tests.arrays.test_boolean.test_boolean_array_constructor()
pandas.tests.arrays.test_boolean.test_boolean_array_constructor_copy()
pandas.tests.arrays.test_boolean.test_coerce_to_array()
pandas.tests.arrays.test_boolean.test_coerce_to_array_from_boolean_array()
pandas.tests.arrays.test_boolean.test_coerce_to_numpy_array()
pandas.tests.arrays.test_boolean.test_diff()
pandas.tests.arrays.test_boolean.test_reductions_return_types(dropna,data,all_numeric_reductions)
pandas.tests.arrays.test_boolean.test_repr()
pandas.tests.arrays.test_boolean.test_setitem_missing_values(na)
pandas.tests.arrays.test_boolean.test_to_boolean_array()
pandas.tests.arrays.test_boolean.test_to_boolean_array_all_none()
pandas.tests.arrays.test_boolean.test_to_boolean_array_error(values)
pandas.tests.arrays.test_boolean.test_to_boolean_array_from_float_array()
pandas.tests.arrays.test_boolean.test_to_boolean_array_from_integer_array()
pandas.tests.arrays.test_boolean.test_to_boolean_array_from_strings()
pandas.tests.arrays.test_boolean.test_to_boolean_array_from_strings_invalid_string()
pandas.tests.arrays.test_boolean.test_to_boolean_array_integer_like()
pandas.tests.arrays.test_boolean.test_to_boolean_array_missing_indicators(a,b)
pandas.tests.arrays.test_boolean.test_to_numpy(box)
pandas.tests.arrays.test_boolean.test_to_numpy_copy()
pandas.tests.arrays.test_boolean.test_ufunc_reduce_raises(values)
pandas.tests.arrays.test_boolean.test_ufuncs_binary(ufunc)
pandas.tests.arrays.test_boolean.test_ufuncs_unary(ufunc)
pandas.tests.arrays.test_boolean.test_value_counts_na()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/test_integer.py----------------------------------------
A:pandas.tests.arrays.test_integer.result->pandas.Series([1, 2], dtype='Int64').where(ser > 1)
A:pandas.tests.arrays.test_integer.data->integer_array([1, 2, None] * 1000)
A:pandas.tests.arrays.test_integer.a->integer_array(values)
A:pandas.tests.arrays.test_integer.expected->pandas.array([1, 1], dtype='Int64')
A:pandas.tests.arrays.test_integer.dropped->numpy.array(data.dropna()).astype(np.dtype(dtype.type))
A:pandas.tests.arrays.test_integer.op->self.get_op_from_name(all_compare_operators)
A:pandas.tests.arrays.test_integer.mask->numpy.array([False, False, False, True], dtype='bool')
A:pandas.tests.arrays.test_integer.s->pandas.Series(data=[1, 2, 3, 4, 5, 6, np.nan, np.nan], dtype='Int64')
A:pandas.tests.arrays.test_integer.omask->getattr(other, 'mask', None)
A:pandas.tests.arrays.test_integer.other_is_one->other_is_one.fillna(False).fillna(False)
A:pandas.tests.arrays.test_integer.rs->pandas.Series(s.values._data, name=s.name)
A:pandas.tests.arrays.test_integer.original->original.astype('float').astype('float')
A:pandas.tests.arrays.test_integer.rhs->pandas.Series([1] * len(data), dtype=data.dtype)
A:pandas.tests.arrays.test_integer.df->pandas.DataFrame({'a': data})
A:pandas.tests.arrays.test_integer.other->numpy.array(all_data[~all_data.isna()])
A:pandas.tests.arrays.test_integer.arr->pandas.array([1, 2, 1, pd.NA], dtype='Int64')
A:pandas.tests.arrays.test_integer.ops->getattr(s, op)
A:pandas.tests.arrays.test_integer.opa->getattr(data, op)
A:pandas.tests.arrays.test_integer.b->pandas.array([0] * 3 + [1] * 3 + [None] * 3, dtype='Int64')
A:pandas.tests.arrays.test_integer.values->numpy.array([1, 2, 3, 4], dtype='int64')
A:pandas.tests.arrays.test_integer.s1->pandas.Series([1, None, 3], dtype=any_nullable_int_dtype)
A:pandas.tests.arrays.test_integer.s2->pandas.Series(data=[1, 2, 3, 4, 5, 6], dtype='Int64')
A:pandas.tests.arrays.test_integer.method->getattr(s2, all_compare_operators)
A:pandas.tests.arrays.test_integer.idx->pandas.Index(np.array(other))
A:pandas.tests.arrays.test_integer.dtype->pandas.UInt32Dtype()
A:pandas.tests.arrays.test_integer.table->pyarrow.table(df)
A:pandas.tests.arrays.test_integer.pandasmeth->getattr(s2, pandasmethname)
A:pandas.tests.arrays.test_integer.ser->pandas.Series([1, 2], dtype='Int64')
pandas.tests.arrays.test_integer.TestArithmeticOps(BaseOpsUtil)
pandas.tests.arrays.test_integer.TestArithmeticOps._check_divmod_op(self,s,op,other,exc=None)
pandas.tests.arrays.test_integer.TestArithmeticOps._check_op(self,s,op_name,other,exc=None)
pandas.tests.arrays.test_integer.TestArithmeticOps._check_op_float(self,result,expected,mask,s,op_name,other)
pandas.tests.arrays.test_integer.TestArithmeticOps._check_op_integer(self,result,expected,mask,s,op_name,other)
pandas.tests.arrays.test_integer.TestArithmeticOps.test_arith_coerce_scalar(self,data,all_arithmetic_operators)
pandas.tests.arrays.test_integer.TestArithmeticOps.test_arith_frame_with_scalar(self,data,all_arithmetic_operators)
pandas.tests.arrays.test_integer.TestArithmeticOps.test_arith_integer_array(self,data,all_arithmetic_operators)
pandas.tests.arrays.test_integer.TestArithmeticOps.test_arith_len_mismatch(self,all_arithmetic_operators)
pandas.tests.arrays.test_integer.TestArithmeticOps.test_arith_series_with_array(self,data,all_arithmetic_operators)
pandas.tests.arrays.test_integer.TestArithmeticOps.test_arith_series_with_scalar(self,data,all_arithmetic_operators)
pandas.tests.arrays.test_integer.TestArithmeticOps.test_arith_zero_dim_ndarray(self,other)
pandas.tests.arrays.test_integer.TestArithmeticOps.test_arithmetic_conversion(self,all_arithmetic_operators,other)
pandas.tests.arrays.test_integer.TestArithmeticOps.test_divide_by_zero(self,zero,negative)
pandas.tests.arrays.test_integer.TestArithmeticOps.test_error(self,data,all_arithmetic_operators)
pandas.tests.arrays.test_integer.TestArithmeticOps.test_pow_array(self)
pandas.tests.arrays.test_integer.TestArithmeticOps.test_pow_scalar(self)
pandas.tests.arrays.test_integer.TestArithmeticOps.test_rpow_one_to_na(self)
pandas.tests.arrays.test_integer.TestCasting
pandas.tests.arrays.test_integer.TestCasting.test_astype(self,all_data)
pandas.tests.arrays.test_integer.TestCasting.test_astype_boolean(self)
pandas.tests.arrays.test_integer.TestCasting.test_astype_index(self,all_data,dropna)
pandas.tests.arrays.test_integer.TestCasting.test_astype_specific_casting(self,dtype)
pandas.tests.arrays.test_integer.TestCasting.test_astype_str(self)
pandas.tests.arrays.test_integer.TestCasting.test_astype_to_larger_numpy(self)
pandas.tests.arrays.test_integer.TestCasting.test_construct_cast_invalid(self,dtype)
pandas.tests.arrays.test_integer.TestCasting.test_construct_index(self,all_data,dropna)
pandas.tests.arrays.test_integer.TestCasting.test_to_numpy_dtype(self,dtype,in_series)
pandas.tests.arrays.test_integer.TestCasting.test_to_numpy_na_nan(self,in_series)
pandas.tests.arrays.test_integer.TestCasting.test_to_numpy_na_raises(self,dtype)
pandas.tests.arrays.test_integer.TestComparisonOps(BaseOpsUtil)
pandas.tests.arrays.test_integer.TestComparisonOps._compare_other(self,data,op_name,other)
pandas.tests.arrays.test_integer.TestComparisonOps.test_array(self,all_compare_operators)
pandas.tests.arrays.test_integer.TestComparisonOps.test_compare_to_int(self,any_nullable_int_dtype,all_compare_operators)
pandas.tests.arrays.test_integer.TestComparisonOps.test_compare_to_string(self,any_nullable_int_dtype)
pandas.tests.arrays.test_integer.TestComparisonOps.test_compare_with_booleanarray(self,all_compare_operators)
pandas.tests.arrays.test_integer.TestComparisonOps.test_no_shared_mask(self,data)
pandas.tests.arrays.test_integer.TestComparisonOps.test_scalar(self,other,all_compare_operators)
pandas.tests.arrays.test_integer.TestConstructors
pandas.tests.arrays.test_integer.TestConstructors.test_from_dtype_from_float(self,data)
pandas.tests.arrays.test_integer.TestConstructors.test_uses_pandas_na(self)
pandas.tests.arrays.test_integer.all_data(request,data,data_missing)
pandas.tests.arrays.test_integer.data(dtype)
pandas.tests.arrays.test_integer.data_missing(dtype)
pandas.tests.arrays.test_integer.dtype(request)
pandas.tests.arrays.test_integer.make_data()
pandas.tests.arrays.test_integer.test_array_setitem()
pandas.tests.arrays.test_integer.test_array_setitem_nullable_boolean_mask()
pandas.tests.arrays.test_integer.test_arrow_array(data)
pandas.tests.arrays.test_integer.test_arrow_from_arrow_uint()
pandas.tests.arrays.test_integer.test_arrow_roundtrip(data)
pandas.tests.arrays.test_integer.test_astype_nansafe()
pandas.tests.arrays.test_integer.test_conversions(data_missing)
pandas.tests.arrays.test_integer.test_cross_type_arithmetic()
pandas.tests.arrays.test_integer.test_dtypes(dtype)
pandas.tests.arrays.test_integer.test_frame_repr(data_missing)
pandas.tests.arrays.test_integer.test_integer_array_constructor()
pandas.tests.arrays.test_integer.test_integer_array_constructor_copy()
pandas.tests.arrays.test_integer.test_integer_array_constructor_none_is_nan(a,b)
pandas.tests.arrays.test_integer.test_preserve_dtypes(op)
pandas.tests.arrays.test_integer.test_reduce_to_float(op)
pandas.tests.arrays.test_integer.test_repr_array()
pandas.tests.arrays.test_integer.test_repr_array_long()
pandas.tests.arrays.test_integer.test_repr_dtype(dtype,expected)
pandas.tests.arrays.test_integer.test_stat_method(pandasmethname,kwargs)
pandas.tests.arrays.test_integer.test_to_integer_array(values,to_dtype,result_dtype)
pandas.tests.arrays.test_integer.test_to_integer_array_bool(bool_values,int_values,target_dtype,expected_dtype)
pandas.tests.arrays.test_integer.test_to_integer_array_dtype_keyword()
pandas.tests.arrays.test_integer.test_to_integer_array_error(values)
pandas.tests.arrays.test_integer.test_to_integer_array_float()
pandas.tests.arrays.test_integer.test_to_integer_array_inferred_dtype()
pandas.tests.arrays.test_integer.test_ufunc_reduce_raises(values)
pandas.tests.arrays.test_integer.test_ufuncs_binary_int(ufunc)
pandas.tests.arrays.test_integer.test_ufuncs_single_float(ufunc)
pandas.tests.arrays.test_integer.test_ufuncs_single_int(ufunc)
pandas.tests.arrays.test_integer.test_value_counts_na()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/test_datetimes.py----------------------------------------
A:pandas.tests.arrays.test_datetimes.mi->pandas.MultiIndex.from_product([np.arange(5), np.arange(5)])
A:pandas.tests.arrays.test_datetimes.arr->pandas.core.arrays.DatetimeArray._from_sequence([], tz=tz)
A:pandas.tests.arrays.test_datetimes.result->pandas.core.arrays.DatetimeArray._from_sequence([], tz=tz).max(skipna=skipna)
A:pandas.tests.arrays.test_datetimes.dtype->DatetimeTZDtype(tz='US/Eastern')
A:pandas.tests.arrays.test_datetimes.data->DatetimeArray(pd.date_range('2017', periods=2))
A:pandas.tests.arrays.test_datetimes.opname->all_compare_operators.strip('_')
A:pandas.tests.arrays.test_datetimes.op->getattr(operator, opname)
A:pandas.tests.arrays.test_datetimes.dti->pandas.date_range('2000-01-01', periods=5, freq='D', tz='US/Central')
A:pandas.tests.arrays.test_datetimes.expected->pandas.Timestamp('2000-01-05', tz=tz)
A:pandas.tests.arrays.test_datetimes.s->pandas.Series([1, 2], dtype=dtype)
A:pandas.tests.arrays.test_datetimes.orig->pandas.Series([1, 2], dtype=dtype).copy()
A:pandas.tests.arrays.test_datetimes.t->pandas.Series([1, 2], dtype=dtype).astype(other)
A:pandas.tests.arrays.test_datetimes.expected_dtype->numpy.dtype('int64')
A:pandas.tests.arrays.test_datetimes.arr[0]->pandas.Timestamp('2000', tz='US/Eastern')
A:pandas.tests.arrays.test_datetimes.a->DatetimeArray(pd.date_range('2000', periods=2, freq='D', tz='US/Central'))
A:pandas.tests.arrays.test_datetimes.a[0]->pandas.Timestamp('2000', tz='US/Central')
A:pandas.tests.arrays.test_datetimes.repeated->pandas.core.arrays.DatetimeArray._from_sequence([], tz=tz).repeat([1, 1])
A:pandas.tests.arrays.test_datetimes.mismatch->pandas.core.arrays.DatetimeArray._from_sequence([], tz=tz).tz_localize('Asia/Tokyo')
A:pandas.tests.arrays.test_datetimes.(result, _, _)->sequence_to_dt64ns(arr, dtype=DatetimeTZDtype(tz='US/Central'))
pandas.tests.arrays.test_datetimes.TestDatetimeArray
pandas.tests.arrays.test_datetimes.TestDatetimeArray.test_array_interface(self)
pandas.tests.arrays.test_datetimes.TestDatetimeArray.test_array_interface_tz(self)
pandas.tests.arrays.test_datetimes.TestDatetimeArray.test_astype_copies(self,dtype,other)
pandas.tests.arrays.test_datetimes.TestDatetimeArray.test_astype_int(self,dtype)
pandas.tests.arrays.test_datetimes.TestDatetimeArray.test_astype_to_same(self)
pandas.tests.arrays.test_datetimes.TestDatetimeArray.test_fillna_preserves_tz(self,method)
pandas.tests.arrays.test_datetimes.TestDatetimeArray.test_repeat_preserves_tz(self)
pandas.tests.arrays.test_datetimes.TestDatetimeArray.test_searchsorted_different_tz(self,index)
pandas.tests.arrays.test_datetimes.TestDatetimeArray.test_searchsorted_invalid_types(self,other,index)
pandas.tests.arrays.test_datetimes.TestDatetimeArray.test_searchsorted_tzawareness_compat(self,index)
pandas.tests.arrays.test_datetimes.TestDatetimeArray.test_setitem_clears_freq(self)
pandas.tests.arrays.test_datetimes.TestDatetimeArray.test_setitem_different_tz_raises(self)
pandas.tests.arrays.test_datetimes.TestDatetimeArray.test_setitem_objects(self,obj)
pandas.tests.arrays.test_datetimes.TestDatetimeArray.test_tz_setter_raises(self)
pandas.tests.arrays.test_datetimes.TestDatetimeArray.test_value_counts_preserves_tz(self)
pandas.tests.arrays.test_datetimes.TestDatetimeArrayComparisons
pandas.tests.arrays.test_datetimes.TestDatetimeArrayComparisons.test_cmp_dt64_arraylike_tznaive(self,all_compare_operators)
pandas.tests.arrays.test_datetimes.TestDatetimeArrayConstructor
pandas.tests.arrays.test_datetimes.TestDatetimeArrayConstructor.test_copy(self)
pandas.tests.arrays.test_datetimes.TestDatetimeArrayConstructor.test_freq_infer_raises(self)
pandas.tests.arrays.test_datetimes.TestDatetimeArrayConstructor.test_freq_validation(self)
pandas.tests.arrays.test_datetimes.TestDatetimeArrayConstructor.test_from_pandas_array(self)
pandas.tests.arrays.test_datetimes.TestDatetimeArrayConstructor.test_from_sequence_invalid_type(self)
pandas.tests.arrays.test_datetimes.TestDatetimeArrayConstructor.test_incorrect_dtype_raises(self)
pandas.tests.arrays.test_datetimes.TestDatetimeArrayConstructor.test_mismatched_timezone_raises(self)
pandas.tests.arrays.test_datetimes.TestDatetimeArrayConstructor.test_mixing_naive_tzaware_raises(self,meth)
pandas.tests.arrays.test_datetimes.TestDatetimeArrayConstructor.test_non_array_raises(self)
pandas.tests.arrays.test_datetimes.TestDatetimeArrayConstructor.test_only_1dim_accepted(self)
pandas.tests.arrays.test_datetimes.TestDatetimeArrayConstructor.test_other_type_raises(self)
pandas.tests.arrays.test_datetimes.TestReductions
pandas.tests.arrays.test_datetimes.TestReductions.test_min_max(self,tz)
pandas.tests.arrays.test_datetimes.TestReductions.test_min_max_empty(self,skipna,tz)
pandas.tests.arrays.test_datetimes.TestSequenceToDT64NS
pandas.tests.arrays.test_datetimes.TestSequenceToDT64NS.test_tz_dtype_matches(self)
pandas.tests.arrays.test_datetimes.TestSequenceToDT64NS.test_tz_dtype_mismatch_raises(self)
pandas.tests.arrays.test_dts.TestDatetimeArray
pandas.tests.arrays.test_dts.TestDatetimeArray.test_array_interface(self)
pandas.tests.arrays.test_dts.TestDatetimeArray.test_array_interface_tz(self)
pandas.tests.arrays.test_dts.TestDatetimeArray.test_astype_copies(self,dtype,other)
pandas.tests.arrays.test_dts.TestDatetimeArray.test_astype_int(self,dtype)
pandas.tests.arrays.test_dts.TestDatetimeArray.test_astype_to_same(self)
pandas.tests.arrays.test_dts.TestDatetimeArray.test_fillna_preserves_tz(self,method)
pandas.tests.arrays.test_dts.TestDatetimeArray.test_repeat_preserves_tz(self)
pandas.tests.arrays.test_dts.TestDatetimeArray.test_searchsorted_different_tz(self,index)
pandas.tests.arrays.test_dts.TestDatetimeArray.test_searchsorted_invalid_types(self,other,index)
pandas.tests.arrays.test_dts.TestDatetimeArray.test_searchsorted_tzawareness_compat(self,index)
pandas.tests.arrays.test_dts.TestDatetimeArray.test_setitem_clears_freq(self)
pandas.tests.arrays.test_dts.TestDatetimeArray.test_setitem_different_tz_raises(self)
pandas.tests.arrays.test_dts.TestDatetimeArray.test_setitem_objects(self,obj)
pandas.tests.arrays.test_dts.TestDatetimeArray.test_tz_setter_raises(self)
pandas.tests.arrays.test_dts.TestDatetimeArray.test_value_counts_preserves_tz(self)
pandas.tests.arrays.test_dts.TestDatetimeArrayComparisons
pandas.tests.arrays.test_dts.TestDatetimeArrayComparisons.test_cmp_dt64_arraylike_tznaive(self,all_compare_operators)
pandas.tests.arrays.test_dts.TestDatetimeArrayConstructor
pandas.tests.arrays.test_dts.TestDatetimeArrayConstructor.test_copy(self)
pandas.tests.arrays.test_dts.TestDatetimeArrayConstructor.test_freq_infer_raises(self)
pandas.tests.arrays.test_dts.TestDatetimeArrayConstructor.test_freq_validation(self)
pandas.tests.arrays.test_dts.TestDatetimeArrayConstructor.test_from_pandas_array(self)
pandas.tests.arrays.test_dts.TestDatetimeArrayConstructor.test_from_sequence_invalid_type(self)
pandas.tests.arrays.test_dts.TestDatetimeArrayConstructor.test_incorrect_dtype_raises(self)
pandas.tests.arrays.test_dts.TestDatetimeArrayConstructor.test_mismatched_timezone_raises(self)
pandas.tests.arrays.test_dts.TestDatetimeArrayConstructor.test_mixing_naive_tzaware_raises(self,meth)
pandas.tests.arrays.test_dts.TestDatetimeArrayConstructor.test_non_array_raises(self)
pandas.tests.arrays.test_dts.TestDatetimeArrayConstructor.test_only_1dim_accepted(self)
pandas.tests.arrays.test_dts.TestDatetimeArrayConstructor.test_other_type_raises(self)
pandas.tests.arrays.test_dts.TestReductions
pandas.tests.arrays.test_dts.TestReductions.test_min_max(self,tz)
pandas.tests.arrays.test_dts.TestReductions.test_min_max_empty(self,skipna,tz)
pandas.tests.arrays.test_dts.TestSequenceToDT64NS
pandas.tests.arrays.test_dts.TestSequenceToDT64NS.test_tz_dtype_matches(self)
pandas.tests.arrays.test_dts.TestSequenceToDT64NS.test_tz_dtype_mismatch_raises(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/test_period.py----------------------------------------
A:pandas.tests.arrays.test_period.result->pyarrow.concat_tables([table, table]).to_pandas()
A:pandas.tests.arrays.test_period.expected->pandas.concat([df, df], ignore_index=True)
A:pandas.tests.arrays.test_period.pa->period_array([pd.Period('2019-01-01')])
A:pandas.tests.arrays.test_period.arr->PeriodArray([1, 2, 3], freq='D')
A:pandas.tests.arrays.test_period.ser->pandas.Series(period_array(['2000', '2001', '2002'], freq='D'))
A:pandas.tests.arrays.test_period.expected_dtype->numpy.dtype('int64')
A:pandas.tests.arrays.test_period.categories->pandas.PeriodIndex(['2000', '2001'], freq='D')
A:pandas.tests.arrays.test_period.arr[0]->pandas.Period('2000', freq='A')
A:pandas.tests.arrays.test_period.other->pandas.Period('2000', freq='M')
A:pandas.tests.arrays.test_period.cond->numpy.array([True, False, True])
A:pandas.tests.arrays.test_period.pyarrow_skippyarrow_skip->pandas.util._test_decorators.skip_if_no('pyarrow', min_version='0.15.1.dev')
A:pandas.tests.arrays.test_period.p1->ArrowPeriodType('D')
A:pandas.tests.arrays.test_period.p2->ArrowPeriodType('D')
A:pandas.tests.arrays.test_period.p3->ArrowPeriodType('M')
A:pandas.tests.arrays.test_period.periods->period_array(data, freq=freq)
A:pandas.tests.arrays.test_period.df->pandas.DataFrame({'a': arr})
A:pandas.tests.arrays.test_period.table->period_array([pd.Period('2019-01-01')]).table(df)
A:pandas.tests.arrays.test_period.table2->period_array([pd.Period('2019-01-01')]).concat_tables([table, table])
pandas.tests.arrays.test_period.TestReductions
pandas.tests.arrays.test_period.TestReductions.test_min_max(self)
pandas.tests.arrays.test_period.TestReductions.test_min_max_empty(self,skipna)
pandas.tests.arrays.test_period.test_arrow_array(data,freq)
pandas.tests.arrays.test_period.test_arrow_array_missing()
pandas.tests.arrays.test_period.test_arrow_extension_type()
pandas.tests.arrays.test_period.test_arrow_table_roundtrip()
pandas.tests.arrays.test_period.test_asi8()
pandas.tests.arrays.test_period.test_astype(dtype)
pandas.tests.arrays.test_period.test_astype_categorical()
pandas.tests.arrays.test_period.test_astype_copies()
pandas.tests.arrays.test_period.test_astype_datetime(other)
pandas.tests.arrays.test_period.test_astype_dt(other)
pandas.tests.arrays.test_period.test_astype_period()
pandas.tests.arrays.test_period.test_fillna_copies()
pandas.tests.arrays.test_period.test_fillna_raises()
pandas.tests.arrays.test_period.test_from_datetime64_freq_changes()
pandas.tests.arrays.test_period.test_from_dt64_freq_changes()
pandas.tests.arrays.test_period.test_period_array_freq_mismatch()
pandas.tests.arrays.test_period.test_period_array_non_period_series_raies()
pandas.tests.arrays.test_period.test_period_array_ok(data,freq,expected)
pandas.tests.arrays.test_period.test_period_array_raises(data,freq,msg)
pandas.tests.arrays.test_period.test_period_array_readonly_object()
pandas.tests.arrays.test_period.test_registered()
pandas.tests.arrays.test_period.test_repr_large()
pandas.tests.arrays.test_period.test_repr_small()
pandas.tests.arrays.test_period.test_setitem(key,value,expected)
pandas.tests.arrays.test_period.test_setitem_raises_incompatible_freq()
pandas.tests.arrays.test_period.test_setitem_raises_length()
pandas.tests.arrays.test_period.test_setitem_raises_type()
pandas.tests.arrays.test_period.test_sub_period()
pandas.tests.arrays.test_period.test_take_raises()
pandas.tests.arrays.test_period.test_where_different_freq_raises(other)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/test_array.py----------------------------------------
A:pandas.tests.arrays.test_array.result->pandas.array([3, 1, 2], dtype=any_real_dtype).searchsorted([0, 3], sorter=np.argsort(arr))
A:pandas.tests.arrays.test_array.a->numpy.array([1, 2])
A:pandas.tests.arrays.test_array.b->pandas.array(a, dtype=a.dtype, copy=False)
A:pandas.tests.arrays.test_array.cet->pytz.timezone('CET')
A:pandas.tests.arrays.test_array.expected->numpy.array([0, 2], dtype=np.intp)
A:pandas.tests.arrays.test_array.data->box([decimal.Decimal('1'), decimal.Decimal('2')])
A:pandas.tests.arrays.test_array.idx->pandas.core.dtypes.dtypes.registry.dtypes.index(DecimalDtype)
A:pandas.tests.arrays.test_array.arr->pandas.array([3, 1, 2], dtype=any_real_dtype)
pandas.tests.arrays.test_array.DecimalArray2(DecimalArray)
pandas.tests.arrays.test_array.DecimalArray2._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.tests.arrays.test_array.DecimalDtype2(DecimalDtype)
pandas.tests.arrays.test_array.DecimalDtype2.construct_array_type(cls)
pandas.tests.arrays.test_array.TestArrayAnalytics
pandas.tests.arrays.test_array.TestArrayAnalytics.test_search_sorted_datetime64_scalar(self,arr,val)
pandas.tests.arrays.test_array.TestArrayAnalytics.test_search_sorted_dt64_scalar(self,arr,val)
pandas.tests.arrays.test_array.TestArrayAnalytics.test_searchsorted(self,string_dtype)
pandas.tests.arrays.test_array.TestArrayAnalytics.test_searchsorted_numeric_dtypes_scalar(self,any_real_dtype)
pandas.tests.arrays.test_array.TestArrayAnalytics.test_searchsorted_numeric_dtypes_vector(self,any_real_dtype)
pandas.tests.arrays.test_array.TestArrayAnalytics.test_searchsorted_sorter(self,any_real_dtype)
pandas.tests.arrays.test_array.registry_without_decimal()
pandas.tests.arrays.test_array.test_array(data,dtype,expected)
pandas.tests.arrays.test_array.test_array_copy()
pandas.tests.arrays.test_array.test_array_inference(data,expected)
pandas.tests.arrays.test_array.test_array_inference_fails(data)
pandas.tests.arrays.test_array.test_array_not_registered(registry_without_decimal)
pandas.tests.arrays.test_array.test_array_unboxes(index_or_series)
pandas.tests.arrays.test_array.test_nd_raises(data)
pandas.tests.arrays.test_array.test_scalar_raises()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/test_datetimelike.py----------------------------------------
A:pandas.tests.arrays.test_datetimelike.pi->pandas.period_range('1500', freq='Y', periods=3)
A:pandas.tests.arrays.test_datetimelike.dti->datetime_index.tz_localize(tz_naive_fixture)
A:pandas.tests.arrays.test_datetimelike.idx->self.index_cls._simple_new(data, freq='D').insert(0, pd.NaT)
A:pandas.tests.arrays.test_datetimelike.arr->array.copy()
A:pandas.tests.arrays.test_datetimelike.result->array.to_numpy(na_value=array[1].to_numpy(copy=False))
A:pandas.tests.arrays.test_datetimelike.expected->type(array)._from_sequence([pd.NaT, array[1], array[2]])
A:pandas.tests.arrays.test_datetimelike.takers->numpy.array([1, 4, 94])
A:pandas.tests.arrays.test_datetimelike.arr[0]->object()
A:pandas.tests.arrays.test_datetimelike.fill_val->array.copy()._scalar_type(1)
A:pandas.tests.arrays.test_datetimelike.dta->DatetimeArray(arr[:0])
A:pandas.tests.arrays.test_datetimelike.dti2->pandas.Index(arr)
A:pandas.tests.arrays.test_datetimelike.asobj->array.copy().astype('O')
A:pandas.tests.arrays.test_datetimelike.now->pandas.Timestamp.now()
A:pandas.tests.arrays.test_datetimelike.other->array.copy().tz_localize(None)
A:pandas.tests.arrays.test_datetimelike.a->DatetimeArray(pd.date_range('2000', periods=2, freq='D', tz='US/Central'))
A:pandas.tests.arrays.test_datetimelike.b->DatetimeArray(pd.date_range('2000', periods=2, freq='H', tz='US/Central'))
A:pandas.tests.arrays.test_datetimelike.tdi->pandas.TimedeltaIndex(['1 Day', '3 Hours'])
A:pandas.tests.arrays.test_datetimelike.tdi2->pandas.Index(arr)
A:pandas.tests.arrays.test_datetimelike.td1->pandas.Timedelta(days=1)
A:pandas.tests.arrays.test_datetimelike.pi2->pandas.Index(arr)
A:pandas.tests.arrays.test_datetimelike.original->array.copy()
pandas.tests.arrays.test_datetimelike.SharedTests
pandas.tests.arrays.test_datetimelike.SharedTests.test_check_compatible_with(self)
pandas.tests.arrays.test_datetimelike.SharedTests.test_compare_len1_raises(self)
pandas.tests.arrays.test_datetimelike.SharedTests.test_concat_same_type(self)
pandas.tests.arrays.test_datetimelike.SharedTests.test_fillna_method_doesnt_change_orig(self,method)
pandas.tests.arrays.test_datetimelike.SharedTests.test_inplace_arithmetic(self)
pandas.tests.arrays.test_datetimelike.SharedTests.test_reduce_invalid(self)
pandas.tests.arrays.test_datetimelike.SharedTests.test_scalar_from_string(self)
pandas.tests.arrays.test_datetimelike.SharedTests.test_searchsorted(self)
pandas.tests.arrays.test_datetimelike.SharedTests.test_setitem(self)
pandas.tests.arrays.test_datetimelike.SharedTests.test_setitem_raises(self)
pandas.tests.arrays.test_datetimelike.SharedTests.test_shift_fill_int_deprecated(self)
pandas.tests.arrays.test_datetimelike.SharedTests.test_take(self)
pandas.tests.arrays.test_datetimelike.SharedTests.test_take_fill(self)
pandas.tests.arrays.test_datetimelike.SharedTests.test_unbox_scalar(self)
pandas.tests.arrays.test_datetimelike.TestDatetimeArray(SharedTests)
pandas.tests.arrays.test_datetimelike.TestDatetimeArray.test_array_i8_dtype(self,tz_naive_fixture)
pandas.tests.arrays.test_datetimelike.TestDatetimeArray.test_array_interface(self,datetime_index)
pandas.tests.arrays.test_datetimelike.TestDatetimeArray.test_array_object_dtype(self,tz_naive_fixture)
pandas.tests.arrays.test_datetimelike.TestDatetimeArray.test_array_tz(self,tz_naive_fixture)
pandas.tests.arrays.test_datetimelike.TestDatetimeArray.test_astype_object(self,tz_naive_fixture)
pandas.tests.arrays.test_datetimelike.TestDatetimeArray.test_bool_properties(self,datetime_index,propname)
pandas.tests.arrays.test_datetimelike.TestDatetimeArray.test_concat_same_type_different_freq(self)
pandas.tests.arrays.test_datetimelike.TestDatetimeArray.test_concat_same_type_invalid(self,datetime_index)
pandas.tests.arrays.test_datetimelike.TestDatetimeArray.test_from_array_keeps_base(self)
pandas.tests.arrays.test_datetimelike.TestDatetimeArray.test_from_dti(self,tz_naive_fixture)
pandas.tests.arrays.test_datetimelike.TestDatetimeArray.test_int_properties(self,datetime_index,propname)
pandas.tests.arrays.test_datetimelike.TestDatetimeArray.test_round(self,tz_naive_fixture)
pandas.tests.arrays.test_datetimelike.TestDatetimeArray.test_strftime(self,datetime_index)
pandas.tests.arrays.test_datetimelike.TestDatetimeArray.test_strftime_nat(self)
pandas.tests.arrays.test_datetimelike.TestDatetimeArray.test_take_fill_valid(self,datetime_index,tz_naive_fixture)
pandas.tests.arrays.test_datetimelike.TestDatetimeArray.test_to_period(self,datetime_index,freqstr)
pandas.tests.arrays.test_datetimelike.TestDatetimeArray.test_to_perioddelta(self,datetime_index,freqstr)
pandas.tests.arrays.test_datetimelike.TestPeriodArray(SharedTests)
pandas.tests.arrays.test_datetimelike.TestPeriodArray.test_array_interface(self,period_index)
pandas.tests.arrays.test_datetimelike.TestPeriodArray.test_astype_object(self,period_index)
pandas.tests.arrays.test_datetimelike.TestPeriodArray.test_bool_properties(self,period_index,propname)
pandas.tests.arrays.test_datetimelike.TestPeriodArray.test_from_pi(self,period_index)
pandas.tests.arrays.test_datetimelike.TestPeriodArray.test_int_properties(self,period_index,propname)
pandas.tests.arrays.test_datetimelike.TestPeriodArray.test_strftime(self,period_index)
pandas.tests.arrays.test_datetimelike.TestPeriodArray.test_strftime_nat(self)
pandas.tests.arrays.test_datetimelike.TestPeriodArray.test_to_timestamp(self,how,period_index)
pandas.tests.arrays.test_datetimelike.TestPeriodArray.test_to_timestamp_out_of_bounds(self)
pandas.tests.arrays.test_datetimelike.TestTimedeltaArray(SharedTests)
pandas.tests.arrays.test_datetimelike.TestTimedeltaArray.test_array_interface(self,timedelta_index)
pandas.tests.arrays.test_datetimelike.TestTimedeltaArray.test_astype_object(self)
pandas.tests.arrays.test_datetimelike.TestTimedeltaArray.test_from_tdi(self)
pandas.tests.arrays.test_datetimelike.TestTimedeltaArray.test_int_properties(self,timedelta_index,propname)
pandas.tests.arrays.test_datetimelike.TestTimedeltaArray.test_take_fill_valid(self,timedelta_index)
pandas.tests.arrays.test_datetimelike.TestTimedeltaArray.test_to_pytimedelta(self,timedelta_index)
pandas.tests.arrays.test_datetimelike.TestTimedeltaArray.test_total_seconds(self,timedelta_index)
pandas.tests.arrays.test_datetimelike.datetime_index(request)
pandas.tests.arrays.test_datetimelike.period_index(request)
pandas.tests.arrays.test_datetimelike.test_casting_nat_setitem_array(array,casting_nats)
pandas.tests.arrays.test_datetimelike.test_invalid_nat_setitem_array(array,non_casting_nats)
pandas.tests.arrays.test_datetimelike.test_to_numpy_extra(array)
pandas.tests.arrays.test_datetimelike.timedelta_index(request)
pandas.tests.arrays.test_dtlike.SharedTests
pandas.tests.arrays.test_dtlike.SharedTests.test_check_compatible_with(self)
pandas.tests.arrays.test_dtlike.SharedTests.test_compare_len1_raises(self)
pandas.tests.arrays.test_dtlike.SharedTests.test_concat_same_type(self)
pandas.tests.arrays.test_dtlike.SharedTests.test_fillna_method_doesnt_change_orig(self,method)
pandas.tests.arrays.test_dtlike.SharedTests.test_inplace_arithmetic(self)
pandas.tests.arrays.test_dtlike.SharedTests.test_reduce_invalid(self)
pandas.tests.arrays.test_dtlike.SharedTests.test_scalar_from_string(self)
pandas.tests.arrays.test_dtlike.SharedTests.test_searchsorted(self)
pandas.tests.arrays.test_dtlike.SharedTests.test_setitem(self)
pandas.tests.arrays.test_dtlike.SharedTests.test_setitem_raises(self)
pandas.tests.arrays.test_dtlike.SharedTests.test_shift_fill_int_deprecated(self)
pandas.tests.arrays.test_dtlike.SharedTests.test_take(self)
pandas.tests.arrays.test_dtlike.SharedTests.test_take_fill(self)
pandas.tests.arrays.test_dtlike.SharedTests.test_unbox_scalar(self)
pandas.tests.arrays.test_dtlike.TestDatetimeArray(SharedTests)
pandas.tests.arrays.test_dtlike.TestDatetimeArray.test_array_i8_dtype(self,tz_naive_fixture)
pandas.tests.arrays.test_dtlike.TestDatetimeArray.test_array_interface(self,datetime_index)
pandas.tests.arrays.test_dtlike.TestDatetimeArray.test_array_object_dtype(self,tz_naive_fixture)
pandas.tests.arrays.test_dtlike.TestDatetimeArray.test_array_tz(self,tz_naive_fixture)
pandas.tests.arrays.test_dtlike.TestDatetimeArray.test_astype_object(self,tz_naive_fixture)
pandas.tests.arrays.test_dtlike.TestDatetimeArray.test_bool_properties(self,datetime_index,propname)
pandas.tests.arrays.test_dtlike.TestDatetimeArray.test_concat_same_type_different_freq(self)
pandas.tests.arrays.test_dtlike.TestDatetimeArray.test_concat_same_type_invalid(self,datetime_index)
pandas.tests.arrays.test_dtlike.TestDatetimeArray.test_from_array_keeps_base(self)
pandas.tests.arrays.test_dtlike.TestDatetimeArray.test_from_dti(self,tz_naive_fixture)
pandas.tests.arrays.test_dtlike.TestDatetimeArray.test_int_properties(self,datetime_index,propname)
pandas.tests.arrays.test_dtlike.TestDatetimeArray.test_round(self,tz_naive_fixture)
pandas.tests.arrays.test_dtlike.TestDatetimeArray.test_strftime(self,datetime_index)
pandas.tests.arrays.test_dtlike.TestDatetimeArray.test_strftime_nat(self)
pandas.tests.arrays.test_dtlike.TestDatetimeArray.test_take_fill_valid(self,datetime_index,tz_naive_fixture)
pandas.tests.arrays.test_dtlike.TestDatetimeArray.test_to_period(self,datetime_index,freqstr)
pandas.tests.arrays.test_dtlike.TestDatetimeArray.test_to_perioddelta(self,datetime_index,freqstr)
pandas.tests.arrays.test_dtlike.TestPeriodArray(SharedTests)
pandas.tests.arrays.test_dtlike.TestPeriodArray.test_array_interface(self,period_index)
pandas.tests.arrays.test_dtlike.TestPeriodArray.test_astype_object(self,period_index)
pandas.tests.arrays.test_dtlike.TestPeriodArray.test_bool_properties(self,period_index,propname)
pandas.tests.arrays.test_dtlike.TestPeriodArray.test_from_pi(self,period_index)
pandas.tests.arrays.test_dtlike.TestPeriodArray.test_int_properties(self,period_index,propname)
pandas.tests.arrays.test_dtlike.TestPeriodArray.test_strftime(self,period_index)
pandas.tests.arrays.test_dtlike.TestPeriodArray.test_strftime_nat(self)
pandas.tests.arrays.test_dtlike.TestPeriodArray.test_to_timestamp(self,how,period_index)
pandas.tests.arrays.test_dtlike.TestPeriodArray.test_to_timestamp_out_of_bounds(self)
pandas.tests.arrays.test_dtlike.TestTimedeltaArray(SharedTests)
pandas.tests.arrays.test_dtlike.TestTimedeltaArray.test_array_interface(self,timedelta_index)
pandas.tests.arrays.test_dtlike.TestTimedeltaArray.test_astype_object(self)
pandas.tests.arrays.test_dtlike.TestTimedeltaArray.test_from_tdi(self)
pandas.tests.arrays.test_dtlike.TestTimedeltaArray.test_int_properties(self,timedelta_index,propname)
pandas.tests.arrays.test_dtlike.TestTimedeltaArray.test_take_fill_valid(self,timedelta_index)
pandas.tests.arrays.test_dtlike.TestTimedeltaArray.test_to_pytimedelta(self,timedelta_index)
pandas.tests.arrays.test_dtlike.TestTimedeltaArray.test_total_seconds(self,timedelta_index)
pandas.tests.arrays.test_dtlike.dt_index(request)
pandas.tests.arrays.test_dtlike.period_index(request)
pandas.tests.arrays.test_dtlike.test_casting_nat_setitem_array(array,casting_nats)
pandas.tests.arrays.test_dtlike.test_invalid_nat_setitem_array(array,non_casting_nats)
pandas.tests.arrays.test_dtlike.test_to_numpy_extra(array)
pandas.tests.arrays.test_dtlike.timedelta_index(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/test_timedeltas.py----------------------------------------
A:pandas.tests.arrays.test_timedeltas.arr->pandas.core.arrays.TimedeltaArray._from_sequence(['3H', '3H', 'NaT', '2H', '5H', '4H'])
A:pandas.tests.arrays.test_timedeltas.data->numpy.array([1, 2, 3], dtype='m8[ns]')
A:pandas.tests.arrays.test_timedeltas.vals->numpy.array([-3600 * 10 ** 9, 'NaT', 7200 * 10 ** 9], dtype='m8[ns]')
A:pandas.tests.arrays.test_timedeltas.result->pandas.TimedeltaIndex(['0H', '3H', 'NaT', '5H06m', '0H', '2H']).std(skipna=False)
A:pandas.tests.arrays.test_timedeltas.evals->numpy.array([3600 * 10 ** 9, 'NaT', -7200 * 10 ** 9], dtype='m8[ns]')
A:pandas.tests.arrays.test_timedeltas.expected->pandas.Timedelta(hours=2)
A:pandas.tests.arrays.test_timedeltas.tdi->pandas.TimedeltaIndex(['0H', '3H', 'NaT', '5H06m', '0H', '2H'])
A:pandas.tests.arrays.test_timedeltas.expected_dtype->numpy.dtype('int64')
A:pandas.tests.arrays.test_timedeltas.a->TimedeltaArray(pd.timedelta_range('1H', periods=2, freq='H'))
A:pandas.tests.arrays.test_timedeltas.a[0]->pandas.Timedelta('1H')
pandas.tests.arrays.test_timedeltas.TestReductions
pandas.tests.arrays.test_timedeltas.TestReductions.test_median(self)
pandas.tests.arrays.test_timedeltas.TestReductions.test_min_max(self)
pandas.tests.arrays.test_timedeltas.TestReductions.test_npsum(self)
pandas.tests.arrays.test_timedeltas.TestReductions.test_reductions_empty(self,name,skipna)
pandas.tests.arrays.test_timedeltas.TestReductions.test_std(self)
pandas.tests.arrays.test_timedeltas.TestReductions.test_sum(self)
pandas.tests.arrays.test_timedeltas.TestTimedeltaArray
pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_abs(self)
pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_astype_int(self,dtype)
pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_from_sequence_dtype(self)
pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_neg(self)
pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_neg_freq(self)
pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_np_sum(self)
pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_searchsorted_invalid_types(self,other,index)
pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_setitem_clears_freq(self)
pandas.tests.arrays.test_timedeltas.TestTimedeltaArray.test_setitem_objects(self,obj)
pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor
pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor.test_copy(self)
pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor.test_freq_validation(self)
pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor.test_incorrect_dtype_raises(self)
pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor.test_non_array_raises(self)
pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor.test_only_1dim_accepted(self)
pandas.tests.arrays.test_timedeltas.TestTimedeltaArrayConstructor.test_other_type_raises(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/categorical/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/categorical/test_operators.py----------------------------------------
A:pandas.tests.arrays.categorical.test_operators.factor->Categorical(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c'], ordered=True)
A:pandas.tests.arrays.categorical.test_operators.n->len(self.factor)
A:pandas.tests.arrays.categorical.test_operators.expected->getattr(np.array(cat), compare_operators_no_eq_ne)(2)
A:pandas.tests.arrays.categorical.test_operators.cat_rev->Series(Categorical(data, categories=reverse, ordered=True))
A:pandas.tests.arrays.categorical.test_operators.cat_rev_base->Series(Categorical(base, categories=reverse, ordered=True))
A:pandas.tests.arrays.categorical.test_operators.cat->Categorical([1, 2, 3])
A:pandas.tests.arrays.categorical.test_operators.cat_base->Series(Categorical(base, categories=cat.cat.categories, ordered=True))
A:pandas.tests.arrays.categorical.test_operators.exp_rev->Series([True, False, False])
A:pandas.tests.arrays.categorical.test_operators.exp->Series([False, False, True])
A:pandas.tests.arrays.categorical.test_operators.cat_rev_base2->Categorical(['b', 'b', 'b'], categories=['c', 'b', 'a', 'd'])
A:pandas.tests.arrays.categorical.test_operators.cat_unorderd->Categorical([1, 2, 3]).set_ordered(False)
A:pandas.tests.arrays.categorical.test_operators.s->Series(Categorical([1, 2, 3, 4]))
A:pandas.tests.arrays.categorical.test_operators.a->pandas.Categorical(['a'], categories=['a', 'b'])
A:pandas.tests.arrays.categorical.test_operators.df->df.sort_values(by=['value'], ascending=True).sort_values(by=['value'], ascending=True)
A:pandas.tests.arrays.categorical.test_operators.op->getattr(operator, all_compare_operators)
A:pandas.tests.arrays.categorical.test_operators.dt_cat->Categorical(date_range('2014-01-01', periods=3), ordered=True)
A:pandas.tests.arrays.categorical.test_operators.actual->getattr(cat, compare_operators_no_eq_ne)(other)
A:pandas.tests.arrays.categorical.test_operators.other->Categorical([2, 2, 2, 2], categories=[1, 2, 3], ordered=True)
A:pandas.tests.arrays.categorical.test_operators.c1->Categorical([], categories=['a', 'b'])
A:pandas.tests.arrays.categorical.test_operators.c2->Categorical([], categories=['a'])
A:pandas.tests.arrays.categorical.test_operators.b->pandas.Categorical(['b'], categories=['b', 'a'])
A:pandas.tests.arrays.categorical.test_operators.cat_labels->Categorical(labels, labels)
A:pandas.tests.arrays.categorical.test_operators.df['value_group']->pandas.cut(df.value, range(0, 10500, 500), right=False, labels=cat_labels)
A:pandas.tests.arrays.categorical.test_operators.msg->'Series cannot perform the operation {}|unsupported operand'.format(str_rep)
A:pandas.tests.arrays.categorical.test_operators.c->pandas.Categorical(list('aabbca') + [np.nan], categories=list('cab'))
pandas.tests.arrays.categorical.test_operators.TestCategoricalOps
pandas.tests.arrays.categorical.test_operators.TestCategoricalOps.test_compare_different_lengths(self)
pandas.tests.arrays.categorical.test_operators.TestCategoricalOps.test_compare_frame(self)
pandas.tests.arrays.categorical.test_operators.TestCategoricalOps.test_compare_frame_raises(self,all_compare_operators)
pandas.tests.arrays.categorical.test_operators.TestCategoricalOps.test_compare_unordered_different_order(self)
pandas.tests.arrays.categorical.test_operators.TestCategoricalOps.test_comparison_of_ordered_categorical_with_nan_to_listlike(self,compare_operators_no_eq_ne)
pandas.tests.arrays.categorical.test_operators.TestCategoricalOps.test_comparison_of_ordered_categorical_with_nan_to_scalar(self,compare_operators_no_eq_ne)
pandas.tests.arrays.categorical.test_operators.TestCategoricalOps.test_comparison_with_unknown_scalars(self)
pandas.tests.arrays.categorical.test_operators.TestCategoricalOps.test_comparisons(self,data,reverse,base)
pandas.tests.arrays.categorical.test_operators.TestCategoricalOps.test_contains(self)
pandas.tests.arrays.categorical.test_operators.TestCategoricalOps.test_contains_interval(self,item,expected)
pandas.tests.arrays.categorical.test_operators.TestCategoricalOps.test_contains_list(self)
pandas.tests.arrays.categorical.test_operators.TestCategoricalOps.test_datetime_categorical_comparison(self)
pandas.tests.arrays.categorical.test_operators.TestCategoricalOps.test_dt_categorical_comparison(self)
pandas.tests.arrays.categorical.test_operators.TestCategoricalOps.test_numeric_like_ops(self)
pandas.tests.arrays.categorical.test_operators.TestCategoricalOps.test_reflected_comparison_with_scalars(self)
pandas.tests.arrays.categorical.test_operators.TestCategoricalOps.test_unordered_different_categories_raises(self)
pandas.tests.arrays.categorical.test_operators.TestCategoricalOps.test_unordered_different_order_equal(self,ctor)
pandas.tests.arrays.categorical.test_operators.TestCategoricalOpsWithFactor(TestCategorical)
pandas.tests.arrays.categorical.test_operators.TestCategoricalOpsWithFactor.test_categories_none_comparisons(self)
pandas.tests.arrays.categorical.test_operators.TestCategoricalOpsWithFactor.test_comparisons(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/categorical/test_sorting.py----------------------------------------
A:pandas.tests.arrays.categorical.test_sorting.c->Categorical([5, 3, 1, 4, 2], ordered=True)
A:pandas.tests.arrays.categorical.test_sorting.expected->numpy.array([2, 4, 1, 3, 0])
A:pandas.tests.arrays.categorical.test_sorting.cat->Categorical(['a', 'c', 'b', 'd', np.nan], ordered=True)
A:pandas.tests.arrays.categorical.test_sorting.res->Categorical(['a', 'c', 'b', 'd', np.nan], ordered=True).sort_values(ascending=False, na_position='first')
A:pandas.tests.arrays.categorical.test_sorting.exp->numpy.array([5.0, 2.0, 2.0, np.nan, np.nan])
A:pandas.tests.arrays.categorical.test_sorting.cat1->Categorical(['a', 'c', 'b', 'd', np.nan], ordered=True).copy()
A:pandas.tests.arrays.categorical.test_sorting.exp_val->numpy.array([np.nan, 'd', 'c', 'b', 'a'], dtype=object)
A:pandas.tests.arrays.categorical.test_sorting.exp_categories->Index(['a', 'b', 'c', 'd'])
pandas.tests.arrays.categorical.test_sorting.TestCategoricalSort
pandas.tests.arrays.categorical.test_sorting.TestCategoricalSort.test_argsort(self)
pandas.tests.arrays.categorical.test_sorting.TestCategoricalSort.test_numpy_argsort(self)
pandas.tests.arrays.categorical.test_sorting.TestCategoricalSort.test_sort_values(self)
pandas.tests.arrays.categorical.test_sorting.TestCategoricalSort.test_sort_values_na_position(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/categorical/test_analytics.py----------------------------------------
A:pandas.tests.arrays.categorical.test_analytics.cat->Categorical(['A', 'B', 'B', 'C', 'A'])
A:pandas.tests.arrays.categorical.test_analytics.agg_func->getattr(cat, aggregation)
A:pandas.tests.arrays.categorical.test_analytics._min->Categorical(['A', 'B', 'B', 'C', 'A']).min(skipna=skipna)
A:pandas.tests.arrays.categorical.test_analytics._max->Categorical(['A', 'B', 'B', 'C', 'A']).max(skipna=skipna)
A:pandas.tests.arrays.categorical.test_analytics.result->Categorical(['a', 'b', np.nan]).map(lambda x: 1)
A:pandas.tests.arrays.categorical.test_analytics.method->getattr(np, method)
A:pandas.tests.arrays.categorical.test_analytics.s->Categorical(values, categories=categories, ordered=True)
A:pandas.tests.arrays.categorical.test_analytics.res->Categorical(['a', 'b', np.nan]).isna()
A:pandas.tests.arrays.categorical.test_analytics.exp->numpy.array([False, False, True])
A:pandas.tests.arrays.categorical.test_analytics.ser->Series(cat)
A:pandas.tests.arrays.categorical.test_analytics.res_cat->Categorical(['A', 'B', 'B', 'C', 'A']).searchsorted(['apple', 'bread'], side='right')
A:pandas.tests.arrays.categorical.test_analytics.res_ser->Series(cat).searchsorted(['apple', 'bread'], side='right')
A:pandas.tests.arrays.categorical.test_analytics.exp_cat->Categorical(['b', np.nan, 'a'], categories=['a', 'b'], ordered=True)
A:pandas.tests.arrays.categorical.test_analytics.c->Categorical(['a', 'b', np.nan])
A:pandas.tests.arrays.categorical.test_analytics.sp1->Categorical(['A', 'B', 'B', 'C', 'A']).shift(1)
A:pandas.tests.arrays.categorical.test_analytics.xp1->Categorical([np.nan, 'a', 'b', 'c', 'd'])
A:pandas.tests.arrays.categorical.test_analytics.sn2->Categorical(['A', 'B', 'B', 'C', 'A']).shift(-2)
A:pandas.tests.arrays.categorical.test_analytics.xp2->Categorical(['c', 'd', 'a', np.nan, np.nan], categories=['a', 'b', 'c', 'd'])
pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics
pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_deprecate_numeric_only_min_max(self,method)
pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_isna(self)
pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_map(self)
pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_memory_usage(self)
pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_min_max_not_ordered_raises(self,aggregation)
pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_min_max_only_nan(self,function,skipna)
pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_min_max_ordered(self)
pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_min_max_ordered_empty(self,categories,expected,aggregation)
pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_min_max_with_nan(self,skipna)
pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_mode(self,values,categories,exp_mode)
pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_nbytes(self)
pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_numpy_min_max_axis_equals_none(self,method,expected)
pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_numpy_min_max_raises(self,method)
pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_numpy_min_max_unsupported_kwargs_raises(self,method,kwarg)
pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_searchsorted(self,ordered_fixture)
pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_shift(self)
pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_unique(self)
pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_unique_index_series(self)
pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_unique_ordered(self)
pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_validate_inplace_raises(self,value)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/categorical/test_algos.py----------------------------------------
A:pandas.tests.arrays.categorical.test_algos.cat->pandas.Categorical(['a', 'b', 'c'])
A:pandas.tests.arrays.categorical.test_algos.(codes, uniques)->pandas.factorize(cat, sort=True)
A:pandas.tests.arrays.categorical.test_algos.expected_codes->numpy.array([0, 0, -1, 1], dtype=np.intp)
A:pandas.tests.arrays.categorical.test_algos.expected_uniques->pandas.Categorical(['b', 'a'], categories=['c', 'b', 'a'], ordered=True)
A:pandas.tests.arrays.categorical.test_algos.result->pandas.Categorical(['a', 'b', 'c']).take([0, 1, -1], fill_value='a', allow_fill=True)
A:pandas.tests.arrays.categorical.test_algos.expected->pandas.Categorical(['a', 'b', 'a'], categories=['a', 'b', 'c'])
A:pandas.tests.arrays.categorical.test_algos.s->pandas.Series([1, 2, 3], dtype='category')
A:pandas.tests.arrays.categorical.test_algos.df->pandas.Series([1, 2, 3], dtype='category').to_frame(name='A')
A:pandas.tests.arrays.categorical.test_algos.ci->pandas.Index(cat)
pandas.tests.arrays.categorical.test_algos.TestTake
pandas.tests.arrays.categorical.test_algos.TestTake.test_positional_take(self,ordered_fixture)
pandas.tests.arrays.categorical.test_algos.TestTake.test_positional_take_unobserved(self,ordered_fixture)
pandas.tests.arrays.categorical.test_algos.TestTake.test_take_allow_fill(self)
pandas.tests.arrays.categorical.test_algos.TestTake.test_take_bounds(self,allow_fill)
pandas.tests.arrays.categorical.test_algos.TestTake.test_take_default_allow_fill(self)
pandas.tests.arrays.categorical.test_algos.TestTake.test_take_empty(self,allow_fill)
pandas.tests.arrays.categorical.test_algos.TestTake.test_take_fill_value(self)
pandas.tests.arrays.categorical.test_algos.TestTake.test_take_fill_value_new_raises(self)
pandas.tests.arrays.categorical.test_algos.TestTake.test_take_fill_with_negative_one(self)
pandas.tests.arrays.categorical.test_algos.TestTake.test_take_nd_deprecated(self)
pandas.tests.arrays.categorical.test_algos.TestTake.test_take_positive_no_warning(self)
pandas.tests.arrays.categorical.test_algos.test_diff()
pandas.tests.arrays.categorical.test_algos.test_factorize(categories,ordered)
pandas.tests.arrays.categorical.test_algos.test_factorized_sort()
pandas.tests.arrays.categorical.test_algos.test_factorized_sort_ordered()
pandas.tests.arrays.categorical.test_algos.test_isin_cats()
pandas.tests.arrays.categorical.test_algos.test_isin_empty(empty)
pandas.tests.arrays.categorical.test_algos.test_replace(to_replace,value,result,expected_error_msg)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/categorical/test_repr.py----------------------------------------
A:pandas.tests.arrays.categorical.test_repr.expected->'\n'.join(expected)
A:pandas.tests.arrays.categorical.test_repr.actual->repr(factor)
A:pandas.tests.arrays.categorical.test_repr.factor->Categorical([], [])
A:pandas.tests.arrays.categorical.test_repr.a->Series(Categorical([1, 2, 3, 4]))
A:pandas.tests.arrays.categorical.test_repr.c->Categorical(idx.append(idx), categories=idx, ordered=True)
A:pandas.tests.arrays.categorical.test_repr.idx->timedelta_range('1 hours', periods=10)
A:pandas.tests.arrays.categorical.test_repr.s->Series([1, 2, np.nan], dtype='object').astype('category')
A:pandas.tests.arrays.categorical.test_repr.i->CategoricalIndex(Categorical(idx, ordered=True))
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_big_print(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_categorical_index_repr(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_categorical_index_repr_datetime(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_categorical_index_repr_datetime_ordered(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_categorical_index_repr_dt(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_categorical_index_repr_dt_ordered(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_categorical_index_repr_ordered(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_categorical_index_repr_period(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_categorical_index_repr_period_ordered(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_categorical_index_repr_timedelta(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_categorical_index_repr_timedelta_ordered(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_categorical_repr(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_categorical_repr_datetime(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_categorical_repr_datetime_ordered(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_categorical_repr_dt(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_categorical_repr_dt_ordered(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_categorical_repr_int_with_nan(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_categorical_repr_ordered(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_categorical_repr_period(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_categorical_repr_period_ordered(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_categorical_repr_timedelta(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_categorical_repr_timedelta_ordered(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_empty_print(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_print_none_width(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalRepr.test_unicode_print(self)
pandas.tests.arrays.categorical.test_repr.TestCategoricalReprWithFactor(TestCategorical)
pandas.tests.arrays.categorical.test_repr.TestCategoricalReprWithFactor.test_print(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/categorical/test_missing.py----------------------------------------
A:pandas.tests.arrays.categorical.test_missing.categories->list(range(10))
A:pandas.tests.arrays.categorical.test_missing.labels->numpy.random.randint(0, 10, 20)
A:pandas.tests.arrays.categorical.test_missing.cat->Categorical(values)
A:pandas.tests.arrays.categorical.test_missing.c->Categorical(['a', 'b', np.nan])
A:pandas.tests.arrays.categorical.test_missing.result->pandas.isna(DataFrame(cat))
A:pandas.tests.arrays.categorical.test_missing.exp->Categorical([1, np.nan, 3], categories=[1, 2, 3])
A:pandas.tests.arrays.categorical.test_missing.Point->collections.namedtuple('Point', 'x y')
A:pandas.tests.arrays.categorical.test_missing.expected->DataFrame(expected)
pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing
pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_fillna_iterable_category(self,named)
pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_fillna_raises(self,fillna_kwargs,msg)
pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_na_flags_int_categories(self)
pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_nan_handling(self)
pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_set_dtype_nans(self)
pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_set_item_nan(self)
pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_use_inf_as_na(self,values,expected)
pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_use_inf_as_na_outside_context(self,values,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/categorical/test_subclass.py----------------------------------------
A:pandas.tests.arrays.categorical.test_subclass.sc->pandas._testing.SubclassedCategorical(['a', 'b', 'c'])
A:pandas.tests.arrays.categorical.test_subclass.exp->Categorical(['A', 'B', 'C'])
A:pandas.tests.arrays.categorical.test_subclass.res->pandas._testing.SubclassedCategorical(['a', 'b', 'c']).map(lambda x: x.upper())
pandas.tests.arrays.categorical.test_subclass.TestCategoricalSubclassing
pandas.tests.arrays.categorical.test_subclass.TestCategoricalSubclassing.test_constructor(self)
pandas.tests.arrays.categorical.test_subclass.TestCategoricalSubclassing.test_from_codes(self)
pandas.tests.arrays.categorical.test_subclass.TestCategoricalSubclassing.test_map(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/categorical/test_replace.py----------------------------------------
A:pandas.tests.arrays.categorical.test_replace.s->pandas.Series([1, 2, 3], dtype='category')
A:pandas.tests.arrays.categorical.test_replace.result->pandas.Series([1, 2, 3], dtype='category').replace(to_replace, value)
A:pandas.tests.arrays.categorical.test_replace.expected->pandas.Series(expected, dtype='category')
pandas.tests.arrays.categorical.test_replace.test_replace(to_replace,value,expected,check_types,check_categorical)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/categorical/test_api.py----------------------------------------
A:pandas.tests.arrays.categorical.test_api.cat1->Categorical(list('acb'), ordered=False)
A:pandas.tests.arrays.categorical.test_api.cat2->self.factor.copy().as_ordered()
A:pandas.tests.arrays.categorical.test_api.cat3->Categorical(list('acb'), ordered=True)
A:pandas.tests.arrays.categorical.test_api.cat4->Categorical(list('acb'), categories=list('bca'), ordered=True)
A:pandas.tests.arrays.categorical.test_api.cat->self.factor.copy()
A:pandas.tests.arrays.categorical.test_api.res->Categorical(['a', 'b', 'c', 'a', np.nan]).remove_unused_categories()
A:pandas.tests.arrays.categorical.test_api.exp_cat->Index(['a', 'b', 'c'])
A:pandas.tests.arrays.categorical.test_api.result->_recode_for_categories(codes, old, new)
A:pandas.tests.arrays.categorical.test_api.expected->numpy.arange(N - 1, -1, -1, dtype=np.int16)
A:pandas.tests.arrays.categorical.test_api.c->Categorical(['a', 'b', 'c', 'a', np.nan])
A:pandas.tests.arrays.categorical.test_api.old->Index(codes)
A:pandas.tests.arrays.categorical.test_api.new->Index(expected)
A:pandas.tests.arrays.categorical.test_api.msg->re.escape("new categories must not include old categories: {'d'}")
A:pandas.tests.arrays.categorical.test_api.exp_categories->Index(['a', 'b', 'c', 'd'])
A:pandas.tests.arrays.categorical.test_api.exp_values->numpy.array(['a', 'b', 'c', 'a'], dtype=np.object_)
A:pandas.tests.arrays.categorical.test_api.exp_categories_back->Index(['a', 'b', 'c'])
A:pandas.tests.arrays.categorical.test_api.exp->numpy.array([0, 1, 2, 0, 2], dtype='int8')
A:pandas.tests.arrays.categorical.test_api.c2->Categorical(['a', 'b', 'c', 'a', np.nan]).set_ordered(False).set_categories([4, 3, 2, 1])
A:pandas.tests.arrays.categorical.test_api.message->re.escape("removals must all be in old categories: {'c'}")
A:pandas.tests.arrays.categorical.test_api.exp_categories_all->Index(['a', 'b', 'c', 'd', 'e'])
A:pandas.tests.arrays.categorical.test_api.exp_categories_dropped->Index(['a', 'b', 'c', 'd'])
A:pandas.tests.arrays.categorical.test_api.exp_codes->numpy.array([2, -1, 1, 0, 1, 2, -1], dtype=np.int8)
A:pandas.tests.arrays.categorical.test_api.out->self.factor.copy().remove_unused_categories()
A:pandas.tests.arrays.categorical.test_api.alpha->list('abcdefghijklmnopqrstuvwxyz')
A:pandas.tests.arrays.categorical.test_api.val->numpy.random.choice(alpha[::2], 10000).astype('object')
A:pandas.tests.arrays.categorical.test_api.desc->self.factor.copy().describe()
A:pandas.tests.arrays.categorical.test_api.exp_index->CategoricalIndex([1, 2, 3], ordered=cat.ordered, name='categories')
A:pandas.tests.arrays.categorical.test_api.c.codes->numpy.array([0, 1, 2, 0, 1], dtype='int8')
A:pandas.tests.arrays.categorical.test_api.codes->numpy.arange(N)
pandas.tests.arrays.categorical.test_api.TestCategoricalAPI
pandas.tests.arrays.categorical.test_api.TestCategoricalAPI.test_add_categories(self)
pandas.tests.arrays.categorical.test_api.TestCategoricalAPI.test_add_categories_existing_raises(self)
pandas.tests.arrays.categorical.test_api.TestCategoricalAPI.test_ordered_api(self)
pandas.tests.arrays.categorical.test_api.TestCategoricalAPI.test_remove_categories(self)
pandas.tests.arrays.categorical.test_api.TestCategoricalAPI.test_remove_categories_raises(self,removals)
pandas.tests.arrays.categorical.test_api.TestCategoricalAPI.test_remove_unused_categories(self)
pandas.tests.arrays.categorical.test_api.TestCategoricalAPI.test_rename_categories(self)
pandas.tests.arrays.categorical.test_api.TestCategoricalAPI.test_rename_categories_dict(self)
pandas.tests.arrays.categorical.test_api.TestCategoricalAPI.test_rename_categories_series(self)
pandas.tests.arrays.categorical.test_api.TestCategoricalAPI.test_rename_categories_wrong_length_raises(self,new_categories)
pandas.tests.arrays.categorical.test_api.TestCategoricalAPI.test_reorder_categories(self)
pandas.tests.arrays.categorical.test_api.TestCategoricalAPI.test_reorder_categories_raises(self,new_categories)
pandas.tests.arrays.categorical.test_api.TestCategoricalAPI.test_set_categories(self)
pandas.tests.arrays.categorical.test_api.TestCategoricalAPI.test_set_categories_many(self,values,categories,new_categories,ordered)
pandas.tests.arrays.categorical.test_api.TestCategoricalAPI.test_set_categories_private(self)
pandas.tests.arrays.categorical.test_api.TestCategoricalAPI.test_set_categories_rename_less(self)
pandas.tests.arrays.categorical.test_api.TestCategoricalAPI.test_set_ordered(self)
pandas.tests.arrays.categorical.test_api.TestCategoricalAPIWithFactor(TestCategorical)
pandas.tests.arrays.categorical.test_api.TestCategoricalAPIWithFactor.test_describe(self)
pandas.tests.arrays.categorical.test_api.TestCategoricalAPIWithFactor.test_set_categories_inplace(self)
pandas.tests.arrays.categorical.test_api.TestPrivateCategoricalAPI
pandas.tests.arrays.categorical.test_api.TestPrivateCategoricalAPI.test_codes_immutable(self)
pandas.tests.arrays.categorical.test_api.TestPrivateCategoricalAPI.test_recode_to_categories(self,codes,old,new,expected)
pandas.tests.arrays.categorical.test_api.TestPrivateCategoricalAPI.test_recode_to_categories_large(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/categorical/common.py----------------------------------------
A:pandas.tests.arrays.categorical.common.self.factor->Categorical(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c'], ordered=True)
pandas.tests.arrays.categorical.common.TestCategorical
pandas.tests.arrays.categorical.common.TestCategorical.setup_method(self,method)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/categorical/test_dtypes.py----------------------------------------
A:pandas.tests.arrays.categorical.test_dtypes.c1->Categorical(list('aabca'), categories=list('abc'), ordered=False)
A:pandas.tests.arrays.categorical.test_dtypes.c2->Categorical(list('aabca'), categories=list('cab'), ordered=False)
A:pandas.tests.arrays.categorical.test_dtypes.c3->Categorical(list('aabca'), categories=list('cab'), ordered=True)
A:pandas.tests.arrays.categorical.test_dtypes.s1->Series(c1)
A:pandas.tests.arrays.categorical.test_dtypes.s2->Series(c2)
A:pandas.tests.arrays.categorical.test_dtypes.s3->Series(c3)
A:pandas.tests.arrays.categorical.test_dtypes.c->Categorical(['a', 'b', 'c'], ['d', 'e'])
A:pandas.tests.arrays.categorical.test_dtypes.result->Categorical([Timestamp('2017-01-01'), Timestamp('2017-01-02')]).astype('category')
A:pandas.tests.arrays.categorical.test_dtypes.expected->Categorical(data, dtype=dtype)
A:pandas.tests.arrays.categorical.test_dtypes.cat->Categorical([Timestamp('2017-01-01'), Timestamp('2017-01-02')])
A:pandas.tests.arrays.categorical.test_dtypes.data->list('abcaacbab')
A:pandas.tests.arrays.categorical.test_dtypes.dtype->CategoricalDtype(list('adc'), dtype_ordered)
pandas.tests.arrays.categorical.test_dtypes.TestCategoricalDtypes
pandas.tests.arrays.categorical.test_dtypes.TestCategoricalDtypes.test_astype(self,ordered)
pandas.tests.arrays.categorical.test_dtypes.TestCategoricalDtypes.test_astype_category(self,dtype_ordered,cat_ordered)
pandas.tests.arrays.categorical.test_dtypes.TestCategoricalDtypes.test_codes_dtypes(self)
pandas.tests.arrays.categorical.test_dtypes.TestCategoricalDtypes.test_is_equal_dtype(self)
pandas.tests.arrays.categorical.test_dtypes.TestCategoricalDtypes.test_iter_python_types(self)
pandas.tests.arrays.categorical.test_dtypes.TestCategoricalDtypes.test_iter_python_types_datetime(self)
pandas.tests.arrays.categorical.test_dtypes.TestCategoricalDtypes.test_iter_python_types_dt(self)
pandas.tests.arrays.categorical.test_dtypes.TestCategoricalDtypes.test_set_dtype_many(self,values,categories,new_categories,ordered)
pandas.tests.arrays.categorical.test_dtypes.TestCategoricalDtypes.test_set_dtype_new_categories(self)
pandas.tests.arrays.categorical.test_dtypes.TestCategoricalDtypes.test_set_dtype_no_overlap(self)
pandas.tests.arrays.categorical.test_dtypes.TestCategoricalDtypes.test_set_dtype_same(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/categorical/test_indexing.py----------------------------------------
A:pandas.tests.arrays.categorical.test_indexing.c->Categorical(np.random.randint(0, 5, size=150000).astype(np.int8))
A:pandas.tests.arrays.categorical.test_indexing.indexer->numpy.zeros(len(c), dtype='bool')
A:pandas.tests.arrays.categorical.test_indexing.expected->pandas.Series(Categorical(['a', 'c', 'c'], dtype=ser.dtype))
A:pandas.tests.arrays.categorical.test_indexing.target->pandas.Categorical(['a', 'b'], categories=['a', 'b'], ordered=True)
A:pandas.tests.arrays.categorical.test_indexing.mask->numpy.array([True, False])
A:pandas.tests.arrays.categorical.test_indexing.idx1->PeriodIndex(['2014-01', '2014-01', '2014-02', '2014-02', '2014-03', '2014-03'], freq='M')
A:pandas.tests.arrays.categorical.test_indexing.cat1->Categorical(idx1)
A:pandas.tests.arrays.categorical.test_indexing.exp_arr->numpy.array([6, 5, 4, 3, 2, 1, 0], dtype=np.int8)
A:pandas.tests.arrays.categorical.test_indexing.exp_idx->PeriodIndex(['2013-05', '2013-07', '2013-08', '2013-09', '2013-10', '2013-11', '2013-12'], freq='M')
A:pandas.tests.arrays.categorical.test_indexing.idx2->PeriodIndex(['2014-03', '2014-03', '2014-02', '2014-01', '2014-03', '2014-01'], freq='M')
A:pandas.tests.arrays.categorical.test_indexing.cat2->Categorical(idx2, ordered=True)
A:pandas.tests.arrays.categorical.test_indexing.exp_idx2->PeriodIndex(['2014-01', '2014-02', '2014-03'], freq='M')
A:pandas.tests.arrays.categorical.test_indexing.idx3->PeriodIndex(['2013-12', '2013-11', '2013-10', '2013-09', '2013-08', '2013-07', '2013-05'], freq='M')
A:pandas.tests.arrays.categorical.test_indexing.cat3->Categorical(idx3, ordered=True)
A:pandas.tests.arrays.categorical.test_indexing.s->Series(range(3))
A:pandas.tests.arrays.categorical.test_indexing.exp->numpy.array([1, 2, 3, 1], dtype=np.int64)
A:pandas.tests.arrays.categorical.test_indexing.cat->Categorical(['a', 'b', 'c', 'a'])
A:pandas.tests.arrays.categorical.test_indexing.key->key_class(key_values, categories=range(1, 5))
A:pandas.tests.arrays.categorical.test_indexing.idx->CategoricalIndex(idx)
A:pandas.tests.arrays.categorical.test_indexing.(expected, exp_miss)->CategoricalIndex(idx).get_indexer_non_unique(key_values)
A:pandas.tests.arrays.categorical.test_indexing.(result, res_miss)->CategoricalIndex(idx).get_indexer_non_unique(key)
A:pandas.tests.arrays.categorical.test_indexing.ser->Series(arr)
A:pandas.tests.arrays.categorical.test_indexing.result->Series(arr).where([True, False, True], other)
A:pandas.tests.arrays.categorical.test_indexing.other->Categorical(['b', 'c', 'a'], categories=['a', 'c', 'b', 'd'], ordered=True)
A:pandas.tests.arrays.categorical.test_indexing.arr->Categorical(['a', 'b', 'c'])
pandas.tests.arrays.categorical.test_indexing.TestCategoricalIndexing
pandas.tests.arrays.categorical.test_indexing.TestCategoricalIndexing.test_categories_assigments(self)
pandas.tests.arrays.categorical.test_indexing.TestCategoricalIndexing.test_categories_assigments_wrong_length_raises(self,new_categories)
pandas.tests.arrays.categorical.test_indexing.TestCategoricalIndexing.test_get_indexer_non_unique(self,idx_values,key_values,key_class)
pandas.tests.arrays.categorical.test_indexing.TestCategoricalIndexing.test_getitem_listlike(self)
pandas.tests.arrays.categorical.test_indexing.TestCategoricalIndexing.test_periodindex(self)
pandas.tests.arrays.categorical.test_indexing.TestCategoricalIndexing.test_where_new_category_raises(self)
pandas.tests.arrays.categorical.test_indexing.TestCategoricalIndexing.test_where_ordered_differs_rasies(self)
pandas.tests.arrays.categorical.test_indexing.TestCategoricalIndexing.test_where_other_categorical(self)
pandas.tests.arrays.categorical.test_indexing.TestCategoricalIndexing.test_where_unobserved_categories(self)
pandas.tests.arrays.categorical.test_indexing.TestCategoricalIndexing.test_where_unobserved_nan(self)
pandas.tests.arrays.categorical.test_indexing.TestCategoricalIndexingWithFactor(TestCategorical)
pandas.tests.arrays.categorical.test_indexing.TestCategoricalIndexingWithFactor.test_getitem(self)
pandas.tests.arrays.categorical.test_indexing.TestCategoricalIndexingWithFactor.test_setitem(self)
pandas.tests.arrays.categorical.test_indexing.TestCategoricalIndexingWithFactor.test_setitem_different_unordered_raises(self,other)
pandas.tests.arrays.categorical.test_indexing.TestCategoricalIndexingWithFactor.test_setitem_same_but_unordered(self,other)
pandas.tests.arrays.categorical.test_indexing.TestCategoricalIndexingWithFactor.test_setitem_same_ordered_rasies(self,other)
pandas.tests.arrays.categorical.test_indexing.non_coercible_categorical(monkeypatch)
pandas.tests.arrays.categorical.test_indexing.test_mask_with_boolean(index)
pandas.tests.arrays.categorical.test_indexing.test_mask_with_boolean_na_treated_as_false(index)
pandas.tests.arrays.categorical.test_indexing.test_series_at(non_coercible_categorical)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/categorical/conftest.py----------------------------------------
pandas.tests.arrays.categorical.conftest.allow_fill(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/categorical/test_constructors.py----------------------------------------
A:pandas.tests.arrays.categorical.test_constructors.ordered->numpy.array([0, 1, 2])
A:pandas.tests.arrays.categorical.test_constructors.c->pandas.Categorical(np.array(['c', ('a', 'b'), ('b', 'a'), 'c'], dtype=object))
A:pandas.tests.arrays.categorical.test_constructors.expected->Categorical([1, 1, 2, np.nan])
A:pandas.tests.arrays.categorical.test_constructors.cat->Categorical([0, 1, 2], ordered=ordered)
A:pandas.tests.arrays.categorical.test_constructors.categories->sorted(cat.categories.tolist())
A:pandas.tests.arrays.categorical.test_constructors.values->klass(['a', nulls_fixture, 'b'])
A:pandas.tests.arrays.categorical.test_constructors.result->pandas.Categorical._from_inferred_categories(cats, codes, dtype)
A:pandas.tests.arrays.categorical.test_constructors.arr->numpy.array([1, 2, 3, datetime.now()], dtype='O')
A:pandas.tests.arrays.categorical.test_constructors.factor->Categorical(arr, ordered=False)
A:pandas.tests.arrays.categorical.test_constructors.ii->IntervalIndex([Interval(1, 2), Interval(2, 3), Interval(3, 6)])
A:pandas.tests.arrays.categorical.test_constructors.exp->Categorical(['a', 'b', 'c'], ordered=False)
A:pandas.tests.arrays.categorical.test_constructors.exp_arr->numpy.array(['a', 'b', 'c', 'a', 'b', 'c'], dtype=np.object_)
A:pandas.tests.arrays.categorical.test_constructors.c1->Categorical(values)
A:pandas.tests.arrays.categorical.test_constructors.c2->Categorical(c)
A:pandas.tests.arrays.categorical.test_constructors.c_old->Categorical([0, 1, 2, 0, 1, 2], categories=[3, 4, 5])
A:pandas.tests.arrays.categorical.test_constructors.c_old2->Categorical([0, 1, 2, 0, 1, 2], [1, 2, 3])
A:pandas.tests.arrays.categorical.test_constructors.c0->Categorical(['a', 'b', 'c', 'a'])
A:pandas.tests.arrays.categorical.test_constructors.c3->Categorical(Series(c0), categories=c1.categories)
A:pandas.tests.arrays.categorical.test_constructors.ci->CategoricalIndex(list('aabbca'), categories=list('cab'))
A:pandas.tests.arrays.categorical.test_constructors.s->Series(dtl)
A:pandas.tests.arrays.categorical.test_constructors.s2->Series(dtl).copy()
A:pandas.tests.arrays.categorical.test_constructors.idx->period_range('2015-01-01', freq='D', periods=3)
A:pandas.tests.arrays.categorical.test_constructors.dtype->CategoricalDtype([1, 2])
A:pandas.tests.arrays.categorical.test_constructors.res->pandas.Categorical.from_codes([0, 1, 2], dtype=dtype)
A:pandas.tests.arrays.categorical.test_constructors.codes->numpy.array([0, 0, 1, 2], dtype='i8')
A:pandas.tests.arrays.categorical.test_constructors.expected_index->pandas.Index([('a', 'b'), ('b', 'a'), 'c'])
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_construction_with_null(self,klass,nulls_fixture)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_construction_with_ordered(self,ordered)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_dtype_and_others_raises(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_empty(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_empty_boolean(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_from_categorical_string(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_from_categorical_with_dtype(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_from_categorical_with_unknown_dtype(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_from_index_series_datetimetz(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_from_index_series_dttz(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_from_index_series_period(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_from_index_series_timedelta(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_imaginary(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_interval(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_invariant(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_not_sequence(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_np_strs(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_str_category(self,categories,ordered)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_str_unknown(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_string_and_tuples(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_tuples(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_tuples_datetimes(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_tuples_dts(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_unsortable(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_with_categorical_categories(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_with_datetimelike(self,dtl)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_with_dtlike(self,dtl)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_with_dtype(self,ordered)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_with_existing_categories(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_with_generator(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_with_index(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_constructor_with_null(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_from_codes(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_from_codes_neither(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_from_codes_with_categorical_categories(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_from_codes_with_dtype_raises(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_from_codes_with_float(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_from_codes_with_nan_code(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_from_codes_with_nullable_int(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_from_codes_with_nullable_int_na_raises(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_from_inferred_categories(self,dtype)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_from_inferred_categories_coerces(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_from_inferred_categories_dtype(self)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_from_inferred_categories_sorts(self,dtype)
pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors.test_validate_ordered(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/categorical/test_warnings.py----------------------------------------
A:pandas.tests.arrays.categorical.test_warnings.warning->pandas._testing.assert_produces_warning(DeprecationWarning, check_stacklevel=False)
pandas.tests.arrays.categorical.test_warnings.TestCategoricalWarnings
pandas.tests.arrays.categorical.test_warnings.TestCategoricalWarnings.test_tab_complete_warning(self,ip)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/interval/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/interval/test_ops.py----------------------------------------
A:pandas.tests.arrays.interval.test_ops.interval->Interval(start, start + shift)
A:pandas.tests.arrays.interval.test_ops.interval_container->constructor.from_breaks(range(5))
A:pandas.tests.arrays.interval.test_ops.expected->numpy.array([True, False, False])
A:pandas.tests.arrays.interval.test_ops.result->constructor.from_breaks(range(5)).overlaps(interval)
A:pandas.tests.arrays.interval.test_ops.other_container->other_constructor.from_breaks(range(5))
pandas.tests.arrays.interval.test_ops.TestOverlaps
pandas.tests.arrays.interval.test_ops.TestOverlaps.test_overlaps_interval(self,constructor,start_shift,closed,other_closed)
pandas.tests.arrays.interval.test_ops.TestOverlaps.test_overlaps_interval_container(self,constructor,other_constructor)
pandas.tests.arrays.interval.test_ops.TestOverlaps.test_overlaps_invalid_type(self,constructor,other)
pandas.tests.arrays.interval.test_ops.TestOverlaps.test_overlaps_na(self,constructor,start_shift)
pandas.tests.arrays.interval.test_ops.constructor(request)
pandas.tests.arrays.interval.test_ops.start_shift(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/interval/test_interval.py----------------------------------------
A:pandas.tests.arrays.interval.test_interval.expected->pandas.concat([df, df], ignore_index=True)
A:pandas.tests.arrays.interval.test_interval.array->pandas.core.arrays.IntervalArray.from_breaks(range(10), closed=closed)
A:pandas.tests.arrays.interval.test_interval.result->pyarrow.concat_tables([table, table]).to_pandas()
A:pandas.tests.arrays.interval.test_interval.ser->pandas.Series(IntervalArray.from_breaks([1, 2, 3, 4], closed='left'))
A:pandas.tests.arrays.interval.test_interval.a->pandas.core.arrays.IntervalArray.from_breaks(pd.date_range('2000', periods=4))
A:pandas.tests.arrays.interval.test_interval.expected_left->Index([left._na_value] + list(left[1:]))
A:pandas.tests.arrays.interval.test_interval.expected_right->Index([right._na_value] + list(right[1:]))
A:pandas.tests.arrays.interval.test_interval.arr->pandas.core.arrays.IntervalArray.from_breaks(breaks)
A:pandas.tests.arrays.interval.test_interval.pyarrow_skip->pandas.util._test_decorators.skip_if_no('pyarrow', min_version='0.15.1.dev')
A:pandas.tests.arrays.interval.test_interval.p1->ArrowIntervalType(pa.int64(), 'left')
A:pandas.tests.arrays.interval.test_interval.p2->ArrowIntervalType(pa.int64(), 'left')
A:pandas.tests.arrays.interval.test_interval.p3->ArrowIntervalType(pa.int64(), 'right')
A:pandas.tests.arrays.interval.test_interval.left->pyarrow.array([0.0, None, 2.0], type='float64')
A:pandas.tests.arrays.interval.test_interval.right->pyarrow.array([1.0, None, 3.0], type='float64')
A:pandas.tests.arrays.interval.test_interval.df->pandas.DataFrame({'a': arr})
A:pandas.tests.arrays.interval.test_interval.table->pyarrow.table(df)
A:pandas.tests.arrays.interval.test_interval.table2->pyarrow.concat_tables([table, table])
pandas.tests.arrays.interval.test_interval.TestAttributes
pandas.tests.arrays.interval.test_interval.TestAttributes.test_is_empty(self,constructor,left,right,closed)
pandas.tests.arrays.interval.test_interval.TestMethods
pandas.tests.arrays.interval.test_interval.TestMethods.test_set_closed(self,closed,new_closed)
pandas.tests.arrays.interval.test_interval.TestMethods.test_shift(self)
pandas.tests.arrays.interval.test_interval.TestMethods.test_shift_datetime(self)
pandas.tests.arrays.interval.test_interval.TestMethods.test_shift_dt(self)
pandas.tests.arrays.interval.test_interval.TestMethods.test_where_raises(self,other)
pandas.tests.arrays.interval.test_interval.TestSetitem
pandas.tests.arrays.interval.test_interval.TestSetitem.test_set_na(self,left_right_dtypes)
pandas.tests.arrays.interval.test_interval.left_right_dtypes(request)
pandas.tests.arrays.interval.test_interval.test_arrow_array()
pandas.tests.arrays.interval.test_interval.test_arrow_array_missing()
pandas.tests.arrays.interval.test_interval.test_arrow_extension_type()
pandas.tests.arrays.interval.test_interval.test_arrow_table_roundtrip(breaks)
pandas.tests.arrays.interval.test_interval.test_repr()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/string_/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/string_/test_string.py----------------------------------------
A:pandas.tests.arrays.string_.test_string.df->pandas.DataFrame({'a': data})
A:pandas.tests.arrays.string_.test_string.a->numpy.array(['a', np.nan], dtype=object)
A:pandas.tests.arrays.string_.test_string.a[:]->numpy.array([1, 2])
A:pandas.tests.arrays.string_.test_string.arr->pandas.array(['a', 'b', 'a', pd.NA], dtype='string')
A:pandas.tests.arrays.string_.test_string.expected->pandas.Series([2, 1], index=['a', 'b'], dtype='Int64')
A:pandas.tests.arrays.string_.test_string.b->numpy.array([['a', 'b', 'c']], dtype=object)
A:pandas.tests.arrays.string_.test_string.result->pandas.array(['a', 'b', 'a', pd.NA], dtype='string').value_counts(dropna=True)
A:pandas.tests.arrays.string_.test_string.s->pandas.Series(a)
A:pandas.tests.arrays.string_.test_string.array->pandas.array(['a', 'b', np.nan, np.nan], dtype='string')
A:pandas.tests.arrays.string_.test_string.expected[-1]->getattr(other[-1], op_name)(a[-1])
A:pandas.tests.arrays.string_.test_string.original->numpy.array(['a', np.nan], dtype=object).copy()
A:pandas.tests.arrays.string_.test_string.data->pandas.array(['a', 'b', None], dtype='string')
A:pandas.tests.arrays.string_.test_string.table->pyarrow.table(df)
pandas.tests.arrays.string_.test_string.test_add()
pandas.tests.arrays.string_.test_string.test_add_2d()
pandas.tests.arrays.string_.test_string.test_add_frame()
pandas.tests.arrays.string_.test_string.test_add_sequence()
pandas.tests.arrays.string_.test_string.test_add_strings()
pandas.tests.arrays.string_.test_string.test_arrow_array()
pandas.tests.arrays.string_.test_string.test_arrow_roundtrip()
pandas.tests.arrays.string_.test_string.test_astype_roundtrip()
pandas.tests.arrays.string_.test_string.test_comparison_methods_array(all_compare_operators)
pandas.tests.arrays.string_.test_string.test_comparison_methods_scalar(all_compare_operators)
pandas.tests.arrays.string_.test_string.test_constructor_raises()
pandas.tests.arrays.string_.test_string.test_from_sequence_no_mutate(copy)
pandas.tests.arrays.string_.test_string.test_mul()
pandas.tests.arrays.string_.test_string.test_none_to_nan()
pandas.tests.arrays.string_.test_string.test_reduce(skipna)
pandas.tests.arrays.string_.test_string.test_reduce_missing(skipna)
pandas.tests.arrays.string_.test_string.test_repr()
pandas.tests.arrays.string_.test_string.test_setitem_validates()
pandas.tests.arrays.string_.test_string.test_setitem_with_scalar_string()
pandas.tests.arrays.string_.test_string.test_string_methods(input,method)
pandas.tests.arrays.string_.test_string.test_value_counts_na()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/sparse/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/sparse/test_dtype.py----------------------------------------
A:pandas.tests.arrays.sparse.test_dtype.sparse_dtype->SparseDtype(dtype)
A:pandas.tests.arrays.sparse.test_dtype.dtype->SparseDtype('int', 1)
A:pandas.tests.arrays.sparse.test_dtype.result->original.update_dtype(dtype)
A:pandas.tests.arrays.sparse.test_dtype.expected->SparseDtype('int', 2)
A:pandas.tests.arrays.sparse.test_dtype.a->SparseDtype(float, float('nan'))
A:pandas.tests.arrays.sparse.test_dtype.b->SparseDtype(float, np.nan)
A:pandas.tests.arrays.sparse.test_dtype.(subtype, _)->pandas.core.arrays.sparse.SparseDtype._parse_subtype(string)
pandas.tests.arrays.sparse.test_dtype.test_construct_from_string(string,expected)
pandas.tests.arrays.sparse.test_dtype.test_construct_from_string_fill_value_raises(string)
pandas.tests.arrays.sparse.test_dtype.test_construct_from_string_raises()
pandas.tests.arrays.sparse.test_dtype.test_equal(dtype,fill_value)
pandas.tests.arrays.sparse.test_dtype.test_from_sparse_dtype()
pandas.tests.arrays.sparse.test_dtype.test_from_sparse_dtype_fill_value()
pandas.tests.arrays.sparse.test_dtype.test_hash_equal(a,b,expected)
pandas.tests.arrays.sparse.test_dtype.test_inferred_dtype(dtype,fill_value)
pandas.tests.arrays.sparse.test_dtype.test_is_numeric(dtype,expected)
pandas.tests.arrays.sparse.test_dtype.test_nans_equal()
pandas.tests.arrays.sparse.test_dtype.test_not_equal(a,b)
pandas.tests.arrays.sparse.test_dtype.test_parse_subtype(string,expected)
pandas.tests.arrays.sparse.test_dtype.test_str_uses_object()
pandas.tests.arrays.sparse.test_dtype.test_update_dtype(original,dtype,expected)
pandas.tests.arrays.sparse.test_dtype.test_update_dtype_raises(original,dtype,expected_error_msg)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/sparse/test_accessor.py----------------------------------------
A:pandas.tests.arrays.sparse.test_accessor.s->pandas.Series([0, 1, 0, 10], dtype='Sparse[int64]')
A:pandas.tests.arrays.sparse.test_accessor.result->pandas.Series.sparse.from_coo(A, dense_index=dense_index)
A:pandas.tests.arrays.sparse.test_accessor.expected->expected.reindex(pd.MultiIndex.from_product(index.levels)).reindex(pd.MultiIndex.from_product(index.levels))
A:pandas.tests.arrays.sparse.test_accessor.df->pandas.DataFrame({'sparse': pd.arrays.SparseArray([1, 2])})
A:pandas.tests.arrays.sparse.test_accessor.sp_dtype->SparseDtype(dtype, np.array(0, dtype=dtype).item())
A:pandas.tests.arrays.sparse.test_accessor.mat->scipy.sparse.random(10, 2, density=0.5)
A:pandas.tests.arrays.sparse.test_accessor.dtype->SparseDtype('float64', 0.0)
A:pandas.tests.arrays.sparse.test_accessor.A->scipy.sparse.eye(3, format='coo', dtype=dtype)
A:pandas.tests.arrays.sparse.test_accessor.index->pandas.MultiIndex.from_tuples([(0, 0), (1, 1), (2, 2)])
A:pandas.tests.arrays.sparse.test_accessor.m->scipy.sparse.csr_matrix(np.array([[0, 1], [0, 0]]))
pandas.tests.arrays.sparse.test_accessor.TestFrameAccessor
pandas.tests.arrays.sparse.test_accessor.TestFrameAccessor.test_accessor_raises(self)
pandas.tests.arrays.sparse.test_accessor.TestFrameAccessor.test_density(self)
pandas.tests.arrays.sparse.test_accessor.TestFrameAccessor.test_from_spmatrix(self,format,labels,dtype)
pandas.tests.arrays.sparse.test_accessor.TestFrameAccessor.test_from_spmatrix_columns(self,columns)
pandas.tests.arrays.sparse.test_accessor.TestFrameAccessor.test_series_from_coo(self,dtype,dense_index)
pandas.tests.arrays.sparse.test_accessor.TestFrameAccessor.test_series_from_coo_incorrect_format_raises(self)
pandas.tests.arrays.sparse.test_accessor.TestFrameAccessor.test_to_coo(self)
pandas.tests.arrays.sparse.test_accessor.TestFrameAccessor.test_to_dense(self)
pandas.tests.arrays.sparse.test_accessor.TestFrameAccessor.test_with_column_named_sparse(self)
pandas.tests.arrays.sparse.test_accessor.TestSeriesAccessor
pandas.tests.arrays.sparse.test_accessor.TestSeriesAccessor.test_to_dense(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/sparse/test_array.py----------------------------------------
A:pandas.tests.arrays.sparse.test_array.self.arr_data->numpy.array([np.nan, np.nan, 1, 2, 3, np.nan, 4, 5, np.nan, 6])
A:pandas.tests.arrays.sparse.test_array.self.arr->SparseArray(self.arr_data)
A:pandas.tests.arrays.sparse.test_array.self.zarr->SparseArray([0, 0, 1, 2, 3, 0, 4, 5, 0, 6], fill_value=0)
A:pandas.tests.arrays.sparse.test_array.arr->SparseArray([0, 1, 2])
A:pandas.tests.arrays.sparse.test_array.result->SparseArray([0, 1, 2]).map({0: 10, 1: 11})
A:pandas.tests.arrays.sparse.test_array.expected->SparseArray([10, 11, None], fill_value=10)
A:pandas.tests.arrays.sparse.test_array.arr_expected->numpy.array(data, dtype=np.object)
A:pandas.tests.arrays.sparse.test_array.exp->SparseArray([1, 3, 3, 3, 3], fill_value=0, dtype=np.float64)
A:pandas.tests.arrays.sparse.test_array.mat->scipy.sparse.eye(5, 4, format='csc')
A:pandas.tests.arrays.sparse.test_array.errmsg->re.compile('bounds')
A:pandas.tests.arrays.sparse.test_array.data->numpy.arange(10).astype(float)
A:pandas.tests.arrays.sparse.test_array.sparse->SparseArray([fill_value] * 10 + [1.1, 2.2], fill_value=fill_value)
A:pandas.tests.arrays.sparse.test_array.res->SparseArray(pd.to_datetime(['2012', None, None, '2013'])).fillna(3)
A:pandas.tests.arrays.sparse.test_array.cp->SparseArray(self.arr, copy=True)
A:pandas.tests.arrays.sparse.test_array.not_copy->SparseArray(self.arr)
A:pandas.tests.arrays.sparse.test_array.dense->numpy.array([np.nan, 0, 3, 4, 0, 5, np.nan, np.nan, 0])
A:pandas.tests.arrays.sparse.test_array.dtype->SparseDtype('int64', 0)
A:pandas.tests.arrays.sparse.test_array.a->numpy.asarray(a)
A:pandas.tests.arrays.sparse.test_array.vals->numpy.array(vals)
A:pandas.tests.arrays.sparse.test_array.typ->numpy.dtype(any_real_dtype)
A:pandas.tests.arrays.sparse.test_array.arr2->SparseArray(data2)
A:pandas.tests.arrays.sparse.test_array.out->numpy.mean(SparseArray(data))
A:pandas.tests.arrays.sparse.test_array.res2->op(first, second.to_dense())
A:pandas.tests.arrays.sparse.test_array.op->getattr(operator, op)
A:pandas.tests.arrays.sparse.test_array.data1->numpy.random.randn(20)
A:pandas.tests.arrays.sparse.test_array.data2->numpy.random.randn(20)
A:pandas.tests.arrays.sparse.test_array.arr1->SparseArray(data1)
A:pandas.tests.arrays.sparse.test_array.farr1->SparseArray(data1, fill_value=3)
A:pandas.tests.arrays.sparse.test_array.farr2->SparseArray(data2, fill_value=3)
A:pandas.tests.arrays.sparse.test_array.res3->op(first.to_dense(), second)
A:pandas.tests.arrays.sparse.test_array.res4->op(first, 4)
A:pandas.tests.arrays.sparse.test_array.exp_fv->op(first.fill_value, 4)
A:pandas.tests.arrays.sparse.test_array.unpickled->pandas._testing.round_trip_pickle(obj)
A:pandas.tests.arrays.sparse.test_array.sp_arr->SparseArray([1, 2, 3])
A:pandas.tests.arrays.sparse.test_array.s->SparseArray(pd.to_datetime(['2012', None, None, '2013']))
A:pandas.tests.arrays.sparse.test_array.sa->SparseArray([0, 0, 1, 0, 0, 2, 0, 0, 0, 3, 0, 0])
A:pandas.tests.arrays.sparse.test_array.(result,)->SparseArray([0, 0, 1, 0, 0, 2, 0, 0, 0, 3, 0, 0]).nonzero()
A:pandas.tests.arrays.sparse.test_array.msg->re.escape(f'axis(={axis}) out of bounds')
A:pandas.tests.arrays.sparse.test_array.(r1, r2)->numpy.modf(sparse)
A:pandas.tests.arrays.sparse.test_array.(e1, e2)->numpy.modf(np.asarray(sparse))
A:pandas.tests.arrays.sparse.test_array.ser->pandas.Series([1, 2, 3])
A:pandas.tests.arrays.sparse.test_array.sp_array->scipy.sparse.coo_matrix((data, (row, col)))
A:pandas.tests.arrays.sparse.test_array.index->pandas.MultiIndex.from_arrays([[0, 0, 1, 3], [0, 2, 1, 3]])
A:pandas.tests.arrays.sparse.test_array.(A, _, _)->pandas.Series([1, 2, 3]).sparse.to_coo()
A:pandas.tests.arrays.sparse.test_array.b->pandas.Series(arr).unique()
pandas.tests.arrays.sparse.test_array.TestAccessor
pandas.tests.arrays.sparse.test_array.TestAccessor.test_from_coo(self)
pandas.tests.arrays.sparse.test_array.TestAccessor.test_get_attributes(self,attr)
pandas.tests.arrays.sparse.test_array.TestAccessor.test_non_sparse_raises(self)
pandas.tests.arrays.sparse.test_array.TestAccessor.test_to_coo(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray
pandas.tests.arrays.sparse.test_array.TestSparseArray.setup_method(self,method)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_astype(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_astype_all(self,any_real_dtype)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_astype_bool(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_astype_more(self,array,dtype,expected)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_astype_nan_raises(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_bad_take(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_binary_operators(self,op)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_boolean_slice_empty(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_constructor_bool(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_constructor_bool_fill_value(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_constructor_copy(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_constructor_dtype(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_constructor_dtype_str(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_constructor_float32(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_constructor_from_sparse(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_constructor_from_too_large_array(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_constructor_inferred_fill_value(self,data,fill_value)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_constructor_na_dtype(self,dtype)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_constructor_object_dtype(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_constructor_sparse_dtype(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_constructor_sparse_dtype_str(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_constructor_spindex_dtype(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_constructor_spindex_dtype_scalar(self,sparse_index)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_constructor_spindex_dtype_scalar_broadcasts(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_copy(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_dense_repr(self,vals,fill_value)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_fillna(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_fillna_overlap(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_from_spmatrix(self,size,format)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_from_spmatrix_raises(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_generator_warnings(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_get_item(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_getitem(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_getitem_arraylike_mask(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_getslice(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_getslice_tuple(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_nonzero(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_pickle(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_scalar_with_index_infer_dtype(self,scalar,dtype)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_set_fill_invalid_non_scalar(self,val)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_set_fill_value(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_set_item(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_shape(self,data,shape,dtype)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_shift_fill_value(self,fill_value)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_take(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_take_fill_value(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_take_filling(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_take_filling_all_nan(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_take_filling_fill_value(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_take_negative(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_take_scalar_raises(self)
pandas.tests.arrays.sparse.test_array.TestSparseArray.test_values_asarray(self)
pandas.tests.arrays.sparse.test_array.TestSparseArrayAnalytics
pandas.tests.arrays.sparse.test_array.TestSparseArrayAnalytics.test_all(self,data,pos,neg)
pandas.tests.arrays.sparse.test_array.TestSparseArrayAnalytics.test_any(self,data,pos,neg)
pandas.tests.arrays.sparse.test_array.TestSparseArrayAnalytics.test_asarray_datetime64(self)
pandas.tests.arrays.sparse.test_array.TestSparseArrayAnalytics.test_asarray_dt64(self)
pandas.tests.arrays.sparse.test_array.TestSparseArrayAnalytics.test_cumsum(self,data,expected,numpy)
pandas.tests.arrays.sparse.test_array.TestSparseArrayAnalytics.test_density(self)
pandas.tests.arrays.sparse.test_array.TestSparseArrayAnalytics.test_mean(self)
pandas.tests.arrays.sparse.test_array.TestSparseArrayAnalytics.test_modf(self,fill_value)
pandas.tests.arrays.sparse.test_array.TestSparseArrayAnalytics.test_nbytes_block(self)
pandas.tests.arrays.sparse.test_array.TestSparseArrayAnalytics.test_nbytes_integer(self)
pandas.tests.arrays.sparse.test_array.TestSparseArrayAnalytics.test_npoints(self)
pandas.tests.arrays.sparse.test_array.TestSparseArrayAnalytics.test_numpy_all(self,data,pos,neg)
pandas.tests.arrays.sparse.test_array.TestSparseArrayAnalytics.test_numpy_any(self,data,pos,neg)
pandas.tests.arrays.sparse.test_array.TestSparseArrayAnalytics.test_numpy_mean(self)
pandas.tests.arrays.sparse.test_array.TestSparseArrayAnalytics.test_numpy_sum(self)
pandas.tests.arrays.sparse.test_array.TestSparseArrayAnalytics.test_sum(self)
pandas.tests.arrays.sparse.test_array.TestSparseArrayAnalytics.test_ufunc(self)
pandas.tests.arrays.sparse.test_array.TestSparseArrayAnalytics.test_ufunc_args(self)
pandas.tests.arrays.sparse.test_array.kind(request)
pandas.tests.arrays.sparse.test_array.test_first_fill_value_loc(arr,loc)
pandas.tests.arrays.sparse.test_array.test_map()
pandas.tests.arrays.sparse.test_array.test_map_missing()
pandas.tests.arrays.sparse.test_array.test_setting_fill_value_fillna_still_works()
pandas.tests.arrays.sparse.test_array.test_setting_fill_value_updates()
pandas.tests.arrays.sparse.test_array.test_unique_all_sparse()
pandas.tests.arrays.sparse.test_array.test_unique_na_fill(arr,fill_value)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py----------------------------------------
A:pandas.tests.arrays.sparse.test_arithmetics.result->op(sparray)
A:pandas.tests.arrays.sparse.test_arithmetics.expected->SparseArray(op(arr), fill_value=op(fill_value))
A:pandas.tests.arrays.sparse.test_arithmetics.mask->numpy.isinf(expected)
A:pandas.tests.arrays.sparse.test_arithmetics.values->self._base([np.nan, 1, 2, 0, np.nan, 0, 1, 2, 1, np.nan])
A:pandas.tests.arrays.sparse.test_arithmetics.a->self._klass(values, kind=kind, fill_value=1)
A:pandas.tests.arrays.sparse.test_arithmetics.rvalues->self._base([2, 0, 2, 3, 0, 0, 1, 5, 2, 0], dtype=rdtype)
A:pandas.tests.arrays.sparse.test_arithmetics.b->self._klass(rvalues, kind=kind, fill_value=2)
A:pandas.tests.arrays.sparse.test_arithmetics.s->SparseArray([True, True, False, False])
A:pandas.tests.arrays.sparse.test_arithmetics.t->SparseArray([True, False, True, False])
A:pandas.tests.arrays.sparse.test_arithmetics.sp_index->pandas.core.arrays.sparse.IntIndex(4, np.array([0, 1, 2], dtype='int32'))
A:pandas.tests.arrays.sparse.test_arithmetics.arr->numpy.array([0, 1, np.nan, 2])
A:pandas.tests.arrays.sparse.test_arithmetics.df->pandas.DataFrame([[1, 2], [3, 4]])
A:pandas.tests.arrays.sparse.test_arithmetics.fill_value->ufunc(arr.fill_value)
A:pandas.tests.arrays.sparse.test_arithmetics.sparray->SparseArray(arr, fill_value=fill_value)
A:pandas.tests.arrays.sparse.test_arithmetics.ndarray->numpy.array([0, 1, 2, 3])
pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics
pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics._assert(self,a,b)
pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics._check_bool_result(self,res)
pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics._check_comparison_ops(self,a,b,a_dense,b_dense)
pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics._check_logical_ops(self,a,b,a_dense,b_dense)
pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics._check_numeric_ops(self,a,b,a_dense,b_dense,mix,op)
pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_bool_array_logical(self,kind,fill_value)
pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_bool_same_index(self,kind,fill_value)
pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_array(self,kind,mix,all_arithmetic_functions)
pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_array_comparison(self,kind)
pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_array_different_kind(self,mix,all_arithmetic_functions)
pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_same_index(self,kind,mix,all_arithmetic_functions)
pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_same_index_comparison(self,kind)
pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_scalar(self,kind,mix,all_arithmetic_functions,fill_value,scalar)
pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_scalar_comparison(self,kind)
pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_int_array(self,kind,mix,all_arithmetic_functions)
pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_int_array_comparison(self,kind)
pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_mixed_array_comparison(self,kind)
pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_mixed_array_float_int(self,kind,mix,all_arithmetic_functions)
pandas.tests.arrays.sparse.test_arithmetics.TestSparseArrayArithmetics.test_xor(self)
pandas.tests.arrays.sparse.test_arithmetics.kind(request)
pandas.tests.arrays.sparse.test_arithmetics.mix(request)
pandas.tests.arrays.sparse.test_arithmetics.test_binary_ufuncs(ufunc,a,b)
pandas.tests.arrays.sparse.test_arithmetics.test_invert(fill_value)
pandas.tests.arrays.sparse.test_arithmetics.test_ndarray_inplace()
pandas.tests.arrays.sparse.test_arithmetics.test_sparray_inplace()
pandas.tests.arrays.sparse.test_arithmetics.test_ufuncs(ufunc,arr)
pandas.tests.arrays.sparse.test_arithmetics.test_unary_op(op,fill_value)
pandas.tests.arrays.sparse.test_arithmetics.test_with_dataframe()
pandas.tests.arrays.sparse.test_arithmetics.test_with_list(op)
pandas.tests.arrays.sparse.test_arithmetics.test_with_zerodim_ndarray()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/sparse/test_combine_concat.py----------------------------------------
A:pandas.tests.arrays.sparse.test_combine_concat.a->SparseArray([1, 0, 0, 2], kind=kind)
A:pandas.tests.arrays.sparse.test_combine_concat.b->SparseArray([1, 0, 2, 2], kind=other)
A:pandas.tests.arrays.sparse.test_combine_concat.result->pandas.core.arrays.sparse.SparseArray._concat_same_type([a, b])
A:pandas.tests.arrays.sparse.test_combine_concat.expected->numpy.array([1, 2, 1, 2, 2], dtype='int64')
pandas.tests.arrays.sparse.test_combine_concat.TestSparseArrayConcat
pandas.tests.arrays.sparse.test_combine_concat.TestSparseArrayConcat.test_basic(self,kind)
pandas.tests.arrays.sparse.test_combine_concat.TestSparseArrayConcat.test_uses_first_kind(self,kind)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/arrays/sparse/test_libsparse.py----------------------------------------
A:pandas.tests.arrays.sparse.test_libsparse.plain_case->dict(xloc=[0, 7, 15], xlen=[3, 5, 5], yloc=[2, 9, 14], ylen=[2, 3, 5], intersect_loc=[2, 9, 15], intersect_len=[1, 3, 4])
A:pandas.tests.arrays.sparse.test_libsparse.delete_blocks->dict(xloc=[0, 5], xlen=[4, 4], yloc=[1], ylen=[4], intersect_loc=[1], intersect_len=[3])
A:pandas.tests.arrays.sparse.test_libsparse.split_blocks->dict(xloc=[0], xlen=[10], yloc=[0, 5], ylen=[3, 7], intersect_loc=[0, 5], intersect_len=[3, 5])
A:pandas.tests.arrays.sparse.test_libsparse.skip_block->dict(xloc=[10], xlen=[5], yloc=[0, 12], ylen=[5, 3], intersect_loc=[12], intersect_len=[3])
A:pandas.tests.arrays.sparse.test_libsparse.no_intersect->dict(xloc=[0, 10], xlen=[4, 6], yloc=[5, 17], ylen=[4, 2], intersect_loc=[], intersect_len=[])
A:pandas.tests.arrays.sparse.test_libsparse.xindex->BlockIndex(TEST_LENGTH, xloc, xlen)
A:pandas.tests.arrays.sparse.test_libsparse.yindex->BlockIndex(TEST_LENGTH, yloc, ylen)
A:pandas.tests.arrays.sparse.test_libsparse.bresult->BlockIndex(TEST_LENGTH, xloc, xlen).make_union(yindex)
A:pandas.tests.arrays.sparse.test_libsparse.ixindex->BlockIndex(TEST_LENGTH, xloc, xlen).to_int_index()
A:pandas.tests.arrays.sparse.test_libsparse.iyindex->BlockIndex(TEST_LENGTH, yloc, ylen).to_int_index()
A:pandas.tests.arrays.sparse.test_libsparse.iresult->BlockIndex(TEST_LENGTH, xloc, xlen).to_int_index().make_union(iyindex)
A:pandas.tests.arrays.sparse.test_libsparse.a->IntIndex(5, np.array([0, 1], dtype=np.int32))
A:pandas.tests.arrays.sparse.test_libsparse.b->IntIndex(4, np.array([0, 1], dtype=np.int32))
A:pandas.tests.arrays.sparse.test_libsparse.res->_make_index(4, np.array([0, 1, 2, 3], dtype=np.int32), kind='integer').lookup_array(np.array([1, 4, 2, 5], dtype=np.int32))
A:pandas.tests.arrays.sparse.test_libsparse.exp->numpy.arange(0, i, 2, dtype=np.int32)
A:pandas.tests.arrays.sparse.test_libsparse.result->IntIndex(5, np.array([0, 1], dtype=np.int32)).intersect(b)
A:pandas.tests.arrays.sparse.test_libsparse.expected->BlockIndex(TEST_LENGTH, eloc, elen)
A:pandas.tests.arrays.sparse.test_libsparse.longer_index->BlockIndex(TEST_LENGTH + 1, yloc, ylen)
A:pandas.tests.arrays.sparse.test_libsparse.case->case.to_block_index().to_block_index()
A:pandas.tests.arrays.sparse.test_libsparse.idx->_make_index(4, np.array([0, 1, 2, 3], dtype=np.int32), kind='integer')
A:pandas.tests.arrays.sparse.test_libsparse.bindex->BlockIndex(20, [5, 12], [3, 6])
A:pandas.tests.arrays.sparse.test_libsparse.iindex->BlockIndex(20, [5, 12], [3, 6]).to_int_index()
A:pandas.tests.arrays.sparse.test_libsparse.index->IntIndex(10, [2, 3, 4, 5, 6])
A:pandas.tests.arrays.sparse.test_libsparse.block->BlockIndex(20, locs, lengths)
A:pandas.tests.arrays.sparse.test_libsparse.dense->BlockIndex(20, locs, lengths).to_int_index()
A:pandas.tests.arrays.sparse.test_libsparse.xbindex->BlockIndex(TEST_LENGTH, xloc, xlen).to_int_index().to_block_index()
A:pandas.tests.arrays.sparse.test_libsparse.ybindex->BlockIndex(TEST_LENGTH, yloc, ylen).to_int_index().to_block_index()
A:pandas.tests.arrays.sparse.test_libsparse.xdindex->BlockIndex(TEST_LENGTH, xloc, xlen).to_int_index()
A:pandas.tests.arrays.sparse.test_libsparse.ydindex->BlockIndex(TEST_LENGTH, yloc, ylen).to_int_index()
A:pandas.tests.arrays.sparse.test_libsparse.(result_block_vals, rb_index, bfill)->sparse_op(x, xindex, xfill, y, yindex, yfill)
A:pandas.tests.arrays.sparse.test_libsparse.(result_int_vals, ri_index, ifill)->sparse_op(x, xdindex, xfill, y, ydindex, yfill)
A:pandas.tests.arrays.sparse.test_libsparse.xseries->xseries.reindex(np.arange(TEST_LENGTH)).fillna(xfill).reindex(np.arange(TEST_LENGTH)).fillna(xfill)
A:pandas.tests.arrays.sparse.test_libsparse.yseries->yseries.reindex(np.arange(TEST_LENGTH)).fillna(yfill).reindex(np.arange(TEST_LENGTH)).fillna(yfill)
A:pandas.tests.arrays.sparse.test_libsparse.series_result->series_result.reindex(ri_index.indices).reindex(ri_index.indices)
A:pandas.tests.arrays.sparse.test_libsparse.sparse_op->getattr(splib, f'sparse_{opname}_float64')
A:pandas.tests.arrays.sparse.test_libsparse.python_op->getattr(operator, opname)
pandas.tests.arrays.sparse.test_libsparse.TestBlockIndex
pandas.tests.arrays.sparse.test_libsparse.TestBlockIndex.test_block_internal(self)
pandas.tests.arrays.sparse.test_libsparse.TestBlockIndex.test_check_integrity(self)
pandas.tests.arrays.sparse.test_libsparse.TestBlockIndex.test_equals(self)
pandas.tests.arrays.sparse.test_libsparse.TestBlockIndex.test_make_block_boundary(self)
pandas.tests.arrays.sparse.test_libsparse.TestBlockIndex.test_to_block_index(self)
pandas.tests.arrays.sparse.test_libsparse.TestBlockIndex.test_to_int_index(self)
pandas.tests.arrays.sparse.test_libsparse.TestIntIndex
pandas.tests.arrays.sparse.test_libsparse.TestIntIndex.test_check_integrity(self)
pandas.tests.arrays.sparse.test_libsparse.TestIntIndex.test_equals(self)
pandas.tests.arrays.sparse.test_libsparse.TestIntIndex.test_int_internal(self)
pandas.tests.arrays.sparse.test_libsparse.TestIntIndex.test_to_block_index(self)
pandas.tests.arrays.sparse.test_libsparse.TestIntIndex.test_to_int_index(self)
pandas.tests.arrays.sparse.test_libsparse.TestSparseIndexCommon
pandas.tests.arrays.sparse.test_libsparse.TestSparseIndexCommon.test_block_internal(self)
pandas.tests.arrays.sparse.test_libsparse.TestSparseIndexCommon.test_int_internal(self)
pandas.tests.arrays.sparse.test_libsparse.TestSparseIndexCommon.test_lookup(self)
pandas.tests.arrays.sparse.test_libsparse.TestSparseIndexCommon.test_lookup_array(self)
pandas.tests.arrays.sparse.test_libsparse.TestSparseIndexCommon.test_lookup_basics(self)
pandas.tests.arrays.sparse.test_libsparse.TestSparseIndexIntersect
pandas.tests.arrays.sparse.test_libsparse.TestSparseIndexIntersect.test_intersect(self)
pandas.tests.arrays.sparse.test_libsparse.TestSparseIndexIntersect.test_intersect_empty(self)
pandas.tests.arrays.sparse.test_libsparse.TestSparseIndexIntersect.test_intersect_identical(self)
pandas.tests.arrays.sparse.test_libsparse.TestSparseIndexUnion
pandas.tests.arrays.sparse.test_libsparse.TestSparseIndexUnion.test_index_make_union(self)
pandas.tests.arrays.sparse.test_libsparse.TestSparseIndexUnion.test_int_index_make_union(self)
pandas.tests.arrays.sparse.test_libsparse.TestSparseOperators
pandas.tests.arrays.sparse.test_libsparse.TestSparseOperators._op_tests(self,sparse_op,python_op)
pandas.tests.arrays.sparse.test_libsparse.TestSparseOperators.test_op(self,opname)
pandas.tests.arrays.sparse.test_libsparse.check_cases(_check_case)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/test_pickle.py----------------------------------------
A:pandas.tests.io.test_pickle.lzma->_import_lzma()
A:pandas.tests.io.test_pickle.comparator->globals().get(comparator, m['compare_element'])
A:pandas.tests.io.test_pickle.data->pandas.read_pickle(vf)
A:pandas.tests.io.test_pickle.m->globals()
A:pandas.tests.io.test_pickle.files->glob.glob(os.path.join(os.path.dirname(__file__), 'data', 'legacy_pickle', '*', '*.pickle'))
A:pandas.tests.io.test_pickle.version->os.path.basename(os.path.dirname(legacy_pickle))
A:pandas.tests.io.test_pickle.result->pandas.read_pickle(mockurl)
A:pandas.tests.io.test_pickle.df->pandas._testing.makeDataFrame()
A:pandas.tests.io.test_pickle.f->open(path, mode)
A:pandas.tests.io.test_pickle.msg->'Unrecognized compression type: {}'.format(compression)
A:pandas.tests.io.test_pickle.df2->pandas.read_pickle(path)
A:pandas.tests.io.test_pickle.path->datapath('io', 'data', 'pickle', pickle_file)
A:pandas.tests.io.test_pickle.self.file->open(path, 'rb')
pandas.tests.io.test_pickle.TestCompression
pandas.tests.io.test_pickle.TestCompression.compress_file(self,src_path,dest_path,compression)
pandas.tests.io.test_pickle.TestCompression.test_read_explicit(self,compression,get_random_path)
pandas.tests.io.test_pickle.TestCompression.test_read_infer(self,ext,get_random_path)
pandas.tests.io.test_pickle.TestCompression.test_write_explicit(self,compression,get_random_path)
pandas.tests.io.test_pickle.TestCompression.test_write_explicit_bad(self,compression,get_random_path)
pandas.tests.io.test_pickle.TestCompression.test_write_infer(self,ext,get_random_path)
pandas.tests.io.test_pickle.TestProtocol
pandas.tests.io.test_pickle.TestProtocol.test_read(self,protocol,get_random_path)
pandas.tests.io.test_pickle.compare(data,vf,version)
pandas.tests.io.test_pickle.compare_element(result,expected,typ,version=None)
pandas.tests.io.test_pickle.compare_frame_cat_and_float(result,expected,typ,version)
pandas.tests.io.test_pickle.compare_frame_cat_onecol(result,expected,typ,version)
pandas.tests.io.test_pickle.compare_frame_dt_mixed_tzs(result,expected,typ,version)
pandas.tests.io.test_pickle.compare_index_period(result,expected,typ,version)
pandas.tests.io.test_pickle.compare_series_cat(result,expected,typ,version)
pandas.tests.io.test_pickle.compare_series_dt_tz(result,expected,typ,version)
pandas.tests.io.test_pickle.compare_series_ts(result,expected,typ,version)
pandas.tests.io.test_pickle.current_pickle_data()
pandas.tests.io.test_pickle.get_random_path()
pandas.tests.io.test_pickle.legacy_pickle(request,datapath)
pandas.tests.io.test_pickle.test_legacy_sparse_warning(datapath)
pandas.tests.io.test_pickle.test_pickle_buffer_roundtrip()
pandas.tests.io.test_pickle.test_pickle_gcsurl_roundtrip(monkeypatch,mockurl)
pandas.tests.io.test_pickle.test_pickle_generalurl_read(monkeypatch,mockurl)
pandas.tests.io.test_pickle.test_pickle_path_localpath()
pandas.tests.io.test_pickle.test_pickle_path_pathlib()
pandas.tests.io.test_pickle.test_pickle_s3url_roundtrip(monkeypatch,mockurl)
pandas.tests.io.test_pickle.test_pickles(current_pickle_data,legacy_pickle)
pandas.tests.io.test_pickle.test_round_trip_current(current_pickle_data)
pandas.tests.io.test_pickle.test_unicode_decode_error(datapath,pickle_file,excols)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/test_s3.py----------------------------------------
A:pandas.tests.io.test_s3.body->StreamingBody(BytesIO(el), content_length=len(el))
pandas.tests.io.test_s3.TestS3URL
pandas.tests.io.test_s3.TestS3URL.test_is_s3_url(self)
pandas.tests.io.test_s3.test_streaming_s3_objects()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/test_parquet.py----------------------------------------
A:pandas.tests.io.test_parquet.pytestmark->pytest.mark.filterwarnings('ignore:RangeIndex.* is deprecated:DeprecationWarning')
A:pandas.tests.io.test_parquet.df->pandas.DataFrame()
A:pandas.tests.io.test_parquet.actual->read_parquet(path, **read_kwargs)
A:pandas.tests.io.test_parquet.result->read_parquet(path, fp, filters=[('a', '==', 0)])
A:pandas.tests.io.test_parquet.expected->pandas.DataFrame().copy()
A:pandas.tests.io.test_parquet.index->pandas.MultiIndex.from_tuples([('a', 1), ('a', 2), ('b', 1)])
A:pandas.tests.io.test_parquet.mi_columns->pandas.MultiIndex.from_tuples([('a', 1), ('a', 2), ('b', 1)])
A:pandas.tests.io.test_parquet.dates->pandas.date_range('01-Jan-2018', '01-Dec-2018', freq='MS')
A:pandas.tests.io.test_parquet.index1->pandas.MultiIndex.from_product([['Level1', 'Level2'], dates], names=['level', 'date'])
A:pandas.tests.io.test_parquet.index2->pandas.MultiIndex.from_product([['Level1', 'Level2'], dates], names=['level', 'date']).copy(names=None)
A:pandas.tests.io.test_parquet.df['datetime_tz']->pandas.date_range('20130101', periods=3, tz='US/Eastern')
A:pandas.tests.io.test_parquet.df['a']->pandas.Categorical(list('abcdef'))
A:pandas.tests.io.test_parquet.df['b']->pandas.Categorical(['bar', 'foo', 'foo', 'bar', None, 'bar'], dtype=pd.CategoricalDtype(['foo', 'bar', 'baz']))
A:pandas.tests.io.test_parquet.df['c']->pandas.Categorical(['a', 'b', 'c', 'a', 'c', 'b'], categories=['b', 'c', 'd'], ordered=True)
A:pandas.tests.io.test_parquet.expected_df->df_compat.copy()
A:pandas.tests.io.test_parquet.expected_df[partition_col]->expected_df[partition_col].astype('category').astype('category')
A:pandas.tests.io.test_parquet.dataset->pyarrow.parquet.ParquetDataset(path, validate_schema=False)
A:pandas.tests.io.test_parquet.schema->pyarrow.schema([pyarrow.field('x', type=pyarrow.bool_())])
A:pandas.tests.io.test_parquet.out_df->pandas.DataFrame().astype(bool)
A:pandas.tests.io.test_parquet.df['timedelta']->pandas.timedelta_range('1 day', periods=3)
pandas.tests.io.test_parquet.Base
pandas.tests.io.test_parquet.Base.check_error_on_write(self,df,engine,exc)
pandas.tests.io.test_parquet.TestBasic(Base)
pandas.tests.io.test_parquet.TestBasic.test_columns_dtypes(self,engine)
pandas.tests.io.test_parquet.TestBasic.test_columns_dtypes_invalid(self,engine)
pandas.tests.io.test_parquet.TestBasic.test_compression(self,engine,compression)
pandas.tests.io.test_parquet.TestBasic.test_error(self,engine)
pandas.tests.io.test_parquet.TestBasic.test_multiindex_with_columns(self,pa)
pandas.tests.io.test_parquet.TestBasic.test_read_columns(self,engine)
pandas.tests.io.test_parquet.TestBasic.test_write_column_multiindex(self,engine)
pandas.tests.io.test_parquet.TestBasic.test_write_ignoring_index(self,engine)
pandas.tests.io.test_parquet.TestBasic.test_write_index(self,engine)
pandas.tests.io.test_parquet.TestBasic.test_write_multiindex(self,pa)
pandas.tests.io.test_parquet.TestParquetFastParquet(Base)
pandas.tests.io.test_parquet.TestParquetFastParquet.test_basic(self,fp,df_full)
pandas.tests.io.test_parquet.TestParquetFastParquet.test_bool_with_none(self,fp)
pandas.tests.io.test_parquet.TestParquetFastParquet.test_categorical(self,fp)
pandas.tests.io.test_parquet.TestParquetFastParquet.test_duplicate_columns(self,fp)
pandas.tests.io.test_parquet.TestParquetFastParquet.test_empty_dataframe(self,fp)
pandas.tests.io.test_parquet.TestParquetFastParquet.test_error_on_using_partition_cols_and_partition_on(self,fp,df_full)
pandas.tests.io.test_parquet.TestParquetFastParquet.test_filter_row_groups(self,fp)
pandas.tests.io.test_parquet.TestParquetFastParquet.test_partition_cols_string(self,fp,df_full)
pandas.tests.io.test_parquet.TestParquetFastParquet.test_partition_cols_supported(self,fp,df_full)
pandas.tests.io.test_parquet.TestParquetFastParquet.test_partition_on_supported(self,fp,df_full)
pandas.tests.io.test_parquet.TestParquetFastParquet.test_s3_roundtrip(self,df_compat,s3_resource,fp)
pandas.tests.io.test_parquet.TestParquetFastParquet.test_unsupported(self,fp)
pandas.tests.io.test_parquet.TestParquetPyArrow(Base)
pandas.tests.io.test_parquet.TestParquetPyArrow.test_additional_extension_arrays(self,pa)
pandas.tests.io.test_parquet.TestParquetPyArrow.test_additional_extension_types(self,pa)
pandas.tests.io.test_parquet.TestParquetPyArrow.test_basic(self,pa,df_full)
pandas.tests.io.test_parquet.TestParquetPyArrow.test_basic_subset_columns(self,pa,df_full)
pandas.tests.io.test_parquet.TestParquetPyArrow.test_categorical(self,pa)
pandas.tests.io.test_parquet.TestParquetPyArrow.test_duplicate_columns(self,pa)
pandas.tests.io.test_parquet.TestParquetPyArrow.test_empty_dataframe(self,pa)
pandas.tests.io.test_parquet.TestParquetPyArrow.test_partition_cols_string(self,pa,df_full)
pandas.tests.io.test_parquet.TestParquetPyArrow.test_partition_cols_supported(self,pa,df_full)
pandas.tests.io.test_parquet.TestParquetPyArrow.test_s3_roundtrip(self,df_compat,s3_resource,pa)
pandas.tests.io.test_parquet.TestParquetPyArrow.test_s3_roundtrip_for_dir(self,df_compat,s3_resource,pa,partition_col)
pandas.tests.io.test_parquet.TestParquetPyArrow.test_unsupported(self,pa)
pandas.tests.io.test_parquet.TestParquetPyArrow.test_write_with_schema(self,pa)
pandas.tests.io.test_parquet.check_round_trip(df,engine=None,path=None,write_kwargs=None,read_kwargs=None,expected=None,check_names=True,check_like=False,repeat=2)
pandas.tests.io.test_parquet.df_compat()
pandas.tests.io.test_parquet.df_cross_compat()
pandas.tests.io.test_parquet.df_full()
pandas.tests.io.test_parquet.engine(request)
pandas.tests.io.test_parquet.fp()
pandas.tests.io.test_parquet.pa()
pandas.tests.io.test_parquet.test_cross_engine_fp_pa(df_cross_compat,pa,fp)
pandas.tests.io.test_parquet.test_cross_engine_pa_fp(df_cross_compat,pa,fp)
pandas.tests.io.test_parquet.test_invalid_engine(df_compat)
pandas.tests.io.test_parquet.test_options_auto(df_compat,fp,pa)
pandas.tests.io.test_parquet.test_options_fp(df_compat,fp)
pandas.tests.io.test_parquet.test_options_get_engine(fp,pa)
pandas.tests.io.test_parquet.test_options_py(df_compat,pa)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/test_clipboard.py----------------------------------------
A:pandas.tests.io.test_clipboard.max_rows->get_option('display.max_rows')
A:pandas.tests.io.test_clipboard.result->read_clipboard(sep='\\s+')
A:pandas.tests.io.test_clipboard.kwargs->build_kwargs(sep, excel)
A:pandas.tests.io.test_clipboard.clip_kwargs->dict(engine='python')
A:pandas.tests.io.test_clipboard.text->dedent('\n            a  b\n            1  2\n            3  4\n            '.strip())
A:pandas.tests.io.test_clipboard.df->pandas.read_clipboard(**clip_kwargs)
A:pandas.tests.io.test_clipboard.res->pandas.read_clipboard(**clip_kwargs)
A:pandas.tests.io.test_clipboard.exp->pandas.read_clipboard(**clip_kwargs)
pandas.tests.io.test_clipboard.TestClipboard
pandas.tests.io.test_clipboard.TestClipboard.check_round_trip_frame(self,data,excel=None,sep=None,encoding=None)
pandas.tests.io.test_clipboard.TestClipboard.test_clipboard_copy_strings(self,sep,excel,df)
pandas.tests.io.test_clipboard.TestClipboard.test_clipboard_copy_tabs_default(self,sep,excel,df,request,mock_clipboard)
pandas.tests.io.test_clipboard.TestClipboard.test_copy_delim_warning(self,df)
pandas.tests.io.test_clipboard.TestClipboard.test_excel_sep_warning(self,df)
pandas.tests.io.test_clipboard.TestClipboard.test_invalid_encoding(self,df)
pandas.tests.io.test_clipboard.TestClipboard.test_read_clipboard_infer_excel(self,request,mock_clipboard)
pandas.tests.io.test_clipboard.TestClipboard.test_round_trip_frame(self,df)
pandas.tests.io.test_clipboard.TestClipboard.test_round_trip_frame_sep(self,df,sep)
pandas.tests.io.test_clipboard.TestClipboard.test_round_trip_frame_string(self,df)
pandas.tests.io.test_clipboard.TestClipboard.test_round_trip_valid_encodings(self,enc,df)
pandas.tests.io.test_clipboard.build_kwargs(sep,excel)
pandas.tests.io.test_clipboard.df(request)
pandas.tests.io.test_clipboard.mock_clipboard(monkeypatch,request)
pandas.tests.io.test_clipboard.test_mock_clipboard(mock_clipboard)
pandas.tests.io.test_clipboard.test_raw_roundtrip(data)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/test_stata.py----------------------------------------
A:pandas.tests.io.test_stata.dta14_114->os.path.join(dirpath, 'stata5_114.dta')
A:pandas.tests.io.test_stata.parsed_114->self.read_dta(self.dta2_114)
A:pandas.tests.io.test_stata.self.dirpath->datapath('io', 'data', 'stata')
A:pandas.tests.io.test_stata.self.dta1_114->os.path.join(self.dirpath, 'stata1_114.dta')
A:pandas.tests.io.test_stata.self.dta1_117->os.path.join(self.dirpath, 'stata1_117.dta')
A:pandas.tests.io.test_stata.self.dta2_113->os.path.join(self.dirpath, 'stata2_113.dta')
A:pandas.tests.io.test_stata.self.dta2_114->os.path.join(self.dirpath, 'stata2_114.dta')
A:pandas.tests.io.test_stata.self.dta2_115->os.path.join(self.dirpath, 'stata2_115.dta')
A:pandas.tests.io.test_stata.self.dta2_117->os.path.join(self.dirpath, 'stata2_117.dta')
A:pandas.tests.io.test_stata.self.dta3_113->os.path.join(self.dirpath, 'stata3_113.dta')
A:pandas.tests.io.test_stata.self.dta3_114->os.path.join(self.dirpath, 'stata3_114.dta')
A:pandas.tests.io.test_stata.self.dta3_115->os.path.join(self.dirpath, 'stata3_115.dta')
A:pandas.tests.io.test_stata.self.dta3_117->os.path.join(self.dirpath, 'stata3_117.dta')
A:pandas.tests.io.test_stata.self.csv3->os.path.join(self.dirpath, 'stata3.csv')
A:pandas.tests.io.test_stata.self.dta4_113->os.path.join(self.dirpath, 'stata4_113.dta')
A:pandas.tests.io.test_stata.self.dta4_114->os.path.join(self.dirpath, 'stata4_114.dta')
A:pandas.tests.io.test_stata.self.dta4_115->os.path.join(self.dirpath, 'stata4_115.dta')
A:pandas.tests.io.test_stata.self.dta4_117->os.path.join(self.dirpath, 'stata4_117.dta')
A:pandas.tests.io.test_stata.self.dta_encoding->os.path.join(self.dirpath, 'stata1_encoding.dta')
A:pandas.tests.io.test_stata.self.dta_encoding_118->os.path.join(self.dirpath, 'stata1_encoding_118.dta')
A:pandas.tests.io.test_stata.self.csv14->os.path.join(self.dirpath, 'stata5.csv')
A:pandas.tests.io.test_stata.self.dta14_113->os.path.join(self.dirpath, 'stata5_113.dta')
A:pandas.tests.io.test_stata.self.dta14_114->os.path.join(self.dirpath, 'stata5_114.dta')
A:pandas.tests.io.test_stata.self.dta14_115->os.path.join(self.dirpath, 'stata5_115.dta')
A:pandas.tests.io.test_stata.self.dta14_117->os.path.join(self.dirpath, 'stata5_117.dta')
A:pandas.tests.io.test_stata.self.csv15->os.path.join(self.dirpath, 'stata6.csv')
A:pandas.tests.io.test_stata.self.dta15_113->os.path.join(self.dirpath, 'stata6_113.dta')
A:pandas.tests.io.test_stata.self.dta15_114->os.path.join(self.dirpath, 'stata6_114.dta')
A:pandas.tests.io.test_stata.self.dta15_115->os.path.join(self.dirpath, 'stata6_115.dta')
A:pandas.tests.io.test_stata.self.dta15_117->os.path.join(self.dirpath, 'stata6_117.dta')
A:pandas.tests.io.test_stata.self.dta16_115->os.path.join(self.dirpath, 'stata7_115.dta')
A:pandas.tests.io.test_stata.self.dta16_117->os.path.join(self.dirpath, 'stata7_117.dta')
A:pandas.tests.io.test_stata.self.dta17_113->os.path.join(self.dirpath, 'stata8_113.dta')
A:pandas.tests.io.test_stata.self.dta17_115->os.path.join(self.dirpath, 'stata8_115.dta')
A:pandas.tests.io.test_stata.self.dta17_117->os.path.join(self.dirpath, 'stata8_117.dta')
A:pandas.tests.io.test_stata.self.dta18_115->os.path.join(self.dirpath, 'stata9_115.dta')
A:pandas.tests.io.test_stata.self.dta18_117->os.path.join(self.dirpath, 'stata9_117.dta')
A:pandas.tests.io.test_stata.self.dta19_115->os.path.join(self.dirpath, 'stata10_115.dta')
A:pandas.tests.io.test_stata.self.dta19_117->os.path.join(self.dirpath, 'stata10_117.dta')
A:pandas.tests.io.test_stata.self.dta20_115->os.path.join(self.dirpath, 'stata11_115.dta')
A:pandas.tests.io.test_stata.self.dta20_117->os.path.join(self.dirpath, 'stata11_117.dta')
A:pandas.tests.io.test_stata.self.dta21_117->os.path.join(self.dirpath, 'stata12_117.dta')
A:pandas.tests.io.test_stata.self.dta22_118->os.path.join(self.dirpath, 'stata14_118.dta')
A:pandas.tests.io.test_stata.self.dta23->os.path.join(self.dirpath, 'stata15.dta')
A:pandas.tests.io.test_stata.self.dta24_111->os.path.join(self.dirpath, 'stata7_111.dta')
A:pandas.tests.io.test_stata.self.dta25_118->os.path.join(self.dirpath, 'stata16_118.dta')
A:pandas.tests.io.test_stata.self.dta26_119->os.path.join(self.dirpath, 'stata1_119.dta.gz')
A:pandas.tests.io.test_stata.self.stata_dates->os.path.join(self.dirpath, 'stata13_dates.dta')
A:pandas.tests.io.test_stata.empty_ds->DataFrame(columns=['unit'])
A:pandas.tests.io.test_stata.empty_ds2->read_stata(path)
A:pandas.tests.io.test_stata.file->getattr(self, file)
A:pandas.tests.io.test_stata.parsed->read_stata(fname, columns=columns)
A:pandas.tests.io.test_stata.expected->pandas.DataFrame([['Düsseldorf']] * 151, columns=['kreis1849'])
A:pandas.tests.io.test_stata.expected['float_miss']->expected['float_miss'].astype(np.float32).astype(np.float32)
A:pandas.tests.io.test_stata.expected['yearly_date']->expected['yearly_date'].astype('O').astype('O')
A:pandas.tests.io.test_stata.parsed_115->read_stata(self.dta18_115)
A:pandas.tests.io.test_stata.parsed_117->read_stata(self.dta18_117)
A:pandas.tests.io.test_stata.expected['year']->expected['year'].astype(np.int16).astype(np.int16)
A:pandas.tests.io.test_stata.expected['quarter']->expected['quarter'].astype(np.int8).astype(np.int8)
A:pandas.tests.io.test_stata.parsed_118->self.read_dta(self.dta22_118)
A:pandas.tests.io.test_stata.parsed_118['Bytes']->parsed_118['Bytes'].astype('O').astype('O')
A:pandas.tests.io.test_stata.expected['Floats']->expected['Floats'].astype(np.float32).astype(np.float32)
A:pandas.tests.io.test_stata.vl->rdr.variable_labels()
A:pandas.tests.io.test_stata.original->pandas.DataFrame({'nums': [1.0, 2.0, 3.0], 'strs': ['apple', 'banana', 'cherry'], 'dates': dates})
A:pandas.tests.io.test_stata.written_and_read_again->self.read_dta(path)
A:pandas.tests.io.test_stata.original.index->pandas.DataFrame({'nums': [1.0, 2.0, 3.0], 'strs': ['apple', 'banana', 'cherry'], 'dates': dates}).index.astype(np.int32)
A:pandas.tests.io.test_stata.original['year']->original['year'].astype(np.int32).astype(np.int32)
A:pandas.tests.io.test_stata.original['quarter']->original['quarter'].astype(np.int32).astype(np.int32)
A:pandas.tests.io.test_stata.original['object']->Series(original['object'], dtype=object)
A:pandas.tests.io.test_stata.original['integer']->original['integer'].astype(np.int32).astype(np.int32)
A:pandas.tests.io.test_stata.df->DataFrame(np.zeros((1, 33000), dtype=np.int8))
A:pandas.tests.io.test_stata.df_copy->DataFrame(np.zeros((1, 33000), dtype=np.int8)).copy()
A:pandas.tests.io.test_stata.raw->read_stata(self.dta_encoding)
A:pandas.tests.io.test_stata.encoded->read_stata(self.dta_encoding_118)
A:pandas.tests.io.test_stata.reread_encoded->read_stata(path)
A:pandas.tests.io.test_stata.formatted->formatted.astype(np.int32).astype(np.int32)
A:pandas.tests.io.test_stata.s1->Series([0, 1, 100], dtype=np.uint8)
A:pandas.tests.io.test_stata.s2->Series([0, 1, 255], dtype=np.uint8)
A:pandas.tests.io.test_stata.s3->Series([0, 1, 2 ** 15 - 100], dtype=np.uint16)
A:pandas.tests.io.test_stata.formatted['int64']->formatted['int64'].astype(np.float64).astype(np.float64)
A:pandas.tests.io.test_stata.expected[col]->expected[col]._convert(datetime=True, numeric=True)._convert(datetime=True, numeric=True)
A:pandas.tests.io.test_stata.expected['float_']->expected['float_'].astype(np.float32).astype(np.float32)
A:pandas.tests.io.test_stata.expected['date_td']->expected['date_td'].apply(datetime.strptime, args=('%Y-%m-%d',)).apply(datetime.strptime, args=('%Y-%m-%d',))
A:pandas.tests.io.test_stata.expected['byte_']->expected['byte_'].astype(np.int8).astype(np.int8)
A:pandas.tests.io.test_stata.expected['int_']->expected['int_'].astype(np.int16).astype(np.int16)
A:pandas.tests.io.test_stata.expected['long_']->expected['long_'].astype(np.int32).astype(np.int32)
A:pandas.tests.io.test_stata.expected['double_']->expected['double_'].astype(np.float64).astype(np.float64)
A:pandas.tests.io.test_stata.time_stamp->datetime(2000, 2, 29, 14, 21)
A:pandas.tests.io.test_stata.columns->list(written_and_read_again.columns)
A:pandas.tests.io.test_stata.written_and_read_again.columns->map(convert_col_name, columns)
A:pandas.tests.io.test_stata.s0->Series([0, 1, True], dtype=np.bool)
A:pandas.tests.io.test_stata.modified->pandas.DataFrame({'nums': [1.0, 2.0, 3.0], 'strs': ['apple', 'banana', 'cherry'], 'dates': dates}).copy()
A:pandas.tests.io.test_stata.modified['s1']->Series(modified['s1'], dtype=np.int16)
A:pandas.tests.io.test_stata.modified['s2']->Series(modified['s2'], dtype=np.int32)
A:pandas.tests.io.test_stata.modified['s3']->Series(modified['s3'], dtype=np.float64)
A:pandas.tests.io.test_stata.dpath->os.path.join(self.dirpath, 'S4_EDUC1.dta')
A:pandas.tests.io.test_stata.df0->pandas.DataFrame(df0)
A:pandas.tests.io.test_stata.df0['clustnum']->df0['clustnum'].astype(np.int16).astype(np.int16)
A:pandas.tests.io.test_stata.df0['pri_schl']->df0['pri_schl'].astype(np.int8).astype(np.int8)
A:pandas.tests.io.test_stata.df0['psch_num']->df0['psch_num'].astype(np.int8).astype(np.int8)
A:pandas.tests.io.test_stata.df0['psch_dis']->df0['psch_dis'].astype(np.float32).astype(np.float32)
A:pandas.tests.io.test_stata.reader->StataReader(path)
A:pandas.tests.io.test_stata.s4->Series([0, 1, 2 ** 16 - 1], dtype=np.uint16)
A:pandas.tests.io.test_stata.s5->Series([0, 1, 2 ** 31 - 100], dtype=np.uint32)
A:pandas.tests.io.test_stata.s6->Series([0, 1, 2 ** 32 - 1], dtype=np.uint32)
A:pandas.tests.io.test_stata.expected[c]->expected[c].astype(t).astype(t)
A:pandas.tests.io.test_stata.sr_115->rdr.variable_labels()
A:pandas.tests.io.test_stata.sr_117->rdr.variable_labels()
A:pandas.tests.io.test_stata.s['s' + str(str_len)]->Series(['a' * str_len, 'b' * str_len, 'c' * str_len])
A:pandas.tests.io.test_stata.val->StataMissingValue(struct.unpack('<d', b'\x00\x00\x00\x00\x00\x1a\xe0\x7f')[0])
A:pandas.tests.io.test_stata.smv->StataMissingValue(101)
A:pandas.tests.io.test_stata.keys->sorted(smv.MISSING_VALUES.keys())
A:pandas.tests.io.test_stata.expected[2][2]->datetime(9999, 12, 24)
A:pandas.tests.io.test_stata.expected[2][3]->datetime(9999, 12, 1)
A:pandas.tests.io.test_stata.expected[2][4]->datetime(9999, 10, 1)
A:pandas.tests.io.test_stata.expected[2][5]->datetime(9999, 7, 1)
A:pandas.tests.io.test_stata.expected[4][2]->datetime(2262, 4, 16)
A:pandas.tests.io.test_stata.expected[4][3]expected[4][4]->datetime(2262, 4, 1)
A:pandas.tests.io.test_stata.expected[4][5]expected[4][6]->datetime(2262, 1, 1)
A:pandas.tests.io.test_stata.expected[5][2]expected[5][3]expected[5][4]->datetime(1677, 10, 1)
A:pandas.tests.io.test_stata.expected[5][5]expected[5][6]->datetime(1678, 1, 1)
A:pandas.tests.io.test_stata.no_conversion->read_stata(self.dta15_117, convert_dates=True)
A:pandas.tests.io.test_stata.conversion->read_stata(self.dta15_117, convert_dates=True, preserve_dtypes=False)
A:pandas.tests.io.test_stata.dropped->read_stata(self.dta15_117, convert_dates=True, columns=columns)
A:pandas.tests.io.test_stata.reordered->read_stata(self.dta15_117, convert_dates=True, columns=columns)
A:pandas.tests.io.test_stata.expected['incompletely_labeled']->expected['incompletely_labeled'].apply(str).apply(str)
A:pandas.tests.io.test_stata.expected['unlabeled']->expected['unlabeled'].apply(str).apply(str)
A:pandas.tests.io.test_stata.res->self.read_dta(path).set_index('index')
A:pandas.tests.io.test_stata.parsed.index->numpy.arange(parsed.shape[0])
A:pandas.tests.io.test_stata.cat->pandas.Categorical(['a', 'β', 'ĉ'], ordered=True)
A:pandas.tests.io.test_stata.parsed_unordered->read_stata(file, order_categoricals=False)
A:pandas.tests.io.test_stata.fname->getattr(self, file)
A:pandas.tests.io.test_stata.itr->read_stata(fname, iterator=True, convert_dates=convert_dates, convert_categoricals=convert_categoricals)
A:pandas.tests.io.test_stata.chunk->read_stata(fname, iterator=True, convert_dates=convert_dates, convert_categoricals=convert_categoricals).read(chunksize, columns=columns)
A:pandas.tests.io.test_stata.from_chunks->pandas.concat(itr)
A:pandas.tests.io.test_stata.read_labels->sr.variable_labels()
A:pandas.tests.io.test_stata.reread->read_stata(path)
A:pandas.tests.io.test_stata.direct->read_stata(path, convert_dates=True)
A:pandas.tests.io.test_stata.dates_idx->pandas.DataFrame({'nums': [1.0, 2.0, 3.0], 'strs': ['apple', 'banana', 'cherry'], 'dates': dates}).columns.tolist().index('dates')
A:pandas.tests.io.test_stata.dates->pandas.date_range('1-1-1990', periods=3, tz='Asia/Hong_Kong')
A:pandas.tests.io.test_stata.original[col]->original[col].astype(np.float32).astype(np.float32)
A:pandas.tests.io.test_stata.original['ColumnTooBig']->original['ColumnTooBig'].astype(np.float64).astype(np.float64)
A:pandas.tests.io.test_stata.result->pandas._testing.round_trip_localpath(df.to_stata, reader)
A:pandas.tests.io.test_stata.df['A']->df['A'].astype('category').astype('category')
A:pandas.tests.io.test_stata.value_labels->dta_iter.value_labels()
A:pandas.tests.io.test_stata.original['int8']->Series(original['int8'], dtype=np.int8)
A:pandas.tests.io.test_stata.original['int16']->Series(original['int16'], dtype=np.int16)
A:pandas.tests.io.test_stata.original['int32']->original['int32'].astype(np.int32).astype(np.int32)
A:pandas.tests.io.test_stata.original['float32']->Series(original['float32'], dtype=np.float32)
A:pandas.tests.io.test_stata.copy->pandas.DataFrame({'nums': [1.0, 2.0, 3.0], 'strs': ['apple', 'banana', 'cherry'], 'dates': dates}).copy()
A:pandas.tests.io.test_stata.bio->io.BytesIO()
A:pandas.tests.io.test_stata.unicode_df->self.read_dta(self.dta25_118)
A:pandas.tests.io.test_stata.output->DataFrame([['pandas'] * 2, ['þâÑÐÅ§'] * 2], columns=['var_str', 'var_strl'])
A:pandas.tests.io.test_stata.output.number->DataFrame([['pandas'] * 2, ['þâÑÐÅ§'] * 2], columns=['var_str', 'var_strl']).number.astype('int32')
A:pandas.tests.io.test_stata.content->read_stata(path).read()
A:pandas.tests.io.test_stata.data->pandas.DataFrame([[1.0, 1, 'ᴬ', 'ᴀ relatively long ŝtring'], [2.0, 2, 'ᴮ', ''], [3.0, 3, 'ᴰ', None]], columns=['a', 'β', 'ĉ', 'strls'])
A:pandas.tests.io.test_stata.data['β']->data['β'].astype(np.int32).astype(np.int32)
A:pandas.tests.io.test_stata.writer->StataWriterUTF8(path, data, data_label=data_label, convert_strl=['strls'], variable_labels=variable_labels, write_index=False, version=version)
A:pandas.tests.io.test_stata.data['strls']->data['strls'].fillna('').fillna('')
A:pandas.tests.io.test_stata.reread_to_stata->read_stata(path)
pandas.tests.io.test_stata.TestStata
pandas.tests.io.test_stata.TestStata.read_csv(self,file)
pandas.tests.io.test_stata.TestStata.read_dta(self,file)
pandas.tests.io.test_stata.TestStata.setup_method(self,datapath)
pandas.tests.io.test_stata.TestStata.test_105(self)
pandas.tests.io.test_stata.TestStata.test_all_none_exception(self,version)
pandas.tests.io.test_stata.TestStata.test_big_dates(self)
pandas.tests.io.test_stata.TestStata.test_bool_uint(self,byteorder,version)
pandas.tests.io.test_stata.TestStata.test_categorical_order(self,file)
pandas.tests.io.test_stata.TestStata.test_categorical_ordering(self,file)
pandas.tests.io.test_stata.TestStata.test_categorical_sorting(self,file)
pandas.tests.io.test_stata.TestStata.test_categorical_warnings_and_errors(self)
pandas.tests.io.test_stata.TestStata.test_categorical_with_stata_missing_values(self,version)
pandas.tests.io.test_stata.TestStata.test_categorical_writing(self,version)
pandas.tests.io.test_stata.TestStata.test_convert_strl_name_swap(self)
pandas.tests.io.test_stata.TestStata.test_date_export_formats(self)
pandas.tests.io.test_stata.TestStata.test_date_parsing_ignores_format_details(self,column)
pandas.tests.io.test_stata.TestStata.test_dates_invalid_column(self)
pandas.tests.io.test_stata.TestStata.test_default_date_conversion(self)
pandas.tests.io.test_stata.TestStata.test_drop_column(self)
pandas.tests.io.test_stata.TestStata.test_dtype_conversion(self)
pandas.tests.io.test_stata.TestStata.test_encoding(self,version)
pandas.tests.io.test_stata.TestStata.test_encoding_latin1_118(self)
pandas.tests.io.test_stata.TestStata.test_excessively_long_string(self)
pandas.tests.io.test_stata.TestStata.test_gzip_writing(self)
pandas.tests.io.test_stata.TestStata.test_invalid_date_conversion(self)
pandas.tests.io.test_stata.TestStata.test_invalid_file_not_written(self,version)
pandas.tests.io.test_stata.TestStata.test_invalid_timestamp(self,version)
pandas.tests.io.test_stata.TestStata.test_invalid_variable_label_encoding(self,version,mixed_frame)
pandas.tests.io.test_stata.TestStata.test_invalid_variable_labels(self,version,mixed_frame)
pandas.tests.io.test_stata.TestStata.test_iterator(self)
pandas.tests.io.test_stata.TestStata.test_large_value_conversion(self)
pandas.tests.io.test_stata.TestStata.test_minimal_size_col(self)
pandas.tests.io.test_stata.TestStata.test_missing_value_conversion(self,file)
pandas.tests.io.test_stata.TestStata.test_missing_value_generator(self)
pandas.tests.io.test_stata.TestStata.test_mixed_string_strl(self)
pandas.tests.io.test_stata.TestStata.test_nan_to_missing_value(self,version)
pandas.tests.io.test_stata.TestStata.test_no_index(self)
pandas.tests.io.test_stata.TestStata.test_nonfile_writing(self,version)
pandas.tests.io.test_stata.TestStata.test_numeric_column_names(self)
pandas.tests.io.test_stata.TestStata.test_out_of_range_double(self)
pandas.tests.io.test_stata.TestStata.test_out_of_range_float(self)
pandas.tests.io.test_stata.TestStata.test_path_pathlib(self)
pandas.tests.io.test_stata.TestStata.test_pickle_path_localpath(self)
pandas.tests.io.test_stata.TestStata.test_read_chunks_115(self,file,chunksize,convert_categoricals,convert_dates)
pandas.tests.io.test_stata.TestStata.test_read_chunks_117(self,file,chunksize,convert_categoricals,convert_dates)
pandas.tests.io.test_stata.TestStata.test_read_chunks_columns(self)
pandas.tests.io.test_stata.TestStata.test_read_dta1(self,file)
pandas.tests.io.test_stata.TestStata.test_read_dta12(self)
pandas.tests.io.test_stata.TestStata.test_read_dta18(self)
pandas.tests.io.test_stata.TestStata.test_read_dta2(self)
pandas.tests.io.test_stata.TestStata.test_read_dta3(self,file)
pandas.tests.io.test_stata.TestStata.test_read_dta4(self,file)
pandas.tests.io.test_stata.TestStata.test_read_empty_dta(self,version)
pandas.tests.io.test_stata.TestStata.test_read_write_dta10(self,version)
pandas.tests.io.test_stata.TestStata.test_read_write_dta11(self)
pandas.tests.io.test_stata.TestStata.test_read_write_dta12(self,version)
pandas.tests.io.test_stata.TestStata.test_read_write_dta13(self)
pandas.tests.io.test_stata.TestStata.test_read_write_dta5(self)
pandas.tests.io.test_stata.TestStata.test_read_write_reread_dta14(self,file,parsed_114,version)
pandas.tests.io.test_stata.TestStata.test_read_write_reread_dta15(self,file)
pandas.tests.io.test_stata.TestStata.test_repeated_column_labels(self)
pandas.tests.io.test_stata.TestStata.test_set_index(self)
pandas.tests.io.test_stata.TestStata.test_stata_111(self)
pandas.tests.io.test_stata.TestStata.test_stata_119(self)
pandas.tests.io.test_stata.TestStata.test_stata_doc_examples(self)
pandas.tests.io.test_stata.TestStata.test_string_no_dates(self)
pandas.tests.io.test_stata.TestStata.test_strl_latin1(self)
pandas.tests.io.test_stata.TestStata.test_timestamp_and_label(self,version)
pandas.tests.io.test_stata.TestStata.test_unicode_dta_118(self)
pandas.tests.io.test_stata.TestStata.test_unsupported_datetype(self)
pandas.tests.io.test_stata.TestStata.test_unsupported_type(self)
pandas.tests.io.test_stata.TestStata.test_utf8_writer(self,version)
pandas.tests.io.test_stata.TestStata.test_value_labels_iterator(self,write_index)
pandas.tests.io.test_stata.TestStata.test_value_labels_old_format(self)
pandas.tests.io.test_stata.TestStata.test_variable_labels(self)
pandas.tests.io.test_stata.TestStata.test_write_dta6(self)
pandas.tests.io.test_stata.TestStata.test_write_missing_strings(self)
pandas.tests.io.test_stata.TestStata.test_write_preserves_original(self)
pandas.tests.io.test_stata.TestStata.test_write_variable_label_errors(self,mixed_frame)
pandas.tests.io.test_stata.TestStata.test_write_variable_labels(self,version,mixed_frame)
pandas.tests.io.test_stata.TestStata.test_writer_117(self)
pandas.tests.io.test_stata.TestStata.test_writer_118_exceptions(self)
pandas.tests.io.test_stata.dirpath(datapath)
pandas.tests.io.test_stata.mixed_frame()
pandas.tests.io.test_stata.parsed_114(dirpath)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/test_compression.py----------------------------------------
A:pandas.tests.io.test_compression.compressed_size->os.path.getsize(path)
A:pandas.tests.io.test_compression.uncompressed_size->os.path.getsize(path)
A:pandas.tests.io.test_compression.(f, handles)->pandas.io.common.get_handle(path, 'w', compression=compression_only)
A:pandas.tests.io.test_compression.input->pandas.Series([0, 5, -2, 10], name='X')
A:pandas.tests.io.test_compression.output->read_method(path, compression=compression_only, **read_kwargs)
A:pandas.tests.io.test_compression.df->pandas.DataFrame(100 * [[0.123456, 0.234567, 0.567567], [12.32112, 123123.2, 321321.2]], columns=['X', 'Y', 'Z'])
A:pandas.tests.io.test_compression.code->textwrap.dedent("\n        import sys\n        import pytest\n        sys.modules['lzma'] = None\n        import pandas\n        df = pandas.DataFrame()\n        with pytest.raises(RuntimeError, match='lzma module'):\n            df.to_csv('foo.csv', compression='xz')\n        ")
pandas.tests.io.test_compression.test_compression_size(obj,method,compression_only)
pandas.tests.io.test_compression.test_compression_size_fh(obj,method,compression_only)
pandas.tests.io.test_compression.test_compression_warning(compression_only)
pandas.tests.io.test_compression.test_dataframe_compression_defaults_to_infer(write_method,write_kwargs,read_method,compression_only)
pandas.tests.io.test_compression.test_series_compression_defaults_to_infer(write_method,write_kwargs,read_method,read_kwargs,compression_only)
pandas.tests.io.test_compression.test_with_missing_lzma()
pandas.tests.io.test_compression.test_with_missing_lzma_runtime()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/test_html.py----------------------------------------
A:pandas.tests.io.test_html.HERE->os.path.dirname(__file__)
A:pandas.tests.io.test_html.both_frames->all(map(lambda x, y: isinstance(x, DataFrame) and isinstance(y, DataFrame), list1, list2))
A:pandas.tests.io.test_html.filename->datapath('io', 'data', 'html', 'valid_markup.html')
A:pandas.tests.io.test_html.dfs_lxml->read_html(filename, index_col=0, flavor=['lxml'])
A:pandas.tests.io.test_html.dfs_bs4->read_html(filename, index_col=0, flavor=['bs4'])
A:pandas.tests.io.test_html.self.spam_data->datapath('io', 'data', 'html', 'spam.html')
A:pandas.tests.io.test_html.self.banklist_data->datapath('io', 'data', 'html', 'banklist.html')
A:pandas.tests.io.test_html.self.read_html->partial(read_html, flavor=flavor)
A:pandas.tests.io.test_html.df->DataFrame(np.random.randn(10, 4), index=rng)
A:pandas.tests.io.test_html.out->DataFrame(np.random.randn(10, 4), index=rng).to_html()
A:pandas.tests.io.test_html.df1->self.read_html(f, '.*Water.*')
A:pandas.tests.io.test_html.df2->self.read_html(f, 'Unit')
A:pandas.tests.io.test_html.dfs->self.read_html(data, displayed_only=displayed_only)
A:pandas.tests.io.test_html.data1->data_template.format(footer='')
A:pandas.tests.io.test_html.data2->data_template.format(footer='<tr><td>footA</td><th>footB</th></tr>')
A:pandas.tests.io.test_html.data->StringIO('<html>\n          <body>\n            <table>\n              <tr>\n                <td>\n                  foo\n                  <span style="display:none;text-align:center">bar</span>\n                  <span style="display:none">baz</span>\n                  <span style="display: none">qux</span>\n                </td>\n              </tr>\n            </table>\n            <table style="display: none">\n              <tr>\n                <td>foo</td>\n              </tr>\n            </table>\n          </body>\n        </html>')
A:pandas.tests.io.test_html.result->DataFrame(np.random.randn(10, 4), index=rng).to_html()
A:pandas.tests.io.test_html.expected->DataFrame(data=[[1, 2]], columns=columns)
A:pandas.tests.io.test_html.expected1->DataFrame(data=[['bodyA', 'bodyB']], columns=['A', 'B'])
A:pandas.tests.io.test_html.expected2->DataFrame(data=[['bodyA', 'bodyB'], ['footA', 'footB']], columns=['A', 'B'])
A:pandas.tests.io.test_html.ground_truth->read_csv(datapath('io', 'data', 'csv', 'banklist.csv'), converters={'Updated Date': Timestamp, 'Closing Date': Timestamp})
A:pandas.tests.io.test_html.dfnew->DataFrame(np.random.randn(10, 4), index=rng).applymap(try_remove_ws).replace(old, new)
A:pandas.tests.io.test_html.gtnew->read_csv(datapath('io', 'data', 'csv', 'banklist.csv'), converters={'Updated Date': Timestamp, 'Closing Date': Timestamp}).applymap(try_remove_ws)
A:pandas.tests.io.test_html.converted->DataFrame(np.random.randn(10, 4), index=rng).applymap(try_remove_ws).replace(old, new)._convert(datetime=True, numeric=True)
A:pandas.tests.io.test_html.converted[date_cols]->converted[date_cols]._convert(datetime=True, coerce=True)._convert(datetime=True, coerce=True)
A:pandas.tests.io.test_html.raw_text->f.read()
A:pandas.tests.io.test_html.columns->MultiIndex(levels=[['A', 'B'], ['a', 'b']], codes=[[0, 1], [0, 1]])
A:pandas.tests.io.test_html.res->self.read_html(df.to_html(), parse_dates={'datetime': [1, 2]}, index_col=1)
A:pandas.tests.io.test_html.raw_dates->Series(date_range('1/1/2001', periods=10))
A:pandas.tests.io.test_html.newdf->DataFrame({'datetime': raw_dates})
A:pandas.tests.io.test_html.expected_df->DataFrame(data=[('Hillary', 68, 'D'), ('Bernie', 74, 'D'), ('Donald', 69, 'R')])
A:pandas.tests.io.test_html.html->DataFrame(data=[('Hillary', 68, 'D'), ('Bernie', 74, 'D'), ('Donald', 69, 'R')]).to_html(index=False)
A:pandas.tests.io.test_html.banklist_data->datapath('io', 'data', 'html', 'banklist.html')
A:pandas.tests.io.test_html.rng->date_range('2000-01-01', periods=10)
A:pandas.tests.io.test_html.base_path->os.path.basename(html_encoding_file)
A:pandas.tests.io.test_html.(_, encoding)->root.split('_')
A:pandas.tests.io.test_html.from_string->self.read_html(fobj.read(), encoding=encoding, index_col=0).pop()
A:pandas.tests.io.test_html.from_file_like->self.read_html(BytesIO(fobj.read()), encoding=encoding, index_col=0).pop()
A:pandas.tests.io.test_html.from_filename->self.read_html(html_encoding_file, encoding=encoding, index_col=0).pop()
A:pandas.tests.io.test_html.bad->MockFile('<table><tr><td>spam<foobr />eggs</td></tr></table>')
A:pandas.tests.io.test_html.good->MockFile('<table><tr><td>spam<br />eggs</td></tr></table>')
A:pandas.tests.io.test_html.helper_thread1->ErrorThread(target=self.read_html, args=(filename,))
A:pandas.tests.io.test_html.helper_thread2->ErrorThread(target=self.read_html, args=(filename,))
pandas.tests.io.test_html.TestReadHtml
pandas.tests.io.test_html.TestReadHtml._bank_data(self,*args,**kwargs)
pandas.tests.io.test_html.TestReadHtml.set_defaults(self,flavor,request)
pandas.tests.io.test_html.TestReadHtml.set_files(self,datapath)
pandas.tests.io.test_html.TestReadHtml.test_bad_url_protocol(self)
pandas.tests.io.test_html.TestReadHtml.test_banklist(self)
pandas.tests.io.test_html.TestReadHtml.test_banklist_header(self,datapath)
pandas.tests.io.test_html.TestReadHtml.test_banklist_no_match(self)
pandas.tests.io.test_html.TestReadHtml.test_banklist_url(self)
pandas.tests.io.test_html.TestReadHtml.test_bool_header_arg(self)
pandas.tests.io.test_html.TestReadHtml.test_colspan_rowspan_1(self)
pandas.tests.io.test_html.TestReadHtml.test_colspan_rowspan_both_not_1(self)
pandas.tests.io.test_html.TestReadHtml.test_colspan_rowspan_copy_values(self)
pandas.tests.io.test_html.TestReadHtml.test_converters(self)
pandas.tests.io.test_html.TestReadHtml.test_decimal_rows(self)
pandas.tests.io.test_html.TestReadHtml.test_different_number_of_cols(self)
pandas.tests.io.test_html.TestReadHtml.test_displayed_only(self,displayed_only,exp0,exp1)
pandas.tests.io.test_html.TestReadHtml.test_empty_tables(self)
pandas.tests.io.test_html.TestReadHtml.test_encode(self,html_encoding_file)
pandas.tests.io.test_html.TestReadHtml.test_fallback_success(self,datapath)
pandas.tests.io.test_html.TestReadHtml.test_file_like(self)
pandas.tests.io.test_html.TestReadHtml.test_file_url(self)
pandas.tests.io.test_html.TestReadHtml.test_gold_canyon(self)
pandas.tests.io.test_html.TestReadHtml.test_header_and_index_no_types(self)
pandas.tests.io.test_html.TestReadHtml.test_header_and_index_with_types(self)
pandas.tests.io.test_html.TestReadHtml.test_header_and_one_column(self)
pandas.tests.io.test_html.TestReadHtml.test_header_inferred_from_rows_with_only_th(self)
pandas.tests.io.test_html.TestReadHtml.test_ignore_empty_rows_when_inferring_header(self)
pandas.tests.io.test_html.TestReadHtml.test_importcheck_thread_safety(self,datapath)
pandas.tests.io.test_html.TestReadHtml.test_index(self)
pandas.tests.io.test_html.TestReadHtml.test_infer_types(self)
pandas.tests.io.test_html.TestReadHtml.test_invalid_table_attrs(self)
pandas.tests.io.test_html.TestReadHtml.test_invalid_url(self)
pandas.tests.io.test_html.TestReadHtml.test_keep_default_na(self)
pandas.tests.io.test_html.TestReadHtml.test_multiindex_header(self)
pandas.tests.io.test_html.TestReadHtml.test_multiindex_header_index(self)
pandas.tests.io.test_html.TestReadHtml.test_multiindex_header_index_skiprows(self)
pandas.tests.io.test_html.TestReadHtml.test_multiindex_header_skiprows(self)
pandas.tests.io.test_html.TestReadHtml.test_multiindex_header_skiprows_tuples(self)
pandas.tests.io.test_html.TestReadHtml.test_multiindex_index(self)
pandas.tests.io.test_html.TestReadHtml.test_multiple_header_rows(self)
pandas.tests.io.test_html.TestReadHtml.test_multiple_matches(self)
pandas.tests.io.test_html.TestReadHtml.test_multiple_tbody(self)
pandas.tests.io.test_html.TestReadHtml.test_na_values(self)
pandas.tests.io.test_html.TestReadHtml.test_negative_skiprows(self)
pandas.tests.io.test_html.TestReadHtml.test_parse_dates_combine(self)
pandas.tests.io.test_html.TestReadHtml.test_parse_dates_list(self)
pandas.tests.io.test_html.TestReadHtml.test_parse_failure_rewinds(self)
pandas.tests.io.test_html.TestReadHtml.test_parse_failure_unseekable(self)
pandas.tests.io.test_html.TestReadHtml.test_parse_header_of_non_string_column(self)
pandas.tests.io.test_html.TestReadHtml.test_parser_error_on_empty_header_row(self)
pandas.tests.io.test_html.TestReadHtml.test_preserve_empty_rows(self)
pandas.tests.io.test_html.TestReadHtml.test_python_docs_table(self)
pandas.tests.io.test_html.TestReadHtml.test_regex_idempotency(self)
pandas.tests.io.test_html.TestReadHtml.test_rowspan_at_end_of_row(self)
pandas.tests.io.test_html.TestReadHtml.test_rowspan_only_rows(self)
pandas.tests.io.test_html.TestReadHtml.test_skiprows_int(self)
pandas.tests.io.test_html.TestReadHtml.test_skiprows_invalid(self)
pandas.tests.io.test_html.TestReadHtml.test_skiprows_list(self)
pandas.tests.io.test_html.TestReadHtml.test_skiprows_ndarray(self)
pandas.tests.io.test_html.TestReadHtml.test_skiprows_range(self)
pandas.tests.io.test_html.TestReadHtml.test_skiprows_set(self)
pandas.tests.io.test_html.TestReadHtml.test_skiprows_slice(self)
pandas.tests.io.test_html.TestReadHtml.test_skiprows_slice_long(self)
pandas.tests.io.test_html.TestReadHtml.test_skiprows_slice_short(self)
pandas.tests.io.test_html.TestReadHtml.test_spam(self)
pandas.tests.io.test_html.TestReadHtml.test_spam_header(self)
pandas.tests.io.test_html.TestReadHtml.test_spam_no_match(self)
pandas.tests.io.test_html.TestReadHtml.test_spam_url(self)
pandas.tests.io.test_html.TestReadHtml.test_string(self)
pandas.tests.io.test_html.TestReadHtml.test_string_io(self)
pandas.tests.io.test_html.TestReadHtml.test_tfoot_read(self)
pandas.tests.io.test_html.TestReadHtml.test_thead_without_tr(self)
pandas.tests.io.test_html.TestReadHtml.test_to_html_compat(self)
pandas.tests.io.test_html.TestReadHtml.test_to_html_timestamp(self)
pandas.tests.io.test_html.TestReadHtml.test_wikipedia_states_multiindex(self,datapath)
pandas.tests.io.test_html.TestReadHtml.test_wikipedia_states_table(self,datapath)
pandas.tests.io.test_html.TestReadHtml.test_works_on_valid_markup(self,datapath)
pandas.tests.io.test_html.assert_framelist_equal(list1,list2,*args,**kwargs)
pandas.tests.io.test_html.html_encoding_file(request,datapath)
pandas.tests.io.test_html.test_bs4_version_fails(monkeypatch,datapath)
pandas.tests.io.test_html.test_invalid_flavor()
pandas.tests.io.test_html.test_same_ordering(datapath)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/test_orc.py----------------------------------------
A:pandas.tests.io.test_orc.pytestmark->pytest.mark.filterwarnings('ignore:RangeIndex.* is deprecated:DeprecationWarning')
A:pandas.tests.io.test_orc.expected->pandas.DataFrame.from_dict(data)
A:pandas.tests.io.test_orc.expected[colname]->pandas.Series(dtype=dtype)
A:pandas.tests.io.test_orc.inputfile->os.path.join(dirpath, 'TestOrcFile.testSnappy.orc')
A:pandas.tests.io.test_orc.got->read_orc(inputfile, columns=data.keys())
pandas.tests.io.test_orc.dirpath(datapath)
pandas.tests.io.test_orc.test_orc_reader_basic(dirpath)
pandas.tests.io.test_orc.test_orc_reader_date_high(dirpath)
pandas.tests.io.test_orc.test_orc_reader_date_low(dirpath)
pandas.tests.io.test_orc.test_orc_reader_decimal(dirpath)
pandas.tests.io.test_orc.test_orc_reader_empty(dirpath)
pandas.tests.io.test_orc.test_orc_reader_snappy_compressed(dirpath)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/test_gbq.py----------------------------------------
A:pandas.tests.io.test_gbq.api_exceptions->pytest.importorskip('google.api_core.exceptions')
A:pandas.tests.io.test_gbq.bigquery->pytest.importorskip('google.cloud.bigquery')
A:pandas.tests.io.test_gbq.service_account->pytest.importorskip('google.oauth2.service_account')
A:pandas.tests.io.test_gbq.pandas_gbq->pytest.importorskip('pandas_gbq')
A:pandas.tests.io.test_gbq.VERSION->platform.python_version()
A:pandas.tests.io.test_gbq.private_key_path->_get_private_key_path()
A:pandas.tests.io.test_gbq.project_id->_get_project_id()
A:pandas.tests.io.test_gbq.credentials->_get_credentials()
A:pandas.tests.io.test_gbq.bools->numpy.random.randint(2, size=(1, test_size)).astype(bool)
A:pandas.tests.io.test_gbq.flts->numpy.random.randn(1, test_size)
A:pandas.tests.io.test_gbq.ints->numpy.random.randint(1, 10, size=(1, test_size))
A:pandas.tests.io.test_gbq.strs->numpy.random.randint(1, 10, size=(1, test_size)).astype(str)
A:pandas.tests.io.test_gbq.self.client->_get_client()
A:pandas.tests.io.test_gbq.self.dataset->self.client.dataset(dataset_id)
A:pandas.tests.io.test_gbq.table_name->generate_rand_str()
A:pandas.tests.io.test_gbq.df->make_mixed_dataframe_v2(test_size)
A:pandas.tests.io.test_gbq.result->pandas.read_gbq(f'SELECT COUNT(*) AS num_rows FROM {destination_table}', project_id=_get_project_id(), credentials=_get_credentials(), dialect='standard')
pandas.tests.io.test_gbq.TestToGBQIntegrationWithServiceAccountKeyPath
pandas.tests.io.test_gbq.TestToGBQIntegrationWithServiceAccountKeyPath.gbq_dataset(self)
pandas.tests.io.test_gbq.TestToGBQIntegrationWithServiceAccountKeyPath.test_gbq_if_exists(self,if_exists,expected_num_rows,expectation,gbq_dataset)
pandas.tests.io.test_gbq.TestToGBQIntegrationWithServiceAccountKeyPath.test_roundtrip(self,gbq_dataset)
pandas.tests.io.test_gbq._get_client()
pandas.tests.io.test_gbq._get_credentials()
pandas.tests.io.test_gbq._get_private_key_path()
pandas.tests.io.test_gbq._get_project_id()
pandas.tests.io.test_gbq._in_travis_environment()
pandas.tests.io.test_gbq._skip_if_no_private_key_path()
pandas.tests.io.test_gbq._skip_if_no_project_id()
pandas.tests.io.test_gbq.generate_rand_str(length:int=10)->str
pandas.tests.io.test_gbq.make_mixed_dataframe_v2(test_size)
pandas.tests.io.test_gbq.test_read_gbq_progress_bar_type_kwarg(monkeypatch,progress_bar)
pandas.tests.io.test_gbq.test_read_gbq_with_new_kwargs(monkeypatch)
pandas.tests.io.test_gbq.test_read_gbq_without_deprecated_kwargs(monkeypatch)
pandas.tests.io.test_gbq.test_read_gbq_without_new_kwargs(monkeypatch)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/test_gcs.py----------------------------------------
A:pandas.tests.io.test_gcs.df1->DataFrame({'int': [1, 3], 'float': [2.0, np.nan], 'str': ['t', 's'], 'dt': date_range('2018-06-18', periods=2)})
A:pandas.tests.io.test_gcs.df2->read_csv('gs://test/test.csv', parse_dates=['dt'], index_col=0)
A:pandas.tests.io.test_gcs.s->StringIO()
pandas.tests.io.test_gcs.test_gcs_not_present_exception()
pandas.tests.io.test_gcs.test_is_gcs_url()
pandas.tests.io.test_gcs.test_read_csv_gcs(monkeypatch)
pandas.tests.io.test_gcs.test_to_csv_gcs(monkeypatch)
pandas.tests.io.test_gcs.test_to_parquet_gcs_new_file(monkeypatch,tmpdir)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/test_common.py----------------------------------------
A:pandas.tests.io.test_common.HERE->os.path.abspath(os.path.dirname(__file__))
A:pandas.tests.io.test_common.expanded_name->pandas.io.common._expand_user(filename)
A:pandas.tests.io.test_common.rel_path->pandas.io.common.stringify_path(Path('.'))
A:pandas.tests.io.test_common.redundant_path->pandas.io.common.stringify_path(Path('foo//bar'))
A:pandas.tests.io.test_common.path->datapath(*path)
A:pandas.tests.io.test_common.abs_path->os.path.abspath(path)
A:pandas.tests.io.test_common.lpath->LocalPath(path)
A:pandas.tests.io.test_common.p->CustomFSPath('foo/bar.csv')
A:pandas.tests.io.test_common.result->pandas.read_hdf(fspath, key='bar')
A:pandas.tests.io.test_common.compression->pandas.io.common.infer_compression(path, compression='infer')
A:pandas.tests.io.test_common.(filepath_or_buffer, _, _, should_close)->pandas.io.common.get_filepath_or_buffer(input_buffer)
A:pandas.tests.io.test_common.input_buffer->StringIO()
A:pandas.tests.io.test_common.reader->pandas.read_csv(StringIO(self.data1), chunksize=1)
A:pandas.tests.io.test_common.expected->pandas.read_hdf(string, key='bar')
A:pandas.tests.io.test_common.it->pandas.read_csv(StringIO(self.data1), chunksize=1)
A:pandas.tests.io.test_common.first->next(it)
A:pandas.tests.io.test_common.msg1->"File (b')?.+does_not_exist\\.{}'? does not exist".format(fn_ext)
A:pandas.tests.io.test_common.mypath->CustomFSPath(fspath)
A:pandas.tests.io.test_common.p1->pandas._testing.ensure_clean('string')
A:pandas.tests.io.test_common.p2->pandas._testing.ensure_clean('fspath')
A:pandas.tests.io.test_common.df->pandas._testing.makeDataFrame()
A:pandas.tests.io.test_common.writer->getattr(df, writer_name)
A:pandas.tests.io.test_common.non_file->StringIO('I am not a file')
A:pandas.tests.io.test_common.target->open(mmap_file, 'r')
A:pandas.tests.io.test_common.wrapper->pandas.io.common._MMapWrapper(target)
A:pandas.tests.io.test_common.attrs->dir(wrapper.mmap)
A:pandas.tests.io.test_common.lines->open(mmap_file, 'r').readlines()
A:pandas.tests.io.test_common.next_line->next(wrapper)
pandas.tests.io.test_common.CustomFSPath(self,path)
pandas.tests.io.test_common.CustomFSPath.__fspath__(self)
pandas.tests.io.test_common.CustomFSPath.__init__(self,path)
pandas.tests.io.test_common.TestCommonIOCapabilities
pandas.tests.io.test_common.TestCommonIOCapabilities.test_expand_user(self)
pandas.tests.io.test_common.TestCommonIOCapabilities.test_expand_user_normal_path(self)
pandas.tests.io.test_common.TestCommonIOCapabilities.test_get_filepath_or_buffer_with_buffer(self)
pandas.tests.io.test_common.TestCommonIOCapabilities.test_get_filepath_or_buffer_with_path(self)
pandas.tests.io.test_common.TestCommonIOCapabilities.test_infer_compression_from_path(self,extension,expected,path_type)
pandas.tests.io.test_common.TestCommonIOCapabilities.test_iterator(self)
pandas.tests.io.test_common.TestCommonIOCapabilities.test_read_expands_user_home_dir(self,reader,module,error_class,fn_ext,monkeypatch)
pandas.tests.io.test_common.TestCommonIOCapabilities.test_read_fspath_all(self,reader,module,path,datapath)
pandas.tests.io.test_common.TestCommonIOCapabilities.test_read_non_existant(self,reader,module,error_class,fn_ext)
pandas.tests.io.test_common.TestCommonIOCapabilities.test_stringify_path_fspath(self)
pandas.tests.io.test_common.TestCommonIOCapabilities.test_stringify_path_localpath(self)
pandas.tests.io.test_common.TestCommonIOCapabilities.test_stringify_path_pathlib(self)
pandas.tests.io.test_common.TestCommonIOCapabilities.test_write_fspath_all(self,writer_name,writer_kwargs,module)
pandas.tests.io.test_common.TestCommonIOCapabilities.test_write_fspath_hdf5(self)
pandas.tests.io.test_common.TestMMapWrapper
pandas.tests.io.test_common.TestMMapWrapper.test_constructor_bad_file(self,mmap_file)
pandas.tests.io.test_common.TestMMapWrapper.test_get_attr(self,mmap_file)
pandas.tests.io.test_common.TestMMapWrapper.test_next(self,mmap_file)
pandas.tests.io.test_common.TestMMapWrapper.test_unknown_engine(self)
pandas.tests.io.test_common.mmap_file(datapath)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/test_date_converters.py----------------------------------------
A:pandas.tests.io.test_date_converters.dates->numpy.array(['2007/1/3', '2008/2/4'], dtype=object)
A:pandas.tests.io.test_date_converters.times->numpy.array(['05:07:09', '06:08:00'], dtype=object)
A:pandas.tests.io.test_date_converters.expected->numpy.array([datetime(2007, 1, 3, 5, 7, 9), datetime(2008, 2, 4, 6, 8, 0)])
A:pandas.tests.io.test_date_converters.result->pandas.io.date_converters.parse_all_fields(years, months, days, hours, minutes, seconds)
A:pandas.tests.io.test_date_converters.days->numpy.array([3, 4])
A:pandas.tests.io.test_date_converters.months->numpy.array([1, 2])
A:pandas.tests.io.test_date_converters.years->numpy.array([2007, 2008])
A:pandas.tests.io.test_date_converters.hours->numpy.array([5, 6])
A:pandas.tests.io.test_date_converters.minutes->numpy.array([7, 8])
A:pandas.tests.io.test_date_converters.seconds->numpy.array([9, 0])
pandas.tests.io.test_date_converters.test_parse_all_fields()
pandas.tests.io.test_date_converters.test_parse_date_fields()
pandas.tests.io.test_date_converters.test_parse_date_time()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/generate_legacy_storage_files.py----------------------------------------
A:pandas.tests.io.generate_legacy_storage_files._loose_version->LooseVersion(pandas.__version__)
A:pandas.tests.io.generate_legacy_storage_files.arr->numpy.arange(15, dtype=np.float64)
A:pandas.tests.io.generate_legacy_storage_files.bseries->Series(SparseArray(arr, kind='block'), index=date_index)
A:pandas.tests.io.generate_legacy_storage_files.date_index->bdate_range('1/1/2011', periods=len(arr))
A:pandas.tests.io.generate_legacy_storage_files.dates->bdate_range('1/1/2011', periods=10)
A:pandas.tests.io.generate_legacy_storage_files.scalars->dict(timestamp=Timestamp('20130101'), period=Period('2012', 'M'))
A:pandas.tests.io.generate_legacy_storage_files.index->dict(int=Index(np.arange(10)), date=date_range('20130101', periods=10), period=period_range('2013-01-01', freq='M', periods=10), float=Index(np.arange(10, dtype=np.float64)), uint=Index(np.arange(10, dtype=np.uint64)), timedelta=timedelta_range('00:00:00', freq='30T', periods=10))
A:pandas.tests.io.generate_legacy_storage_files.index['range']->RangeIndex(10)
A:pandas.tests.io.generate_legacy_storage_files.index['interval']->interval_range(0, periods=10)
A:pandas.tests.io.generate_legacy_storage_files.mi->dict(reg2=MultiIndex.from_tuples(tuple(zip(*[['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'], ['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two']])), names=['first', 'second']))
A:pandas.tests.io.generate_legacy_storage_files.series->dict(float=Series(data['A']), int=Series(data['B']), mixed=Series(data['E']), ts=Series(np.arange(10).astype(np.int64), index=date_range('20130101', periods=10)), mi=Series(np.arange(5).astype(np.float64), index=MultiIndex.from_tuples(tuple(zip(*[[1, 1, 2, 2, 2], [3, 4, 3, 4, 5]])), names=['one', 'two'])), dup=Series(np.arange(5).astype(np.float64), index=['A', 'B', 'C', 'D', 'A']), cat=Series(Categorical(['foo', 'bar', 'baz'])), dt=Series(date_range('20130101', periods=5)), dt_tz=Series(date_range('20130101', periods=5, tz='US/Eastern')), period=Series([Period('2000Q1')] * 5))
A:pandas.tests.io.generate_legacy_storage_files.mixed_dup_df->DataFrame(data)
A:pandas.tests.io.generate_legacy_storage_files.mixed_dup_df.columns->list('ABCDA')
A:pandas.tests.io.generate_legacy_storage_files.frame->dict(float=DataFrame({'A': series['float'], 'B': series['float'] + 1}), int=DataFrame({'A': series['int'], 'B': series['int'] + 1}), mixed=DataFrame({k: data[k] for k in ['A', 'B', 'C', 'D']}), mi=DataFrame({'A': np.arange(5).astype(np.float64), 'B': np.arange(5).astype(np.int64)}, index=MultiIndex.from_tuples(tuple(zip(*[['bar', 'bar', 'baz', 'baz', 'baz'], ['one', 'two', 'one', 'two', 'three']])), names=['first', 'second'])), dup=DataFrame(np.arange(15).reshape(5, 3).astype(np.float64), columns=['A', 'B', 'A']), cat_onecol=DataFrame({'A': Categorical(['foo', 'bar'])}), cat_and_float=DataFrame({'A': Categorical(['foo', 'bar', 'baz']), 'B': np.arange(3).astype(np.int64)}), mixed_dup=mixed_dup_df, dt_mixed_tzs=DataFrame({'A': Timestamp('20130102', tz='US/Eastern'), 'B': Timestamp('20130603', tz='CET')}, index=range(5)), dt_mixed2_tzs=DataFrame({'A': Timestamp('20130102', tz='US/Eastern'), 'B': Timestamp('20130603', tz='CET'), 'C': Timestamp('20130603', tz='UTC')}, index=range(5)))
A:pandas.tests.io.generate_legacy_storage_files.cat->dict(int8=Categorical(list('abcdefg')), int16=Categorical(np.arange(1000)), int32=Categorical(np.arange(10000)))
A:pandas.tests.io.generate_legacy_storage_files.timestamp->dict(normal=Timestamp('2011-01-01'), nat=NaT, tz=Timestamp('2011-01-01', tz='US/Eastern'))
A:pandas.tests.io.generate_legacy_storage_files.timestamp['freq']->Timestamp('2011-01-01', freq='D')
A:pandas.tests.io.generate_legacy_storage_files.timestamp['both']->Timestamp('2011-01-01', tz='Asia/Tokyo', freq='M')
A:pandas.tests.io.generate_legacy_storage_files.data->create_data()
A:pandas.tests.io.generate_legacy_storage_files.pth->'{0}.pickle'.format(platform_name())
A:pandas.tests.io.generate_legacy_storage_files.fh->open(os.path.join(output_dir, pth), 'wb')
A:pandas.tests.io.generate_legacy_storage_files.output_dir->str(sys.argv[1])
A:pandas.tests.io.generate_legacy_storage_files.storage_type->str(sys.argv[2])
pandas.tests.io.generate_legacy_storage_files._create_sp_frame()
pandas.tests.io.generate_legacy_storage_files._create_sp_series()
pandas.tests.io.generate_legacy_storage_files._create_sp_tsseries()
pandas.tests.io.generate_legacy_storage_files.create_data()
pandas.tests.io.generate_legacy_storage_files.create_pickle_data()
pandas.tests.io.generate_legacy_storage_files.platform_name()
pandas.tests.io.generate_legacy_storage_files.write_legacy_file()
pandas.tests.io.generate_legacy_storage_files.write_legacy_pickles(output_dir)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/conftest.py----------------------------------------
A:pandas.tests.io.conftest.s3fs->pytest.importorskip('s3fs')
A:pandas.tests.io.conftest.boto3->pytest.importorskip('boto3')
A:pandas.tests.io.conftest.moto->pytest.importorskip('moto')
A:pandas.tests.io.conftest.s3->pytest.importorskip('moto').mock_s3()
A:pandas.tests.io.conftest.conn->pytest.importorskip('boto3').resource('s3', region_name='us-east-1')
pandas.tests.io.conftest.jsonl_file(datapath)
pandas.tests.io.conftest.s3_resource(tips_file,jsonl_file)
pandas.tests.io.conftest.salaries_table(datapath)
pandas.tests.io.conftest.tips_file(datapath)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/test_sql.py----------------------------------------
A:pandas.tests.io.test_sql.cur->self.conn.cursor()
A:pandas.tests.io.test_sql.c->self.conn.execute("SELECT name FROM sqlite_master WHERE type='table'")
A:pandas.tests.io.test_sql.meta->sqlalchemy.MetaData(engine2, schema='other')
A:pandas.tests.io.test_sql.table_list->sqlalchemy.MetaData(engine2, schema='other').tables.keys()
A:pandas.tests.io.test_sql.iris_csv_file->datapath(*request.param)
A:pandas.tests.io.test_sql.r->csv.reader(iris_csv)
A:pandas.tests.io.test_sql.self.test_frame1->DataFrame(data, columns=columns)
A:pandas.tests.io.test_sql.df->DataFrame({'From': np.ones(5)})
A:pandas.tests.io.test_sql.df['E']->to_datetime(df['E'])
A:pandas.tests.io.test_sql.self.test_frame3->DataFrame(data, columns=columns)
A:pandas.tests.io.test_sql.result->pandas.io.sql.read_sql('select * from test_table2', self.conn, index_col='Idx')
A:pandas.tests.io.test_sql.iris_frame->pandas.io.sql.read_sql_table('iris', con=self.conn, columns=['SepalLength', 'SepalLength'])
A:pandas.tests.io.test_sql.num_entries->len(self.test_frame1)
A:pandas.tests.io.test_sql.num_rows->self._count_rows('test_frame4')
A:pandas.tests.io.test_sql.iris_results->pandas.io.sql.execute('SELECT * FROM iris', con=self.conn)
A:pandas.tests.io.test_sql.row->pandas._testing.makeTimeDataFrame().iloc[0].values.tolist()
A:pandas.tests.io.test_sql.ix_cols->self._get_index_columns('test_to_sql_saves_index')
A:pandas.tests.io.test_sql.res->pandas.io.sql.execute(query, con=con, cur=cur).fetchall()
A:pandas.tests.io.test_sql.res2->pandas.io.sql.SQLDatabase(engine2, meta=meta).read_table('test_schema_other2')
A:pandas.tests.io.test_sql.self.conn->sqlite3.connect(':memory:')
A:pandas.tests.io.test_sql.s->Series(np.arange(5, dtype='int64'), name='series')
A:pandas.tests.io.test_sql.s2->Series(0.0, dtype=np.float32)
A:pandas.tests.io.test_sql.temp_frame->DataFrame({'one': [1.0, 2.0, 3.0, 4.0], 'two': [4.0, 3.0, 2.0, 1.0]})
A:pandas.tests.io.test_sql.frame->pandas._testing.makeTimeDataFrame()
A:pandas.tests.io.test_sql.create_sql->pandas.io.sql.get_schema(frame, 'test', keys=['A', 'B'])
A:pandas.tests.io.test_sql.float_frame->DataFrame({'a': [1.1, 1.2], 'b': [2.1, 2.2]})
A:pandas.tests.io.test_sql.res1->pandas.io.sql.read_sql_table('test_schema_other2', self.conn, schema='other')
A:pandas.tests.io.test_sql.res3->pandas.io.sql.read_sql_table('test_schema_public_explicit', self.conn, schema='public')
A:pandas.tests.io.test_sql.df2->DataFrame([[1, 2], [3, 4]], columns=['a', weird_name])
A:pandas.tests.io.test_sql.df2['person_name']->df2['person_name'].astype('category').astype('category')
A:pandas.tests.io.test_sql.iris_frame1->pandas.io.sql.read_sql_query('SELECT * FROM iris', self.conn)
A:pandas.tests.io.test_sql.iris_frame2->pandas.io.sql.read_sql('SELECT * FROM iris', self.conn)
A:pandas.tests.io.test_sql.insp->sqlalchemy.engine.reflection.Inspector.from_engine(self.conn)
A:pandas.tests.io.test_sql.ixs->pandas.io.sql.read_sql_query("SELECT * FROM sqlite_master WHERE type = 'index' " + f"AND tbl_name = '{tbl_name}'", self.conn)
A:pandas.tests.io.test_sql.db->pandas.io.sql.SQLiteDatabase(self.conn)
A:pandas.tests.io.test_sql.table->pandas.io.sql.SQLiteTable('test_type', db, frame=df)
A:pandas.tests.io.test_sql.test_frame2->pandas.io.sql.read_sql(table, db_uri)
A:pandas.tests.io.test_sql.test_frame3->pandas.io.sql.read_sql_table(table, db_uri)
A:pandas.tests.io.test_sql.test_frame4->pandas.io.sql.read_sql_query(query, db_uri)
A:pandas.tests.io.test_sql.metadata->sa.MetaData()
A:pandas.tests.io.test_sql.iris->self._make_iris_table_metadata()
A:pandas.tests.io.test_sql.name_text->sqlalchemy.text('select * from iris where name=:name')
A:pandas.tests.io.test_sql.iris_df->pandas.io.sql.read_sql(name_select, self.conn, params={'name': 'Iris-setosa'})
A:pandas.tests.io.test_sql.all_names->set(iris_df['Name'])
A:pandas.tests.io.test_sql.name_select->sqlalchemy.select([iris]).where(iris.c.Name == sqlalchemy.bindparam('name'))
A:pandas.tests.io.test_sql.conn->Session().connection()
A:pandas.tests.io.test_sql.self.__tx->Session().connection().begin()
A:pandas.tests.io.test_sql.self.pandasSQL->pandas.io.sql.SQLiteDatabase(self.conn)
A:pandas.tests.io.test_sql.schema->pandas.io.sql.SQLiteTable('test_type', db, frame=df).sql_schema()
A:pandas.tests.io.test_sql.temp_conn->self.connect()
A:pandas.tests.io.test_sql.pandasSQL->pandas.io.sql.SQLDatabase(temp_conn)
A:pandas.tests.io.test_sql.expected->pandas._testing.makeTimeDataFrame().copy()
A:pandas.tests.io.test_sql.expected['A']->expected['A'].dt.tz_localize(None).dt.tz_localize(None)
A:pandas.tests.io.test_sql.result['A']->to_datetime(result['A'], errors='coerce')
A:pandas.tests.io.test_sql.dates->date_range('2018-01-01', periods=5, freq='6H')
A:pandas.tests.io.test_sql.sqlite_conn->TestSQLiteFallback.connect()
A:pandas.tests.io.test_sql.ref->DataFrame({'From': np.ones(5)}).applymap(lambda _: _.strftime('%H:%M:%S.%f'))
A:pandas.tests.io.test_sql.s1->Series(2 ** 25 + 1, dtype=np.int32)
A:pandas.tests.io.test_sql.df['B']->df['B'].astype('object').astype('object')
A:pandas.tests.io.test_sql.returned_df->pandas.io.sql.read_sql_table(tbl, self.conn)
A:pandas.tests.io.test_sql.foo_data->Session().connection().run_callable(foo)
A:pandas.tests.io.test_sql.Base->sqlalchemy.ext.declarative.declarative_base()
A:pandas.tests.io.test_sql.id->sqlalchemy.Column(sqlalchemy.Integer, primary_key=True)
A:pandas.tests.io.test_sql.spam->sqlalchemy.Column(sqlalchemy.Unicode(30), nullable=False)
A:pandas.tests.io.test_sql.Session->sqlalchemy.orm.session.sessionmaker(bind=self.conn)
A:pandas.tests.io.test_sql.session->Session()
A:pandas.tests.io.test_sql.pymysql->pytest.importorskip('pymysql')
A:pandas.tests.io.test_sql.connection->self.conn.connect()
A:pandas.tests.io.test_sql.trans->self.conn.connect().begin()
A:pandas.tests.io.test_sql.r1->self.conn.connect().execute(proc)
A:pandas.tests.io.test_sql.res4->pandas.io.sql.read_sql_table('test_schema_other', self.conn, schema='other')
A:pandas.tests.io.test_sql.engine2->self.connect()
A:pandas.tests.io.test_sql.pdsql->pandas.io.sql.SQLDatabase(engine2, meta=meta)
A:pandas.tests.io.test_sql.s_buf->StringIO()
A:pandas.tests.io.test_sql.writer->csv.writer(s_buf)
A:pandas.tests.io.test_sql.columns->', '.join((f'"{k}"' for k in keys))
A:pandas.tests.io.test_sql.ix_info->pandas.io.sql.read_sql_query(f'PRAGMA index_info({ix_name})', self.conn)
A:pandas.tests.io.test_sql.recs->self.conn.execute(f'PRAGMA table_info({table})')
A:pandas.tests.io.test_sql.fmt_sql->format_query(ins, *row)
A:pandas.tests.io.test_sql.lines->pandas.io.sql.get_schema(frame, 'test', keys=['A', 'B']).splitlines()
A:pandas.tests.io.test_sql.tokens->l.split(' ')
A:pandas.tests.io.test_sql.frame2->pandas._testing.makeTimeDataFrame().copy()
A:pandas.tests.io.test_sql.frame2['Idx']->new_idx.copy()
A:pandas.tests.io.test_sql.mono_df->DataFrame([1, 2], columns=['c0'])
A:pandas.tests.io.test_sql.the_sum->sum((my_c0[0] for my_c0 in con_x.execute('select * from mono_df')))
A:pandas.tests.io.test_sql.df_if_exists_1->DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})
A:pandas.tests.io.test_sql.df_if_exists_2->DataFrame({'col1': [3, 4, 5], 'col2': ['C', 'D', 'E']})
A:pandas.tests.io.test_sql.chunk_gen->pandas.read_sql_query(sql=query, con=self.conn, chunksize=chunksize, index_col='index')
A:pandas.tests.io.test_sql.chunk_df->next(chunk_gen)
pandas.tests.io.test_sql.MixInBase
pandas.tests.io.test_sql.MixInBase.teardown_method(self,method)
pandas.tests.io.test_sql.MySQLMixIn(MixInBase)
pandas.tests.io.test_sql.MySQLMixIn._close_conn(self)
pandas.tests.io.test_sql.MySQLMixIn._get_all_tables(self)
pandas.tests.io.test_sql.MySQLMixIn.drop_table(self,table_name)
pandas.tests.io.test_sql.PandasSQLTest
pandas.tests.io.test_sql.PandasSQLTest._check_iris_loaded_frame(self,iris_frame)
pandas.tests.io.test_sql.PandasSQLTest._count_rows(self,table_name)
pandas.tests.io.test_sql.PandasSQLTest._execute_sql(self)
pandas.tests.io.test_sql.PandasSQLTest._get_exec(self)
pandas.tests.io.test_sql.PandasSQLTest._load_iris_view(self)
pandas.tests.io.test_sql.PandasSQLTest._load_raw_sql(self)
pandas.tests.io.test_sql.PandasSQLTest._load_test1_data(self)
pandas.tests.io.test_sql.PandasSQLTest._load_test2_data(self)
pandas.tests.io.test_sql.PandasSQLTest._load_test3_data(self)
pandas.tests.io.test_sql.PandasSQLTest._read_sql_iris(self)
pandas.tests.io.test_sql.PandasSQLTest._read_sql_iris_named_parameter(self)
pandas.tests.io.test_sql.PandasSQLTest._read_sql_iris_parameter(self)
pandas.tests.io.test_sql.PandasSQLTest._roundtrip(self)
pandas.tests.io.test_sql.PandasSQLTest._to_sql(self,method=None)
pandas.tests.io.test_sql.PandasSQLTest._to_sql_append(self)
pandas.tests.io.test_sql.PandasSQLTest._to_sql_empty(self)
pandas.tests.io.test_sql.PandasSQLTest._to_sql_fail(self)
pandas.tests.io.test_sql.PandasSQLTest._to_sql_method_callable(self)
pandas.tests.io.test_sql.PandasSQLTest._to_sql_replace(self)
pandas.tests.io.test_sql.PandasSQLTest._to_sql_save_index(self)
pandas.tests.io.test_sql.PandasSQLTest._transaction_test(self)
pandas.tests.io.test_sql.PandasSQLTest.load_iris_data(self,datapath,request)
pandas.tests.io.test_sql.SQLAlchemyMixIn(MixInBase)
pandas.tests.io.test_sql.SQLAlchemyMixIn._close_conn(self)
pandas.tests.io.test_sql.SQLAlchemyMixIn._get_all_tables(self)
pandas.tests.io.test_sql.SQLAlchemyMixIn.drop_table(self,table_name)
pandas.tests.io.test_sql.SQLiteMixIn(MixInBase)
pandas.tests.io.test_sql.SQLiteMixIn._close_conn(self)
pandas.tests.io.test_sql.SQLiteMixIn._get_all_tables(self)
pandas.tests.io.test_sql.SQLiteMixIn.drop_table(self,table_name)
pandas.tests.io.test_sql.TestMySQLAlchemy(_TestMySQLAlchemy,_TestSQLAlchemy)
pandas.tests.io.test_sql.TestMySQLAlchemyConn(_TestMySQLAlchemy,_TestSQLAlchemyConn)
pandas.tests.io.test_sql.TestPostgreSQLAlchemy(_TestPostgreSQLAlchemy,_TestSQLAlchemy)
pandas.tests.io.test_sql.TestPostgreSQLAlchemyConn(_TestPostgreSQLAlchemy,_TestSQLAlchemyConn)
pandas.tests.io.test_sql.TestSQLApi(SQLAlchemyMixIn,_TestSQLApi)
pandas.tests.io.test_sql.TestSQLApi._get_index_columns(self,tbl_name)
pandas.tests.io.test_sql.TestSQLApi._make_iris_table_metadata(self)
pandas.tests.io.test_sql.TestSQLApi.connect(self)
pandas.tests.io.test_sql.TestSQLApi.test_database_uri_string(self)
pandas.tests.io.test_sql.TestSQLApi.test_not_reflect_all_tables(self)
pandas.tests.io.test_sql.TestSQLApi.test_query_by_select_obj(self)
pandas.tests.io.test_sql.TestSQLApi.test_query_by_text_obj(self)
pandas.tests.io.test_sql.TestSQLApi.test_read_sql_delegate(self)
pandas.tests.io.test_sql.TestSQLApi.test_read_table_columns(self)
pandas.tests.io.test_sql.TestSQLApi.test_read_table_index_col(self)
pandas.tests.io.test_sql.TestSQLApi.test_sqlalchemy_type_mapping(self)
pandas.tests.io.test_sql.TestSQLApi.test_warning_case_insensitive_table_name(self)
pandas.tests.io.test_sql.TestSQLApiConn(_EngineToConnMixin,TestSQLApi)
pandas.tests.io.test_sql.TestSQLiteAlchemy(_TestSQLiteAlchemy,_TestSQLAlchemy)
pandas.tests.io.test_sql.TestSQLiteAlchemyConn(_TestSQLiteAlchemy,_TestSQLAlchemyConn)
pandas.tests.io.test_sql.TestSQLiteFallback(SQLiteMixIn,PandasSQLTest)
pandas.tests.io.test_sql.TestSQLiteFallback._get_index_columns(self,tbl_name)
pandas.tests.io.test_sql.TestSQLiteFallback._get_sqlite_column_type(self,table,column)
pandas.tests.io.test_sql.TestSQLiteFallback.connect(cls)
pandas.tests.io.test_sql.TestSQLiteFallback.load_test_data_and_sql(self)
pandas.tests.io.test_sql.TestSQLiteFallback.setup_connect(self)
pandas.tests.io.test_sql.TestSQLiteFallback.setup_method(self,load_iris_data)
pandas.tests.io.test_sql.TestSQLiteFallback.test_create_and_drop_table(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_datetime_date(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_datetime_time(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_dt_date(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_dt_time(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_dtype(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_execute_sql(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_illegal_names(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_notna_dtype(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_read_sql(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_read_sql_named_parameter(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_read_sql_parameter(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_roundtrip(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_to_sql(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_to_sql_append(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_to_sql_empty(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_to_sql_fail(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_to_sql_replace(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_to_sql_save_index(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_transactions(self)
pandas.tests.io.test_sql.TestSQLiteFallbackApi(SQLiteMixIn,_TestSQLApi)
pandas.tests.io.test_sql.TestSQLiteFallbackApi._get_sqlite_column_type(self,schema,column)
pandas.tests.io.test_sql.TestSQLiteFallbackApi.connect(self,database=':memory:')
pandas.tests.io.test_sql.TestSQLiteFallbackApi.test_con_string_import_error(self)
pandas.tests.io.test_sql.TestSQLiteFallbackApi.test_get_schema2(self)
pandas.tests.io.test_sql.TestSQLiteFallbackApi.test_read_sql_delegate(self)
pandas.tests.io.test_sql.TestSQLiteFallbackApi.test_safe_names_warning(self)
pandas.tests.io.test_sql.TestSQLiteFallbackApi.test_sql_open_close(self)
pandas.tests.io.test_sql.TestSQLiteFallbackApi.test_sqlite_type_mapping(self)
pandas.tests.io.test_sql.TestXMySQL(MySQLMixIn)
pandas.tests.io.test_sql.TestXMySQL._check_roundtrip(self,frame)
pandas.tests.io.test_sql.TestXMySQL.setup_class(cls)
pandas.tests.io.test_sql.TestXMySQL.setup_method(self,request,datapath)
pandas.tests.io.test_sql.TestXMySQL.test_basic(self)
pandas.tests.io.test_sql.TestXMySQL.test_chunksize_read_type(self)
pandas.tests.io.test_sql.TestXMySQL.test_execute(self)
pandas.tests.io.test_sql.TestXMySQL.test_execute_closed_connection(self,request,datapath)
pandas.tests.io.test_sql.TestXMySQL.test_execute_fail(self)
pandas.tests.io.test_sql.TestXMySQL.test_if_exists(self)
pandas.tests.io.test_sql.TestXMySQL.test_keyword_as_column_names(self)
pandas.tests.io.test_sql.TestXMySQL.test_na_roundtrip(self)
pandas.tests.io.test_sql.TestXMySQL.test_schema(self)
pandas.tests.io.test_sql.TestXMySQL.test_write_row_by_row(self)
pandas.tests.io.test_sql.TestXSQLite(SQLiteMixIn)
pandas.tests.io.test_sql.TestXSQLite._check_roundtrip(self,frame)
pandas.tests.io.test_sql.TestXSQLite.setup_method(self,request,datapath)
pandas.tests.io.test_sql.TestXSQLite.test_basic(self)
pandas.tests.io.test_sql.TestXSQLite.test_execute(self)
pandas.tests.io.test_sql.TestXSQLite.test_execute_closed_connection(self)
pandas.tests.io.test_sql.TestXSQLite.test_execute_fail(self)
pandas.tests.io.test_sql.TestXSQLite.test_if_exists(self)
pandas.tests.io.test_sql.TestXSQLite.test_keyword_as_column_names(self)
pandas.tests.io.test_sql.TestXSQLite.test_na_roundtrip(self)
pandas.tests.io.test_sql.TestXSQLite.test_onecolumn_of_integer(self)
pandas.tests.io.test_sql.TestXSQLite.test_schema(self)
pandas.tests.io.test_sql.TestXSQLite.test_write_row_by_row(self)
pandas.tests.io.test_sql._EngineToConnMixin
pandas.tests.io.test_sql._EngineToConnMixin.setup_method(self,load_iris_data)
pandas.tests.io.test_sql._TestMySQLAlchemy
pandas.tests.io.test_sql._TestMySQLAlchemy.connect(cls)
pandas.tests.io.test_sql._TestMySQLAlchemy.setup_driver(cls)
pandas.tests.io.test_sql._TestMySQLAlchemy.test_default_type_conversion(self)
pandas.tests.io.test_sql._TestMySQLAlchemy.test_read_procedure(self)
pandas.tests.io.test_sql._TestPostgreSQLAlchemy
pandas.tests.io.test_sql._TestPostgreSQLAlchemy.connect(cls)
pandas.tests.io.test_sql._TestPostgreSQLAlchemy.setup_driver(cls)
pandas.tests.io.test_sql._TestPostgreSQLAlchemy.test_copy_from_callable_insertion_method(self)
pandas.tests.io.test_sql._TestPostgreSQLAlchemy.test_schema_support(self)
pandas.tests.io.test_sql._TestSQLAlchemy(SQLAlchemyMixIn,PandasSQLTest)
pandas.tests.io.test_sql._TestSQLAlchemy._get_index_columns(self,tbl_name)
pandas.tests.io.test_sql._TestSQLAlchemy.connect(cls)
pandas.tests.io.test_sql._TestSQLAlchemy.load_test_data_and_sql(self)
pandas.tests.io.test_sql._TestSQLAlchemy.setup_class(cls)
pandas.tests.io.test_sql._TestSQLAlchemy.setup_connect(self)
pandas.tests.io.test_sql._TestSQLAlchemy.setup_driver(cls)
pandas.tests.io.test_sql._TestSQLAlchemy.setup_import(cls)
pandas.tests.io.test_sql._TestSQLAlchemy.setup_method(self,load_iris_data)
pandas.tests.io.test_sql._TestSQLAlchemy.test_bigint(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_connectable_issue_example(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_create_table(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_date_parsing(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_datetime(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_datetime_NaT(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_datetime_date(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_datetime_time(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_datetime_with_timezone(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_datetime_with_timezone_roundtrip(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_default_date_load(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_default_type_conversion(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_double_precision(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_drop_table(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_dt(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_dt_NaT(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_dt_date(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_dt_time(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_dt_with_timezone(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_dt_with_timezone_roundtrip(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_dtype(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_execute_sql(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_get_schema_create_table(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_mixed_dtype_insert(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_naive_datetimeindex_roundtrip(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_naive_dtindex_roundtrip(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_nan_fullcolumn(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_nan_numeric(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_nan_string(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_notna_dtype(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_read_sql(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_read_sql_named_parameter(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_read_sql_parameter(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_read_table(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_read_table_absent_raises(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_read_table_columns(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_roundtrip(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_temporary_table(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_to_sql(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_to_sql_append(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_to_sql_empty(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_to_sql_fail(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_to_sql_method_callable(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_to_sql_method_multi(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_to_sql_replace(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_to_sql_save_index(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_transactions(self)
pandas.tests.io.test_sql._TestSQLAlchemyConn(_EngineToConnMixin,_TestSQLAlchemy)
pandas.tests.io.test_sql._TestSQLAlchemyConn.test_transactions(self)
pandas.tests.io.test_sql._TestSQLApi(PandasSQLTest)
pandas.tests.io.test_sql._TestSQLApi.load_test_data_and_sql(self)
pandas.tests.io.test_sql._TestSQLApi.setup_connect(self)
pandas.tests.io.test_sql._TestSQLApi.setup_method(self,load_iris_data)
pandas.tests.io.test_sql._TestSQLApi.test_categorical(self)
pandas.tests.io.test_sql._TestSQLApi.test_chunksize_read(self)
pandas.tests.io.test_sql._TestSQLApi.test_complex_raises(self)
pandas.tests.io.test_sql._TestSQLApi.test_date_and_index(self)
pandas.tests.io.test_sql._TestSQLApi.test_date_parsing(self)
pandas.tests.io.test_sql._TestSQLApi.test_escaped_table_name(self)
pandas.tests.io.test_sql._TestSQLApi.test_execute_sql(self)
pandas.tests.io.test_sql._TestSQLApi.test_get_schema(self)
pandas.tests.io.test_sql._TestSQLApi.test_get_schema_dtypes(self)
pandas.tests.io.test_sql._TestSQLApi.test_get_schema_keys(self)
pandas.tests.io.test_sql._TestSQLApi.test_integer_col_names(self)
pandas.tests.io.test_sql._TestSQLApi.test_multiindex_roundtrip(self)
pandas.tests.io.test_sql._TestSQLApi.test_read_sql_iris(self)
pandas.tests.io.test_sql._TestSQLApi.test_read_sql_view(self)
pandas.tests.io.test_sql._TestSQLApi.test_roundtrip(self)
pandas.tests.io.test_sql._TestSQLApi.test_roundtrip_chunksize(self)
pandas.tests.io.test_sql._TestSQLApi.test_timedelta(self)
pandas.tests.io.test_sql._TestSQLApi.test_to_sql(self)
pandas.tests.io.test_sql._TestSQLApi.test_to_sql_append(self)
pandas.tests.io.test_sql._TestSQLApi.test_to_sql_fail(self)
pandas.tests.io.test_sql._TestSQLApi.test_to_sql_index_label(self,index_name,index_label,expected)
pandas.tests.io.test_sql._TestSQLApi.test_to_sql_index_label_multiindex(self)
pandas.tests.io.test_sql._TestSQLApi.test_to_sql_replace(self)
pandas.tests.io.test_sql._TestSQLApi.test_to_sql_series(self)
pandas.tests.io.test_sql._TestSQLApi.test_to_sql_type_mapping(self)
pandas.tests.io.test_sql._TestSQLApi.test_unicode_column_name(self)
pandas.tests.io.test_sql._TestSQLiteAlchemy
pandas.tests.io.test_sql._TestSQLiteAlchemy.connect(cls)
pandas.tests.io.test_sql._TestSQLiteAlchemy.setup_driver(cls)
pandas.tests.io.test_sql._TestSQLiteAlchemy.test_bigint_warning(self)
pandas.tests.io.test_sql._TestSQLiteAlchemy.test_default_date_load(self)
pandas.tests.io.test_sql._TestSQLiteAlchemy.test_default_type_conversion(self)
pandas.tests.io.test_sql.date_format(dt)
pandas.tests.io.test_sql.format_query(sql,*args)
pandas.tests.io.test_sql.tquery(query,con=None,cur=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/test_spss.py----------------------------------------
A:pandas.tests.io.test_spss.pyreadstat->pytest.importorskip('pyreadstat')
A:pandas.tests.io.test_spss.fname->datapath('io', 'data', 'spss', 'labelled-num.sav')
A:pandas.tests.io.test_spss.df->pandas.read_spss(fname, convert_categoricals=False)
A:pandas.tests.io.test_spss.expected->pandas.DataFrame({'var1': [1.0, 2.0, 1.0, 3.0]})
A:pandas.tests.io.test_spss.expected['VAR00002']->pandas.Categorical(expected['VAR00002'])
A:pandas.tests.io.test_spss.expected['gender']->pandas.Categorical(expected['gender'])
A:pandas.tests.io.test_spss.expected['var1']->pandas.Categorical(expected['var1'])
pandas.tests.io.test_spss.test_spss_labelled_num(datapath)
pandas.tests.io.test_spss.test_spss_labelled_num_na(datapath)
pandas.tests.io.test_spss.test_spss_labelled_str(datapath)
pandas.tests.io.test_spss.test_spss_umlauts(datapath)
pandas.tests.io.test_spss.test_spss_usecols(datapath)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/test_feather.py----------------------------------------
A:pandas.tests.io.test_feather.pyarrow->pytest.importorskip('pyarrow')
A:pandas.tests.io.test_feather.pyarrow_version->LooseVersion(pyarrow.__version__)
A:pandas.tests.io.test_feather.filter_sparse->pytest.mark.filterwarnings('ignore:The Sparse')
A:pandas.tests.io.test_feather.result->pandas._testing.round_trip_localpath(df.to_feather, pd.read_feather)
A:pandas.tests.io.test_feather.df->pandas._testing.makeDataFrame().reset_index()
A:pandas.tests.io.test_feather.df.columns->pandas.MultiIndex.from_tuples([('a', 1)])
pandas.tests.io.test_feather.TestFeather
pandas.tests.io.test_feather.TestFeather.check_error_on_write(self,df,exc)
pandas.tests.io.test_feather.TestFeather.check_round_trip(self,df,expected=None,**kwargs)
pandas.tests.io.test_feather.TestFeather.test_basic(self)
pandas.tests.io.test_feather.TestFeather.test_duplicate_columns(self)
pandas.tests.io.test_feather.TestFeather.test_error(self)
pandas.tests.io.test_feather.TestFeather.test_path_localpath(self)
pandas.tests.io.test_feather.TestFeather.test_path_pathlib(self)
pandas.tests.io.test_feather.TestFeather.test_read_columns(self)
pandas.tests.io.test_feather.TestFeather.test_rw_use_threads(self)
pandas.tests.io.test_feather.TestFeather.test_stringify_columns(self)
pandas.tests.io.test_feather.TestFeather.test_unsupported_other(self)
pandas.tests.io.test_feather.TestFeather.test_write_with_index(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/test_unsupported.py----------------------------------------
pandas.tests.io.parser.test_unsupported.TestUnsupportedFeatures
pandas.tests.io.parser.test_unsupported.TestUnsupportedFeatures.test_c_engine(self)
pandas.tests.io.parser.test_unsupported.TestUnsupportedFeatures.test_mangle_dupe_cols_false(self)
pandas.tests.io.parser.test_unsupported.TestUnsupportedFeatures.test_python_engine(self,python_engine)
pandas.tests.io.parser.test_unsupported.TestUnsupportedFeatures.test_python_engine_file_no_next(self,python_engine)
pandas.tests.io.parser.test_unsupported.python_engine(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/test_textreader.py----------------------------------------
A:pandas.tests.io.parser.test_textreader.self.dirpath->datapath('io', 'parser', 'data')
A:pandas.tests.io.parser.test_textreader.self.csv1->os.path.join(self.dirpath, 'test1.csv')
A:pandas.tests.io.parser.test_textreader.self.csv2->os.path.join(self.dirpath, 'test2.csv')
A:pandas.tests.io.parser.test_textreader.self.xls1->os.path.join(self.dirpath, 'test.xls')
A:pandas.tests.io.parser.test_textreader.reader->_make_reader(usecols=(1, 2))
A:pandas.tests.io.parser.test_textreader.text->f.read()
A:pandas.tests.io.parser.test_textreader.src->BytesIO(text)
A:pandas.tests.io.parser.test_textreader.result->TextReader(StringIO(data), delimiter=',').read()
A:pandas.tests.io.parser.test_textreader.expected->TextReader(StringIO(nice_text), **kwargs).read()
A:pandas.tests.io.parser.test_textreader.captured->capsys.readouterr()
A:pandas.tests.io.parser.test_textreader.recs->_make_reader(usecols=(1, 2)).read()
A:pandas.tests.io.parser.test_textreader.ex_values->numpy.array(['a', 'aa', 'aaa', 'aaaa', 'aaaa'], dtype='S4')
A:pandas.tests.io.parser.test_textreader.exp->_make_reader().read()
A:pandas.tests.io.parser.test_textreader.nice_text->f.read().replace('\r', '\r\n')
A:pandas.tests.io.parser.test_textreader.a->DataFrame([['b'], [np.nan]], columns=['a'], index=['a', 'c'])
A:pandas.tests.io.parser.test_textreader.b->DataFrame([[1, 1, 1, 0], [1, 1, 1, 0]], columns=list('abcd'), index=[1, 1])
A:pandas.tests.io.parser.test_textreader.c->DataFrame([[1, 2, 3, 4], [6, np.nan, np.nan, np.nan], [8, 9, 10, 11], [13, 14, np.nan, np.nan]], columns=list('abcd'), index=[0, 5, 7, 12])
A:pandas.tests.io.parser.test_textreader.df->read_csv(StringIO(), chunksize=20, header=None, names=['a', 'b', 'c'])
pandas.tests.io.parser.test_textreader.TestTextReader
pandas.tests.io.parser.test_textreader.TestTextReader.setup_method(self,datapath)
pandas.tests.io.parser.test_textreader.TestTextReader.test_StringIO(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_cr_delimited(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_delimit_whitespace(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_embedded_newline(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_empty_csv_input(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_empty_field_eof(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_eof_has_eol(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_escapechar(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_euro_decimal(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_file_handle(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_file_handle_mmap(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_header_not_enough_lines(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_integer_thousands(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_integer_thousands_alt(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_na_substitution(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_numpy_string_dtype(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_parse_booleans(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_pass_dtype(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_skip_bad_lines(self,capsys)
pandas.tests.io.parser.test_textreader.TestTextReader.test_skipinitialspace(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_string_factorize(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_string_filename(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_usecols(self)
pandas.tests.io.parser.test_textreader.assert_array_dicts_equal(left,right)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/test_compression.py----------------------------------------
A:pandas.tests.io.parser.test_compression.data->f.read()
A:pandas.tests.io.parser.test_compression.expected->pandas.DataFrame({'Country': ['Venezuela', 'Venezuela'], 'Twitter': ['Hugo Chávez Frías', 'Henrique Capriles R.']})
A:pandas.tests.io.parser.test_compression.result->parser.read_csv(path, encoding=encoding, compression='zip', sep='\t')
A:pandas.tests.io.parser.test_compression.kwargs->dict(index_col=0, parse_dates=True)
A:pandas.tests.io.parser.test_compression.encoding->encoding_fmt.format(utf_value)
A:pandas.tests.io.parser.test_compression.path->os.path.join(csv_dir_path, f'utf{utf_value}_ex_small.zip')
A:pandas.tests.io.parser.test_compression.compress_kwargs->dict(compression=invalid_compression)
A:pandas.tests.io.parser.test_compression.msg->'Unrecognized compression type: {compression}'.format(**compress_kwargs)
pandas.tests.io.parser.test_compression.buffer(request)
pandas.tests.io.parser.test_compression.parser_and_data(all_parsers,csv1)
pandas.tests.io.parser.test_compression.test_compression(parser_and_data,compression_only,buffer,filename)
pandas.tests.io.parser.test_compression.test_compression_utf_encoding(all_parsers,csv_dir_path,utf_value,encoding_fmt)
pandas.tests.io.parser.test_compression.test_infer_compression(all_parsers,csv1,buffer,ext)
pandas.tests.io.parser.test_compression.test_invalid_compression(all_parsers,invalid_compression)
pandas.tests.io.parser.test_compression.test_zip(parser_and_data,compression)
pandas.tests.io.parser.test_compression.test_zip_error_invalid_zip(parser_and_data)
pandas.tests.io.parser.test_compression.test_zip_error_multiple_files(parser_and_data,compression)
pandas.tests.io.parser.test_compression.test_zip_error_no_files(parser_and_data)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/test_network.py----------------------------------------
A:pandas.tests.io.parser.test_network.url_table->read_csv(url, sep='\t', compression=compression, engine=engine)
A:pandas.tests.io.parser.test_network.df->DataFrame(np.random.randn(100000, 4), columns=list('abcd'))
A:pandas.tests.io.parser.test_network.df_reader->read_csv('s3://pandas-test/tips.csv' + ext, chunksize=chunksize, compression=comp, engine='python')
A:pandas.tests.io.parser.test_network.s3_object->s3_resource.meta.client.get_object(Bucket='pandas-test', Key='tips.csv')
A:pandas.tests.io.parser.test_network.result->read_csv('s3://pandas-test/tips#1.csv')
A:pandas.tests.io.parser.test_network.expected->read_csv(tips_file)
A:pandas.tests.io.parser.test_network.buf->BytesIO(str_buf.getvalue().encode('utf-8'))
A:pandas.tests.io.parser.test_network.str_buf->StringIO()
pandas.tests.io.parser.test_network.TestS3
pandas.tests.io.parser.test_network.TestS3.test_infer_s3_compression(self,tips_df)
pandas.tests.io.parser.test_network.TestS3.test_parse_public_s3_bucket(self,tips_df)
pandas.tests.io.parser.test_network.TestS3.test_parse_public_s3_bucket_chunked(self,tips_df)
pandas.tests.io.parser.test_network.TestS3.test_parse_public_s3_bucket_chunked_python(self,tips_df)
pandas.tests.io.parser.test_network.TestS3.test_parse_public_s3_bucket_nrows(self,tips_df)
pandas.tests.io.parser.test_network.TestS3.test_parse_public_s3_bucket_nrows_python(self,tips_df)
pandas.tests.io.parser.test_network.TestS3.test_parse_public_s3_bucket_python(self,tips_df)
pandas.tests.io.parser.test_network.TestS3.test_parse_public_s3a_bucket(self,tips_df)
pandas.tests.io.parser.test_network.TestS3.test_parse_public_s3n_bucket(self,tips_df)
pandas.tests.io.parser.test_network.TestS3.test_read_csv_chunked_download(self,s3_resource,caplog)
pandas.tests.io.parser.test_network.TestS3.test_read_csv_handles_boto_s3_object(self,s3_resource,tips_file)
pandas.tests.io.parser.test_network.TestS3.test_read_s3_fails(self)
pandas.tests.io.parser.test_network.TestS3.test_read_s3_with_hash_in_key(self,tips_df)
pandas.tests.io.parser.test_network.TestS3.test_write_s3_csv_fails(self,tips_df)
pandas.tests.io.parser.test_network.TestS3.test_write_s3_parquet_fails(self,tips_df)
pandas.tests.io.parser.test_network.check_compressed_urls(salaries_table,compression,extension,mode,engine)
pandas.tests.io.parser.test_network.test_compressed_urls(salaries_table,compress_type,extension,mode,engine)
pandas.tests.io.parser.test_network.tips_df(datapath)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/test_mangle_dupes.py----------------------------------------
A:pandas.tests.io.parser.test_mangle_dupes.result->parser.read_csv(StringIO(data))
A:pandas.tests.io.parser.test_mangle_dupes.expected->DataFrame()
A:pandas.tests.io.parser.test_mangle_dupes.df->parser.read_csv(StringIO(df.to_csv()))
pandas.tests.io.parser.test_mangle_dupes.test_basic(all_parsers,kwargs)
pandas.tests.io.parser.test_mangle_dupes.test_basic_names(all_parsers)
pandas.tests.io.parser.test_mangle_dupes.test_basic_names_raise(all_parsers)
pandas.tests.io.parser.test_mangle_dupes.test_mangled_unnamed_placeholders(all_parsers)
pandas.tests.io.parser.test_mangle_dupes.test_thorough_mangle_columns(all_parsers,data,expected)
pandas.tests.io.parser.test_mangle_dupes.test_thorough_mangle_names(all_parsers,data,names,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/test_na_values.py----------------------------------------
A:pandas.tests.io.parser.test_na_values.result->parser.read_csv(StringIO(data), header=None, names=['col1', 'col2', 'col3'], dtype={'col1': str, 'col2': str, 'col3': str}).dropna()
A:pandas.tests.io.parser.test_na_values.expected->DataFrame({'col1': ['10010010233', '01001000155'], 'col2': ['0123', '4530'], 'col3': ['654', '898']}, index=[1, 3])
A:pandas.tests.io.parser.test_na_values.nv->len(_NA_VALUES)
A:pandas.tests.io.parser.test_na_values.buf->'{0}{1}'.format(buf, ''.join([','] * (nv - i - 1)))
A:pandas.tests.io.parser.test_na_values.data->StringIO('\n'.join((f(i, v) for (i, v) in enumerate(_NA_VALUES))))
A:pandas.tests.io.parser.test_na_values.df->parser.read_csv(StringIO(data), na_values={'b': 2}, keep_default_na=False)
A:pandas.tests.io.parser.test_na_values.na_values_copy->na_values.copy()
A:pandas.tests.io.parser.test_na_values.out->parser.read_csv(StringIO(data), index_col=[0], na_values=['inf', '-inf'])
pandas.tests.io.parser.test_na_values.test_bool_na_values(all_parsers)
pandas.tests.io.parser.test_na_values.test_cast_NA_to_bool_raises_error(all_parsers,data,na_values)
pandas.tests.io.parser.test_na_values.test_custom_na_values(all_parsers,na_values)
pandas.tests.io.parser.test_na_values.test_default_na_values(all_parsers)
pandas.tests.io.parser.test_na_values.test_detect_string_na(all_parsers)
pandas.tests.io.parser.test_na_values.test_empty_na_values_no_default_with_index(all_parsers)
pandas.tests.io.parser.test_na_values.test_inf_na_values_with_int_index(all_parsers)
pandas.tests.io.parser.test_na_values.test_na_trailing_columns(all_parsers)
pandas.tests.io.parser.test_na_values.test_na_value_dict(all_parsers)
pandas.tests.io.parser.test_na_values.test_na_value_dict_multi_index(all_parsers,index_col,expected)
pandas.tests.io.parser.test_na_values.test_na_values_dict_aliasing(all_parsers)
pandas.tests.io.parser.test_na_values.test_na_values_dict_col_index(all_parsers)
pandas.tests.io.parser.test_na_values.test_na_values_keep_default(all_parsers,kwargs,expected)
pandas.tests.io.parser.test_na_values.test_na_values_na_filter_override(all_parsers,na_filter,row_data)
pandas.tests.io.parser.test_na_values.test_na_values_scalar(all_parsers,na_values,row_data)
pandas.tests.io.parser.test_na_values.test_na_values_uint64(all_parsers,data,kwargs,expected)
pandas.tests.io.parser.test_na_values.test_na_values_with_dtype_str_and_na_filter(all_parsers,na_filter)
pandas.tests.io.parser.test_na_values.test_no_keep_default_na_dict_na_scalar_values(all_parsers)
pandas.tests.io.parser.test_na_values.test_no_keep_default_na_dict_na_values(all_parsers)
pandas.tests.io.parser.test_na_values.test_no_keep_default_na_dict_na_values_diff_reprs(all_parsers,col_zero_na_values)
pandas.tests.io.parser.test_na_values.test_no_na_filter_on_index(all_parsers,na_filter,index_data)
pandas.tests.io.parser.test_na_values.test_no_na_values_no_keep_default(all_parsers)
pandas.tests.io.parser.test_na_values.test_non_string_na_values(all_parsers,data,na_values)
pandas.tests.io.parser.test_na_values.test_str_nan_dropped(all_parsers)
pandas.tests.io.parser.test_na_values.test_string_nas(all_parsers)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/test_parse_dates.py----------------------------------------
A:pandas.tests.io.parser.test_parse_dates._DEFAULT_DATETIME->datetime(1, 1, 1)
A:pandas.tests.io.parser.test_parse_dates.date_strategy->hypothesis.strategies.datetimes()
A:pandas.tests.io.parser.test_parse_dates.expected->DataFrame({0: [expected]}, dtype='datetime64[ns]')
A:pandas.tests.io.parser.test_parse_dates.df->parser.read_csv(StringIO(data), names=['time', 'Q', 'NTU'], date_parser=lambda d: du_parse(d, **kwargs), header=0, index_col=0, parse_dates=True, na_values=['NA'])
A:pandas.tests.io.parser.test_parse_dates.result->call(date_string, **kwargs)
A:pandas.tests.io.parser.test_parse_dates.expected['X1']->expected['X1'].astype(np.int64).astype(np.int64)
A:pandas.tests.io.parser.test_parse_dates.date_cols->tuple((container([value]) for _ in range(dim)))
A:pandas.tests.io.parser.test_parse_dates.index->index.swaplevel(0, 1).swaplevel(0, 1)
A:pandas.tests.io.parser.test_parse_dates.exp_index->Index([datetime(2010, 1, 31), datetime(2010, 2, 1), datetime(2010, 2, 2)], name='time')
A:pandas.tests.io.parser.test_parse_dates.reader->parser.read_csv(StringIO(data), parse_dates={'nominal': [1, 2]}, index_col='nominal', chunksize=2)
A:pandas.tests.io.parser.test_parse_dates.chunks->list(reader)
A:pandas.tests.io.parser.test_parse_dates.with_indices->parser.read_csv(StringIO(data), parse_dates={'nominal': [1, 2]}, index_col='nominal')
A:pandas.tests.io.parser.test_parse_dates.with_names->parser.read_csv(StringIO(data), index_col='nominal', parse_dates={'nominal': ['date', 'nominalTime']})
A:pandas.tests.io.parser.test_parse_dates.s->StringIO('{value},\n'.format(value=value) * 50000)
A:pandas.tests.io.parser.test_parse_dates.datetimes->np_array_datetime64_compat(['2013-11-03T19:00:00Z'] * 3, dtype='datetime64[s]')
A:pandas.tests.io.parser.test_parse_dates.dti->pandas.date_range(start='2018-01-04 09:01:00', end='2018-01-04 09:05:00', freq='1min', tz=pytz.FixedOffset(540))
A:pandas.tests.io.parser.test_parse_dates.msg->str(er)
A:pandas.tests.io.parser.test_parse_dates.date_string->test_datetime.strftime(date_format.replace(' ', delimiter))
A:pandas.tests.io.parser.test_parse_dates.(except_out_dateutil, result)->_helper_hypothesis_delimited_date(parse_datetime_string, date_string, dayfirst=dayfirst)
A:pandas.tests.io.parser.test_parse_dates.(except_in_dateutil, expected)->_helper_hypothesis_delimited_date(du_parse, date_string, default=_DEFAULT_DATETIME, dayfirst=dayfirst, yearfirst=False)
pandas.tests.io.parser.test_parse_dates._helper_hypothesis_delimited_date(call,date_string,**kwargs)
pandas.tests.io.parser.test_parse_dates.test_bad_date_parse(all_parsers,cache_dates,value)
pandas.tests.io.parser.test_parse_dates.test_concat_date_col_fail(container,dim)
pandas.tests.io.parser.test_parse_dates.test_csv_custom_parser(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_date_col_as_index_col(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_date_parser_int_bug(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_date_parser_resolution_if_not_ns(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_datetime_fractional_seconds(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_dt_fractional_seconds(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_generic(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_hypothesis_delimited_date(date_format,dayfirst,delimiter,test_datetime)
pandas.tests.io.parser.test_parse_dates.test_invalid_parse_delimited_date(all_parsers,date_string)
pandas.tests.io.parser.test_parse_dates.test_multi_index_parse_dates(all_parsers,index_col)
pandas.tests.io.parser.test_parse_dates.test_multiple_date_col(all_parsers,keep_date_col)
pandas.tests.io.parser.test_parse_dates.test_multiple_date_col_custom(all_parsers,keep_date_col)
pandas.tests.io.parser.test_parse_dates.test_multiple_date_col_multiple_index_compat(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_multiple_date_col_name_collision(all_parsers,data,parse_dates,msg)
pandas.tests.io.parser.test_parse_dates.test_multiple_date_col_named_index_compat(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_multiple_date_col_timestamp_parse(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_multiple_date_cols_chunked(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_multiple_date_cols_index(all_parsers,parse_dates,index_col)
pandas.tests.io.parser.test_parse_dates.test_multiple_date_cols_int_cast(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_multiple_date_cols_with_header(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_nat_parse(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_parse_date_all_fields(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_parse_date_column_with_empty_string(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_parse_date_fields(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_parse_date_float(all_parsers,data,expected,parse_dates)
pandas.tests.io.parser.test_parse_dates.test_parse_date_time(all_parsers,data,kwargs,expected)
pandas.tests.io.parser.test_parse_dates.test_parse_date_time_multi_level_column_name(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_parse_dates_column_list(all_parsers,parse_dates)
pandas.tests.io.parser.test_parse_dates.test_parse_dates_custom_euro_format(all_parsers,kwargs)
pandas.tests.io.parser.test_parse_dates.test_parse_dates_empty_string(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_parse_dates_implicit_first_col(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_parse_dates_no_convert_thousands(all_parsers,data,kwargs,expected)
pandas.tests.io.parser.test_parse_dates.test_parse_dates_string(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_parse_delimited_date_swap(all_parsers,date_string,dayfirst,expected)
pandas.tests.io.parser.test_parse_dates.test_parse_timezone(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_parse_tz_aware(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_read_with_parse_dates_invalid_type(all_parsers,parse_dates)
pandas.tests.io.parser.test_parse_dates.test_read_with_parse_dates_scalar_non_bool(all_parsers,kwargs)
pandas.tests.io.parser.test_parse_dates.test_separator_date_conflict(all_parsers)
pandas.tests.io.parser.test_parse_dates.test_yy_format_with_year_first(all_parsers,parse_dates)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/test_comment.py----------------------------------------
A:pandas.tests.io.parser.test_comment.expected->DataFrame([[1, 2, 3]], columns=['a', 'b', 'c'])
A:pandas.tests.io.parser.test_comment.result->parser.read_csv(StringIO(data), comment='#', header=header)
A:pandas.tests.io.parser.test_comment.data->data.replace('\n', read_kwargs.get('lineterminator')).replace('\n', read_kwargs.get('lineterminator'))
pandas.tests.io.parser.test_comment.test_comment(all_parsers,na_values)
pandas.tests.io.parser.test_comment.test_comment_first_line(all_parsers,header)
pandas.tests.io.parser.test_comment.test_comment_header(all_parsers)
pandas.tests.io.parser.test_comment.test_comment_skiprows(all_parsers)
pandas.tests.io.parser.test_comment.test_comment_skiprows_header(all_parsers)
pandas.tests.io.parser.test_comment.test_custom_comment_char(all_parsers,comment_char)
pandas.tests.io.parser.test_comment.test_line_comment(all_parsers,read_kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/test_python_parser_only.py----------------------------------------
A:pandas.tests.io.parser.test_python_parser_only.expected->DataFrame({'a': [0, 7], 'b': [1, 8], 'c': [2, 9]})
A:pandas.tests.io.parser.test_python_parser_only.result->parser.read_csv(StringIO(data), header=0, sep=None, warn_bad_lines=True, error_bad_lines=False)
A:pandas.tests.io.parser.test_python_parser_only.data->data.replace(b',', b'::').replace(b',', b'::')
A:pandas.tests.io.parser.test_python_parser_only.module->pytest.importorskip(compression)
A:pandas.tests.io.parser.test_python_parser_only.klass->getattr(module, klass)
A:pandas.tests.io.parser.test_python_parser_only.tmp->klass(path, mode='wb')
A:pandas.tests.io.parser.test_python_parser_only.kwargs->dict(sep=',,')
A:pandas.tests.io.parser.test_python_parser_only.encoded_data->data.replace(b',', b'::').replace(b',', b'::').encode(encoding)
A:pandas.tests.io.parser.test_python_parser_only.captured->capsys.readouterr()
pandas.tests.io.parser.test_python_parser_only.test_decompression_regex_sep(python_parser_only,csv1,compression,klass)
pandas.tests.io.parser.test_python_parser_only.test_default_separator(python_parser_only)
pandas.tests.io.parser.test_python_parser_only.test_encoding_non_utf8_multichar_sep(python_parser_only,sep,encoding)
pandas.tests.io.parser.test_python_parser_only.test_invalid_skipfooter_negative(python_parser_only)
pandas.tests.io.parser.test_python_parser_only.test_invalid_skipfooter_non_int(python_parser_only,skipfooter)
pandas.tests.io.parser.test_python_parser_only.test_malformed_skipfooter(python_parser_only)
pandas.tests.io.parser.test_python_parser_only.test_multi_char_sep_quotes(python_parser_only,quoting)
pandas.tests.io.parser.test_python_parser_only.test_none_delimiter(python_parser_only,capsys)
pandas.tests.io.parser.test_python_parser_only.test_read_csv_buglet_4x_multi_index(python_parser_only)
pandas.tests.io.parser.test_python_parser_only.test_read_csv_buglet_4x_multi_index2(python_parser_only)
pandas.tests.io.parser.test_python_parser_only.test_single_line(python_parser_only)
pandas.tests.io.parser.test_python_parser_only.test_skipfooter(python_parser_only,kwargs)
pandas.tests.io.parser.test_python_parser_only.test_skipfooter_bad_row(python_parser_only,data,skipfooter)
pandas.tests.io.parser.test_python_parser_only.test_skipfooter_with_decimal(python_parser_only,add_footer)
pandas.tests.io.parser.test_python_parser_only.test_sniff_delimiter(python_parser_only,kwargs)
pandas.tests.io.parser.test_python_parser_only.test_sniff_delimiter_encoding(python_parser_only,encoding)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/test_usecols.py----------------------------------------
A:pandas.tests.io.parser.test_usecols.result->parser.read_csv(StringIO(data), header=0, names=names, usecols=usecols)
A:pandas.tests.io.parser.test_usecols.expected->DataFrame({'A': [1, 5], 'C': [3, 7]})
A:pandas.tests.io.parser.test_usecols.index->Index([Timestamp('2008-02-07 09:40'), Timestamp('2008-02-07 09:50'), Timestamp('2008-02-07 10:00')], name='date')
A:pandas.tests.io.parser.test_usecols.usecols->numpy.array(['a', 'b'])
pandas.tests.io.parser.test_usecols.test_callable_usecols(all_parsers,usecols,expected)
pandas.tests.io.parser.test_usecols.test_empty_usecols(all_parsers)
pandas.tests.io.parser.test_usecols.test_incomplete_first_row(all_parsers,usecols)
pandas.tests.io.parser.test_usecols.test_np_array_usecols(all_parsers)
pandas.tests.io.parser.test_usecols.test_raise_on_mixed_dtype_usecols(all_parsers)
pandas.tests.io.parser.test_usecols.test_raises_on_usecols_names_mismatch(all_parsers,usecols,kwargs,expected,msg)
pandas.tests.io.parser.test_usecols.test_uneven_length_cols(all_parsers,data,usecols,kwargs,expected)
pandas.tests.io.parser.test_usecols.test_usecols(all_parsers,usecols)
pandas.tests.io.parser.test_usecols.test_usecols_implicit_index_col(all_parsers)
pandas.tests.io.parser.test_usecols.test_usecols_index_col_conflict(all_parsers,usecols,index_col)
pandas.tests.io.parser.test_usecols.test_usecols_index_col_conflict2(all_parsers)
pandas.tests.io.parser.test_usecols.test_usecols_index_col_false(all_parsers,data)
pandas.tests.io.parser.test_usecols.test_usecols_name_length_conflict(all_parsers)
pandas.tests.io.parser.test_usecols.test_usecols_regex_sep(all_parsers)
pandas.tests.io.parser.test_usecols.test_usecols_relative_to_names(all_parsers,names,usecols)
pandas.tests.io.parser.test_usecols.test_usecols_relative_to_names2(all_parsers)
pandas.tests.io.parser.test_usecols.test_usecols_single_string(all_parsers)
pandas.tests.io.parser.test_usecols.test_usecols_subset_names_mismatch_orig_columns(all_parsers,usecols)
pandas.tests.io.parser.test_usecols.test_usecols_with_integer_like_header(all_parsers,usecols,expected)
pandas.tests.io.parser.test_usecols.test_usecols_with_mixed_encoding_strings(all_parsers,usecols)
pandas.tests.io.parser.test_usecols.test_usecols_with_multi_byte_characters(all_parsers,usecols)
pandas.tests.io.parser.test_usecols.test_usecols_with_names(all_parsers)
pandas.tests.io.parser.test_usecols.test_usecols_with_parse_dates(all_parsers,usecols)
pandas.tests.io.parser.test_usecols.test_usecols_with_parse_dates2(all_parsers)
pandas.tests.io.parser.test_usecols.test_usecols_with_parse_dates3(all_parsers)
pandas.tests.io.parser.test_usecols.test_usecols_with_parse_dates4(all_parsers)
pandas.tests.io.parser.test_usecols.test_usecols_with_parse_dates_and_names(all_parsers,usecols,names)
pandas.tests.io.parser.test_usecols.test_usecols_with_single_byte_unicode_strings(all_parsers)
pandas.tests.io.parser.test_usecols.test_usecols_with_unicode_strings(all_parsers)
pandas.tests.io.parser.test_usecols.test_usecols_with_whitespace(all_parsers)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/test_skiprows.py----------------------------------------
A:pandas.tests.io.parser.test_skiprows.result->parser.read_csv(StringIO(data), skiprows=lambda x: x % 2 == 0, **kwargs)
A:pandas.tests.io.parser.test_skiprows.index->Index([datetime(2000, 1, 1), datetime(2000, 1, 2), datetime(2000, 1, 3)], name=0)
A:pandas.tests.io.parser.test_skiprows.expected->DataFrame({'a': [1]})
A:pandas.tests.io.parser.test_skiprows.condensed_result->parser.read_csv(StringIO(condensed_data))
A:pandas.tests.io.parser.test_skiprows.data->data.replace('\n', line_terminator).replace('\n', line_terminator)
pandas.tests.io.parser.test_skiprows.test_deep_skip_rows(all_parsers)
pandas.tests.io.parser.test_skiprows.test_skip_row_with_newline(all_parsers,data,kwargs,expected)
pandas.tests.io.parser.test_skiprows.test_skip_row_with_newline_and_quote(all_parsers,data,exp_data)
pandas.tests.io.parser.test_skiprows.test_skip_row_with_quote(all_parsers)
pandas.tests.io.parser.test_skiprows.test_skip_rows_bad_callable(all_parsers)
pandas.tests.io.parser.test_skiprows.test_skip_rows_blank(all_parsers)
pandas.tests.io.parser.test_skiprows.test_skip_rows_bug(all_parsers,skiprows)
pandas.tests.io.parser.test_skiprows.test_skip_rows_callable(all_parsers,kwargs,expected)
pandas.tests.io.parser.test_skiprows.test_skip_rows_skip_all(all_parsers)
pandas.tests.io.parser.test_skiprows.test_skiprows_infield_quote(all_parsers)
pandas.tests.io.parser.test_skiprows.test_skiprows_lineterminator(all_parsers,line_terminator)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/test_multi_thread.py----------------------------------------
A:pandas.tests.io.parser.test_multi_thread.df->_construct_dataframe(num_rows)
A:pandas.tests.io.parser.test_multi_thread.df['date']->pandas.date_range('20000101 09:00:00', periods=num_rows, freq='s')
A:pandas.tests.io.parser.test_multi_thread.df['int']->numpy.arange(num_rows, dtype='int64')
A:pandas.tests.io.parser.test_multi_thread.pool->ThreadPool(processes=num_tasks)
A:pandas.tests.io.parser.test_multi_thread.results->ThreadPool(processes=num_tasks).map(reader, tasks)
A:pandas.tests.io.parser.test_multi_thread.final_dataframe->_generate_multi_thread_dataframe(parser, path, num_rows, num_tasks)
pandas.tests.io.parser.test_multi_thread._construct_dataframe(num_rows)
pandas.tests.io.parser.test_multi_thread._generate_multi_thread_dataframe(parser,path,num_rows,num_tasks)
pandas.tests.io.parser.test_multi_thread.test_multi_thread_path_multipart_read_csv(all_parsers)
pandas.tests.io.parser.test_multi_thread.test_multi_thread_string_io_read_csv(all_parsers)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/test_common.py----------------------------------------
A:pandas.tests.io.parser.test_common.self.usecols->list(self.usecols)
A:pandas.tests.io.parser.test_common.expected->Series([4321583677327450765, 4321113141090630389], name=4)
A:pandas.tests.io.parser.test_common.parser->TextParser(data_list, chunksize=2, **kwargs)
A:pandas.tests.io.parser.test_common.parser._engine->MyCParserWrapper(StringIO(data), **parser.options)
A:pandas.tests.io.parser.test_common.result->TextParser(data_list, chunksize=2, **kwargs).read_csv(StringIO(data), delimiter='\t')
A:pandas.tests.io.parser.test_common.path->'__{}__.csv'.format(tm.rands(10))
A:pandas.tests.io.parser.test_common.codec->codecs.lookup('utf-8')
A:pandas.tests.io.parser.test_common.utf8->codecs.lookup('utf-8')
A:pandas.tests.io.parser.test_common.index->Index(['a', 'b', 'c'], name=0)
A:pandas.tests.io.parser.test_common.reader->TextParser(data_list, chunksize=2, **kwargs).read_csv(StringIO(data), chunksize=1)
A:pandas.tests.io.parser.test_common.csv2->os.path.join(csv_dir_path, 'test2.csv')
A:pandas.tests.io.parser.test_common.chunks->list(reader)
A:pandas.tests.io.parser.test_common.kwargs->dict(squeeze=True, header=None)
A:pandas.tests.io.parser.test_common.data->data.replace(',', '  ').replace(',', '  ')
A:pandas.tests.io.parser.test_common.first_chunk->TextParser(data_list, chunksize=2, **kwargs).read_csv(StringIO(data), chunksize=1).read(3)
A:pandas.tests.io.parser.test_common.last_chunk->TextParser(data_list, chunksize=2, **kwargs).read_csv(StringIO(data), chunksize=1).read(5)
A:pandas.tests.io.parser.test_common.lines->list(csv.reader(StringIO(data)))
A:pandas.tests.io.parser.test_common.headless_data->'\n'.join(data.split('\n')[1:])
A:pandas.tests.io.parser.test_common.url_result->TextParser(data_list, chunksize=2, **kwargs).read_csv(url, **kwargs)
A:pandas.tests.io.parser.test_common.local_path->os.path.join(csv_dir_path, 'salaries.csv')
A:pandas.tests.io.parser.test_common.local_result->TextParser(data_list, chunksize=2, **kwargs).read_csv(local_path, **kwargs)
A:pandas.tests.io.parser.test_common.df->DataFrame({'a': [1, 2, 3]})
A:pandas.tests.io.parser.test_common.df_roundtrip->TextParser(data_list, chunksize=2, **kwargs).read_csv(StringIO(data), float_precision=precision)
A:pandas.tests.io.parser.test_common.captured->capsys.readouterr()
A:pandas.tests.io.parser.test_common.mmap_file->os.path.join(csv_dir_path, 'test_mmap.csv')
A:pandas.tests.io.parser.test_common.out->TextParser(data_list, chunksize=2, **kwargs).read_csv(StringIO(data), names=names)
A:pandas.tests.io.parser.test_common.new_file->TemporaryFile('w+')
A:pandas.tests.io.parser.test_common.filename->os.path.join(csv_dir_path, 'sub_char.csv')
A:pandas.tests.io.parser.test_common.fh->StringIO(data)
pandas.tests.io.parser.test_common.test_1000_sep(all_parsers)
pandas.tests.io.parser.test_common.test_1000_sep_with_decimal(all_parsers,data,thousands,decimal)
pandas.tests.io.parser.test_common.test_bad_stream_exception(all_parsers,csv_dir_path)
pandas.tests.io.parser.test_common.test_catch_too_many_names(all_parsers)
pandas.tests.io.parser.test_common.test_chunk_begins_with_newline_whitespace(all_parsers)
pandas.tests.io.parser.test_common.test_chunks_have_consistent_numerical_type(all_parsers)
pandas.tests.io.parser.test_common.test_csv_mixed_type(all_parsers)
pandas.tests.io.parser.test_common.test_empty_decimal_marker(all_parsers)
pandas.tests.io.parser.test_common.test_empty_lines(all_parsers,sep,skip_blank_lines,exp_data)
pandas.tests.io.parser.test_common.test_empty_with_index(all_parsers)
pandas.tests.io.parser.test_common.test_empty_with_multi_index(all_parsers)
pandas.tests.io.parser.test_common.test_empty_with_nrows_chunksize(all_parsers,iterator)
pandas.tests.io.parser.test_common.test_empty_with_reversed_multi_index(all_parsers)
pandas.tests.io.parser.test_common.test_eof_states(all_parsers,data,kwargs,expected,msg)
pandas.tests.io.parser.test_common.test_error_bad_lines(all_parsers,kwargs,warn_kwargs)
pandas.tests.io.parser.test_common.test_escapechar(all_parsers)
pandas.tests.io.parser.test_common.test_euro_decimal_format(all_parsers)
pandas.tests.io.parser.test_common.test_file_handle_string_io(all_parsers)
pandas.tests.io.parser.test_common.test_file_handles_with_open(all_parsers,csv1)
pandas.tests.io.parser.test_common.test_filename_with_special_chars(all_parsers,filename)
pandas.tests.io.parser.test_common.test_first_row_bom(all_parsers)
pandas.tests.io.parser.test_common.test_float_parser(all_parsers)
pandas.tests.io.parser.test_common.test_get_chunk_passed_chunksize(all_parsers)
pandas.tests.io.parser.test_common.test_ignore_leading_whitespace(all_parsers)
pandas.tests.io.parser.test_common.test_inf_parsing(all_parsers,na_filter)
pandas.tests.io.parser.test_common.test_infinity_parsing(all_parsers,na_filter)
pandas.tests.io.parser.test_common.test_int64_min_issues(all_parsers)
pandas.tests.io.parser.test_common.test_int64_overflow(all_parsers,conv)
pandas.tests.io.parser.test_common.test_int64_uint64_range(all_parsers,val)
pandas.tests.io.parser.test_common.test_int_conversion(all_parsers)
pandas.tests.io.parser.test_common.test_integer_overflow_bug(all_parsers,sep)
pandas.tests.io.parser.test_common.test_integer_precision(all_parsers)
pandas.tests.io.parser.test_common.test_internal_eof_byte(all_parsers)
pandas.tests.io.parser.test_common.test_internal_eof_byte_to_file(all_parsers)
pandas.tests.io.parser.test_common.test_invalid_file_buffer_class(all_parsers)
pandas.tests.io.parser.test_common.test_invalid_file_buffer_mock(all_parsers)
pandas.tests.io.parser.test_common.test_iteration_open_handle(all_parsers)
pandas.tests.io.parser.test_common.test_iterator(all_parsers)
pandas.tests.io.parser.test_common.test_iterator2(all_parsers)
pandas.tests.io.parser.test_common.test_iterator_skipfooter_errors(all_parsers,kwargs)
pandas.tests.io.parser.test_common.test_iterator_stop_on_chunksize(all_parsers)
pandas.tests.io.parser.test_common.test_local_file(all_parsers,csv_dir_path)
pandas.tests.io.parser.test_common.test_malformed(all_parsers)
pandas.tests.io.parser.test_common.test_malformed_chunks(all_parsers,nrows)
pandas.tests.io.parser.test_common.test_memory_map(all_parsers,csv_dir_path)
pandas.tests.io.parser.test_common.test_missing_trailing_delimiters(all_parsers)
pandas.tests.io.parser.test_common.test_multi_index_blank_df(all_parsers,data,expected,header,round_trip)
pandas.tests.io.parser.test_common.test_multi_index_no_level_names(all_parsers,index_col)
pandas.tests.io.parser.test_common.test_multi_index_no_level_names_implicit(all_parsers)
pandas.tests.io.parser.test_common.test_no_unnamed_index(all_parsers)
pandas.tests.io.parser.test_common.test_nonexistent_path(all_parsers)
pandas.tests.io.parser.test_common.test_nrows_skipfooter_errors(all_parsers)
pandas.tests.io.parser.test_common.test_null_byte_char(all_parsers)
pandas.tests.io.parser.test_common.test_numeric_range_too_wide(all_parsers,exp_data)
pandas.tests.io.parser.test_common.test_outside_int64_uint64_range(all_parsers,val)
pandas.tests.io.parser.test_common.test_override_set_noconvert_columns()
pandas.tests.io.parser.test_common.test_parse_bool(all_parsers,data,kwargs,expected)
pandas.tests.io.parser.test_common.test_parse_integers_above_fp_precision(all_parsers)
pandas.tests.io.parser.test_common.test_pass_names_with_index(all_parsers,data,kwargs,expected)
pandas.tests.io.parser.test_common.test_path_local_path(all_parsers)
pandas.tests.io.parser.test_common.test_path_path_lib(all_parsers)
pandas.tests.io.parser.test_common.test_raise_on_no_columns(all_parsers,nrows)
pandas.tests.io.parser.test_common.test_raise_on_sep_with_delim_whitespace(all_parsers)
pandas.tests.io.parser.test_common.test_read_chunksize_and_nrows(all_parsers,chunksize)
pandas.tests.io.parser.test_common.test_read_chunksize_and_nrows_changing_size(all_parsers)
pandas.tests.io.parser.test_common.test_read_chunksize_bad(all_parsers,chunksize)
pandas.tests.io.parser.test_common.test_read_chunksize_compat(all_parsers,kwargs)
pandas.tests.io.parser.test_common.test_read_chunksize_jagged_names(all_parsers)
pandas.tests.io.parser.test_common.test_read_chunksize_with_index(all_parsers,index_col)
pandas.tests.io.parser.test_common.test_read_csv_dataframe(all_parsers,csv1)
pandas.tests.io.parser.test_common.test_read_csv_local(all_parsers,csv1)
pandas.tests.io.parser.test_common.test_read_csv_low_memory_no_rows_with_index(all_parsers)
pandas.tests.io.parser.test_common.test_read_csv_memory_growth_chunksize(all_parsers)
pandas.tests.io.parser.test_common.test_read_csv_no_index_name(all_parsers,csv_dir_path)
pandas.tests.io.parser.test_common.test_read_csv_parse_simple_list(all_parsers)
pandas.tests.io.parser.test_common.test_read_csv_wrong_num_columns(all_parsers)
pandas.tests.io.parser.test_common.test_read_data_list(all_parsers)
pandas.tests.io.parser.test_common.test_read_duplicate_index_explicit(all_parsers)
pandas.tests.io.parser.test_common.test_read_duplicate_index_implicit(all_parsers)
pandas.tests.io.parser.test_common.test_read_empty_with_usecols(all_parsers,data,kwargs,expected)
pandas.tests.io.parser.test_common.test_read_nrows(all_parsers,nrows)
pandas.tests.io.parser.test_common.test_read_nrows_bad(all_parsers,nrows)
pandas.tests.io.parser.test_common.test_read_table_equivalency_to_read_csv(all_parsers)
pandas.tests.io.parser.test_common.test_reader_list(all_parsers)
pandas.tests.io.parser.test_common.test_reader_list_skiprows(all_parsers)
pandas.tests.io.parser.test_common.test_scientific_no_exponent(all_parsers)
pandas.tests.io.parser.test_common.test_single_char_leading_whitespace(all_parsers,delim_whitespace)
pandas.tests.io.parser.test_common.test_skip_initial_space(all_parsers)
pandas.tests.io.parser.test_common.test_squeeze(all_parsers)
pandas.tests.io.parser.test_common.test_sub_character(all_parsers,csv_dir_path)
pandas.tests.io.parser.test_common.test_suppress_error_output(all_parsers,capsys)
pandas.tests.io.parser.test_common.test_temporary_file(all_parsers)
pandas.tests.io.parser.test_common.test_trailing_delimiters(all_parsers)
pandas.tests.io.parser.test_common.test_trailing_spaces(all_parsers,kwargs,expected)
pandas.tests.io.parser.test_common.test_uneven_lines_with_usecols(all_parsers,usecols)
pandas.tests.io.parser.test_common.test_unnamed_columns(all_parsers)
pandas.tests.io.parser.test_common.test_url(all_parsers,csv_dir_path)
pandas.tests.io.parser.test_common.test_valid_file_buffer_seems_invalid(all_parsers)
pandas.tests.io.parser.test_common.test_verbose_read(all_parsers,capsys)
pandas.tests.io.parser.test_common.test_verbose_read2(all_parsers,capsys)
pandas.tests.io.parser.test_common.test_warn_bad_lines(all_parsers,capsys)
pandas.tests.io.parser.test_common.test_warn_if_chunks_have_mismatched_type(all_parsers)
pandas.tests.io.parser.test_common.test_whitespace_lines(all_parsers)
pandas.tests.io.parser.test_common.test_whitespace_regex_separator(all_parsers,data,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/test_quoting.py----------------------------------------
A:pandas.tests.io.parser.test_quoting.expected->DataFrame([[1, 2, 3]], columns=['a', 'b', 'c'])
A:pandas.tests.io.parser.test_quoting.result->parser.read_csv(StringIO(data + '"'))
A:pandas.tests.io.parser.test_quoting.new_data->data.replace('"', quote_char)
A:pandas.tests.io.parser.test_quoting.kwargs->dict(quotechar=quote_char, quoting=quoting)
pandas.tests.io.parser.test_quoting.test_bad_quote_char(all_parsers,kwargs,msg)
pandas.tests.io.parser.test_quoting.test_bad_quoting(all_parsers,quoting,msg)
pandas.tests.io.parser.test_quoting.test_double_quote(all_parsers,doublequote,exp_data)
pandas.tests.io.parser.test_quoting.test_null_quote_char(all_parsers,quoting,quote_char)
pandas.tests.io.parser.test_quoting.test_quote_char_basic(all_parsers)
pandas.tests.io.parser.test_quoting.test_quote_char_various(all_parsers,quote_char)
pandas.tests.io.parser.test_quoting.test_quotechar_unicode(all_parsers,quotechar)
pandas.tests.io.parser.test_quoting.test_quoting_various(all_parsers,kwargs,exp_data)
pandas.tests.io.parser.test_quoting.test_unbalanced_quoting(all_parsers,balanced)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/test_c_parser_only.py----------------------------------------
A:pandas.tests.io.parser.test_c_parser_only.df->parser.read_csv(csv)
A:pandas.tests.io.parser.test_c_parser_only.expected->DataFrame(columns=['col_1', 'col_2', 'col_3'])
A:pandas.tests.io.parser.test_c_parser_only.result->parser.read_csv(path, skiprows=2, encoding='utf-8', engine='c')
A:pandas.tests.io.parser.test_c_parser_only.expected['a']->expected['a'].astype(np.int32).astype(np.int32)
A:pandas.tests.io.parser.test_c_parser_only.text->'a\n{0:.25}'.format(num)
A:pandas.tests.io.parser.test_c_parser_only.normal_val->float(parser.read_csv(StringIO(text))['a'][0])
A:pandas.tests.io.parser.test_c_parser_only.precise_val->float(parser.read_csv(StringIO(text), float_precision='high')['a'][0])
A:pandas.tests.io.parser.test_c_parser_only.roundtrip_val->float(parser.read_csv(StringIO(text), float_precision='round_trip')['a'][0])
A:pandas.tests.io.parser.test_c_parser_only.actual_val->Decimal(text[2:])
A:pandas.tests.io.parser.test_c_parser_only.result2->parser.read_csv(StringIO(data), usecols=(0, 2), names=('a', 'b', 'c'), header=None, converters={'a': str}, dtype={'b': int, 'c': float})
A:pandas.tests.io.parser.test_c_parser_only.s->StringIO(',' * count)
A:pandas.tests.io.parser.test_c_parser_only.row->tuple((val_ if val_ else np.nan for val_ in record_.split(',')))
A:pandas.tests.io.parser.test_c_parser_only.chunks_->parser.read_csv(StringIO(csv_data), header=None, dtype=object, chunksize=chunksize, encoding='utf_8')
A:pandas.tests.io.parser.test_c_parser_only.rows->test_input.split('\n')
A:pandas.tests.io.parser.test_c_parser_only.captured->capsys.readouterr()
A:pandas.tests.io.parser.test_c_parser_only.t->TextIOWrapper(t, encoding='ascii', errors='surrogateescape')
A:pandas.tests.io.parser.test_c_parser_only.tar_path->os.path.join(csv_dir_path, 'tar_csv' + tar_suffix)
A:pandas.tests.io.parser.test_c_parser_only.data_file->tar.extractfile('tar_data.csv')
A:pandas.tests.io.parser.test_c_parser_only.out->parser.read_csv(data_file)
A:pandas.tests.io.parser.test_c_parser_only.csv->StringIO('strings\n' + '\n'.join(['x' * (1 << 20) for _ in range(2100)]))
A:pandas.tests.io.parser.test_c_parser_only.m->mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)
pandas.tests.io.parser.test_c_parser_only.test_buffer_overflow(c_parser_only,malformed)
pandas.tests.io.parser.test_c_parser_only.test_buffer_rd_bytes(c_parser_only)
pandas.tests.io.parser.test_c_parser_only.test_buffer_rd_bytes_bad_unicode(c_parser_only)
pandas.tests.io.parser.test_c_parser_only.test_bytes_exceed_2gb(c_parser_only)
pandas.tests.io.parser.test_c_parser_only.test_chunk_whitespace_on_boundary(c_parser_only)
pandas.tests.io.parser.test_c_parser_only.test_comment_whitespace_delimited(c_parser_only,capsys)
pandas.tests.io.parser.test_c_parser_only.test_custom_lineterminator(c_parser_only)
pandas.tests.io.parser.test_c_parser_only.test_data_after_quote(c_parser_only)
pandas.tests.io.parser.test_c_parser_only.test_delim_whitespace_custom_terminator(c_parser_only)
pandas.tests.io.parser.test_c_parser_only.test_disable_bool_parsing(c_parser_only)
pandas.tests.io.parser.test_c_parser_only.test_dtype_and_names_error(c_parser_only)
pandas.tests.io.parser.test_c_parser_only.test_file_binary_mode(c_parser_only)
pandas.tests.io.parser.test_c_parser_only.test_file_handles_mmap(c_parser_only,csv1)
pandas.tests.io.parser.test_c_parser_only.test_file_like_no_next(c_parser_only)
pandas.tests.io.parser.test_c_parser_only.test_float_precision_round_trip_with_text(c_parser_only)
pandas.tests.io.parser.test_c_parser_only.test_grow_boundary_at_cap(c_parser_only)
pandas.tests.io.parser.test_c_parser_only.test_internal_null_byte(c_parser_only)
pandas.tests.io.parser.test_c_parser_only.test_large_difference_in_columns(c_parser_only)
pandas.tests.io.parser.test_c_parser_only.test_parse_ragged_csv(c_parser_only)
pandas.tests.io.parser.test_c_parser_only.test_parse_trim_buffers(c_parser_only)
pandas.tests.io.parser.test_c_parser_only.test_precise_conversion(c_parser_only)
pandas.tests.io.parser.test_c_parser_only.test_read_nrows_large(c_parser_only)
pandas.tests.io.parser.test_c_parser_only.test_read_tarfile(c_parser_only,csv_dir_path,tar_suffix)
pandas.tests.io.parser.test_c_parser_only.test_tokenize_CR_with_quoting(c_parser_only)
pandas.tests.io.parser.test_c_parser_only.test_unix_style_breaks(c_parser_only)
pandas.tests.io.parser.test_c_parser_only.test_unsupported_dtype(c_parser_only,match,kwargs)
pandas.tests.io.parser.test_c_parser_only.test_usecols_dtypes(c_parser_only)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/test_dtypes.py----------------------------------------
A:pandas.tests.io.parser.test_dtypes.df->DataFrame(np.random.rand(5, 2).round(4), columns=list('AB'), index=['1A', '1B', '1C', '1D', '1E'])
A:pandas.tests.io.parser.test_dtypes.result->parser.read_csv(StringIO(data), dtype='boolean')
A:pandas.tests.io.parser.test_dtypes.expected->pandas.DataFrame({'a': pd.array([True, True, True, False, False, False, None, None, None, None, None], dtype='boolean')})
A:pandas.tests.io.parser.test_dtypes.expected['one']->expected['one'].astype(np.float64).astype(np.float64)
A:pandas.tests.io.parser.test_dtypes.expected['two']->expected['two'].astype(object).astype(object)
A:pandas.tests.io.parser.test_dtypes.actual->parser.read_csv(pth, sep=sep, encoding=encoding, dtype='category')
A:pandas.tests.io.parser.test_dtypes.data->'\n'.join(['a', 'True', 'TRUE', 'true', 'False', 'FALSE', 'false', 'NaN', 'nan', 'NA', 'null', 'NULL'])
A:pandas.tests.io.parser.test_dtypes.actual['a']->actual['a'].cat.reorder_categories(np.sort(actual.a.cat.categories), ordered=True).cat.reorder_categories(np.sort(actual.a.cat.categories), ordered=True)
A:pandas.tests.io.parser.test_dtypes.pth->os.path.join(csv_dir_path, 'utf16_ex.txt')
A:pandas.tests.io.parser.test_dtypes.expected[1]->Categorical(expected[1])
A:pandas.tests.io.parser.test_dtypes.actuals->parser.read_csv(StringIO(data), dtype={'b': dtype}, chunksize=2)
A:pandas.tests.io.parser.test_dtypes.dtype->CategoricalDtype(['c', 'b', 'a'])
A:pandas.tests.io.parser.test_dtypes.exp_idx->pandas.MultiIndex.from_arrays([np.empty(0, dtype='u1'), np.empty(0, dtype=np.float64)], names=['one', 'two'])
A:pandas.tests.io.parser.test_dtypes.expected.index->pandas.DataFrame({'a': pd.array([True, True, True, False, False, False, None, None, None, None, None], dtype='boolean')}).index.astype(object)
pandas.tests.io.parser.test_dtypes.test_boolean_dtype(all_parsers)
pandas.tests.io.parser.test_dtypes.test_categorical_category_dtype(all_parsers,categories,ordered)
pandas.tests.io.parser.test_dtypes.test_categorical_category_dtype_unsorted(all_parsers)
pandas.tests.io.parser.test_dtypes.test_categorical_coerces_datetime(all_parsers)
pandas.tests.io.parser.test_dtypes.test_categorical_coerces_dt(all_parsers)
pandas.tests.io.parser.test_dtypes.test_categorical_coerces_numeric(all_parsers)
pandas.tests.io.parser.test_dtypes.test_categorical_coerces_timedelta(all_parsers)
pandas.tests.io.parser.test_dtypes.test_categorical_coerces_timestamp(all_parsers)
pandas.tests.io.parser.test_dtypes.test_categorical_dtype(all_parsers,dtype)
pandas.tests.io.parser.test_dtypes.test_categorical_dtype_chunksize_explicit_categories(all_parsers)
pandas.tests.io.parser.test_dtypes.test_categorical_dtype_chunksize_infer_categories(all_parsers)
pandas.tests.io.parser.test_dtypes.test_categorical_dtype_coerces_boolean(all_parsers,data)
pandas.tests.io.parser.test_dtypes.test_categorical_dtype_high_cardinality_numeric(all_parsers)
pandas.tests.io.parser.test_dtypes.test_categorical_dtype_latin1(all_parsers,csv_dir_path)
pandas.tests.io.parser.test_dtypes.test_categorical_dtype_missing(all_parsers)
pandas.tests.io.parser.test_dtypes.test_categorical_dtype_single(all_parsers,dtype)
pandas.tests.io.parser.test_dtypes.test_categorical_dtype_unsorted(all_parsers)
pandas.tests.io.parser.test_dtypes.test_categorical_dtype_utf16(all_parsers,csv_dir_path)
pandas.tests.io.parser.test_dtypes.test_categorical_unexpected_categories(all_parsers)
pandas.tests.io.parser.test_dtypes.test_dtype_all_columns(all_parsers,dtype,check_orig)
pandas.tests.io.parser.test_dtypes.test_dtype_all_columns_empty(all_parsers)
pandas.tests.io.parser.test_dtypes.test_dtype_per_column(all_parsers)
pandas.tests.io.parser.test_dtypes.test_dtype_with_converters(all_parsers)
pandas.tests.io.parser.test_dtypes.test_empty_dtype(all_parsers,dtype,expected)
pandas.tests.io.parser.test_dtypes.test_empty_pass_dtype(all_parsers)
pandas.tests.io.parser.test_dtypes.test_empty_with_dup_column_pass_dtype_by_indexes(all_parsers)
pandas.tests.io.parser.test_dtypes.test_empty_with_dup_column_pass_dtype_by_indexes_raises(all_parsers)
pandas.tests.io.parser.test_dtypes.test_empty_with_index_pass_dtype(all_parsers)
pandas.tests.io.parser.test_dtypes.test_empty_with_mangled_column_pass_dtype_by_indexes(all_parsers)
pandas.tests.io.parser.test_dtypes.test_empty_with_mangled_column_pass_dtype_by_names(all_parsers)
pandas.tests.io.parser.test_dtypes.test_empty_with_multi_index_pass_dtype(all_parsers)
pandas.tests.io.parser.test_dtypes.test_invalid_dtype_per_column(all_parsers)
pandas.tests.io.parser.test_dtypes.test_numeric_dtype(all_parsers,dtype)
pandas.tests.io.parser.test_dtypes.test_raise_on_passed_int_dtype_with_nas(all_parsers)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/test_dialect.py----------------------------------------
A:pandas.tests.io.parser.test_dialect.dialect_kwargs->dict(doublequote=False, escapechar='~', delimiter=':', skipinitialspace=False, quotechar='~', quoting=3)
A:pandas.tests.io.parser.test_dialect.dia->csv.excel()
A:pandas.tests.io.parser.test_dialect.df->parser.read_csv(StringIO(data), dialect=dialect_name)
A:pandas.tests.io.parser.test_dialect.exp->DataFrame({'fruit': ['apple', 'pear'], 'vegetable': ['broccoli', 'tomato']})
A:pandas.tests.io.parser.test_dialect.expected->DataFrame({'a': [1], 'b': [2]})
A:pandas.tests.io.parser.test_dialect.kwds->dict()
A:pandas.tests.io.parser.test_dialect.result->parser.read_csv(StringIO(data), dialect=dialect_name, **kwargs)
pandas.tests.io.parser.test_dialect.custom_dialect()
pandas.tests.io.parser.test_dialect.test_dialect(all_parsers)
pandas.tests.io.parser.test_dialect.test_dialect_conflict_delimiter(all_parsers,custom_dialect,kwargs,warning_klass)
pandas.tests.io.parser.test_dialect.test_dialect_conflict_except_delimiter(all_parsers,custom_dialect,arg,value)
pandas.tests.io.parser.test_dialect.test_dialect_str(all_parsers)
pandas.tests.io.parser.test_dialect.test_invalid_dialect(all_parsers)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/test_encoding.py----------------------------------------
A:pandas.tests.io.parser.test_encoding.data->'mb_num,multibyte\n4.8,test'.encode(encoding)
A:pandas.tests.io.parser.test_encoding.result->parser.read_csv(f, encoding=encoding)
A:pandas.tests.io.parser.test_encoding.expected->DataFrame({title: [data]})
A:pandas.tests.io.parser.test_encoding.path->os.path.join(csv_dir_path, 'unicode_series.csv')
A:pandas.tests.io.parser.test_encoding.kwargs->dict(sep=sep, skiprows=2)
A:pandas.tests.io.parser.test_encoding.bytes_data->'mb_num,multibyte\n4.8,test'.encode(encoding).encode(encoding)
A:pandas.tests.io.parser.test_encoding.bytes_buffer->TextIOWrapper(bytes_buffer, encoding=utf8)
A:pandas.tests.io.parser.test_encoding.bom_data->(bom + _data).encode(utf8)
A:pandas.tests.io.parser.test_encoding.encoding->encoding_fmt.format(utf_value)
A:pandas.tests.io.parser.test_encoding.fpath->os.path.join(csv_dir_path, fname)
pandas.tests.io.parser.test_encoding.test_binary_mode_file_buffers(all_parsers,csv_dir_path,fname,encoding)
pandas.tests.io.parser.test_encoding.test_bytes_io_input(all_parsers)
pandas.tests.io.parser.test_encoding.test_encoding_named_temp_file(all_parsers)
pandas.tests.io.parser.test_encoding.test_encoding_temp_file(all_parsers,utf_value,encoding_fmt,pass_encoding)
pandas.tests.io.parser.test_encoding.test_read_csv_unicode(all_parsers)
pandas.tests.io.parser.test_encoding.test_read_csv_utf_aliases(all_parsers,utf_value,encoding_fmt)
pandas.tests.io.parser.test_encoding.test_unicode_encoding(all_parsers,csv_dir_path)
pandas.tests.io.parser.test_encoding.test_utf16_bom_skiprows(all_parsers,sep,encoding)
pandas.tests.io.parser.test_encoding.test_utf16_example(all_parsers,csv_dir_path)
pandas.tests.io.parser.test_encoding.test_utf8_bom(all_parsers,data,kwargs,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/test_header.py----------------------------------------
A:pandas.tests.io.parser.test_header.s->StringIO(',,')
A:pandas.tests.io.parser.test_header.result->parser.read_csv(StringIO(data), header=header, index_col=index_col)
A:pandas.tests.io.parser.test_header.expected->DataFrame([[0.86, 0.67, 0.88, 0.78, 0.81], [0.86, 0.67, 0.88, 0.78, 0.82]], columns=mi)
A:pandas.tests.io.parser.test_header._TestTuple->namedtuple('names', ['first', 'second'])
A:pandas.tests.io.parser.test_header.col->template.format(i=i if index_col is None else i + 1)
A:pandas.tests.io.parser.test_header.columns->pandas.MultiIndex.from_tuples(zip(exp_columns, ['0', '1']))
A:pandas.tests.io.parser.test_header.mi->pandas.MultiIndex.from_tuples([('Male', 'R'), (' Male', ' R'), (' Male', ' L'), (' Female', ' R'), (' Female', ' R.1')])
A:pandas.tests.io.parser.test_header.df1->parser.read_csv(StringIO(s1), header=[0, 1])
A:pandas.tests.io.parser.test_header.df2->parser.read_csv(StringIO(s2), header=[0, 1])
pandas.tests.io.parser.test_header.test_bool_header_arg(all_parsers,header)
pandas.tests.io.parser.test_header.test_header_multi_index(all_parsers)
pandas.tests.io.parser.test_header.test_header_multi_index_common_format1(all_parsers,kwargs)
pandas.tests.io.parser.test_header.test_header_multi_index_common_format2(all_parsers,kwargs)
pandas.tests.io.parser.test_header.test_header_multi_index_common_format3(all_parsers,kwargs)
pandas.tests.io.parser.test_header.test_header_multi_index_common_format_malformed1(all_parsers)
pandas.tests.io.parser.test_header.test_header_multi_index_common_format_malformed2(all_parsers)
pandas.tests.io.parser.test_header.test_header_multi_index_common_format_malformed3(all_parsers)
pandas.tests.io.parser.test_header.test_header_multi_index_invalid(all_parsers,kwargs,msg)
pandas.tests.io.parser.test_header.test_header_names_backward_compat(all_parsers,data,header)
pandas.tests.io.parser.test_header.test_header_not_first_line(all_parsers)
pandas.tests.io.parser.test_header.test_header_with_index_col(all_parsers)
pandas.tests.io.parser.test_header.test_mangles_multi_index(all_parsers,data,expected)
pandas.tests.io.parser.test_header.test_multi_index_unnamed(all_parsers,index_col,columns)
pandas.tests.io.parser.test_header.test_negative_header(all_parsers)
pandas.tests.io.parser.test_header.test_negative_multi_index_header(all_parsers,header)
pandas.tests.io.parser.test_header.test_no_header(all_parsers,kwargs,names)
pandas.tests.io.parser.test_header.test_no_header_prefix(all_parsers)
pandas.tests.io.parser.test_header.test_non_int_header(all_parsers,header)
pandas.tests.io.parser.test_header.test_read_csv_multiindex_columns(all_parsers)
pandas.tests.io.parser.test_header.test_read_only_header_no_rows(all_parsers,kwargs)
pandas.tests.io.parser.test_header.test_read_with_bad_header(all_parsers)
pandas.tests.io.parser.test_header.test_singleton_header(all_parsers)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/conftest.py----------------------------------------
A:pandas.tests.io.parser.conftest.kwargs->self.update_kwargs(kwargs)
A:pandas.tests.io.parser.conftest._cParserHighMemory->CParserHighMemory()
A:pandas.tests.io.parser.conftest._cParserLowMemory->CParserLowMemory()
A:pandas.tests.io.parser.conftest._pythonParser->PythonParser()
pandas.tests.io.parser.conftest.BaseParser
pandas.tests.io.parser.conftest.BaseParser.read_csv(self,*args,**kwargs)
pandas.tests.io.parser.conftest.BaseParser.read_table(self,*args,**kwargs)
pandas.tests.io.parser.conftest.BaseParser.update_kwargs(self,kwargs)
pandas.tests.io.parser.conftest.CParser(BaseParser)
pandas.tests.io.parser.conftest.CParserHighMemory(CParser)
pandas.tests.io.parser.conftest.CParserLowMemory(CParser)
pandas.tests.io.parser.conftest.PythonParser(BaseParser)
pandas.tests.io.parser.conftest.all_parsers(request)
pandas.tests.io.parser.conftest.c_parser_only(request)
pandas.tests.io.parser.conftest.csv1(csv_dir_path)
pandas.tests.io.parser.conftest.csv_dir_path(datapath)
pandas.tests.io.parser.conftest.encoding_fmt(request)
pandas.tests.io.parser.conftest.python_parser_only(request)
pandas.tests.io.parser.conftest.utf_value(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/test_read_fwf.py----------------------------------------
A:pandas.tests.io.parser.test_read_fwf.result->read_fwf(path, **kwargs)
A:pandas.tests.io.parser.test_read_fwf.expected->read_fwf(StringIO(data), **kwargs)
A:pandas.tests.io.parser.test_read_fwf.df->read_fwf(StringIO(data), colspecs=[(0, 17), (25, 26), (33, 37), (49, 51), (58, 62), (63, 1000)], names=['time', 'pri', 'pgn', 'dst', 'src', 'data'], converters={'pgn': lambda x: int(x, 16), 'src': lambda x: int(x, 16), 'dst': lambda x: int(x, 16), 'data': lambda x: len(x.split(' '))})
A:pandas.tests.io.parser.test_read_fwf.expected['dst']->expected['dst'].astype(object).astype(object)
A:pandas.tests.io.parser.test_read_fwf.data->bytes(data, encoding='utf-8')
A:pandas.tests.io.parser.test_read_fwf.test->'\ncol1~~~~~col2  col3++++++++++++++++++col4\n~~22.....11.0+++foo~~~~~~~~~~Keanu Reeves\n  33+++122.33\\\\\\bar.........Gerard Butler\n++44~~~~12.01   baz~~Jennifer Love Hewitt\n~~55       11+++foo++++Jada Pinkett-Smith\n..66++++++.03~~~bar           Bill Murray\n'.strip('\r\n')
A:pandas.tests.io.parser.test_read_fwf.kwargs->dict(widths=[5, 5], names=['one', 'two'])
A:pandas.tests.io.parser.test_read_fwf.expected[col]->expected[col].astype(dt).astype(dt)
pandas.tests.io.parser.test_read_fwf.test_basic()
pandas.tests.io.parser.test_read_fwf.test_bool_header_arg(header)
pandas.tests.io.parser.test_read_fwf.test_bytes_io_input()
pandas.tests.io.parser.test_read_fwf.test_colspecs()
pandas.tests.io.parser.test_read_fwf.test_default_delimiter()
pandas.tests.io.parser.test_read_fwf.test_dtype(dtype)
pandas.tests.io.parser.test_read_fwf.test_full_file()
pandas.tests.io.parser.test_read_fwf.test_full_file_with_missing()
pandas.tests.io.parser.test_read_fwf.test_full_file_with_spaces()
pandas.tests.io.parser.test_read_fwf.test_full_file_with_spaces_and_missing()
pandas.tests.io.parser.test_read_fwf.test_fwf_colspecs_infer_nrows(infer_nrows,exp_data)
pandas.tests.io.parser.test_read_fwf.test_fwf_colspecs_is_list_or_tuple()
pandas.tests.io.parser.test_read_fwf.test_fwf_colspecs_is_list_or_tuple_of_two_element_tuples()
pandas.tests.io.parser.test_read_fwf.test_fwf_colspecs_none(colspecs,exp_data)
pandas.tests.io.parser.test_read_fwf.test_fwf_comment(comment)
pandas.tests.io.parser.test_read_fwf.test_fwf_compression(compression_only,infer)
pandas.tests.io.parser.test_read_fwf.test_fwf_for_uint8()
pandas.tests.io.parser.test_read_fwf.test_fwf_regression()
pandas.tests.io.parser.test_read_fwf.test_fwf_thousands(thousands)
pandas.tests.io.parser.test_read_fwf.test_messed_up_data()
pandas.tests.io.parser.test_read_fwf.test_multiple_delimiters()
pandas.tests.io.parser.test_read_fwf.test_non_space_filler()
pandas.tests.io.parser.test_read_fwf.test_over_specified()
pandas.tests.io.parser.test_read_fwf.test_read_csv_compat()
pandas.tests.io.parser.test_read_fwf.test_skiprows_by_index_inference()
pandas.tests.io.parser.test_read_fwf.test_skiprows_inference()
pandas.tests.io.parser.test_read_fwf.test_skiprows_inference_empty()
pandas.tests.io.parser.test_read_fwf.test_under_specified()
pandas.tests.io.parser.test_read_fwf.test_variable_width_unicode()
pandas.tests.io.parser.test_read_fwf.test_whitespace_preservation()
pandas.tests.io.parser.test_read_fwf.test_widths()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/test_index_col.py----------------------------------------
A:pandas.tests.io.parser.test_index_col.result->parser.read_csv(path, index_col=[0, 1, 2])
A:pandas.tests.io.parser.test_index_col.expected->DataFrame(np.random.randn(3, 3), index=midx, columns=['x', 'y', 'z'])
A:pandas.tests.io.parser.test_index_col.data->','.join(index_names + ['col\na,c,1\na,d,2\nb,c,3\nb,d,4'])
A:pandas.tests.io.parser.test_index_col.midx->pandas.MultiIndex.from_tuples([('A', 1, 2), ('A', 1, 2), ('B', 1, 2)])
pandas.tests.io.parser.test_index_col.test_empty_with_index_col_false(all_parsers)
pandas.tests.io.parser.test_index_col.test_index_col_empty_data(all_parsers,index_col,kwargs)
pandas.tests.io.parser.test_index_col.test_index_col_is_true(all_parsers)
pandas.tests.io.parser.test_index_col.test_index_col_named(all_parsers,with_header)
pandas.tests.io.parser.test_index_col.test_index_col_named2(all_parsers)
pandas.tests.io.parser.test_index_col.test_infer_index_col(all_parsers)
pandas.tests.io.parser.test_index_col.test_multi_index_naming(all_parsers,index_names)
pandas.tests.io.parser.test_index_col.test_multi_index_naming_not_all_at_beginning(all_parsers)
pandas.tests.io.parser.test_index_col.test_no_multi_index_level_names_empty(all_parsers)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/parser/test_converters.py----------------------------------------
A:pandas.tests.io.parser.test_converters.result->parser.read_csv(StringIO(data), converters={'score': convert_score, 'days': day_converter}, na_values=['', None])
A:pandas.tests.io.parser.test_converters.expected->DataFrame([[1, 1521.1541, 187101.9543, 'ABC', 'poi', 4.7387], [2, 121.12, 14897.76, 'DEF', 'uyt', 0.3773], [3, 878.158, 108013.434, 'GHI', 'rez', 2.7356]], columns=['Id', 'Number1', 'Number2', 'Text1', 'Text2', 'Number3'])
A:pandas.tests.io.parser.test_converters.expected['D']->expected['D'].map(converter).map(converter)
A:pandas.tests.io.parser.test_converters.converters->dict()
A:pandas.tests.io.parser.test_converters.x->x.strip().strip()
A:pandas.tests.io.parser.test_converters.is_plus->x.strip().strip().endswith('+')
A:pandas.tests.io.parser.test_converters.(val_min, val_max)->map(int, x.split('-'))
A:pandas.tests.io.parser.test_converters.val->float(x)
A:pandas.tests.io.parser.test_converters.rs->parser.read_csv(StringIO(data), sep=';', index_col='A', converters={'A': lambda x: x})
A:pandas.tests.io.parser.test_converters.xp->DataFrame({'B': [2, 4]}, index=Index([1, 3], name='A'))
pandas.tests.io.parser.test_converters.test_converter_index_col_bug(all_parsers)
pandas.tests.io.parser.test_converters.test_converters(all_parsers,column,converter)
pandas.tests.io.parser.test_converters.test_converters_corner_with_nans(all_parsers)
pandas.tests.io.parser.test_converters.test_converters_euro_decimal_format(all_parsers)
pandas.tests.io.parser.test_converters.test_converters_no_implicit_conv(all_parsers)
pandas.tests.io.parser.test_converters.test_converters_type_must_be_dict(all_parsers)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/excel/__init__.py----------------------------------------
A:pandas.tests.io.excel.__init__.pytestmark->pytest.mark.filterwarnings('ignore:This method will be removed in future versions:PendingDeprecationWarning')


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/excel/test_style.py----------------------------------------
A:pandas.tests.io.excel.test_style.df->DataFrame(np.random.randn(11, 3))
A:pandas.tests.io.excel.test_style.writer->ExcelWriter(path, engine=engine)
A:pandas.tests.io.excel.test_style.styled->DataFrame(np.random.randn(11, 3)).style.apply(style, axis=None)
A:pandas.tests.io.excel.test_style.openpyxl->pytest.importorskip('openpyxl')
A:pandas.tests.io.excel.test_style.wb->pytest.importorskip('openpyxl').load_workbook(path)
A:pandas.tests.io.excel.test_style.ref->'{cell2.column}{cell2.row:d}'.format(cell2=cell2)
pandas.tests.io.excel.test_style.test_styler_to_excel(engine)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/excel/test_readers.py----------------------------------------
A:pandas.tests.io.excel.test_readers.new_param->pytest.param(values, marks=engine.marks)
A:pandas.tests.io.excel.test_readers.func->partial(pd.ExcelFile, engine=engine)
A:pandas.tests.io.excel.test_readers.df_ref->df_ref.reindex(columns=['B', 'C']).reindex(columns=['B', 'C'])
A:pandas.tests.io.excel.test_readers.df1->excel.parse(0, index_col=0)
A:pandas.tests.io.excel.test_readers.df2->excel.parse(1, skiprows=[1], index_col=0)
A:pandas.tests.io.excel.test_readers.df3->excel.parse(0, index_col=0, skipfooter=1)
A:pandas.tests.io.excel.test_readers.result->pandas.read_excel(mi_file, 'index_col_none', header=[0, 1])
A:pandas.tests.io.excel.test_readers.expected.index->MultiIndex(levels=[['R_l0_g0', 'R_l0_g1', 'R_l0_g2', 'R_l0_g3', 'R_l0_g4'], ['R_l1_g0', 'R_l1_g1', 'R_l1_g2', 'R_l1_g3', 'R_l1_g4']], codes=[[0, 1, 2, 3, 4], [0, 1, 2, 3, 4]], names=[None, None]).set_names(['ilvl1', 'ilvl2'])
A:pandas.tests.io.excel.test_readers.expected->pandas.read_excel('test1' + read_ext, engine=engine)
A:pandas.tests.io.excel.test_readers.parsed->pandas.read_excel(excel, 'Sheet1', keep_default_na=True, na_values=['apple'], **kwargs)
A:pandas.tests.io.excel.test_readers.actual->pandas.read_excel(data, engine=engine)
A:pandas.tests.io.excel.test_readers.float_expected->pandas.read_excel('test1' + read_ext, engine=engine).copy()
A:pandas.tests.io.excel.test_readers.float_expected['IntCol']->float_expected['IntCol'].astype(float).astype(float)
A:pandas.tests.io.excel.test_readers.exp->pandas.read_excel('test1' + read_ext, engine=engine).set_index(name)
A:pandas.tests.io.excel.test_readers.expected['StrCol']->expected['StrCol'].apply(str).apply(str)
A:pandas.tests.io.excel.test_readers.no_convert_float->pandas.read_excel('test1' + read_ext, engine=engine).copy().copy()
A:pandas.tests.io.excel.test_readers.no_convert_float['StrCol']->no_convert_float['StrCol'].apply(str).apply(str)
A:pandas.tests.io.excel.test_readers.expected['a']->expected['a'].astype('float64').astype('float64')
A:pandas.tests.io.excel.test_readers.expected['b']->expected['b'].astype('float32').astype('float32')
A:pandas.tests.io.excel.test_readers.dfs->pandas.read_excel(basename + read_ext, sheet_name=None)
A:pandas.tests.io.excel.test_readers.expected_keys->list(set(expected_keys))
A:pandas.tests.io.excel.test_readers.url_table->pandas.read_excel('file://localhost/' + localtable)
A:pandas.tests.io.excel.test_readers.local_table->pandas.read_excel(localtable)
A:pandas.tests.io.excel.test_readers.localtable->os.path.join(datapath('io', 'data', 'excel'), 'test1' + read_ext)
A:pandas.tests.io.excel.test_readers.path_obj->LocalPath().join('test1' + read_ext)
A:pandas.tests.io.excel.test_readers.str_path->os.path.join('test1' + read_ext)
A:pandas.tests.io.excel.test_readers.x->pandas.read_excel(f, 'Sheet1', index_col=0)
A:pandas.tests.io.excel.test_readers.mi->MultiIndex(levels=[['R_l0_g0', 'R_l0_g1', 'R_l0_g2', 'R_l0_g3', 'R_l0_g4'], ['R_l1_g0', 'R_l1_g1', 'R_l1_g2', 'R_l1_g3', 'R_l1_g4']], codes=[[0, 1, 2, 3, 4], [0, 1, 2, 3, 4]], names=[None, None])
A:pandas.tests.io.excel.test_readers.expected.columns->MultiIndex(levels=[['R_l0_g0', 'R_l0_g1', 'R_l0_g2', 'R_l0_g3', 'R_l0_g4'], ['R_l1_g0', 'R_l1_g1', 'R_l1_g2', 'R_l1_g3', 'R_l1_g4']], codes=[[0, 1, 2, 3, 4], [0, 1, 2, 3, 4]], names=[None, None]).set_names(['c1', 'c2'])
A:pandas.tests.io.excel.test_readers.exp_columns->pandas.MultiIndex.from_product([('A', 'B'), ('key', 'val')])
A:pandas.tests.io.excel.test_readers.data->f.read()
A:pandas.tests.io.excel.test_readers.si->Index(['R_l0_g0', 'R_l0_g1', 'R_l0_g2', 'R_l0_g3', 'R_l0_g4'], name=None)
A:pandas.tests.io.excel.test_readers.num_records_in_file->len(expected)
A:pandas.tests.io.excel.test_readers.msg->'unexpected keyword argument `{}`'.format(arg)
A:pandas.tests.io.excel.test_readers.df1_parse->excel.parse(sheet_name=sheet_name, index_col=0)
A:pandas.tests.io.excel.test_readers.df2_parse->excel.parse(index_col=0, sheet_name=sheet_name)
pandas.tests.io.excel.test_readers.TestExcelFileRead
pandas.tests.io.excel.test_readers.TestExcelFileRead.cd_and_set_engine(self,engine,datapath,monkeypatch)
pandas.tests.io.excel.test_readers.TestExcelFileRead.test_conflicting_excel_engines(self,read_ext)
pandas.tests.io.excel.test_readers.TestExcelFileRead.test_excel_passes_na(self,read_ext)
pandas.tests.io.excel.test_readers.TestExcelFileRead.test_excel_passes_na_filter(self,read_ext,na_filter)
pandas.tests.io.excel.test_readers.TestExcelFileRead.test_excel_read_binary(self,engine,read_ext)
pandas.tests.io.excel.test_readers.TestExcelFileRead.test_excel_read_buffer(self,engine,read_ext)
pandas.tests.io.excel.test_readers.TestExcelFileRead.test_excel_table_sheet_by_index(self,read_ext,df_ref)
pandas.tests.io.excel.test_readers.TestExcelFileRead.test_reader_closes_file(self,engine,read_ext)
pandas.tests.io.excel.test_readers.TestExcelFileRead.test_sheet_name(self,read_ext,df_ref)
pandas.tests.io.excel.test_readers.TestExcelFileRead.test_unexpected_kwargs_raises(self,read_ext,arg)
pandas.tests.io.excel.test_readers.TestReaders
pandas.tests.io.excel.test_readers.TestReaders.cd_and_set_engine(self,engine,datapath,monkeypatch)
pandas.tests.io.excel.test_readers.TestReaders.test_bad_engine_raises(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_close_from_py_localpath(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_date_conversion_overflow(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_excel_cell_error_na(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_excel_old_index_format(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_excel_read_buffer(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_excel_stop_iterator(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_excel_table(self,read_ext,df_ref)
pandas.tests.io.excel.test_readers.TestReaders.test_index_col_empty(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_index_col_label_error(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_index_col_with_unnamed(self,read_ext,index_col)
pandas.tests.io.excel.test_readers.TestReaders.test_read_excel_blank(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_read_excel_blank_with_header(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_read_excel_bool_header_arg(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_read_excel_chunksize(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_read_excel_multiindex(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_read_excel_multiindex_header_only(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_read_excel_nrows(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_read_excel_nrows_greater_than_nrows_in_file(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_read_excel_nrows_non_integer_parameter(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_read_excel_skiprows_list(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_read_excel_squeeze(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_read_excel_without_slicing(self,read_ext,df_ref)
pandas.tests.io.excel.test_readers.TestReaders.test_read_from_file_url(self,read_ext,datapath)
pandas.tests.io.excel.test_readers.TestReaders.test_read_from_http_url(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_read_from_pathlib_path(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_read_from_py_localpath(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_read_from_s3_url(self,read_ext,s3_resource)
pandas.tests.io.excel.test_readers.TestReaders.test_reader_converters(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_reader_dtype(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_reader_dtype_str(self,read_ext,dtype,expected)
pandas.tests.io.excel.test_readers.TestReaders.test_reader_seconds(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_reader_special_dtypes(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_reading_all_sheets(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_reading_all_sheets_with_blank(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_reading_multiple_specific_sheets(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_sheet_name(self,read_ext,df_ref)
pandas.tests.io.excel.test_readers.TestReaders.test_usecols_diff_positional_int_columns_order(self,read_ext,usecols,df_ref)
pandas.tests.io.excel.test_readers.TestReaders.test_usecols_diff_positional_str_columns_order(self,read_ext,usecols,df_ref)
pandas.tests.io.excel.test_readers.TestReaders.test_usecols_excel_range_str(self,read_ext,df_ref)
pandas.tests.io.excel.test_readers.TestReaders.test_usecols_excel_range_str_invalid(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_usecols_int(self,read_ext,df_ref)
pandas.tests.io.excel.test_readers.TestReaders.test_usecols_list(self,read_ext,df_ref)
pandas.tests.io.excel.test_readers.TestReaders.test_usecols_pass_non_existent_column(self,read_ext)
pandas.tests.io.excel.test_readers.TestReaders.test_usecols_str(self,read_ext,df_ref)
pandas.tests.io.excel.test_readers.TestReaders.test_usecols_wrong_type(self,read_ext)
pandas.tests.io.excel.test_readers._is_valid_engine_ext_pair(engine,read_ext:str)->bool
pandas.tests.io.excel.test_readers._transfer_marks(engine,read_ext)
pandas.tests.io.excel.test_readers.engine(engine_and_read_ext)
pandas.tests.io.excel.test_readers.engine_and_read_ext(request)
pandas.tests.io.excel.test_readers.ignore_xlrd_time_clock_warning()
pandas.tests.io.excel.test_readers.read_ext(engine_and_read_ext)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/excel/test_xlwt.py----------------------------------------
A:pandas.tests.io.excel.test_xlwt.xlwt->pytest.importorskip('xlwt')
A:pandas.tests.io.excel.test_xlwt.pytestmark->pytest.mark.parametrize('ext,', ['.xls'])
A:pandas.tests.io.excel.test_xlwt.cols->pandas.MultiIndex.from_tuples([('site', ''), ('2014', 'height'), ('2014', 'weight')])
A:pandas.tests.io.excel.test_xlwt.df->DataFrame(np.random.randn(3, 10), index=cols)
A:pandas.tests.io.excel.test_xlwt.xls_style->pandas.io.excel._XlwtWriter._convert_to_style(hstyle)
pandas.tests.io.excel.test_xlwt.test_excel_multiindex_columns_and_index_true(ext)
pandas.tests.io.excel.test_xlwt.test_excel_multiindex_index(ext)
pandas.tests.io.excel.test_xlwt.test_excel_raise_error_on_multiindex_columns_and_no_index(ext)
pandas.tests.io.excel.test_xlwt.test_to_excel_styleconverter(ext)
pandas.tests.io.excel.test_xlwt.test_write_append_mode_raises(ext)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/excel/test_openpyxl.py----------------------------------------
A:pandas.tests.io.excel.test_openpyxl.openpyxl->pytest.importorskip('openpyxl')
A:pandas.tests.io.excel.test_openpyxl.pytestmark->pytest.mark.parametrize('ext', ['.xlsx'])
A:pandas.tests.io.excel.test_openpyxl.font_color->openpyxl.styles.Color('00FF0000')
A:pandas.tests.io.excel.test_openpyxl.font->openpyxl.styles.Font(bold=True, color=font_color)
A:pandas.tests.io.excel.test_openpyxl.side->openpyxl.styles.Side(style=styles.borders.BORDER_THIN)
A:pandas.tests.io.excel.test_openpyxl.border->openpyxl.styles.Border(top=side, right=side, bottom=side, left=side)
A:pandas.tests.io.excel.test_openpyxl.alignment->openpyxl.styles.Alignment(horizontal='center', vertical='top')
A:pandas.tests.io.excel.test_openpyxl.fill_color->openpyxl.styles.Color(rgb='006666FF', tint=0.3)
A:pandas.tests.io.excel.test_openpyxl.fill->openpyxl.styles.PatternFill(patternType='solid', fgColor=fill_color)
A:pandas.tests.io.excel.test_openpyxl.protection->openpyxl.styles.Protection(locked=True, hidden=False)
A:pandas.tests.io.excel.test_openpyxl.kw->pandas.io.excel._OpenpyxlWriter._convert_to_style_kwargs(hstyle)
A:pandas.tests.io.excel.test_openpyxl.sty_kwargs->pandas.io.excel._OpenpyxlWriter._convert_to_style_kwargs(sty_merged)
A:pandas.tests.io.excel.test_openpyxl.writer->ExcelWriter(f, engine='openpyxl', mode=mode)
A:pandas.tests.io.excel.test_openpyxl.df->pandas.concat([df1, df2], axis=1)
A:pandas.tests.io.excel.test_openpyxl.wb->pytest.importorskip('openpyxl').Workbook()
A:pandas.tests.io.excel.test_openpyxl.wb2->pytest.importorskip('openpyxl').load_workbook(f)
A:pandas.tests.io.excel.test_openpyxl.df1->DataFrame({'A': np.linspace(1, 10, 10)})
A:pandas.tests.io.excel.test_openpyxl.df2->DataFrame({'B': np.linspace(1, 20, 10)})
A:pandas.tests.io.excel.test_openpyxl.styled->pandas.concat([df1, df2], axis=1).style.applymap(lambda val: 'color: %s' % 'red' if val < 0 else 'black').highlight_max()
pandas.tests.io.excel.test_openpyxl.test_to_excel_styleconverter(ext)
pandas.tests.io.excel.test_openpyxl.test_to_excel_with_openpyxl_engine(ext,tmpdir)
pandas.tests.io.excel.test_openpyxl.test_write_append_mode(ext,mode,expected)
pandas.tests.io.excel.test_openpyxl.test_write_cells_merge_styled(ext)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/excel/test_writers.py----------------------------------------
A:pandas.tests.io.excel.test_writers.option_name->'io.excel.{ext}.writer'.format(ext=ext.strip('.'))
A:pandas.tests.io.excel.test_writers.prev_engine->get_option(option_name)
A:pandas.tests.io.excel.test_writers.df->DataFrame({'A': [1, 2]})
A:pandas.tests.io.excel.test_writers.result->os.fspath(xl)
A:pandas.tests.io.excel.test_writers.refdf->pandas.DataFrame([[1, 'foo'], [2, 'bar'], [3, 'baz']], columns=['a', 'b'])
A:pandas.tests.io.excel.test_writers.xlsdf_no_head->pandas.read_excel(reader, 'Data_no_head', header=None, names=['A', 'B'])
A:pandas.tests.io.excel.test_writers.xlsdf_with_head->pandas.read_excel(reader, 'Data_with_head', index_col=None, names=['A', 'B'])
A:pandas.tests.io.excel.test_writers.dfs->dict(zip(sheets, dfs))
A:pandas.tests.io.excel.test_writers.dfs_returned->pandas.read_excel(pth, sheet_name=sheets, index_col=0)
A:pandas.tests.io.excel.test_writers.expected->DataFrame(np.ones((2, 2)), columns=mi)
A:pandas.tests.io.excel.test_writers.actual->pandas.read_excel(path, header=[0, 1], index_col=0)
A:pandas.tests.io.excel.test_writers.act->pandas.read_excel(pth, index_col=list(range(r_idx_levels)), header=list(range(c_idx_levels)))
A:pandas.tests.io.excel.test_writers.df2->DataFrame({'A': [1, 2]}).copy()
A:pandas.tests.io.excel.test_writers.df2['date_strings']->df2['date_strings'].dt.strftime('%m/%d/%Y').dt.strftime('%m/%d/%Y')
A:pandas.tests.io.excel.test_writers.res->roundtrip(df, use_headers)
A:pandas.tests.io.excel.test_writers.row_arr->numpy.zeros(shape=(breaking_row_count, 1))
A:pandas.tests.io.excel.test_writers.col_arr->numpy.zeros(shape=(1, breaking_col_count))
A:pandas.tests.io.excel.test_writers.row_df->pandas.DataFrame(row_arr)
A:pandas.tests.io.excel.test_writers.col_df->pandas.DataFrame(col_arr)
A:pandas.tests.io.excel.test_writers.gt->DataFrame(np.random.randn(10, 2))
A:pandas.tests.io.excel.test_writers.xl->ExcelFile(path)
A:pandas.tests.io.excel.test_writers.frame2->DataFrame({'a': [10, 20], 'b': [30, 40], 'c': [50, 60]}).copy()
A:pandas.tests.io.excel.test_writers.found_df->pandas.read_excel(reader, 'Data1', index_col=0)
A:pandas.tests.io.excel.test_writers.found_df2->pandas.read_excel(reader, 'Data2', index_col=0)
A:pandas.tests.io.excel.test_writers.frame->frame.copy().copy()
A:pandas.tests.io.excel.test_writers.recons->pandas.read_excel(reader, 'test1', index_col=[0, 1])
A:pandas.tests.io.excel.test_writers.mixed_frame->frame.copy().copy().copy()
A:pandas.tests.io.excel.test_writers.reader->partial(pd.read_excel, index_col=0)
A:pandas.tests.io.excel.test_writers.int_frame->DataFrame({'A': [1, 2]}).astype(np.int64)
A:pandas.tests.io.excel.test_writers.recons2->pandas.read_excel(path, 'test1', index_col=0)
A:pandas.tests.io.excel.test_writers.float_frame->DataFrame({'A': [1, 2]}).astype(float)
A:pandas.tests.io.excel.test_writers.writer->ExcelWriter(path)
A:pandas.tests.io.excel.test_writers.col_aliases->Index(['AA', 'X', 'Y', 'Z'])
A:pandas.tests.io.excel.test_writers.rs->pandas.read_excel(reader, 'sht1', index_col=0)
A:pandas.tests.io.excel.test_writers.xp->tsframe.resample('M', kind='period').mean()
A:pandas.tests.io.excel.test_writers.xf->ExcelFile(path)
A:pandas.tests.io.excel.test_writers.tsf->tsframe.copy()
A:pandas.tests.io.excel.test_writers.df_expected->DataFrame([[datetime(2014, 1, 31), datetime(1999, 9, 24)], [datetime(1998, 5, 26, 23, 33, 4), datetime(2014, 2, 28, 13, 5, 13)]], index=['DATE', 'DATETIME'], columns=['X', 'Y'])
A:pandas.tests.io.excel.test_writers.writer1->ExcelWriter(path)
A:pandas.tests.io.excel.test_writers.writer2->ExcelWriter(filename2, date_format='DD.MM.YYYY', datetime_format='DD.MM.YYYY HH-MM-SS')
A:pandas.tests.io.excel.test_writers.reader1->ExcelFile(path)
A:pandas.tests.io.excel.test_writers.reader2->ExcelFile(filename2)
A:pandas.tests.io.excel.test_writers.rs1->pandas.read_excel(reader1, 'test1', index_col=0)
A:pandas.tests.io.excel.test_writers.rs2->pandas.read_excel(reader2, 'test1', index_col=0)
A:pandas.tests.io.excel.test_writers.df['new']->df['A'].apply(lambda x: timedelta(seconds=x))
A:pandas.tests.io.excel.test_writers.expected['new']->expected['A'].apply(lambda x: timedelta(seconds=x).total_seconds() / float(86400))
A:pandas.tests.io.excel.test_writers.intervals->pandas.cut(df[0], 10, labels=['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'])
A:pandas.tests.io.excel.test_writers.arrays->numpy.arange(len(frame.index) * 2).reshape(2, -1)
A:pandas.tests.io.excel.test_writers.new_index->pandas.MultiIndex.from_arrays(arrays, names=['first', 'second'])
A:pandas.tests.io.excel.test_writers.df1->pandas.read_excel(path, index_col=[0, 1])
A:pandas.tests.io.excel.test_writers.new_cols_index->pandas.MultiIndex.from_tuples([(40, 1), (40, 2), (50, 1), (50, 2)])
A:pandas.tests.io.excel.test_writers.fm->frame.copy().copy().columns.format(sparsify=False, adjoin=False, names=False)
A:pandas.tests.io.excel.test_writers.tsframe.index->pandas.MultiIndex.from_arrays(new_index)
A:pandas.tests.io.excel.test_writers.frame1->DataFrame({'a': [10, 20], 'b': [30, 40], 'c': [50, 60]})
A:pandas.tests.io.excel.test_writers.multi_index->pandas.MultiIndex.from_tuples([(70, 80), (90, 100)])
A:pandas.tests.io.excel.test_writers.frame3->pandas.read_excel(reader, 'test1')
A:pandas.tests.io.excel.test_writers.f->open(filename, 'wb')
A:pandas.tests.io.excel.test_writers.write_frame->DataFrame({'A': datetimes})
A:pandas.tests.io.excel.test_writers.read_frame->pandas.read_excel(path, true_values=['foo'], false_values=['bar'], index_col=0)
A:pandas.tests.io.excel.test_writers.result1->pandas.read_excel(path, 'test_c')
A:pandas.tests.io.excel.test_writers.result2->pandas.read_excel(path, 'test_c', comment=None)
A:pandas.tests.io.excel.test_writers.bio->BytesIO()
A:pandas.tests.io.excel.test_writers.reread_df->pandas.read_excel(bio, index_col=0)
A:pandas.tests.io.excel.test_writers.read->pandas.read_excel(path, 'Sheet1', header=0, index_col=0)
A:pandas.tests.io.excel.test_writers.expected.mixed->DataFrame(np.ones((2, 2)), columns=mi).mixed.apply(str)
A:pandas.tests.io.excel.test_writers.expected.numeric->DataFrame(np.ones((2, 2)), columns=mi).numeric.astype('int64')
A:pandas.tests.io.excel.test_writers.mi->pandas.MultiIndex.from_tuples([(pd.Period('2018'), pd.Period('2018Q1')), (pd.Period('2018'), pd.Period('2018Q2'))])
A:pandas.tests.io.excel.test_writers.expected.index->DataFrame(np.ones((2, 2)), columns=mi).index.astype(np.float64)
A:pandas.tests.io.excel.test_writers.data->data.to_pydatetime().to_pydatetime()
pandas.tests.io.excel.test_writers.TestExcelWriter
pandas.tests.io.excel.test_writers.TestExcelWriter.test_basics_with_nan(self,frame,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_bool_types(self,np_type,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_bytes_io(self,engine)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_colaliases(self,frame,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_comment_arg(self,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_comment_default(self,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_comment_empty_line(self,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_comment_used(self,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_datetimes(self,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_dts(self,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_duplicated_columns(self,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_excel_010_hemstring(self,merge_cells,c_idx_nlevels,r_idx_nlevels,use_headers,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_excel_date_datetime_format(self,engine,ext,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_excel_date_dt_format(self,engine,ext,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_excel_roundtrip_datetime(self,merge_cells,tsframe,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_excel_roundtrip_dt(self,merge_cells,tsframe,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_excel_roundtrip_indexname(self,merge_cells,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_excel_sheet_by_name_raise(self,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_excel_sheet_size(self,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_excel_writer_context_manager(self,frame,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_float_types(self,np_type,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_freeze_panes(self,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_inf_roundtrip(self,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_int_types(self,np_type,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_invalid_columns(self,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_merged_cell_custom_objects(self,merge_cells,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_mixed(self,frame,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_path_local_path(self,engine,ext)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_path_path_lib(self,engine,ext)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_raise_when_saving_timezones(self,dtype,tz_aware_fixture,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_roundtrip(self,frame,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_roundtrip_indexlabels(self,merge_cells,frame,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_sheets(self,frame,tsframe,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_swapped_columns(self,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_to_excel_float_format(self,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_to_excel_interval_labels(self,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_to_excel_interval_no_labels(self,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_to_excel_multiindex(self,merge_cells,frame,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_to_excel_multiindex_cols(self,merge_cells,frame,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_to_excel_multiindex_dates(self,merge_cells,tsframe,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_to_excel_multiindex_nan_label(self,merge_cells,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_to_excel_multiindex_no_write_index(self,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_to_excel_output_encoding(self,ext)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_to_excel_periodindex(self,tsframe,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_to_excel_timedelta(self,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_to_excel_unicode_filename(self,ext,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_true_and_false_value_options(self,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_ts_frame(self,tsframe,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_write_lists_dict(self,path)
pandas.tests.io.excel.test_writers.TestExcelWriter.test_write_subset_columns(self,path,to_excel_index,read_excel_index_col)
pandas.tests.io.excel.test_writers.TestExcelWriterEngineTests
pandas.tests.io.excel.test_writers.TestExcelWriterEngineTests.test_ExcelWriter_dispatch(self,klass,ext)
pandas.tests.io.excel.test_writers.TestExcelWriterEngineTests.test_ExcelWriter_dispatch_raises(self)
pandas.tests.io.excel.test_writers.TestExcelWriterEngineTests.test_register_writer(self)
pandas.tests.io.excel.test_writers.TestFSPath
pandas.tests.io.excel.test_writers.TestFSPath.test_excelfile_fspath(self)
pandas.tests.io.excel.test_writers.TestFSPath.test_excelwriter_fspath(self)
pandas.tests.io.excel.test_writers.TestRoundTrip
pandas.tests.io.excel.test_writers.TestRoundTrip.test_creating_and_reading_multiple_sheets(self,ext)
pandas.tests.io.excel.test_writers.TestRoundTrip.test_excel_multindex_roundtrip(self,ext,c_idx_names,r_idx_names,c_idx_levels,r_idx_levels)
pandas.tests.io.excel.test_writers.TestRoundTrip.test_read_excel_multiindex_empty_level(self,ext)
pandas.tests.io.excel.test_writers.TestRoundTrip.test_read_excel_parse_dates(self,ext)
pandas.tests.io.excel.test_writers.TestRoundTrip.test_read_one_empty_col_no_header(self,ext,header,expected)
pandas.tests.io.excel.test_writers.TestRoundTrip.test_read_one_empty_col_with_header(self,ext,header,expected)
pandas.tests.io.excel.test_writers.TestRoundTrip.test_set_column_names_in_parameter(self,ext)
pandas.tests.io.excel.test_writers.path(ext)
pandas.tests.io.excel.test_writers.set_engine(engine,ext)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/excel/test_xlsxwriter.py----------------------------------------
A:pandas.tests.io.excel.test_xlsxwriter.xlsxwriter->pytest.importorskip('xlsxwriter')
A:pandas.tests.io.excel.test_xlsxwriter.pytestmark->pytest.mark.parametrize('ext', ['.xlsx'])
A:pandas.tests.io.excel.test_xlsxwriter.openpyxl->pytest.importorskip('openpyxl')
A:pandas.tests.io.excel.test_xlsxwriter.frame->DataFrame({'A': [123456, 123456], 'B': [123456, 123456]})
A:pandas.tests.io.excel.test_xlsxwriter.writer->ExcelWriter(path)
A:pandas.tests.io.excel.test_xlsxwriter.col_format->write_workbook.add_format({'num_format': num_format})
A:pandas.tests.io.excel.test_xlsxwriter.read_workbook->pytest.importorskip('openpyxl').load_workbook(path)
A:pandas.tests.io.excel.test_xlsxwriter.read_worksheet->pytest.importorskip('openpyxl').load_workbook(path).get_sheet_by_name(name='Sheet1')
A:pandas.tests.io.excel.test_xlsxwriter.cell->pytest.importorskip('openpyxl').load_workbook(path).get_sheet_by_name(name='Sheet1').cell('B2')
pandas.tests.io.excel.test_xlsxwriter.test_column_format(ext)
pandas.tests.io.excel.test_xlsxwriter.test_write_append_mode_raises(ext)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/excel/test_xlrd.py----------------------------------------
A:pandas.tests.io.excel.test_xlrd.xlrd->pytest.importorskip('xlrd')
A:pandas.tests.io.excel.test_xlrd.xlwt->pytest.importorskip('xlwt')
A:pandas.tests.io.excel.test_xlrd.book->pytest.importorskip('xlrd').open_workbook(pth)
A:pandas.tests.io.excel.test_xlrd.result->pandas.read_excel(book, sheet_name=sheet_name, engine=engine, index_col=0)
A:pandas.tests.io.excel.test_xlrd.path->datapath('io', 'data', 'excel', 'test1{}'.format(read_ext))
pandas.tests.io.excel.test_xlrd.skip_ods_and_xlsb_files(read_ext)
pandas.tests.io.excel.test_xlrd.test_excel_table_sheet_by_index(datapath,read_ext)
pandas.tests.io.excel.test_xlrd.test_read_xlrd_book(read_ext,frame)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/excel/test_odf.py----------------------------------------
A:pandas.tests.io.excel.test_odf.func->functools.partial(pd.read_excel, engine='odf')
A:pandas.tests.io.excel.test_odf.index->pandas.Index(['Row 1', 'Row 2', 'Row 3'], name='Header')
A:pandas.tests.io.excel.test_odf.expected->pandas.DataFrame([[1, np.nan, 7], [2, np.nan, 8], [3, np.nan, 9]], index=index, columns=['Column 1', 'Unnamed: 2', 'Column 3'])
A:pandas.tests.io.excel.test_odf.result->pandas.read_excel('writertable.odt', 'Table1', index_col=0)
pandas.tests.io.excel.test_odf.cd_and_set_engine(monkeypatch,datapath)
pandas.tests.io.excel.test_odf.test_nonexistent_sheetname_raises(read_ext)
pandas.tests.io.excel.test_odf.test_read_invalid_types_raises()
pandas.tests.io.excel.test_odf.test_read_writer_table()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/excel/conftest.py----------------------------------------
A:pandas.tests.io.excel.conftest.filepath->datapath('io', 'data', 'csv', 'test1.csv')
A:pandas.tests.io.excel.conftest.df_ref->read_csv(filepath, index_col=0, parse_dates=True, engine='python')
A:pandas.tests.io.excel.conftest.psutil->pandas.util._test_decorators.safe_import('psutil')
A:pandas.tests.io.excel.conftest.proc->pandas.util._test_decorators.safe_import('psutil').Process()
A:pandas.tests.io.excel.conftest.flist->pandas.util._test_decorators.safe_import('psutil').Process().open_files()
A:pandas.tests.io.excel.conftest.flist2->pandas.util._test_decorators.safe_import('psutil').Process().open_files()
pandas.tests.io.excel.conftest.check_for_file_leaks()
pandas.tests.io.excel.conftest.df_ref(datapath)
pandas.tests.io.excel.conftest.frame(float_frame)
pandas.tests.io.excel.conftest.merge_cells(request)
pandas.tests.io.excel.conftest.read_ext(request)
pandas.tests.io.excel.conftest.tsframe()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/formats/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/formats/test_eng_formatting.py----------------------------------------
A:pandas.tests.io.formats.test_eng_formatting.df->pandas.DataFrame({'a': [1.5, 10.3, 20.5], 'b': [50.3, 60.67, 70.12], 'c': [100.2, 101.33, 120.33]})
A:pandas.tests.io.formats.test_eng_formatting.result->formatter(np.inf)
A:pandas.tests.io.formats.test_eng_formatting.formatted_input->formatter(input)
A:pandas.tests.io.formats.test_eng_formatting.formatter->pandas.io.formats.format.EngFormatter(accuracy=1, use_eng_prefix=True)
A:pandas.tests.io.formats.test_eng_formatting.f->numpy.sqrt(2)
A:pandas.tests.io.formats.test_eng_formatting.pt->pandas.DataFrame({'a': [1.5, 10.3, 20.5], 'b': [50.3, 60.67, 70.12], 'c': [100.2, 101.33, 120.33]}).pivot_table(values='a', index='b', columns='c')
pandas.tests.io.formats.test_eng_formatting.TestEngFormatter
pandas.tests.io.formats.test_eng_formatting.TestEngFormatter.compare(self,formatter,input,output)
pandas.tests.io.formats.test_eng_formatting.TestEngFormatter.compare_all(self,formatter,in_out)
pandas.tests.io.formats.test_eng_formatting.TestEngFormatter.test_eng_float_formatter(self)
pandas.tests.io.formats.test_eng_formatting.TestEngFormatter.test_exponents_with_eng_prefix(self)
pandas.tests.io.formats.test_eng_formatting.TestEngFormatter.test_exponents_without_eng_prefix(self)
pandas.tests.io.formats.test_eng_formatting.TestEngFormatter.test_inf(self)
pandas.tests.io.formats.test_eng_formatting.TestEngFormatter.test_nan(self)
pandas.tests.io.formats.test_eng_formatting.TestEngFormatter.test_rounding(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/formats/test_to_csv.py----------------------------------------
A:pandas.tests.io.formats.test_to_csv.df1->DataFrame([None, 1])
A:pandas.tests.io.formats.test_to_csv.df2->DataFrame([1, None])
A:pandas.tests.io.formats.test_to_csv.df->df.astype(df_new_type).astype(df_new_type)
A:pandas.tests.io.formats.test_to_csv.expected->pandas._testing.convert_rows_list_to_csv_str([',0', '0,1.1', '1,2.2'])
A:pandas.tests.io.formats.test_to_csv.expected_default->pandas._testing.convert_rows_list_to_csv_str(expected_rows)
A:pandas.tests.io.formats.test_to_csv.expected_european_excel->pandas._testing.convert_rows_list_to_csv_str(expected_rows)
A:pandas.tests.io.formats.test_to_csv.expected_float_format_default->pandas._testing.convert_rows_list_to_csv_str(expected_rows)
A:pandas.tests.io.formats.test_to_csv.expected_float_format->pandas._testing.convert_rows_list_to_csv_str(expected_rows)
A:pandas.tests.io.formats.test_to_csv.csv->pandas.Series(['a', pd.NA, 'c'], dtype='string').to_csv(na_rep='ZZZZZ')
A:pandas.tests.io.formats.test_to_csv.df_sec->DataFrame({'A': pd.date_range('20130101', periods=5, freq='s')})
A:pandas.tests.io.formats.test_to_csv.df_day->DataFrame({'A': pd.date_range('20130101', periods=5, freq='d')})
A:pandas.tests.io.formats.test_to_csv.expected_default_sec->pandas._testing.convert_rows_list_to_csv_str(expected_rows)
A:pandas.tests.io.formats.test_to_csv.expected_ymdhms_day->pandas._testing.convert_rows_list_to_csv_str(expected_rows)
A:pandas.tests.io.formats.test_to_csv.expected_ymd_sec->pandas._testing.convert_rows_list_to_csv_str(expected_rows)
A:pandas.tests.io.formats.test_to_csv.expected_default_day->pandas._testing.convert_rows_list_to_csv_str(expected_rows)
A:pandas.tests.io.formats.test_to_csv.df_sec_grouped->DataFrame({'A': pd.date_range('20130101', periods=5, freq='s')}).groupby([pd.Grouper(key='A', freq='1h'), 'B'])
A:pandas.tests.io.formats.test_to_csv.exp->pandas._testing.convert_rows_list_to_csv_str(exp_rows)
A:pandas.tests.io.formats.test_to_csv.result->pandas.Series([1.1, 2.2]).to_csv(na_rep='.')
A:pandas.tests.io.formats.test_to_csv.os_linesep->os.linesep.encode('utf-8')
A:pandas.tests.io.formats.test_to_csv.expected_ascii->pandas._testing.convert_rows_list_to_csv_str(expected_rows)
A:pandas.tests.io.formats.test_to_csv.captured->capsys.readouterr()
A:pandas.tests.io.formats.test_to_csv.read_df->pandas.read_csv(path, index_col=0)
A:pandas.tests.io.formats.test_to_csv.zp->ZipFile(path)
A:pandas.tests.io.formats.test_to_csv.expected_arcname->os.path.basename(expected_arcname)
A:pandas.tests.io.formats.test_to_csv.archived_file->os.path.basename(zp.filelist[0].filename)
A:pandas.tests.io.formats.test_to_csv.s->pandas.Series([1, 1]).astype('timedelta64[ns]')
A:pandas.tests.io.formats.test_to_csv.buf->io.StringIO()
pandas.tests.io.formats.test_to_csv.TestToCSV
pandas.tests.io.formats.test_to_csv.TestToCSV.test_csv_to_string(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_na_rep_truncated(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_compression(self,compression_only,read_infer,to_infer)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_compression_dict(self,compression_only)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_compression_dict_no_method_raises(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_date_format(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_decimal(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_defualt_encoding(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_doublequote(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_escapechar(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_float_format(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_multi_index(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_na_rep(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_na_rep_long_string(self,df_new_type)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_quotechar(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_single_level_multi_index(self,ind,expected,klass)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_stdout_file(self,capsys)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_string_array_ascii(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_string_array_utf8(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_string_with_crlf(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_string_with_lf(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_timedelta_precision(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_with_single_column(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_write_to_open_file(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_write_to_open_file_with_newline_py3(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_zip_arguments(self,compression,archive_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/formats/test_printing.py----------------------------------------
A:pandas.tests.io.formats.test_printing.adjoined->pandas.io.formats.format.EastAsianTextAdjustment().adjoin(2, *data)
A:pandas.tests.io.formats.test_printing.raw->bytes(letters)
A:pandas.tests.io.formats.test_printing.b->str(raw.decode('utf-8'))
A:pandas.tests.io.formats.test_printing.res->pandas.io.formats.printing.pprint_thing(b, quote_strings=False)
A:pandas.tests.io.formats.test_printing.adj->pandas.io.formats.format.EastAsianTextAdjustment()
A:pandas.tests.io.formats.test_printing.cols->pandas.io.formats.format.EastAsianTextAdjustment().adjoin(2, *data).split('\n')
A:pandas.tests.io.formats.test_printing.df->pandas.DataFrame({'A': [1, 2]})
A:pandas.tests.io.formats.test_printing.opt->pandas.option_context('display.html.table_schema', True)
A:pandas.tests.io.formats.test_printing.formatted->self.display_formatter.format(df)
A:pandas.tests.io.formats.test_printing.with_latex->pandas.option_context('display.latex.repr', True)
A:pandas.tests.io.formats.test_printing.midx->pandas.MultiIndex.from_product([['A', 'B'], ['a', 'b', 'c']])
A:pandas.tests.io.formats.test_printing.result->pandas.DataFrame({'A': [1, 2]})._repr_data_resource_()
pandas.tests.io.formats.test_printing.TestFormattBase
pandas.tests.io.formats.test_printing.TestFormattBase.test_adjoin(self)
pandas.tests.io.formats.test_printing.TestFormattBase.test_adjoin_unicode(self)
pandas.tests.io.formats.test_printing.TestFormattBase.test_ambiguous_width(self)
pandas.tests.io.formats.test_printing.TestFormattBase.test_east_asian_len(self)
pandas.tests.io.formats.test_printing.TestFormattBase.test_justify(self)
pandas.tests.io.formats.test_printing.TestTableSchemaRepr
pandas.tests.io.formats.test_printing.TestTableSchemaRepr.setup_class(cls)
pandas.tests.io.formats.test_printing.TestTableSchemaRepr.test_config_default_off(self)
pandas.tests.io.formats.test_printing.TestTableSchemaRepr.test_config_on(self)
pandas.tests.io.formats.test_printing.TestTableSchemaRepr.test_enable_data_resource_formatter(self)
pandas.tests.io.formats.test_printing.TestTableSchemaRepr.test_publishes(self)
pandas.tests.io.formats.test_printing.TestTableSchemaRepr.test_publishes_not_implemented(self)
pandas.tests.io.formats.test_printing.test_adjoin()
pandas.tests.io.formats.test_printing.test_repr_binary_type()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/formats/test_style.py----------------------------------------
A:pandas.tests.io.formats.test_style.jinja2->pytest.importorskip('jinja2')
A:pandas.tests.io.formats.test_style.self.s->DataFrame({'A': np.random.permutation(range(6))})
A:pandas.tests.io.formats.test_style.self.df->DataFrame({'A': [0, 1], 'B': np.random.randn(2)})
A:pandas.tests.io.formats.test_style.self.styler->Styler(self.df)
A:pandas.tests.io.formats.test_style.self.attrs->pandas.DataFrame({'A': ['color: red', 'color: blue']})
A:pandas.tests.io.formats.test_style.result->pandas.io.formats.style.Styler.from_custom_template(str(tmpdir.join('templates')), 'myhtml.tpl')
A:pandas.tests.io.formats.test_style.attrs->DataFrame({'A': ['color: red; foo: bar;', 'color: blue; foo: baz;']})
A:pandas.tests.io.formats.test_style.s2->Styler(df).set_precision(4)
A:pandas.tests.io.formats.test_style.s->Styler(df)
A:pandas.tests.io.formats.test_style.df->pandas.DataFrame(range(5))
A:pandas.tests.io.formats.test_style.empty_df->DataFrame()
A:pandas.tests.io.formats.test_style.es->Styler(empty_df)
A:pandas.tests.io.formats.test_style.codes->numpy.array([[0, 0, 1, 1], [0, 1, 0, 1]])
A:pandas.tests.io.formats.test_style.columns->pandas.MultiIndex(levels=[['a', 'b'], ['%', '#']], codes=codes, names=['', ''])
A:pandas.tests.io.formats.test_style.df['C']->df['C'].astype('category').astype('category')
A:pandas.tests.io.formats.test_style.ctx->pandas.DataFrame(range(5)).style.hide_columns([('b', 1)]).hide_index()._translate()
A:pandas.tests.io.formats.test_style.styler->result(pd.DataFrame({'A': [1, 2]}))
A:pandas.tests.io.formats.test_style.ids->re.findall('id="(.*?)"', result)
A:pandas.tests.io.formats.test_style.index->pandas.MultiIndex.from_arrays([[1, 1, 2, 1], ['a', 'b', 'b', 'd']])
A:pandas.tests.io.formats.test_style.ctx2->pandas.DataFrame(range(5)).style.hide_index()._translate()
A:pandas.tests.io.formats.test_style.ctx3->self.df.set_index('A').style._translate()
A:pandas.tests.io.formats.test_style.ctx4->self.df.set_index('A').style.hide_index()._translate()
A:pandas.tests.io.formats.test_style.ctx1->pandas.DataFrame(range(5)).style._translate()
A:pandas.tests.io.formats.test_style.i1->pandas.MultiIndex.from_arrays([['a', 'a'], [0, 1]], names=['idx_level_0', 'idx_level_1'])
A:pandas.tests.io.formats.test_style.i2->pandas.MultiIndex.from_arrays([['b', 'b'], [0, 1]], names=['col_level_0', 'col_level_1'])
A:pandas.tests.io.formats.test_style.df1->pandas.Series(range(3)).to_frame()
A:pandas.tests.io.formats.test_style.df2->pandas.Series(range(3), dtype='Int64').to_frame()
A:pandas.tests.io.formats.test_style.p->tmpdir.mkdir('templates').join('myhtml.tpl')
pandas.tests.io.formats.test_style.TestStyler
pandas.tests.io.formats.test_style.TestStyler.setup_method(self,method)
pandas.tests.io.formats.test_style.TestStyler.test_apply_axis(self)
pandas.tests.io.formats.test_style.TestStyler.test_apply_bad_labels(self)
pandas.tests.io.formats.test_style.TestStyler.test_apply_bad_return(self)
pandas.tests.io.formats.test_style.TestStyler.test_apply_none(self)
pandas.tests.io.formats.test_style.TestStyler.test_apply_subset(self)
pandas.tests.io.formats.test_style.TestStyler.test_applymap_subset(self)
pandas.tests.io.formats.test_style.TestStyler.test_applymap_subset_multiindex(self)
pandas.tests.io.formats.test_style.TestStyler.test_applymap_subset_multiindex_code(self)
pandas.tests.io.formats.test_style.TestStyler.test_bad_apply_shape(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_align_left(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_align_left_0points(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_align_left_axis_none(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_align_mid_all_neg(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_align_mid_all_pos(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_align_mid_axis_none(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_align_mid_nans(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_align_mid_pos_and_neg(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_align_mid_vmax(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_align_mid_vmin(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_align_mid_vmin_vmax_clipping(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_align_mid_vmin_vmax_wide(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_align_zero_axis_none(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_align_zero_nans(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_align_zero_pos_and_neg(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_bad_align_raises(self)
pandas.tests.io.formats.test_style.TestStyler.test_caption(self)
pandas.tests.io.formats.test_style.TestStyler.test_clear(self)
pandas.tests.io.formats.test_style.TestStyler.test_copy(self)
pandas.tests.io.formats.test_style.TestStyler.test_deepcopy(self)
pandas.tests.io.formats.test_style.TestStyler.test_display_dict(self)
pandas.tests.io.formats.test_style.TestStyler.test_display_format(self)
pandas.tests.io.formats.test_style.TestStyler.test_display_format_raises(self)
pandas.tests.io.formats.test_style.TestStyler.test_display_set_precision(self)
pandas.tests.io.formats.test_style.TestStyler.test_display_subset(self)
pandas.tests.io.formats.test_style.TestStyler.test_empty(self)
pandas.tests.io.formats.test_style.TestStyler.test_empty_index_name_doesnt_display(self)
pandas.tests.io.formats.test_style.TestStyler.test_export(self)
pandas.tests.io.formats.test_style.TestStyler.test_format_non_numeric_na(self)
pandas.tests.io.formats.test_style.TestStyler.test_format_with_bad_na_rep(self)
pandas.tests.io.formats.test_style.TestStyler.test_format_with_na_rep(self)
pandas.tests.io.formats.test_style.TestStyler.test_get_level_lengths(self)
pandas.tests.io.formats.test_style.TestStyler.test_get_level_lengths_un_sorted(self)
pandas.tests.io.formats.test_style.TestStyler.test_hide_columns_mult_levels(self)
pandas.tests.io.formats.test_style.TestStyler.test_hide_columns_single_level(self)
pandas.tests.io.formats.test_style.TestStyler.test_hide_multiindex(self)
pandas.tests.io.formats.test_style.TestStyler.test_hide_single_index(self)
pandas.tests.io.formats.test_style.TestStyler.test_highlight_max(self)
pandas.tests.io.formats.test_style.TestStyler.test_highlight_null(self,null_color='red')
pandas.tests.io.formats.test_style.TestStyler.test_index_name(self)
pandas.tests.io.formats.test_style.TestStyler.test_init_non_pandas(self)
pandas.tests.io.formats.test_style.TestStyler.test_init_series(self)
pandas.tests.io.formats.test_style.TestStyler.test_init_with_na_rep(self)
pandas.tests.io.formats.test_style.TestStyler.test_mi_sparse(self)
pandas.tests.io.formats.test_style.TestStyler.test_mi_sparse_column_names(self)
pandas.tests.io.formats.test_style.TestStyler.test_mi_sparse_disabled(self)
pandas.tests.io.formats.test_style.TestStyler.test_mi_sparse_index_names(self)
pandas.tests.io.formats.test_style.TestStyler.test_multiindex_name(self)
pandas.tests.io.formats.test_style.TestStyler.test_nonunique_raises(self)
pandas.tests.io.formats.test_style.TestStyler.test_numeric_columns(self)
pandas.tests.io.formats.test_style.TestStyler.test_pipe(self)
pandas.tests.io.formats.test_style.TestStyler.test_precision(self)
pandas.tests.io.formats.test_style.TestStyler.test_render(self)
pandas.tests.io.formats.test_style.TestStyler.test_render_double(self)
pandas.tests.io.formats.test_style.TestStyler.test_render_empty_dfs(self)
pandas.tests.io.formats.test_style.TestStyler.test_repr_html_mathjax(self)
pandas.tests.io.formats.test_style.TestStyler.test_repr_html_ok(self)
pandas.tests.io.formats.test_style.TestStyler.test_set_na_rep(self)
pandas.tests.io.formats.test_style.TestStyler.test_set_properties(self)
pandas.tests.io.formats.test_style.TestStyler.test_set_properties_subset(self)
pandas.tests.io.formats.test_style.TestStyler.test_table_attributes(self)
pandas.tests.io.formats.test_style.TestStyler.test_table_styles(self)
pandas.tests.io.formats.test_style.TestStyler.test_trim(self)
pandas.tests.io.formats.test_style.TestStyler.test_unique_id(self)
pandas.tests.io.formats.test_style.TestStyler.test_update_ctx(self)
pandas.tests.io.formats.test_style.TestStyler.test_update_ctx_flatten_multi(self)
pandas.tests.io.formats.test_style.TestStyler.test_update_ctx_flatten_multi_traliing_semi(self)
pandas.tests.io.formats.test_style.TestStyler.test_uuid(self)
pandas.tests.io.formats.test_style.TestStyler.test_where_subset(self)
pandas.tests.io.formats.test_style.TestStyler.test_where_subset_compare_with_applymap(self)
pandas.tests.io.formats.test_style.TestStyler.test_where_with_one_style(self)
pandas.tests.io.formats.test_style.TestStylerMatplotlibDep
pandas.tests.io.formats.test_style.TestStylerMatplotlibDep.test_background_gradient(self)
pandas.tests.io.formats.test_style.TestStylerMatplotlibDep.test_background_gradient_axis(self)
pandas.tests.io.formats.test_style.TestStylerMatplotlibDep.test_background_gradient_int64(self)
pandas.tests.io.formats.test_style.TestStylerMatplotlibDep.test_background_gradient_vmin_vmax(self)
pandas.tests.io.formats.test_style.TestStylerMatplotlibDep.test_text_color_threshold(self,c_map,expected)
pandas.tests.io.formats.test_style.TestStylerMatplotlibDep.test_text_color_threshold_raises(self,text_color_threshold)
pandas.tests.io.formats.test_style.test_block_names()
pandas.tests.io.formats.test_style.test_from_custom_template(tmpdir)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/formats/test_to_markdown.py----------------------------------------
A:pandas.tests.io.formats.test_to_markdown.buf->StringIO()
A:pandas.tests.io.formats.test_to_markdown.df->pandas.DataFrame([1, 2, 3])
A:pandas.tests.io.formats.test_to_markdown.result->pandas.DataFrame([1, 2, 3]).to_markdown()
A:pandas.tests.io.formats.test_to_markdown.s->pandas.Series([1, 2, 3], name='foo')
pandas.tests.io.formats.test_to_markdown.test_no_buf(capsys)
pandas.tests.io.formats.test_to_markdown.test_other_headers()
pandas.tests.io.formats.test_to_markdown.test_other_tablefmt()
pandas.tests.io.formats.test_to_markdown.test_series()
pandas.tests.io.formats.test_to_markdown.test_simple()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/formats/test_to_excel.py----------------------------------------
A:pandas.tests.io.formats.test_to_excel.convert->CSSToExcelConverter()
A:pandas.tests.io.formats.test_to_excel.actual->convert('\n        font-weight: bold;\n        text-decoration: underline;\n        color: red;\n        border-width: thin;\n        text-align: center;\n        vertical-align: top;\n        unused: something;\n    ')
A:pandas.tests.io.formats.test_to_excel.expected->dict()
pandas.tests.io.formats.test_to_excel.test_css_to_excel(css,expected)
pandas.tests.io.formats.test_to_excel.test_css_to_excel_bad_colors(input_color)
pandas.tests.io.formats.test_to_excel.test_css_to_excel_good_colors(input_color,output_color)
pandas.tests.io.formats.test_to_excel.test_css_to_excel_inherited(css,inherited,expected)
pandas.tests.io.formats.test_to_excel.test_css_to_excel_multiple()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/formats/test_format.py----------------------------------------
A:pandas.tests.io.formats.test_format.buf->StringIO()
A:pandas.tests.io.formats.test_format.result->ip.run_cell(code)
A:pandas.tests.io.formats.test_format.(pth, _)->os.path.split(os.path.abspath(__file__))
A:pandas.tests.io.formats.test_format.r->repr(df)
A:pandas.tests.io.formats.test_format.c1->repr(df).split('\n')[0].startswith('<class')
A:pandas.tests.io.formats.test_format.c2->repr(df).split('\n')[0].startswith('&lt;class')
A:pandas.tests.io.formats.test_format.has_info->has_info_repr(df)
A:pandas.tests.io.formats.test_format.fst_line->numpy.array(repr(df).splitlines()[0].split())
A:pandas.tests.io.formats.test_format.arr->numpy.empty(10, dtype=[('err', object)])
A:pandas.tests.io.formats.test_format.arr['err'][i]->numpy.random.randn(i)
A:pandas.tests.io.formats.test_format.df->DataFrame([data])
A:pandas.tests.io.formats.test_format.adj->pandas.io.formats.format._get_adjustment()
A:pandas.tests.io.formats.test_format.width->get_option('display.max_colwidth')
A:pandas.tests.io.formats.test_format.idx->pandas.MultiIndex.from_tuples([('あ', 'いい'), ('う', 'え'), ('おおお', 'かかかか'), ('き', 'くく')])
A:pandas.tests.io.formats.test_format.res->DataFrame([data]).to_string(header=['r1', 'r2'])
A:pandas.tests.io.formats.test_format.df_small->DataFrame('hello', index=[0], columns=[0])
A:pandas.tests.io.formats.test_format.df_wide->DataFrame('hello', index=[0], columns=range(10))
A:pandas.tests.io.formats.test_format.df_tall->DataFrame('hello', index=range(30), columns=range(5))
A:pandas.tests.io.formats.test_format.index->pandas.MultiIndex.from_tuples(tuples, names=['first', 'second'])
A:pandas.tests.io.formats.test_format.columns->pandas.MultiIndex.from_tuples([('This is a long title with > 37 chars.', 'cat'), ('This is a loooooonger title with > 43 chars.', 'dog')])
A:pandas.tests.io.formats.test_format.df2->DataFrame([data]).copy()
A:pandas.tests.io.formats.test_format.(term_width, term_height)->get_terminal_size()
A:pandas.tests.io.formats.test_format.df6->mkframe(6)
A:pandas.tests.io.formats.test_format.df10->mkframe(10)
A:pandas.tests.io.formats.test_format.cols->range(int(term_width * fac))
A:pandas.tests.io.formats.test_format.unicode_values->numpy.array(unicode_values, dtype=object)
A:pandas.tests.io.formats.test_format.ser->Series(np.random.randn(len(idx)), idx)
A:pandas.tests.io.formats.test_format.rs->DataFrame([data]).to_string(formatters={'__index__': lambda x: 'abc'[x]})
A:pandas.tests.io.formats.test_format.line_len->len(rs[0])
A:pandas.tests.io.formats.test_format.line->line.decode(get_option('display.encoding')).decode(get_option('display.encoding'))
A:pandas.tests.io.formats.test_format.n->'א'.encode('utf-8')
A:pandas.tests.io.formats.test_format.dm->DataFrame({'c/σ': Series({'test': np.nan})})
A:pandas.tests.io.formats.test_format.result2->repr(frame.iloc[:5])
A:pandas.tests.io.formats.test_format.x->Series(pd.to_datetime(['10:10:10.100', '12:12:12.120'], format='%H:%M:%S.%f'))
A:pandas.tests.io.formats.test_format.empty->DataFrame({'c/σ': Series(dtype=object)})
A:pandas.tests.io.formats.test_format.nonempty->DataFrame({'c/σ': Series([1, 2, 3])})
A:pandas.tests.io.formats.test_format.c10->len(df.to_string(col_space=10).split('\n')[1])
A:pandas.tests.io.formats.test_format.c20->len(df.to_string(col_space=20).split('\n')[1])
A:pandas.tests.io.formats.test_format.c30->len(df.to_string(col_space=30).split('\n')[1])
A:pandas.tests.io.formats.test_format.with_header->DataFrame([data]).to_string(col_space=20)
A:pandas.tests.io.formats.test_format.no_header->DataFrame([data]).to_string(col_space=20, header=False)
A:pandas.tests.io.formats.test_format.s->pandas.Series(range(10), dtype='int64')
A:pandas.tests.io.formats.test_format.frame->DataFrame(index=np.arange(200))
A:pandas.tests.io.formats.test_format.dti->date_range(start=start_date, freq='D', periods=5)
A:pandas.tests.io.formats.test_format.rep_str->repr(df)
A:pandas.tests.io.formats.test_format.lines->DataFrame([data]).to_string(header=['r1', 'r2']).split('\n')
A:pandas.tests.io.formats.test_format.filepath->datapath('io', 'parser', 'data', 'unicode_series.csv')
A:pandas.tests.io.formats.test_format.max_cols->get_option('display.max_columns')
A:pandas.tests.io.formats.test_format.wide_repr->repr(df)
A:pandas.tests.io.formats.test_format.wider_repr->repr(df)
A:pandas.tests.io.formats.test_format.midx->pandas.MultiIndex.from_arrays(tm.rands_array(5, size=(2, 10)))
A:pandas.tests.io.formats.test_format.mcols->pandas.MultiIndex.from_product((np.arange(1 + max_cols // 2), ['foo', 'bar']), names=['first', 'second'])
A:pandas.tests.io.formats.test_format.str_rep->str(s)
A:pandas.tests.io.formats.test_format.nmatches->len(re.findall('dtype', str_rep))
A:pandas.tests.io.formats.test_format.y->pandas.to_timedelta(list(range(5)) + [pd.NaT], unit='s')
A:pandas.tests.io.formats.test_format.biggie->DataFrame({'A': np.random.randn(200), 'B': tm.makeStringIndex(200)}, index=np.arange(200))
A:pandas.tests.io.formats.test_format.retval->self.ts.to_string(buf=buf)
A:pandas.tests.io.formats.test_format.header->ip.run_cell(code).split('\n')[0].strip().split()
A:pandas.tests.io.formats.test_format.joined->'\n'.join((re.sub('\\s+', ' ', x).strip() for x in lines[1:]))
A:pandas.tests.io.formats.test_format.recons->read_csv(StringIO(joined), names=header, header=None, sep=' ')
A:pandas.tests.io.formats.test_format.df_s->DataFrame([data]).to_string(justify='left')
A:pandas.tests.io.formats.test_format.output->DataFrame([data]).to_string()
A:pandas.tests.io.formats.test_format.wide_df->DataFrame(tm.rands_array(25, size=(10, max_cols + 1)))
A:pandas.tests.io.formats.test_format.reg_repr->DataFrame([data])._repr_html_()
A:pandas.tests.io.formats.test_format.max_rows->get_option('display.max_rows')
A:pandas.tests.io.formats.test_format.long_repr->DataFrame([data])._repr_html_()
A:pandas.tests.io.formats.test_format.tuples->list(zip(*arrays))
A:pandas.tests.io.formats.test_format.repstr->DataFrame([data])._repr_html_()
A:pandas.tests.io.formats.test_format.val->DataFrame([data]).to_string()
A:pandas.tests.io.formats.test_format.s1->Series(date_range(start=start_date, freq='D', periods=5))
A:pandas.tests.io.formats.test_format.s2->Series(3, index=dti)
A:pandas.tests.io.formats.test_format.s3->pandas.Series(['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef'])
A:pandas.tests.io.formats.test_format.self.ts->pandas._testing.makeTimeSeries()
A:pandas.tests.io.formats.test_format.a->Series(['א'] * 1000)
A:pandas.tests.io.formats.test_format.cp->self.ts.copy()
A:pandas.tests.io.formats.test_format.last_line->ip.run_cell(code).split('\n')[-1].strip()
A:pandas.tests.io.formats.test_format.sf->pandas.io.formats.format.SeriesFormatter(s, name='עברית')
A:pandas.tests.io.formats.test_format.o->Series([datetime(2012, 1, 1, 1, 1, microsecond=150)] * 3)
A:pandas.tests.io.formats.test_format.td->Series(pd.timedelta_range('1 days', periods=3))
A:pandas.tests.io.formats.test_format.df['B']->pandas.to_datetime(df.B)
A:pandas.tests.io.formats.test_format.ncolsizes->len({len(line.strip()) for line in lines})
A:pandas.tests.io.formats.test_format.test_sers->gen_series_formatting()
A:pandas.tests.io.formats.test_format.strrepr->repr(s).replace('\n', '')
A:pandas.tests.io.formats.test_format.res1->strrepr[0].split()
A:pandas.tests.io.formats.test_format.res2->strrepr[1].split()
A:pandas.tests.io.formats.test_format.obj->pandas.io.formats.format.FloatArrayFormatter(np.array([12, 0], dtype=np.float64))
A:pandas.tests.io.formats.test_format.d->pandas.DataFrame({'col1': [9.999e-08, 1e-07, 1.0001e-07, 2e-07, 4.999e-07, 5e-07, 5.0001e-07, 6e-07, 9.999e-07, 1e-06, 1.0001e-06, 2e-06, 4.999e-06, 5e-06, 5.0001e-06, 6e-06]})
A:pandas.tests.io.formats.test_format.delta_1d->pandas.to_timedelta(1, unit='D')
A:pandas.tests.io.formats.test_format.delta_0d->pandas.to_timedelta(0, unit='D')
A:pandas.tests.io.formats.test_format.delta_1s->pandas.to_timedelta(1, unit='s')
A:pandas.tests.io.formats.test_format.delta_500ms->pandas.to_timedelta(500, unit='ms')
A:pandas.tests.io.formats.test_format.delta_1ns->pandas.to_timedelta(1, unit='ns')
A:pandas.tests.io.formats.test_format.formatter->pandas.io.formats.format.Datetime64Formatter(x, formatter=format_func)
A:pandas.tests.io.formats.test_format.formatted->pandas.to_datetime([datetime(2003, 2, 1), pd.NaT]).format(date_format='%m-%d-%Y', na_rep='UT')
A:pandas.tests.io.formats.test_format.text->str(pd.to_datetime([datetime(2013, 1, 1), datetime(2014, 1, 1, 12), datetime(2014, 1, 1)]))
A:pandas.tests.io.formats.test_format.dt_date->datetime(2013, 1, 2, tzinfo=utc)
A:pandas.tests.io.formats.test_format.dt_datetime->datetime(2013, 1, 2, 12, 1, 3, tzinfo=utc)
A:pandas.tests.io.formats.test_format.dt_datetime_us->datetime(2013, 1, 2, 12, 1, 3, 45, tzinfo=utc)
A:pandas.tests.io.formats.test_format.ts_nanos_only->Timestamp(200)
A:pandas.tests.io.formats.test_format.ts_nanos_micros->Timestamp(1200)
A:pandas.tests.io.formats.test_format.utc->dateutil.tz.tzutc()
A:pandas.tests.io.formats.test_format.code->textwrap.dedent('    import pandas as pd\n    df = pd.DataFrame({"A": [1, 2]})\n    df._repr_html_()\n\n    cfg = get_ipython().config\n    cfg[\'IPKernelApp\'][\'parent_appname\']\n    df._repr_html_()\n    ')
A:pandas.tests.io.formats.test_format.expected->getattr(df, method)()
pandas.tests.io.formats.test_format.TestDataFrameFormatting
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_auto_detect(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_datetimeindex_highprecision(self,start_date)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_datetimelike_frame(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_dict_entries(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_dtindex_highprecision(self,start_date)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_dtlike_frame(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_east_asian_unicode_false(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_east_asian_unicode_true(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_eng_float_formatter(self,float_frame)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_expand_frame_repr(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_fake_qtconsole_repr_html(self,float_frame)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_float_trim_zeros(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_frame_info_encoding(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_index_with_nan(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_info_repr(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_info_repr_html(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_info_repr_max_cols(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_long_series(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_nonunicode_nonascii_alignment(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_period(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_pprint_pathological_object(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_chop_threshold(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_chop_threshold_column_below(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_corner(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_deprecation_negative_int(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_embedded_ndarray(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_html(self,float_frame)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_html_float(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_html_long(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_html_long_and_wide(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_html_long_multiindex(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_html_mathjax(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_html_wide(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_html_wide_multiindex_cols(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_is_valid_construction_code(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_max_columns_max_rows(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_min_rows(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_no_backslash(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_non_interactive(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_obeys_max_seq_limit(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_set(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_should_return_str(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_truncates_terminal_size(self,monkeypatch)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_truncates_terminal_size_full(self,monkeypatch)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_truncation(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_truncation_column_size(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_tuples(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_show_dimensions(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_show_null_counts(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_str_max_colwidth(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_string_repr_encoding(self,datapath)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_ascii_error(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_buffer_all_unicode(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_complex_float_formatting(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_decimal(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_float_format_no_fixed_width(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_float_formatting(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_float_index(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_format_inf(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_format_na(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_index_formatter(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_int_formatting(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_left_justify_cols(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_line_width(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_line_width_no_index(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_no_header(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_no_index(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_repr_unicode(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_small_float_values(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_specified_header(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_truncate(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_truncate_indices(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_truncate_multilevel(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_unicode_columns(self,float_frame)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_unicode_three(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_unicode_two(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_utf8_columns(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_with_col_space(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_with_datetime64_hourformatter(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_with_datetime64_monthformatter(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_with_dt64_hourformatter(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_with_dt64_monthformatter(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_with_formatters(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_with_formatters_unicode(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_truncate_with_different_dtypes(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_truncate_with_different_dtypes_multiindex(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_unicode_problem_decoding_as_ascii(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_wide_repr(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_wide_repr_multiindex(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_wide_repr_multiindex_cols(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_wide_repr_named(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_wide_repr_unicode(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_wide_repr_wide_columns(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_wide_repr_wide_long_columns(self)
pandas.tests.io.formats.test_format.TestDatetime64Formatter
pandas.tests.io.formats.test_format.TestDatetime64Formatter.test_date_nanos(self)
pandas.tests.io.formats.test_format.TestDatetime64Formatter.test_dates(self)
pandas.tests.io.formats.test_format.TestDatetime64Formatter.test_dates_display(self)
pandas.tests.io.formats.test_format.TestDatetime64Formatter.test_datetime64formatter_hoursecond(self)
pandas.tests.io.formats.test_format.TestDatetime64Formatter.test_datetime64formatter_yearmonth(self)
pandas.tests.io.formats.test_format.TestDatetime64Formatter.test_dt64formatter_hoursecond(self)
pandas.tests.io.formats.test_format.TestDatetime64Formatter.test_dt64formatter_yearmonth(self)
pandas.tests.io.formats.test_format.TestDatetime64Formatter.test_mixed(self)
pandas.tests.io.formats.test_format.TestDatetimeIndexFormat
pandas.tests.io.formats.test_format.TestDatetimeIndexFormat.test_date(self)
pandas.tests.io.formats.test_format.TestDatetimeIndexFormat.test_date_explicit_date_format(self)
pandas.tests.io.formats.test_format.TestDatetimeIndexFormat.test_date_tz(self)
pandas.tests.io.formats.test_format.TestDatetimeIndexFormat.test_datetime(self)
pandas.tests.io.formats.test_format.TestDatetimeIndexFormat.test_dt(self)
pandas.tests.io.formats.test_format.TestDatetimeIndexUnicode
pandas.tests.io.formats.test_format.TestDatetimeIndexUnicode.test_dates(self)
pandas.tests.io.formats.test_format.TestDatetimeIndexUnicode.test_mixed(self)
pandas.tests.io.formats.test_format.TestFloatArrayFormatter
pandas.tests.io.formats.test_format.TestFloatArrayFormatter.test_format(self)
pandas.tests.io.formats.test_format.TestFloatArrayFormatter.test_misc(self)
pandas.tests.io.formats.test_format.TestFloatArrayFormatter.test_output_significant_digits(self)
pandas.tests.io.formats.test_format.TestFloatArrayFormatter.test_too_long(self)
pandas.tests.io.formats.test_format.TestNaTFormatting
pandas.tests.io.formats.test_format.TestNaTFormatting.test_repr(self)
pandas.tests.io.formats.test_format.TestNaTFormatting.test_str(self)
pandas.tests.io.formats.test_format.TestRepr_timedelta64
pandas.tests.io.formats.test_format.TestRepr_timedelta64.test_all(self)
pandas.tests.io.formats.test_format.TestRepr_timedelta64.test_long(self)
pandas.tests.io.formats.test_format.TestRepr_timedelta64.test_none(self)
pandas.tests.io.formats.test_format.TestRepr_timedelta64.test_sub_day(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting
pandas.tests.io.formats.test_format.TestSeriesFormatting.chck_ncols(self,s)
pandas.tests.io.formats.test_format.TestSeriesFormatting.setup_method(self,method)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_consistent_format(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_datetimeindex(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_datetimeindex_highprecision(self,start_date)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_dtindex(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_dtindex_highprecision(self,start_date)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_east_asian_unicode_series(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_float_trim_zeros(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_format_explicit(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_freq_name_separation(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_max_multi_index_display(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_max_rows_eq_one(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_mixed_datetime64(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_mixed_dt64(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_ncols(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_period(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_repr_min_rows(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_repr_unicode(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_show_dimensions(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_timedelta64(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_to_string(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_to_string_dtype(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_to_string_float_format(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_to_string_float_na_spacing(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_to_string_header(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_to_string_length(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_to_string_mixed(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_to_string_multindex_header(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_to_string_na_rep(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_to_string_name(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_to_string_without_index(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_truncate_ndots(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_unicode_name_in_footer(self)
pandas.tests.io.formats.test_format.TestStringRepTimestamp
pandas.tests.io.formats.test_format.TestStringRepTimestamp.test_nat_representations(self)
pandas.tests.io.formats.test_format.TestStringRepTimestamp.test_no_tz(self)
pandas.tests.io.formats.test_format.TestStringRepTimestamp.test_tz_dateutil(self)
pandas.tests.io.formats.test_format.TestStringRepTimestamp.test_tz_pytz(self)
pandas.tests.io.formats.test_format.TestTimedelta64Formatter
pandas.tests.io.formats.test_format.TestTimedelta64Formatter.test_days(self)
pandas.tests.io.formats.test_format.TestTimedelta64Formatter.test_days_neg(self)
pandas.tests.io.formats.test_format.TestTimedelta64Formatter.test_subdays(self)
pandas.tests.io.formats.test_format.TestTimedelta64Formatter.test_subdays_neg(self)
pandas.tests.io.formats.test_format.TestTimedelta64Formatter.test_zero(self)
pandas.tests.io.formats.test_format._three_digit_exp()
pandas.tests.io.formats.test_format.assert_filepath_or_buffer_equals(filepath_or_buffer,filepath_or_buffer_id,encoding)
pandas.tests.io.formats.test_format.curpath()
pandas.tests.io.formats.test_format.filepath_or_buffer(filepath_or_buffer_id,tmp_path)
pandas.tests.io.formats.test_format.filepath_or_buffer_id(request)
pandas.tests.io.formats.test_format.gen_series_formatting()
pandas.tests.io.formats.test_format.has_doubly_truncated_repr(df)
pandas.tests.io.formats.test_format.has_expanded_repr(df)
pandas.tests.io.formats.test_format.has_horizontally_truncated_repr(df)
pandas.tests.io.formats.test_format.has_info_repr(df)
pandas.tests.io.formats.test_format.has_non_verbose_info_repr(df)
pandas.tests.io.formats.test_format.has_truncated_repr(df)
pandas.tests.io.formats.test_format.has_vertically_truncated_repr(df)
pandas.tests.io.formats.test_format.test_filepath_or_buffer_arg(method,filepath_or_buffer,assert_filepath_or_buffer_equals,encoding,data,filepath_or_buffer_id)
pandas.tests.io.formats.test_format.test_filepath_or_buffer_bad_arg_raises(float_frame,method)
pandas.tests.io.formats.test_format.test_format_percentiles()
pandas.tests.io.formats.test_format.test_format_percentiles_integer_idx()
pandas.tests.io.formats.test_format.test_repr_html_ipython_config(ip)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/formats/test_to_latex.py----------------------------------------
A:pandas.tests.io.formats.test_to_latex.df->pandas.DataFrame({'a': [0], 'b': [1], 'c': [2], 'd': [3]}).set_index(['a', 'b'])
A:pandas.tests.io.formats.test_to_latex.withindex_result->Series(['a', 'b', 'c']).to_latex()
A:pandas.tests.io.formats.test_to_latex.withoutindex_result->pandas.DataFrame({'a': [0], 'b': [1], 'c': [2], 'd': [3]}).set_index(['a', 'b']).to_latex(header=['AA', 'BB'], index=False)
A:pandas.tests.io.formats.test_to_latex.result->pandas.DataFrame({'a': [0], 'b': [1], 'c': [2], 'd': [3]}).set_index(['a', 'b']).T.to_latex(multirow=True, multicolumn=True, multicolumn_format='c')
A:pandas.tests.io.formats.test_to_latex.unescaped_result->DataFrame(test_dict).to_latex(escape=False)
A:pandas.tests.io.formats.test_to_latex.escaped_result->pandas.DataFrame({'a': [0], 'b': [1], 'c': [2], 'd': [3]}).set_index(['a', 'b']).to_latex()
A:pandas.tests.io.formats.test_to_latex.with1column_result->pandas.DataFrame({'a': [0], 'b': [1], 'c': [2], 'd': [3]}).set_index(['a', 'b']).to_latex(index=False, longtable=True)
A:pandas.tests.io.formats.test_to_latex.with3columns_result->pandas.DataFrame({'a': [0], 'b': [1], 'c': [2], 'd': [3]}).set_index(['a', 'b']).to_latex(index=False, longtable=True)
A:pandas.tests.io.formats.test_to_latex.result_c->pandas.DataFrame({'a': [0], 'b': [1], 'c': [2], 'd': [3]}).set_index(['a', 'b']).to_latex(longtable=True, caption=the_caption)
A:pandas.tests.io.formats.test_to_latex.result_l->pandas.DataFrame({'a': [0], 'b': [1], 'c': [2], 'd': [3]}).set_index(['a', 'b']).to_latex(longtable=True, label=the_label)
A:pandas.tests.io.formats.test_to_latex.result_cl->pandas.DataFrame({'a': [0], 'b': [1], 'c': [2], 'd': [3]}).set_index(['a', 'b']).to_latex(longtable=True, caption=the_caption, label=the_label)
A:pandas.tests.io.formats.test_to_latex.observed->pandas.DataFrame({'a': [0], 'b': [1], 'c': [2], 'd': [3]}).set_index(['a', 'b']).to_latex(header=['r1', 'r2'])
A:pandas.tests.io.formats.test_to_latex.withoutescape_result->pandas.DataFrame({'a': [0], 'b': [1], 'c': [2], 'd': [3]}).set_index(['a', 'b']).to_latex(header=['$A$', '$B$'], escape=False)
A:pandas.tests.io.formats.test_to_latex.s->Series(['a', 'b', 'c'])
A:pandas.tests.io.formats.test_to_latex.mi->pandas.MultiIndex.from_product([[1, 2]], names=[''])
A:pandas.tests.io.formats.test_to_latex.idx_names->tuple((n or '{}' for n in names))
pandas.tests.io.formats.test_to_latex.TestToLatex
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex(self,float_frame)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_bold_rows(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_caption_label(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_decimal(self,float_frame)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_empty(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_escape(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_escape_special_chars(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_filename(self,float_frame)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_float_format_no_fixed_width(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_format(self,float_frame)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_longtable(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_longtable_caption_label(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_midrule_location(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_multicolumnrow(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_multiindex(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_multiindex_dupe_level(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_multiindex_empty_name(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_multiindex_names(self,name0,name1,axes)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_multiindex_nans(self,one_row)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_multindex_header(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_no_bold_rows(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_no_header(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_non_string_index(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_series(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_special_escape(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_specified_header(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_with_formatters(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/formats/test_css.py----------------------------------------
A:pandas.tests.io.formats.test_css.resolve->CSSResolver()
A:pandas.tests.io.formats.test_css.actual->resolve(css, inherited=inherited)
A:pandas.tests.io.formats.test_css.resolved1->resolve(css1, inherited=inherited)
A:pandas.tests.io.formats.test_css.resolved2->resolve(css2, inherited=inherited)
A:pandas.tests.io.formats.test_css.inherited_props->resolve(inherited)
A:pandas.tests.io.formats.test_css.style_props->resolve(style, inherited=inherited_props)
A:pandas.tests.io.formats.test_css.equiv_props->resolve(equiv)
pandas.tests.io.formats.test_css.assert_resolves(css,props,inherited=None)
pandas.tests.io.formats.test_css.assert_same_resolution(css1,css2,inherited=None)
pandas.tests.io.formats.test_css.test_css_absolute_font_size(size,relative_to,resolved)
pandas.tests.io.formats.test_css.test_css_none_absent(style,equiv)
pandas.tests.io.formats.test_css.test_css_parse_invalid(invalid_css,remainder)
pandas.tests.io.formats.test_css.test_css_parse_normalisation(name,norm,abnorm)
pandas.tests.io.formats.test_css.test_css_precedence(style,inherited,equiv)
pandas.tests.io.formats.test_css.test_css_relative_font_size(size,relative_to,resolved)
pandas.tests.io.formats.test_css.test_css_side_shorthands(shorthand,expansions)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/formats/test_to_html.py----------------------------------------
A:pandas.tests.io.formats.test_to_html.filename->'.'.join([name, 'html'])
A:pandas.tests.io.formats.test_to_html.filepath->datapath('io', 'formats', 'data', 'html', filename)
A:pandas.tests.io.formats.test_to_html.html->pandas.DataFrame({'a': range(61)}).to_html(notebook=False)
A:pandas.tests.io.formats.test_to_html.df->pandas.DataFrame({'a': range(61)})
A:pandas.tests.io.formats.test_to_html.result->pandas.DataFrame({'a': range(61)})._repr_html_()
A:pandas.tests.io.formats.test_to_html.expected->expected_html(datapath, expected)
A:pandas.tests.io.formats.test_to_html.df.columns->pandas.MultiIndex.from_product([['a', 'b'], ['c', 'd']])
A:pandas.tests.io.formats.test_to_html.df.index->pandas.MultiIndex.from_product([['a', 'b'], ['c', 'd', 'e', 'f', 'g']])
A:pandas.tests.io.formats.test_to_html.index->MultiIndex(levels=[['ba', 'bb', 'bc'], ['ca', 'cb', 'cc']], codes=[[0, 1, 2], [0, 1, 2]], names=['b', 'c'])
A:pandas.tests.io.formats.test_to_html.s->pandas.DataFrame({'a': range(61)}).to_html()
A:pandas.tests.io.formats.test_to_html.buf->StringIO()
A:pandas.tests.io.formats.test_to_html.retval->pandas.DataFrame({'a': range(61)}).to_html(buf=buf)
A:pandas.tests.io.formats.test_to_html.path->tmpdir.join('test.html')
A:pandas.tests.io.formats.test_to_html.expected_with_index->expected_html(datapath, 'index_5')
A:pandas.tests.io.formats.test_to_html.expected_without_index->expected_html(datapath, 'index_2')
A:pandas.tests.io.formats.test_to_html.columns->MultiIndex(levels=[['d'], ['aa', 'ab', 'ac']], codes=[[0, 0, 0], [0, 1, 2]], names=[None, 'a'])
A:pandas.tests.io.formats.test_to_html.data->numpy.array([[1.0, np.nan, np.nan], [np.nan, 2.0, np.nan], [np.nan, np.nan, 3.0]])
A:pandas.tests.io.formats.test_to_html.notebook->pandas.DataFrame({'a': range(61)}).to_html(notebook=True)
pandas.tests.io.formats.test_to_html.biggie_df_fixture(request)
pandas.tests.io.formats.test_to_html.expected_html(datapath,name)
pandas.tests.io.formats.test_to_html.justify(request)
pandas.tests.io.formats.test_to_html.test_html_invalid_formatters_arg_raises(size)
pandas.tests.io.formats.test_to_html.test_html_repr_min_rows(datapath,max_rows,min_rows,expected)
pandas.tests.io.formats.test_to_html.test_html_repr_min_rows_default(datapath)
pandas.tests.io.formats.test_to_html.test_ignore_display_max_colwidth(method,expected,max_colwidth)
pandas.tests.io.formats.test_to_html.test_to_html(biggie_df_fixture)
pandas.tests.io.formats.test_to_html.test_to_html_alignment_with_truncation(datapath,row_index,row_type,column_index,column_type,index,header,index_names)
pandas.tests.io.formats.test_to_html.test_to_html_basic_alignment(datapath,row_index,row_type,column_index,column_type,index,header,index_names)
pandas.tests.io.formats.test_to_html.test_to_html_border(option,result,expected)
pandas.tests.io.formats.test_to_html.test_to_html_columns_arg(float_frame)
pandas.tests.io.formats.test_to_html.test_to_html_decimal(datapath)
pandas.tests.io.formats.test_to_html.test_to_html_empty_dataframe(biggie_df_fixture)
pandas.tests.io.formats.test_to_html.test_to_html_encoding(float_frame,tmp_path)
pandas.tests.io.formats.test_to_html.test_to_html_escaped(kwargs,string,expected,datapath)
pandas.tests.io.formats.test_to_html.test_to_html_filename(biggie_df_fixture,tmpdir)
pandas.tests.io.formats.test_to_html.test_to_html_float_format_no_fixed_width(value,float_format,expected,datapath)
pandas.tests.io.formats.test_to_html.test_to_html_formatters(df,formatters,expected,datapath)
pandas.tests.io.formats.test_to_html.test_to_html_index(datapath)
pandas.tests.io.formats.test_to_html.test_to_html_invalid_classes_type(classes)
pandas.tests.io.formats.test_to_html.test_to_html_invalid_justify(justify)
pandas.tests.io.formats.test_to_html.test_to_html_justify(justify,datapath)
pandas.tests.io.formats.test_to_html.test_to_html_multi_indexes_index_false(datapath)
pandas.tests.io.formats.test_to_html.test_to_html_multiindex(columns,justify,expected,datapath)
pandas.tests.io.formats.test_to_html.test_to_html_multiindex_index_false(index_is_named,datapath)
pandas.tests.io.formats.test_to_html.test_to_html_multiindex_max_cols(datapath)
pandas.tests.io.formats.test_to_html.test_to_html_multiindex_odd_even_truncate(max_rows,expected,datapath)
pandas.tests.io.formats.test_to_html.test_to_html_multiindex_sparsify(multi_sparse,expected,datapath)
pandas.tests.io.formats.test_to_html.test_to_html_no_index_max_rows(datapath)
pandas.tests.io.formats.test_to_html.test_to_html_notebook_has_style(notebook)
pandas.tests.io.formats.test_to_html.test_to_html_regression_GH6098()
pandas.tests.io.formats.test_to_html.test_to_html_render_links(render_links,expected,datapath)
pandas.tests.io.formats.test_to_html.test_to_html_round_column_headers()
pandas.tests.io.formats.test_to_html.test_to_html_truncate(datapath)
pandas.tests.io.formats.test_to_html.test_to_html_truncate_formatter(datapath)
pandas.tests.io.formats.test_to_html.test_to_html_truncate_multi_index(sparsify,expected,datapath)
pandas.tests.io.formats.test_to_html.test_to_html_truncation_index_false_max_cols(datapath,index,col_index_named,expected_output)
pandas.tests.io.formats.test_to_html.test_to_html_truncation_index_false_max_rows(datapath,index)
pandas.tests.io.formats.test_to_html.test_to_html_unicode(df,expected,datapath)
pandas.tests.io.formats.test_to_html.test_to_html_with_classes(classes,datapath)
pandas.tests.io.formats.test_to_html.test_to_html_with_col_space(col_space)
pandas.tests.io.formats.test_to_html.test_to_html_with_col_space_units(unit)
pandas.tests.io.formats.test_to_html.test_to_html_with_empty_string_label()
pandas.tests.io.formats.test_to_html.test_to_html_with_id()
pandas.tests.io.formats.test_to_html.test_to_html_with_index_names_false()
pandas.tests.io.formats.test_to_html.test_to_html_with_no_bold()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/formats/test_console.py----------------------------------------
pandas.tests.io.formats.test_console.MockEncoding(self,encoding)
pandas.tests.io.formats.test_console.MockEncoding.__init__(self,encoding)
pandas.tests.io.formats.test_console.MockEncoding.encoding(self)
pandas.tests.io.formats.test_console.MockEncoding.raise_or_return(val)
pandas.tests.io.formats.test_console.test_detect_console_encoding_fallback_to_default(monkeypatch,std,locale)
pandas.tests.io.formats.test_console.test_detect_console_encoding_fallback_to_locale(monkeypatch,encoding)
pandas.tests.io.formats.test_console.test_detect_console_encoding_from_stdout_stdin(monkeypatch,empty,filled)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/pytables/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/pytables/test_store.py----------------------------------------
A:pandas.tests.io.pytables.test_store.ignore_natural_naming_warning->pytest.mark.filterwarnings('ignore:object name:tables.exceptions.NaturalNameWarning')
A:pandas.tests.io.pytables.test_store.df->pandas.DataFrame(0, index=mi, columns=['a'])
A:pandas.tests.io.pytables.test_store.path->create_tempfile(setup_path)
A:pandas.tests.io.pytables.test_store.tbl['a']->pandas._testing.makeDataFrame()
A:pandas.tests.io.pytables.test_store.o->pandas._testing.makeDataFrame()
A:pandas.tests.io.pytables.test_store.result->pandas.read_hdf(store, 'df', where=where)
A:pandas.tests.io.pytables.test_store.store['a']->pandas._testing.makeTimeDataFrame()
A:pandas.tests.io.pytables.test_store.store['b']->pandas._testing.makeDataFrame()
A:pandas.tests.io.pytables.test_store.store['c']->pandas._testing.makeDataFrame()
A:pandas.tests.io.pytables.test_store.df['timestamp1']->Timestamp('20010102')
A:pandas.tests.io.pytables.test_store.df['timestamp2']->Timestamp('20010103')
A:pandas.tests.io.pytables.test_store.df['datetime1']->datetime.datetime.date(2001, 1, 2)
A:pandas.tests.io.pytables.test_store.df['datetime2']->datetime.datetime.datetime(2001, 1, 3, 0, 0)
A:pandas.tests.io.pytables.test_store.s->Series(Categorical(['a', 'b', 'b', 'a', 'a', 'c'], categories=['a', 'b', 'c', 'd'], ordered=False))
A:pandas.tests.io.pytables.test_store.store['foo/bar']->pandas._testing.makeDataFrame()
A:pandas.tests.io.pytables.test_store.store['node())']->pandas._testing.makeDataFrame()
A:pandas.tests.io.pytables.test_store.store->HDFStore(path)
A:pandas.tests.io.pytables.test_store.left->HDFStore(path).get('/a')
A:pandas.tests.io.pytables.test_store.frame_path->'/'.join([path, leaf])
A:pandas.tests.io.pytables.test_store.obj->HDFStore(path).get(frame_path)
A:pandas.tests.io.pytables.test_store.ts->pandas.Timestamp('2014-01-01')
A:pandas.tests.io.pytables.test_store.index->MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'], ['one', 'two', 'three']], codes=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3], [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]], names=['foo', 'bar'])
A:pandas.tests.io.pytables.test_store.all_levels->range(0, 10)
A:pandas.tests.io.pytables.test_store.h5table->pandas.tests.io.pytables.common.tables.open_file(tmpfile, mode='r')
A:pandas.tests.io.pytables.test_store.expected->pandas.DataFrame([1.0, 2, 3], index=pd.PeriodIndex(['2015-01-01', '2015-01-02', '2015-01-05'], freq='B'))
A:pandas.tests.io.pytables.test_store.uint_data->DataFrame({'u08': Series(np.random.randint(0, high=255, size=5), dtype=np.uint8), 'u16': Series(np.random.randint(0, high=65535, size=5), dtype=np.uint16), 'u32': Series(np.random.randint(0, high=2 ** 30, size=5), dtype=np.uint32), 'u64': Series([2 ** 58, 2 ** 59, 2 ** 60, 2 ** 61, 2 ** 62], dtype=np.uint64)}, index=np.arange(5))
A:pandas.tests.io.pytables.test_store.ss->pandas._testing.makeStringSeries()
A:pandas.tests.io.pytables.test_store.ns->Series(np.arange(100))
A:pandas.tests.io.pytables.test_store.mi->pandas.MultiIndex.from_arrays([idx, idx])
A:pandas.tests.io.pytables.test_store.mi['B']->numpy.arange(len(mi))
A:pandas.tests.io.pytables.test_store.s.index->Series(Categorical(['a', 'b', 'b', 'a', 'a', 'c'], categories=['a', 'b', 'c', 'd'], ordered=False)).index.droplevel(2)
A:pandas.tests.io.pytables.test_store.df.index->timedelta_range(start='0s', periods=10, freq='1s', name='example')
A:pandas.tests.io.pytables.test_store.ser->Series(np.random.randn(len(idx)), idx)
A:pandas.tests.io.pytables.test_store.retr->read_hdf(store, key)
A:pandas.tests.io.pytables.test_store.s_nan->Series(np.random.randn(len(idx)), idx).replace(nan_rep, np.nan)
A:pandas.tests.io.pytables.test_store.df1->pandas._testing.makeTimeDataFrame()
A:pandas.tests.io.pytables.test_store.df2->pandas.DataFrame(0, index=mi, columns=['a']).copy()
A:pandas.tests.io.pytables.test_store.df3->pandas.DataFrame(0, index=mi, columns=['a']).copy()
A:pandas.tests.io.pytables.test_store.df_with_missing->DataFrame({'col1': [0, np.nan, 2], 'col2': [1, np.nan, np.nan]})
A:pandas.tests.io.pytables.test_store.reloaded->read_hdf(path, 'df_with_missing')
A:pandas.tests.io.pytables.test_store.df['index']->range(10)
A:pandas.tests.io.pytables.test_store.df['int64']->Series([1] * len(df), dtype='int64')
A:pandas.tests.io.pytables.test_store.df['int16']->Series([1] * len(df), dtype='int16')
A:pandas.tests.io.pytables.test_store.a->pandas.DataFrame(0, index=mi, columns=['a']).pop('A')
A:pandas.tests.io.pytables.test_store.df['int16_2']->Series([1] * len(df), dtype='int16')
A:pandas.tests.io.pytables.test_store.df['float_3']->Series([1.0] * len(df), dtype='float64')
A:pandas.tests.io.pytables.test_store.df_new->pandas.DataFrame(0, index=mi, columns=['a']).copy()
A:pandas.tests.io.pytables.test_store.sl->pandas.DataFrame(0, index=mi, columns=['a']).copy().columns.get_loc('string2')
A:pandas.tests.io.pytables.test_store.df_dc->DataFrame(np.random.randn(8, 3), index=index, columns=['A', 'B', 'C'])
A:pandas.tests.io.pytables.test_store.df_dc['datetime']->Timestamp('20010102')
A:pandas.tests.io.pytables.test_store.df_dc.loc[:, ['B', 'C']]->DataFrame(np.random.randn(8, 3), index=index, columns=['A', 'B', 'C']).loc[:, ['B', 'C']].abs()
A:pandas.tests.io.pytables.test_store.expected.index->Int64Index(expected.index)
A:pandas.tests.io.pytables.test_store.xp->Series(np.zeros(12), index=make_index(['date', 'level_1', 'level_2']))
A:pandas.tests.io.pytables.test_store.idx->pandas._testing.makePeriodIndex(10)
A:pandas.tests.io.pytables.test_store.actual->read_hdf(path_obj, 'df')
A:pandas.tests.io.pytables.test_store.df['float322']->df['float322'].astype('float32').astype('float32')
A:pandas.tests.io.pytables.test_store.df['time1']->Timestamp('20130101')
A:pandas.tests.io.pytables.test_store.df['time2']->Timestamp('20130102')
A:pandas.tests.io.pytables.test_store.df_empty->DataFrame(columns=list('ABC'))
A:pandas.tests.io.pytables.test_store.df1['float322']->df1['float322'].astype('float32').astype('float32')
A:pandas.tests.io.pytables.test_store.df1['time1']->Timestamp('20130101')
A:pandas.tests.io.pytables.test_store.df1['time2']->Timestamp('20130102')
A:pandas.tests.io.pytables.test_store.bday_egypt->pandas.offsets.CustomBusinessDay(holidays=holidays, weekmask=weekmask_egypt)
A:pandas.tests.io.pytables.test_store.dt->datetime.datetime.datetime(2012, 1, 2, 3, 4, 5, 123456)
A:pandas.tests.io.pytables.test_store.dts->date_range(dt, periods=5, freq=bday_egypt)
A:pandas.tests.io.pytables.test_store.time->pandas.Timestamp('2000-01-01 01:00:00', tz='US/Eastern')
A:pandas.tests.io.pytables.test_store.dfq->DataFrame(np.random.randn(10, 4), columns=list('ABCD'), index=date_range('20130101', periods=10))
A:pandas.tests.io.pytables.test_store.ts2->Series(ts.index, Index(ts.index, dtype=object))
A:pandas.tests.io.pytables.test_store.ts3->Series(ts.values, Index(np.asarray(ts.index, dtype=object), dtype=object))
A:pandas.tests.io.pytables.test_store.col->numpy.arange(10)
A:pandas.tests.io.pytables.test_store.data->numpy.random.randn(30).reshape((3, 10))
A:pandas.tests.io.pytables.test_store.DF->DataFrame(data, index=idx, columns=col)
A:pandas.tests.io.pytables.test_store.values->numpy.random.randn(2)
A:pandas.tests.io.pytables.test_store.dr->bdate_range('1/1/1940', '1/1/1960')
A:pandas.tests.io.pytables.test_store.tdf->pandas._testing.makeTimeDataFrame()
A:pandas.tests.io.pytables.test_store.df['foo']->numpy.random.randn(len(df))
A:pandas.tests.io.pytables.test_store.s0->Series(dtype=object)
A:pandas.tests.io.pytables.test_store.s1->Series(name='myseries', dtype=object)
A:pandas.tests.io.pytables.test_store.df0->DataFrame()
A:pandas.tests.io.pytables.test_store.frame->DataFrame(np.random.randn(10, 3), index=index, columns=['A', 'B', 'C'])
A:pandas.tests.io.pytables.test_store.idx1->pandas.Index(pd.to_datetime([datetime.date(2010, 1, 1), datetime.date(2010, 1, 2)]), name='rowsא')
A:pandas.tests.io.pytables.test_store.df['cols']->(df['cols'] + 10).apply(str)
A:pandas.tests.io.pytables.test_store.np_zero->numpy.float64(0)
A:pandas.tests.io.pytables.test_store.selector->Index(df.ts[0:100].values)
A:pandas.tests.io.pytables.test_store.results->list(store.select('df', where=where, chunksize=chunksize))
A:pandas.tests.io.pytables.test_store.where->"index <= '{beg_dt}' & index >= '{end_dt}'".format(beg_dt=beg_dt, end_dt=end_dt)
A:pandas.tests.io.pytables.test_store.chunksize->int(10000.0)
A:pandas.tests.io.pytables.test_store.idx2->date_range('2001-1-1', periods=3, freq='H')
A:pandas.tests.io.pytables.test_store.crit1->Term('index>=date')
A:pandas.tests.io.pytables.test_store.parms->DataFrame({'A': [1, 1, 2, 2, 3]})
A:pandas.tests.io.pytables.test_store.selection->date_range('20000101', periods=500)
A:pandas.tests.io.pytables.test_store.hist->DataFrame(np.random.randn(25, 1), columns=['data'], index=MultiIndex.from_tuples([(i, j) for i in range(5) for j in range(5)], names=['l1', 'l2']))
A:pandas.tests.io.pytables.test_store.l->date_range('20000101', periods=500).index.tolist()
A:pandas.tests.io.pytables.test_store.df4->DataFrame({('1', 2): np.random.randn(10)})
A:pandas.tests.io.pytables.test_store.c->HDFStore(path).select_column('df', 'index')
A:pandas.tests.io.pytables.test_store.df1_result->HDFStore(path).select('df1', c)
A:pandas.tests.io.pytables.test_store.df2_result->HDFStore(path).select('df2', c)
A:pandas.tests.io.pytables.test_store.store1->HDFStore(path)
A:pandas.tests.io.pytables.test_store.store2->HDFStore(path)
A:pandas.tests.io.pytables.test_store.(fd, new_f)->tempfile.mkstemp()
A:pandas.tests.io.pytables.test_store.tstore->HDFStore(path).copy(new_f, keys=keys, propindexes=propindexes, **kwargs)
A:pandas.tests.io.pytables.test_store.keys->HDFStore(path).keys()
A:pandas.tests.io.pytables.test_store.new_t->HDFStore(path).copy(new_f, keys=keys, propindexes=propindexes, **kwargs).get_storer(k)
A:pandas.tests.io.pytables.test_store.orig_t->HDFStore(path).get_storer(k)
A:pandas.tests.io.pytables.test_store.st->HDFStore(path)
A:pandas.tests.io.pytables.test_store.series->pandas._testing.makeFloatSeries()
A:pandas.tests.io.pytables.test_store.df5->DataFrame({('1', 2, object): np.random.randn(10)})
A:pandas.tests.io.pytables.test_store.name->'df_{}'.format(tm.rands(10))
A:pandas.tests.io.pytables.test_store.df2['s2']->Series(list('abcdefg')).astype('category')
A:pandas.tests.io.pytables.test_store.info->HDFStore(path).info()
A:pandas.tests.io.pytables.test_store.df.obsids->pandas.DataFrame(0, index=mi, columns=['a']).obsids.astype('category')
A:pandas.tests.io.pytables.test_store.df.imgids->pandas.DataFrame(0, index=mi, columns=['a']).imgids.astype('category')
A:pandas.tests.io.pytables.test_store.df['a']->pandas.DataFrame(0, index=mi, columns=['a']).a.astype('category')
A:pandas.tests.io.pytables.test_store.df['b']->pandas.DataFrame(0, index=mi, columns=['a']).b.astype('category')
A:pandas.tests.io.pytables.test_store.df['d']->pandas.DataFrame(0, index=mi, columns=['a']).b.astype('category')
A:pandas.tests.io.pytables.test_store.other->read_hdf(path, 'df')
A:pandas.tests.io.pytables.test_store.cols2load->list('BCD')
A:pandas.tests.io.pytables.test_store.cols2load_original->list(cols2load)
A:pandas.tests.io.pytables.test_store.df_loaded->read_hdf(path, 'df', columns=cols2load)
A:pandas.tests.io.pytables.test_store.direct->read_hdf(path, 'df')
A:pandas.tests.io.pytables.test_store.indirect->next(iterator.__iter__())
A:pandas.tests.io.pytables.test_store.iterator->read_hdf(path, 'df', iterator=True)
A:pandas.tests.io.pytables.test_store.reread->read_hdf(path)
A:pandas.tests.io.pytables.test_store.path_obj->LocalPath(filename)
A:pandas.tests.io.pytables.test_store.query->'{col} {op} v'.format(op=op, col=col)
pandas.tests.io.pytables.test_store.TestHDFStore
pandas.tests.io.pytables.test_store.TestHDFStore._check_double_roundtrip(self,obj,comparator,path,compression=False,**kwargs)
pandas.tests.io.pytables.test_store.TestHDFStore._check_roundtrip(self,obj,comparator,path,compression=False,**kwargs)
pandas.tests.io.pytables.test_store.TestHDFStore._check_roundtrip_table(self,obj,comparator,path,compression=False)
pandas.tests.io.pytables.test_store.TestHDFStore.test_api(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_api_default_format(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_append(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_append_all_nans(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_append_frame_column_oriented(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_append_hierarchical(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_append_misc(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_append_raise(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_append_series(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_append_some_nans(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_append_to_multiple(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_append_to_multiple_dropna(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_append_to_multiple_dropna_false(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_append_with_data_columns(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_append_with_diff_col_name_types_raises_value_error(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_append_with_different_block_ordering(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_append_with_empty_string(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_append_with_strings(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_append_with_timedelta(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_calendar_roundtrip_issue(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_can_serialize_dates(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_categorical(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_categorical_conversion(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_categorical_nan_only_columns(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_column_multiindex(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_columns_multiindex_modified(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_complibs(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_complibs_default_settings(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_contains(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_context(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_contiguous_mixed_data_table(self,start,stop,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_conv_read_write(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_coordinates(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_copy(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_create_table_index(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_duplicate_column_name(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_empty_series(self,dtype,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_empty_series_frame(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_encoding(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_float_index(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_flush(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_format_kwarg_in_constructor(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_format_type(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_frame(self,compression,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_frame_select(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_frame_select_complex(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_frame_select_complex2(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_fspath(self)
pandas.tests.io.pytables.test_store.TestHDFStore.test_get(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_getattr(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_index_types(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_invalid_complib(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_invalid_filtering(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_invalid_terms(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_iter_empty(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_keys(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_keys_ignore_hdf_softlink(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_latin_encoding(self,setup_path,dtype,val)
pandas.tests.io.pytables.test_store.TestHDFStore.test_legacy_table_fixed_format_read_py2(self,datapath,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_legacy_table_read_py2(self,datapath,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_long_strings(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_mi_data_columns(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_mode(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_multiple_open_close(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_nan_selection_bug_4858(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_open_args(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_overwrite_node(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_pass_spec_to_storer(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_path_localpath_hdfstore(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_path_pathlib(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_path_pathlib_hdfstore(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_pickle_path_localpath(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_preserve_timedeltaindex_type(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_put(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_put_compression(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_put_compression_blosc(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_put_integer(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_put_mixed_type(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_put_string_index(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_pytables_native2_read(self,datapath,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_pytables_native_read(self,datapath,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_query_compare_column_type(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_query_long_float_literal(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_query_with_nested_special_character(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_read_column(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_read_from_pathlib_path(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_read_from_py_localpath(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_read_hdf_errors(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_read_hdf_generic_buffer_errors(self)
pandas.tests.io.pytables.test_store.TestHDFStore.test_read_hdf_iterator(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_read_hdf_open_store(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_read_hdf_series_mode_r(self,format,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_read_missing_key_close_store(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_read_missing_key_opened_store(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_read_nokey(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_read_nokey_empty(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_read_nokey_table(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_read_py2_hdf_file_in_py3(self,datapath)
pandas.tests.io.pytables.test_store.TestHDFStore.test_remove(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_reopen_handle(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_repr(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_retain_index_attributes(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_retain_index_attributes2(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_round_trip_equals(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_roundtrip_tz_aware_index(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_same_name_scoping(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_select(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_select_as_multiple(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_select_columns_in_where(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_select_dtypes(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_select_empty_where(self,where)
pandas.tests.io.pytables.test_store.TestHDFStore.test_select_filter_corner(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_select_iterator(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_select_iterator_complete_8014(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_select_iterator_many_empty_frames(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_select_iterator_non_complete_8014(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_select_with_dups(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_select_with_many_inputs(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_series(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_start_stop_fixed(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_start_stop_multiple(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_start_stop_table(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_store_datetime_fractional_secs(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_store_datetime_mixed(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_store_dt_fractional_secs(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_store_dt_mixed(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_store_hierarchical(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_store_index_name(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_store_index_name_numpy_str(self,table_format,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_store_index_name_with_tz(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_store_index_types(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_store_mixed(self,compression,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_store_multiindex(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_store_series_name(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_string_select(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_table_index_incompatible_dtypes(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_table_mixed_dtypes(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_table_values_dtypes_roundtrip(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_timeseries_preepoch(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_to_hdf_errors(self,format,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_to_hdf_multiindex_extension_dtype(self,idx,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_to_hdf_with_min_itemsize(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_to_hdf_with_object_column_names(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_tseries_indices_frame(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_tseries_indices_series(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_tuple_index(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_unicode_index(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_unicode_longer_encoded(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_unimplemented_dtypes_table_columns(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_versioning(self,setup_path)
pandas.tests.io.pytables.test_store.TestHDFStore.test_walk(self,where,expected,setup_path)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/pytables/test_timezones.py----------------------------------------
A:pandas.tests.io.pytables.test_timezones.df->DataFrame({'A': range(len(i)), 'B': i}, index=i)
A:pandas.tests.io.pytables.test_timezones.result->pandas.read_hdf(path, key, where='DATE > 20151130')
A:pandas.tests.io.pytables.test_timezones.rng->date_range('1/1/2000 00:00:00-07:00', '1/30/2000 00:00:00-07:00')
A:pandas.tests.io.pytables.test_timezones.frame->DataFrame(np.random.randn(len(rng), 4), index=rng)
A:pandas.tests.io.pytables.test_timezones.today->datetime.date(2013, 9, 10)
A:pandas.tests.io.pytables.test_timezones.expected->DataFrame({'data': 123}, index=index)
A:pandas.tests.io.pytables.test_timezones.times->pandas.date_range('2013-10-26 23:00', '2013-10-27 01:00', tz='Europe/London', freq='H', ambiguous='infer')
A:pandas.tests.io.pytables.test_timezones.dts->pandas.date_range('20151201', periods=periods, freq='D', tz='UTC')
A:pandas.tests.io.pytables.test_timezones.mi->pandas.MultiIndex.from_arrays([dts, range(periods)], names=['DATE', 'NO'])
pandas.tests.io.pytables.test_timezones._compare_with_tz(a,b)
pandas.tests.io.pytables.test_timezones.test_append_with_timezones_dateutil(setup_path)
pandas.tests.io.pytables.test_timezones.test_append_with_timezones_pytz(setup_path)
pandas.tests.io.pytables.test_timezones.test_dst_transitions(setup_path)
pandas.tests.io.pytables.test_timezones.test_fixed_offset_tz(setup_path)
pandas.tests.io.pytables.test_timezones.test_legacy_datetimetz_object(datapath,setup_path)
pandas.tests.io.pytables.test_timezones.test_legacy_dttz_object(datapath,setup_path)
pandas.tests.io.pytables.test_timezones.test_py2_created_with_datetimez(datapath,setup_path)
pandas.tests.io.pytables.test_timezones.test_py2_created_with_dtz(datapath,setup_path)
pandas.tests.io.pytables.test_timezones.test_read_with_where_tz_aware_index(setup_path)
pandas.tests.io.pytables.test_timezones.test_store_timezone(setup_path)
pandas.tests.io.pytables.test_timezones.test_timezones_fixed(setup_path)
pandas.tests.io.pytables.test_timezones.test_tseries_select_index_column(setup_path)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/pytables/test_pytables_missing.py----------------------------------------
A:pandas.tests.io.pytables.test_pytables_missing.df->pandas.DataFrame({'A': [1, 2]})
pandas.tests.io.pytables.test_pytables_missing.test_pytables_raises()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/pytables/test_complex.py----------------------------------------
A:pandas.tests.io.pytables.test_complex.df->DataFrame({'a': np.random.randn(100).astype(np.complex128), 'b': np.random.randn(100)})
A:pandas.tests.io.pytables.test_complex.reread->read_hdf(path, 'obj')
A:pandas.tests.io.pytables.test_complex.complex64->numpy.array([1.0 + 1j, 1.0 + 1j, 1.0 + 1j, 1.0 + 1j], dtype=np.complex64)
A:pandas.tests.io.pytables.test_complex.complex128->numpy.array([1.0 + 1j, 1.0 + 1j, 1.0 + 1j, 1.0 + 1j])
A:pandas.tests.io.pytables.test_complex.result->store.select('df')
A:pandas.tests.io.pytables.test_complex.s->Series(complex128, index=list('abcd'))
pandas.tests.io.pytables.test_complex.test_complex_across_dimensions(setup_path)
pandas.tests.io.pytables.test_complex.test_complex_across_dimensions_fixed(setup_path)
pandas.tests.io.pytables.test_complex.test_complex_append(setup_path)
pandas.tests.io.pytables.test_complex.test_complex_fixed(setup_path)
pandas.tests.io.pytables.test_complex.test_complex_indexing_error(setup_path)
pandas.tests.io.pytables.test_complex.test_complex_mixed_fixed(setup_path)
pandas.tests.io.pytables.test_complex.test_complex_mixed_table(setup_path)
pandas.tests.io.pytables.test_complex.test_complex_series_error(setup_path)
pandas.tests.io.pytables.test_complex.test_complex_table(setup_path)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/pytables/common.py----------------------------------------
A:pandas.tests.io.pytables.common.tables->pytest.importorskip('tables')
A:pandas.tests.io.pytables.common.path->create_tempfile(path)
A:pandas.tests.io.pytables.common.store->HDFStore(path, mode=mode, complevel=complevel, complib=complib, fletcher32=False)
pandas.tests.io.pytables.common._maybe_remove(store,key)
pandas.tests.io.pytables.common.create_tempfile(path)
pandas.tests.io.pytables.common.ensure_clean_path(path)
pandas.tests.io.pytables.common.ensure_clean_store(path,mode='a',complevel=None,complib=None,fletcher32=False)
pandas.tests.io.pytables.common.safe_close(store)
pandas.tests.io.pytables.common.safe_remove(path)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/pytables/conftest.py----------------------------------------
pandas.tests.io.pytables.conftest.setup_mode()
pandas.tests.io.pytables.conftest.setup_path()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/pytables/test_compat.py----------------------------------------
A:pandas.tests.io.pytables.test_compat.tables->pytest.importorskip('tables')
A:pandas.tests.io.pytables.test_compat.t->f.create_table('/', name=objname, description=table_schema)
A:pandas.tests.io.pytables.test_compat.result->pandas.read_hdf(path, key=objname, start=1, stop=2)
A:pandas.tests.io.pytables.test_compat.expected->df[1:2].reset_index(drop=True)
pandas.tests.io.pytables.test_compat.TestReadPyTablesHDF5
pandas.tests.io.pytables.test_compat.TestReadPyTablesHDF5.test_read_complete(self,pytables_hdf5_file)
pandas.tests.io.pytables.test_compat.TestReadPyTablesHDF5.test_read_with_start(self,pytables_hdf5_file)
pandas.tests.io.pytables.test_compat.TestReadPyTablesHDF5.test_read_with_startstop(self,pytables_hdf5_file)
pandas.tests.io.pytables.test_compat.TestReadPyTablesHDF5.test_read_with_stop(self,pytables_hdf5_file)
pandas.tests.io.pytables.test_compat.pytables_hdf5_file()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/sas/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/sas/test_xport.py----------------------------------------
A:pandas.tests.io.sas.test_xport.data[v]->data[v].astype(np.float64).astype(np.float64)
A:pandas.tests.io.sas.test_xport.self.dirpath->datapath('io', 'sas', 'data')
A:pandas.tests.io.sas.test_xport.self.file01->os.path.join(self.dirpath, 'DEMO_G.xpt')
A:pandas.tests.io.sas.test_xport.self.file02->os.path.join(self.dirpath, 'SSHSV1_A.xpt')
A:pandas.tests.io.sas.test_xport.self.file03->os.path.join(self.dirpath, 'DRXFCD_G.xpt')
A:pandas.tests.io.sas.test_xport.self.file04->os.path.join(self.dirpath, 'paxraw_d_short.xpt')
A:pandas.tests.io.sas.test_xport.data_csv->pandas.read_csv(self.file04.replace('.xpt', '.csv'))
A:pandas.tests.io.sas.test_xport.data->read_sas(self.file04, format='xport')
A:pandas.tests.io.sas.test_xport.reader->read_sas(self.file01, index='SEQN', chunksize=1000)
A:pandas.tests.io.sas.test_xport.all_data->list(reader)
pandas.tests.io.sas.test_xport.TestXport
pandas.tests.io.sas.test_xport.TestXport.setup_method(self,datapath)
pandas.tests.io.sas.test_xport.TestXport.test1_basic(self)
pandas.tests.io.sas.test_xport.TestXport.test1_incremental(self)
pandas.tests.io.sas.test_xport.TestXport.test1_index(self)
pandas.tests.io.sas.test_xport.TestXport.test2(self)
pandas.tests.io.sas.test_xport.TestXport.test_multiple_types(self)
pandas.tests.io.sas.test_xport.TestXport.test_truncated_float_support(self)
pandas.tests.io.sas.test_xport.numeric_as_float(data)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/sas/test_sas7bdat.py----------------------------------------
A:pandas.tests.io.sas.test_sas7bdat.self.dirpath->datapath('io', 'sas', 'data')
A:pandas.tests.io.sas.test_sas7bdat.fname->datapath('io', 'sas', 'data', 'zero_variables.sas7bdat')
A:pandas.tests.io.sas.test_sas7bdat.df->pandas.read_sas(fname, encoding='latin-1')
A:pandas.tests.io.sas.test_sas7bdat.epoch->datetime(1960, 1, 1)
A:pandas.tests.io.sas.test_sas7bdat.t1->pandas.to_timedelta(df['Column4'], unit='d')
A:pandas.tests.io.sas.test_sas7bdat.t2->pandas.to_timedelta(df['Column12'], unit='d')
A:pandas.tests.io.sas.test_sas7bdat.df.iloc[:, k]->pandas.read_sas(fname, encoding='latin-1').iloc[:, k].astype(np.float64)
A:pandas.tests.io.sas.test_sas7bdat.byts->f.read()
A:pandas.tests.io.sas.test_sas7bdat.buf->io.BytesIO(byts)
A:pandas.tests.io.sas.test_sas7bdat.rdr->SAS7BDATReader(fname, convert_header_text=False)
A:pandas.tests.io.sas.test_sas7bdat.d1->SAS7BDATReader(fname, convert_header_text=False).read(rdr.row_count + 20)
A:pandas.tests.io.sas.test_sas7bdat.d2->SAS7BDATReader(fname, convert_header_text=False).read(rdr.row_count + 20)
A:pandas.tests.io.sas.test_sas7bdat.df1->pandas.read_sas(fname)
A:pandas.tests.io.sas.test_sas7bdat.df2->pandas.read_sas(fname, encoding='utf-8')
A:pandas.tests.io.sas.test_sas7bdat.df1[col]->df1[col].str.decode('utf-8').str.decode('utf-8')
A:pandas.tests.io.sas.test_sas7bdat.df3->SAS7BDATReader(fname, convert_header_text=False).read()
A:pandas.tests.io.sas.test_sas7bdat.df0->pandas.read_csv(fname, encoding='latin-1')
A:pandas.tests.io.sas.test_sas7bdat.df0[vn]->df0[vn].astype(np.float64).astype(np.float64)
A:pandas.tests.io.sas.test_sas7bdat.df.iloc[:, 3]->pandas.read_sas(fname, encoding='latin-1').iloc[:, 3].dt.round('us')
A:pandas.tests.io.sas.test_sas7bdat.expected->df['CYL'].round()
pandas.tests.io.sas.test_sas7bdat.TestSAS7BDAT
pandas.tests.io.sas.test_sas7bdat.TestSAS7BDAT.setup_method(self,datapath)
pandas.tests.io.sas.test_sas7bdat.TestSAS7BDAT.test_from_buffer(self)
pandas.tests.io.sas.test_sas7bdat.TestSAS7BDAT.test_from_file(self)
pandas.tests.io.sas.test_sas7bdat.TestSAS7BDAT.test_from_iterator(self)
pandas.tests.io.sas.test_sas7bdat.TestSAS7BDAT.test_iterator_loop(self)
pandas.tests.io.sas.test_sas7bdat.TestSAS7BDAT.test_iterator_read_too_much(self)
pandas.tests.io.sas.test_sas7bdat.TestSAS7BDAT.test_path_localpath(self)
pandas.tests.io.sas.test_sas7bdat.TestSAS7BDAT.test_path_pathlib(self)
pandas.tests.io.sas.test_sas7bdat.test_12659(datapath)
pandas.tests.io.sas.test_sas7bdat.test_airline(datapath)
pandas.tests.io.sas.test_sas7bdat.test_compact_numerical_values(datapath)
pandas.tests.io.sas.test_sas7bdat.test_date_time(datapath)
pandas.tests.io.sas.test_sas7bdat.test_encoding_options(datapath)
pandas.tests.io.sas.test_sas7bdat.test_inconsistent_number_of_rows(datapath)
pandas.tests.io.sas.test_sas7bdat.test_many_columns(datapath)
pandas.tests.io.sas.test_sas7bdat.test_productsales(datapath)
pandas.tests.io.sas.test_sas7bdat.test_zero_variables(datapath)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/sas/test_sas.py----------------------------------------
A:pandas.tests.io.sas.test_sas.b->StringIO('')
pandas.tests.io.sas.test_sas.TestSas
pandas.tests.io.sas.test_sas.TestSas.test_sas_buffer_format(self)
pandas.tests.io.sas.test_sas.TestSas.test_sas_read_no_format_or_extension(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/json/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/json/test_pandas.py----------------------------------------
A:pandas.tests.io.json.test_pandas._seriesd->pandas._testing.getSeriesData()
A:pandas.tests.io.json.test_pandas._tsd->pandas._testing.getTimeSeriesData()
A:pandas.tests.io.json.test_pandas._frame->DataFrame(_seriesd)
A:pandas.tests.io.json.test_pandas._frame2->DataFrame(_seriesd, columns=['D', 'C', 'B', 'A'])
A:pandas.tests.io.json.test_pandas._intframe->DataFrame({k: v.astype(np.int64) for (k, v) in _seriesd.items()})
A:pandas.tests.io.json.test_pandas._tsframe->DataFrame(_tsd)
A:pandas.tests.io.json.test_pandas._cat_frame->DataFrame(_seriesd).copy()
A:pandas.tests.io.json.test_pandas._cat_frame.index->pandas.CategoricalIndex(cat, name='E')
A:pandas.tests.io.json.test_pandas._cat_frame['E']->list(reversed(cat))
A:pandas.tests.io.json.test_pandas._cat_frame['sort']->numpy.arange(len(_cat_frame), dtype='int64')
A:pandas.tests.io.json.test_pandas._mixed_frame->DataFrame(_seriesd).copy()
A:pandas.tests.io.json.test_pandas.expected->DataFrame([1, 2, 3])
A:pandas.tests.io.json.test_pandas.expected.columns->DataFrame([1, 2, 3]).columns.astype(float)
A:pandas.tests.io.json.test_pandas.self.dirpath->datapath('io', 'json', 'data')
A:pandas.tests.io.json.test_pandas.self.ts->pandas._testing.makeTimeSeries()
A:pandas.tests.io.json.test_pandas.self.series->pandas._testing.makeStringSeries()
A:pandas.tests.io.json.test_pandas.self.objSeries->pandas._testing.makeObjectSeries()
A:pandas.tests.io.json.test_pandas.self.empty_series->Series([], index=[], dtype=np.float64)
A:pandas.tests.io.json.test_pandas.self.empty_frame->DataFrame()
A:pandas.tests.io.json.test_pandas.self.frame->DataFrame(_seriesd).copy()
A:pandas.tests.io.json.test_pandas.self.frame2->DataFrame(_seriesd, columns=['D', 'C', 'B', 'A']).copy()
A:pandas.tests.io.json.test_pandas.self.intframe->DataFrame({k: v.astype(np.int64) for (k, v) in _seriesd.items()}).copy()
A:pandas.tests.io.json.test_pandas.self.tsframe->DataFrame(_tsd).copy()
A:pandas.tests.io.json.test_pandas.self.mixed_frame->DataFrame(_seriesd).copy().copy()
A:pandas.tests.io.json.test_pandas.self.categorical->DataFrame(_seriesd).copy().copy()
A:pandas.tests.io.json.test_pandas.df->pandas.DataFrame([['foo', 'bar'], ['baz', 'qux']], columns=['a', 'b'])
A:pandas.tests.io.json.test_pandas.result->pandas.DataFrame([[nulls_fixture]]).to_json()
A:pandas.tests.io.json.test_pandas.data->pandas.Series(np.random.randn(10)).to_json()
A:pandas.tests.io.json.test_pandas.expected.index->DataFrame([1, 2, 3]).index.tz_localize('UTC')
A:pandas.tests.io.json.test_pandas.idx->idx.astype(str).astype(str)
A:pandas.tests.io.json.test_pandas.index->pandas.date_range('20000101', periods=10, freq='H')
A:pandas.tests.io.json.test_pandas.num_df->DataFrame([[1, 2], [4, 5, 6]])
A:pandas.tests.io.json.test_pandas.obj_df->DataFrame([['1', '2'], ['4', '5', '6']])
A:pandas.tests.io.json.test_pandas.encoded->pandas.DataFrame([['foo', 'bar'], ['baz', 'qux']], columns=['a', 'b']).to_json(double_precision=precision)
A:pandas.tests.io.json.test_pandas.df['joe']->df['joe'].astype('i8').astype('i8')
A:pandas.tests.io.json.test_pandas.right->pandas.DataFrame([['foo', 'bar'], ['baz', 'qux']], columns=['a', 'b']).copy()
A:pandas.tests.io.json.test_pandas.inp->pandas.DataFrame([['foo', 'bar'], ['baz', 'qux']], columns=['a', 'b']).to_json(orient='values')
A:pandas.tests.io.json.test_pandas.left->read_json(inp, orient='values', convert_axes=False)
A:pandas.tests.io.json.test_pandas.right.index->numpy.arange(len(df))
A:pandas.tests.io.json.test_pandas.right.columns->numpy.arange(df.shape[1])
A:pandas.tests.io.json.test_pandas.df['date']->Timestamp('20130101 20:43:42')
A:pandas.tests.io.json.test_pandas.df.iloc[3, df.columns.get_loc('date')]->pandas.Timestamp('20130101')
A:pandas.tests.io.json.test_pandas.v12_json->os.path.join(self.dirpath, 'tsframe_v012.json')
A:pandas.tests.io.json.test_pandas.df_unser->pandas.read_json(v12_json)
A:pandas.tests.io.json.test_pandas.df_iso->pandas.DataFrame([['foo', 'bar'], ['baz', 'qux']], columns=['a', 'b']).drop(['modified'], axis=1)
A:pandas.tests.io.json.test_pandas.v12_iso_json->os.path.join(self.dirpath, 'tsframe_iso_v012.json')
A:pandas.tests.io.json.test_pandas.df_unser_iso->pandas.read_json(v12_iso_json)
A:pandas.tests.io.json.test_pandas.df_mixed->DataFrame({'A': [binthing], 'B': [1]}, columns=['A', 'B'])
A:pandas.tests.io.json.test_pandas.df_mixed.columns->DataFrame({'A': [binthing], 'B': [1]}, columns=['A', 'B']).columns.astype('unicode')
A:pandas.tests.io.json.test_pandas.df_roundtrip->pandas.read_json(df_mixed.to_json(orient='split'), orient='split')
A:pandas.tests.io.json.test_pandas.self.binary->bytes.fromhex(hexed)
A:pandas.tests.io.json.test_pandas.binthing->BinaryThing(hexed)
A:pandas.tests.io.json.test_pandas.df_printable->DataFrame({'A': [binthing.hexed]})
A:pandas.tests.io.json.test_pandas.df_nonprintable->DataFrame({'A': [binthing]})
A:pandas.tests.io.json.test_pandas.s->pandas.Series(np.random.randn(10))
A:pandas.tests.io.json.test_pandas.unser->read_json(s.to_json(orient='records'), orient='records', typ='series')
A:pandas.tests.io.json.test_pandas.json->StringIO(json)
A:pandas.tests.io.json.test_pandas.expected['date']->expected['date'].dt.tz_localize('UTC').dt.tz_localize('UTC')
A:pandas.tests.io.json.test_pandas.expected['foo']->expected['foo'].astype('int64').astype('int64')
A:pandas.tests.io.json.test_pandas.ts->Series(Timestamp('20130101 20:43:42.123'), index=self.ts.index)
A:pandas.tests.io.json.test_pandas.ser->pandas.Series(data, index=data)
A:pandas.tests.io.json.test_pandas.dl->pandas.DataFrame([['foo', 'bar'], ['baz', 'qux']], columns=['a', 'b']).columns.get_loc('date')
A:pandas.tests.io.json.test_pandas.df.iloc[1, dl]->Timestamp('19710101 20:43:42')
A:pandas.tests.io.json.test_pandas.df.iloc[2, dl]->Timestamp('21460101 20:43:42')
A:pandas.tests.io.json.test_pandas.dfj2->DataFrame(np.random.randn(5, 2), columns=list('AB'))
A:pandas.tests.io.json.test_pandas.dfj2['date']->Timestamp('20130101')
A:pandas.tests.io.json.test_pandas.dfj2['ints']->range(5)
A:pandas.tests.io.json.test_pandas.dfj2.index->pandas.date_range('20130101', periods=5)
A:pandas.tests.io.json.test_pandas.frame->DataFrame({'a': [7, value]})
A:pandas.tests.io.json.test_pandas.result['a']->pandas.to_timedelta(result.a, unit='ns')
A:pandas.tests.io.json.test_pandas.result['c']->pandas.to_datetime(result.c)
A:pandas.tests.io.json.test_pandas.value->object()
A:pandas.tests.io.json.test_pandas.df['B']->df['A'].astype('category')
A:pandas.tests.io.json.test_pandas.tz_range->pandas.date_range('20130101', periods=3, tz='US/Eastern')
A:pandas.tests.io.json.test_pandas.tz_naive->pandas.date_range('20130101', periods=3, tz='US/Eastern').tz_convert('utc').tz_localize(None)
A:pandas.tests.io.json.test_pandas.df_naive->pandas.DataFrame([['foo', 'bar'], ['baz', 'qux']], columns=['a', 'b']).copy()
A:pandas.tests.io.json.test_pandas.stz->Series(tz_range)
A:pandas.tests.io.json.test_pandas.s_naive->Series(tz_naive)
A:pandas.tests.io.json.test_pandas.sdf->pandas.DataFrame([['foo', 'bar'], ['baz', 'qux']], columns=['a', 'b']).astype('Sparse')
A:pandas.tests.io.json.test_pandas.ss->pandas.Series(np.random.randn(10)).astype('Sparse')
A:pandas.tests.io.json.test_pandas.dt->Series(Timestamp('20130101 20:43:42.123'), index=self.ts.index).to_pydatetime()
A:pandas.tests.io.json.test_pandas.dti->pandas.DatetimeIndex(tz_range)
A:pandas.tests.io.json.test_pandas.retr->read_json(path, encoding=encoding)
A:pandas.tests.io.json.test_pandas.size_before->pandas.DataFrame([['foo', 'bar'], ['baz', 'qux']], columns=['a', 'b']).memory_usage(index=True, deep=True).sum()
A:pandas.tests.io.json.test_pandas.size_after->pandas.DataFrame([['foo', 'bar'], ['baz', 'qux']], columns=['a', 'b']).memory_usage(index=True, deep=True).sum()
A:pandas.tests.io.json.test_pandas.dfjson->DataFrame([1, 2, 3]).to_json(orient=orient, index=index)
pandas.tests.io.json.test_pandas.TestPandasContainer
pandas.tests.io.json.test_pandas.TestPandasContainer.setup(self,datapath)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_axis_dates(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_blocks_compat_GH9037(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_categorical(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_convert_dates(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_convert_dates_infer(self,infer_word)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_data_frame_size_after_to_json(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_date_format_frame(self,date,date_unit)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_date_format_frame_raises(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_date_format_series(self,date,date_unit)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_date_format_series_raises(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_date_index_and_values(self,date_format,as_object,date_typ)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_date_unit(self,unit)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_datetime_tz(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_default_handler(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_default_handler_indirect(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_default_handler_numpy_unsupported_dtype(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_default_handler_raises(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_deprecate_numpy_argument_read_json(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_doc_example(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_dt_tz(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_emca_262_nan_inf_support(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_default_orient(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_double_encoded_labels(self,orient)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_empty(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_empty_mixedtype(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_from_json_bad_data_raises(self,data,msg,orient)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_from_json_missing_data(self,orient,convert_axes,numpy,dtype)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_from_json_precise_float(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_infinity(self,orient,inf,dtype)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_mixedtype_orient(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_non_unique_columns(self,orient,data)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_non_unique_columns_raises(self,orient)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_non_unique_index(self,orient)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_non_unique_index_raises(self,orient)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_nonprintable_bytes(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_to_json_except(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_to_json_float_precision(self,value,precision,expected_val)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_from_json_to_json_table_dtypes(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_from_json_to_json_table_index_and_columns(self,index,columns)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_index_false_error_to_json(self,orient)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_index_false_from_json_to_json(self,orient,index)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_index_false_to_json_split(self,data,expected)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_index_false_to_json_table(self,data)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_json_indent_all_orients(self,orient,expected)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_json_negative_indent_raises(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_json_pandas_na(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_json_pandas_nulls(self,nulls_fixture)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_label_overflow(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_latin_encoding(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_misc_example(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_mixed_timedelta_datetime(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_mixed_timedelta_dt(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_path(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_read_inline_jsonl(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_read_json_large_numbers(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_read_json_table_convert_axes_raises(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_read_json_table_dtype_raises(self,dtype)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_read_jsonl_unicode_chars(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_read_local_jsonl(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_read_s3_jsonl(self,s3_resource)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_read_timezone_information(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_reconstruction_index(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_round_trip_exception_(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_roundtrip_categorical(self,orient,convert_axes,numpy)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_roundtrip_empty(self,orient,convert_axes,numpy)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_roundtrip_intframe(self,orient,convert_axes,numpy,dtype)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_roundtrip_mixed(self,orient,convert_axes,numpy)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_roundtrip_simple(self,orient,convert_axes,numpy,dtype)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_roundtrip_str_axes(self,orient,convert_axes,numpy,dtype)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_roundtrip_timestamp(self,orient,convert_axes,numpy)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_series_default_orient(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_series_from_json_precise_float(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_series_non_unique_index(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_series_roundtrip_empty(self,orient,numpy)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_series_roundtrip_numeric(self,orient,numpy,dtype)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_series_roundtrip_object(self,orient,numpy,dtype)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_series_roundtrip_simple(self,orient,numpy)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_series_roundtrip_timeseries(self,orient,numpy)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_series_to_json_except(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_series_with_dtype(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_series_with_dtype_datetime(self,dtype,expected)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_series_with_dtype_dt(self,dtype,expected)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_sparse(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_timedelta(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_timedelta_as_label(self,date_format,key)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_to_json_indent(self,indent)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_to_jsonl(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_tuple_labels(self,orient,expected)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_typ(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_tz_is_utc(self,ts)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_tz_range_is_utc(self,tz_range)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_url(self,field,dtype)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_v12_compat(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_weird_nested_json(self)
pandas.tests.io.json.test_pandas.assert_json_roundtrip_equal(result,expected,orient)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/json/test_ujson.py----------------------------------------
A:pandas.tests.io.json.test_ujson.sut->decimal.Decimal('0.99999999999999944')
A:pandas.tests.io.json.test_ujson.encoded->pandas._libs.json.encode(rng, date_unit=date_unit)
A:pandas.tests.io.json.test_ujson.decoded->Series(ujson.decode(ujson.encode(ts, date_unit=date_unit)))
A:pandas.tests.io.json.test_ujson.output->Index(ujson.decode(ujson.encode(i, orient='index'), numpy=True), name='index')
A:pandas.tests.io.json.test_ujson.nested_input->numpy.array(nested_input)
A:pandas.tests.io.json.test_ujson.rounded_input->round(double_input, double_precision)
A:pandas.tests.io.json.test_ujson.enc->pandas._libs.json.encode(s)
A:pandas.tests.io.json.test_ujson.dec->pandas._libs.json.decode(enc)
A:pandas.tests.io.json.test_ujson.datetime_input->datetime.datetime.fromtimestamp(time.time())
A:pandas.tests.io.json.test_ujson.expected->calendar.timegm(tup)
A:pandas.tests.io.json.test_ujson.date_input->datetime.date.fromtimestamp(time.time())
A:pandas.tests.io.json.test_ujson.test->datetime.time(10, 12, 15, 343243, dateutil.tz.tzutc())
A:pandas.tests.io.json.test_ujson.val->datetime.datetime(2013, 8, 17, 21, 17, 12, 215504)
A:pandas.tests.io.json.test_ujson.stamp->Timestamp(val)
A:pandas.tests.io.json.test_ujson.roundtrip->pandas._libs.json.decode(ujson.encode(val, date_unit='ns'))
A:pandas.tests.io.json.test_ujson.dec1->pandas._libs.json.decode(unicode_input)
A:pandas.tests.io.json.test_ujson.dec2->pandas._libs.json.decode(str(unicode_input))
A:pandas.tests.io.json.test_ujson.decoded_input->O1()
A:pandas.tests.io.json.test_ujson.decoded_input.member->O2()
A:pandas.tests.io.json.test_ujson.base->'å'.encode('utf-8')
A:pandas.tests.io.json.test_ujson.o->DictTest()
A:pandas.tests.io.json.test_ujson.b->numpy.bool(bool_input)
A:pandas.tests.io.json.test_ujson.bool_array->numpy.array([True, False, True, True, False, True, False, False], dtype=np.bool)
A:pandas.tests.io.json.test_ujson.num->klass(np.finfo(float_dtype).max / 10)
A:pandas.tests.io.json.test_ujson.arr->arr.reshape((5, 5, 4)).reshape((5, 5, 4))
A:pandas.tests.io.json.test_ujson.arr_input->arr.reshape((5, 5, 4)).reshape((5, 5, 4)).astype(any_int_dtype)
A:pandas.tests.io.json.test_ujson.arr_output->numpy.array(ujson.decode(ujson.encode(arr_input)), dtype=any_int_dtype)
A:pandas.tests.io.json.test_ujson.float_input->arr.reshape((5, 5, 4)).reshape((5, 5, 4)).astype(float_dtype)
A:pandas.tests.io.json.test_ujson.float_output->numpy.array(ujson.decode(ujson.encode(float_input, double_precision=15)), dtype=float_dtype)
A:pandas.tests.io.json.test_ujson.result->numpy.array(ujson.decode(ujson.encode(arr)), dtype=object)
A:pandas.tests.io.json.test_ujson.arr_out->pandas._libs.json.decode(ujson.encode(arr), numpy=True, dtype=dtype)
A:pandas.tests.io.json.test_ujson.msg->re.escape('array(1) (0d array) is not JSON serializable at the moment')
A:pandas.tests.io.json.test_ujson.expected_vals->numpy.array([42, 31, 24, 99, 2.4, 78], dtype=int).reshape((3, 2))
A:pandas.tests.io.json.test_ujson.df->DataFrame([[1, 2, 3], [4, 5, 6]], index=['a', 'b'], columns=['x', 'y', 'z'], dtype=np.int)
A:pandas.tests.io.json.test_ujson.s->set()
A:pandas.tests.io.json.test_ujson.i->Index([23, 45, 18, 98, 43, 11], name='index')
A:pandas.tests.io.json.test_ujson.rng->date_range('1/1/2000', periods=20)
A:pandas.tests.io.json.test_ujson.ts->Series(np.random.randn(len(rng)), index=rng)
A:pandas.tests.io.json.test_ujson.idx_values->Series(ujson.decode(ujson.encode(ts, date_unit=date_unit))).index.values.astype(np.int64)
A:pandas.tests.io.json.test_ujson.decoded.index->DatetimeIndex(idx_values)
pandas.tests.io.json.test_ujson.TestNumpyJSONTests
pandas.tests.io.json.test_ujson.TestNumpyJSONTests.test_0d_array(self)
pandas.tests.io.json.test_ujson.TestNumpyJSONTests.test_array_basic(self)
pandas.tests.io.json.test_ujson.TestNumpyJSONTests.test_array_float(self)
pandas.tests.io.json.test_ujson.TestNumpyJSONTests.test_array_list(self)
pandas.tests.io.json.test_ujson.TestNumpyJSONTests.test_array_numpy_except(self,bad_input,exc_type,kwargs)
pandas.tests.io.json.test_ujson.TestNumpyJSONTests.test_array_numpy_labelled(self)
pandas.tests.io.json.test_ujson.TestNumpyJSONTests.test_array_reshaped(self,shape)
pandas.tests.io.json.test_ujson.TestNumpyJSONTests.test_bool(self,bool_input)
pandas.tests.io.json.test_ujson.TestNumpyJSONTests.test_bool_array(self)
pandas.tests.io.json.test_ujson.TestNumpyJSONTests.test_float(self,float_dtype)
pandas.tests.io.json.test_ujson.TestNumpyJSONTests.test_float_array(self,float_dtype)
pandas.tests.io.json.test_ujson.TestNumpyJSONTests.test_float_max(self,float_dtype)
pandas.tests.io.json.test_ujson.TestNumpyJSONTests.test_int(self,any_int_dtype)
pandas.tests.io.json.test_ujson.TestNumpyJSONTests.test_int_array(self,any_int_dtype)
pandas.tests.io.json.test_ujson.TestNumpyJSONTests.test_int_max(self,any_int_dtype)
pandas.tests.io.json.test_ujson.TestPandasJSONTests
pandas.tests.io.json.test_ujson.TestPandasJSONTests.test_dataframe(self,orient,numpy)
pandas.tests.io.json.test_ujson.TestPandasJSONTests.test_dataframe_nested(self,orient)
pandas.tests.io.json.test_ujson.TestPandasJSONTests.test_dataframe_numpy_labelled(self,orient)
pandas.tests.io.json.test_ujson.TestPandasJSONTests.test_datetime_index(self)
pandas.tests.io.json.test_ujson.TestPandasJSONTests.test_decode_array(self,arr)
pandas.tests.io.json.test_ujson.TestPandasJSONTests.test_decode_array_with_big_int(self)
pandas.tests.io.json.test_ujson.TestPandasJSONTests.test_decode_extreme_numbers(self,extreme_num)
pandas.tests.io.json.test_ujson.TestPandasJSONTests.test_decode_floating_point(self,sign,float_number)
pandas.tests.io.json.test_ujson.TestPandasJSONTests.test_decode_invalid_array(self,invalid_arr)
pandas.tests.io.json.test_ujson.TestPandasJSONTests.test_decode_too_extreme_numbers(self,too_extreme_num)
pandas.tests.io.json.test_ujson.TestPandasJSONTests.test_decode_with_trailing_non_whitespaces(self)
pandas.tests.io.json.test_ujson.TestPandasJSONTests.test_decode_with_trailing_whitespaces(self)
pandas.tests.io.json.test_ujson.TestPandasJSONTests.test_dt_index(self)
pandas.tests.io.json.test_ujson.TestPandasJSONTests.test_encode_big_set(self)
pandas.tests.io.json.test_ujson.TestPandasJSONTests.test_encode_empty_set(self)
pandas.tests.io.json.test_ujson.TestPandasJSONTests.test_encode_set(self)
pandas.tests.io.json.test_ujson.TestPandasJSONTests.test_index(self)
pandas.tests.io.json.test_ujson.TestPandasJSONTests.test_series(self,orient,numpy)
pandas.tests.io.json.test_ujson.TestPandasJSONTests.test_series_nested(self,orient)
pandas.tests.io.json.test_ujson.TestUltraJSONTests
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_datetime_units(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_decimal_decode_test_precise(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_decode_bad_string(self,bad_string)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_decode_big_escape(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_decode_broken_json(self,broken_json)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_decode_broken_json_leak(self,broken_json)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_decode_depth_too_big(self,too_big_char)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_decode_from_unicode(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_decode_invalid_dict(self,invalid_dict)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_decode_jibberish(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_decode_null_character(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_decode_number_with_32bit_sign_bit(self,val)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_decode_numeric_int(self,numeric_int_as_str)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_decode_numeric_int_exp(self,int_exp)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_default_handler(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_double_long_numbers(self,long_number)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_double_precision(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_dt_units(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_array_in_array(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_array_of_doubles(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_array_of_nested_arrays(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_as_null(self,decoded_input)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_big_escape(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_builtin_values_conversion(self,builtin_value)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_control_escaping(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_date_conversion(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_datetime_conversion(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_decimal(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_dict_conversion(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_dict_with_unicode_keys(self,unicode_key)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_double_conversion(self,double_input)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_double_tiny_exponential(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_dt_conversion(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_list_conversion(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_list_long_conversion(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_long_conversion(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_non_c_locale(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_null_character(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_num_conversion(self,num_input)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_numeric_overflow(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_numeric_overflow_nested(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_recursion_max(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_string_conversion(self,ensure_ascii)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_string_conversion2(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_time_conversion_basic(self,test)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_time_conversion_dateutil(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_time_conversion_pytz(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_to_utf8(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_unicode_4bytes_utf8(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_unicode_4bytes_utf8highest(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_unicode_conversion(self,unicode_input)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_unicode_surrogate_pair(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_encode_with_decimal(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_invalid_double_precision(self,invalid_val)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_loads_non_str_bytes_raises(self)
pandas.tests.io.json.test_ujson.TestUltraJSONTests.test_to_dict(self)
pandas.tests.io.json.test_ujson._clean_dict(d)
pandas.tests.io.json.test_ujson.numpy(request)
pandas.tests.io.json.test_ujson.orient(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/json/test_normalize.py----------------------------------------
A:pandas.tests.io.json.test_normalize.result->nested_to_record(data)
A:pandas.tests.io.json.test_normalize.expected->DataFrame(ex_data, columns=columns)
A:pandas.tests.io.json.test_normalize.expected['state']->numpy.array(['Florida', 'Ohio']).repeat([3, 2])
A:pandas.tests.io.json.test_normalize.testjson->(b'[{"\xc3\x9cnic\xc3\xb8de":0,"sub":{"A":1, "B":2}},' + b'{"\xc3\x9cnic\xc3\xb8de":1,"sub":{"A":3, "B":4}}]').decode('utf8')
A:pandas.tests.io.json.test_normalize.expected_df->DataFrame(data=expected, columns=result.columns.values)
A:pandas.tests.io.json.test_normalize.df1->json_normalize([{'A': {'B': 1}}])
A:pandas.tests.io.json.test_normalize.df2->json_normalize({'dummy': [{'A': {'B': 1}}]}, 'dummy')
A:pandas.tests.io.json.test_normalize.data->dict(flat1=1, dict1=dict(c=1, d=2), nested=dict(e=dict(c=1, d=2), d=2))
A:pandas.tests.io.json.test_normalize.output->nested_to_record(input_data, max_level=max_level)
pandas.tests.io.json.test_normalize.TestJSONNormalize
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_empty_array(self)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_max_level_with_records_path(self,max_level,expected)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_meta_name_conflict(self)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_meta_non_iterable(self)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_meta_parameter_not_modified(self)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_missing_field(self,author_missing_data)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_more_deeply_nested(self,deep_nested)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_nested_flattening_consistent(self)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_nested_object_record_path(self)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_non_ascii_key(self)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_non_interable_record_path_errors(self)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_nonetype_record_path(self,nulls_fixture)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_record_prefix(self,state_data)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_shallow_nested(self)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_simple_normalize(self,state_data)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_simple_normalize_with_separator(self,deep_nested)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_simple_records(self)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_value_array_record_prefix(self)
pandas.tests.io.json.test_normalize.TestNestedToRecord
pandas.tests.io.json.test_normalize.TestNestedToRecord.test_deprecated_import(self)
pandas.tests.io.json.test_normalize.TestNestedToRecord.test_donot_drop_nonevalues(self)
pandas.tests.io.json.test_normalize.TestNestedToRecord.test_flat_stays_flat(self)
pandas.tests.io.json.test_normalize.TestNestedToRecord.test_json_normalize_errors(self,missing_metadata)
pandas.tests.io.json.test_normalize.TestNestedToRecord.test_missing_meta(self,missing_metadata)
pandas.tests.io.json.test_normalize.TestNestedToRecord.test_nested_flattens(self)
pandas.tests.io.json.test_normalize.TestNestedToRecord.test_nonetype_multiple_levels(self)
pandas.tests.io.json.test_normalize.TestNestedToRecord.test_nonetype_top_level_bottom_level(self)
pandas.tests.io.json.test_normalize.TestNestedToRecord.test_one_level_deep_flattens(self)
pandas.tests.io.json.test_normalize.TestNestedToRecord.test_with_large_max_level(self)
pandas.tests.io.json.test_normalize.TestNestedToRecord.test_with_max_level(self,max_level,expected,max_level_test_input_data)
pandas.tests.io.json.test_normalize.author_missing_data()
pandas.tests.io.json.test_normalize.deep_nested()
pandas.tests.io.json.test_normalize.max_level_test_input_data()
pandas.tests.io.json.test_normalize.missing_metadata()
pandas.tests.io.json.test_normalize.state_data()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/json/test_json_table_schema.py----------------------------------------
A:pandas.tests.io.json.test_json_table_schema.self.df->DataFrame({'A': [1, 2, 3, 4], 'B': ['a', 'b', 'c', 'c'], 'C': pd.date_range('2016-01-01', freq='d', periods=4), 'D': pd.timedelta_range('1H', periods=4, freq='T'), 'E': pd.Series(pd.Categorical(['a', 'b', 'c', 'c'])), 'F': pd.Series(pd.Categorical(['a', 'b', 'c', 'c'], ordered=True)), 'G': [1.0, 2.0, 3, 4.0], 'H': pd.date_range('2016-01-01', freq='d', periods=4, tz='US/Central')}, index=pd.Index(range(4), name='idx'))
A:pandas.tests.io.json.test_json_table_schema.result->pandas.read_json(out, orient='table')
A:pandas.tests.io.json.test_json_table_schema.s->pandas.Series(pd.Categorical(['a', 'b', 'a']))
A:pandas.tests.io.json.test_json_table_schema.df->pandas.DataFrame(columns=['a', 'b', 'c'])
A:pandas.tests.io.json.test_json_table_schema.idx->pandas.period_range('2016', freq='Q-JAN', periods=2)
A:pandas.tests.io.json.test_json_table_schema.expected->pandas.DataFrame(columns=['a', 'b', 'c']).copy()
A:pandas.tests.io.json.test_json_table_schema.data->pandas.Series(1, idx)
A:pandas.tests.io.json.test_json_table_schema.arr->kind(data, ordered=ordered, name='cats')
A:pandas.tests.io.json.test_json_table_schema.js->json.loads(result)
A:pandas.tests.io.json.test_json_table_schema.out->pandas.DataFrame(columns=['a', 'b', 'c']).to_json(orient='table')
pandas.tests.io.json.test_json_table_schema.TestBuildSchema
pandas.tests.io.json.test_json_table_schema.TestBuildSchema.setup_method(self,method)
pandas.tests.io.json.test_json_table_schema.TestBuildSchema.test_build_table_schema(self)
pandas.tests.io.json.test_json_table_schema.TestBuildSchema.test_multiindex(self)
pandas.tests.io.json.test_json_table_schema.TestBuildSchema.test_series(self)
pandas.tests.io.json.test_json_table_schema.TestBuildSchema.test_series_unnamed(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient
pandas.tests.io.json.test_json_table_schema.TestTableOrient.setup_method(self,method)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_build_series(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_categorical(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_convert_json_field_to_pandas_type(self,inp,exp)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_convert_json_field_to_pandas_type_raises(self,inp)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_convert_pandas_type_to_json_field_categorical(self,kind,ordered)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_convert_pandas_type_to_json_field_datetime(self,dt_args,extra_exp,wrapper)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_convert_pandas_type_to_json_field_dt(self,dt_args,extra_exp,wrapper)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_convert_pandas_type_to_json_field_float(self,index_or_series)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_convert_pandas_type_to_json_field_int(self,index_or_series)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_convert_pandas_type_to_json_period_range(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_date_format_raises(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_mi_falsey_name(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_overlapping_names(self,case)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_set_names_unset(self,idx,nm,prop)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_timestamp_in_columns(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_to_json(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_to_json_categorical_index(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_to_json_float_index(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_to_json_period_index(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_warns_non_roundtrippable_names(self,idx)
pandas.tests.io.json.test_json_table_schema.TestTableOrientReader
pandas.tests.io.json.test_json_table_schema.TestTableOrientReader.test_comprehensive(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrientReader.test_empty_frame_roundtrip(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrientReader.test_multiindex(self,index_names)
pandas.tests.io.json.test_json_table_schema.TestTableOrientReader.test_read_json_table_orient(self,index_nm,vals,recwarn)
pandas.tests.io.json.test_json_table_schema.TestTableOrientReader.test_read_json_table_orient_raises(self,index_nm,vals,recwarn)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_bool_data(self,bool_type)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_bool_dtypes(self,bool_dtype)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_categorical_data(self,cat_data)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_categorical_dtypes(self)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_date_data(self,date_data)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_date_dtypes(self,date_dtype)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_float_data(self,float_type)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_float_dtypes(self,float_dtype)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_int_data(self,int_type)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_int_dtypes(self,int_dtype)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_string_data(self,str_data)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_string_dtypes(self,str_dtype)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_timedelta_dtypes(self,td_dtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/json/test_compression.py----------------------------------------
A:pandas.tests.io.json.test_compression.df->pandas.DataFrame({'A': [1]})
A:pandas.tests.io.json.test_compression.result->pandas.read_json(path, compression=read_compression)
A:pandas.tests.io.json.test_compression.uncompressed_path->datapath('io', 'json', 'data', 'tsframe_v012.json')
A:pandas.tests.io.json.test_compression.uncompressed_df->pandas.read_json(uncompressed_path)
A:pandas.tests.io.json.test_compression.compressed_path->datapath('io', 'json', 'data', 'tsframe_v012.json.zip')
A:pandas.tests.io.json.test_compression.compressed_df->pandas.read_json(compressed_path, compression='zip')
A:pandas.tests.io.json.test_compression.roundtripped_df->pandas.concat(res)
A:pandas.tests.io.json.test_compression.res->pandas.read_json(path, lines=True, chunksize=1, compression=compression)
pandas.tests.io.json.test_compression.test_chunksize_with_compression(compression)
pandas.tests.io.json.test_compression.test_compression_roundtrip(compression)
pandas.tests.io.json.test_compression.test_lines_with_compression(compression)
pandas.tests.io.json.test_compression.test_read_unsupported_compression_type()
pandas.tests.io.json.test_compression.test_read_zipped_json(datapath)
pandas.tests.io.json.test_compression.test_to_json_compression(compression_only,read_infer,to_infer)
pandas.tests.io.json.test_compression.test_with_s3_url(compression,s3_resource)
pandas.tests.io.json.test_compression.test_write_unsupported_compression_type()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/json/conftest.py----------------------------------------
pandas.tests.io.json.conftest.orient(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/io/json/test_readlines.py----------------------------------------
A:pandas.tests.io.json.test_readlines.df->pandas.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
A:pandas.tests.io.json.test_readlines.result->read_json(path)
A:pandas.tests.io.json.test_readlines.expected->pandas.DataFrame({'£©µÀÆÖÞßéöÿ': ['АБВГДабвгд가']})
A:pandas.tests.io.json.test_readlines.json->StringIO(json)
A:pandas.tests.io.json.test_readlines.unchunked->pandas.read_json(path, lines=True)
A:pandas.tests.io.json.test_readlines.reader->JsonReader(path, orient=None, typ='frame', dtype=True, convert_axes=True, convert_dates=True, keep_default_dates=True, numpy=False, precise_float=False, date_unit=None, encoding=None, lines=True, chunksize=chunksize, compression=None)
A:pandas.tests.io.json.test_readlines.chunked->pandas.concat(pd.read_json(path, lines=True, chunksize=1))
A:pandas.tests.io.json.test_readlines.s->pandas.Series({'A': 1, 'B': 2})
A:pandas.tests.io.json.test_readlines.strio->StringIO(s.to_json(lines=True, orient='records'))
A:pandas.tests.io.json.test_readlines.chunks->list(pd.read_json(StringIO(lines_json_df), lines=True, chunksize=2))
A:pandas.tests.io.json.test_readlines.orig->pandas.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
A:pandas.tests.io.json.test_readlines.test->pandas.concat(test)
pandas.tests.io.json.test_readlines.lines_json_df()
pandas.tests.io.json.test_readlines.test_read_jsonl()
pandas.tests.io.json.test_readlines.test_read_jsonl_unicode_chars()
pandas.tests.io.json.test_readlines.test_readjson_chunks(lines_json_df,chunksize)
pandas.tests.io.json.test_readlines.test_readjson_chunks_closes(chunksize)
pandas.tests.io.json.test_readlines.test_readjson_chunks_from_file()
pandas.tests.io.json.test_readlines.test_readjson_chunks_multiple_empty_lines(chunksize)
pandas.tests.io.json.test_readlines.test_readjson_chunks_series()
pandas.tests.io.json.test_readlines.test_readjson_chunksize_requires_lines(lines_json_df)
pandas.tests.io.json.test_readlines.test_readjson_each_chunk(lines_json_df)
pandas.tests.io.json.test_readlines.test_readjson_invalid_chunksize(lines_json_df,chunksize)
pandas.tests.io.json.test_readlines.test_readjson_unicode(monkeypatch)
pandas.tests.io.json.test_readlines.test_to_jsonl()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tseries/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tseries/offsets/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tseries/offsets/test_offsets_properties.py----------------------------------------
A:pandas.tests.tseries.offsets.test_offsets_properties.min_dt->Timestamp(1900, 1, 1).to_pydatetime()
A:pandas.tests.tseries.offsets.test_offsets_properties.max_dt->Timestamp(1900, 1, 1).to_pydatetime()
A:pandas.tests.tseries.offsets.test_offsets_properties.gen_date_range->hypothesis.strategies.builds(pd.date_range, start=st.datetimes(min_value=Timestamp(1900, 1, 1).to_pydatetime(), max_value=Timestamp(2100, 1, 1).to_pydatetime()), periods=st.integers(min_value=2, max_value=100), freq=st.sampled_from('Y Q M D H T s ms us ns'.split()), tz=st.one_of(st.none(), dateutil_timezones(), pytz_timezones()))
A:pandas.tests.tseries.offsets.test_offsets_properties.gen_random_datetime->hypothesis.strategies.datetimes(min_value=min_dt, max_value=max_dt, timezones=st.one_of(st.none(), dateutil_timezones(), pytz_timezones()))
A:pandas.tests.tseries.offsets.test_offsets_properties.gen_yqm_offset->hypothesis.strategies.one_of(*map(st.from_type, [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd]))
A:pandas.tests.tseries.offsets.test_offsets_properties.ser->pandas.Series(rng)
A:pandas.tests.tseries.offsets.test_offsets_properties.res_v2->offset.apply_index(rng)
A:pandas.tests.tseries.offsets.test_offsets_properties.dti->pandas.date_range(start='2017-10-30 12:00:00', end='2017-11-06', freq='D', tz='US/Eastern')
pandas.tests.offsets.test_offsets_properties.test_apply_index_implementations(offset,rng)
pandas.tests.offsets.test_offsets_properties.test_on_offset_implementations(dt,offset)
pandas.tests.offsets.test_offsets_properties.test_shift_across_dst(offset)
pandas.tests.tseries.offsets.test_offsets_properties.test_apply_index_implementations(offset,rng)
pandas.tests.tseries.offsets.test_offsets_properties.test_on_offset_implementations(dt,offset)
pandas.tests.tseries.offsets.test_offsets_properties.test_shift_across_dst(offset)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tseries/offsets/test_offsets.py----------------------------------------
A:pandas.tests.tseries.offsets.test_offsets.d->Timestamp(datetime(2008, 1, 2))
A:pandas.tests.tseries.offsets.test_offsets.klass->klass(value, normalize=normalize)
A:pandas.tests.tseries.offsets.test_offsets.offset->Week(weekday=1)
A:pandas.tests.tseries.offsets.test_offsets.t->Timestamp('20080101', tz=tz)
A:pandas.tests.tseries.offsets.test_offsets.offset1->_offset()
A:pandas.tests.tseries.offsets.test_offsets.offset2->_offset(2)
A:pandas.tests.tseries.offsets.test_offsets.off->BDay(1, offset=timedelta(0, -1800))
A:pandas.tests.tseries.offsets.test_offsets.td64->numpy.timedelta64(4567, 's')
A:pandas.tests.tseries.offsets.test_offsets.expected->Timestamp('2014-07-01 13:00')
A:pandas.tests.tseries.offsets.test_offsets.code->_get_offset(freqstr)
A:pandas.tests.tseries.offsets.test_offsets.offset_s->self._get_offset(offset_types)
A:pandas.tests.tseries.offsets.test_offsets.func->getattr(offset_s, funcname)
A:pandas.tests.tseries.offsets.test_offsets.result->Week(weekday=1).apply_index(s)
A:pandas.tests.tseries.offsets.test_offsets.expected_localize->Timestamp('2014-07-01 13:00').tz_localize(tz)
A:pandas.tests.tseries.offsets.test_offsets.tz_obj->pandas._libs.tslibs.timezones.maybe_get_tz(tz)
A:pandas.tests.tseries.offsets.test_offsets.dt_tz->pandas._libs.tslibs.conversion.localize_pydatetime(dt, tz_obj)
A:pandas.tests.tseries.offsets.test_offsets.sdt->datetime(2011, 1, 1, 9, 0)
A:pandas.tests.tseries.offsets.test_offsets.ndt->np_datetime64_compat('2011-01-01 09:00Z')
A:pandas.tests.tseries.offsets.test_offsets.expecteds->self.expecteds.copy()
A:pandas.tests.tseries.offsets.test_offsets.expecteds[n]->Timestamp('2011/01/01 09:00')
A:pandas.tests.tseries.offsets.test_offsets.expecteds['BusinessHour']->Timestamp('2011-01-03 09:00:00')
A:pandas.tests.tseries.offsets.test_offsets.expecteds['CustomBusinessHour']->Timestamp('2011-01-03 09:00:00')
A:pandas.tests.tseries.offsets.test_offsets.norm_expected->self.expecteds.copy().copy()
A:pandas.tests.tseries.offsets.test_offsets.norm_expected[k]->Timestamp(norm_expected[k].date())
A:pandas.tests.tseries.offsets.test_offsets.offset_n->self._get_offset(offset_types, normalize=True)
A:pandas.tests.tseries.offsets.test_offsets.date->datetime(2008, 1, day)
A:pandas.tests.tseries.offsets.test_offsets.dt->datetime(2012, 1, 1)
A:pandas.tests.tseries.offsets.test_offsets.dti->DatetimeIndex([], tz=tz_naive_fixture)
A:pandas.tests.tseries.offsets.test_offsets.pickle_path->datapath('tseries', 'offsets', 'data', 'dateoffset_0_15_2.pickle')
A:pandas.tests.tseries.offsets.test_offsets.ts->Timestamp('2005-08-27 05:01:42.799392561-0500', tz='America/Rainy_River')
A:pandas.tests.tseries.offsets.test_offsets.self.d->datetime(2008, 1, 1)
A:pandas.tests.tseries.offsets.test_offsets.self.offset->self._offset()
A:pandas.tests.tseries.offsets.test_offsets.self.offset2->self._offset(2)
A:pandas.tests.tseries.offsets.test_offsets.xp->datetime(2012, 6, 1)
A:pandas.tests.tseries.offsets.test_offsets.st->datetime(2011, 12, 18)
A:pandas.tests.tseries.offsets.test_offsets.self.offset1->CustomBusinessHour(weekmask='Tue Wed Thu Fri')
A:pandas.tests.tseries.offsets.test_offsets.self.offset3->BusinessHour(n=-1)
A:pandas.tests.tseries.offsets.test_offsets.self.offset4->BusinessHour(n=-4)
A:pandas.tests.tseries.offsets.test_offsets.self.offset5->BusinessHour(start=dt_time(11, 0), end=dt_time(14, 30))
A:pandas.tests.tseries.offsets.test_offsets.self.offset6->BusinessHour(start='20:00', end='05:00')
A:pandas.tests.tseries.offsets.test_offsets.self.offset7->BusinessHour(n=-2, start=dt_time(21, 30), end=dt_time(6, 30))
A:pandas.tests.tseries.offsets.test_offsets.self.offset8->BusinessHour(start=['09:00', '13:00'], end=['12:00', '17:00'])
A:pandas.tests.tseries.offsets.test_offsets.self.offset9->BusinessHour(n=3, start=['09:00', '22:00'], end=['13:00', '03:00'])
A:pandas.tests.tseries.offsets.test_offsets.self.offset10->BusinessHour(n=-1, start=['23:00', '13:00'], end=['02:00', '17:00'])
A:pandas.tests.tseries.offsets.test_offsets.idx1->date_range(start='2014-07-04 15:45', end='2014-07-08 10:45', freq='BH')
A:pandas.tests.tseries.offsets.test_offsets.idx2->date_range(start='2014-07-04 15:45', periods=12, freq='BH')
A:pandas.tests.tseries.offsets.test_offsets.idx3->date_range(end='2014-07-08 10:45', periods=12, freq='BH')
A:pandas.tests.tseries.offsets.test_offsets.self.nd->np_datetime64_compat('2008-01-01 00:00:00Z')
A:pandas.tests.tseries.offsets.test_offsets.tday->CDay(holidays=holidays)
A:pandas.tests.tseries.offsets.test_offsets.bday_saudi->CDay(weekmask=weekmask_saudi)
A:pandas.tests.tseries.offsets.test_offsets.bday_uae->CDay(weekmask=weekmask_uae)
A:pandas.tests.tseries.offsets.test_offsets.bday_egypt->CDay(holidays=holidays, weekmask=weekmask_egypt)
A:pandas.tests.tseries.offsets.test_offsets.xp_saudi->datetime(2013, 5, 4)
A:pandas.tests.tseries.offsets.test_offsets.xp_uae->datetime(2013, 5, 2)
A:pandas.tests.tseries.offsets.test_offsets.xp_egypt->datetime(2013, 5, 5)
A:pandas.tests.tseries.offsets.test_offsets.xp2->datetime(2013, 5, 5)
A:pandas.tests.tseries.offsets.test_offsets.calendar->USFederalHolidayCalendar()
A:pandas.tests.tseries.offsets.test_offsets.unpickled->pandas._testing.round_trip_pickle(obj)
A:pandas.tests.tseries.offsets.test_offsets.pth->datapath('tseries', 'offsets', 'data', 'cday-0.14.1.pickle')
A:pandas.tests.tseries.offsets.test_offsets.cday0_14_1->read_pickle(pth)
A:pandas.tests.tseries.offsets.test_offsets.cday->CDay(holidays=hdays)
A:pandas.tests.tseries.offsets.test_offsets.bm_offset->CBMonthBegin(holidays=holidays)
A:pandas.tests.tseries.offsets.test_offsets.hcal->USFederalHolidayCalendar()
A:pandas.tests.tseries.offsets.test_offsets.freq->CBMonthEnd(calendar=hcal)
A:pandas.tests.tseries.offsets.test_offsets.cbmb->CBMonthBegin(calendar=hcal)
A:pandas.tests.tseries.offsets.test_offsets.date1->datetime(2011, 1, 4)
A:pandas.tests.tseries.offsets.test_offsets.date2->datetime(2011, 1, 11)
A:pandas.tests.tseries.offsets.test_offsets.date3->datetime(2011, 1, 18)
A:pandas.tests.tseries.offsets.test_offsets.date4->datetime(2011, 1, 25)
A:pandas.tests.tseries.offsets.test_offsets.last_sat->datetime(2013, 8, 31)
A:pandas.tests.tseries.offsets.test_offsets.next_sat->datetime(2013, 9, 28)
A:pandas.tests.tseries.offsets.test_offsets.offset_sat->LastWeekOfMonth(n=1, weekday=5)
A:pandas.tests.tseries.offsets.test_offsets.offset_thur->LastWeekOfMonth(n=1, weekday=3)
A:pandas.tests.tseries.offsets.test_offsets.last_thurs->datetime(2013, 1, 31)
A:pandas.tests.tseries.offsets.test_offsets.next_thurs->datetime(2013, 2, 28)
A:pandas.tests.tseries.offsets.test_offsets.offset_sunday->LastWeekOfMonth(n=1, weekday=WeekDay.SUN)
A:pandas.tests.tseries.offsets.test_offsets.s->klass([Timestamp('2000-01-01 00:15:00', tz='US/Central'), Timestamp('2000-02-01', tz='US/Central')], name='a')
A:pandas.tests.tseries.offsets.test_offsets.exp->klass([Timestamp('2000-01-15 00:15:00', tz='US/Central'), Timestamp('2000-02-15', tz='US/Central')], name='a')
A:pandas.tests.tseries.offsets.test_offsets.alias->'-'.join([base, v])
A:pandas.tests.tseries.offsets.test_offsets.(code, stride)->get_freq_code('3' + k)
A:pandas.tests.tseries.offsets.test_offsets.oset->pandas.tseries.offsets.DateOffset(months=2, days=4)
A:pandas.tests.tseries.offsets.test_offsets.o->Timestamp('2005-08-27 05:01:42.799392561-0500', tz='America/Rainy_River').utcoffset()
A:pandas.tests.tseries.offsets.test_offsets.datepart_offset->getattr(t, offset_name if offset_name != 'weekday' else 'dayofweek')
A:pandas.tests.tseries.offsets.test_offsets.offset_classes->{MonthBegin: ['11/2/2012', '12/1/2012'], MonthEnd: ['11/2/2012', '11/30/2012'], BMonthBegin: ['11/2/2012', '12/3/2012'], BMonthEnd: ['11/2/2012', '11/30/2012'], CBMonthBegin: ['11/2/2012', '12/3/2012'], CBMonthEnd: ['11/2/2012', '11/30/2012'], SemiMonthBegin: ['11/2/2012', '11/15/2012'], SemiMonthEnd: ['11/2/2012', '11/15/2012'], Week: ['11/2/2012', '11/9/2012'], YearBegin: ['11/2/2012', '1/1/2013'], YearEnd: ['11/2/2012', '12/31/2012'], BYearBegin: ['11/2/2012', '1/1/2013'], BYearEnd: ['11/2/2012', '12/31/2012'], QuarterBegin: ['11/2/2012', '12/1/2012'], QuarterEnd: ['11/2/2012', '12/31/2012'], BQuarterBegin: ['11/2/2012', '12/3/2012'], BQuarterEnd: ['11/2/2012', '12/31/2012'], Day: ['11/4/2012', '11/4/2012 23:00']}.items()
A:pandas.tests.tseries.offsets.test_offsets.second->Timestamp(test_values[1], tz='US/Eastern')
A:pandas.tests.tseries.offsets.test_offsets.fast->Week(weekday=1).is_on_offset(ts)
A:pandas.tests.tseries.offsets.test_offsets.other->Day()
pandas.tests.offsets.test_offsets.Base
pandas.tests.offsets.test_offsets.Base._get_offset(self,klass,value=1,normalize=False)
pandas.tests.offsets.test_offsets.Base.testMult1(self)
pandas.tests.offsets.test_offsets.Base.testMult2(self)
pandas.tests.offsets.test_offsets.Base.test_apply_out_of_range(self,tz_naive_fixture)
pandas.tests.offsets.test_offsets.Base.test_compare_str(self)
pandas.tests.offsets.test_offsets.Base.test_offsets_compare_equal(self)
pandas.tests.offsets.test_offsets.Base.test_radd(self)
pandas.tests.offsets.test_offsets.Base.test_rsub(self)
pandas.tests.offsets.test_offsets.Base.test_sub(self)
pandas.tests.offsets.test_offsets.CustomBusinessMonthBase
pandas.tests.offsets.test_offsets.CustomBusinessMonthBase.setup_method(self,method)
pandas.tests.offsets.test_offsets.CustomBusinessMonthBase.test_copy(self)
pandas.tests.offsets.test_offsets.CustomBusinessMonthBase.test_eq(self)
pandas.tests.offsets.test_offsets.CustomBusinessMonthBase.test_hash(self)
pandas.tests.offsets.test_offsets.CustomBusinessMonthBase.test_mul(self)
pandas.tests.offsets.test_offsets.CustomBusinessMonthBase.test_roundtrip_pickle(self)
pandas.tests.offsets.test_offsets.TestBusinessDay(Base)
pandas.tests.offsets.test_offsets.TestBusinessDay.setup_method(self,method)
pandas.tests.offsets.test_offsets.TestBusinessDay.testRollback1(self)
pandas.tests.offsets.test_offsets.TestBusinessDay.testRollback2(self)
pandas.tests.offsets.test_offsets.TestBusinessDay.testRollforward1(self)
pandas.tests.offsets.test_offsets.TestBusinessDay.testRollforward2(self)
pandas.tests.offsets.test_offsets.TestBusinessDay.test_apply(self,case)
pandas.tests.offsets.test_offsets.TestBusinessDay.test_apply_corner(self)
pandas.tests.offsets.test_offsets.TestBusinessDay.test_apply_large_n(self)
pandas.tests.offsets.test_offsets.TestBusinessDay.test_call(self)
pandas.tests.offsets.test_offsets.TestBusinessDay.test_different_normalize_equals(self)
pandas.tests.offsets.test_offsets.TestBusinessDay.test_eq(self)
pandas.tests.offsets.test_offsets.TestBusinessDay.test_hash(self)
pandas.tests.offsets.test_offsets.TestBusinessDay.test_is_on_offset(self)
pandas.tests.offsets.test_offsets.TestBusinessDay.test_mul(self)
pandas.tests.offsets.test_offsets.TestBusinessDay.test_repr(self)
pandas.tests.offsets.test_offsets.TestBusinessDay.test_roll_date_object(self)
pandas.tests.offsets.test_offsets.TestBusinessDay.test_with_offset(self)
pandas.tests.offsets.test_offsets.TestBusinessHour(Base)
pandas.tests.offsets.test_offsets.TestBusinessHour.setup_method(self,method)
pandas.tests.offsets.test_offsets.TestBusinessHour.testRollback1(self)
pandas.tests.offsets.test_offsets.TestBusinessHour.testRollback2(self)
pandas.tests.offsets.test_offsets.TestBusinessHour.testRollforward1(self)
pandas.tests.offsets.test_offsets.TestBusinessHour.testRollforward2(self)
pandas.tests.offsets.test_offsets.TestBusinessHour.test_apply(self,case)
pandas.tests.offsets.test_offsets.TestBusinessHour.test_apply_large_n(self,case)
pandas.tests.offsets.test_offsets.TestBusinessHour.test_apply_nanoseconds(self)
pandas.tests.offsets.test_offsets.TestBusinessHour.test_call(self)
pandas.tests.offsets.test_offsets.TestBusinessHour.test_constructor_errors(self,start,end,match)
pandas.tests.offsets.test_offsets.TestBusinessHour.test_different_normalize_equals(self)
pandas.tests.offsets.test_offsets.TestBusinessHour.test_eq(self,offset1,offset2)
pandas.tests.offsets.test_offsets.TestBusinessHour.test_eq_attribute(self,offset_name)
pandas.tests.offsets.test_offsets.TestBusinessHour.test_hash(self,offset_name)
pandas.tests.offsets.test_offsets.TestBusinessHour.test_is_on_offset(self,case)
pandas.tests.offsets.test_offsets.TestBusinessHour.test_neq(self,offset1,offset2)
pandas.tests.offsets.test_offsets.TestBusinessHour.test_normalize(self,case)
pandas.tests.offsets.test_offsets.TestBusinessHour.test_opening_time(self,case)
pandas.tests.offsets.test_offsets.TestBusinessHour.test_repr(self)
pandas.tests.offsets.test_offsets.TestBusinessHour.test_roll_date_object(self)
pandas.tests.offsets.test_offsets.TestBusinessHour.test_sub(self)
pandas.tests.offsets.test_offsets.TestBusinessHour.test_with_offset(self)
pandas.tests.offsets.test_offsets.TestCommon(Base)
pandas.tests.offsets.test_offsets.TestCommon._check_offsetfunc_works(self,offset,funcname,dt,expected,normalize=False)
pandas.tests.offsets.test_offsets.TestCommon.test_add(self,offset_types,tz_naive_fixture)
pandas.tests.offsets.test_offsets.TestCommon.test_apply(self,offset_types)
pandas.tests.offsets.test_offsets.TestCommon.test_immutable(self,offset_types)
pandas.tests.offsets.test_offsets.TestCommon.test_isAnchored_deprecated(self,offset_types)
pandas.tests.offsets.test_offsets.TestCommon.test_is_on_offset(self,offset_types)
pandas.tests.offsets.test_offsets.TestCommon.test_offset_freqstr(self,offset_types)
pandas.tests.offsets.test_offsets.TestCommon.test_offset_mul_ndarray(self,offset_types)
pandas.tests.offsets.test_offsets.TestCommon.test_offset_n(self,offset_types)
pandas.tests.offsets.test_offsets.TestCommon.test_offset_timedelta64_arg(self,offset_types)
pandas.tests.offsets.test_offsets.TestCommon.test_onOffset_deprecated(self,offset_types)
pandas.tests.offsets.test_offsets.TestCommon.test_pickle_v0_15_2(self,datapath)
pandas.tests.offsets.test_offsets.TestCommon.test_return_type(self,offset_types)
pandas.tests.offsets.test_offsets.TestCommon.test_rollback(self,offset_types)
pandas.tests.offsets.test_offsets.TestCommon.test_rollforward(self,offset_types)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay(Base)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.setup_method(self,method)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.testRollback1(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.testRollback2(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.testRollforward1(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.testRollforward2(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.test_apply(self,case)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.test_apply_corner(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.test_apply_large_n(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.test_calendar(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.test_call(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.test_different_normalize_equals(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.test_eq(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.test_hash(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.test_holidays(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.test_is_on_offset(self,case)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.test_mul(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.test_pickle_compat_0_14_1(self,datapath)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.test_repr(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.test_roll_date_object(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.test_roundtrip_pickle(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.test_weekmask(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.test_weekmask_and_holidays(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessDay.test_with_offset(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessHour(Base)
pandas.tests.offsets.test_offsets.TestCustomBusinessHour.setup_method(self,method)
pandas.tests.offsets.test_offsets.TestCustomBusinessHour.testRollback1(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessHour.testRollback2(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessHour.testRollforward1(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessHour.testRollforward2(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessHour.test_apply(self,apply_case)
pandas.tests.offsets.test_offsets.TestCustomBusinessHour.test_apply_nanoseconds(self,nano_case)
pandas.tests.offsets.test_offsets.TestCustomBusinessHour.test_call(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessHour.test_constructor_errors(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessHour.test_different_normalize_equals(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessHour.test_eq(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessHour.test_hash(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessHour.test_is_on_offset(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessHour.test_normalize(self,norm_cases)
pandas.tests.offsets.test_offsets.TestCustomBusinessHour.test_repr(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessHour.test_roll_date_object(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessHour.test_sub(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessHour.test_with_offset(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthBegin(CustomBusinessMonthBase,Base)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthBegin.testCall(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthBegin.testRollback1(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthBegin.testRollback2(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthBegin.testRollforward1(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthBegin.test_apply(self,case)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthBegin.test_apply_large_n(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthBegin.test_different_normalize_equals(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthBegin.test_holidays(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthBegin.test_is_on_offset(self,case)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthBegin.test_repr(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthBegin.test_roll_date_object(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthEnd(CustomBusinessMonthBase,Base)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthEnd.testCall(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthEnd.testRollback1(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthEnd.testRollback2(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthEnd.testRollforward1(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthEnd.test_apply(self,case)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthEnd.test_apply_large_n(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthEnd.test_different_normalize_equals(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthEnd.test_holidays(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthEnd.test_is_on_offset(self,case)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthEnd.test_repr(self)
pandas.tests.offsets.test_offsets.TestCustomBusinessMonthEnd.test_roll_date_object(self)
pandas.tests.offsets.test_offsets.TestDST
pandas.tests.offsets.test_offsets.TestDST._make_timestamp(self,string,hrs_offset,tz)
pandas.tests.offsets.test_offsets.TestDST._test_all_offsets(self,n,**kwds)
pandas.tests.offsets.test_offsets.TestDST._test_offset(self,offset_name,offset_n,tstart,expected_utc_offset)
pandas.tests.offsets.test_offsets.TestDST.test_all_offset_classes(self,tup)
pandas.tests.offsets.test_offsets.TestDST.test_fallback_singular(self)
pandas.tests.offsets.test_offsets.TestDST.test_springforward_plural(self)
pandas.tests.offsets.test_offsets.TestDST.test_springforward_singular(self)
pandas.tests.offsets.test_offsets.TestDateOffset(Base)
pandas.tests.offsets.test_offsets.TestDateOffset.setup_method(self,method)
pandas.tests.offsets.test_offsets.TestDateOffset.test_constructor(self)
pandas.tests.offsets.test_offsets.TestDateOffset.test_copy(self)
pandas.tests.offsets.test_offsets.TestDateOffset.test_eq(self)
pandas.tests.offsets.test_offsets.TestDateOffset.test_mul(self)
pandas.tests.offsets.test_offsets.TestDateOffset.test_repr(self)
pandas.tests.offsets.test_offsets.TestLastWeekOfMonth(Base)
pandas.tests.offsets.test_offsets.TestLastWeekOfMonth.test_constructor(self)
pandas.tests.offsets.test_offsets.TestLastWeekOfMonth.test_is_on_offset(self,case)
pandas.tests.offsets.test_offsets.TestLastWeekOfMonth.test_offset(self)
pandas.tests.offsets.test_offsets.TestOffsetAliases
pandas.tests.offsets.test_offsets.TestOffsetAliases.setup_method(self,method)
pandas.tests.offsets.test_offsets.TestOffsetAliases.test_alias_equality(self)
pandas.tests.offsets.test_offsets.TestOffsetAliases.test_rule_code(self)
pandas.tests.offsets.test_offsets.TestOffsetNames
pandas.tests.offsets.test_offsets.TestOffsetNames.test_get_offset_name(self)
pandas.tests.offsets.test_offsets.TestReprNames
pandas.tests.offsets.test_offsets.TestReprNames.test_str_for_named_is_name(self)
pandas.tests.offsets.test_offsets.TestSemiMonthBegin(Base)
pandas.tests.offsets.test_offsets.TestSemiMonthBegin.test_apply_index(self,case)
pandas.tests.offsets.test_offsets.TestSemiMonthBegin.test_is_on_offset(self,case)
pandas.tests.offsets.test_offsets.TestSemiMonthBegin.test_offset(self,case)
pandas.tests.offsets.test_offsets.TestSemiMonthBegin.test_offset_whole_year(self)
pandas.tests.offsets.test_offsets.TestSemiMonthBegin.test_vectorized_offset_addition(self,klass)
pandas.tests.offsets.test_offsets.TestSemiMonthEnd(Base)
pandas.tests.offsets.test_offsets.TestSemiMonthEnd.test_apply_index(self,case)
pandas.tests.offsets.test_offsets.TestSemiMonthEnd.test_is_on_offset(self,case)
pandas.tests.offsets.test_offsets.TestSemiMonthEnd.test_offset(self,case)
pandas.tests.offsets.test_offsets.TestSemiMonthEnd.test_offset_whole_year(self)
pandas.tests.offsets.test_offsets.TestSemiMonthEnd.test_vectorized_offset_addition(self,klass)
pandas.tests.offsets.test_offsets.TestWeek(Base)
pandas.tests.offsets.test_offsets.TestWeek.test_corner(self)
pandas.tests.offsets.test_offsets.TestWeek.test_is_anchored(self)
pandas.tests.offsets.test_offsets.TestWeek.test_is_on_offset(self,weekday)
pandas.tests.offsets.test_offsets.TestWeek.test_offset(self,case)
pandas.tests.offsets.test_offsets.TestWeek.test_repr(self)
pandas.tests.offsets.test_offsets.TestWeekOfMonth(Base)
pandas.tests.offsets.test_offsets.TestWeekOfMonth.test_constructor(self)
pandas.tests.offsets.test_offsets.TestWeekOfMonth.test_is_on_offset(self,case)
pandas.tests.offsets.test_offsets.TestWeekOfMonth.test_offset(self)
pandas.tests.offsets.test_offsets.TestWeekOfMonth.test_repr(self)
pandas.tests.offsets.test_offsets.WeekDay
pandas.tests.offsets.test_offsets.get_utc_offset_hours(ts)
pandas.tests.offsets.test_offsets.test_Easter()
pandas.tests.offsets.test_offsets.test_dateoffset_misc()
pandas.tests.offsets.test_offsets.test_freq_offsets()
pandas.tests.offsets.test_offsets.test_get_offset()
pandas.tests.offsets.test_offsets.test_get_offset_day_error()
pandas.tests.offsets.test_offsets.test_get_offset_legacy()
pandas.tests.offsets.test_offsets.test_last_week_of_month_on_offset()
pandas.tests.offsets.test_offsets.test_require_integers(offset_types)
pandas.tests.offsets.test_offsets.test_tick_normalize_raises(tick_classes)
pandas.tests.offsets.test_offsets.test_valid_default_arguments(offset_types)
pandas.tests.offsets.test_offsets.test_valid_month_attributes(kwd,month_classes)
pandas.tests.offsets.test_offsets.test_valid_relativedelta_kwargs(kwd)
pandas.tests.offsets.test_offsets.test_valid_tick_attributes(kwd,tick_classes)
pandas.tests.offsets.test_offsets.test_validate_n_error()
pandas.tests.offsets.test_offsets.test_week_add_invalid()
pandas.tests.offsets.test_offsets.test_weekofmonth_onoffset()
pandas.tests.offsets.test_offsets.test_weeks_onoffset()
pandas.tests.tseries.offsets.test_offsets.Base
pandas.tests.tseries.offsets.test_offsets.Base._get_offset(self,klass,value=1,normalize=False)
pandas.tests.tseries.offsets.test_offsets.Base.testMult1(self)
pandas.tests.tseries.offsets.test_offsets.Base.testMult2(self)
pandas.tests.tseries.offsets.test_offsets.Base.test_apply_out_of_range(self,tz_naive_fixture)
pandas.tests.tseries.offsets.test_offsets.Base.test_compare_str(self)
pandas.tests.tseries.offsets.test_offsets.Base.test_offsets_compare_equal(self)
pandas.tests.tseries.offsets.test_offsets.Base.test_radd(self)
pandas.tests.tseries.offsets.test_offsets.Base.test_rsub(self)
pandas.tests.tseries.offsets.test_offsets.Base.test_sub(self)
pandas.tests.tseries.offsets.test_offsets.CustomBusinessMonthBase
pandas.tests.tseries.offsets.test_offsets.CustomBusinessMonthBase.setup_method(self,method)
pandas.tests.tseries.offsets.test_offsets.CustomBusinessMonthBase.test_copy(self)
pandas.tests.tseries.offsets.test_offsets.CustomBusinessMonthBase.test_eq(self)
pandas.tests.tseries.offsets.test_offsets.CustomBusinessMonthBase.test_hash(self)
pandas.tests.tseries.offsets.test_offsets.CustomBusinessMonthBase.test_mul(self)
pandas.tests.tseries.offsets.test_offsets.CustomBusinessMonthBase.test_roundtrip_pickle(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessDay(Base)
pandas.tests.tseries.offsets.test_offsets.TestBusinessDay.setup_method(self,method)
pandas.tests.tseries.offsets.test_offsets.TestBusinessDay.testRollback1(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessDay.testRollback2(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessDay.testRollforward1(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessDay.testRollforward2(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessDay.test_apply(self,case)
pandas.tests.tseries.offsets.test_offsets.TestBusinessDay.test_apply_corner(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessDay.test_apply_large_n(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessDay.test_call(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessDay.test_different_normalize_equals(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessDay.test_eq(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessDay.test_hash(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessDay.test_is_on_offset(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessDay.test_mul(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessDay.test_repr(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessDay.test_roll_date_object(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessDay.test_with_offset(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour(Base)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.setup_method(self,method)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.testRollback1(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.testRollback2(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.testRollforward1(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.testRollforward2(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.test_apply(self,case)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.test_apply_large_n(self,case)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.test_apply_nanoseconds(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.test_call(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.test_constructor_errors(self,start,end,match)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.test_datetimeindex(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.test_different_normalize_equals(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.test_dtindex(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.test_eq(self,offset1,offset2)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.test_eq_attribute(self,offset_name)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.test_hash(self,offset_name)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.test_is_on_offset(self,case)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.test_neq(self,offset1,offset2)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.test_normalize(self,case)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.test_opening_time(self,case)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.test_repr(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.test_roll_date_object(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.test_sub(self)
pandas.tests.tseries.offsets.test_offsets.TestBusinessHour.test_with_offset(self)
pandas.tests.tseries.offsets.test_offsets.TestCommon(Base)
pandas.tests.tseries.offsets.test_offsets.TestCommon._check_offsetfunc_works(self,offset,funcname,dt,expected,normalize=False)
pandas.tests.tseries.offsets.test_offsets.TestCommon.test_add(self,offset_types,tz_naive_fixture)
pandas.tests.tseries.offsets.test_offsets.TestCommon.test_add_empty_datetimeindex(self,offset_types,tz_naive_fixture)
pandas.tests.tseries.offsets.test_offsets.TestCommon.test_add_empty_dtindex(self,offset_types,tz_naive_fixture)
pandas.tests.tseries.offsets.test_offsets.TestCommon.test_apply(self,offset_types)
pandas.tests.tseries.offsets.test_offsets.TestCommon.test_immutable(self,offset_types)
pandas.tests.tseries.offsets.test_offsets.TestCommon.test_isAnchored_deprecated(self,offset_types)
pandas.tests.tseries.offsets.test_offsets.TestCommon.test_is_on_offset(self,offset_types)
pandas.tests.tseries.offsets.test_offsets.TestCommon.test_offset_freqstr(self,offset_types)
pandas.tests.tseries.offsets.test_offsets.TestCommon.test_offset_mul_ndarray(self,offset_types)
pandas.tests.tseries.offsets.test_offsets.TestCommon.test_offset_n(self,offset_types)
pandas.tests.tseries.offsets.test_offsets.TestCommon.test_offset_timedelta64_arg(self,offset_types)
pandas.tests.tseries.offsets.test_offsets.TestCommon.test_onOffset_deprecated(self,offset_types)
pandas.tests.tseries.offsets.test_offsets.TestCommon.test_pickle_v0_15_2(self,datapath)
pandas.tests.tseries.offsets.test_offsets.TestCommon.test_return_type(self,offset_types)
pandas.tests.tseries.offsets.test_offsets.TestCommon.test_rollback(self,offset_types)
pandas.tests.tseries.offsets.test_offsets.TestCommon.test_rollforward(self,offset_types)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay(Base)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.setup_method(self,method)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.testRollback1(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.testRollback2(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.testRollforward1(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.testRollforward2(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.test_apply(self,case)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.test_apply_corner(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.test_apply_large_n(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.test_calendar(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.test_call(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.test_different_normalize_equals(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.test_eq(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.test_hash(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.test_holidays(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.test_is_on_offset(self,case)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.test_mul(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.test_pickle_compat_0_14_1(self,datapath)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.test_repr(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.test_roll_date_object(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.test_roundtrip_pickle(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.test_weekmask(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.test_weekmask_and_holidays(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessDay.test_with_offset(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessHour(Base)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessHour.setup_method(self,method)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessHour.testRollback1(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessHour.testRollback2(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessHour.testRollforward1(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessHour.testRollforward2(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessHour.test_apply(self,apply_case)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessHour.test_apply_nanoseconds(self,nano_case)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessHour.test_call(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessHour.test_constructor_errors(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessHour.test_different_normalize_equals(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessHour.test_eq(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessHour.test_hash(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessHour.test_is_on_offset(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessHour.test_normalize(self,norm_cases)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessHour.test_repr(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessHour.test_roll_date_object(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessHour.test_sub(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessHour.test_with_offset(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthBegin(CustomBusinessMonthBase,Base)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthBegin.testCall(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthBegin.testRollback1(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthBegin.testRollback2(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthBegin.testRollforward1(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthBegin.test_apply(self,case)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthBegin.test_apply_large_n(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthBegin.test_datetimeindex(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthBegin.test_different_normalize_equals(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthBegin.test_dtindex(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthBegin.test_holidays(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthBegin.test_is_on_offset(self,case)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthBegin.test_repr(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthBegin.test_roll_date_object(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthEnd(CustomBusinessMonthBase,Base)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthEnd.testCall(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthEnd.testRollback1(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthEnd.testRollback2(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthEnd.testRollforward1(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthEnd.test_apply(self,case)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthEnd.test_apply_large_n(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthEnd.test_datetimeindex(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthEnd.test_different_normalize_equals(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthEnd.test_dtindex(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthEnd.test_holidays(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthEnd.test_is_on_offset(self,case)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthEnd.test_repr(self)
pandas.tests.tseries.offsets.test_offsets.TestCustomBusinessMonthEnd.test_roll_date_object(self)
pandas.tests.tseries.offsets.test_offsets.TestDST
pandas.tests.tseries.offsets.test_offsets.TestDST._make_timestamp(self,string,hrs_offset,tz)
pandas.tests.tseries.offsets.test_offsets.TestDST._test_all_offsets(self,n,**kwds)
pandas.tests.tseries.offsets.test_offsets.TestDST._test_offset(self,offset_name,offset_n,tstart,expected_utc_offset)
pandas.tests.tseries.offsets.test_offsets.TestDST.test_all_offset_classes(self,tup)
pandas.tests.tseries.offsets.test_offsets.TestDST.test_fallback_singular(self)
pandas.tests.tseries.offsets.test_offsets.TestDST.test_springforward_plural(self)
pandas.tests.tseries.offsets.test_offsets.TestDST.test_springforward_singular(self)
pandas.tests.tseries.offsets.test_offsets.TestDateOffset(Base)
pandas.tests.tseries.offsets.test_offsets.TestDateOffset.setup_method(self,method)
pandas.tests.tseries.offsets.test_offsets.TestDateOffset.test_constructor(self)
pandas.tests.tseries.offsets.test_offsets.TestDateOffset.test_copy(self)
pandas.tests.tseries.offsets.test_offsets.TestDateOffset.test_eq(self)
pandas.tests.tseries.offsets.test_offsets.TestDateOffset.test_mul(self)
pandas.tests.tseries.offsets.test_offsets.TestDateOffset.test_repr(self)
pandas.tests.tseries.offsets.test_offsets.TestLastWeekOfMonth(Base)
pandas.tests.tseries.offsets.test_offsets.TestLastWeekOfMonth.test_constructor(self)
pandas.tests.tseries.offsets.test_offsets.TestLastWeekOfMonth.test_is_on_offset(self,case)
pandas.tests.tseries.offsets.test_offsets.TestLastWeekOfMonth.test_offset(self)
pandas.tests.tseries.offsets.test_offsets.TestOffsetAliases
pandas.tests.tseries.offsets.test_offsets.TestOffsetAliases.setup_method(self,method)
pandas.tests.tseries.offsets.test_offsets.TestOffsetAliases.test_alias_equality(self)
pandas.tests.tseries.offsets.test_offsets.TestOffsetAliases.test_rule_code(self)
pandas.tests.tseries.offsets.test_offsets.TestOffsetNames
pandas.tests.tseries.offsets.test_offsets.TestOffsetNames.test_get_offset_name(self)
pandas.tests.tseries.offsets.test_offsets.TestReprNames
pandas.tests.tseries.offsets.test_offsets.TestReprNames.test_str_for_named_is_name(self)
pandas.tests.tseries.offsets.test_offsets.TestSemiMonthBegin(Base)
pandas.tests.tseries.offsets.test_offsets.TestSemiMonthBegin.test_apply_index(self,case)
pandas.tests.tseries.offsets.test_offsets.TestSemiMonthBegin.test_is_on_offset(self,case)
pandas.tests.tseries.offsets.test_offsets.TestSemiMonthBegin.test_offset(self,case)
pandas.tests.tseries.offsets.test_offsets.TestSemiMonthBegin.test_offset_whole_year(self)
pandas.tests.tseries.offsets.test_offsets.TestSemiMonthBegin.test_vectorized_offset_addition(self,klass)
pandas.tests.tseries.offsets.test_offsets.TestSemiMonthEnd(Base)
pandas.tests.tseries.offsets.test_offsets.TestSemiMonthEnd.test_apply_index(self,case)
pandas.tests.tseries.offsets.test_offsets.TestSemiMonthEnd.test_is_on_offset(self,case)
pandas.tests.tseries.offsets.test_offsets.TestSemiMonthEnd.test_offset(self,case)
pandas.tests.tseries.offsets.test_offsets.TestSemiMonthEnd.test_offset_whole_year(self)
pandas.tests.tseries.offsets.test_offsets.TestSemiMonthEnd.test_vectorized_offset_addition(self,klass)
pandas.tests.tseries.offsets.test_offsets.TestWeek(Base)
pandas.tests.tseries.offsets.test_offsets.TestWeek.test_corner(self)
pandas.tests.tseries.offsets.test_offsets.TestWeek.test_is_anchored(self)
pandas.tests.tseries.offsets.test_offsets.TestWeek.test_is_on_offset(self,weekday)
pandas.tests.tseries.offsets.test_offsets.TestWeek.test_offset(self,case)
pandas.tests.tseries.offsets.test_offsets.TestWeek.test_repr(self)
pandas.tests.tseries.offsets.test_offsets.TestWeekOfMonth(Base)
pandas.tests.tseries.offsets.test_offsets.TestWeekOfMonth.test_constructor(self)
pandas.tests.tseries.offsets.test_offsets.TestWeekOfMonth.test_is_on_offset(self,case)
pandas.tests.tseries.offsets.test_offsets.TestWeekOfMonth.test_offset(self)
pandas.tests.tseries.offsets.test_offsets.TestWeekOfMonth.test_repr(self)
pandas.tests.tseries.offsets.test_offsets.WeekDay
pandas.tests.tseries.offsets.test_offsets.get_utc_offset_hours(ts)
pandas.tests.tseries.offsets.test_offsets.test_Easter()
pandas.tests.tseries.offsets.test_offsets.test_dateoffset_misc()
pandas.tests.tseries.offsets.test_offsets.test_freq_offsets()
pandas.tests.tseries.offsets.test_offsets.test_get_offset()
pandas.tests.tseries.offsets.test_offsets.test_get_offset_day_error()
pandas.tests.tseries.offsets.test_offsets.test_get_offset_legacy()
pandas.tests.tseries.offsets.test_offsets.test_last_week_of_month_on_offset()
pandas.tests.tseries.offsets.test_offsets.test_require_integers(offset_types)
pandas.tests.tseries.offsets.test_offsets.test_tick_normalize_raises(tick_classes)
pandas.tests.tseries.offsets.test_offsets.test_valid_default_arguments(offset_types)
pandas.tests.tseries.offsets.test_offsets.test_valid_month_attributes(kwd,month_classes)
pandas.tests.tseries.offsets.test_offsets.test_valid_relativedelta_kwargs(kwd)
pandas.tests.tseries.offsets.test_offsets.test_valid_tick_attributes(kwd,tick_classes)
pandas.tests.tseries.offsets.test_offsets.test_validate_n_error()
pandas.tests.tseries.offsets.test_offsets.test_week_add_invalid()
pandas.tests.tseries.offsets.test_offsets.test_weekofmonth_onoffset()
pandas.tests.tseries.offsets.test_offsets.test_weeks_onoffset()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tseries/offsets/test_ticks.py----------------------------------------
A:pandas.tests.tseries.offsets.test_ticks.result->pandas.tseries.offsets.Hour(3).apply(offsets.Hour(4))
A:pandas.tests.tseries.offsets.test_ticks.exp->pandas.tseries.offsets.Hour(7)
A:pandas.tests.tseries.offsets.test_ticks.delta->timedelta(3)
A:pandas.tests.tseries.offsets.test_ticks.tick->pandas.tseries.offsets._delta_to_tick(td)
A:pandas.tests.tseries.offsets.test_ticks.td->Timedelta(nanoseconds=5)
A:pandas.tests.tseries.offsets.test_ticks.left->cls(n)
A:pandas.tests.tseries.offsets.test_ticks.right->cls(n)
A:pandas.tests.tseries.offsets.test_ticks.expected->numpy.array([2.0, 1.0])
A:pandas.tests.tseries.offsets.test_ticks.timestamp->Timestamp(datetime(2010, 1, 1))
A:pandas.tests.tseries.offsets.test_ticks.offset->kls(3)
A:pandas.tests.tseries.offsets.test_ticks.off->cls(19)
A:pandas.tests.tseries.offsets.test_ticks.td64->timedelta(3).to_timedelta64()
A:pandas.tests.tseries.offsets.test_ticks.three->cls(3)
A:pandas.tests.tseries.offsets.test_ticks.four->cls(4)
pandas.tests.offsets.test_ticks.test_Hour()
pandas.tests.offsets.test_ticks.test_Microsecond()
pandas.tests.offsets.test_ticks.test_Millisecond()
pandas.tests.offsets.test_ticks.test_MillisecondTimestampArithmetic()
pandas.tests.offsets.test_ticks.test_Minute()
pandas.tests.offsets.test_ticks.test_Nanosecond()
pandas.tests.offsets.test_ticks.test_NanosecondGeneric()
pandas.tests.offsets.test_ticks.test_Second()
pandas.tests.offsets.test_ticks.test_apply_ticks()
pandas.tests.offsets.test_ticks.test_compare_ticks(cls)
pandas.tests.offsets.test_ticks.test_compare_ticks_to_strs(cls)
pandas.tests.offsets.test_ticks.test_delta_to_tick()
pandas.tests.offsets.test_ticks.test_tick_add_sub(cls,n,m)
pandas.tests.offsets.test_ticks.test_tick_addition(kls,expected)
pandas.tests.offsets.test_ticks.test_tick_division(cls)
pandas.tests.offsets.test_ticks.test_tick_equalities(cls)
pandas.tests.offsets.test_ticks.test_tick_equality(cls,n,m)
pandas.tests.offsets.test_ticks.test_tick_offset(cls)
pandas.tests.offsets.test_ticks.test_tick_rdiv(cls)
pandas.tests.offsets.test_ticks.test_tick_zero(cls1,cls2)
pandas.tests.tseries.offsets.test_ticks.test_Hour()
pandas.tests.tseries.offsets.test_ticks.test_Microsecond()
pandas.tests.tseries.offsets.test_ticks.test_Millisecond()
pandas.tests.tseries.offsets.test_ticks.test_MillisecondTimestampArithmetic()
pandas.tests.tseries.offsets.test_ticks.test_Minute()
pandas.tests.tseries.offsets.test_ticks.test_Nanosecond()
pandas.tests.tseries.offsets.test_ticks.test_NanosecondGeneric()
pandas.tests.tseries.offsets.test_ticks.test_Second()
pandas.tests.tseries.offsets.test_ticks.test_apply_ticks()
pandas.tests.tseries.offsets.test_ticks.test_compare_ticks(cls)
pandas.tests.tseries.offsets.test_ticks.test_compare_ticks_to_strs(cls)
pandas.tests.tseries.offsets.test_ticks.test_delta_to_tick()
pandas.tests.tseries.offsets.test_ticks.test_tick_add_sub(cls,n,m)
pandas.tests.tseries.offsets.test_ticks.test_tick_addition(kls,expected)
pandas.tests.tseries.offsets.test_ticks.test_tick_division(cls)
pandas.tests.tseries.offsets.test_ticks.test_tick_equalities(cls)
pandas.tests.tseries.offsets.test_ticks.test_tick_equality(cls,n,m)
pandas.tests.tseries.offsets.test_ticks.test_tick_offset(cls)
pandas.tests.tseries.offsets.test_ticks.test_tick_rdiv(cls)
pandas.tests.tseries.offsets.test_ticks.test_tick_zero(cls1,cls2)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tseries/offsets/test_fiscal.py----------------------------------------
A:pandas.tests.tseries.offsets.test_fiscal.offset->FY5253Quarter(n=-2, qtr_with_extra_week=1, startingMonth=7, variation='last', weekday=2)
A:pandas.tests.tseries.offsets.test_fiscal.offset_lom_sat_aug->makeFY5253LastOfMonth(1, startingMonth=8, weekday=WeekDay.SAT)
A:pandas.tests.tseries.offsets.test_fiscal.offset_lom_sat_sep->makeFY5253LastOfMonth(1, startingMonth=9, weekday=WeekDay.SAT)
A:pandas.tests.tseries.offsets.test_fiscal.offset_lom_aug_sat->makeFY5253NearestEndMonth(1, startingMonth=8, weekday=WeekDay.SAT)
A:pandas.tests.tseries.offsets.test_fiscal.offset_lom_aug_sat_1->makeFY5253LastOfMonth(n=1, startingMonth=8, weekday=WeekDay.SAT)
A:pandas.tests.tseries.offsets.test_fiscal.offset_n->FY5253(weekday=WeekDay.TUE, startingMonth=12, variation='nearest')
A:pandas.tests.tseries.offsets.test_fiscal.JNJ->FY5253(n=1, startingMonth=12, weekday=6, variation='nearest')
A:pandas.tests.tseries.offsets.test_fiscal.offset_lom_aug_thu->makeFY5253NearestEndMonth(1, startingMonth=8, weekday=WeekDay.THU)
A:pandas.tests.tseries.offsets.test_fiscal.DEC_SAT->FY5253(n=-1, startingMonth=12, weekday=5, variation='nearest')
A:pandas.tests.tseries.offsets.test_fiscal.offset2->FY5253Quarter(weekday=5, startingMonth=12, variation='last', qtr_with_extra_week=4)
A:pandas.tests.tseries.offsets.test_fiscal.offset4->makeFY5253LastOfMonthQuarter(4, startingMonth=9, weekday=WeekDay.SAT, qtr_with_extra_week=4)
A:pandas.tests.tseries.offsets.test_fiscal.offset_neg1->makeFY5253LastOfMonthQuarter(-1, startingMonth=9, weekday=WeekDay.SAT, qtr_with_extra_week=4)
A:pandas.tests.tseries.offsets.test_fiscal.offset_neg2->makeFY5253LastOfMonthQuarter(-2, startingMonth=9, weekday=WeekDay.SAT, qtr_with_extra_week=4)
A:pandas.tests.tseries.offsets.test_fiscal.lomq_aug_sat_4->makeFY5253LastOfMonthQuarter(1, startingMonth=8, weekday=WeekDay.SAT, qtr_with_extra_week=4)
A:pandas.tests.tseries.offsets.test_fiscal.lomq_sep_sat_4->makeFY5253LastOfMonthQuarter(1, startingMonth=9, weekday=WeekDay.SAT, qtr_with_extra_week=4)
A:pandas.tests.tseries.offsets.test_fiscal.sat_dec_1->makeFY5253LastOfMonthQuarter(1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1)
A:pandas.tests.tseries.offsets.test_fiscal.sat_dec_4->makeFY5253LastOfMonthQuarter(1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=4)
A:pandas.tests.tseries.offsets.test_fiscal.offset_nem_sat_aug_4->makeFY5253NearestEndMonthQuarter(1, startingMonth=8, weekday=WeekDay.SAT, qtr_with_extra_week=4)
A:pandas.tests.tseries.offsets.test_fiscal.offset_nem_thu_aug_4->makeFY5253NearestEndMonthQuarter(1, startingMonth=8, weekday=WeekDay.THU, qtr_with_extra_week=4)
A:pandas.tests.tseries.offsets.test_fiscal.fy->FY5253(n=1, weekday=5, startingMonth=12, variation='nearest')
A:pandas.tests.tseries.offsets.test_fiscal.dt->Timestamp('2003-12-31')
A:pandas.tests.tseries.offsets.test_fiscal.ts->Timestamp('2011-01-26 19:03:40.331096129+0200', tz='Africa/Windhoek')
A:pandas.tests.tseries.offsets.test_fiscal.fast->FY5253Quarter(n=-2, qtr_with_extra_week=1, startingMonth=7, variation='last', weekday=2).is_on_offset(ts)
pandas.tests.offsets.test_fiscal.TestFY5253LastOfMonth(Base)
pandas.tests.offsets.test_fiscal.TestFY5253LastOfMonth.test_apply(self)
pandas.tests.offsets.test_fiscal.TestFY5253LastOfMonth.test_is_on_offset(self,case)
pandas.tests.offsets.test_fiscal.TestFY5253LastOfMonthQuarter(Base)
pandas.tests.offsets.test_fiscal.TestFY5253LastOfMonthQuarter.test_equality(self)
pandas.tests.offsets.test_fiscal.TestFY5253LastOfMonthQuarter.test_get_weeks(self)
pandas.tests.offsets.test_fiscal.TestFY5253LastOfMonthQuarter.test_is_anchored(self)
pandas.tests.offsets.test_fiscal.TestFY5253LastOfMonthQuarter.test_is_on_offset(self,case)
pandas.tests.offsets.test_fiscal.TestFY5253LastOfMonthQuarter.test_offset(self)
pandas.tests.offsets.test_fiscal.TestFY5253LastOfMonthQuarter.test_year_has_extra_week(self)
pandas.tests.offsets.test_fiscal.TestFY5253NearestEndMonth(Base)
pandas.tests.offsets.test_fiscal.TestFY5253NearestEndMonth.test_apply(self)
pandas.tests.offsets.test_fiscal.TestFY5253NearestEndMonth.test_get_year_end(self)
pandas.tests.offsets.test_fiscal.TestFY5253NearestEndMonth.test_is_on_offset(self,case)
pandas.tests.offsets.test_fiscal.TestFY5253NearestEndMonthQuarter(Base)
pandas.tests.offsets.test_fiscal.TestFY5253NearestEndMonthQuarter.test_is_on_offset(self,case)
pandas.tests.offsets.test_fiscal.TestFY5253NearestEndMonthQuarter.test_offset(self)
pandas.tests.offsets.test_fiscal.makeFY5253LastOfMonth(*args,**kwds)
pandas.tests.offsets.test_fiscal.makeFY5253LastOfMonthQuarter(*args,**kwds)
pandas.tests.offsets.test_fiscal.makeFY5253NearestEndMonth(*args,**kwds)
pandas.tests.offsets.test_fiscal.makeFY5253NearestEndMonthQuarter(*args,**kwds)
pandas.tests.offsets.test_fiscal.test_bunched_yearends()
pandas.tests.offsets.test_fiscal.test_fy5253_last_onoffset()
pandas.tests.offsets.test_fiscal.test_fy5253_nearest_onoffset()
pandas.tests.offsets.test_fiscal.test_fy5253qtr_onoffset_last()
pandas.tests.offsets.test_fiscal.test_fy5253qtr_onoffset_nearest()
pandas.tests.offsets.test_fiscal.test_get_offset()
pandas.tests.offsets.test_fiscal.test_get_offset_name()
pandas.tests.tseries.offsets.test_fiscal.TestFY5253LastOfMonth(Base)
pandas.tests.tseries.offsets.test_fiscal.TestFY5253LastOfMonth.test_apply(self)
pandas.tests.tseries.offsets.test_fiscal.TestFY5253LastOfMonth.test_is_on_offset(self,case)
pandas.tests.tseries.offsets.test_fiscal.TestFY5253LastOfMonthQuarter(Base)
pandas.tests.tseries.offsets.test_fiscal.TestFY5253LastOfMonthQuarter.test_equality(self)
pandas.tests.tseries.offsets.test_fiscal.TestFY5253LastOfMonthQuarter.test_get_weeks(self)
pandas.tests.tseries.offsets.test_fiscal.TestFY5253LastOfMonthQuarter.test_is_anchored(self)
pandas.tests.tseries.offsets.test_fiscal.TestFY5253LastOfMonthQuarter.test_is_on_offset(self,case)
pandas.tests.tseries.offsets.test_fiscal.TestFY5253LastOfMonthQuarter.test_offset(self)
pandas.tests.tseries.offsets.test_fiscal.TestFY5253LastOfMonthQuarter.test_year_has_extra_week(self)
pandas.tests.tseries.offsets.test_fiscal.TestFY5253NearestEndMonth(Base)
pandas.tests.tseries.offsets.test_fiscal.TestFY5253NearestEndMonth.test_apply(self)
pandas.tests.tseries.offsets.test_fiscal.TestFY5253NearestEndMonth.test_get_year_end(self)
pandas.tests.tseries.offsets.test_fiscal.TestFY5253NearestEndMonth.test_is_on_offset(self,case)
pandas.tests.tseries.offsets.test_fiscal.TestFY5253NearestEndMonthQuarter(Base)
pandas.tests.tseries.offsets.test_fiscal.TestFY5253NearestEndMonthQuarter.test_is_on_offset(self,case)
pandas.tests.tseries.offsets.test_fiscal.TestFY5253NearestEndMonthQuarter.test_offset(self)
pandas.tests.tseries.offsets.test_fiscal.makeFY5253LastOfMonth(*args,**kwds)
pandas.tests.tseries.offsets.test_fiscal.makeFY5253LastOfMonthQuarter(*args,**kwds)
pandas.tests.tseries.offsets.test_fiscal.makeFY5253NearestEndMonth(*args,**kwds)
pandas.tests.tseries.offsets.test_fiscal.makeFY5253NearestEndMonthQuarter(*args,**kwds)
pandas.tests.tseries.offsets.test_fiscal.test_bunched_yearends()
pandas.tests.tseries.offsets.test_fiscal.test_fy5253_last_onoffset()
pandas.tests.tseries.offsets.test_fiscal.test_fy5253_nearest_onoffset()
pandas.tests.tseries.offsets.test_fiscal.test_fy5253qtr_onoffset_last()
pandas.tests.tseries.offsets.test_fiscal.test_fy5253qtr_onoffset_nearest()
pandas.tests.tseries.offsets.test_fiscal.test_get_offset()
pandas.tests.tseries.offsets.test_fiscal.test_get_offset_name()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tseries/offsets/test_yqm_offsets.py----------------------------------------
A:pandas.tests.tseries.offsets.test_yqm_offsets.date->datetime(2009, 11, 30)
A:pandas.tests.tseries.offsets.test_yqm_offsets.offset->BYearEnd(month=6)
A:pandas.tests.tseries.offsets.test_yqm_offsets.rng->pandas.date_range(start='1/1/2000', periods=100000, freq='T')
A:pandas.tests.tseries.offsets.test_yqm_offsets.ser->pandas.Series(rng)
A:pandas.tests.tseries.offsets.test_yqm_offsets.res_v2->BYearEnd(month=6).apply_index(rng)
A:pandas.tests.tseries.offsets.test_yqm_offsets.res->BYearEnd(month=6).is_on_offset(date)
A:pandas.tests.tseries.offsets.test_yqm_offsets.dt->datetime(2007, 1, 1, 3)
A:pandas.tests.tseries.offsets.test_yqm_offsets.offset1->BMonthEnd()
A:pandas.tests.tseries.offsets.test_yqm_offsets.offset2->BMonthEnd()
pandas.tests.offsets.test_yqm_offsets.TestBMonthBegin(Base)
pandas.tests.offsets.test_yqm_offsets.TestBMonthBegin.test_is_on_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestBMonthBegin.test_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestBMonthBegin.test_offsets_compare_equal(self)
pandas.tests.offsets.test_yqm_offsets.TestBMonthEnd(Base)
pandas.tests.offsets.test_yqm_offsets.TestBMonthEnd.test_is_on_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestBMonthEnd.test_normalize(self)
pandas.tests.offsets.test_yqm_offsets.TestBMonthEnd.test_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestBMonthEnd.test_offsets_compare_equal(self)
pandas.tests.offsets.test_yqm_offsets.TestBQuarterBegin(Base)
pandas.tests.offsets.test_yqm_offsets.TestBQuarterBegin.test_is_anchored(self)
pandas.tests.offsets.test_yqm_offsets.TestBQuarterBegin.test_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestBQuarterBegin.test_offset_corner_case(self)
pandas.tests.offsets.test_yqm_offsets.TestBQuarterBegin.test_repr(self)
pandas.tests.offsets.test_yqm_offsets.TestBQuarterEnd(Base)
pandas.tests.offsets.test_yqm_offsets.TestBQuarterEnd.test_is_anchored(self)
pandas.tests.offsets.test_yqm_offsets.TestBQuarterEnd.test_is_on_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestBQuarterEnd.test_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestBQuarterEnd.test_offset_corner_case(self)
pandas.tests.offsets.test_yqm_offsets.TestBQuarterEnd.test_repr(self)
pandas.tests.offsets.test_yqm_offsets.TestBYearBegin(Base)
pandas.tests.offsets.test_yqm_offsets.TestBYearBegin.test_misspecified(self)
pandas.tests.offsets.test_yqm_offsets.TestBYearBegin.test_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestBYearEnd(Base)
pandas.tests.offsets.test_yqm_offsets.TestBYearEnd.test_is_on_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestBYearEnd.test_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestBYearEndLagged(Base)
pandas.tests.offsets.test_yqm_offsets.TestBYearEndLagged.test_bad_month_fail(self)
pandas.tests.offsets.test_yqm_offsets.TestBYearEndLagged.test_is_on_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestBYearEndLagged.test_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestBYearEndLagged.test_roll(self)
pandas.tests.offsets.test_yqm_offsets.TestMonthBegin(Base)
pandas.tests.offsets.test_yqm_offsets.TestMonthBegin.test_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestMonthEnd(Base)
pandas.tests.offsets.test_yqm_offsets.TestMonthEnd.test_day_of_month(self)
pandas.tests.offsets.test_yqm_offsets.TestMonthEnd.test_is_on_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestMonthEnd.test_normalize(self)
pandas.tests.offsets.test_yqm_offsets.TestMonthEnd.test_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestQuarterBegin(Base)
pandas.tests.offsets.test_yqm_offsets.TestQuarterBegin.test_is_anchored(self)
pandas.tests.offsets.test_yqm_offsets.TestQuarterBegin.test_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestQuarterBegin.test_offset_corner_case(self)
pandas.tests.offsets.test_yqm_offsets.TestQuarterBegin.test_repr(self)
pandas.tests.offsets.test_yqm_offsets.TestQuarterEnd(Base)
pandas.tests.offsets.test_yqm_offsets.TestQuarterEnd.test_is_anchored(self)
pandas.tests.offsets.test_yqm_offsets.TestQuarterEnd.test_is_on_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestQuarterEnd.test_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestQuarterEnd.test_offset_corner_case(self)
pandas.tests.offsets.test_yqm_offsets.TestQuarterEnd.test_repr(self)
pandas.tests.offsets.test_yqm_offsets.TestYearBegin(Base)
pandas.tests.offsets.test_yqm_offsets.TestYearBegin.test_is_on_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestYearBegin.test_misspecified(self)
pandas.tests.offsets.test_yqm_offsets.TestYearBegin.test_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestYearEnd(Base)
pandas.tests.offsets.test_yqm_offsets.TestYearEnd.test_is_on_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestYearEnd.test_misspecified(self)
pandas.tests.offsets.test_yqm_offsets.TestYearEnd.test_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestYearEndDiffMonth(Base)
pandas.tests.offsets.test_yqm_offsets.TestYearEndDiffMonth.test_is_on_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.TestYearEndDiffMonth.test_offset(self,case)
pandas.tests.offsets.test_yqm_offsets.test_apply_index(cls,n)
pandas.tests.offsets.test_yqm_offsets.test_on_offset(offset)
pandas.tests.offsets.test_yqm_offsets.test_quarterly_dont_normalize()
pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthBegin(Base)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthBegin.test_is_on_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthBegin.test_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthBegin.test_offsets_compare_equal(self)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthEnd(Base)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthEnd.test_is_on_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthEnd.test_normalize(self)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthEnd.test_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBMonthEnd.test_offsets_compare_equal(self)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterBegin(Base)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterBegin.test_is_anchored(self)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterBegin.test_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterBegin.test_offset_corner_case(self)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterBegin.test_repr(self)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterEnd(Base)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterEnd.test_is_anchored(self)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterEnd.test_is_on_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterEnd.test_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterEnd.test_offset_corner_case(self)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBQuarterEnd.test_repr(self)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearBegin(Base)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearBegin.test_misspecified(self)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearBegin.test_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEnd(Base)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEnd.test_is_on_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEnd.test_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEndLagged(Base)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEndLagged.test_bad_month_fail(self)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEndLagged.test_is_on_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEndLagged.test_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestBYearEndLagged.test_roll(self)
pandas.tests.tseries.offsets.test_yqm_offsets.TestMonthBegin(Base)
pandas.tests.tseries.offsets.test_yqm_offsets.TestMonthBegin.test_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestMonthEnd(Base)
pandas.tests.tseries.offsets.test_yqm_offsets.TestMonthEnd.test_day_of_month(self)
pandas.tests.tseries.offsets.test_yqm_offsets.TestMonthEnd.test_is_on_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestMonthEnd.test_normalize(self)
pandas.tests.tseries.offsets.test_yqm_offsets.TestMonthEnd.test_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterBegin(Base)
pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterBegin.test_is_anchored(self)
pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterBegin.test_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterBegin.test_offset_corner_case(self)
pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterBegin.test_repr(self)
pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterEnd(Base)
pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterEnd.test_is_anchored(self)
pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterEnd.test_is_on_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterEnd.test_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterEnd.test_offset_corner_case(self)
pandas.tests.tseries.offsets.test_yqm_offsets.TestQuarterEnd.test_repr(self)
pandas.tests.tseries.offsets.test_yqm_offsets.TestYearBegin(Base)
pandas.tests.tseries.offsets.test_yqm_offsets.TestYearBegin.test_is_on_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestYearBegin.test_misspecified(self)
pandas.tests.tseries.offsets.test_yqm_offsets.TestYearBegin.test_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestYearEnd(Base)
pandas.tests.tseries.offsets.test_yqm_offsets.TestYearEnd.test_is_on_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestYearEnd.test_misspecified(self)
pandas.tests.tseries.offsets.test_yqm_offsets.TestYearEnd.test_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestYearEndDiffMonth(Base)
pandas.tests.tseries.offsets.test_yqm_offsets.TestYearEndDiffMonth.test_is_on_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.TestYearEndDiffMonth.test_offset(self,case)
pandas.tests.tseries.offsets.test_yqm_offsets.test_apply_index(cls,n)
pandas.tests.tseries.offsets.test_yqm_offsets.test_on_offset(offset)
pandas.tests.tseries.offsets.test_yqm_offsets.test_quarterly_dont_normalize()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tseries/offsets/common.py----------------------------------------
A:pandas.tests.tseries.offsets.common.actual_apply->offset.apply(base)
A:pandas.tests.tseries.offsets.common.actual->offset.is_on_offset(date)
pandas.tests.offsets.common.assert_is_on_offset(offset,date,expected)
pandas.tests.offsets.common.assert_offset_equal(offset,base,expected)
pandas.tests.tseries.offsets.common.assert_is_on_offset(offset,date,expected)
pandas.tests.tseries.offsets.common.assert_offset_equal(offset,base,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tseries/offsets/conftest.py----------------------------------------
pandas.tests.offsets.conftest.month_classes(request)
pandas.tests.offsets.conftest.offset_types(request)
pandas.tests.tseries.offsets.conftest.month_classes(request)
pandas.tests.tseries.offsets.conftest.offset_types(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tseries/holiday/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tseries/holiday/test_federal.py----------------------------------------
A:pandas.tests.tseries.holiday.test_federal.holidays->MemorialDay().holidays(start='1971', end='1980').to_pydatetime().tolist()
pandas.tests.tseries.holiday.test_federal.test_memorial_day()
pandas.tests.tseries.holiday.test_federal.test_no_mlk_before_1986()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tseries/holiday/test_observance.py----------------------------------------
A:pandas.tests.tseries.holiday.test_observance._WEDNESDAY->datetime(2014, 4, 9)
A:pandas.tests.tseries.holiday.test_observance._THURSDAY->datetime(2014, 4, 10)
A:pandas.tests.tseries.holiday.test_observance._FRIDAY->datetime(2014, 4, 11)
A:pandas.tests.tseries.holiday.test_observance._SATURDAY->datetime(2014, 4, 12)
A:pandas.tests.tseries.holiday.test_observance._SUNDAY->datetime(2014, 4, 13)
A:pandas.tests.tseries.holiday.test_observance._MONDAY->datetime(2014, 4, 14)
A:pandas.tests.tseries.holiday.test_observance._TUESDAY->datetime(2014, 4, 15)
pandas.tests.tseries.holiday.test_observance.test_after_nearest_workday(day,expected)
pandas.tests.tseries.holiday.test_observance.test_before_nearest_workday(day,expected)
pandas.tests.tseries.holiday.test_observance.test_nearest_workday(day,expected)
pandas.tests.tseries.holiday.test_observance.test_next_monday(day)
pandas.tests.tseries.holiday.test_observance.test_next_monday_or_tuesday(day,expected)
pandas.tests.tseries.holiday.test_observance.test_next_workday(day,expected)
pandas.tests.tseries.holiday.test_observance.test_previous_friday(day)
pandas.tests.tseries.holiday.test_observance.test_previous_workday(day,expected)
pandas.tests.tseries.holiday.test_observance.test_sunday_to_monday()
pandas.tests.tseries.holiday.test_observance.test_weekend_to_monday(day,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tseries/holiday/test_calendar.py----------------------------------------
A:pandas.tests.tseries.holiday.test_calendar.start_date->datetime(2012, 1, 1)
A:pandas.tests.tseries.holiday.test_calendar.end_date->datetime(2012, 12, 31)
A:pandas.tests.tseries.holiday.test_calendar.calendar->USFederalHolidayCalendar()
A:pandas.tests.tseries.holiday.test_calendar.holidays->USFederalHolidayCalendar().holidays(transform(start_date), transform(end_date))
A:pandas.tests.tseries.holiday.test_calendar.jan1->TestCalendar(rules=[Holiday('jan1', year=2015, month=1, day=1)])
A:pandas.tests.tseries.holiday.test_calendar.jan2->TestCalendar(rules=[Holiday('jan2', year=2015, month=1, day=2)])
A:pandas.tests.tseries.holiday.test_calendar.us_fed_cal->get_calendar('USFederalHolidayCalendar')
A:pandas.tests.tseries.holiday.test_calendar.holidays0->get_calendar('USFederalHolidayCalendar').holidays(datetime(2015, 7, 3), datetime(2015, 7, 3))
A:pandas.tests.tseries.holiday.test_calendar.holidays1->get_calendar('USFederalHolidayCalendar').holidays(datetime(2015, 7, 3), datetime(2015, 7, 6))
A:pandas.tests.tseries.holiday.test_calendar.holidays2->get_calendar('USFederalHolidayCalendar').holidays(datetime(2015, 7, 3), datetime(2015, 7, 3))
A:pandas.tests.tseries.holiday.test_calendar.cal->testCalendar()
A:pandas.tests.tseries.holiday.test_calendar.workDay->pandas.offsets.CustomBusinessDay(calendar=cal)
A:pandas.tests.tseries.holiday.test_calendar.Sat_before_Labor_Day_2031->to_datetime('2031-08-30')
pandas.tests.tseries.holiday.test_calendar.test_calendar(transform)
pandas.tests.tseries.holiday.test_calendar.test_calendar_2031()
pandas.tests.tseries.holiday.test_calendar.test_calendar_caching()
pandas.tests.tseries.holiday.test_calendar.test_calendar_observance_dates()
pandas.tests.tseries.holiday.test_calendar.test_rule_from_name()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tseries/holiday/test_holiday.py----------------------------------------
A:pandas.tests.tseries.holiday.test_holiday.calendar->get_calendar('TestCalendar')
A:pandas.tests.tseries.holiday.test_holiday.holiday->Holiday(name, **kwargs)
A:pandas.tests.tseries.holiday.test_holiday.start_date->datetime(2011, 1, 1)
A:pandas.tests.tseries.holiday.test_holiday.end_date->datetime(2020, 12, 31)
A:pandas.tests.tseries.holiday.test_holiday.holidays->pandas.tseries.holiday.USThanksgivingDay.dates(start_date, end_date)
A:pandas.tests.tseries.holiday.test_holiday.holidays2->pandas.tseries.holiday.USThanksgivingDay.dates(transform(start_date), transform(end_date))
A:pandas.tests.tseries.holiday.test_holiday.class_1->HolidayCalendarFactory('MemorialDay', AbstractHolidayCalendar, USMemorialDay)
A:pandas.tests.tseries.holiday.test_holiday.class_2->HolidayCalendarFactory('Thanksgiving', AbstractHolidayCalendar, USThanksgivingDay)
A:pandas.tests.tseries.holiday.test_holiday.class_3->HolidayCalendarFactory('Combined', class_1, class_2)
pandas.tests.tseries.holiday.test_holiday._check_holiday_results(holiday,start,end,expected)
pandas.tests.tseries.holiday.test_holiday.test_argument_types(transform)
pandas.tests.tseries.holiday.test_holiday.test_both_offset_observance_raises()
pandas.tests.tseries.holiday.test_holiday.test_factory()
pandas.tests.tseries.holiday.test_holiday.test_get_calendar()
pandas.tests.tseries.holiday.test_holiday.test_holiday_dates(holiday,start_date,end_date,expected)
pandas.tests.tseries.holiday.test_holiday.test_holidays_within_dates(holiday,start,expected)
pandas.tests.tseries.holiday.test_holiday.test_special_holidays(name,kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tseries/frequencies/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tseries/frequencies/test_inference.py----------------------------------------
A:pandas.tests.tseries.frequencies.test_inference.freq->freq.upper().upper()
A:pandas.tests.tseries.frequencies.test_inference.gen->date_range(start, periods=periods, freq=freq)
A:pandas.tests.tseries.frequencies.test_inference.index->date_range('2013-11-03', periods=5, freq='3H').tz_localize('America/Chicago')
A:pandas.tests.tseries.frequencies.test_inference.inf_freq->pandas.tseries.frequencies.infer_freq(index)
A:pandas.tests.tseries.frequencies.test_inference.dates->to_datetime(['1/1/2000', '1/2/2000', '1/3/2000'])
A:pandas.tests.tseries.frequencies.test_inference.rng->DatetimeIndex(['1/31/2000', '1/31/2001', '1/31/2002'])
A:pandas.tests.tseries.frequencies.test_inference.b->Timestamp(datetime.now())
A:pandas.tests.tseries.frequencies.test_inference.idx->DatetimeIndex(data)
A:pandas.tests.tseries.frequencies.test_inference.vals->DatetimeIndex(['1/31/2000', '1/31/2001', '1/31/2002']).to_pydatetime()
A:pandas.tests.tseries.frequencies.test_inference.result->pandas.tseries.frequencies.infer_freq(Index(data))
A:pandas.tests.tseries.frequencies.test_inference.expected->pandas.tseries.frequencies.infer_freq(data)
A:pandas.tests.tseries.frequencies.test_inference.s->Series(date_range('20130101', periods=10, freq=freq))
A:pandas.tests.tseries.frequencies.test_inference.inferred->pandas.tseries.frequencies.infer_freq(s)
A:pandas.tests.tseries.frequencies.test_inference.left->pandas.tseries.frequencies._get_offset('ms')
A:pandas.tests.tseries.frequencies.test_inference.right->pandas.tseries.frequencies._get_offset('MS')
pandas.tests.tseries.frequencies.test_inference._check_generated_range(start,periods,freq)
pandas.tests.tseries.frequencies.test_inference.base_delta_code_pair(request)
pandas.tests.tseries.frequencies.test_inference.count(request)
pandas.tests.tseries.frequencies.test_inference.day(request)
pandas.tests.tseries.frequencies.test_inference.month(request)
pandas.tests.tseries.frequencies.test_inference.periods(request)
pandas.tests.tseries.frequencies.test_inference.test_annual_ambiguous()
pandas.tests.tseries.frequencies.test_inference.test_annually_infer(month,periods,annual)
pandas.tests.tseries.frequencies.test_inference.test_business_daily()
pandas.tests.tseries.frequencies.test_inference.test_business_daily_look_alike()
pandas.tests.tseries.frequencies.test_inference.test_day_corner()
pandas.tests.tseries.frequencies.test_inference.test_fifth_week_of_month()
pandas.tests.tseries.frequencies.test_inference.test_fifth_week_of_month_infer()
pandas.tests.tseries.frequencies.test_inference.test_infer_freq_business_hour(data,expected)
pandas.tests.tseries.frequencies.test_inference.test_infer_freq_custom(base_delta_code_pair,constructor)
pandas.tests.tseries.frequencies.test_inference.test_infer_freq_delta(base_delta_code_pair,count)
pandas.tests.tseries.frequencies.test_inference.test_infer_freq_index(freq,expected)
pandas.tests.tseries.frequencies.test_inference.test_infer_freq_tz(tz_naive_fixture,expected,dates)
pandas.tests.tseries.frequencies.test_inference.test_infer_freq_tz_transition(tz_naive_fixture,date_pair,freq)
pandas.tests.tseries.frequencies.test_inference.test_infer_freq_tz_transition_custom()
pandas.tests.tseries.frequencies.test_inference.test_invalid_index_types(idx)
pandas.tests.tseries.frequencies.test_inference.test_invalid_index_types_unicode(idx)
pandas.tests.tseries.frequencies.test_inference.test_legacy_offset_warnings(offset_func,freq)
pandas.tests.tseries.frequencies.test_inference.test_monthly_ambiguous()
pandas.tests.tseries.frequencies.test_inference.test_monthly_infer(periods,freq)
pandas.tests.tseries.frequencies.test_inference.test_ms_vs_capital_ms()
pandas.tests.tseries.frequencies.test_inference.test_non_datetime_index()
pandas.tests.tseries.frequencies.test_inference.test_non_datetime_index2()
pandas.tests.tseries.frequencies.test_inference.test_non_dt_index()
pandas.tests.tseries.frequencies.test_inference.test_non_dt_index2()
pandas.tests.tseries.frequencies.test_inference.test_not_monotonic()
pandas.tests.tseries.frequencies.test_inference.test_quarterly_infer(month,periods)
pandas.tests.tseries.frequencies.test_inference.test_raise_if_period_index()
pandas.tests.tseries.frequencies.test_inference.test_raise_if_too_few()
pandas.tests.tseries.frequencies.test_inference.test_series()
pandas.tests.tseries.frequencies.test_inference.test_series_datetime_index(freq)
pandas.tests.tseries.frequencies.test_inference.test_series_dt_index(freq)
pandas.tests.tseries.frequencies.test_inference.test_series_inconvertible_string()
pandas.tests.tseries.frequencies.test_inference.test_series_invalid_type(end)
pandas.tests.tseries.frequencies.test_inference.test_series_period_index(freq)
pandas.tests.tseries.frequencies.test_inference.test_string_datetime_like_compat()
pandas.tests.tseries.frequencies.test_inference.test_string_dt_like_compat()
pandas.tests.tseries.frequencies.test_inference.test_week_of_month_fake()
pandas.tests.tseries.frequencies.test_inference.test_week_of_month_infer(periods,day,count)
pandas.tests.tseries.frequencies.test_inference.test_weekly_infer(periods,day)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tseries/frequencies/test_freq_code.py----------------------------------------
A:pandas.tests.tseries.frequencies.test_freq_code.str_group->pandas._libs.tslibs.resolution.get_freq_group(freqstr)
A:pandas.tests.tseries.frequencies.test_freq_code.code_group->pandas._libs.tslibs.resolution.get_freq_group(code)
A:pandas.tests.tseries.frequencies.test_freq_code.result->_reso.get_freq(_reso.get_str(_reso.get_reso_from_freq(freq)))
pandas.tests.tseries.frequencies.test_freq_code.period_code_item(request)
pandas.tests.tseries.frequencies.test_freq_code.test_cat(args)
pandas.tests.tseries.frequencies.test_freq_code.test_freq_code(freqstr,expected)
pandas.tests.tseries.frequencies.test_freq_code.test_freq_code_match(period_code_item)
pandas.tests.tseries.frequencies.test_freq_code.test_freq_group(freqstr,expected)
pandas.tests.tseries.frequencies.test_freq_code.test_freq_group_match(period_code_item)
pandas.tests.tseries.frequencies.test_freq_code.test_get_code_invalid()
pandas.tests.tseries.frequencies.test_freq_code.test_get_freq_code(freq_input,expected)
pandas.tests.tseries.frequencies.test_freq_code.test_get_freq_roundtrip(freq)
pandas.tests.tseries.frequencies.test_freq_code.test_get_freq_roundtrip2(freq)
pandas.tests.tseries.frequencies.test_freq_code.test_get_str_from_freq(freqstr,expected)
pandas.tests.tseries.frequencies.test_freq_code.test_get_to_timestamp_base(freqstr,exp_freqstr)
pandas.tests.tseries.frequencies.test_freq_code.test_resolution_bumping(args,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tseries/frequencies/test_to_offset.py----------------------------------------
A:pandas.tests.tseries.frequencies.test_to_offset.result->pandas.tseries.frequencies.to_offset(shortcut)
A:pandas.tests.tseries.frequencies.test_to_offset.msg->re.escape('Invalid frequency: {freqstr}'.format(freqstr=freqstr))
A:pandas.tests.tseries.frequencies.test_to_offset.td->Timedelta(microseconds=0)
pandas.tests.tseries.frequencies.test_to_offset.test_anchored_shortcuts(shortcut,expected)
pandas.tests.tseries.frequencies.test_to_offset.test_to_offset(freq_input,expected)
pandas.tests.tseries.frequencies.test_to_offset.test_to_offset_invalid(freqstr)
pandas.tests.tseries.frequencies.test_to_offset.test_to_offset_leading_plus(freqstr,expected)
pandas.tests.tseries.frequencies.test_to_offset.test_to_offset_leading_zero(freqstr,expected)
pandas.tests.tseries.frequencies.test_to_offset.test_to_offset_negative(freqstr,expected)
pandas.tests.tseries.frequencies.test_to_offset.test_to_offset_no_evaluate()
pandas.tests.tseries.frequencies.test_to_offset.test_to_offset_pd_timedelta(kwargs,expected)
pandas.tests.tseries.frequencies.test_to_offset.test_to_offset_pd_timedelta_invalid()
pandas.tests.tseries.frequencies.test_to_offset.test_to_offset_whitespace(freqstr,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_validate.py----------------------------------------
A:pandas.tests.series.test_validate.kwargs->dict(inplace=inplace)
pandas.tests.series.test_validate.TestSeriesValidate
pandas.tests.series.test_validate.TestSeriesValidate.test_validate_bool_args(self,string_series,func,inplace)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_ufunc.py----------------------------------------
A:pandas.tests.series.test_ufunc.a1->SparseArray(a1, dtype=pd.SparseDtype('int64', 0))
A:pandas.tests.series.test_ufunc.a2->SparseArray(a2, dtype=pd.SparseDtype('int64', 0))
A:pandas.tests.series.test_ufunc.array->SparseArray(array)
A:pandas.tests.series.test_ufunc.index->list(string.ascii_letters[:10])
A:pandas.tests.series.test_ufunc.series->pandas.Series(array, name='name')
A:pandas.tests.series.test_ufunc.result->numpy.add(s, Thing(1))
A:pandas.tests.series.test_ufunc.expected->pandas.Series([Thing(2), Thing(3)])
A:pandas.tests.series.test_ufunc.array_args->tuple(reversed(array_args))
A:pandas.tests.series.test_ufunc.series_args->tuple(reversed(series_args))
A:pandas.tests.series.test_ufunc.other->getattr(other, 'value', other)
A:pandas.tests.series.test_ufunc.idx->numpy.random.permutation(len(a1))
A:pandas.tests.series.test_ufunc.s1->pandas.Series(a1, name='a')
A:pandas.tests.series.test_ufunc.s2->pandas.Series(a2, name='b')
A:pandas.tests.series.test_ufunc.arr->numpy.array([Dummy(0), Dummy(1)])
A:pandas.tests.series.test_ufunc.ser->pandas.Series(arr)
A:pandas.tests.series.test_ufunc.a->pandas.Series([1, 2, 3], name='name')
A:pandas.tests.series.test_ufunc.b->type_([3, 4, 5])
A:pandas.tests.series.test_ufunc.s->pandas.Series([1, 2, 3])
A:pandas.tests.series.test_ufunc.o->numpy.array([1, 2, 3])
pandas.tests.series.test_ufunc.arrays_for_binary_ufunc()
pandas.tests.series.test_ufunc.test_binary_ufunc_drops_series_name(ufunc,sparse,arrays_for_binary_ufunc)
pandas.tests.series.test_ufunc.test_binary_ufunc_other_types(type_)
pandas.tests.series.test_ufunc.test_binary_ufunc_scalar(ufunc,sparse,flip,arrays_for_binary_ufunc)
pandas.tests.series.test_ufunc.test_binary_ufunc_with_array(flip,sparse,ufunc,arrays_for_binary_ufunc)
pandas.tests.series.test_ufunc.test_binary_ufunc_with_index(flip,sparse,ufunc,arrays_for_binary_ufunc)
pandas.tests.series.test_ufunc.test_binary_ufunc_with_series(flip,shuffle,sparse,ufunc,arrays_for_binary_ufunc)
pandas.tests.series.test_ufunc.test_multiple_ouput_binary_ufuncs(ufunc,sparse,shuffle,arrays_for_binary_ufunc)
pandas.tests.series.test_ufunc.test_multiple_ouput_ufunc(sparse,arrays_for_binary_ufunc)
pandas.tests.series.test_ufunc.test_object_dtype_ok()
pandas.tests.series.test_ufunc.test_object_series_ok()
pandas.tests.series.test_ufunc.test_outer()
pandas.tests.series.test_ufunc.test_reduce(values)
pandas.tests.series.test_ufunc.test_unary_ufunc(ufunc,sparse)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_internals.py----------------------------------------
A:pandas.tests.series.test_internals.s->Series([False, True, False, False], dtype=object)
A:pandas.tests.series.test_internals.results->Series([False, True, False, False], dtype=object)._convert(True, True, False)
A:pandas.tests.series.test_internals.expected->Series([NaT])
A:pandas.tests.series.test_internals.dt->datetime(2001, 1, 1, 0, 0)
A:pandas.tests.series.test_internals.result->pandas.Series(['2015'], dtype='datetime64[ns]')
A:pandas.tests.series.test_internals.r->Series([False, True, False, False], dtype=object)._convert(datetime=True, numeric=True)
A:pandas.tests.series.test_internals.s2->Series([datetime(2001, 1, 1, 0, 0), datetime(2001, 1, 2, 0, 0), datetime(2001, 1, 3, 0, 0), 'foo', 1.0, 1, Timestamp('20010104'), '20010105'], dtype='O')
A:pandas.tests.series.test_internals.e->Series([False, True, False, False], dtype=bool)
A:pandas.tests.series.test_internals.ser->pandas.Index([0, 1]).to_series()
A:pandas.tests.series.test_internals.idx->pandas.Index([0, 1])
pandas.tests.series.test_internals.TestSeriesInternals
pandas.tests.series.test_internals.TestSeriesInternals.test_astype_no_pandas_dtype(self)
pandas.tests.series.test_internals.TestSeriesInternals.test_constructor_no_pandas_array(self)
pandas.tests.series.test_internals.TestSeriesInternals.test_convert(self)
pandas.tests.series.test_internals.TestSeriesInternals.test_convert_no_arg_error(self)
pandas.tests.series.test_internals.TestSeriesInternals.test_convert_preserve_all_bool(self)
pandas.tests.series.test_internals.TestSeriesInternals.test_convert_preserve_bool(self)
pandas.tests.series.test_internals.TestSeriesInternals.test_from_array(self)
pandas.tests.series.test_internals.TestSeriesInternals.test_from_list_dtype(self)
pandas.tests.series.test_internals.test_hasnans_unchached_for_series()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_operators.py----------------------------------------
A:pandas.tests.series.test_operators.ser->pandas._testing.makeStringSeries()
A:pandas.tests.series.test_operators.mask->pandas._testing.makeStringSeries().isna()
A:pandas.tests.series.test_operators.filled->pandas._testing.makeStringSeries().fillna(ser[0])
A:pandas.tests.series.test_operators.result->Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd']).rdivmod(b)
A:pandas.tests.series.test_operators.expected->divmod(b, a)
A:pandas.tests.series.test_operators.index->list('bca')
A:pandas.tests.series.test_operators.s_tft->Series([True, False, True], index=index)
A:pandas.tests.series.test_operators.s_fff->Series([False, False, False], index=index)
A:pandas.tests.series.test_operators.s_empty->Series([], dtype=object)
A:pandas.tests.series.test_operators.s_0123->Series(range(4), dtype='int64')
A:pandas.tests.series.test_operators.s_3333->Series([3] * 4)
A:pandas.tests.series.test_operators.s_4444->Series([4] * 4)
A:pandas.tests.series.test_operators.s_1111->Series([1] * 4, dtype='int8')
A:pandas.tests.series.test_operators.s_abNd->Series(['a', 'b', np.NaN, 'd'])
A:pandas.tests.series.test_operators.left->Series([1, 3, 2], index=list('abc'))
A:pandas.tests.series.test_operators.s_tff->Series([True, False, False], index=index)
A:pandas.tests.series.test_operators.s_a0b1c0->Series([1], list('b'))
A:pandas.tests.series.test_operators.s->Series([Decimal('1.3'), Decimal('2.3')], index=[date(2012, 1, 1), date(2012, 1, 2)])
A:pandas.tests.series.test_operators.d->Series(list('acb'), dtype='object')
A:pandas.tests.series.test_operators.idx1->Index([True, False, True, False])
A:pandas.tests.series.test_operators.idx2->Index([1, 0, 1, 0])
A:pandas.tests.series.test_operators.idx->Index([False, True])
A:pandas.tests.series.test_operators.a->Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
A:pandas.tests.series.test_operators.b->Series([2, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
A:pandas.tests.series.test_operators.empty->Series([], index=Index([]), dtype=np.float64)
A:pandas.tests.series.test_operators.t->Series([True, False, True])
A:pandas.tests.series.test_operators.s1->Series(range(1, 10))
A:pandas.tests.series.test_operators.s2->Series('foo', index=index)
A:pandas.tests.series.test_operators.exp->equiv_op(a, b)
A:pandas.tests.series.test_operators.exp_or1->pandas.Series([True, True, True, False], index=list('ABCD'), name='x')
A:pandas.tests.series.test_operators.exp_or->pandas.Series([True, True, True, True], index=list('ABCD'), name='x')
A:pandas.tests.series.test_operators.s3->pandas.Series([1, 2, 3], index=list('ABC'), name='x')
A:pandas.tests.series.test_operators.s4->pandas.Series([2, 2, 2, 2], index=list('ABCD'), name='x')
A:pandas.tests.series.test_operators.right->Series([2, 2, 2], index=list('bcd'))
A:pandas.tests.series.test_operators.c->Series(['a', 'b', 'cc'], dtype='object')
A:pandas.tests.series.test_operators.e->Categorical(list('abc'))
A:pandas.tests.series.test_operators.f->getattr(operator, op)
A:pandas.tests.series.test_operators.cat->Series(Categorical(list('abc'), ordered=True))
A:pandas.tests.series.test_operators.ts->Series([3, 4, 5, 6, 7], [3, 4, 5, 6, 7], dtype=float)
A:pandas.tests.series.test_operators.dt->Series(date_range('2012-1-1', periods=3, freq='D'))
A:pandas.tests.series.test_operators.lop->getattr(Series, op)
A:pandas.tests.series.test_operators.lequiv->getattr(operator, op)
A:pandas.tests.series.test_operators.rop->getattr(Series, 'r' + op)
A:pandas.tests.series.test_operators.exp_index->Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd']).index.union(b.index)
A:pandas.tests.series.test_operators.amask->isna(a)
A:pandas.tests.series.test_operators.bmask->isna(b)
pandas.tests.series.test_operators.TestSeriesComparisons
pandas.tests.series.test_operators.TestSeriesComparisons.test_categorical_comparisons(self)
pandas.tests.series.test_operators.TestSeriesComparisons.test_comp_ops_df_compat(self)
pandas.tests.series.test_operators.TestSeriesComparisons.test_compare_series_interval_keyword(self)
pandas.tests.series.test_operators.TestSeriesComparisons.test_comparison_operators_with_nas(self)
pandas.tests.series.test_operators.TestSeriesComparisons.test_comparison_tuples(self)
pandas.tests.series.test_operators.TestSeriesComparisons.test_comparisons(self)
pandas.tests.series.test_operators.TestSeriesComparisons.test_ne(self)
pandas.tests.series.test_operators.TestSeriesComparisons.test_unequal_categorical_comparison_raises_type_error(self)
pandas.tests.series.test_operators.TestSeriesFlexComparisonOps
pandas.tests.series.test_operators.TestSeriesFlexComparisonOps.test_comparison_flex_alignment(self)
pandas.tests.series.test_operators.TestSeriesFlexComparisonOps.test_comparison_flex_alignment_fill(self)
pandas.tests.series.test_operators.TestSeriesLogicalOps
pandas.tests.series.test_operators.TestSeriesLogicalOps.test_bool_operators_with_nas(self,bool_op)
pandas.tests.series.test_operators.TestSeriesLogicalOps.test_logical_operators_bool_dtype_with_empty(self)
pandas.tests.series.test_operators.TestSeriesLogicalOps.test_logical_operators_bool_dtype_with_int(self)
pandas.tests.series.test_operators.TestSeriesLogicalOps.test_logical_operators_int_dtype_with_bool(self)
pandas.tests.series.test_operators.TestSeriesLogicalOps.test_logical_operators_int_dtype_with_bool_dtype_and_reindex(self)
pandas.tests.series.test_operators.TestSeriesLogicalOps.test_logical_operators_int_dtype_with_float(self)
pandas.tests.series.test_operators.TestSeriesLogicalOps.test_logical_operators_int_dtype_with_int_dtype(self)
pandas.tests.series.test_operators.TestSeriesLogicalOps.test_logical_operators_int_dtype_with_int_scalar(self)
pandas.tests.series.test_operators.TestSeriesLogicalOps.test_logical_operators_int_dtype_with_object(self)
pandas.tests.series.test_operators.TestSeriesLogicalOps.test_logical_operators_int_dtype_with_str(self)
pandas.tests.series.test_operators.TestSeriesLogicalOps.test_logical_operators_nans(self,left,right,op,expected)
pandas.tests.series.test_operators.TestSeriesLogicalOps.test_logical_ops_bool_dtype_with_ndarray(self)
pandas.tests.series.test_operators.TestSeriesLogicalOps.test_logical_ops_df_compat(self)
pandas.tests.series.test_operators.TestSeriesLogicalOps.test_logical_ops_label_based(self)
pandas.tests.series.test_operators.TestSeriesLogicalOps.test_logical_ops_with_index(self,op)
pandas.tests.series.test_operators.TestSeriesLogicalOps.test_reverse_ops_with_index(self,op,expected)
pandas.tests.series.test_operators.TestSeriesLogicalOps.test_reversed_logical_op_with_index_returns_series(self,op)
pandas.tests.series.test_operators.TestSeriesLogicalOps.test_reversed_xor_with_index_returns_index(self)
pandas.tests.series.test_operators.TestSeriesLogicalOps.test_scalar_na_logical_ops_corners(self)
pandas.tests.series.test_operators.TestSeriesOperators
pandas.tests.series.test_operators.TestSeriesOperators.test_divmod(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_op_duplicate_index(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_operators_combine(self,op,equiv_op,fv)
pandas.tests.series.test_operators.TestSeriesOperators.test_operators_corner(self,datetime_series)
pandas.tests.series.test_operators.TestSeriesOperators.test_operators_empty_int_corner(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_operators_na_handling(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_ops_datetimelike_align(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_ops_dtlike_align(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_series_integer_mod(self,index)
pandas.tests.series.test_operators.TestSeriesUnaryOps
pandas.tests.series.test_operators.TestSeriesUnaryOps.test_invert(self)
pandas.tests.series.test_operators.TestSeriesUnaryOps.test_neg(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_duplicates.py----------------------------------------
A:pandas.tests.series.test_duplicates.series->Series(np.random.randn(500))
A:pandas.tests.series.test_duplicates.result->Series(li, index=list(range(5))).unique()
A:pandas.tests.series.test_duplicates.s->Series(li, index=list(range(5)))
A:pandas.tests.series.test_duplicates.expected->numpy.array([1, 2, 3, None], dtype=object)
A:pandas.tests.series.test_duplicates.captured->capsys.readouterr()
pandas.tests.series.test_duplicates.test_is_unique(data,expected)
pandas.tests.series.test_duplicates.test_is_unique_class_ne(capsys)
pandas.tests.series.test_duplicates.test_nunique()
pandas.tests.series.test_duplicates.test_unique()
pandas.tests.series.test_duplicates.test_unique_data_ownership()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_convert_dtypes.py----------------------------------------
A:pandas.tests.series.test_convert_dtypes.series->pandas.Series(data)
A:pandas.tests.series.test_convert_dtypes.ns->pandas.Series(data).convert_dtypes(*params)
A:pandas.tests.series.test_convert_dtypes.expected->pandas.Series(series.values, dtype=expected_dtype)
A:pandas.tests.series.test_convert_dtypes.copy->pandas.Series(data).copy(deep=True)
A:pandas.tests.series.test_convert_dtypes.df->pandas.DataFrame({'A': pd.array([True])})
A:pandas.tests.series.test_convert_dtypes.result->pandas.DataFrame({'A': pd.array([True])}).convert_dtypes()
pandas.tests.series.test_convert_dtypes.TestSeriesConvertDtypes
pandas.tests.series.test_convert_dtypes.TestSeriesConvertDtypes.test_convert_bool_dtype(self)
pandas.tests.series.test_convert_dtypes.TestSeriesConvertDtypes.test_convert_dtypes(self,data,maindtype,params,answerdict)
pandas.tests.series.test_convert_dtypes.TestSeriesConvertDtypes.test_convert_string_dtype(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_apply.py----------------------------------------
A:pandas.tests.series.test_apply.s->pandas.Series(vals + [np.nan])
A:pandas.tests.series.test_apply.rs->pandas.Series(vals + [np.nan]).apply(lambda x: x)
A:pandas.tests.series.test_apply.result->pandas.Series(1 / 3).map(lambda val: str(val)).to_dict()
A:pandas.tests.series.test_apply.expected->Series([np.nan, np.nan, 'three'])
A:pandas.tests.series.test_apply.ser->pandas.Series(1 / 3)
A:pandas.tests.series.test_apply.res->pandas.Series(vals + [np.nan]).apply(lambda x: f'{type(x).__name__}_{x.freqstr}')
A:pandas.tests.series.test_apply.exp->pandas.Series(['Asia/Tokyo'] * 25, name='XX')
A:pandas.tests.series.test_apply.values->pandas.date_range('2011-01-01', '2011-01-02', freq='H').tz_localize('Asia/Tokyo')
A:pandas.tests.series.test_apply.exp_values->pandas.date_range('2011-01-02', '2011-01-03', freq='H').tz_localize('Asia/Tokyo')
A:pandas.tests.series.test_apply.tsdf->pandas.DataFrame(np.random.randn(10, 3), columns=['A', 'B', 'C'], index=pd.date_range('1/1/2000', periods=10))
A:pandas.tests.series.test_apply.f_sqrt->numpy.sqrt(string_series)
A:pandas.tests.series.test_apply.f_abs->numpy.abs(string_series)
A:pandas.tests.series.test_apply.(index, data)->pandas._testing.getMixedTypeDict()
A:pandas.tests.series.test_apply.source->Series(data['B'], index=data['C'])
A:pandas.tests.series.test_apply.target->Series(data['C'][:4], index=data['D'][:4])
A:pandas.tests.series.test_apply.merged->Series({'a': 1.0, 'b': 2.0, 'c': 3.0, 'd': 4}).map(right)
A:pandas.tests.series.test_apply.a->Series(['a', 'b', 'c', 'd'])
A:pandas.tests.series.test_apply.b->Series(['B', 'C', 'D', 'E'], dtype='category', index=pd.CategoricalIndex(['b', 'c', 'd', 'e']))
A:pandas.tests.series.test_apply.c->Series(['B', 'C', 'D', 'E'], index=Index(['b', 'c', 'd', 'e']))
A:pandas.tests.series.test_apply.left->Series({'a': 1.0, 'b': 2.0, 'c': 3.0, 'd': 4})
A:pandas.tests.series.test_apply.right->Series({1: 11, 2: 22, 3: 33})
A:pandas.tests.series.test_apply.s2->pandas.Series(vals + [np.nan]).map(lambda x: np.where(x == 0, 0, 1))
A:pandas.tests.series.test_apply.df->pandas.DataFrame({'a': [(1,), (2,), (3, 4), (5, 6)]})
A:pandas.tests.series.test_apply.df['labels']->df['a'].map(label_mappings)
A:pandas.tests.series.test_apply.df['expected_labels']->pandas.Series(['A', 'B', 'A', 'B'], index=df.index)
A:pandas.tests.series.test_apply.counter->Counter()
A:pandas.tests.series.test_apply.default_dict->defaultdict(lambda : 'blank')
A:pandas.tests.series.test_apply.dictionary->DictWithoutMissing({3: 'three'})
A:pandas.tests.series.test_apply.not_a_dictionary->NonDictMappingWithMissing({3: 'three'})
A:pandas.tests.series.test_apply.series->pandas._testing.makeTimeSeries(nper=30).tz_localize('UTC')
pandas.tests.series.test_apply.TestSeriesAggregate
pandas.tests.series.test_apply.TestSeriesAggregate.test_agg_apply_evaluate_lambdas_the_same(self,string_series)
pandas.tests.series.test_apply.TestSeriesAggregate.test_agg_cython_table(self,series,func,expected)
pandas.tests.series.test_apply.TestSeriesAggregate.test_agg_cython_table_raises(self,series,func,expected)
pandas.tests.series.test_apply.TestSeriesAggregate.test_agg_cython_table_transform(self,series,func,expected)
pandas.tests.series.test_apply.TestSeriesAggregate.test_demo(self)
pandas.tests.series.test_apply.TestSeriesAggregate.test_multiple_aggregators_with_dict_api(self)
pandas.tests.series.test_apply.TestSeriesAggregate.test_non_callable_aggregates(self)
pandas.tests.series.test_apply.TestSeriesAggregate.test_reduce(self,string_series)
pandas.tests.series.test_apply.TestSeriesAggregate.test_replicate_describe(self,string_series)
pandas.tests.series.test_apply.TestSeriesAggregate.test_transform(self,string_series)
pandas.tests.series.test_apply.TestSeriesAggregate.test_transform_and_agg_error(self,string_series)
pandas.tests.series.test_apply.TestSeriesAggregate.test_with_nested_series(self,datetime_series)
pandas.tests.series.test_apply.TestSeriesApply
pandas.tests.series.test_apply.TestSeriesApply.test_apply(self,datetime_series)
pandas.tests.series.test_apply.TestSeriesApply.test_apply_args(self)
pandas.tests.series.test_apply.TestSeriesApply.test_apply_box(self)
pandas.tests.series.test_apply.TestSeriesApply.test_apply_categorical(self)
pandas.tests.series.test_apply.TestSeriesApply.test_apply_categorical_with_nan_values(self,series)
pandas.tests.series.test_apply.TestSeriesApply.test_apply_datetimetz(self)
pandas.tests.series.test_apply.TestSeriesApply.test_apply_dict_depr(self)
pandas.tests.series.test_apply.TestSeriesApply.test_apply_dont_convert_dtype(self)
pandas.tests.series.test_apply.TestSeriesApply.test_apply_dttz(self)
pandas.tests.series.test_apply.TestSeriesApply.test_apply_empty_integer_series_with_datetime_index(self)
pandas.tests.series.test_apply.TestSeriesApply.test_apply_empty_integer_series_with_dt_index(self)
pandas.tests.series.test_apply.TestSeriesApply.test_apply_same_length_inference_bug(self)
pandas.tests.series.test_apply.TestSeriesApply.test_series_map_box_timestamps(self)
pandas.tests.series.test_apply.TestSeriesApply.test_with_string_args(self,datetime_series)
pandas.tests.series.test_apply.TestSeriesMap
pandas.tests.series.test_apply.TestSeriesMap.test_apply_scaler_on_date_time_index_aware_series(self)
pandas.tests.series.test_apply.TestSeriesMap.test_apply_series_on_date_time_index_aware_series(self,dti,exp)
pandas.tests.series.test_apply.TestSeriesMap.test_map(self,datetime_series)
pandas.tests.series.test_apply.TestSeriesMap.test_map_abc_mapping(self,non_mapping_dict_subclass)
pandas.tests.series.test_apply.TestSeriesMap.test_map_abc_mapping_with_missing(self,non_mapping_dict_subclass)
pandas.tests.series.test_apply.TestSeriesMap.test_map_box(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_categorical(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_compat(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_counter(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_datetimetz(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_decimal(self,string_series)
pandas.tests.series.test_apply.TestSeriesMap.test_map_defaultdict(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_dict_na_key(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_dict_subclass_with_missing(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_dict_subclass_without_missing(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_dict_with_tuple_keys(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_dttz(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_empty(self,index)
pandas.tests.series.test_apply.TestSeriesMap.test_map_float_to_string_precision(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_int(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_missing_mixed(self,vals,mapping,exp)
pandas.tests.series.test_apply.TestSeriesMap.test_map_na_exclusion(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_type_inference(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_period.py----------------------------------------
A:pandas.tests.series.test_period.self.series->Series(period_range('2000-01-01', periods=10, freq='D'))
A:pandas.tests.series.test_period.series->Series([0, 1000, 2000, pd._libs.iNaT], dtype='period[D]')
A:pandas.tests.series.test_period.exp->Series([pd.Period('2011-01', freq='M'), pd.Period('2012-01', freq='M')])
A:pandas.tests.series.test_period.s->Series(input_vals)
A:pandas.tests.series.test_period.res->Series(input_vals).fillna(pd.Period('2012-01', freq='M'))
A:pandas.tests.series.test_period.result->Series([input_vals], dtype='datetime64[ns]').dt.to_period('D')
A:pandas.tests.series.test_period.expected->Series([input_vals], dtype='Period[D]')
A:pandas.tests.series.test_period.df->DataFrame({'a': self.series, 'b': ['foo'] * len(self.series)})
A:pandas.tests.series.test_period.rng->period_range('1/1/2000', '1/1/2010', freq='A')
A:pandas.tests.series.test_period.ts->Series(np.random.randn(len(rng)), index=rng)
A:pandas.tests.series.test_period.idx1->pandas.PeriodIndex([pd.Period('2017-09-02'), pd.Period('2017-09-02'), pd.Period('2017-09-03')])
A:pandas.tests.series.test_period.series1->pandas.Series([1, 2, 3], index=idx1)
A:pandas.tests.series.test_period.result1->pandas.Series([1, 2, 3], index=idx1).truncate(after='2017-09-02')
A:pandas.tests.series.test_period.expected_idx1->pandas.PeriodIndex([pd.Period('2017-09-02'), pd.Period('2017-09-02')])
A:pandas.tests.series.test_period.idx2->pandas.PeriodIndex([pd.Period('2017-09-03'), pd.Period('2017-09-02'), pd.Period('2017-09-03')])
A:pandas.tests.series.test_period.series2->pandas.Series([1, 2, 3], index=idx2)
A:pandas.tests.series.test_period.result2->pandas.Series([1, 2, 3], index=idx2).sort_index().truncate(after='2017-09-02')
A:pandas.tests.series.test_period.expected_idx2->pandas.PeriodIndex([pd.Period('2017-09-02')])
A:pandas.tests.series.test_period.input_vals->pandas.core.arrays.PeriodArray._from_sequence(np.asarray(input_vals))
pandas.tests.series.test_period.TestSeriesPeriod
pandas.tests.series.test_period.TestSeriesPeriod.setup_method(self,method)
pandas.tests.series.test_period.TestSeriesPeriod.test_NaT_cast(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_NaT_scalar(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_align_series(self,join_type)
pandas.tests.series.test_period.TestSeriesPeriod.test_auto_conversion(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_between(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_dropna(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_end_time_timevalues(self,input_vals)
pandas.tests.series.test_period.TestSeriesPeriod.test_fillna(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_getitem(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_intercept_astype_object(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_isna(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_set_nan(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_set_none(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_to_period(self,input_vals)
pandas.tests.series.test_period.TestSeriesPeriod.test_truncate(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_datetime_values.py----------------------------------------
A:pandas.tests.series.test_datetime_values.result->getattr(s.dt, attr)
A:pandas.tests.series.test_datetime_values.a->getattr(s.dt, prop)
A:pandas.tests.series.test_datetime_values.b->get_expected(s, prop)
A:pandas.tests.series.test_datetime_values.exp_values->pandas.to_datetime(['2012-01-01', '2012-01-01', '2012-01-01']).tz_localize('US/Eastern')
A:pandas.tests.series.test_datetime_values.expected->pandas.Series([pd.Timestamp('2000-01-01 00:00:00-05:00', tz='US/Eastern'), pd.Timestamp('2000-01-02 00:00:00-06:00', tz='US/Central')], dtype=object)
A:pandas.tests.series.test_datetime_values.s->Series(dtindex)
A:pandas.tests.series.test_datetime_values.index->date_range('20130101', periods=3, freq='D')
A:pandas.tests.series.test_datetime_values.exp->pandas.Series([s[0]] * 3, index=index, name='xxx')
A:pandas.tests.series.test_datetime_values.results->get_dir(s)
A:pandas.tests.series.test_datetime_values.df1->pandas.DataFrame([pd.to_datetime('2017-10-29 02:00:00+02:00', utc=True), pd.to_datetime('2017-10-29 02:00:00+01:00', utc=True), pd.to_datetime('2017-10-29 03:00:00+01:00', utc=True)], columns=['date'])
A:pandas.tests.series.test_datetime_values.df1['date']->df1['date'].dt.tz_convert('Europe/Madrid').dt.tz_convert('Europe/Madrid')
A:pandas.tests.series.test_datetime_values.dti->DatetimeIndex(['20171111', '20181212']).repeat(2)
A:pandas.tests.series.test_datetime_values.datetimes->pandas.Series(['2018-01-01', '2018-01-01', '2019-01-02'], dtype='datetime64[ns]')
A:pandas.tests.series.test_datetime_values.categorical->pandas.Series(['2018-01-01', '2018-01-01', '2019-01-02'], dtype='datetime64[ns]').astype('category')
A:pandas.tests.series.test_datetime_values.name->name.capitalize().capitalize()
A:pandas.tests.series.test_datetime_values.datetime_index->date_range('20150301', periods=5)
A:pandas.tests.series.test_datetime_values.period_index->period_range('20150301', periods=5)
A:pandas.tests.series.test_datetime_values.rng->pandas.DatetimeIndex(['2014-04-04 23:56', '2014-07-18 21:24', '2015-11-22 22:14'], tz='US/Eastern')
A:pandas.tests.series.test_datetime_values.series->pandas.Series(pd.date_range('2012-01-01', periods=3))
A:pandas.tests.series.test_datetime_values.offset->pandas.offsets.DateOffset(days=6)
A:pandas.tests.series.test_datetime_values.tz->maybe_get_tz(tz_naive_fixture)
A:pandas.tests.series.test_datetime_values.dtindex->pandas.DatetimeIndex(['2014-04-04 23:56', '2014-07-18 21:24', '2015-11-22 22:14'], tz=tz)
A:pandas.tests.series.test_datetime_values.x->pandas.Series([1, 2, 3], index=['Date', 'b', 'other'])
A:pandas.tests.series.test_datetime_values.x['Date']->datetime.date.today()
A:pandas.tests.series.test_datetime_values.ser->pandas.Series(pd.date_range('2000', periods=2, tz='US/Central'))
A:pandas.tests.series.test_datetime_values.ser[0]->pandas.Timestamp('2000', tz='US/Eastern')
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_between(self)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_date_tz(self)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_datetime_understood(self)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_dt_accessor_api(self)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_dt_accessor_datetime_name_accessors(self,time_locale)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_dt_accessor_invalid(self,ser)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_dt_accessor_no_new_attributes(self)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_dt_accessor_updates_on_inplace(self)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_dt_namespace_accessor(self)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_dt_namespace_accessor_categorical(self)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_dt_other_accessors_categorical(self,accessor)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_dt_round(self,method,dates)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_dt_round_tz(self)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_dt_round_tz_ambiguous(self,method)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_dt_round_tz_nonexistent(self,method,ts_str,freq)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_dt_timetz_accessor(self,tz_naive_fixture)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_dt_tz_convert_categorical(self,tz_aware_fixture)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_dt_tz_localize_categorical(self,tz_aware_fixture)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_setitem_with_different_tz(self)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_setitem_with_string_index(self)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_strftime(self)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_strftime_nat(self,data)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_valid_dt_with_missing_values(self)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_between(self)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_date_tz(self)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_dt_accessor_api(self)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_dt_accessor_dt_name_accessors(self,time_locale)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_dt_accessor_invalid(self,ser)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_dt_accessor_no_new_attributes(self)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_dt_accessor_updates_on_inplace(self)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_dt_namespace_accessor(self)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_dt_namespace_accessor_categorical(self)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_dt_other_accessors_categorical(self,accessor)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_dt_round(self,method,dates)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_dt_round_tz(self)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_dt_round_tz_ambiguous(self,method)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_dt_round_tz_nonexistent(self,method,ts_str,freq)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_dt_timetz_accessor(self,tz_naive_fixture)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_dt_tz_convert_categorical(self,tz_aware_fixture)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_dt_tz_localize_categorical(self,tz_aware_fixture)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_dt_understood(self)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_setitem_with_different_tz(self)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_setitem_with_string_index(self)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_strftime(self)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_strftime_nat(self,data)
pandas.tests.series.test_dt_values.TestSeriesDatetimeValues.test_valid_dt_with_missing_values(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_timezones.py----------------------------------------
A:pandas.tests.series.test_timezones.rng->date_range('4/16/2012', '5/1/2012', freq='H')
A:pandas.tests.series.test_timezones.ts->Series(index=index, data=index.hour)
A:pandas.tests.series.test_timezones.result->Series([Timestamp('2019', tz=tz)], dtype='datetime64[ns]')
A:pandas.tests.series.test_timezones.expected0->Series([expected0])
A:pandas.tests.series.test_timezones.expected1->Series([expected1])
A:pandas.tests.series.test_timezones.ser->Series(np.random.randn(len(idx1)), index=idx1)
A:pandas.tests.series.test_timezones.dti->date_range(start='2015-03-29 02:00:00', periods=n, freq='min')
A:pandas.tests.series.test_timezones.s->Series(range(len(idx)), index=idx)
A:pandas.tests.series.test_timezones.expected->Series([Timestamp('2019')])
A:pandas.tests.series.test_timezones.ser2->Series(np.random.randn(90), index=rng.take(perm).tz_convert('Europe/Berlin'))
A:pandas.tests.series.test_timezones.base->DatetimeIndex(['2011-01-01', '2011-01-02', '2011-01-03'], tz='UTC')
A:pandas.tests.series.test_timezones.rng1->date_range('1/1/2016 01:00', periods=3, freq='H', tz='US/Eastern')
A:pandas.tests.series.test_timezones.rng2->date_range('8/1/2016 01:00', periods=3, freq='H', tz='US/Eastern')
A:pandas.tests.series.test_timezones.ser1->Series(np.random.randn(90), index=rng.take(perm).tz_convert('US/Eastern'))
A:pandas.tests.series.test_timezones.ts_result->Series(np.random.randn(90), index=rng.take(perm).tz_convert('US/Eastern')).append(ser2)
A:pandas.tests.series.test_timezones.exp_index->DatetimeIndex(['2016-01-01 01:00', '2016-01-01 02:00', '2016-01-01 03:00', '2016-08-01 01:00', '2016-08-01 02:00', '2016-08-01 03:00'], tz='US/Eastern')
A:pandas.tests.series.test_timezones.exp->Series([1, 2, 3, 10, 11, 12], index=exp_index)
A:pandas.tests.series.test_timezones.tzinfo->tzoffset(None, 7200)
A:pandas.tests.series.test_timezones.series->Series(data=values, index=index)
A:pandas.tests.series.test_timezones.dr->date_range('2011-12-01', '2012-07-20', freq='D', tz=tz)
A:pandas.tests.series.test_timezones.ts_moscow->Series(np.random.randn(len(idx1)), index=idx1).tz_convert('Europe/Moscow')
A:pandas.tests.series.test_timezones.uts1->Series(np.random.randn(90), index=rng.take(perm).tz_convert('US/Eastern')).tz_convert('utc')
A:pandas.tests.series.test_timezones.uts2->Series(np.random.randn(90), index=rng.take(perm).tz_convert('Europe/Berlin')).tz_convert('utc')
A:pandas.tests.series.test_timezones.ser_utc->Series(np.random.randn(len(idx1)), index=idx1).tz_localize('utc')
A:pandas.tests.series.test_timezones.idx1->date_range('2001', periods=5, freq='H', tz='US/Eastern')
A:pandas.tests.series.test_timezones.ser_central->Series(np.random.randn(len(idx1)), index=idx1).tz_convert('US/Central')
A:pandas.tests.series.test_timezones.(new1, new2)->Series(np.random.randn(len(idx1)), index=idx1).align(ser_central)
A:pandas.tests.series.test_timezones.tz->pandas._libs.tslibs.timezones.maybe_get_tz(tzstr)
A:pandas.tests.series.test_timezones.ts_local->Series(index=index, data=index.hour).tz_localize(tzstr)
A:pandas.tests.series.test_timezones.index->date_range(start='2012-12-24 16:00', end='2012-12-24 18:00', freq='H', tz=tzstr)
A:pandas.tests.series.test_timezones.time_pandas->Timestamp('2012-12-24 17:00', tz=tzstr)
A:pandas.tests.series.test_timezones.dt->datetime(2012, 12, 24, 17, 0)
A:pandas.tests.series.test_timezones.time_datetime->pandas._libs.tslibs.conversion.localize_pydatetime(dt, tz)
A:pandas.tests.series.test_timezones.idx->date_range('4/1/2005', '4/30/2005', freq='D', tz='US/Pacific')
pandas.tests.series.test_timezones.TestSeriesTimezones
pandas.tests.series.test_timezones.TestSeriesTimezones.test_constructor_data_aware_dtype_naive(self,tz_aware_fixture)
pandas.tests.series.test_timezones.TestSeriesTimezones.test_dateutil_tzoffset_support(self)
pandas.tests.series.test_timezones.TestSeriesTimezones.test_getitem_pydatetime_tz(self,tzstr)
pandas.tests.series.test_timezones.TestSeriesTimezones.test_getitem_pydt_tz(self,tzstr)
pandas.tests.series.test_timezones.TestSeriesTimezones.test_localized_at_time_between_time(self,tzstr)
pandas.tests.series.test_timezones.TestSeriesTimezones.test_series_add_aware_naive_raises(self)
pandas.tests.series.test_timezones.TestSeriesTimezones.test_series_add_tz_mismatch_converts_to_utc(self)
pandas.tests.series.test_timezones.TestSeriesTimezones.test_series_add_tz_mismatch_converts_to_utc_duplicate(self)
pandas.tests.series.test_timezones.TestSeriesTimezones.test_series_align_aware(self)
pandas.tests.series.test_timezones.TestSeriesTimezones.test_series_append_aware(self)
pandas.tests.series.test_timezones.TestSeriesTimezones.test_series_append_aware_naive(self)
pandas.tests.series.test_timezones.TestSeriesTimezones.test_series_append_dst(self)
pandas.tests.series.test_timezones.TestSeriesTimezones.test_series_truncate_datetimeindex_tz(self)
pandas.tests.series.test_timezones.TestSeriesTimezones.test_series_truncate_dtindex_tz(self)
pandas.tests.series.test_timezones.TestSeriesTimezones.test_series_tz_convert(self)
pandas.tests.series.test_timezones.TestSeriesTimezones.test_series_tz_convert_to_utc(self)
pandas.tests.series.test_timezones.TestSeriesTimezones.test_series_tz_localize(self)
pandas.tests.series.test_timezones.TestSeriesTimezones.test_series_tz_localize_ambiguous_bool(self)
pandas.tests.series.test_timezones.TestSeriesTimezones.test_series_tz_localize_empty(self,tzstr)
pandas.tests.series.test_timezones.TestSeriesTimezones.test_series_tz_localize_nonexistent(self,tz,method,exp)
pandas.tests.series.test_timezones.TestSeriesTimezones.test_string_index_alias_tz_aware(self,tz)
pandas.tests.series.test_timezones.TestSeriesTimezones.test_tz_aware_asfreq(self,tz)
pandas.tests.series.test_timezones.TestSeriesTimezones.test_tz_localize_convert_copy_inplace_mutate(self,copy,method,tz)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_analytics.py----------------------------------------
A:pandas.tests.series.test_analytics.s->pandas.Series([1, 2])
A:pandas.tests.series.test_analytics.result->operator.matmul(b.T, a)
A:pandas.tests.series.test_analytics.a->a.astype(int).astype(int)
A:pandas.tests.series.test_analytics.expected->DataFrame({'bar': s.values}, index=exp_index).sort_index(level=0)
A:pandas.tests.series.test_analytics.b2->b.reindex(index=reversed(b.index))
A:pandas.tests.series.test_analytics.a['p']->int(a.p)
A:pandas.tests.series.test_analytics.arr->numpy.random.randn(N)
A:pandas.tests.series.test_analytics.ser->Series(arr)
A:pandas.tests.series.test_analytics.reps->pandas.Series([1, 2]).repeat(to_rep)
A:pandas.tests.series.test_analytics.exp->Series(s.values.repeat(to_rep), index=s.index.values.repeat(to_rep))
A:pandas.tests.series.test_analytics.index->MultiIndex(levels=[['bar'], ['one', 'two', 'three'], [0, 1]], codes=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2], [0, 1, 0, 1, 0, 1]])
A:pandas.tests.series.test_analytics.unstacked->pandas.Series([1, 2]).unstack(0).sort_index()
A:pandas.tests.series.test_analytics.exp_index->MultiIndex(levels=[['one', 'two', 'three'], [0, 1]], codes=[[0, 1, 2, 0, 1, 2], [0, 1, 0, 1, 0, 1]])
A:pandas.tests.series.test_analytics.idx->pandas.MultiIndex.from_arrays([['cat', 'cat', 'cat', 'dog', 'dog'], ['a', 'a', 'b', 'a', 'b'], [1, 2, 1, 1, np.nan]])
A:pandas.tests.series.test_analytics.ts->pandas.Series([1.0, 1.1, 1.2, 1.3, 1.4], index=idx)
A:pandas.tests.series.test_analytics.left->pandas.Series([1.0, 1.1, 1.2, 1.3, 1.4], index=idx).unstack()
A:pandas.tests.series.test_analytics.right->DataFrame([[1.0, 1.3], [1.1, np.nan], [np.nan, 1.4], [1.2, np.nan]], columns=['cat', 'dog'])
A:pandas.tests.series.test_analytics.right.index->pandas.MultiIndex.from_tuples(tpls)
A:pandas.tests.series.test_analytics.msg->"the '{arg}' parameter is not supported in the pandas implementation of {fname}\\(\\)".format(arg=param, fname=name)
pandas.tests.series.test_analytics.TestSeriesAnalytics
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_dot(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_is_monotonic(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_matmul(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_numpy_repeat(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_prod_numpy16_bug(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_ptp(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_repeat(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_unstack(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_validate_any_all_out_keepdims_raises(self,kwargs,func)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_validate_median_initial(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_validate_stat_keepdims(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_validate_sum_initial(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_cumulative.py----------------------------------------
A:pandas.tests.series.test_cumulative.func->getattr(np, name)
A:pandas.tests.series.test_cumulative.ts->datetime_series.copy()
A:pandas.tests.series.test_cumulative.expected->pandas.Series(methods[method](s.values))
A:pandas.tests.series.test_cumulative.s->pandas.Series(pd.to_timedelta(['NaT', '2 min', 'NaT', '1 min', 'NaT', '3 min']))
A:pandas.tests.series.test_cumulative.result->getattr(s, method)()
A:pandas.tests.series.test_cumulative.a->pandas.Series([False, False, False, True, True, False, False])
A:pandas.tests.series.test_cumulative.c->pandas.Series([False] * len(b))
A:pandas.tests.series.test_cumulative.args->product((a, b, c, d), methods)
A:pandas.tests.series.test_cumulative.e->pandas.Series([False, True, np.nan, False])
A:pandas.tests.series.test_cumulative.cse->pandas.Series([0, 1, np.nan, 1], dtype=object)
A:pandas.tests.series.test_cumulative.cpe->pandas.Series([False, 0, np.nan, 0])
A:pandas.tests.series.test_cumulative.cmin->pandas.Series([False, False, np.nan, False])
A:pandas.tests.series.test_cumulative.cmax->pandas.Series([False, True, np.nan, True])
A:pandas.tests.series.test_cumulative.res->getattr(e, method)()
pandas.tests.series.test_cumulative.TestSeriesCumulativeOps
pandas.tests.series.test_cumulative.TestSeriesCumulativeOps.test_cummax(self,datetime_series)
pandas.tests.series.test_cumulative.TestSeriesCumulativeOps.test_cummax_datetime64(self,tz)
pandas.tests.series.test_cumulative.TestSeriesCumulativeOps.test_cummax_dt64(self,tz)
pandas.tests.series.test_cumulative.TestSeriesCumulativeOps.test_cummax_timedelta64(self)
pandas.tests.series.test_cumulative.TestSeriesCumulativeOps.test_cummethods_bool(self)
pandas.tests.series.test_cumulative.TestSeriesCumulativeOps.test_cummin(self,datetime_series)
pandas.tests.series.test_cumulative.TestSeriesCumulativeOps.test_cummin_datetime64(self,tz)
pandas.tests.series.test_cumulative.TestSeriesCumulativeOps.test_cummin_dt64(self,tz)
pandas.tests.series.test_cumulative.TestSeriesCumulativeOps.test_cummin_timedelta64(self)
pandas.tests.series.test_cumulative.TestSeriesCumulativeOps.test_cumprod(self,datetime_series)
pandas.tests.series.test_cumulative.TestSeriesCumulativeOps.test_cumsum(self,datetime_series)
pandas.tests.series.test_cumulative._check_accum_op(name,series,check_dtype=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_repr.py----------------------------------------
A:pandas.tests.series.test_repr.index->Index([datetime(2000, 1, 1) + timedelta(i) for i in range(1000)], dtype=object)
A:pandas.tests.series.test_repr.s->Series(Categorical(idx, ordered=True))
A:pandas.tests.series.test_repr.expected->'\n'.join(expected)
A:pandas.tests.series.test_repr.ots->datetime_series.astype('O')
A:pandas.tests.series.test_repr.biggie->Series(tm.randn(1000), index=np.arange(1000), name=('foo', 'bar', 'baz'))
A:pandas.tests.series.test_repr.ser->timedelta_range('1 hours', periods=10).to_series()
A:pandas.tests.series.test_repr.rep_str->repr(ser)
A:pandas.tests.series.test_repr.a->Series(Categorical(['a', 'b'], categories=levs, ordered=True))
A:pandas.tests.series.test_repr.captured->capsys.readouterr()
A:pandas.tests.series.test_repr.df->Series(['abc'], name='abc')
A:pandas.tests.series.test_repr.ts->pandas._testing.makeTimeSeries(1000)
A:pandas.tests.series.test_repr.i->Index([1, np.nan])
A:pandas.tests.series.test_repr.cat->pandas.Categorical([County() for _ in range(61)])
A:pandas.tests.series.test_repr.idx->timedelta_range('1 hours', periods=10)
A:pandas.tests.series.test_repr.levs->list('abcdefghijklmnopqrstuvwxyz')
pandas.tests.series.test_repr.TestCategoricalRepr
pandas.tests.series.test_repr.TestCategoricalRepr.test_categorical_repr(self)
pandas.tests.series.test_repr.TestCategoricalRepr.test_categorical_repr_unicode(self)
pandas.tests.series.test_repr.TestCategoricalRepr.test_categorical_series_repr(self)
pandas.tests.series.test_repr.TestCategoricalRepr.test_categorical_series_repr_datetime(self)
pandas.tests.series.test_repr.TestCategoricalRepr.test_categorical_series_repr_datetime_ordered(self)
pandas.tests.series.test_repr.TestCategoricalRepr.test_categorical_series_repr_dt(self)
pandas.tests.series.test_repr.TestCategoricalRepr.test_categorical_series_repr_dt_ordered(self)
pandas.tests.series.test_repr.TestCategoricalRepr.test_categorical_series_repr_ordered(self)
pandas.tests.series.test_repr.TestCategoricalRepr.test_categorical_series_repr_period(self)
pandas.tests.series.test_repr.TestCategoricalRepr.test_categorical_series_repr_period_ordered(self)
pandas.tests.series.test_repr.TestCategoricalRepr.test_categorical_series_repr_timedelta(self)
pandas.tests.series.test_repr.TestCategoricalRepr.test_categorical_series_repr_timedelta_ordered(self)
pandas.tests.series.test_repr.TestSeriesRepr
pandas.tests.series.test_repr.TestSeriesRepr.test_index_repr_in_frame_with_nan(self)
pandas.tests.series.test_repr.TestSeriesRepr.test_latex_repr(self)
pandas.tests.series.test_repr.TestSeriesRepr.test_multilevel_name_print(self)
pandas.tests.series.test_repr.TestSeriesRepr.test_name_printing(self)
pandas.tests.series.test_repr.TestSeriesRepr.test_repr(self,datetime_series,string_series,object_series)
pandas.tests.series.test_repr.TestSeriesRepr.test_repr_bool_fails(self,capsys)
pandas.tests.series.test_repr.TestSeriesRepr.test_repr_max_rows(self)
pandas.tests.series.test_repr.TestSeriesRepr.test_repr_name_iterable_indexable(self)
pandas.tests.series.test_repr.TestSeriesRepr.test_repr_should_return_str(self)
pandas.tests.series.test_repr.TestSeriesRepr.test_str_to_bytes_raises(self)
pandas.tests.series.test_repr.TestSeriesRepr.test_tidy_repr(self)
pandas.tests.series.test_repr.TestSeriesRepr.test_timeseries_repr_object_dtype(self)
pandas.tests.series.test_repr.TestSeriesRepr.test_unicode_string_with_unicode(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_arithmetic.py----------------------------------------
A:pandas.tests.series.test_arithmetic.tser->pandas._testing.makeTimeSeries().rename('ts')
A:pandas.tests.series.test_arithmetic.series->ts[0](tser)
A:pandas.tests.series.test_arithmetic.other->ts[1](tser)
A:pandas.tests.series.test_arithmetic.op->getattr(Series, opname)
A:pandas.tests.series.test_arithmetic.alt->getattr(operator, opname)
A:pandas.tests.series.test_arithmetic.result->op(ser, cidx)
A:pandas.tests.series.test_arithmetic.expected->numpy.dtype('bool')
A:pandas.tests.series.test_arithmetic.rop->getattr(Series, 'r' + opname)
A:pandas.tests.series.test_arithmetic.m->MySeries([1, 2, 3], name='test')
A:pandas.tests.series.test_arithmetic.rng->pandas.period_range('1/1/2000', '1/1/2010', freq='A')
A:pandas.tests.series.test_arithmetic.ts->Series(np.random.randn(len(rng)), index=rng)
A:pandas.tests.series.test_arithmetic.a->Series([1, 2])
A:pandas.tests.series.test_arithmetic.left->pandas.Series(np.random.randn(10))
A:pandas.tests.series.test_arithmetic.right->pandas.Series(np.random.randn(10))
A:pandas.tests.series.test_arithmetic.b->Series([2, 3, 4])
A:pandas.tests.series.test_arithmetic.ser->Series(cidx).rename(names[1])
A:pandas.tests.series.test_arithmetic.dti->dti.tz_localize('US/Central').tz_localize('US/Central')
A:pandas.tests.series.test_arithmetic.ii->pandas.interval_range(start=0, periods=5, name=names[0])
A:pandas.tests.series.test_arithmetic.cidx->tdi.astype('category')
pandas.tests.series.test_arithmetic.TestSeriesArithmetic
pandas.tests.series.test_arithmetic.TestSeriesArithmetic.test_add_series_with_period_index(self)
pandas.tests.series.test_arithmetic.TestSeriesArithmetic.test_string_addition(self,target_add,input_value,expected_value)
pandas.tests.series.test_arithmetic.TestSeriesComparison
pandas.tests.series.test_arithmetic.TestSeriesComparison.test_comparison_different_length(self)
pandas.tests.series.test_arithmetic.TestSeriesComparison.test_ser_cmp_result_names(self,names,op)
pandas.tests.series.test_arithmetic.TestSeriesComparison.test_ser_flex_cmp_return_dtypes(self,opname)
pandas.tests.series.test_arithmetic.TestSeriesComparison.test_ser_flex_cmp_return_dtypes_empty(self,opname)
pandas.tests.series.test_arithmetic.TestSeriesFlexArithmetic
pandas.tests.series.test_arithmetic.TestSeriesFlexArithmetic.test_flex_method_equivalence(self,opname,ts)
pandas.tests.series.test_arithmetic.TestSeriesFlexArithmetic.test_flex_method_subclass_metadata_preservation(self,all_arithmetic_operators)
pandas.tests.series.test_arithmetic.TestSeriesFlexComparison
pandas.tests.series.test_arithmetic.TestSeriesFlexComparison.test_comparison_flex_basic(self)
pandas.tests.series.test_arithmetic._permute(obj)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_missing.py----------------------------------------
A:pandas.tests.series.test_missing.rng->date_range('1/1/2000', '3/1/2000', freq='B')
A:pandas.tests.series.test_missing.s->Series(np.arange(10) ** 2)
A:pandas.tests.series.test_missing.td->Series([timedelta(days=i) for i in range(10)])
A:pandas.tests.series.test_missing.result->pandas.Series(data=[10, 9, np.nan, 2, 1], index=[10, 9, 3, 2, 1]).sort_index(ascending=ascending).interpolate(method='index')
A:pandas.tests.series.test_missing.expected->pandas.Series(data=expected_values, index=expected_values, dtype=float)
A:pandas.tests.series.test_missing.expected[2]->timedelta(days=1, seconds=9 * 3600 + 60 + 1)
A:pandas.tests.series.test_missing.null_loc->pandas.Series([False, True, False, True])
A:pandas.tests.series.test_missing.idx->pandas.MultiIndex.from_tuples([(0, 'a'), (1, 'b'), (2, 'c')])
A:pandas.tests.series.test_missing.df->pandas.DataFrame([0, 1, np.nan, 3], index=ind)
A:pandas.tests.series.test_missing.exp->pandas.Series(data=[10, 9, np.nan, 2, 1], index=[10, 9, 3, 2, 1]).reindex(new_index).interpolate(method='time')
A:pandas.tests.series.test_missing.ser->pandas.Series(dti)
A:pandas.tests.series.test_missing.val->numpy.datetime64('1975-04-05', 'ms')
A:pandas.tests.series.test_missing.s2->Series(np.arange(10) ** 2).copy()
A:pandas.tests.series.test_missing.data->pandas.Series([pd.NaT, pd.NaT, datetime(2016, 12, 12, 22, 24, 6, 100001, tzinfo=pytz.utc)])
A:pandas.tests.series.test_missing.filled->Series([np.nan, 1.0, np.nan, 3.0, np.nan], ['z', 'a', 'b', 'c', 'd'], dtype=float).fillna(method='bfill')
A:pandas.tests.series.test_missing.cat->Series(Categorical(['a', 'b', 'c', np.nan]))
A:pandas.tests.series.test_missing.series->pandas.Series([datetime(2015, 1, 1, tzinfo=pytz.utc), 1])
A:pandas.tests.series.test_missing.filled2->pandas.DataFrame([0, 1, np.nan, 3], index=ind).fillna(value=series[1])
A:pandas.tests.series.test_missing.r->Series(np.arange(10) ** 2).isna()
A:pandas.tests.series.test_missing.dr->Series(np.arange(10) ** 2).dropna()
A:pandas.tests.series.test_missing.e->Series([False, True, True, False])
A:pandas.tests.series.test_missing.de->Series(['a', 1.0], index=[0, 3])
A:pandas.tests.series.test_missing.ts->pandas.Series(data=[10, 9, np.nan, 2, 1], index=[10, 9, 3, 2, 1])
A:pandas.tests.series.test_missing.s1->Series([0, 1, 2], list('abc'))
A:pandas.tests.series.test_missing.x->Series([np.nan, 1.0, np.nan, 3.0, np.nan], ['z', 'a', 'b', 'c', 'd'], dtype=float)
A:pandas.tests.series.test_missing.y->Series([np.nan, 1.0, np.nan, 3.0, np.nan], ['z', 'a', 'b', 'c', 'd'], dtype=float).copy()
A:pandas.tests.series.test_missing.td1->Series([timedelta(days=i) for i in range(10)]).copy()
A:pandas.tests.series.test_missing.res->Series(np.arange(10) ** 2).add(2, fill_value=0)
A:pandas.tests.series.test_missing.index->pandas.date_range('1/1/2012', periods=4, freq='12H')
A:pandas.tests.series.test_missing.ts_copy->pandas.Series(data=[10, 9, np.nan, 2, 1], index=[10, 9, 3, 2, 1]).copy()
A:pandas.tests.series.test_missing.linear_interp->pandas.Series(data=[10, 9, np.nan, 2, 1], index=[10, 9, 3, 2, 1]).copy().interpolate(method='linear')
A:pandas.tests.series.test_missing.ord_ts->Series([d.toordinal() for d in datetime_series.index], index=datetime_series.index).astype(float)
A:pandas.tests.series.test_missing.ord_ts_copy->Series([d.toordinal() for d in datetime_series.index], index=datetime_series.index).astype(float).copy()
A:pandas.tests.series.test_missing.time_interp->Series([d.toordinal() for d in datetime_series.index], index=datetime_series.index).astype(float).copy().interpolate(method='time')
A:pandas.tests.series.test_missing.non_ts->Series([0, 1, 2, np.NaN])
A:pandas.tests.series.test_missing.new_index->pandas.date_range('1/1/2012', periods=4, freq='12H').append(index + pd.DateOffset(hours=1)).sort_values()
A:pandas.tests.series.test_missing.interp_s->pandas.Series(dti).reindex(new_index).interpolate(method='from_derivatives')
A:pandas.tests.series.test_missing.s[::3]->numpy.random.randn(10)
A:pandas.tests.series.test_missing.vals->Series(np.arange(10) ** 2).index.values.astype(float)
A:pandas.tests.series.test_missing.bad->isna(expected.values)
A:pandas.tests.series.test_missing.other_result->Series(np.arange(10) ** 2).interpolate(method='values')
A:pandas.tests.series.test_missing.sq->Series([1, 4, np.nan, 16], index=[1, 2, 3, 4])
A:pandas.tests.series.test_missing.dti->pandas.date_range('2015-04-05', periods=3, tz='US/Central')
A:pandas.tests.series.test_missing.result3->Series(np.arange(10) ** 2).interpolate(method='spline', order=1, ext=3)
A:pandas.tests.series.test_missing.expected3->Series([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 6.0])
A:pandas.tests.series.test_missing.result1->Series(np.arange(10) ** 2).interpolate(method='spline', order=1)
A:pandas.tests.series.test_missing.expected1->Series(np.arange(10) ** 2).interpolate(method='spline', order=1)
A:pandas.tests.series.test_missing.ind->pandas.timedelta_range(start=1, periods=4)
pandas.tests.series.test_missing.TestSeriesInterpolateData
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_all_good(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_datetime64(self,method,tz_naive_fixture)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_dt64(self,method,tz_naive_fixture)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_invalid_method(self,invalid_method)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_limit(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_limit_area(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_limit_bad_direction(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_limit_before_ends(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_limit_direction(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_limit_forward(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_limit_no_nans(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_limit_to_ends(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_multiIndex(self,check_scipy)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_non_timedelta_index(self,interp_methods_ind,ind)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_nonmono_raise(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_pad_datetime64tz_values(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_pad_dt64tz_values(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_quad(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_scipy_basic(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_timedelta64(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_unlimited(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interpolate(self,datetime_series,string_series)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interpolate_akima(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interpolate_corners(self,kwargs)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interpolate_from_derivatives(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interpolate_index_values(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interpolate_invalid_float_limit(self,nontemporal_method)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interpolate_invalid_nonpositive_limit(self,nontemporal_method,limit)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interpolate_non_ts(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interpolate_pchip(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interpolate_piecewise_polynomial(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interpolate_spline_invalid_order(self,order)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interpolate_time_raises_for_non_timeseries(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interpolate_timedelta_index(self,interp_methods_ind)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interpolate_unsorted_index(self,ascending,expected_values)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_nan_interpolate(self,kwargs)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_nan_irregular_index(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_nan_str_index(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_no_order(self,method)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_series_interpolate_intraday(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_series_interpolate_method_values(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_spline(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_spline_extrapolate(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_spline_interpolation(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_spline_smooth(self)
pandas.tests.series.test_missing.TestSeriesMissingData
pandas.tests.series.test_missing.TestSeriesMissingData.test_bfill(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_categorical_nan_equality(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_categorical_nan_handling(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_datetime64_fillna(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_datetime64_non_nano_fillna(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_datetime64_tz_dropna(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_datetime64_tz_fillna(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_datetime64tz_fillna_round_issue(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_dropna_empty(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_dropna_intervals(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_dropna_no_nan(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_dropna_preserve_name(self,datetime_series)
pandas.tests.series.test_missing.TestSeriesMissingData.test_dt64_fillna(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_dt64_non_nano_fillna(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_dt64_tz_dropna(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_dt64_tz_fillna(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_dt64tz_fillna_round_issue(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_ffill(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_ffill_mixed_dtypes_without_missing_data(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_fill_value_when_combine_const(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_fillna(self,datetime_series)
pandas.tests.series.test_missing.TestSeriesMissingData.test_fillna_bug(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_fillna_categorical(self,fill_value,expected_output)
pandas.tests.series.test_missing.TestSeriesMissingData.test_fillna_categorical_raise(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_fillna_categorical_with_new_categories(self,fill_value,expected_output)
pandas.tests.series.test_missing.TestSeriesMissingData.test_fillna_consistency(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_fillna_downcast(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_fillna_inplace(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_fillna_int(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_fillna_invalid_method(self,datetime_series)
pandas.tests.series.test_missing.TestSeriesMissingData.test_fillna_nat(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_fillna_raise(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_isna(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_isna_for_inf(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_isnull_for_inf_deprecated(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_notna(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_pad_nan(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_pad_require_monotonicity(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_series_fillna_limit(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_series_pad_backfill_limit(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_timedelta64_nan(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_timedelta_fillna(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_valid(self,datetime_series)
pandas.tests.series.test_missing.TestSeriesMissingData.test_where_sparse(self)
pandas.tests.series.test_missing._simple_ts(start,end,freq='D')
pandas.tests.series.test_missing.interp_methods_ind(request)
pandas.tests.series.test_missing.nontemporal_method(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_timeseries.py----------------------------------------
A:pandas.tests.series.test_timeseries.rng->date_range('1/1/2000', '1/1/2002', name='idx', tz=tz)
A:pandas.tests.series.test_timeseries.ts->_simple_ts('1/1/2000', '1/1/2001')
A:pandas.tests.series.test_timeseries.daily_ts->_simple_ts('1/1/2000', '1/1/2001').asfreq('D', fill_value=-1)
A:pandas.tests.series.test_timeseries.monthly_ts->_simple_ts('1/1/2000', '1/1/2001').asfreq('D', fill_value=-1).asfreq(BMonthEnd())
A:pandas.tests.series.test_timeseries.result->numpy.asarray(ser, dtype=object)
A:pandas.tests.series.test_timeseries.expected->numpy.array([pd.Timestamp('2000-01-01', tz=tz), pd.Timestamp('2000-01-02', tz=tz)])
A:pandas.tests.series.test_timeseries.index->MultiIndex(levels=levels, codes=codes)
A:pandas.tests.series.test_timeseries.corr1->datetime_series.corr(datetime_series.shift(n))
A:pandas.tests.series.test_timeseries.corr2->datetime_series.autocorr(lag=n)
A:pandas.tests.series.test_timeseries.ser->pandas.Series(pd.date_range('2000', periods=2, tz=tz))
A:pandas.tests.series.test_timeseries.empty->Series(dtype=object)
A:pandas.tests.series.test_timeseries.ts.index->date_range('20110101', periods=len(ts), freq='B')
A:pandas.tests.series.test_timeseries.idx->date_range('1750-1-1', '2050-1-1', freq='7D')
A:pandas.tests.series.test_timeseries.mask->numpy.zeros(len(rng), dtype=bool)
A:pandas.tests.series.test_timeseries.s->Series(arr['Date'])
A:pandas.tests.series.test_timeseries.dates->date_range('1/1/2000', periods=4)
A:pandas.tests.series.test_timeseries.series->Series(0, index=rng)
A:pandas.tests.series.test_timeseries.df->DataFrame(arr)
A:pandas.tests.series.test_timeseries.ts2->ts_slice.copy()
A:pandas.tests.series.test_timeseries.norm->date_range('1/1/2000', periods=20)
A:pandas.tests.series.test_timeseries.vals->numpy.random.randn(20, 3)
A:pandas.tests.series.test_timeseries.rs->_simple_ts('1/1/2000', '1/1/2001').at_time('16:00')
A:pandas.tests.series.test_timeseries.stime->time(22, 0)
A:pandas.tests.series.test_timeseries.etime->time(9, 0)
A:pandas.tests.series.test_timeseries.close_open->product([True, False], [True, False])
A:pandas.tests.series.test_timeseries.filtered->_simple_ts('1/1/2000', '1/1/2001').between_time(stime, etime, inc_start, inc_end)
A:pandas.tests.series.test_timeseries.t->_simple_ts('1/1/2000', '1/1/2001').at_time('16:00').time()
A:pandas.tests.series.test_timeseries.frame->DataFrame({'a': date_range('1/1/2000', periods=10)})
A:pandas.tests.series.test_timeseries.pts->_simple_ts('1/1/2000', '1/1/2001').to_period('M')
A:pandas.tests.series.test_timeseries.exp->_simple_ts('1/1/2000', '1/1/2001').copy()
A:pandas.tests.series.test_timeseries.exp.index->_simple_ts('1/1/2000', '1/1/2001').copy().index.asfreq('M')
A:pandas.tests.series.test_timeseries.exp_idx->pandas.PeriodIndex(['2011-01-01', '2011-01-02', '2011-01-03', '2011-01-04'], freq='D')
A:pandas.tests.series.test_timeseries.dr->date_range(start='1/1/2012', freq='5min', periods=10)
A:pandas.tests.series.test_timeseries.grouped->Series(arr['Date']).groupby(lambda x: x[0] % 2 == 0)
A:pandas.tests.series.test_timeseries.buf->StringIO()
A:pandas.tests.series.test_timeseries.p->pandas._testing.round_trip_pickle(NaT)
A:pandas.tests.series.test_timeseries.idx_p->pandas._testing.round_trip_pickle(idx)
A:pandas.tests.series.test_timeseries.nofreq->DatetimeIndex(list(rng[25:75]), name='other')
A:pandas.tests.series.test_timeseries.arr->numpy.array(dates, dtype=[('Date', 'M8[us]'), ('Forecasting', 'M8[us]')])
pandas.tests.series.test_timeseries.TestTimeSeries
pandas.tests.series.test_timeseries.TestTimeSeries.test_asarray_tz_aware(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_asarray_tz_naive(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_asfreq(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_asfreq_datetimeindex_empty_series(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_asfreq_dtindex_empty_series(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_asfreq_keep_index_name(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_asfreq_normalize(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_asfreq_resample_set_correct_freq(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_at_time(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_at_time_raises(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_autocorr(self,datetime_series)
pandas.tests.series.test_timeseries.TestTimeSeries.test_between(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_between_time(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_between_time_axis(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_between_time_formats(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_between_time_raises(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_between_time_types(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_contiguous_boolean_preserve_freq(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_first_last_valid(self,datetime_series)
pandas.tests.series.test_timeseries.TestTimeSeries.test_first_raises(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_first_subset(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_format_pre_1900_dates(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_from_M8_structured(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_get_level_values_box(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_groupby_count_dateparseerror(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_last_raises(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_last_subset(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_mpl_compat_hack(self,datetime_series)
pandas.tests.series.test_timeseries.TestTimeSeries.test_pickle(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_promote_datetime_date(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_promote_dt_date(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_series_ctor_datetime64(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_series_ctor_dt64(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_series_map_box_timedelta(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_series_repr_nat(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_setops_preserve_freq(self,tz)
pandas.tests.series.test_timeseries.TestTimeSeries.test_timeseries_coercion(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_to_csv_numpy_16_bug(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_to_datetime_unit(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_to_dt_unit(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_to_period(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_view_tz(self)
pandas.tests.series.test_timeseries._simple_ts(start,end,freq='D')
pandas.tests.series.test_timeseries.assert_range_equal(left,right)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_alter_axes.py----------------------------------------
A:pandas.tests.series.test_alter_axes.string_series.index->numpy.arange(len(string_series))
A:pandas.tests.series.test_alter_axes.renamed->Series({1: 10, 2: 20}).rename({})
A:pandas.tests.series.test_alter_axes.rename_dict->dict(zip(ts.index, renamed.index))
A:pandas.tests.series.test_alter_axes.renamed2->ts.rename(rename_dict)
A:pandas.tests.series.test_alter_axes.s->Series(range(4), index=MultiIndex.from_product([[1, 2]] * 2))
A:pandas.tests.series.test_alter_axes.renamer->Series({1: 10, 2: 20})
A:pandas.tests.series.test_alter_axes.result->Series([1, 2, 3, 4]).droplevel('b', axis='index')
A:pandas.tests.series.test_alter_axes.expected->Series([1, 2, 3, 4]).reset_index('b', drop=True)
A:pandas.tests.series.test_alter_axes.exp->numpy.array(['a', 'b', 'c'], dtype=np.object_)
A:pandas.tests.series.test_alter_axes.s2->Series(range(4), index=MultiIndex.from_product([[1, 2]] * 2))._set_name('foo')
A:pandas.tests.series.test_alter_axes.idx->pandas._testing.makeDateIndex(10)
A:pandas.tests.series.test_alter_axes.ser->Series([1, 2, 3, 4])
A:pandas.tests.series.test_alter_axes.df->Series([1, 2, 3], index=index)
A:pandas.tests.series.test_alter_axes.index->Index(list('abc'), name='foo')
A:pandas.tests.series.test_alter_axes.rs->Series(range(4), index=MultiIndex.from_product([[1, 2]] * 2)).reset_index(level=[0, 2], drop=True)
A:pandas.tests.series.test_alter_axes.series_result->Series(range(4), index=MultiIndex.from_product([[1, 2]] * 2)).reset_index()
A:pandas.tests.series.test_alter_axes.series_expected->DataFrame([[0, 0], [1, 1]], columns=['index', 'A'], index=RangeIndex(stop=2))
A:pandas.tests.series.test_alter_axes.e_idx->MultiIndex(levels=[['one', 'two', 'three'], [0, 1], ['bar']], codes=[[0, 1, 2, 0, 1, 2], [0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0]], names=['L1', 'L2', 'L0'])
A:pandas.tests.series.test_alter_axes.mi->pandas.MultiIndex.from_product([['a', 'b', 'c'], [1, 2]], names=['ll', 'nn'])
A:pandas.tests.series.test_alter_axes.no_return->Series([1, 2, 3, 4]).droplevel('b', axis='index').rename_axis('foo', inplace=True)
A:pandas.tests.series.test_alter_axes.ix->MyIndexer()
A:pandas.tests.series.test_alter_axes.expected.index->list('abcd')
A:pandas.tests.series.test_alter_axes.ser.index->pandas.MultiIndex.from_arrays([(1, 2, 3, 4), (5, 6, 7, 8)], names=['a', 'b'])
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_droplevel(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename(self,datetime_series)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_axis_inplace(self,datetime_series)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_axis_mapper(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_axis_none(self,kwargs)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_axis_supported(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_by_series(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_inplace(self,datetime_series)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_set_name(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_set_name_inplace(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_with_custom_indexer(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_with_custom_indexer_inplace(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_reorder_levels(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_reset_index(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_reset_index_drop_errors(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_reset_index_level(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_reset_index_name(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_reset_index_range(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_set_axis_inplace(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_set_axis_inplace_axes(self,axis_series)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_set_index_makes_timeseries(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_set_name(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_set_name_attribute(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_setindex(self,string_series)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_subclass.py----------------------------------------
A:pandas.tests.series.test_subclass.s->pandas._testing.SubclassedSeries([1, 2, 3, 4], index=[list('aabb'), list('xyxy')])
A:pandas.tests.series.test_subclass.exp->pandas._testing.SubclassedDataFrame({'x': [1, 3], 'y': [2, 4]}, index=['a', 'b'])
A:pandas.tests.series.test_subclass.res->pandas._testing.SubclassedSeries([1, 2, 3, 4], index=[list('aabb'), list('xyxy')]).unstack()
A:pandas.tests.series.test_subclass.sub_series->pandas._testing.SubclassedSeries()
pandas.tests.series.test_subclass.TestSeriesSubclassing
pandas.tests.series.test_subclass.TestSeriesSubclassing.test_indexing_sliced(self)
pandas.tests.series.test_subclass.TestSeriesSubclassing.test_subclass_empty_repr(self)
pandas.tests.series.test_subclass.TestSeriesSubclassing.test_subclass_unstack(self)
pandas.tests.series.test_subclass.TestSeriesSubclassing.test_to_frame(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_block_internals.py----------------------------------------
A:pandas.tests.series.test_block_internals.dti->pandas.date_range('2016-01-01', periods=10, tz='US/Pacific')
A:pandas.tests.series.test_block_internals.ser->pandas.Series(dti)
pandas.tests.series.test_block_internals.TestSeriesBlockInternals
pandas.tests.series.test_block_internals.TestSeriesBlockInternals.test_dt64tz_setitem_does_not_mutate_dti(self)
pandas.tests.series.test_block_internals.TestSeriesBlockInternals.test_setitem_invalidates_datetime_index_freq(self)
pandas.tests.series.test_block_internals.TestSeriesBlockInternals.test_setitem_invalidates_dt_index_freq(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_combine_concat.py----------------------------------------
A:pandas.tests.series.test_combine_concat.s->Series([10, 11, 12], dtype=dtype)
A:pandas.tests.series.test_combine_concat.result->pandas.concat([Series(dtype='float64').astype('Sparse'), Series(dtype='object')])
A:pandas.tests.series.test_combine_concat.expected->pandas.SparseDtype('object')
A:pandas.tests.series.test_combine_concat.values->pandas._testing.makeIntIndex(20).values.astype(float)
A:pandas.tests.series.test_combine_concat.series->Series(values, index=tm.makeIntIndex(20))
A:pandas.tests.series.test_combine_concat.combined->Series(tm.makeStringIndex(10), index=index[::2]).combine_first(floats)
A:pandas.tests.series.test_combine_concat.index->pandas._testing.makeStringIndex(20)
A:pandas.tests.series.test_combine_concat.floats->Series(tm.randn(20), index=index)
A:pandas.tests.series.test_combine_concat.strings->Series(tm.makeStringIndex(10), index=index[::2])
A:pandas.tests.series.test_combine_concat.empty->Series([], index=[], dtype=object)
A:pandas.tests.series.test_combine_concat.s.index->Series([10, 11, 12], dtype=dtype).index.astype('O')
A:pandas.tests.series.test_combine_concat.s2->Series([np.nan, 3.5, np.nan, 5.0])
A:pandas.tests.series.test_combine_concat.df->DataFrame([{'a': 1}, {'a': 3, 'b': 2}])
A:pandas.tests.series.test_combine_concat.other->Series(other, index=[1, 3])
A:pandas.tests.series.test_combine_concat.dtypes->map(np.dtype, ['float64', 'int8', 'uint8', 'bool', 'm8[ns]', 'M8[ns]'])
A:pandas.tests.series.test_combine_concat.ser1->pandas.Series(pd.DatetimeIndex(['20150101', '20150102', '20150103'], tz=tz_naive_fixture), name='ser1')
A:pandas.tests.series.test_combine_concat.ser2->pandas.Series(pd.DatetimeIndex(['20160514', '20160515', '20160516'], tz=tz_naive_fixture), index=[2, 3, 4], name='ser2')
A:pandas.tests.series.test_combine_concat.exp_vals->pandas.DatetimeIndex(['20150101', '20150102', '20150103', '20160515', '20160516'], tz=tz_naive_fixture)
A:pandas.tests.series.test_combine_concat.exp->pandas.Series(exp_vals, name='ser1')
A:pandas.tests.series.test_combine_concat.s0->to_datetime(Series(['2010', np.NaN]))
A:pandas.tests.series.test_combine_concat.s1->Series([np.NaN, '2011'])
A:pandas.tests.series.test_combine_concat.rs->to_datetime(Series(['2010', np.NaN])).combine_first(s1)
A:pandas.tests.series.test_combine_concat.xp->Series([datetime(2010, 1, 1), '2011'])
pandas.tests.series.test_combine_concat.TestSeriesCombine
pandas.tests.series.test_combine_concat.TestSeriesCombine.test_combine_first(self)
pandas.tests.series.test_combine_concat.TestSeriesCombine.test_combine_first_dt64(self)
pandas.tests.series.test_combine_concat.TestSeriesCombine.test_combine_first_dt_tz_values(self,tz_naive_fixture)
pandas.tests.series.test_combine_concat.TestSeriesCombine.test_combine_scalar(self)
pandas.tests.series.test_combine_concat.TestSeriesCombine.test_concat_empty_series_dtypes(self)
pandas.tests.series.test_combine_concat.TestSeriesCombine.test_concat_empty_series_dtypes_roundtrips(self)
pandas.tests.series.test_combine_concat.TestSeriesCombine.test_update(self)
pandas.tests.series.test_combine_concat.TestSeriesCombine.test_update_dtypes(self,other,dtype,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_api.py----------------------------------------
A:pandas.tests.series.test_api.result->Series(Categorical(['a', 'b', 'c', 'a'], ordered=True)).cat.rename_categories(lambda x: x.upper())
A:pandas.tests.series.test_api.cp->datetime_series.copy()
A:pandas.tests.series.test_api.s->Series(Categorical(['a', 'b', 'c', 'a'], ordered=True))
A:pandas.tests.series.test_api.unp_ts->self._pickle_roundtrip(datetime_series)
A:pandas.tests.series.test_api.unp_series->self._pickle_roundtrip(string_series)
A:pandas.tests.series.test_api.unpickled->pandas.read_pickle(path)
A:pandas.tests.series.test_api.expected->Series(Categorical(['A', 'B', 'C', 'A'], categories=['A', 'B', 'C'], ordered=True))
A:pandas.tests.series.test_api.data->OrderedDict((('col{i}'.format(i=i), np.random.random()) for i in range(12)))
A:pandas.tests.series.test_api.series->Series(A(data))
A:pandas.tests.series.test_api._d->sorted(d.items())
A:pandas.tests.series.test_api.results->get_dir(s)
A:pandas.tests.series.test_api.dir_s->dir(s)
A:pandas.tests.series.test_api.s_empty->pandas.Series(dtype=object)
A:pandas.tests.series.test_api.s2->pandas.Series(index=[1], dtype=object)
A:pandas.tests.series.test_api.expected2->Series([Timestamp('1999/01/01', tz='UTC')])
A:pandas.tests.series.test_api.s2[0]->pandas.Timestamp('1999/01/01', tz='UTC')
A:pandas.tests.series.test_api.ser->Series(dti, index=[5, 6])
A:pandas.tests.series.test_api.dti->pandas.date_range('2016-01-01', periods=2)
A:pandas.tests.series.test_api.val->ser[:1].item()
A:pandas.tests.series.test_api.tsdf->DataFrame(np.random.randn(1000, 3), columns=['A', 'B', 'C'], index=date_range('1/1/2000', periods=1000))
A:pandas.tests.series.test_api.warning->pandas._testing.assert_produces_warning(DeprecationWarning, check_stacklevel=False)
A:pandas.tests.series.test_api.exp->getattr(s.dt, attr)
A:pandas.tests.series.test_api.res->getattr(c.dt, attr)
A:pandas.tests.series.test_api.invalid->Series([1, 2, 3]).astype('category')
A:pandas.tests.series.test_api.c->Series(list('aabbcde')).astype('category')
A:pandas.tests.series.test_api.exp_categories->Index(['a', 'b'])
A:pandas.tests.series.test_api.exp_codes->Series([0, 1, 2, 0], dtype='int8')
A:pandas.tests.series.test_api.exp_values->numpy.array(['a', 'b', 'b', 'a'], dtype=np.object_)
A:pandas.tests.series.test_api.s_dr->Series(date_range('1/1/2015', periods=5, tz='MET'))
A:pandas.tests.series.test_api.c_dr->Series(date_range('1/1/2015', periods=5, tz='MET')).astype('category')
A:pandas.tests.series.test_api.s_pr->Series(period_range('1/1/2015', freq='D', periods=5))
A:pandas.tests.series.test_api.c_pr->Series(period_range('1/1/2015', freq='D', periods=5)).astype('category')
A:pandas.tests.series.test_api.s_tdr->Series(timedelta_range('1 days', '10 days'))
A:pandas.tests.series.test_api.c_tdr->Series(timedelta_range('1 days', '10 days')).astype('category')
pandas.tests.series.test_api.TestCategoricalSeries
pandas.tests.series.test_api.TestCategoricalSeries.test_cat_accessor(self)
pandas.tests.series.test_api.TestCategoricalSeries.test_cat_accessor_api(self)
pandas.tests.series.test_api.TestCategoricalSeries.test_cat_accessor_no_new_attributes(self)
pandas.tests.series.test_api.TestCategoricalSeries.test_cat_accessor_updates_on_inplace(self)
pandas.tests.series.test_api.TestCategoricalSeries.test_categorical_delegations(self)
pandas.tests.series.test_api.TestCategoricalSeries.test_dt_accessor_api_for_categorical(self)
pandas.tests.series.test_api.TestCategoricalSeries.test_getname_categorical_accessor(self,method)
pandas.tests.series.test_api.TestSeriesMisc
pandas.tests.series.test_api.TestSeriesMisc._pickle_roundtrip(self,obj)
pandas.tests.series.test_api.TestSeriesMisc.test_append_preserve_name(self,datetime_series)
pandas.tests.series.test_api.TestSeriesMisc.test_attrs(self)
pandas.tests.series.test_api.TestSeriesMisc.test_axis_alias(self)
pandas.tests.series.test_api.TestSeriesMisc.test_binop_maybe_preserve_name(self,datetime_series)
pandas.tests.series.test_api.TestSeriesMisc.test_class_axis(self)
pandas.tests.series.test_api.TestSeriesMisc.test_combine_first_name(self,datetime_series)
pandas.tests.series.test_api.TestSeriesMisc.test_constructor_dict(self)
pandas.tests.series.test_api.TestSeriesMisc.test_constructor_dict_multiindex(self)
pandas.tests.series.test_api.TestSeriesMisc.test_constructor_dict_timedelta_index(self)
pandas.tests.series.test_api.TestSeriesMisc.test_constructor_ordereddict(self)
pandas.tests.series.test_api.TestSeriesMisc.test_constructor_subclass_dict(self,dict_subclass)
pandas.tests.series.test_api.TestSeriesMisc.test_contains(self,datetime_series)
pandas.tests.series.test_api.TestSeriesMisc.test_copy(self)
pandas.tests.series.test_api.TestSeriesMisc.test_copy_index_name_checking(self,datetime_series)
pandas.tests.series.test_api.TestSeriesMisc.test_copy_name(self,datetime_series)
pandas.tests.series.test_api.TestSeriesMisc.test_copy_tzaware(self)
pandas.tests.series.test_api.TestSeriesMisc.test_empty_method(self)
pandas.tests.series.test_api.TestSeriesMisc.test_getitem_preserve_name(self,datetime_series)
pandas.tests.series.test_api.TestSeriesMisc.test_index_tab_completion(self,index)
pandas.tests.series.test_api.TestSeriesMisc.test_integer_series_size(self)
pandas.tests.series.test_api.TestSeriesMisc.test_item(self)
pandas.tests.series.test_api.TestSeriesMisc.test_items_datetimes(self,datetime_series)
pandas.tests.series.test_api.TestSeriesMisc.test_items_dts(self,datetime_series)
pandas.tests.series.test_api.TestSeriesMisc.test_items_strings(self,string_series)
pandas.tests.series.test_api.TestSeriesMisc.test_iter_datetimes(self,datetime_series)
pandas.tests.series.test_api.TestSeriesMisc.test_iter_dts(self,datetime_series)
pandas.tests.series.test_api.TestSeriesMisc.test_iter_strings(self,string_series)
pandas.tests.series.test_api.TestSeriesMisc.test_iteritems_datetimes(self,datetime_series)
pandas.tests.series.test_api.TestSeriesMisc.test_iteritems_dts(self,datetime_series)
pandas.tests.series.test_api.TestSeriesMisc.test_iteritems_strings(self,string_series)
pandas.tests.series.test_api.TestSeriesMisc.test_keys(self,datetime_series)
pandas.tests.series.test_api.TestSeriesMisc.test_ndarray_compat(self)
pandas.tests.series.test_api.TestSeriesMisc.test_not_hashable(self)
pandas.tests.series.test_api.TestSeriesMisc.test_numpy_unique(self,datetime_series)
pandas.tests.series.test_api.TestSeriesMisc.test_pickle_datetimes(self,datetime_series)
pandas.tests.series.test_api.TestSeriesMisc.test_pickle_dts(self,datetime_series)
pandas.tests.series.test_api.TestSeriesMisc.test_pickle_strings(self,string_series)
pandas.tests.series.test_api.TestSeriesMisc.test_raise_on_info(self)
pandas.tests.series.test_api.TestSeriesMisc.test_scalarop_preserve_name(self,datetime_series)
pandas.tests.series.test_api.TestSeriesMisc.test_sort_index_name(self,datetime_series)
pandas.tests.series.test_api.TestSeriesMisc.test_sparse_accessor_updates_on_inplace(self)
pandas.tests.series.test_api.TestSeriesMisc.test_str_accessor_updates_on_inplace(self)
pandas.tests.series.test_api.TestSeriesMisc.test_str_attribute(self)
pandas.tests.series.test_api.TestSeriesMisc.test_tab_complete_warning(self,ip)
pandas.tests.series.test_api.TestSeriesMisc.test_tab_completion(self)
pandas.tests.series.test_api.TestSeriesMisc.test_tab_completion_with_categorical(self)
pandas.tests.series.test_api.TestSeriesMisc.test_values(self,datetime_series)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_dtypes.py----------------------------------------
A:pandas.tests.series.test_dtypes.dt64ser->Series(date_range('20130101', periods=3))
A:pandas.tests.series.test_dtypes.result->Series(series, dtype='category')
A:pandas.tests.series.test_dtypes.tdser->Series(['59 Days', '59 Days', 'NaT'], dtype='timedelta64[ns]')
A:pandas.tests.series.test_dtypes.s->Series([1, 2, 3], index=[2, 0, 1])
A:pandas.tests.series.test_dtypes.as_typed->Series([1, 2, 3], index=[2, 0, 1]).astype(dtype)
A:pandas.tests.series.test_dtypes.arr->Series(['1', '2', '3', '4'], dtype=object)
A:pandas.tests.series.test_dtypes.expected->numpy.array(data.astype(object))
A:pandas.tests.series.test_dtypes.ts->Series([Timestamp('2010-01-04 00:00:00', tz='US/Eastern')])
A:pandas.tests.series.test_dtypes.td->Series([Timedelta(1, unit='d')])
A:pandas.tests.series.test_dtypes.res->Series([1, 2, 3], index=[2, 0, 1]).astype(CategoricalDtype(list('abcdef'), ordered=True))
A:pandas.tests.series.test_dtypes.expec->Series([1, 2, 3], index=[2, 0, 1]).map(str)
A:pandas.tests.series.test_dtypes.dt1->dtype_class({'abc': str})
A:pandas.tests.series.test_dtypes.dt2->dtype_class({'abc': 'float64'})
A:pandas.tests.series.test_dtypes.dt3->dtype_class({'abc': str, 'def': str})
A:pandas.tests.series.test_dtypes.dt4->dtype_class({0: str})
A:pandas.tests.series.test_dtypes.dt5->dtype_class({})
A:pandas.tests.series.test_dtypes.exp->Series(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c'])
A:pandas.tests.series.test_dtypes.df->DataFrame({'a': series, 'b': ['foo'] * len(series)})
A:pandas.tests.series.test_dtypes.cats->Categorical(['a', 'b', 'b', 'a', 'a', 'd'])
A:pandas.tests.series.test_dtypes.exp_df->DataFrame({'cats': cats, 'vals': [1, 2, 3, 4, 5, 6]})
A:pandas.tests.series.test_dtypes.df['cats']->df['cats'].astype('category').astype('category')
A:pandas.tests.series.test_dtypes.value->numpy.random.RandomState(0).randint(0, 10000, 100)
A:pandas.tests.series.test_dtypes.cat_labels->Categorical(labels, labels)
A:pandas.tests.series.test_dtypes.df['value_group']->pandas.cut(df.value, range(0, 10500, 500), right=False, labels=cat_labels)
A:pandas.tests.series.test_dtypes.cat->Series(Categorical(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c']))
A:pandas.tests.series.test_dtypes.s2->Series([1, 2, 3], index=[2, 0, 1]).astype(temp_dtype).reindex(new_index).astype(new_dtype)
A:pandas.tests.series.test_dtypes.exp2->Series([1, 2, 3, 4]).astype(int)
A:pandas.tests.series.test_dtypes.s_data->list('abcaacbab')
A:pandas.tests.series.test_dtypes.s_dtype->CategoricalDtype(list('bac'), ordered=series_ordered)
A:pandas.tests.series.test_dtypes.dtype->CategoricalDtype(list('adc'), dtype_ordered)
A:pandas.tests.series.test_dtypes.exp_dtype->CategoricalDtype(s_dtype.categories, dtype_ordered)
A:pandas.tests.series.test_dtypes.msg->"The '{dtype}' dtype has no unit\\. Please pass in '{dtype}\\[ns\\]' instead.".format(dtype=dtype.__name__)
A:pandas.tests.series.test_dtypes.init_empty->Series([], dtype=dtype)
A:pandas.tests.series.test_dtypes.as_type_empty->Series([]).astype(dtype)
A:pandas.tests.series.test_dtypes.series->Series(['a', 'b', 'c'])
A:pandas.tests.series.test_dtypes.exp_dtypes->Series([np.dtype('datetime64[ns]'), np.dtype('float64')], index=['a', 'b'])
A:pandas.tests.series.test_dtypes.actual->Series(np.array([1, 2, 3, None, 'a'], dtype='O')).infer_objects()
A:pandas.tests.series.test_dtypes.s1->Series([1, 2, 3], index=[2, 0, 1]).reindex(new_index).astype(temp_dtype).astype(new_dtype)
pandas.tests.series.test_dtypes.TestSeriesDtypes
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_arg_for_errors_in_astype(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype(self,dtype)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_bool_missing_to_categorical(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_cast_nan_inf_int(self,dtype,value)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_cast_object_int(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_cast_object_int_fail(self,dtype)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_categorical_to_categorical(self,name,dtype_ordered,series_ordered)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_categorical_to_other(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_categoricaldtype(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_categories_raises(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_datetime(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_datetime64tz(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_dict_like(self,dtype_class)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_dt(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_dt64tz(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_empty_constructor_equality(self,dtype)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_from_categorical(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_generic_timestamp_no_frequency(self,dtype)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_str_cast(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_str_map(self,dtype,series)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_unicode(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_dt64_series_astype_object(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_dtype(self,datetime_series)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_infer_objects_series(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_intercept_astype_object(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_reindex_astype_order_consistency(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_series_to_categorical(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_td64_series_astype_object(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_values_compatibility(self,data)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_io.py----------------------------------------
A:pandas.tests.series.test_io.params->dict(squeeze=True, index_col=0, header=None, parse_dates=True)
A:pandas.tests.series.test_io.header->dict(squeeze=True, index_col=0, header=None, parse_dates=True).get('header')
A:pandas.tests.series.test_io.out->pandas.read_csv(path, **params)
A:pandas.tests.series.test_io.ts->Series(np.random.randn(len(prng)), prng)
A:pandas.tests.series.test_io.ts_h->self.read_csv(path, header=0)
A:pandas.tests.series.test_io.series->self.read_csv(path, sep='|', parse_dates=False)
A:pandas.tests.series.test_io.series_h->self.read_csv(path, header=0)
A:pandas.tests.series.test_io.check_series->Series({'1998-01-01': 1.0, '1999-01-01': 2.0})
A:pandas.tests.series.test_io.lines->f.readlines()
A:pandas.tests.series.test_io.arr->numpy.loadtxt(path)
A:pandas.tests.series.test_io.buf->StringIO()
A:pandas.tests.series.test_io.s->SubclassedSeries([1, 2, 3], name='X')
A:pandas.tests.series.test_io.s2->self.read_csv(buf, index_col=0, encoding='UTF-8')
A:pandas.tests.series.test_io.ser->Series([0.123456, 0.234567, 0.567567])
A:pandas.tests.series.test_io.rs->datetime_series.to_frame(name='testdifferent')
A:pandas.tests.series.test_io.xp->pandas.DataFrame(dict(testdifferent=datetime_series.values), index=datetime_series.index)
A:pandas.tests.series.test_io.split->SubclassedSeries([1, 2, 3], name='X').str.split('\\s+and\\s+')
A:pandas.tests.series.test_io.csv_str->SubclassedSeries([1, 2, 3], name='X').to_csv(path_or_buf=None, header=False)
A:pandas.tests.series.test_io.result->SubclassedSeries([1, 2, 3], name='X').to_frame()
A:pandas.tests.series.test_io.(f, _handles)->get_handle(filename, 'w', compression=compression, encoding=encoding)
A:pandas.tests.series.test_io.text->fh.read().decode(encoding or 'utf8')
A:pandas.tests.series.test_io.expected->SubclassedFrame({'X': [1, 2, 3]})
A:pandas.tests.series.test_io.expected.index->SubclassedFrame({'X': [1, 2, 3]}).index.astype(str)
A:pandas.tests.series.test_io.prng->period_range('1/1/2011', '1/1/2012', freq='M')
A:pandas.tests.series.test_io.new_ts->pandas._testing.round_trip_pickle(ts)
A:pandas.tests.series.test_io.unpickled->pandas.read_pickle(path)
pandas.tests.series.test_io.TestSeriesIO
pandas.tests.series.test_io.TestSeriesIO._pickle_roundtrip_name(self,obj)
pandas.tests.series.test_io.TestSeriesIO.test_pickle_preserve_name(self)
pandas.tests.series.test_io.TestSeriesIO.test_timeseries_periodindex(self)
pandas.tests.series.test_io.TestSeriesIO.test_to_frame(self,datetime_series)
pandas.tests.series.test_io.TestSeriesIO.test_to_frame_expanddim(self)
pandas.tests.series.test_io.TestSeriesToCSV
pandas.tests.series.test_io.TestSeriesToCSV.read_csv(self,path,**kwargs)
pandas.tests.series.test_io.TestSeriesToCSV.test_from_csv(self,datetime_series,string_series)
pandas.tests.series.test_io.TestSeriesToCSV.test_to_csv(self,datetime_series)
pandas.tests.series.test_io.TestSeriesToCSV.test_to_csv_compression(self,s,encoding,compression)
pandas.tests.series.test_io.TestSeriesToCSV.test_to_csv_float_format(self)
pandas.tests.series.test_io.TestSeriesToCSV.test_to_csv_interval_index(self)
pandas.tests.series.test_io.TestSeriesToCSV.test_to_csv_list_entries(self)
pandas.tests.series.test_io.TestSeriesToCSV.test_to_csv_path_is_none(self)
pandas.tests.series.test_io.TestSeriesToCSV.test_to_csv_unicode_index(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/conftest.py----------------------------------------
A:pandas.tests.series.conftest.s->pandas._testing.makeObjectSeries()
pandas.tests.series.conftest.datetime_series()
pandas.tests.series.conftest.dt_series()
pandas.tests.series.conftest.object_series()
pandas.tests.series.conftest.string_series()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/test_constructors.py----------------------------------------
A:pandas.tests.series.test_constructors.expected->Series(dt_list, dtype=object)
A:pandas.tests.series.test_constructors.result->Series(dt_list)
A:pandas.tests.series.test_constructors.c_dtype->numpy.dtype([('a', 'i8'), ('b', 'f4')])
A:pandas.tests.series.test_constructors.cdt_arr->numpy.array([(1, 0.4), (256, -13)], dtype=c_dtype)
A:pandas.tests.series.test_constructors.scalar->Series(0.5)
A:pandas.tests.series.test_constructors.empty_series->Series()
A:pandas.tests.series.test_constructors.derived->Series(datetime_series)
A:pandas.tests.series.test_constructors.mixed->Series(['hello', np.NaN], index=[0, 1])
A:pandas.tests.series.test_constructors.m->map(lambda x: x, range(10))
A:pandas.tests.series.test_constructors.empty->Series(dtype='float64', index=range(10))
A:pandas.tests.series.test_constructors.empty2->Series(input_arg, index=range(10))
A:pandas.tests.series.test_constructors.ser->Series(['x', np.nan], dtype=string_dtype)
A:pandas.tests.series.test_constructors.index2->sorted(index1)
A:pandas.tests.series.test_constructors.s1->Series([4, 7, -5, 3], index=index1)
A:pandas.tests.series.test_constructors.s2->Series(s, dtype=np.int64)
A:pandas.tests.series.test_constructors.s->Series(index.astype(object), dtype=object)
A:pandas.tests.series.test_constructors.exp->Series(index).astype(object)
A:pandas.tests.series.test_constructors.exp.index->range(10, 20)
A:pandas.tests.series.test_constructors.cat->Categorical(['a', 'b', 'c', 'a'])
A:pandas.tests.series.test_constructors.res->Series(cat)
A:pandas.tests.series.test_constructors.factor->Categorical(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c'])
A:pandas.tests.series.test_constructors.df->pandas.DataFrame({'wing1': wing1, 'wing2': wing2, 'mat': mat}, index=belly)
A:pandas.tests.series.test_constructors.x->Series(data)
A:pandas.tests.series.test_constructors.x['person_name']->Categorical(x.person_name)
A:pandas.tests.series.test_constructors.cdt->CategoricalDtype(categories=list('dabc'), ordered=True)
A:pandas.tests.series.test_constructors.exp_s->numpy.array([1, 2, 3, 1], dtype=np.int64)
A:pandas.tests.series.test_constructors.exp_cat->numpy.array(['a', 'b', 'c', 'a'], dtype=np.object_)
A:pandas.tests.series.test_constructors.exp_s2->numpy.array([2, 2, 3, 1], dtype=np.int64)
A:pandas.tests.series.test_constructors.left->pandas.Series(['a', 'b', 'c'], dtype=CategoricalDtype(['a', 'b']))
A:pandas.tests.series.test_constructors.right->pandas.Series(pd.Categorical(['a', 'b', np.nan], categories=['a', 'b']))
A:pandas.tests.series.test_constructors.data->numpy.ma.masked_all((3,), dtype=float).harden_mask()
A:pandas.tests.series.test_constructors.data[0]->datetime(2001, 1, 1)
A:pandas.tests.series.test_constructors.data[2]->datetime(2001, 1, 3)
A:pandas.tests.series.test_constructors.data[1]->datetime(2001, 1, 2)
A:pandas.tests.series.test_constructors.rng->date_range('20090415', '20090519', freq='B')
A:pandas.tests.series.test_constructors.y->pandas.Series(x, copy=True, dtype=float)
A:pandas.tests.series.test_constructors.belly->'216 3T19'.split()
A:pandas.tests.series.test_constructors.wing1->'2T15 4H19'.split()
A:pandas.tests.series.test_constructors.wing2->'416 4T20'.split()
A:pandas.tests.series.test_constructors.mat->pandas.to_datetime('2016-01-22 2019-09-07'.split())
A:pandas.tests.series.test_constructors.dts->Series(dates, dtype='datetime64[ns]')
A:pandas.tests.series.test_constructors.dates->Series(d, index=datetime_series.index)
A:pandas.tests.series.test_constructors.values2->Series(d, index=datetime_series.index).view(np.ndarray).astype('datetime64[ns]')
A:pandas.tests.series.test_constructors.values1->Series(d, index=datetime_series.index).view(np.ndarray).astype('M8[{0}]'.format(dtype))
A:pandas.tests.series.test_constructors.dates2->numpy.array([d.date() for d in dates.to_pydatetime()], dtype=object)
A:pandas.tests.series.test_constructors.series1->Series(dates2, dates)
A:pandas.tests.series.test_constructors.dr->date_range('20130101', periods=3, tz='US/Eastern')
A:pandas.tests.series.test_constructors.t->Series(date_range('20130101', periods=1000, tz='US/Eastern'))
A:pandas.tests.series.test_constructors.dtype->'{}[{}]'.format(dtype, unit)
A:pandas.tests.series.test_constructors.arr->numpy.array([1, 2, 3], dtype='timedelta64[s]')
A:pandas.tests.series.test_constructors.intervals->interval_constructor.from_breaks(np.arange(3), closed='right')
A:pandas.tests.series.test_constructors.pi->period_range('20130101', periods=5, freq='D')
A:pandas.tests.series.test_constructors.pidx->pandas._testing.makePeriodIndex(100)
A:pandas.tests.series.test_constructors.data_datetime64->create_data(np.datetime64)
A:pandas.tests.series.test_constructors.data_datetime->create_data(lambda x: datetime.strptime(x, '%Y-%m-%d'))
A:pandas.tests.series.test_constructors.data_Timestamp->create_data(Timestamp)
A:pandas.tests.series.test_constructors.result_datetime64->Series(data_datetime64)
A:pandas.tests.series.test_constructors.result_datetime->Series(data_datetime)
A:pandas.tests.series.test_constructors.result_Timestamp->Series(data_Timestamp)
A:pandas.tests.series.test_constructors.ndm->non_mapping_dict_subclass({3: 'three'})
A:pandas.tests.series.test_constructors.values->frozenset(values)
A:pandas.tests.series.test_constructors.series->Series(list(date_range('1/1/2000', periods=10)))
A:pandas.tests.series.test_constructors.nans->Series(np.NaN, index=datetime_series.index, dtype=np.float64)
A:pandas.tests.series.test_constructors.strings->Series('foo', index=datetime_series.index)
A:pandas.tests.series.test_constructors.d->datetime.datetime.now()
A:pandas.tests.series.test_constructors.categorical->Series(0, index=datetime_series.index, dtype='category')
A:pandas.tests.series.test_constructors.td->Series([timedelta(days=i) for i in range(3)] + ['foo'])
A:pandas.tests.series.test_constructors.msg->'Cannot cast {}.*? to '.format(type(index).__name__.rstrip('Index'))
pandas.tests.series.test_constructors.TestSeriesConstructors
pandas.tests.series.test_constructors.TestSeriesConstructors.test_NaT_cast(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_NaT_scalar(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_auto_conversion(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_categorical_sideeffects_free(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_construction_consistency(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_construction_interval(self,interval_constructor)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_construction_to_datetimelike_unit(self,arr_dtype,dtype,unit)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_construction_to_dtlike_unit(self,arr_dtype,dtype,unit)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor(self,datetime_series)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_broadcast_list(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_cant_cast_datetimelike(self,index)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_cant_cast_dtlike(self,index)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_cast(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_cast_object(self,index)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_categorical(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_categorical_dtype(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_categorical_string(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_categorical_with_coercion(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_coerce_float_fail(self,any_int_dtype)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_coerce_float_valid(self,float_dtype)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_copy(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_corner(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_datelike_coercion(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_datetimes_with_nulls(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_default_index(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_dict(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_dict_datetime64_index(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_dict_dt64_index(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_dict_list_value_explicit_dtype(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_dict_nan_key(self,value)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_dict_of_tuples(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_dict_order(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_dts_with_nulls(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_dtype_datetime64(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_dtype_dt64(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_dtype_no_cast(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_dtype_only(self,dtype,index)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_dtype_str_na_values(self,string_dtype)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_dtype_timedelta64(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_empty(self,input_class)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_generator(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_generic_timestamp_bad_frequency(self,dtype,msg)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_generic_timestamp_no_frequency(self,dtype)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_index_dtype(self,dtype)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_index_mismatch(self,input)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_infer_interval(self,data_constructor)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_infer_period(self,data_constructor)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_interval_mixed_closed(self,data_constructor)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_iterable(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_limit_copies(self,index)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_list_like(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_list_of_tuples(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_list_str(self,input_vals,string_dtype)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_list_str_na(self,string_dtype)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_map(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_mapping(self,non_mapping_dict_subclass)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_maskedarray(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_maskedarray_hardened(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_mixed_tz(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_name_hashable(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_name_unhashable(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_nan(self,input_arg)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_no_data_index_order(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_no_data_string_type(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_numpy_scalar(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_pass_nan_nat(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_pass_none(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_period_incompatible_frequency(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_periodindex(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_range_dtype(self,dtype)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_sanitize(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_sequence(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_series(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_set(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_single_str(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_string_element_string_type(self,item)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_tuple_of_tuples(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_tz_mixed_data(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_unsigned_dtype_overflow(self,uint_dtype)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_with_datetime_tz(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_with_dt_tz(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_with_naive_string_and_datetimetz_dtype(self,arg)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_with_naive_string_and_dttz_dtype(self,arg)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_convert_non_ns(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_empty_constructor(self,constructor,check_index_type)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_fromDict(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_fromValue(self,datetime_series)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_invalid_compound_dtype(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_invalid_dtype(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_scalar_conversion(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_series_ctor_plus_datetimeindex(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_series_ctor_plus_dtindex(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_unordered_compare_equal(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_value_counts.py----------------------------------------
A:pandas.tests.series.methods.test_value_counts.exp_idx->pandas.CategoricalIndex([1, 3, 2], categories=[1, 2, 3], ordered=False)
A:pandas.tests.series.methods.test_value_counts.exp->Series([2, 1, 3], index=CategoricalIndex(['a', 'b', np.nan]))
A:pandas.tests.series.methods.test_value_counts.ser->Series(['a', 'b', 'a'], dtype='category')
A:pandas.tests.series.methods.test_value_counts.idx->pandas.CategoricalIndex(values, name='xxx')
A:pandas.tests.series.methods.test_value_counts.values->pandas.Categorical([1, 2, 3, 1, 1, 3], ordered=False)
A:pandas.tests.series.methods.test_value_counts.cats->Categorical(list('abcccb'), categories=list('cabd'))
A:pandas.tests.series.methods.test_value_counts.res->Series(['a', 'b', 'a'], dtype='category').value_counts(dropna=False, sort=False)
A:pandas.tests.series.methods.test_value_counts.exp_index->CategoricalIndex(list('cbad'), categories=cats.categories)
A:pandas.tests.series.methods.test_value_counts.out->Series(['a', 'b', 'a'], dtype='category').value_counts(dropna=dropna)
pandas.tests.series.methods.test_value_counts.TestSeriesValueCounts
pandas.tests.series.methods.test_value_counts.TestSeriesValueCounts.test_value_counts_bool_with_nan(self,ser,dropna,exp)
pandas.tests.series.methods.test_value_counts.TestSeriesValueCounts.test_value_counts_categorical(self)
pandas.tests.series.methods.test_value_counts.TestSeriesValueCounts.test_value_counts_categorical_not_ordered(self)
pandas.tests.series.methods.test_value_counts.TestSeriesValueCounts.test_value_counts_categorical_ordered(self)
pandas.tests.series.methods.test_value_counts.TestSeriesValueCounts.test_value_counts_categorical_with_nan(self)
pandas.tests.series.methods.test_value_counts.TestSeriesValueCounts.test_value_counts_datetime(self)
pandas.tests.series.methods.test_value_counts.TestSeriesValueCounts.test_value_counts_datetime_tz(self)
pandas.tests.series.methods.test_value_counts.TestSeriesValueCounts.test_value_counts_dt(self)
pandas.tests.series.methods.test_value_counts.TestSeriesValueCounts.test_value_counts_dt_tz(self)
pandas.tests.series.methods.test_value_counts.TestSeriesValueCounts.test_value_counts_period(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_round.py----------------------------------------
A:pandas.tests.series.methods.test_round.result->round(ser, decimals)
A:pandas.tests.series.methods.test_round.expected->Series([2.0, np.nan, 0.0])
A:pandas.tests.series.methods.test_round.ser->Series([1.123, 2.123, 3.123], index=range(3))
A:pandas.tests.series.methods.test_round.out->numpy.round(ser, decimals=0)
A:pandas.tests.series.methods.test_round.expected_rounded0->Series([1.0, 2.0, 3.0], index=range(3))
A:pandas.tests.series.methods.test_round.expected_rounded->Series([1.12, 2.12, 3.12], index=range(3))
pandas.tests.series.methods.test_round.TestSeriesRound
pandas.tests.series.methods.test_round.TestSeriesRound.test_round(self,datetime_series)
pandas.tests.series.methods.test_round.TestSeriesRound.test_round_builtin(self)
pandas.tests.series.methods.test_round.TestSeriesRound.test_round_numpy(self)
pandas.tests.series.methods.test_round.TestSeriesRound.test_round_numpy_with_nan(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_drop_duplicates.py----------------------------------------
A:pandas.tests.series.methods.test_drop_duplicates.tc->Series(Categorical([True, False, True, False], categories=[True, False], ordered=ordered_fixture))
A:pandas.tests.series.methods.test_drop_duplicates.sc->Series(Categorical([True, False, True, False], categories=[True, False], ordered=ordered_fixture)).copy()
A:pandas.tests.series.methods.test_drop_duplicates.cat_array->numpy.array([1, 2, 3, 4, 5], dtype=np.dtype(dtype))
A:pandas.tests.series.methods.test_drop_duplicates.input1->numpy.array([1, 2, 3, 3], dtype=np.dtype(dtype))
A:pandas.tests.series.methods.test_drop_duplicates.tc1->Series(Categorical(input1, categories=cat_array, ordered=ordered_fixture))
A:pandas.tests.series.methods.test_drop_duplicates.expected->Series([True, True, True, True])
A:pandas.tests.series.methods.test_drop_duplicates.input2->numpy.array([1, 2, 3, 5, 3, 2, 4], dtype=np.dtype(dtype))
A:pandas.tests.series.methods.test_drop_duplicates.tc2->Series(Categorical(input2, categories=cat_array, ordered=ordered_fixture))
pandas.tests.series.methods.test_drop_duplicates.TestSeriesDropDuplicates
pandas.tests.series.methods.test_drop_duplicates.TestSeriesDropDuplicates.test_drop_duplicates_categorical_bool(self,ordered_fixture)
pandas.tests.series.methods.test_drop_duplicates.TestSeriesDropDuplicates.test_drop_duplicates_categorical_non_bool(self,dtype,ordered_fixture)
pandas.tests.series.methods.test_drop_duplicates.test_drop_duplicates(any_numpy_dtype,keep,expected)
pandas.tests.series.methods.test_drop_duplicates.test_drop_duplicates_bool(keep,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_sort_values.py----------------------------------------
A:pandas.tests.series.methods.test_sort_values.ser->Series(original_list)
A:pandas.tests.series.methods.test_sort_values.expected->Series(sorted_list, index=output_index)
A:pandas.tests.series.methods.test_sort_values.result->DataFrame({'id': [6, 5, 4, 3, 2, 1], 'raw_grade': ['a', 'b', 'b', 'a', 'a', 'e']}).sort_values(by=['grade', 'id'])
A:pandas.tests.series.methods.test_sort_values.ts->datetime_series.copy()
A:pandas.tests.series.methods.test_sort_values.ordered->datetime_series.copy().sort_values(ascending=[False], na_position='first')
A:pandas.tests.series.methods.test_sort_values.df->DataFrame({'id': [6, 5, 4, 3, 2, 1], 'raw_grade': ['a', 'b', 'b', 'a', 'a', 'e']})
A:pandas.tests.series.methods.test_sort_values.c->Categorical(['a', 'b', 'b', 'a'], ordered=False)
A:pandas.tests.series.methods.test_sort_values.cat->Series(Categorical(['a', 'c', 'b', 'd'], categories=['a', 'b', 'c', 'd'], ordered=True))
A:pandas.tests.series.methods.test_sort_values.res->DataFrame({'id': [6, 5, 4, 3, 2, 1], 'raw_grade': ['a', 'b', 'b', 'a', 'a', 'e']}).sort_values(by=['sort'], ascending=False)
A:pandas.tests.series.methods.test_sort_values.exp->DataFrame({'id': [6, 5, 4, 3, 2, 1], 'raw_grade': ['a', 'b', 'b', 'a', 'a', 'e']}).sort_values(by=['string'], ascending=True)
A:pandas.tests.series.methods.test_sort_values.raw_cat1->Categorical(['a', 'b', 'c', 'd'], categories=['a', 'b', 'c', 'd'], ordered=False)
A:pandas.tests.series.methods.test_sort_values.raw_cat2->Categorical(['a', 'b', 'c', 'd'], categories=['d', 'c', 'b', 'a'], ordered=True)
A:pandas.tests.series.methods.test_sort_values.df['grade']->df['grade'].cat.set_categories(['b', 'e', 'a']).cat.set_categories(['b', 'e', 'a'])
A:pandas.tests.series.methods.test_sort_values.result_ser->Series(original_list).sort_values(ascending=False, **kwargs)
pandas.tests.series.methods.test_sort_values.TestSeriesSortValues
pandas.tests.series.methods.test_sort_values.TestSeriesSortValues.test_sort_values(self,datetime_series)
pandas.tests.series.methods.test_sort_values.TestSeriesSortValues.test_sort_values_categorical(self)
pandas.tests.series.methods.test_sort_values.TestSeriesSortValues.test_sort_values_ignore_index(self,inplace,original_list,sorted_list,ignore_index,output_index)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_rank.py----------------------------------------
A:pandas.tests.series.methods.test_rank.s->Series(np.arange(2 ** 24 + 1))
A:pandas.tests.series.methods.test_rank.rankdata->pytest.importorskip('scipy.stats.rankdata')
A:pandas.tests.series.methods.test_rank.ranks->datetime_series.rank()
A:pandas.tests.series.methods.test_rank.oranks->datetime_series.astype('O').rank()
A:pandas.tests.series.methods.test_rank.mask->numpy.isnan(datetime_series)
A:pandas.tests.series.methods.test_rank.filled->datetime_series.fillna(np.inf)
A:pandas.tests.series.methods.test_rank.exp->Series([3, np.nan, 1, 4, 2], dtype='float64')
A:pandas.tests.series.methods.test_rank.iseries->Series([1, np.nan, np.inf, -np.inf, 25])
A:pandas.tests.series.methods.test_rank.iranks->Series([1, np.nan, np.inf, -np.inf, 25]).rank()
A:pandas.tests.series.methods.test_rank.rng->date_range('1/1/1990', periods=5)
A:pandas.tests.series.methods.test_rank.values->numpy.insert(values, nan_indices, na_value)
A:pandas.tests.series.methods.test_rank.random_order->numpy.random.permutation(len(values))
A:pandas.tests.series.methods.test_rank.exp_desc->Series([6.0, 5.0, 4.0, 3.0, 2.0, 1.0])
A:pandas.tests.series.methods.test_rank.ordered->Series(['first', 'second', 'third', 'fourth', 'fifth', 'sixth']).astype(CategoricalDtype(categories=['first', 'second', 'third', 'fourth', 'fifth', 'sixth'], ordered=True))
A:pandas.tests.series.methods.test_rank.unordered->Series(['first', 'second', 'third', 'fourth', 'fifth', 'sixth']).astype(CategoricalDtype(categories=['first', 'second', 'third', 'fourth', 'fifth', 'sixth'], ordered=False))
A:pandas.tests.series.methods.test_rank.exp_unordered->Series([2.0, 4.0, 6.0, 3.0, 1.0, 5.0])
A:pandas.tests.series.methods.test_rank.res->Series(np.arange(2 ** 24 + 1)).rank(ascending=False)
A:pandas.tests.series.methods.test_rank.unordered1->Series([1, 2, 3, 4, 5, 6]).astype(CategoricalDtype([1, 2, 3, 4, 5, 6], False))
A:pandas.tests.series.methods.test_rank.exp_unordered1->Series([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])
A:pandas.tests.series.methods.test_rank.res1->Series([1, 2, 3, 4, 5, 6]).astype(CategoricalDtype([1, 2, 3, 4, 5, 6], False)).rank()
A:pandas.tests.series.methods.test_rank.na_ser->Series(['first', 'second', 'third', 'fourth', np.NaN]).astype(CategoricalDtype(['first', 'second', 'third', 'fourth'], True))
A:pandas.tests.series.methods.test_rank.exp_top->Series([0.4, 0.6, 0.8, 1.0, 0.2])
A:pandas.tests.series.methods.test_rank.exp_bot->Series([0.2, 0.4, 0.6, 0.8, 1.0])
A:pandas.tests.series.methods.test_rank.exp_keep->Series([0.25, 0.5, 0.75, 1.0, np.NaN])
A:pandas.tests.series.methods.test_rank.nan_indices->numpy.random.choice(range(len(values)), 5)
A:pandas.tests.series.methods.test_rank.exp_order->numpy.insert(exp_order, nan_indices, np.nan)
A:pandas.tests.series.methods.test_rank.result->Series(np.arange(2 ** 24 + 1)).rank(pct=True).max()
A:pandas.tests.series.methods.test_rank.expected->Series(exp).astype(result.dtype)
A:pandas.tests.series.methods.test_rank.xs->numpy.concatenate([xs[i:] for i in range(0, 9, 2)])
A:pandas.tests.series.methods.test_rank.ts->Series(vals, index=index)
A:pandas.tests.series.methods.test_rank.sprank->rankdata(vals, m if m != 'first' else 'ordinal')
A:pandas.tests.series.methods.test_rank.res2->Series(np.arange(2 ** 24 + 1)).rank(method=method, ascending=False)
pandas.tests.series.methods.test_rank.TestSeriesRank
pandas.tests.series.methods.test_rank.TestSeriesRank.test_rank(self,datetime_series)
pandas.tests.series.methods.test_rank.TestSeriesRank.test_rank_categorical(self)
pandas.tests.series.methods.test_rank.TestSeriesRank.test_rank_dense_method(self)
pandas.tests.series.methods.test_rank.TestSeriesRank.test_rank_desc_mix_nans_infs(self)
pandas.tests.series.methods.test_rank.TestSeriesRank.test_rank_descending(self)
pandas.tests.series.methods.test_rank.TestSeriesRank.test_rank_inf(self,contents,dtype)
pandas.tests.series.methods.test_rank.TestSeriesRank.test_rank_int(self)
pandas.tests.series.methods.test_rank.TestSeriesRank.test_rank_methods_series(self)
pandas.tests.series.methods.test_rank.TestSeriesRank.test_rank_modify_inplace(self)
pandas.tests.series.methods.test_rank.TestSeriesRank.test_rank_object_bug(self)
pandas.tests.series.methods.test_rank.TestSeriesRank.test_rank_signature(self)
pandas.tests.series.methods.test_rank.TestSeriesRank.test_rank_tie_methods(self)
pandas.tests.series.methods.test_rank.TestSeriesRank.test_rank_tie_methods_on_infs_nans(self,method,na_option,ascending)
pandas.tests.series.methods.test_rank.test_pct_max_many_rows()
pandas.tests.series.methods.test_rank.test_rank_average_pct(dtype,ser,exp)
pandas.tests.series.methods.test_rank.test_rank_dense_pct(dtype,ser,exp)
pandas.tests.series.methods.test_rank.test_rank_first_pct(dtype,ser,exp)
pandas.tests.series.methods.test_rank.test_rank_max_pct(dtype,ser,exp)
pandas.tests.series.methods.test_rank.test_rank_min_pct(dtype,ser,exp)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_argsort.py----------------------------------------
A:pandas.tests.series.methods.test_argsort.func->getattr(np, name)
A:pandas.tests.series.methods.test_argsort.ts->ser.copy()
A:pandas.tests.series.methods.test_argsort.expected->Series(list(range(4)) + [-1], dtype='int64')
A:pandas.tests.series.methods.test_argsort.argsorted->datetime_series.argsort()
A:pandas.tests.series.methods.test_argsort.s->Series(np.random.randint(0, 100, size=10000))
A:pandas.tests.series.methods.test_argsort.shifted->Series(np.random.randint(0, 100, size=10000)).shift(-1)
A:pandas.tests.series.methods.test_argsort.result->datetime_series.argsort()
A:pandas.tests.series.methods.test_argsort.mindexer->Series(np.random.randint(0, 100, size=10000)).argsort(kind='mergesort')
A:pandas.tests.series.methods.test_argsort.qindexer->Series(np.random.randint(0, 100, size=10000)).argsort()
A:pandas.tests.series.methods.test_argsort.mexpected->numpy.argsort(s.values, kind='mergesort')
A:pandas.tests.series.methods.test_argsort.qexpected->numpy.argsort(s.values, kind='quicksort')
pandas.tests.series.methods.test_argsort.TestSeriesArgsort
pandas.tests.series.methods.test_argsort.TestSeriesArgsort._check_accum_op(self,name,ser,check_dtype=True)
pandas.tests.series.methods.test_argsort.TestSeriesArgsort.test_argsort(self,datetime_series)
pandas.tests.series.methods.test_argsort.TestSeriesArgsort.test_argsort_preserve_name(self,datetime_series)
pandas.tests.series.methods.test_argsort.TestSeriesArgsort.test_argsort_stable(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_to_dict.py----------------------------------------
A:pandas.tests.series.methods.test_to_dict.from_method->Series(datetime_series.to_dict(collections.Counter))
A:pandas.tests.series.methods.test_to_dict.from_constructor->Series(collections.Counter(datetime_series.items()))
pandas.tests.series.methods.test_to_dict.TestSeriesToDict
pandas.tests.series.methods.test_to_dict.TestSeriesToDict.test_to_dict(self,mapping,datetime_series)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_duplicated.py----------------------------------------
A:pandas.tests.series.methods.test_duplicated.ser->Series([np.nan, 3, 3, None, np.nan], dtype=object)
A:pandas.tests.series.methods.test_duplicated.result->Series([np.nan, 3, 3, None, np.nan], dtype=object).duplicated(keep=keep)
pandas.tests.series.methods.test_duplicated.test_duplicated_keep(keep,expected)
pandas.tests.series.methods.test_duplicated.test_duplicated_nan_none(keep,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_replace.py----------------------------------------
A:pandas.tests.series.methods.test_replace.ser->pandas.Series(np.fabs(np.random.randn(N)), tm.makeDateIndex(N), dtype=object)
A:pandas.tests.series.methods.test_replace.exp->pandas.Series(np.fabs(np.random.randn(N)), tm.makeDateIndex(N), dtype=object).fillna(-1)
A:pandas.tests.series.methods.test_replace.rs->pandas.Series(np.fabs(np.random.randn(N)), tm.makeDateIndex(N), dtype=object).replace({np.nan: -1, 'foo': -2, 'bar': -3})
A:pandas.tests.series.methods.test_replace.rs2->pandas.Series(np.fabs(np.random.randn(N)), tm.makeDateIndex(N), dtype=object).replace([np.nan, 'foo', 'bar'], [-1, -2, -3])
A:pandas.tests.series.methods.test_replace.filled->pandas.Series(np.fabs(np.random.randn(N)), tm.makeDateIndex(N), dtype=object).copy()
A:pandas.tests.series.methods.test_replace.result->pandas.Series(ser).replace(2, True)
A:pandas.tests.series.methods.test_replace.expected->pandas.Series(exp)
A:pandas.tests.series.methods.test_replace.expected.loc[2]->pandas.Timestamp('20120101')
A:pandas.tests.series.methods.test_replace.ts->pandas.Timestamp('2015/01/01', tz='UTC')
A:pandas.tests.series.methods.test_replace.s->pandas.Series([0, '100000000000000000000', '100000000000000000001'])
A:pandas.tests.series.methods.test_replace.sc->pandas.Series([0, '100000000000000000000', '100000000000000000001']).copy()
A:pandas.tests.series.methods.test_replace.r->pandas.Series([0, '100000000000000000000', '100000000000000000001']).replace(to_rep, val)
A:pandas.tests.series.methods.test_replace.e->pandas.Series([0, 1, 2, 3.5, True], dtype='object')
A:pandas.tests.series.methods.test_replace.dr->pandas.date_range('1/1/2001', '1/10/2001', freq='D').to_series().reset_index(drop=True)
A:pandas.tests.series.methods.test_replace.empty_series->pandas.Series([])
A:pandas.tests.series.methods.test_replace.dti->pandas.date_range('2016-01-01', periods=3, tz='US/Pacific')
A:pandas.tests.series.methods.test_replace.c->pandas.Series([0, '100000000000000000000', '100000000000000000001']).astype('category')
A:pandas.tests.series.methods.test_replace.series->pandas.Series(ser)
pandas.tests.series.methods.test_replace.TestSeriesReplace
pandas.tests.series.methods.test_replace.TestSeriesReplace.test_replace(self,datetime_series)
pandas.tests.series.methods.test_replace.TestSeriesReplace.test_replace2(self)
pandas.tests.series.methods.test_replace.TestSeriesReplace.test_replace_bool_with_bool(self)
pandas.tests.series.methods.test_replace.TestSeriesReplace.test_replace_bool_with_string(self)
pandas.tests.series.methods.test_replace.TestSeriesReplace.test_replace_bool_with_string_no_op(self)
pandas.tests.series.methods.test_replace.TestSeriesReplace.test_replace_categorical(self,categorical,numeric)
pandas.tests.series.methods.test_replace.TestSeriesReplace.test_replace_categorical_single(self)
pandas.tests.series.methods.test_replace.TestSeriesReplace.test_replace_commutative(self,ser,to_replace,exp)
pandas.tests.series.methods.test_replace.TestSeriesReplace.test_replace_gh5319(self)
pandas.tests.series.methods.test_replace.TestSeriesReplace.test_replace_mixed_types(self)
pandas.tests.series.methods.test_replace.TestSeriesReplace.test_replace_mixed_types_with_string(self)
pandas.tests.series.methods.test_replace.TestSeriesReplace.test_replace_no_cast(self,ser,exp)
pandas.tests.series.methods.test_replace.TestSeriesReplace.test_replace_replacer_equals_replacement(self)
pandas.tests.series.methods.test_replace.TestSeriesReplace.test_replace_string_with_number(self)
pandas.tests.series.methods.test_replace.TestSeriesReplace.test_replace_unicode_with_number(self)
pandas.tests.series.methods.test_replace.TestSeriesReplace.test_replace_with_dict_with_bool_keys(self)
pandas.tests.series.methods.test_replace.TestSeriesReplace.test_replace_with_empty_dictlike(self)
pandas.tests.series.methods.test_replace.TestSeriesReplace.test_replace_with_empty_list(self)
pandas.tests.series.methods.test_replace.TestSeriesReplace.test_replace_with_no_overflowerror(self)
pandas.tests.series.methods.test_replace.TestSeriesReplace.test_replace_with_single_list(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_searchsorted.py----------------------------------------
A:pandas.tests.series.methods.test_searchsorted.ser->Series([3, 1, 2])
A:pandas.tests.series.methods.test_searchsorted.result->Series([3, 1, 2]).searchsorted(1, side='right')
A:pandas.tests.series.methods.test_searchsorted.res->Series([3, 1, 2]).searchsorted([0, 3], sorter=np.argsort(ser))
A:pandas.tests.series.methods.test_searchsorted.exp->numpy.array([0, 2], dtype=np.intp)
A:pandas.tests.series.methods.test_searchsorted.val->Timestamp('20120102')
pandas.tests.series.methods.test_searchsorted.TestSeriesSearchSorted
pandas.tests.series.methods.test_searchsorted.TestSeriesSearchSorted.test_searchsorted(self)
pandas.tests.series.methods.test_searchsorted.TestSeriesSearchSorted.test_searchsorted_datetime64_list(self)
pandas.tests.series.methods.test_searchsorted.TestSeriesSearchSorted.test_searchsorted_datetime64_scalar(self)
pandas.tests.series.methods.test_searchsorted.TestSeriesSearchSorted.test_searchsorted_dt64_list(self)
pandas.tests.series.methods.test_searchsorted.TestSeriesSearchSorted.test_searchsorted_dt64_scalar(self)
pandas.tests.series.methods.test_searchsorted.TestSeriesSearchSorted.test_searchsorted_numeric_dtypes_scalar(self)
pandas.tests.series.methods.test_searchsorted.TestSeriesSearchSorted.test_searchsorted_numeric_dtypes_vector(self)
pandas.tests.series.methods.test_searchsorted.TestSeriesSearchSorted.test_searchsorted_sorter(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_isin.py----------------------------------------
A:pandas.tests.series.methods.test_isin.s->Series(['a', 'b'])
A:pandas.tests.series.methods.test_isin.result->Series(['a', 'b']).isin(empty)
A:pandas.tests.series.methods.test_isin.expected->Series([False, False])
A:pandas.tests.series.methods.test_isin.expected2->Series([False, True, False, False, False])
pandas.tests.series.methods.test_isin.TestSeriesIsIn
pandas.tests.series.methods.test_isin.TestSeriesIsIn.test_isin(self)
pandas.tests.series.methods.test_isin.TestSeriesIsIn.test_isin_empty(self,empty)
pandas.tests.series.methods.test_isin.TestSeriesIsIn.test_isin_with_i8(self)
pandas.tests.series.methods.test_isin.TestSeriesIsIn.test_isin_with_string_scalar(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_diff.py----------------------------------------
A:pandas.tests.series.methods.test_diff.s->Series([False, True, 5.0, np.nan, True, False])
A:pandas.tests.series.methods.test_diff.r->numpy.diff(s)
A:pandas.tests.series.methods.test_diff.result->Series([False, True, 5.0, np.nan, True, False]).diff()
A:pandas.tests.series.methods.test_diff.ts->pandas._testing.makeTimeSeries(name='ts')
A:pandas.tests.series.methods.test_diff.expected->Series(output)
pandas.tests.series.methods.test_diff.TestSeriesDiff
pandas.tests.series.methods.test_diff.TestSeriesDiff.test_diff_bool(self,input,output,diff)
pandas.tests.series.methods.test_diff.TestSeriesDiff.test_diff_int(self)
pandas.tests.series.methods.test_diff.TestSeriesDiff.test_diff_np(self)
pandas.tests.series.methods.test_diff.TestSeriesDiff.test_diff_object_dtype(self)
pandas.tests.series.methods.test_diff.TestSeriesDiff.test_diff_tz(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_count.py----------------------------------------
A:pandas.tests.series.methods.test_count.mi->pandas.MultiIndex.from_arrays([list('aabbcc'), [1, 2, 2, np.nan, 1, 2]])
A:pandas.tests.series.methods.test_count.ts->Series(np.arange(len(mi)), index=mi)
A:pandas.tests.series.methods.test_count.left->Series(np.arange(len(mi)), index=mi).count(level=1)
A:pandas.tests.series.methods.test_count.right->Series([2, 3, 1], index=[1, 2, np.nan])
A:pandas.tests.series.methods.test_count.ser->Series(Categorical([np.nan, 1, 2, np.nan], categories=[5, 4, 3, 2, 1], ordered=True))
A:pandas.tests.series.methods.test_count.result->Series(Categorical([np.nan, 1, 2, np.nan], categories=[5, 4, 3, 2, 1], ordered=True)).count()
pandas.tests.series.methods.test_count.TestSeriesCount
pandas.tests.series.methods.test_count.TestSeriesCount.test_count(self,datetime_series)
pandas.tests.series.methods.test_count.TestSeriesCount.test_count_categorical(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_shift.py----------------------------------------
A:pandas.tests.series.methods.test_shift.shifted->datetime_series.astype(int).shift(1)
A:pandas.tests.series.methods.test_shift.unshifted->datetime_series.astype(int).shift(1).tshift(-1)
A:pandas.tests.series.methods.test_shift.offset->BDay()
A:pandas.tests.series.methods.test_shift.ps->pandas._testing.makePeriodSeries()
A:pandas.tests.series.methods.test_shift.shifted2->datetime_series.tshift(freq=datetime_series.index.freq)
A:pandas.tests.series.methods.test_shift.shifted3->pandas._testing.makePeriodSeries().tshift(freq=BDay())
A:pandas.tests.series.methods.test_shift.shifted4->pandas._testing.makePeriodSeries().shift(1, freq='B')
A:pandas.tests.series.methods.test_shift.shifted5->pandas._testing.makePeriodSeries().shift(1, freq=BDay())
A:pandas.tests.series.methods.test_shift.index->date_range('2000-01-01', periods=5)
A:pandas.tests.series.methods.test_shift.s1->Series(np.arange(5, dtype=dtype), index=index)
A:pandas.tests.series.methods.test_shift.result->pandas.Series([pd.Timestamp('2020-01-01'), pd.Timestamp('2020-01-02')]).shift(1, fill_value=0)
A:pandas.tests.series.methods.test_shift.expected->pandas.Series([pd.Timestamp(0), ser[0]])
A:pandas.tests.series.methods.test_shift.s->pandas.Series(['a', 'b', 'c', 'd'], dtype='category')
A:pandas.tests.series.methods.test_shift.exp->Series([NaT] * 10, dtype='datetime64[ns, US/Eastern]')
A:pandas.tests.series.methods.test_shift.s2->Series(date_range('2000-01-01 09:00:00', periods=5, tz='CET'), name='foo')
A:pandas.tests.series.methods.test_shift.ts->datetime_series.astype(int)
A:pandas.tests.series.methods.test_shift.exp_index->datetime_series.astype(int).index.shift(1, freq='5T')
A:pandas.tests.series.methods.test_shift.idx->DatetimeIndex(['2000-01-01', '2000-01-02', '2000-01-04'])
A:pandas.tests.series.methods.test_shift.res->pandas.Series(['a', 'b', 'c', 'd'], dtype='category').shift(ex)
A:pandas.tests.series.methods.test_shift.dates->date_range('2016-11-06', freq='H', periods=10, tz='US/Eastern')
A:pandas.tests.series.methods.test_shift.inferred_ts->Series(datetime_series.values, Index(np.asarray(datetime_series.index)), name='ts')
A:pandas.tests.series.methods.test_shift.ser->pandas.Series([pd.Timestamp('2020-01-01'), pd.Timestamp('2020-01-02')])
A:pandas.tests.series.methods.test_shift.df->pandas.Series([pd.Timestamp('2020-01-01'), pd.Timestamp('2020-01-02')]).to_frame()
A:pandas.tests.series.methods.test_shift.obj_ser->pandas.Series([pd.Timestamp('2020-01-01'), pd.Timestamp('2020-01-02')]).astype(object)
A:pandas.tests.series.methods.test_shift.obj_df->pandas.Series([pd.Timestamp('2020-01-01'), pd.Timestamp('2020-01-02')]).astype(object).to_frame()
A:pandas.tests.series.methods.test_shift.sp1->pandas.Series(['a', 'b', 'c', 'd'], dtype='category').shift(1)
A:pandas.tests.series.methods.test_shift.sn2->pandas.Series(['a', 'b', 'c', 'd'], dtype='category').shift(-2)
pandas.tests.series.methods.test_shift.TestShift
pandas.tests.series.methods.test_shift.TestShift.test_shift(self,datetime_series)
pandas.tests.series.methods.test_shift.TestShift.test_shift2(self)
pandas.tests.series.methods.test_shift.TestShift.test_shift_categorical(self)
pandas.tests.series.methods.test_shift.TestShift.test_shift_categorical_fill_value(self)
pandas.tests.series.methods.test_shift.TestShift.test_shift_dst(self)
pandas.tests.series.methods.test_shift.TestShift.test_shift_dt64values_int_fill_deprecated(self)
pandas.tests.series.methods.test_shift.TestShift.test_shift_fill_value(self)
pandas.tests.series.methods.test_shift.TestShift.test_shift_int(self,datetime_series)
pandas.tests.series.methods.test_shift.TestShift.test_shift_object_non_scalar_fill(self)
pandas.tests.series.methods.test_shift.TestShift.test_tshift(self,datetime_series)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_cov_corr.py----------------------------------------
A:pandas.tests.series.methods.test_cov_corr.cp->datetime_series[:10].copy()
A:pandas.tests.series.methods.test_cov_corr.ts1->datetime_series[:15].reindex(datetime_series.index)
A:pandas.tests.series.methods.test_cov_corr.ts2->datetime_series[5:].reindex(datetime_series.index)
A:pandas.tests.series.methods.test_cov_corr.A->Series([-0.89926396, 0.94209606, -1.03289164, -0.95445587, 0.7691031, -0.06430576, -2.09704447, 0.40660407, -0.89926396, 0.94209606])
A:pandas.tests.series.methods.test_cov_corr.B->Series([-1.01270225, -0.62210117, -1.56895827, 0.59592943, -0.01680292, 1.17258718, -1.06009347, -0.1022206, -0.89076239, 0.89372375])
A:pandas.tests.series.methods.test_cov_corr.result->Series([-0.89926396, 0.94209606, -1.03289164, -0.95445587, 0.7691031, -0.06430576, -2.09704447, 0.40660407, -0.89926396, 0.94209606]).corr(B, method='spearman')
A:pandas.tests.series.methods.test_cov_corr.(expected, _)->scipy.stats.pearsonr(A, B)
A:pandas.tests.series.methods.test_cov_corr.s1->Series([1, 2, 3, 4, 5])
A:pandas.tests.series.methods.test_cov_corr.s2->Series([5, 4, 3, 2, 1])
A:pandas.tests.series.methods.test_cov_corr.df->pandas.DataFrame([s1, s2])
A:pandas.tests.series.methods.test_cov_corr.expected->pandas.DataFrame([{0: 1.0, 1: 0}, {0: 0, 1: 1.0}])
pandas.tests.series.methods.test_cov_corr.TestSeriesCorr
pandas.tests.series.methods.test_cov_corr.TestSeriesCorr.test_corr(self,datetime_series)
pandas.tests.series.methods.test_cov_corr.TestSeriesCorr.test_corr_callable_method(self,datetime_series)
pandas.tests.series.methods.test_cov_corr.TestSeriesCorr.test_corr_invalid_method(self)
pandas.tests.series.methods.test_cov_corr.TestSeriesCorr.test_corr_rank(self)
pandas.tests.series.methods.test_cov_corr.TestSeriesCov
pandas.tests.series.methods.test_cov_corr.TestSeriesCov.test_cov(self,datetime_series)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_explode.py----------------------------------------
A:pandas.tests.series.methods.test_explode.s->pandas.Series([[1, 2], [3, 4]], index=[0, 0])
A:pandas.tests.series.methods.test_explode.result->pandas.Series([[1, 2], [3, 4]], index=[0, 0]).explode()
A:pandas.tests.series.methods.test_explode.expected->pandas.Series([1, 2, 3, 4], index=[0, 0, 0, 0], dtype=object)
A:pandas.tests.series.methods.test_explode.index->pandas.MultiIndex.from_tuples([('a', 0), ('a', 0), ('a', 0), ('a', 1), ('b', 0), ('b', 1), ('b', 1)], names=['foo', 'bar'])
A:pandas.tests.series.methods.test_explode.df->pandas.DataFrame([{'var1': 'a,b,c', 'var2': 1}, {'var1': 'd,e,f', 'var2': 2}], columns=['var1', 'var2'])
A:pandas.tests.series.methods.test_explode.listify->pandas.DataFrame([{'var1': 'a,b,c', 'var2': 1}, {'var1': 'd,e,f', 'var2': 2}], columns=['var1', 'var2']).apply(lambda x: x.array, axis=1)
A:pandas.tests.series.methods.test_explode.exploded->pandas.DataFrame([{'var1': 'a,b,c', 'var2': 1}, {'var1': 'd,e,f', 'var2': 2}], columns=['var1', 'var2']).var1.str.split(',').explode()
pandas.tests.series.methods.test_explode.non_object_dtype(s)
pandas.tests.series.methods.test_explode.test_basic()
pandas.tests.series.methods.test_explode.test_duplicate_index()
pandas.tests.series.methods.test_explode.test_empty()
pandas.tests.series.methods.test_explode.test_invert_array()
pandas.tests.series.methods.test_explode.test_large()
pandas.tests.series.methods.test_explode.test_mixed_type()
pandas.tests.series.methods.test_explode.test_multi_index()
pandas.tests.series.methods.test_explode.test_nested_EA()
pandas.tests.series.methods.test_explode.test_nested_lists()
pandas.tests.series.methods.test_explode.test_typical_usecase()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_nlargest.py----------------------------------------
A:pandas.tests.series.methods.test_nlargest.df->pandas.DataFrame({'datetime': pd.to_datetime(['2003', '2002', '2001', '2002', '2005']), 'datetimetz': pd.to_datetime(['2003', '2002', '2001', '2002', '2005']).tz_localize('US/Eastern'), 'timedelta': pd.to_timedelta(['3d', '2d', '1d', '2d', '5d'])})
A:pandas.tests.series.methods.test_nlargest.df[dtype]->Series([3, 2, 1, 2, 5], dtype=dtype)
A:pandas.tests.series.methods.test_nlargest.ser->Series(data)
A:pandas.tests.series.methods.test_nlargest.result->Series(data).nlargest(1)
A:pandas.tests.series.methods.test_nlargest.msg->"Cannot use method 'n(larg|small)est' with dtype {dt}".format(dt=dt)
A:pandas.tests.series.methods.test_nlargest.expected_first->Series([1] * 3, index=[1, 2, 3])
A:pandas.tests.series.methods.test_nlargest.expected_last->Series([1] * 3, index=[5, 4, 3])
A:pandas.tests.series.methods.test_nlargest.expected->Series(expected)
A:pandas.tests.series.methods.test_nlargest.dtype_info->numpy.iinfo('int64')
A:pandas.tests.series.methods.test_nlargest.(min_2nd, max_2nd)->numpy.nextafter([min_val, max_val], 0, dtype=float_dtype)
pandas.tests.series.methods.test_nlargest.TestSeriesNLargestNSmallest
pandas.tests.series.methods.test_nlargest.TestSeriesNLargestNSmallest.test_nlargest_boolean(self,data,expected)
pandas.tests.series.methods.test_nlargest.TestSeriesNLargestNSmallest.test_nlargest_boundary_datetimelike(self,nselect_method,dtype)
pandas.tests.series.methods.test_nlargest.TestSeriesNLargestNSmallest.test_nlargest_boundary_dtlike(self,nselect_method,dtype)
pandas.tests.series.methods.test_nlargest.TestSeriesNLargestNSmallest.test_nlargest_boundary_float(self,nselect_method,float_dtype)
pandas.tests.series.methods.test_nlargest.TestSeriesNLargestNSmallest.test_nlargest_boundary_integer(self,nselect_method,any_int_dtype)
pandas.tests.series.methods.test_nlargest.TestSeriesNLargestNSmallest.test_nlargest_duplicate_keep_all_ties(self)
pandas.tests.series.methods.test_nlargest.TestSeriesNLargestNSmallest.test_nlargest_error(self,r)
pandas.tests.series.methods.test_nlargest.TestSeriesNLargestNSmallest.test_nlargest_misc(self)
pandas.tests.series.methods.test_nlargest.TestSeriesNLargestNSmallest.test_nlargest_n(self,n)
pandas.tests.series.methods.test_nlargest.TestSeriesNLargestNSmallest.test_nsmallest_nlargest(self,s_main_dtypes_split)
pandas.tests.series.methods.test_nlargest.assert_check_nselect_boundary(vals,dtype,method)
pandas.tests.series.methods.test_nlargest.s_main_dtypes()
pandas.tests.series.methods.test_nlargest.s_main_dtypes_split(request,s_main_dtypes)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_sort_index.py----------------------------------------
A:pandas.tests.series.methods.test_sort_index.rindex->list(datetime_series.index)
A:pandas.tests.series.methods.test_sort_index.random_order->datetime_series.reindex(rindex)
A:pandas.tests.series.methods.test_sort_index.sorted_series->datetime_series.reindex(rindex).sort_index(level=0, axis=0)
A:pandas.tests.series.methods.test_sort_index.result->Series([np.nan, 1, 2, 3], IntervalIndex.from_arrays([0, 1, 2, 3], [1, 2, 3, 4])).sort_index(ascending=False)
A:pandas.tests.series.methods.test_sort_index.mi->pandas.MultiIndex.from_tuples([[1, 1, 3], [1, 1, 1]], names=list('ABC'))
A:pandas.tests.series.methods.test_sort_index.s->Series([np.nan, 1, 2, 3], IntervalIndex.from_arrays([0, 1, 2, 3], [1, 2, 3, 4]))
A:pandas.tests.series.methods.test_sort_index.res->Series([np.nan, 1, 2, 3], IntervalIndex.from_arrays([0, 1, 2, 3], [1, 2, 3, 4])).sort_index(level=level, sort_remaining=False)
A:pandas.tests.series.methods.test_sort_index.series->Series(index=[3, 2, 1, 4, 3, np.nan], dtype=object)
A:pandas.tests.series.methods.test_sort_index.expected_series->Series(index=[1, 2, 3, 3, 4], dtype=object)
A:pandas.tests.series.methods.test_sort_index.index_sorted_series->Series(index=[3, 2, 1, 4, 3, np.nan], dtype=object).sort_index(na_position='last')
A:pandas.tests.series.methods.test_sort_index.expected_series_first->Series(index=[np.nan, 1, 2, 3, 3, 4], dtype=object)
A:pandas.tests.series.methods.test_sort_index.expected_series_last->Series(index=[1, 2, 3, 3, 4, np.nan], dtype=object)
A:pandas.tests.series.methods.test_sort_index.expected->Series(sorted_list, index=output_index)
A:pandas.tests.series.methods.test_sort_index.ser->Series(original_list)
A:pandas.tests.series.methods.test_sort_index.result_ser->Series(original_list).sort_index(**kwargs)
pandas.tests.series.methods.test_sort_index.TestSeriesSortIndex
pandas.tests.series.methods.test_sort_index.TestSeriesSortIndex.test_sort_index(self,datetime_series)
pandas.tests.series.methods.test_sort_index.TestSeriesSortIndex.test_sort_index_ignore_index(self,inplace,original_list,sorted_list,ascending,ignore_index,output_index)
pandas.tests.series.methods.test_sort_index.TestSeriesSortIndex.test_sort_index_inplace(self,datetime_series)
pandas.tests.series.methods.test_sort_index.TestSeriesSortIndex.test_sort_index_intervals(self)
pandas.tests.series.methods.test_sort_index.TestSeriesSortIndex.test_sort_index_kind(self)
pandas.tests.series.methods.test_sort_index.TestSeriesSortIndex.test_sort_index_level(self)
pandas.tests.series.methods.test_sort_index.TestSeriesSortIndex.test_sort_index_multiindex(self,level)
pandas.tests.series.methods.test_sort_index.TestSeriesSortIndex.test_sort_index_na_position(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_append.py----------------------------------------
A:pandas.tests.series.methods.test_append.appended_series->string_series.append(object_series)
A:pandas.tests.series.methods.test_append.result->Series(np.random.randn(len(rng)), rng).append(ts2)
A:pandas.tests.series.methods.test_append.s1->pandas.Series([1, 2, 3])
A:pandas.tests.series.methods.test_append.s2->pandas.Series([4, 5, 6])
A:pandas.tests.series.methods.test_append.exp->pandas.Series([1, 2, 3, 4, 5, 6])
A:pandas.tests.series.methods.test_append.s->pandas.Series([1, 2, 3])
A:pandas.tests.series.methods.test_append.expected->pandas.DataFrame({0: [1.0, 2.0, None, None], 'A': [None, None, 1.0, 2.0]}, index=[0, 1, 0, 1])
A:pandas.tests.series.methods.test_append.df->DataFrame(np.random.randn(len(rng), 4), index=rng)
A:pandas.tests.series.methods.test_append.rng->date_range('5/8/2012 1:45', periods=10, freq='5T', tz='dateutil/US/Eastern')
A:pandas.tests.series.methods.test_append.ts->Series(np.random.randn(len(rng)), rng)
A:pandas.tests.series.methods.test_append.result_df->DataFrame(np.random.randn(len(rng), 4), index=rng).append(df2)
A:pandas.tests.series.methods.test_append.ex_index->DatetimeIndex(np.tile(rng.values, 3))
A:pandas.tests.series.methods.test_append.appended->date_range('5/8/2012 1:45', periods=10, freq='5T', tz='dateutil/US/Eastern').append(rng2)
A:pandas.tests.series.methods.test_append.rng1->date_range('5/8/2012 1:45', periods=10, freq='5T', tz='dateutil/US/Eastern').copy()
A:pandas.tests.series.methods.test_append.rng2->date_range('5/8/2012 2:35', periods=10, freq='5T', tz='dateutil/US/Eastern')
A:pandas.tests.series.methods.test_append.rng3->date_range('5/8/2012 1:45', periods=20, freq='5T', tz='dateutil/US/Eastern')
A:pandas.tests.series.methods.test_append.ts2->Series(np.random.randn(len(rng2)), rng2)
A:pandas.tests.series.methods.test_append.df2->DataFrame(np.random.randn(len(rng2), 4), index=rng2)
pandas.tests.series.methods.test_append.TestSeriesAppend
pandas.tests.series.methods.test_append.TestSeriesAppend.test_append(self,datetime_series,string_series,object_series)
pandas.tests.series.methods.test_append.TestSeriesAppend.test_append_dataframe_regression(self)
pandas.tests.series.methods.test_append.TestSeriesAppend.test_append_duplicates(self)
pandas.tests.series.methods.test_append.TestSeriesAppend.test_append_many(self,datetime_series)
pandas.tests.series.methods.test_append.TestSeriesAppend.test_append_tuples(self)
pandas.tests.series.methods.test_append.TestSeriesAppendWithDatetimeIndex
pandas.tests.series.methods.test_append.TestSeriesAppendWithDatetimeIndex.test_append(self)
pandas.tests.series.methods.test_append.TestSeriesAppendWithDatetimeIndex.test_append_tz(self)
pandas.tests.series.methods.test_append.TestSeriesAppendWithDatetimeIndex.test_append_tz_dateutil(self)
pandas.tests.series.methods.test_append.TestSeriesAppendWithDatetimeIndex.test_append_tz_explicit_pytz(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_quantile.py----------------------------------------
A:pandas.tests.series.methods.test_quantile.q->pandas.Series([1, 3, 4]).quantile(0.5, interpolation='higher')
A:pandas.tests.series.methods.test_quantile.dts->datetime_series.index.to_series()
A:pandas.tests.series.methods.test_quantile.tds->datetime_series.index.to_series().diff()
A:pandas.tests.series.methods.test_quantile.result->pandas.Series(values, dtype=dtype).quantile([0.5])
A:pandas.tests.series.methods.test_quantile.expected->pandas.Series(np.asarray(ser)).quantile([0.5])
A:pandas.tests.series.methods.test_quantile.q1->datetime_series.quantile(0.1)
A:pandas.tests.series.methods.test_quantile.s->Series([], dtype='datetime64[ns]')
A:pandas.tests.series.methods.test_quantile.s1->Series([], dtype=object)
A:pandas.tests.series.methods.test_quantile.res->Series([], dtype='datetime64[ns]').quantile([0.5])
A:pandas.tests.series.methods.test_quantile.exp->Series([pd.NaT], index=[0.5])
A:pandas.tests.series.methods.test_quantile.ser->pandas.Series(values, dtype=dtype)
pandas.tests.series.methods.test_quantile.TestSeriesQuantile
pandas.tests.series.methods.test_quantile.TestSeriesQuantile.test_datetime_timedelta_quantiles(self)
pandas.tests.series.methods.test_quantile.TestSeriesQuantile.test_dt_timedelta_quantiles(self)
pandas.tests.series.methods.test_quantile.TestSeriesQuantile.test_quantile(self,datetime_series)
pandas.tests.series.methods.test_quantile.TestSeriesQuantile.test_quantile_box(self,case)
pandas.tests.series.methods.test_quantile.TestSeriesQuantile.test_quantile_empty(self)
pandas.tests.series.methods.test_quantile.TestSeriesQuantile.test_quantile_interpolation(self,datetime_series)
pandas.tests.series.methods.test_quantile.TestSeriesQuantile.test_quantile_interpolation_dtype(self)
pandas.tests.series.methods.test_quantile.TestSeriesQuantile.test_quantile_multi(self,datetime_series)
pandas.tests.series.methods.test_quantile.TestSeriesQuantile.test_quantile_nan(self)
pandas.tests.series.methods.test_quantile.TestSeriesQuantile.test_quantile_nat(self)
pandas.tests.series.methods.test_quantile.TestSeriesQuantile.test_quantile_sparse(self,values,dtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_clip.py----------------------------------------
A:pandas.tests.series.methods.test_clip.val->datetime_series.median()
A:pandas.tests.series.methods.test_clip.result->Series([Timestamp('2015-12-01 09:30:00', tz='US/Eastern'), Timestamp('2015-12-01 09:31:00', tz='US/Eastern')]).clip(upper=t)
A:pandas.tests.series.methods.test_clip.expected->Series([Timestamp('2015-12-01 09:30:00', tz='US/Eastern'), Timestamp('2015-12-01 09:30:30', tz='US/Eastern')])
A:pandas.tests.series.methods.test_clip.lower->Series([1.0, 2.0, 3.0])
A:pandas.tests.series.methods.test_clip.upper->Series([1.5, 2.5, 3.5])
A:pandas.tests.series.methods.test_clip.s->Series([Timestamp('2015-12-01 09:30:00', tz='US/Eastern'), Timestamp('2015-12-01 09:31:00', tz='US/Eastern')])
A:pandas.tests.series.methods.test_clip.original->pandas.Series([5, 6, 7])
A:pandas.tests.series.methods.test_clip.t->Timestamp('2015-12-01 09:30:30', tz='US/Eastern')
pandas.tests.series.methods.test_clip.TestSeriesClip
pandas.tests.series.methods.test_clip.TestSeriesClip.test_clip(self,datetime_series)
pandas.tests.series.methods.test_clip.TestSeriesClip.test_clip_against_list_like(self,inplace,upper)
pandas.tests.series.methods.test_clip.TestSeriesClip.test_clip_against_series(self)
pandas.tests.series.methods.test_clip.TestSeriesClip.test_clip_types_and_nulls(self)
pandas.tests.series.methods.test_clip.TestSeriesClip.test_clip_with_datetimes(self)
pandas.tests.series.methods.test_clip.TestSeriesClip.test_clip_with_dts(self)
pandas.tests.series.methods.test_clip.TestSeriesClip.test_clip_with_na_args(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_truncate.py----------------------------------------
A:pandas.tests.series.methods.test_truncate.offset->BDay()
A:pandas.tests.series.methods.test_truncate.truncated->pandas.Series(np.random.randn(len(rng)), index=rng).truncate(before=datetime_series.index[-1] + offset)
A:pandas.tests.series.methods.test_truncate.s->pandas.Series(['a', 'b', 'c', 'd', 'e'], index=[5, 3, 2, 9, 0])
A:pandas.tests.series.methods.test_truncate.rng->pandas.date_range('2011-01-01', '2012-01-01', freq='W')
A:pandas.tests.series.methods.test_truncate.ts->pandas.Series(np.random.randn(len(rng)), index=rng)
pandas.tests.series.methods.test_truncate.TestTruncate
pandas.tests.series.methods.test_truncate.TestTruncate.test_truncate(self,datetime_series)
pandas.tests.series.methods.test_truncate.TestTruncate.test_truncate_nonsortedindex(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_pct_change.py----------------------------------------
A:pandas.tests.series.methods.test_pct_change.rs->datetime_series.pct_change(freq='5D')
A:pandas.tests.series.methods.test_pct_change.filled->datetime_series.fillna(method='pad')
A:pandas.tests.series.methods.test_pct_change.common_idx->date_range('2019-11-14', periods=5, freq='D')
A:pandas.tests.series.methods.test_pct_change.result->Series([np.nan, 1, 2, 3, 9, 18], index=['a', 'b'] * 3).pct_change(fill_method=fill_method)
A:pandas.tests.series.methods.test_pct_change.expected->Series([np.nan, np.nan, 1.0, 0.5, 2.0, 1.0], index=['a', 'b'] * 3)
A:pandas.tests.series.methods.test_pct_change.s->Series([np.nan, 1, 2, 3, 9, 18], index=['a', 'b'] * 3)
A:pandas.tests.series.methods.test_pct_change.chg->Series([np.nan, 1, 2, 3, 9, 18], index=['a', 'b'] * 3).pct_change()
A:pandas.tests.series.methods.test_pct_change.rs_freq->Series(index=datetime_series.index, dtype=object).pct_change(freq=freq, fill_method=fill_method, limit=limit)
A:pandas.tests.series.methods.test_pct_change.rs_periods->Series(index=datetime_series.index, dtype=object).pct_change(periods, fill_method=fill_method, limit=limit)
A:pandas.tests.series.methods.test_pct_change.empty_ts->Series(index=datetime_series.index, dtype=object)
pandas.tests.series.methods.test_pct_change.TestSeriesPctChange
pandas.tests.series.methods.test_pct_change.TestSeriesPctChange.test_pct_change(self,datetime_series)
pandas.tests.series.methods.test_pct_change.TestSeriesPctChange.test_pct_change_periods_freq(self,freq,periods,fill_method,limit,datetime_series)
pandas.tests.series.methods.test_pct_change.TestSeriesPctChange.test_pct_change_shift_over_nas(self)
pandas.tests.series.methods.test_pct_change.TestSeriesPctChange.test_pct_change_with_duplicate_axis(self)
pandas.tests.series.methods.test_pct_change.test_pct_change_with_duplicated_indices(fill_method)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_describe.py----------------------------------------
A:pandas.tests.series.methods.test_describe.s->Series(date_range(start, end, tz=tz), name=name)
A:pandas.tests.series.methods.test_describe.result->Series(date_range(start, end, tz=tz), name=name).describe()
A:pandas.tests.series.methods.test_describe.expected->Series([5, 5, s.value_counts().index[0], 1, start.tz_localize(tz), end.tz_localize(tz)], name=name, index=['count', 'unique', 'top', 'freq', 'first', 'last'])
A:pandas.tests.series.methods.test_describe.name->str(tz_naive_fixture)
A:pandas.tests.series.methods.test_describe.start->Timestamp(2018, 1, 1)
A:pandas.tests.series.methods.test_describe.end->Timestamp(2018, 1, 5)
pandas.tests.series.methods.test_describe.TestSeriesDescribe
pandas.tests.series.methods.test_describe.TestSeriesDescribe.test_describe(self)
pandas.tests.series.methods.test_describe.TestSeriesDescribe.test_describe_empty_object(self)
pandas.tests.series.methods.test_describe.TestSeriesDescribe.test_describe_with_tz(self,tz_naive_fixture)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/methods/test_asof.py----------------------------------------
A:pandas.tests.series.methods.test_asof.rng->date_range('1/1/1990', periods=N, freq='53s')
A:pandas.tests.series.methods.test_asof.ts->Series(np.random.randn(N), index=rng)
A:pandas.tests.series.methods.test_asof.dates->date_range('1/1/1990', periods=N * 3, freq='25s')
A:pandas.tests.series.methods.test_asof.result->Series(np.nan, index=[1, 2, 3, 4], name='test').asof([4, 5])
A:pandas.tests.series.methods.test_asof.val1->Series(np.random.randn(N), index=rng).asof(str(ts.index[7]))
A:pandas.tests.series.methods.test_asof.val2->Series(np.random.randn(N), index=rng).asof(ts.index[19])
A:pandas.tests.series.methods.test_asof.s->Series(np.random.randn(N), index=rng)
A:pandas.tests.series.methods.test_asof.r->Series(np.random.randn(N), index=rng).resample('2h').mean()
A:pandas.tests.series.methods.test_asof.expected->Series(np.nan, index=[4, 5], name='test')
A:pandas.tests.series.methods.test_asof.pix->PeriodIndex(result.index.values, freq='H')
pandas.tests.series.methods.test_asof.TestSeriesAsof
pandas.tests.series.methods.test_asof.TestSeriesAsof.test_all_nans(self)
pandas.tests.series.methods.test_asof.TestSeriesAsof.test_basic(self)
pandas.tests.series.methods.test_asof.TestSeriesAsof.test_errors(self)
pandas.tests.series.methods.test_asof.TestSeriesAsof.test_periodindex(self)
pandas.tests.series.methods.test_asof.TestSeriesAsof.test_scalar(self)
pandas.tests.series.methods.test_asof.TestSeriesAsof.test_with_nan(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/indexing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/indexing/test_datetime.py----------------------------------------
A:pandas.tests.series.indexing.test_datetime.dti->date_range(start='1/1/2001', end='6/1/2001', freq='D')
A:pandas.tests.series.indexing.test_datetime.s->Series([pd.NaT])
A:pandas.tests.series.indexing.test_datetime.result->Series(arr, index=index)
A:pandas.tests.series.indexing.test_datetime.expected->Series(arr, index=index).copy()
A:pandas.tests.series.indexing.test_datetime.d1->DataFrame({'v': np.random.rand(len(dti))}, index=dti)
A:pandas.tests.series.indexing.test_datetime.d2->DataFrame({'v': np.random.rand(len(dti))}, index=dti).reset_index()
A:pandas.tests.series.indexing.test_datetime.d3->DataFrame({'v': np.random.rand(len(dti))}, index=dti).reset_index().set_index('index')
A:pandas.tests.series.indexing.test_datetime.stamp->Timestamp('1/8/2000')
A:pandas.tests.series.indexing.test_datetime.df->DataFrame(np.random.rand(5, 5), columns=['open', 'high', 'low', 'close', 'volume'], index=date_range('2012-01-02 18:01:00', periods=5, tz='US/Central', freq='s'))
A:pandas.tests.series.indexing.test_datetime.index->index.repeat(3).repeat(3)
A:pandas.tests.series.indexing.test_datetime.s2->Series([pd.NaT])._set_value(dates[1], np.nan)
A:pandas.tests.series.indexing.test_datetime.dates->date_range('2010-07-01', end='2010-08-05')
A:pandas.tests.series.indexing.test_datetime.tst->DataFrame({'date': dates})
A:pandas.tests.series.indexing.test_datetime.rng->date_range(datetime(2005, 1, 1), periods=20, freq='M')
A:pandas.tests.series.indexing.test_datetime.ts->Series(range(len(idx)), index=idx)
A:pandas.tests.series.indexing.test_datetime.date->tz('US/Central').localize(datetime(1990, 1, 1, 3))
A:pandas.tests.series.indexing.test_datetime.lb->pandas.Timestamp(datetime(1990, 1, 1, 4)).tz_localize(rng.tzinfo)
A:pandas.tests.series.indexing.test_datetime.rb->pandas.Timestamp(datetime(1990, 1, 1, 7)).tz_localize(rng.tzinfo)
A:pandas.tests.series.indexing.test_datetime.uniques->Series(range(len(idx)), index=idx).index.unique()
A:pandas.tests.series.indexing.test_datetime.dups_local->dups.index.tz_localize('US/Eastern')
A:pandas.tests.series.indexing.test_datetime.idx->date_range(start='2013-05-31 00:00', end='2013-05-31 23:59', freq='S')
A:pandas.tests.series.indexing.test_datetime.d->datetime.datetime(2011, 12, 5, 20, 30)
A:pandas.tests.series.indexing.test_datetime.ix->DatetimeIndex([d, d])
A:pandas.tests.series.indexing.test_datetime.total->(ts.index == date).sum()
A:pandas.tests.series.indexing.test_datetime.cp->Series(range(len(idx)), index=idx).copy()
A:pandas.tests.series.indexing.test_datetime.sec->datetime.timedelta(seconds=1)
A:pandas.tests.series.indexing.test_datetime.half_sec->datetime.timedelta(microseconds=500000)
A:pandas.tests.series.indexing.test_datetime.duplicate_positions->numpy.random.randint(0, len(dates) - 1, 20)
A:pandas.tests.series.indexing.test_datetime.ts2->pandas.concat([ts[0:4], ts[-4:], ts[4:-4]])
A:pandas.tests.series.indexing.test_datetime.series->Series(date_range('1/1/2000', periods=10))
A:pandas.tests.series.indexing.test_datetime.round_method->getattr(s.dt, method)
A:pandas.tests.series.indexing.test_datetime.arr->date_range('2017', periods=4, tz='US/Eastern')
pandas.tests.series.indexing.test_datetime.dups()
pandas.tests.series.indexing.test_datetime.test_constructor(dups)
pandas.tests.series.indexing.test_datetime.test_datetime_indexing()
pandas.tests.series.indexing.test_datetime.test_dti_reset_index_round_trip()
pandas.tests.series.indexing.test_datetime.test_dti_snap(name,tz)
pandas.tests.series.indexing.test_datetime.test_duplicate_dates_indexing(dups)
pandas.tests.series.indexing.test_datetime.test_fancy_getitem()
pandas.tests.series.indexing.test_datetime.test_fancy_setitem()
pandas.tests.series.indexing.test_datetime.test_frame_datetime64_duplicated()
pandas.tests.series.indexing.test_datetime.test_getitem_median_slice_bug()
pandas.tests.series.indexing.test_datetime.test_getitem_setitem_datetime_tz_dateutil()
pandas.tests.series.indexing.test_datetime.test_getitem_setitem_datetime_tz_pytz()
pandas.tests.series.indexing.test_datetime.test_getitem_setitem_datetimeindex()
pandas.tests.series.indexing.test_datetime.test_getitem_setitem_periodindex()
pandas.tests.series.indexing.test_datetime.test_groupby_average_dup_values(dups)
pandas.tests.series.indexing.test_datetime.test_index_dupes_contains()
pandas.tests.series.indexing.test_datetime.test_index_unique(dups)
pandas.tests.series.indexing.test_datetime.test_indexing()
pandas.tests.series.indexing.test_datetime.test_indexing_over_size_cutoff()
pandas.tests.series.indexing.test_datetime.test_indexing_over_size_cutoff_period_index(monkeypatch)
pandas.tests.series.indexing.test_datetime.test_indexing_unordered()
pandas.tests.series.indexing.test_datetime.test_is_unique_monotonic(dups)
pandas.tests.series.indexing.test_datetime.test_nat_operations()
pandas.tests.series.indexing.test_datetime.test_range_slice()
pandas.tests.series.indexing.test_datetime.test_round_nat(method,freq)
pandas.tests.series.indexing.test_datetime.test_series_set_value()
pandas.tests.series.indexing.test_datetime.test_set_none_nan()
pandas.tests.series.indexing.test_datetime.test_setitem_tuple_with_datetimetz()
pandas.tests.series.indexing.test_datetime.test_slice_locs_indexerror()
pandas.tests.series.indexing.test_datetime.test_slicing_datetimes()
pandas.tests.series.indexing.test_dt.dups()
pandas.tests.series.indexing.test_dt.test_constructor(dups)
pandas.tests.series.indexing.test_dt.test_dt_indexing()
pandas.tests.series.indexing.test_dt.test_dti_reset_index_round_trip()
pandas.tests.series.indexing.test_dt.test_dti_snap(name,tz)
pandas.tests.series.indexing.test_dt.test_duplicate_dates_indexing(dups)
pandas.tests.series.indexing.test_dt.test_fancy_getitem()
pandas.tests.series.indexing.test_dt.test_fancy_setitem()
pandas.tests.series.indexing.test_dt.test_frame_dt64_duplicated()
pandas.tests.series.indexing.test_dt.test_getitem_median_slice_bug()
pandas.tests.series.indexing.test_dt.test_getitem_setitem_dt_tz_dateutil()
pandas.tests.series.indexing.test_dt.test_getitem_setitem_dt_tz_pytz()
pandas.tests.series.indexing.test_dt.test_getitem_setitem_dtindex()
pandas.tests.series.indexing.test_dt.test_getitem_setitem_periodindex()
pandas.tests.series.indexing.test_dt.test_groupby_average_dup_values(dups)
pandas.tests.series.indexing.test_dt.test_index_dupes_contains()
pandas.tests.series.indexing.test_dt.test_index_unique(dups)
pandas.tests.series.indexing.test_dt.test_indexing()
pandas.tests.series.indexing.test_dt.test_indexing_over_size_cutoff()
pandas.tests.series.indexing.test_dt.test_indexing_over_size_cutoff_period_index(monkeypatch)
pandas.tests.series.indexing.test_dt.test_indexing_unordered()
pandas.tests.series.indexing.test_dt.test_is_unique_monotonic(dups)
pandas.tests.series.indexing.test_dt.test_nat_operations()
pandas.tests.series.indexing.test_dt.test_range_slice()
pandas.tests.series.indexing.test_dt.test_round_nat(method,freq)
pandas.tests.series.indexing.test_dt.test_series_set_value()
pandas.tests.series.indexing.test_dt.test_set_none_nan()
pandas.tests.series.indexing.test_dt.test_setitem_tuple_with_dttz()
pandas.tests.series.indexing.test_dt.test_slice_locs_indexerror()
pandas.tests.series.indexing.test_dt.test_slicing_dts()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/indexing/test_boolean.py----------------------------------------
A:pandas.tests.series.indexing.test_boolean.s->Series(np.random.randn(5))
A:pandas.tests.series.indexing.test_boolean.expected->Series([1, 2, np.nan, np.nan])
A:pandas.tests.series.indexing.test_boolean.omask->pandas.Series([True, True, False]).astype(object)
A:pandas.tests.series.indexing.test_boolean.s2->Series(list(range(3)))
A:pandas.tests.series.indexing.test_boolean.cop->Series(np.random.randn(5)).copy()
A:pandas.tests.series.indexing.test_boolean.result->Series(np.random.randn(5)).mask(s > 2, np.nan)
A:pandas.tests.series.indexing.test_boolean.ordered->string_series.sort_values()
A:pandas.tests.series.indexing.test_boolean.copy->string_series.copy()
A:pandas.tests.series.indexing.test_boolean.s[mask]->range(2, 7)
A:pandas.tests.series.indexing.test_boolean.rs->Series(np.random.randn(5)).copy()
A:pandas.tests.series.indexing.test_boolean.cond->Series([True, False, False, True, False], index=s.index)
A:pandas.tests.series.indexing.test_boolean.out->Series(np.random.randn(5)).where(Series(cond))
A:pandas.tests.series.indexing.test_boolean.s[0:3]->list(range(3))
A:pandas.tests.series.indexing.test_boolean.s[0:4:2]->list(range(2))
A:pandas.tests.series.indexing.test_boolean.s[:-1]->list(range(27))
A:pandas.tests.series.indexing.test_boolean.s[-3:-1]->list(range(2))
A:pandas.tests.series.indexing.test_boolean.s[[0, 1, 2]]->list(range(2))
A:pandas.tests.series.indexing.test_boolean.s[0]->list(range(10))
A:pandas.tests.series.indexing.test_boolean.selection->numpy.resize(mask, size)
A:pandas.tests.series.indexing.test_boolean.data->numpy.arange(size, dtype=float)
A:pandas.tests.series.indexing.test_boolean.s[selection]->box(item)
A:pandas.tests.series.indexing.test_boolean.s1->Series(list(range(3)))
A:pandas.tests.series.indexing.test_boolean.comb->pandas.concat([s1, s2])
A:pandas.tests.series.indexing.test_boolean.w->Series(np.random.randn(5)).where(s > 1, np.array(['X', 'Y', 'Z']))
A:pandas.tests.series.indexing.test_boolean.mask->pandas.Series([True, True, False])
A:pandas.tests.series.indexing.test_boolean.ser1->pandas.Series(pd.DatetimeIndex(['20150101', '20150102', '20150103'], tz=tz_naive_fixture))
A:pandas.tests.series.indexing.test_boolean.ser2->pandas.Series(pd.DatetimeIndex(['20160514', '20160515', '20160516'], tz=tz_naive_fixture))
A:pandas.tests.series.indexing.test_boolean.exp->Series([np.nan, 2])
A:pandas.tests.series.indexing.test_boolean.rs2->Series(list(range(3))).mask(cond[:3], -s2)
A:pandas.tests.series.indexing.test_boolean.res->Series(np.random.randn(5)).mask([True, False])
pandas.tests.series.indexing.test_boolean.test_broadcast(size,mask,item,box)
pandas.tests.series.indexing.test_boolean.test_get_set_boolean_different_order(string_series)
pandas.tests.series.indexing.test_boolean.test_getitem_boolean(string_series)
pandas.tests.series.indexing.test_boolean.test_getitem_boolean_empty()
pandas.tests.series.indexing.test_boolean.test_getitem_boolean_object(string_series)
pandas.tests.series.indexing.test_boolean.test_getitem_setitem_boolean_corner(datetime_series)
pandas.tests.series.indexing.test_boolean.test_mask()
pandas.tests.series.indexing.test_boolean.test_mask_inplace()
pandas.tests.series.indexing.test_boolean.test_setitem_boolean(string_series)
pandas.tests.series.indexing.test_boolean.test_where()
pandas.tests.series.indexing.test_boolean.test_where_array_like(klass)
pandas.tests.series.indexing.test_boolean.test_where_datetime_conversion()
pandas.tests.series.indexing.test_boolean.test_where_dt_conversion()
pandas.tests.series.indexing.test_boolean.test_where_dt_tz_values(tz_naive_fixture)
pandas.tests.series.indexing.test_boolean.test_where_dups()
pandas.tests.series.indexing.test_boolean.test_where_error()
pandas.tests.series.indexing.test_boolean.test_where_inplace()
pandas.tests.series.indexing.test_boolean.test_where_invalid_input(cond)
pandas.tests.series.indexing.test_boolean.test_where_ndframe_align()
pandas.tests.series.indexing.test_boolean.test_where_numeric_with_string()
pandas.tests.series.indexing.test_boolean.test_where_setitem_invalid()
pandas.tests.series.indexing.test_boolean.test_where_timedelta_coerce()
pandas.tests.series.indexing.test_boolean.test_where_unsafe()
pandas.tests.series.indexing.test_boolean.test_where_unsafe_float(float_dtype)
pandas.tests.series.indexing.test_boolean.test_where_unsafe_int(sint_dtype)
pandas.tests.series.indexing.test_boolean.test_where_unsafe_upcast(dtype,expected_dtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/indexing/test_iloc.py----------------------------------------
A:pandas.tests.series.indexing.test_iloc.s->Series([0, 1, 2], index=[0, 1, 0])
A:pandas.tests.series.indexing.test_iloc.expected->Series([0, 1, 2], index=[0, 1, 0]).reindex(s.index[[0, 2, 3, 4, 5]])
pandas.tests.series.indexing.test_iloc.test_iloc()
pandas.tests.series.indexing.test_iloc.test_iloc_nonunique()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/indexing/test_callable.py----------------------------------------
A:pandas.tests.series.indexing.test_callable.s->pandas.Series([1, 2, -1, 4])
A:pandas.tests.series.indexing.test_callable.expected->pandas.Series([1, 2, inc, 4])
pandas.tests.series.indexing.test_callable.test_getitem_callable()
pandas.tests.series.indexing.test_callable.test_setitem_callable()
pandas.tests.series.indexing.test_callable.test_setitem_other_callable()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/indexing/test_loc.py----------------------------------------
A:pandas.tests.series.indexing.test_loc.s->Series(pd.date_range('2011-01-01', periods=3, tz='US/Eastern'), index=['a', 'b', 'c'])
A:pandas.tests.series.indexing.test_loc.expected->Timestamp('2011-01-03', tz='US/Eastern')
A:pandas.tests.series.indexing.test_loc.cp->Series(pd.date_range('2011-01-01', periods=3, tz='US/Eastern'), index=['a', 'b', 'c']).copy()
A:pandas.tests.series.indexing.test_loc.idx->iter(string_series.index[:10])
A:pandas.tests.series.indexing.test_loc.result->string_series.copy()
A:pandas.tests.series.indexing.test_loc.inds->list(string_series.index[[5, 8, 12]])
A:pandas.tests.series.indexing.test_loc.exp->Series(pd.date_range('2011-01-01', periods=3, tz='US/Eastern'), index=['a', 'b', 'c']).copy()
A:pandas.tests.series.indexing.test_loc.arr_inds->numpy.array([0, 4, 6])
A:pandas.tests.series.indexing.test_loc.arr_inds_notfound->numpy.array([0, 4, 5, 6])
A:pandas.tests.series.indexing.test_loc.s2->Series(pd.date_range('2011-01-01', periods=3, tz='US/Eastern'), index=['a', 'b', 'c']).copy()
pandas.tests.series.indexing.test_loc.test_basic_setitem_with_labels(datetime_series)
pandas.tests.series.indexing.test_loc.test_loc_getitem(string_series,datetime_series)
pandas.tests.series.indexing.test_loc.test_loc_getitem_iterator(string_series)
pandas.tests.series.indexing.test_loc.test_loc_getitem_not_monotonic(datetime_series)
pandas.tests.series.indexing.test_loc.test_loc_getitem_setitem_integer_slice_keyerrors()
pandas.tests.series.indexing.test_loc.test_loc_setitem_boolean(string_series)
pandas.tests.series.indexing.test_loc.test_loc_setitem_corner(string_series)
pandas.tests.series.indexing.test_loc.test_loc_uint64(val,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/indexing/test_numeric.py----------------------------------------
A:pandas.tests.series.indexing.test_numeric.s->Series(np.random.randn(6), index=[2, 2, 0, 0, 1, 1])
A:pandas.tests.series.indexing.test_numeric.result->df.b.value_counts().get(True, default='Missing')
A:pandas.tests.series.indexing.test_numeric.df->DataFrame(np.random.randn(20, 3), index=index)
A:pandas.tests.series.indexing.test_numeric.vc->DataFrame(np.random.randn(20, 3), index=index).b.value_counts()
A:pandas.tests.series.indexing.test_numeric.expected->Series(np.random.randn(6), index=[2, 2, 0, 0, 1, 1]).reindex([2, 4, 6, 8])
A:pandas.tests.series.indexing.test_numeric.values->numpy.arange(10.0, 50.0, 2)
A:pandas.tests.series.indexing.test_numeric.index->Index(values)
A:pandas.tests.series.indexing.test_numeric.tmp->Series(np.random.randn(6), index=[2, 2, 0, 0, 1, 1]).copy()
A:pandas.tests.series.indexing.test_numeric.i->numpy.arange(10, 20, dtype=float)
A:pandas.tests.series.indexing.test_numeric.idx->numpy.int64(5)
pandas.tests.series.indexing.test_numeric.test_delitem()
pandas.tests.series.indexing.test_numeric.test_get()
pandas.tests.series.indexing.test_numeric.test_get_nan()
pandas.tests.series.indexing.test_numeric.test_get_nan_multiple()
pandas.tests.series.indexing.test_numeric.test_getitem_int64(datetime_series)
pandas.tests.series.indexing.test_numeric.test_getitem_negative_out_of_bounds()
pandas.tests.series.indexing.test_numeric.test_getitem_regression()
pandas.tests.series.indexing.test_numeric.test_getitem_setitem_slice_bug()
pandas.tests.series.indexing.test_numeric.test_getitem_setitem_slice_integers()
pandas.tests.series.indexing.test_numeric.test_int_indexing()
pandas.tests.series.indexing.test_numeric.test_setitem_float_labels()
pandas.tests.series.indexing.test_numeric.test_slice_float64()
pandas.tests.series.indexing.test_numeric.test_slice_float_get_set(datetime_series)
pandas.tests.series.indexing.test_numeric.test_slice_floats2()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/indexing/test_alter_index.py----------------------------------------
A:pandas.tests.series.indexing.test_alter_index.(aa, ab)->datetime_series.copy().align(b, join=join_type, method=method, limit=limit)
A:pandas.tests.series.indexing.test_alter_index.join_index->datetime_series.copy().index.join(b.index, how=join_type)
A:pandas.tests.series.indexing.test_alter_index.diff_a->aa.index.difference(join_index)
A:pandas.tests.series.indexing.test_alter_index.diff_b->ab.index.difference(join_index)
A:pandas.tests.series.indexing.test_alter_index.ea->ea.fillna(method=method, limit=limit).fillna(method=method, limit=limit)
A:pandas.tests.series.indexing.test_alter_index.eb->eb.fillna(method=method, limit=limit).fillna(method=method, limit=limit)
A:pandas.tests.series.indexing.test_alter_index.b->datetime_series[:5].copy()
A:pandas.tests.series.indexing.test_alter_index.a->datetime_series.copy()
A:pandas.tests.series.indexing.test_alter_index.(ra, _)->datetime_series.copy().align(b, join='left', copy=False)
A:pandas.tests.series.indexing.test_alter_index.(_, rb)->datetime_series.copy().align(b, join='right', copy=False)
A:pandas.tests.series.indexing.test_alter_index.(a, b)->datetime_series.align(datetime_series, copy=True)
A:pandas.tests.series.indexing.test_alter_index.midx->pandas.MultiIndex.from_product([range(2), range(3), range(2)], names=('a', 'b', 'c'))
A:pandas.tests.series.indexing.test_alter_index.idx->date_range('20131101', tz='America/Chicago', periods=7)
A:pandas.tests.series.indexing.test_alter_index.s1->pandas.Series(np.arange(12, dtype='int64'), index=midx)
A:pandas.tests.series.indexing.test_alter_index.s2->pandas.Series(np.arange(2, dtype='int64'), index=idx)
A:pandas.tests.series.indexing.test_alter_index.(res1l, res1r)->pandas.Series(np.arange(12, dtype='int64'), index=midx).align(s2, join='right')
A:pandas.tests.series.indexing.test_alter_index.(res2l, res2r)->pandas.Series(np.arange(2, dtype='int64'), index=idx).align(s1, join='left')
A:pandas.tests.series.indexing.test_alter_index.expr->pandas.Series([0, 0, 1, 1] * 2, index=exp_idx)
A:pandas.tests.series.indexing.test_alter_index.exp_idx->pandas.MultiIndex.from_product([range(2), range(2), range(2)], names=('a', 'b', 'c'))
A:pandas.tests.series.indexing.test_alter_index.expl->pandas.Series([0, 1, 2, 3, 6, 7, 8, 9], index=exp_idx)
A:pandas.tests.series.indexing.test_alter_index.ser->pandas.Series(range(3), index=range(3))
A:pandas.tests.series.indexing.test_alter_index.df->pandas.DataFrame(0.0, index=range(3), columns=range(3))
A:pandas.tests.series.indexing.test_alter_index.(result_ser, result_df)->pandas.Series(range(3), index=range(3)).align(df, method=method)
A:pandas.tests.series.indexing.test_alter_index.identity->string_series.reindex(string_series.index)
A:pandas.tests.series.indexing.test_alter_index.subSeries->string_series.reindex(subIndex)
A:pandas.tests.series.indexing.test_alter_index.subTS->datetime_series.reindex(subIndex2)
A:pandas.tests.series.indexing.test_alter_index.stuffSeries->datetime_series.reindex(subIndex)
A:pandas.tests.series.indexing.test_alter_index.subNonContig->datetime_series.reindex(nonContigIndex)
A:pandas.tests.series.indexing.test_alter_index.result->Series([2, 3], index=[True, False]).drop(True)
A:pandas.tests.series.indexing.test_alter_index.ts->Series(np.random.randn(20), index=rng)
A:pandas.tests.series.indexing.test_alter_index.ts.index->Series(np.random.randn(20), index=rng).index.astype('object')
A:pandas.tests.series.indexing.test_alter_index.rng->date_range('1/1/2000', periods=20)
A:pandas.tests.series.indexing.test_alter_index.series->pandas.Series(index=index, dtype=object).drop(drop_labels)
A:pandas.tests.series.indexing.test_alter_index.mask->Series([2, 3], index=[True, False]).drop(True).isna()
A:pandas.tests.series.indexing.test_alter_index.empty->Series(dtype=object)
A:pandas.tests.series.indexing.test_alter_index.reindexed->pandas.Series(np.arange(2, dtype='int64'), index=idx).reindex(s.index, method='pad')
A:pandas.tests.series.indexing.test_alter_index.s->Series([2, 3], index=[True, False])
A:pandas.tests.series.indexing.test_alter_index.reindexed2->pandas.Series(np.arange(2, dtype='int64'), index=idx).reindex(s.index, method='ffill')
A:pandas.tests.series.indexing.test_alter_index.expected->pandas.Series(index=expected_index, dtype=object)
A:pandas.tests.series.indexing.test_alter_index.actual->Series([2, 3], index=[True, False]).reindex(target, method='nearest', tolerance=[0.3, 0.01, 0.4, 3])
A:pandas.tests.series.indexing.test_alter_index.int_ts->Series(np.zeros(len(ts), dtype=int), index=ts.index)
A:pandas.tests.series.indexing.test_alter_index.reindexed_int->Series(np.zeros(len(ts), dtype=int), index=ts.index).reindex(int_ts.index[::2])
A:pandas.tests.series.indexing.test_alter_index.bool_ts->Series(np.zeros(len(ts), dtype=bool), index=ts.index)
A:pandas.tests.series.indexing.test_alter_index.reindexed_bool->Series(np.zeros(len(ts), dtype=bool), index=ts.index).reindex(bool_ts.index[::2])
A:pandas.tests.series.indexing.test_alter_index.filled_bool->Series(np.zeros(len(ts), dtype=bool), index=ts.index).reindex(datetime_series.index, method='pad')
A:pandas.tests.series.indexing.test_alter_index.index->date_range('20000101', periods=3)
A:pandas.tests.series.indexing.test_alter_index.day1->datetime(2013, 3, 5)
A:pandas.tests.series.indexing.test_alter_index.day2->datetime(2013, 5, 5)
A:pandas.tests.series.indexing.test_alter_index.day3->datetime(2014, 3, 5)
A:pandas.tests.series.indexing.test_alter_index.series1->Series([5, None, None], [day1, day2, day3])
A:pandas.tests.series.indexing.test_alter_index.series2->Series([None, None], [day1, day3])
A:pandas.tests.series.indexing.test_alter_index.floats->Series([1.0, 2.0, 3.0])
A:pandas.tests.series.indexing.test_alter_index.ints->Series([1, 2, 3])
A:pandas.tests.series.indexing.test_alter_index.objects->Series([1, 2, 3], dtype=object)
A:pandas.tests.series.indexing.test_alter_index.bools->Series([True, False, True])
A:pandas.tests.series.indexing.test_alter_index.newidx->date_range('20131103', periods=10, freq='H')
pandas.tests.series.indexing.test_alter_index.test_align(datetime_series,first_slice,second_slice,join_type,fill)
pandas.tests.series.indexing.test_alter_index.test_align_fill_method(datetime_series,first_slice,second_slice,join_type,method,limit)
pandas.tests.series.indexing.test_alter_index.test_align_method(method)
pandas.tests.series.indexing.test_alter_index.test_align_multiindex()
pandas.tests.series.indexing.test_alter_index.test_align_nocopy(datetime_series)
pandas.tests.series.indexing.test_alter_index.test_align_same_index(datetime_series)
pandas.tests.series.indexing.test_alter_index.test_drop_empty_list(index,drop_labels)
pandas.tests.series.indexing.test_alter_index.test_drop_exception_raised(data,index,drop_labels,axis,error_type,error_desc)
pandas.tests.series.indexing.test_alter_index.test_drop_non_empty_list(data,index,drop_labels)
pandas.tests.series.indexing.test_alter_index.test_drop_unique_and_non_unique_index(data,index,axis,drop_labels,expected_data,expected_index)
pandas.tests.series.indexing.test_alter_index.test_drop_with_ignore_errors()
pandas.tests.series.indexing.test_alter_index.test_reindex(datetime_series,string_series)
pandas.tests.series.indexing.test_alter_index.test_reindex_backfill()
pandas.tests.series.indexing.test_alter_index.test_reindex_bool(datetime_series)
pandas.tests.series.indexing.test_alter_index.test_reindex_bool_pad(datetime_series)
pandas.tests.series.indexing.test_alter_index.test_reindex_categorical()
pandas.tests.series.indexing.test_alter_index.test_reindex_corner(datetime_series)
pandas.tests.series.indexing.test_alter_index.test_reindex_datetimeindexes_tz_naive_and_aware()
pandas.tests.series.indexing.test_alter_index.test_reindex_dtindexes_tz_naive_and_aware()
pandas.tests.series.indexing.test_alter_index.test_reindex_empty_series_tz_dtype()
pandas.tests.series.indexing.test_alter_index.test_reindex_fill_value()
pandas.tests.series.indexing.test_alter_index.test_reindex_int(datetime_series)
pandas.tests.series.indexing.test_alter_index.test_reindex_like(datetime_series)
pandas.tests.series.indexing.test_alter_index.test_reindex_nan()
pandas.tests.series.indexing.test_alter_index.test_reindex_nearest()
pandas.tests.series.indexing.test_alter_index.test_reindex_pad()
pandas.tests.series.indexing.test_alter_index.test_reindex_series_add_nat()
pandas.tests.series.indexing.test_alter_index.test_reindex_with_datetimes()
pandas.tests.series.indexing.test_alter_index.test_reindex_with_dts()
pandas.tests.series.indexing.test_alter_index.test_rename()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/series/indexing/test_indexing.py----------------------------------------
A:pandas.tests.series.indexing.test_indexing.s->Series(pd.Categorical(['a', 'b', 'c']))
A:pandas.tests.series.indexing.test_indexing.expected->pandas.Series([4, 2, 3], dtype=any_int_dtype)
A:pandas.tests.series.indexing.test_indexing.arr_inds->numpy.array([0, 2, 5, 7, 8])
A:pandas.tests.series.indexing.test_indexing.s1->Series(dtype=object)
A:pandas.tests.series.indexing.test_indexing.s2->s[mask].map(str)
A:pandas.tests.series.indexing.test_indexing.result->Series(pd.Categorical(['a', 'b', 'c'])).take([-2, -2, 0])
A:pandas.tests.series.indexing.test_indexing.s['a']->pandas.Timestamp('2016-01-01')
A:pandas.tests.series.indexing.test_indexing.rng->list(range(10))
A:pandas.tests.series.indexing.test_indexing.ser->pandas.Series(['x'])
A:pandas.tests.series.indexing.test_indexing.obj->Series(range(5), index=['c', 'a', 'a', 'b', 'b'])
A:pandas.tests.series.indexing.test_indexing.df->DataFrame({'A': 0, 'B': np.arange(5, dtype='int64'), 'C': 0})
A:pandas.tests.series.indexing.test_indexing.series->pandas.Series([1, 2, 3], index=[1, 2, 3])
A:pandas.tests.series.indexing.test_indexing.app->Series([1], index=['foobar'], name='series')
A:pandas.tests.series.indexing.test_indexing.key->pandas.Timestamp('2012-01-01')
A:pandas.tests.series.indexing.test_indexing.res->Series(pd.Categorical(['a', 'b', 'c']))._set_value('foobar', 0)
A:pandas.tests.series.indexing.test_indexing.x->numpy.random.randn(2, 2)
A:pandas.tests.series.indexing.test_indexing.y->pandas.Series(range(2))
A:pandas.tests.series.indexing.test_indexing.orig->Series(Categorical(['b', 'b'], categories=['a', 'b']))
A:pandas.tests.series.indexing.test_indexing.s[1]->pandas.Timestamp('2011-01-01', tz=tz)
A:pandas.tests.series.indexing.test_indexing.exp->Series(Categorical([1, np.nan, 3], categories=[1, 2, 3]))
A:pandas.tests.series.indexing.test_indexing.s.loc[1]->pandas.Timestamp('2011-01-01', tz=tz)
A:pandas.tests.series.indexing.test_indexing.s.iloc[1]->pandas.Timestamp('2011-01-01', tz=tz)
A:pandas.tests.series.indexing.test_indexing.vals->pandas.Series([pd.Timestamp('2011-01-01', tz=tz), pd.Timestamp('2012-01-01', tz=tz)], index=[1, 2])
A:pandas.tests.series.indexing.test_indexing.s.loc['B']->timedelta(1)
A:pandas.tests.series.indexing.test_indexing.s.loc['A']->timedelta(1)
A:pandas.tests.series.indexing.test_indexing.s.loc[[1, 2, 3]]->numpy.timedelta64(20, 'm')
A:pandas.tests.series.indexing.test_indexing.expected.loc[[1, 2, 3]]->pandas.Timedelta(np.timedelta64(20, 'm'))
A:pandas.tests.series.indexing.test_indexing.dti->pandas.date_range('2016-01-01', periods=3, tz=tz)
A:pandas.tests.series.indexing.test_indexing.base->pandas.Series([0, 1, 2], dtype='m8[ns]')
A:pandas.tests.series.indexing.test_indexing.ser.loc['td']->pandas.Timedelta('9 days')
A:pandas.tests.series.indexing.test_indexing.s[[True, False]]->Series([0], index=[1], dtype='int64')
A:pandas.tests.series.indexing.test_indexing.ts->Series(np.random.randn(100), index=np.arange(100, 0, -1)).round(5)
A:pandas.tests.series.indexing.test_indexing.right->ts[mask].copy().map(str)
A:pandas.tests.series.indexing.test_indexing.mask->Series([False, True, True, False])
A:pandas.tests.series.indexing.test_indexing.index->MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'], ['one', 'two', 'three']], codes=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3], [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]], names=['first', 'second'])
A:pandas.tests.series.indexing.test_indexing.array->numpy.zeros(5)
A:pandas.tests.series.indexing.test_indexing.actual->Series(pd.Categorical(['a', 'b', 'c'])).take([-1, 3, 4])
pandas.tests.series.indexing.test_indexing.test_2d_to_1d_assignment_raises()
pandas.tests.series.indexing.test_indexing.test_append_timedelta_does_not_cast(td)
pandas.tests.series.indexing.test_indexing.test_basic_getitem_setitem_corner(datetime_series)
pandas.tests.series.indexing.test_indexing.test_basic_getitem_with_labels(datetime_series)
pandas.tests.series.indexing.test_indexing.test_basic_indexing()
pandas.tests.series.indexing.test_indexing.test_cast_on_putmask()
pandas.tests.series.indexing.test_indexing.test_categorical_assigning_ops()
pandas.tests.series.indexing.test_indexing.test_dt64_series_assign_nat(nat_val,should_cast,tz)
pandas.tests.series.indexing.test_indexing.test_get(arr)
pandas.tests.series.indexing.test_indexing.test_getitem_2d_no_warning()
pandas.tests.series.indexing.test_indexing.test_getitem_ambiguous_keyerror()
pandas.tests.series.indexing.test_indexing.test_getitem_box_float64(datetime_series)
pandas.tests.series.indexing.test_indexing.test_getitem_dataframe()
pandas.tests.series.indexing.test_indexing.test_getitem_dups()
pandas.tests.series.indexing.test_indexing.test_getitem_dups_with_missing()
pandas.tests.series.indexing.test_indexing.test_getitem_fancy(string_series,object_series)
pandas.tests.series.indexing.test_indexing.test_getitem_generator(string_series)
pandas.tests.series.indexing.test_indexing.test_getitem_get(datetime_series,string_series,object_series)
pandas.tests.series.indexing.test_indexing.test_getitem_out_of_bounds(datetime_series)
pandas.tests.series.indexing.test_indexing.test_getitem_setitem_ellipsis()
pandas.tests.series.indexing.test_indexing.test_getitem_setitem_integers()
pandas.tests.series.indexing.test_indexing.test_getitem_unordered_dup()
pandas.tests.series.indexing.test_indexing.test_getitem_with_duplicates_indices(result_1,duplicate_item,expected_1)
pandas.tests.series.indexing.test_indexing.test_head_tail(string_series)
pandas.tests.series.indexing.test_indexing.test_loc_setitem(string_series)
pandas.tests.series.indexing.test_indexing.test_multilevel_preserve_name()
pandas.tests.series.indexing.test_indexing.test_pop()
pandas.tests.series.indexing.test_indexing.test_preserve_refs(datetime_series)
pandas.tests.series.indexing.test_indexing.test_series_box_timestamp()
pandas.tests.series.indexing.test_indexing.test_set_value(datetime_series,string_series)
pandas.tests.series.indexing.test_indexing.test_setitem(datetime_series,string_series)
pandas.tests.series.indexing.test_indexing.test_setitem_ambiguous_keyerror()
pandas.tests.series.indexing.test_indexing.test_setitem_dtypes()
pandas.tests.series.indexing.test_indexing.test_setitem_na()
pandas.tests.series.indexing.test_indexing.test_setitem_scalar_into_readonly_backing_data()
pandas.tests.series.indexing.test_indexing.test_setitem_slice_into_readonly_backing_data()
pandas.tests.series.indexing.test_indexing.test_setitem_with_tz(tz)
pandas.tests.series.indexing.test_indexing.test_setitem_with_tz_dst()
pandas.tests.series.indexing.test_indexing.test_setslice(datetime_series)
pandas.tests.series.indexing.test_indexing.test_slice(string_series,object_series)
pandas.tests.series.indexing.test_indexing.test_slice_can_reorder_not_uniquely_indexed()
pandas.tests.series.indexing.test_indexing.test_take()
pandas.tests.series.indexing.test_indexing.test_take_categorical()
pandas.tests.series.indexing.test_indexing.test_td64_series_assign_nat(nat_val,should_cast)
pandas.tests.series.indexing.test_indexing.test_timedelta_assignment()
pandas.tests.series.indexing.test_indexing.test_type_promote_putmask()
pandas.tests.series.indexing.test_indexing.test_type_promotion()
pandas.tests.series.indexing.test_indexing.test_uint_drop(any_int_dtype)
pandas.tests.series.indexing.test_indexing.test_underlying_data_conversion()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tslibs/test_fields.py----------------------------------------
A:pandas.tests.tslibs.test_fields.result->pandas._libs.tslibs.fields.get_timedelta_field(dtindex, 'days')
A:pandas.tests.tslibs.test_fields.expected->numpy.array([True, False, False, False, False], dtype=np.bool_)
pandas.tests.tslibs.test_fields.test_fields_readonly()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tslibs/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tslibs/test_timezones.py----------------------------------------
A:pandas.tests.tslibs.test_timezones.tz_p->pandas._libs.tslibs.timezones.maybe_get_tz(tz_name)
A:pandas.tests.tslibs.test_timezones.tz_d->pandas._libs.tslibs.timezones.maybe_get_tz('dateutil/' + tz_name)
A:pandas.tests.tslibs.test_timezones.ts->Timestamp('2011-01-01', tz=dateutil.tz.tzlocal())
A:pandas.tests.tslibs.test_timezones.tz->pandas._libs.tslibs.timezones.maybe_get_tz('tzlocal()')
A:pandas.tests.tslibs.test_timezones.offset->dateutil.tz.tzlocal().utcoffset(datetime(2011, 1, 1))
A:pandas.tests.tslibs.test_timezones.start_naive->datetime(2001, 1, 1)
A:pandas.tests.tslibs.test_timezones.end_naive->datetime(2009, 1, 1)
A:pandas.tests.tslibs.test_timezones.start->utc.localize(start_naive)
A:pandas.tests.tslibs.test_timezones.end->pandas._libs.tslibs.conversion.localize_pydatetime(end_naive, eastern)
pandas.tests.tslibs.test_timezones.infer_setup(request)
pandas.tests.tslibs.test_timezones.test_cache_keys_are_distinct_for_pytz_vs_dateutil(tz_name)
pandas.tests.tslibs.test_timezones.test_infer_tz_compat(infer_setup)
pandas.tests.tslibs.test_timezones.test_infer_tz_mismatch(infer_setup,ordered)
pandas.tests.tslibs.test_timezones.test_infer_tz_utc_localize(infer_setup)
pandas.tests.tslibs.test_timezones.test_tzlocal_maybe_get_tz()
pandas.tests.tslibs.test_timezones.test_tzlocal_offset()
pandas.tests.tslibs.test_timezones.test_tzlocal_repr()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tslibs/test_libfrequencies.py----------------------------------------
A:pandas.tests.tslibs.test_libfrequencies.result->get_rule_month(obj)
pandas.tests.tslibs.test_libfrequencies.test_assert_aliases_deprecated(freq,expected,aliases)
pandas.tests.tslibs.test_libfrequencies.test_get_rule_month(obj,expected)
pandas.tests.tslibs.test_libfrequencies.test_period_str_to_code(obj,expected)
pandas.tests.tslibs.test_libfrequencies.test_super_sub_symmetry(p1,p2,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tslibs/test_normalize_date.py----------------------------------------
A:pandas.tests.tslibs.test_normalize_date.result->pandas._libs.tslibs.normalize_date(dt)
pandas.tests.tslibs.test_normalize_date.SubDatetime(datetime)
pandas.tests.tslibs.test_normalize_date.test_normalize_date(value,expected)
pandas.tests.tslibs.test_normalize_date.test_normalize_date_sub_types(dt,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tslibs/test_conversion.py----------------------------------------
A:pandas.tests.tslibs.test_conversion.result->pandas._libs.tslibs.conversion.localize_pydatetime(dt, UTC)
A:pandas.tests.tslibs.test_conversion.expected->numpy.vectorize(f)(utc_didx.asi8)
A:pandas.tests.tslibs.test_conversion.tz_didx->date_range('2000-01-01', '2020-01-01', freq=freq, tz=tz)
A:pandas.tests.tslibs.test_conversion.utc_didx->date_range('2000-01-01', '2020-01-01', freq=freq)
A:pandas.tests.tslibs.test_conversion.arr->numpy.array([], dtype=dtype)
pandas.tests.tslibs.test_conversion.SubDatetime(datetime)
pandas.tests.tslibs.test_conversion._compare_local_to_utc(tz_didx,utc_didx)
pandas.tests.tslibs.test_conversion._compare_utc_to_local(tz_didx)
pandas.tests.tslibs.test_conversion.test_length_zero_copy(dtype,copy)
pandas.tests.tslibs.test_conversion.test_localize_pydatetime_dt_types(dt,expected)
pandas.tests.tslibs.test_conversion.test_localize_pydt_dt_types(dt,expected)
pandas.tests.tslibs.test_conversion.test_tz_convert_corner(arr)
pandas.tests.tslibs.test_conversion.test_tz_convert_single_matches_tz_convert(tz_aware_fixture,freq)
pandas.tests.tslibs.test_conversion.test_tz_convert_single_matches_tz_convert_hourly(tz_aware_fixture)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tslibs/test_period_asfreq.py----------------------------------------
pandas.tests.tslibs.test_period_asfreq.test_intra_day_conversion_factors(freq1,freq2,expected)
pandas.tests.tslibs.test_period_asfreq.test_period_ordinal_business_day(day,expected)
pandas.tests.tslibs.test_period_asfreq.test_period_ordinal_start_values(freq,expected)
pandas.tests.tslibs.test_period_asfreq.test_period_ordinal_week(dt,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tslibs/test_array_to_datetime.py----------------------------------------
A:pandas.tests.tslibs.test_array_to_datetime.arr->numpy.array(data, dtype=object)
A:pandas.tests.tslibs.test_array_to_datetime.(result, _)->pandas._libs.tslib.array_to_datetime(arr)
A:pandas.tests.tslibs.test_array_to_datetime.expected->np_array_datetime64_compat(expected, dtype='M8[ns]')
A:pandas.tests.tslibs.test_array_to_datetime.(expected, _)->pandas._libs.tslib.array_to_datetime(arr)
A:pandas.tests.tslibs.test_array_to_datetime.(result, result_tz)->pandas._libs.tslib.array_to_datetime(data)
A:pandas.tests.tslibs.test_array_to_datetime.data->numpy.array(data, dtype=object)
A:pandas.tests.tslibs.test_array_to_datetime.kwargs->dict(values=arr, errors=errors)
pandas.tests.tslibs.test_array_to_datetime.SubDatetime(datetime)
pandas.tests.tslibs.test_array_to_datetime.test_coerce_of_invalid_datetimes(errors)
pandas.tests.tslibs.test_array_to_datetime.test_coerce_outside_ns_bounds(invalid_date,errors)
pandas.tests.tslibs.test_array_to_datetime.test_coerce_outside_ns_bounds_one_valid()
pandas.tests.tslibs.test_array_to_datetime.test_datetime_subclass(data,expected)
pandas.tests.tslibs.test_array_to_datetime.test_number_looking_strings_not_into_datetime(data)
pandas.tests.tslibs.test_array_to_datetime.test_parsing_different_timezone_offsets()
pandas.tests.tslibs.test_array_to_datetime.test_parsing_non_iso_timezone_offset()
pandas.tests.tslibs.test_array_to_datetime.test_parsing_timezone_offsets(dt_string,expected_tz)
pandas.tests.tslibs.test_array_to_datetime.test_parsing_valid_dates(data,expected)
pandas.tests.tslibs.test_array_to_datetime.test_to_datetime_barely_out_of_bounds()
pandas.tests.tslibs.test_array_to_dt.SubDatetime(datetime)
pandas.tests.tslibs.test_array_to_dt.test_coerce_of_invalid_dts(errors)
pandas.tests.tslibs.test_array_to_dt.test_coerce_outside_ns_bounds(invalid_date,errors)
pandas.tests.tslibs.test_array_to_dt.test_coerce_outside_ns_bounds_one_valid()
pandas.tests.tslibs.test_array_to_dt.test_dt_subclass(data,expected)
pandas.tests.tslibs.test_array_to_dt.test_number_looking_strings_not_into_dt(data)
pandas.tests.tslibs.test_array_to_dt.test_parsing_different_timezone_offsets()
pandas.tests.tslibs.test_array_to_dt.test_parsing_non_iso_timezone_offset()
pandas.tests.tslibs.test_array_to_dt.test_parsing_timezone_offsets(dt_string,expected_tz)
pandas.tests.tslibs.test_array_to_dt.test_parsing_valid_dates(data,expected)
pandas.tests.tslibs.test_array_to_dt.test_to_dt_barely_out_of_bounds()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tslibs/test_liboffsets.py----------------------------------------
A:pandas.tests.tslibs.test_liboffsets.dt->datetime(2017, 11, 15)
A:pandas.tests.tslibs.test_liboffsets.ts->Timestamp('1929-05-05')
A:pandas.tests.tslibs.test_liboffsets.other->Timestamp(2072, 10, 1, 6, 17, 18)
A:pandas.tests.tslibs.test_liboffsets.expected->exp_dict.get(n, {}).get(day_opt, n)
pandas.tests.tslibs.test_liboffsets.day_opt(request)
pandas.tests.tslibs.test_liboffsets.test_get_day_of_month_error()
pandas.tests.tslibs.test_liboffsets.test_get_first_bday(dt,exp_week_day,exp_first_day)
pandas.tests.tslibs.test_liboffsets.test_get_last_bday(dt,exp_week_day,exp_last_day)
pandas.tests.tslibs.test_liboffsets.test_roll_convention(n,expected,compare)
pandas.tests.tslibs.test_liboffsets.test_roll_qtr_day_mod_equal(other,month,exp_dict,n,day_opt)
pandas.tests.tslibs.test_liboffsets.test_roll_qtr_day_not_mod_unequal(day_opt,month,n)
pandas.tests.tslibs.test_liboffsets.test_roll_yearday(other,expected,n)
pandas.tests.tslibs.test_liboffsets.test_roll_yearday2(other,expected,n)
pandas.tests.tslibs.test_liboffsets.test_shift_month_dt(months,day_opt,expected)
pandas.tests.tslibs.test_liboffsets.test_shift_month_error()
pandas.tests.tslibs.test_liboffsets.test_shift_month_ts(months,day_opt,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tslibs/test_api.py----------------------------------------
A:pandas.tests.tslibs.test_api.expected->set(submodules + api)
pandas.tests.tslibs.test_api.test_namespace()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tslibs/test_parse_iso8601.py----------------------------------------
A:pandas.tests.tslibs.test_parse_iso8601.actual->pandas._libs.tslib._test_parse_iso8601(' ' * 200 + date_str)
A:pandas.tests.tslibs.test_parse_iso8601.msg->'Error parsing datetime string "{s}"'.format(s=date_str)
pandas.tests.tslibs.test_parse_iso8601.test_parsers_iso8601(date_str,exp)
pandas.tests.tslibs.test_parse_iso8601.test_parsers_iso8601_invalid(date_str)
pandas.tests.tslibs.test_parse_iso8601.test_parsers_iso8601_invalid_offset_invalid()
pandas.tests.tslibs.test_parse_iso8601.test_parsers_iso8601_leading_space()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tslibs/test_timedeltas.py----------------------------------------
A:pandas.tests.tslibs.test_timedeltas.result->delta_to_nanoseconds(obj)
A:pandas.tests.tslibs.test_timedeltas.obj->numpy.array([123456789], dtype='m8[ns]')
pandas.tests.tslibs.test_timedeltas.test_delta_to_nanoseconds(obj,expected)
pandas.tests.tslibs.test_timedeltas.test_delta_to_nanoseconds_error()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tslibs/test_ccalendar.py----------------------------------------
A:pandas.tests.tslibs.test_ccalendar.dt->datetime.datetime.fromordinal(1 + np.random.randint(365 * 4000))
A:pandas.tests.tslibs.test_ccalendar.result->pandas._libs.tslibs.ccalendar.get_day_of_year(dt.year, dt.month, dt.day)
pandas.tests.tslibs.test_ccalendar.test_get_day_of_year_dt()
pandas.tests.tslibs.test_ccalendar.test_get_day_of_year_numeric(date_tuple,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tslibs/test_parsing.py----------------------------------------
A:pandas.tests.tslibs.test_parsing.(date, parsed, reso)->parse_time_string(normal)
A:pandas.tests.tslibs.test_parsing.(date_lower, parsed_lower, reso_lower)->parse_time_string('4q1984')
A:pandas.tests.tslibs.test_parsing.(date_dash, parsed_dash, reso_dash)->parse_time_string(dashed)
A:pandas.tests.tslibs.test_parsing.(result, _, _)->pandas._libs.tslibs.parsing.parse_time_string(date_str, freq='M')
A:pandas.tests.tslibs.test_parsing.result->parse_time_string('2019')
A:pandas.tests.tslibs.test_parsing.arr->numpy.array(['5/1/2000', '6/1/2000', '7/1/2000'], dtype=object)
A:pandas.tests.tslibs.test_parsing.expected->numpy.array([parse(d, dayfirst=True) for d in arr])
pandas.tests.tslibs.test_parsing.test_does_not_convert_mixed_integer(date_string,expected)
pandas.tests.tslibs.test_parsing.test_guess_datetime_format_invalid_inputs(invalid_dt)
pandas.tests.tslibs.test_parsing.test_guess_datetime_format_no_padding(string,fmt)
pandas.tests.tslibs.test_parsing.test_guess_datetime_format_with_dayfirst(dayfirst,expected)
pandas.tests.tslibs.test_parsing.test_guess_datetime_format_with_locale_specific_formats(string,fmt)
pandas.tests.tslibs.test_parsing.test_guess_datetime_format_with_parseable_formats(string,fmt)
pandas.tests.tslibs.test_parsing.test_guess_dt_format_invalid_inputs(invalid_dt)
pandas.tests.tslibs.test_parsing.test_guess_dt_format_no_padding(string,fmt)
pandas.tests.tslibs.test_parsing.test_guess_dt_format_with_dayfirst(dayfirst,expected)
pandas.tests.tslibs.test_parsing.test_guess_dt_format_with_locale_specific_formats(string,fmt)
pandas.tests.tslibs.test_parsing.test_guess_dt_format_with_parseable_formats(string,fmt)
pandas.tests.tslibs.test_parsing.test_parse_time_quarter_with_dash(dashed,normal)
pandas.tests.tslibs.test_parsing.test_parse_time_quarter_with_dash_error(dashed)
pandas.tests.tslibs.test_parsing.test_parse_time_string()
pandas.tests.tslibs.test_parsing.test_parse_time_string_check_instance_type_raise_exception()
pandas.tests.tslibs.test_parsing.test_parse_time_string_invalid_type()
pandas.tests.tslibs.test_parsing.test_parsers_month_freq(date_str,expected)
pandas.tests.tslibs.test_parsing.test_parsers_quarter_invalid(date_str)
pandas.tests.tslibs.test_parsing.test_parsers_quarterly_with_freq(date_str,freq,expected)
pandas.tests.tslibs.test_parsing.test_parsers_quarterly_with_freq_error(date_str,kwargs,msg)
pandas.tests.tslibs.test_parsing.test_try_parse_dates()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/api/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/api/test_api.py----------------------------------------
A:pandas.tests.api.test_api.result->sorted(set(result) - set(ignored))
A:pandas.tests.api.test_api.expected->sorted(expected)
A:pandas.tests.api.test_api.deprecated->getattr(pd, depr)
A:pandas.tests.api.test_api.out->subprocess.check_output([sys.executable, '-c', 'import pandas; pandas.util.testing.assert_series_equal'], stderr=subprocess.STDOUT).decode()
pandas.tests.api.test_api.Base
pandas.tests.api.test_api.Base.check(self,namespace,expected,ignored=None)
pandas.tests.api.test_api.TestApi(Base)
pandas.tests.api.test_api.TestApi.test_api(self)
pandas.tests.api.test_api.TestPDApi(Base)
pandas.tests.api.test_api.TestPDApi.test_api(self)
pandas.tests.api.test_api.TestPDApi.test_depr(self)
pandas.tests.api.test_api.TestTesting(Base)
pandas.tests.api.test_api.TestTesting.test_testing(self)
pandas.tests.api.test_api.TestTesting.test_util_in_top_level(self)
pandas.tests.api.test_api.TestTesting.test_util_testing_deprecated(self)
pandas.tests.api.test_api.TestTesting.test_util_testing_deprecated_direct(self)
pandas.tests.api.test_api.test_datetime()
pandas.tests.api.test_api.test_dt()
pandas.tests.api.test_api.test_np()
pandas.tests.api.test_api.test_sparsearray()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/api/test_types.py----------------------------------------
pandas.tests.api.test_types.TestTypes(Base)
pandas.tests.api.test_types.TestTypes.test_deprecated_from_api_types(self)
pandas.tests.api.test_types.TestTypes.test_types(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/dtypes/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/dtypes/test_concat.py----------------------------------------
A:pandas.tests.dtypes.test_concat.result->pandas.core.dtypes.concat.get_dtype_kinds(to_concat)
pandas.tests.dtypes.test_concat.test_get_dtype_kinds(index_or_series,to_concat,expected)
pandas.tests.dtypes.test_concat.test_get_dtype_kinds_period(to_concat,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/dtypes/test_generic.py----------------------------------------
A:pandas.tests.dtypes.test_generic.multi_index->pandas.MultiIndex.from_arrays(tuples, names=('number', 'color'))
A:pandas.tests.dtypes.test_generic.datetime_index->pandas.to_datetime(['2000/1/1', '2010/1/1'])
A:pandas.tests.dtypes.test_generic.timedelta_index->pandas.to_timedelta(np.arange(5), unit='s')
A:pandas.tests.dtypes.test_generic.period_index->pandas.period_range('2000/1/1', '2010/1/1/', freq='M')
A:pandas.tests.dtypes.test_generic.categorical->pandas.Categorical([1, 2, 3], categories=[2, 3, 1])
A:pandas.tests.dtypes.test_generic.categorical_df->pandas.DataFrame({'values': [1, 2, 3]}, index=categorical)
A:pandas.tests.dtypes.test_generic.df->pandas.DataFrame(d)
A:pandas.tests.dtypes.test_generic.sparse_array->pandas.arrays.SparseArray(np.random.randn(10))
A:pandas.tests.dtypes.test_generic.datetime_array->pandas.core.arrays.DatetimeArray(datetime_index)
A:pandas.tests.dtypes.test_generic.timedelta_array->pandas.core.arrays.TimedeltaArray(timedelta_index)
pandas.tests.dtypes.test_generic.TestABCClasses
pandas.tests.dtypes.test_generic.TestABCClasses.test_abc_types(self)
pandas.tests.dtypes.test_generic.test_setattr_warnings()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/dtypes/test_inference.py----------------------------------------
A:pandas.tests.dtypes.test_inference.(objs, expected, ids)->zip(*ll_params)
A:pandas.tests.dtypes.test_inference.result->ensure_categorical(values)
A:pandas.tests.dtypes.test_inference.d->DictLike({1: 2})
A:pandas.tests.dtypes.test_inference.data->numpy.array(['1.200', '-999.000', '4.500'], dtype=object)
A:pandas.tests.dtypes.test_inference.m->MockFile()
A:pandas.tests.dtypes.test_inference.test_tuple->collections.namedtuple('Test', ['a', 'b', 'c'])
A:pandas.tests.dtypes.test_inference.arr->Categorical(list('abc'), categories=['cegfab'], ordered=True)
A:pandas.tests.dtypes.test_inference.pos->numpy.array(['inf'], dtype=np.float64)
A:pandas.tests.dtypes.test_inference.neg->numpy.array(['-inf'], dtype=np.float64)
A:pandas.tests.dtypes.test_inference.out->pandas._libs.lib.to_object_array(rows, min_width=5)
A:pandas.tests.dtypes.test_inference.expected->numpy.array([[1, 2, 3, None, None], [4, 5, 6, None, None]], dtype=object)
A:pandas.tests.dtypes.test_inference.exp->numpy.array([True, False, np.nan], dtype=object)
A:pandas.tests.dtypes.test_inference.ind->pandas.Index([True, False, np.nan], dtype=object)
A:pandas.tests.dtypes.test_inference.array->numpy.array([datetime(2015, 1, 1, tzinfo=pytz.utc), 1], dtype=object)
A:pandas.tests.dtypes.test_inference.index->Index(dates)
A:pandas.tests.dtypes.test_inference.func->getattr(lib, func)
A:pandas.tests.dtypes.test_inference.record->namedtuple('record', 'x y')
A:pandas.tests.dtypes.test_inference.r->record(5, 6)
A:pandas.tests.dtypes.test_inference.idx->DatetimeIndex(np.array([], dtype=f'datetime64[{unit}]'))
A:pandas.tests.dtypes.test_inference.inferred->pandas._libs.lib.infer_dtype(val, skipna=skipna)
A:pandas.tests.dtypes.test_inference.val->klass(data, dtype='boolean')
A:pandas.tests.dtypes.test_inference.ts->pandas.date_range('20130101', periods=3)
A:pandas.tests.dtypes.test_inference.tsa->pandas.date_range('20130101', periods=3, tz='US/Eastern')
A:pandas.tests.dtypes.test_inference.tdi->TimedeltaIndex([100000000000000.0, 200000000000000.0], dtype='timedelta64[ns]')
A:pandas.tests.dtypes.test_inference.df->DataFrame(dict({'A': np.asarray(range(10), dtype='float64'), 'B': Timestamp('20010101')}))
A:pandas.tests.dtypes.test_inference.s->df['B'].copy()
A:pandas.tests.dtypes.test_inference.s._data->df['B'].copy()._data.setitem(indexer=tuple([slice(8, 9)]), value=np.nan)
A:pandas.tests.dtypes.test_inference.values->Categorical(values)
pandas.tests.dtypes.test_inference.TestInference
pandas.tests.dtypes.test_inference.TestInference.test_convert_infs(self)
pandas.tests.dtypes.test_inference.TestInference.test_convert_int_overflow(self,value)
pandas.tests.dtypes.test_inference.TestInference.test_convert_non_hashable(self)
pandas.tests.dtypes.test_inference.TestInference.test_convert_numeric_int64_uint64(self,case,coerce)
pandas.tests.dtypes.test_inference.TestInference.test_convert_numeric_uint64(self)
pandas.tests.dtypes.test_inference.TestInference.test_convert_numeric_uint64_nan(self,coerce,arr)
pandas.tests.dtypes.test_inference.TestInference.test_convert_numeric_uint64_nan_values(self,coerce)
pandas.tests.dtypes.test_inference.TestInference.test_infer_dtype_bytes(self)
pandas.tests.dtypes.test_inference.TestInference.test_isinf_scalar(self)
pandas.tests.dtypes.test_inference.TestInference.test_maybe_convert_numeric_infinities(self,infinity,maybe_int)
pandas.tests.dtypes.test_inference.TestInference.test_maybe_convert_numeric_post_floatify_nan(self,coerce)
pandas.tests.dtypes.test_inference.TestInference.test_maybe_convert_objects_bool_nan(self)
pandas.tests.dtypes.test_inference.TestInference.test_maybe_convert_objects_datetime(self)
pandas.tests.dtypes.test_inference.TestInference.test_maybe_convert_objects_dt(self)
pandas.tests.dtypes.test_inference.TestInference.test_maybe_convert_objects_nullable_integer(self,exp)
pandas.tests.dtypes.test_inference.TestInference.test_maybe_convert_objects_uint64(self)
pandas.tests.dtypes.test_inference.TestInference.test_mixed_dtypes_remain_object_array(self)
pandas.tests.dtypes.test_inference.TestInference.test_scientific_no_exponent(self)
pandas.tests.dtypes.test_inference.TestIsScalar
pandas.tests.dtypes.test_inference.TestIsScalar.test_is_scalar_builtin_nonscalars(self)
pandas.tests.dtypes.test_inference.TestIsScalar.test_is_scalar_builtin_scalars(self)
pandas.tests.dtypes.test_inference.TestIsScalar.test_is_scalar_numpy_array_scalars(self)
pandas.tests.dtypes.test_inference.TestIsScalar.test_is_scalar_numpy_arrays(self)
pandas.tests.dtypes.test_inference.TestIsScalar.test_is_scalar_numpy_zerodim_arrays(self)
pandas.tests.dtypes.test_inference.TestIsScalar.test_is_scalar_pandas_containers(self)
pandas.tests.dtypes.test_inference.TestIsScalar.test_is_scalar_pandas_scalars(self)
pandas.tests.dtypes.test_inference.TestNumberScalar
pandas.tests.dtypes.test_inference.TestNumberScalar.test_is_bool(self)
pandas.tests.dtypes.test_inference.TestNumberScalar.test_is_datetime_dtypes(self)
pandas.tests.dtypes.test_inference.TestNumberScalar.test_is_dt_dtypes(self)
pandas.tests.dtypes.test_inference.TestNumberScalar.test_is_float(self)
pandas.tests.dtypes.test_inference.TestNumberScalar.test_is_integer(self)
pandas.tests.dtypes.test_inference.TestNumberScalar.test_is_number(self)
pandas.tests.dtypes.test_inference.TestNumberScalar.test_is_timedelta(self)
pandas.tests.dtypes.test_inference.TestTypeInference
pandas.tests.dtypes.test_inference.TestTypeInference.Dummy
pandas.tests.dtypes.test_inference.TestTypeInference.test_boolean_dtype(self,data,skipna,klass)
pandas.tests.dtypes.test_inference.TestTypeInference.test_bools(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_categorical(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_complex(self,skipna)
pandas.tests.dtypes.test_inference.TestTypeInference.test_date(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_datetime(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_decimals(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_dt(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_floats(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_infer_datetimelike_array_date(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_infer_datetimelike_array_datetime(self,data)
pandas.tests.dtypes.test_inference.TestTypeInference.test_infer_datetimelike_array_mixed(self,data)
pandas.tests.dtypes.test_inference.TestTypeInference.test_infer_datetimelike_array_nan_nat_like(self,first,second,expected)
pandas.tests.dtypes.test_inference.TestTypeInference.test_infer_datetimelike_array_timedelta(self,data)
pandas.tests.dtypes.test_inference.TestTypeInference.test_infer_dtlike_array_date(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_infer_dtlike_array_dt(self,data)
pandas.tests.dtypes.test_inference.TestTypeInference.test_infer_dtlike_array_mixed(self,data)
pandas.tests.dtypes.test_inference.TestTypeInference.test_infer_dtlike_array_nan_nat_like(self,first,second,expected)
pandas.tests.dtypes.test_inference.TestTypeInference.test_infer_dtlike_array_timedelta(self,data)
pandas.tests.dtypes.test_inference.TestTypeInference.test_infer_dtype_all_nan_nat_like(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_infer_dtype_datetime(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_infer_dtype_dt(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_infer_dtype_period(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_infer_dtype_skipna_default(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_infer_dtype_timedelta(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_inferred_dtype_fixture(self,any_skipna_inferred_dtype)
pandas.tests.dtypes.test_inference.TestTypeInference.test_integer_na(self,arr,skipna)
pandas.tests.dtypes.test_inference.TestTypeInference.test_integers(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_interval(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_is_datetimelike_array_all_nan_nat_like(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_is_dtlike_array_all_nan_nat_like(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_is_numeric_array(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_is_period(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_is_string_array(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_length_zero(self,skipna)
pandas.tests.dtypes.test_inference.TestTypeInference.test_object(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_object_empty(self,box,missing,dtype,skipna,expected)
pandas.tests.dtypes.test_inference.TestTypeInference.test_other_dtypes_for_array(self,func)
pandas.tests.dtypes.test_inference.TestTypeInference.test_string(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_string_dtype(self,data,skipna,klass)
pandas.tests.dtypes.test_inference.TestTypeInference.test_to_object_array_tuples(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_to_object_array_width(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_unicode(self)
pandas.tests.dtypes.test_inference.coerce(request)
pandas.tests.dtypes.test_inference.maybe_list_like(request)
pandas.tests.dtypes.test_inference.test_datetimeindex_from_empty_datetime64_array()
pandas.tests.dtypes.test_inference.test_dtindex_from_empty_dt64_array()
pandas.tests.dtypes.test_inference.test_ensure_categorical()
pandas.tests.dtypes.test_inference.test_ensure_int32()
pandas.tests.dtypes.test_inference.test_is_array_like()
pandas.tests.dtypes.test_inference.test_is_dict_like_duck_type(has_keys,has_getitem,has_contains)
pandas.tests.dtypes.test_inference.test_is_dict_like_fails(ll)
pandas.tests.dtypes.test_inference.test_is_dict_like_passes(ll)
pandas.tests.dtypes.test_inference.test_is_file_like()
pandas.tests.dtypes.test_inference.test_is_hashable()
pandas.tests.dtypes.test_inference.test_is_list_like(maybe_list_like)
pandas.tests.dtypes.test_inference.test_is_list_like_disallow_sets(maybe_list_like)
pandas.tests.dtypes.test_inference.test_is_names_tuple_fails(ll)
pandas.tests.dtypes.test_inference.test_is_names_tuple_passes(ll)
pandas.tests.dtypes.test_inference.test_is_nested_list_like_fails(obj)
pandas.tests.dtypes.test_inference.test_is_nested_list_like_passes(inner,outer)
pandas.tests.dtypes.test_inference.test_is_re_fails(ll)
pandas.tests.dtypes.test_inference.test_is_re_passes(ll)
pandas.tests.dtypes.test_inference.test_is_recompilable_fails(ll)
pandas.tests.dtypes.test_inference.test_is_recompilable_passes(ll)
pandas.tests.dtypes.test_inference.test_is_scipy_sparse(spmatrix)
pandas.tests.dtypes.test_inference.test_is_sequence()
pandas.tests.dtypes.test_inference.test_nan_to_nat_conversions()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/dtypes/test_missing.py----------------------------------------
A:pandas.tests.dtypes.test_missing.now->pandas.Timestamp.now()
A:pandas.tests.dtypes.test_missing.utcnow->pandas.Timestamp.now('UTC')
A:pandas.tests.dtypes.test_missing.arr->numpy.empty_like([None])
A:pandas.tests.dtypes.test_missing.result->getattr(libmissing, method)(arr)
A:pandas.tests.dtypes.test_missing.expected->numpy.array([True])
A:pandas.tests.dtypes.test_missing.exp->pandas.Series([False, True, False])
A:pandas.tests.dtypes.test_missing.idx->pandas.PeriodIndex(['2011-01', 'NaT', '2012-01'], freq='M')
A:pandas.tests.dtypes.test_missing.mask->isna(pidx[1:])
A:pandas.tests.dtypes.test_missing.pidx->pandas.PeriodIndex(['2011-01', 'NaT', '2012-01'], freq='M').to_period(freq='M')
A:pandas.tests.dtypes.test_missing.values->pandas.PeriodIndex(['2011-01', 'NaT', '2012-01'], freq='M').values.astype(dtype)
A:pandas.tests.dtypes.test_missing.s->pandas.Series(idx, dtype=object)
A:pandas.tests.dtypes.test_missing.left->numpy.array([np.array([50, 50, 50]), np.array([40, 40, 40])], dtype=object)
A:pandas.tests.dtypes.test_missing.right->numpy.array([50, 40])
A:pandas.tests.dtypes.test_missing.m->numpy.array([(1, 2), (3, 4)], dtype=[('a', int), ('b', float)])
A:pandas.tests.dtypes.test_missing.n->numpy.array([(1, 2), (3, 4)], dtype=[('b', int), ('a', float)])
pandas.tests.dtypes.test_missing.TestIsNA
pandas.tests.dtypes.test_missing.TestIsNA.test_0d_array(self)
pandas.tests.dtypes.test_missing.TestIsNA.test_complex(self,value,expected)
pandas.tests.dtypes.test_missing.TestIsNA.test_datetime_other_units(self)
pandas.tests.dtypes.test_missing.TestIsNA.test_dt_other_units(self)
pandas.tests.dtypes.test_missing.TestIsNA.test_empty_object(self)
pandas.tests.dtypes.test_missing.TestIsNA.test_isna_datetime(self)
pandas.tests.dtypes.test_missing.TestIsNA.test_isna_dt(self)
pandas.tests.dtypes.test_missing.TestIsNA.test_isna_isnull(self,isna_f)
pandas.tests.dtypes.test_missing.TestIsNA.test_isna_lists(self)
pandas.tests.dtypes.test_missing.TestIsNA.test_isna_nat(self)
pandas.tests.dtypes.test_missing.TestIsNA.test_isna_numpy_nat(self)
pandas.tests.dtypes.test_missing.TestIsNA.test_period(self)
pandas.tests.dtypes.test_missing.TestIsNA.test_timedelta_other_units(self)
pandas.tests.dtypes.test_missing.TestLibMissing
pandas.tests.dtypes.test_missing.TestLibMissing.checknull_old(self)
pandas.tests.dtypes.test_missing.TestLibMissing.test_checknull(self)
pandas.tests.dtypes.test_missing.TestLibMissing.test_is_null_datetimelike(self)
pandas.tests.dtypes.test_missing.TestLibMissing.test_is_null_dtlike(self)
pandas.tests.dtypes.test_missing.TestNAObj
pandas.tests.dtypes.test_missing.TestNAObj._check_behavior(self,arr,expected)
pandas.tests.dtypes.test_missing.TestNAObj.test_basic(self)
pandas.tests.dtypes.test_missing.TestNAObj.test_empty_arr(self)
pandas.tests.dtypes.test_missing.TestNAObj.test_empty_like(self)
pandas.tests.dtypes.test_missing.TestNAObj.test_empty_str_inp(self)
pandas.tests.dtypes.test_missing.TestNAObj.test_non_obj_dtype(self)
pandas.tests.dtypes.test_missing.test_array_equivalent()
pandas.tests.dtypes.test_missing.test_array_equivalent_compat()
pandas.tests.dtypes.test_missing.test_array_equivalent_nested()
pandas.tests.dtypes.test_missing.test_array_equivalent_str()
pandas.tests.dtypes.test_missing.test_array_equivalent_tzawareness(lvalue,rvalue)
pandas.tests.dtypes.test_missing.test_na_value_for_dtype(dtype,na_value)
pandas.tests.dtypes.test_missing.test_notna_notnull(notna_f)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/dtypes/test_common.py----------------------------------------
A:pandas.tests.dtypes.test_common.dtypes->dict(datetime_tz=com.pandas_dtype('datetime64[ns, US/Eastern]'), datetime=com.pandas_dtype('datetime64[ns]'), timedelta=com.pandas_dtype('timedelta64[ns]'), period=PeriodDtype('D'), integer=np.dtype(np.int64), float=np.dtype(np.float64), object=np.dtype(np.object), category=com.pandas_dtype('category'))
A:pandas.tests.dtypes.test_common.cat->pandas.Categorical([1, 2, 3])
A:pandas.tests.dtypes.test_common.interval->pandas.Interval(1, 2, closed='right')
A:pandas.tests.dtypes.test_common.dt->numpy.datetime64(datetime(2017, 1, 1))
A:pandas.tests.dtypes.test_common.dtype->DatetimeTZDtype('ns', tz='US/Eastern')
A:pandas.tests.dtypes.test_common.s->pandas.Series([], dtype=dtype)
A:pandas.tests.dtypes.test_common.arr->numpy.array([from_type('NaT')])
A:pandas.tests.dtypes.test_common.result->astype_nansafe(arr, dtype='object')
pandas.tests.dtypes.test_common.TestPandasDtype
pandas.tests.dtypes.test_common.TestPandasDtype.test_categorical_dtype(self)
pandas.tests.dtypes.test_common.TestPandasDtype.test_datetimetz_dtype(self,dtype)
pandas.tests.dtypes.test_common.TestPandasDtype.test_dttz_dtype(self,dtype)
pandas.tests.dtypes.test_common.TestPandasDtype.test_invalid_dtype_error(self,box)
pandas.tests.dtypes.test_common.TestPandasDtype.test_numpy_dtype(self,dtype)
pandas.tests.dtypes.test_common.TestPandasDtype.test_numpy_string_dtype(self)
pandas.tests.dtypes.test_common.TestPandasDtype.test_pandas_dtype_valid(self,dtype)
pandas.tests.dtypes.test_common.TestPandasDtype.test_period_dtype(self,dtype)
pandas.tests.dtypes.test_common.get_is_dtype_funcs()
pandas.tests.dtypes.test_common.test__get_dtype(input_param,result)
pandas.tests.dtypes.test_common.test__get_dtype_fails(input_param,expected_error_message)
pandas.tests.dtypes.test_common.test__is_dtype_type(input_param,result)
pandas.tests.dtypes.test_common.test_astype_datetime64_bad_dtype_raises(from_type,to_type)
pandas.tests.dtypes.test_common.test_astype_dt64_bad_dtype_raises(from_type,to_type)
pandas.tests.dtypes.test_common.test_astype_nansafe(val,typ)
pandas.tests.dtypes.test_common.test_astype_object_preserves_datetime_na(from_type)
pandas.tests.dtypes.test_common.test_astype_object_preserves_dt_na(from_type)
pandas.tests.dtypes.test_common.test_dtype_equal(name1,dtype1,name2,dtype2)
pandas.tests.dtypes.test_common.test_dtype_equal_strict(dtype1,dtype2)
pandas.tests.dtypes.test_common.test_get_dtype_error_catch(func)
pandas.tests.dtypes.test_common.test_is_bool_dtype()
pandas.tests.dtypes.test_common.test_is_categorical()
pandas.tests.dtypes.test_common.test_is_categorical_dtype()
pandas.tests.dtypes.test_common.test_is_complex_dtype()
pandas.tests.dtypes.test_common.test_is_datetime64_any_dtype()
pandas.tests.dtypes.test_common.test_is_datetime64_dtype()
pandas.tests.dtypes.test_common.test_is_datetime64_ns_dtype()
pandas.tests.dtypes.test_common.test_is_datetime64tz_dtype()
pandas.tests.dtypes.test_common.test_is_datetime_arraylike()
pandas.tests.dtypes.test_common.test_is_datetime_or_timedelta_dtype()
pandas.tests.dtypes.test_common.test_is_datetimelike_v_numeric()
pandas.tests.dtypes.test_common.test_is_dt64_any_dtype()
pandas.tests.dtypes.test_common.test_is_dt64_dtype()
pandas.tests.dtypes.test_common.test_is_dt64_ns_dtype()
pandas.tests.dtypes.test_common.test_is_dt64tz_dtype()
pandas.tests.dtypes.test_common.test_is_dt_arraylike()
pandas.tests.dtypes.test_common.test_is_dt_or_timedelta_dtype()
pandas.tests.dtypes.test_common.test_is_dtlike_v_numeric()
pandas.tests.dtypes.test_common.test_is_extension_array_dtype(check_scipy)
pandas.tests.dtypes.test_common.test_is_extension_type(check_scipy)
pandas.tests.dtypes.test_common.test_is_extension_type_deprecation()
pandas.tests.dtypes.test_common.test_is_float_dtype()
pandas.tests.dtypes.test_common.test_is_int64_dtype(dtype)
pandas.tests.dtypes.test_common.test_is_integer_dtype(dtype)
pandas.tests.dtypes.test_common.test_is_interval_dtype()
pandas.tests.dtypes.test_common.test_is_not_int64_dtype(dtype)
pandas.tests.dtypes.test_common.test_is_not_integer_dtype(dtype)
pandas.tests.dtypes.test_common.test_is_not_signed_integer_dtype(dtype)
pandas.tests.dtypes.test_common.test_is_not_unsigned_integer_dtype(dtype)
pandas.tests.dtypes.test_common.test_is_numeric_dtype()
pandas.tests.dtypes.test_common.test_is_numeric_v_string_like()
pandas.tests.dtypes.test_common.test_is_object()
pandas.tests.dtypes.test_common.test_is_period_arraylike()
pandas.tests.dtypes.test_common.test_is_period_dtype()
pandas.tests.dtypes.test_common.test_is_scipy_sparse()
pandas.tests.dtypes.test_common.test_is_signed_integer_dtype(dtype)
pandas.tests.dtypes.test_common.test_is_sparse(check_scipy)
pandas.tests.dtypes.test_common.test_is_string_dtype()
pandas.tests.dtypes.test_common.test_is_string_like_dtype()
pandas.tests.dtypes.test_common.test_is_timedelta64_dtype()
pandas.tests.dtypes.test_common.test_is_timedelta64_ns_dtype()
pandas.tests.dtypes.test_common.test_is_unsigned_integer_dtype(dtype)
pandas.tests.dtypes.test_common.test_needs_i8_conversion()
pandas.tests.dtypes.test_common.to_ea_dtypes(dtypes)
pandas.tests.dtypes.test_common.to_numpy_dtypes(dtypes)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/dtypes/test_dtypes.py----------------------------------------
A:pandas.tests.dtypes.test_dtypes.self.dtype->self.create()
A:pandas.tests.dtypes.test_dtypes.msg->'|'.join(['data type not understood', "Cannot interpret '.*' as a data type"])
A:pandas.tests.dtypes.test_dtypes.result->is_bool_dtype(pd.Series(SparseArray([True, False])))
A:pandas.tests.dtypes.test_dtypes.dtype2->IntervalDtype('datetime64[ns, US/Eastern]')
A:pandas.tests.dtypes.test_dtypes.dtype1->IntervalDtype('float64')
A:pandas.tests.dtypes.test_dtypes.c->Categorical([0, 1], dtype=dtype1, fastpath=True)
A:pandas.tests.dtypes.test_dtypes.factor->Categorical(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c'])
A:pandas.tests.dtypes.test_dtypes.s->Series(ii, name='A')
A:pandas.tests.dtypes.test_dtypes.cat->Categorical(categories)
A:pandas.tests.dtypes.test_dtypes.dtype3->IntervalDtype('interval')
A:pandas.tests.dtypes.test_dtypes.dtype4->DatetimeTZDtype('ns', 'US/Central')
A:pandas.tests.dtypes.test_dtypes.a->CategoricalDtype(['a', 'b', 1, 2])
A:pandas.tests.dtypes.test_dtypes.b->CategoricalDtype(['a', 'b', '1', '2'])
A:pandas.tests.dtypes.test_dtypes.dr->date_range('2013-01-01', periods=3, tz='US/Eastern')
A:pandas.tests.dtypes.test_dtypes.dr1->date_range('2013-01-01', periods=3, tz='US/Eastern')
A:pandas.tests.dtypes.test_dtypes.s1->Series(dr1, name='A')
A:pandas.tests.dtypes.test_dtypes.dr2->date_range('2013-08-01', periods=3, tz='US/Eastern')
A:pandas.tests.dtypes.test_dtypes.s2->Series(dr2, name='A')
A:pandas.tests.dtypes.test_dtypes.expected->DatetimeTZDtype('ns', tz)
A:pandas.tests.dtypes.test_dtypes.tz->pytz.timezone('US/Eastern')
A:pandas.tests.dtypes.test_dtypes.dtype->CategoricalDtype(list('abc'), False)
A:pandas.tests.dtypes.test_dtypes.dt->PeriodDtype()
A:pandas.tests.dtypes.test_dtypes.pidx->pandas.period_range('2013-01-01 09:00', periods=5, freq='H')
A:pandas.tests.dtypes.test_dtypes.i->IntervalDtype(subtype)
A:pandas.tests.dtypes.test_dtypes.ii->pandas.IntervalIndex.from_breaks(range(3))
A:pandas.tests.dtypes.test_dtypes.c1->CategoricalDtype(CategoricalIndex(['a', 'b']))
A:pandas.tests.dtypes.test_dtypes.c2->pandas.core.dtypes.dtypes.CategoricalDtype._from_categorical_dtype(c1)
A:pandas.tests.dtypes.test_dtypes.c3->CategoricalDtype(None, ordered1)
A:pandas.tests.dtypes.test_dtypes.original_categories->list('abc')
A:pandas.tests.dtypes.test_dtypes.new_dtype->CategoricalDtype(new_categories, new_ordered)
A:pandas.tests.dtypes.test_dtypes.expected_categories->pandas.Index(new_categories or original_categories)
A:pandas.tests.dtypes.test_dtypes.data->pandas.DataFrame({'A': [1, 2]})
pandas.tests.dtypes.test_dtypes.Base
pandas.tests.dtypes.test_dtypes.Base.setup_method(self,method)
pandas.tests.dtypes.test_dtypes.Base.test_equality_invalid(self)
pandas.tests.dtypes.test_dtypes.Base.test_hash(self)
pandas.tests.dtypes.test_dtypes.Base.test_numpy_informed(self)
pandas.tests.dtypes.test_dtypes.Base.test_pickle(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtype(Base)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.create(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_basic(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_construction_from_string(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_constructor_invalid(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_equality(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_from_values_or_dtype(self,values,categories,ordered,dtype,expected)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_from_values_or_dtype_raises(self,values,categories,ordered,dtype)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_hash_vs_equality(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_is_boolean(self,categories,expected)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_is_dtype(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_pickle(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_tuple_categories(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_basic(self,categories,ordered_fixture)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_categorical_categories(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_categorical_equality(self,ordered1,ordered2)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_categorical_equality_strings(self,categories,ordered_fixture,other)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_categories(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_equal_but_different(self,ordered_fixture)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_from_categorical_dtype_both(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_from_categorical_dtype_categories(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_from_categorical_dtype_identity(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_from_categorical_dtype_ordered(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_invalid_raises(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_mixed(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_nan_invalid(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_non_unique_invalid(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_order_hashes_different(self,v1,v2)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_order_matters(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_same_categories_different_order(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_str_vs_repr(self,ordered_fixture)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_unordered_same(self,ordered)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_update_dtype(self,ordered_fixture,new_categories,new_ordered)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_update_dtype_errors(self,bad_dtype)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_update_dtype_string(self,ordered_fixture)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype(Base)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.create(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_alias_to_unit_bad_alias_raises(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_alias_to_unit_raises(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_basic(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_compat(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_construct_from_string_raises(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_construction(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_construction_from_string(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_dst(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_empty(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_equality(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_hash_vs_equality(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_is_dtype(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_parser(self,tz,constructor)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_subclass(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_tz_standardize(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype(Base)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.create(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_basic(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_basic_dtype(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_caching(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction(self,subtype)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction_errors(self,subtype)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction_from_string(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction_from_string_error_subtype(self,string)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction_from_string_errors(self,string)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction_generic(self,subtype)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction_not_supported(self,subtype)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_equality(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_equality_generic(self,subtype)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_hash_vs_equality(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_is_dtype(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_name_repr(self,subtype)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_name_repr_generic(self,subtype)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_not_string(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_subclass(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype(Base)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.create(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_basic(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_compat(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_construction(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_construction_from_string(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_empty(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_equality(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_hash_vs_equality(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_identity(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_is_dtype(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_not_string(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_subclass(self)
pandas.tests.dtypes.test_dtypes.test_is_bool_dtype(dtype,expected)
pandas.tests.dtypes.test_dtypes.test_is_bool_dtype_sparse()
pandas.tests.dtypes.test_dtypes.test_is_dtype_no_warning(check)
pandas.tests.dtypes.test_dtypes.test_registry(dtype)
pandas.tests.dtypes.test_dtypes.test_registry_find(dtype,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/dtypes/cast/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/dtypes/cast/test_construct_object_arr.py----------------------------------------
A:pandas.tests.dtypes.cast.test_construct_object_arr.result->construct_1d_object_array_from_listlike(data)
pandas.tests.dtypes.cast.test_construct_object_arr.test_cast_1d_array(datum1,datum2)
pandas.tests.dtypes.cast.test_construct_object_arr.test_cast_1d_array_invalid_scalar(val)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/dtypes/cast/test_infer_datetimelike.py----------------------------------------
A:pandas.tests.dtypes.cast.test_infer_datetimelike.result->Series(['M1701', Timestamp('20130101')])
pandas.tests.dtypes.cast.test_infer_datetimelike.test_maybe_infer_to_datetimelike_df_construct(data,exp_size)
pandas.tests.dtypes.cast.test_infer_datetimelike.test_maybe_infer_to_datetimelike_ser_construct()
pandas.tests.dtypes.cast.test_infer_dtlike.test_maybe_infer_to_dtlike_df_construct(data,exp_size)
pandas.tests.dtypes.cast.test_infer_dtlike.test_maybe_infer_to_dtlike_ser_construct()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/dtypes/cast/test_upcast.py----------------------------------------
A:pandas.tests.dtypes.cast.test_upcast.mask->numpy.array([False, True, False, True, True])
A:pandas.tests.dtypes.cast.test_upcast.other->numpy.array([61, 62, 63])
A:pandas.tests.dtypes.cast.test_upcast.(result, _)->maybe_upcast_putmask(result, mask, other)
A:pandas.tests.dtypes.cast.test_upcast.arr->numpy.arange('2019-01-01', '2019-01-06', dtype='datetime64[D]')
A:pandas.tests.dtypes.cast.test_upcast.(result, changed)->maybe_upcast_putmask(arr, mask, other=np.nan)
A:pandas.tests.dtypes.cast.test_upcast.expected->numpy.array(['2019-01-01', np.datetime64('NaT'), '2019-01-03', np.datetime64('NaT'), np.datetime64('NaT')], dtype='datetime64[D]')
pandas.tests.dtypes.cast.test_upcast.test_upcast()
pandas.tests.dtypes.cast.test_upcast.test_upcast_datetime()
pandas.tests.dtypes.cast.test_upcast.test_upcast_dt()
pandas.tests.dtypes.cast.test_upcast.test_upcast_error(result)
pandas.tests.dtypes.cast.test_upcast.test_upcast_scalar_other(arr,other)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/dtypes/cast/test_infer_dtype.py----------------------------------------
A:pandas.tests.dtypes.cast.test_infer_dtype.data->numpy.dtype(complex_dtype).type(1)
A:pandas.tests.dtypes.cast.test_infer_dtype.(dtype, val)->infer_dtype_from_scalar(dt, pandas_dtype=pandas_dtype)
A:pandas.tests.dtypes.cast.test_infer_dtype.p->Period('2011-01-01', freq=freq)
A:pandas.tests.dtypes.cast.test_infer_dtype.dt->Timestamp(1, tz=tz)
A:pandas.tests.dtypes.cast.test_infer_dtype.interval->Interval(left, right, closed)
A:pandas.tests.dtypes.cast.test_infer_dtype.(result_dtype, result_value)->infer_dtype_from_scalar(interval, pandas_dtype)
A:pandas.tests.dtypes.cast.test_infer_dtype.(dtype, _)->infer_dtype_from_array(arr, pandas_dtype=pandas_dtype)
A:pandas.tests.dtypes.cast.test_infer_dtype.exp->numpy.empty(shape, dtype=dtype)
A:pandas.tests.dtypes.cast.test_infer_dtype.arr->cast_scalar_to_array(shape, obj, dtype=dtype)
pandas.tests.dtypes.cast.test_infer_dtype.pandas_dtype(request)
pandas.tests.dtypes.cast.test_infer_dtype.test_cast_scalar_to_array(obj,dtype)
pandas.tests.dtypes.cast.test_infer_dtype.test_infer_dtype_from_array(arr,expected,pandas_dtype)
pandas.tests.dtypes.cast.test_infer_dtype.test_infer_dtype_from_boolean(bool_val)
pandas.tests.dtypes.cast.test_infer_dtype.test_infer_dtype_from_complex(complex_dtype)
pandas.tests.dtypes.cast.test_infer_dtype.test_infer_dtype_from_datetime(data)
pandas.tests.dtypes.cast.test_infer_dtype.test_infer_dtype_from_dt(data)
pandas.tests.dtypes.cast.test_infer_dtype.test_infer_dtype_from_float_scalar(float_dtype)
pandas.tests.dtypes.cast.test_infer_dtype.test_infer_dtype_from_int_scalar(any_int_dtype)
pandas.tests.dtypes.cast.test_infer_dtype.test_infer_dtype_from_period(freq,pandas_dtype)
pandas.tests.dtypes.cast.test_infer_dtype.test_infer_dtype_from_python_scalar(data,exp_dtype)
pandas.tests.dtypes.cast.test_infer_dtype.test_infer_dtype_from_scalar_errors()
pandas.tests.dtypes.cast.test_infer_dtype.test_infer_dtype_from_timedelta(data)
pandas.tests.dtypes.cast.test_infer_dtype.test_infer_dtype_misc(data)
pandas.tests.dtypes.cast.test_infer_dtype.test_infer_from_interval(left,right,subtype,closed,pandas_dtype)
pandas.tests.dtypes.cast.test_infer_dtype.test_infer_from_scalar_tz(tz,pandas_dtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/dtypes/cast/test_construct_ndarray.py----------------------------------------
A:pandas.tests.dtypes.cast.test_construct_ndarray.result->construct_1d_ndarray_preserving_na(values, dtype=dtype)
pandas.tests.dtypes.cast.test_construct_ndarray.test_construct_1d_ndarray_preserving_na(values,dtype,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/dtypes/cast/test_find_common_type.py----------------------------------------
A:pandas.tests.dtypes.cast.test_find_common_type.dtype->PeriodDtype(freq='D')
pandas.tests.dtypes.cast.test_find_common_type.test_categorical_dtype(dtypes,exp_type)
pandas.tests.dtypes.cast.test_find_common_type.test_datetimetz_dtype_match()
pandas.tests.dtypes.cast.test_find_common_type.test_datetimetz_dtype_mismatch(dtype2)
pandas.tests.dtypes.cast.test_find_common_type.test_dttz_dtype_match()
pandas.tests.dtypes.cast.test_find_common_type.test_dttz_dtype_mismatch(dtype2)
pandas.tests.dtypes.cast.test_find_common_type.test_numpy_dtypes(source_dtypes,expected_common_dtype)
pandas.tests.dtypes.cast.test_find_common_type.test_period_dtype_match()
pandas.tests.dtypes.cast.test_find_common_type.test_period_dtype_mismatch(dtype2)
pandas.tests.dtypes.cast.test_find_common_type.test_raises_empty_input()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/dtypes/cast/test_construct_from_scalar.py----------------------------------------
A:pandas.tests.dtypes.cast.test_construct_from_scalar.cat_type->CategoricalDtype(categories=cats, ordered=False)
A:pandas.tests.dtypes.cast.test_construct_from_scalar.expected->Categorical(['a', 'a'], categories=cats)
A:pandas.tests.dtypes.cast.test_construct_from_scalar.result->construct_1d_arraylike_from_scalar('a', len(expected), cat_type)
pandas.tests.dtypes.cast.test_construct_from_scalar.test_cast_1d_array_like_from_scalar_categorical()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/dtypes/cast/test_convert_objects.py----------------------------------------
A:pandas.tests.dtypes.cast.test_convert_objects.arr->numpy.array(data)
A:pandas.tests.dtypes.cast.test_convert_objects.out->maybe_convert_objects(arr)
pandas.tests.dtypes.cast.test_convert_objects.test_maybe_convert_objects_copy(data)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/dtypes/cast/test_downcast.py----------------------------------------
A:pandas.tests.dtypes.cast.test_downcast.result->maybe_downcast_to_dtype(arr, 'int64')
A:pandas.tests.dtypes.cast.test_downcast.ser->Series([True, True, False])
A:pandas.tests.dtypes.cast.test_downcast.expected->numpy.array(data, dtype=dtype)
A:pandas.tests.dtypes.cast.test_downcast.arr->numpy.array([1, 2, np.nan])
A:pandas.tests.dtypes.cast.test_downcast.exp->DatetimeIndex([ts, ts])
A:pandas.tests.dtypes.cast.test_downcast.res->maybe_downcast_to_dtype(obj, exp.dtype)
A:pandas.tests.dtypes.cast.test_downcast.ts->Timestamp('2016-01-01 12:00:00', tz='US/Pacific')
pandas.tests.dtypes.cast.test_downcast.test_datetime_likes_nan(klass)
pandas.tests.dtypes.cast.test_downcast.test_datetime_with_timezone(as_asi)
pandas.tests.dtypes.cast.test_downcast.test_downcast(arr,expected,dtype)
pandas.tests.dtypes.cast.test_downcast.test_downcast_booleans()
pandas.tests.dtypes.cast.test_downcast.test_downcast_conversion_empty(any_real_dtype)
pandas.tests.dtypes.cast.test_downcast.test_downcast_conversion_nan(float_dtype)
pandas.tests.dtypes.cast.test_downcast.test_downcast_conversion_no_nan(any_real_dtype)
pandas.tests.dtypes.cast.test_downcast.test_dt_likes_nan(klass)
pandas.tests.dtypes.cast.test_downcast.test_dt_with_timezone(as_asi)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/dtypes/cast/test_promote.py----------------------------------------
A:pandas.tests.dtypes.cast.test_promote.(result_dtype, result_fill_value)->maybe_promote(dtype, fill_value)
A:pandas.tests.dtypes.cast.test_promote.res_type->type(result_fill_value)
A:pandas.tests.dtypes.cast.test_promote.ex_type->type(expected_fill_value)
A:pandas.tests.dtypes.cast.test_promote.dtype->numpy.dtype(any_numpy_dtype_reduced)
A:pandas.tests.dtypes.cast.test_promote.expected_dtype->numpy.dtype(object)
A:pandas.tests.dtypes.cast.test_promote.fill_dtype->numpy.dtype(any_numpy_dtype_reduced)
A:pandas.tests.dtypes.cast.test_promote.exp_val_for_scalar->numpy.dtype(any_numpy_dtype_reduced).type('NaT', 'ns')
A:pandas.tests.dtypes.cast.test_promote.fill_value->pandas.DateOffset(1)
A:pandas.tests.dtypes.cast.test_promote.fill_array->numpy.expand_dims(fill_array, 0)
A:pandas.tests.dtypes.cast.test_promote.(expected_dtype, expected_missing_value)->maybe_promote(dtype, np.array([1], dtype=dtype))
A:pandas.tests.dtypes.cast.test_promote.(result_dtype, result_missing_value)->maybe_promote(dtype, fill_array)
pandas.tests.dtypes.cast.test_promote._assert_match(result_fill_value,expected_fill_value)
pandas.tests.dtypes.cast.test_promote._check_promote(dtype,fill_value,expected_dtype,exp_val_for_scalar=None)
pandas.tests.dtypes.cast.test_promote.any_numpy_dtype_reduced(request)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_any_numpy_dtype_with_datetimetz(any_numpy_dtype_reduced,tz_aware_fixture,fill_value)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_any_numpy_dtype_with_dttz(any_numpy_dtype_reduced,tz_aware_fixture,fill_value)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_any_numpy_dtype_with_na(any_numpy_dtype_reduced,fill_value)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_any_with_bool(any_numpy_dtype_reduced)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_any_with_bytes(any_numpy_dtype_reduced,bytes_dtype)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_any_with_datetime64(any_numpy_dtype_reduced,datetime64_dtype,fill_value)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_any_with_dt64(any_numpy_dtype_reduced,datetime64_dtype,fill_value)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_any_with_object(any_numpy_dtype_reduced,object_dtype)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_any_with_string(any_numpy_dtype_reduced,string_dtype)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_any_with_timedelta64(any_numpy_dtype_reduced,timedelta64_dtype,fill_value)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_bool_with_any(any_numpy_dtype_reduced)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_bytes_with_any(bytes_dtype,any_numpy_dtype_reduced)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_datetime64_with_any(datetime64_dtype,any_numpy_dtype_reduced)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_datetimetz_with_any_numpy_dtype(tz_aware_fixture,any_numpy_dtype_reduced)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_datetimetz_with_datetimetz(tz_aware_fixture,tz_aware_fixture2)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_datetimetz_with_na(tz_aware_fixture,fill_value)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_dimensions(any_numpy_dtype_reduced,dim)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_dt64_with_any(datetime64_dtype,any_numpy_dtype_reduced)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_dttz_with_any_numpy_dtype(tz_aware_fixture,any_numpy_dtype_reduced)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_dttz_with_dttz(tz_aware_fixture,tz_aware_fixture2)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_dttz_with_na(tz_aware_fixture,fill_value)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_float_with_float(dtype,fill_value,expected_dtype)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_float_with_int(float_dtype,any_int_dtype)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_int_with_float(any_int_dtype,float_dtype)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_int_with_int(dtype,fill_value,expected_dtype)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_object_with_any(object_dtype,any_numpy_dtype_reduced)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_string_with_any(string_dtype,any_numpy_dtype_reduced)
pandas.tests.dtypes.cast.test_promote.test_maybe_promote_timedelta64_with_any(timedelta64_dtype,any_numpy_dtype_reduced)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tools/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/tools/test_numeric.py----------------------------------------
A:pandas.tests.tools.test_numeric.ser->Series(['12345678901234567890', '1234567890', 'ITEM'])
A:pandas.tests.tools.test_numeric.result->to_numeric(ser, errors=errors)
A:pandas.tests.tools.test_numeric.expected->Series(exp_data, dtype=float)
A:pandas.tests.tools.test_numeric.res->to_numeric(data, downcast=downcast)
A:pandas.tests.tools.test_numeric.df->DataFrame({'a': [1, -3.14, 7], 'b': ['4', '5', '6']})
A:pandas.tests.tools.test_numeric.df_copy->DataFrame({'a': [1, -3.14, 7], 'b': ['4', '5', '6']}).copy()
A:pandas.tests.tools.test_numeric.df_copy[columns]->df_copy[columns].apply(to_numeric).apply(to_numeric)
A:pandas.tests.tools.test_numeric.df['a']->df['a'].apply(to_numeric).apply(to_numeric)
A:pandas.tests.tools.test_numeric.error_ctx->pytest.raises(TypeError, match='1-d array')
A:pandas.tests.tools.test_numeric.val->transform(val)
A:pandas.tests.tools.test_numeric.val_is_string->isinstance(val, str)
A:pandas.tests.tools.test_numeric.index->int(multiple_elts)
A:pandas.tests.tools.test_numeric.msg->'Integer out of range. at position {index}'.format(index=index)
A:pandas.tests.tools.test_numeric.data->transform(data)
A:pandas.tests.tools.test_numeric.idx->pandas.period_range('2011-01', periods=3, freq='M', name='')
A:pandas.tests.tools.test_numeric.inp->transform(idx)
A:pandas.tests.tools.test_numeric.smallest_int_dtype->numpy.dtype(np.typecodes['Integer'][0])
A:pandas.tests.tools.test_numeric.series->to_numeric(Series(min_max), downcast=downcast)
pandas.tests.tools.test_numeric.errors(request)
pandas.tests.tools.test_numeric.large_val(request)
pandas.tests.tools.test_numeric.multiple_elts(request)
pandas.tests.tools.test_numeric.signed(request)
pandas.tests.tools.test_numeric.test_all_nan()
pandas.tests.tools.test_numeric.test_bool_handling(errors,exp)
pandas.tests.tools.test_numeric.test_coerce_uint64_conflict(data,exp_data)
pandas.tests.tools.test_numeric.test_datetime_like(tz_naive_fixture,transform_assert_equal)
pandas.tests.tools.test_numeric.test_downcast_basic(data,kwargs,exp_dtype)
pandas.tests.tools.test_numeric.test_downcast_invalid_cast()
pandas.tests.tools.test_numeric.test_downcast_limits(dtype,downcast,min_max)
pandas.tests.tools.test_numeric.test_downcast_not8bit(downcast,expected_dtype)
pandas.tests.tools.test_numeric.test_downcast_uint64(ser,expected)
pandas.tests.tools.test_numeric.test_dt_like(tz_naive_fixture,transform_assert_equal)
pandas.tests.tools.test_numeric.test_empty(input_kwargs,result_kwargs)
pandas.tests.tools.test_numeric.test_error(data,msg)
pandas.tests.tools.test_numeric.test_errors_invalid_value()
pandas.tests.tools.test_numeric.test_ignore_downcast_cannot_convert_float(data,expected,downcast)
pandas.tests.tools.test_numeric.test_ignore_downcast_invalid_data()
pandas.tests.tools.test_numeric.test_ignore_downcast_neg_to_unsigned()
pandas.tests.tools.test_numeric.test_ignore_error(errors,exp_data)
pandas.tests.tools.test_numeric.test_list()
pandas.tests.tools.test_numeric.test_list_numeric(data,arr_kwargs)
pandas.tests.tools.test_numeric.test_non_coerce_uint64_conflict(errors,exp)
pandas.tests.tools.test_numeric.test_non_hashable(errors,expected)
pandas.tests.tools.test_numeric.test_numeric(kwargs)
pandas.tests.tools.test_numeric.test_numeric_df_columns(columns)
pandas.tests.tools.test_numeric.test_numeric_dtypes(data,transform_assert_equal)
pandas.tests.tools.test_numeric.test_numeric_embedded_arr_likes(data,exp_data)
pandas.tests.tools.test_numeric.test_period(transform_assert_equal)
pandas.tests.tools.test_numeric.test_really_large_in_arr(large_val,signed,transform,multiple_elts,errors)
pandas.tests.tools.test_numeric.test_really_large_in_arr_consistent(large_val,signed,multiple_elts,errors)
pandas.tests.tools.test_numeric.test_really_large_scalar(large_val,signed,transform,errors)
pandas.tests.tools.test_numeric.test_scalar(val,signed,transform)
pandas.tests.tools.test_numeric.test_scalar_fail(errors,checker)
pandas.tests.tools.test_numeric.test_series(last_val)
pandas.tests.tools.test_numeric.test_series_numeric(data)
pandas.tests.tools.test_numeric.test_signed_downcast(data,signed_downcast)
pandas.tests.tools.test_numeric.test_str(data,exp,transform_assert_equal)
pandas.tests.tools.test_numeric.test_timedelta(transform_assert_equal)
pandas.tests.tools.test_numeric.test_type_check(errors)
pandas.tests.tools.test_numeric.transform(request)
pandas.tests.tools.test_numeric.transform_assert_equal(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/groupby/test_counting.py----------------------------------------
A:pandas.tests.groupby.test_counting.df->DataFrame({'A': [np.nan, np.nan], 'B': ['a', 'b'], 'C': [1, 2]})
A:pandas.tests.groupby.test_counting.g->DataFrame({'A': [np.nan, np.nan], 'B': ['a', 'b'], 'C': [1, 2]}).groupby(['a'], sort=sort_flag)
A:pandas.tests.groupby.test_counting.expected->Series([], index=mi, dtype=np.int64, name='C')
A:pandas.tests.groupby.test_counting.ge->DataFrame().groupby(level=0)
A:pandas.tests.groupby.test_counting.se->Series(dtype=object).groupby(level=0)
A:pandas.tests.groupby.test_counting.e->Series(dtype='int64')
A:pandas.tests.groupby.test_counting.mi->MultiIndex(levels=[[], ['a', 'b']], codes=[[], []], names=['A', 'B'])
A:pandas.tests.groupby.test_counting.s->Series(list('aaaba'))
A:pandas.tests.groupby.test_counting.ascending->Series([0, 0, 1, 0, 1])
A:pandas.tests.groupby.test_counting.descending->Series([1, 1, 0, 1, 0])
A:pandas.tests.groupby.test_counting.g_ngroup->DataFrame({'A': [np.nan, np.nan], 'B': ['a', 'b'], 'C': [1, 2]}).groupby(['a'], sort=sort_flag).ngroup()
A:pandas.tests.groupby.test_counting.g_cumcount->DataFrame({'A': [np.nan, np.nan], 'B': ['a', 'b'], 'C': [1, 2]}).groupby(['a'], sort=sort_flag).cumcount()
A:pandas.tests.groupby.test_counting.expected_ngroup->Series([0, 1, 2, 0, 3])
A:pandas.tests.groupby.test_counting.expected_cumcount->Series([0, 0, 0, 1, 0])
A:pandas.tests.groupby.test_counting.order->sorted(set(p))
A:pandas.tests.groupby.test_counting.res->DataFrame({'A': [np.nan, np.nan], 'B': ['a', 'b'], 'C': [1, 2]}).groupby('x').count()
A:pandas.tests.groupby.test_counting.result->DataFrame({'A': [np.nan, np.nan], 'B': ['a', 'b'], 'C': [1, 2]}).groupby(['A', 'B']).C.count()
pandas.tests.groupby.test_counting.TestCounting
pandas.tests.groupby.test_counting.TestCounting.test_count_with_datetimelike(self,datetimelike)
pandas.tests.groupby.test_counting.TestCounting.test_count_with_dtlike(self,datetimelike)
pandas.tests.groupby.test_counting.TestCounting.test_count_with_only_nans_in_first_group(self)
pandas.tests.groupby.test_counting.TestCounting.test_cumcount(self)
pandas.tests.groupby.test_counting.TestCounting.test_cumcount_dupe_index(self)
pandas.tests.groupby.test_counting.TestCounting.test_cumcount_empty(self)
pandas.tests.groupby.test_counting.TestCounting.test_cumcount_groupby_not_col(self)
pandas.tests.groupby.test_counting.TestCounting.test_cumcount_mi(self)
pandas.tests.groupby.test_counting.TestCounting.test_ngroup(self)
pandas.tests.groupby.test_counting.TestCounting.test_ngroup_cumcount_pair(self)
pandas.tests.groupby.test_counting.TestCounting.test_ngroup_descending(self)
pandas.tests.groupby.test_counting.TestCounting.test_ngroup_distinct(self)
pandas.tests.groupby.test_counting.TestCounting.test_ngroup_dupe_index(self)
pandas.tests.groupby.test_counting.TestCounting.test_ngroup_empty(self)
pandas.tests.groupby.test_counting.TestCounting.test_ngroup_groupby_not_col(self)
pandas.tests.groupby.test_counting.TestCounting.test_ngroup_matches_cumcount(self)
pandas.tests.groupby.test_counting.TestCounting.test_ngroup_mi(self)
pandas.tests.groupby.test_counting.TestCounting.test_ngroup_one_group(self)
pandas.tests.groupby.test_counting.TestCounting.test_ngroup_respects_groupby_order(self)
pandas.tests.groupby.test_counting.TestCounting.test_ngroup_series_matches_frame(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/groupby/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/groupby/test_timegrouper.py----------------------------------------
A:pandas.tests.groupby.test_timegrouper.df_original->df_original.set_index('Date').set_index('Date')
A:pandas.tests.groupby.test_timegrouper.df_reordered->df_original.set_index('Date').set_index('Date').sort_values(by='Quantity')
A:pandas.tests.groupby.test_timegrouper.df->DataFrame({'a': [1, 2, 3] * 2, 'dates': pd.date_range('now', periods=6, freq='T')})
A:pandas.tests.groupby.test_timegrouper.expected->data_frame.groupby([grouper]).count()
A:pandas.tests.groupby.test_timegrouper.expected.iloc[[0, 6, 18], 0]->numpy.array([24, 6, 9], dtype='int64')
A:pandas.tests.groupby.test_timegrouper.result1->DataFrame({'a': [1, 2, 3] * 2, 'dates': pd.date_range('now', periods=6, freq='T')}).sort_index().groupby([pd.Grouper(freq=freq), 'user_id'])['whole_cost'].sum()
A:pandas.tests.groupby.test_timegrouper.df_sorted->df_original.set_index('Date').set_index('Date').sort_values(by='Quantity', ascending=False)
A:pandas.tests.groupby.test_timegrouper.result2->DataFrame({'a': [1, 2, 3] * 2, 'dates': pd.date_range('now', periods=6, freq='T')}).groupby([pd.Grouper(freq=freq), 'user_id'])['whole_cost'].sum()
A:pandas.tests.groupby.test_timegrouper.result3->DataFrame({'a': [1, 2, 3] * 2, 'dates': pd.date_range('now', periods=6, freq='T')}).groupby(pd.Grouper(freq='5D')).sum()
A:pandas.tests.groupby.test_timegrouper.g->DataFrame({'a': [1, 2, 3] * 2, 'dates': pd.date_range('now', periods=6, freq='T')}).groupby(pd.Grouper(freq='6M'))
A:pandas.tests.groupby.test_timegrouper.result->data_frame.groupby([grouper]).count()
A:pandas.tests.groupby.test_timegrouper.grouped->pandas.DataFrame(data_frame).set_index('time').groupby([grouper])
A:pandas.tests.groupby.test_timegrouper.dt->pandas.Timestamp(t)
A:pandas.tests.groupby.test_timegrouper.df_dt->DataFrame({'a': [1, 2, 3] * 2, 'dates': pd.date_range('now', periods=6, freq='T')}).copy()
A:pandas.tests.groupby.test_timegrouper.df_dt['date']->pandas.to_datetime(df_dt['date'])
A:pandas.tests.groupby.test_timegrouper.ind->pandas.date_range(start='2012/1/1', freq='5min', periods=periods)
A:pandas.tests.groupby.test_timegrouper.index->pandas.date_range('2015/01/01', periods=5, name='date')
A:pandas.tests.groupby.test_timegrouper.expected_index->pandas.DatetimeIndex([date], name='date')
A:pandas.tests.groupby.test_timegrouper.df['datetime']->df['datetime'].apply(lambda d: Timestamp(d, tz='US/Pacific')).apply(lambda d: Timestamp(d, tz='US/Pacific'))
A:pandas.tests.groupby.test_timegrouper.exp_idx1->pandas.PeriodIndex(['2011-07-19 07:00:00', '2011-07-19 07:00:00', '2011-07-19 08:00:00', '2011-07-19 08:00:00', '2011-07-19 09:00:00', '2011-07-19 09:00:00'], freq='H', name='period')
A:pandas.tests.groupby.test_timegrouper.exp_idx2->Index(['a', 'b'] * 3, name='label')
A:pandas.tests.groupby.test_timegrouper.exp_idx->pandas.PeriodIndex(['2011-07-19 07:00:00', '2011-07-19 08:00:00', '2011-07-19 09:00:00'], freq='H')
A:pandas.tests.groupby.test_timegrouper.didx->pandas.PeriodIndex(dates, freq='H')
A:pandas.tests.groupby.test_timegrouper.res_values->DataFrame({'a': [1, 2, 3] * 2, 'dates': pd.date_range('now', periods=6, freq='T')}).groupby('tz').date.get_group(tz)
A:pandas.tests.groupby.test_timegrouper.exp_values->Series(['2000-01-28 16:47:00', '2000-01-29 16:48:00', '2000-01-31 16:50:00'], index=[0, 1, 3], name='date')
A:pandas.tests.groupby.test_timegrouper.df[1]->df[1].view('M8[ns]').view('M8[ns]')
A:pandas.tests.groupby.test_timegrouper.df2->DataFrame({'a': [1, 2, 3] * 2, 'dates': pd.date_range('now', periods=6, freq='T')}).groupby('factor')['time'].max()
A:pandas.tests.groupby.test_timegrouper.df['b']->datetime.datetime.now(pytz.utc)
A:pandas.tests.groupby.test_timegrouper.df_test->DataFrame({'dt': [np.nan, '2015-07-24 10:10', '2015-07-25 11:11', '2015-07-23 12:12', np.nan], 'td': [np.nan, td(days=1), td(days=2), td(days=3), np.nan]})
A:pandas.tests.groupby.test_timegrouper.df_test.dt->pandas.to_datetime(df_test.dt)
A:pandas.tests.groupby.test_timegrouper.grouped_test->DataFrame({'dt': [np.nan, '2015-07-24 10:10', '2015-07-25 11:11', '2015-07-23 12:12', np.nan], 'td': [np.nan, td(days=1), td(days=2), td(days=3), np.nan]}).groupby('group')
A:pandas.tests.groupby.test_timegrouper.grouped_ref->df_ref.groupby('group')
A:pandas.tests.groupby.test_timegrouper.test->pandas.DataFrame({'time': [Timestamp('2016-06-28 09:35:35'), pd.NaT, Timestamp('2016-06-28 16:46:28')], 'data': ['1', '2', '3']})
A:pandas.tests.groupby.test_timegrouper.grouper->pandas.Grouper(freq='D')
A:pandas.tests.groupby.test_timegrouper.data_frame->pandas.DataFrame(data_frame).set_index('time')
pandas.tests.groupby.test_timegrouper.TestGroupBy
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_datetime_count(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_dt_count(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_first_last_max_min_on_time_data(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_frame_datetime64_handling_groupby(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_frame_dt64_handling_groupby(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_datetime64_32_bit(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_dt64_32_bit(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_first_datetime64(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_first_dt64(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_groups_datetimeindex(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_groups_datetimeindex_tz(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_groups_dtindex(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_groups_dtindex_tz(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_groups_periods(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_max_datetime64(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_max_dt64(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_multi_timezone(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_with_timegrouper(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_with_timegrouper_methods(self,should_sort)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_with_timezone_selection(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_nunique_with_timegrouper_and_nat(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_scalar_call_versus_list_call(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_timegrouper_apply_return_type_series(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_timegrouper_apply_return_type_value(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_timegrouper_get_group(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_timegrouper_with_reg_groups(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_timegrouper_with_reg_groups_freq(self,freq)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_timezone_info(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/groupby/test_value_counts.py----------------------------------------
A:pandas.tests.groupby.test_value_counts.days->date_range('2015-08-24', periods=10)
A:pandas.tests.groupby.test_value_counts.frame->DataFrame({'1st': np.random.choice(list('abcd'), n), '2nd': np.random.choice(days, n), '3rd': np.random.randint(1, m + 1, n)})
A:pandas.tests.groupby.test_value_counts.df->DataFrame({'Timestamp': [1565083561, 1565083561 + 86400, 1565083561 + 86500, 1565083561 + 86400 * 2, 1565083561 + 86400 * 3, 1565083561 + 86500 * 3, 1565083561 + 86400 * 4], 'Food': ['apple', 'apple', 'banana', 'banana', 'orange', 'orange', 'pear']}).drop([3])
A:pandas.tests.groupby.test_value_counts.arr->list(map(df.index.get_level_values, range(df.index.nlevels)))
A:pandas.tests.groupby.test_value_counts.df.index->pandas.MultiIndex.from_arrays(arr, names=df.index.names)
A:pandas.tests.groupby.test_value_counts.kwargs->dict(normalize=normalize, sort=sort, ascending=ascending, dropna=dropna, bins=bins)
A:pandas.tests.groupby.test_value_counts.gr->DataFrame({'Timestamp': [1565083561, 1565083561 + 86400, 1565083561 + 86500, 1565083561 + 86400 * 2, 1565083561 + 86400 * 3, 1565083561 + 86500 * 3, 1565083561 + 86400 * 4], 'Food': ['apple', 'apple', 'banana', 'banana', 'orange', 'orange', 'pear']}).drop([3]).groupby(keys, sort=isort)
A:pandas.tests.groupby.test_value_counts.left->gr['3rd'].value_counts(**kwargs)
A:pandas.tests.groupby.test_value_counts.right->gr['3rd'].apply(Series.value_counts, **kwargs)
A:pandas.tests.groupby.test_value_counts.(left, right)->map(rebuild_index, (left, right))
A:pandas.tests.groupby.test_value_counts.df['Datetime']->to_datetime(df['Timestamp'].apply(lambda t: str(t)), unit='s')
A:pandas.tests.groupby.test_value_counts.dfg->DataFrame({'Timestamp': [1565083561, 1565083561 + 86400, 1565083561 + 86500, 1565083561 + 86400 * 2, 1565083561 + 86400 * 3, 1565083561 + 86500 * 3, 1565083561 + 86400 * 4], 'Food': ['apple', 'apple', 'banana', 'banana', 'orange', 'orange', 'pear']}).drop([3]).groupby(Grouper(freq='1D', key='Datetime'))
A:pandas.tests.groupby.test_value_counts.result->dfg['Food'].value_counts().sort_index()
A:pandas.tests.groupby.test_value_counts.expected->dfg['Food'].apply(Series.value_counts).sort_index()
pandas.tests.groupby.test_value_counts.seed_df(seed_nans,n,m)
pandas.tests.groupby.test_value_counts.test_series_groupby_value_counts(df,keys,bins,n,m,isort,normalize,sort,ascending,dropna)
pandas.tests.groupby.test_value_counts.test_series_groupby_value_counts_with_grouper()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/groupby/test_apply.py----------------------------------------
A:pandas.tests.groupby.test_apply.df->pandas.DataFrame(['A', 'A', 'B', 'B'], columns=['groups'])
A:pandas.tests.groupby.test_apply.expected->pandas.Series(expected_values, index=pd.Index(['A', 'B'], name='groups'))
A:pandas.tests.groupby.test_apply.result->pandas.DataFrame(['A', 'A', 'B', 'B'], columns=['groups']).groupby('groups').apply(function)
A:pandas.tests.groupby.test_apply.exp_idx->pandas.Index(['2011.05.16', '2011.05.17', '2011.05.18'], dtype=object, name='date')
A:pandas.tests.groupby.test_apply.labels->numpy.random.randint(0, 100, size=N)
A:pandas.tests.groupby.test_apply.labels2->numpy.random.randint(0, 3, size=N)
A:pandas.tests.groupby.test_apply.g->pandas.DataFrame(['A', 'A', 'B', 'B'], columns=['groups']).groupby('A')
A:pandas.tests.groupby.test_apply.splitter->grouper._get_splitter(g._selected_obj, axis=g.axis)
A:pandas.tests.groupby.test_apply.group_keys->grouper._get_group_keys()
A:pandas.tests.groupby.test_apply.(values, mutated)->grouper._get_splitter(g._selected_obj, axis=g.axis).fast_apply(f, group_keys)
A:pandas.tests.groupby.test_apply.g_as->pandas.DataFrame(['A', 'A', 'B', 'B'], columns=['groups']).groupby('user_id', as_index=True)
A:pandas.tests.groupby.test_apply.g_not_as->pandas.DataFrame(['A', 'A', 'B', 'B'], columns=['groups']).groupby('user_id', as_index=False)
A:pandas.tests.groupby.test_apply.exp->pandas.DataFrame(['A', 'A', 'B', 'B'], columns=['groups']).groupby('A')['C'].apply(trans2)
A:pandas.tests.groupby.test_apply.exp_not_as_apply->pandas.MultiIndex.from_tuples([(0, 0), (0, 2), (1, 1), (2, 4)])
A:pandas.tests.groupby.test_apply.exp_as_apply->pandas.MultiIndex.from_tuples(tp, names=['user_id', None])
A:pandas.tests.groupby.test_apply.ind->Index(list('abcde'))
A:pandas.tests.groupby.test_apply.grouped->pandas.DataFrame(['A', 'A', 'B', 'B'], columns=['groups']).groupby('key')
A:pandas.tests.groupby.test_apply.result2->DataFrame({'groups': [1, 2, 2, 2], 'vars': [0, 1, 2, 3]}).groupby('groups').apply(test_func)
A:pandas.tests.groupby.test_apply.result3->pandas.DataFrame(['A', 'A', 'B', 'B'], columns=['groups']).groupby('key').apply(desc3)
A:pandas.tests.groupby.test_apply.logged->numpy.log(piece)
A:pandas.tests.groupby.test_apply.dr->bdate_range('1/1/2000', periods=100)
A:pandas.tests.groupby.test_apply.ts->Series(np.random.randn(100), index=dr)
A:pandas.tests.groupby.test_apply.expected['v2']->numpy.tile([0.0, 0.5, 1], 2)
A:pandas.tests.groupby.test_apply.index->pandas.MultiIndex.from_arrays([[0, 0, 0, 1, 1, 1], [1, 2, 3, 1, 2, 3]])
A:pandas.tests.groupby.test_apply.data->DataFrame({'id_field': [100, 100, 200, 300], 'category': ['a', 'b', 'c', 'c'], 'value': [1, 2, 3, 4]})
A:pandas.tests.groupby.test_apply.df.Date->pandas.to_datetime(df.Date)
A:pandas.tests.groupby.test_apply.out->numpy.array(value * weight).repeat(3)
A:pandas.tests.groupby.test_apply.out['p1']->str(tool[tool.State == 'step1'].Machine.values[0])
A:pandas.tests.groupby.test_apply.out['p2']->str(tool[tool.State == 'step2'].Machine.values[0])
A:pandas.tests.groupby.test_apply.out['useTime']->str(tool[tool.State == 'step2'].oTime.values[0])
A:pandas.tests.groupby.test_apply.df1->pandas.DataFrame({'Key': ['B', 'B', 'A', 'A'], 'State': ['step1', 'step2', 'step1', 'step2'], 'oTime': ['', '2016-09-19 05:24:33', '', '2016-09-19 23:59:04'], 'Machine': ['23', '36L', '36R', '36R']})
A:pandas.tests.groupby.test_apply.df2->pandas.DataFrame({'Key': ['B', 'B', 'A', 'A'], 'State': ['step1', 'step2', 'step1', 'step2'], 'oTime': ['', '2016-09-19 05:24:33', '', '2016-09-19 23:59:04'], 'Machine': ['23', '36L', '36R', '36R']}).copy()
A:pandas.tests.groupby.test_apply.df2.oTime->pandas.to_datetime(df2.oTime)
A:pandas.tests.groupby.test_apply.dfg_no_conversion->pandas.DataFrame(['A', 'A', 'B', 'B'], columns=['groups']).groupby(by=['a']).apply(func_with_no_date)
A:pandas.tests.groupby.test_apply.dfg_no_conversion_expected->pandas.DataFrame({'c': 2}, index=[1])
A:pandas.tests.groupby.test_apply.dfg_conversion->pandas.DataFrame(['A', 'A', 'B', 'B'], columns=['groups']).groupby(by=['a']).apply(func_with_date)
A:pandas.tests.groupby.test_apply.dfg_conversion_expected->pandas.DataFrame({'b': datetime(2015, 1, 1), 'c': 2}, index=[1])
A:pandas.tests.groupby.test_apply.df_grouped->pandas.DataFrame(['A', 'A', 'B', 'B'], columns=['groups']).groupby(level=['group1', 'group2'], sort=True)
A:pandas.tests.groupby.test_apply.test_df->DataFrame({'groups': [0, 0, 1, 1], 'random_vars': [8, 7, 4, 5]})
A:pandas.tests.groupby.test_apply.test_df1->DataFrame({'groups': [1, 1, 1, 2], 'vars': [0, 1, 2, 3]})
A:pandas.tests.groupby.test_apply.test_df2->DataFrame({'groups': [1, 2, 2, 2], 'vars': [0, 1, 2, 3]})
A:pandas.tests.groupby.test_apply.result1->DataFrame({'groups': [1, 1, 1, 2], 'vars': [0, 1, 2, 3]}).groupby('groups').apply(test_func)
A:pandas.tests.groupby.test_apply.index1->pandas.MultiIndex.from_arrays([[1, 1], [0, 2]], names=['groups', None])
A:pandas.tests.groupby.test_apply.index2->pandas.MultiIndex.from_arrays([[2, 2], [1, 3]], names=['groups', None])
A:pandas.tests.groupby.test_apply.expected1->DataFrame({'groups': [1, 1], 'vars': [0, 2]}, index=index1)
A:pandas.tests.groupby.test_apply.expected2->DataFrame({'groups': [2, 2], 'vars': [1, 3]}, index=index2)
A:pandas.tests.groupby.test_apply.groups->pandas.DataFrame(['A', 'A', 'B', 'B'], columns=['groups']).groupby('group')
A:pandas.tests.groupby.test_apply.tdf->DataFrame({'day': {0: pd.Timestamp('2015-02-24 00:00:00'), 1: pd.Timestamp('2015-02-24 00:00:00'), 2: pd.Timestamp('2015-02-24 00:00:00'), 3: pd.Timestamp('2015-02-24 00:00:00'), 4: pd.Timestamp('2015-02-24 00:00:00')}, 'userAgent': {0: 'some UA string', 1: 'some UA string', 2: 'some UA string', 3: 'another UA string', 4: 'some UA string'}, 'userId': {0: '17661101', 1: '17661101', 2: '17661101', 3: '17661101', 4: '17661101'}})
A:pandas.tests.groupby.test_apply.b->pandas.Categorical(b, categories=[1, 2, 3])
pandas.tests.groupby.test_apply.test_apply_aggregating_timedelta_and_datetime()
pandas.tests.groupby.test_apply.test_apply_aggregating_timedelta_and_dt()
pandas.tests.groupby.test_apply.test_apply_chunk_view()
pandas.tests.groupby.test_apply.test_apply_concat_preserve_names(three_group)
pandas.tests.groupby.test_apply.test_apply_corner(tsframe)
pandas.tests.groupby.test_apply.test_apply_corner_cases()
pandas.tests.groupby.test_apply.test_apply_datetime_issue(group_column_dtlike)
pandas.tests.groupby.test_apply.test_apply_dt_issue(group_column_dtlike)
pandas.tests.groupby.test_apply.test_apply_frame_concat_series()
pandas.tests.groupby.test_apply.test_apply_frame_to_series(df)
pandas.tests.groupby.test_apply.test_apply_frame_yield_constant(df)
pandas.tests.groupby.test_apply.test_apply_function_returns_non_pandas_non_scalar(function,expected_values)
pandas.tests.groupby.test_apply.test_apply_index_has_complex_internals(index)
pandas.tests.groupby.test_apply.test_apply_issues()
pandas.tests.groupby.test_apply.test_apply_multi_level_name(category)
pandas.tests.groupby.test_apply.test_apply_multiindex_fail()
pandas.tests.groupby.test_apply.test_apply_multikey_corner(tsframe)
pandas.tests.groupby.test_apply.test_apply_no_name_column_conflict()
pandas.tests.groupby.test_apply.test_apply_numeric_coercion_when_datetime()
pandas.tests.groupby.test_apply.test_apply_numeric_coercion_when_dt()
pandas.tests.groupby.test_apply.test_apply_series_return_dataframe_groups()
pandas.tests.groupby.test_apply.test_apply_series_to_frame()
pandas.tests.groupby.test_apply.test_apply_series_yield_constant(df)
pandas.tests.groupby.test_apply.test_apply_transform(ts)
pandas.tests.groupby.test_apply.test_apply_trivial()
pandas.tests.groupby.test_apply.test_apply_trivial_fail()
pandas.tests.groupby.test_apply.test_apply_typecast_fail()
pandas.tests.groupby.test_apply.test_apply_with_mixed_dtype()
pandas.tests.groupby.test_apply.test_apply_with_mixed_types()
pandas.tests.groupby.test_apply.test_apply_without_copy()
pandas.tests.groupby.test_apply.test_fast_apply()
pandas.tests.groupby.test_apply.test_func_returns_object()
pandas.tests.groupby.test_apply.test_gb_apply_list_of_unequal_len_arrays()
pandas.tests.groupby.test_apply.test_group_apply_once_per_group(df,group_names)
pandas.tests.groupby.test_apply.test_groupby_apply_all_none()
pandas.tests.groupby.test_apply.test_groupby_apply_none_first()
pandas.tests.groupby.test_apply.test_groupby_apply_return_empty_chunk()
pandas.tests.groupby.test_apply.test_groupby_as_index_apply(df)
pandas.tests.groupby.test_apply.test_time_field_bug()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/groupby/test_groupby.py----------------------------------------
A:pandas.tests.groupby.test_groupby.result->pandas.DataFrame(np.arange(0, 9).reshape(3, 3)).groupby(level=[0]).mean()
A:pandas.tests.groupby.test_groupby.data->read_csv(StringIO(data), index_col=0)
A:pandas.tests.groupby.test_groupby.index->MultiIndex(levels=[[1, 2], [1, 2]], codes=[[0, 0, 1], [1, 0, 0]], names=['a', 'b'])
A:pandas.tests.groupby.test_groupby.grouped->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby('id')
A:pandas.tests.groupby.test_groupby.agged->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby('id').mean()
A:pandas.tests.groupby.test_groupby.expected->pandas.DataFrame(np.arange(0, 9).reshape(3, 3))
A:pandas.tests.groupby.test_groupby.transformed->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby('id').transform(lambda x: x.mean())
A:pandas.tests.groupby.test_groupby.value_grouped->read_csv(StringIO(data), index_col=0).groupby(data)
A:pandas.tests.groupby.test_groupby.df->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]})
A:pandas.tests.groupby.test_groupby.df['value']->range(len(df))
A:pandas.tests.groupby.test_groupby.applied->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby('A').apply(max_value)
A:pandas.tests.groupby.test_groupby.df1->pandas.DataFrame(np.random.randn(1, 4), columns=list('ABCD'))
A:pandas.tests.groupby.test_groupby.df2->DataFrame({'a': x // 2 * 1.0, 'b': 2.0 * x, 'c': 3.0 * x})
A:pandas.tests.groupby.test_groupby.e->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby('A').first()['C'].copy()
A:pandas.tests.groupby.test_groupby.ts_grouped->Series(np.random.randint(5, 10, 50), name='jim').groupby(lambda x: x.month)
A:pandas.tests.groupby.test_groupby.agg_result->df.groupby(level=['group1', 'group2'], sort=True).agg(f, q=80)
A:pandas.tests.groupby.test_groupby.apply_result->df.groupby(level=['group1', 'group2'], sort=True).apply(DataFrame.quantile, q=0.8)
A:pandas.tests.groupby.test_groupby.trans_result->Series(np.random.randint(5, 10, 50), name='jim').groupby(lambda x: x.month).transform(f, q=80)
A:pandas.tests.groupby.test_groupby.agg_expected->Series(np.random.randint(5, 10, 50), name='jim').groupby(lambda x: x.month).quantile(0.8)
A:pandas.tests.groupby.test_groupby.trans_expected->Series(np.random.randint(5, 10, 50), name='jim').groupby(lambda x: x.month).transform(g)
A:pandas.tests.groupby.test_groupby.df_grouped->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby(level=['group1', 'group2'], sort=True)
A:pandas.tests.groupby.test_groupby.groupings->Series(data)
A:pandas.tests.groupby.test_groupby.values->zip(range(10), range(10))
A:pandas.tests.groupby.test_groupby.labels->numpy.array(['a', 'b', 'c', 'd', 'e'], dtype='O')
A:pandas.tests.groupby.test_groupby.multiindex->MultiIndex(levels=[[]] * 2, codes=[[]] * 2, names=['foo', 'bar'])
A:pandas.tests.groupby.test_groupby.res->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby(level=['group1', 'group2'], sort=True).agg('sum')
A:pandas.tests.groupby.test_groupby.y->y.set_index(['b', 'c']).set_index(['b', 'c'])
A:pandas.tests.groupby.test_groupby.result1->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby('key', group_keys=True).apply(lambda x: x[:].key)
A:pandas.tests.groupby.test_groupby.result2->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby([df['A'], df['B']], as_index=False).mean()
A:pandas.tests.groupby.test_groupby.aggregated->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby('id').aggregate(np.mean)
A:pandas.tests.groupby.test_groupby.tscopy->tsframe.copy()
A:pandas.tests.groupby.test_groupby.stragged->tsframe.copy().groupby('weekday').aggregate(np.mean)
A:pandas.tests.groupby.test_groupby.mean->group.mean()
A:pandas.tests.groupby.test_groupby.samething->tsframe.index.take(indices[k])
A:pandas.tests.groupby.test_groupby.groupedT->tsframe.T.groupby(mapping, axis=0)
A:pandas.tests.groupby.test_groupby.mi->pandas.MultiIndex.from_product(iterables=iterables, names=['x', 'x1'])
A:pandas.tests.groupby.test_groupby.result_col->op(grouped[col])
A:pandas.tests.groupby.test_groupby.expected2->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby('id').mean()
A:pandas.tests.groupby.test_groupby.expected3->DataFrame(expected3).rename(columns={'C': 'Q'})
A:pandas.tests.groupby.test_groupby.result3->grouped['C'].agg({'Q': np.sum})
A:pandas.tests.groupby.test_groupby.ts->Series(np.random.randint(5, 10, 50), name='jim')
A:pandas.tests.groupby.test_groupby.gr->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby(ts.values, as_index=True)
A:pandas.tests.groupby.test_groupby.left->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby(['A', 'B', 'C', 'D']).sum()
A:pandas.tests.groupby.test_groupby.right->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby(['D', 'C', 'B', 'A']).sum()
A:pandas.tests.groupby.test_groupby.grouped2->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby(['A', 'B'], as_index=False)
A:pandas.tests.groupby.test_groupby.expected.index->numpy.arange(len(expected))
A:pandas.tests.groupby.test_groupby.arrays->list(zip(*expected.index.values))
A:pandas.tests.groupby.test_groupby.exp->DataFrame([[2], [1], [5]], index=idx, columns=['value'])
A:pandas.tests.groupby.test_groupby.df['E']->datetime.datetime.now()
A:pandas.tests.groupby.test_groupby.agged_A->grouped['A'].apply(np.mean)
A:pandas.tests.groupby.test_groupby.agged2->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby(keys).aggregate(aggfun)
A:pandas.tests.groupby.test_groupby.deleveled->mframe.reset_index()
A:pandas.tests.groupby.test_groupby.result0->mframe.groupby(mapper0, level=0).sum()
A:pandas.tests.groupby.test_groupby.mapped_level0->numpy.array([mapper0.get(x) for x in deleveled['first']])
A:pandas.tests.groupby.test_groupby.mapped_level1->numpy.array([mapper1.get(x) for x in deleveled['second']])
A:pandas.tests.groupby.test_groupby.expected0->mframe.groupby(mapped_level0).sum()
A:pandas.tests.groupby.test_groupby.expected1->mframe.groupby(mapped_level1).sum()
A:pandas.tests.groupby.test_groupby.s->pandas.Series(data=[1, 2], index=ri)
A:pandas.tests.groupby.test_groupby.a->Series(data=np.arange(4) * (1 + 2j), index=[0, 0, 1, 1])
A:pandas.tests.groupby.test_groupby.x->numpy.arange(n)
A:pandas.tests.groupby.test_groupby.x['rank']->numpy.arange(n).val.rank(method='min')
A:pandas.tests.groupby.test_groupby.grpby_copy->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby('cat1').apply(f_copy)
A:pandas.tests.groupby.test_groupby.grpby_no_copy->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby('cat1').apply(f_no_copy)
A:pandas.tests.groupby.test_groupby.s1->Series([5.0, -9.0, 4.0, 100.0, -5.0, 55.0, 6.7], index=Index(['a', 'b', 'c', 'd', 'e', 'f', 'g']))
A:pandas.tests.groupby.test_groupby.s2->Series([1.0, 1.0, 4.0, 5.0, 5.0, 7.0], index=Index(['a', 'b', 'd', 'f', 'g', 'h']))
A:pandas.tests.groupby.test_groupby.tuples->list(zip(*[['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'], ['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two']]))
A:pandas.tests.groupby.test_groupby.columns->pandas.MultiIndex.from_tuples([('A', 'cat'), ('B', 'dog'), ('B', 'cat'), ('A', 'dog')])
A:pandas.tests.groupby.test_groupby.(sorted_columns, _)->pandas.MultiIndex.from_tuples([('A', 'cat'), ('B', 'dog'), ('B', 'cat'), ('A', 'dog')]).sortlevel(0)
A:pandas.tests.groupby.test_groupby.metrics->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby('A').apply(summarize_random_name)
A:pandas.tests.groupby.test_groupby.arr->numpy.empty((100, 100))
A:pandas.tests.groupby.test_groupby.obj->Series(arr[:, 0])
A:pandas.tests.groupby.test_groupby.inds->numpy.tile(range(10), 10)
A:pandas.tests.groupby.test_groupby.exp_index->Index([], name='x', dtype=np.float64)
A:pandas.tests.groupby.test_groupby.keys->sorted(grouped.groups.keys())
A:pandas.tests.groupby.test_groupby.nan_df->DataFrame({'nan': [np.nan, np.nan, np.nan], 'nat': [pd.NaT, pd.NaT, pd.NaT]})
A:pandas.tests.groupby.test_groupby.d->read_csv(StringIO(data), index_col=0).select(lambda x: x.hour < 11).dropna()
A:pandas.tests.groupby.test_groupby.tmp->read_csv(StringIO(data), index_col=0).select(lambda x: x.hour < 11).dropna().groupby(['group']).mean()
A:pandas.tests.groupby.test_groupby.res_values->numpy.array([[0, 1], [0, 1]], dtype=np.int64)
A:pandas.tests.groupby.test_groupby.B->numpy.concatenate((np.arange(10000), np.arange(10000), np.arange(5000)))
A:pandas.tests.groupby.test_groupby.A->numpy.arange(25000)
A:pandas.tests.groupby.test_groupby.tups->pandas.core.common.asarray_tuplesafe(tups)
A:pandas.tests.groupby.test_groupby.tsf->pandas._testing.makeTimeDataFrame()
A:pandas.tests.groupby.test_groupby.mseries->Series([0, 1, 2, 3, 4, 5], index=index)
A:pandas.tests.groupby.test_groupby.mseries_result->Series([0, 2, 4], index=index)
A:pandas.tests.groupby.test_groupby.ind->date_range(start='2012/1/1', freq='5min', periods=periods)
A:pandas.tests.groupby.test_groupby.closure_bad->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby('id').agg({'high': agg_before(11, np.max)})
A:pandas.tests.groupby.test_groupby.closure_good->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby('id').agg({'high': agg_before(11, np.max, True)})
A:pandas.tests.groupby.test_groupby.idx->pandas.MultiIndex.from_tuples([('a', 'c'), ('a', 'd'), ('b', 'c')], names=['group1', 'group2'])
A:pandas.tests.groupby.test_groupby.lexsorted_mi->pandas.MultiIndex.from_tuples([('a', ''), ('b1', 'c1'), ('b2', 'c2')], names=['b', 'c'])
A:pandas.tests.groupby.test_groupby.lexsorted_df->DataFrame([[1, 3, 4]], columns=lexsorted_mi)
A:pandas.tests.groupby.test_groupby.not_lexsorted_df->not_lexsorted_df.reset_index().reset_index()
A:pandas.tests.groupby.test_groupby.g->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby(['A', 'B'])
A:pandas.tests.groupby.test_groupby.actual->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby('g')['x'].transform('sum')
A:pandas.tests.groupby.test_groupby.df.index->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).index.astype(float)
A:pandas.tests.groupby.test_groupby.gb->pandas.Series([2, 5, 6, 8], index=[2.0, 4.0, 4.0, 5.0]).groupby(level=0)
A:pandas.tests.groupby.test_groupby.gb2->DataFrame({'a': x // 2 * 1.0, 'b': 2.0 * x, 'c': 3.0 * x}).groupby('a')
A:pandas.tests.groupby.test_groupby.now_dt->pandas.Timestamp.utcnow()
A:pandas.tests.groupby.test_groupby.ser->pandas.Series([2, 5, 6, 8], index=[2.0, 4.0, 4.0, 5.0])
A:pandas.tests.groupby.test_groupby.ri->pandas.MultiIndex.from_arrays(index_array, names=index_names)
A:pandas.tests.groupby.test_groupby.ei->pandas.MultiIndex.from_arrays(index_array, names=index_names)
A:pandas.tests.groupby.test_groupby.results->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby(group_name, axis=1).sum()
A:pandas.tests.groupby.test_groupby.grp_by->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]}).groupby([0])
A:pandas.tests.groupby.test_groupby.axis_number->pandas.DataFrame({('A', 'B'): [1, 2], ('A', 'C'): [1, 3], ('D', 'B'): [0, 0]})._get_axis_number(axis)
pandas.tests.groupby.test_groupby.test_as_index_select_column()
pandas.tests.groupby.test_groupby.test_as_index_series_column_slice_raises(df)
pandas.tests.groupby.test_groupby.test_as_index_series_return_frame(df)
pandas.tests.groupby.test_groupby.test_attr_wrapper(ts)
pandas.tests.groupby.test_groupby.test_basic(dtype)
pandas.tests.groupby.test_groupby.test_basic_regression()
pandas.tests.groupby.test_groupby.test_bool_aggs_dup_column_labels(bool_agg_func)
pandas.tests.groupby.test_groupby.test_consistency_name()
pandas.tests.groupby.test_groupby.test_convert_objects_leave_decimal_alone()
pandas.tests.groupby.test_groupby.test_cython_grouper_series_bug_noncontig()
pandas.tests.groupby.test_groupby.test_dont_clobber_name_column()
pandas.tests.groupby.test_groupby.test_dup_labels_output_shape(groupby_func,idx)
pandas.tests.groupby.test_groupby.test_empty_dataframe_groupby()
pandas.tests.groupby.test_groupby.test_empty_groups_corner(mframe)
pandas.tests.groupby.test_groupby.test_frame_groupby(tsframe)
pandas.tests.groupby.test_groupby.test_frame_groupby_columns(tsframe)
pandas.tests.groupby.test_groupby.test_frame_multi_key_function_list()
pandas.tests.groupby.test_groupby.test_frame_set_name_single(df)
pandas.tests.groupby.test_groupby.test_group_name_available_in_inference_pass()
pandas.tests.groupby.test_groupby.test_group_shift_lose_timezone()
pandas.tests.groupby.test_groupby.test_group_shift_with_fill_value()
pandas.tests.groupby.test_groupby.test_group_shift_with_null_key()
pandas.tests.groupby.test_groupby.test_groupby_2d_malformed()
pandas.tests.groupby.test_groupby.test_groupby_agg_ohlc_non_first()
pandas.tests.groupby.test_groupby.test_groupby_as_index_agg(df)
pandas.tests.groupby.test_groupby.test_groupby_as_index_corner(df,ts)
pandas.tests.groupby.test_groupby.test_groupby_as_index_cython(df)
pandas.tests.groupby.test_groupby.test_groupby_as_index_series_scalar(df)
pandas.tests.groupby.test_groupby.test_groupby_axis_1(group_name)
pandas.tests.groupby.test_groupby.test_groupby_complex()
pandas.tests.groupby.test_groupby.test_groupby_crash_on_nunique(axis)
pandas.tests.groupby.test_groupby.test_groupby_dtype_inference_empty()
pandas.tests.groupby.test_groupby.test_groupby_duplicate_index()
pandas.tests.groupby.test_groupby.test_groupby_empty_list_raises()
pandas.tests.groupby.test_groupby.test_groupby_groups_in_BaseGrouper()
pandas.tests.groupby.test_groupby.test_groupby_keys_same_size_as_index()
pandas.tests.groupby.test_groupby.test_groupby_level_apply(mframe)
pandas.tests.groupby.test_groupby.test_groupby_level_mapper(mframe)
pandas.tests.groupby.test_groupby.test_groupby_level_nonmulti()
pandas.tests.groupby.test_groupby.test_groupby_list_infer_array_like(df)
pandas.tests.groupby.test_groupby.test_groupby_list_level()
pandas.tests.groupby.test_groupby.test_groupby_mixed_type_columns()
pandas.tests.groupby.test_groupby.test_groupby_multi_corner(df)
pandas.tests.groupby.test_groupby.test_groupby_multiindex_missing_pair()
pandas.tests.groupby.test_groupby.test_groupby_multiindex_nat()
pandas.tests.groupby.test_groupby.test_groupby_multiindex_not_lexsorted()
pandas.tests.groupby.test_groupby.test_groupby_multiindex_series_keys_len_equal_group_axis()
pandas.tests.groupby.test_groupby.test_groupby_multiple_columns(df,op)
pandas.tests.groupby.test_groupby.test_groupby_multiple_key(df)
pandas.tests.groupby.test_groupby.test_groupby_name_propagation(df)
pandas.tests.groupby.test_groupby.test_groupby_nat_exclude()
pandas.tests.groupby.test_groupby.test_groupby_nonobject_dtype(mframe,df_mixed_floats)
pandas.tests.groupby.test_groupby.test_groupby_nonstring_columns()
pandas.tests.groupby.test_groupby.test_groupby_one_row()
pandas.tests.groupby.test_groupby.test_groupby_only_none_group()
pandas.tests.groupby.test_groupby.test_groupby_preserves_sort(sort_column,group_column)
pandas.tests.groupby.test_groupby.test_groupby_reindex_inside_function()
pandas.tests.groupby.test_groupby.test_groupby_return_type()
pandas.tests.groupby.test_groupby.test_groupby_series_indexed_differently()
pandas.tests.groupby.test_groupby.test_groupby_series_with_name(df)
pandas.tests.groupby.test_groupby.test_groupby_sort_multi()
pandas.tests.groupby.test_groupby.test_groupby_sort_multiindex_series()
pandas.tests.groupby.test_groupby.test_groupby_with_hier_columns()
pandas.tests.groupby.test_groupby.test_groupby_wrong_multi_labels()
pandas.tests.groupby.test_groupby.test_grouping_ndarray(df)
pandas.tests.groupby.test_groupby.test_handle_dict_return_value(df)
pandas.tests.groupby.test_groupby.test_inconsistent_return_type()
pandas.tests.groupby.test_groupby.test_index_label_overlaps_location()
pandas.tests.groupby.test_groupby.test_indices_concatenation_order()
pandas.tests.groupby.test_groupby.test_int32_overflow()
pandas.tests.groupby.test_groupby.test_len()
pandas.tests.groupby.test_groupby.test_multi_func(df)
pandas.tests.groupby.test_groupby.test_multi_key_multiple_functions(df)
pandas.tests.groupby.test_groupby.test_multifunc_sum_bug()
pandas.tests.groupby.test_groupby.test_mutate_groups()
pandas.tests.groupby.test_groupby.test_no_dummy_key_names(df)
pandas.tests.groupby.test_groupby.test_no_mutate_but_looks_like()
pandas.tests.groupby.test_groupby.test_no_nonsense_name(float_frame)
pandas.tests.groupby.test_groupby.test_nonsense_func()
pandas.tests.groupby.test_groupby.test_omit_nuisance(df)
pandas.tests.groupby.test_groupby.test_omit_nuisance_python_multiple(three_group)
pandas.tests.groupby.test_groupby.test_pass_args_kwargs(ts,tsframe)
pandas.tests.groupby.test_groupby.test_pivot_table_values_key_error()
pandas.tests.groupby.test_groupby.test_repr()
pandas.tests.groupby.test_groupby.test_series_grouper_noncontig_index()
pandas.tests.groupby.test_groupby.test_seriesgroupby_name_attr(df)
pandas.tests.groupby.test_groupby.test_set_group_name(df,grouper)
pandas.tests.groupby.test_groupby.test_shift_bfill_ffill_tz(tz_naive_fixture,op,expected)
pandas.tests.groupby.test_groupby.test_skip_group_keys()
pandas.tests.groupby.test_groupby.test_transform_doesnt_clobber_ints()
pandas.tests.groupby.test_groupby.test_tuple_as_grouping()
pandas.tests.groupby.test_groupby.test_tuple_correct_keyerror()
pandas.tests.groupby.test_groupby.test_with_na_groups(dtype)
pandas.tests.groupby.test_groupby.test_wrap_aggregated_output_multindex(mframe)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/groupby/test_categorical.py----------------------------------------
A:pandas.tests.groupby.test_categorical.a->pandas.Categorical.from_codes(np.arange(len(categories)), categories=categories, ordered=a.ordered)
A:pandas.tests.groupby.test_categorical.index->pandas.MultiIndex.from_frame(DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'three']}, **kwargs))
A:pandas.tests.groupby.test_categorical.cats->Categorical(['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c'], categories=['a', 'b', 'c', 'd'], ordered=True)
A:pandas.tests.groupby.test_categorical.result->pandas.DataFrame({'A': pd.Categorical(['a', 'a', 'b'], categories=['a', 'b', 'c'])}).groupby([1, 2, 1]).nunique()
A:pandas.tests.groupby.test_categorical.data->DataFrame({'a': [1, 1, 1, 2, 2, 2, 3, 4, 5], 'b': cats})
A:pandas.tests.groupby.test_categorical.exp_index->CategoricalIndex(list('ab'), name='cat', categories=list('abc'), ordered=True)
A:pandas.tests.groupby.test_categorical.expected->pandas.DataFrame({'A': [2, 1]}, index=[1, 2])
A:pandas.tests.groupby.test_categorical.cat1->Categorical(['a', 'a', 'b', 'b'], categories=['a', 'b', 'z'], ordered=True)
A:pandas.tests.groupby.test_categorical.cat2->Categorical(['c', 'd', 'c', 'd'], categories=['c', 'd', 'y'], ordered=True)
A:pandas.tests.groupby.test_categorical.df->pandas.DataFrame({'A': pd.Categorical(['a', 'a', 'b'], categories=['a', 'b', 'c'])})
A:pandas.tests.groupby.test_categorical.gb->pandas.DataFrame({'A': pd.Categorical(['a', 'a', 'b'], categories=['a', 'b', 'c'])}).groupby(['A', 'B'], observed=observed)
A:pandas.tests.groupby.test_categorical.exp_idx->CategoricalIndex(levels, categories=cats.categories, ordered=True)
A:pandas.tests.groupby.test_categorical.x->DataFrame([[1, 'John P. Doe'], [2, 'Jane Dove'], [1, 'John P. Doe']], columns=['person_id', 'person_name'])
A:pandas.tests.groupby.test_categorical.x['person_name']->Categorical(x.person_name)
A:pandas.tests.groupby.test_categorical.g->pandas.DataFrame({'A': pd.Categorical(['a', 'a', 'b'], categories=['a', 'b', 'c'])}).groupby('payload')
A:pandas.tests.groupby.test_categorical.expected.index->CategoricalIndex(Categorical.from_codes([0, 1, 2, 3], levels, ordered=True), name='cats')
A:pandas.tests.groupby.test_categorical.expected['person_name']->expected['person_name'].astype('object').astype('object')
A:pandas.tests.groupby.test_categorical.c->pandas.Categorical(['first', 'second', 'third', 'fourth'], ordered=True)
A:pandas.tests.groupby.test_categorical.codes->numpy.array([0, 0, 0, 1, 1, 1, 3, 3, 3])
A:pandas.tests.groupby.test_categorical.grouped->DataFrame({'a': [1, 1, 1, 2, 2, 2, 3, 4, 5], 'b': cats}).groupby(cats, observed=False)
A:pandas.tests.groupby.test_categorical.desc_result->DataFrame({'a': [1, 1, 1, 2, 2, 2, 3, 4, 5], 'b': cats}).groupby(cats, observed=False).describe()
A:pandas.tests.groupby.test_categorical.idx->pandas.MultiIndex.from_product([Categorical(['a', 'b', 'c']), Categorical(pd.date_range('2018-06-01 00', freq='1T', periods=3))], names=['key1', 'key2'])
A:pandas.tests.groupby.test_categorical.ord_labels->Categorical(['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c'], categories=['a', 'b', 'c', 'd'], ordered=True).take(idx)
A:pandas.tests.groupby.test_categorical.ord_data->DataFrame({'a': [1, 1, 1, 2, 2, 2, 3, 4, 5], 'b': cats}).take(idx)
A:pandas.tests.groupby.test_categorical.exp_cats->Categorical(ord_labels, ordered=True, categories=['foo', 'bar', 'baz', 'qux'])
A:pandas.tests.groupby.test_categorical.expc->pandas.Categorical.from_codes(np.arange(4).repeat(8), levels, ordered=True)
A:pandas.tests.groupby.test_categorical.exp->numpy.array([1, 2, 4, np.nan])
A:pandas.tests.groupby.test_categorical.dense->Categorical(list('abc'), ordered=ordered)
A:pandas.tests.groupby.test_categorical.missing->Categorical(list('aaa'), categories=['a', 'b'], ordered=ordered)
A:pandas.tests.groupby.test_categorical.values->pandas.cut(df['C1'], [1, 2, 3, 6])
A:pandas.tests.groupby.test_categorical.groups_single_key->pandas.DataFrame({'A': pd.Categorical(['a', 'a', 'b'], categories=['a', 'b', 'c'])}).groupby('cat', observed=observed)
A:pandas.tests.groupby.test_categorical.groups_double_key->pandas.DataFrame({'A': pd.Categorical(['a', 'a', 'b'], categories=['a', 'b', 'c'])}).groupby([values, 'C2'], observed=observed)
A:pandas.tests.groupby.test_categorical.cat->pandas.cut(df['foo'], np.linspace(0, 20, 5))
A:pandas.tests.groupby.test_categorical.groups->pandas.DataFrame({'A': pd.Categorical(['a', 'a', 'b'], categories=['a', 'b', 'c'])}).groupby(['range', 'baz'], as_index=True, sort=True)
A:pandas.tests.groupby.test_categorical.groups2->pandas.DataFrame({'A': pd.Categorical(['a', 'a', 'b'], categories=['a', 'b', 'c'])}).groupby(['range', 'baz'], as_index=True, observed=observed)
A:pandas.tests.groupby.test_categorical.df['cat']->pandas.DataFrame({'A': pd.Categorical(['a', 'a', 'b'], categories=['a', 'b', 'c'])}).cat.astype(str).astype('category')
A:pandas.tests.groupby.test_categorical.ser->pandas.Series([1, 2, 3])
A:pandas.tests.groupby.test_categorical.s1->Categorical([np.nan, 'a', np.nan, 'a'], categories=['a', 'b', 'c'])
A:pandas.tests.groupby.test_categorical.s2->Series([1, 2, 3, 4])
A:pandas.tests.groupby.test_categorical.label->Series(result.index.array, dtype='object')
A:pandas.tests.groupby.test_categorical.val->Series(['d', 'a', 'b', 'a', 'd', 'b'])
A:pandas.tests.groupby.test_categorical.aggr->Series(result.array)
A:pandas.tests.groupby.test_categorical.levels->pandas.date_range('2014-01-01', periods=4)
A:pandas.tests.groupby.test_categorical.s->Series(['a', 'b', 'b'], name='cat')
A:pandas.tests.groupby.test_categorical.df['medium']->df['medium'].astype('category').astype('category')
A:pandas.tests.groupby.test_categorical.gcat->pandas.DataFrame({'A': pd.Categorical(['a', 'a', 'b'], categories=['a', 'b', 'c'])}).groupby(['artist', 'medium'], observed=False)['a'].count().unstack()
A:pandas.tests.groupby.test_categorical.exp_columns->CategoricalIndex(['A', 'B'], ordered=False, name='medium')
A:pandas.tests.groupby.test_categorical.series->Series([np.nan, np.nan, 1, 1, 2, 2, 3, 3, 4, 4])
A:pandas.tests.groupby.test_categorical.bins->pandas.cut(series.dropna().values, 4)
A:pandas.tests.groupby.test_categorical.df.index->Index(list('abc'), name=name)
A:pandas.tests.groupby.test_categorical.categories->list('abc')
A:pandas.tests.groupby.test_categorical.sort_index->CategoricalIndex(categories, categories, ordered=False, name='A')
A:pandas.tests.groupby.test_categorical.nosort_index->CategoricalIndex(list('bac'), list('bac'), ordered=False, name='A')
A:pandas.tests.groupby.test_categorical.exp_full->DataFrame({'A': [2.0, 1.0, np.nan], 'B': [25.0, 20.0, np.nan], 'C1': Categorical(list('bac'), categories=list('bac'), ordered=False), 'C2': Categorical(list('bac'), categories=list('bac'), ordered=True)})
A:pandas.tests.groupby.test_categorical.result1->pandas.DataFrame({'A': pd.Categorical(['a', 'a', 'b'], categories=['a', 'b', 'c'])}).groupby(by=col, as_index=False, observed=False).mean()
A:pandas.tests.groupby.test_categorical.result2->pandas.DataFrame({'A': pd.Categorical(['a', 'a', 'b'], categories=['a', 'b', 'c'])}).groupby(by=col, as_index=True, observed=False).mean().reset_index()
A:pandas.tests.groupby.test_categorical.exp.index->CategoricalIndex(exp.index, name=exp.index.name)
A:pandas.tests.groupby.test_categorical.cat_labels->Categorical(labels, labels)
A:pandas.tests.groupby.test_categorical.df['value_group']->pandas.cut(df.value, range(0, 10500, 500), right=False, labels=cat_labels)
A:pandas.tests.groupby.test_categorical.res->Categorical(['a', 'b', 'c', 'd'], categories=['a', 'b', 'c', 'd'], ordered=False).shift(1, fill_value=fill_value)
A:pandas.tests.groupby.test_categorical.df['range']->Categorical(df['range'], ordered=False)
A:pandas.tests.groupby.test_categorical.expected_sort->DataFrame([[1, 60], [5, 30], [6, 40], [10, 10]], columns=['foo', 'bar'], index=index)
A:pandas.tests.groupby.test_categorical.result_sort->DataFrame([[1, 60], [5, 30], [6, 40], [10, 10]], columns=['foo', 'bar'])
A:pandas.tests.groupby.test_categorical.expected_nosort->DataFrame([[10, 10], [5, 30], [6, 40], [1, 60]], index=index, columns=['foo', 'bar'])
A:pandas.tests.groupby.test_categorical.result_nosort->DataFrame([[10, 10], [5, 30], [6, 40], [1, 60]], columns=['foo', 'bar'])
A:pandas.tests.groupby.test_categorical.df['dt']->Categorical(df['dt'], ordered=False)
A:pandas.tests.groupby.test_categorical.result_sort.index->CategoricalIndex(index, name='dt')
A:pandas.tests.groupby.test_categorical.result_nosort.index->CategoricalIndex(index, categories=index, name='dt')
A:pandas.tests.groupby.test_categorical.expected_idx->CategoricalIndex(['a', 'b', 'c'], name='A')
A:pandas.tests.groupby.test_categorical.ct->Categorical(['a', 'b', 'c', 'd'], categories=['a', 'b', 'c', 'd'], ordered=False)
A:pandas.tests.groupby.test_categorical.df_cat['A']->df_cat['A'].astype('category').astype('category')
A:pandas.tests.groupby.test_categorical.df_cat['B']->df_cat['B'].astype('category').astype('category')
A:pandas.tests.groupby.test_categorical.df_cat['C']->Series([1, 2, 3, 4])
A:pandas.tests.groupby.test_categorical.df_cat->df_cat.drop(['D'], axis=1).drop(['D'], axis=1)
A:pandas.tests.groupby.test_categorical.(index, _)->pandas.MultiIndex.from_product([CategoricalIndex(['bar', 'foo'], ordered=False), CategoricalIndex(['one', 'three', 'two'], ordered=False)], names=['A', 'B']).sortlevel()
A:pandas.tests.groupby.test_categorical.args->{'nth': [0]}.get(func, [])
A:pandas.tests.groupby.test_categorical.agg->getattr(series_groupby, func)
pandas.tests.groupby.test_categorical.cartesian_product_for_groupers(result,args,names)
pandas.tests.groupby.test_categorical.df_cat(df)
pandas.tests.groupby.test_categorical.test_apply(ordered)
pandas.tests.groupby.test_categorical.test_apply_use_categorical_name(df)
pandas.tests.groupby.test_categorical.test_as_index()
pandas.tests.groupby.test_categorical.test_basic()
pandas.tests.groupby.test_categorical.test_bins_unequal_len()
pandas.tests.groupby.test_categorical.test_categorical_index()
pandas.tests.groupby.test_categorical.test_categorical_no_compress()
pandas.tests.groupby.test_categorical.test_dataframe_categorical_ordered_observed_sort(ordered,observed,sort)
pandas.tests.groupby.test_categorical.test_dataframe_categorical_with_nan(observed)
pandas.tests.groupby.test_categorical.test_datetime()
pandas.tests.groupby.test_categorical.test_describe_categorical_columns()
pandas.tests.groupby.test_categorical.test_dt()
pandas.tests.groupby.test_categorical.test_empty_prod()
pandas.tests.groupby.test_categorical.test_empty_sum()
pandas.tests.groupby.test_categorical.test_get_nonexistent_category()
pandas.tests.groupby.test_categorical.test_groupby_agg_categorical_columns(func,expected_values)
pandas.tests.groupby.test_categorical.test_groupby_agg_non_numeric()
pandas.tests.groupby.test_categorical.test_groupby_agg_observed_true_single_column(as_index,expected)
pandas.tests.groupby.test_categorical.test_groupby_cat_preserves_structure(observed,ordered_fixture)
pandas.tests.groupby.test_categorical.test_groupby_categorical_axis_1(code)
pandas.tests.groupby.test_categorical.test_groupby_categorical_series_dataframe_consistent(df_cat)
pandas.tests.groupby.test_categorical.test_groupby_empty_with_category()
pandas.tests.groupby.test_categorical.test_groupby_multiindex_categorical_datetime()
pandas.tests.groupby.test_categorical.test_groupby_multiindex_categorical_dt()
pandas.tests.groupby.test_categorical.test_level_get_group(observed)
pandas.tests.groupby.test_categorical.test_observed(observed)
pandas.tests.groupby.test_categorical.test_observed_codes_remap(observed)
pandas.tests.groupby.test_categorical.test_observed_groups(observed)
pandas.tests.groupby.test_categorical.test_observed_groups_with_nan(observed)
pandas.tests.groupby.test_categorical.test_observed_nth()
pandas.tests.groupby.test_categorical.test_observed_perf()
pandas.tests.groupby.test_categorical.test_preserve_categorical_dtype()
pandas.tests.groupby.test_categorical.test_preserve_categories()
pandas.tests.groupby.test_categorical.test_preserve_on_ordered_ops(func,values)
pandas.tests.groupby.test_categorical.test_series_groupby_categorical_aggregation_getitem()
pandas.tests.groupby.test_categorical.test_series_groupby_on_2_categoricals_unobserved(reduction_func:str,observed:bool)
pandas.tests.groupby.test_categorical.test_series_groupby_on_2_categoricals_unobserved_zeroes_or_nans(func,zero_or_nan)
pandas.tests.groupby.test_categorical.test_seriesgroupby_observed_apply_dict(df_cat,observed,index,data)
pandas.tests.groupby.test_categorical.test_seriesgroupby_observed_false_or_none(df_cat,observed,operation)
pandas.tests.groupby.test_categorical.test_seriesgroupby_observed_true(df_cat,operation,kwargs)
pandas.tests.groupby.test_categorical.test_shift(fill_value)
pandas.tests.groupby.test_categorical.test_sort()
pandas.tests.groupby.test_categorical.test_sort2()
pandas.tests.groupby.test_categorical.test_sort_datetimelike()
pandas.tests.groupby.test_categorical.test_sort_dtlike()
pandas.tests.groupby.test_categorical.test_unstack_categorical()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/groupby/test_rank.py----------------------------------------
A:pandas.tests.groupby.test_rank.lev1->pandas._testing.rands_array(10, 100)
A:pandas.tests.groupby.test_rank.lev2->pandas._testing.rands_array(10, 130)
A:pandas.tests.groupby.test_rank.lab1->numpy.random.randint(0, 100, size=500)
A:pandas.tests.groupby.test_rank.lab2->numpy.random.randint(0, 130, size=500)
A:pandas.tests.groupby.test_rank.df->DataFrame({'A': input_key, 'B': input_value})
A:pandas.tests.groupby.test_rank.result->DataFrame({'A': input_key, 'B': input_value}).groupby('A').rank(method='dense', pct=True)
A:pandas.tests.groupby.test_rank.expected->DataFrame({'B': output_value})
A:pandas.tests.groupby.test_rank.key->numpy.repeat(grps, len(vals))
A:pandas.tests.groupby.test_rank.exp_df->DataFrame([2.5, 2.5, 2.5, 2.5], columns=['val'])
pandas.tests.groupby.test_rank.test_infs_n_nans(grps,vals,ties_method,ascending,na_option,exp)
pandas.tests.groupby.test_rank.test_rank_apply()
pandas.tests.groupby.test_rank.test_rank_args(grps,vals,ties_method,ascending,pct,exp)
pandas.tests.groupby.test_rank.test_rank_args_missing(grps,vals,ties_method,ascending,na_option,pct,exp)
pandas.tests.groupby.test_rank.test_rank_avg_even_vals()
pandas.tests.groupby.test_rank.test_rank_empty_group()
pandas.tests.groupby.test_rank.test_rank_naoption_raises(ties_method,ascending,na_option,pct,vals)
pandas.tests.groupby.test_rank.test_rank_object_raises(ties_method,ascending,na_option,pct,vals)
pandas.tests.groupby.test_rank.test_rank_resets_each_group(pct,exp)
pandas.tests.groupby.test_rank.test_rank_zero_div(input_key,input_value,output_value)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/groupby/test_bin_groupby.py----------------------------------------
A:pandas.tests.groupby.test_bin_groupby.obj->numpy.array(np.random.randn(20), dtype=dtype)
A:pandas.tests.groupby.test_bin_groupby.labels->ensure_int64(np.repeat(np.arange(3), np.diff(np.r_[0, bins])))
A:pandas.tests.groupby.test_bin_groupby.grouper->pandas._libs.reduction.SeriesBinGrouper(obj, np.mean, bins, dummy)
A:pandas.tests.groupby.test_bin_groupby.(result, counts)->pandas._libs.reduction.SeriesBinGrouper(obj, np.mean, bins, dummy).get_result()
A:pandas.tests.groupby.test_bin_groupby.expected->numpy.random.randn(100, 4).sum(1)
A:pandas.tests.groupby.test_bin_groupby.exp_counts->numpy.array([3, 3, 4], dtype=np.int64)
A:pandas.tests.groupby.test_bin_groupby.bins->numpy.array([6, 12, 20])
A:pandas.tests.groupby.test_bin_groupby.df->pandas.DataFrame({'A': ['a', 'a', 'a'], 'B': ['a', 'b', 'b'], 'C': [1, 1, 1]})
A:pandas.tests.groupby.test_bin_groupby.result->pandas._libs.reduction.compute_reduction(arr, np.sum, axis=1, dummy=dummy, labels=Index(np.arange(100)))
A:pandas.tests.groupby.test_bin_groupby.values->numpy.array([1, 2, 3, 4, 5, 6], dtype=np.int64)
A:pandas.tests.groupby.test_bin_groupby.out->numpy.zeros((3, 4), dtype)
A:pandas.tests.groupby.test_bin_groupby.counts->numpy.zeros(len(out), dtype=np.int64)
A:pandas.tests.groupby.test_bin_groupby.func->getattr(groupby, f'group_ohlc_{dtype}')
A:pandas.tests.groupby.test_bin_groupby.arr->numpy.random.randn(100, 4)
A:pandas.tests.groupby.test_bin_groupby.dummy->Series(0.0, index=np.arange(4))
pandas.tests.groupby.test_bin_groupby.TestMoments
pandas.tests.groupby.test_bin_groupby.TestReducer
pandas.tests.groupby.test_bin_groupby.TestReducer.test_int_index(self)
pandas.tests.groupby.test_bin_groupby.assert_block_lengths(x)
pandas.tests.groupby.test_bin_groupby.cumsum_max(x)
pandas.tests.groupby.test_bin_groupby.test_generate_bins(binner,closed,expected)
pandas.tests.groupby.test_bin_groupby.test_group_ohlc()
pandas.tests.groupby.test_bin_groupby.test_mgr_locs_updated(func)
pandas.tests.groupby.test_bin_groupby.test_series_bin_grouper()
pandas.tests.groupby.test_bin_groupby.test_series_grouper()
pandas.tests.groupby.test_bin_groupby.test_series_grouper_requires_nonempty_raises()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/groupby/test_function.py----------------------------------------
A:pandas.tests.groupby.test_function.df->pandas.DataFrame({'user': ['A', 'A', 'A', 'A', 'A'], 'connections': [4970, 4749, 4719, 4704, 18446744073699999744]})
A:pandas.tests.groupby.test_function.exp->pandas.DataFrame({'user': ['A', 'A', 'A', 'A', 'A'], 'connections': [4970, 4749, 4719, 4704, 18446744073699999744]}).groupby(labels).agg(nanops.nanmedian)
A:pandas.tests.groupby.test_function.exp_df->DataFrame([exp] * 2, columns=['val'], index=Index(['a', 'b'], name='key'))
A:pandas.tests.groupby.test_function.result->pandas.DataFrame(values, dtype='Int64').groupby('a').agg([function])
A:pandas.tests.groupby.test_function.aa->DataFrame({'nn': [11, 11, 22, 22], 'ii': [1, 2, 3, 4], 'ss': 4 * ['mama']})
A:pandas.tests.groupby.test_function.s->Series(npr.randn(20), index=idx)
A:pandas.tests.groupby.test_function.grouped->pandas.DataFrame({'user': ['A', 'A', 'A', 'A', 'A'], 'connections': [4970, 4749, 4719, 4704, 18446744073699999744]}).groupby('B')
A:pandas.tests.groupby.test_function.result2->pandas.DataFrame({'user': ['A', 'A', 'A', 'A', 'A'], 'connections': [4970, 4749, 4719, 4704, 18446744073699999744]}).groupby('B').apply(builtins.sum)
A:pandas.tests.groupby.test_function.expected->pandas.DataFrame({'b': arr}, index=idx)
A:pandas.tests.groupby.test_function.df['jolie']->numpy.random.randn(1000)
A:pandas.tests.groupby.test_function.ngroups->len(df.drop_duplicates(subset=keys))
A:pandas.tests.groupby.test_function.expected_columns_numeric->Index(['int', 'float', 'category_int'])
A:pandas.tests.groupby.test_function.f->getattr(df.groupby('group'), attr)
A:pandas.tests.groupby.test_function.expected_columns->Index(['int', 'float', 'category_int', 'timedelta'])
A:pandas.tests.groupby.test_function.g->pandas.DataFrame({'user': ['A', 'A', 'A', 'A', 'A'], 'connections': [4970, 4749, 4719, 4704, 18446744073699999744]}).groupby([0, 0, 0, 1, 1, 1])
A:pandas.tests.groupby.test_function.gni->pandas.DataFrame({'user': ['A', 'A', 'A', 'A', 'A'], 'connections': [4970, 4749, 4719, 4704, 18446744073699999744]}).groupby('A', as_index=False)
A:pandas.tests.groupby.test_function.expected_index->pandas.MultiIndex(levels=idx_levels, codes=idx_codes, names=groupby + [None])
A:pandas.tests.groupby.test_function.expected_col->pandas.MultiIndex(levels=[['B'], ['count', 'mean', 'std', 'min', '25%', '50%', '75%', 'max']], codes=[[0] * 8, list(range(8))])
A:pandas.tests.groupby.test_function.expected.index->list('abc')
A:pandas.tests.groupby.test_function.labels->numpy.random.randint(0, 50, size=1000).astype(float)
A:pandas.tests.groupby.test_function.rs->pandas.DataFrame({'user': ['A', 'A', 'A', 'A', 'A'], 'connections': [4970, 4749, 4719, 4704, 18446744073699999744]}).groupby(labels).agg(np.median)
A:pandas.tests.groupby.test_function.xp->pandas.DataFrame({'user': ['A', 'A', 'A', 'A', 'A'], 'connections': [4970, 4749, 4719, 4704, 18446744073699999744]}).groupby(labels).median()
A:pandas.tests.groupby.test_function.grps->range(0, 55, 5)
A:pandas.tests.groupby.test_function.bins->pandas.cut(df[0], grps)
A:pandas.tests.groupby.test_function.df['b']->df['b'].astype(t).astype(t)
A:pandas.tests.groupby.test_function.df_out->pandas.DataFrame(exp)
A:pandas.tests.groupby.test_function.df_out['b']->pandas.DataFrame(exp).b.astype(out_type)
A:pandas.tests.groupby.test_function.grpd->pandas.DataFrame({'user': ['A', 'A', 'A', 'A', 'A'], 'connections': [4970, 4749, 4719, 4704, 18446744073699999744]}).groupby('a')
A:pandas.tests.groupby.test_function.t->getattr(grpd, method)(*data['args'])
A:pandas.tests.groupby.test_function.res->getattr(grouped, method)(*data['args'])
A:pandas.tests.groupby.test_function.df['c_date']->pandas.to_datetime(df['c_date'])
A:pandas.tests.groupby.test_function.actual->pandas.DataFrame({'user': ['A', 'A', 'A', 'A', 'A'], 'connections': [4970, 4749, 4719, 4704, 18446744073699999744]}).groupby('key')['value'].cumprod()
A:pandas.tests.groupby.test_function.df['value']->df['value'].astype(float).astype(float)
A:pandas.tests.groupby.test_function.gb->Series([1, 1, 3, 2, 0, 3, 3, 2, 1, 0]).groupby(b)
A:pandas.tests.groupby.test_function.r->Series([1, 1, 3, 2, 0, 3, 3, 2, 1, 0]).groupby(b).nsmallest(3)
A:pandas.tests.groupby.test_function.e->Series([0, 1, 1, 0, 1, 2], index=MultiIndex.from_arrays([list('aaabbb'), [4, 1, 0, 9, 8, 7]]))
A:pandas.tests.groupby.test_function.a->Series([1, 1, 3, 2, 0, 3, 3, 2, 1, 0])
A:pandas.tests.groupby.test_function.b->Series(list('a' * 5 + 'b' * 5))
A:pandas.tests.groupby.test_function.npr->numpy.random.RandomState(123456789)
A:pandas.tests.groupby.test_function.dts->date_range('20180101', periods=10)
A:pandas.tests.groupby.test_function.idx->pandas.Index([1, 2, 3], dtype=object, name='a')
A:pandas.tests.groupby.test_function.exp_idx->pandas.MultiIndex.from_tuples([(dts[0], dts[0], 'one'), (dts[1], dts[1], 'one'), (dts[2], dts[2], 'one'), (dts[3], dts[3], 'two'), (dts[4], dts[4], 'one'), (dts[5], dts[5], 'one'), (dts[6], dts[6], 'one'), (dts[7], dts[7], 'one'), (dts[8], dts[8], 'two'), (dts[9], dts[9], 'one')], names=['first', 'first', 'second'])
A:pandas.tests.groupby.test_function.base_df->pandas.DataFrame({'A': [1, 1, 1, 1, 2, 2, 2, 2], 'B': [3, 4, 3, 2, 2, 3, 2, 1]})
A:pandas.tests.groupby.test_function.index->pandas.Index(['A', 'B', 'C'], name='group')
A:pandas.tests.groupby.test_function.ts->pandas._testing.makeTimeSeries()
A:pandas.tests.groupby.test_function.group->pandas.DataFrame(group.values, columns=group_col, index=group.index)
A:pandas.tests.groupby.test_function.group_col->pandas.MultiIndex(levels=[[col], group.columns], codes=[[0] * len(group.columns), range(len(group.columns))])
A:pandas.tests.groupby.test_function.groupedT->tsframe.groupby({'A': 0, 'B': 0, 'C': 1, 'D': 1}, axis=1)
A:pandas.tests.groupby.test_function.df1->DataFrame({'x': [1, 2, 3, 4, 5] * 3, 'y': [10, 20, 30, 40, 50] * 3, 'z': [100, 200, 300, 400, 500] * 3})
A:pandas.tests.groupby.test_function.df2->DataFrame({'x': [1, 2, 3, 4, 5] * 3, 'y': [10, 20, 30, 40, 50] * 3, 'z': [100, 200, 300, 400, 500] * 3}).rename(columns={'k': 'key'})
A:pandas.tests.groupby.test_function.original_df->pandas.DataFrame({'user': ['A', 'A', 'A', 'A', 'A'], 'connections': [4970, 4749, 4719, 4704, 18446744073699999744]}).copy()
A:pandas.tests.groupby.test_function.gr->pandas.DataFrame({'user': ['A', 'A', 'A', 'A', 'A'], 'connections': [4970, 4749, 4719, 4704, 18446744073699999744]}).groupby(keys, as_index=as_index, sort=sort)
A:pandas.tests.groupby.test_function.left->pandas.DataFrame({'user': ['A', 'A', 'A', 'A', 'A'], 'connections': [4970, 4749, 4719, 4704, 18446744073699999744]}).groupby(key, sort=sort).size()
A:pandas.tests.groupby.test_function.right->pandas.DataFrame({'user': ['A', 'A', 'A', 'A', 'A'], 'connections': [4970, 4749, 4719, 4704, 18446744073699999744]}).groupby(key, sort=sort)['c'].apply(lambda a: a.shape[0])
A:pandas.tests.groupby.test_function.days->date_range('2015-08-23', periods=10)
A:pandas.tests.groupby.test_function.frame->DataFrame({'jim': np.random.choice(list(ascii_lowercase), n), 'joe': np.random.choice(days, n), 'julie': np.random.randint(0, m, n)})
A:pandas.tests.groupby.test_function.data->numpy.array([1.0, np.nan, 1.0])
A:pandas.tests.groupby.test_function.test->pandas.DataFrame([1, 2, 2], columns=pd.Index(['A'], name='level_0'))
A:pandas.tests.groupby.test_function.dr->date_range('2015-08-30', periods=n // 10, freq='T')
A:pandas.tests.groupby.test_function.df['9th']->df['9th'].astype('category').astype('category')
A:pandas.tests.groupby.test_function.count_as->pandas.DataFrame({'user': ['A', 'A', 'A', 'A', 'A'], 'connections': [4970, 4749, 4719, 4704, 18446744073699999744]}).groupby('A').count()
A:pandas.tests.groupby.test_function.count_not_as->pandas.DataFrame({'user': ['A', 'A', 'A', 'A', 'A'], 'connections': [4970, 4749, 4719, 4704, 18446744073699999744]}).groupby('A', as_index=False).count()
A:pandas.tests.groupby.test_function.count_B->pandas.DataFrame({'user': ['A', 'A', 'A', 'A', 'A'], 'connections': [4970, 4749, 4719, 4704, 18446744073699999744]}).groupby('A')['B'].count()
A:pandas.tests.groupby.test_function.vals->numpy.hstack((np.random.randint(0, 5, (100, 2)), np.random.randint(0, 2, (100, 2))))
A:pandas.tests.groupby.test_function.df['a']->df['a'].astype(t).astype(t)
A:pandas.tests.groupby.test_function.out->Series(dtype='int64', index=Index([], name='A'))
A:pandas.tests.groupby.test_function.ser->pandas.Series([1, 1, 2, 2, 3, 3])
A:pandas.tests.groupby.test_function.grp->pandas.DataFrame({'user': ['A', 'A', 'A', 'A', 'A'], 'connections': [4970, 4749, 4719, 4704, 18446744073699999744]}).groupby('key')
A:pandas.tests.groupby.test_function.a_expected->pandas.Series(a_vals).quantile(q, interpolation=interpolation)
A:pandas.tests.groupby.test_function.b_expected->pandas.Series(b_vals).quantile(q, interpolation=interpolation)
A:pandas.tests.groupby.test_function.random_state->numpy.random.RandomState(1234567890)
A:pandas.tests.groupby.test_function.arr->numpy.array([output] * 3, dtype=float)
A:pandas.tests.groupby.test_function.groups->pandas.DataFrame(values, dtype='Int64').groupby('a')
A:pandas.tests.groupby.test_function.expected.columns->pandas.MultiIndex.from_tuples([('b', function)])
pandas.tests.groupby.test_function.scipy_sem(*args,**kwargs)
pandas.tests.groupby.test_function.test_apply_describe_bug(mframe)
pandas.tests.groupby.test_function.test_apply_to_nullable_integer_returns_float(values,function)
pandas.tests.groupby.test_function.test_arg_passthru()
pandas.tests.groupby.test_function.test_builtins_apply(keys,f)
pandas.tests.groupby.test_function.test_count()
pandas.tests.groupby.test_function.test_count_cross_type()
pandas.tests.groupby.test_function.test_count_non_nulls()
pandas.tests.groupby.test_function.test_count_object()
pandas.tests.groupby.test_function.test_count_uses_size_on_exception()
pandas.tests.groupby.test_function.test_cummin_cummax()
pandas.tests.groupby.test_function.test_cython_api2()
pandas.tests.groupby.test_function.test_cython_median()
pandas.tests.groupby.test_function.test_fill_consistency()
pandas.tests.groupby.test_function.test_frame_describe_multikey(tsframe)
pandas.tests.groupby.test_function.test_frame_describe_tupleindex()
pandas.tests.groupby.test_function.test_frame_describe_unstacked_format()
pandas.tests.groupby.test_function.test_groupby_bool_aggs(agg_func,skipna,vals)
pandas.tests.groupby.test_function.test_groupby_cumprod()
pandas.tests.groupby.test_function.test_groupby_mean_no_overflow()
pandas.tests.groupby.test_function.test_groupby_non_arithmetic_agg_int_like_precision(i)
pandas.tests.groupby.test_function.test_groupby_non_arithmetic_agg_types(dtype,method,data)
pandas.tests.groupby.test_function.test_groupby_quantile_with_arraylike_q_and_int_columns(frame_size,groupby,q)
pandas.tests.groupby.test_function.test_groupby_timedelta_cython_count()
pandas.tests.groupby.test_function.test_idxmin_idxmax_returns_int_types(func,values)
pandas.tests.groupby.test_function.test_intercept_builtin_sum()
pandas.tests.groupby.test_function.test_is_monotonic_decreasing(in_vals,out_vals)
pandas.tests.groupby.test_function.test_is_monotonic_increasing(in_vals,out_vals)
pandas.tests.groupby.test_function.test_lower_int_prec_count()
pandas.tests.groupby.test_function.test_max_min_non_numeric()
pandas.tests.groupby.test_function.test_max_nan_bug()
pandas.tests.groupby.test_function.test_median_empty_bins(observed)
pandas.tests.groupby.test_function.test_nlargest()
pandas.tests.groupby.test_function.test_nlargest_mi_grouper()
pandas.tests.groupby.test_function.test_non_cython_api()
pandas.tests.groupby.test_function.test_nsmallest()
pandas.tests.groupby.test_function.test_numpy_compat(func)
pandas.tests.groupby.test_function.test_nunique()
pandas.tests.groupby.test_function.test_nunique_preserves_column_level_names()
pandas.tests.groupby.test_function.test_nunique_with_NaT(key,data,dropna,expected)
pandas.tests.groupby.test_function.test_nunique_with_empty_series()
pandas.tests.groupby.test_function.test_nunique_with_object()
pandas.tests.groupby.test_function.test_nunique_with_timegrouper()
pandas.tests.groupby.test_function.test_ops_general(op,targop)
pandas.tests.groupby.test_function.test_pipe()
pandas.tests.groupby.test_function.test_pipe_args()
pandas.tests.groupby.test_function.test_quantile(interpolation,a_vals,b_vals,q)
pandas.tests.groupby.test_function.test_quantile_array()
pandas.tests.groupby.test_function.test_quantile_array2()
pandas.tests.groupby.test_function.test_quantile_array_multiple_levels()
pandas.tests.groupby.test_function.test_quantile_array_no_sort()
pandas.tests.groupby.test_function.test_quantile_missing_group_values_correct_results(key,val,expected_key,expected_val)
pandas.tests.groupby.test_function.test_quantile_missing_group_values_no_segfaults()
pandas.tests.groupby.test_function.test_quantile_out_of_bounds_q_raises()
pandas.tests.groupby.test_function.test_quantile_raises()
pandas.tests.groupby.test_function.test_series_describe_multikey()
pandas.tests.groupby.test_function.test_series_describe_single()
pandas.tests.groupby.test_function.test_series_groupby_nunique(n,m,sort,dropna)
pandas.tests.groupby.test_function.test_series_index_name(df)
pandas.tests.groupby.test_function.test_size(df)
pandas.tests.groupby.test_function.test_size_groupby_all_null()
pandas.tests.groupby.test_function.test_size_period_index()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/groupby/test_transform.py----------------------------------------
A:pandas.tests.groupby.test_transform.data->numpy.array([[1], [2], [3], [np.nan], [4]], dtype='float64')
A:pandas.tests.groupby.test_transform.index->pandas.MultiIndex.from_tuples(tuples=list(zip(*[date, symbol])), names=['date', 'symbol'])
A:pandas.tests.groupby.test_transform.grouped->df.sort_index().groupby('c')
A:pandas.tests.groupby.test_transform.transformed->df.sort_index().groupby('c').transform(lambda x: x * x.sum())
A:pandas.tests.groupby.test_transform.df->df.sort_index().sort_index()
A:pandas.tests.groupby.test_transform.expected->DataFrame({'C': [3, 3, 7, 7, 4, 4, 4, 4], 'D': [3, 3, 7, 7, 4, 4, 4, 4], 'E': [3, 3, 7, 7, 4, 4, 4, 4]}, index=MultiIndex.from_tuples([('bar', 'one'), ('bar', 'three'), ('flux', 'six'), ('flux', 'three'), ('foo', 'five'), ('foo', 'one'), ('foo', 'two'), ('foo', 'two')], names=['A', 'B']))
A:pandas.tests.groupby.test_transform.result->df.sort_index().sort_index().groupby(level='A').transform(lambda x: x.iloc[-1])
A:pandas.tests.groupby.test_transform.people->DataFrame(np.random.randn(5, 5), columns=['a', 'b', 'c', 'd', 'e'], index=['Joe', 'Steve', 'Wes', 'Jim', 'Travis'])
A:pandas.tests.groupby.test_transform.g->obj.groupby(np.repeat([0, 1], 3))
A:pandas.tests.groupby.test_transform.values->numpy.repeat(grp.mean().values, ensure_platform_int(grp.count().values))
A:pandas.tests.groupby.test_transform.agged->gp.mean(1)
A:pandas.tests.groupby.test_transform.res->df.sort_index().sort_index().groupby('key')['val'].transform(func)
A:pandas.tests.groupby.test_transform.r->len(base.index)
A:pandas.tests.groupby.test_transform.c->len(base.columns)
A:pandas.tests.groupby.test_transform.tso->DataFrame(np.random.randn(r, c), index=base.index, columns=base.columns, dtype='float64')
A:pandas.tests.groupby.test_transform.filled->df.sort_index().groupby('c').fillna(method='pad')
A:pandas.tests.groupby.test_transform.expected['C']->grouped['C'].transform(np.mean)
A:pandas.tests.groupby.test_transform.expected['D']->grouped['D'].transform(np.mean)
A:pandas.tests.groupby.test_transform.s->Series(np.random.randn(1000))
A:pandas.tests.groupby.test_transform.ans->numpy.zeros_like(data)
A:pandas.tests.groupby.test_transform.labels->numpy.random.randint(0, 50, size=1000).astype(float)
A:pandas.tests.groupby.test_transform.actual->numpy.zeros_like(data, dtype='int64')
A:pandas.tests.groupby.test_transform.s_missing->Series(np.random.randn(1000)).copy()
A:pandas.tests.groupby.test_transform.strings->list('qwertyuiopasdfghjklz')
A:pandas.tests.groupby.test_transform.df['cat']->df['string'].astype('category')
A:pandas.tests.groupby.test_transform.df2->df.sort_index().sort_index().copy()
A:pandas.tests.groupby.test_transform.df2.index->pandas.MultiIndex.from_product([range(100), range(10)])
A:pandas.tests.groupby.test_transform.gb->df.sort_index().sort_index().groupby('A')
A:pandas.tests.groupby.test_transform.i->gb[['int']].apply(targop)
A:pandas.tests.groupby.test_transform.f->gb[['float', 'float_missing']].apply(targop)
A:pandas.tests.groupby.test_transform.cols->pandas.MultiIndex.from_tuples([('syn', 'A'), ('mis', 'A'), ('non', 'A'), ('syn', 'C'), ('mis', 'C'), ('non', 'C'), ('syn', 'T'), ('mis', 'T'), ('non', 'T'), ('syn', 'G'), ('mis', 'G'), ('non', 'G')])
A:pandas.tests.groupby.test_transform.exp->pandas.Series([True, np.nan, True], name='val')
A:pandas.tests.groupby.test_transform._exp_vals->interweave(_exp_vals)
A:pandas.tests.groupby.test_transform.temp->list()
A:pandas.tests.groupby.test_transform.vals->interweave(vals)
A:pandas.tests.groupby.test_transform.key_v->numpy.repeat(keys, len(vals))
A:pandas.tests.groupby.test_transform.df_g->getattr(df.groupby('key'), fill_method)(limit=limit)
A:pandas.tests.groupby.test_transform.grp->getattr(df.groupby('key'), fill_method)(limit=limit).groupby(df.key)
A:pandas.tests.groupby.test_transform.date->pandas.to_datetime(['2018-01-01', '2018-01-01', '2018-01-01', '2018-01-01', '2018-01-02', '2018-01-01', '2018-01-02'])
A:pandas.tests.groupby.test_transform.result_single->df.sort_index().sort_index().groupby('group').value.transform(demean_rename)
A:pandas.tests.groupby.test_transform.ts->pandas.to_datetime('now', utc=True).tz_convert('Asia/Singapore')
A:pandas.tests.groupby.test_transform.result['max_end_time']->df.sort_index().sort_index().groupby(level='A').transform(lambda x: x.iloc[-1]).groupby('id').end_time.transform(func)
A:pandas.tests.groupby.test_transform.dates->pandas.date_range('1/1/2011', periods=10, freq='D')
A:pandas.tests.groupby.test_transform.stocks->pandas.DataFrame({'price': np.arange(10.0)}, index=dates)
A:pandas.tests.groupby.test_transform.x_cats->range(2)
A:pandas.tests.groupby.test_transform.args->{'nth': [0], 'quantile': [0.5]}.get(func, [])
A:pandas.tests.groupby.test_transform.gen->df.sort_index().sort_index().groupby('A').grouper.get_iterator(obj, axis=gb.axis)
A:pandas.tests.groupby.test_transform.(fast_path, slow_path)->df.sort_index().sort_index().groupby('A')._define_paths(func)
A:pandas.tests.groupby.test_transform.(_, group)->next(gen)
pandas.tests.groupby.test_transform._check_cython_group_transform_cumulative(pd_op,np_op,dtype)
pandas.tests.groupby.test_transform.assert_fp_equal(a,b)
pandas.tests.groupby.test_transform.test_any_all_np_func(func)
pandas.tests.groupby.test_transform.test_cython_group_transform_algos()
pandas.tests.groupby.test_transform.test_cython_group_transform_cumprod()
pandas.tests.groupby.test_transform.test_cython_group_transform_cumsum(any_real_dtype)
pandas.tests.groupby.test_transform.test_cython_transform_frame(op,args,targop)
pandas.tests.groupby.test_transform.test_cython_transform_series(op,args,targop)
pandas.tests.groupby.test_transform.test_dispatch_transform(tsframe)
pandas.tests.groupby.test_transform.test_ffill_bfill_non_unique_multilevel(func,expected_status)
pandas.tests.groupby.test_transform.test_ffill_not_in_axis(func,key,val)
pandas.tests.groupby.test_transform.test_group_fill_methods(mix_groupings,as_series,val1,val2,fill_method,limit,exp_vals)
pandas.tests.groupby.test_transform.test_groupby_cum_skipna(op,skipna,input,exp)
pandas.tests.groupby.test_transform.test_groupby_transform_rename()
pandas.tests.groupby.test_transform.test_groupby_transform_timezone_column(func)
pandas.tests.groupby.test_transform.test_groupby_transform_with_datetimes(func,values)
pandas.tests.groupby.test_transform.test_groupby_transform_with_dts(func,values)
pandas.tests.groupby.test_transform.test_groupby_transform_with_int()
pandas.tests.groupby.test_transform.test_groupby_transform_with_nan_group()
pandas.tests.groupby.test_transform.test_pad_stable_sorting(fill_method)
pandas.tests.groupby.test_transform.test_pct_change(test_series,freq,periods,fill_method,limit)
pandas.tests.groupby.test_transform.test_series_fast_transform_date()
pandas.tests.groupby.test_transform.test_transform()
pandas.tests.groupby.test_transform.test_transform_absent_categories(func)
pandas.tests.groupby.test_transform.test_transform_agg_by_name(reduction_func,obj)
pandas.tests.groupby.test_transform.test_transform_axis(tsframe)
pandas.tests.groupby.test_transform.test_transform_broadcast(tsframe,ts)
pandas.tests.groupby.test_transform.test_transform_bug()
pandas.tests.groupby.test_transform.test_transform_casting()
pandas.tests.groupby.test_transform.test_transform_coercion()
pandas.tests.groupby.test_transform.test_transform_datetime_to_numeric()
pandas.tests.groupby.test_transform.test_transform_datetime_to_timedelta()
pandas.tests.groupby.test_transform.test_transform_dt_to_numeric()
pandas.tests.groupby.test_transform.test_transform_dt_to_timedelta()
pandas.tests.groupby.test_transform.test_transform_dtype()
pandas.tests.groupby.test_transform.test_transform_exclude_nuisance(df)
pandas.tests.groupby.test_transform.test_transform_fast()
pandas.tests.groupby.test_transform.test_transform_fastpath_raises()
pandas.tests.groupby.test_transform.test_transform_function_aliases(df)
pandas.tests.groupby.test_transform.test_transform_invalid_name_raises()
pandas.tests.groupby.test_transform.test_transform_lambda_indexing()
pandas.tests.groupby.test_transform.test_transform_lambda_with_datetimetz()
pandas.tests.groupby.test_transform.test_transform_lambda_with_dttz()
pandas.tests.groupby.test_transform.test_transform_length()
pandas.tests.groupby.test_transform.test_transform_mixed_type()
pandas.tests.groupby.test_transform.test_transform_multiple(ts)
pandas.tests.groupby.test_transform.test_transform_numeric_ret(cols,exp,comp_func,agg_func,request)
pandas.tests.groupby.test_transform.test_transform_numeric_to_boolean()
pandas.tests.groupby.test_transform.test_transform_select_columns(df)
pandas.tests.groupby.test_transform.test_transform_with_non_scalar_group()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/groupby/test_index_as_string.py----------------------------------------
A:pandas.tests.groupby.test_index_as_string.df->pandas.DataFrame({'outer': ['a', 'a', 'a', 'b', 'b', 'b'], 'inner': [1, 2, 3, 1, 2, 3], 'A': np.arange(6), 'B': ['one', 'one', 'two', 'two', 'one', 'one']})
A:pandas.tests.groupby.test_index_as_string.result->series.groupby(levels).mean()
A:pandas.tests.groupby.test_index_as_string.expected->series.groupby(groupers).mean()
A:pandas.tests.groupby.test_index_as_string.groupers->pandas.Grouper(level=levels)
pandas.tests.groupby.test_index_as_string.frame(request)
pandas.tests.groupby.test_index_as_string.series()
pandas.tests.groupby.test_index_as_string.test_grouper_index_level_as_string(frame,key_strs,groupers)
pandas.tests.groupby.test_index_as_string.test_grouper_index_level_as_string_series(series,levels)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/groupby/test_grouping.py----------------------------------------
A:pandas.tests.groupby.test_grouping.df->DataFrame([[1, 2, 3]], columns=mi)
A:pandas.tests.groupby.test_grouping.g->pandas.DataFrame([3, 1, 7, 6]).groupby(pd.cut(d[0], bins), observed=observed)
A:pandas.tests.groupby.test_grouping.grouped->DataFrame([[1, 2, 3]], columns=mi).groupby([pd.Grouper(freq='M'), 'event'])
A:pandas.tests.groupby.test_grouping.c->DataFrame([[1, 2, 3]], columns=mi).groupby([pd.Grouper(freq='M'), 'event']).count()
A:pandas.tests.groupby.test_grouping.result->df.groupby(df['A', 'a']).grouper.groupings[0].__repr__()
A:pandas.tests.groupby.test_grouping.expected->DataFrame({'ids': [(dt[0],), (dt[0],)]}, index=[0, 2])
A:pandas.tests.groupby.test_grouping.result2->pandas.DataFrame([3, 1, 7, 6]).groupby(pd.cut(d[0], bins), observed=observed).get_group((Timestamp(key[0]).to_pydatetime(), key[1]))
A:pandas.tests.groupby.test_grouping.as_frame->DataFrame([[1, 2, 3]], columns=mi).loc[:, ['A', 'C']].groupby('A').mean()
A:pandas.tests.groupby.test_grouping.df.index->list(reversed(df.index.tolist()))
A:pandas.tests.groupby.test_grouping.dates->date_range('01-Jan-2013', periods=12, freq='MS')
A:pandas.tests.groupby.test_grouping.date_index->pandas.MultiIndex.from_product([dates, dates], names=['foo', 'bar'])
A:pandas.tests.groupby.test_grouping.expected.columns->pandas.Index([0], dtype='int64')
A:pandas.tests.groupby.test_grouping.s->Series(np.arange(6))
A:pandas.tests.groupby.test_grouping.idx->pandas.MultiIndex.from_tuples([(1, 1), (1, 2), (3, 4), (5, 6)], names=idx_names)
A:pandas.tests.groupby.test_grouping.df_multi->pandas.DataFrame({'A': np.arange(6), 'B': ['one', 'one', 'two', 'two', 'one', 'one']}, index=idx)
A:pandas.tests.groupby.test_grouping.df_single->pandas.DataFrame({'A': np.arange(6), 'B': ['one', 'one', 'two', 'two', 'one', 'one']}, index=idx).reset_index('outer')
A:pandas.tests.groupby.test_grouping.by_levels->DataFrame([[1, 2, 3]], columns=mi).groupby(level=idx_names).mean()
A:pandas.tests.groupby.test_grouping.by_columns->DataFrame([[1, 2, 3]], columns=mi).reset_index().groupby(idx_names).mean()
A:pandas.tests.groupby.test_grouping.by_columns.columns->pandas.Index(by_columns.columns, dtype=np.int64)
A:pandas.tests.groupby.test_grouping.data->numpy.array([[1, 2, 1, 2], [1, 2, 1, 2], [1, 2, 1, 2], [1, 2, 1, 2], [1, 2, 1, 2]], int)
A:pandas.tests.groupby.test_grouping.cat_columns->CategoricalIndex(columns, categories=categories, ordered=True)
A:pandas.tests.groupby.test_grouping.expected_data->numpy.array([[4, 2], [4, 2], [4, 2], [4, 2], [4, 2]], int)
A:pandas.tests.groupby.test_grouping.expected_columns->CategoricalIndex(categories, categories=categories, ordered=True)
A:pandas.tests.groupby.test_grouping.expected2->Series(np.arange(6)).groupby([0, 0, 1, 1]).mean()
A:pandas.tests.groupby.test_grouping.ts->Series(np.random.randn(12), index=dates)
A:pandas.tests.groupby.test_grouping.df.columns->numpy.arange(len(df.columns))
A:pandas.tests.groupby.test_grouping.midx->pandas.MultiIndex.from_tuples(lst)
A:pandas.tests.groupby.test_grouping.df2->pandas.DataFrame(df.values, columns=pd.MultiIndex.from_arrays([['a', 'b', 'b', 'c'], ['d', 'd', 'e', 'e']]))
A:pandas.tests.groupby.test_grouping.df3->pandas.DataFrame(df.values, columns=[('a', 'd'), ('b', 'd'), ('b', 'e'), 'c'])
A:pandas.tests.groupby.test_grouping.deleveled->frame.reset_index()
A:pandas.tests.groupby.test_grouping.result0->frame.T.groupby(level=0, axis=1, sort=sort).sum()
A:pandas.tests.groupby.test_grouping.result1->pandas.DataFrame([3, 1, 7, 6]).groupby(pd.cut(d[0], bins), observed=observed).get_group(key)
A:pandas.tests.groupby.test_grouping.expected0->frame.groupby(deleveled['first'].values, sort=sort).sum()
A:pandas.tests.groupby.test_grouping.expected1->frame.groupby(deleveled['second'].values, sort=sort).sum()
A:pandas.tests.groupby.test_grouping.index->pandas.DatetimeIndex(())
A:pandas.tests.groupby.test_grouping.exp_labels->numpy.array([2, 2, 2, 0, 0, 1, 1, 3, 3, 3], dtype=np.intp)
A:pandas.tests.groupby.test_grouping.grouper->pandas.Grouper(freq='D')
A:pandas.tests.groupby.test_grouping.gr->DataFrame([[1, 2, 3]], columns=mi).groupby(df['A', 'a'])
A:pandas.tests.groupby.test_grouping.result3->pandas.DataFrame([3, 1, 7, 6]).groupby(pd.cut(d[0], bins), observed=observed).get_group((str(Timestamp(key[0])), key[1]))
A:pandas.tests.groupby.test_grouping.d->pandas.DataFrame([3, 1, 7, 6])
A:pandas.tests.groupby.test_grouping.dt->pandas.to_datetime(['2010-01-01', '2010-01-02', '2010-01-01', '2010-01-02'])
A:pandas.tests.groupby.test_grouping.series->pandas.Series(data, index, dtype=object)
A:pandas.tests.groupby.test_grouping.exp->pandas.DataFrame(index=pd.Index(['a', 'b', 's'], name='a'))
A:pandas.tests.groupby.test_grouping.k1->numpy.array(['b', 'b', 'b', 'a', 'a', 'a'])
A:pandas.tests.groupby.test_grouping.k2->numpy.array(['1', '2', '1', '2', '1', '2'])
A:pandas.tests.groupby.test_grouping.iterated->list(grouped)
A:pandas.tests.groupby.test_grouping.df['k1']->numpy.array(['b', 'b', 'b', 'a', 'a', 'a'])
A:pandas.tests.groupby.test_grouping.df['k2']->numpy.array(['1', '1', '1', '2', '2', '2'])
A:pandas.tests.groupby.test_grouping.three_levels->three_group.groupby(['A', 'B', 'C']).mean()
A:pandas.tests.groupby.test_grouping.res->DataFrame([[1, 2, 3]], columns=mi).groupby([pd.Grouper(freq='M'), 'event']).get_group((pd.Timestamp('2014-08-31'), 'start'))
A:pandas.tests.groupby.test_grouping.mi->pandas.MultiIndex.from_arrays([list('AAB'), list('aba')])
pandas.tests.groupby.test_grouping.TestGetGroup
pandas.tests.groupby.test_grouping.TestGetGroup.test_gb_key_len_equal_axis_len(self)
pandas.tests.groupby.test_grouping.TestGetGroup.test_get_group(self)
pandas.tests.groupby.test_grouping.TestGetGroup.test_get_group_empty_bins(self,observed)
pandas.tests.groupby.test_grouping.TestGetGroup.test_get_group_grouped_by_tuple(self)
pandas.tests.groupby.test_grouping.TestGetGroup.test_groupby_with_empty(self)
pandas.tests.groupby.test_grouping.TestGetGroup.test_groupby_with_single_column(self)
pandas.tests.groupby.test_grouping.TestGrouping
pandas.tests.groupby.test_grouping.TestGrouping.test_empty_groups(self,df)
pandas.tests.groupby.test_grouping.TestGrouping.test_evaluate_with_empty_groups(self,func,expected)
pandas.tests.groupby.test_grouping.TestGrouping.test_groupby_args(self,mframe)
pandas.tests.groupby.test_grouping.TestGrouping.test_groupby_categorical_index_and_columns(self,observed)
pandas.tests.groupby.test_grouping.TestGrouping.test_groupby_dict_mapping(self)
pandas.tests.groupby.test_grouping.TestGrouping.test_groupby_empty(self)
pandas.tests.groupby.test_grouping.TestGrouping.test_groupby_grouper(self,df)
pandas.tests.groupby.test_grouping.TestGrouping.test_groupby_grouper_f_sanity_checked(self)
pandas.tests.groupby.test_grouping.TestGrouping.test_groupby_level(self,sort,mframe,df)
pandas.tests.groupby.test_grouping.TestGrouping.test_groupby_level_index_names(self,axis)
pandas.tests.groupby.test_grouping.TestGrouping.test_groupby_level_index_value_all_na(self)
pandas.tests.groupby.test_grouping.TestGrouping.test_groupby_level_with_nas(self,sort)
pandas.tests.groupby.test_grouping.TestGrouping.test_groupby_levels_and_columns(self)
pandas.tests.groupby.test_grouping.TestGrouping.test_groupby_multiindex_level_empty(self)
pandas.tests.groupby.test_grouping.TestGrouping.test_groupby_multiindex_tuple(self)
pandas.tests.groupby.test_grouping.TestGrouping.test_grouper_column_and_index(self)
pandas.tests.groupby.test_grouping.TestGrouping.test_grouper_creation_bug(self)
pandas.tests.groupby.test_grouping.TestGrouping.test_grouper_getting_correct_binner(self)
pandas.tests.groupby.test_grouping.TestGrouping.test_grouper_index_types(self)
pandas.tests.groupby.test_grouping.TestGrouping.test_grouper_iter(self,df)
pandas.tests.groupby.test_grouping.TestGrouping.test_grouper_multilevel_freq(self)
pandas.tests.groupby.test_grouping.TestGrouping.test_grouping_error_on_multidim_input(self,df)
pandas.tests.groupby.test_grouping.TestGrouping.test_grouping_labels(self,mframe)
pandas.tests.groupby.test_grouping.TestGrouping.test_level_preserve_order(self,sort,labels,mframe)
pandas.tests.groupby.test_grouping.TestGrouping.test_list_grouper_with_nat(self)
pandas.tests.groupby.test_grouping.TestGrouping.test_multifunc_select_col_integer_cols(self,df)
pandas.tests.groupby.test_grouping.TestGrouping.test_multiindex_columns_empty_level(self)
pandas.tests.groupby.test_grouping.TestGrouping.test_multiindex_negative_level(self,mframe)
pandas.tests.groupby.test_grouping.TestGrouping.test_multiindex_passthru(self)
pandas.tests.groupby.test_grouping.TestIteration
pandas.tests.groupby.test_grouping.TestIteration.test_dictify(self,df)
pandas.tests.groupby.test_grouping.TestIteration.test_groupby_with_small_elem(self)
pandas.tests.groupby.test_grouping.TestIteration.test_grouping_is_iterable(self,tsframe)
pandas.tests.groupby.test_grouping.TestIteration.test_grouping_string_repr(self)
pandas.tests.groupby.test_grouping.TestIteration.test_groups(self,df)
pandas.tests.groupby.test_grouping.TestIteration.test_multi_iter(self)
pandas.tests.groupby.test_grouping.TestIteration.test_multi_iter_frame(self,three_group)
pandas.tests.groupby.test_grouping.TestSelection
pandas.tests.groupby.test_grouping.TestSelection.test_column_select_via_attr(self,df)
pandas.tests.groupby.test_grouping.TestSelection.test_getitem_list_of_columns(self)
pandas.tests.groupby.test_grouping.TestSelection.test_getitem_numeric_column_names(self)
pandas.tests.groupby.test_grouping.TestSelection.test_getitem_single_column(self)
pandas.tests.groupby.test_grouping.TestSelection.test_getitem_single_list_of_columns(self,df)
pandas.tests.groupby.test_grouping.TestSelection.test_groupby_duplicated_column_errormsg(self)
pandas.tests.groupby.test_grouping.TestSelection.test_select_bad_cols(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/groupby/test_whitelist.py----------------------------------------
A:pandas.tests.groupby.test_whitelist.index->MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'], ['one', 'two', 'three']], codes=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3], [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]], names=['first', 'second'])
A:pandas.tests.groupby.test_whitelist.letters->numpy.array(list(ascii_lowercase))
A:pandas.tests.groupby.test_whitelist.random_letters->numpy.array(list(ascii_lowercase)).take(np.random.randint(0, 26, N))
A:pandas.tests.groupby.test_whitelist.df->DataFrame({'floats': N / 10 * Series(np.random.random(N)), 'letters': Series(random_letters)})
A:pandas.tests.groupby.test_whitelist.gb->obj.groupby(df.letters)
A:pandas.tests.groupby.test_whitelist.f->getattr(grp, name)
A:pandas.tests.groupby.test_whitelist.raw_frame->DataFrame(np.random.randn(10, 3), index=index, columns=Index(['A', 'B', 'C'], name='exp'))
A:pandas.tests.groupby.test_whitelist.grouped->frame.groupby(level=level, axis=axis, sort=sort)
A:pandas.tests.groupby.test_whitelist.result->getattr(grouped, op)()
A:pandas.tests.groupby.test_whitelist.expected->expected.sort_index(axis=axis, level=level).sort_index(axis=axis, level=level)
A:pandas.tests.groupby.test_whitelist.grp->mframe.groupby(mframe.iloc[:, 0])
A:pandas.tests.groupby.test_whitelist.rng->date_range('2014', periods=len(df))
A:pandas.tests.groupby.test_whitelist.g_exp->df[['C']].groupby(df['A'])
A:pandas.tests.groupby.test_whitelist.res->getattr(g, m)()
A:pandas.tests.groupby.test_whitelist.exp->getattr(g_exp, m)()
A:pandas.tests.groupby.test_whitelist.new_names->set(names)
pandas.tests.groupby.test_whitelist.check_whitelist(obj,df,m)
pandas.tests.groupby.test_whitelist.df()
pandas.tests.groupby.test_whitelist.df_letters()
pandas.tests.groupby.test_whitelist.df_whitelist_fixture(request)
pandas.tests.groupby.test_whitelist.mframe()
pandas.tests.groupby.test_whitelist.raw_frame()
pandas.tests.groupby.test_whitelist.s_whitelist_fixture(request)
pandas.tests.groupby.test_whitelist.test_all_methods_categorized(mframe)
pandas.tests.groupby.test_whitelist.test_groupby_blacklist(df_letters)
pandas.tests.groupby.test_whitelist.test_groupby_frame_whitelist(df_letters,df_whitelist_fixture)
pandas.tests.groupby.test_whitelist.test_groupby_function_rename(mframe)
pandas.tests.groupby.test_whitelist.test_groupby_selection_with_methods(df)
pandas.tests.groupby.test_whitelist.test_groupby_series_whitelist(df_letters,s_whitelist_fixture)
pandas.tests.groupby.test_whitelist.test_groupby_whitelist(df_letters,whitelist)
pandas.tests.groupby.test_whitelist.test_regression_whitelist_methods(raw_frame,op,level,axis,skipna,sort)
pandas.tests.groupby.test_whitelist.test_tab_completion(mframe)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/groupby/test_nth.py----------------------------------------
A:pandas.tests.groupby.test_nth.grouped->DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'foo', 'foo', 'foo'], 'B': ['one', 'one', 'one', 'two', 'one', 'one', 'one', 'two', 'two', 'two', 'one'], 'C': ['dull', 'dull', 'shiny', 'dull', 'dull', 'shiny', 'shiny', 'dull', 'shiny', 'shiny', 'shiny']}).groupby(['A', 'B'])
A:pandas.tests.groupby.test_nth.first->DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'foo', 'foo', 'foo'], 'B': ['one', 'one', 'one', 'two', 'one', 'one', 'one', 'two', 'two', 'two', 'one'], 'C': ['dull', 'dull', 'shiny', 'dull', 'dull', 'shiny', 'shiny', 'dull', 'shiny', 'shiny', 'shiny']}).groupby(['A', 'B']).first()
A:pandas.tests.groupby.test_nth.expected.index->Index(['bar', 'foo'], name='A')
A:pandas.tests.groupby.test_nth.expected->pandas.DataFrame([[2, 3], [6, 7]], columns=list('bc'), index=Index(['abc', 'def'], name='a'))
A:pandas.tests.groupby.test_nth.nth->DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'foo', 'foo', 'foo'], 'B': ['one', 'one', 'one', 'two', 'one', 'one', 'one', 'two', 'two', 'two', 'one'], 'C': ['dull', 'dull', 'shiny', 'dull', 'dull', 'shiny', 'shiny', 'dull', 'shiny', 'shiny', 'shiny']}).groupby(['A', 'B']).nth(1)
A:pandas.tests.groupby.test_nth.last->DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'foo', 'foo', 'foo'], 'B': ['one', 'one', 'one', 'two', 'one', 'one', 'one', 'two', 'two', 'two', 'one'], 'C': ['dull', 'dull', 'shiny', 'dull', 'dull', 'shiny', 'shiny', 'dull', 'shiny', 'shiny', 'shiny']}).groupby(['A', 'B']).last()
A:pandas.tests.groupby.test_nth.df->DataFrame([[np.nan, 0, 1], ['abc', 2, 3], [np.nan, 4, 5], ['def', 6, 7], [np.nan, 8, 9]], columns=list('abc'))
A:pandas.tests.groupby.test_nth.g->DataFrame([[np.nan, 0, 1], ['abc', 2, 3], [np.nan, 4, 5], ['def', 6, 7], [np.nan, 8, 9]], columns=list('abc')).groupby('A')
A:pandas.tests.groupby.test_nth.result->DataFrame([[np.nan, 0, 1], ['abc', 2, 3], [np.nan, 4, 5], ['def', 6, 7], [np.nan, 8, 9]], columns=list('abc')).groupby('a').nth(0, dropna=dropna)
A:pandas.tests.groupby.test_nth.groups->DataFrame([[np.nan, 0, 1], ['abc', 2, 3], [np.nan, 4, 5], ['def', 6, 7], [np.nan, 8, 9]], columns=list('abc')).groupby('id', as_index=False)
A:pandas.tests.groupby.test_nth.values->numpy.array(values, dtype=result['b'].dtype)
A:pandas.tests.groupby.test_nth.idx->Index([1, 2], name='a')
A:pandas.tests.groupby.test_nth.s->Series(data=range(11), index=idx, name='IntCol')
A:pandas.tests.groupby.test_nth.f->Series(data=range(11), index=idx, name='IntCol').groupby(level=0).first()
A:pandas.tests.groupby.test_nth.test->pandas.DataFrame({pd.Timestamp('2012-01-01 00:00:00'): ['a', 'b'], pd.Timestamp('2012-01-02 00:00:00'): ['c', 'd'], 'name': ['e', 'e'], 'aaaa': ['f', 'g']})
A:pandas.tests.groupby.test_nth.exp->DataFrame([[np.nan, 0, 1], ['abc', 2, 3], [np.nan, 4, 5], ['def', 6, 7], [np.nan, 8, 9]], columns=list('abc')).set_index('A')
A:pandas.tests.groupby.test_nth.expected2->Series(data=range(11), index=idx, name='IntCol').groupby(g).apply(lambda x: x.iloc[0])
A:pandas.tests.groupby.test_nth.business_dates->pandas.date_range(start='4/1/2014', end='6/30/2014', freq='B')
A:pandas.tests.groupby.test_nth.expected_dates->pandas.to_datetime(['2014/4/1', '2014/4/4', '2014/4/29', '2014/4/30', '2014/5/1', '2014/5/6', '2014/5/29', '2014/5/30', '2014/6/2', '2014/6/5', '2014/6/27', '2014/6/30'])
A:pandas.tests.groupby.test_nth.category_string->pandas.Series(list('abc')).astype('category')
A:pandas.tests.groupby.test_nth.expected_series->Series(values, name='b', index=idx)
A:pandas.tests.groupby.test_nth.expected_frame->DataFrame({'b': values}, index=idx)
A:pandas.tests.groupby.test_nth.result_series->getattr(grouped['b'], function)()
A:pandas.tests.groupby.test_nth.result_frame->DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'foo', 'foo', 'foo'], 'B': ['one', 'one', 'one', 'two', 'one', 'one', 'one', 'two', 'two', 'two', 'one'], 'C': ['dull', 'dull', 'shiny', 'dull', 'dull', 'shiny', 'shiny', 'dull', 'shiny', 'shiny', 'shiny']}).groupby(['A', 'B']).agg({'b': function})
A:pandas.tests.groupby.test_nth.three_group->DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'foo', 'foo', 'foo'], 'B': ['one', 'one', 'one', 'two', 'one', 'one', 'one', 'two', 'two', 'two', 'one'], 'C': ['dull', 'dull', 'shiny', 'dull', 'dull', 'shiny', 'shiny', 'dull', 'shiny', 'shiny', 'shiny']})
A:pandas.tests.groupby.test_nth.g_as->DataFrame([[np.nan, 0, 1], ['abc', 2, 3], [np.nan, 4, 5], ['def', 6, 7], [np.nan, 8, 9]], columns=list('abc')).groupby('A', as_index=True)
A:pandas.tests.groupby.test_nth.g_not_as->DataFrame([[np.nan, 0, 1], ['abc', 2, 3], [np.nan, 4, 5], ['def', 6, 7], [np.nan, 8, 9]], columns=list('abc')).groupby('A', as_index=False)
A:pandas.tests.groupby.test_nth.empty_not_as->DataFrame(columns=df.columns, index=pd.Index([], dtype=df.index.dtype))
A:pandas.tests.groupby.test_nth.empty_not_as['A']->empty_not_as['A'].astype(df.A.dtype).astype(df.A.dtype)
A:pandas.tests.groupby.test_nth.empty_not_as['B']->empty_not_as['B'].astype(df.B.dtype).astype(df.B.dtype)
A:pandas.tests.groupby.test_nth.empty_as->DataFrame(index=df_as.index[:0], columns=df.columns)
A:pandas.tests.groupby.test_nth.empty_as['A']->empty_not_as['A'].astype(df.A.dtype).astype(df.A.dtype).astype(df.A.dtype)
A:pandas.tests.groupby.test_nth.empty_as['B']->empty_not_as['B'].astype(df.B.dtype).astype(df.B.dtype).astype(df.B.dtype)
A:pandas.tests.groupby.test_nth.result1->DataFrame([[np.nan, 0, 1], ['abc', 2, 3], [np.nan, 4, 5], ['def', 6, 7], [np.nan, 8, 9]], columns=list('abc')).groupby('A').nth(0)
A:pandas.tests.groupby.test_nth.result2->DataFrame([[np.nan, 0, 1], ['abc', 2, 3], [np.nan, 4, 5], ['def', 6, 7], [np.nan, 8, 9]], columns=list('abc')).groupby('A').tail(n=2)
pandas.tests.groupby.test_nth.test_first_last_extension_array_keeps_dtype(values,function)
pandas.tests.groupby.test_nth.test_first_last_nth(df)
pandas.tests.groupby.test_nth.test_first_last_nth_dtypes(df_mixed_floats)
pandas.tests.groupby.test_nth.test_first_last_tz(data,expected_first,expected_last)
pandas.tests.groupby.test_nth.test_first_last_tz_multi_column(method,ts,alpha)
pandas.tests.groupby.test_nth.test_first_last_with_None(method)
pandas.tests.groupby.test_nth.test_first_last_with_na_object(method,nulls_fixture)
pandas.tests.groupby.test_nth.test_first_strings_timestamps()
pandas.tests.groupby.test_nth.test_group_selection_cache()
pandas.tests.groupby.test_nth.test_groupby_head_tail()
pandas.tests.groupby.test_nth.test_nth()
pandas.tests.groupby.test_nth.test_nth_column_order()
pandas.tests.groupby.test_nth.test_nth_empty()
pandas.tests.groupby.test_nth.test_nth_multi_index(three_group)
pandas.tests.groupby.test_nth.test_nth_multi_index_as_expected()
pandas.tests.groupby.test_nth.test_nth_nan_in_grouper(dropna)
pandas.tests.groupby.test_nth.test_nth_with_na_object(index,nulls_fixture)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/groupby/conftest.py----------------------------------------
A:pandas.tests.groupby.conftest.index->MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'], ['one', 'two', 'three']], codes=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3], [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]], names=['first', 'second'])
pandas.tests.groupby.conftest.df()
pandas.tests.groupby.conftest.df_mixed_floats()
pandas.tests.groupby.conftest.groupby_func(request)
pandas.tests.groupby.conftest.mframe()
pandas.tests.groupby.conftest.reduction_func(request)
pandas.tests.groupby.conftest.three_group()
pandas.tests.groupby.conftest.transformation_func(request)
pandas.tests.groupby.conftest.ts()
pandas.tests.groupby.conftest.tsd()
pandas.tests.groupby.conftest.tsframe(tsd)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/groupby/test_filters.py----------------------------------------
A:pandas.tests.groupby.test_filters.s->Series(np.random.randint(0, 100, 1000))
A:pandas.tests.groupby.test_filters.expected_odd->pandas.DataFrame([1, 3, 5, 7], index=[0, 1, 3, 6])
A:pandas.tests.groupby.test_filters.expected_even->pandas.DataFrame([20, 22, 24], index=[2, 4, 5])
A:pandas.tests.groupby.test_filters.grouper->pandas.DataFrame([['best', 'a', 1], ['worst', 'b', 1], ['best', 'c', 1], ['best', 'd', 1], ['worst', 'd', 1], ['worst', 'd', 1], ['best', 'd', 1]], columns=['a', 'b', 'c']).floats.apply(lambda x: np.round(x, -1))
A:pandas.tests.groupby.test_filters.grouped->pandas.DataFrame([['best', 'a', 1], ['worst', 'b', 1], ['best', 'c', 1], ['best', 'd', 1], ['worst', 'd', 1], ['worst', 'd', 1], ['best', 'd', 1]], columns=['a', 'b', 'c']).groupby(['B', 'C'])
A:pandas.tests.groupby.test_filters.df->pandas.DataFrame([['best', 'a', 1], ['worst', 'b', 1], ['best', 'c', 1], ['best', 'd', 1], ['worst', 'd', 1], ['worst', 'd', 1], ['best', 'd', 1]], columns=['a', 'b', 'c'])
A:pandas.tests.groupby.test_filters.expected->Series([1, 2, 2, 1, 2, 1, 1, 2], index, name='pid')
A:pandas.tests.groupby.test_filters.filtered->pandas.DataFrame([['best', 'a', 1], ['worst', 'b', 1], ['best', 'c', 1], ['best', 'd', 1], ['worst', 'd', 1], ['worst', 'd', 1], ['best', 'd', 1]], columns=['a', 'b', 'c']).groupby(['B', 'C']).filter(lambda x: x['A'].mean() > 0)
A:pandas.tests.groupby.test_filters.res->res.filter(lambda x: x['b'].sum() > 5, dropna=True).filter(lambda x: x['b'].sum() > 5, dropna=True)
A:pandas.tests.groupby.test_filters.index->list('bbbcbbab')
A:pandas.tests.groupby.test_filters.data->pandas.Series(np.random.rand(9), index=np.repeat([1, 2, 3], 3))
A:pandas.tests.groupby.test_filters.result->pandas.DataFrame([['best', 'a', 1], ['worst', 'b', 1], ['best', 'c', 1], ['best', 'd', 1], ['worst', 'd', 1], ['worst', 'd', 1], ['best', 'd', 1]], columns=['a', 'b', 'c']).groupby(['B', 'C']).transform(len)
A:pandas.tests.groupby.test_filters.g_df->pandas.DataFrame([['best', 'a', 1], ['worst', 'b', 1], ['best', 'c', 1], ['best', 'd', 1], ['worst', 'd', 1], ['worst', 'd', 1], ['best', 'd', 1]], columns=['a', 'b', 'c']).groupby(df['B'])
A:pandas.tests.groupby.test_filters.g_s->Series(np.random.randint(0, 100, 1000)).groupby(s)
A:pandas.tests.groupby.test_filters.new_way->pandas.DataFrame([['best', 'a', 1], ['worst', 'b', 1], ['best', 'c', 1], ['best', 'd', 1], ['worst', 'd', 1], ['worst', 'd', 1], ['best', 'd', 1]], columns=['a', 'b', 'c']).groupby(['B', 'C']).filter(lambda x: x['ints'].mean() > N / 20)
A:pandas.tests.groupby.test_filters.letters->numpy.array(list(ascii_lowercase))
A:pandas.tests.groupby.test_filters.random_letters->numpy.array(list(ascii_lowercase)).take(np.random.randint(0, 26, N))
A:pandas.tests.groupby.test_filters.actual->df.groupby('tag').pid.transform(len)
A:pandas.tests.groupby.test_filters.df.index->numpy.arange(len(df) - 1, -1, -1)
A:pandas.tests.groupby.test_filters.grouped_df->pandas.DataFrame([['best', 'a', 1], ['worst', 'b', 1], ['best', 'c', 1], ['best', 'd', 1], ['worst', 'd', 1], ['worst', 'd', 1], ['best', 'd', 1]], columns=['a', 'b', 'c']).groupby('tag')
A:pandas.tests.groupby.test_filters.grouped_ser->ser.groupby(df['tag'])
A:pandas.tests.groupby.test_filters.t0->Timestamp('2013-09-30 00:05:00')
A:pandas.tests.groupby.test_filters.t1->Timestamp('2013-10-30 00:05:00')
A:pandas.tests.groupby.test_filters.t2->Timestamp('2013-11-30 00:05:00')
A:pandas.tests.groupby.test_filters.g->pandas.DataFrame([['best', 'a', 1], ['worst', 'b', 1], ['best', 'c', 1], ['best', 'd', 1], ['worst', 'd', 1], ['worst', 'd', 1], ['best', 'd', 1]], columns=['a', 'b', 'c']).groupby('A')
A:pandas.tests.groupby.test_filters.filt->pandas.DataFrame([['best', 'a', 1], ['worst', 'b', 1], ['best', 'c', 1], ['best', 'd', 1], ['worst', 'd', 1], ['worst', 'd', 1], ['best', 'd', 1]], columns=['a', 'b', 'c']).groupby('A').filter(lambda x: x['A'].sum() == 2)
A:pandas.tests.groupby.test_filters.groupped->pandas.Series(np.random.rand(9), index=np.repeat([1, 2, 3], 3)).groupby(level=0)
A:pandas.tests.groupby.test_filters.result_false->pandas.Series(np.random.rand(9), index=np.repeat([1, 2, 3], 3)).groupby(level=0).filter(lambda x: x.mean() > 1, dropna=False)
A:pandas.tests.groupby.test_filters.expected_false->pandas.Series([np.nan] * 9, index=np.repeat([1, 2, 3], 3))
A:pandas.tests.groupby.test_filters.result_true->pandas.Series(np.random.rand(9), index=np.repeat([1, 2, 3], 3)).groupby(level=0).filter(lambda x: x.mean() > 1, dropna=True)
A:pandas.tests.groupby.test_filters.expected_true->pandas.Series(index=pd.Index([], dtype=int), dtype=np.float64)
pandas.tests.groupby.test_filters.test_filter_against_workaround()
pandas.tests.groupby.test_filters.test_filter_and_transform_with_multiple_non_unique_int_index()
pandas.tests.groupby.test_filters.test_filter_and_transform_with_non_unique_float_index()
pandas.tests.groupby.test_filters.test_filter_and_transform_with_non_unique_int_index()
pandas.tests.groupby.test_filters.test_filter_and_transform_with_non_unique_string_index()
pandas.tests.groupby.test_filters.test_filter_and_transform_with_non_unique_timestamp_index()
pandas.tests.groupby.test_filters.test_filter_bad_shapes()
pandas.tests.groupby.test_filters.test_filter_condition_raises()
pandas.tests.groupby.test_filters.test_filter_dropna_with_empty_groups()
pandas.tests.groupby.test_filters.test_filter_enforces_scalarness()
pandas.tests.groupby.test_filters.test_filter_has_access_to_grouped_cols()
pandas.tests.groupby.test_filters.test_filter_maintains_ordering()
pandas.tests.groupby.test_filters.test_filter_mixed_df()
pandas.tests.groupby.test_filters.test_filter_multi_column_df()
pandas.tests.groupby.test_filters.test_filter_multiple_timestamp()
pandas.tests.groupby.test_filters.test_filter_nan_is_false()
pandas.tests.groupby.test_filters.test_filter_non_bool_raises()
pandas.tests.groupby.test_filters.test_filter_out_all_groups()
pandas.tests.groupby.test_filters.test_filter_out_all_groups_in_df()
pandas.tests.groupby.test_filters.test_filter_out_no_groups()
pandas.tests.groupby.test_filters.test_filter_series()
pandas.tests.groupby.test_filters.test_filter_single_column_df()
pandas.tests.groupby.test_filters.test_filter_using_len()
pandas.tests.groupby.test_filters.test_filter_with_axis_in_groupby()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/groupby/aggregate/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/groupby/aggregate/test_cython.py----------------------------------------
A:pandas.tests.groupby.aggregate.test_cython.df->DataFrame({'a': [0, 1], 'b': [data, NaT]})
A:pandas.tests.groupby.aggregate.test_cython.grouped->Series(['A', 'B', 'C', 'D', 'E'] * 10, index=dr).groupby(lambda x: x.month)
A:pandas.tests.groupby.aggregate.test_cython.exp->DataFrame(expd).T.stack(dropna=False)
A:pandas.tests.groupby.aggregate.test_cython.result->DataFrame({'a': [0, 1], 'b': [data, NaT]}).groupby('a').aggregate(op)
A:pandas.tests.groupby.aggregate.test_cython.expd.setdefault(cat1, {})[cat2]->op(group['C'])
A:pandas.tests.groupby.aggregate.test_cython.frame->DataFrame({'a': np.random.randint(0, 5, 50), 'b': ['foo', 'bar'] * 25, 'dates': pd.date_range('now', periods=50, freq='T')})
A:pandas.tests.groupby.aggregate.test_cython.expected->DataFrame({'b': [data, NaT]}, index=index)
A:pandas.tests.groupby.aggregate.test_cython.ts->Series(['A', 'B', 'C', 'D', 'E'] * 10, index=dr)
A:pandas.tests.groupby.aggregate.test_cython.dr->bdate_range('1/1/2000', periods=50)
A:pandas.tests.groupby.aggregate.test_cython.summed->Series(['A', 'B', 'C', 'D', 'E'] * 10, index=dr).groupby(lambda x: x.month).sum()
A:pandas.tests.groupby.aggregate.test_cython.labels->numpy.random.randint(0, 50, size=1000).astype(float)
A:pandas.tests.groupby.aggregate.test_cython.grps->range(0, 25, 5)
A:pandas.tests.groupby.aggregate.test_cython.g->DataFrame({'a': [0, 1], 'b': [data, NaT]}).groupby(pd.cut(df[0], grps), observed=observed)
A:pandas.tests.groupby.aggregate.test_cython.intervals->pandas.interval_range(0, 20, freq=5)
A:pandas.tests.groupby.aggregate.test_cython.index->Index([0, 1], name='a')
pandas.tests.groupby.aggregate.test_cython.test__cython_agg_general(op,targop)
pandas.tests.groupby.aggregate.test_cython.test_cython_agg_boolean()
pandas.tests.groupby.aggregate.test_cython.test_cython_agg_empty_buckets(op,targop,observed)
pandas.tests.groupby.aggregate.test_cython.test_cython_agg_empty_buckets_nanops(observed)
pandas.tests.groupby.aggregate.test_cython.test_cython_agg_frame_columns()
pandas.tests.groupby.aggregate.test_cython.test_cython_agg_nothing_to_agg()
pandas.tests.groupby.aggregate.test_cython.test_cython_agg_nothing_to_agg_with_dates()
pandas.tests.groupby.aggregate.test_cython.test_cython_agg_return_dict()
pandas.tests.groupby.aggregate.test_cython.test_cython_fail_agg()
pandas.tests.groupby.aggregate.test_cython.test_cython_with_timestamp_and_nat(op,data)
pandas.tests.groupby.aggregate.test_cython.test_cythonized_aggers(op_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/groupby/aggregate/test_other.py----------------------------------------
A:pandas.tests.groupby.aggregate.test_other.df->pandas.DataFrame({'id1': [0, 0, 0, 1, 1], 'id2': [0, 1, 0, 1, 1], 'decimals': DecimalArray(data)})
A:pandas.tests.groupby.aggregate.test_other.grouped->pandas.DataFrame({'id1': [0, 0, 0, 1, 1], 'id2': [0, 1, 0, 1, 1], 'decimals': DecimalArray(data)}).groupby('A', as_index=False, sort=False)
A:pandas.tests.groupby.aggregate.test_other.expected->pandas.Series(to_decimal([data[0], data[3]]))
A:pandas.tests.groupby.aggregate.test_other.result->df['decimals'].groupby(df['id1']).agg(weird_func)
A:pandas.tests.groupby.aggregate.test_other.df1->DataFrame({'key': [x[0] for x in data], 'date': [x[1] for x in data], 'value': [x[2] for x in data]})
A:pandas.tests.groupby.aggregate.test_other.df2->DataFrame({'key': [x[0] for x in data], 'date': [x[1] for x in data], 'value': [x[2] for x in data]})
A:pandas.tests.groupby.aggregate.test_other.gb1->DataFrame({'key': [x[0] for x in data], 'date': [x[1] for x in data], 'value': [x[2] for x in data]}).groupby('date').aggregate(np.sum)
A:pandas.tests.groupby.aggregate.test_other.gb2->DataFrame({'key': [x[0] for x in data], 'date': [x[1] for x in data], 'value': [x[2] for x in data]}).groupby('date').aggregate(np.sum)
A:pandas.tests.groupby.aggregate.test_other.prng->period_range('2012-1-1', freq='M', periods=3)
A:pandas.tests.groupby.aggregate.test_other.rs->pandas.DataFrame({'id1': [0, 0, 0, 1, 1], 'id2': [0, 1, 0, 1, 1], 'decimals': DecimalArray(data)}).groupby(level=0).sum()
A:pandas.tests.groupby.aggregate.test_other.index->pandas.Index([9223372036854775808, 9223372036854775810, 9223372036854775812], dtype=np.uint64)
A:pandas.tests.groupby.aggregate.test_other.s1->Series(np.random.rand(len(index)), index=index)
A:pandas.tests.groupby.aggregate.test_other.s2->Series(np.random.rand(len(index)), index=index)
A:pandas.tests.groupby.aggregate.test_other.exp->pandas.Series([0, 1, 1, 2], index=Index(list('ABCD'), name='class'), name='time')
A:pandas.tests.groupby.aggregate.test_other.v->list('aaabbbbbbccd')
A:pandas.tests.groupby.aggregate.test_other.c_mean->grouped['C'].mean()
A:pandas.tests.groupby.aggregate.test_other.c_sum->grouped['C'].sum()
A:pandas.tests.groupby.aggregate.test_other.d_mean->grouped['D'].mean()
A:pandas.tests.groupby.aggregate.test_other.d_sum->grouped['D'].sum()
A:pandas.tests.groupby.aggregate.test_other.expected.columns->pandas.MultiIndex.from_product([['C', 'D'], ['mean', 'sum']])
A:pandas.tests.groupby.aggregate.test_other.g->pandas.DataFrame({'id1': [0, 0, 0, 1, 1], 'id2': [0, 1, 0, 1, 1], 'decimals': DecimalArray(data)}).groupby('date')
A:pandas.tests.groupby.aggregate.test_other.ts->pandas.Timestamp('2016-01-01 12:00:00', tz='US/Pacific')
A:pandas.tests.groupby.aggregate.test_other.data->DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'foo', 'foo', 'foo'], 'B': ['one', 'one', 'one', 'two', 'one', 'one', 'one', 'two', 'two', 'two', 'one'], 'C': ['dull', 'dull', 'shiny', 'dull', 'dull', 'shiny', 'shiny', 'dull', 'shiny', 'shiny', 'shiny'], 'D': np.random.randn(11), 'E': np.random.randn(11), 'F': np.random.randn(11)})
A:pandas.tests.groupby.aggregate.test_other.expected_index->pandas.Index([1, 2], name='category')
A:pandas.tests.groupby.aggregate.test_other.dti->pandas.date_range('2012-01-01', periods=4, tz='UTC')
A:pandas.tests.groupby.aggregate.test_other.gb->pandas.DataFrame({'id1': [0, 0, 0, 1, 1], 'id2': [0, 1, 0, 1, 1], 'decimals': DecimalArray(data)}).groupby('a')
pandas.tests.groupby.aggregate.test_other.test_agg_api()
pandas.tests.groupby.aggregate.test_other.test_agg_callables()
pandas.tests.groupby.aggregate.test_other.test_agg_cast_results_dtypes()
pandas.tests.groupby.aggregate.test_other.test_agg_category_nansum(observed)
pandas.tests.groupby.aggregate.test_other.test_agg_compat()
pandas.tests.groupby.aggregate.test_other.test_agg_consistency()
pandas.tests.groupby.aggregate.test_other.test_agg_datetimes_mixed()
pandas.tests.groupby.aggregate.test_other.test_agg_dict_parameter_cast_result_dtypes()
pandas.tests.groupby.aggregate.test_other.test_agg_dict_renaming_deprecation()
pandas.tests.groupby.aggregate.test_other.test_agg_dts_mixed()
pandas.tests.groupby.aggregate.test_other.test_agg_item_by_item_raise_typeerror()
pandas.tests.groupby.aggregate.test_other.test_agg_lambda_with_timezone()
pandas.tests.groupby.aggregate.test_other.test_agg_list_like_func()
pandas.tests.groupby.aggregate.test_other.test_agg_nested_dicts()
pandas.tests.groupby.aggregate.test_other.test_agg_over_numpy_arrays()
pandas.tests.groupby.aggregate.test_other.test_agg_period_index()
pandas.tests.groupby.aggregate.test_other.test_agg_structs_dataframe(structure,expected)
pandas.tests.groupby.aggregate.test_other.test_agg_structs_series(structure,expected)
pandas.tests.groupby.aggregate.test_other.test_agg_timezone_round_trip()
pandas.tests.groupby.aggregate.test_other.test_agg_tzaware_non_datetime_result()
pandas.tests.groupby.aggregate.test_other.test_agg_tzaware_non_dt_result()
pandas.tests.groupby.aggregate.test_other.test_aggregate_api_consistency()
pandas.tests.groupby.aggregate.test_other.test_aggregate_float64_no_int64()
pandas.tests.groupby.aggregate.test_other.test_groupby_agg_err_catching(err_cls)
pandas.tests.groupby.aggregate.test_other.test_series_agg_multi_pure_python()
pandas.tests.groupby.aggregate.test_other.test_series_agg_multikey()
pandas.tests.groupby.aggregate.test_other.test_sum_uint64_overflow()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py----------------------------------------
A:pandas.tests.groupby.aggregate.test_aggregate.df->pandas.DataFrame({'kind': ['cat', 'dog', 'cat', 'dog'], 'height': [9.1, 6.0, 9.5, 34.0], 'weight': [7.9, 7.5, 9.9, 198.0]})
A:pandas.tests.groupby.aggregate.test_aggregate.grouped->pandas.DataFrame({'kind': ['cat', 'dog', 'cat', 'dog'], 'height': [9.1, 6.0, 9.5, 34.0], 'weight': [7.9, 7.5, 9.9, 198.0]}).groupby('A')
A:pandas.tests.groupby.aggregate.test_aggregate.result->_make_unique(order)
A:pandas.tests.groupby.aggregate.test_aggregate.expected->pandas.DataFrame({'height_sqr_min': [82.81, 36.0], 'height_max': [9.5, 34.0], 'weight_max': [9.9, 198.0], 'height_max_2': [9.5, 34.0], 'weight_min': [7.9, 7.5]}, index=pd.Index(['cat', 'dog'], name='kind'), columns=columns)
A:pandas.tests.groupby.aggregate.test_aggregate.results->pandas.DataFrame({'kind': ['cat', 'dog', 'cat', 'dog'], 'height': [9.1, 6.0, 9.5, 34.0], 'weight': [7.9, 7.5, 9.9, 198.0]}).C.groupby([df.A, df.B]).aggregate(f)
A:pandas.tests.groupby.aggregate.test_aggregate.g->pandas.DataFrame({'kind': ['cat', 'dog', 'cat', 'dog'], 'height': [9.1, 6.0, 9.5, 34.0], 'weight': [7.9, 7.5, 9.9, 198.0]}).groupby(['by1', 'by2'])
A:pandas.tests.groupby.aggregate.test_aggregate.exp->pandas.Series(np.array([bar] * K), index=list('BCD'), dtype=np.float64, name='bar')
A:pandas.tests.groupby.aggregate.test_aggregate.exp_df->DataFrame(columns=tsframe.columns, dtype=float, index=pd.Index([], dtype=np.float64))
A:pandas.tests.groupby.aggregate.test_aggregate.grouped.grouper.groupings[0]->Grouping(ts.index, tuple(grouper))
A:pandas.tests.groupby.aggregate.test_aggregate.foo->(df.A == 'foo').sum()
A:pandas.tests.groupby.aggregate.test_aggregate.bar->(df.A == 'bar').sum()
A:pandas.tests.groupby.aggregate.test_aggregate.K->len(result.columns)
A:pandas.tests.groupby.aggregate.test_aggregate.exp_cols->Index(['mean', 'max', 'min'])
A:pandas.tests.groupby.aggregate.test_aggregate.exmean->pandas.DataFrame({'kind': ['cat', 'dog', 'cat', 'dog'], 'height': [9.1, 6.0, 9.5, 34.0], 'weight': [7.9, 7.5, 9.9, 198.0]}).groupby('A').agg({'C': np.mean, 'D': np.mean})
A:pandas.tests.groupby.aggregate.test_aggregate.exstd->pandas.DataFrame({'kind': ['cat', 'dog', 'cat', 'dog'], 'height': [9.1, 6.0, 9.5, 34.0], 'weight': [7.9, 7.5, 9.9, 198.0]}).groupby('A').agg({'C': np.std, 'D': np.std})
A:pandas.tests.groupby.aggregate.test_aggregate.d->dict([['C', np.mean], ['D', dict([['foo', np.mean], ['bar', np.std]])]])
A:pandas.tests.groupby.aggregate.test_aggregate.dat->pandas.DataFrame({'a': [1, 1, 2, 2], 'b': [0, 1, 2, 3], 'c': [None, None, 1, 1]})
A:pandas.tests.groupby.aggregate.test_aggregate.gp->pandas.DataFrame({'a': [1, 1, 2, 2], 'b': [0, 1, 2, 3], 'c': [None, None, 1, 1]}).groupby('a')
A:pandas.tests.groupby.aggregate.test_aggregate.index->Index([1, 2], name='a')
A:pandas.tests.groupby.aggregate.test_aggregate.res->pandas.DataFrame({'kind': ['cat', 'dog', 'cat', 'dog'], 'height': [9.1, 6.0, 9.5, 34.0], 'weight': [7.9, 7.5, 9.9, 198.0]}).groupby('A').agg(['sum', 'max', 'mean', 'ohlc', 'min'])
A:pandas.tests.groupby.aggregate.test_aggregate.df.x->pandas.DataFrame({'kind': ['cat', 'dog', 'cat', 'dog'], 'height': [9.1, 6.0, 9.5, 34.0], 'weight': [7.9, 7.5, 9.9, 198.0]}).x.astype(dtype)
A:pandas.tests.groupby.aggregate.test_aggregate.result.x->_make_unique(order).x.astype(np.int64)
A:pandas.tests.groupby.aggregate.test_aggregate.df['col_cat']->df['col_num'].astype('category')
A:pandas.tests.groupby.aggregate.test_aggregate.gr->pandas.Series([1, 2, 3, 4]).groupby([0, 0, 1, 1])
A:pandas.tests.groupby.aggregate.test_aggregate.p98->functools.partial(np.percentile, q=98)
A:pandas.tests.groupby.aggregate.test_aggregate.quant50->functools.partial(np.percentile, q=50)
A:pandas.tests.groupby.aggregate.test_aggregate.quant70->functools.partial(np.percentile, q=70)
A:pandas.tests.groupby.aggregate.test_aggregate.test->pandas.DataFrame({'col1': ['a', 'a', 'b', 'b', 'b'], 'col2': [1, 2, 3, 4, 5]})
A:pandas.tests.groupby.aggregate.test_aggregate.df.columns->pandas.MultiIndex.from_tuples([('x', 'group'), ('y', 'A'), ('y', 'B')])
A:pandas.tests.groupby.aggregate.test_aggregate.idx->pandas.Int64Index([1, 2], name='a')
A:pandas.tests.groupby.aggregate.test_aggregate.animals->DataFrame({'kind': ['cat', 'dog', 'cat', 'dog'], 'height': [9.1, 6.0, 9.5, 34.0], 'weight': [7.9, 7.5, 9.9, 198.0]})
A:pandas.tests.groupby.aggregate.test_aggregate.periods->pandas.period_range('2020', periods=2, freq='Y')
A:pandas.tests.groupby.aggregate.test_aggregate.result1->pandas.DataFrame({'kind': ['cat', 'dog', 'cat', 'dog'], 'height': [9.1, 6.0, 9.5, 34.0], 'weight': [7.9, 7.5, 9.9, 198.0]}).groupby(by='kind').agg(height_sqr_min=('height', lambda x: np.min(x ** 2)), height_max=('height', 'max'), weight_max=('weight', 'max'), height_max_2=('height', lambda x: np.max(x)), weight_min=('weight', lambda x: np.min(x)))
A:pandas.tests.groupby.aggregate.test_aggregate.result2->pandas.DataFrame({'kind': ['cat', 'dog', 'cat', 'dog'], 'height': [9.1, 6.0, 9.5, 34.0], 'weight': [7.9, 7.5, 9.9, 198.0]}).groupby(by='kind').agg(height_sqr_min=pd.NamedAgg(column='height', aggfunc=lambda x: np.min(x ** 2)), height_max=pd.NamedAgg(column='height', aggfunc='max'), weight_max=pd.NamedAgg(column='weight', aggfunc='max'), height_max_2=pd.NamedAgg(column='height', aggfunc=lambda x: np.max(x)), weight_min=pd.NamedAgg(column='weight', aggfunc=lambda x: np.min(x)))
pandas.tests.groupby.aggregate.test_aggregate.TestLambdaMangling
pandas.tests.groupby.aggregate.test_aggregate.TestLambdaMangling.test_agg_multiple_lambda(self)
pandas.tests.groupby.aggregate.test_aggregate.TestLambdaMangling.test_agg_with_one_lambda(self)
pandas.tests.groupby.aggregate.test_aggregate.TestLambdaMangling.test_basic(self)
pandas.tests.groupby.aggregate.test_aggregate.TestLambdaMangling.test_make_unique(self,order,expected_reorder)
pandas.tests.groupby.aggregate.test_aggregate.TestLambdaMangling.test_mangle_series_groupby(self)
pandas.tests.groupby.aggregate.test_aggregate.TestLambdaMangling.test_maybe_mangle_lambdas(self)
pandas.tests.groupby.aggregate.test_aggregate.TestLambdaMangling.test_maybe_mangle_lambdas_args(self)
pandas.tests.groupby.aggregate.test_aggregate.TestLambdaMangling.test_maybe_mangle_lambdas_listlike(self)
pandas.tests.groupby.aggregate.test_aggregate.TestLambdaMangling.test_maybe_mangle_lambdas_named(self)
pandas.tests.groupby.aggregate.test_aggregate.TestLambdaMangling.test_maybe_mangle_lambdas_passthrough(self)
pandas.tests.groupby.aggregate.test_aggregate.TestLambdaMangling.test_with_kwargs(self)
pandas.tests.groupby.aggregate.test_aggregate.TestNamedAggregationDataFrame
pandas.tests.groupby.aggregate.test_aggregate.TestNamedAggregationDataFrame.test_agg_namedtuple(self)
pandas.tests.groupby.aggregate.test_aggregate.TestNamedAggregationDataFrame.test_agg_relabel(self)
pandas.tests.groupby.aggregate.test_aggregate.TestNamedAggregationDataFrame.test_agg_relabel_non_identifier(self)
pandas.tests.groupby.aggregate.test_aggregate.TestNamedAggregationDataFrame.test_agg_relabel_other_raises(self)
pandas.tests.groupby.aggregate.test_aggregate.TestNamedAggregationDataFrame.test_agg_relabel_with_level(self)
pandas.tests.groupby.aggregate.test_aggregate.TestNamedAggregationDataFrame.test_duplicate_no_raises(self)
pandas.tests.groupby.aggregate.test_aggregate.TestNamedAggregationDataFrame.test_mangled(self)
pandas.tests.groupby.aggregate.test_aggregate.TestNamedAggregationDataFrame.test_missing_raises(self)
pandas.tests.groupby.aggregate.test_aggregate.TestNamedAggregationSeries
pandas.tests.groupby.aggregate.test_aggregate.TestNamedAggregationSeries.test_mangled(self)
pandas.tests.groupby.aggregate.test_aggregate.TestNamedAggregationSeries.test_no_args_raises(self)
pandas.tests.groupby.aggregate.test_aggregate.TestNamedAggregationSeries.test_series_named_agg(self)
pandas.tests.groupby.aggregate.test_aggregate.TestNamedAggregationSeries.test_series_named_agg_duplicates_no_raises(self)
pandas.tests.groupby.aggregate.test_aggregate.myfunc(s)
pandas.tests.groupby.aggregate.test_aggregate.test_agg_apply_corner(ts,tsframe)
pandas.tests.groupby.aggregate.test_aggregate.test_agg_cython_category_not_implemented_fallback()
pandas.tests.groupby.aggregate.test_aggregate.test_agg_grouping_is_list_tuple(ts)
pandas.tests.groupby.aggregate.test_aggregate.test_agg_index_has_complex_internals(index)
pandas.tests.groupby.aggregate.test_aggregate.test_agg_multiple_functions_maintain_order(df)
pandas.tests.groupby.aggregate.test_aggregate.test_agg_must_agg(df)
pandas.tests.groupby.aggregate.test_aggregate.test_agg_python_multiindex(mframe)
pandas.tests.groupby.aggregate.test_aggregate.test_agg_regression1(tsframe)
pandas.tests.groupby.aggregate.test_aggregate.test_agg_relabel_multiindex_column(agg_col1,agg_col2,agg_col3,agg_result1,agg_result2,agg_result3)
pandas.tests.groupby.aggregate.test_aggregate.test_agg_relabel_multiindex_duplicates()
pandas.tests.groupby.aggregate.test_aggregate.test_agg_relabel_multiindex_raises_not_exist()
pandas.tests.groupby.aggregate.test_aggregate.test_agg_ser_multi_key(df)
pandas.tests.groupby.aggregate.test_aggregate.test_agg_split_block()
pandas.tests.groupby.aggregate.test_aggregate.test_agg_split_object_part_datetime()
pandas.tests.groupby.aggregate.test_aggregate.test_agg_split_object_part_dt()
pandas.tests.groupby.aggregate.test_aggregate.test_aggregate_item_by_item(df)
pandas.tests.groupby.aggregate.test_aggregate.test_aggregate_mixed_types()
pandas.tests.groupby.aggregate.test_aggregate.test_aggregate_str_func(tsframe,groupbyfunc)
pandas.tests.groupby.aggregate.test_aggregate.test_aggregate_udf_na_extension_type()
pandas.tests.groupby.aggregate.test_aggregate.test_func_duplicates_raises()
pandas.tests.groupby.aggregate.test_aggregate.test_groupby_agg_coercing_bools()
pandas.tests.groupby.aggregate.test_aggregate.test_groupby_agg_no_extra_calls()
pandas.tests.groupby.aggregate.test_aggregate.test_groupby_aggregate_period_column(func)
pandas.tests.groupby.aggregate.test_aggregate.test_groupby_aggregate_period_frame(func)
pandas.tests.groupby.aggregate.test_aggregate.test_groupby_aggregation_mixed_dtype()
pandas.tests.groupby.aggregate.test_aggregate.test_groupby_aggregation_multi_level_column()
pandas.tests.groupby.aggregate.test_aggregate.test_lambda_named_agg(func)
pandas.tests.groupby.aggregate.test_aggregate.test_more_flexible_frame_multi_function(df)
pandas.tests.groupby.aggregate.test_aggregate.test_multi_function_flexible_mix(df)
pandas.tests.groupby.aggregate.test_aggregate.test_multiindex_custom_func(func)
pandas.tests.groupby.aggregate.test_aggregate.test_multiple_functions_tuples_and_non_tuples(df)
pandas.tests.groupby.aggregate.test_aggregate.test_order_aggregate_multiple_funcs()
pandas.tests.groupby.aggregate.test_aggregate.test_uint64_type_handling(dtype,how)
pandas.tests.groupby.aggregate.test_aggregate.test_wrap_agg_out(three_group)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/test_numpy.py----------------------------------------
A:pandas.tests.extension.test_numpy.(a, b, c)->numpy.arange(3)
A:pandas.tests.extension.test_numpy.skip_nested->pytest.mark.usefixtures('skip_numpy_object')
A:pandas.tests.extension.test_numpy.s->pandas.Series(data)
A:pandas.tests.extension.test_numpy.result->getattr(s, op_name)(skipna=skipna)
A:pandas.tests.extension.test_numpy.expected->getattr(s.astype(s.dtype._dtype), op_name)(skipna=skipna)
pandas.tests.extension.test_numpy.BaseNumPyTests
pandas.tests.extension.test_numpy.TestArithmetics(BaseNumPyTests,base.BaseArithmeticOpsTests)
pandas.tests.extension.test_numpy.TestArithmetics.test_arith_series_with_array(self,data,all_arithmetic_operators)
pandas.tests.extension.test_numpy.TestArithmetics.test_arith_series_with_scalar(self,data,all_arithmetic_operators)
pandas.tests.extension.test_numpy.TestArithmetics.test_divmod_series_array(self,data)
pandas.tests.extension.test_numpy.TestArithmetics.test_error(self,data,all_arithmetic_operators)
pandas.tests.extension.test_numpy.TestBooleanReduce(BaseNumPyTests,base.BaseBooleanReduceTests)
pandas.tests.extension.test_numpy.TestCasting(BaseNumPyTests,base.BaseCastingTests)
pandas.tests.extension.test_numpy.TestCasting.test_astype_str(self,data)
pandas.tests.extension.test_numpy.TestConstructors(BaseNumPyTests,base.BaseConstructorsTests)
pandas.tests.extension.test_numpy.TestConstructors.test_array_from_scalars(self,data)
pandas.tests.extension.test_numpy.TestConstructors.test_from_dtype(self,data)
pandas.tests.extension.test_numpy.TestDtype(BaseNumPyTests,base.BaseDtypeTests)
pandas.tests.extension.test_numpy.TestDtype.test_check_dtype(self,data)
pandas.tests.extension.test_numpy.TestGetitem(BaseNumPyTests,base.BaseGetitemTests)
pandas.tests.extension.test_numpy.TestGetitem.test_getitem_scalar(self,data)
pandas.tests.extension.test_numpy.TestGetitem.test_loc_iloc_frame_single_dtype(self,data)
pandas.tests.extension.test_numpy.TestGetitem.test_take_series(self,data)
pandas.tests.extension.test_numpy.TestGroupby(BaseNumPyTests,base.BaseGroupbyTests)
pandas.tests.extension.test_numpy.TestGroupby.test_groupby_extension_apply(self,data_for_grouping,groupby_apply_op)
pandas.tests.extension.test_numpy.TestInterface(BaseNumPyTests,base.BaseInterfaceTests)
pandas.tests.extension.test_numpy.TestInterface.test_array_interface(self,data)
pandas.tests.extension.test_numpy.TestMethods(BaseNumPyTests,base.BaseMethodsTests)
pandas.tests.extension.test_numpy.TestMethods.test_combine_add(self,data_repeated)
pandas.tests.extension.test_numpy.TestMethods.test_combine_le(self,data_repeated)
pandas.tests.extension.test_numpy.TestMethods.test_diff(self,data,periods)
pandas.tests.extension.test_numpy.TestMethods.test_fillna_copy_frame(self,data_missing)
pandas.tests.extension.test_numpy.TestMethods.test_fillna_copy_series(self,data_missing)
pandas.tests.extension.test_numpy.TestMethods.test_hash_pandas_object_works(self,data,as_frame)
pandas.tests.extension.test_numpy.TestMethods.test_repeat(self,data,repeats,as_series,use_numpy)
pandas.tests.extension.test_numpy.TestMethods.test_searchsorted(self,data_for_sorting,as_series)
pandas.tests.extension.test_numpy.TestMethods.test_shift_fill_value(self,data)
pandas.tests.extension.test_numpy.TestMethods.test_unique(self,data,box,method)
pandas.tests.extension.test_numpy.TestMethods.test_value_counts(self,all_data,dropna)
pandas.tests.extension.test_numpy.TestMethods.test_where_series(self,data,na_value,as_frame)
pandas.tests.extension.test_numpy.TestMissing(BaseNumPyTests,base.BaseMissingTests)
pandas.tests.extension.test_numpy.TestMissing.test_fillna_frame(self,data_missing)
pandas.tests.extension.test_numpy.TestMissing.test_fillna_scalar(self,data_missing)
pandas.tests.extension.test_numpy.TestMissing.test_fillna_series(self,data_missing)
pandas.tests.extension.test_numpy.TestMissing.test_fillna_series_method(self,data_missing,fillna_method)
pandas.tests.extension.test_numpy.TestNumericReduce(BaseNumPyTests,base.BaseNumericReduceTests)
pandas.tests.extension.test_numpy.TestNumericReduce.check_reduce(self,s,op_name,skipna)
pandas.tests.extension.test_numpy.TestParsing(BaseNumPyTests,base.BaseParsingTests)
pandas.tests.extension.test_numpy.TestPrinting(BaseNumPyTests,base.BasePrintingTests)
pandas.tests.extension.test_numpy.TestReshaping(BaseNumPyTests,base.BaseReshapingTests)
pandas.tests.extension.test_numpy.TestReshaping.test_concat_mixed_dtypes(self,data)
pandas.tests.extension.test_numpy.TestReshaping.test_merge(self,data,na_value)
pandas.tests.extension.test_numpy.TestReshaping.test_merge_on_extension_array(self,data)
pandas.tests.extension.test_numpy.TestReshaping.test_merge_on_extension_array_duplicates(self,data)
pandas.tests.extension.test_numpy.TestReshaping.test_transpose(self,data)
pandas.tests.extension.test_numpy.TestSetitem(BaseNumPyTests,base.BaseSetitemTests)
pandas.tests.extension.test_numpy.TestSetitem.test_setitem_iloc_scalar_mixed(self,data)
pandas.tests.extension.test_numpy.TestSetitem.test_setitem_iloc_scalar_multiple_homogoneous(self,data)
pandas.tests.extension.test_numpy.TestSetitem.test_setitem_integer_array(self,data,idx,box_in_series)
pandas.tests.extension.test_numpy.TestSetitem.test_setitem_integer_with_missing_raises(self,data,idx,box_in_series)
pandas.tests.extension.test_numpy.TestSetitem.test_setitem_loc_iloc_slice(self,data)
pandas.tests.extension.test_numpy.TestSetitem.test_setitem_loc_scalar_mixed(self,data)
pandas.tests.extension.test_numpy.TestSetitem.test_setitem_loc_scalar_multiple_homogoneous(self,data)
pandas.tests.extension.test_numpy.TestSetitem.test_setitem_mask(self,data,mask,box_in_series)
pandas.tests.extension.test_numpy.TestSetitem.test_setitem_mask_broadcast(self,data,setter)
pandas.tests.extension.test_numpy.TestSetitem.test_setitem_mask_raises(self,data,box_in_series)
pandas.tests.extension.test_numpy.TestSetitem.test_setitem_scalar_key_sequence_raise(self,data)
pandas.tests.extension.test_numpy.TestSetitem.test_setitem_scalar_series(self,data,box_in_series)
pandas.tests.extension.test_numpy.TestSetitem.test_setitem_sequence(self,data,box_in_series)
pandas.tests.extension.test_numpy.TestSetitem.test_setitem_sequence_broadcasts(self,data,box_in_series)
pandas.tests.extension.test_numpy.TestSetitem.test_setitem_sequence_mismatched_length_raises(self,data,as_array)
pandas.tests.extension.test_numpy.TestSetitem.test_setitem_slice(self,data,box_in_series)
pandas.tests.extension.test_numpy.allow_in_pandas(monkeypatch)
pandas.tests.extension.test_numpy.data(allow_in_pandas,dtype)
pandas.tests.extension.test_numpy.data_for_grouping(allow_in_pandas,dtype)
pandas.tests.extension.test_numpy.data_for_sorting(allow_in_pandas,dtype)
pandas.tests.extension.test_numpy.data_missing(allow_in_pandas,dtype)
pandas.tests.extension.test_numpy.data_missing_for_sorting(allow_in_pandas,dtype)
pandas.tests.extension.test_numpy.dtype(request)
pandas.tests.extension.test_numpy.na_cmp()
pandas.tests.extension.test_numpy.na_value()
pandas.tests.extension.test_numpy.skip_numpy_object(dtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/test_datetime.py----------------------------------------
A:pandas.tests.extension.test_datetime.data->pandas.core.arrays.DatetimeArray._from_sequence(['2000', '2001', '2002', '2003'], tz='US/Central')
A:pandas.tests.extension.test_datetime.a->pandas.Timestamp('2000-01-01')
A:pandas.tests.extension.test_datetime.b->pandas.Timestamp('2000-01-02')
A:pandas.tests.extension.test_datetime.c->pandas.Timestamp('2000-01-03')
A:pandas.tests.extension.test_datetime.s->pandas.Series(data)
A:pandas.tests.extension.test_datetime.index->pandas.MultiIndex.from_product([['A', 'B'], ['a', 'b']], names=['a', 'b'])
A:pandas.tests.extension.test_datetime.ser->pandas.DataFrame({'A': data, 'B': data}, index=index)
A:pandas.tests.extension.test_datetime.expected->pandas.DataFrame({('A', 'A'): data.take([0, 1]), ('A', 'B'): data.take([2, 3]), ('B', 'A'): data.take([0, 1]), ('B', 'B'): data.take([2, 3])}, index=pd.Index(['a', 'b'], name='b'))
A:pandas.tests.extension.test_datetime.result->pandas.DataFrame({'A': data, 'B': data}, index=index).unstack(0)
pandas.tests.extension.test_datetime.BaseDatetimeTests
pandas.tests.extension.test_datetime.TestArithmeticOps(BaseDatetimeTests,base.BaseArithmeticOpsTests)
pandas.tests.extension.test_datetime.TestArithmeticOps.test_add_series_with_extension_array(self,data)
pandas.tests.extension.test_datetime.TestArithmeticOps.test_arith_series_with_array(self,data,all_arithmetic_operators)
pandas.tests.extension.test_datetime.TestArithmeticOps.test_arith_series_with_scalar(self,data,all_arithmetic_operators)
pandas.tests.extension.test_datetime.TestArithmeticOps.test_divmod_series_array(self)
pandas.tests.extension.test_datetime.TestArithmeticOps.test_error(self,data,all_arithmetic_operators)
pandas.tests.extension.test_datetime.TestCasting(BaseDatetimeTests,base.BaseCastingTests)
pandas.tests.extension.test_datetime.TestComparisonOps(BaseDatetimeTests,base.BaseComparisonOpsTests)
pandas.tests.extension.test_datetime.TestComparisonOps._compare_other(self,s,data,op_name,other)
pandas.tests.extension.test_datetime.TestConstructors(BaseDatetimeTests,base.BaseConstructorsTests)
pandas.tests.extension.test_datetime.TestDatetimeDtype(BaseDatetimeTests,base.BaseDtypeTests)
pandas.tests.extension.test_datetime.TestGetitem(BaseDatetimeTests,base.BaseGetitemTests)
pandas.tests.extension.test_datetime.TestGroupby(BaseDatetimeTests,base.BaseGroupbyTests)
pandas.tests.extension.test_datetime.TestInterface(BaseDatetimeTests,base.BaseInterfaceTests)
pandas.tests.extension.test_datetime.TestInterface.test_array_interface(self,data)
pandas.tests.extension.test_datetime.TestMethods(BaseDatetimeTests,base.BaseMethodsTests)
pandas.tests.extension.test_datetime.TestMethods.test_combine_add(self,data_repeated)
pandas.tests.extension.test_datetime.TestMethods.test_value_counts(self,all_data,dropna)
pandas.tests.extension.test_datetime.TestMissing(BaseDatetimeTests,base.BaseMissingTests)
pandas.tests.extension.test_datetime.TestPrinting(BaseDatetimeTests,base.BasePrintingTests)
pandas.tests.extension.test_datetime.TestReshaping(BaseDatetimeTests,base.BaseReshapingTests)
pandas.tests.extension.test_datetime.TestReshaping.test_concat(self,data,in_frame)
pandas.tests.extension.test_datetime.TestReshaping.test_concat_mixed_dtypes(self,data)
pandas.tests.extension.test_datetime.TestReshaping.test_unstack(self,obj)
pandas.tests.extension.test_datetime.TestSetitem(BaseDatetimeTests,base.BaseSetitemTests)
pandas.tests.extension.test_datetime.data(dtype)
pandas.tests.extension.test_datetime.data_for_grouping(dtype)
pandas.tests.extension.test_datetime.data_for_sorting(dtype)
pandas.tests.extension.test_datetime.data_missing(dtype)
pandas.tests.extension.test_datetime.data_missing_for_sorting(dtype)
pandas.tests.extension.test_datetime.dtype(request)
pandas.tests.extension.test_datetime.na_cmp()
pandas.tests.extension.test_datetime.na_value()
pandas.tests.extension.test_dt.BaseDatetimeTests
pandas.tests.extension.test_dt.TestArithmeticOps(BaseDatetimeTests,base.BaseArithmeticOpsTests)
pandas.tests.extension.test_dt.TestArithmeticOps.test_add_series_with_extension_array(self,data)
pandas.tests.extension.test_dt.TestArithmeticOps.test_arith_series_with_array(self,data,all_arithmetic_operators)
pandas.tests.extension.test_dt.TestArithmeticOps.test_arith_series_with_scalar(self,data,all_arithmetic_operators)
pandas.tests.extension.test_dt.TestArithmeticOps.test_divmod_series_array(self)
pandas.tests.extension.test_dt.TestArithmeticOps.test_error(self,data,all_arithmetic_operators)
pandas.tests.extension.test_dt.TestCasting(BaseDatetimeTests,base.BaseCastingTests)
pandas.tests.extension.test_dt.TestComparisonOps(BaseDatetimeTests,base.BaseComparisonOpsTests)
pandas.tests.extension.test_dt.TestComparisonOps._compare_other(self,s,data,op_name,other)
pandas.tests.extension.test_dt.TestConstructors(BaseDatetimeTests,base.BaseConstructorsTests)
pandas.tests.extension.test_dt.TestDatetimeDtype(BaseDatetimeTests,base.BaseDtypeTests)
pandas.tests.extension.test_dt.TestGetitem(BaseDatetimeTests,base.BaseGetitemTests)
pandas.tests.extension.test_dt.TestGroupby(BaseDatetimeTests,base.BaseGroupbyTests)
pandas.tests.extension.test_dt.TestInterface(BaseDatetimeTests,base.BaseInterfaceTests)
pandas.tests.extension.test_dt.TestInterface.test_array_interface(self,data)
pandas.tests.extension.test_dt.TestMethods(BaseDatetimeTests,base.BaseMethodsTests)
pandas.tests.extension.test_dt.TestMethods.test_combine_add(self,data_repeated)
pandas.tests.extension.test_dt.TestMethods.test_value_counts(self,all_data,dropna)
pandas.tests.extension.test_dt.TestMissing(BaseDatetimeTests,base.BaseMissingTests)
pandas.tests.extension.test_dt.TestPrinting(BaseDatetimeTests,base.BasePrintingTests)
pandas.tests.extension.test_dt.TestReshaping(BaseDatetimeTests,base.BaseReshapingTests)
pandas.tests.extension.test_dt.TestReshaping.test_concat(self,data,in_frame)
pandas.tests.extension.test_dt.TestReshaping.test_concat_mixed_dtypes(self,data)
pandas.tests.extension.test_dt.TestReshaping.test_unstack(self,obj)
pandas.tests.extension.test_dt.TestSetitem(BaseDatetimeTests,base.BaseSetitemTests)
pandas.tests.extension.test_dt.data(dtype)
pandas.tests.extension.test_dt.data_for_grouping(dtype)
pandas.tests.extension.test_dt.data_for_sorting(dtype)
pandas.tests.extension.test_dt.data_missing(dtype)
pandas.tests.extension.test_dt.data_missing_for_sorting(dtype)
pandas.tests.extension.test_dt.dtype(request)
pandas.tests.extension.test_dt.na_cmp()
pandas.tests.extension.test_dt.na_value()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/test_boolean.py----------------------------------------
A:pandas.tests.extension.test_boolean.result->getattr(s, op_name)(skipna=skipna)
A:pandas.tests.extension.test_boolean.expected->bool(expected)
A:pandas.tests.extension.test_boolean.(labels, uniques)->pandas.factorize(data_for_grouping, na_sentinel=na_sentinel)
A:pandas.tests.extension.test_boolean.expected_labels->numpy.array([0, 0, na_sentinel, na_sentinel, 1, 1, 0], dtype=np.intp)
A:pandas.tests.extension.test_boolean.expected_uniques->data_for_grouping.take([0, 4])
A:pandas.tests.extension.test_boolean.(orig_data1, orig_data2)->data_repeated(2)
A:pandas.tests.extension.test_boolean.s1->pandas.Series(orig_data1)
A:pandas.tests.extension.test_boolean.s2->pandas.Series(orig_data2)
A:pandas.tests.extension.test_boolean.data_for_sorting->pandas.array([True, False], dtype='boolean')
A:pandas.tests.extension.test_boolean.arr->pandas.Series(arr)
A:pandas.tests.extension.test_boolean.sorter->numpy.array([1, 0])
A:pandas.tests.extension.test_boolean.df->pandas.DataFrame({'A': [1, 1, 2, 2, 3, 3, 1], 'B': data_for_grouping, 'C': [1, 1, 1, 1, 1, 1, 1]})
A:pandas.tests.extension.test_boolean.(_, index)->pandas.factorize(data_for_grouping, sort=False)
A:pandas.tests.extension.test_boolean.index->pandas.Index(index, name='B')
pandas.tests.extension.test_boolean.TestArithmeticOps(base.BaseArithmeticOpsTests)
pandas.tests.extension.test_boolean.TestArithmeticOps._check_divmod_op(self,s,op,other,exc=None)
pandas.tests.extension.test_boolean.TestArithmeticOps._check_op(self,s,op,other,op_name,exc=NotImplementedError)
pandas.tests.extension.test_boolean.TestArithmeticOps.check_opname(self,s,op_name,other,exc=None)
pandas.tests.extension.test_boolean.TestArithmeticOps.test_error(self,data,all_arithmetic_operators)
pandas.tests.extension.test_boolean.TestBooleanReduce(base.BaseBooleanReduceTests)
pandas.tests.extension.test_boolean.TestCasting(base.BaseCastingTests)
pandas.tests.extension.test_boolean.TestComparisonOps(base.BaseComparisonOpsTests)
pandas.tests.extension.test_boolean.TestComparisonOps._compare_other(self,s,data,op_name,other)
pandas.tests.extension.test_boolean.TestComparisonOps.check_opname(self,s,op_name,other,exc=None)
pandas.tests.extension.test_boolean.TestComparisonOps.test_compare_array(self,data,all_compare_operators)
pandas.tests.extension.test_boolean.TestComparisonOps.test_compare_scalar(self,data,all_compare_operators)
pandas.tests.extension.test_boolean.TestConstructors(base.BaseConstructorsTests)
pandas.tests.extension.test_boolean.TestDtype(base.BaseDtypeTests)
pandas.tests.extension.test_boolean.TestGetitem(base.BaseGetitemTests)
pandas.tests.extension.test_boolean.TestGroupby(base.BaseGroupbyTests)
pandas.tests.extension.test_boolean.TestGroupby.test_groupby_apply_identity(self,data_for_grouping)
pandas.tests.extension.test_boolean.TestGroupby.test_groupby_extension_agg(self,as_index,data_for_grouping)
pandas.tests.extension.test_boolean.TestGroupby.test_groupby_extension_apply(self,data_for_grouping,groupby_apply_op)
pandas.tests.extension.test_boolean.TestGroupby.test_groupby_extension_no_sort(self,data_for_grouping)
pandas.tests.extension.test_boolean.TestGroupby.test_groupby_extension_transform(self,data_for_grouping)
pandas.tests.extension.test_boolean.TestGroupby.test_grouping_grouper(self,data_for_grouping)
pandas.tests.extension.test_boolean.TestGroupby.test_in_numeric_groupby(self,data_for_grouping)
pandas.tests.extension.test_boolean.TestInterface(base.BaseInterfaceTests)
pandas.tests.extension.test_boolean.TestMethods(base.BaseMethodsTests)
pandas.tests.extension.test_boolean.TestMethods.test_combine_le(self,data_repeated)
pandas.tests.extension.test_boolean.TestMethods.test_factorize(self,data_for_grouping,na_sentinel)
pandas.tests.extension.test_boolean.TestMethods.test_searchsorted(self,data_for_sorting,as_series)
pandas.tests.extension.test_boolean.TestMethods.test_value_counts(self,all_data,dropna)
pandas.tests.extension.test_boolean.TestMissing(base.BaseMissingTests)
pandas.tests.extension.test_boolean.TestNumericReduce(base.BaseNumericReduceTests)
pandas.tests.extension.test_boolean.TestNumericReduce.check_reduce(self,s,op_name,skipna)
pandas.tests.extension.test_boolean.TestPrinting(base.BasePrintingTests)
pandas.tests.extension.test_boolean.TestReshaping(base.BaseReshapingTests)
pandas.tests.extension.test_boolean.TestSetitem(base.BaseSetitemTests)
pandas.tests.extension.test_boolean.TestUnaryOps(base.BaseUnaryOpsTests)
pandas.tests.extension.test_boolean.data(dtype)
pandas.tests.extension.test_boolean.data_for_grouping(dtype)
pandas.tests.extension.test_boolean.data_for_sorting(dtype)
pandas.tests.extension.test_boolean.data_for_twos(dtype)
pandas.tests.extension.test_boolean.data_missing(dtype)
pandas.tests.extension.test_boolean.data_missing_for_sorting(dtype)
pandas.tests.extension.test_boolean.dtype()
pandas.tests.extension.test_boolean.make_data()
pandas.tests.extension.test_boolean.na_cmp()
pandas.tests.extension.test_boolean.na_value()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/test_integer.py----------------------------------------
A:pandas.tests.extension.test_integer.other->numpy.array(all_data[~all_data.isna()])
A:pandas.tests.extension.test_integer.result->getattr(s, op_name)(skipna=skipna)
A:pandas.tests.extension.test_integer.expected->getattr(s.astype('float64'), op_name)(skipna=skipna)
A:pandas.tests.extension.test_integer.expected.index->getattr(s.astype('float64'), op_name)(skipna=skipna).index.astype(all_data.dtype)
pandas.tests.extension.test_integer.TestArithmeticOps(base.BaseArithmeticOpsTests)
pandas.tests.extension.test_integer.TestArithmeticOps._check_divmod_op(self,s,op,other,exc=None)
pandas.tests.extension.test_integer.TestArithmeticOps._check_op(self,s,op,other,op_name,exc=NotImplementedError)
pandas.tests.extension.test_integer.TestArithmeticOps.check_opname(self,s,op_name,other,exc=None)
pandas.tests.extension.test_integer.TestArithmeticOps.test_error(self,data,all_arithmetic_operators)
pandas.tests.extension.test_integer.TestBooleanReduce(base.BaseBooleanReduceTests)
pandas.tests.extension.test_integer.TestCasting(base.BaseCastingTests)
pandas.tests.extension.test_integer.TestComparisonOps(base.BaseComparisonOpsTests)
pandas.tests.extension.test_integer.TestComparisonOps._check_op(self,s,op,other,op_name,exc=NotImplementedError)
pandas.tests.extension.test_integer.TestComparisonOps._compare_other(self,s,data,op_name,other)
pandas.tests.extension.test_integer.TestComparisonOps.check_opname(self,s,op_name,other,exc=None)
pandas.tests.extension.test_integer.TestConstructors(base.BaseConstructorsTests)
pandas.tests.extension.test_integer.TestDtype(base.BaseDtypeTests)
pandas.tests.extension.test_integer.TestDtype.test_is_dtype_unboxes_dtype(self)
pandas.tests.extension.test_integer.TestGetitem(base.BaseGetitemTests)
pandas.tests.extension.test_integer.TestGroupby(base.BaseGroupbyTests)
pandas.tests.extension.test_integer.TestInterface(base.BaseInterfaceTests)
pandas.tests.extension.test_integer.TestMethods(base.BaseMethodsTests)
pandas.tests.extension.test_integer.TestMethods.test_value_counts(self,all_data,dropna)
pandas.tests.extension.test_integer.TestMissing(base.BaseMissingTests)
pandas.tests.extension.test_integer.TestNumericReduce(base.BaseNumericReduceTests)
pandas.tests.extension.test_integer.TestNumericReduce.check_reduce(self,s,op_name,skipna)
pandas.tests.extension.test_integer.TestParsing(base.BaseParsingTests)
pandas.tests.extension.test_integer.TestPrinting(base.BasePrintingTests)
pandas.tests.extension.test_integer.TestReshaping(base.BaseReshapingTests)
pandas.tests.extension.test_integer.TestSetitem(base.BaseSetitemTests)
pandas.tests.extension.test_integer.data(dtype)
pandas.tests.extension.test_integer.data_for_grouping(dtype)
pandas.tests.extension.test_integer.data_for_sorting(dtype)
pandas.tests.extension.test_integer.data_for_twos(dtype)
pandas.tests.extension.test_integer.data_missing(dtype)
pandas.tests.extension.test_integer.data_missing_for_sorting(dtype)
pandas.tests.extension.test_integer.dtype(request)
pandas.tests.extension.test_integer.make_data()
pandas.tests.extension.test_integer.na_cmp()
pandas.tests.extension.test_integer.na_value()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/test_period.py----------------------------------------
A:pandas.tests.extension.test_period.s->pandas.Series(data)
A:pandas.tests.extension.test_period.other->pandas.Series(data)
A:pandas.tests.extension.test_period.result->data.__sub__(other)
pandas.tests.extension.test_period.BasePeriodTests
pandas.tests.extension.test_period.TestArithmeticOps(BasePeriodTests,base.BaseArithmeticOpsTests)
pandas.tests.extension.test_period.TestArithmeticOps._check_divmod_op(self,s,op,other,exc=NotImplementedError)
pandas.tests.extension.test_period.TestArithmeticOps.test_add_series_with_extension_array(self,data)
pandas.tests.extension.test_period.TestArithmeticOps.test_arith_series_with_array(self,data,all_arithmetic_operators)
pandas.tests.extension.test_period.TestArithmeticOps.test_arith_series_with_scalar(self,data,all_arithmetic_operators)
pandas.tests.extension.test_period.TestArithmeticOps.test_direct_arith_with_series_returns_not_implemented(self,data)
pandas.tests.extension.test_period.TestArithmeticOps.test_error(self)
pandas.tests.extension.test_period.TestCasting(BasePeriodTests,base.BaseCastingTests)
pandas.tests.extension.test_period.TestComparisonOps(BasePeriodTests,base.BaseComparisonOpsTests)
pandas.tests.extension.test_period.TestComparisonOps._compare_other(self,s,data,op_name,other)
pandas.tests.extension.test_period.TestConstructors(BasePeriodTests,base.BaseConstructorsTests)
pandas.tests.extension.test_period.TestGetitem(BasePeriodTests,base.BaseGetitemTests)
pandas.tests.extension.test_period.TestGroupby(BasePeriodTests,base.BaseGroupbyTests)
pandas.tests.extension.test_period.TestInterface(BasePeriodTests,base.BaseInterfaceTests)
pandas.tests.extension.test_period.TestMethods(BasePeriodTests,base.BaseMethodsTests)
pandas.tests.extension.test_period.TestMethods.test_combine_add(self,data_repeated)
pandas.tests.extension.test_period.TestMissing(BasePeriodTests,base.BaseMissingTests)
pandas.tests.extension.test_period.TestParsing(BasePeriodTests,base.BaseParsingTests)
pandas.tests.extension.test_period.TestParsing.test_EA_types(self,engine,data)
pandas.tests.extension.test_period.TestPeriodDtype(BasePeriodTests,base.BaseDtypeTests)
pandas.tests.extension.test_period.TestPrinting(BasePeriodTests,base.BasePrintingTests)
pandas.tests.extension.test_period.TestReshaping(BasePeriodTests,base.BaseReshapingTests)
pandas.tests.extension.test_period.TestSetitem(BasePeriodTests,base.BaseSetitemTests)
pandas.tests.extension.test_period.data(dtype)
pandas.tests.extension.test_period.data_for_grouping(dtype)
pandas.tests.extension.test_period.data_for_sorting(dtype)
pandas.tests.extension.test_period.data_for_twos(dtype)
pandas.tests.extension.test_period.data_missing(dtype)
pandas.tests.extension.test_period.data_missing_for_sorting(dtype)
pandas.tests.extension.test_period.dtype()
pandas.tests.extension.test_period.na_value()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/test_string.py----------------------------------------
A:pandas.tests.extension.test_string.strings->numpy.random.choice(list(string.ascii_letters), size=100)
A:pandas.tests.extension.test_string.result->getattr(s, op_name)(other)
A:pandas.tests.extension.test_string.expected->getattr(s.astype(object), op_name)(other).astype('boolean')
A:pandas.tests.extension.test_string.s->pandas.Series(data)
pandas.tests.extension.test_string.TestCasting(base.BaseCastingTests)
pandas.tests.extension.test_string.TestComparisonOps(base.BaseComparisonOpsTests)
pandas.tests.extension.test_string.TestComparisonOps._compare_other(self,s,data,op_name,other)
pandas.tests.extension.test_string.TestComparisonOps.test_compare_scalar(self,data,all_compare_operators)
pandas.tests.extension.test_string.TestConstructors(base.BaseConstructorsTests)
pandas.tests.extension.test_string.TestDtype(base.BaseDtypeTests)
pandas.tests.extension.test_string.TestGetitem(base.BaseGetitemTests)
pandas.tests.extension.test_string.TestGroupBy(base.BaseGroupbyTests)
pandas.tests.extension.test_string.TestInterface(base.BaseInterfaceTests)
pandas.tests.extension.test_string.TestMethods(base.BaseMethodsTests)
pandas.tests.extension.test_string.TestMethods.test_value_counts(self,all_data,dropna)
pandas.tests.extension.test_string.TestMissing(base.BaseMissingTests)
pandas.tests.extension.test_string.TestNoReduce(base.BaseNoReduceTests)
pandas.tests.extension.test_string.TestParsing(base.BaseParsingTests)
pandas.tests.extension.test_string.TestPrinting(base.BasePrintingTests)
pandas.tests.extension.test_string.TestReshaping(base.BaseReshapingTests)
pandas.tests.extension.test_string.TestSetitem(base.BaseSetitemTests)
pandas.tests.extension.test_string.data()
pandas.tests.extension.test_string.data_for_grouping()
pandas.tests.extension.test_string.data_for_sorting()
pandas.tests.extension.test_string.data_missing()
pandas.tests.extension.test_string.data_missing_for_sorting()
pandas.tests.extension.test_string.dtype()
pandas.tests.extension.test_string.na_value()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/test_external_block.py----------------------------------------
A:pandas.tests.extension.test_external_block.values->numpy.arange(3, dtype='int64')
A:pandas.tests.extension.test_external_block.df1->pandas.DataFrame({'a': [1, 2, 3]})
A:pandas.tests.extension.test_external_block.custom_block->CustomBlock(values, placement=slice(1, 2))
A:pandas.tests.extension.test_external_block.block_manager->BlockManager(blocks, [pd.Index(['a', 'b']), df1.index])
A:pandas.tests.extension.test_external_block.block->CustomBlock(values, placement=slice(0, 3))
A:pandas.tests.extension.test_external_block.s->pandas.Series(block, pd.RangeIndex(3), fastpath=True)
A:pandas.tests.extension.test_external_block.res->pandas.concat([df, df2], axis=1)
A:pandas.tests.extension.test_external_block.df2->pandas.DataFrame({'c': [0.1, 0.2, 0.3]})
pandas.tests.extension.test_external_block.CustomBlock(NonConsolidatableMixIn,Block)
pandas.tests.extension.test_external_block.CustomBlock.concat_same_type(self,to_concat,placement=None)
pandas.tests.extension.test_external_block.df()
pandas.tests.extension.test_external_block.test_concat_axis1(df)
pandas.tests.extension.test_external_block.test_concat_dataframe(df)
pandas.tests.extension.test_external_block.test_concat_series()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/test_categorical.py----------------------------------------
A:pandas.tests.extension.test_categorical.values->numpy.random.choice(list(string.ascii_letters), size=100)
A:pandas.tests.extension.test_categorical.skip_take->pytest.mark.skip(reason='GH-20664.')
A:pandas.tests.extension.test_categorical.(orig_data1, orig_data2)->data_repeated(2)
A:pandas.tests.extension.test_categorical.s1->pandas.Series(orig_data1)
A:pandas.tests.extension.test_categorical.s2->pandas.Series(orig_data2)
A:pandas.tests.extension.test_categorical.result->op(s, other)
A:pandas.tests.extension.test_categorical.expected->cls(values).combine(other, lambda x, y: x != y)
A:pandas.tests.extension.test_categorical.s->cls(values)
A:pandas.tests.extension.test_categorical.ser->pandas.Series(data)
A:pandas.tests.extension.test_categorical.op->self.get_op_from_name(op_name)
pandas.tests.extension.test_categorical.TestArithmeticOps(base.BaseArithmeticOpsTests)
pandas.tests.extension.test_categorical.TestArithmeticOps._check_divmod_op(self,s,op,other,exc=NotImplementedError)
pandas.tests.extension.test_categorical.TestArithmeticOps.test_add_series_with_extension_array(self,data)
pandas.tests.extension.test_categorical.TestArithmeticOps.test_arith_series_with_scalar(self,data,all_arithmetic_operators)
pandas.tests.extension.test_categorical.TestArithmeticOps.test_divmod_series_array(self)
pandas.tests.extension.test_categorical.TestCasting(base.BaseCastingTests)
pandas.tests.extension.test_categorical.TestCasting.test_cast_category_to_extension_dtype(self,expected)
pandas.tests.extension.test_categorical.TestCasting.test_cast_nan_to_int(self,cls,values)
pandas.tests.extension.test_categorical.TestCasting.test_consistent_casting(self,dtype,expected)
pandas.tests.extension.test_categorical.TestComparisonOps(base.BaseComparisonOpsTests)
pandas.tests.extension.test_categorical.TestComparisonOps._compare_other(self,s,data,op_name,other)
pandas.tests.extension.test_categorical.TestConstructors(base.BaseConstructorsTests)
pandas.tests.extension.test_categorical.TestDtype(base.BaseDtypeTests)
pandas.tests.extension.test_categorical.TestGetitem(base.BaseGetitemTests)
pandas.tests.extension.test_categorical.TestGetitem.test_getitem_scalar(self,data)
pandas.tests.extension.test_categorical.TestGetitem.test_reindex(self,data,na_value)
pandas.tests.extension.test_categorical.TestGetitem.test_reindex_non_na_fill_value(self,data_missing)
pandas.tests.extension.test_categorical.TestGetitem.test_take(self,data,na_value,na_cmp)
pandas.tests.extension.test_categorical.TestGetitem.test_take_empty(self,data,na_value,na_cmp)
pandas.tests.extension.test_categorical.TestGetitem.test_take_negative(self,data)
pandas.tests.extension.test_categorical.TestGetitem.test_take_non_na_fill_value(self,data_missing)
pandas.tests.extension.test_categorical.TestGetitem.test_take_out_of_bounds_raises(self,data,allow_fill)
pandas.tests.extension.test_categorical.TestGetitem.test_take_pandas_style_negative_raises(self,data,na_value)
pandas.tests.extension.test_categorical.TestGetitem.test_take_series(self,data)
pandas.tests.extension.test_categorical.TestInterface(base.BaseInterfaceTests)
pandas.tests.extension.test_categorical.TestInterface.test_memory_usage(self,data)
pandas.tests.extension.test_categorical.TestMethods(base.BaseMethodsTests)
pandas.tests.extension.test_categorical.TestMethods.test_combine_add(self,data_repeated)
pandas.tests.extension.test_categorical.TestMethods.test_fillna_length_mismatch(self,data_missing)
pandas.tests.extension.test_categorical.TestMethods.test_searchsorted(self,data_for_sorting)
pandas.tests.extension.test_categorical.TestMethods.test_value_counts(self,all_data,dropna)
pandas.tests.extension.test_categorical.TestMissing(base.BaseMissingTests)
pandas.tests.extension.test_categorical.TestMissing.test_fillna_limit_backfill(self,data_missing)
pandas.tests.extension.test_categorical.TestMissing.test_fillna_limit_pad(self,data_missing)
pandas.tests.extension.test_categorical.TestParsing(base.BaseParsingTests)
pandas.tests.extension.test_categorical.TestReduce(base.BaseNoReduceTests)
pandas.tests.extension.test_categorical.TestReshaping(base.BaseReshapingTests)
pandas.tests.extension.test_categorical.TestSetitem(base.BaseSetitemTests)
pandas.tests.extension.test_categorical.data()
pandas.tests.extension.test_categorical.data_for_grouping()
pandas.tests.extension.test_categorical.data_for_sorting()
pandas.tests.extension.test_categorical.data_missing()
pandas.tests.extension.test_categorical.data_missing_for_sorting()
pandas.tests.extension.test_categorical.dtype()
pandas.tests.extension.test_categorical.make_data()
pandas.tests.extension.test_categorical.na_value()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/test_sparse.py----------------------------------------
A:pandas.tests.extension.test_sparse.data->numpy.random.randint(1, 100, size=100)
A:pandas.tests.extension.test_sparse.res->SparseArray(make_data(request.param), fill_value=request.param)
A:pandas.tests.extension.test_sparse.df1->pandas.DataFrame({'A': data[:3]})
A:pandas.tests.extension.test_sparse.df2->pandas.DataFrame({'A': [1, 2, 3]})
A:pandas.tests.extension.test_sparse.df3->pandas.DataFrame({'A': ['a', 'b', 'c']}).astype('category')
A:pandas.tests.extension.test_sparse.result->op(s, other)
A:pandas.tests.extension.test_sparse.expected->pandas.Series(SparseArray(op(np.asarray(data), np.asarray(other)), fill_value=result.values.fill_value))
A:pandas.tests.extension.test_sparse.s->pandas.Series(data)
A:pandas.tests.extension.test_sparse.expected_dtype->SparseDtype(bool, pd.isna(data_missing.dtype.fill_value))
A:pandas.tests.extension.test_sparse.dtype->SparseDtype(data_missing.dtype, fill_value)
A:pandas.tests.extension.test_sparse.(orig_data1, orig_data2)->data_repeated(2)
A:pandas.tests.extension.test_sparse.s1->pandas.Series(orig_data1)
A:pandas.tests.extension.test_sparse.s2->pandas.Series(orig_data2)
A:pandas.tests.extension.test_sparse.arr->data_missing.take([1, 1])
A:pandas.tests.extension.test_sparse.df->pandas.DataFrame({'A': arr})
A:pandas.tests.extension.test_sparse.ser->pandas.Series(cls._from_sequence([a, a, b, b], dtype=data.dtype))
A:pandas.tests.extension.test_sparse.cls->type(data)
A:pandas.tests.extension.test_sparse.cond->numpy.array([True, False, True, True])
A:pandas.tests.extension.test_sparse.new_dtype->SparseDtype('float', 0.0)
A:pandas.tests.extension.test_sparse.other->type(data)._from_sequence([a, b, a, b], dtype=data.dtype)
A:pandas.tests.extension.test_sparse.op->self.get_op_from_name(op_name)
pandas.tests.extension.test_sparse.BaseSparseTests
pandas.tests.extension.test_sparse.BaseSparseTests._check_unsupported(self,data)
pandas.tests.extension.test_sparse.BaseSparseTests.test_ravel(self,data)
pandas.tests.extension.test_sparse.TestArithmeticOps(BaseSparseTests,base.BaseArithmeticOpsTests)
pandas.tests.extension.test_sparse.TestArithmeticOps._skip_if_different_combine(self,data)
pandas.tests.extension.test_sparse.TestArithmeticOps.test_arith_series_with_array(self,data,all_arithmetic_operators)
pandas.tests.extension.test_sparse.TestArithmeticOps.test_arith_series_with_scalar(self,data,all_arithmetic_operators)
pandas.tests.extension.test_sparse.TestArithmeticOps.test_error(self,data,all_arithmetic_operators)
pandas.tests.extension.test_sparse.TestCasting(BaseSparseTests,base.BaseCastingTests)
pandas.tests.extension.test_sparse.TestComparisonOps(BaseSparseTests,base.BaseComparisonOpsTests)
pandas.tests.extension.test_sparse.TestComparisonOps._compare_other(self,s,data,op_name,other)
pandas.tests.extension.test_sparse.TestConstructors(BaseSparseTests,base.BaseConstructorsTests)
pandas.tests.extension.test_sparse.TestDtype(BaseSparseTests,base.BaseDtypeTests)
pandas.tests.extension.test_sparse.TestDtype.test_array_type_with_arg(self,data,dtype)
pandas.tests.extension.test_sparse.TestGetitem(BaseSparseTests,base.BaseGetitemTests)
pandas.tests.extension.test_sparse.TestGetitem.test_get(self,data)
pandas.tests.extension.test_sparse.TestGetitem.test_reindex(self,data,na_value)
pandas.tests.extension.test_sparse.TestInterface(BaseSparseTests,base.BaseInterfaceTests)
pandas.tests.extension.test_sparse.TestInterface.test_copy(self,data)
pandas.tests.extension.test_sparse.TestInterface.test_no_values_attribute(self,data)
pandas.tests.extension.test_sparse.TestInterface.test_view(self,data)
pandas.tests.extension.test_sparse.TestMethods(BaseSparseTests,base.BaseMethodsTests)
pandas.tests.extension.test_sparse.TestMethods.test_combine_first(self,data)
pandas.tests.extension.test_sparse.TestMethods.test_combine_le(self,data_repeated)
pandas.tests.extension.test_sparse.TestMethods.test_fillna_copy_frame(self,data_missing)
pandas.tests.extension.test_sparse.TestMethods.test_fillna_copy_series(self,data_missing)
pandas.tests.extension.test_sparse.TestMethods.test_fillna_length_mismatch(self,data_missing)
pandas.tests.extension.test_sparse.TestMethods.test_searchsorted(self,data_for_sorting,as_series)
pandas.tests.extension.test_sparse.TestMethods.test_where_series(self,data,na_value)
pandas.tests.extension.test_sparse.TestMissing(BaseSparseTests,base.BaseMissingTests)
pandas.tests.extension.test_sparse.TestMissing.test_fillna_frame(self,data_missing)
pandas.tests.extension.test_sparse.TestMissing.test_fillna_limit_backfill(self,data_missing)
pandas.tests.extension.test_sparse.TestMissing.test_fillna_limit_pad(self,data_missing)
pandas.tests.extension.test_sparse.TestMissing.test_fillna_series(self)
pandas.tests.extension.test_sparse.TestMissing.test_fillna_series_method(self,data_missing)
pandas.tests.extension.test_sparse.TestMissing.test_isna(self,data_missing)
pandas.tests.extension.test_sparse.TestParsing(BaseSparseTests,base.BaseParsingTests)
pandas.tests.extension.test_sparse.TestParsing.test_EA_types(self,engine,data)
pandas.tests.extension.test_sparse.TestPrinting(BaseSparseTests,base.BasePrintingTests)
pandas.tests.extension.test_sparse.TestPrinting.test_array_repr(self,data,size)
pandas.tests.extension.test_sparse.TestReshaping(BaseSparseTests,base.BaseReshapingTests)
pandas.tests.extension.test_sparse.TestReshaping.test_align(self,data,na_value)
pandas.tests.extension.test_sparse.TestReshaping.test_align_frame(self,data,na_value)
pandas.tests.extension.test_sparse.TestReshaping.test_align_series_frame(self,data,na_value)
pandas.tests.extension.test_sparse.TestReshaping.test_concat_columns(self,data,na_value)
pandas.tests.extension.test_sparse.TestReshaping.test_concat_extension_arrays_copy_false(self,data,na_value)
pandas.tests.extension.test_sparse.TestReshaping.test_concat_mixed_dtypes(self,data)
pandas.tests.extension.test_sparse.TestReshaping.test_merge(self,data,na_value)
pandas.tests.extension.test_sparse.data(request)
pandas.tests.extension.test_sparse.data_for_grouping(request)
pandas.tests.extension.test_sparse.data_for_sorting(request)
pandas.tests.extension.test_sparse.data_for_twos(request)
pandas.tests.extension.test_sparse.data_missing(request)
pandas.tests.extension.test_sparse.data_missing_for_sorting(request)
pandas.tests.extension.test_sparse.data_repeated(request)
pandas.tests.extension.test_sparse.dtype()
pandas.tests.extension.test_sparse.make_data(fill_value)
pandas.tests.extension.test_sparse.na_cmp()
pandas.tests.extension.test_sparse.na_value()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/test_common.py----------------------------------------
A:pandas.tests.extension.test_common.arr->DummyArray(np.array([1, 2, 3], dtype=np.int64))
A:pandas.tests.extension.test_common.expected->numpy.array([1, 2, 3], dtype=object)
A:pandas.tests.extension.test_common.result->DummyArray(np.array([1, 2, 3], dtype=np.int64)).astype(arr.dtype)
pandas.tests.extension.test_common.DummyArray(self,data)
pandas.tests.extension.test_common.DummyArray.__array__(self,dtype)
pandas.tests.extension.test_common.DummyArray.__init__(self,data)
pandas.tests.extension.test_common.DummyArray.astype(self,dtype,copy=True)
pandas.tests.extension.test_common.DummyArray.dtype(self)
pandas.tests.extension.test_common.DummyDtype(dtypes.ExtensionDtype)
pandas.tests.extension.test_common.TestExtensionArrayDtype
pandas.tests.extension.test_common.TestExtensionArrayDtype.test_is_extension_array_dtype(self,values)
pandas.tests.extension.test_common.TestExtensionArrayDtype.test_is_not_extension_array_dtype(self,values)
pandas.tests.extension.test_common.test_astype()
pandas.tests.extension.test_common.test_astype_no_copy()
pandas.tests.extension.test_common.test_is_extension_array_dtype(dtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/conftest.py----------------------------------------
pandas.tests.extension.conftest.all_data(request,data,data_missing)
pandas.tests.extension.conftest.as_array(request)
pandas.tests.extension.conftest.as_frame(request)
pandas.tests.extension.conftest.as_series(request)
pandas.tests.extension.conftest.box_in_series(request)
pandas.tests.extension.conftest.data()
pandas.tests.extension.conftest.data_for_grouping()
pandas.tests.extension.conftest.data_for_sorting()
pandas.tests.extension.conftest.data_for_twos()
pandas.tests.extension.conftest.data_missing()
pandas.tests.extension.conftest.data_missing_for_sorting()
pandas.tests.extension.conftest.data_repeated(data)
pandas.tests.extension.conftest.dtype()
pandas.tests.extension.conftest.fillna_method(request)
pandas.tests.extension.conftest.groupby_apply_op(request)
pandas.tests.extension.conftest.na_cmp()
pandas.tests.extension.conftest.na_value()
pandas.tests.extension.conftest.use_numpy(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/test_interval.py----------------------------------------
A:pandas.tests.extension.test_interval.left->numpy.random.uniform(size=N).cumsum()
A:pandas.tests.extension.test_interval.unsupported_fill->pytest.mark.skip('Unsupported fillna option.')
pandas.tests.extension.test_interval.BaseInterval
pandas.tests.extension.test_interval.TestCasting(BaseInterval,base.BaseCastingTests)
pandas.tests.extension.test_interval.TestConstructors(BaseInterval,base.BaseConstructorsTests)
pandas.tests.extension.test_interval.TestDtype(BaseInterval,base.BaseDtypeTests)
pandas.tests.extension.test_interval.TestGetitem(BaseInterval,base.BaseGetitemTests)
pandas.tests.extension.test_interval.TestGrouping(BaseInterval,base.BaseGroupbyTests)
pandas.tests.extension.test_interval.TestInterface(BaseInterval,base.BaseInterfaceTests)
pandas.tests.extension.test_interval.TestInterface.test_view(self,data)
pandas.tests.extension.test_interval.TestMethods(BaseInterval,base.BaseMethodsTests)
pandas.tests.extension.test_interval.TestMethods.test_combine_add(self,data_repeated)
pandas.tests.extension.test_interval.TestMethods.test_fillna_length_mismatch(self,data_missing)
pandas.tests.extension.test_interval.TestMissing(BaseInterval,base.BaseMissingTests)
pandas.tests.extension.test_interval.TestMissing.test_fillna_limit_backfill(self)
pandas.tests.extension.test_interval.TestMissing.test_fillna_limit_pad(self)
pandas.tests.extension.test_interval.TestMissing.test_fillna_series(self)
pandas.tests.extension.test_interval.TestMissing.test_fillna_series_method(self)
pandas.tests.extension.test_interval.TestMissing.test_non_scalar_raises(self,data_missing)
pandas.tests.extension.test_interval.TestParsing(BaseInterval,base.BaseParsingTests)
pandas.tests.extension.test_interval.TestParsing.test_EA_types(self,engine,data)
pandas.tests.extension.test_interval.TestPrinting(BaseInterval,base.BasePrintingTests)
pandas.tests.extension.test_interval.TestPrinting.test_array_repr(self,data,size)
pandas.tests.extension.test_interval.TestReduce(base.BaseNoReduceTests)
pandas.tests.extension.test_interval.TestReshaping(BaseInterval,base.BaseReshapingTests)
pandas.tests.extension.test_interval.TestSetitem(BaseInterval,base.BaseSetitemTests)
pandas.tests.extension.test_interval.TestSetitem.test_setitem_preserves_views(self,data)
pandas.tests.extension.test_interval.data()
pandas.tests.extension.test_interval.data_for_grouping()
pandas.tests.extension.test_interval.data_for_sorting()
pandas.tests.extension.test_interval.data_missing()
pandas.tests.extension.test_interval.data_missing_for_sorting()
pandas.tests.extension.test_interval.dtype()
pandas.tests.extension.test_interval.make_data()
pandas.tests.extension.test_interval.na_value()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/base/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/base/printing.py----------------------------------------
A:pandas.tests.extension.base.printing.data->type(data)._concat_same_type([data] * 5)
A:pandas.tests.extension.base.printing.result->io.StringIO().getvalue()
A:pandas.tests.extension.base.printing.ser->pandas.Series(data)
A:pandas.tests.extension.base.printing.df->pandas.DataFrame({'A': data})
A:pandas.tests.extension.base.printing.buf->io.StringIO()
pandas.tests.extension.base.BasePrintingTests(BaseExtensionTests)
pandas.tests.extension.base.BasePrintingTests.test_array_repr(self,data,size)
pandas.tests.extension.base.BasePrintingTests.test_array_repr_unicode(self,data)
pandas.tests.extension.base.BasePrintingTests.test_dataframe_repr(self,data)
pandas.tests.extension.base.BasePrintingTests.test_dtype_name_in_info(self,data)
pandas.tests.extension.base.BasePrintingTests.test_series_repr(self,data)
pandas.tests.extension.base.printing.BasePrintingTests(BaseExtensionTests)
pandas.tests.extension.base.printing.BasePrintingTests.test_array_repr(self,data,size)
pandas.tests.extension.base.printing.BasePrintingTests.test_array_repr_unicode(self,data)
pandas.tests.extension.base.printing.BasePrintingTests.test_dataframe_repr(self,data)
pandas.tests.extension.base.printing.BasePrintingTests.test_dtype_name_in_info(self,data)
pandas.tests.extension.base.printing.BasePrintingTests.test_series_repr(self,data)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/base/getitem.py----------------------------------------
A:pandas.tests.extension.base.getitem.ser->pandas.Series(array)
A:pandas.tests.extension.base.getitem.expected->pandas.Series(data_missing._from_sequence([na, valid, valid], dtype=data_missing.dtype))
A:pandas.tests.extension.base.getitem.df->pandas.DataFrame({'A': data})
A:pandas.tests.extension.base.getitem.mask->pandas.array(np.zeros(data.shape, dtype='bool'), dtype='boolean')
A:pandas.tests.extension.base.getitem.s->pandas.Series(data)
A:pandas.tests.extension.base.getitem.result->s[:1].item()
A:pandas.tests.extension.base.getitem.n->len(data)
A:pandas.tests.extension.base.getitem.array->data_missing._from_sequence([na, valid], dtype=data_missing.dtype)
pandas.tests.extension.base.BaseGetitemTests(BaseExtensionTests)
pandas.tests.extension.base.BaseGetitemTests.test_get(self,data)
pandas.tests.extension.base.BaseGetitemTests.test_getitem_boolean_array_mask(self,data)
pandas.tests.extension.base.BaseGetitemTests.test_getitem_boolean_na_treated_as_false(self,data)
pandas.tests.extension.base.BaseGetitemTests.test_getitem_empty(self,data)
pandas.tests.extension.base.BaseGetitemTests.test_getitem_integer_array(self,data,idx)
pandas.tests.extension.base.BaseGetitemTests.test_getitem_integer_with_missing_raises(self,data,idx)
pandas.tests.extension.base.BaseGetitemTests.test_getitem_mask(self,data)
pandas.tests.extension.base.BaseGetitemTests.test_getitem_mask_raises(self,data)
pandas.tests.extension.base.BaseGetitemTests.test_getitem_scalar(self,data)
pandas.tests.extension.base.BaseGetitemTests.test_getitem_scalar_na(self,data_missing,na_cmp,na_value)
pandas.tests.extension.base.BaseGetitemTests.test_getitem_slice(self,data)
pandas.tests.extension.base.BaseGetitemTests.test_iloc_frame(self,data)
pandas.tests.extension.base.BaseGetitemTests.test_iloc_series(self,data)
pandas.tests.extension.base.BaseGetitemTests.test_item(self,data)
pandas.tests.extension.base.BaseGetitemTests.test_loc_frame(self,data)
pandas.tests.extension.base.BaseGetitemTests.test_loc_iloc_frame_single_dtype(self,data)
pandas.tests.extension.base.BaseGetitemTests.test_loc_len1(self,data)
pandas.tests.extension.base.BaseGetitemTests.test_loc_series(self,data)
pandas.tests.extension.base.BaseGetitemTests.test_reindex(self,data,na_value)
pandas.tests.extension.base.BaseGetitemTests.test_reindex_non_na_fill_value(self,data_missing)
pandas.tests.extension.base.BaseGetitemTests.test_take(self,data,na_value,na_cmp)
pandas.tests.extension.base.BaseGetitemTests.test_take_empty(self,data,na_value,na_cmp)
pandas.tests.extension.base.BaseGetitemTests.test_take_negative(self,data)
pandas.tests.extension.base.BaseGetitemTests.test_take_non_na_fill_value(self,data_missing)
pandas.tests.extension.base.BaseGetitemTests.test_take_out_of_bounds_raises(self,data,allow_fill)
pandas.tests.extension.base.BaseGetitemTests.test_take_pandas_style_negative_raises(self,data,na_value)
pandas.tests.extension.base.BaseGetitemTests.test_take_sequence(self,data)
pandas.tests.extension.base.BaseGetitemTests.test_take_series(self,data)
pandas.tests.extension.base.getitem.BaseGetitemTests(BaseExtensionTests)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_get(self,data)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_getitem_boolean_array_mask(self,data)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_getitem_boolean_na_treated_as_false(self,data)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_getitem_empty(self,data)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_getitem_integer_array(self,data,idx)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_getitem_integer_with_missing_raises(self,data,idx)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_getitem_mask(self,data)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_getitem_mask_raises(self,data)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_getitem_scalar(self,data)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_getitem_scalar_na(self,data_missing,na_cmp,na_value)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_getitem_slice(self,data)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_iloc_frame(self,data)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_iloc_series(self,data)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_item(self,data)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_loc_frame(self,data)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_loc_iloc_frame_single_dtype(self,data)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_loc_len1(self,data)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_loc_series(self,data)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_reindex(self,data,na_value)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_reindex_non_na_fill_value(self,data_missing)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_take(self,data,na_value,na_cmp)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_take_empty(self,data,na_value,na_cmp)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_take_negative(self,data)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_take_non_na_fill_value(self,data_missing)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_take_out_of_bounds_raises(self,data,allow_fill)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_take_pandas_style_negative_raises(self,data,na_value)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_take_sequence(self,data)
pandas.tests.extension.base.getitem.BaseGetitemTests.test_take_series(self,data)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/base/groupby.py----------------------------------------
A:pandas.tests.extension.base.groupby.df->pandas.DataFrame({'A': [1, 1, 2, 2, 3, 3, 1, 4], 'B': data_for_grouping, 'C': [1, 1, 1, 1, 1, 1, 1, 1]})
A:pandas.tests.extension.base.groupby.result->pandas.DataFrame({'A': [1, 1, 2, 2, 3, 3, 1, 4], 'B': data_for_grouping, 'C': [1, 1, 1, 1, 1, 1, 1, 1]}).groupby('A').B.apply(lambda x: x.array)
A:pandas.tests.extension.base.groupby.(_, index)->pandas.factorize(data_for_grouping, sort=False)
A:pandas.tests.extension.base.groupby.index->pandas.Index(index, name='B')
A:pandas.tests.extension.base.groupby.expected->pandas.Index(['C'])
pandas.tests.extension.base.BaseGroupbyTests(BaseExtensionTests)
pandas.tests.extension.base.BaseGroupbyTests.test_groupby_apply_identity(self,data_for_grouping)
pandas.tests.extension.base.BaseGroupbyTests.test_groupby_extension_agg(self,as_index,data_for_grouping)
pandas.tests.extension.base.BaseGroupbyTests.test_groupby_extension_apply(self,data_for_grouping,groupby_apply_op)
pandas.tests.extension.base.BaseGroupbyTests.test_groupby_extension_no_sort(self,data_for_grouping)
pandas.tests.extension.base.BaseGroupbyTests.test_groupby_extension_transform(self,data_for_grouping)
pandas.tests.extension.base.BaseGroupbyTests.test_grouping_grouper(self,data_for_grouping)
pandas.tests.extension.base.BaseGroupbyTests.test_in_numeric_groupby(self,data_for_grouping)
pandas.tests.extension.base.groupby.BaseGroupbyTests(BaseExtensionTests)
pandas.tests.extension.base.groupby.BaseGroupbyTests.test_groupby_apply_identity(self,data_for_grouping)
pandas.tests.extension.base.groupby.BaseGroupbyTests.test_groupby_extension_agg(self,as_index,data_for_grouping)
pandas.tests.extension.base.groupby.BaseGroupbyTests.test_groupby_extension_apply(self,data_for_grouping,groupby_apply_op)
pandas.tests.extension.base.groupby.BaseGroupbyTests.test_groupby_extension_no_sort(self,data_for_grouping)
pandas.tests.extension.base.groupby.BaseGroupbyTests.test_groupby_extension_transform(self,data_for_grouping)
pandas.tests.extension.base.groupby.BaseGroupbyTests.test_grouping_grouper(self,data_for_grouping)
pandas.tests.extension.base.groupby.BaseGroupbyTests.test_in_numeric_groupby(self,data_for_grouping)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/base/missing.py----------------------------------------
A:pandas.tests.extension.base.missing.expected->pandas.DataFrame({'A': data, 'B': [0.0] * len(result)})
A:pandas.tests.extension.base.missing.result->pandas.DataFrame({'A': data, 'B': [np.nan] * len(data)}).fillna({'B': 0.0})
A:pandas.tests.extension.base.missing.ser->pandas.Series(data_missing)
A:pandas.tests.extension.base.missing.df->pandas.DataFrame({'A': data_missing, 'B': [1, np.nan]})
A:pandas.tests.extension.base.missing.arr->data_missing.take([1, 0, 0, 0, 1])
pandas.tests.extension.base.BaseMissingTests(BaseExtensionTests)
pandas.tests.extension.base.BaseMissingTests.test_dropna_array(self,data_missing)
pandas.tests.extension.base.BaseMissingTests.test_dropna_frame(self,data_missing)
pandas.tests.extension.base.BaseMissingTests.test_dropna_series(self,data_missing)
pandas.tests.extension.base.BaseMissingTests.test_fillna_fill_other(self,data)
pandas.tests.extension.base.BaseMissingTests.test_fillna_frame(self,data_missing)
pandas.tests.extension.base.BaseMissingTests.test_fillna_limit_backfill(self,data_missing)
pandas.tests.extension.base.BaseMissingTests.test_fillna_limit_pad(self,data_missing)
pandas.tests.extension.base.BaseMissingTests.test_fillna_scalar(self,data_missing)
pandas.tests.extension.base.BaseMissingTests.test_fillna_series(self,data_missing)
pandas.tests.extension.base.BaseMissingTests.test_fillna_series_method(self,data_missing,fillna_method)
pandas.tests.extension.base.BaseMissingTests.test_isna(self,data_missing)
pandas.tests.extension.base.missing.BaseMissingTests(BaseExtensionTests)
pandas.tests.extension.base.missing.BaseMissingTests.test_dropna_array(self,data_missing)
pandas.tests.extension.base.missing.BaseMissingTests.test_dropna_frame(self,data_missing)
pandas.tests.extension.base.missing.BaseMissingTests.test_dropna_series(self,data_missing)
pandas.tests.extension.base.missing.BaseMissingTests.test_fillna_fill_other(self,data)
pandas.tests.extension.base.missing.BaseMissingTests.test_fillna_frame(self,data_missing)
pandas.tests.extension.base.missing.BaseMissingTests.test_fillna_limit_backfill(self,data_missing)
pandas.tests.extension.base.missing.BaseMissingTests.test_fillna_limit_pad(self,data_missing)
pandas.tests.extension.base.missing.BaseMissingTests.test_fillna_scalar(self,data_missing)
pandas.tests.extension.base.missing.BaseMissingTests.test_fillna_series(self,data_missing)
pandas.tests.extension.base.missing.BaseMissingTests.test_fillna_series_method(self,data_missing,fillna_method)
pandas.tests.extension.base.missing.BaseMissingTests.test_isna(self,data_missing)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/base/interface.py----------------------------------------
A:pandas.tests.extension.base.interface.s->pandas.Series(data)
A:pandas.tests.extension.base.interface.result->data.view()
A:pandas.tests.extension.base.interface.expected->numpy.array(list(data), dtype=object)
A:pandas.tests.extension.base.interface.na->data_missing.isna()
pandas.tests.extension.base.BaseInterfaceTests(BaseExtensionTests)
pandas.tests.extension.base.BaseInterfaceTests.test_array_interface(self,data)
pandas.tests.extension.base.BaseInterfaceTests.test_can_hold_na_valid(self,data)
pandas.tests.extension.base.BaseInterfaceTests.test_copy(self,data)
pandas.tests.extension.base.BaseInterfaceTests.test_is_extension_array_dtype(self,data)
pandas.tests.extension.base.BaseInterfaceTests.test_is_numeric_honored(self,data)
pandas.tests.extension.base.BaseInterfaceTests.test_isna_extension_array(self,data_missing)
pandas.tests.extension.base.BaseInterfaceTests.test_len(self,data)
pandas.tests.extension.base.BaseInterfaceTests.test_memory_usage(self,data)
pandas.tests.extension.base.BaseInterfaceTests.test_ndim(self,data)
pandas.tests.extension.base.BaseInterfaceTests.test_no_values_attribute(self,data)
pandas.tests.extension.base.BaseInterfaceTests.test_size(self,data)
pandas.tests.extension.base.BaseInterfaceTests.test_view(self,data)
pandas.tests.extension.base.interface.BaseInterfaceTests(BaseExtensionTests)
pandas.tests.extension.base.interface.BaseInterfaceTests.test_array_interface(self,data)
pandas.tests.extension.base.interface.BaseInterfaceTests.test_can_hold_na_valid(self,data)
pandas.tests.extension.base.interface.BaseInterfaceTests.test_copy(self,data)
pandas.tests.extension.base.interface.BaseInterfaceTests.test_is_extension_array_dtype(self,data)
pandas.tests.extension.base.interface.BaseInterfaceTests.test_is_numeric_honored(self,data)
pandas.tests.extension.base.interface.BaseInterfaceTests.test_isna_extension_array(self,data_missing)
pandas.tests.extension.base.interface.BaseInterfaceTests.test_len(self,data)
pandas.tests.extension.base.interface.BaseInterfaceTests.test_memory_usage(self,data)
pandas.tests.extension.base.interface.BaseInterfaceTests.test_ndim(self,data)
pandas.tests.extension.base.interface.BaseInterfaceTests.test_no_values_attribute(self,data)
pandas.tests.extension.base.interface.BaseInterfaceTests.test_size(self,data)
pandas.tests.extension.base.interface.BaseInterfaceTests.test_view(self,data)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/base/casting.py----------------------------------------
A:pandas.tests.extension.base.casting.ser->pandas.Series({'A': all_data})
A:pandas.tests.extension.base.casting.result->pandas.Series(data).to_numpy()
A:pandas.tests.extension.base.casting.expected->numpy.asarray(data)
pandas.tests.extension.base.BaseCastingTests(BaseExtensionTests)
pandas.tests.extension.base.BaseCastingTests.test_astype_object_series(self,all_data)
pandas.tests.extension.base.BaseCastingTests.test_astype_str(self,data)
pandas.tests.extension.base.BaseCastingTests.test_to_numpy(self,data)
pandas.tests.extension.base.BaseCastingTests.test_tolist(self,data)
pandas.tests.extension.base.casting.BaseCastingTests(BaseExtensionTests)
pandas.tests.extension.base.casting.BaseCastingTests.test_astype_object_series(self,all_data)
pandas.tests.extension.base.casting.BaseCastingTests.test_astype_str(self,data)
pandas.tests.extension.base.casting.BaseCastingTests.test_to_numpy(self,data)
pandas.tests.extension.base.casting.BaseCastingTests.test_tolist(self,data)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/base/dtype.py----------------------------------------
A:pandas.tests.extension.base.dtype.valid->set('biufcmMOSUV')
A:pandas.tests.extension.base.dtype.result->type(dtype).is_dtype(dtype)
A:pandas.tests.extension.base.dtype.df->pandas.DataFrame({'A': pd.Series(data, dtype=dtype), 'B': data, 'C': 'foo', 'D': 1})
A:pandas.tests.extension.base.dtype.expected->pandas.Series([True, True, False, False], index=list('ABCD'))
A:pandas.tests.extension.base.dtype.dtype_instance->type(dtype).construct_from_string(dtype.name)
pandas.tests.extension.base.BaseDtypeTests(BaseExtensionTests)
pandas.tests.extension.base.BaseDtypeTests.test_array_type(self,data,dtype)
pandas.tests.extension.base.BaseDtypeTests.test_check_dtype(self,data)
pandas.tests.extension.base.BaseDtypeTests.test_construct_from_string(self,dtype)
pandas.tests.extension.base.BaseDtypeTests.test_construct_from_string_another_type_raises(self,dtype)
pandas.tests.extension.base.BaseDtypeTests.test_construct_from_string_own_name(self,dtype)
pandas.tests.extension.base.BaseDtypeTests.test_eq(self,dtype)
pandas.tests.extension.base.BaseDtypeTests.test_eq_with_numpy_object(self,dtype)
pandas.tests.extension.base.BaseDtypeTests.test_eq_with_self(self,dtype)
pandas.tests.extension.base.BaseDtypeTests.test_eq_with_str(self,dtype)
pandas.tests.extension.base.BaseDtypeTests.test_hashable(self,dtype)
pandas.tests.extension.base.BaseDtypeTests.test_is_dtype_from_name(self,dtype)
pandas.tests.extension.base.BaseDtypeTests.test_is_dtype_from_self(self,dtype)
pandas.tests.extension.base.BaseDtypeTests.test_is_dtype_other_input(self,dtype)
pandas.tests.extension.base.BaseDtypeTests.test_is_dtype_unboxes_dtype(self,data,dtype)
pandas.tests.extension.base.BaseDtypeTests.test_is_not_object_type(self,dtype)
pandas.tests.extension.base.BaseDtypeTests.test_is_not_string_type(self,dtype)
pandas.tests.extension.base.BaseDtypeTests.test_kind(self,dtype)
pandas.tests.extension.base.BaseDtypeTests.test_name(self,dtype)
pandas.tests.extension.base.BaseDtypeTests.test_str(self,dtype)
pandas.tests.extension.base.dtype.BaseDtypeTests(BaseExtensionTests)
pandas.tests.extension.base.dtype.BaseDtypeTests.test_array_type(self,data,dtype)
pandas.tests.extension.base.dtype.BaseDtypeTests.test_check_dtype(self,data)
pandas.tests.extension.base.dtype.BaseDtypeTests.test_construct_from_string(self,dtype)
pandas.tests.extension.base.dtype.BaseDtypeTests.test_construct_from_string_another_type_raises(self,dtype)
pandas.tests.extension.base.dtype.BaseDtypeTests.test_construct_from_string_own_name(self,dtype)
pandas.tests.extension.base.dtype.BaseDtypeTests.test_eq(self,dtype)
pandas.tests.extension.base.dtype.BaseDtypeTests.test_eq_with_numpy_object(self,dtype)
pandas.tests.extension.base.dtype.BaseDtypeTests.test_eq_with_self(self,dtype)
pandas.tests.extension.base.dtype.BaseDtypeTests.test_eq_with_str(self,dtype)
pandas.tests.extension.base.dtype.BaseDtypeTests.test_hashable(self,dtype)
pandas.tests.extension.base.dtype.BaseDtypeTests.test_is_dtype_from_name(self,dtype)
pandas.tests.extension.base.dtype.BaseDtypeTests.test_is_dtype_from_self(self,dtype)
pandas.tests.extension.base.dtype.BaseDtypeTests.test_is_dtype_other_input(self,dtype)
pandas.tests.extension.base.dtype.BaseDtypeTests.test_is_dtype_unboxes_dtype(self,data,dtype)
pandas.tests.extension.base.dtype.BaseDtypeTests.test_is_not_object_type(self,dtype)
pandas.tests.extension.base.dtype.BaseDtypeTests.test_is_not_string_type(self,dtype)
pandas.tests.extension.base.dtype.BaseDtypeTests.test_kind(self,dtype)
pandas.tests.extension.base.dtype.BaseDtypeTests.test_name(self,dtype)
pandas.tests.extension.base.dtype.BaseDtypeTests.test_str(self,dtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/base/constructors.py----------------------------------------
A:pandas.tests.extension.base.constructors.result->pandas.array(data, dtype=np.dtype(object))
A:pandas.tests.extension.base.constructors.result2->pandas.Series(result)
A:pandas.tests.extension.base.constructors.data->pandas.Series(data)
A:pandas.tests.extension.base.constructors.expected->pandas.arrays.PandasArray(np.asarray(data, dtype=object))
pandas.tests.extension.base.BaseConstructorsTests(BaseExtensionTests)
pandas.tests.extension.base.BaseConstructorsTests.test_array_from_scalars(self,data)
pandas.tests.extension.base.BaseConstructorsTests.test_dataframe_constructor_from_dict(self,data,from_series)
pandas.tests.extension.base.BaseConstructorsTests.test_dataframe_from_series(self,data)
pandas.tests.extension.base.BaseConstructorsTests.test_from_dtype(self,data)
pandas.tests.extension.base.BaseConstructorsTests.test_from_sequence_from_cls(self,data)
pandas.tests.extension.base.BaseConstructorsTests.test_pandas_array(self,data)
pandas.tests.extension.base.BaseConstructorsTests.test_pandas_array_dtype(self,data)
pandas.tests.extension.base.BaseConstructorsTests.test_series_constructor(self,data)
pandas.tests.extension.base.BaseConstructorsTests.test_series_given_mismatched_index_raises(self,data)
pandas.tests.extension.base.constructors.BaseConstructorsTests(BaseExtensionTests)
pandas.tests.extension.base.constructors.BaseConstructorsTests.test_array_from_scalars(self,data)
pandas.tests.extension.base.constructors.BaseConstructorsTests.test_dataframe_constructor_from_dict(self,data,from_series)
pandas.tests.extension.base.constructors.BaseConstructorsTests.test_dataframe_from_series(self,data)
pandas.tests.extension.base.constructors.BaseConstructorsTests.test_from_dtype(self,data)
pandas.tests.extension.base.constructors.BaseConstructorsTests.test_from_sequence_from_cls(self,data)
pandas.tests.extension.base.constructors.BaseConstructorsTests.test_pandas_array(self,data)
pandas.tests.extension.base.constructors.BaseConstructorsTests.test_pandas_array_dtype(self,data)
pandas.tests.extension.base.constructors.BaseConstructorsTests.test_series_constructor(self,data)
pandas.tests.extension.base.constructors.BaseConstructorsTests.test_series_given_mismatched_index_raises(self,data)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/base/reshaping.py----------------------------------------
A:pandas.tests.extension.base.reshaping.wrapped->pandas.DataFrame(wrapped)
A:pandas.tests.extension.base.reshaping.result->data.ravel()
A:pandas.tests.extension.base.reshaping.valid_block->pandas.DataFrame({'a': valid_block})
A:pandas.tests.extension.base.reshaping.na_block->pandas.DataFrame({'a': na_block})
A:pandas.tests.extension.base.reshaping.expected->pandas.DataFrame({'a': type(data)._from_sequence([data[0]] * 2, dtype=data.dtype), 'b': type(data)._from_sequence([data[1]] * 2, dtype=data.dtype), 'c': type(data)._from_sequence([data[2]] * 2, dtype=data.dtype), 'd': type(data)._from_sequence([data[3]] * 2, dtype=data.dtype)}, index=['A', 'B'])
A:pandas.tests.extension.base.reshaping.df1->pandas.DataFrame({'key': key, 'val': [1, 2, 3]})
A:pandas.tests.extension.base.reshaping.df2->pandas.DataFrame({'key': key, 'val': [1, 2, 3]})
A:pandas.tests.extension.base.reshaping.df3->pandas.DataFrame({'A': ['a', 'b', 'c']}).astype('category')
A:pandas.tests.extension.base.reshaping.(r1, r2)->pandas.DataFrame({'A': data, 'B': data}, index=index).align(df)
A:pandas.tests.extension.base.reshaping.e1->pandas.Series(data._from_sequence(list(data) + [na_value], dtype=data.dtype), name=ser.name)
A:pandas.tests.extension.base.reshaping.e2->pandas.DataFrame({'A': data._from_sequence([na_value] + list(b), dtype=data.dtype)})
A:pandas.tests.extension.base.reshaping.ser->pandas.DataFrame({'A': data, 'B': data}, index=index)
A:pandas.tests.extension.base.reshaping.df->pandas.DataFrame({'A': data[:4], 'B': data[:4]}, index=['a', 'b', 'c', 'd'])
A:pandas.tests.extension.base.reshaping.res->pandas.merge(df1, df2, how='outer')
A:pandas.tests.extension.base.reshaping.exp->pandas.DataFrame({'int1': [1, 1, 2, 3, np.nan], 'int2': [1, 2, 3, np.nan, 4], 'key': [0, 0, 1, 2, 3], 'ext': data._from_sequence([data[0], data[0], data[1], data[2], na_value], dtype=data.dtype)})
A:pandas.tests.extension.base.reshaping.key->type(data)._from_sequence([a, b, a], dtype=data.dtype)
A:pandas.tests.extension.base.reshaping.levels->list(range(n))
A:pandas.tests.extension.base.reshaping.combinations->itertools.chain.from_iterable((itertools.permutations(levels, i) for i in range(1, n)))
pandas.tests.extension.base.BaseReshapingTests(BaseExtensionTests)
pandas.tests.extension.base.BaseReshapingTests.test_align(self,data,na_value)
pandas.tests.extension.base.BaseReshapingTests.test_align_frame(self,data,na_value)
pandas.tests.extension.base.BaseReshapingTests.test_align_series_frame(self,data,na_value)
pandas.tests.extension.base.BaseReshapingTests.test_concat(self,data,in_frame)
pandas.tests.extension.base.BaseReshapingTests.test_concat_all_na_block(self,data_missing,in_frame)
pandas.tests.extension.base.BaseReshapingTests.test_concat_columns(self,data,na_value)
pandas.tests.extension.base.BaseReshapingTests.test_concat_extension_arrays_copy_false(self,data,na_value)
pandas.tests.extension.base.BaseReshapingTests.test_concat_mixed_dtypes(self,data)
pandas.tests.extension.base.BaseReshapingTests.test_merge(self,data,na_value)
pandas.tests.extension.base.BaseReshapingTests.test_merge_on_extension_array(self,data)
pandas.tests.extension.base.BaseReshapingTests.test_merge_on_extension_array_duplicates(self,data)
pandas.tests.extension.base.BaseReshapingTests.test_ravel(self,data)
pandas.tests.extension.base.BaseReshapingTests.test_set_frame_expand_extension_with_regular(self,data)
pandas.tests.extension.base.BaseReshapingTests.test_set_frame_expand_regular_with_extension(self,data)
pandas.tests.extension.base.BaseReshapingTests.test_set_frame_overwrite_object(self,data)
pandas.tests.extension.base.BaseReshapingTests.test_stack(self,data,columns)
pandas.tests.extension.base.BaseReshapingTests.test_transpose(self,data)
pandas.tests.extension.base.BaseReshapingTests.test_unstack(self,data,index,obj)
pandas.tests.extension.base.reshaping.BaseReshapingTests(BaseExtensionTests)
pandas.tests.extension.base.reshaping.BaseReshapingTests.test_align(self,data,na_value)
pandas.tests.extension.base.reshaping.BaseReshapingTests.test_align_frame(self,data,na_value)
pandas.tests.extension.base.reshaping.BaseReshapingTests.test_align_series_frame(self,data,na_value)
pandas.tests.extension.base.reshaping.BaseReshapingTests.test_concat(self,data,in_frame)
pandas.tests.extension.base.reshaping.BaseReshapingTests.test_concat_all_na_block(self,data_missing,in_frame)
pandas.tests.extension.base.reshaping.BaseReshapingTests.test_concat_columns(self,data,na_value)
pandas.tests.extension.base.reshaping.BaseReshapingTests.test_concat_extension_arrays_copy_false(self,data,na_value)
pandas.tests.extension.base.reshaping.BaseReshapingTests.test_concat_mixed_dtypes(self,data)
pandas.tests.extension.base.reshaping.BaseReshapingTests.test_merge(self,data,na_value)
pandas.tests.extension.base.reshaping.BaseReshapingTests.test_merge_on_extension_array(self,data)
pandas.tests.extension.base.reshaping.BaseReshapingTests.test_merge_on_extension_array_duplicates(self,data)
pandas.tests.extension.base.reshaping.BaseReshapingTests.test_ravel(self,data)
pandas.tests.extension.base.reshaping.BaseReshapingTests.test_set_frame_expand_extension_with_regular(self,data)
pandas.tests.extension.base.reshaping.BaseReshapingTests.test_set_frame_expand_regular_with_extension(self,data)
pandas.tests.extension.base.reshaping.BaseReshapingTests.test_set_frame_overwrite_object(self,data)
pandas.tests.extension.base.reshaping.BaseReshapingTests.test_stack(self,data,columns)
pandas.tests.extension.base.reshaping.BaseReshapingTests.test_transpose(self,data)
pandas.tests.extension.base.reshaping.BaseReshapingTests.test_unstack(self,data,index,obj)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/base/methods.py----------------------------------------
A:pandas.tests.extension.base.methods.other->pandas.DataFrame({'a': other})
A:pandas.tests.extension.base.methods.result->ser.to_frame(name='a').where(cond, other)
A:pandas.tests.extension.base.methods.expected->pandas.Series(expected, index=arr.index.repeat(repeats))
A:pandas.tests.extension.base.methods.df->pandas.DataFrame({'A': data, 'B': [1.0] * 5})
A:pandas.tests.extension.base.methods.ser->ser.to_frame(name='a').to_frame(name='a')
A:pandas.tests.extension.base.methods.duplicated->box(data._from_sequence([data[0], data[0]]))
A:pandas.tests.extension.base.methods.(codes, uniques)->pandas.factorize(data[:0])
A:pandas.tests.extension.base.methods.expected_codes->numpy.array([], dtype=np.intp)
A:pandas.tests.extension.base.methods.expected_uniques->type(data)._from_sequence([], dtype=data[:0].dtype)
A:pandas.tests.extension.base.methods.(codes_1, uniques_1)->pandas.factorize(data_for_grouping, na_sentinel=na_sentinel)
A:pandas.tests.extension.base.methods.(codes_2, uniques_2)->data_for_grouping.factorize(na_sentinel=na_sentinel)
A:pandas.tests.extension.base.methods.arr->pandas.Series(arr)
A:pandas.tests.extension.base.methods.(orig_data1, orig_data2)->data_repeated(2)
A:pandas.tests.extension.base.methods.s1->pandas.Series(orig_data1)
A:pandas.tests.extension.base.methods.s2->pandas.Series(orig_data2)
A:pandas.tests.extension.base.methods.a->pandas.util.hash_pandas_object(data)
A:pandas.tests.extension.base.methods.b->pandas.util.hash_pandas_object(data)
A:pandas.tests.extension.base.methods.data->data.to_frame().to_frame()
A:pandas.tests.extension.base.methods.s->pandas.Series(data)
A:pandas.tests.extension.base.methods.sorter->numpy.array([1, 2, 0])
A:pandas.tests.extension.base.methods.cls->type(data)
A:pandas.tests.extension.base.methods.cond->pandas.DataFrame({'a': cond})
pandas.tests.extension.base.BaseMethodsTests(BaseExtensionTests)
pandas.tests.extension.base.BaseMethodsTests.test_apply_simple_series(self,data)
pandas.tests.extension.base.BaseMethodsTests.test_argsort(self,data_for_sorting)
pandas.tests.extension.base.BaseMethodsTests.test_argsort_missing(self,data_missing_for_sorting)
pandas.tests.extension.base.BaseMethodsTests.test_argsort_missing_array(self,data_missing_for_sorting)
pandas.tests.extension.base.BaseMethodsTests.test_combine_add(self,data_repeated)
pandas.tests.extension.base.BaseMethodsTests.test_combine_first(self,data)
pandas.tests.extension.base.BaseMethodsTests.test_combine_le(self,data_repeated)
pandas.tests.extension.base.BaseMethodsTests.test_container_shift(self,data,frame,periods,indices)
pandas.tests.extension.base.BaseMethodsTests.test_count(self,data_missing)
pandas.tests.extension.base.BaseMethodsTests.test_diff(self,data,periods)
pandas.tests.extension.base.BaseMethodsTests.test_factorize(self,data_for_grouping,na_sentinel)
pandas.tests.extension.base.BaseMethodsTests.test_factorize_empty(self,data)
pandas.tests.extension.base.BaseMethodsTests.test_factorize_equivalence(self,data_for_grouping,na_sentinel)
pandas.tests.extension.base.BaseMethodsTests.test_fillna_copy_frame(self,data_missing)
pandas.tests.extension.base.BaseMethodsTests.test_fillna_copy_series(self,data_missing)
pandas.tests.extension.base.BaseMethodsTests.test_fillna_length_mismatch(self,data_missing)
pandas.tests.extension.base.BaseMethodsTests.test_hash_pandas_object_works(self,data,as_frame)
pandas.tests.extension.base.BaseMethodsTests.test_nargsort(self,data_missing_for_sorting,na_position,expected)
pandas.tests.extension.base.BaseMethodsTests.test_repeat(self,data,repeats,as_series,use_numpy)
pandas.tests.extension.base.BaseMethodsTests.test_repeat_raises(self,data,repeats,kwargs,error,msg,use_numpy)
pandas.tests.extension.base.BaseMethodsTests.test_searchsorted(self,data_for_sorting,as_series)
pandas.tests.extension.base.BaseMethodsTests.test_series_count(self,data_missing)
pandas.tests.extension.base.BaseMethodsTests.test_shift_empty_array(self,data,periods)
pandas.tests.extension.base.BaseMethodsTests.test_shift_fill_value(self,data)
pandas.tests.extension.base.BaseMethodsTests.test_shift_non_empty_array(self,data,periods,indices)
pandas.tests.extension.base.BaseMethodsTests.test_shift_zero_copies(self,data)
pandas.tests.extension.base.BaseMethodsTests.test_sort_values(self,data_for_sorting,ascending)
pandas.tests.extension.base.BaseMethodsTests.test_sort_values_frame(self,data_for_sorting,ascending)
pandas.tests.extension.base.BaseMethodsTests.test_sort_values_missing(self,data_missing_for_sorting,ascending)
pandas.tests.extension.base.BaseMethodsTests.test_unique(self,data,box,method)
pandas.tests.extension.base.BaseMethodsTests.test_value_counts(self,all_data,dropna)
pandas.tests.extension.base.BaseMethodsTests.test_where_series(self,data,na_value,as_frame)
pandas.tests.extension.base.methods.BaseMethodsTests(BaseExtensionTests)
pandas.tests.extension.base.methods.BaseMethodsTests.test_apply_simple_series(self,data)
pandas.tests.extension.base.methods.BaseMethodsTests.test_argsort(self,data_for_sorting)
pandas.tests.extension.base.methods.BaseMethodsTests.test_argsort_missing(self,data_missing_for_sorting)
pandas.tests.extension.base.methods.BaseMethodsTests.test_argsort_missing_array(self,data_missing_for_sorting)
pandas.tests.extension.base.methods.BaseMethodsTests.test_combine_add(self,data_repeated)
pandas.tests.extension.base.methods.BaseMethodsTests.test_combine_first(self,data)
pandas.tests.extension.base.methods.BaseMethodsTests.test_combine_le(self,data_repeated)
pandas.tests.extension.base.methods.BaseMethodsTests.test_container_shift(self,data,frame,periods,indices)
pandas.tests.extension.base.methods.BaseMethodsTests.test_count(self,data_missing)
pandas.tests.extension.base.methods.BaseMethodsTests.test_diff(self,data,periods)
pandas.tests.extension.base.methods.BaseMethodsTests.test_factorize(self,data_for_grouping,na_sentinel)
pandas.tests.extension.base.methods.BaseMethodsTests.test_factorize_empty(self,data)
pandas.tests.extension.base.methods.BaseMethodsTests.test_factorize_equivalence(self,data_for_grouping,na_sentinel)
pandas.tests.extension.base.methods.BaseMethodsTests.test_fillna_copy_frame(self,data_missing)
pandas.tests.extension.base.methods.BaseMethodsTests.test_fillna_copy_series(self,data_missing)
pandas.tests.extension.base.methods.BaseMethodsTests.test_fillna_length_mismatch(self,data_missing)
pandas.tests.extension.base.methods.BaseMethodsTests.test_hash_pandas_object_works(self,data,as_frame)
pandas.tests.extension.base.methods.BaseMethodsTests.test_nargsort(self,data_missing_for_sorting,na_position,expected)
pandas.tests.extension.base.methods.BaseMethodsTests.test_repeat(self,data,repeats,as_series,use_numpy)
pandas.tests.extension.base.methods.BaseMethodsTests.test_repeat_raises(self,data,repeats,kwargs,error,msg,use_numpy)
pandas.tests.extension.base.methods.BaseMethodsTests.test_searchsorted(self,data_for_sorting,as_series)
pandas.tests.extension.base.methods.BaseMethodsTests.test_series_count(self,data_missing)
pandas.tests.extension.base.methods.BaseMethodsTests.test_shift_empty_array(self,data,periods)
pandas.tests.extension.base.methods.BaseMethodsTests.test_shift_fill_value(self,data)
pandas.tests.extension.base.methods.BaseMethodsTests.test_shift_non_empty_array(self,data,periods,indices)
pandas.tests.extension.base.methods.BaseMethodsTests.test_shift_zero_copies(self,data)
pandas.tests.extension.base.methods.BaseMethodsTests.test_sort_values(self,data_for_sorting,ascending)
pandas.tests.extension.base.methods.BaseMethodsTests.test_sort_values_frame(self,data_for_sorting,ascending)
pandas.tests.extension.base.methods.BaseMethodsTests.test_sort_values_missing(self,data_missing_for_sorting,ascending)
pandas.tests.extension.base.methods.BaseMethodsTests.test_unique(self,data,box,method)
pandas.tests.extension.base.methods.BaseMethodsTests.test_value_counts(self,all_data,dropna)
pandas.tests.extension.base.methods.BaseMethodsTests.test_where_series(self,data,na_value,as_frame)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/base/ops.py----------------------------------------
A:pandas.tests.extension.base.ops.short_opname->op_name.strip('_')
A:pandas.tests.extension.base.ops.op->self.get_op_from_name(op_name)
A:pandas.tests.extension.base.ops.rop->getattr(operator, short_opname[1:])
A:pandas.tests.extension.base.ops.result->data.__eq__(other)
A:pandas.tests.extension.base.ops.expected->pandas.Series(~data, name='name')
A:pandas.tests.extension.base.ops.(result_div, result_mod)->op(s, other)
A:pandas.tests.extension.base.ops.s->pandas.Series(data, name='name')
A:pandas.tests.extension.base.ops.df->pandas.DataFrame({'A': data})
A:pandas.tests.extension.base.ops.other->pandas.Series(data)
pandas.tests.extension.base.BaseArithmeticOpsTests(BaseOpsUtil)
pandas.tests.extension.base.BaseArithmeticOpsTests.test_add_series_with_extension_array(self,data)
pandas.tests.extension.base.BaseArithmeticOpsTests.test_arith_frame_with_scalar(self,data,all_arithmetic_operators)
pandas.tests.extension.base.BaseArithmeticOpsTests.test_arith_series_with_array(self,data,all_arithmetic_operators)
pandas.tests.extension.base.BaseArithmeticOpsTests.test_arith_series_with_scalar(self,data,all_arithmetic_operators)
pandas.tests.extension.base.BaseArithmeticOpsTests.test_direct_arith_with_series_returns_not_implemented(self,data)
pandas.tests.extension.base.BaseArithmeticOpsTests.test_divmod(self,data)
pandas.tests.extension.base.BaseArithmeticOpsTests.test_divmod_series_array(self,data,data_for_twos)
pandas.tests.extension.base.BaseArithmeticOpsTests.test_error(self,data,all_arithmetic_operators)
pandas.tests.extension.base.BaseComparisonOpsTests(BaseOpsUtil)
pandas.tests.extension.base.BaseComparisonOpsTests._compare_other(self,s,data,op_name,other)
pandas.tests.extension.base.BaseComparisonOpsTests.test_compare_array(self,data,all_compare_operators)
pandas.tests.extension.base.BaseComparisonOpsTests.test_compare_scalar(self,data,all_compare_operators)
pandas.tests.extension.base.BaseComparisonOpsTests.test_direct_arith_with_series_returns_not_implemented(self,data)
pandas.tests.extension.base.BaseOpsUtil(BaseExtensionTests)
pandas.tests.extension.base.BaseOpsUtil._check_divmod_op(self,s,op,other,exc=Exception)
pandas.tests.extension.base.BaseOpsUtil._check_op(self,s,op,other,op_name,exc=NotImplementedError)
pandas.tests.extension.base.BaseOpsUtil.check_opname(self,s,op_name,other,exc=Exception)
pandas.tests.extension.base.BaseOpsUtil.get_op_from_name(self,op_name)
pandas.tests.extension.base.BaseUnaryOpsTests(BaseOpsUtil)
pandas.tests.extension.base.BaseUnaryOpsTests.test_invert(self,data)
pandas.tests.extension.base.ops.BaseArithmeticOpsTests(BaseOpsUtil)
pandas.tests.extension.base.ops.BaseArithmeticOpsTests.test_add_series_with_extension_array(self,data)
pandas.tests.extension.base.ops.BaseArithmeticOpsTests.test_arith_frame_with_scalar(self,data,all_arithmetic_operators)
pandas.tests.extension.base.ops.BaseArithmeticOpsTests.test_arith_series_with_array(self,data,all_arithmetic_operators)
pandas.tests.extension.base.ops.BaseArithmeticOpsTests.test_arith_series_with_scalar(self,data,all_arithmetic_operators)
pandas.tests.extension.base.ops.BaseArithmeticOpsTests.test_direct_arith_with_series_returns_not_implemented(self,data)
pandas.tests.extension.base.ops.BaseArithmeticOpsTests.test_divmod(self,data)
pandas.tests.extension.base.ops.BaseArithmeticOpsTests.test_divmod_series_array(self,data,data_for_twos)
pandas.tests.extension.base.ops.BaseArithmeticOpsTests.test_error(self,data,all_arithmetic_operators)
pandas.tests.extension.base.ops.BaseComparisonOpsTests(BaseOpsUtil)
pandas.tests.extension.base.ops.BaseComparisonOpsTests._compare_other(self,s,data,op_name,other)
pandas.tests.extension.base.ops.BaseComparisonOpsTests.test_compare_array(self,data,all_compare_operators)
pandas.tests.extension.base.ops.BaseComparisonOpsTests.test_compare_scalar(self,data,all_compare_operators)
pandas.tests.extension.base.ops.BaseComparisonOpsTests.test_direct_arith_with_series_returns_not_implemented(self,data)
pandas.tests.extension.base.ops.BaseOpsUtil(BaseExtensionTests)
pandas.tests.extension.base.ops.BaseOpsUtil._check_divmod_op(self,s,op,other,exc=Exception)
pandas.tests.extension.base.ops.BaseOpsUtil._check_op(self,s,op,other,op_name,exc=NotImplementedError)
pandas.tests.extension.base.ops.BaseOpsUtil.check_opname(self,s,op_name,other,exc=Exception)
pandas.tests.extension.base.ops.BaseOpsUtil.get_op_from_name(self,op_name)
pandas.tests.extension.base.ops.BaseUnaryOpsTests(BaseOpsUtil)
pandas.tests.extension.base.ops.BaseUnaryOpsTests.test_invert(self,data)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/base/base.py----------------------------------------
A:pandas.tests.extension.base.base.assert_equal->staticmethod(tm.assert_equal)
A:pandas.tests.extension.base.base.assert_series_equal->staticmethod(tm.assert_series_equal)
A:pandas.tests.extension.base.base.assert_frame_equal->staticmethod(tm.assert_frame_equal)
A:pandas.tests.extension.base.base.assert_extension_array_equal->staticmethod(tm.assert_extension_array_equal)
pandas.tests.extension.base.base.BaseExtensionTests


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/base/io.py----------------------------------------
A:pandas.tests.extension.base.io.df->pandas.DataFrame({'with_dtype': pd.Series(data, dtype=str(data.dtype))})
A:pandas.tests.extension.base.io.csv_output->pandas.DataFrame({'with_dtype': pd.Series(data, dtype=str(data.dtype))}).to_csv(index=False, na_rep=np.nan)
A:pandas.tests.extension.base.io.result->pandas.read_csv(StringIO(csv_output), dtype={'with_dtype': str(data.dtype)}, engine=engine)
pandas.tests.extension.base.BaseParsingTests(BaseExtensionTests)
pandas.tests.extension.base.BaseParsingTests.test_EA_types(self,engine,data)
pandas.tests.extension.base.io.BaseParsingTests(BaseExtensionTests)
pandas.tests.extension.base.io.BaseParsingTests.test_EA_types(self,engine,data)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/base/setitem.py----------------------------------------
A:pandas.tests.extension.base.setitem.data->pandas.Series(data)
A:pandas.tests.extension.base.setitem.original->pandas.Series(data).copy()
A:pandas.tests.extension.base.setitem.ser->pandas.Series(data)
A:pandas.tests.extension.base.setitem.value->pandas.Series(data)._from_sequence(value)
A:pandas.tests.extension.base.setitem.arr->data[:5].copy()
A:pandas.tests.extension.base.setitem.setter->getattr(arr, setter)
A:pandas.tests.extension.base.setitem.df->pandas.DataFrame({'A': [1] * len(data)})
A:pandas.tests.extension.base.setitem.expected->pandas.Series(data).take([0, 0, 0, 3, 4])
A:pandas.tests.extension.base.setitem.mask->pandas.array([True, True, True, False, False])
A:pandas.tests.extension.base.setitem.target->getattr(ser, setter)
A:pandas.tests.extension.base.setitem.result->pandas.Series(index=ser.index, dtype=np.object, name='data')
A:pandas.tests.extension.base.setitem.s->pandas.Series(arr, index=['a', 'b', 'c', 'd', 'e'])
A:pandas.tests.extension.base.setitem.view1->pandas.Series(data).view()
A:pandas.tests.extension.base.setitem.dfexpected->pandas.DataFrame({'data': pd.Series(data)})
A:pandas.tests.extension.base.setitem.serexpected->pandas.Series(data, name='data')
pandas.tests.extension.base.BaseSetitemTests(BaseExtensionTests)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_dataframe_column_with_index(self,data)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_dataframe_column_without_index(self,data)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_empty_indxer(self,data,box_in_series)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_expand_columns(self,data)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_expand_with_extension(self,data)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_frame_invalid_length(self,data)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_iloc_scalar_mixed(self,data)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_iloc_scalar_multiple_homogoneous(self,data)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_iloc_scalar_single(self,data)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_integer_array(self,data,idx,box_in_series)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_integer_with_missing_raises(self,data,idx,box_in_series)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_loc_iloc_slice(self,data)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_loc_scalar_mixed(self,data)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_loc_scalar_multiple_homogoneous(self,data)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_loc_scalar_single(self,data)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_mask(self,data,mask,box_in_series)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_mask_aligned(self,data,as_callable,setter)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_mask_boolean_array_with_na(self,data,box_in_series)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_mask_broadcast(self,data,setter)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_mask_raises(self,data,box_in_series)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_nullable_mask(self,data)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_preserves_views(self,data)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_scalar(self,data,setter)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_scalar_key_sequence_raise(self,data)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_scalar_series(self,data,box_in_series)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_sequence(self,data,box_in_series)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_sequence_broadcasts(self,data,box_in_series)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_sequence_mismatched_length_raises(self,data,as_array)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_series_with_index(self,data)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_series_without_index(self,data)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_slice(self,data,box_in_series)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_slice_array(self,data)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_slice_mismatch_length_raises(self,data)
pandas.tests.extension.base.BaseSetitemTests.test_setitem_tuple_index(self,data)
pandas.tests.extension.base.setitem.BaseSetitemTests(BaseExtensionTests)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_dataframe_column_with_index(self,data)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_dataframe_column_without_index(self,data)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_empty_indxer(self,data,box_in_series)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_expand_columns(self,data)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_expand_with_extension(self,data)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_frame_invalid_length(self,data)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_iloc_scalar_mixed(self,data)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_iloc_scalar_multiple_homogoneous(self,data)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_iloc_scalar_single(self,data)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_integer_array(self,data,idx,box_in_series)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_integer_with_missing_raises(self,data,idx,box_in_series)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_loc_iloc_slice(self,data)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_loc_scalar_mixed(self,data)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_loc_scalar_multiple_homogoneous(self,data)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_loc_scalar_single(self,data)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_mask(self,data,mask,box_in_series)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_mask_aligned(self,data,as_callable,setter)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_mask_boolean_array_with_na(self,data,box_in_series)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_mask_broadcast(self,data,setter)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_mask_raises(self,data,box_in_series)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_nullable_mask(self,data)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_preserves_views(self,data)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_scalar(self,data,setter)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_scalar_key_sequence_raise(self,data)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_scalar_series(self,data,box_in_series)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_sequence(self,data,box_in_series)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_sequence_broadcasts(self,data,box_in_series)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_sequence_mismatched_length_raises(self,data,as_array)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_series_with_index(self,data)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_series_without_index(self,data)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_slice(self,data,box_in_series)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_slice_array(self,data)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_slice_mismatch_length_raises(self,data)
pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_tuple_index(self,data)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/base/reduce.py----------------------------------------
A:pandas.tests.extension.base.reduce.result->getattr(s, op_name)(skipna=skipna)
A:pandas.tests.extension.base.reduce.expected->getattr(s.astype('float64'), op_name)(skipna=skipna)
A:pandas.tests.extension.base.reduce.s->pandas.Series(data)
pandas.tests.extension.base.BaseBooleanReduceTests(BaseReduceTests)
pandas.tests.extension.base.BaseBooleanReduceTests.test_reduce_series(self,data,all_boolean_reductions,skipna)
pandas.tests.extension.base.BaseNoReduceTests(BaseReduceTests)
pandas.tests.extension.base.BaseNoReduceTests.test_reduce_series_boolean(self,data,all_boolean_reductions,skipna)
pandas.tests.extension.base.BaseNoReduceTests.test_reduce_series_numeric(self,data,all_numeric_reductions,skipna)
pandas.tests.extension.base.BaseNumericReduceTests(BaseReduceTests)
pandas.tests.extension.base.BaseNumericReduceTests.test_reduce_series(self,data,all_numeric_reductions,skipna)
pandas.tests.extension.base.reduce.BaseBooleanReduceTests(BaseReduceTests)
pandas.tests.extension.base.reduce.BaseBooleanReduceTests.test_reduce_series(self,data,all_boolean_reductions,skipna)
pandas.tests.extension.base.reduce.BaseNoReduceTests(BaseReduceTests)
pandas.tests.extension.base.reduce.BaseNoReduceTests.test_reduce_series_boolean(self,data,all_boolean_reductions,skipna)
pandas.tests.extension.base.reduce.BaseNoReduceTests.test_reduce_series_numeric(self,data,all_numeric_reductions,skipna)
pandas.tests.extension.base.reduce.BaseNumericReduceTests(BaseReduceTests)
pandas.tests.extension.base.reduce.BaseNumericReduceTests.test_reduce_series(self,data,all_numeric_reductions,skipna)
pandas.tests.extension.base.reduce.BaseReduceTests(BaseExtensionTests)
pandas.tests.extension.base.reduce.BaseReduceTests.check_reduce(self,s,op_name,skipna)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/decimal/test_decimal.py----------------------------------------
A:pandas.tests.extension.decimal.test_decimal.b->decimal.Decimal('1.0')
A:pandas.tests.extension.decimal.test_decimal.a->pandas.array(values, dtype='decimal')
A:pandas.tests.extension.decimal.test_decimal.c->decimal.Decimal('2.0')
A:pandas.tests.extension.decimal.test_decimal.na->decimal.Decimal('NaN')
A:pandas.tests.extension.decimal.test_decimal.left_na->left.drop(columns=decimals).isna()
A:pandas.tests.extension.decimal.test_decimal.right_na->right.drop(columns=decimals).isna()
A:pandas.tests.extension.decimal.test_decimal.left->left.drop(columns=decimals).drop(columns=decimals)
A:pandas.tests.extension.decimal.test_decimal.right->right.drop(columns=decimals).drop(columns=decimals)
A:pandas.tests.extension.decimal.test_decimal.arr->to_decimal([1, 2, 3, 4])
A:pandas.tests.extension.decimal.test_decimal.result->pandas.Series(a).to_numpy(decimals=2)
A:pandas.tests.extension.decimal.test_decimal.expected->numpy.array([decimal.Decimal('1.11'), decimal.Decimal('2.22')], dtype='object')
A:pandas.tests.extension.decimal.test_decimal.other->pandas.Series([int(d * 100) for d in data])
A:pandas.tests.extension.decimal.test_decimal.ser->pandas.Series(DecimalArrayWithoutFromSequence([decimal.Decimal('1.0'), decimal.Decimal('2.0')]))
A:pandas.tests.extension.decimal.test_decimal.data->make_data()
A:pandas.tests.extension.decimal.test_decimal.ctx->decimal.Context()
A:pandas.tests.extension.decimal.test_decimal.s->pandas.Series(DecimalArray(data))
A:pandas.tests.extension.decimal.test_decimal.context->decimal.getcontext()
A:pandas.tests.extension.decimal.test_decimal.alter->numpy.random.choice([-1, 0, 1], len(data))
A:pandas.tests.extension.decimal.test_decimal.(div, mod)->divmod(arr, 2)
A:pandas.tests.extension.decimal.test_decimal.expected_div->to_decimal(expected_div)
A:pandas.tests.extension.decimal.test_decimal.expected_mod->to_decimal(expected_mod)
A:pandas.tests.extension.decimal.test_decimal.r1->numpy.add(s, a)
A:pandas.tests.extension.decimal.test_decimal.r2->numpy.add(a, s)
A:pandas.tests.extension.decimal.test_decimal.df->pandas.DataFrame({'a': s, 'b': range(len(s))})
pandas.tests.extension.decimal.test_decimal.BaseDecimal
pandas.tests.extension.decimal.test_decimal.BaseDecimal.assert_frame_equal(self,left,right,*args,**kwargs)
pandas.tests.extension.decimal.test_decimal.BaseDecimal.assert_series_equal(self,left,right,*args,**kwargs)
pandas.tests.extension.decimal.test_decimal.DecimalArrayWithoutCoercion(DecimalArrayWithoutFromSequence)
pandas.tests.extension.decimal.test_decimal.DecimalArrayWithoutCoercion._create_arithmetic_method(cls,op)
pandas.tests.extension.decimal.test_decimal.DecimalArrayWithoutFromSequence(DecimalArray)
pandas.tests.extension.decimal.test_decimal.DecimalArrayWithoutFromSequence._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.tests.extension.decimal.test_decimal.Reduce
pandas.tests.extension.decimal.test_decimal.Reduce.check_reduce(self,s,op_name,skipna)
pandas.tests.extension.decimal.test_decimal.TestArithmeticOps(BaseDecimal,base.BaseArithmeticOpsTests)
pandas.tests.extension.decimal.test_decimal.TestArithmeticOps._check_divmod_op(self,s,op,other,exc=NotImplementedError)
pandas.tests.extension.decimal.test_decimal.TestArithmeticOps.check_opname(self,s,op_name,other,exc=None)
pandas.tests.extension.decimal.test_decimal.TestArithmeticOps.test_arith_series_with_array(self,data,all_arithmetic_operators)
pandas.tests.extension.decimal.test_decimal.TestArithmeticOps.test_error(self)
pandas.tests.extension.decimal.test_decimal.TestBooleanReduce(Reduce,base.BaseBooleanReduceTests)
pandas.tests.extension.decimal.test_decimal.TestCasting(BaseDecimal,base.BaseCastingTests)
pandas.tests.extension.decimal.test_decimal.TestComparisonOps(BaseDecimal,base.BaseComparisonOpsTests)
pandas.tests.extension.decimal.test_decimal.TestComparisonOps._compare_other(self,s,data,op_name,other)
pandas.tests.extension.decimal.test_decimal.TestComparisonOps.check_opname(self,s,op_name,other,exc=None)
pandas.tests.extension.decimal.test_decimal.TestComparisonOps.test_compare_array(self,data,all_compare_operators)
pandas.tests.extension.decimal.test_decimal.TestComparisonOps.test_compare_scalar(self,data,all_compare_operators)
pandas.tests.extension.decimal.test_decimal.TestConstructors(BaseDecimal,base.BaseConstructorsTests)
pandas.tests.extension.decimal.test_decimal.TestConstructors.test_from_dtype(self,data)
pandas.tests.extension.decimal.test_decimal.TestDtype(BaseDecimal,base.BaseDtypeTests)
pandas.tests.extension.decimal.test_decimal.TestDtype.test_hashable(self,dtype)
pandas.tests.extension.decimal.test_decimal.TestGetitem(BaseDecimal,base.BaseGetitemTests)
pandas.tests.extension.decimal.test_decimal.TestGetitem.test_take_na_value_other_decimal(self)
pandas.tests.extension.decimal.test_decimal.TestGroupby(BaseDecimal,base.BaseGroupbyTests)
pandas.tests.extension.decimal.test_decimal.TestGroupby.test_groupby_apply_identity(self,data_for_grouping)
pandas.tests.extension.decimal.test_decimal.TestInterface(BaseDecimal,base.BaseInterfaceTests)
pandas.tests.extension.decimal.test_decimal.TestMethods(BaseDecimal,base.BaseMethodsTests)
pandas.tests.extension.decimal.test_decimal.TestMethods.test_value_counts(self,all_data,dropna)
pandas.tests.extension.decimal.test_decimal.TestMissing(BaseDecimal,base.BaseMissingTests)
pandas.tests.extension.decimal.test_decimal.TestNumericReduce(Reduce,base.BaseNumericReduceTests)
pandas.tests.extension.decimal.test_decimal.TestPrinting(BaseDecimal,base.BasePrintingTests)
pandas.tests.extension.decimal.test_decimal.TestPrinting.test_series_repr(self,data)
pandas.tests.extension.decimal.test_decimal.TestReshaping(BaseDecimal,base.BaseReshapingTests)
pandas.tests.extension.decimal.test_decimal.TestSetitem(BaseDecimal,base.BaseSetitemTests)
pandas.tests.extension.decimal.test_decimal.data()
pandas.tests.extension.decimal.test_decimal.data_for_grouping()
pandas.tests.extension.decimal.test_decimal.data_for_sorting()
pandas.tests.extension.decimal.test_decimal.data_for_twos()
pandas.tests.extension.decimal.test_decimal.data_missing()
pandas.tests.extension.decimal.test_decimal.data_missing_for_sorting()
pandas.tests.extension.decimal.test_decimal.dtype()
pandas.tests.extension.decimal.test_decimal.na_cmp()
pandas.tests.extension.decimal.test_decimal.na_value()
pandas.tests.extension.decimal.test_decimal.test_array_ufunc()
pandas.tests.extension.decimal.test_decimal.test_array_ufunc_series()
pandas.tests.extension.decimal.test_decimal.test_array_ufunc_series_defer()
pandas.tests.extension.decimal.test_decimal.test_array_ufunc_series_scalar_other()
pandas.tests.extension.decimal.test_decimal.test_astype_dispatches(frame)
pandas.tests.extension.decimal.test_decimal.test_combine_from_sequence_raises()
pandas.tests.extension.decimal.test_decimal.test_dataframe_constructor_with_dtype()
pandas.tests.extension.decimal.test_decimal.test_divmod_array(reverse,expected_div,expected_mod)
pandas.tests.extension.decimal.test_decimal.test_groupby_agg()
pandas.tests.extension.decimal.test_decimal.test_groupby_agg_ea_method(monkeypatch)
pandas.tests.extension.decimal.test_decimal.test_indexing_no_materialize(monkeypatch)
pandas.tests.extension.decimal.test_decimal.test_scalar_ops_from_sequence_raises(class_)
pandas.tests.extension.decimal.test_decimal.test_series_constructor_coerce_data_to_extension_dtype_raises()
pandas.tests.extension.decimal.test_decimal.test_series_constructor_with_dtype()
pandas.tests.extension.decimal.test_decimal.test_to_numpy_keyword()
pandas.tests.extension.decimal.test_decimal.test_ufunc_fallback(data)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/decimal/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/decimal/array.py----------------------------------------
A:pandas.tests.extension.decimal.array.na_value->decimal.Decimal('NaN')
A:pandas.tests.extension.decimal.array.values->numpy.asarray(values, dtype=object)
A:pandas.tests.extension.decimal.array.self._dtype->DecimalDtype(context)
A:pandas.tests.extension.decimal.array.result->take(data, indexer, fill_value=fill_value, allow_fill=allow_fill)
A:pandas.tests.extension.decimal.array.inputs->tuple((x._data if isinstance(x, DecimalArray) else x for x in inputs))
A:pandas.tests.extension.decimal.array.item->pandas.api.indexers.check_array_indexer(self, item)
A:pandas.tests.extension.decimal.array.value->decimal.Decimal(value)
A:pandas.tests.extension.decimal.array.key->check_array_indexer(self, key)
A:pandas.tests.extension.decimal.array.n->len(self)
A:pandas.tests.extension.decimal.array.op->getattr(self.data, name)
pandas.tests.extension.decimal.DecimalArray(self,values,dtype=None,copy=False,context=None)
pandas.tests.extension.decimal.DecimalArray.__array_ufunc__(self,ufunc,method,*inputs,**kwargs)
pandas.tests.extension.decimal.DecimalArray.__getitem__(self,item)
pandas.tests.extension.decimal.DecimalArray.__len__(self)->int
pandas.tests.extension.decimal.DecimalArray.__setitem__(self,key,value)
pandas.tests.extension.decimal.DecimalArray._concat_same_type(cls,to_concat)
pandas.tests.extension.decimal.DecimalArray._formatter(self,boxed=False)
pandas.tests.extension.decimal.DecimalArray._from_factorized(cls,values,original)
pandas.tests.extension.decimal.DecimalArray._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.tests.extension.decimal.DecimalArray._from_sequence_of_strings(cls,strings,dtype=None,copy=False)
pandas.tests.extension.decimal.DecimalArray._na_value(self)
pandas.tests.extension.decimal.DecimalArray._reduce(self,name,skipna=True,**kwargs)
pandas.tests.extension.decimal.DecimalArray.astype(self,dtype,copy=True)
pandas.tests.extension.decimal.DecimalArray.copy(self)
pandas.tests.extension.decimal.DecimalArray.dtype(self)
pandas.tests.extension.decimal.DecimalArray.isna(self)
pandas.tests.extension.decimal.DecimalArray.nbytes(self)->int
pandas.tests.extension.decimal.DecimalArray.take(self,indexer,allow_fill=False,fill_value=None)
pandas.tests.extension.decimal.DecimalArray.to_numpy(self,dtype=None,copy=False,na_value=no_default,decimals=None)
pandas.tests.extension.decimal.DecimalDtype(self,context=None)
pandas.tests.extension.decimal.DecimalDtype.__repr__(self)->str
pandas.tests.extension.decimal.DecimalDtype._is_numeric(self)
pandas.tests.extension.decimal.DecimalDtype.construct_array_type(cls)
pandas.tests.extension.decimal.DecimalDtype.construct_from_string(cls,string)
pandas.tests.extension.decimal.array.DecimalArray(self,values,dtype=None,copy=False,context=None)
pandas.tests.extension.decimal.array.DecimalArray.__array_ufunc__(self,ufunc,method,*inputs,**kwargs)
pandas.tests.extension.decimal.array.DecimalArray.__getitem__(self,item)
pandas.tests.extension.decimal.array.DecimalArray.__init__(self,values,dtype=None,copy=False,context=None)
pandas.tests.extension.decimal.array.DecimalArray.__len__(self)->int
pandas.tests.extension.decimal.array.DecimalArray.__setitem__(self,key,value)
pandas.tests.extension.decimal.array.DecimalArray._concat_same_type(cls,to_concat)
pandas.tests.extension.decimal.array.DecimalArray._formatter(self,boxed=False)
pandas.tests.extension.decimal.array.DecimalArray._from_factorized(cls,values,original)
pandas.tests.extension.decimal.array.DecimalArray._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.tests.extension.decimal.array.DecimalArray._from_sequence_of_strings(cls,strings,dtype=None,copy=False)
pandas.tests.extension.decimal.array.DecimalArray._na_value(self)
pandas.tests.extension.decimal.array.DecimalArray._reduce(self,name,skipna=True,**kwargs)
pandas.tests.extension.decimal.array.DecimalArray.astype(self,dtype,copy=True)
pandas.tests.extension.decimal.array.DecimalArray.copy(self)
pandas.tests.extension.decimal.array.DecimalArray.dtype(self)
pandas.tests.extension.decimal.array.DecimalArray.isna(self)
pandas.tests.extension.decimal.array.DecimalArray.nbytes(self)->int
pandas.tests.extension.decimal.array.DecimalArray.take(self,indexer,allow_fill=False,fill_value=None)
pandas.tests.extension.decimal.array.DecimalArray.to_numpy(self,dtype=None,copy=False,na_value=no_default,decimals=None)
pandas.tests.extension.decimal.array.DecimalDtype(self,context=None)
pandas.tests.extension.decimal.array.DecimalDtype.__init__(self,context=None)
pandas.tests.extension.decimal.array.DecimalDtype.__repr__(self)->str
pandas.tests.extension.decimal.array.DecimalDtype._is_numeric(self)
pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type(cls)
pandas.tests.extension.decimal.array.DecimalDtype.construct_from_string(cls,string)
pandas.tests.extension.decimal.array.make_data()
pandas.tests.extension.decimal.array.to_decimal(values,context=None)
pandas.tests.extension.decimal.make_data()
pandas.tests.extension.decimal.to_decimal(values,context=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/arrow/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/arrow/test_string.py----------------------------------------
A:pandas.tests.extension.arrow.test_string.result->pandas.Series(['E'], dtype=ArrowStringDtype())
pandas.tests.extension.arrow.test_string.test_constructor_from_list()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/arrow/arrays.py----------------------------------------
A:pandas.tests.extension.arrow.arrays.arr->pyarrow.chunked_array(chunks)
A:pandas.tests.extension.arrow.arrays.nas->pandas.isna(self._data.to_pandas())
A:pandas.tests.extension.arrow.arrays.data->self._data.to_pandas()
A:pandas.tests.extension.arrow.arrays.result->take(data, indices, fill_value=fill_value, allow_fill=allow_fill)
A:pandas.tests.extension.arrow.arrays.chunks->list(itertools.chain.from_iterable((x._data.chunks for x in to_concat)))
A:pandas.tests.extension.arrow.arrays.op->getattr(arr, method)
A:pandas.tests.extension.arrow.arrays.self._dtype->ArrowStringDtype()
pandas.tests.extension.arrow.arrays.ArrowBoolArray(self,values)
pandas.tests.extension.arrow.arrays.ArrowBoolArray.__init__(self,values)
pandas.tests.extension.arrow.arrays.ArrowBoolDtype(ExtensionDtype)
pandas.tests.extension.arrow.arrays.ArrowBoolDtype._is_boolean(self)
pandas.tests.extension.arrow.arrays.ArrowBoolDtype.construct_array_type(cls)
pandas.tests.extension.arrow.arrays.ArrowBoolDtype.construct_from_string(cls,string)
pandas.tests.extension.arrow.arrays.ArrowExtensionArray(ExtensionArray)
pandas.tests.extension.arrow.arrays.ArrowExtensionArray.__getitem__(self,item)
pandas.tests.extension.arrow.arrays.ArrowExtensionArray.__invert__(self)
pandas.tests.extension.arrow.arrays.ArrowExtensionArray.__len__(self)
pandas.tests.extension.arrow.arrays.ArrowExtensionArray.__repr__(self)
pandas.tests.extension.arrow.arrays.ArrowExtensionArray._concat_same_type(cls,to_concat)
pandas.tests.extension.arrow.arrays.ArrowExtensionArray._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.tests.extension.arrow.arrays.ArrowExtensionArray._reduce(self,method,skipna=True,**kwargs)
pandas.tests.extension.arrow.arrays.ArrowExtensionArray.all(self,axis=0,out=None)
pandas.tests.extension.arrow.arrays.ArrowExtensionArray.any(self,axis=0,out=None)
pandas.tests.extension.arrow.arrays.ArrowExtensionArray.astype(self,dtype,copy=True)
pandas.tests.extension.arrow.arrays.ArrowExtensionArray.copy(self)
pandas.tests.extension.arrow.arrays.ArrowExtensionArray.dtype(self)
pandas.tests.extension.arrow.arrays.ArrowExtensionArray.from_array(cls,arr)
pandas.tests.extension.arrow.arrays.ArrowExtensionArray.from_scalars(cls,values)
pandas.tests.extension.arrow.arrays.ArrowExtensionArray.isna(self)
pandas.tests.extension.arrow.arrays.ArrowExtensionArray.nbytes(self)
pandas.tests.extension.arrow.arrays.ArrowExtensionArray.take(self,indices,allow_fill=False,fill_value=None)
pandas.tests.extension.arrow.arrays.ArrowStringArray(self,values)
pandas.tests.extension.arrow.arrays.ArrowStringArray.__init__(self,values)
pandas.tests.extension.arrow.arrays.ArrowStringDtype(ExtensionDtype)
pandas.tests.extension.arrow.arrays.ArrowStringDtype.construct_array_type(cls)
pandas.tests.extension.arrow.arrays.ArrowStringDtype.construct_from_string(cls,string)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/arrow/test_bool.py----------------------------------------
A:pandas.tests.extension.arrow.test_bool.values->numpy.random.randint(0, 2, size=100, dtype=bool)
A:pandas.tests.extension.arrow.test_bool.s->pandas.Series(range(len(data)))
pandas.tests.extension.arrow.test_bool.BaseArrowTests
pandas.tests.extension.arrow.test_bool.TestConstructors(BaseArrowTests,base.BaseConstructorsTests)
pandas.tests.extension.arrow.test_bool.TestConstructors.test_from_dtype(self,data)
pandas.tests.extension.arrow.test_bool.TestConstructors.test_from_sequence_from_cls(self,data)
pandas.tests.extension.arrow.test_bool.TestDtype(BaseArrowTests,base.BaseDtypeTests)
pandas.tests.extension.arrow.test_bool.TestDtype.test_array_type_with_arg(self,data,dtype)
pandas.tests.extension.arrow.test_bool.TestInterface(BaseArrowTests,base.BaseInterfaceTests)
pandas.tests.extension.arrow.test_bool.TestInterface.test_copy(self,data)
pandas.tests.extension.arrow.test_bool.TestInterface.test_view(self,data)
pandas.tests.extension.arrow.test_bool.TestReduce(base.BaseNoReduceTests)
pandas.tests.extension.arrow.test_bool.TestReduce.test_reduce_series_boolean(self)
pandas.tests.extension.arrow.test_bool.TestReduceBoolean(base.BaseBooleanReduceTests)
pandas.tests.extension.arrow.test_bool.data()
pandas.tests.extension.arrow.test_bool.data_missing()
pandas.tests.extension.arrow.test_bool.dtype()
pandas.tests.extension.arrow.test_bool.test_is_bool_dtype(data)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/json/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/json/array.py----------------------------------------
A:pandas.tests.extension.json.array.na_value->UserDict()
A:pandas.tests.extension.json.array.dtype->JSONDtype()
A:pandas.tests.extension.json.array.item->pandas.api.indexers.check_array_indexer(self, item)
A:pandas.tests.extension.json.array.value->itertools.cycle([value])
A:pandas.tests.extension.json.array.indexer->numpy.asarray(indexer)
A:pandas.tests.extension.json.array.data->list(itertools.chain.from_iterable([x.data for x in to_concat]))
A:pandas.tests.extension.json.array.frozen->frozen.ravel().ravel()
pandas.tests.extension.json.JSONArray(self,values,dtype=None,copy=False)
pandas.tests.extension.json.JSONArray.__array__(self,dtype=None)
pandas.tests.extension.json.JSONArray.__getitem__(self,item)
pandas.tests.extension.json.JSONArray.__len__(self)->int
pandas.tests.extension.json.JSONArray.__setitem__(self,key,value)
pandas.tests.extension.json.JSONArray._concat_same_type(cls,to_concat)
pandas.tests.extension.json.JSONArray._from_factorized(cls,values,original)
pandas.tests.extension.json.JSONArray._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.tests.extension.json.JSONArray._values_for_argsort(self)
pandas.tests.extension.json.JSONArray._values_for_factorize(self)
pandas.tests.extension.json.JSONArray.astype(self,dtype,copy=True)
pandas.tests.extension.json.JSONArray.copy(self)
pandas.tests.extension.json.JSONArray.isna(self)
pandas.tests.extension.json.JSONArray.nbytes(self)->int
pandas.tests.extension.json.JSONArray.take(self,indexer,allow_fill=False,fill_value=None)
pandas.tests.extension.json.JSONArray.unique(self)
pandas.tests.extension.json.JSONDtype(ExtensionDtype)
pandas.tests.extension.json.JSONDtype.construct_array_type(cls)
pandas.tests.extension.json.JSONDtype.construct_from_string(cls,string)
pandas.tests.extension.json.array.JSONArray(self,values,dtype=None,copy=False)
pandas.tests.extension.json.array.JSONArray.__array__(self,dtype=None)
pandas.tests.extension.json.array.JSONArray.__getitem__(self,item)
pandas.tests.extension.json.array.JSONArray.__init__(self,values,dtype=None,copy=False)
pandas.tests.extension.json.array.JSONArray.__len__(self)->int
pandas.tests.extension.json.array.JSONArray.__setitem__(self,key,value)
pandas.tests.extension.json.array.JSONArray._concat_same_type(cls,to_concat)
pandas.tests.extension.json.array.JSONArray._from_factorized(cls,values,original)
pandas.tests.extension.json.array.JSONArray._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.tests.extension.json.array.JSONArray._values_for_argsort(self)
pandas.tests.extension.json.array.JSONArray._values_for_factorize(self)
pandas.tests.extension.json.array.JSONArray.astype(self,dtype,copy=True)
pandas.tests.extension.json.array.JSONArray.copy(self)
pandas.tests.extension.json.array.JSONArray.isna(self)
pandas.tests.extension.json.array.JSONArray.nbytes(self)->int
pandas.tests.extension.json.array.JSONArray.take(self,indexer,allow_fill=False,fill_value=None)
pandas.tests.extension.json.array.JSONArray.unique(self)
pandas.tests.extension.json.array.JSONDtype(ExtensionDtype)
pandas.tests.extension.json.array.JSONDtype.construct_array_type(cls)
pandas.tests.extension.json.array.JSONDtype.construct_from_string(cls,string)
pandas.tests.extension.json.array.make_data()
pandas.tests.extension.json.make_data()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/json/test_json.py----------------------------------------
A:pandas.tests.extension.json.test_json.data->JSONArray([collections.UserDict({'a': 1}), collections.UserDict({'b': 2}), collections.UserDict({'c': 3})])
A:pandas.tests.extension.json.test_json.left->left.drop(columns=jsons).drop(columns=jsons)
A:pandas.tests.extension.json.test_json.right->right.drop(columns=jsons).drop(columns=jsons)
A:pandas.tests.extension.json.test_json.obj_type->kwargs.get('obj', 'DataFrame')
A:pandas.tests.extension.json.test_json.a->pandas.Series(data)
A:pandas.tests.extension.json.test_json.b->pandas.Series(data.take([0, 0, 1]))
A:pandas.tests.extension.json.test_json.unhashable->pytest.mark.skip(reason='Unhashable')
A:pandas.tests.extension.json.test_json.ser->pandas.Series(data)
pandas.tests.extension.json.test_json.BaseJSON
pandas.tests.extension.json.test_json.BaseJSON.assert_frame_equal(self,left,right,*args,**kwargs)
pandas.tests.extension.json.test_json.BaseJSON.assert_series_equal(self,left,right,**kwargs)
pandas.tests.extension.json.test_json.TestArithmeticOps(BaseJSON,base.BaseArithmeticOpsTests)
pandas.tests.extension.json.test_json.TestArithmeticOps._check_divmod_op(self,s,op,other,exc=NotImplementedError)
pandas.tests.extension.json.test_json.TestArithmeticOps.test_add_series_with_extension_array(self,data)
pandas.tests.extension.json.test_json.TestArithmeticOps.test_divmod_series_array(self)
pandas.tests.extension.json.test_json.TestArithmeticOps.test_error(self,data,all_arithmetic_operators)
pandas.tests.extension.json.test_json.TestCasting(BaseJSON,base.BaseCastingTests)
pandas.tests.extension.json.test_json.TestCasting.test_astype_str(self)
pandas.tests.extension.json.test_json.TestComparisonOps(BaseJSON,base.BaseComparisonOpsTests)
pandas.tests.extension.json.test_json.TestConstructors(BaseJSON,base.BaseConstructorsTests)
pandas.tests.extension.json.test_json.TestConstructors.test_from_dtype(self,data)
pandas.tests.extension.json.test_json.TestDtype(BaseJSON,base.BaseDtypeTests)
pandas.tests.extension.json.test_json.TestGetitem(BaseJSON,base.BaseGetitemTests)
pandas.tests.extension.json.test_json.TestGroupby(BaseJSON,base.BaseGroupbyTests)
pandas.tests.extension.json.test_json.TestGroupby.test_groupby_extension_agg(self,as_index,data_for_grouping)
pandas.tests.extension.json.test_json.TestGroupby.test_groupby_extension_apply(self)
pandas.tests.extension.json.test_json.TestGroupby.test_groupby_extension_transform(self)
pandas.tests.extension.json.test_json.TestInterface(BaseJSON,base.BaseInterfaceTests)
pandas.tests.extension.json.test_json.TestInterface.test_custom_asserts(self)
pandas.tests.extension.json.test_json.TestMethods(BaseJSON,base.BaseMethodsTests)
pandas.tests.extension.json.test_json.TestMethods.test_argsort(self,data_for_sorting)
pandas.tests.extension.json.test_json.TestMethods.test_argsort_missing(self,data_missing_for_sorting)
pandas.tests.extension.json.test_json.TestMethods.test_combine_add(self,data_repeated)
pandas.tests.extension.json.test_json.TestMethods.test_combine_first(self,data)
pandas.tests.extension.json.test_json.TestMethods.test_combine_le(self,data_repeated)
pandas.tests.extension.json.test_json.TestMethods.test_hash_pandas_object_works(self,data,kind)
pandas.tests.extension.json.test_json.TestMethods.test_searchsorted(self,data_for_sorting)
pandas.tests.extension.json.test_json.TestMethods.test_sort_values(self,data_for_sorting,ascending)
pandas.tests.extension.json.test_json.TestMethods.test_sort_values_frame(self)
pandas.tests.extension.json.test_json.TestMethods.test_sort_values_missing(self,data_missing_for_sorting,ascending)
pandas.tests.extension.json.test_json.TestMethods.test_value_counts(self,all_data,dropna)
pandas.tests.extension.json.test_json.TestMethods.test_where_series(self,data,na_value)
pandas.tests.extension.json.test_json.TestMissing(BaseJSON,base.BaseMissingTests)
pandas.tests.extension.json.test_json.TestMissing.test_fillna_frame(self)
pandas.tests.extension.json.test_json.TestMissing.test_fillna_series(self)
pandas.tests.extension.json.test_json.TestPrinting(BaseJSON,base.BasePrintingTests)
pandas.tests.extension.json.test_json.TestReduce(base.BaseNoReduceTests)
pandas.tests.extension.json.test_json.TestReshaping(BaseJSON,base.BaseReshapingTests)
pandas.tests.extension.json.test_json.TestReshaping.test_stack(self)
pandas.tests.extension.json.test_json.TestReshaping.test_unstack(self,data,index)
pandas.tests.extension.json.test_json.data()
pandas.tests.extension.json.test_json.data_for_grouping()
pandas.tests.extension.json.test_json.data_for_sorting()
pandas.tests.extension.json.test_json.data_missing()
pandas.tests.extension.json.test_json.data_missing_for_sorting()
pandas.tests.extension.json.test_json.dtype()
pandas.tests.extension.json.test_json.na_cmp()
pandas.tests.extension.json.test_json.na_value(dtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/list/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/list/test_list.py----------------------------------------
A:pandas.tests.extension.list.test_list.data->make_data()
A:pandas.tests.extension.list.test_list.df->pandas.DataFrame({'a': data})
A:pandas.tests.extension.list.test_list.res->pandas.DataFrame({'a': data}).to_csv()
pandas.tests.extension.list.test_list.data()
pandas.tests.extension.list.test_list.dtype()
pandas.tests.extension.list.test_list.test_to_csv(data)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/extension/list/array.py----------------------------------------
A:pandas.tests.extension.list.array.dtype->ListDtype()
A:pandas.tests.extension.list.array.data->numpy.empty(100, dtype=object)
A:pandas.tests.extension.list.array.indexer->numpy.asarray(indexer)
pandas.tests.extension.list.ListArray(self,values,dtype=None,copy=False)
pandas.tests.extension.list.ListArray.__getitem__(self,item)
pandas.tests.extension.list.ListArray.__len__(self)->int
pandas.tests.extension.list.ListArray._concat_same_type(cls,to_concat)
pandas.tests.extension.list.ListArray._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.tests.extension.list.ListArray.astype(self,dtype,copy=True)
pandas.tests.extension.list.ListArray.copy(self)
pandas.tests.extension.list.ListArray.isna(self)
pandas.tests.extension.list.ListArray.take(self,indexer,allow_fill=False,fill_value=None)
pandas.tests.extension.list.ListDtype(ExtensionDtype)
pandas.tests.extension.list.ListDtype.construct_array_type(cls)
pandas.tests.extension.list.ListDtype.construct_from_string(cls,string)
pandas.tests.extension.list.array.ListArray(self,values,dtype=None,copy=False)
pandas.tests.extension.list.array.ListArray.__getitem__(self,item)
pandas.tests.extension.list.array.ListArray.__init__(self,values,dtype=None,copy=False)
pandas.tests.extension.list.array.ListArray.__len__(self)->int
pandas.tests.extension.list.array.ListArray._concat_same_type(cls,to_concat)
pandas.tests.extension.list.array.ListArray._from_sequence(cls,scalars,dtype=None,copy=False)
pandas.tests.extension.list.array.ListArray.astype(self,dtype,copy=True)
pandas.tests.extension.list.array.ListArray.copy(self)
pandas.tests.extension.list.array.ListArray.isna(self)
pandas.tests.extension.list.array.ListArray.take(self,indexer,allow_fill=False,fill_value=None)
pandas.tests.extension.list.array.ListDtype(ExtensionDtype)
pandas.tests.extension.list.array.ListDtype.construct_array_type(cls)
pandas.tests.extension.list.array.ListDtype.construct_from_string(cls,string)
pandas.tests.extension.list.array.make_data()
pandas.tests.extension.list.make_data()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_validate.py----------------------------------------
A:pandas.tests.frame.test_validate.kwargs->dict(inplace=inplace)
pandas.tests.frame.test_validate.TestDataFrameValidate
pandas.tests.frame.test_validate.TestDataFrameValidate.test_validate_bool_args(self,dataframe,func,inplace)
pandas.tests.frame.test_validate.dataframe()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_operators.py----------------------------------------
A:pandas.tests.frame.test_operators.df->pandas.DataFrame({'A': [0.0, 0.0], 'B': [0.0, None]})
A:pandas.tests.frame.test_operators.expected->id(df)
A:pandas.tests.frame.test_operators.df2->pandas._testing.makeTimeDataFrame()
A:pandas.tests.frame.test_operators.dfa->DataFrame(index=[1], columns=['A'])
A:pandas.tests.frame.test_operators.df1a_bool->DataFrame(True, index=[1], columns=['A'])
A:pandas.tests.frame.test_operators.df1a_int->DataFrame(1, index=[1], columns=['A'])
A:pandas.tests.frame.test_operators.df1->pandas._testing.makeTimeDataFrame()
A:pandas.tests.frame.test_operators.result->func(df1, df2)
A:pandas.tests.frame.test_operators.d->DataFrame({'a': [np.nan, False], 'b': [True, True]})
A:pandas.tests.frame.test_operators.filled->pandas.DataFrame({'A': [0.0, 0.0], 'B': [0.0, None]}).fillna(np.nan)
A:pandas.tests.frame.test_operators.index->pandas.MultiIndex.from_product([list('abc'), ['one', 'two', 'three'], [1, 2, 3]], names=['first', 'second', 'third'])
A:pandas.tests.frame.test_operators.opa->getattr(operator, op, None)
A:pandas.tests.frame.test_operators.x->Series([1.0, 10.0], ['two', 'three'])
A:pandas.tests.frame.test_operators.midx->pandas.MultiIndex.from_product([['A', 'B'], ['a', 'b']])
A:pandas.tests.frame.test_operators.s->Series([1, 2, 3]).copy()
A:pandas.tests.frame.test_operators.s2->Series([1, 2, 3]).copy().copy()
A:pandas.tests.frame.test_operators.res1->pandas.DataFrame({'A': [0.0, 0.0], 'B': [0.0, None]}).mul(s, axis=1, level=1)
A:pandas.tests.frame.test_operators.res2->pandas.DataFrame({'A': [0.0, 0.0], 'B': [0.0, None]}).mul(s2, axis=1, level=1)
A:pandas.tests.frame.test_operators.res3->pandas._testing.makeTimeDataFrame().mul(s, axis=1, level=1)
A:pandas.tests.frame.test_operators.res4->pandas._testing.makeTimeDataFrame().mul(s2, axis=1, level=1)
A:pandas.tests.frame.test_operators.res5->pandas._testing.makeTimeDataFrame().mul(s, axis=1, level='lvl1')
A:pandas.tests.frame.test_operators.res6->pandas._testing.makeTimeDataFrame().mul(s2, axis=1, level='lvl1')
A:pandas.tests.frame.test_operators.exp->(float_frame['A'] * 2).copy()
A:pandas.tests.frame.test_operators.base->pandas.DatetimeIndex(['2011-01-01', '2011-01-02', '2011-01-03'], tz='UTC')
A:pandas.tests.frame.test_operators.frame_copy->float_frame.reindex(float_frame.index[::2])
A:pandas.tests.frame.test_operators.reverse->float_frame.reindex(columns=float_frame.columns[::-1])
A:pandas.tests.frame.test_operators.series->float_frame.xs(float_frame.index[0])
A:pandas.tests.frame.test_operators.larger_series->Series(larger_series)
A:pandas.tests.frame.test_operators.added->datetime_frame.add(ts, axis='index')
A:pandas.tests.frame.test_operators.smaller_added->smaller_frame.add(ts, axis='index')
A:pandas.tests.frame.test_operators.smaller_added2->datetime_frame.add(smaller_ts, axis='index')
A:pandas.tests.frame.test_operators.frame->datetime_frame[:1].reindex(columns=[])
A:pandas.tests.frame.test_operators.row->simple_frame.xs('a')
A:pandas.tests.frame.test_operators.ndim_5->numpy.ones(df1.shape + (1, 1, 1))
A:pandas.tests.frame.test_operators.result2->X_orig.copy().reindex(columns=subs)
A:pandas.tests.frame.test_operators.result3->(X[block1] - Z[block1]).reindex(columns=subs)
A:pandas.tests.frame.test_operators.f->getattr(operator, compare_operators_no_eq_ne)
A:pandas.tests.frame.test_operators.missing_df->pandas._testing.makeDataFrame()
A:pandas.tests.frame.test_operators.b->numpy.array([2, 2])
A:pandas.tests.frame.test_operators.b_r->numpy.atleast_2d([2, 2])
A:pandas.tests.frame.test_operators.tup->tuple(lst)
A:pandas.tests.frame.test_operators.combined->pandas._testing.makeTimeDataFrame().combine(df2, np.add)
A:pandas.tests.frame.test_operators.combined2->pandas._testing.makeTimeDataFrame().combine(df1, np.add)
A:pandas.tests.frame.test_operators.columns->list('abcdefg')
A:pandas.tests.frame.test_operators.X_orig->DataFrame(np.arange(10 * len(columns)).reshape(-1, len(columns)), columns=columns, index=range(10))
A:pandas.tests.frame.test_operators.block1->list('bedcf')
A:pandas.tests.frame.test_operators.subs->list('bcdef')
A:pandas.tests.frame.test_operators.X->DataFrame(np.arange(10 * len(columns)).reshape(-1, len(columns)), columns=columns, index=range(10)).copy()
A:pandas.tests.frame.test_operators.result1->(X[block1] - Z).reindex(columns=subs)
A:pandas.tests.frame.test_operators.result4->DataFrame(np.arange(10 * len(columns)).reshape(-1, len(columns)), columns=columns, index=range(10)).copy().reindex(columns=subs)
A:pandas.tests.frame.test_operators.s_orig->Series([1, 2, 3])
A:pandas.tests.frame.test_operators.df_orig->DataFrame({'A': arr.copy(), 'B': 'foo'})
A:pandas.tests.frame.test_operators.arr->numpy.random.randint(0, 10, size=5)
A:pandas.tests.frame.test_operators.df_copy->pandas.DataFrame({'A': [0.0, 0.0], 'B': [0.0, None]}).copy()
A:pandas.tests.frame.test_operators.iop->'__i{}__'.format(op)
A:pandas.tests.frame.test_operators.op->'__{}__'.format(op)
A:pandas.tests.frame.test_operators.val->numpy.zeros((3, 3, 3))
pandas.tests.frame.test_operators.TestDataFrameLogicalOperators
pandas.tests.frame.test_operators.TestDataFrameLogicalOperators.test_logical_operators(self)
pandas.tests.frame.test_operators.TestDataFrameLogicalOperators.test_logical_operators_nans(self,left,right,op,expected)
pandas.tests.frame.test_operators.TestDataFrameLogicalOperators.test_logical_ops_bool_frame(self)
pandas.tests.frame.test_operators.TestDataFrameLogicalOperators.test_logical_ops_empty_frame(self)
pandas.tests.frame.test_operators.TestDataFrameLogicalOperators.test_logical_ops_int_frame(self)
pandas.tests.frame.test_operators.TestDataFrameLogicalOperators.test_logical_ops_invalid(self)
pandas.tests.frame.test_operators.TestDataFrameLogicalOperators.test_logical_with_nas(self)
pandas.tests.frame.test_operators.TestDataFrameOperators
pandas.tests.frame.test_operators.TestDataFrameOperators.test_alignment_non_pandas(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_binary_ops_align(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_boolean_comparison(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_combineFrame(self,float_frame,mixed_float_frame,mixed_int_frame)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_combineFunc(self,float_frame,mixed_float_frame)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_combine_generic(self,float_frame)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_combine_series(self,float_frame,mixed_float_frame,mixed_int_frame,datetime_frame)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_comparison_protected_from_errstate(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_comparisons(self,simple_frame,float_frame)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_dti_tz_convert_to_utc(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_inplace_ops_alignment(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_inplace_ops_identity(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_inplace_ops_identity2(self,op)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_logical_typeerror_with_non_valid(self,op,res,float_frame)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_no_warning(self,all_arithmetic_operators)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_operators_none_as_na(self,op)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_strings_to_numbers_comparisons_raises(self,compare_operators_no_eq_ne)
pandas.tests.frame.test_operators.TestDataFrameUnaryOperators
pandas.tests.frame.test_operators.TestDataFrameUnaryOperators.test_invert(self,float_frame)
pandas.tests.frame.test_operators.TestDataFrameUnaryOperators.test_invert_mixed(self)
pandas.tests.frame.test_operators.TestDataFrameUnaryOperators.test_neg_numeric(self,df,expected)
pandas.tests.frame.test_operators.TestDataFrameUnaryOperators.test_neg_object(self,df,expected)
pandas.tests.frame.test_operators.TestDataFrameUnaryOperators.test_neg_raises(self,df)
pandas.tests.frame.test_operators.TestDataFrameUnaryOperators.test_pos_numeric(self,df)
pandas.tests.frame.test_operators.TestDataFrameUnaryOperators.test_pos_object(self,df)
pandas.tests.frame.test_operators.TestDataFrameUnaryOperators.test_pos_raises(self,df)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_to_csv.py----------------------------------------
A:pandas.tests.frame.test_to_csv.params->dict(index_col=0, parse_dates=True)
A:pandas.tests.frame.test_to_csv.recons->pandas.read_csv(StringIO(csv_str), index_col=0)
A:pandas.tests.frame.test_to_csv.dm->DataFrame({'s1': Series(range(3), index=np.arange(3)), 's2': Series(range(2), index=np.arange(2))})
A:pandas.tests.frame.test_to_csv.df->pandas.DataFrame({'a': [1, 2]})
A:pandas.tests.frame.test_to_csv.result->f.read().decode('utf-8')
A:pandas.tests.frame.test_to_csv.midx->pandas.MultiIndex.from_tuples([('A', 1, 2), ('A', 1, 2), ('B', 1, 2)])
A:pandas.tests.frame.test_to_csv.col_aliases->Index(['AA', 'X', 'Y', 'Z'])
A:pandas.tests.frame.test_to_csv.rs->read_csv(filename, index_col=0)
A:pandas.tests.frame.test_to_csv.xp->DataFrame([[0.12, 0.23, 0.57], [12.32, 123123.2, 321321.2]], index=['A', 'B'], columns=['X', 'Y', 'Z'])
A:pandas.tests.frame.test_to_csv.df1->DataFrame(np.random.randn(3, 1))
A:pandas.tests.frame.test_to_csv.df2->DataFrame({'s': s2})
A:pandas.tests.frame.test_to_csv.dt->pandas.Timedelta(seconds=1)
A:pandas.tests.frame.test_to_csv.result.index->to_datetime(result.index, utc=True).tz_convert('Europe/Paris')
A:pandas.tests.frame.test_to_csv.result['dt_data']->pandas.to_timedelta(result['dt_data'])
A:pandas.tests.frame.test_to_csv.result['B']->converter('B')
A:pandas.tests.frame.test_to_csv.result['C']->converter('C')
A:pandas.tests.frame.test_to_csv.N->int(chunksize * 2.5)
A:pandas.tests.frame.test_to_csv.rs_c->pandas.read_csv(path, index_col=0)
A:pandas.tests.frame.test_to_csv.(indexer, missing)->pandas.DataFrame({'a': [1, 2]}).columns.get_indexer_non_unique(cols)
A:pandas.tests.frame.test_to_csv.rs_c.columns->pandas.DataFrame({'a': [1, 2]}).columns.take(indexer)
A:pandas.tests.frame.test_to_csv.nnat->int(n * 0.1)
A:pandas.tests.frame.test_to_csv.s->Series(pd.Categorical(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c']))
A:pandas.tests.frame.test_to_csv.i->numpy.random.randint(100)
A:pandas.tests.frame.test_to_csv.s1->make_dtnat_arr(chunksize + 5)
A:pandas.tests.frame.test_to_csv.s2->Series(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c'])
A:pandas.tests.frame.test_to_csv.kwargs->dict(parse_dates=False)
A:pandas.tests.frame.test_to_csv.kwargs['index_col']->list(range(rnlvl))
A:pandas.tests.frame.test_to_csv.kwargs['header']->list(range(cnlvl))
A:pandas.tests.frame.test_to_csv.ix->list(df.index)
A:pandas.tests.frame.test_to_csv.type_map->dict(i='i', f='f', s='O', u='O', dt='O', p='O')
A:pandas.tests.frame.test_to_csv.recons.index->numpy.array(recons.index, dtype=r_dtype)
A:pandas.tests.frame.test_to_csv.df.index->numpy.array(df.index, dtype=r_dtype)
A:pandas.tests.frame.test_to_csv.idx_list->to_datetime(recons.index)
A:pandas.tests.frame.test_to_csv.r_dtype->dict(i='i', f='f', s='O', u='O', dt='O', p='O').get(r_dtype)
A:pandas.tests.frame.test_to_csv.recons.columns->numpy.array(recons.columns, dtype=c_dtype)
A:pandas.tests.frame.test_to_csv.df.columns->numpy.array(df.columns, dtype=c_dtype)
A:pandas.tests.frame.test_to_csv.col_list->pandas.DataFrame({'a': [1, 2]}).columns.to_timestamp()
A:pandas.tests.frame.test_to_csv.c_dtype->dict(i='i', f='f', s='O', u='O', dt='O', p='O').get(c_dtype)
A:pandas.tests.frame.test_to_csv.base->int(chunksize // ncols)
A:pandas.tests.frame.test_to_csv.cols->list(df.columns)
A:pandas.tests.frame.test_to_csv.float_frame['H']->float_frame.index.map(f)
A:pandas.tests.frame.test_to_csv.df['c3']->Series([7, 8, 9], dtype='int64')
A:pandas.tests.frame.test_to_csv.from_df->DataFrame([[1, 2], [3, 4]], columns=['A', 'B'])
A:pandas.tests.frame.test_to_csv.to_df->DataFrame([[1, 2], [3, 4]], columns=['X', 'Y'])
A:pandas.tests.frame.test_to_csv.arrays->numpy.arange(len(old_index) * 2).reshape(2, -1)
A:pandas.tests.frame.test_to_csv.new_index->pandas.MultiIndex.from_arrays(arrays, names=['first', 'second'])
A:pandas.tests.frame.test_to_csv.tsframe.index->pandas.MultiIndex.from_arrays(new_index)
A:pandas.tests.frame.test_to_csv.msg->'len of {i}, but only 5 lines in file'.format(i=i)
A:pandas.tests.frame.test_to_csv.expected->pandas._testing.convert_rows_list_to_csv_str(expected_rows)
A:pandas.tests.frame.test_to_csv.expected.index->pandas._testing.convert_rows_list_to_csv_str(expected_rows).index.astype(str)
A:pandas.tests.frame.test_to_csv.lines->f.readlines()
A:pandas.tests.frame.test_to_csv.df_float->DataFrame(np.random.randn(1000, 3), dtype='float64')
A:pandas.tests.frame.test_to_csv.df_int->DataFrame(np.random.randn(1000, 3), dtype='int64')
A:pandas.tests.frame.test_to_csv.df_bool->DataFrame(True, index=df_float.index, columns=range(3))
A:pandas.tests.frame.test_to_csv.df_object->DataFrame('foo', index=df_float.index, columns=range(3))
A:pandas.tests.frame.test_to_csv.df_dt->DataFrame(Timestamp('20010101'), index=df_float.index, columns=range(3))
A:pandas.tests.frame.test_to_csv.dtypes->dict()
A:pandas.tests.frame.test_to_csv.result[i]->to_datetime(result[i])
A:pandas.tests.frame.test_to_csv.aa->DataFrame({'A': range(100000)})
A:pandas.tests.frame.test_to_csv.f1->StringIO('a,1.0\nb,2.0')
A:pandas.tests.frame.test_to_csv.newdf->DataFrame({'t': df[df.columns[0]]})
A:pandas.tests.frame.test_to_csv.buf->StringIO()
A:pandas.tests.frame.test_to_csv.os_linesep->os.linesep.encode('utf-8')
A:pandas.tests.frame.test_to_csv.res->StringIO()
A:pandas.tests.frame.test_to_csv.exp->StringIO()
A:pandas.tests.frame.test_to_csv.csv_str->float_frame.to_csv(path_or_buf=None)
A:pandas.tests.frame.test_to_csv.(f, _handles)->get_handle(filename, 'w', compression=compression, encoding=encoding)
A:pandas.tests.frame.test_to_csv.text->pandas._testing.convert_rows_list_to_csv_str(text_rows)
A:pandas.tests.frame.test_to_csv.datetime_frame->DataFrame({'A': dt_index, 'B': dt_index.shift(1)}, index=dt_index)
A:pandas.tests.frame.test_to_csv.test->read_csv(path, parse_dates=[0, 1], index_col=0)
A:pandas.tests.frame.test_to_csv.datetime_frame_int->DataFrame({'A': dt_index, 'B': dt_index.shift(1)}, index=dt_index).applymap(lambda x: int(x.strftime('%Y%m%d')))
A:pandas.tests.frame.test_to_csv.datetime_frame_int.index->DataFrame({'A': dt_index, 'B': dt_index.shift(1)}, index=dt_index).applymap(lambda x: int(x.strftime('%Y%m%d'))).index.map(lambda x: int(x.strftime('%Y%m%d')))
A:pandas.tests.frame.test_to_csv.datetime_frame_str->DataFrame({'A': dt_index, 'B': dt_index.shift(1)}, index=dt_index).applymap(lambda x: x.strftime('%Y-%m-%d'))
A:pandas.tests.frame.test_to_csv.datetime_frame_str.index->DataFrame({'A': dt_index, 'B': dt_index.shift(1)}, index=dt_index).applymap(lambda x: x.strftime('%Y-%m-%d')).index.map(lambda x: x.strftime('%Y-%m-%d'))
A:pandas.tests.frame.test_to_csv.datetime_frame_columns->datetime_frame_columns.applymap(lambda x: int(x.strftime('%Y%m%d'))).applymap(lambda x: int(x.strftime('%Y%m%d')))
A:pandas.tests.frame.test_to_csv.datetime_frame_columns.columns->datetime_frame_columns.applymap(lambda x: int(x.strftime('%Y%m%d'))).applymap(lambda x: int(x.strftime('%Y%m%d'))).columns.map(lambda x: x.strftime('%Y%m%d'))
A:pandas.tests.frame.test_to_csv.nat_index->to_datetime(['NaT'] * 10 + ['2000-01-01', '1/1/2000', '1-1-2000'])
A:pandas.tests.frame.test_to_csv.nat_frame->DataFrame({'A': nat_index}, index=nat_index)
A:pandas.tests.frame.test_to_csv.times->pandas.date_range('2013-10-26 23:00', '2013-10-27 01:00', tz='Europe/London', freq='H', ambiguous='infer')
A:pandas.tests.frame.test_to_csv.time_range->numpy.array(range(len(i)), dtype='int64')
A:pandas.tests.frame.test_to_csv.idx->pandas.date_range('2015-01-01', '2015-12-31', freq='H', tz='Europe/Paris')
A:pandas.tests.frame.test_to_csv.result['idx']->to_datetime(result['idx'], utc=True).astype('datetime64[ns, Europe/Paris]')
A:pandas.tests.frame.test_to_csv.index->pandas.Index([(1,), (2,), (3,)])
A:pandas.tests.frame.test_to_csv.columns->pandas.MultiIndex.from_tuples([('a', 1), ('a', 2), ('b', 1), ('b', 2)])
pandas.tests.frame.test_to_csv.TestDataFrameToCSV
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.read_csv(self,path,**kwargs)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_gz_lineend(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_multi_index_header(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_period_index_date_overflow(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_bug(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_chunking(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_cols_reordering(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_compression(self,df,encoding,compression)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_date_format(self,datetime_frame)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_dtnat(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_dups_cols(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_float32_nanrep(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_float_format(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_from_csv1(self,float_frame,datetime_frame)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_from_csv2(self,float_frame)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_from_csv3(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_from_csv4(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_from_csv5(self,timezone_frame)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_from_csv_categorical(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_from_csv_w_all_infs(self,float_frame)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_from_csv_w_some_infs(self,float_frame)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_headers(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_index_no_leading_comma(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_interval_index(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_line_terminators(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_mixed(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_moar(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_multiindex(self,float_frame,datetime_frame)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_new_dupe_cols(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_no_index(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_path_is_none(self,float_frame)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_quote_none(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_quoting(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_single_level_multi_index(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_stringio(self,float_frame)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_unicode(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_unicode_index_col(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_unicodewriter_quoting(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_wide_frame_formatting(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_with_dst_transitions(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_with_mix_columns(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_withcommas(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_apply.py----------------------------------------
A:pandas.tests.frame.test_apply.df->DataFrame(data=[0, 1, 2], index=timestamps)
A:pandas.tests.frame.test_apply.applied->float_frame.applymap(lambda x: x * 2)
A:pandas.tests.frame.test_apply.result->DataFrame(data=[0, 1, 2], index=timestamps).apply(lambda x: x.name, axis=1)
A:pandas.tests.frame.test_apply.empty_frame->DataFrame()
A:pandas.tests.frame.test_apply.expected->pandas.Series(index=timestamps, data=timestamps)
A:pandas.tests.frame.test_apply.empty_with_cols->DataFrame(columns=['a', 'b', 'c'])
A:pandas.tests.frame.test_apply.m->list(range(len(float_frame.index)))
A:pandas.tests.frame.test_apply.result0->DataFrame(data=[0, 1, 2], index=timestamps).apply(Series.describe, axis=0)
A:pandas.tests.frame.test_apply.result1->DataFrame(data=[0, 1, 2], index=timestamps).agg(['count', 'size'])
A:pandas.tests.frame.test_apply.expected0->DataFrame({i: v.describe() for (i, v) in df.items()}, columns=df.columns)
A:pandas.tests.frame.test_apply.expected1->float_frame.apply(lambda x: x.values.mean(), axis=1)
A:pandas.tests.frame.test_apply.tapplied->float_frame.apply(np.mean, axis=1)
A:pandas.tests.frame.test_apply.no_cols->DataFrame(index=['a', 'b', 'c'])
A:pandas.tests.frame.test_apply.no_index->DataFrame(columns=['a', 'b', 'c'])
A:pandas.tests.frame.test_apply.test_res->f(np.array([], dtype='f8'))
A:pandas.tests.frame.test_apply.agg_axis->DataFrame(data=[0, 1, 2], index=timestamps)._get_agg_axis(axis)
A:pandas.tests.frame.test_apply.data->DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'foo', 'foo', 'foo'], 'B': ['one', 'one', 'one', 'two', 'one', 'one', 'one', 'two', 'two', 'two', 'one'], 'C': ['dull', 'dull', 'shiny', 'dull', 'dull', 'shiny', 'shiny', 'dull', 'shiny', 'shiny', 'shiny'], 'D': np.random.randn(11), 'E': np.random.randn(11), 'F': np.random.randn(11)})
A:pandas.tests.frame.test_apply.positions->DataFrame([[datetime(2013, 1, 1), 'ABC0', 50], [datetime(2013, 1, 2), 'YUM0', 20], [datetime(2013, 1, 3), 'DEF0', 20], [datetime(2013, 1, 4), 'ABC1', 50], [datetime(2013, 1, 5), 'YUM1', 20], [datetime(2013, 1, 6), 'DEF1', 20]], columns=['a', 'market', 'position'])
A:pandas.tests.frame.test_apply.index->pandas.DatetimeIndex(['1950-06-30', '1952-10-24', '1953-05-29'])
A:pandas.tests.frame.test_apply.s->DataFrame([[1, 2], [3, 4], [5, 6]], index=index, columns=['col1', 'col2'])
A:pandas.tests.frame.test_apply.A->DataFrame([['foo', 'bar'], ['spam', 'eggs']])
A:pandas.tests.frame.test_apply.A_dicts->Series([dict([(0, 'foo'), (1, 'spam')]), dict([(0, 'bar'), (1, 'eggs')])])
A:pandas.tests.frame.test_apply.B->DataFrame([[0, 1], [2, 3]])
A:pandas.tests.frame.test_apply.B_dicts->Series([dict([(0, 0), (1, 2)]), dict([(0, 1), (1, 3)])])
A:pandas.tests.frame.test_apply.reduce_true->DataFrame(data=[0, 1, 2], index=timestamps).apply(fn, result_type='reduce')
A:pandas.tests.frame.test_apply.reduce_false->DataFrame(data=[0, 1, 2], index=timestamps).apply(fn, result_type='expand')
A:pandas.tests.frame.test_apply.reduce_none->DataFrame(data=[0, 1, 2], index=timestamps).apply(fn)
A:pandas.tests.frame.test_apply.df2->DataFrame(data=[0, 1, 2], index=timestamps).copy()
A:pandas.tests.frame.test_apply.df['datetime']->Timestamp('20130101')
A:pandas.tests.frame.test_apply.df['timedelta']->pandas.Timedelta('1 min')
A:pandas.tests.frame.test_apply.ser->pandas.Series(date_range('1/1/2000', periods=10))
A:pandas.tests.frame.test_apply.df['date']->pandas.to_datetime(['17-10-2010 07:15:30', '13-05-2011 08:20:35', '15-01-2013 09:09:09'])
A:pandas.tests.frame.test_apply.df.index->pandas.MultiIndex.from_tuples([('i0', 'j0'), ('i1', 'j1')])
A:pandas.tests.frame.test_apply.f_abs->numpy.abs(float_frame)
A:pandas.tests.frame.test_apply.f_sqrt->numpy.sqrt(float_frame)
A:pandas.tests.frame.test_apply.expected.columns->pandas.MultiIndex.from_product([float_frame.columns, ['absolute', 'sqrt']])
A:pandas.tests.frame.test_apply.expected.index->pandas.MultiIndex.from_product([float_frame.index, ['absolute', 'sqrt']])
A:pandas.tests.frame.test_apply.mdf->pandas.DataFrame({'A': [1, 2, 3], 'B': [1.0, 2.0, 3.0], 'C': ['foo', 'bar', 'baz'], 'D': pd.date_range('20130101', periods=3)})
A:pandas.tests.frame.test_apply.(name1, name2)->float_frame.axes[other_axis].unique()[:2].sort_values()
A:pandas.tests.frame.test_apply.func->OrderedDict([(name1, ['mean', 'sum']), (name2, ['sum', 'max'])])
A:pandas.tests.frame.test_apply.result2->DataFrame(data=[0, 1, 2], index=timestamps).agg({'A': ['count', 'size'], 'B': ['count', 'size'], 'C': ['count', 'size']})
A:pandas.tests.frame.test_apply.original->pandas.DatetimeIndex(['1950-06-30', '1952-10-24', '1953-05-29']).copy()
A:pandas.tests.frame.test_apply.none_in_first_column_result->getattr(df[['A', 'B']], method)()
A:pandas.tests.frame.test_apply.none_in_second_column_result->getattr(df[['B', 'A']], method)()
pandas.tests.frame.test_apply.TestDataFrameAggregate
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_agg_cython_table(self,df,func,expected,axis)
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_agg_cython_table_raises(self,df,func,expected,axis)
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_agg_cython_table_transform(self,df,func,expected,axis)
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_agg_dict_nested_renaming_depr(self)
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_agg_listlike_result(self)
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_agg_multiple_mixed_no_warning(self)
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_agg_reduce(self,axis,float_frame)
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_agg_transform(self,axis,float_frame)
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_apply_datetime_tz_issue(self)
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_apply_dt_tz_issue(self)
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_consistency_of_aggregates_of_columns_with_missing_values(self,df,method)
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_demo(self)
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_frequency_is_original(self,num_cols)
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_non_callable_aggregates(self)
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_nuiscance_columns(self)
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_transform_and_agg_err(self,axis,float_frame)
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_transform_method_name(self,method)
pandas.tests.frame.test_apply.TestDataFrameApply
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply(self,float_frame)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_attach_name(self,float_frame)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_axis1(self,float_frame)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_broadcast(self,float_frame,int_frame_const_col)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_broadcast_error(self,int_frame_const_col)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_bug(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_convert_objects(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_dict(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_differently_indexed(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_dup_names_multi_agg(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_empty(self,float_frame)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_empty_infer_type(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_funcs_over_empty(self,func)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_ignore_failures(self,float_string_frame)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_mixed_datetimelike(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_mixed_dtlike(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_mixed_dtype_corner(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_modify_traceback(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_multi_index(self,float_frame)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_nested_result_axis_1(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_non_numpy_dtype(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_noreduction_tzaware_object(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_raw(self,float_frame)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_reduce_Series(self,float_frame)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_reduce_rows_to_dict(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_standard_nonunique(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_with_args_kwds(self,float_frame)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_with_reduce_empty(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_with_string_funcs(self,float_frame,func,args,kwds)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_yield_list(self,float_frame)
pandas.tests.frame.test_apply.TestDataFrameApply.test_applymap(self,float_frame)
pandas.tests.frame.test_apply.TestDataFrameApply.test_applymap_box(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_applymap_box_timestamps(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_frame_apply_dont_convert_datetime64(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_frame_apply_dont_convert_dt64(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_nunique_empty(self)
pandas.tests.frame.test_apply.TestInferOutputShape
pandas.tests.frame.test_apply.TestInferOutputShape.test_consistency_for_boxed(self,box,int_frame_const_col)
pandas.tests.frame.test_apply.TestInferOutputShape.test_consistent_coerce_for_shapes(self)
pandas.tests.frame.test_apply.TestInferOutputShape.test_consistent_names(self,int_frame_const_col)
pandas.tests.frame.test_apply.TestInferOutputShape.test_infer_output_shape_columns(self)
pandas.tests.frame.test_apply.TestInferOutputShape.test_infer_output_shape_listlike_columns(self)
pandas.tests.frame.test_apply.TestInferOutputShape.test_infer_row_shape(self)
pandas.tests.frame.test_apply.TestInferOutputShape.test_result_type(self,int_frame_const_col)
pandas.tests.frame.test_apply.TestInferOutputShape.test_result_type_error(self,result_type,int_frame_const_col)
pandas.tests.frame.test_apply.TestInferOutputShape.test_with_dictlike_columns(self)
pandas.tests.frame.test_apply.TestInferOutputShape.test_with_dictlike_columns_with_infer(self)
pandas.tests.frame.test_apply.TestInferOutputShape.test_with_listlike_columns(self)
pandas.tests.frame.test_apply.int_frame_const_col()
pandas.tests.frame.test_apply.zip_frames(frames,axis=1)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_mutate_columns.py----------------------------------------
A:pandas.tests.frame.test_mutate_columns.df->df.rename(columns={}).rename(columns={})
A:pandas.tests.frame.test_mutate_columns.original->df.rename(columns={}).rename(columns={}).copy()
A:pandas.tests.frame.test_mutate_columns.result->df.rename(columns={}).rename(columns={}).rename(columns={})
A:pandas.tests.frame.test_mutate_columns.expected->DataFrame([[1.3, 1, 1.1], [2.3, 2, 2.2]], columns=['c', 'a', 'b'])
A:pandas.tests.frame.test_mutate_columns.s->DataFrame({'foo': ['a', 'b', 'c', 'a'], 'fiz': ['g', 'h', 'i', 'j']}).set_index('foo')
A:pandas.tests.frame.test_mutate_columns.df['gr']->df.rename(columns={}).rename(columns={}).groupby(['b', 'c']).count()
A:pandas.tests.frame.test_mutate_columns.new_col->numpy.random.randn(N)
A:pandas.tests.frame.test_mutate_columns.df['x']->df['a'].astype('float32').astype('float32')
A:pandas.tests.frame.test_mutate_columns.df['a']->df['a'].astype('float32').astype('float32')
A:pandas.tests.frame.test_mutate_columns.df['y']->df['a'].astype('float32').astype('float32').astype('int32')
A:pandas.tests.frame.test_mutate_columns.exp->DataFrame(data={'X': ['x', 'y', 'z']}, index=['A', 'B', 'C'])
A:pandas.tests.frame.test_mutate_columns.midx->pandas.MultiIndex.from_product([['A', 'B'], [1, 2]])
A:pandas.tests.frame.test_mutate_columns.a->DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'], index=['X', 'Y'])
A:pandas.tests.frame.test_mutate_columns.b->DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'], index=['X', 'Y']).pop('B')
A:pandas.tests.frame.test_mutate_columns.res->df.rename(columns={}).rename(columns={}).pop('a')
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_assign(self)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_assign_bad(self)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_assign_dependent(self)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_assign_multiple(self)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_assign_order(self)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_delitem(self,float_frame)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_delitem_multiindex(self)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_insert(self)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_insert_benchmark(self)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_insert_column_bug_4032(self)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_insert_error_msmgs(self)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_pop(self,float_frame)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_pop_non_unique_cols(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_period.py----------------------------------------
A:pandas.tests.frame.test_period.rng->period_range('1/1/2000', '1/1/2010', freq='A')
A:pandas.tests.frame.test_period.df->DataFrame(np.random.randn(len(index), K), index=index)
A:pandas.tests.frame.test_period.rs->DataFrame(np.random.randn(len(index), K), index=index).reset_index().set_index('index')
A:pandas.tests.frame.test_period.index->PeriodIndex(['2011-1', '2011-2', '2011-3'], freq='M')
A:pandas.tests.frame.test_period.exp_index->_get_with_delta(delta)
A:pandas.tests.frame.test_period.result->DataFrame(np.random.randn(len(index), K), index=index).to_timestamp('S', 'end', axis=1)
A:pandas.tests.frame.test_period.delta->timedelta(hours=23, minutes=59, seconds=59)
A:pandas.tests.frame.test_period.result1->DataFrame(np.random.randn(len(index), K), index=index).to_timestamp('5t', axis=1)
A:pandas.tests.frame.test_period.result2->DataFrame(np.random.randn(len(index), K), index=index).to_timestamp('t', axis=1)
A:pandas.tests.frame.test_period.expected->pandas.date_range('2001-01-01', '2009-01-01', freq='AS')
A:pandas.tests.frame.test_period.frame->DataFrame(np.random.randn(3, 4), index=index)
A:pandas.tests.frame.test_period.ts->DataFrame(np.random.randn(len(rng), 3), index=rng)
pandas.tests.frame.test_period.TestPeriodIndex
pandas.tests.frame.test_period.TestPeriodIndex.test_align_frame(self)
pandas.tests.frame.test_period.TestPeriodIndex.test_as_frame_columns(self)
pandas.tests.frame.test_period.TestPeriodIndex.test_frame_index_to_string(self)
pandas.tests.frame.test_period.TestPeriodIndex.test_frame_setitem(self)
pandas.tests.frame.test_period.TestPeriodIndex.test_frame_to_time_stamp(self)
pandas.tests.frame.test_period._permute(obj)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_sort_values_level_as_str.py----------------------------------------
A:pandas.tests.frame.test_sort_values_level_as_str.expected->df_none.sort_values(by=sort_names, ascending=ascending, axis=0).set_index(levels)
A:pandas.tests.frame.test_sort_values_level_as_str.result->df_idx.T.sort_values(by=sort_names, ascending=ascending, axis=1)
pandas.tests.frame.test_sort_values_level_as_str.ascending(request)
pandas.tests.frame.test_sort_values_level_as_str.df_idx(request,df_none)
pandas.tests.frame.test_sort_values_level_as_str.df_none()
pandas.tests.frame.test_sort_values_level_as_str.sort_names(request)
pandas.tests.frame.test_sort_values_level_as_str.test_sort_column_level_and_index_label(df_none,df_idx,sort_names,ascending)
pandas.tests.frame.test_sort_values_level_as_str.test_sort_index_level_and_column_label(df_none,df_idx,sort_names,ascending)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_timezones.py----------------------------------------
A:pandas.tests.frame.test_timezones.df->DataFrame({'a': range(len(idx)), 'b': range(len(idx))}, index=idx)
A:pandas.tests.frame.test_timezones.expected->DataFrame({'d': [pd.Timestamp('2019')]})
A:pandas.tests.frame.test_timezones.new->numpy.array([[pd.Timestamp('2000-01-01T01:00:00', tz=est)], [pd.Timestamp('2000-01-02T01:00:00', tz=est)], [pd.Timestamp('2000-01-03T01:00:00', tz=est)], [pd.Timestamp('2000-01-04T01:00:00', tz=est)]])
A:pandas.tests.frame.test_timezones.rng->date_range('1/1/2011', periods=10, freq='H', tz='US/Eastern')
A:pandas.tests.frame.test_timezones.result->DataFrame({'d': [pd.Timestamp('2019', tz=tz)]}, dtype='datetime64[ns]')
A:pandas.tests.frame.test_timezones.test1->DataFrame(np.zeros((6, 3)), index=date_range('2012-11-15 00:00:00', periods=6, freq='100L', tz='US/Central'))
A:pandas.tests.frame.test_timezones.test2->DataFrame(np.zeros((3, 3)), index=date_range('2012-11-15 00:00:00', periods=3, freq='250L', tz='US/Central'), columns=range(3, 6))
A:pandas.tests.frame.test_timezones.ex_index->DataFrame(np.zeros((6, 3)), index=date_range('2012-11-15 00:00:00', periods=6, freq='100L', tz='US/Central')).index.union(test2.index)
A:pandas.tests.frame.test_timezones.df_moscow->DataFrame({'a': range(len(idx)), 'b': range(len(idx))}, index=idx).tz_convert('Europe/Moscow')
A:pandas.tests.frame.test_timezones.idx1->date_range('2001', periods=5, freq='H', tz='US/Eastern')
A:pandas.tests.frame.test_timezones.idx2->date_range('2001', periods=5, freq='2H', tz='US/Eastern')
A:pandas.tests.frame.test_timezones.df1->DataFrame(np.random.randn(len(idx1), 3), idx1)
A:pandas.tests.frame.test_timezones.df2->DataFrame(np.random.randn(len(idx2), 3), idx2)
A:pandas.tests.frame.test_timezones.(new1, new2)->DataFrame(np.random.randn(len(idx1), 3), idx1).align(df1_central[0], axis=0)
A:pandas.tests.frame.test_timezones.df1_central->DataFrame(np.random.randn(len(idx1), 3), idx1).tz_convert('US/Central')
A:pandas.tests.frame.test_timezones.dr->date_range('2012-06-02', periods=10, tz=tz)
A:pandas.tests.frame.test_timezones.dr_tz->date_range('2012-06-02', periods=10, tz=tz).tz_localize(tz)
A:pandas.tests.frame.test_timezones.tz_expected->DatetimeTZDtype('ns', dr_tz.tzinfo)
A:pandas.tests.frame.test_timezones.roundtripped->DataFrame({'a': range(len(idx)), 'b': range(len(idx))}, index=idx).reset_index().set_index('index')
A:pandas.tests.frame.test_timezones.idx->date_range('20161101', '20161130', freq='4H', tz=tz)
pandas.tests.frame.test_timezones.TestDataFrameTimezones
pandas.tests.frame.test_timezones.TestDataFrameTimezones.test_boolean_compare_transpose_tzindex_with_dst(self,tz)
pandas.tests.frame.test_timezones.TestDataFrameTimezones.test_constructor_data_aware_dtype_naive(self,tz_aware_fixture)
pandas.tests.frame.test_timezones.TestDataFrameTimezones.test_frame_add_tz_mismatch_converts_to_utc(self)
pandas.tests.frame.test_timezones.TestDataFrameTimezones.test_frame_align_aware(self)
pandas.tests.frame.test_timezones.TestDataFrameTimezones.test_frame_from_records_utc(self)
pandas.tests.frame.test_timezones.TestDataFrameTimezones.test_frame_join_tzaware(self)
pandas.tests.frame.test_timezones.TestDataFrameTimezones.test_frame_no_datetime64_dtype(self,tz)
pandas.tests.frame.test_timezones.TestDataFrameTimezones.test_frame_no_dt64_dtype(self,tz)
pandas.tests.frame.test_timezones.TestDataFrameTimezones.test_frame_reset_index(self,tz)
pandas.tests.frame.test_timezones.TestDataFrameTimezones.test_frame_tz_convert(self)
pandas.tests.frame.test_timezones.TestDataFrameTimezones.test_frame_tz_localize(self)
pandas.tests.frame.test_timezones.TestDataFrameTimezones.test_frame_values_with_tz(self)
pandas.tests.frame.test_timezones.TestDataFrameTimezones.test_tz_localize_convert_copy_inplace_mutate(self,copy,method,tz)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_analytics.py----------------------------------------
A:pandas.tests.frame.test_analytics.f->getattr(frame, opname)
A:pandas.tests.frame.test_analytics.df->DataFrame([1.0, 1.0, 1.0])
A:pandas.tests.frame.test_analytics.result->operator.matmul(a, b)
A:pandas.tests.frame.test_analytics.df['a']->range(len(df))
A:pandas.tests.frame.test_analytics.skipna_wrapper->pandas._testing._make_skipna_wrapper(alternative, skipna_alternative)
A:pandas.tests.frame.test_analytics.result0->f(axis=0)
A:pandas.tests.frame.test_analytics.result1->f(axis=1)
A:pandas.tests.frame.test_analytics.expected->DataFrame(np.dot(a.values, b.values), index=['a', 'b', 'c'], columns=['one', 'two'])
A:pandas.tests.frame.test_analytics.r0->getattr(all_na, opname)(axis=0)
A:pandas.tests.frame.test_analytics.r1->getattr(all_na, opname)(axis=1)
A:pandas.tests.frame.test_analytics.df1->DataFrame(np.random.randn(5, 3), columns=['foo', 'bar', 'baz'])
A:pandas.tests.frame.test_analytics.df2->DataFrame(np.random.randn(5, 3), index=range(5), columns=[1, 2, 3])
A:pandas.tests.frame.test_analytics.test->DataFrame([1.0, 1.0, 1.0]).sum(axis=0)
A:pandas.tests.frame.test_analytics.arr->numpy.random.randint(1000, size=(10, 5))
A:pandas.tests.frame.test_analytics.index->MultiIndex(levels=[['bar'], ['one', 'two', 'three'], [0, 1]], codes=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2], [0, 1, 0, 1, 0, 1]])
A:pandas.tests.frame.test_analytics.kurt->DataFrame([1.0, 1.0, 1.0]).kurt()
A:pandas.tests.frame.test_analytics.kurt2->DataFrame([1.0, 1.0, 1.0]).kurt(level=0).xs('bar')
A:pandas.tests.frame.test_analytics.diffs->DataFrame(dict(A=df['A'] - df['C'], B=df['A'] - df['B']))
A:pandas.tests.frame.test_analytics.result2->abs(diffs)
A:pandas.tests.frame.test_analytics.mixed->DataFrame(dict(A=df['A'] - df['C'], B=df['A'] - df['B'])).copy()
A:pandas.tests.frame.test_analytics.mixed['F']->Timestamp('20130101')
A:pandas.tests.frame.test_analytics.empty_frame->DataFrame()
A:pandas.tests.frame.test_analytics.axis0->DataFrame().sum(0)
A:pandas.tests.frame.test_analytics.axis1->DataFrame().sum(1)
A:pandas.tests.frame.test_analytics.values->float_frame.values.astype(int)
A:pandas.tests.frame.test_analytics.frame->DataFrame(values, index=float_frame.index, columns=float_frame.columns)
A:pandas.tests.frame.test_analytics.bools->isna(df)
A:pandas.tests.frame.test_analytics.the_mean->float_string_frame.mean(axis=1)
A:pandas.tests.frame.test_analytics.the_sum->float_string_frame.sum(axis=1, numeric_only=True)
A:pandas.tests.frame.test_analytics.means->float_frame.mean(0)
A:pandas.tests.frame.test_analytics.df['D']->pandas.period_range('2016', periods=3, freq='A')
A:pandas.tests.frame.test_analytics.data->DataFrame(data)
A:pandas.tests.frame.test_analytics.a->a.astype(int).astype(int)
A:pandas.tests.frame.test_analytics.b->DataFrame(np.random.randn(4, 2), index=['p', 'q', 'r', 's'], columns=['one', 'two'])
A:pandas.tests.frame.test_analytics.b1->DataFrame(np.random.randn(4, 2), index=['p', 'q', 'r', 's'], columns=['one', 'two']).reindex(index=reversed(b.index))
A:pandas.tests.frame.test_analytics.A->DataFrame(a)
A:pandas.tests.frame.test_analytics.B->DataFrame(b)
A:pandas.tests.frame.test_analytics.a['q']->a.astype(int).astype(int).q.round().astype(int)
A:pandas.tests.frame.test_analytics.df_nan->DataFrame({'A': [np.nan, 2.0, np.nan]})
A:pandas.tests.frame.test_analytics.s->Series([1, 1, 1])
A:pandas.tests.frame.test_analytics.s_nan->Series([np.nan, np.nan, 1])
pandas.tests.frame.test_analytics.TestDataFrameAnalytics
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_any_all(self,opname,bool_frame_with_na,float_string_frame)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_any_all_bool_only(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_any_all_extra(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_any_all_level_axis_none_raises(self,method)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_any_all_np_func(self,func,data,expected)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_any_all_object(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_any_datetime(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_any_dt(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_dot(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_idxmax(self,float_frame,int_frame)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_idxmin(self,float_frame,int_frame)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_kurt(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_matmul(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_mean_corner(self,float_frame,float_string_frame)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_mean_datetimelike(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_mean_datetimelike_numeric_only_false(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_mean_dtlike(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_mean_dtlike_numeric_only_false(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_mean_excludes_datetimes(self,tz)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_mean_excludes_dts(self,tz)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_mean_extensionarray_numeric_only_true(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_mean_mixed_datetime_numeric(self,tz)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_mean_mixed_dt_numeric(self,tz)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_mean_mixed_string_decimal(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_median(self,float_frame_with_na,int_frame)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_mixed_ops(self,op)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_mode_dropna(self,dropna,expected)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_mode_sortwarning(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_numeric_only_flag(self,meth)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_nunique(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_operators_timedelta64(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_reduce_mixed_frame(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_sem(self,datetime_frame)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_series_broadcasting(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_stat_op_api(self,float_frame,float_string_frame)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_stat_op_calc(self,float_frame_with_na,mixed_float_frame)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_stat_operators_attempt_obj_array(self,method)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_stats_mixed_type(self,float_string_frame)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_sum_bool(self,float_frame)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_sum_bools(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_sum_corner(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_sum_mixed_datetime(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_sum_mixed_dt(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_sum_nanops_timedelta(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_sum_object(self,float_frame)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_sum_prod_nanops(self,method,unit)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_var_std(self,datetime_frame)
pandas.tests.frame.test_analytics.assert_bool_op_api(opname,bool_frame_with_na,float_string_frame,has_bool_only=False)
pandas.tests.frame.test_analytics.assert_bool_op_calc(opname,alternative,frame,has_skipna=True)
pandas.tests.frame.test_analytics.assert_stat_op_api(opname,float_frame,float_string_frame,has_numeric_only=False)
pandas.tests.frame.test_analytics.assert_stat_op_calc(opname,alternative,frame,has_skipna=True,check_dtype=True,check_dates=False,check_less_precise=False,skipna_alternative=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_join.py----------------------------------------
A:pandas.tests.frame.test_join.result->DataFrame({'col1': [1, 2]}, index=['c', 'a']).join([b, c], how='outer', sort=sort_kw)
A:pandas.tests.frame.test_join.joined->DataFrame({'a': [0, 10, 20]}, index=[1, 2, 3]).join([df2, df3], how='left')
A:pandas.tests.frame.test_join.expected_columns->Index(['A', 'B', 'C', 'D'])
A:pandas.tests.frame.test_join.expected->expected.reindex(index=['c', 'a', 'b']).reindex(index=['c', 'a', 'b'])
A:pandas.tests.frame.test_join.df->float_frame.copy()
A:pandas.tests.frame.test_join.s->float_frame.copy().pop(float_frame.columns[-1])
A:pandas.tests.frame.test_join.df1_suf->DataFrame({'a': [0, 10, 20]}, index=[1, 2, 3]).loc[:, ['B', 'C']].add_suffix('_df1')
A:pandas.tests.frame.test_join.df2_suf->DataFrame({'b': [100, 200, 300]}, index=[4, 3, 2]).loc[:, ['B', 'C']].add_suffix('_df2')
A:pandas.tests.frame.test_join.other->frame_with_period_index.rename(columns=lambda x: '{key}{key}'.format(key=x))
A:pandas.tests.frame.test_join.joined_values->numpy.concatenate([frame_with_period_index.values] * 2, axis=1)
A:pandas.tests.frame.test_join.joined_cols->frame_with_period_index.columns.append(other.columns)
A:pandas.tests.frame.test_join.df1->DataFrame({'a': [0, 10, 20]}, index=[1, 2, 3])
A:pandas.tests.frame.test_join.df2->DataFrame({'b': [100, 200, 300]}, index=[4, 3, 2])
A:pandas.tests.frame.test_join.df3->DataFrame({'c': [400, 500, 600]}, index=[2, 2, 4])
A:pandas.tests.frame.test_join.a->DataFrame({'col1': [1, 2]}, index=['c', 'a'])
A:pandas.tests.frame.test_join.b->DataFrame({'col2': [4, 5]}, index=['b', 'a'])
A:pandas.tests.frame.test_join.c->DataFrame({'col3': [7, 8]}, index=['a', 'b'])
pandas.tests.frame.test_join.frame_with_period_index()
pandas.tests.frame.test_join.left()
pandas.tests.frame.test_join.right()
pandas.tests.frame.test_join.test_join(left,right,how,sort,expected)
pandas.tests.frame.test_join.test_join_index(float_frame)
pandas.tests.frame.test_join.test_join_index_more(float_frame)
pandas.tests.frame.test_join.test_join_index_series(float_frame)
pandas.tests.frame.test_join.test_join_left_sequence_non_unique_index()
pandas.tests.frame.test_join.test_join_overlap(float_frame)
pandas.tests.frame.test_join.test_join_period_index(frame_with_period_index)
pandas.tests.frame.test_join.test_suppress_future_warning_with_sort_kw(sort_kw)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_repr_info.py----------------------------------------
A:pandas.tests.frame.test_repr_info.frame->DataFrame([[1, 2.0]], columns=['a', 'a'])
A:pandas.tests.frame.test_repr_info.buf->StringIO()
A:pandas.tests.frame.test_repr_info.biggie->DataFrame(np.zeros((200, 4)), columns=range(4), index=range(200))
A:pandas.tests.frame.test_repr_info.no_index->DataFrame(columns=[0, 1, 3])
A:pandas.tests.frame.test_repr_info.df->DataFrame({'dt': dt, 'p': p})
A:pandas.tests.frame.test_repr_info.unsortable->DataFrame({'foo': [1] * 50, datetime.today(): [1] * 50, 'bar': ['bar'] * 50, datetime.today() + timedelta(1): ['bar'] * 50}, index=np.arange(50))
A:pandas.tests.frame.test_repr_info.bval->uval.encode('utf-8')
A:pandas.tests.frame.test_repr_info.result->repr(box([arg('NaT')], dtype=object))
A:pandas.tests.frame.test_repr_info.io->StringIO()
A:pandas.tests.frame.test_repr_info.res->StringIO().getvalue().splitlines()
A:pandas.tests.frame.test_repr_info.lines->StringIO().readlines()
A:pandas.tests.frame.test_repr_info.line_nr->' {} '.format(index)
A:pandas.tests.frame.test_repr_info.bytes->float(df.memory_usage().sum())
A:pandas.tests.frame.test_repr_info.expected->textwrap.dedent("        <class 'pandas.core.frame.DataFrame'>\n        RangeIndex: 2 entries, 0 to 1\n        Data columns (total 1 columns):\n         #   Column  Non-Null Count  Dtype\n        ---  ------  --------------  -----\n         0   a       2 non-null      int64\n        dtypes: int64(1)\n        memory usage: {} bytes\n        ".format(bytes))
A:pandas.tests.frame.test_repr_info.rs->StringIO().getvalue()
A:pandas.tests.frame.test_repr_info.data[i]->numpy.random.randint(2, size=n).astype(dtype)
A:pandas.tests.frame.test_repr_info.name->' {i:d}   {i:d}       {n:d} non-null     {dtype}'.format(i=i, n=n, dtype=dtype)
A:pandas.tests.frame.test_repr_info.df_with_object_index->pandas.DataFrame({'a': [1]}, index=['foo'])
A:pandas.tests.frame.test_repr_info.df_size->DataFrame({'dt': dt, 'p': p}).memory_usage().sum()
A:pandas.tests.frame.test_repr_info.mem->DataFrame({'dt': dt, 'p': p}).memory_usage(deep=True).sum()
A:pandas.tests.frame.test_repr_info.df_object->pandas.DataFrame({'a': ['a']})
A:pandas.tests.frame.test_repr_info.M->len(uppercase)
A:pandas.tests.frame.test_repr_info.index->pandas.MultiIndex.from_product([list(uppercase), pd.date_range('20160101', periods=N)], names=['id', 'date'])
A:pandas.tests.frame.test_repr_info.unstacked->DataFrame({'dt': dt, 'p': p}).unstack('id')
A:pandas.tests.frame.test_repr_info.idx->pandas.CategoricalIndex(['a', 'b'])
A:pandas.tests.frame.test_repr_info.df['category']->Series(np.array(list('abcdefghij')).take(np.random.randint(0, 10, size=n))).astype('category')
A:pandas.tests.frame.test_repr_info.dt->date_range('2011-01-01 09:00', freq='H', periods=5, tz='US/Eastern')
A:pandas.tests.frame.test_repr_info.p->period_range('2011-01', freq='M', periods=5)
A:pandas.tests.frame.test_repr_info.df2->DataFrame({'dt': Categorical(dt), 'p': Categorical(p)})
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info(self,float_frame,datetime_frame)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_categorical(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_categorical_column(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_duplicate_columns(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_duplicate_columns_shows_correct_dtypes(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_max_cols(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_memory(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_memory_usage(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_memory_usage_bug_on_multiindex(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_memory_usage_deep_not_pypy(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_memory_usage_deep_pypy(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_memory_usage_qualified(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_shows_column_dtypes(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_verbose(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_wide(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_latex_repr(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_repr(self,float_frame)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_repr_big(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_repr_categorical_dates_periods(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_repr_column_name_unicode_truncation_bug(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_repr_dimensions(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_repr_empty(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_repr_mixed(self,float_string_frame)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_repr_mixed_big(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_repr_np_nat_with_object(self,arg,box,expected)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_repr_unicode(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_repr_unsortable(self,float_frame)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_str_to_bytes_raises(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_unicode_string_with_unicode(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_usage_via_getsizeof(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_very_wide_info_repr(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_cumulative.py----------------------------------------
A:pandas.tests.frame.test_cumulative.dm->DataFrame(np.arange(20).reshape(4, 5), index=range(4), columns=range(5))
A:pandas.tests.frame.test_cumulative.result->DataFrame({'A': [1, 2, 3], 'B': [1, 2, 3.0], 'C': [True, False, False]}).cumsum()
A:pandas.tests.frame.test_cumulative.cumsum->datetime_frame.cumsum(axis=1)
A:pandas.tests.frame.test_cumulative.expected->DataFrame({'A': Series([1, 3, 6], dtype=np.int64), 'B': Series([1, 3, 6], dtype=np.float64), 'C': df['C'].cumsum()})
A:pandas.tests.frame.test_cumulative.df->DataFrame({'A': [1, 2, 3], 'B': [1, 2, 3.0], 'C': [True, False, False]})
A:pandas.tests.frame.test_cumulative.cumsum_xs->datetime_frame.cumsum(axis=1)
A:pandas.tests.frame.test_cumulative.cumprod->datetime_frame.cumprod(axis=1)
A:pandas.tests.frame.test_cumulative.cumprod_xs->datetime_frame.cumprod(axis=1)
A:pandas.tests.frame.test_cumulative.cummin->datetime_frame.cummin(axis=1)
A:pandas.tests.frame.test_cumulative.cummin_xs->datetime_frame.cummin(axis=1)
A:pandas.tests.frame.test_cumulative.cummax->datetime_frame.cummax(axis=1)
A:pandas.tests.frame.test_cumulative.cummax_xs->datetime_frame.cummax(axis=1)
pandas.tests.frame.test_cumulative.TestDataFrameCumulativeOps
pandas.tests.frame.test_cumulative.TestDataFrameCumulativeOps.test_cummax(self,datetime_frame)
pandas.tests.frame.test_cumulative.TestDataFrameCumulativeOps.test_cummin(self,datetime_frame)
pandas.tests.frame.test_cumulative.TestDataFrameCumulativeOps.test_cumprod(self,datetime_frame)
pandas.tests.frame.test_cumulative.TestDataFrameCumulativeOps.test_cumsum(self,datetime_frame)
pandas.tests.frame.test_cumulative.TestDataFrameCumulativeOps.test_cumsum_corner(self)
pandas.tests.frame.test_cumulative.TestDataFrameCumulativeOps.test_cumulative_ops_preserve_dtypes(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_query_eval.py----------------------------------------
A:pandas.tests.frame.test_query_eval.self.df->DataFrame({'A': [1, 2, 3]})
A:pandas.tests.frame.test_query_eval.result->DataFrame({'a': [1, 2], 'b': ['c', 'd']}).query('sin > 5', engine=engine, parser=parser)
A:pandas.tests.frame.test_query_eval.df->DataFrame({'a': [1, 2], 'b': ['c', 'd']})
A:pandas.tests.frame.test_query_eval.m->DataFrame({'a': [1, 2], 'b': ['c', 'd']}).mean()
A:pandas.tests.frame.test_query_eval.base->DataFrame(np.tile(m.values, n).reshape(n, -1), columns=list('abcd'))
A:pandas.tests.frame.test_query_eval.expected->DataFrame({'a': [1, 2], 'b': ['c', 'd']}).query('(@df>0) & (@df2>0)', engine=engine, parser=parser)
A:pandas.tests.frame.test_query_eval.a->Series(np.random.choice(list('abcde'), 20))
A:pandas.tests.frame.test_query_eval.b->Series(np.arange(a.size))
A:pandas.tests.frame.test_query_eval.index->pandas.MultiIndex.from_arrays([a, b])
A:pandas.tests.frame.test_query_eval.ind->Series(df.index.get_level_values(0).values, index=index)
A:pandas.tests.frame.test_query_eval.res1->DataFrame({'a': [1, 2], 'b': ['c', 'd']}).query('["eggs"] not in ilevel_1', parser=parser, engine=engine)
A:pandas.tests.frame.test_query_eval.res2->DataFrame({'a': [1, 2], 'b': ['c', 'd']}).query('"eggs" not in ilevel_1', parser=parser, engine=engine)
A:pandas.tests.frame.test_query_eval.res->DataFrame({'a': [1, 2], 'b': ['c', 'd']}).query("`  &^ :!€$?(} >    <++*''  ` > 4")
A:pandas.tests.frame.test_query_eval.resolvers->DataFrame({'a': [1, 2], 'b': ['c', 'd']})._get_index_resolvers()
A:pandas.tests.frame.test_query_eval.level_values->mi.get_level_values(level)
A:pandas.tests.frame.test_query_eval.s->mi.get_level_values(level).to_series()
A:pandas.tests.frame.test_query_eval.col_series->DataFrame({'a': [1, 2], 'b': ['c', 'd']}).columns.to_series()
A:pandas.tests.frame.test_query_eval.df['dates1']->date_range('1/1/2012', periods=n)
A:pandas.tests.frame.test_query_eval.df['dates2']->date_range('1/1/2013', periods=n)
A:pandas.tests.frame.test_query_eval.df['dates3']->date_range('1/1/2014', periods=n)
A:pandas.tests.frame.test_query_eval.d['dates1']->date_range('1/1/2012', periods=n)
A:pandas.tests.frame.test_query_eval.d['dates3']->date_range('1/1/2014', periods=n)
A:pandas.tests.frame.test_query_eval.df2->DataFrame(np.random.randn(5, 3))
A:pandas.tests.frame.test_query_eval.cols->list('abc')
A:pandas.tests.frame.test_query_eval.d->dict(zip(ops, (operator.eq, operator.ne)))
A:pandas.tests.frame.test_query_eval.q->'a {op} inf'.format(op=op)
A:pandas.tests.frame.test_query_eval.df['strings']->Series(list('aabbccddee'))
A:pandas.tests.frame.test_query_eval.ex->'{lhs} {op} {rhs}'.format(lhs=lhs, op=op, rhs=rhs)
A:pandas.tests.frame.test_query_eval.data->numpy.random.randint(2, size=(1, len(columns))).astype(bool)
A:pandas.tests.frame.test_query_eval.r->DataFrame({'a': [1, 2], 'b': ['c', 'd']}).query('Symbol == @symb', parser=parser, engine=engine)
A:pandas.tests.frame.test_query_eval.self.frame->DataFrame(np.random.randn(10, 3), columns=list('abc'))
pandas.tests.frame.test_query_eval.TestCompat
pandas.tests.frame.test_query_eval.TestCompat.setup_method(self,method)
pandas.tests.frame.test_query_eval.TestCompat.test_query_None(self)
pandas.tests.frame.test_query_eval.TestCompat.test_query_default(self)
pandas.tests.frame.test_query_eval.TestCompat.test_query_numexpr(self)
pandas.tests.frame.test_query_eval.TestCompat.test_query_python(self)
pandas.tests.frame.test_query_eval.TestDataFrameEval
pandas.tests.frame.test_query_eval.TestDataFrameEval.test_eval_resolvers_as_list(self)
pandas.tests.frame.test_query_eval.TestDataFrameEval.test_ops(self)
pandas.tests.frame.test_query_eval.TestDataFrameEval.test_query_empty_string(self)
pandas.tests.frame.test_query_eval.TestDataFrameEval.test_query_non_str(self)
pandas.tests.frame.test_query_eval.TestDataFrameEvalWithFrame
pandas.tests.frame.test_query_eval.TestDataFrameEvalWithFrame.setup_method(self,method)
pandas.tests.frame.test_query_eval.TestDataFrameEvalWithFrame.teardown_method(self,method)
pandas.tests.frame.test_query_eval.TestDataFrameEvalWithFrame.test_bool_arith_expr(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameEvalWithFrame.test_invalid_type_for_operator_raises(self,parser,engine,op)
pandas.tests.frame.test_query_eval.TestDataFrameEvalWithFrame.test_simple_expr(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryBacktickQuoting
pandas.tests.frame.test_query_eval.TestDataFrameQueryBacktickQuoting.df(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryBacktickQuoting.test_already_underscore_variable(self,df)
pandas.tests.frame.test_query_eval.TestDataFrameQueryBacktickQuoting.test_backtick_quote_name_with_no_spaces(self,df)
pandas.tests.frame.test_query_eval.TestDataFrameQueryBacktickQuoting.test_empty_string(self,df)
pandas.tests.frame.test_query_eval.TestDataFrameQueryBacktickQuoting.test_failing_character_outside_range(self,df)
pandas.tests.frame.test_query_eval.TestDataFrameQueryBacktickQuoting.test_failing_hashtag(self,df)
pandas.tests.frame.test_query_eval.TestDataFrameQueryBacktickQuoting.test_failing_quote(self,df)
pandas.tests.frame.test_query_eval.TestDataFrameQueryBacktickQuoting.test_keyword(self,df)
pandas.tests.frame.test_query_eval.TestDataFrameQueryBacktickQuoting.test_lots_of_operators_string(self,df)
pandas.tests.frame.test_query_eval.TestDataFrameQueryBacktickQuoting.test_mixed_underscores_and_spaces(self,df)
pandas.tests.frame.test_query_eval.TestDataFrameQueryBacktickQuoting.test_multiple_spaces(self,df)
pandas.tests.frame.test_query_eval.TestDataFrameQueryBacktickQuoting.test_parenthesis(self,df)
pandas.tests.frame.test_query_eval.TestDataFrameQueryBacktickQuoting.test_same_name_but_underscores(self,df)
pandas.tests.frame.test_query_eval.TestDataFrameQueryBacktickQuoting.test_single_backtick_variable_expr(self,df)
pandas.tests.frame.test_query_eval.TestDataFrameQueryBacktickQuoting.test_single_backtick_variable_query(self,df)
pandas.tests.frame.test_query_eval.TestDataFrameQueryBacktickQuoting.test_special_characters(self,df)
pandas.tests.frame.test_query_eval.TestDataFrameQueryBacktickQuoting.test_start_with_digit(self,df)
pandas.tests.frame.test_query_eval.TestDataFrameQueryBacktickQuoting.test_start_with_spaces(self,df)
pandas.tests.frame.test_query_eval.TestDataFrameQueryBacktickQuoting.test_two_backtick_variables_expr(self,df)
pandas.tests.frame.test_query_eval.TestDataFrameQueryBacktickQuoting.test_two_backtick_variables_query(self,df)
pandas.tests.frame.test_query_eval.TestDataFrameQueryBacktickQuoting.test_unneeded_quoting(self,df)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.setup_class(cls)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.teardown_class(cls)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_at_inside_string(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_chained_cmp_and_in(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_date_index_query(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_date_index_query_with_NaT(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_date_index_query_with_NaT_duplicates(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_date_query_no_attribute_access(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_date_query_with_NaT(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_date_query_with_attribute_access(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_date_query_with_non_date(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_index_resolvers_come_after_columns_with_the_same_name(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_inf(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_local_syntax(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_local_variable_with_in(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_nested_raises_on_local_self_reference(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_nested_scope(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_query(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_query_builtin(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_query_doesnt_pickup_local(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_query_index_with_name(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_query_index_without_name(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_query_scope(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_query_syntax_error(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_query_undefined_local(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPython(TestDataFrameQueryNumExprPandas)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPython.setup_class(cls)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPython.test_date_index_query(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPython.test_date_index_query_with_NaT(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPython.test_date_index_query_with_NaT_duplicates(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPython.test_date_query_no_attribute_access(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPython.test_date_query_with_NaT(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPython.test_nested_scope(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryPythonPandas(TestDataFrameQueryNumExprPandas)
pandas.tests.frame.test_query_eval.TestDataFrameQueryPythonPandas.setup_class(cls)
pandas.tests.frame.test_query_eval.TestDataFrameQueryPythonPandas.test_query_builtin(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryPythonPython(TestDataFrameQueryNumExprPython)
pandas.tests.frame.test_query_eval.TestDataFrameQueryPythonPython.setup_class(cls)
pandas.tests.frame.test_query_eval.TestDataFrameQueryPythonPython.test_query_builtin(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryStrings
pandas.tests.frame.test_query_eval.TestDataFrameQueryStrings.test_object_array_eq_ne(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryStrings.test_query_lex_compare_strings(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryStrings.test_query_single_element_booleans(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryStrings.test_query_string_scalar_variable(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryStrings.test_query_with_nested_special_character(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryStrings.test_query_with_nested_strings(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryStrings.test_query_with_string_columns(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryStrings.test_str_list_query_method(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryStrings.test_str_query_method(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryWithMultiIndex
pandas.tests.frame.test_query_eval.TestDataFrameQueryWithMultiIndex.test_query_multiindex_get_index_resolvers(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryWithMultiIndex.test_query_with_named_multiindex(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryWithMultiIndex.test_query_with_partially_named_multiindex(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryWithMultiIndex.test_query_with_unnamed_multiindex(self,parser,engine)
pandas.tests.frame.test_query_eval.engine(request)
pandas.tests.frame.test_query_eval.parser(request)
pandas.tests.frame.test_query_eval.skip_if_no_pandas_parser(parser)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_reshape.py----------------------------------------
A:pandas.tests.frame.test_reshape.frame->DataFrame(data).set_index('index')
A:pandas.tests.frame.test_reshape.pivoted->DataFrame(data).set_index('index').pivot(index='index', columns='columns')
A:pandas.tests.frame.test_reshape.expected->DataFrame([[9.5, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 8.0]], index=Index(['Alice', 'Bob'], name='name'), columns=MultiIndex.from_tuples([('score', 'female', False, 0), ('score', 'female', True, 0), ('score', 'male', False, 0), ('score', 'male', True, 0)], names=[None, 'gender', 'employed', 'kids']))
A:pandas.tests.frame.test_reshape.data->pandas.Series(['a', 'b', 'c', 'a'], dtype='object')
A:pandas.tests.frame.test_reshape.df->df.unstack(['gender'], fill_value=0).unstack(['gender'], fill_value=0)
A:pandas.tests.frame.test_reshape.result->df.unstack(['gender'], fill_value=0).unstack(['gender'], fill_value=0).unstack(['employed', 'kids'], fill_value=0)
A:pandas.tests.frame.test_reshape.expected.columns->pandas.MultiIndex.from_product([expected.columns, ['I']], names=[None, 'C'])
A:pandas.tests.frame.test_reshape.df[:]->numpy.arange(np.prod(df.shape)).reshape(df.shape)
A:pandas.tests.frame.test_reshape.stacked->df.unstack(['gender'], fill_value=0).unstack(['gender'], fill_value=0).stack()
A:pandas.tests.frame.test_reshape.stacked_df->DataFrame({'foo': stacked, 'bar': stacked})
A:pandas.tests.frame.test_reshape.unstacked->df.unstack(['gender'], fill_value=0).unstack(['gender'], fill_value=0).unstack(['x', 'y'], fill_value=0)
A:pandas.tests.frame.test_reshape.unstacked_df->DataFrame({'foo': stacked, 'bar': stacked}).unstack()
A:pandas.tests.frame.test_reshape.unstacked_cols->df.unstack(['gender'], fill_value=0).unstack(['gender'], fill_value=0).stack().unstack(0)
A:pandas.tests.frame.test_reshape.unstacked_cols_df->DataFrame({'foo': stacked, 'bar': stacked}).unstack(0)
A:pandas.tests.frame.test_reshape.data.index->pandas.MultiIndex.from_tuples([('x', 'a'), ('x', 'b'), ('y', 'b'), ('z', 'a')])
A:pandas.tests.frame.test_reshape.stacked.index->df.unstack(['gender'], fill_value=0).unstack(['gender'], fill_value=0).stack().index.reorder_levels(df.index.names)
A:pandas.tests.frame.test_reshape.df.index->pandas.MultiIndex.from_tuples([('x', 'a'), ('x', 'b'), ('y', 'b'), ('z', 'a')])
A:pandas.tests.frame.test_reshape.df['A']->df['A'].astype(np.int16).astype(np.int16)
A:pandas.tests.frame.test_reshape.df['B']->df['B'].astype(np.float64).astype(np.float64)
A:pandas.tests.frame.test_reshape.expected['A']->expected['A'].astype(np.int16).astype(np.int16)
A:pandas.tests.frame.test_reshape.expected['B']->expected['B'].astype(np.float64).astype(np.float64)
A:pandas.tests.frame.test_reshape.unstacked1->df.unstack(['gender'], fill_value=0).unstack(['gender'], fill_value=0).unstack([column_name])
A:pandas.tests.frame.test_reshape.unstacked2->df.unstack(['gender'], fill_value=0).unstack(['gender'], fill_value=0).unstack(column_name)
A:pandas.tests.frame.test_reshape.df1->df.unstack(['gender'], fill_value=0).unstack(['gender'], fill_value=0).set_index(['state', 'index'])
A:pandas.tests.frame.test_reshape.columns->pandas.MultiIndex.from_tuples([('A', 'cat', 'long'), ('B', 'cat', 'long'), ('A', 'dog', 'short'), ('B', 'dog', 'short')], names=['exp', 'animal', 'hair_length'])
A:pandas.tests.frame.test_reshape.df_named->df.unstack(['gender'], fill_value=0).unstack(['gender'], fill_value=0).copy()
A:pandas.tests.frame.test_reshape.animal_hair_stacked->df.unstack(['gender'], fill_value=0).unstack(['gender'], fill_value=0).stack(level=['animal', 'hair_length'])
A:pandas.tests.frame.test_reshape.exp_hair_stacked->df.unstack(['gender'], fill_value=0).unstack(['gender'], fill_value=0).stack(level=['exp', 'hair_length'])
A:pandas.tests.frame.test_reshape.df2->df.unstack(['gender'], fill_value=0).unstack(['gender'], fill_value=0).set_index(['A', 'B'])
A:pandas.tests.frame.test_reshape.df3->df.unstack(['gender'], fill_value=0).unstack(['gender'], fill_value=0).set_index(['A', 'B']).unstack('B')
A:pandas.tests.frame.test_reshape.exp_animal_stacked->df.unstack(['gender'], fill_value=0).unstack(['gender'], fill_value=0).stack(level=['exp', 'animal'])
A:pandas.tests.frame.test_reshape.rs->df.unstack(['gender'], fill_value=0).unstack(['gender'], fill_value=0).unstack()
A:pandas.tests.frame.test_reshape.xp->DataFrame(np.array([[False, np.nan], [np.nan, False]], dtype=object), index=['a', 'b'], columns=MultiIndex.from_arrays([['col', 'col'], ['c', 'l']]))
A:pandas.tests.frame.test_reshape.mi->pandas.MultiIndex.from_product([[0], ['d', 'c']], names=['bar', 'baz'])
A:pandas.tests.frame.test_reshape.s->pandas.Series(0, index=mi)
A:pandas.tests.frame.test_reshape.expected_mi->pandas.MultiIndex(levels=[['foo', 'bar'], ['one', 'two']], codes=[[0, 0, 1, 1], [0, 1, 0, 1]], names=['first', 'second'])
A:pandas.tests.frame.test_reshape.midx->pandas.MultiIndex.from_product([df.index, cidx])
A:pandas.tests.frame.test_reshape.old_data->pandas.Series(['a', 'b', 'c', 'a'], dtype='object').copy()
A:pandas.tests.frame.test_reshape.right->DataFrame(vals, columns=cols, index=idx)
A:pandas.tests.frame.test_reshape.df['D']->df['D'].astype('int64').astype('int64')
A:pandas.tests.frame.test_reshape.left->df.unstack(['gender'], fill_value=0).unstack(['gender'], fill_value=0).set_index(['1st', '2nd', '3rd']).unstack(['2nd', '3rd'])
A:pandas.tests.frame.test_reshape.right['D', 'a']->right['D', 'a'].astype('int64').astype('int64')
A:pandas.tests.frame.test_reshape.idx->MultiIndex(levels=[[680585148, 680607017], [0.0133]], codes=[[0, 1], [-1, 0]], names=['s_id', 'dosage'])
A:pandas.tests.frame.test_reshape.exp_col->pandas.MultiIndex.from_product([[0, 1], ['A', 'B', 'C']])
A:pandas.tests.frame.test_reshape.block->numpy.arange(4).reshape(2, 2)
A:pandas.tests.frame.test_reshape.cols->MultiIndex(levels=[['change'], ['Ag', 'Hg', 'Pb', 'Sn', 'U']], codes=[[0, 0, 0, 0, 0], [0, 1, 2, 3, 4]], names=[None, 'agent'])
A:pandas.tests.frame.test_reshape.ind->df.unstack(['gender'], fill_value=0).unstack(['gender'], fill_value=0).set_index(['A', 'B', 'C'], drop=False)
A:pandas.tests.frame.test_reshape.expected.index->DataFrame([[9.5, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 8.0]], index=Index(['Alice', 'Bob'], name='name'), columns=MultiIndex.from_tuples([('score', 'female', False, 0), ('score', 'female', True, 0), ('score', 'male', False, 0), ('score', 'male', True, 0)], names=[None, 'gender', 'employed', 'kids'])).index.droplevel('C')
A:pandas.tests.frame.test_reshape.(rows, cols)->df.unstack(['gender'], fill_value=0).unstack(['gender'], fill_value=0).notna().values.nonzero()
A:pandas.tests.frame.test_reshape.udf->pandas.MultiIndex.from_product([[0], ['d', 'c']], names=['bar', 'baz']).unstack(level=lev)
A:pandas.tests.frame.test_reshape.vals->numpy.array([[3, 0, 1, 2, np.nan, 4], [np.nan, 5, 6, 7, 8, 9]])
A:pandas.tests.frame.test_reshape.t->datetime(2014, 1, 1)
A:pandas.tests.frame.test_reshape.eidx->pandas.MultiIndex.from_product([(0, 1, 2, 3), ('B',)])
A:pandas.tests.frame.test_reshape.ecols->pandas.MultiIndex.from_tuples([(t, 'A')])
A:pandas.tests.frame.test_reshape.df.columns->pandas.MultiIndex.from_tuples(df.columns.to_numpy(), names=df.columns.names)
A:pandas.tests.frame.test_reshape.full_multiindex->pandas.MultiIndex.from_tuples([('B', 'x'), ('B', 'z'), ('A', 'y'), ('C', 'x'), ('C', 'u')], names=['Upper', 'Lower'])
A:pandas.tests.frame.test_reshape.cidx->pandas.CategoricalIndex(labels, categories=list('xyz'), ordered=ordered)
A:pandas.tests.frame.test_reshape.cat->pandas.Categorical(['a', 'a', 'b', 'c'])
A:pandas.tests.frame.test_reshape.index->pandas.MultiIndex.from_tuples([('A', 0), ('A', 1), ('B', 1)], names=['a', 'b'])
A:pandas.tests.frame.test_reshape.new_index->pandas.MultiIndex.from_tuples(stacked.index.to_numpy())
A:pandas.tests.frame.test_reshape.stacked_codes->numpy.asarray(stacked.index.codes)
A:pandas.tests.frame.test_reshape.expected_codes->numpy.asarray(new_index.codes)
A:pandas.tests.frame.test_reshape.expected_dtypes->pandas.Series([df.A.dtype] * 2 + [df.B.dtype] * 2, index=result.columns)
A:pandas.tests.frame.test_reshape.ts->pandas.date_range(freq='D', start='20180101', end='20180103', tz='America/New_York')
pandas.tests.frame.test_reshape.TestDataFrameReshape
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_pivot(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_pivot_duplicates(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_pivot_empty(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_pivot_index_none(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_pivot_integer_bug(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_stack_datetime_column_multiIndex(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_stack_dt_column_multiIndex(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_stack_int_level_names(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_stack_ints(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_stack_mixed_level(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_stack_mixed_levels(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_stack_multi_columns_non_unique_index(self,index,columns)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_stack_partial_multiIndex(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_stack_preserve_categorical_dtype(self,ordered,labels)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_stack_preserve_categorical_dtype_values(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_stack_unstack(self,float_frame)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_bool(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_dtypes(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_fill(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_fill_frame(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_fill_frame_categorical(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_fill_frame_datetime(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_fill_frame_dt(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_fill_frame_period(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_fill_frame_timedelta(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_level_binding(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_mixed_extension_types(self,level)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_nan_index(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_non_unique_index_names(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_preserve_dtypes(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_swaplevel_sortlevel(self,level)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_to_series(self,float_frame)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_unused_level(self,cols)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_unused_levels(self)
pandas.tests.frame.test_reshape.test_stack_timezone_aware_values()
pandas.tests.frame.test_reshape.test_unstack_fill_frame_object()
pandas.tests.frame.test_reshape.test_unstack_timezone_aware_values()
pandas.tests.frame.test_reshape.test_unstacking_multi_index_df()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_arithmetic.py----------------------------------------
A:pandas.tests.frame.test_arithmetic.df->pandas.DataFrame(data)
A:pandas.tests.frame.test_arithmetic.expected->pandas.DataFrame({'A': [1.0, 1.0, 1.0]})
A:pandas.tests.frame.test_arithmetic.df['dates']->pandas.date_range('20010101', periods=len(df))
A:pandas.tests.frame.test_arithmetic.df2->pandas.DataFrame(df.values.view('M8[ns]'), columns=df.columns)
A:pandas.tests.frame.test_arithmetic.left_f->getattr(operator, left)
A:pandas.tests.frame.test_arithmetic.right_f->getattr(operator, right)
A:pandas.tests.frame.test_arithmetic.result->pandas.DataFrame(data).sum(axis=1)
A:pandas.tests.frame.test_arithmetic.other->pandas.DataFrame({'A': ser, 'B': ser})
A:pandas.tests.frame.test_arithmetic.data->numpy.random.randn(5, 3)
A:pandas.tests.frame.test_arithmetic.other_data->numpy.random.randn(5, 3)
A:pandas.tests.frame.test_arithmetic.ndim_5->numpy.ones(df.shape + (1, 3))
A:pandas.tests.frame.test_arithmetic.part_o->pandas.DataFrame({'A': ser, 'B': ser}).loc[3:, 1:].copy()
A:pandas.tests.frame.test_arithmetic.rs->pandas.DataFrame(data).ne(df2)
A:pandas.tests.frame.test_arithmetic.xp->op(df, part_o.reindex(index=df.index, columns=df.columns))
A:pandas.tests.frame.test_arithmetic.f->getattr(df, op)
A:pandas.tests.frame.test_arithmetic.o->getattr(operator, op)
A:pandas.tests.frame.test_arithmetic.idx_eq->pandas.DataFrame(data).eq(idx_ser, axis=0)
A:pandas.tests.frame.test_arithmetic.col_eq->pandas.DataFrame(data).eq(col_ser)
A:pandas.tests.frame.test_arithmetic.idx_ne->pandas.DataFrame(data).ne(idx_ser, axis=0)
A:pandas.tests.frame.test_arithmetic.col_ne->pandas.DataFrame(data).ne(col_ser)
A:pandas.tests.frame.test_arithmetic.idx_gt->pandas.DataFrame(data).gt(idx_ser, axis=0)
A:pandas.tests.frame.test_arithmetic.col_gt->pandas.DataFrame(data).gt(col_ser)
A:pandas.tests.frame.test_arithmetic.idx_le->pandas.DataFrame(data).le(idx_ser, axis=0)
A:pandas.tests.frame.test_arithmetic.col_le->pandas.DataFrame(data).le(col_ser)
A:pandas.tests.frame.test_arithmetic.idx_ge->pandas.DataFrame(data).ge(idx_ser, axis=0)
A:pandas.tests.frame.test_arithmetic.col_ge->pandas.DataFrame(data).ge(col_ser)
A:pandas.tests.frame.test_arithmetic.idx_lt->pandas.DataFrame(data).lt(idx_ser, axis=0)
A:pandas.tests.frame.test_arithmetic.col_lt->pandas.DataFrame(data).lt(col_ser)
A:pandas.tests.frame.test_arithmetic.idx_ser->pandas.Series(np.random.randn(5))
A:pandas.tests.frame.test_arithmetic.col_ser->pandas.Series(np.random.randn(3))
A:pandas.tests.frame.test_arithmetic.arr->numpy.arange(6).reshape(3, 2)
A:pandas.tests.frame.test_arithmetic.arr2->numpy.array([2j, np.nan, 7, None])
A:pandas.tests.frame.test_arithmetic.msg->'|'.join(["'>' not supported between instances of '.*' and 'complex'", 'unorderable types: .*complex\\(\\)'])
A:pandas.tests.frame.test_arithmetic.arr3->numpy.array([2j, np.nan, None])
A:pandas.tests.frame.test_arithmetic.df3->pandas.DataFrame({'a': arr3})
A:pandas.tests.frame.test_arithmetic.df1->pandas.DataFrame({'col': ['foo', np.nan, 'bar']})
A:pandas.tests.frame.test_arithmetic.exp->pandas.DataFrame({'col': [False, True, False]})
A:pandas.tests.frame.test_arithmetic.dti->pandas.date_range('2016-01-01', periods=3)
A:pandas.tests.frame.test_arithmetic.tdi->pandas.timedelta_range('1', periods=10)
A:pandas.tests.frame.test_arithmetic.tser->pandas.Series(tdi)
A:pandas.tests.frame.test_arithmetic.ser->pandas.Series([1, 2], index=['A', 'B'])
A:pandas.tests.frame.test_arithmetic.fill->pandas.Timedelta(days=1).to_timedelta64()
A:pandas.tests.frame.test_arithmetic.dtype->numpy.common_type(*[x.values for x in exvals.values()])
A:pandas.tests.frame.test_arithmetic.const_add->float_frame.add(1)
A:pandas.tests.frame.test_arithmetic.row->pandas.DataFrame(data).xs('a')
A:pandas.tests.frame.test_arithmetic.op->getattr(operator, op)
A:pandas.tests.frame.test_arithmetic.ser_len0->pandas.Series([], dtype=object)
A:pandas.tests.frame.test_arithmetic.df_len0->pandas.DataFrame(columns=['A', 'B'])
A:pandas.tests.frame.test_arithmetic.expected[False]->expected[False].astype(exvals[-1].dtype).astype(exvals[-1].dtype)
A:pandas.tests.frame.test_arithmetic.kinds->pandas.DataFrame(data).sum(axis=1).dtypes.apply(lambda x: x.kind)
A:pandas.tests.frame.test_arithmetic.left->pandas.DataFrame({'A': [np.nan, np.nan, np.nan]})
A:pandas.tests.frame.test_arithmetic.added->pandas.DataFrame(df.values + val3, index=df.index, columns=df.columns)
A:pandas.tests.frame.test_arithmetic.val2->list(df['two'])
A:pandas.tests.frame.test_arithmetic.val3->numpy.random.rand(*df.shape)
A:pandas.tests.frame.test_arithmetic.ind->pandas.CategoricalIndex(pd.interval_range(start=0.0, end=2.0))
A:pandas.tests.frame.test_arithmetic.right->pandas.DataFrame({'A': [0, 0, 0]})
pandas.tests.frame.test_arithmetic.TestFrameArithmetic
pandas.tests.frame.test_arithmetic.TestFrameArithmetic.test_arith_alignment_non_pandas_object(self,values)
pandas.tests.frame.test_arithmetic.TestFrameArithmetic.test_arith_getitem_commute(self)
pandas.tests.frame.test_arithmetic.TestFrameArithmetic.test_arith_mixed(self)
pandas.tests.frame.test_arithmetic.TestFrameArithmetic.test_arith_non_pandas_object(self)
pandas.tests.frame.test_arithmetic.TestFrameArithmetic.test_df_add_2d_array_collike_broadcasts(self)
pandas.tests.frame.test_arithmetic.TestFrameArithmetic.test_df_add_2d_array_rowlike_broadcasts(self)
pandas.tests.frame.test_arithmetic.TestFrameArithmetic.test_df_arith_2d_array_collike_broadcasts(self,all_arithmetic_operators)
pandas.tests.frame.test_arithmetic.TestFrameArithmetic.test_df_arith_2d_array_rowlike_broadcasts(self,all_arithmetic_operators)
pandas.tests.frame.test_arithmetic.TestFrameArithmetic.test_df_bool_mul_int(self)
pandas.tests.frame.test_arithmetic.TestFrameArithmetic.test_frame_with_frame_reindex(self)
pandas.tests.frame.test_arithmetic.TestFrameArithmetic.test_operations_with_interval_categories_index(self,all_arithmetic_operators)
pandas.tests.frame.test_arithmetic.TestFrameArithmetic.test_td64_op_nat_casting(self)
pandas.tests.frame.test_arithmetic.TestFrameComparisons
pandas.tests.frame.test_arithmetic.TestFrameComparisons.test_comparison_invalid(self)
pandas.tests.frame.test_arithmetic.TestFrameComparisons.test_df_boolean_comparison_error(self)
pandas.tests.frame.test_arithmetic.TestFrameComparisons.test_df_float_none_comparison(self)
pandas.tests.frame.test_arithmetic.TestFrameComparisons.test_df_string_comparison(self)
pandas.tests.frame.test_arithmetic.TestFrameComparisons.test_frame_in_list(self)
pandas.tests.frame.test_arithmetic.TestFrameComparisons.test_mixed_comparison(self)
pandas.tests.frame.test_arithmetic.TestFrameComparisons.test_timestamp_compare(self)
pandas.tests.frame.test_arithmetic.TestFrameFlexArithmetic
pandas.tests.frame.test_arithmetic.TestFrameFlexArithmetic.test_arith_flex_frame(self,all_arithmetic_operators,float_frame,mixed_float_frame)
pandas.tests.frame.test_arithmetic.TestFrameFlexArithmetic.test_arith_flex_frame_corner(self,float_frame)
pandas.tests.frame.test_arithmetic.TestFrameFlexArithmetic.test_arith_flex_frame_mixed(self,op,int_frame,mixed_int_frame,mixed_float_frame)
pandas.tests.frame.test_arithmetic.TestFrameFlexArithmetic.test_arith_flex_frame_raise(self,all_arithmetic_operators,float_frame)
pandas.tests.frame.test_arithmetic.TestFrameFlexArithmetic.test_arith_flex_series(self,simple_frame)
pandas.tests.frame.test_arithmetic.TestFrameFlexArithmetic.test_arith_flex_zero_len_raises(self)
pandas.tests.frame.test_arithmetic.TestFrameFlexArithmetic.test_df_add_flex_filled_mixed_dtypes(self)
pandas.tests.frame.test_arithmetic.TestFrameFlexArithmetic.test_df_add_td64_columnwise(self)
pandas.tests.frame.test_arithmetic.TestFrameFlexComparisons
pandas.tests.frame.test_arithmetic.TestFrameFlexComparisons.test_bool_flex_frame(self)
pandas.tests.frame.test_arithmetic.TestFrameFlexComparisons.test_bool_flex_frame_complex_dtype(self)
pandas.tests.frame.test_arithmetic.TestFrameFlexComparisons.test_bool_flex_frame_object_dtype(self)
pandas.tests.frame.test_arithmetic.TestFrameFlexComparisons.test_df_flex_cmp_constant_return_types(self,opname)
pandas.tests.frame.test_arithmetic.TestFrameFlexComparisons.test_df_flex_cmp_constant_return_types_empty(self,opname)
pandas.tests.frame.test_arithmetic.TestFrameFlexComparisons.test_flex_comparison_nat(self)
pandas.tests.frame.test_arithmetic.test_frame_single_columns_object_sum_axis_1()
pandas.tests.frame.test_arithmetic.test_frame_with_zero_len_series_corner_cases()
pandas.tests.frame.test_arithmetic.test_pow_nan_with_zero()
pandas.tests.frame.test_arithmetic.test_pow_with_realignment()
pandas.tests.frame.test_arithmetic.test_zero_len_frame_with_series_corner_cases()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_missing.py----------------------------------------
A:pandas.tests.frame.test_missing.N->len(float_frame.index)
A:pandas.tests.frame.test_missing.mat->numpy.random.randn(N)
A:pandas.tests.frame.test_missing.frame->DataFrame({'foo': mat}, index=float_frame.index)
A:pandas.tests.frame.test_missing.original->Series([1, 2, np.nan], name='A')
A:pandas.tests.frame.test_missing.expected->pandas.DataFrame(index=idx, columns=idx, data=data)
A:pandas.tests.frame.test_missing.smaller_frame->DataFrame({'foo': mat}, index=float_frame.index).dropna()
A:pandas.tests.frame.test_missing.exp->DataFrame({'A': [1, 2, np.nan, 4], 'B': [1, 2, 3, 4], 'C': [1.0, 2.0, np.nan, 4.0], 'D': [1.0, 2.0, 3.0, 4.0]}).fillna(0).add(2)
A:pandas.tests.frame.test_missing.samesize_frame->DataFrame({'foo': mat}, index=float_frame.index).dropna(subset=['bar'])
A:pandas.tests.frame.test_missing.df->DataFrame({'A': [1, 2, np.nan, 4], 'B': [1, 2, 3, 4], 'C': [1.0, 2.0, np.nan, 4.0], 'D': [1.0, 2.0, 3.0, 4.0]})
A:pandas.tests.frame.test_missing.dropped->DataFrame({'A': [1, 2, np.nan, 4], 'B': [1, 2, 3, 4], 'C': [1.0, 2.0, np.nan, 4.0], 'D': [1.0, 2.0, 3.0, 4.0]}).dropna(axis=1, how='all')
A:pandas.tests.frame.test_missing.inp->DataFrame({'A': [1, 2, np.nan, 4], 'B': [1, 2, 3, 4], 'C': [1.0, 2.0, np.nan, 4.0], 'D': [1.0, 2.0, 3.0, 4.0]}).copy()
A:pandas.tests.frame.test_missing.df2->DataFrame({'a': [np.nan, 10, 20, 30, 40], 'b': [50, 60, 70, 80, 90], 'foo': ['bar'] * 5}, index=list('VWXuZ'))
A:pandas.tests.frame.test_missing.dt1->datetime.datetime(2015, 1, 1, tzinfo=dateutil.tz.tzutc())
A:pandas.tests.frame.test_missing.dt2->datetime.datetime(2015, 2, 2, tzinfo=dateutil.tz.tzutc())
A:pandas.tests.frame.test_missing.result->pandas.DataFrame(index=idx, columns=idx, data=data).interpolate(axis=0, method='time')
A:pandas.tests.frame.test_missing.ii->pandas.IntervalIndex.from_breaks([0, 2.78, 3.14, 6.28])
A:pandas.tests.frame.test_missing.ci->pandas.CategoricalIndex(ii)
A:pandas.tests.frame.test_missing.zero_filled->datetime_frame.fillna(0)
A:pandas.tests.frame.test_missing.padded->datetime_frame.fillna(method='pad')
A:pandas.tests.frame.test_missing.mf->mixed_float_frame.reindex(columns=['A', 'B', 'D'])
A:pandas.tests.frame.test_missing.expected['Date']->expected['Date'].fillna(df.loc[df.index[0], 'Date2']).fillna(df.loc[df.index[0], 'Date2'])
A:pandas.tests.frame.test_missing.cat->Categorical([np.nan, 2, np.nan])
A:pandas.tests.frame.test_missing.cat2->Categorical([1, 2, 3, 3], categories=[1, 2, 3])
A:pandas.tests.frame.test_missing.df_exp_fill->DataFrame({'cats': cat2, 'vals': vals2})
A:pandas.tests.frame.test_missing.cat3->Categorical([1, 2, 3], categories=[1, 2, 3])
A:pandas.tests.frame.test_missing.df_exp_drop_cats->DataFrame({'cats': cat3, 'vals': vals3})
A:pandas.tests.frame.test_missing.cat4->Categorical([1, 2], categories=[1, 2, 3])
A:pandas.tests.frame.test_missing.df_exp_drop_all->DataFrame({'cats': cat4, 'vals': vals4})
A:pandas.tests.frame.test_missing.res->DataFrame({'A': [1, 2, np.nan, 4], 'B': [1, 2, 3, 4], 'C': [1.0, 2.0, np.nan, 4.0], 'D': [1.0, 2.0, 3.0, 4.0]}).add(2, fill_value=0)
A:pandas.tests.frame.test_missing.c->Categorical([np.nan, 'b', np.nan], categories=['a', 'b'])
A:pandas.tests.frame.test_missing.cat_exp->Categorical(['a', 'b', 'a'], categories=['a', 'b'])
A:pandas.tests.frame.test_missing.df_exp->DataFrame({'cats': [2, 2, 2], 'vals': v_exp}, dtype='category')
A:pandas.tests.frame.test_missing.val->Categorical([np.nan, np.nan, np.nan])
A:pandas.tests.frame.test_missing.idx->pandas.date_range(start='2014-01-01', periods=periods)
A:pandas.tests.frame.test_missing.index->numpy.arange(10)
A:pandas.tests.frame.test_missing.expected['a']->expected['a'].fillna(0).fillna(0)
A:pandas.tests.frame.test_missing.expected['b']->expected['b'].fillna(5).fillna(5)
A:pandas.tests.frame.test_missing.data->numpy.random.rand(periods, periods)
A:pandas.tests.frame.test_missing.filled->float_string_frame.fillna(value=0)
A:pandas.tests.frame.test_missing.empty_float->float_frame.reindex(columns=[])
A:pandas.tests.frame.test_missing.dat->numpy.array([0, 1, np.nan, 3, 4, 5], dtype='float')
A:pandas.tests.frame.test_missing.expectedk->DataFrame({'A': [1, 2, np.nan, 4], 'B': [1, 2, 3, 4], 'C': [1.0, 2.0, np.nan, 4.0], 'D': [1.0, 2.0, 3.0, 4.0]}).copy()
A:pandas.tests.frame.test_missing.expected[4]->expected[4].astype(np.float64).astype(np.float64)
pandas.tests.frame.test_missing.TestDataFrameInterpolate
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_alt_scipy(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_axis_names(self,axis_name,axis_number)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_bad_method(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_basic(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_combo(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_ignore_all_good(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_inplace(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_inplace_row(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_leading_nans(self,check_scipy)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_nan_idx(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_raise_on_all_object_dtype(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_raise_on_only_mixed(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_rowwise(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_time_inplace_axis(self,axis)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_various(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_rowwise_alt(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_bfill(self,datetime_frame)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropEmptyRows(self,float_frame)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropIncompleteRows(self,float_frame)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_drop_and_dropna_caching(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropna(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropna_categorical_interval_index(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropna_corner(self,float_frame)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropna_multiple_axes(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropna_tz_aware_datetime(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropna_tz_aware_dt(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_ffill(self,datetime_frame)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fill_corner(self,float_frame,float_string_frame)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fill_value_when_combine_const(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_categorical_nan(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_col_reordering(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_columns(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_dataframe(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_datelike(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_datetime(self,datetime_frame)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_datetime_columns(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_dict_series(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_different_dtype(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_downcast(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_dt(self,datetime_frame)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_dt_columns(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_dtype_conversion(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_empty(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_inplace(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_integer_limit(self,type)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_invalid_method(self,float_frame)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_invalid_value(self,float_frame)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_limit_and_value(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_mixed_float(self,mixed_float_frame)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_mixed_type(self,float_string_frame)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_positive_limit(self,type)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_skip_certain_blocks(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_tzaware(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_tzaware_different_column(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_frame_fillna_limit(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_frame_pad_backfill_limit(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_na_actions_categorical(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_timeseries.py----------------------------------------
A:pandas.tests.frame.test_timeseries.rng->date_range('1/1/2000', periods=100, freq='10min')
A:pandas.tests.frame.test_timeseries.dates->numpy.asarray(rng)
A:pandas.tests.frame.test_timeseries.df->getattr(df, fn)('US/Pacific', level=1)
A:pandas.tests.frame.test_timeseries.ns_dtype->numpy.dtype('M8[ns]')
A:pandas.tests.frame.test_timeseries.dtype->numpy.dtype('M8[{unit}]'.format(unit=unit))
A:pandas.tests.frame.test_timeseries.vals->numpy.arange(n, dtype=np.int64).view(dtype)
A:pandas.tests.frame.test_timeseries.df['dates']->numpy.arange(n, dtype=np.int64).view(ns_dtype)
A:pandas.tests.frame.test_timeseries.tmp->getattr(df, fn)('US/Pacific', level=1).copy()
A:pandas.tests.frame.test_timeseries.offset_monthly->datetime_frame.asfreq(offsets.BMonthEnd())
A:pandas.tests.frame.test_timeseries.rule_monthly->datetime_frame.asfreq('BM')
A:pandas.tests.frame.test_timeseries.filled->datetime_frame.asfreq('BM').asfreq('B', method='pad')
A:pandas.tests.frame.test_timeseries.filled_dep->datetime_frame.asfreq('BM').asfreq('B', method='pad')
A:pandas.tests.frame.test_timeseries.zero_length->datetime_frame.reindex([])
A:pandas.tests.frame.test_timeseries.result->pandas.Series(data_ns).to_frame()
A:pandas.tests.frame.test_timeseries.ts->DataFrame(rand_data, index=rng, columns=rng)
A:pandas.tests.frame.test_timeseries.actual_df->getattr(df, fn)('US/Pacific', level=1).asfreq(freq='1S', fill_value=9.0)
A:pandas.tests.frame.test_timeseries.expected_df->getattr(df, fn)('US/Pacific', level=1).asfreq(freq='1S').fillna(9.0)
A:pandas.tests.frame.test_timeseries.expected_series->DataFrame(rand_data, index=rng, columns=rng).asfreq(freq='1S').fillna(9.0)
A:pandas.tests.frame.test_timeseries.actual_series->DataFrame(rand_data, index=rng, columns=rng).asfreq(freq='1S', fill_value=9.0)
A:pandas.tests.frame.test_timeseries.N->len(float_frame.index)
A:pandas.tests.frame.test_timeseries.mat->numpy.random.randn(N)
A:pandas.tests.frame.test_timeseries.frame->DataFrame({'foo': mat}, index=float_frame.index)
A:pandas.tests.frame.test_timeseries.index->DataFrame({'foo': mat}, index=float_frame.index).last_valid_index()
A:pandas.tests.frame.test_timeseries.empty->DataFrame()
A:pandas.tests.frame.test_timeseries.frame.index->date_range('20110101', periods=N, freq='B')
A:pandas.tests.frame.test_timeseries.obj->klass([np.nan])
A:pandas.tests.frame.test_timeseries.rs->DataFrame(rand_data, index=rng, columns=rng).at_time('16:00')
A:pandas.tests.frame.test_timeseries.expected->pandas.DataFrame({0: [1, None], 'new': [1000000000.0, None]}, dtype='datetime64[ns]')
A:pandas.tests.frame.test_timeseries.dti->pandas.date_range('2018', periods=3, freq='H', tz='US/Pacific')
A:pandas.tests.frame.test_timeseries.stime->time(22, 0)
A:pandas.tests.frame.test_timeseries.etime->time(9, 0)
A:pandas.tests.frame.test_timeseries.filtered->DataFrame(rand_data, index=rng, columns=rng).between_time(stime, etime, inc_start, inc_end)
A:pandas.tests.frame.test_timeseries.t->DataFrame(rand_data, index=rng, columns=rng).at_time('16:00').time()
A:pandas.tests.frame.test_timeseries.mask->numpy.arange(0, len(rng))
A:pandas.tests.frame.test_timeseries.rand_data->numpy.random.randn(len(rng), len(rng))
A:pandas.tests.frame.test_timeseries.res->getattr(df, fn)('US/Pacific', level=1).max()
A:pandas.tests.frame.test_timeseries.exp->getattr(df, fn)('US/Pacific', level=1).copy()
A:pandas.tests.frame.test_timeseries.data_ns->numpy.array([1, 'nat'], dtype='datetime64[ns]')
A:pandas.tests.frame.test_timeseries.data_s->numpy.array([1, 'nat'], dtype='datetime64[s]')
A:pandas.tests.frame.test_timeseries.dr->date_range('1/1/2000', '1/1/2001')
A:pandas.tests.frame.test_timeseries.pr->period_range('1/1/2000', '1/1/2001')
A:pandas.tests.frame.test_timeseries.pts->getattr(df, fn)('US/Pacific', level=1).to_period('M', axis=1)
A:pandas.tests.frame.test_timeseries.l0->l0.tz_localize('UTC').tz_localize('UTC')
A:pandas.tests.frame.test_timeseries.l1->l1.tz_localize('UTC').tz_localize('UTC')
A:pandas.tests.frame.test_timeseries.int_idx->Index(range(5))
A:pandas.tests.frame.test_timeseries.l0_expected->getattr(idx, fn)('US/Pacific')
A:pandas.tests.frame.test_timeseries.l1_expected->getattr(idx, fn)('US/Pacific')
A:pandas.tests.frame.test_timeseries.df1->getattr(df1, fn)('US/Pacific')
A:pandas.tests.frame.test_timeseries.df2->DataFrame(np.ones(5), MultiIndex.from_arrays([l0, l1]))
A:pandas.tests.frame.test_timeseries.df3->getattr(df2, fn)('US/Pacific', level=1)
A:pandas.tests.frame.test_timeseries.df4->DataFrame(np.ones(5), MultiIndex.from_arrays([int_idx, l0]))
A:pandas.tests.frame.test_timeseries.df5->getattr(df4, fn)('US/Pacific', level=1)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_asfreq(self,datetime_frame)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_asfreq_datetimeindex(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_asfreq_dtindex(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_asfreq_fillvalue(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_at_time(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_at_time_axis(self,axis)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_at_time_errors(self,hour)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_at_time_raises(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_at_time_tz(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_between_time(self,close_open_fixture)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_between_time_axis(self,axis)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_between_time_axis_raises(self,axis)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_between_time_raises(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_datetime_assignment_with_NaT_and_diff_time_units(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_dt_assignment_with_NaT_and_diff_time_units(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_first_last_valid(self,float_frame,data,idx,expected_first,expected_last)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_first_raises(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_first_subset(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_first_valid_index_all_nan(self,klass)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_frame_append_datetime64_col_other_units(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_frame_append_datetime64_column(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_frame_append_dt64_col_other_units(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_frame_append_dt64_column(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_frame_ctor_datetime64_column(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_frame_ctor_dt64_column(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_frame_datetime64_pre1900_repr(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_frame_dt64_pre1900_repr(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_frame_to_period(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_last_raises(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_last_subset(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_operation_on_NaT(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_tz_convert_and_localize(self,fn)
pandas.tests.frame.test_timeseries.close_open_fixture(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_alter_axes.py----------------------------------------
A:pandas.tests.frame.test_alter_axes.idx->pandas.IntervalIndex.from_breaks(np.arange(11), name='x')
A:pandas.tests.frame.test_alter_axes.df->DataFrame({'A': [1.1, 2.2, 3.3], 'B': [5.0, 6.1, 7.2], 'C': [4.4, 5.5, 6.6]}, index=[2010, 2011, 2012])
A:pandas.tests.frame.test_alter_axes.df2->DataFrame({'A': [1.1, 2.2, 3.3], 'B': [5.0, 6.1, 7.2], 'C': [4.4, 5.5, 6.6]}, index=[2010, 2011, 2012]).set_index(df.index.astype(np.int32))
A:pandas.tests.frame.test_alter_axes.result->DataFrame({'A': [1.1, 2.2, 3.3], 'B': [5.0, 6.1, 7.2], 'C': [4.4, 5.5, 6.6]}, index=[2010, 2011, 2012]).set_axis(list('abc'))
A:pandas.tests.frame.test_alter_axes.expected->DataFrame({'A': [1.1, 2.2, 3.3], 'B': [5.0, 6.1, 7.2], 'C': [4.4, 5.5, 6.6]}, index=[2010, 2011, 2012]).copy()
A:pandas.tests.frame.test_alter_axes.key->box(df['B'])
A:pandas.tests.frame.test_alter_axes.name_mi->getattr(key, 'names', None)
A:pandas.tests.frame.test_alter_axes.keys->pandas.MultiIndex.from_arrays([df['A'], df['B']], names=['A', 'B'])
A:pandas.tests.frame.test_alter_axes.values->lev.take(level_codes)
A:pandas.tests.frame.test_alter_axes.thing1->Thing('One', 'red')
A:pandas.tests.frame.test_alter_axes.thing2->Thing('Two', 'blue')
A:pandas.tests.frame.test_alter_axes.thing3->Thing(['Three', 'pink'])
A:pandas.tests.frame.test_alter_axes.tmp->sorted(self)
A:pandas.tests.frame.test_alter_axes.ci->pandas._testing.makeCategoricalIndex(10)
A:pandas.tests.frame.test_alter_axes.idf->DataFrame({'A': [1.1, 2.2, 3.3], 'B': [5.0, 6.1, 7.2], 'C': [4.4, 5.5, 6.6]}, index=[2010, 2011, 2012]).set_index('A')
A:pandas.tests.frame.test_alter_axes.df['B']->pandas.IntervalIndex.from_breaks(np.arange(11), name='x').to_pydatetime()
A:pandas.tests.frame.test_alter_axes.comp->Series(DatetimeIndex(expected.values).tz_localize(None), name='B')
A:pandas.tests.frame.test_alter_axes.expected['idx']->expected['idx'].apply(lambda d: Timestamp(d, tz=tz)).apply(lambda d: Timestamp(d, tz=tz))
A:pandas.tests.frame.test_alter_axes.di->date_range('2006-10-29 00:00:00', periods=3, freq='H', tz='US/Pacific')
A:pandas.tests.frame.test_alter_axes.res->DataFrame({'A': [1.1, 2.2, 3.3], 'B': [5.0, 6.1, 7.2], 'C': [4.4, 5.5, 6.6]}, index=[2010, 2011, 2012]).set_index(['index', 'a'])
A:pandas.tests.frame.test_alter_axes.exp->Series(float_frame.index.values, name='level_0')
A:pandas.tests.frame.test_alter_axes.exp_index->pandas.MultiIndex.from_arrays([di, [0, 1, 2]], names=['index', 'a'])
A:pandas.tests.frame.test_alter_axes.result2->DataFrame({'A': [1.1, 2.2, 3.3], 'B': [5.0, 6.1, 7.2], 'C': [4.4, 5.5, 6.6]}, index=[2010, 2011, 2012]).set_axis(list('abc')).reset_index()
A:pandas.tests.frame.test_alter_axes.columns->pandas.MultiIndex.from_tuples(tuples_columns, names=['fizz', 'buzz'])
A:pandas.tests.frame.test_alter_axes.expected.index->pandas.MultiIndex.from_arrays([df['a'], df['x']], names=['a', 'x'])
A:pandas.tests.frame.test_alter_axes.cols->Index(np.arange(len(float_string_frame.columns)))
A:pandas.tests.frame.test_alter_axes.idx1->date_range('2011/01/01', periods=6, freq='M', tz='US/Eastern')
A:pandas.tests.frame.test_alter_axes.idx2->DataFrame({'A': [1.1, 2.2, 3.3], 'B': [5.0, 6.1, 7.2], 'C': [4.4, 5.5, 6.6]}, index=[2010, 2011, 2012]).index.rename(['C', 'D'])
A:pandas.tests.frame.test_alter_axes.index->MultiIndex(levels=[['bar'], ['one', 'two', 'three'], [0, 1]], codes=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2], [0, 1, 0, 1, 0, 1]], names=['L0', 'L1', 'L2'])
A:pandas.tests.frame.test_alter_axes.new_index->pandas.MultiIndex.from_tuples([('foo3', 'bar1'), ('foo2', 'bar2')], names=['foo', 'bar'])
A:pandas.tests.frame.test_alter_axes.renamed->float_string_frame.rename(columns=str.upper)
A:pandas.tests.frame.test_alter_axes.renamed2->float_frame.copy().rename(columns=str.lower)
A:pandas.tests.frame.test_alter_axes.renamer->DataFrame(data, index=index)
A:pandas.tests.frame.test_alter_axes.colAData->range(1, 11)
A:pandas.tests.frame.test_alter_axes.colBdata->numpy.random.randn(10)
A:pandas.tests.frame.test_alter_axes.no_return->DataFrame({'A': [1.1, 2.2, 3.3], 'B': [5.0, 6.1, 7.2], 'C': [4.4, 5.5, 6.6]}, index=[2010, 2011, 2012]).set_axis(list('abc')).rename_axis('bar', axis=1, inplace=True)
A:pandas.tests.frame.test_alter_axes.mi->pandas.MultiIndex.from_arrays(df[['A', 'B']].T.values, names=['A', 'B'])
A:pandas.tests.frame.test_alter_axes.sdf->DataFrame({'A': [1.1, 2.2, 3.3], 'B': [5.0, 6.1, 7.2], 'C': [4.4, 5.5, 6.6]}, index=[2010, 2011, 2012]).reset_index().set_index('nn').drop(columns=['ll', 'y'])
A:pandas.tests.frame.test_alter_axes.data->numpy.arange(6).reshape(3, 2)
A:pandas.tests.frame.test_alter_axes.new_columns->pandas.MultiIndex.from_tuples([('fizz1', 'BUZZ1'), ('fizz2', 'BUZZ2')], names=['fizz', 'buzz'])
A:pandas.tests.frame.test_alter_axes.c_id->id(float_frame['C'])
A:pandas.tests.frame.test_alter_axes.float_frame->float_frame.copy().copy()
A:pandas.tests.frame.test_alter_axes.e_idx->MultiIndex(levels=[['bar'], ['bar'], ['bar']], codes=[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], names=['L0', 'L0', 'L0'])
A:pandas.tests.frame.test_alter_axes.stacked->DataFrame({'foo': stacked, 'bar': stacked})
A:pandas.tests.frame.test_alter_axes.deleveled->float_frame.copy().copy().reset_index()
A:pandas.tests.frame.test_alter_axes.deleveled2->DataFrame({'foo': stacked, 'bar': stacked}).reset_index()
A:pandas.tests.frame.test_alter_axes.rdf->DataFrame({'A': [1.1, 2.2, 3.3], 'B': [5.0, 6.1, 7.2], 'C': [4.4, 5.5, 6.6]}, index=[2010, 2011, 2012]).reset_index()
A:pandas.tests.frame.test_alter_axes.resetted->DataFrame({'A': [1.1, 2.2, 3.3], 'B': [5.0, 6.1, 7.2], 'C': [4.4, 5.5, 6.6]}, index=[2010, 2011, 2012]).reset_index()
A:pandas.tests.frame.test_alter_axes.rs->DataFrame({'A': [1.1, 2.2, 3.3], 'B': [5.0, 6.1, 7.2], 'C': [4.4, 5.5, 6.6]}, index=[2010, 2011, 2012]).set_index(['A', 'B']).reset_index()
A:pandas.tests.frame.test_alter_axes.xp->DataFrame(full, Index(range(3), name='d'), columns=[['blah', 'b', 'b', 'c'], ['a', 'mean', 'median', 'mean']])
A:pandas.tests.frame.test_alter_axes.time->numpy.arange(0.0, 10, np.sqrt(2) / 2)
A:pandas.tests.frame.test_alter_axes.s1->Series(9.81 * time ** 2 / 2, index=Index(time, name='time'), name='speed')
A:pandas.tests.frame.test_alter_axes.vals->numpy.random.randn(3, 3).astype(object)
A:pandas.tests.frame.test_alter_axes.full->numpy.hstack(([[x] for x in idx], vals))
A:pandas.tests.frame.test_alter_axes.mi2->pandas.MultiIndex.from_arrays(df[['A', 'B', 'A', 'B']].T.values, names=['A', 'B', 'C', 'D'])
A:pandas.tests.frame.test_alter_axes.res1->DataFrame({'A': [1.1, 2.2, 3.3], 'B': [5.0, 6.1, 7.2], 'C': [4.4, 5.5, 6.6]}, index=[2010, 2011, 2012]).reindex(index=['b', 'a'], columns=['e', 'd'])
A:pandas.tests.frame.test_alter_axes.res2->DataFrame({'A': [1.1, 2.2, 3.3], 'B': [5.0, 6.1, 7.2], 'C': [4.4, 5.5, 6.6]}, index=[2010, 2011, 2012]).reindex(columns=['e', 'd'], index=['b', 'a'])
A:pandas.tests.frame.test_alter_axes.res3->DataFrame({'A': [1.1, 2.2, 3.3], 'B': [5.0, 6.1, 7.2], 'C': [4.4, 5.5, 6.6]}, index=[2010, 2011, 2012]).reindex(labels=['b', 'a'], axis=0).reindex(labels=['e', 'd'], axis=1)
A:pandas.tests.frame.test_alter_axes.res4->DataFrame({'A': [1.1, 2.2, 3.3], 'B': [5.0, 6.1, 7.2], 'C': [4.4, 5.5, 6.6]}, index=[2010, 2011, 2012]).reindex(labels=['b', 'a'], axis=0)
A:pandas.tests.frame.test_alter_axes.res5->DataFrame({'A': [1.1, 2.2, 3.3], 'B': [5.0, 6.1, 7.2], 'C': [4.4, 5.5, 6.6]}, index=[2010, 2011, 2012]).reindex(['b', 'a'], axis=0)
A:pandas.tests.frame.test_alter_axes.sig->inspect.signature(DataFrame.reindex)
A:pandas.tests.frame.test_alter_axes.parameters->set(sig.parameters)
A:pandas.tests.frame.test_alter_axes.df.columns->pandas.MultiIndex.from_tuples([('c', 'e'), ('d', 'f')], names=['level_1', 'level_2'])
A:pandas.tests.frame.test_alter_axes.expected.columns->Index(['c', 'd'], name='level_1')
A:pandas.tests.frame.test_alter_axes.s->cut(df.A, 5)
A:pandas.tests.frame.test_alter_axes.df['C']->numpy.array(s)
A:pandas.tests.frame.test_alter_axes.df['E']->numpy.array(s.values)
A:pandas.tests.frame.test_alter_axes.expected[0].index->list('abc')
A:pandas.tests.frame.test_alter_axes.expected[1].columns->list('abc')
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_assign_columns(self,float_frame)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_construction_with_categorical_index(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_convert_dti_to_series(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_droplevel(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_dti_set_index_reindex(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_reindex_api_equivalence(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_reindex_signature(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename(self,float_frame)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_axis_inplace(self,float_frame)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_axis_mapper(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_axis_none(self,kwargs,rename_index,rename_columns)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_axis_raises(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_axis_style(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_axis_style_raises(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_bug(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_bug2(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_chainmap(self,args,kwargs)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_errors(self,mapper,errors,expected_columns)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_errors_raises(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_inplace(self,float_frame)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_mapper_and_positional_arguments_raises(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_mapper_multi(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_multiindex(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_no_mappings_raises(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_nocopy(self,float_frame)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_objects(self,float_string_frame)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_positional_named(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_positional_raises(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_signature(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_reorder_levels(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_reset_index(self,float_frame)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_reset_index_level(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_reset_index_multiindex_col(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_reset_index_multiindex_nan(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_reset_index_name(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_reset_index_range(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_reset_index_right_dtype(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_reset_index_tz(self,tz_aware_fixture)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_reset_index_with_datetimeindex_cols(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_reset_index_with_dtindex_cols(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_reset_index_with_intervals(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_columns(self,float_string_frame)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index(self,float_string_frame)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_after_mutation(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_append(self,frame_of_index_cols,drop,keys)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_append_to_multiindex(self,frame_of_index_cols,drop,keys)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_cast(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_cast_datetimeindex(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_cast_dtindex(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_custom_label_hashable_iterable(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_custom_label_type(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_custom_label_type_raises(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_directly(self,float_string_frame)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_drop_inplace(self,frame_of_index_cols,drop,inplace,keys)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_dst(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_empty_column(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_multiindexcolumns(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_names(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_pass_arrays(self,frame_of_index_cols,drop,append,index_name,box)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_pass_arrays_duplicate(self,frame_of_index_cols,drop,append,index_name,box1,box2)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_pass_multiindex(self,frame_of_index_cols,drop,append)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_pass_single_array(self,frame_of_index_cols,drop,append,index_name,box)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_preserve_categorical_dtype(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_raise_keys(self,frame_of_index_cols,drop,append)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_raise_on_len(self,frame_of_index_cols,box,length,drop,append)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_raise_on_type(self,frame_of_index_cols,box,drop,append)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_timezone(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_verify_integrity(self,frame_of_index_cols)
pandas.tests.frame.test_alter_axes.TestIntervalIndex
pandas.tests.frame.test_alter_axes.TestIntervalIndex.test_set_axis_inplace(self)
pandas.tests.frame.test_alter_axes.TestIntervalIndex.test_set_reset_index(self)
pandas.tests.frame.test_alter_axes.TestIntervalIndex.test_setitem(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_subclass.py----------------------------------------
A:pandas.tests.frame.test_subclass.cdf->CustomDataFrame(data)
A:pandas.tests.frame.test_subclass.mcol->pandas.MultiIndex.from_tuples([('A', ''), ('B', '')])
A:pandas.tests.frame.test_subclass.cdf_multi->CustomDataFrame([[0, 1], [2, 3]], columns=mcol)
A:pandas.tests.frame.test_subclass.cdf_multi2->CustomDataFrame([[0, 1], [2, 3]], columns=mcol)
A:pandas.tests.frame.test_subclass.df->pandas._testing.SubclassedDataFrame([['John', 'Doe', 'height', 5.5], ['Mary', 'Bo', 'height', 6.0], ['John', 'Doe', 'weight', 130], ['Mary', 'Bo', 'weight', 150]], columns=['first', 'last', 'variable', 'value'])
A:pandas.tests.frame.test_subclass.unpickled->pandas._testing.round_trip_pickle(df)
A:pandas.tests.frame.test_subclass.exp->pandas._testing.SubclassedDataFrame([[10, 30, 11, 31, 12.0, 32.0, 13.0, 33.0], [20, 40, 21, 41, 22.0, 42.0, 23.0, 43.0]], index=Index(['c', 'd'], name='ccc'), columns=MultiIndex.from_tuples(list(zip(list('WWWWXXXX'), list('yyzzyyzz'), list('ABABABAB'))), names=['www', 'yyy', 'aaa']))
A:pandas.tests.frame.test_subclass.df1->pandas._testing.SubclassedDataFrame({'a': [1, 3, 5], 'b': [1, 3, 5]}, index=list('ACE'))
A:pandas.tests.frame.test_subclass.df2->pandas._testing.SubclassedDataFrame({'c': [1, 2, 4], 'd': [1, 2, 4]}, index=list('ABD'))
A:pandas.tests.frame.test_subclass.(res1, res2)->pandas._testing.SubclassedSeries([1, 2, 4], index=list('ABD'), name='x').align(df)
A:pandas.tests.frame.test_subclass.exp1->pandas.DataFrame({'a': [1, np.nan, 3, np.nan, 5], 'b': [1, np.nan, 3, np.nan, 5]}, index=list('ABCDE'))
A:pandas.tests.frame.test_subclass.exp2->pandas.Series([1, 2, np.nan, 4, np.nan], index=list('ABCDE'), name='x')
A:pandas.tests.frame.test_subclass.s->pandas._testing.SubclassedSeries([1, 2, 4], index=list('ABD'), name='x')
A:pandas.tests.frame.test_subclass.res->pandas._testing.SubclassedDataFrame([['John', 'Doe', 'height', 5.5], ['Mary', 'Bo', 'height', 6.0], ['John', 'Doe', 'weight', 130], ['Mary', 'Bo', 'weight', 150]], columns=['first', 'last', 'variable', 'value']).unstack('aaa')
A:pandas.tests.frame.test_subclass.pivoted->pandas._testing.SubclassedDataFrame([['John', 'Doe', 'height', 5.5], ['Mary', 'Bo', 'height', 6.0], ['John', 'Doe', 'weight', 130], ['Mary', 'Bo', 'weight', 150]], columns=['first', 'last', 'variable', 'value']).pivot(index='index', columns='columns', values='values')
A:pandas.tests.frame.test_subclass.expected->pandas._testing.SubclassedSeries([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]])
A:pandas.tests.frame.test_subclass.cheese->pandas._testing.SubclassedDataFrame({'first': ['John', 'Mary'], 'last': ['Doe', 'Bo'], 'height': [5.5, 6.0], 'weight': [130, 150]})
A:pandas.tests.frame.test_subclass.melted->pandas.melt(cheese, id_vars=['first', 'last'])
A:pandas.tests.frame.test_subclass.x->numpy.random.randn(3)
A:pandas.tests.frame.test_subclass.long_frame->pandas.wide_to_long(df, ['A', 'B'], i='id', j='year')
A:pandas.tests.frame.test_subclass.result->pandas._testing.SubclassedDataFrame([['John', 'Doe', 'height', 5.5], ['Mary', 'Bo', 'height', 6.0], ['John', 'Doe', 'weight', 130], ['Mary', 'Bo', 'weight', 150]], columns=['first', 'last', 'variable', 'value']).apply(lambda x: [1, 2, 3], axis=1)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_dataframe_metadata(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_frame_subclassing_and_slicing(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_indexing_sliced(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_align(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_align_combinations(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_attr_err_propagation(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_iterrows(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_pivot(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_stack(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_stack_multi(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_stack_multi_mixed(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_unstack(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_unstack_multi(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_unstack_multi_mixed(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclassed_apply(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclassed_melt(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclassed_wide_to_long(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_block_internals.py----------------------------------------
A:pandas.tests.frame.test_block_internals.dti->date_range('20130101', periods=3, tz='US/Eastern')
A:pandas.tests.frame.test_block_internals.df->pandas.DataFrame({'a': [1, 2, 3, 4], 'b': ['a', 'b', 'c', 'd']})
A:pandas.tests.frame.test_block_internals.casted->DataFrame(float_frame._data, dtype=np.int32)
A:pandas.tests.frame.test_block_internals.expected->pandas.DataFrame({'A': [1, 2, 3]})
A:pandas.tests.frame.test_block_internals.consolidated->float_frame._consolidate()
A:pandas.tests.frame.test_block_internals.recons->float_frame._consolidate()._consolidate()
A:pandas.tests.frame.test_block_internals.frame->float_frame.copy()
A:pandas.tests.frame.test_block_internals.float_frame[chr(letter)]->chr(letter)
A:pandas.tests.frame.test_block_internals.float_string_frame['datetime']->datetime.datetime.now()
A:pandas.tests.frame.test_block_internals.float_string_frame['timedelta']->timedelta(days=1, seconds=1)
A:pandas.tests.frame.test_block_internals.arr->numpy.array([1, 2, 3], dtype='timedelta64[s]')
A:pandas.tests.frame.test_block_internals.df['dt1']->numpy.datetime64('2013-01-01')
A:pandas.tests.frame.test_block_internals.df['dt2']->numpy.array(['2013-01-01', '2013-01-02', '2013-01-03'], dtype='datetime64[D]')
A:pandas.tests.frame.test_block_internals.data->list(itertools.repeat((datetime(2001, 1, 1), 'aa', 20), 9))
A:pandas.tests.frame.test_block_internals.df0->pandas.DataFrame({'A': ['x', 'y'], 'B': [1, 2], 'C': ['w', 'z']})
A:pandas.tests.frame.test_block_internals.blocks->pandas.DataFrame({'a': [1, 2, 3, 4], 'b': ['a', 'b', 'c', 'd']})._to_dict_of_blocks(copy=False)
A:pandas.tests.frame.test_block_internals.cop->float_frame.copy()
A:pandas.tests.frame.test_block_internals.copy->float_string_frame.copy()
A:pandas.tests.frame.test_block_internals.empty_frame->DataFrame()
A:pandas.tests.frame.test_block_internals.unpickled->pandas._testing.round_trip_pickle(timezone_frame)
A:pandas.tests.frame.test_block_internals.ser_starting->ser_starting.tz_convert('UTC').tz_convert('UTC')
A:pandas.tests.frame.test_block_internals.ser_ending->ser_ending.tz_convert('UTC').tz_convert('UTC')
A:pandas.tests.frame.test_block_internals.result->pandas.DataFrame({'A': arr})
A:pandas.tests.frame.test_block_internals.converted->float_string_frame.copy()
A:pandas.tests.frame.test_block_internals.length->len(float_string_frame)
A:pandas.tests.frame.test_block_internals.converted['H']->converted['H'].astype('float64').astype('float64')
A:pandas.tests.frame.test_block_internals.converted['I']->converted['I'].astype('int64').astype('int64')
A:pandas.tests.frame.test_block_internals.mixed1->DataFrame({'a': [1, 2, 3], 'b': [4.0, 5, 6], 'c': ['x', 'y', 'z']})
A:pandas.tests.frame.test_block_internals.mixed2->DataFrame({'a': [1, 2, 3], 'b': [4.0, 5, 6], 'c': ['x', 'y', 'z']})._convert(datetime=True)
A:pandas.tests.frame.test_block_internals.Y->DataFrame(np.random.random((4, 4)), index=('a', 'b', 'c', 'd'), columns=('e', 'f', 'g', 'h'))
A:pandas.tests.frame.test_block_internals.Y['e']->Y['e'].astype('object').astype('object')
A:pandas.tests.frame.test_block_internals.exp->Y['g'].sum()
A:pandas.tests.frame.test_block_internals.first->len(df.loc[pd.isna(df[myid]), [myid]])
A:pandas.tests.frame.test_block_internals.second->len(df.loc[pd.isna(df[myid]), [myid]])
A:pandas.tests.frame.test_block_internals.df['c']->pandas.arrays.PandasArray(np.array([1, 2, None, 3], dtype=object))
A:pandas.tests.frame.test_block_internals.df2->pandas.DataFrame({'a': [1, 2, 3, 4], 'b': ['a', 'b', 'c', 'd'], 'c': pd.arrays.PandasArray(np.array([1, 2, None, 3], dtype=object))})
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_add_column_with_pandas_array(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_boolean_set_uncons(self,float_frame)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_cast_internals(self,float_frame)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_consolidate(self,float_frame)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_consolidate_datetime64(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_consolidate_dt64(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_consolidate_inplace(self,float_frame)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_construction_with_conversions(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_construction_with_mixed(self,float_string_frame)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_constructor_compound_dtypes(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_constructor_no_pandas_array(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_constructor_with_convert(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_convert_objects(self,float_string_frame)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_convert_objects_no_conversion(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_copy(self,float_frame,float_string_frame)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_copy_blocks(self,float_frame)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_equals_different_blocks(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_get_X_columns(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_get_numeric_data(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_get_numeric_data_extension_dtype(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_infer_objects(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_is_mixed_type(self,float_frame,float_string_frame)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_modify_values(self,float_frame)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_no_copy_blocks(self,float_frame)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_pickle(self,float_string_frame,timezone_frame)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_setitem_invalidates_datetime_index_freq(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_setitem_invalidates_dt_index_freq(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_stale_cached_series_bug_473(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_strange_column_corruption_issue(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_values_consolidate(self,float_frame)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_values_lcd(self,mixed_float_frame,mixed_int_frame)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_values_numeric_cols(self,float_frame)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_nonunique_indexes.py----------------------------------------
A:pandas.tests.frame.test_nonunique_indexes.arr->numpy.random.randn(3, 2)
A:pandas.tests.frame.test_nonunique_indexes.idx->date_range('20130101', periods=4, freq='Q-NOV')
A:pandas.tests.frame.test_nonunique_indexes.df->pandas.DataFrame()
A:pandas.tests.frame.test_nonunique_indexes.expected->numpy.array([[1, 2, 'a', 'b'], [1, 2, 'a', 'b']], dtype=object)
A:pandas.tests.frame.test_nonunique_indexes.df4->DataFrame({'RT': [0.0454], 'TClose': [22.02], 'TExg': [0.0422]}, index=MultiIndex.from_tuples([(600809, 20130331)], names=['STK_ID', 'RPT_Date']))
A:pandas.tests.frame.test_nonunique_indexes.df5->DataFrame({'RPT_Date': [20120930, 20121231, 20130331], 'STK_ID': [600809] * 3, 'STK_Name': ['饡驦', '饡驦', '饡驦'], 'TClose': [38.05, 41.66, 30.01]}, index=MultiIndex.from_tuples([(600809, 20120930), (600809, 20121231), (600809, 20130331)], names=['STK_ID', 'RPT_Date']))
A:pandas.tests.frame.test_nonunique_indexes.k->pandas.merge(df4, df5, how='inner', left_index=True, right_index=True)
A:pandas.tests.frame.test_nonunique_indexes.result->DataFrame([[1, 2], [2, np.nan], [3, 4], [4, 4]], columns=['A', 'B']).sub(df2)
A:pandas.tests.frame.test_nonunique_indexes.s->pandas.DataFrame().iloc[:, 0].describe()
A:pandas.tests.frame.test_nonunique_indexes.this_df->pandas.DataFrame().copy()
A:pandas.tests.frame.test_nonunique_indexes.expected_ser->pandas.Series(index.values, index=this_df.index)
A:pandas.tests.frame.test_nonunique_indexes.expected_df->DataFrame({'A': expected_ser, 'B': this_df['B'], 'A': expected_ser}, columns=['A', 'B', 'A'])
A:pandas.tests.frame.test_nonunique_indexes.df2->DataFrame([[0, 1], [2, 4], [2, np.nan], [4, 5]], columns=['A', 'A'])
A:pandas.tests.frame.test_nonunique_indexes.df1->DataFrame([[1, 2], [2, np.nan], [3, 4], [4, 4]], columns=['A', 'B'])
A:pandas.tests.frame.test_nonunique_indexes.df1r->DataFrame([[1, 2], [2, np.nan], [3, 4], [4, 4]], columns=['A', 'B']).reindex_like(df2)
A:pandas.tests.frame.test_nonunique_indexes.dfbool->DataFrame({'one': Series([True, True, False], index=['a', 'b', 'c']), 'two': Series([False, False, True, False], index=['a', 'b', 'c', 'd']), 'three': Series([False, True, True, True], index=['a', 'b', 'c', 'd'])})
A:pandas.tests.frame.test_nonunique_indexes.z->df[['A', 'C', 'A']].copy()
A:pandas.tests.frame.test_nonunique_indexes.df.columns->list('AAA')
A:pandas.tests.frame.test_nonunique_indexes.df_float->DataFrame(np.random.randn(10, 3), dtype='float64')
A:pandas.tests.frame.test_nonunique_indexes.df_int->DataFrame(np.random.randn(10, 3), dtype='int64')
A:pandas.tests.frame.test_nonunique_indexes.df_bool->DataFrame(True, index=df_float.index, columns=df_float.columns)
A:pandas.tests.frame.test_nonunique_indexes.df_object->DataFrame('foo', index=df_float.index, columns=df_float.columns)
A:pandas.tests.frame.test_nonunique_indexes.df_dt->DataFrame(pd.Timestamp('20010101'), index=df_float.index, columns=df_float.columns)
A:pandas.tests.frame.test_nonunique_indexes.rs->DataFrame(vals, columns=['A', 'A', 'B'])
A:pandas.tests.frame.test_nonunique_indexes.xp->DataFrame(vals)
A:pandas.tests.frame.test_nonunique_indexes.exp->pandas.DataFrame([['a', 'd', 'g'], ['b', 'e', 'h'], ['c', 'f', 'i']], columns=['A', 'A', 'A'])
pandas.tests.frame.test_nonunique_indexes.TestDataFrameNonuniqueIndexes
pandas.tests.frame.test_nonunique_indexes.TestDataFrameNonuniqueIndexes.test_column_dups2(self)
pandas.tests.frame.test_nonunique_indexes.TestDataFrameNonuniqueIndexes.test_column_dups_indexing(self)
pandas.tests.frame.test_nonunique_indexes.TestDataFrameNonuniqueIndexes.test_column_dups_indexing2(self)
pandas.tests.frame.test_nonunique_indexes.TestDataFrameNonuniqueIndexes.test_column_dups_operations(self)
pandas.tests.frame.test_nonunique_indexes.TestDataFrameNonuniqueIndexes.test_columns_with_dups(self)
pandas.tests.frame.test_nonunique_indexes.TestDataFrameNonuniqueIndexes.test_insert_with_columns_dups(self)
pandas.tests.frame.test_nonunique_indexes.TestDataFrameNonuniqueIndexes.test_set_value_by_index(self)
pandas.tests.frame.test_nonunique_indexes.TestDataFrameNonuniqueIndexes.test_values_duplicates(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_combine_concat.py----------------------------------------
A:pandas.tests.frame.test_combine_concat.A->DataFrame(str_dates, index=range(2), columns=['aa'])
A:pandas.tests.frame.test_combine_concat.B->DataFrame(data=np.ones((10, 2)), dtype=np.float32)
A:pandas.tests.frame.test_combine_concat.expected->DataFrame({'A': [1.0, 2, 3], 'B': date_range('2000', periods=3)})
A:pandas.tests.frame.test_combine_concat.df->DataFrame([[1.0, 2.0, False, True], [4.0, 5.0, True, False]], columns=['A', 'B', 'bool1', 'bool2'])
A:pandas.tests.frame.test_combine_concat.other->DataFrame([[45, 45]], index=[0], columns=['A', 'B'])
A:pandas.tests.frame.test_combine_concat.result->DataFrame({'a': [datetime(2000, 1, 1), datetime(2000, 1, 2), datetime(2000, 1, 3)]}).copy()
A:pandas.tests.frame.test_combine_concat.ts1->Timestamp(t1, tz='UTC')
A:pandas.tests.frame.test_combine_concat.ts2->Timestamp('2015-01-01', tz='UTC')
A:pandas.tests.frame.test_combine_concat.ts3->Timestamp('2015-01-01', tz='UTC')
A:pandas.tests.frame.test_combine_concat.df1->DataFrame({'A': [1.0, None, 3], 'B': date_range('2000', periods=3)})
A:pandas.tests.frame.test_combine_concat.df2->DataFrame({'A': [None, 2, 3]})
A:pandas.tests.frame.test_combine_concat.df3->DataFrame(dict(time=[ts3]))
A:pandas.tests.frame.test_combine_concat.results->pandas.concat((df1, df2), keys=[('bee', 'bah'), ('bee', 'boo')])
A:pandas.tests.frame.test_combine_concat.ts->pandas.to_datetime([1, 2]).tz_localize('UTC')
A:pandas.tests.frame.test_combine_concat.a->Series(['a', 'b'], index=range(5, 7))
A:pandas.tests.frame.test_combine_concat.b->Series(range(2), index=range(5, 7))
A:pandas.tests.frame.test_combine_concat.d['a']->Series([5, 6, 7, 8])
A:pandas.tests.frame.test_combine_concat.C->DataFrame([[1, 2], [3, 4]], index=str_dates, columns=dt_dates)
A:pandas.tests.frame.test_combine_concat.tst->DataFrame(str_dates, index=range(2), columns=['aa']).join(C, on='aa')
A:pandas.tests.frame.test_combine_concat.exp->pandas.DataFrame({'isBool': [True], 'isNum': [val]})
A:pandas.tests.frame.test_combine_concat.exp_idx->pandas.MultiIndex.from_product([['a', 'b'], ['x', 'y', 'z']], names=['first', 'second'])
A:pandas.tests.frame.test_combine_concat.index->Index(['a', 'b'], name='baz')
A:pandas.tests.frame.test_combine_concat.concatted_named_from_keys->pandas.concat([df, df], keys=index)
A:pandas.tests.frame.test_combine_concat.expected_named->pandas.DataFrame({'foo': [1, 2, 1, 2], 'bar': [0.1, 0.2, 0.1, 0.2]}, index=pd.MultiIndex.from_product((['a', 'b'], [0, 1]), names=['baz', None]))
A:pandas.tests.frame.test_combine_concat.index_no_name->Index(['a', 'b'], name=None)
A:pandas.tests.frame.test_combine_concat.concatted_named_from_names->pandas.concat([df, df], keys=index_no_name, names=['baz'])
A:pandas.tests.frame.test_combine_concat.concatted_unnamed->pandas.concat([df, df], keys=index_no_name)
A:pandas.tests.frame.test_combine_concat.expected_unnamed->pandas.DataFrame({'foo': [1, 2, 1, 2], 'bar': [0.1, 0.2, 0.1, 0.2]}, index=pd.MultiIndex.from_product((['a', 'b'], [0, 1]), names=[None, None]))
A:pandas.tests.frame.test_combine_concat.expected_index->pandas.DataFrame({'A': [0.1, 0.2, 0.3, 0.4]}, index=[0, 1, 0, 1])
A:pandas.tests.frame.test_combine_concat.concatted_index->pandas.concat([df1, df2], axis='index')
A:pandas.tests.frame.test_combine_concat.concatted_row->pandas.concat([df1, df2], axis='rows')
A:pandas.tests.frame.test_combine_concat.concatted_0->pandas.concat([df1, df2], axis=0)
A:pandas.tests.frame.test_combine_concat.expected_columns->pandas.DataFrame([[0.1, 0.3], [0.2, 0.4]], index=[0, 1], columns=['A', 'A'])
A:pandas.tests.frame.test_combine_concat.concatted_columns->pandas.concat([df1, df2], axis='columns')
A:pandas.tests.frame.test_combine_concat.concatted_1->pandas.concat([df1, df2], axis=1)
A:pandas.tests.frame.test_combine_concat.series1->pandas.Series([0.1, 0.2])
A:pandas.tests.frame.test_combine_concat.series2->pandas.Series([0.3, 0.4])
A:pandas.tests.frame.test_combine_concat.expected_index_series->pandas.Series([0.1, 0.2, 0.3, 0.4], index=[0, 1, 0, 1])
A:pandas.tests.frame.test_combine_concat.concatted_index_series->pandas.concat([series1, series2], axis='index')
A:pandas.tests.frame.test_combine_concat.concatted_row_series->pandas.concat([series1, series2], axis='rows')
A:pandas.tests.frame.test_combine_concat.concatted_0_series->pandas.concat([series1, series2], axis=0)
A:pandas.tests.frame.test_combine_concat.expected_columns_series->pandas.DataFrame([[0.1, 0.3], [0.2, 0.4]], index=[0, 1], columns=[0, 1])
A:pandas.tests.frame.test_combine_concat.concatted_columns_series->pandas.concat([series1, series2], axis='columns')
A:pandas.tests.frame.test_combine_concat.concatted_1_series->pandas.concat([series1, series2], axis=1)
A:pandas.tests.frame.test_combine_concat.f->DataFrame({'A': a, 'B': b})
A:pandas.tests.frame.test_combine_concat.g->DataFrame({'A': a, 'B': b})
A:pandas.tests.frame.test_combine_concat.combined->DataFrame({'col0': ser1, 'col2': ser2, 'col3': ser3}).combine_first(frame2)
A:pandas.tests.frame.test_combine_concat.reordered_frame->float_frame.reindex(combined.index)
A:pandas.tests.frame.test_combine_concat.fcopy->float_frame.copy()
A:pandas.tests.frame.test_combine_concat.fcopy2->float_frame.copy()
A:pandas.tests.frame.test_combine_concat.comb->float_frame.combine_first(DataFrame(index=['faz', 'boo']))
A:pandas.tests.frame.test_combine_concat.idx->Index(['a', 'b', 'c', 'f'])
A:pandas.tests.frame.test_combine_concat.ser1->Series([5.0, -9.0, 4.0, 100.0], index=idx)
A:pandas.tests.frame.test_combine_concat.ser2->Series(['a', 'b', 'c', 'f'], index=idx)
A:pandas.tests.frame.test_combine_concat.ser3->Series([12, 4, 5, 97], index=idx)
A:pandas.tests.frame.test_combine_concat.frame1->DataFrame({'col0': ser1, 'col2': ser2, 'col3': ser3})
A:pandas.tests.frame.test_combine_concat.frame2->DataFrame({'col1': ser1, 'col2': ser2, 'col5': ser3})
A:pandas.tests.frame.test_combine_concat.df0->DataFrame({'a': [datetime(2000, 1, 1), datetime(2000, 1, 2), datetime(2000, 1, 3)]})
A:pandas.tests.frame.test_combine_concat.dfa->pandas.DataFrame([[pd.Timestamp('2011-01-01'), 2]], columns=['a', 'b'])
A:pandas.tests.frame.test_combine_concat.dfb->pandas.DataFrame([[4], [5]], columns=['b'])
A:pandas.tests.frame.test_combine_concat.res->DataFrame({'A': [1.0, None, 3], 'B': date_range('2000', periods=3)}).combine_first(df2)
A:pandas.tests.frame.test_combine_concat.data1->pandas.PeriodIndex(['2011-01', 'NaT', '2011-03', '2011-04'], freq='M')
A:pandas.tests.frame.test_combine_concat.data2->pandas.PeriodIndex(['2012-01-01', '2012-02', '2012-03'], freq='M')
A:pandas.tests.frame.test_combine_concat.dts1->pandas.date_range('2015-01-01', '2015-01-02', tz='US/Eastern')
A:pandas.tests.frame.test_combine_concat.dts2->pandas.PeriodIndex(['2012-01-01', '2012-01-02', '2012-01-03'], freq='D')
A:pandas.tests.frame.test_combine_concat.exp_dts->pandas.PeriodIndex(['2011-01', '2012-01', 'NaT', '2012-02', '2011-03', '2011-04'], freq='M')
A:pandas.tests.frame.test_combine_concat.df2_obj->pandas.DataFrame.from_records(rows, columns=['date', 'test'])
A:pandas.tests.frame.test_combine_concat.ind->date_range(start='2000/1/1', freq='D', periods=10)
pandas.tests.frame.test_combine_concat.TestDataFrameCombineFirst
pandas.tests.frame.test_combine_concat.TestDataFrameCombineFirst.test_combine_first(self,float_frame)
pandas.tests.frame.test_combine_concat.TestDataFrameCombineFirst.test_combine_first_align_nan(self)
pandas.tests.frame.test_combine_concat.TestDataFrameCombineFirst.test_combine_first_int(self)
pandas.tests.frame.test_combine_concat.TestDataFrameCombineFirst.test_combine_first_mixed(self)
pandas.tests.frame.test_combine_concat.TestDataFrameCombineFirst.test_combine_first_mixed_bug(self)
pandas.tests.frame.test_combine_concat.TestDataFrameCombineFirst.test_combine_first_period(self)
pandas.tests.frame.test_combine_concat.TestDataFrameCombineFirst.test_combine_first_timedelta(self)
pandas.tests.frame.test_combine_concat.TestDataFrameCombineFirst.test_combine_first_timezone(self)
pandas.tests.frame.test_combine_concat.TestDataFrameCombineFirst.test_combine_first_with_asymmetric_other(self,val)
pandas.tests.frame.test_combine_concat.TestDataFrameCombineFirst.test_concat_datetime_datetime64_frame(self)
pandas.tests.frame.test_combine_concat.TestDataFrameCombineFirst.test_concat_dt_dt64_frame(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_combine_datetlike_udf(self,data)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_concat_astype_dup_col(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_concat_axis_parameter(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_concat_multiple_frames_dtypes(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_concat_multiple_tzs(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_concat_named_keys(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_concat_numerical_names(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_concat_tuple_keys(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_concat_tz_NaT(self,t1)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_concat_tz_not_aligned(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_join_multiindex_leftright(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_join_str_datetime(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_join_str_dt(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_update(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_update_datetime_tz(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_update_dt_tz(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_update_dtypes(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_update_filtered(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_update_from_non_df(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_update_nooverwrite(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_update_raise_bad_parameter(self,bad_kwarg,exception,msg)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_update_raise_on_overlap(self)
pandas.tests.frame.test_combine_concat.TestDataFrameUpdate
pandas.tests.frame.test_combine_concat.TestDataFrameUpdate.test_update_nan(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_api.py----------------------------------------
A:pandas.tests.frame.test_api.ind->getattr(float_frame, attr)
A:pandas.tests.frame.test_api.cp->deepcopy(float_frame)
A:pandas.tests.frame.test_api.s->pandas.DataFrame._constructor_sliced(tup[1:])
A:pandas.tests.frame.test_api.result->pandas.DataFrame({'A': [2, 3]}).rename(columns=str)
A:pandas.tests.frame.test_api.with_prefix->float_frame.add_prefix('foo#')
A:pandas.tests.frame.test_api.expected->Series({np.dtype('object'): 10})
A:pandas.tests.frame.test_api.with_suffix->float_frame.add_suffix('#foo')
A:pandas.tests.frame.test_api.with_pct_prefix->float_frame.add_prefix('%')
A:pandas.tests.frame.test_api.with_pct_suffix->float_frame.add_suffix('%')
A:pandas.tests.frame.test_api.df->pandas.DataFrame({'A': [2, 3]})
A:pandas.tests.frame.test_api.empty_frame->DataFrame()
A:pandas.tests.frame.test_api.df1->DataFrame(np.random.randn(0, 3))
A:pandas.tests.frame.test_api.df2->DataFrame(np.random.randn(0, 3))
A:pandas.tests.frame.test_api.cols->float_frame._get_agg_axis(0)
A:pandas.tests.frame.test_api.idx->float_frame._get_agg_axis(1)
A:pandas.tests.frame.test_api.(_, result)->next(df.iterrows())
A:pandas.tests.frame.test_api.tup->next(df.itertuples(name='TestName'))
A:pandas.tests.frame.test_api.tup2->next(df.itertuples(name='TestName'))
A:pandas.tests.frame.test_api.df3->DataFrame({'f' + str(i): [i] for i in range(1024)})
A:pandas.tests.frame.test_api.tup3->next(df3.itertuples())
A:pandas.tests.frame.test_api.df_254_columns->DataFrame([{f'foo_{i}': f'bar_{i}' for i in range(254)}])
A:pandas.tests.frame.test_api.result_254_columns->next(df_254_columns.itertuples(index=False))
A:pandas.tests.frame.test_api.df_255_columns->DataFrame([{f'foo_{i}': f'bar_{i}' for i in range(255)}])
A:pandas.tests.frame.test_api.result_255_columns->next(df_255_columns.itertuples(index=False))
A:pandas.tests.frame.test_api.df['grade']->Categorical(df['raw_grade'])
A:pandas.tests.frame.test_api.arr->numpy.random.randn(4, 3)
A:pandas.tests.frame.test_api.(index, data)->pandas._testing.getMixedTypeDict()
A:pandas.tests.frame.test_api.mixed->DataFrame(data, index=index)
A:pandas.tests.frame.test_api.data->DataFrame({'a': ['foo', 'bar', 'baz', 'qux'], 'b': [0, 0, 1, 1], 'c': [1, 2, 3, 4]})
A:pandas.tests.frame.test_api.warning->pandas._testing.assert_produces_warning(DeprecationWarning, check_stacklevel=False)
pandas.tests.frame.test_api.TestDataFrameMisc
pandas.tests.frame.test_api.TestDataFrameMisc.test_add_prefix_suffix(self,float_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_array_interface(self,float_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_attrs(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_axis_aliases(self,float_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_class_axis(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_column_contains_raises(self,float_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_copy_index_name_checking(self,float_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_deepcopy(self,float_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_empty_nonzero(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_get_agg_axis(self,float_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_get_axis(self,float_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_get_value(self,float_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_getitem_pop_assign_name(self,float_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_inplace_return_self(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_items(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_items_names(self,float_string_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_iter(self,float_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_iteritems(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_iterrows(self,float_frame,float_string_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_iterrows_corner(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_iterrows_iso8601(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_itertuples(self,float_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_keys(self,float_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_len(self,float_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_more_values(self,float_string_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_new_empty_index(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_nonzero(self,float_frame,float_string_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_not_hashable(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_repr_with_mi_nat(self,float_string_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_sequence_like_with_categorical(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_series_put_names(self,float_string_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_swapaxes(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_tab_complete_warning(self,ip)
pandas.tests.frame.test_api.TestDataFrameMisc.test_tab_completion(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_to_numpy(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_to_numpy_copy(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_to_numpy_dtype(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_transpose(self,float_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_transpose_get_view(self,float_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_values(self,float_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_values_mixed_dtypes(self,float_frame,float_string_frame)
pandas.tests.frame.test_api.TestDataFrameMisc.test_with_datetimelikes(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_with_dtlikes(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/common.py----------------------------------------
A:pandas.tests.frame.common.dtypes->dict(A='int32', B='uint64', C='uint8', D='int64')
pandas.tests.frame.common._check_mixed_float(df,dtype=None)
pandas.tests.frame.common._check_mixed_int(df,dtype=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_dtypes.py----------------------------------------
A:pandas.tests.frame.test_dtypes.df->pandas.DataFrame({'a': pd.Series([1, 2, 3], dtype=np.dtype('int32')), 'b': pd.Series(['x', 'y', 'z'], dtype=np.dtype('O'))})
A:pandas.tests.frame.test_dtypes.df['a']->df['a'].astype(dtype).astype(dtype)
A:pandas.tests.frame.test_dtypes.df['b']->df['b'].astype(dtype).astype(dtype)
A:pandas.tests.frame.test_dtypes.df['c']->df['c'].astype(np.float64).astype(np.float64)
A:pandas.tests.frame.test_dtypes.result->str(timezone_frame)
A:pandas.tests.frame.test_dtypes.empty_df->pandas.DataFrame()
A:pandas.tests.frame.test_dtypes.nocols_df->pandas.DataFrame(index=[1, 2, 3])
A:pandas.tests.frame.test_dtypes.norows_df->pandas.DataFrame(columns=list('abc'))
A:pandas.tests.frame.test_dtypes.norows_int_df->pandas.DataFrame(columns=list('abc')).astype(np.int32)
A:pandas.tests.frame.test_dtypes.ex_dtypes->pandas.Series(odict([('a', np.int64), ('b', np.bool), ('c', np.float64)]))
A:pandas.tests.frame.test_dtypes.tzframe->DataFrame({'A': date_range('20130101', periods=3), 'B': date_range('20130101', periods=3, tz='US/Eastern'), 'C': date_range('20130101', periods=3, tz='CET')})
A:pandas.tests.frame.test_dtypes.expected->DataFrame([['2013-01-01', '2013-01-01 00:00:00-05:00', '2013-01-01 00:00:00+01:00'], ['2013-01-02', 'NaT', 'NaT'], ['2013-01-03', '2013-01-03 00:00:00-05:00', '2013-01-03 00:00:00+01:00']], columns=timezone_frame.columns)
A:pandas.tests.frame.test_dtypes.ri->pandas.DataFrame({'a': pd.Series([1, 2, 3], dtype=np.dtype('int32')), 'b': pd.Series(['x', 'y', 'z'], dtype=np.dtype('O'))}).select_dtypes(include=[np.number, 'category'], exclude='floating')
A:pandas.tests.frame.test_dtypes.re->pandas.DataFrame({'a': pd.Series([1, 2, 3], dtype=np.dtype('int32')), 'b': pd.Series(['x', 'y', 'z'], dtype=np.dtype('O'))}).select_dtypes(exclude=[np.number])
A:pandas.tests.frame.test_dtypes.r->pandas.DataFrame({'a': pd.Series([1, 2, 3], dtype=np.dtype('int32')), 'b': pd.Series(['x', 'y', 'z'], dtype=np.dtype('O'))}).select_dtypes(include=['i8', 'O', 'timedelta64[ns]'])
A:pandas.tests.frame.test_dtypes.df['g']->pandas.DataFrame({'a': pd.Series([1, 2, 3], dtype=np.dtype('int32')), 'b': pd.Series(['x', 'y', 'z'], dtype=np.dtype('O'))}).f.diff()
A:pandas.tests.frame.test_dtypes.df2->DataFrame(dict(A=Timestamp('20130102', tz='US/Eastern'), B=Timestamp('20130603', tz='CET')), index=range(5))
A:pandas.tests.frame.test_dtypes.df3->pandas.concat([df2.A.to_frame(), df2.B.to_frame()], axis=1)
A:pandas.tests.frame.test_dtypes.FLOAT_TYPES->list(np.typecodes['AllFloat'])
A:pandas.tests.frame.test_dtypes.casted->mixed_float_frame.reindex(columns=['A', 'B', 'C']).astype(np.float32)
A:pandas.tests.frame.test_dtypes.mn->mixed_type_frame._get_numeric_data().copy()
A:pandas.tests.frame.test_dtypes.mn['little_float']->numpy.array(12345.0, dtype='float16')
A:pandas.tests.frame.test_dtypes.mn['big_float']->numpy.array(123456789101112.0, dtype='float64')
A:pandas.tests.frame.test_dtypes.tf->mixed_float_frame.reindex(columns=['A', 'B', 'C'])
A:pandas.tests.frame.test_dtypes.a->Series(date_range('2010-01-04', periods=5))
A:pandas.tests.frame.test_dtypes.b->Series([0.1, 0.2, 0.4, 0.6, 0.8], name='b')
A:pandas.tests.frame.test_dtypes.c->Series([0.0, 0.2, 0.4, 0.6, 0.8])
A:pandas.tests.frame.test_dtypes.d->Series(['1.0', '2', '3.14', '4', '5.4'])
A:pandas.tests.frame.test_dtypes.e->Series([0.0, 0.2, 0.4, 0.6, 0.8])
A:pandas.tests.frame.test_dtypes.original->pandas.DataFrame({'a': pd.Series([1, 2, 3], dtype=np.dtype('int32')), 'b': pd.Series(['x', 'y', 'z'], dtype=np.dtype('O'))}).copy(deep=True)
A:pandas.tests.frame.test_dtypes.dt1->dtype_class({'b': 'str', 'd': 'float32'})
A:pandas.tests.frame.test_dtypes.dt2->dtype_class({'b': np.float32, 'c': 'float32', 'd': np.float64})
A:pandas.tests.frame.test_dtypes.dt3->dtype_class({'a': str, 'b': str, 'c': str, 'd': str})
A:pandas.tests.frame.test_dtypes.dt4->dtype_class({'b': str, 2: str})
A:pandas.tests.frame.test_dtypes.dt5->dtype_class({'e': str})
A:pandas.tests.frame.test_dtypes.dt6->dtype_class({col: df[col].dtype for col in df.columns})
A:pandas.tests.frame.test_dtypes.equiv->pandas.DataFrame({'a': pd.Series([1, 2, 3], dtype=np.dtype('int32')), 'b': pd.Series(['x', 'y', 'z'], dtype=np.dtype('O'))}).astype(dt7)
A:pandas.tests.frame.test_dtypes.a1->Series([0, np.nan, 4], name='a')
A:pandas.tests.frame.test_dtypes.a2->Series([np.nan, 3, 5], name='a')
A:pandas.tests.frame.test_dtypes.a1_str->Series(['1', '2', '3', '4', '5'], dtype='str', name='a')
A:pandas.tests.frame.test_dtypes.b_str->Series(['0.1', '0.2', '0.4', '0.6', '0.8'], dtype=str, name='b')
A:pandas.tests.frame.test_dtypes.a2_str->Series(['0', '1', '2', '3', '4'], dtype='str', name='a')
A:pandas.tests.frame.test_dtypes.xpr->'Expected an instance of {}'.format(cls.__name__)
A:pandas.tests.frame.test_dtypes.raw_cat->pandas.Categorical(['a'], categories=['a', 'b', 'c', 'd', 'e'])
A:pandas.tests.frame.test_dtypes.expected1->pandas.DataFrame({'a': integer_array([1, 2, 3], dtype=dtype)})
A:pandas.tests.frame.test_dtypes.expected2->pandas.DataFrame({'a': integer_array([1, 2, 3], dtype=dtype)})
A:pandas.tests.frame.test_dtypes.mask->numpy.array([[True, False, False], [False, False, True]])
A:pandas.tests.frame.test_dtypes.df.A->pandas.DataFrame({'a': pd.Series([1, 2, 3], dtype=np.dtype('int32')), 'b': pd.Series(['x', 'y', 'z'], dtype=np.dtype('O'))}).A.astype('category')
A:pandas.tests.frame.test_dtypes.df.B->pandas.DataFrame({'a': pd.Series([1, 2, 3], dtype=np.dtype('int32')), 'b': pd.Series(['x', 'y', 'z'], dtype=np.dtype('O'))}).B.astype('category')
A:pandas.tests.frame.test_dtypes.df.C->pandas.DataFrame({'a': pd.Series([1, 2, 3], dtype=np.dtype('int32')), 'b': pd.Series(['x', 'y', 'z'], dtype=np.dtype('O'))}).C.astype('category')
A:pandas.tests.frame.test_dtypes.columns->pandas.UInt64Index([100, 200, 300], name='foo')
A:pandas.tests.frame.test_dtypes.A->pandas.Categorical([0, np.nan], categories=[0, 3])
A:pandas.tests.frame.test_dtypes.B->pandas.Categorical([np.nan, np.nan], categories=[1, 4])
A:pandas.tests.frame.test_dtypes.C->pandas.Categorical([np.nan, 5], categories=[2, 5])
A:pandas.tests.frame.test_dtypes.dtype->'M8[{}]'.format(unit)
A:pandas.tests.frame.test_dtypes.arr->numpy.array([[1, 2, 3]], dtype=dtype)
A:pandas.tests.frame.test_dtypes.other->'m8[{}]'.format(unit)
A:pandas.tests.frame.test_dtypes.msg->'cannot astype a timedelta from \\[timedelta64\\[ns\\]\\] to \\[datetime64\\[{}\\]\\]'.format(unit)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_arg_for_errors_in_astype(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_arg_for_errors_in_astype_dictlist(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_asarray_homogenous(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_cast_nan_inf_int(self,val,dtype)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_categorical(self,dtype)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_categoricaldtype_class_raises(self,cls)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_column_metadata(self,dtype)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_dict_like(self,dtype_class)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_duplicate_col(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_extension_dtypes(self,dtype)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_extension_dtypes_1d(self,dtype)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_extension_dtypes_duplicate_col(self,dtype)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_float(self,float_frame)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_from_datetimelike_to_objectt(self,dtype,unit)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_from_dtlike_to_objectt(self,dtype,unit)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_mixed_float(self,mixed_float_frame)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_mixed_type(self,mixed_type_frame)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_str(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_str_float(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_to_datetime_unit(self,unit)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_to_datetimelike_unit(self,arr_dtype,dtype,unit)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_to_dt_unit(self,unit)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_to_dtlike_unit(self,arr_dtype,dtype,unit)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_to_incorrect_datetimelike(self,unit)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_to_incorrect_dtlike(self,unit)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_to_timedelta_unit(self,unit)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_to_timedelta_unit_ns(self,unit)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_with_exclude_string(self,float_frame)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_with_view_float(self,float_frame)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_with_view_mixed_float(self,mixed_float_frame)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_concat_empty_dataframe_dtypes(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_constructor_list_str(self,input_vals,string_dtype)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_constructor_list_str_na(self,string_dtype)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_convert_dtypes(self,convert_integer,expected)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_datetime_with_tz_dtypes(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_df_where_change_dtype(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_df_where_with_category(self,kwargs)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_dt_with_tz_dtypes(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_dtypes_are_correct_after_column_slice(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_dtypes_gh8722(self,float_string_frame)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_empty_frame_dtypes(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_is_homogeneous_type(self,data,expected)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_bad_arg_raises(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_bad_datetime64(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_bad_dt64(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_datetime_with_tz(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_dt_with_tz(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_duplicate_columns(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_empty(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_exclude_include_using_list_like(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_exclude_using_list_like(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_exclude_using_scalars(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_include_exclude_mixed_scalars_lists(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_include_exclude_using_scalars(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_include_using_list_like(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_include_using_scalars(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_not_an_attr_but_still_valid_dtype(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_str_raises(self,dtype,arg)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_typecodes(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_singlerow_slice_categoricaldtype_gives_series(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_str_to_small_float_conversion_type(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_timedeltas(self)
pandas.tests.frame.test_dtypes.TestDataFrameDatetimeWithTZ
pandas.tests.frame.test_dtypes.TestDataFrameDatetimeWithTZ.test_astype(self,timezone_frame)
pandas.tests.frame.test_dtypes.TestDataFrameDatetimeWithTZ.test_astype_str(self,timezone_frame)
pandas.tests.frame.test_dtypes.TestDataFrameDatetimeWithTZ.test_interleave(self,timezone_frame)
pandas.tests.frame.test_dtypes._check_cast(df,v)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/conftest.py----------------------------------------
A:pandas.tests.frame.conftest.df->DataFrame({'A': ['foo', 'foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'three', 'one', 'two'], 'C': ['a', 'b', 'c', 'd', 'e'], 'D': np.random.randn(5), 'E': np.random.randn(5), ('tuple', 'as', 'label'): np.random.randn(5)})
A:pandas.tests.frame.conftest.df.A->DataFrame({'A': ['foo', 'foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'three', 'one', 'two'], 'C': ['a', 'b', 'c', 'd', 'e'], 'D': np.random.randn(5), 'E': np.random.randn(5), ('tuple', 'as', 'label'): np.random.randn(5)}).A.astype('int32')
A:pandas.tests.frame.conftest.df.B->numpy.ones(len(df.B), dtype='uint64')
A:pandas.tests.frame.conftest.df.C->DataFrame({'A': ['foo', 'foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'three', 'one', 'two'], 'C': ['a', 'b', 'c', 'd', 'e'], 'D': np.random.randn(5), 'E': np.random.randn(5), ('tuple', 'as', 'label'): np.random.randn(5)}).C.astype('uint8')
A:pandas.tests.frame.conftest.df.D->DataFrame({'A': ['foo', 'foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'three', 'one', 'two'], 'C': ['a', 'b', 'c', 'd', 'e'], 'D': np.random.randn(5), 'E': np.random.randn(5), ('tuple', 'as', 'label'): np.random.randn(5)}).C.astype('int64')
A:pandas.tests.frame.conftest.arr->numpy.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])
pandas.tests.frame.conftest.bool_frame_with_na()
pandas.tests.frame.conftest.datetime_frame()
pandas.tests.frame.conftest.dt_frame()
pandas.tests.frame.conftest.float_frame_with_na()
pandas.tests.frame.conftest.float_string_frame()
pandas.tests.frame.conftest.frame_of_index_cols()
pandas.tests.frame.conftest.int_frame()
pandas.tests.frame.conftest.mixed_float_frame()
pandas.tests.frame.conftest.mixed_int_frame()
pandas.tests.frame.conftest.mixed_type_frame()
pandas.tests.frame.conftest.simple_frame()
pandas.tests.frame.conftest.timezone_frame()
pandas.tests.frame.conftest.uint64_frame()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_constructors.py----------------------------------------
A:pandas.tests.frame.test_constructors.x->pandas.Series(range(5), name=1)
A:pandas.tests.frame.test_constructors.y->pandas.Series(range(5), name=0)
A:pandas.tests.frame.test_constructors.result->pandas.DataFrame(pop, index=[2001, 2002, 2003], columns=columns)
A:pandas.tests.frame.test_constructors.expected->pandas.DataFrame(array_dim2).astype('datetime64[ns, UTC]')
A:pandas.tests.frame.test_constructors.(index, data)->pandas._testing.getMixedTypeDict()
A:pandas.tests.frame.test_constructors.indexed_frame->pandas.DataFrame.from_records(arr, index='f1')
A:pandas.tests.frame.test_constructors.unindexed_frame->DataFrame(data)
A:pandas.tests.frame.test_constructors.foo->DataFrame({'a': ['a', 'b', 'c']}, dtype=np.float64)
A:pandas.tests.frame.test_constructors.df->pandas.DataFrame(array_dim2, dtype='datetime64[ns, UTC]')
A:pandas.tests.frame.test_constructors.df['foo']->numpy.ones((4, 2)).tolist()
A:pandas.tests.frame.test_constructors.df['test']->numpy.ones((4, 2))
A:pandas.tests.frame.test_constructors.df['foo2']->numpy.ones((4, 2)).tolist()
A:pandas.tests.frame.test_constructors.orig_df->DataFrame({'col1': [1.0], 'col2': [2.0], 'col3': [3.0]})
A:pandas.tests.frame.test_constructors.new_df->pandas.DataFrame(orig_df, dtype=float, copy=True)
A:pandas.tests.frame.test_constructors.should_be_view->DataFrame(df.values, dtype=df[0].dtype)
A:pandas.tests.frame.test_constructors.ad->dict()
A:pandas.tests.frame.test_constructors.a->numpy.array([(1, 2)], dtype=[('id', np.int64), ('value', np.int64)])
A:pandas.tests.frame.test_constructors.b->numpy.array([], dtype=[('id', np.int64), ('value', np.int64)])
A:pandas.tests.frame.test_constructors.rec->float_frame.to_records(index=False)
A:pandas.tests.frame.test_constructors.df2->DataFrame(Series(idx2))
A:pandas.tests.frame.test_constructors.df3->DataFrame(rec, index=rng, columns=['C', 'B'])
A:pandas.tests.frame.test_constructors.values->numpy.array([2 ** 64 - i for i in range(1, 10)], dtype=np.uint64)
A:pandas.tests.frame.test_constructors.data->pandas.date_range('2016-04-05 04:30', periods=3, tz='UTC')._data.astype(object).reshape(1, -1)
A:pandas.tests.frame.test_constructors.df_crawls->DataFrame(data)
A:pandas.tests.frame.test_constructors.nums->list(range(nitems))
A:pandas.tests.frame.test_constructors.datetime_series->pandas._testing.makeTimeSeries(nper=30)
A:pandas.tests.frame.test_constructors.frame->pandas.DataFrame.from_records(arr)
A:pandas.tests.frame.test_constructors.exp->DataFrame(data, index=['a', 'b', 'c'])
A:pandas.tests.frame.test_constructors.idx->Index(date_range('20130101', periods=3, tz='US/Eastern'), name='foo')
A:pandas.tests.frame.test_constructors.frame_none->DataFrame(dict(a=None), index=[0])
A:pandas.tests.frame.test_constructors.frame_none_list->DataFrame(dict(a=[None]), index=[0])
A:pandas.tests.frame.test_constructors.cols->Index([(11, 21), (value, 22), (13, value)])
A:pandas.tests.frame.test_constructors.datetime_series_short->pandas._testing.makeTimeSeries(nper=25)
A:pandas.tests.frame.test_constructors.mi->pandas.MultiIndex.from_tuples(tuples)
A:pandas.tests.frame.test_constructors.arr->numpy.array([(1.0, 1.0, 2, 2), (3.0, 3.0, 4, 4), (5.0, 5.0, 6, 6), (7.0, 7.0, 8, 8)], dtype=[('x', np.float64), ('u', np.float32), ('y', np.int64), ('z', np.int32)])
A:pandas.tests.frame.test_constructors.df1->pandas.DataFrame.from_records(df, index='C')
A:pandas.tests.frame.test_constructors.refdf->DataFrame({col: dict(val.items()) for (col, val) in data.items()})
A:pandas.tests.frame.test_constructors.dct->defaultdict(dict)
A:pandas.tests.frame.test_constructors.dm->DataFrame({'A': np.ones(10, dtype=int), 'B': np.ones(10, dtype=np.float64)}, index=np.arange(10))
A:pandas.tests.frame.test_constructors._d->sorted(d.items())
A:pandas.tests.frame.test_constructors.expected.index->Index(expected.index, tupleize_cols=False)
A:pandas.tests.frame.test_constructors.data_datetime64->create_data(np.datetime64)
A:pandas.tests.frame.test_constructors.data_datetime->create_data(lambda x: datetime.strptime(x, '%Y-%m-%d'))
A:pandas.tests.frame.test_constructors.data_Timestamp->create_data(Timestamp)
A:pandas.tests.frame.test_constructors.result_datetime64->DataFrame(data_datetime64)
A:pandas.tests.frame.test_constructors.result_datetime->DataFrame(data_datetime)
A:pandas.tests.frame.test_constructors.result_Timestamp->DataFrame(data_Timestamp)
A:pandas.tests.frame.test_constructors.data_timedelta64->create_data(lambda x: np.timedelta64(x, 'D'))
A:pandas.tests.frame.test_constructors.data_timedelta->create_data(lambda x: timedelta(days=x))
A:pandas.tests.frame.test_constructors.data_Timedelta->create_data(lambda x: Timedelta(x, 'D'))
A:pandas.tests.frame.test_constructors.result_timedelta64->DataFrame(data_timedelta64)
A:pandas.tests.frame.test_constructors.result_timedelta->DataFrame(data_timedelta)
A:pandas.tests.frame.test_constructors.result_Timedelta->DataFrame(data_Timedelta)
A:pandas.tests.frame.test_constructors.rng->pandas.period_range('1/1/2000', periods=5)
A:pandas.tests.frame.test_constructors.data.setdefault(col, {})[row]->pandas.DataFrame(array_dim2, dtype='datetime64[ns, UTC]')._get_value(row, col)
A:pandas.tests.frame.test_constructors.data.setdefault(row, {})[col]->pandas.DataFrame(array_dim2, dtype='datetime64[ns, UTC]')._get_value(row, col)
A:pandas.tests.frame.test_constructors.mat->numpy.array(['foo', 'bar'], dtype=object).reshape(2, 1)
A:pandas.tests.frame.test_constructors.mat2->numpy.ma.copy(mat)
A:pandas.tests.frame.test_constructors.mat_hard->numpy.ma.ones((2, 2), dtype=float).harden_mask()
A:pandas.tests.frame.test_constructors.assert_fr_equal->functools.partial(tm.assert_frame_equal, check_index_type=True, check_column_type=True, check_frame_type=True)
A:pandas.tests.frame.test_constructors.(names, data)->zip(*comb)
A:pandas.tests.frame.test_constructors.mrecs->numpy.ma.mrecords.fromarrays(data, names=names)
A:pandas.tests.frame.test_constructors.df_casted->DataFrame(float_frame, dtype=np.int64)
A:pandas.tests.frame.test_constructors.row_one->OrderedDict()
A:pandas.tests.frame.test_constructors.row_two->OrderedDict()
A:pandas.tests.frame.test_constructors.sdict->OrderedDict(zip(range(len(data)), data))
A:pandas.tests.frame.test_constructors.result2->pandas.DataFrame.from_records(recarray, columns=columns).reindex(columns=df.columns)
A:pandas.tests.frame.test_constructors.result_custom->DataFrame(data_custom)
A:pandas.tests.frame.test_constructors.data['B']->Series([4, 3, 2, 1], index=['bar', 'qux', 'baz', 'foo'])
A:pandas.tests.frame.test_constructors.named_tuple->namedtuple('Pandas', list('ab'))
A:pandas.tests.frame.test_constructors.recons->pandas.DataFrame.from_dict(data_dict, orient='index')
A:pandas.tests.frame.test_constructors.rs->pandas.DataFrame.from_dict(a, orient='index')
A:pandas.tests.frame.test_constructors.xp->DataFrame({'x': np.array([1.0, 3.0], dtype=np.float64), 'u': np.array([1.0, 3.0], dtype=np.float32), 'y': np.array([2, 4], dtype=np.int64), 'z': np.array([2, 4], dtype=np.int32)})
A:pandas.tests.frame.test_constructors.s->Series(dr, index=dr)
A:pandas.tests.frame.test_constructors.s1->Series([1, 2, 3], index=['a', 'b', 'c'], name='x')
A:pandas.tests.frame.test_constructors.s0->Series(range(5), name=0)
A:pandas.tests.frame.test_constructors.s2->Series([1, 2, 3], index=['a', 'b', 'c'])
A:pandas.tests.frame.test_constructors.other_index->Index(['a', 'b'])
A:pandas.tests.frame.test_constructors.exp1->DataFrame(s1.reindex(other_index))
A:pandas.tests.frame.test_constructors.exp2->DataFrame(s2.reindex(other_index))
A:pandas.tests.frame.test_constructors.index->date_range('1/1/2000', periods=10)
A:pandas.tests.frame.test_constructors.columns->list(float_frame.columns[:3])
A:pandas.tests.frame.test_constructors.edf->DataFrame([[8, 5]])
A:pandas.tests.frame.test_constructors.idf->pandas.DataFrame.from_records([(8, 5)], columns=['a', 'a'])
A:pandas.tests.frame.test_constructors.ind->date_range(start='2000-01-01', freq='D', periods=10)
A:pandas.tests.frame.test_constructors.datetime_s->Series(datetimes)
A:pandas.tests.frame.test_constructors.tz->pytz.timezone('US/Eastern')
A:pandas.tests.frame.test_constructors.dt->pytz.timezone('US/Eastern').localize(datetime(2012, 1, 1))
A:pandas.tests.frame.test_constructors.dr->date_range(start='20130101T10:00:00', periods=3, freq='T', tz='US/Eastern')
A:pandas.tests.frame.test_constructors.i->date_range('1/1/2011', periods=5, freq='10s', tz='US/Eastern')
A:pandas.tests.frame.test_constructors.i_no_tz->date_range('1/1/2011', periods=5, freq='10s')
A:pandas.tests.frame.test_constructors.cop->DataFrame(float_frame, copy=True)
A:pandas.tests.frame.test_constructors.d->DataFrame({'A': 'foo', 'B': ts}, index=dr)
A:pandas.tests.frame.test_constructors.res->DataFrame(arr, columns=['A', 'B', 'C'])
A:pandas.tests.frame.test_constructors.arr2->numpy.zeros((2, 3))
A:pandas.tests.frame.test_constructors.records->pandas.DataFrame.from_records(arr, index='f1').to_records(index=False)
A:pandas.tests.frame.test_constructors.generator->list_generator(10)
A:pandas.tests.frame.test_constructors.original_columns->list(columns)
A:pandas.tests.frame.test_constructors.df2_obj->pandas.DataFrame.from_records(rows, columns=['date', 'test'])
A:pandas.tests.frame.test_constructors.recarray->numpy.array(tuples, dtype=dtypes).view(np.recarray)
A:pandas.tests.frame.test_constructors.blocks->pandas.DataFrame(array_dim2, dtype='datetime64[ns, UTC]')._to_dict_of_blocks()
A:pandas.tests.frame.test_constructors.recarray2->pandas.DataFrame(array_dim2, dtype='datetime64[ns, UTC]').to_records()
A:pandas.tests.frame.test_constructors.result3->pandas.DataFrame.from_records(recarray2, columns=columns).reindex(columns=df.columns)
A:pandas.tests.frame.test_constructors.result4->pandas.DataFrame.from_records(lists, columns=columns).reindex(columns=df.columns)
A:pandas.tests.frame.test_constructors.exclude->list(set(range(8)) - set(columns_to_test))
A:pandas.tests.frame.test_constructors.v->datetime.date.today()
A:pandas.tests.frame.test_constructors.idx2->date_range('20130101', periods=3, tz='US/Eastern')
A:pandas.tests.frame.test_constructors.ts->Series(dr)
A:pandas.tests.frame.test_constructors.dti->pandas.date_range('2016-04-05 04:30', periods=3, tz='UTC')
A:pandas.tests.frame.test_constructors.array_dim2->numpy.arange(10).reshape((5, 2))
pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ
pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_frame_datetime64_mixed_index_ctor_1681(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_frame_dict_constructor_datetime64_1680(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_frame_dict_constructor_dt64_1680(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_frame_dt64_mixed_index_ctor_1681(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_frame_timeseries_column(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_frame_timeseries_to_records(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_from_2d_ndarray_with_dtype(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_from_dict(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_from_index(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_from_tzaware_mixed_object_array(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_from_tzaware_object_array(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_nested_dict_construction(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors
pandas.tests.frame.test_constructors.TestDataFrameConstructors._check_basic_constructor(self,empty)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_2d_index(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_DataFrame(self,float_frame)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_Series_copy_bug(self,float_frame)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_Series_differently_indexed(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_Series_named(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_Series_named_and_columns(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_arrays_and_scalars(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_bool(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_cast_failure(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_categorical(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_categorical_series(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_column_duplicates(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_complex_dtypes(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_corner_shape(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_datetimes_with_nulls(self,arr)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_block(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_cast(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_datetime64_index(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_dont_upcast(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_dt64_index(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_multiindex(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_nan_key(self,value)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_nan_tuple_key(self,value)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_of_generators(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_of_iterators(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_of_ranges(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_of_tuples(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_order_insertion(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_timedelta64_index(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dts_with_nulls(self,arr)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dtype(self,data,index,columns,dtype,expected)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dtype_copy(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dtype_list_data(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dtype_nocast_view(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dtype_str_na_values(self,string_dtype)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_empty_list(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_empty_with_string_dtype(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_error_msgs(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_for_list_with_dtypes(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_frame_copy(self,float_frame)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_from_dict_tuples(self,data_dict,keys)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_from_ordered_dict(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_generator(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_int_overflow(self,values)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_invalid_items_unused(self,scalar)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_iterable(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_iterator(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_frames(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_derived_dicts(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_dict_order(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_iterators(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_lists(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_namedtuples(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_odicts(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_ranges(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_series(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_series_aligned_index(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_tuples(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_lists_to_object_dtype(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_manager_resize(self,float_frame)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_maskedarray(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_maskedarray_hardened(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_maskedarray_nonfloat(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_maskedrecarray_dtype(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_miscast_na_int_dtype(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mix_series_nonseries(self,float_frame)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mixed(self,float_string_frame)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mixed_dict_and_Series(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mixed_dtypes(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mixed_type_rows(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_more(self,float_frame)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mrecarray(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_multi_index(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ndarray(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ndarray_copy(self,float_frame)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ordered_dict_conflicting_orders(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ordered_dict_preserve_order(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ordereddict(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_orient(self,float_string_frame)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_overflow_int64(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_period(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ragged(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_range(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_range_dtype(self,dtype)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_rec(self,float_frame)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_scalar(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_scalar_inference(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_sequence_like(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_series_copy(self,float_frame)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_single_value(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_subclass_dict(self,float_frame,dict_subclass)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_tuple(self,tuples,lists)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_with_datetimes(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_with_dts(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_with_embedded_frames(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_with_extension_array(self,extension_arr)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_with_nas(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_datetime_date_tuple_columns_from_dict(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_dt_date_tuple_columns_from_dict(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_empty_constructor(self,constructor)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_emptylike_constructor(self,emptylike,expected_index,expected_columns)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_frame_from_list_subclass(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_dict_columns_parameter(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_bad_index_column(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_columns_not_modified(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_decimal(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_dictlike(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_duplicates(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_empty(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_empty_with_nonempty_fields_gh3682(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_iterator(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_len0_with_columns(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_lists_generator(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_misc_brokenness(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_non_tuple(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_nones(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_sequencelike(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_series_list_dict(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_set_index_name(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_to_records(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_tuples_generator(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_with_datetimes(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_with_dts(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_with_index_data(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_nested_dict_frame_constructor(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_series_with_name_not_matching_column(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_to_frame_with_falsey_names(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/test_axis_select_reindex.py----------------------------------------
A:pandas.tests.frame.test_axis_select_reindex.df->pandas.DataFrame({'a': range(len(midx))}, index=midx)
A:pandas.tests.frame.test_axis_select_reindex.df_dropped_b->pandas.DataFrame({'a': range(len(midx))}, index=midx).drop('b')
A:pandas.tests.frame.test_axis_select_reindex.df_dropped_e->pandas.DataFrame({'a': range(len(midx))}, index=midx).drop('e', axis=1)
A:pandas.tests.frame.test_axis_select_reindex.dropped->pandas.DataFrame({'a': range(len(midx))}, index=midx).drop([], errors='ignore')
A:pandas.tests.frame.test_axis_select_reindex.expected->pandas.DataFrame({'a': [0, 1, 2, 3, 4, 5, 6, np.nan, 8]}, index=midx)
A:pandas.tests.frame.test_axis_select_reindex.tuples->sorted(zip(*arrays))
A:pandas.tests.frame.test_axis_select_reindex.index->Index(['a', 'b', 'c'])
A:pandas.tests.frame.test_axis_select_reindex.simple->DataFrame({'A': [1, 2, 3, 4], 'B': [0, 1, 2, 3]})
A:pandas.tests.frame.test_axis_select_reindex.nu_df->nu_df.set_index(pd.Index(['X', 'Y', 'X'])).set_index(pd.Index(['X', 'Y', 'X']))
A:pandas.tests.frame.test_axis_select_reindex.nu_df.columns->list('abc')
A:pandas.tests.frame.test_axis_select_reindex.lexsorted_mi->pandas.MultiIndex.from_tuples([('a', ''), ('b1', 'c1'), ('b2', 'c2')], names=['b', 'c'])
A:pandas.tests.frame.test_axis_select_reindex.lexsorted_df->DataFrame([[1, 3, 4]], columns=lexsorted_mi)
A:pandas.tests.frame.test_axis_select_reindex.not_lexsorted_df->not_lexsorted_df.reset_index().reset_index()
A:pandas.tests.frame.test_axis_select_reindex.result->pandas.DataFrame(np.arange(2, dtype='int64'), index=idx).reindex(midx)
A:pandas.tests.frame.test_axis_select_reindex.res1->pandas.DataFrame({'a': range(len(midx))}, index=midx).reindex(['b', 'a'], ['e', 'd'])
A:pandas.tests.frame.test_axis_select_reindex.res2->pandas.DataFrame({'a': range(len(midx))}, index=midx).reindex(columns=['e', 'd'], index=['b', 'a'])
A:pandas.tests.frame.test_axis_select_reindex.df1->pandas.DataFrame(np.arange(12, dtype='int64'), index=midx)
A:pandas.tests.frame.test_axis_select_reindex.columns->pandas.MultiIndex.from_tuples([('a', ''), ('c', 'c1')])
A:pandas.tests.frame.test_axis_select_reindex.df2->pandas.DataFrame(np.arange(2, dtype='int64'), index=idx)
A:pandas.tests.frame.test_axis_select_reindex.datetime_series->pandas._testing.makeTimeSeries(nper=30)
A:pandas.tests.frame.test_axis_select_reindex.newFrame->float_frame.reindex(list(datetime_series.index))
A:pandas.tests.frame.test_axis_select_reindex.emptyFrame->float_frame.reindex(Index([]))
A:pandas.tests.frame.test_axis_select_reindex.nonContigFrame->float_frame.reindex(datetime_series.index[::2])
A:pandas.tests.frame.test_axis_select_reindex.df.index->pandas.DataFrame({'a': range(len(midx))}, index=midx).index.astype('object')
A:pandas.tests.frame.test_axis_select_reindex.df['date']->pandas.to_datetime(df.date)
A:pandas.tests.frame.test_axis_select_reindex.df['delta']->(pd.to_datetime('2015-06-18') - df['date']).shift(1)
A:pandas.tests.frame.test_axis_select_reindex.left->pandas.DataFrame({'a': range(len(midx))}, index=midx).set_index(['delta', 'other', 'date']).reset_index()
A:pandas.tests.frame.test_axis_select_reindex.right->pandas.DataFrame({'a': range(len(midx))}, index=midx).reindex(columns=['delta', 'other', 'date', 'amount'])
A:pandas.tests.frame.test_axis_select_reindex.s->pandas.Series([1, 2, 4], index=list('ABD'), name='x')
A:pandas.tests.frame.test_axis_select_reindex.i->Series(np.arange(10), name='iname')
A:pandas.tests.frame.test_axis_select_reindex.smaller->int_frame.reindex(columns=['A', 'B', 'E'])
A:pandas.tests.frame.test_axis_select_reindex.bigger->int_frame.reindex(columns=['A', 'B', 'E']).reindex(int_frame.index)
A:pandas.tests.frame.test_axis_select_reindex.other->DataFrame(index=range(5), columns=['A', 'B', 'C'])
A:pandas.tests.frame.test_axis_select_reindex.new_frame->float_frame.reindex(columns=[])
A:pandas.tests.frame.test_axis_select_reindex.time_freq->date_range('2012-01-01', '2012-01-03', freq='d')
A:pandas.tests.frame.test_axis_select_reindex.arr->numpy.random.randn(10)
A:pandas.tests.frame.test_axis_select_reindex.result.index->list(range(len(df)))
A:pandas.tests.frame.test_axis_select_reindex.res3->pandas.DataFrame({'a': range(len(midx))}, index=midx).reindex(labels=['b', 'a'], axis=0).reindex(labels=['e', 'd'], axis=1)
A:pandas.tests.frame.test_axis_select_reindex.res4->pandas.DataFrame({'a': range(len(midx))}, index=midx).reindex(labels=['b', 'a'], axis=0)
A:pandas.tests.frame.test_axis_select_reindex.res5->pandas.DataFrame({'a': range(len(midx))}, index=midx).reindex(['b', 'a'], axis=0)
A:pandas.tests.frame.test_axis_select_reindex.(af, bf)->mixed_int_frame.align(other.iloc[:, 0], join='inner', axis=1, method=None, fill_value=0)
A:pandas.tests.frame.test_axis_select_reindex.join_idx->float_frame.index.join(other.index)
A:pandas.tests.frame.test_axis_select_reindex.diff_a->float_frame.index.difference(join_idx)
A:pandas.tests.frame.test_axis_select_reindex.diff_b->DataFrame(index=range(5), columns=['A', 'B', 'C']).index.difference(join_idx)
A:pandas.tests.frame.test_axis_select_reindex.(left, right)->float_frame.align(s, broadcast_axis=1)
A:pandas.tests.frame.test_axis_select_reindex.(aa, ab)->a.align(b, axis=axis, join=how, method=method, limit=limit, fill_axis=fill_axis)
A:pandas.tests.frame.test_axis_select_reindex.join_index->a.index.join(b.index, how=how)
A:pandas.tests.frame.test_axis_select_reindex.ea->ea.fillna(axis=fill_axis, method=method, limit=limit).fillna(axis=fill_axis, method=method, limit=limit)
A:pandas.tests.frame.test_axis_select_reindex.eb->eb.fillna(axis=fill_axis, method=method, limit=limit).fillna(axis=fill_axis, method=method, limit=limit)
A:pandas.tests.frame.test_axis_select_reindex.join_columns->a.columns.join(b.columns, how=how)
A:pandas.tests.frame.test_axis_select_reindex.X->numpy.arange(10 * 10, dtype='float64').reshape(10, 10)
A:pandas.tests.frame.test_axis_select_reindex.Y->numpy.ones((10, 1), dtype=int)
A:pandas.tests.frame.test_axis_select_reindex.df1['0.X']->numpy.ones((10, 1), dtype=int).squeeze()
A:pandas.tests.frame.test_axis_select_reindex.midx->pandas.MultiIndex.from_product([Categorical(['a', 'b', 'c']), Categorical(date_range('2012-01-01', periods=3, freq='H'))])
A:pandas.tests.frame.test_axis_select_reindex.idx->pandas.Index(range(2), name='b')
A:pandas.tests.frame.test_axis_select_reindex.(res1l, res1r)->pandas.DataFrame(np.arange(12, dtype='int64'), index=midx).align(df2, join='right')
A:pandas.tests.frame.test_axis_select_reindex.(res2l, res2r)->pandas.DataFrame(np.arange(2, dtype='int64'), index=idx).align(df1, join='left')
A:pandas.tests.frame.test_axis_select_reindex.expr->pandas.DataFrame([0, 0, 1, 1] * 2, index=exp_idx)
A:pandas.tests.frame.test_axis_select_reindex.exp_idx->pandas.MultiIndex.from_product([range(2), range(2), range(2)], names=('a', 'b', 'c'))
A:pandas.tests.frame.test_axis_select_reindex.expl->pandas.DataFrame([0, 1, 2, 3, 6, 7, 8, 9], index=exp_idx)
A:pandas.tests.frame.test_axis_select_reindex.(res1, res2)->pandas.Series([1, 2, 4], index=list('ABD'), name='x').align(df)
A:pandas.tests.frame.test_axis_select_reindex.exp1->pandas.DataFrame({'a': [1, np.nan, 3, np.nan, 5], 'b': [1, np.nan, 3, np.nan, 5]}, index=list('ABCDE'))
A:pandas.tests.frame.test_axis_select_reindex.exp2->pandas.Series([1, 2, np.nan, 4, np.nan], index=list('ABCDE'), name='x')
A:pandas.tests.frame.test_axis_select_reindex.filtered->float_frame.copy().filter(regex='[A]+')
A:pandas.tests.frame.test_axis_select_reindex.fcopy->float_frame.copy()
A:pandas.tests.frame.test_axis_select_reindex.empty->DataFrame()
A:pandas.tests.frame.test_axis_select_reindex.frame->pandas.DataFrame(index=index).drop(drop_labels)
A:pandas.tests.frame.test_axis_select_reindex.reindexed->DataFrame({}).reindex(index=[1, 2, 3]).reindex(columns=index)
A:pandas.tests.frame.test_axis_select_reindex.dm->DataFrame({}).reindex(index=[1, 2, 3])
A:pandas.tests.frame.test_axis_select_reindex.msg->re.escape('"[\'c\'] not found in axis"')
A:pandas.tests.frame.test_axis_select_reindex.expected_no_err->actual.T.drop('c', axis=1, level=level, errors='ignore')
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex._check_align(self,a,b,axis,fill_axis,how,method,limit=None)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex._check_align_fill(self,frame,kind,meth,ax,fax)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_align_fill_method(self,how,meth,ax,fax,float_frame)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_align_float(self,float_frame)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_align_int(self,int_frame)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_align_int_fill_bug(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_align_mixed_float(self,mixed_float_frame)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_align_mixed_int(self,mixed_int_frame)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_align_mixed_type(self,float_string_frame)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_align_multiindex(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_align_series_combinations(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_drop(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_drop_api_equivalence(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_drop_col_still_multiindex(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_drop_empty_list(self,index,drop_labels)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_drop_multiindex_not_lexsorted(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_drop_names(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_drop_non_empty_list(self,index,drop_labels)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_filter(self,float_frame,float_string_frame)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_filter_bytestring(self,name)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_filter_corner(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_filter_regex_non_string(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_filter_regex_search(self,float_frame)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_filter_unicode(self,name,expected)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_merge_join_different_levels(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_raise_on_drop_duplicate_index(self,actual)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex(self,float_frame)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_api_equivalence(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_axes(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_axis_style(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_axis_style_raises(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_boolean(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_columns(self,float_frame)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_columns_method(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_corner(self,int_frame)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_dups(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_fill_value(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_int(self,int_frame)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_like(self,float_frame)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_multi(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_multi_categorical_time(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_name_remains(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_nan(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_objects(self,float_string_frame)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_positional_warns(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_single_named_indexer(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_with_nans(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_take(self,float_frame)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_take_mixed_numeric(self,mixed_float_frame,mixed_int_frame)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_take_mixed_type(self,float_string_frame)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_round.py----------------------------------------
A:pandas.tests.frame.methods.test_round.df->DataFrame([[0.66, 1.1], [0.3, 0.25]], columns=columns)
A:pandas.tests.frame.methods.test_round.expected_rounded->DataFrame({'col1': [1.0, 2.0, 3.0], 'col2': [1.0, 2.0, 3.0]})
A:pandas.tests.frame.methods.test_round.expected_partially_rounded->DataFrame({'col1': [1.123, 2.123, 3.123], 'col2': [1.2, 2.2, 3.2]})
A:pandas.tests.frame.methods.test_round.non_int_round_Series->Series(non_int_round_dict)
A:pandas.tests.frame.methods.test_round.expected_neg_rounded->DataFrame({'col1': [110.0, 210, 310], 'col2': [100.0, 200, 300]})
A:pandas.tests.frame.methods.test_round.nan_round_Series->Series({'col1': np.nan, 'col2': 1})
A:pandas.tests.frame.methods.test_round.expected_nan_round->DataFrame({'col1': [1.123, 2.123, 3.123], 'col2': [1.2, 2.2, 3.2]})
A:pandas.tests.frame.methods.test_round.out->numpy.round(df, decimals=0)
A:pandas.tests.frame.methods.test_round.expected->DataFrame([[1.0, 1.0], [0.0, 0.0]], columns=columns)
A:pandas.tests.frame.methods.test_round.result->DataFrame([[0.66, 1.1], [0.3, 0.25]], columns=columns).round()
A:pandas.tests.frame.methods.test_round.round_0->DataFrame({'col1': [1.0, 2.0, 3.0, 4.0], 'col2': ['1', 'a', 'c', 'f'], 'col3': date_range('20111111', periods=4)})
A:pandas.tests.frame.methods.test_round.dfs->pandas.concat((df, df), axis=1)
A:pandas.tests.frame.methods.test_round.rounded->pandas.concat((df, df), axis=1).round()
A:pandas.tests.frame.methods.test_round.decimals->pandas.Series([1, 0, 2], index=['A', 'B', 'A'])
A:pandas.tests.frame.methods.test_round.idx->pandas.CategoricalIndex(['low'] * 3 + ['hi'] * 3)
A:pandas.tests.frame.methods.test_round.df_categorical->DataFrame([[0.66, 1.1], [0.3, 0.25]], columns=columns).copy().set_index(idx)
A:pandas.tests.frame.methods.test_round.columns->pandas.CategoricalIndex(pd.interval_range(0, 2))
pandas.tests.frame.methods.test_round.TestDataFrameRound
pandas.tests.frame.methods.test_round.TestDataFrameRound.test_round(self)
pandas.tests.frame.methods.test_round.TestDataFrameRound.test_round_builtin(self)
pandas.tests.frame.methods.test_round.TestDataFrameRound.test_round_interval_category_columns(self)
pandas.tests.frame.methods.test_round.TestDataFrameRound.test_round_mixed_type(self)
pandas.tests.frame.methods.test_round.TestDataFrameRound.test_round_nonunique_categorical(self)
pandas.tests.frame.methods.test_round.TestDataFrameRound.test_round_numpy(self)
pandas.tests.frame.methods.test_round.TestDataFrameRound.test_round_numpy_with_nan(self)
pandas.tests.frame.methods.test_round.TestDataFrameRound.test_round_with_duplicate_columns(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_drop_duplicates.py----------------------------------------
A:pandas.tests.frame.methods.test_drop_duplicates.df->DataFrame(origin_dict)
A:pandas.tests.frame.methods.test_drop_duplicates.msg->re.escape("Index(['a'], dtype='object')")
A:pandas.tests.frame.methods.test_drop_duplicates.result->DataFrame(origin_dict).drop_duplicates('C', keep=False)
A:pandas.tests.frame.methods.test_drop_duplicates.expected->DataFrame(output_dict, index=output_index)
A:pandas.tests.frame.methods.test_drop_duplicates.df['E']->df['C'].astype('int8')
A:pandas.tests.frame.methods.test_drop_duplicates.result0->DataFrame(origin_dict).drop_duplicates()
A:pandas.tests.frame.methods.test_drop_duplicates.result1->DataFrame(origin_dict).drop_duplicates('a')
A:pandas.tests.frame.methods.test_drop_duplicates.orig->DataFrame({'A': ['foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'bar', 'foo'], 'B': ['one', 'one', 'two', 'two', 'two', 'two', 'one', 'two'], 'C': [1, 1, 2, 2, 2, 2, 1, 2], 'D': range(8)})
A:pandas.tests.frame.methods.test_drop_duplicates.orig2->DataFrame({'A': ['foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'bar', 'foo'], 'B': ['one', 'one', 'two', 'two', 'two', 'two', 'one', 'two'], 'C': [1, 1, 2, 2, 2, 2, 1, 2], 'D': range(8)}).loc[:, ['A', 'B', 'C']].copy()
A:pandas.tests.frame.methods.test_drop_duplicates.df2->DataFrame({'A': ['foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'bar', 'foo'], 'B': ['one', 'one', 'two', 'two', 'two', 'two', 'one', 'two'], 'C': [1, 1, 2, 2, 2, 2, 1, 2], 'D': range(8)}).loc[:, ['A', 'B', 'C']].copy().copy()
A:pandas.tests.frame.methods.test_drop_duplicates.result_df->DataFrame(origin_dict).drop_duplicates(ignore_index=ignore_index, inplace=inplace)
pandas.tests.frame.methods.test_drop_duplicates.test_drop_duplicates()
pandas.tests.frame.methods.test_drop_duplicates.test_drop_duplicates_NA()
pandas.tests.frame.methods.test_drop_duplicates.test_drop_duplicates_NA_for_take_all()
pandas.tests.frame.methods.test_drop_duplicates.test_drop_duplicates_empty(df)
pandas.tests.frame.methods.test_drop_duplicates.test_drop_duplicates_for_take_all()
pandas.tests.frame.methods.test_drop_duplicates.test_drop_duplicates_ignore_index(inplace,origin_dict,output_dict,ignore_index,output_index)
pandas.tests.frame.methods.test_drop_duplicates.test_drop_duplicates_inplace()
pandas.tests.frame.methods.test_drop_duplicates.test_drop_duplicates_tuple()
pandas.tests.frame.methods.test_drop_duplicates.test_drop_duplicates_with_duplicate_column_names()
pandas.tests.frame.methods.test_drop_duplicates.test_drop_duplicates_with_misspelled_column_name(subset)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_transpose.py----------------------------------------
A:pandas.tests.frame.methods.test_transpose.dti->pandas.date_range('2016-04-05 04:30', periods=3, tz='UTC')
A:pandas.tests.frame.methods.test_transpose.df->pandas.DataFrame(dti)
A:pandas.tests.frame.methods.test_transpose.df3->pandas.DataFrame({'A': dti, 'B': dti})
A:pandas.tests.frame.methods.test_transpose.dti2->pandas.date_range('2016-04-05 04:30', periods=3, tz='UTC').tz_convert('US/Pacific')
A:pandas.tests.frame.methods.test_transpose.df4->pandas.DataFrame({'A': dti, 'B': dti2})
A:pandas.tests.frame.methods.test_transpose.df2->pandas.DataFrame([dti, dti2])
pandas.tests.frame.methods.test_transpose.TestTranspose
pandas.tests.frame.methods.test_transpose.TestTranspose.test_transpose_object_to_tzaware_mixed_tz(self)
pandas.tests.frame.methods.test_transpose.TestTranspose.test_transpose_tzaware_1col_single_tz(self)
pandas.tests.frame.methods.test_transpose.TestTranspose.test_transpose_tzaware_2col_mixed_tz(self)
pandas.tests.frame.methods.test_transpose.TestTranspose.test_transpose_tzaware_2col_single_tz(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_sort_values.py----------------------------------------
A:pandas.tests.frame.methods.test_sort_values.frame->DataFrame({'A': A, 'B': B, 'C': np.random.randn(100)})
A:pandas.tests.frame.methods.test_sort_values.sorted_df->DataFrame(original_dict).sort_values(by=['a', 'b'])
A:pandas.tests.frame.methods.test_sort_values.expected->pandas.DataFrame({'A': [1, 2, 3, 4, 4], 'date': pd.DatetimeIndex(['2010-01-01 09:00:00', '2010-01-01 09:00:01', '2010-01-01 09:00:02', '2010-01-01 09:00:03', 'NaT'])})
A:pandas.tests.frame.methods.test_sort_values.A->numpy.arange(5).repeat(20)
A:pandas.tests.frame.methods.test_sort_values.B->numpy.tile(np.arange(5), 20)
A:pandas.tests.frame.methods.test_sort_values.result->pandas.DataFrame({'A': [1, 2, 3, 4, 4], 'date': pd.DatetimeIndex(['2010-01-01 09:00:00', '2010-01-01 09:00:01', '2010-01-01 09:00:02', '2010-01-01 09:00:03', 'NaT'])}).sort_values(['A', 'date'])
A:pandas.tests.frame.methods.test_sort_values.indexer->numpy.lexsort((frame['A'], frame['B']))
A:pandas.tests.frame.methods.test_sort_values.df->DataFrame(original_dict)
A:pandas.tests.frame.methods.test_sort_values.df['a']->df['a'].astype(np.uint64).astype(np.uint64)
A:pandas.tests.frame.methods.test_sort_values.df1->DataFrame(original_dict).sort_values(by='B')
A:pandas.tests.frame.methods.test_sort_values.df2->DataFrame(original_dict).sort_values(by=['C', 'B'])
A:pandas.tests.frame.methods.test_sort_values.cp->s.copy()
A:pandas.tests.frame.methods.test_sort_values.df_reversed->DataFrame(dict(datetime=[NaT, Timestamp('2016-01-01')], float=float_values[::-1]), columns=['datetime', 'float'], index=[1, 0])
A:pandas.tests.frame.methods.test_sort_values.df_sorted->DataFrame(original_dict).sort_values(['datetime', 'float'], ascending=False)
A:pandas.tests.frame.methods.test_sort_values.reversed_categories->sorted(categories, reverse=True)
A:pandas.tests.frame.methods.test_sort_values.reversed_category_indices->sorted(category_indices, reverse=True)
A:pandas.tests.frame.methods.test_sort_values.reversed_na_indices->sorted(na_indices)
A:pandas.tests.frame.methods.test_sort_values.result_df->DataFrame(original_dict).sort_values('A', ascending=False, **kwargs)
pandas.tests.frame.methods.test_sort_values.TestDataFrameSortValues
pandas.tests.frame.methods.test_sort_values.TestDataFrameSortValues.test_sort_values(self)
pandas.tests.frame.methods.test_sort_values.TestDataFrameSortValues.test_sort_values_datetimes(self)
pandas.tests.frame.methods.test_sort_values.TestDataFrameSortValues.test_sort_values_dts(self)
pandas.tests.frame.methods.test_sort_values.TestDataFrameSortValues.test_sort_values_frame_column_inplace_sort_exception(self,float_frame)
pandas.tests.frame.methods.test_sort_values.TestDataFrameSortValues.test_sort_values_ignore_index(self,inplace,original_dict,sorted_dict,ignore_index,output_index)
pandas.tests.frame.methods.test_sort_values.TestDataFrameSortValues.test_sort_values_inplace(self)
pandas.tests.frame.methods.test_sort_values.TestDataFrameSortValues.test_sort_values_multicolumn(self)
pandas.tests.frame.methods.test_sort_values.TestDataFrameSortValues.test_sort_values_multicolumn_uint64(self)
pandas.tests.frame.methods.test_sort_values.TestDataFrameSortValues.test_sort_values_na_position_with_categories(self)
pandas.tests.frame.methods.test_sort_values.TestDataFrameSortValues.test_sort_values_na_position_with_categories_raises(self)
pandas.tests.frame.methods.test_sort_values.TestDataFrameSortValues.test_sort_values_nan(self)
pandas.tests.frame.methods.test_sort_values.TestDataFrameSortValues.test_sort_values_nat(self)
pandas.tests.frame.methods.test_sort_values.TestDataFrameSortValues.test_sort_values_nat_na_position_default(self)
pandas.tests.frame.methods.test_sort_values.TestDataFrameSortValues.test_sort_values_nat_values_in_int_column(self)
pandas.tests.frame.methods.test_sort_values.TestDataFrameSortValues.test_sort_values_stable_categorial(self)
pandas.tests.frame.methods.test_sort_values.TestDataFrameSortValues.test_sort_values_stable_descending_multicolumn_sort(self)
pandas.tests.frame.methods.test_sort_values.TestDataFrameSortValues.test_sort_values_stable_descending_sort(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_rank.py----------------------------------------
A:pandas.tests.frame.methods.test_rank.s->Series([1, 3, 4, 2, np.nan, 2, 1, 5, np.nan, 3])
A:pandas.tests.frame.methods.test_rank.df->DataFrame({'A': np.arange(2 ** 24 + 1), 'B': np.arange(2 ** 24 + 1, 0, -1)})
A:pandas.tests.frame.methods.test_rank.ranks0->float_frame.rank(na_option='bottom', ascending=False)
A:pandas.tests.frame.methods.test_rank.ranks1->float_frame.rank(1, na_option='bottom', ascending=False)
A:pandas.tests.frame.methods.test_rank.mask->numpy.isnan(float_frame.values)
A:pandas.tests.frame.methods.test_rank.exp0->numpy.apply_along_axis(rankdata, 0, -fval0)
A:pandas.tests.frame.methods.test_rank.exp1->numpy.apply_along_axis(rankdata, 1, -fval1)
A:pandas.tests.frame.methods.test_rank.result->DataFrame({'A': np.arange(2 ** 24 + 1), 'B': np.arange(2 ** 24 + 1, 0, -1)}).rank(pct=True).max()
A:pandas.tests.frame.methods.test_rank.exp->DataFrame({'a': [3.5, 1.0, 3.5, 5.0, 6.0, 7.0, 2.0]})
A:pandas.tests.frame.methods.test_rank.expected->DataFrame(exp)
A:pandas.tests.frame.methods.test_rank.float_string_frame['datetime']->datetime.datetime.now()
A:pandas.tests.frame.methods.test_rank.float_string_frame['timedelta']->timedelta(days=1, seconds=1)
A:pandas.tests.frame.methods.test_rank.xs->numpy.random.randint(0, 21, (100, 26))
A:pandas.tests.frame.methods.test_rank.sprank->sprank.astype(np.float64).astype(np.float64)
A:pandas.tests.frame.methods.test_rank.res->DataFrame({'A': np.arange(2 ** 24 + 1), 'B': np.arange(2 ** 24 + 1, 0, -1)}).rank(ascending=False)
A:pandas.tests.frame.methods.test_rank.res2->DataFrame({'A': np.arange(2 ** 24 + 1), 'B': np.arange(2 ** 24 + 1, 0, -1)}).rank(method=method, ascending=False, numeric_only=True)
A:pandas.tests.frame.methods.test_rank.res3->DataFrame({'A': np.arange(2 ** 24 + 1), 'B': np.arange(2 ** 24 + 1, 0, -1)}).rank(method=method, ascending=False, numeric_only=False)
A:pandas.tests.frame.methods.test_rank.exp_df->DataFrame({'A': expected, 'B': expected})
pandas.tests.frame.methods.test_rank.TestRank
pandas.tests.frame.methods.test_rank.TestRank.method(self,request)
pandas.tests.frame.methods.test_rank.TestRank.test_pct_max_many_rows(self)
pandas.tests.frame.methods.test_rank.TestRank.test_rank(self,float_frame)
pandas.tests.frame.methods.test_rank.TestRank.test_rank2(self)
pandas.tests.frame.methods.test_rank.TestRank.test_rank_2d_tie_methods(self,method,axis,dtype)
pandas.tests.frame.methods.test_rank.TestRank.test_rank_axis(self)
pandas.tests.frame.methods.test_rank.TestRank.test_rank_descending(self,method,dtype)
pandas.tests.frame.methods.test_rank.TestRank.test_rank_does_not_mutate(self)
pandas.tests.frame.methods.test_rank.TestRank.test_rank_methods_frame(self)
pandas.tests.frame.methods.test_rank.TestRank.test_rank_mixed_frame(self,float_string_frame)
pandas.tests.frame.methods.test_rank.TestRank.test_rank_na_option(self,float_frame)
pandas.tests.frame.methods.test_rank.TestRank.test_rank_pct_true(self,method,exp)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_to_dict.py----------------------------------------
A:pandas.tests.frame.methods.test_to_dict.tsmp->Timestamp('20130101')
A:pandas.tests.frame.methods.test_to_dict.test_data->DataFrame({'A': [tsmp, tsmp], 'B': [tsmp, tsmp]})
A:pandas.tests.frame.methods.test_to_dict.test_data_mixed->DataFrame({'A': [tsmp, tsmp], 'B': [1, 2]})
A:pandas.tests.frame.methods.test_to_dict.df->DataFrame(input_data)
A:pandas.tests.frame.methods.test_to_dict.recons_data->DataFrame(input_data).to_dict('i')
A:pandas.tests.frame.methods.test_to_dict.comp_data->DataFrame({'A': [tsmp, tsmp], 'B': [tsmp, tsmp]}).copy()
A:pandas.tests.frame.methods.test_to_dict.result->set(df.to_dict('records')[0].keys())
A:pandas.tests.frame.methods.test_to_dict.expected->set(df.columns)
pandas.tests.frame.methods.test_to_dict.TestDataFrameToDict
pandas.tests.frame.methods.test_to_dict.TestDataFrameToDict.test_to_dict(self,mapping)
pandas.tests.frame.methods.test_to_dict.TestDataFrameToDict.test_to_dict_box_scalars(self,orient,item_getter)
pandas.tests.frame.methods.test_to_dict.TestDataFrameToDict.test_to_dict_errors(self,mapping)
pandas.tests.frame.methods.test_to_dict.TestDataFrameToDict.test_to_dict_index_dtypes(self,into,expected)
pandas.tests.frame.methods.test_to_dict.TestDataFrameToDict.test_to_dict_index_not_unique_with_index_orient(self)
pandas.tests.frame.methods.test_to_dict.TestDataFrameToDict.test_to_dict_invalid_orient(self)
pandas.tests.frame.methods.test_to_dict.TestDataFrameToDict.test_to_dict_not_unique_warning(self)
pandas.tests.frame.methods.test_to_dict.TestDataFrameToDict.test_to_dict_numeric_names(self)
pandas.tests.frame.methods.test_to_dict.TestDataFrameToDict.test_to_dict_orient_dtype(self)
pandas.tests.frame.methods.test_to_dict.TestDataFrameToDict.test_to_dict_timestamp(self)
pandas.tests.frame.methods.test_to_dict.TestDataFrameToDict.test_to_dict_tz(self)
pandas.tests.frame.methods.test_to_dict.TestDataFrameToDict.test_to_dict_wide(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_duplicated.py----------------------------------------
A:pandas.tests.frame.methods.test_duplicated.df->DataFrame(columns=['a', 'b'])
A:pandas.tests.frame.methods.test_duplicated.msg->re.escape("Index(['a'], dtype='object')")
A:pandas.tests.frame.methods.test_duplicated.result->DataFrame(columns=['a', 'b']).duplicated(keep=keep, subset=subset)
A:pandas.tests.frame.methods.test_duplicated.subset->list(df.columns)
A:pandas.tests.frame.methods.test_duplicated.expected->DataFrame(columns=['a', 'b']).copy()
A:pandas.tests.frame.methods.test_duplicated.dupes->DataFrame(columns=['a', 'b']).duplicated('a')
pandas.tests.frame.methods.test_duplicated.test_duplicated_do_not_fail_on_wide_dataframes()
pandas.tests.frame.methods.test_duplicated.test_duplicated_keep(keep,expected)
pandas.tests.frame.methods.test_duplicated.test_duplicated_nan_none(keep,expected)
pandas.tests.frame.methods.test_duplicated.test_duplicated_on_empty_frame()
pandas.tests.frame.methods.test_duplicated.test_duplicated_subset(subset,keep)
pandas.tests.frame.methods.test_duplicated.test_duplicated_with_misspelled_column_name(subset)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_replace.py----------------------------------------
A:pandas.tests.frame.methods.test_replace.tsframe->datetime_frame.copy().astype(np.float32)
A:pandas.tests.frame.methods.test_replace.result->pandas.DataFrame(np.eye(2), dtype=dtype).replace(to_replace=[None, -np.inf, np.inf], value=value)
A:pandas.tests.frame.methods.test_replace.expected->pandas.DataFrame({'grp': [10, 2, 3, 4, 5]}, dtype='Int64')
A:pandas.tests.frame.methods.test_replace.dfobj->DataFrame(obj)
A:pandas.tests.frame.methods.test_replace.dfmix->DataFrame(mix_abc)
A:pandas.tests.frame.methods.test_replace.res->pandas.DataFrame(np.eye(2), dtype=dtype).replace({'a': {0: 'Y', 1: 'N'}})
A:pandas.tests.frame.methods.test_replace.objc->obj.copy()
A:pandas.tests.frame.methods.test_replace.expec->Series([np.int64] * 3)
A:pandas.tests.frame.methods.test_replace.mixc->mix_ab.copy()
A:pandas.tests.frame.methods.test_replace.dfmix2->DataFrame(mix2)
A:pandas.tests.frame.methods.test_replace.res2->pandas.DataFrame(np.eye(2), dtype=dtype).replace(to_replace=(1, np.nan), value=[-100000000.0, 0])
A:pandas.tests.frame.methods.test_replace.res4->DataFrame(mix_abc).copy()
A:pandas.tests.frame.methods.test_replace.res3->pandas.DataFrame(np.eye(2), dtype=dtype).replace(to_replace=[1, np.nan], value=[-100000000.0, 0])
A:pandas.tests.frame.methods.test_replace.df->pandas.DataFrame(np.eye(2), dtype=dtype)
A:pandas.tests.frame.methods.test_replace.s1->Series({'b': '\\s*\\.\\s*'})
A:pandas.tests.frame.methods.test_replace.s2->Series({'b': np.nan})
A:pandas.tests.frame.methods.test_replace.zero_filled->datetime_frame.copy().astype(np.float32).replace(np.nan, -100000000.0)
A:pandas.tests.frame.methods.test_replace.df1->pandas.DataFrame(np.eye(2), dtype=dtype).replace('-', np.nan)
A:pandas.tests.frame.methods.test_replace.expected_df->pandas.DataFrame([(np.nan, pd.to_datetime('20150101')), ('a', pd.to_datetime('20150102'))])
A:pandas.tests.frame.methods.test_replace.s->Series({'zero': 0.0, 'one': 2.0})
A:pandas.tests.frame.methods.test_replace.rep->pandas.DataFrame(np.eye(2), dtype=dtype).replace(m)
A:pandas.tests.frame.methods.test_replace.m->pandas.DataFrame(np.eye(2), dtype=dtype).mean()
A:pandas.tests.frame.methods.test_replace.filled->pandas.DataFrame(np.eye(2), dtype=dtype).replace(to_rep, 0)
A:pandas.tests.frame.methods.test_replace.answer->Series({0: 'Strongly Agree', 1: 'Agree', 2: 'Neutral', 3: 'Disagree', 4: 'Strongly Disagree'})
A:pandas.tests.frame.methods.test_replace.weights->Series({'Agree': 4, 'Disagree': 2, 'Neutral': 3, 'Strongly Agree': 5, 'Strongly Disagree': 1})
A:pandas.tests.frame.methods.test_replace.res1->pandas.DataFrame(np.eye(2), dtype=dtype).replace(to_replace={np.nan: 0, 1: -100000000.0})
A:pandas.tests.frame.methods.test_replace.r->pandas.DataFrame(np.eye(2), dtype=dtype).replace([np.inf, -np.inf], np.nan)
A:pandas.tests.frame.methods.test_replace.a->numpy.arange(1, 5)
A:pandas.tests.frame.methods.test_replace.astr->numpy.arange(1, 5).astype(str)
A:pandas.tests.frame.methods.test_replace.bstr->numpy.arange(2, 6).astype(str)
A:pandas.tests.frame.methods.test_replace.expect->pandas.DataFrame({'a': ['Y', 'N', 'Y']})
A:pandas.tests.frame.methods.test_replace.expected['a']->expected['a'].cat.set_categories([1, 2, 3]).cat.set_categories([1, 2, 3])
A:pandas.tests.frame.methods.test_replace.expected['b']->expected['b'].cat.set_categories([1, 2, 3]).cat.set_categories([1, 2, 3])
pandas.tests.frame.methods.test_replace.TestDataFrameReplace
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_categorical_replace_with_dict(self,replace_dict,final_data)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_nested_dict_overlapping_keys_replace_int(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_nested_dict_overlapping_keys_replace_str(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_regex_replace_dict_mixed(self,mix_abc)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_regex_replace_dict_nested(self,mix_abc)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_regex_replace_dict_nested_gh4115(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_regex_replace_dict_nested_non_first_character(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_regex_replace_list_mixed(self,mix_ab)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_regex_replace_list_mixed_inplace(self,mix_ab)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_regex_replace_list_obj(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_regex_replace_list_obj_inplace(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_regex_replace_list_to_scalar(self,mix_abc)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_regex_replace_numeric_to_object_conversion(self,mix_abc)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_regex_replace_regex_list_to_numeric(self,mix_abc)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_regex_replace_scalar(self,mix_ab)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_regex_replace_scalar_inplace(self,mix_ab)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_regex_replace_series_of_regexes(self,mix_abc)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_regex_replace_str_to_numeric(self,mix_abc)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace(self,datetime_frame)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_after_convert_dtypes(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_bool_with_bool(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_bool_with_string(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_commutative(self,df,to_replace,exp)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_convert(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_datetime(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_datetimetz(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_dict_no_regex(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_dict_tuple_list_ordering_remains_the_same(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_doesnt_replace_without_regex(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_dt(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_dttz(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_dtypes(self,frame,to_replace,value,expected)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_for_new_dtypes(self,datetime_frame)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_inplace(self,datetime_frame,float_string_frame)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_input_formats_listlike(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_input_formats_scalar(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_limit(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_list(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_method(self,to_replace,method,expected)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_mixed(self,float_string_frame)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_no_replacement_dtypes(self,dtype,value)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_period(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_pure_bool_with_string_no_op(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_regex_metachar(self,metachar)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_replacer_dtype(self,replacer)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_series_dict(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_series_no_regex(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_simple_nested_dict(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_simple_nested_dict_with_nonexistent_value(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_swapping_bug(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_truthy(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_value_is_none(self,datetime_frame)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_with_dict_with_bool_keys(self)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_with_empty_dictlike(self,mix_abc)
pandas.tests.frame.methods.test_replace.TestDataFrameReplace.test_replace_with_empty_list(self)
pandas.tests.frame.methods.test_replace.mix_ab()->Dict[str, List[Union[int, str]]]
pandas.tests.frame.methods.test_replace.mix_abc()->Dict[str, List[Union[float, str]]]


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_isin.py----------------------------------------
A:pandas.tests.frame.methods.test_isin.df->pandas.DataFrame({'A': [1, 2, 3, 4], 'B': [2, np.nan, 4, 4]}, index=['a', 'b', 'c', 'd'])
A:pandas.tests.frame.methods.test_isin.result->DataFrame({'date': [pd.Timedelta(1, 's'), pd.Timedelta(2, 's')]}).isin(df3)
A:pandas.tests.frame.methods.test_isin.expected->DataFrame({'date': [False, False]})
A:pandas.tests.frame.methods.test_isin.df1->DataFrame({'A': np.ones(12), 'B': np.zeros(12)}, index=idx)
A:pandas.tests.frame.methods.test_isin.df2->DataFrame({'date': []})
A:pandas.tests.frame.methods.test_isin.df['C']->list(zip(df['A'], df['B']))
A:pandas.tests.frame.methods.test_isin.other->DataFrame({'A': [1, 0, 1, 0], 'B': [1, 1, 0, 0]})
A:pandas.tests.frame.methods.test_isin.s->pandas.Series([1, 3, 11, 4], index=['a', 'b', 'c', 'd'])
A:pandas.tests.frame.methods.test_isin.idx->pandas.MultiIndex.from_tuples([(0, 'a', 'foo'), (0, 'a', 'bar'), (0, 'b', 'bar'), (0, 'b', 'baz'), (2, 'a', 'foo'), (2, 'a', 'bar'), (2, 'c', 'bar'), (2, 'c', 'baz'), (1, 'b', 'foo'), (1, 'b', 'bar'), (1, 'c', 'bar'), (1, 'c', 'baz')])
A:pandas.tests.frame.methods.test_isin.df1_ts->DataFrame({'date': pd.to_datetime(['2014-01-01', '2014-01-02'])})
A:pandas.tests.frame.methods.test_isin.df1_td->DataFrame({'date': [pd.Timedelta(1, 's'), pd.Timedelta(2, 's')]})
A:pandas.tests.frame.methods.test_isin.df3->DataFrame()
pandas.tests.frame.methods.test_isin.TestDataFrameIsIn
pandas.tests.frame.methods.test_isin.TestDataFrameIsIn.test_isin(self)
pandas.tests.frame.methods.test_isin.TestDataFrameIsIn.test_isin_against_series(self)
pandas.tests.frame.methods.test_isin.TestDataFrameIsIn.test_isin_df(self)
pandas.tests.frame.methods.test_isin.TestDataFrameIsIn.test_isin_df_dupe_values(self)
pandas.tests.frame.methods.test_isin.TestDataFrameIsIn.test_isin_dict(self)
pandas.tests.frame.methods.test_isin.TestDataFrameIsIn.test_isin_dupe_self(self)
pandas.tests.frame.methods.test_isin.TestDataFrameIsIn.test_isin_empty(self,empty)
pandas.tests.frame.methods.test_isin.TestDataFrameIsIn.test_isin_empty_datetimelike(self)
pandas.tests.frame.methods.test_isin.TestDataFrameIsIn.test_isin_empty_dtlike(self)
pandas.tests.frame.methods.test_isin.TestDataFrameIsIn.test_isin_multiIndex(self)
pandas.tests.frame.methods.test_isin.TestDataFrameIsIn.test_isin_tuples(self)
pandas.tests.frame.methods.test_isin.TestDataFrameIsIn.test_isin_with_string_scalar(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_diff.py----------------------------------------
A:pandas.tests.frame.methods.test_diff.the_diff->datetime_frame.astype('float32').diff(1)
A:pandas.tests.frame.methods.test_diff.s->Series([a, b])
A:pandas.tests.frame.methods.test_diff.rs->datetime_frame.diff(1.0)
A:pandas.tests.frame.methods.test_diff.tf->datetime_frame.astype('float32')
A:pandas.tests.frame.methods.test_diff.df->DataFrame([[1.0, 2.0], [3.0, 4.0]])
A:pandas.tests.frame.methods.test_diff.result->DataFrame([[1.0, 2.0], [3.0, 4.0]]).diff()
A:pandas.tests.frame.methods.test_diff.expected->DataFrame({0: pd.TimedeltaIndex(['NaT', 'NaT']), 1: pd.TimedeltaIndex(['0 days', '0 days'])})
A:pandas.tests.frame.methods.test_diff.res->DataFrame([[1.0, 2.0], [3.0, 4.0]]).diff()
A:pandas.tests.frame.methods.test_diff.exp->DataFrame([[pd.NaT, np.nan], [pd.Timedelta('00:01:00'), 1]], columns=['time', 'value'])
A:pandas.tests.frame.methods.test_diff.df['A']->numpy.array([1, 2, 3, 4, 5], dtype=object)
A:pandas.tests.frame.methods.test_diff.xp->datetime_frame.diff(1)
pandas.tests.frame.methods.test_diff.TestDataFrameDiff
pandas.tests.frame.methods.test_diff.TestDataFrameDiff.test_diff(self,datetime_frame)
pandas.tests.frame.methods.test_diff.TestDataFrameDiff.test_diff_axis(self)
pandas.tests.frame.methods.test_diff.TestDataFrameDiff.test_diff_datetime_axis0(self,tz)
pandas.tests.frame.methods.test_diff.TestDataFrameDiff.test_diff_datetime_axis1(self,tz)
pandas.tests.frame.methods.test_diff.TestDataFrameDiff.test_diff_dt_axis0(self,tz)
pandas.tests.frame.methods.test_diff.TestDataFrameDiff.test_diff_dt_axis1(self,tz)
pandas.tests.frame.methods.test_diff.TestDataFrameDiff.test_diff_float_n(self,datetime_frame)
pandas.tests.frame.methods.test_diff.TestDataFrameDiff.test_diff_mixed_dtype(self)
pandas.tests.frame.methods.test_diff.TestDataFrameDiff.test_diff_neg_n(self,datetime_frame)
pandas.tests.frame.methods.test_diff.TestDataFrameDiff.test_diff_timedelta(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_count.py----------------------------------------
A:pandas.tests.frame.methods.test_count.frame->DataFrame()
A:pandas.tests.frame.methods.test_count.ct1->DataFrame().count(1)
A:pandas.tests.frame.methods.test_count.ct2->DataFrame().count(0)
A:pandas.tests.frame.methods.test_count.df->DataFrame(float_string_frame._series)
A:pandas.tests.frame.methods.test_count.result->DataFrame(float_string_frame._series).count()
A:pandas.tests.frame.methods.test_count.expected->Series(0, index=[])
A:pandas.tests.frame.methods.test_count.dm->DataFrame(float_string_frame._series)
pandas.tests.frame.methods.test_count.TestDataFrameCount
pandas.tests.frame.methods.test_count.TestDataFrameCount.test_count(self)
pandas.tests.frame.methods.test_count.TestDataFrameCount.test_count_objects(self,float_string_frame)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_shift.py----------------------------------------
A:pandas.tests.frame.methods.test_shift.shiftedFrame->datetime_frame.shift(5, freq=offsets.BDay())
A:pandas.tests.frame.methods.test_shift.shiftedSeries->datetime_frame['A'].shift(-5)
A:pandas.tests.frame.methods.test_shift.unshifted->inferred_ts.tshift(1).tshift(-1)
A:pandas.tests.frame.methods.test_shift.shiftedFrame2->datetime_frame.shift(5, freq='B')
A:pandas.tests.frame.methods.test_shift.int_shifted->int_frame.shift(1)
A:pandas.tests.frame.methods.test_shift.ps->pandas._testing.makePeriodFrame()
A:pandas.tests.frame.methods.test_shift.shifted->DataFrame(datetime_frame.values, Index(np.asarray(datetime_frame.index)), columns=datetime_frame.columns).tshift(1)
A:pandas.tests.frame.methods.test_shift.shifted2->datetime_frame.tshift(freq=datetime_frame.index.freq)
A:pandas.tests.frame.methods.test_shift.shifted3->pandas._testing.makePeriodFrame().tshift(freq=offsets.BDay())
A:pandas.tests.frame.methods.test_shift.df->pandas.Series([pd.Timestamp('2020-01-01'), pd.Timestamp('2020-01-02')]).to_frame()
A:pandas.tests.frame.methods.test_shift.expected->pandas.DataFrame({'A': [pd.Timestamp(0), pd.Timestamp(0)], 'B': df2['A']})
A:pandas.tests.frame.methods.test_shift.result->pandas.DataFrame({'A': ser, 'B': ser}).shift(1, axis=1, fill_value=0)
A:pandas.tests.frame.methods.test_shift.rs->pandas.Series([pd.Timestamp('2020-01-01'), pd.Timestamp('2020-01-02')]).to_frame().shift(-1)
A:pandas.tests.frame.methods.test_shift.xp->DataFrame({'one': s1.shift(1), 'two': s2.shift(1)})
A:pandas.tests.frame.methods.test_shift.s1->pandas.Series(['a', 'b', 'c'], dtype='category')
A:pandas.tests.frame.methods.test_shift.s2->pandas.Series(['A', 'B', 'C'], dtype='category')
A:pandas.tests.frame.methods.test_shift.exp->DataFrame([0, 0, 1, 2, 3], index=date_range('1/1/2000', periods=5, freq='H'))
A:pandas.tests.frame.methods.test_shift.data->numpy.random.randn(20, 5)
A:pandas.tests.frame.methods.test_shift.df.iloc[:, s]->pandas.Series([pd.Timestamp('2020-01-01'), pd.Timestamp('2020-01-02')]).to_frame().iloc[:, s].shift(s + 1)
A:pandas.tests.frame.methods.test_shift.df.columns->range(5)
A:pandas.tests.frame.methods.test_shift.nulls->shifted[0].isna().sum()
A:pandas.tests.frame.methods.test_shift.inferred_ts->DataFrame(datetime_frame.values, Index(np.asarray(datetime_frame.index)), columns=datetime_frame.columns)
A:pandas.tests.frame.methods.test_shift.ser->pandas.Series([pd.Timestamp('2020-01-01'), pd.Timestamp('2020-01-02')])
A:pandas.tests.frame.methods.test_shift.df2->pandas.DataFrame({'A': ser, 'B': ser})
pandas.tests.frame.methods.test_shift.TestDataFrameShift
pandas.tests.frame.methods.test_shift.TestDataFrameShift.test_shift(self,datetime_frame,int_frame)
pandas.tests.frame.methods.test_shift.TestDataFrameShift.test_shift_bool(self)
pandas.tests.frame.methods.test_shift.TestDataFrameShift.test_shift_categorical(self)
pandas.tests.frame.methods.test_shift.TestDataFrameShift.test_shift_dt64values_int_fill_deprecated(self)
pandas.tests.frame.methods.test_shift.TestDataFrameShift.test_shift_duplicate_columns(self)
pandas.tests.frame.methods.test_shift.TestDataFrameShift.test_shift_empty(self)
pandas.tests.frame.methods.test_shift.TestDataFrameShift.test_shift_fill_value(self)
pandas.tests.frame.methods.test_shift.TestDataFrameShift.test_tshift(self,datetime_frame)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_cov_corr.py----------------------------------------
A:pandas.tests.frame.methods.test_cov_corr.expected->Series(np.ones(len(result)))
A:pandas.tests.frame.methods.test_cov_corr.result->pandas.DataFrame(np.random.random(size=(100, 3))).corrwith(df ** 2, method='kendall')
A:pandas.tests.frame.methods.test_cov_corr.frame->float_frame.copy()
A:pandas.tests.frame.methods.test_cov_corr.cov->float_frame.cov()
A:pandas.tests.frame.methods.test_cov_corr.df->pandas.DataFrame(np.random.random(size=(100, 3)))
A:pandas.tests.frame.methods.test_cov_corr.correls->pandas.DataFrame(np.vstack([np.arange(10)] * 3).T).corrwith(df2, axis=1)
A:pandas.tests.frame.methods.test_cov_corr.rs->pandas.DataFrame(np.random.random(size=(100, 3))).corr(meth)
A:pandas.tests.frame.methods.test_cov_corr.df3->DataFrame({'a': [1, 2, 3, 4], 'b': [1, 2, 3, 4]})
A:pandas.tests.frame.methods.test_cov_corr.noise->Series(np.random.randn(len(a)), index=a.index)
A:pandas.tests.frame.methods.test_cov_corr.b->b.reindex(columns=b.columns[::-1], index=b.index[::-1][10:]).reindex(columns=b.columns[::-1], index=b.index[::-1][10:])
A:pandas.tests.frame.methods.test_cov_corr.colcorr->a.corrwith(b, axis=0)
A:pandas.tests.frame.methods.test_cov_corr.rowcorr->a.corrwith(b, axis=1)
A:pandas.tests.frame.methods.test_cov_corr.dropped->a.corrwith(b, axis=1, drop=True)
A:pandas.tests.frame.methods.test_cov_corr.df1->pandas.DataFrame(np.vstack([np.arange(10)] * 3).T)
A:pandas.tests.frame.methods.test_cov_corr.df2->pandas.concat((df2, df2[0]), axis=1)
A:pandas.tests.frame.methods.test_cov_corr.s->pandas.Series([0, 6, 7, 3])
pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr
pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_constant(self,meth)
pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_cov_independent_index_column(self)
pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_int(self)
pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_int_and_boolean(self)
pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_invalid_method(self)
pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_non_numeric(self,float_frame,float_string_frame)
pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_nooverlap(self,meth)
pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorr.test_corr_scipy_method(self,float_frame,method)
pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith
pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith(self,datetime_frame)
pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_dup_cols(self)
pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_index_intersection(self)
pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_index_union(self)
pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_kendall(self)
pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_matches_corrcoef(self)
pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_mixed_dtypes(self)
pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_series(self,datetime_frame)
pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_spearman(self)
pandas.tests.frame.methods.test_cov_corr.TestDataFrameCorrWith.test_corrwith_with_objects(self)
pandas.tests.frame.methods.test_cov_corr.TestDataFrameCov
pandas.tests.frame.methods.test_cov_corr.TestDataFrameCov.test_cov(self,float_frame,float_string_frame)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_explode.py----------------------------------------
A:pandas.tests.frame.methods.test_explode.df->pandas.DataFrame(input_dict, index=input_index)
A:pandas.tests.frame.methods.test_explode.df.columns->list('AA')
A:pandas.tests.frame.methods.test_explode.result->pandas.DataFrame(input_dict, index=input_index).explode('col1')
A:pandas.tests.frame.methods.test_explode.expected->pandas.DataFrame(expected_dict, index=expected_index, dtype=object)
pandas.tests.frame.methods.test_explode.test_basic()
pandas.tests.frame.methods.test_explode.test_duplicate_index(input_dict,input_index,expected_dict,expected_index)
pandas.tests.frame.methods.test_explode.test_error()
pandas.tests.frame.methods.test_explode.test_multi_index_columns()
pandas.tests.frame.methods.test_explode.test_multi_index_rows()
pandas.tests.frame.methods.test_explode.test_usecase()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_nlargest.py----------------------------------------
A:pandas.tests.frame.methods.test_nlargest.result->pandas.DataFrame(columns=pd.MultiIndex.from_product([['x'], ['a', 'b']]), data=[[0.33, 0.13], [0.86, 0.25], [0.25, 0.7], [0.85, 0.91]]).nlargest(3, ('x', 'b'))
A:pandas.tests.frame.methods.test_nlargest.expected->pandas.DataFrame({'a': {3: 2, 4: 3, 5: 3, 6: 3, 7: 3}, 'b': {3: 7, 4: 5, 5: 50, 6: 10, 7: 20}})
A:pandas.tests.frame.methods.test_nlargest.error_msg->error_msg.replace('(', '\\(').replace(')', '\\)').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('[', '\\[').replace(']', '\\]')
A:pandas.tests.frame.methods.test_nlargest.df->pandas.DataFrame(columns=pd.MultiIndex.from_product([['x'], ['a', 'b']]), data=[[0.33, 0.13], [0.86, 0.25], [0.25, 0.7], [0.85, 0.91]])
pandas.tests.frame.methods.test_nlargest.TestNLargestNSmallest
pandas.tests.frame.methods.test_nlargest.TestNLargestNSmallest.test_nlargest_all_dtypes(self,df_main_dtypes)
pandas.tests.frame.methods.test_nlargest.TestNLargestNSmallest.test_nlargest_duplicate_keep_all_ties(self)
pandas.tests.frame.methods.test_nlargest.TestNLargestNSmallest.test_nlargest_duplicates_on_starter_columns(self)
pandas.tests.frame.methods.test_nlargest.TestNLargestNSmallest.test_nlargest_error(self,df_main_dtypes,nselect_method,columns)
pandas.tests.frame.methods.test_nlargest.TestNLargestNSmallest.test_nlargest_multiindex_column_lookup(self)
pandas.tests.frame.methods.test_nlargest.TestNLargestNSmallest.test_nlargest_n(self,df_strings,nselect_method,n,order)
pandas.tests.frame.methods.test_nlargest.TestNLargestNSmallest.test_nlargest_n_duplicate_index(self,df_duplicates,n,order)
pandas.tests.frame.methods.test_nlargest.TestNLargestNSmallest.test_nlargest_n_identical_values(self)
pandas.tests.frame.methods.test_nlargest.df_duplicates()
pandas.tests.frame.methods.test_nlargest.df_main_dtypes()
pandas.tests.frame.methods.test_nlargest.df_strings()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_sort_index.py----------------------------------------
A:pandas.tests.frame.methods.test_sort_index.df->DataFrame(original_dict, index=mi)
A:pandas.tests.frame.methods.test_sort_index.sorted_df->DataFrame(original_dict, index=mi).sort_index(kind='quicksort', ascending=False, na_position='first')
A:pandas.tests.frame.methods.test_sort_index.expected->pandas.IntervalIndex.from_tuples([(-3.0, -0.5), (-0.5, 0.0), (0.0, 0.5), (0.5, 3.0)], closed='right')
A:pandas.tests.frame.methods.test_sort_index.result->pandas.concat([y, x1, x2], axis=1, keys=['Y', 'X1', 'X2']).groupby(['X1', 'X2'], observed=True).mean().unstack()
A:pandas.tests.frame.methods.test_sort_index.frame->DataFrame(np.arange(16).reshape(4, 4), index=[1, 2, 3, 4], columns=['A', 'B', 'C', 'D'])
A:pandas.tests.frame.methods.test_sort_index.a_id->id(unordered['A'])
A:pandas.tests.frame.methods.test_sort_index.A->A.take(indexer).take(indexer)
A:pandas.tests.frame.methods.test_sort_index.B->B.take(indexer).take(indexer)
A:pandas.tests.frame.methods.test_sort_index.indexer->numpy.random.permutation(100)
A:pandas.tests.frame.methods.test_sort_index.ex_indexer->numpy.lexsort((df.B.max() - df.B, df.A))
A:pandas.tests.frame.methods.test_sort_index.idf->DataFrame(original_dict, index=mi).set_index(['A', 'B'])
A:pandas.tests.frame.methods.test_sort_index.mi->pandas.MultiIndex.from_tuples([[2, 1], [3, 4]], names=list('AB'))
A:pandas.tests.frame.methods.test_sort_index.expected_mi->pandas.MultiIndex.from_tuples([[1, 1, 1], [2, 1, 3], [2, 1, 2]], names=list('ABC'))
A:pandas.tests.frame.methods.test_sort_index.y->Series(np.random.randn(100))
A:pandas.tests.frame.methods.test_sort_index.x1->Series(np.sign(np.random.randn(100)))
A:pandas.tests.frame.methods.test_sort_index.x2->pandas.cut(Series(np.random.randn(100)), bins=[-3, -0.5, 0, 0.5, 3])
A:pandas.tests.frame.methods.test_sort_index.model->pandas.concat([y, x1, x2], axis=1, keys=['Y', 'X1', 'X2'])
A:pandas.tests.frame.methods.test_sort_index.expected_df->DataFrame(sorted_dict, index=output_index)
A:pandas.tests.frame.methods.test_sort_index.result_df->DataFrame(original_dict, index=mi).sort_index(**kwargs)
pandas.tests.frame.methods.test_sort_index.TestDataFrameSortIndex
pandas.tests.frame.methods.test_sort_index.TestDataFrameSortIndex.test_sort_index(self)
pandas.tests.frame.methods.test_sort_index.TestDataFrameSortIndex.test_sort_index_categorical_index(self)
pandas.tests.frame.methods.test_sort_index.TestDataFrameSortIndex.test_sort_index_different_sortorder(self)
pandas.tests.frame.methods.test_sort_index.TestDataFrameSortIndex.test_sort_index_ignore_index(self,inplace,original_dict,sorted_dict,ascending,ignore_index,output_index)
pandas.tests.frame.methods.test_sort_index.TestDataFrameSortIndex.test_sort_index_ignore_index_multi_index(self,inplace,original_dict,sorted_dict,ascending,ignore_index,output_index)
pandas.tests.frame.methods.test_sort_index.TestDataFrameSortIndex.test_sort_index_inplace(self)
pandas.tests.frame.methods.test_sort_index.TestDataFrameSortIndex.test_sort_index_intervalindex(self)
pandas.tests.frame.methods.test_sort_index.TestDataFrameSortIndex.test_sort_index_level(self)
pandas.tests.frame.methods.test_sort_index.TestDataFrameSortIndex.test_sort_index_multi_index(self)
pandas.tests.frame.methods.test_sort_index.TestDataFrameSortIndex.test_sort_index_multiindex(self,level)
pandas.tests.frame.methods.test_sort_index.TestDataFrameSortIndex.test_sort_index_nan(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_append.py----------------------------------------
A:pandas.tests.frame.methods.test_append.df->pandas.DataFrame(data, dtype=dtype)
A:pandas.tests.frame.methods.test_append.result->DataFrame({'bar': Timestamp('20130101')}, index=range(1)).append(df2)
A:pandas.tests.frame.methods.test_append.expected->pandas.Series(data, name=0, dtype=dtype)
A:pandas.tests.frame.methods.test_append.df1->DataFrame({'bar': Timestamp('20130101')}, index=range(1))
A:pandas.tests.frame.methods.test_append.df2->DataFrame({'bar': 1}, index=range(1, 2), dtype=object)
pandas.tests.frame.methods.test_append.TestDataFrameAppend
pandas.tests.frame.methods.test_append.TestDataFrameAppend.test_append_dtypes(self)
pandas.tests.frame.methods.test_append.TestDataFrameAppend.test_append_empty_dataframe(self)
pandas.tests.frame.methods.test_append.TestDataFrameAppend.test_append_empty_list(self)
pandas.tests.frame.methods.test_append.TestDataFrameAppend.test_append_list_of_series_dicts(self)
pandas.tests.frame.methods.test_append.TestDataFrameAppend.test_append_missing_cols(self)
pandas.tests.frame.methods.test_append.TestDataFrameAppend.test_append_series_dict(self)
pandas.tests.frame.methods.test_append.TestDataFrameAppend.test_append_timestamps_aware_or_naive(self,tz_naive_fixture,timestamp)
pandas.tests.frame.methods.test_append.TestDataFrameAppend.test_other_dtypes(self,data,dtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_quantile.py----------------------------------------
A:pandas.tests.frame.methods.test_quantile.s->pandas.Series(pd.arrays.SparseArray([1, 2]))
A:pandas.tests.frame.methods.test_quantile.s1->pandas.Series(pd.arrays.SparseArray([3, 4]))
A:pandas.tests.frame.methods.test_quantile.df->pandas.DataFrame(pd.date_range('1/1/18', periods=5))
A:pandas.tests.frame.methods.test_quantile.result->pandas.DataFrame(pd.date_range('1/1/18', periods=5)).quantile([0.5])
A:pandas.tests.frame.methods.test_quantile.expected->pandas.DataFrame([], index=[0.5], columns=[])
A:pandas.tests.frame.methods.test_quantile.q->pandas.DataFrame(pd.date_range('1/1/18', periods=5)).quantile(0.1)
A:pandas.tests.frame.methods.test_quantile.rs->pandas.DataFrame(pd.date_range('1/1/18', periods=5)).quantile(0.5)
A:pandas.tests.frame.methods.test_quantile.xp->pandas.DataFrame(pd.date_range('1/1/18', periods=5)).median().rename(0.5)
A:pandas.tests.frame.methods.test_quantile.exp->DataFrame([[np.nan, np.nan]], columns=['a', 'b'], index=[0.5])
A:pandas.tests.frame.methods.test_quantile.q1->pandas.DataFrame(pd.date_range('1/1/18', periods=5)).quantile(0.1, axis=0, interpolation='linear')
A:pandas.tests.frame.methods.test_quantile.df['c']->pandas.to_datetime(['2011', '2012'])
A:pandas.tests.frame.methods.test_quantile.res->pandas.DataFrame(pd.date_range('1/1/18', periods=5)).quantile([0.5])
pandas.tests.frame.methods.test_quantile.TestDataFrameQuantile
pandas.tests.frame.methods.test_quantile.TestDataFrameQuantile.test_quantile(self,datetime_frame)
pandas.tests.frame.methods.test_quantile.TestDataFrameQuantile.test_quantile_axis_mixed(self)
pandas.tests.frame.methods.test_quantile.TestDataFrameQuantile.test_quantile_axis_parameter(self)
pandas.tests.frame.methods.test_quantile.TestDataFrameQuantile.test_quantile_box(self)
pandas.tests.frame.methods.test_quantile.TestDataFrameQuantile.test_quantile_datetime(self)
pandas.tests.frame.methods.test_quantile.TestDataFrameQuantile.test_quantile_dt(self)
pandas.tests.frame.methods.test_quantile.TestDataFrameQuantile.test_quantile_empty_no_columns(self)
pandas.tests.frame.methods.test_quantile.TestDataFrameQuantile.test_quantile_empty_no_rows(self)
pandas.tests.frame.methods.test_quantile.TestDataFrameQuantile.test_quantile_interpolation(self)
pandas.tests.frame.methods.test_quantile.TestDataFrameQuantile.test_quantile_interpolation_datetime(self,datetime_frame)
pandas.tests.frame.methods.test_quantile.TestDataFrameQuantile.test_quantile_interpolation_dt(self,datetime_frame)
pandas.tests.frame.methods.test_quantile.TestDataFrameQuantile.test_quantile_interpolation_int(self,int_frame)
pandas.tests.frame.methods.test_quantile.TestDataFrameQuantile.test_quantile_invalid(self,datetime_frame)
pandas.tests.frame.methods.test_quantile.TestDataFrameQuantile.test_quantile_multi(self)
pandas.tests.frame.methods.test_quantile.TestDataFrameQuantile.test_quantile_nan(self)
pandas.tests.frame.methods.test_quantile.TestDataFrameQuantile.test_quantile_nat(self)
pandas.tests.frame.methods.test_quantile.TestDataFrameQuantile.test_quantile_sparse(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_clip.py----------------------------------------
A:pandas.tests.frame.methods.test_clip.median->float_frame.median().median()
A:pandas.tests.frame.methods.test_clip.original->simple_frame.copy(deep=True)
A:pandas.tests.frame.methods.test_clip.double->float_frame.clip(upper=median, lower=median)
A:pandas.tests.frame.methods.test_clip.frame_copy->float_frame.copy()
A:pandas.tests.frame.methods.test_clip.df->DataFrame({'col_0': [1, 2, 3], 'col_1': [4, 5, 6], 'col_2': [7, 8, 9]})
A:pandas.tests.frame.methods.test_clip.clipped_df->DataFrame({'col_0': [1, 2, 3], 'col_1': [4, 5, 6], 'col_2': [7, 8, 9]}).clip(lb, ub, axis=axis)
A:pandas.tests.frame.methods.test_clip.result->DataFrame({'col_0': [1, 2, 3], 'col_1': [4, 5, 6], 'col_2': [7, 8, 9]}).clip(lower=[4, 5, np.nan], axis=1)
A:pandas.tests.frame.methods.test_clip.expected->DataFrame({'col_0': [4, 4, 4], 'col_1': [5, 5, 6], 'col_2': [np.nan, np.nan, np.nan]})
A:pandas.tests.frame.methods.test_clip.lb->DataFrame(np.random.randn(1000, 2))
A:pandas.tests.frame.methods.test_clip.df1->DataFrame(np.random.randn(1000, 4), columns=['A', 'B', 'C', 'D'])
A:pandas.tests.frame.methods.test_clip.df2->DataFrame(np.random.randn(1000, 4), columns=['D', 'A', 'B', 'C'])
A:pandas.tests.frame.methods.test_clip.df3->DataFrame(df2.values - 1, columns=['B', 'D', 'C', 'A'])
A:pandas.tests.frame.methods.test_clip.result_upper->DataFrame(np.random.randn(1000, 4), columns=['A', 'B', 'C', 'D']).clip(lower=0, upper=df2)
A:pandas.tests.frame.methods.test_clip.expected_upper->DataFrame(np.random.randn(1000, 4), columns=['A', 'B', 'C', 'D']).clip(lower=0, upper=df2[df1.columns])
A:pandas.tests.frame.methods.test_clip.result_lower->DataFrame(np.random.randn(1000, 4), columns=['A', 'B', 'C', 'D']).clip(lower=df3, upper=3)
A:pandas.tests.frame.methods.test_clip.expected_lower->DataFrame(np.random.randn(1000, 4), columns=['A', 'B', 'C', 'D']).clip(lower=df3[df1.columns], upper=3)
A:pandas.tests.frame.methods.test_clip.result_lower_upper->DataFrame(np.random.randn(1000, 4), columns=['A', 'B', 'C', 'D']).clip(lower=df3, upper=df2)
A:pandas.tests.frame.methods.test_clip.expected_lower_upper->DataFrame(np.random.randn(1000, 4), columns=['A', 'B', 'C', 'D']).clip(lower=df3[df1.columns], upper=df2[df1.columns])
pandas.tests.frame.methods.test_clip.TestDataFrameClip
pandas.tests.frame.methods.test_clip.TestDataFrameClip.test_clip(self,float_frame)
pandas.tests.frame.methods.test_clip.TestDataFrameClip.test_clip_against_frame(self,axis)
pandas.tests.frame.methods.test_clip.TestDataFrameClip.test_clip_against_list_like(self,simple_frame,inplace,lower,axis,res)
pandas.tests.frame.methods.test_clip.TestDataFrameClip.test_clip_against_series(self,inplace)
pandas.tests.frame.methods.test_clip.TestDataFrameClip.test_clip_against_unordered_columns(self)
pandas.tests.frame.methods.test_clip.TestDataFrameClip.test_clip_mixed_numeric(self)
pandas.tests.frame.methods.test_clip.TestDataFrameClip.test_clip_with_na_args(self,float_frame)
pandas.tests.frame.methods.test_clip.TestDataFrameClip.test_dataframe_clip(self)
pandas.tests.frame.methods.test_clip.TestDataFrameClip.test_inplace_clip(self,float_frame)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_truncate.py----------------------------------------
A:pandas.tests.frame.methods.test_truncate.truncated->datetime_frame.truncate(index[5], index[10])
A:pandas.tests.frame.methods.test_truncate.df->pandas.DataFrame({3: np.random.randn(5), 20: np.random.randn(5), 2: np.random.randn(5), 0: np.random.randn(5)}, columns=[3, 20, 2, 0])
A:pandas.tests.frame.methods.test_truncate.rng->pandas.date_range('2011-01-01', '2012-01-01', freq='W')
A:pandas.tests.frame.methods.test_truncate.ts->pandas.DataFrame({'A': np.random.randn(len(rng)), 'B': np.random.randn(len(rng))}, index=rng)
pandas.tests.frame.methods.test_truncate.TestDataFrameTruncate
pandas.tests.frame.methods.test_truncate.TestDataFrameTruncate.test_truncate(self,datetime_frame)
pandas.tests.frame.methods.test_truncate.TestDataFrameTruncate.test_truncate_copy(self,datetime_frame)
pandas.tests.frame.methods.test_truncate.TestDataFrameTruncate.test_truncate_nonsortedindex(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_pct_change.py----------------------------------------
A:pandas.tests.frame.methods.test_pct_change.pnl->DataFrame([np.arange(0, 40, 10), np.arange(0, 40, 10), np.arange(0, 40, 10)]).astype(np.float64)
A:pandas.tests.frame.methods.test_pct_change.result->DataFrame({0: [np.nan, 1, 2, 3, 9, 18], 1: [0, 1, np.nan, 3, 9, 18]}, index=['a', 'b'] * 3).pct_change(fill_method=fill_method)
A:pandas.tests.frame.methods.test_pct_change.rs->datetime_frame.pct_change(freq='5D')
A:pandas.tests.frame.methods.test_pct_change.filled->datetime_frame.fillna(method='pad')
A:pandas.tests.frame.methods.test_pct_change.s->Series([1.0, 1.5, np.nan, 2.5, 3.0])
A:pandas.tests.frame.methods.test_pct_change.df->DataFrame({'a': s, 'b': s})
A:pandas.tests.frame.methods.test_pct_change.chg->DataFrame({'a': s, 'b': s}).pct_change()
A:pandas.tests.frame.methods.test_pct_change.expected->DataFrame({0: [np.nan, np.nan, 1.0, 0.5, 2.0, 1.0], 1: second_column}, index=['a', 'b'] * 3)
A:pandas.tests.frame.methods.test_pct_change.edf->DataFrame({'a': expected, 'b': expected})
A:pandas.tests.frame.methods.test_pct_change.rs_freq->DataFrame(index=datetime_frame.index, columns=datetime_frame.columns).pct_change(freq=freq, fill_method=fill_method, limit=limit)
A:pandas.tests.frame.methods.test_pct_change.rs_periods->DataFrame(index=datetime_frame.index, columns=datetime_frame.columns).pct_change(periods, fill_method=fill_method, limit=limit)
A:pandas.tests.frame.methods.test_pct_change.empty_ts->DataFrame(index=datetime_frame.index, columns=datetime_frame.columns)
A:pandas.tests.frame.methods.test_pct_change.data->DataFrame({0: [np.nan, 1, 2, 3, 9, 18], 1: [0, 1, np.nan, 3, 9, 18]}, index=['a', 'b'] * 3)
pandas.tests.frame.methods.test_pct_change.TestDataFramePctChange
pandas.tests.frame.methods.test_pct_change.TestDataFramePctChange.test_pct_change(self,datetime_frame)
pandas.tests.frame.methods.test_pct_change.TestDataFramePctChange.test_pct_change_numeric(self)
pandas.tests.frame.methods.test_pct_change.TestDataFramePctChange.test_pct_change_periods_freq(self,datetime_frame,freq,periods,fill_method,limit)
pandas.tests.frame.methods.test_pct_change.TestDataFramePctChange.test_pct_change_shift_over_nas(self)
pandas.tests.frame.methods.test_pct_change.test_pct_change_with_duplicated_indices(fill_method)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_describe.py----------------------------------------
A:pandas.tests.frame.methods.test_describe.df->pandas.DataFrame({'x': [1]})
A:pandas.tests.frame.methods.test_describe.result->pandas.DataFrame({'x': [1]}).describe(percentiles=pct)
A:pandas.tests.frame.methods.test_describe.expected->DataFrame({'x': [1.0, 1.0, np.NaN, 1.0, *[1.0 for _ in pct], 1.0]}, index=['count', 'mean', 'std', 'min', '0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%', 'max'])
A:pandas.tests.frame.methods.test_describe.cat_labels->Categorical(labels, labels)
A:pandas.tests.frame.methods.test_describe.df['value_group']->pandas.cut(df.value, range(0, 10500, 500), right=False, labels=cat_labels)
A:pandas.tests.frame.methods.test_describe.cat->Series(Categorical(['a', 'b', 'c', 'c']))
A:pandas.tests.frame.methods.test_describe.s->Series(cat)
A:pandas.tests.frame.methods.test_describe.df3->DataFrame({'cat': cat, 's': ['a', 'b', 'c', 'c']})
A:pandas.tests.frame.methods.test_describe.columns->pandas.DatetimeIndex(['2011-01-01', '2011-02-01', '2011-03-01'], freq='MS', tz='US/Eastern', name='XXX')
A:pandas.tests.frame.methods.test_describe.exp_columns->pandas.DatetimeIndex(['2011-01-01', '2011-02-01'], freq='MS', tz='US/Eastern', name='XXX')
A:pandas.tests.frame.methods.test_describe.t1->pandas.timedelta_range('1 days', freq='D', periods=5)
A:pandas.tests.frame.methods.test_describe.t2->pandas.timedelta_range('1 hours', freq='H', periods=5)
A:pandas.tests.frame.methods.test_describe.s1->Series(range(5))
A:pandas.tests.frame.methods.test_describe.start->Timestamp(2018, 1, 1)
A:pandas.tests.frame.methods.test_describe.end->Timestamp(2018, 1, 5)
A:pandas.tests.frame.methods.test_describe.s2->Series(date_range(start, end, tz=tz))
A:pandas.tests.frame.methods.test_describe.pct->numpy.linspace(0, 1, 10 + 1)
pandas.tests.frame.methods.test_describe.TestDataFrameDescribe
pandas.tests.frame.methods.test_describe.TestDataFrameDescribe.test_describe_bool_frame(self)
pandas.tests.frame.methods.test_describe.TestDataFrameDescribe.test_describe_bool_in_mixed_frame(self)
pandas.tests.frame.methods.test_describe.TestDataFrameDescribe.test_describe_categorical(self)
pandas.tests.frame.methods.test_describe.TestDataFrameDescribe.test_describe_categorical_columns(self)
pandas.tests.frame.methods.test_describe.TestDataFrameDescribe.test_describe_datetime_columns(self)
pandas.tests.frame.methods.test_describe.TestDataFrameDescribe.test_describe_dt_columns(self)
pandas.tests.frame.methods.test_describe.TestDataFrameDescribe.test_describe_empty_categorical_column(self)
pandas.tests.frame.methods.test_describe.TestDataFrameDescribe.test_describe_empty_object(self)
pandas.tests.frame.methods.test_describe.TestDataFrameDescribe.test_describe_percentiles_integer_idx(self)
pandas.tests.frame.methods.test_describe.TestDataFrameDescribe.test_describe_timedelta_values(self)
pandas.tests.frame.methods.test_describe.TestDataFrameDescribe.test_describe_tz_values(self,tz_naive_fixture)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_to_records.py----------------------------------------
A:pandas.tests.frame.methods.test_to_records.df->DataFrame({'datetime': dr}, index=dr)
A:pandas.tests.frame.methods.test_to_records.data->numpy.zeros((8, 4))
A:pandas.tests.frame.methods.test_to_records.headers->Parser().parsestr('From: <user@example.com>\nTo: <someone_else@example.com>\nSubject: Test message\n\nBody would go here\n')
A:pandas.tests.frame.methods.test_to_records.frame->pandas.DataFrame.from_records([headers])
A:pandas.tests.frame.methods.test_to_records.rs->DataFrame({'datetime': dr}, index=dr).to_records()
A:pandas.tests.frame.methods.test_to_records.df.index->pandas.MultiIndex.from_tuples([('a', 'x'), ('a', 'y'), ('b', 'z')])
A:pandas.tests.frame.methods.test_to_records.result->DataFrame({'datetime': dr}, index=dr).tz_convert('UTC').to_records()
A:pandas.tests.frame.methods.test_to_records.expected->DataFrame({'datetime': dr}, index=dr).to_records()
A:pandas.tests.frame.methods.test_to_records.self.d->kwargs.copy()
A:pandas.tests.frame.methods.test_to_records.dtype_mappings->dict(column_dtypes=DictLike(**{'A': np.int8, 'B': np.float32}), index_dtypes='<U2')
A:pandas.tests.frame.methods.test_to_records.dr->date_range('2016-01-01', periods=10, freq='S', tz=tz)
pandas.tests.frame.methods.test_to_records.TestDataFrameToRecords
pandas.tests.frame.methods.test_to_records.TestDataFrameToRecords.test_to_records_datetimeindex_with_tz(self,tz)
pandas.tests.frame.methods.test_to_records.TestDataFrameToRecords.test_to_records_dict_like(self)
pandas.tests.frame.methods.test_to_records.TestDataFrameToRecords.test_to_records_dt64(self)
pandas.tests.frame.methods.test_to_records.TestDataFrameToRecords.test_to_records_dtindex_with_tz(self,tz)
pandas.tests.frame.methods.test_to_records.TestDataFrameToRecords.test_to_records_dtype(self,kwargs,expected)
pandas.tests.frame.methods.test_to_records.TestDataFrameToRecords.test_to_records_dtype_mi(self,df,kwargs,expected)
pandas.tests.frame.methods.test_to_records.TestDataFrameToRecords.test_to_records_floats(self)
pandas.tests.frame.methods.test_to_records.TestDataFrameToRecords.test_to_records_index_name(self)
pandas.tests.frame.methods.test_to_records.TestDataFrameToRecords.test_to_records_with_Mapping_type(self)
pandas.tests.frame.methods.test_to_records.TestDataFrameToRecords.test_to_records_with_categorical(self)
pandas.tests.frame.methods.test_to_records.TestDataFrameToRecords.test_to_records_with_multindex(self)
pandas.tests.frame.methods.test_to_records.TestDataFrameToRecords.test_to_records_with_unicode_column_names(self)
pandas.tests.frame.methods.test_to_records.TestDataFrameToRecords.test_to_records_with_unicode_index(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/frame/methods/test_asof.py----------------------------------------
A:pandas.tests.frame.methods.test_asof.rng->date_range('1/1/1990', periods=N, freq='53s')
A:pandas.tests.frame.methods.test_asof.dates->date_range('1/1/1990', periods=N * 3, freq='25s')
A:pandas.tests.frame.methods.test_asof.result->DataFrame(data=[1, 2], index=[Timestamp('2018-01-01 21:00:05.001+00:00'), Timestamp('2018-01-01 22:35:10.550+00:00')]).asof(dates)
A:pandas.tests.frame.methods.test_asof.df->DataFrame(data=[1, 2], index=[Timestamp('2018-01-01 21:00:05.001+00:00'), Timestamp('2018-01-01 22:35:10.550+00:00')])
A:pandas.tests.frame.methods.test_asof.expected->Series(np.nan, index=['A', 'B'], name=3)
pandas.tests.frame.methods.test_asof.TestFrameAsof
pandas.tests.frame.methods.test_asof.TestFrameAsof.test_all_nans(self,date_range_frame)
pandas.tests.frame.methods.test_asof.TestFrameAsof.test_basic(self,date_range_frame)
pandas.tests.frame.methods.test_asof.TestFrameAsof.test_is_copy(self,date_range_frame)
pandas.tests.frame.methods.test_asof.TestFrameAsof.test_missing(self,date_range_frame)
pandas.tests.frame.methods.test_asof.TestFrameAsof.test_subset(self,date_range_frame)
pandas.tests.frame.methods.test_asof.TestFrameAsof.test_time_zone_aware_index(self,stamp,expected)
pandas.tests.frame.methods.test_asof.date_range_frame()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/test_datetime.py----------------------------------------
A:pandas.tests.indexing.test_datetime.mask->numpy.array([True, False, True, False])
A:pandas.tests.indexing.test_datetime.idx->pandas.date_range(start, end, closed='left', freq='H')
A:pandas.tests.indexing.test_datetime.df->DataFrame({'a': [10]}, index=index)
A:pandas.tests.indexing.test_datetime.result->pandas.DataFrame(index=idx, columns=['value'])
A:pandas.tests.indexing.test_datetime.dr->date_range('20130110', periods=3)
A:pandas.tests.indexing.test_datetime.expected->pandas.Series([0, 1, 2], pd.DatetimeIndex(['2019-01-01', '2019-01-01T06:00:00', '2019-01-02'])).take(positions)
A:pandas.tests.indexing.test_datetime.df.time->DataFrame({'a': [10]}, index=index).set_index('time').index.tz_localize('UTC')
A:pandas.tests.indexing.test_datetime.v->df[df.new_col == 'new'].set_index('time').index.tz_convert('US/Pacific')
A:pandas.tests.indexing.test_datetime.df2->DataFrame({'a': [10]}, index=index).copy()
A:pandas.tests.indexing.test_datetime.index->pandas.DatetimeIndex(data, dtype='datetime64[ns, America/Chicago]')
A:pandas.tests.indexing.test_datetime.ser->pandas.period_range(start='2017-01-01', end='2018-01-01', freq='M').to_series()
A:pandas.tests.indexing.test_datetime.dt1->Timestamp('20130101 09:00:00')
A:pandas.tests.indexing.test_datetime.dt2->Timestamp('20130101 10:00:00')
A:pandas.tests.indexing.test_datetime.exp->Series([0.2, 0.2, 0.1], index=pd.PeriodIndex(keys, name='idx'), name='s')
A:pandas.tests.indexing.test_datetime.series2->pandas.Series([0, 1, 2, 3, 4], index=idx)
A:pandas.tests.indexing.test_datetime.t_1->pandas.Timestamp('2017-10-29 02:30:00+02:00', tz='Europe/Berlin', freq='30min')
A:pandas.tests.indexing.test_datetime.t_2->pandas.Timestamp('2017-10-29 02:00:00+01:00', tz='Europe/Berlin', freq='30min')
A:pandas.tests.indexing.test_datetime.base->datetime(2015, 11, 1, tzinfo=tz.gettz('US/Pacific'))
A:pandas.tests.indexing.test_datetime.start->pandas.Timestamp('2017-10-29 00:00:00+0200', tz='Europe/Madrid')
A:pandas.tests.indexing.test_datetime.end->pandas.Timestamp('2017-10-29 03:00:00+0100', tz='Europe/Madrid')
A:pandas.tests.indexing.test_datetime.ts->pandas.Timestamp('2016-10-10 03:00:00', tz='Europe/Madrid')
A:pandas.tests.indexing.test_datetime.ix->pandas.period_range(start='2017-01-01', end='2018-01-01', freq='M')
A:pandas.tests.indexing.test_datetime.s->pandas.Series([0, 1, 2], pd.DatetimeIndex(['2019-01-01', '2019-01-01T06:00:00', '2019-01-02']))
pandas.tests.indexing.test_datetime.TestDatetimeIndex
pandas.tests.indexing.test_datetime.TestDatetimeIndex.test_consistency_with_tz_aware_scalar(self)
pandas.tests.indexing.test_datetime.TestDatetimeIndex.test_getitem_slice_date(self,slice_,positions)
pandas.tests.indexing.test_datetime.TestDatetimeIndex.test_indexing_with_datetime_tz(self)
pandas.tests.indexing.test_datetime.TestDatetimeIndex.test_indexing_with_datetimeindex_tz(self)
pandas.tests.indexing.test_datetime.TestDatetimeIndex.test_loc_getitem_across_dst(self)
pandas.tests.indexing.test_datetime.TestDatetimeIndex.test_loc_incremental_setitem_with_dst(self)
pandas.tests.indexing.test_datetime.TestDatetimeIndex.test_loc_label_slicing(self)
pandas.tests.indexing.test_datetime.TestDatetimeIndex.test_loc_setitem_datetime(self)
pandas.tests.indexing.test_datetime.TestDatetimeIndex.test_loc_setitem_with_existing_dst(self)
pandas.tests.indexing.test_datetime.TestDatetimeIndex.test_loc_str_slicing(self)
pandas.tests.indexing.test_datetime.TestDatetimeIndex.test_nanosecond_getitem_setitem_with_tz(self)
pandas.tests.indexing.test_datetime.TestDatetimeIndex.test_partial_setting_with_datetimelike_dtype(self)
pandas.tests.indexing.test_datetime.TestDatetimeIndex.test_series_partial_set_datetime(self)
pandas.tests.indexing.test_datetime.TestDatetimeIndex.test_series_partial_set_period(self)
pandas.tests.indexing.test_datetime.TestDatetimeIndex.test_setitem_with_datetime_tz(self)
pandas.tests.indexing.test_dt.TestDatetimeIndex
pandas.tests.indexing.test_dt.TestDatetimeIndex.test_consistency_with_tz_aware_scalar(self)
pandas.tests.indexing.test_dt.TestDatetimeIndex.test_getitem_slice_date(self,slice_,positions)
pandas.tests.indexing.test_dt.TestDatetimeIndex.test_indexing_with_dt_tz(self)
pandas.tests.indexing.test_dt.TestDatetimeIndex.test_indexing_with_dtindex_tz(self)
pandas.tests.indexing.test_dt.TestDatetimeIndex.test_loc_getitem_across_dst(self)
pandas.tests.indexing.test_dt.TestDatetimeIndex.test_loc_incremental_setitem_with_dst(self)
pandas.tests.indexing.test_dt.TestDatetimeIndex.test_loc_label_slicing(self)
pandas.tests.indexing.test_dt.TestDatetimeIndex.test_loc_setitem_dt(self)
pandas.tests.indexing.test_dt.TestDatetimeIndex.test_loc_setitem_with_existing_dst(self)
pandas.tests.indexing.test_dt.TestDatetimeIndex.test_loc_str_slicing(self)
pandas.tests.indexing.test_dt.TestDatetimeIndex.test_nanosecond_getitem_setitem_with_tz(self)
pandas.tests.indexing.test_dt.TestDatetimeIndex.test_partial_setting_with_dtlike_dtype(self)
pandas.tests.indexing.test_dt.TestDatetimeIndex.test_series_partial_set_dt(self)
pandas.tests.indexing.test_dt.TestDatetimeIndex.test_series_partial_set_period(self)
pandas.tests.indexing.test_dt.TestDatetimeIndex.test_setitem_with_dt_tz(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/test_partial.py----------------------------------------
A:pandas.tests.indexing.test_partial.s_orig->Series([1, 2, 3])
A:pandas.tests.indexing.test_partial.s->Series(dtype=object)
A:pandas.tests.indexing.test_partial.expected->DataFrame(dict(x=[1], y=[np.nan]))
A:pandas.tests.indexing.test_partial.df_orig->DataFrame(np.random.randn(8, 4), index=dates, columns=['A', 'B', 'C', 'D'])
A:pandas.tests.indexing.test_partial.df->DataFrame(columns=['x', 'y'])
A:pandas.tests.indexing.test_partial.df['B']->df['B'].astype(np.float64).astype(np.float64)
A:pandas.tests.indexing.test_partial.dates->date_range('1/1/2000', periods=8)
A:pandas.tests.indexing.test_partial.exp_other->DataFrame({0: 7}, index=[dates[-1] + dates.freq])
A:pandas.tests.indexing.test_partial.df.loc[0]->Series(1, index=['B'])
A:pandas.tests.indexing.test_partial.exp->pandas._testing.makeTimeDataFrame().append(Series(df.iloc[0], name='a'))
A:pandas.tests.indexing.test_partial.ser->Series([0.1, 0.2], index=idx, name='s')
A:pandas.tests.indexing.test_partial.result->y.reindex(columns=['A', 'B', 'C'])
A:pandas.tests.indexing.test_partial.idx->Index([1, 2, 3, 4], dtype='int64', name='idx')
A:pandas.tests.indexing.test_partial.exp_idx->Index([2, 2, 1, 1], dtype='int64', name='idx')
A:pandas.tests.indexing.test_partial.orig->pandas._testing.makeTimeDataFrame()
A:pandas.tests.indexing.test_partial.df.loc[1]->Series([1], index=['foo'])
A:pandas.tests.indexing.test_partial.df['foo']->range(len(df))
A:pandas.tests.indexing.test_partial.expected['foo']->expected['foo'].astype('float64').astype('float64')
A:pandas.tests.indexing.test_partial.df2->DataFrame()
A:pandas.tests.indexing.test_partial.df2[1]->Series([1], index=['foo'])
A:pandas.tests.indexing.test_partial.df.loc[:, 1]->Series([1], index=['foo'])
A:pandas.tests.indexing.test_partial.df[0]->Series(1, index=range(4))
A:pandas.tests.indexing.test_partial.df.loc[:, 0]->Series(1, index=range(4))
A:pandas.tests.indexing.test_partial.expected['A']->expected['A'].astype('int64').astype('int64')
A:pandas.tests.indexing.test_partial.expected['B']->expected['B'].astype('float64').astype('float64')
A:pandas.tests.indexing.test_partial.expected['New']->expected['New'].astype('float64').astype('float64')
A:pandas.tests.indexing.test_partial.expected['d']->expected['d'].astype('int64').astype('int64')
A:pandas.tests.indexing.test_partial.expected['C']->expected['C'].astype('float64').astype('float64')
pandas.tests.indexing.test_partial.TestPartialSetting
pandas.tests.indexing.test_partial.TestPartialSetting.test_partial_set_empty_frame(self)
pandas.tests.indexing.test_partial.TestPartialSetting.test_partial_set_empty_frame_empty_consistencies(self)
pandas.tests.indexing.test_partial.TestPartialSetting.test_partial_set_empty_frame_empty_copy_assignment(self)
pandas.tests.indexing.test_partial.TestPartialSetting.test_partial_set_empty_frame_row(self)
pandas.tests.indexing.test_partial.TestPartialSetting.test_partial_set_empty_frame_set_series(self)
pandas.tests.indexing.test_partial.TestPartialSetting.test_partial_set_empty_series(self)
pandas.tests.indexing.test_partial.TestPartialSetting.test_partial_set_invalid(self)
pandas.tests.indexing.test_partial.TestPartialSetting.test_partial_setting(self)
pandas.tests.indexing.test_partial.TestPartialSetting.test_partial_setting_mixed_dtype(self)
pandas.tests.indexing.test_partial.TestPartialSetting.test_series_partial_set(self)
pandas.tests.indexing.test_partial.TestPartialSetting.test_series_partial_set_with_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/test_iloc.py----------------------------------------
A:pandas.tests.indexing.test_iloc.df->DataFrame([[1, 2], [3, 4]])
A:pandas.tests.indexing.test_iloc.dfl->DataFrame(np.random.randn(5, 2), columns=list('AB'))
A:pandas.tests.indexing.test_iloc.s->Series([1, 2])
A:pandas.tests.indexing.test_iloc.array_with_neg_numbers->numpy.array([1, 2, -1])
A:pandas.tests.indexing.test_iloc.array_copy->numpy.array([1, 2, -1]).copy()
A:pandas.tests.indexing.test_iloc.expected->DataFrame(dict(A=['a', 'b', 'x', 'y', 'e'], B=[5, 6, 11, 13, 9]))
A:pandas.tests.indexing.test_iloc.df1->DataFrame([{'A': None, 'B': 1}, {'A': 2, 'B': 2}])
A:pandas.tests.indexing.test_iloc.df2->concat([df2, 2 * df2, 3 * df2])
A:pandas.tests.indexing.test_iloc.msg->'Boolean index has wrong length: {} instead of {}'.format(len(index), len(s))
A:pandas.tests.indexing.test_iloc.exp->concat([df2, df1.iloc[:, [0]]], axis=1)
A:pandas.tests.indexing.test_iloc.s_orig->Series([0, 1, 2, 3])
A:pandas.tests.indexing.test_iloc.expected['A']->expected['A'].astype('float64').astype('float64')
A:pandas.tests.indexing.test_iloc.inds->numpy.isnan(df.iloc[:, 0])
A:pandas.tests.indexing.test_iloc.df.iloc[[1, 0], [0, 1]]->DataFrame([[1, 2], [3, 4]]).iloc[[1, 0], [0, 1]].reset_index(drop=True)
A:pandas.tests.indexing.test_iloc.arr->numpy.random.randn(6, 4)
A:pandas.tests.indexing.test_iloc.index->list(range(0, 12, 2))
A:pandas.tests.indexing.test_iloc.columns->list(range(0, 8, 2))
A:pandas.tests.indexing.test_iloc.df.columns->list('aaaa')
A:pandas.tests.indexing.test_iloc.mask.index->range(len(mask))
A:pandas.tests.indexing.test_iloc.locs->numpy.arange(4)
A:pandas.tests.indexing.test_iloc.result->dict()
A:pandas.tests.indexing.test_iloc.mask->Series(mask, list(reversed(getattr(df, idx))))
A:pandas.tests.indexing.test_iloc.accessor->getattr(df, method[1:])
A:pandas.tests.indexing.test_iloc.ans->str(e)
A:pandas.tests.indexing.test_iloc.key->tuple([idx, method])
A:pandas.tests.indexing.test_iloc.r->DataFrame(dict(A=['a', 'b', 'x', 'y', 'e'], B=[5, 6, 11, 13, 9])).get(key)
A:pandas.tests.indexing.test_iloc.df3->concat([df, 2 * df, 3 * df])
A:pandas.tests.indexing.test_iloc.original_df->DataFrame({'a': [1, 2, 3]})
A:pandas.tests.indexing.test_iloc.original_series->Series([1, 2, 3, 4, 5, 6])
pandas.tests.indexing.test_iloc.TestiLoc(Base)
pandas.tests.indexing.test_iloc.TestiLoc.test_identity_slice_returns_new_object(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_array_not_mutating_negative_indices(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_empty_list_indexer_is_ok(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_exceeds_bounds(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_getitem_array(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_getitem_bool(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_getitem_bool_diff_len(self,index)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_getitem_doc_issue(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_getitem_dups(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_getitem_frame(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_getitem_int(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_getitem_invalid_scalar(self,dims)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_getitem_labelled_frame(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_getitem_list_int(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_getitem_neg_int(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_getitem_neg_int_can_reach_first_index(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_getitem_slice(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_getitem_slice_dups(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_mask(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_non_integer_raises(self,index,columns,index_vals,column_vals)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_non_unique_indexing(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_setitem(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_setitem_dups(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_setitem_list(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_setitem_list_of_lists(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_setitem_pandas_object(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_setitem_series(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_iloc_setitem_with_scalar_index(self,indexer,value)
pandas.tests.indexing.test_iloc.TestiLoc.test_indexing_zerodim_np_array(self)
pandas.tests.indexing.test_iloc.TestiLoc.test_series_indexing_zerodim_np_array(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/test_indexing_slow.py----------------------------------------
A:pandas.tests.indexing.test_indexing_slow.result->DataFrame({'x': range(10 ** 6)}, dtype='int64')
A:pandas.tests.indexing.test_indexing_slow.expected->DataFrame({'x': range(10 ** 6 + 1)}, dtype='int64')
pandas.tests.indexing.test_indexing_slow.TestIndexingSlow
pandas.tests.indexing.test_indexing_slow.TestIndexingSlow.test_large_dataframe_indexing(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/test_categorical.py----------------------------------------
A:pandas.tests.indexing.test_categorical.self.df->DataFrame({'A': np.arange(6, dtype='int64'), 'B': Series(list('aabbca')).astype(CDT(list('cab')))}).set_index('B')
A:pandas.tests.indexing.test_categorical.self.df2->DataFrame({'A': np.arange(6, dtype='int64'), 'B': Series(list('aabbca')).astype(CDT(list('cabe')))}).set_index('B')
A:pandas.tests.indexing.test_categorical.self.df3->DataFrame({'A': np.arange(6, dtype='int64'), 'B': Series([1, 1, 2, 1, 3, 2]).astype(CDT([3, 2, 1], ordered=True))}).set_index('B')
A:pandas.tests.indexing.test_categorical.self.df4->DataFrame({'A': np.arange(6, dtype='int64'), 'B': Series([1, 1, 2, 1, 3, 2]).astype(CDT([3, 2, 1], ordered=False))}).set_index('B')
A:pandas.tests.indexing.test_categorical.expected->DataFrame({'A': ['qux', 'qux2', 'baz']}, index=cat_idx)
A:pandas.tests.indexing.test_categorical.df->DataFrame({'A': ['foo', 'bar', 'baz']}, index=cat_idx)
A:pandas.tests.indexing.test_categorical.cats->list('cabe')
A:pandas.tests.indexing.test_categorical.s->Series([1, 2, 3], index=pd.CategoricalIndex(['A', 'B', 'C']))
A:pandas.tests.indexing.test_categorical.cat->DataFrame({'A': ['foo', 'bar', 'baz']})
A:pandas.tests.indexing.test_categorical.exp->DataFrame({'A': [True, False, False]})
A:pandas.tests.indexing.test_categorical.df['D']->pandas.cut(df.value, bins=[0, 25, 50, 75, 100])
A:pandas.tests.indexing.test_categorical.expected['D']->pandas.cut(expected.value, bins=[0, 25, 50, 75, 100])
A:pandas.tests.indexing.test_categorical.idx->Index(['h', 'i', 'j', 'k', 'l', 'm', 'n'])
A:pandas.tests.indexing.test_categorical.cats2->Categorical(['b', 'c'], categories=['a', 'b', 'c'])
A:pandas.tests.indexing.test_categorical.idx2->Index(['j', 'k'])
A:pandas.tests.indexing.test_categorical.exp_df->DataFrame({'cats': cats2, 'values': values2}, index=idx2)
A:pandas.tests.indexing.test_categorical.exp_col->Series(cats, index=idx, name='cats')
A:pandas.tests.indexing.test_categorical.exp_row->Series(['b', 3], index=['cats', 'values'], dtype='object', name='j')
A:pandas.tests.indexing.test_categorical.exp_index->CategoricalIndex(list('AA'), categories=['A', 'B'])
A:pandas.tests.indexing.test_categorical.index->CategoricalIndex(['a', 'b', 'a', 'c'], categories=list('abcde'))
A:pandas.tests.indexing.test_categorical.arr->numpy.array([Timestamp('1999-12-31 00:00:00'), Timestamp('2000-12-31 00:00:00')], dtype=object)
A:pandas.tests.indexing.test_categorical.ci->CategoricalIndex(['a', 'b'], categories=['a', 'b'])
A:pandas.tests.indexing.test_categorical.result->DataFrame({'A': ['foo', 'bar', 'baz']}, index=cat_idx).copy()
A:pandas.tests.indexing.test_categorical.dummies->pandas.get_dummies(cats)
A:pandas.tests.indexing.test_categorical.c->Categorical(np.random.randint(0, 5, size=150000).astype(np.int8)).add_categories([-1000])
A:pandas.tests.indexing.test_categorical.indexer->numpy.array([100000]).astype(np.int64)
A:pandas.tests.indexing.test_categorical.cdf->DataFrame({'A': ['foo', 'bar', 'baz']}, index=cat_idx).copy()
A:pandas.tests.indexing.test_categorical.cdf.index->CategoricalIndex(df.index)
A:pandas.tests.indexing.test_categorical.cdf.columns->CategoricalIndex(df.columns)
A:pandas.tests.indexing.test_categorical.expect->DataFrame(df.loc[:, ['X', 'Y']], index=cdf.index, columns=CategoricalIndex(list('XXY')))
A:pandas.tests.indexing.test_categorical.exp_columns->CategoricalIndex(list('XX'), categories=['X', 'Y'])
A:pandas.tests.indexing.test_categorical.rw_array->numpy.eye(10)
A:pandas.tests.indexing.test_categorical.rw_df->DataFrame(rw_array)
A:pandas.tests.indexing.test_categorical.ro_array->numpy.eye(10)
A:pandas.tests.indexing.test_categorical.ro_df->DataFrame(ro_array)
A:pandas.tests.indexing.test_categorical.cat['A']->cat['A'].astype('category').astype('category')
A:pandas.tests.indexing.test_categorical.cur_index->pandas.CategoricalIndex(orig_values, name='XXX')
A:pandas.tests.indexing.test_categorical.mapper->pandas.Series(new_values[:-1], index=orig_values[:-1])
A:pandas.tests.indexing.test_categorical.output->pandas.CategoricalIndex(orig_values, name='XXX').map(mapper)
A:pandas.tests.indexing.test_categorical.cat_idx->CategoricalIndex(idx_values, ordered=ordered_fixture)
A:pandas.tests.indexing.test_categorical.sl->slice(idx_values[0], idx_values[1])
pandas.tests.indexing.test_categorical.TestCategoricalIndex
pandas.tests.indexing.test_categorical.TestCategoricalIndex.setup_method(self,method)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_boolean_selection(self)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_get_indexer_array(self)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_get_indexer_same_categories_different_order(self)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_get_indexer_same_categories_same_order(self)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_getitem_category_type(self)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_getitem_scalar(self)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_getitem_with_listlike(self)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_indexing_with_category(self)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_ix_categorical_index(self)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_loc_and_at_with_categorical_index(self)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_loc_listlike(self)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_loc_listlike_dtypes(self)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_loc_scalar(self)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_loc_slice(self)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_loc_with_non_string_categories(self,idx_values,ordered_fixture)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_map_with_dict_or_series(self)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_read_only_source(self)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_reindexing(self)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_setitem_listlike(self)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_slicing(self)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_slicing_and_getting_ops(self)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_slicing_directly(self)
pandas.tests.indexing.test_categorical.TestCategoricalIndex.test_slicing_doc_examples(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/test_timedelta.py----------------------------------------
A:pandas.tests.indexing.test_timedelta.df->pandas.DataFrame({'dt': pd.Series([dt1, dt2])})
A:pandas.tests.indexing.test_timedelta.df.index->pandas.to_timedelta(range(10), unit='s')
A:pandas.tests.indexing.test_timedelta.result->pandas.DataFrame({'dt': pd.Series([dt1, dt2])}).assign(x=df.mask(cond, 10).astype('int64'))
A:pandas.tests.indexing.test_timedelta.expected->pandas.Series([pd.NaT, 1, 2], dtype='timedelta64[ns]')
A:pandas.tests.indexing.test_timedelta.series->pandas.Series([0, 1, 2], dtype='timedelta64[ns]')
A:pandas.tests.indexing.test_timedelta.s->pandas.Series([dt1])
A:pandas.tests.indexing.test_timedelta.dt1->pandas.Timedelta(0)
A:pandas.tests.indexing.test_timedelta.dt2->pandas.Timedelta(28767471428571405)
A:pandas.tests.indexing.test_timedelta.df_copy->pandas.DataFrame({'dt': pd.Series([dt1, dt2])}).copy()
A:pandas.tests.indexing.test_timedelta.ix->pandas.timedelta_range(start='1 day', end='2 days', freq='1H')
A:pandas.tests.indexing.test_timedelta.ser->pandas.timedelta_range(start='1 day', end='2 days', freq='1H').to_series()
pandas.tests.indexing.test_timedelta.TestTimedeltaIndexing
pandas.tests.indexing.test_timedelta.TestTimedeltaIndexing.test_boolean_indexing(self)
pandas.tests.indexing.test_timedelta.TestTimedeltaIndexing.test_list_like_indexing(self,indexer,expected)
pandas.tests.indexing.test_timedelta.TestTimedeltaIndexing.test_listlike_setitem(self,value)
pandas.tests.indexing.test_timedelta.TestTimedeltaIndexing.test_loc_slicing(self)
pandas.tests.indexing.test_timedelta.TestTimedeltaIndexing.test_loc_str_slicing(self)
pandas.tests.indexing.test_timedelta.TestTimedeltaIndexing.test_masked_setitem(self,value)
pandas.tests.indexing.test_timedelta.TestTimedeltaIndexing.test_numpy_timedelta_scalar_indexing(self,start,stop,expected_slice)
pandas.tests.indexing.test_timedelta.TestTimedeltaIndexing.test_roundtrip_thru_setitem(self)
pandas.tests.indexing.test_timedelta.TestTimedeltaIndexing.test_string_indexing(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/test_chaining_and_caching.py----------------------------------------
A:pandas.tests.indexing.test_chaining_and_caching.df->DataFrame(np.zeros((5, 5), dtype='int64'), columns=['a', 'b', 'c', 'd', 'e'], index=range(5))
A:pandas.tests.indexing.test_chaining_and_caching.expected->Series([0, 0, 0, 2, 0], name='f')
A:pandas.tests.indexing.test_chaining_and_caching.out->DataFrame({'A': [0, 0, 0]}, index=date_range('5/7/2014', '5/9/2014'))
A:pandas.tests.indexing.test_chaining_and_caching.six->Timestamp('5/7/2014')
A:pandas.tests.indexing.test_chaining_and_caching.eix->Timestamp('5/9/2014')
A:pandas.tests.indexing.test_chaining_and_caching.recarray->numpy.rec.fromarrays([data], names=['response'])
A:pandas.tests.indexing.test_chaining_and_caching.result->DataFrame(np.zeros((5, 5), dtype='int64'), columns=['a', 'b', 'c', 'd', 'e'], index=range(5)).head()
A:pandas.tests.indexing.test_chaining_and_caching.indexer->DataFrame(np.zeros((5, 5), dtype='int64'), columns=['a', 'b', 'c', 'd', 'e'], index=range(5)).letters.apply(lambda x: len(x) > 10)
A:pandas.tests.indexing.test_chaining_and_caching.df2->pandas.read_pickle(path)
A:pandas.tests.indexing.test_chaining_and_caching.idx->numpy.random.randint(len(letters), size=2)
A:pandas.tests.indexing.test_chaining_and_caching.df['letters']->df['letters'].apply(str.lower).apply(str.lower)
A:pandas.tests.indexing.test_chaining_and_caching.df.loc[:, 'letters']->df['letters'].apply(str.lower).apply(str.lower).apply(str.lower)
A:pandas.tests.indexing.test_chaining_and_caching.df.loc[indexer, 'letters']->DataFrame(np.zeros((5, 5), dtype='int64'), columns=['a', 'b', 'c', 'd', 'e'], index=range(5)).loc[indexer, 'letters'].apply(str.lower)
A:pandas.tests.indexing.test_chaining_and_caching.s->DataFrame(np.zeros((5, 5), dtype='int64'), columns=['a', 'b', 'c', 'd', 'e'], index=range(5)).iloc[:, 0].sort_values()
A:pandas.tests.indexing.test_chaining_and_caching.mask->pandas.isna(df.c)
A:pandas.tests.indexing.test_chaining_and_caching.df1->DataFrame({'x': Series(['a', 'b', 'c']), 'y': Series(['d', 'e', 'f'])})
pandas.tests.indexing.test_chaining_and_caching.TestCaching
pandas.tests.indexing.test_chaining_and_caching.TestCaching.test_setitem_cache_updating(self)
pandas.tests.indexing.test_chaining_and_caching.TestCaching.test_slice_consolidate_invalidate_item_cache(self)
pandas.tests.indexing.test_chaining_and_caching.TestChaining
pandas.tests.indexing.test_chaining_and_caching.TestChaining.test_cache_updating(self)
pandas.tests.indexing.test_chaining_and_caching.TestChaining.test_chained_getitem_with_lists(self)
pandas.tests.indexing.test_chaining_and_caching.TestChaining.test_detect_chained_assignment(self)
pandas.tests.indexing.test_chaining_and_caching.TestChaining.test_detect_chained_assignment_warnings(self)
pandas.tests.indexing.test_chaining_and_caching.TestChaining.test_detect_chained_assignment_warnings_filter_and_dupe_cols(self)
pandas.tests.indexing.test_chaining_and_caching.TestChaining.test_setitem_chained_setfault(self)
pandas.tests.indexing.test_chaining_and_caching.TestChaining.test_setting_with_copy_bug(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/test_floats.py----------------------------------------
A:pandas.tests.indexing.test_floats.i->index(5)
A:pandas.tests.indexing.test_floats.s->Series(ser)
A:pandas.tests.indexing.test_floats.msg->'cannot do slice indexing on {klass} with these indexers \\[(3|4)\\.0\\] of {kind}'.format(klass=type(index), kind=str(float))
A:pandas.tests.indexing.test_floats.s2->Series(ser).copy()
A:pandas.tests.indexing.test_floats.s3->Series([1, 2, 3], index=['a', 'b', 1.5])
A:pandas.tests.indexing.test_floats.expected->Series([(1, 1), (2, 2)], index=[0.0, 0.0], name='foo')
A:pandas.tests.indexing.test_floats.index->Index([1.5, 2, 3, 4.5, 5])
A:pandas.tests.indexing.test_floats.indexer->slice(0, 2)
A:pandas.tests.indexing.test_floats.res->slice(0, 0)
A:pandas.tests.indexing.test_floats.sc->Series(ser).copy()
A:pandas.tests.indexing.test_floats.result->Series(ser).value_counts()
pandas.tests.indexing.test_floats.TestFloatIndexers
pandas.tests.indexing.test_floats.TestFloatIndexers.check(self,result,original,indexer,getitem)
pandas.tests.indexing.test_floats.TestFloatIndexers.test_float64index_slicing_bug(self)
pandas.tests.indexing.test_floats.TestFloatIndexers.test_floating_index_doc_example(self)
pandas.tests.indexing.test_floats.TestFloatIndexers.test_floating_misc(self)
pandas.tests.indexing.test_floats.TestFloatIndexers.test_floating_tuples(self)
pandas.tests.indexing.test_floats.TestFloatIndexers.test_integer_positional_indexing(self)
pandas.tests.indexing.test_floats.TestFloatIndexers.test_scalar_error(self)
pandas.tests.indexing.test_floats.TestFloatIndexers.test_scalar_float(self)
pandas.tests.indexing.test_floats.TestFloatIndexers.test_scalar_integer(self)
pandas.tests.indexing.test_floats.TestFloatIndexers.test_scalar_non_numeric(self)
pandas.tests.indexing.test_floats.TestFloatIndexers.test_scalar_with_mixed(self)
pandas.tests.indexing.test_floats.TestFloatIndexers.test_slice_float(self)
pandas.tests.indexing.test_floats.TestFloatIndexers.test_slice_integer(self)
pandas.tests.indexing.test_floats.TestFloatIndexers.test_slice_integer_frame_getitem(self)
pandas.tests.indexing.test_floats.TestFloatIndexers.test_slice_non_numeric(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/test_coercion.py----------------------------------------
A:pandas.tests.indexing.test_coercion.combos->itertools.product(cls.klasses, cls.dtypes, [cls.method])
A:pandas.tests.indexing.test_coercion.temp->pandas.Series(self.rep[from_key], index=index, name='yyy').copy()
A:pandas.tests.indexing.test_coercion.obj->pandas.Series(self.rep[from_key], index=index, name='yyy')
A:pandas.tests.indexing.test_coercion.exp->pandas.Series(self.rep[to_key], index=index, name='yyy')
A:pandas.tests.indexing.test_coercion.exp_index->pandas.Index([1.1, 2.1, 3.1, 4.1, val])
A:pandas.tests.indexing.test_coercion.target->original.copy()
A:pandas.tests.indexing.test_coercion.res->original.copy().fillna(value)
A:pandas.tests.indexing.test_coercion.cond->pandas.Index([True, False, True, False])
A:pandas.tests.indexing.test_coercion.values->pandas.Index(pd.date_range(fill_val, periods=4))
A:pandas.tests.indexing.test_coercion.fill_val->pandas.Timestamp('2012-01-01', tz='US/Eastern')
A:pandas.tests.indexing.test_coercion.key->'datetime64[ns, {0}]'.format(tz)
A:pandas.tests.indexing.test_coercion.index->pandas.Index([3, 4], name='xyz')
A:pandas.tests.indexing.test_coercion.replacer->pandas.Series(self.rep[to_key], index=self.rep[from_key])
A:pandas.tests.indexing.test_coercion.result->pandas.Series(self.rep[from_key], index=index, name='yyy').replace(replacer)
pandas.tests.indexing.test_coercion.CoercionBase
pandas.tests.indexing.test_coercion.CoercionBase._assert(self,left,right,dtype)
pandas.tests.indexing.test_coercion.CoercionBase.method(self)
pandas.tests.indexing.test_coercion.TestFillnaSeriesCoercion(CoercionBase)
pandas.tests.indexing.test_coercion.TestFillnaSeriesCoercion._assert_fillna_conversion(self,original,value,expected,expected_dtype)
pandas.tests.indexing.test_coercion.TestFillnaSeriesCoercion.test_fillna_datetime(self,index_or_series,fill_val,fill_dtype)
pandas.tests.indexing.test_coercion.TestFillnaSeriesCoercion.test_fillna_datetime64tz(self,index_or_series,fill_val,fill_dtype)
pandas.tests.indexing.test_coercion.TestFillnaSeriesCoercion.test_fillna_dt(self,index_or_series,fill_val,fill_dtype)
pandas.tests.indexing.test_coercion.TestFillnaSeriesCoercion.test_fillna_dt64tz(self,index_or_series,fill_val,fill_dtype)
pandas.tests.indexing.test_coercion.TestFillnaSeriesCoercion.test_fillna_float64(self,index_or_series,fill_val,fill_dtype)
pandas.tests.indexing.test_coercion.TestFillnaSeriesCoercion.test_fillna_index_bool(self)
pandas.tests.indexing.test_coercion.TestFillnaSeriesCoercion.test_fillna_index_int64(self)
pandas.tests.indexing.test_coercion.TestFillnaSeriesCoercion.test_fillna_index_period(self)
pandas.tests.indexing.test_coercion.TestFillnaSeriesCoercion.test_fillna_index_timedelta64(self)
pandas.tests.indexing.test_coercion.TestFillnaSeriesCoercion.test_fillna_object(self,index_or_series,fill_val,fill_dtype)
pandas.tests.indexing.test_coercion.TestFillnaSeriesCoercion.test_fillna_series_bool(self)
pandas.tests.indexing.test_coercion.TestFillnaSeriesCoercion.test_fillna_series_complex128(self,fill_val,fill_dtype)
pandas.tests.indexing.test_coercion.TestFillnaSeriesCoercion.test_fillna_series_int64(self)
pandas.tests.indexing.test_coercion.TestFillnaSeriesCoercion.test_fillna_series_period(self)
pandas.tests.indexing.test_coercion.TestFillnaSeriesCoercion.test_fillna_series_timedelta64(self)
pandas.tests.indexing.test_coercion.TestFillnaSeriesCoercion.test_has_comprehensive_tests(self)
pandas.tests.indexing.test_coercion.TestInsertIndexCoercion(CoercionBase)
pandas.tests.indexing.test_coercion.TestInsertIndexCoercion._assert_insert_conversion(self,original,value,expected,expected_dtype)
pandas.tests.indexing.test_coercion.TestInsertIndexCoercion.test_insert_index_bool(self)
pandas.tests.indexing.test_coercion.TestInsertIndexCoercion.test_insert_index_complex128(self)
pandas.tests.indexing.test_coercion.TestInsertIndexCoercion.test_insert_index_datetimes(self,fill_val,exp_dtype)
pandas.tests.indexing.test_coercion.TestInsertIndexCoercion.test_insert_index_dts(self,fill_val,exp_dtype)
pandas.tests.indexing.test_coercion.TestInsertIndexCoercion.test_insert_index_float64(self,insert,coerced_val,coerced_dtype)
pandas.tests.indexing.test_coercion.TestInsertIndexCoercion.test_insert_index_int64(self,insert,coerced_val,coerced_dtype)
pandas.tests.indexing.test_coercion.TestInsertIndexCoercion.test_insert_index_object(self,insert,coerced_val,coerced_dtype)
pandas.tests.indexing.test_coercion.TestInsertIndexCoercion.test_insert_index_period(self,insert,coerced_val,coerced_dtype)
pandas.tests.indexing.test_coercion.TestInsertIndexCoercion.test_insert_index_timedelta64(self)
pandas.tests.indexing.test_coercion.TestReplaceSeriesCoercion(CoercionBase)
pandas.tests.indexing.test_coercion.TestReplaceSeriesCoercion.test_replace_series(self,how,to_key,from_key)
pandas.tests.indexing.test_coercion.TestReplaceSeriesCoercion.test_replace_series_datetime_datetime(self,how,to_key,from_key)
pandas.tests.indexing.test_coercion.TestReplaceSeriesCoercion.test_replace_series_datetime_tz(self,how,to_key,from_key)
pandas.tests.indexing.test_coercion.TestReplaceSeriesCoercion.test_replace_series_dt_dt(self,how,to_key,from_key)
pandas.tests.indexing.test_coercion.TestReplaceSeriesCoercion.test_replace_series_dt_tz(self,how,to_key,from_key)
pandas.tests.indexing.test_coercion.TestReplaceSeriesCoercion.test_replace_series_period(self)
pandas.tests.indexing.test_coercion.TestSetitemCoercion(CoercionBase)
pandas.tests.indexing.test_coercion.TestSetitemCoercion._assert_setitem_index_conversion(self,original_series,loc_key,expected_index,expected_dtype)
pandas.tests.indexing.test_coercion.TestSetitemCoercion._assert_setitem_series_conversion(self,original_series,loc_value,expected_series,expected_dtype)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_index_bool(self)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_index_complex128(self)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_index_datetime64(self)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_index_datetime64tz(self)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_index_dt64(self)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_index_dt64tz(self)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_index_float64(self,val,exp_dtype)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_index_int64(self,val,exp_dtype)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_index_object(self,val,exp_dtype)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_index_period(self)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_index_timedelta64(self)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_series_bool(self,val,exp_dtype)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_series_complex128(self,val,exp_dtype)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_series_datetime64(self,val,exp_dtype)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_series_datetime64tz(self,val,exp_dtype)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_series_dt64(self,val,exp_dtype)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_series_dt64tz(self,val,exp_dtype)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_series_float64(self,val,exp_dtype)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_series_int64(self,val,exp_dtype)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_series_int8(self,val,exp_dtype)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_series_object(self,val,exp_dtype)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_series_period(self)
pandas.tests.indexing.test_coercion.TestSetitemCoercion.test_setitem_series_timedelta64(self,val,exp_dtype)
pandas.tests.indexing.test_coercion.TestWhereCoercion(CoercionBase)
pandas.tests.indexing.test_coercion.TestWhereCoercion._assert_where_conversion(self,original,cond,values,expected,expected_dtype)
pandas.tests.indexing.test_coercion.TestWhereCoercion.test_where_float64(self,index_or_series,fill_val,exp_dtype)
pandas.tests.indexing.test_coercion.TestWhereCoercion.test_where_index_bool(self)
pandas.tests.indexing.test_coercion.TestWhereCoercion.test_where_index_complex128(self)
pandas.tests.indexing.test_coercion.TestWhereCoercion.test_where_index_datetime(self)
pandas.tests.indexing.test_coercion.TestWhereCoercion.test_where_index_datetime64tz(self)
pandas.tests.indexing.test_coercion.TestWhereCoercion.test_where_index_datetimetz(self)
pandas.tests.indexing.test_coercion.TestWhereCoercion.test_where_index_dt(self)
pandas.tests.indexing.test_coercion.TestWhereCoercion.test_where_index_dt64tz(self)
pandas.tests.indexing.test_coercion.TestWhereCoercion.test_where_index_dttz(self)
pandas.tests.indexing.test_coercion.TestWhereCoercion.test_where_index_period(self)
pandas.tests.indexing.test_coercion.TestWhereCoercion.test_where_index_timedelta64(self)
pandas.tests.indexing.test_coercion.TestWhereCoercion.test_where_int64(self,index_or_series,fill_val,exp_dtype)
pandas.tests.indexing.test_coercion.TestWhereCoercion.test_where_object(self,index_or_series,fill_val,exp_dtype)
pandas.tests.indexing.test_coercion.TestWhereCoercion.test_where_series_bool(self,fill_val,exp_dtype)
pandas.tests.indexing.test_coercion.TestWhereCoercion.test_where_series_complex128(self,fill_val,exp_dtype)
pandas.tests.indexing.test_coercion.TestWhereCoercion.test_where_series_datetime64(self,fill_val,exp_dtype)
pandas.tests.indexing.test_coercion.TestWhereCoercion.test_where_series_datetime64tz(self)
pandas.tests.indexing.test_coercion.TestWhereCoercion.test_where_series_dt64(self,fill_val,exp_dtype)
pandas.tests.indexing.test_coercion.TestWhereCoercion.test_where_series_dt64tz(self)
pandas.tests.indexing.test_coercion.TestWhereCoercion.test_where_series_period(self)
pandas.tests.indexing.test_coercion.TestWhereCoercion.test_where_series_timedelta64(self)
pandas.tests.indexing.test_coercion.check_comprehensiveness(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/test_callable.py----------------------------------------
A:pandas.tests.indexing.test_callable.df->pandas.DataFrame({'X': [1, 2, 3, 4], 'Y': list('aabb')}, index=list('ABCD'))
A:pandas.tests.indexing.test_callable.res->pandas.DataFrame({'X': [1, 2, 3, 4], 'Y': list('aabb')}, index=list('ABCD')).copy()
A:pandas.tests.indexing.test_callable.exp->pandas.DataFrame({'X': [1, 2, 3, 4], 'Y': list('aabb')}, index=list('ABCD')).copy()
A:pandas.tests.indexing.test_callable.res.loc[['A', 'C'], lambda x: 'X']->numpy.array([-1, -2])
A:pandas.tests.indexing.test_callable.exp.loc[['A', 'C'], 'X']->numpy.array([-1, -2])
pandas.tests.indexing.test_callable.TestIndexingCallable
pandas.tests.indexing.test_callable.TestIndexingCallable.test_frame_iloc_callable(self)
pandas.tests.indexing.test_callable.TestIndexingCallable.test_frame_iloc_callable_setitem(self)
pandas.tests.indexing.test_callable.TestIndexingCallable.test_frame_loc_callable(self)
pandas.tests.indexing.test_callable.TestIndexingCallable.test_frame_loc_callable_labels(self)
pandas.tests.indexing.test_callable.TestIndexingCallable.test_frame_loc_callable_mixture(self)
pandas.tests.indexing.test_callable.TestIndexingCallable.test_frame_loc_callable_setitem(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/test_indexing_engines.py----------------------------------------
A:pandas.tests.indexing.test_indexing_engines.arr->numpy.array(['a', 'e', 'j'], dtype=self.dtype)
A:pandas.tests.indexing.test_indexing_engines.engine->self.engine_type(lambda : arr, len(arr))
A:pandas.tests.indexing.test_indexing_engines.expected->pandas._libs.algos.pad['object'](arr, new)
A:pandas.tests.indexing.test_indexing_engines.result->self.engine_type(lambda : arr, len(arr)).get_pad_indexer(new)
A:pandas.tests.indexing.test_indexing_engines.new->numpy.array(list('abcdefghij'), dtype=self.dtype)
A:pandas.tests.indexing.test_indexing_engines.values->list('abc')
pandas.tests.indexing.test_indexing_engines.TestNumericEngine
pandas.tests.indexing.test_indexing_engines.TestNumericEngine.test_get_backfill_indexer(self,numeric_indexing_engine_type_and_dtype)
pandas.tests.indexing.test_indexing_engines.TestNumericEngine.test_get_loc(self,numeric_indexing_engine_type_and_dtype)
pandas.tests.indexing.test_indexing_engines.TestNumericEngine.test_get_pad_indexer(self,numeric_indexing_engine_type_and_dtype)
pandas.tests.indexing.test_indexing_engines.TestNumericEngine.test_is_monotonic(self,numeric_indexing_engine_type_and_dtype)
pandas.tests.indexing.test_indexing_engines.TestNumericEngine.test_is_unique(self,numeric_indexing_engine_type_and_dtype)
pandas.tests.indexing.test_indexing_engines.TestObjectEngine
pandas.tests.indexing.test_indexing_engines.TestObjectEngine.test_get_backfill_indexer(self)
pandas.tests.indexing.test_indexing_engines.TestObjectEngine.test_get_loc(self)
pandas.tests.indexing.test_indexing_engines.TestObjectEngine.test_get_pad_indexer(self)
pandas.tests.indexing.test_indexing_engines.TestObjectEngine.test_is_monotonic(self)
pandas.tests.indexing.test_indexing_engines.TestObjectEngine.test_is_unique(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/test_loc.py----------------------------------------
A:pandas.tests.indexing.test_loc.df->pandas.DataFrame(np.ones((10, 8)), index=tuple('ABCDEFGHIJ'), columns=pd.MultiIndex.from_tuples(cols))
A:pandas.tests.indexing.test_loc.expected->pandas.DataFrame(np.ones((10, 4)), index=tuple('ABCDEFGHIJ'), columns=pd.MultiIndex.from_tuples([(2014, 9), (2014, 10), (2015, 7), (2015, 8)]))
A:pandas.tests.indexing.test_loc.df_orig->DataFrame({'me': list('rttti'), 'foo': list('aaade'), 'bar': np.arange(5, dtype='float64') * 1.34 + 2, 'bar2': np.arange(5, dtype='float64') * -0.34 + 2}).set_index('me')
A:pandas.tests.indexing.test_loc.indexer->tuple(['t', ['bar', 'bar2']])
A:pandas.tests.indexing.test_loc.df1->DataFrame({'a': [0, 1, 1], 'b': Series([100, 200, 300], dtype='uint32')})
A:pandas.tests.indexing.test_loc.df2->DataFrame({'a': [0, 1, 1], 'b': [100, 200, 300]}, dtype='uint64')
A:pandas.tests.indexing.test_loc.s->Series([2, 5, 8, 11], date_range('2001-01-01', freq='D', periods=4))
A:pandas.tests.indexing.test_loc.msg->'Boolean index has wrong length: {} instead of {}'.format(len(index), len(s))
A:pandas.tests.indexing.test_loc.mask->numpy.arange(100000)
A:pandas.tests.indexing.test_loc.df.loc[:, 'date']->numpy.array([0, 0, 0, 0, 0], dtype=np.int64)
A:pandas.tests.indexing.test_loc.expected['x']->expected['x'].astype(np.int64).astype(np.int64)
A:pandas.tests.indexing.test_loc.df.loc[:, ('Respondent', 'StartDate')]->pandas.to_datetime(df.loc[:, ('Respondent', 'StartDate')])
A:pandas.tests.indexing.test_loc.df.loc[:, ('Respondent', 'EndDate')]->pandas.to_datetime(df.loc[:, ('Respondent', 'EndDate')])
A:pandas.tests.indexing.test_loc.df.loc[:, ('Respondent', 'Duration')]->pandas.DataFrame(np.ones((10, 8)), index=tuple('ABCDEFGHIJ'), columns=pd.MultiIndex.from_tuples(cols)).loc[:, ('Respondent', 'Duration')].astype('timedelta64[s]')
A:pandas.tests.indexing.test_loc.df.loc[:, unit]->pandas.DataFrame(np.ones((10, 8)), index=tuple('ABCDEFGHIJ'), columns=pd.MultiIndex.from_tuples(cols)).loc[:, 'timestamp'].values.astype('datetime64[{unit}]'.format(unit=unit))
A:pandas.tests.indexing.test_loc.df['expected']->pandas.DataFrame(np.ones((10, 8)), index=tuple('ABCDEFGHIJ'), columns=pd.MultiIndex.from_tuples(cols)).loc[:, 'timestamp'].values.astype('datetime64[{unit}]'.format(unit=unit))
A:pandas.tests.indexing.test_loc.df['date_dt']->pandas.to_datetime(df['date'], unit='ms', cache=True)
A:pandas.tests.indexing.test_loc.expected[columns]->expected[columns].apply(pd.to_datetime).apply(pd.to_datetime)
A:pandas.tests.indexing.test_loc.df.loc[[4, 3, 5], 'A']->numpy.array([1, 2, 3], dtype='int64')
A:pandas.tests.indexing.test_loc.val1->numpy.arange(5, dtype='int64')
A:pandas.tests.indexing.test_loc.val2->numpy.arange(4, dtype='int64')
A:pandas.tests.indexing.test_loc.index->list(set(keys1).union(keys2))
A:pandas.tests.indexing.test_loc.ser->pandas.Series(dtype=object)
A:pandas.tests.indexing.test_loc.columns->list('ABCDEFG')
A:pandas.tests.indexing.test_loc.len_mask->len(mask)
A:pandas.tests.indexing.test_loc.original_df->DataFrame({'a': [1, 2, 3]})
A:pandas.tests.indexing.test_loc.original_series->Series([1, 2, 3, 4, 5, 6])
A:pandas.tests.indexing.test_loc.result->pandas.DataFrame(rand_data)
A:pandas.tests.indexing.test_loc.key->numpy.array(['2001-01-04', '2001-01-02', '2001-01-04', '2001-01-14'], dtype='datetime64')
A:pandas.tests.indexing.test_loc.rand_data->numpy.random.randn(8, 4)
A:pandas.tests.indexing.test_loc.expected_data->numpy.hstack((rand_data, np.array([np.nan] * 8).reshape(8, 1)))
pandas.tests.indexing.test_loc.TestLoc(Base)
pandas.tests.indexing.test_loc.TestLoc.test_getitem_label_list_with_missing(self)
pandas.tests.indexing.test_loc.TestLoc.test_identity_slice_returns_new_object(self)
pandas.tests.indexing.test_loc.TestLoc.test_indexing_zerodim_np_array(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_assign_non_ns_datetime(self,unit)
pandas.tests.indexing.test_loc.TestLoc.test_loc_assign_non_ns_dt(self,unit)
pandas.tests.indexing.test_loc.TestLoc.test_loc_coercion(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_empty_list_indexer_is_ok(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_general(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_getitem_bool(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_getitem_bool_diff_len(self,index)
pandas.tests.indexing.test_loc.TestLoc.test_loc_getitem_dups(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_getitem_dups2(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_getitem_int(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_getitem_int_slice(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_getitem_label(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_getitem_label_array_like(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_getitem_label_list(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_getitem_label_list_fails(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_getitem_label_list_with_missing(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_getitem_label_out_of_range(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_getitem_label_slice(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_getitem_list_with_fail(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_index(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_modify_datetime(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_modify_dt(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_name(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_non_unique(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_non_unique_memory_error(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_reverse_assignment(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_setitem_consistency(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_setitem_consistency_empty(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_setitem_consistency_slice_column_len(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_setitem_dups(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_setitem_empty_append(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_setitem_empty_append_raises(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_setitem_frame(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_setitem_frame_multiples(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_setitem_slice(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_setitem_with_scalar_index(self,indexer,value)
pandas.tests.indexing.test_loc.TestLoc.test_loc_to_fail(self)
pandas.tests.indexing.test_loc.TestLoc.test_loc_uint64(self)
pandas.tests.indexing.test_loc.TestLoc.test_series_indexing_zerodim_np_array(self)
pandas.tests.indexing.test_loc.TestLoc.test_setitem_new_key_tz(self)
pandas.tests.indexing.test_loc.test_loc_axis_1_slice()
pandas.tests.indexing.test_loc.test_loc_getitem_label_list_integer_labels(columns,column_key,expected_columns,check_column_type)
pandas.tests.indexing.test_loc.test_loc_setitem_float_intindex()
pandas.tests.indexing.test_loc.test_series_loc_getitem_label_list_missing_values()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/test_check_indexer.py----------------------------------------
A:pandas.tests.indexing.test_check_indexer.array->numpy.array([1, 2, 3])
A:pandas.tests.indexing.test_check_indexer.result->check_array_indexer(array, indexer)
A:pandas.tests.indexing.test_check_indexer.arr->numpy.array([1, 2, 3])
A:pandas.tests.indexing.test_check_indexer.expected->numpy.array([True, False, False], dtype=bool)
pandas.tests.indexing.test_check_indexer.test_bool_raise_length(indexer)
pandas.tests.indexing.test_check_indexer.test_boolean_na_returns_indexer(indexer)
pandas.tests.indexing.test_check_indexer.test_int_raise_missing_values(indexer)
pandas.tests.indexing.test_check_indexer.test_pass_through_non_array_likes(indexer)
pandas.tests.indexing.test_check_indexer.test_raise_invalid_array_dtypes(indexer)
pandas.tests.indexing.test_check_indexer.test_valid_input(indexer,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/test_na_indexing.py----------------------------------------
A:pandas.tests.indexing.test_na_indexing.ser->ser.to_frame().to_frame()
A:pandas.tests.indexing.test_na_indexing.mask->pandas.array([True, False, None], dtype='boolean')
A:pandas.tests.indexing.test_na_indexing.s->s.to_frame().to_frame()
pandas.tests.indexing.test_na_indexing.test_na_treated_as_false(frame)
pandas.tests.indexing.test_na_indexing.test_series_mask_boolean(values,dtype,mask,box_mask,frame)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/common.py----------------------------------------
A:pandas.tests.indexing.common.self.series_ints->Series(np.random.rand(4), index=np.arange(0, 8, 2))
A:pandas.tests.indexing.common.self.frame_ints->DataFrame(np.random.randn(4, 4), index=np.arange(0, 8, 2), columns=np.arange(0, 12, 3))
A:pandas.tests.indexing.common.self.series_uints->Series(np.random.rand(4), index=UInt64Index(np.arange(0, 8, 2)))
A:pandas.tests.indexing.common.self.frame_uints->DataFrame(np.random.randn(4, 4), index=UInt64Index(range(0, 8, 2)), columns=UInt64Index(range(0, 12, 3)))
A:pandas.tests.indexing.common.self.series_floats->Series(np.random.rand(4), index=Float64Index(range(0, 8, 2)))
A:pandas.tests.indexing.common.self.frame_floats->DataFrame(np.random.randn(4, 4), index=Float64Index(range(0, 8, 2)), columns=Float64Index(range(0, 12, 3)))
A:pandas.tests.indexing.common.self.series_multi->Series(np.random.rand(4), index=m_idces[0])
A:pandas.tests.indexing.common.self.frame_multi->DataFrame(np.random.randn(4, 4), index=m_idces[0], columns=m_idces[1])
A:pandas.tests.indexing.common.self.series_labels->Series(np.random.randn(4), index=list('abcd'))
A:pandas.tests.indexing.common.self.frame_labels->DataFrame(np.random.randn(4, 4), index=list('abcd'), columns=list('ABCD'))
A:pandas.tests.indexing.common.self.series_mixed->Series(np.random.randn(4), index=[2, 4, 'null', 8])
A:pandas.tests.indexing.common.self.frame_mixed->DataFrame(np.random.randn(4, 4), index=[2, 4, 'null', 8])
A:pandas.tests.indexing.common.self.series_ts->Series(np.random.randn(4), index=date_range('20130101', periods=4))
A:pandas.tests.indexing.common.self.frame_ts->DataFrame(np.random.randn(4, 4), index=date_range('20130101', periods=4))
A:pandas.tests.indexing.common.dates_rev->date_range('20130101', periods=4).sort_values(ascending=False)
A:pandas.tests.indexing.common.self.series_ts_rev->Series(np.random.randn(4), index=dates_rev)
A:pandas.tests.indexing.common.self.frame_ts_rev->DataFrame(np.random.randn(4, 4), index=dates_rev)
A:pandas.tests.indexing.common.self.frame_empty->DataFrame()
A:pandas.tests.indexing.common.self.series_empty->Series(dtype=object)
A:pandas.tests.indexing.common.d->getattr(self, kind)
A:pandas.tests.indexing.common.d[typ]->getattr(self, '{kind}_{typ}'.format(kind=kind, typ=typ))
A:pandas.tests.indexing.common.xp->self.get_result(obj=obj, method=method2, key=key2, axis=axis)
A:pandas.tests.indexing.common.indicies->itertools.product(*axes)
A:pandas.tests.indexing.common.expected->expected.__getitem__(a).__getitem__(a)
A:pandas.tests.indexing.common.rs->getattr(obj, method1).__getitem__(_axify(obj, key1, axis))
pandas.tests.indexing.common.Base
pandas.tests.indexing.common.Base.check_result(self,method1,key1,method2,key2,typs=None,axes=None,fails=None)
pandas.tests.indexing.common.Base.check_values(self,f,func,values=False)
pandas.tests.indexing.common.Base.generate_indices(self,f,values=False)
pandas.tests.indexing.common.Base.get_result(self,obj,method,key,axis)
pandas.tests.indexing.common.Base.get_value(self,name,f,i,values=False)
pandas.tests.indexing.common.Base.setup_method(self,method)
pandas.tests.indexing.common._axify(obj,key,axis)
pandas.tests.indexing.common._mklbl(prefix,n)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/test_indexing.py----------------------------------------
A:pandas.tests.indexing.test_indexing.df->pandas.DataFrame({'data': np.ones(100, dtype='float64')})
A:pandas.tests.indexing.test_indexing.df['foo']->numpy.zeros(10, dtype=np.float64)
A:pandas.tests.indexing.test_indexing.df['bar']->numpy.zeros(10, dtype=np.complex)
A:pandas.tests.indexing.test_indexing.df.loc[df.index[2:5], 'bar']->numpy.array([2.33j, 1.23 + 0.1j, 2.2, 1.0])
A:pandas.tests.indexing.test_indexing.df.loc[df.index[2:6], 'bar']->numpy.array([2.33j, 1.23 + 0.1j, 2.2, 1.0])
A:pandas.tests.indexing.test_indexing.expected->pandas.Series([None] * 3 + list(range(5)) + [None] * 2).astype('object')
A:pandas.tests.indexing.test_indexing.obj->obj(index)
A:pandas.tests.indexing.test_indexing.idxr->idxr(obj)
A:pandas.tests.indexing.test_indexing.nd3->numpy.random.randint(5, size=(2, 2, 2))
A:pandas.tests.indexing.test_indexing.left->pandas.DataFrame({'data': np.ones(100, dtype='float64')}).copy()
A:pandas.tests.indexing.test_indexing.right->pandas.DataFrame({'data': np.ones(100, dtype='float64')}).copy()
A:pandas.tests.indexing.test_indexing.result->_maybe_numeric_slice(df, [1])
A:pandas.tests.indexing.test_indexing.result.columns->list('aaaaaaa')
A:pandas.tests.indexing.test_indexing.dfnu->DataFrame(np.random.randn(5, 3), index=list('AABCD'))
A:pandas.tests.indexing.test_indexing.s->Series(index=range(x), dtype=np.float64)
A:pandas.tests.indexing.test_indexing.df['test']->df['a'].apply(lambda x: '_' if x == 'aaa' else x)
A:pandas.tests.indexing.test_indexing.temp->pandas.DataFrame({'data': np.ones(100, dtype='float64')}).loc[idx, 'a'].apply(lambda x: '-----' if x == 'aaa' else x)
A:pandas.tests.indexing.test_indexing.df2->pandas.DataFrame({'data': np.ones(100, dtype='float64')}).copy()
A:pandas.tests.indexing.test_indexing.df.iloc[1, 0]->TO(1)
A:pandas.tests.indexing.test_indexing.result.iloc[1, 0]->TO(2)
A:pandas.tests.indexing.test_indexing.df_orig->DataFrame([['1', '2', '3', '.4', 5, 6.0, 'foo']], columns=list('ABCDEFG'))
A:pandas.tests.indexing.test_indexing.df.iloc[:, 0:2]->pandas.DataFrame({'data': np.ones(100, dtype='float64')}).iloc[:, 0:2]._convert(datetime=True, numeric=True)
A:pandas.tests.indexing.test_indexing.df.loc[:, 'A']->df['A'].astype(np.int64)
A:pandas.tests.indexing.test_indexing.df.loc[:, ['B', 'C']]->pandas.DataFrame({'data': np.ones(100, dtype='float64')}).loc[:, ['B', 'C']].astype(np.int64)
A:pandas.tests.indexing.test_indexing.df.iloc[:, 0]->df['A'].astype(np.int64)
A:pandas.tests.indexing.test_indexing.integer_index->pandas.Int64Index([0, 1, 2, 3])
A:pandas.tests.indexing.test_indexing.uinteger_index->pandas.UInt64Index([0, 1, 2, 3])
A:pandas.tests.indexing.test_indexing.float_index->pandas.Float64Index([0.1, 1.1, 2.2, 3.3])
A:pandas.tests.indexing.test_indexing.s2->Series(index=range(x), dtype=np.float64).copy()
A:pandas.tests.indexing.test_indexing.exp->DataFrame({'a': [np.nan, 2, 3], 'b': [np.nan, 2.0, 3.0], 'c': [NaT, datetime(2000, 1, 2), datetime(2000, 1, 3)], 'd': [None, 'b', 'c']})
A:pandas.tests.indexing.test_indexing.xs->numpy.arange(20).reshape(5, 4)
A:pandas.tests.indexing.test_indexing.frame['joe']->frame['joe'].astype('float64').astype('float64')
A:pandas.tests.indexing.test_indexing.frame['jolie']->frame['jolie'].map('@{0}'.format).map('@{0}'.format)
A:pandas.tests.indexing.test_indexing.idx->Index(idx)
A:pandas.tests.indexing.test_indexing.rhs->dict(x=9, y=99)
A:pandas.tests.indexing.test_indexing.tslice_->_non_reducing_slice(slice_)
A:pandas.tests.indexing.test_indexing.index_df->DataFrame(1, index=list('ab'), columns=list('AB'))
A:pandas.tests.indexing.test_indexing.wr->weakref.ref(df)
A:pandas.tests.indexing.test_indexing.start_series->Series(start_data)
A:pandas.tests.indexing.test_indexing.expected_series->Series(expected_result)
A:pandas.tests.indexing.test_indexing.start_dataframe->DataFrame({'a': [1, 2, 3], 'b': [1.0, 2.0, 3.0], 'c': [datetime(2000, 1, 1), datetime(2000, 1, 2), datetime(2000, 1, 3)], 'd': ['a', 'b', 'c']})
A:pandas.tests.indexing.test_indexing.expected_dataframe->DataFrame({'foo': expected_result})
A:pandas.tests.indexing.test_indexing.indices->numpy.array([1, 3, 6])
A:pandas.tests.indexing.test_indexing.frame->NDFrame(np.random.randint(5, size=(2, 2, 2)))
A:pandas.tests.indexing.test_indexing.ser->pandas.Series([None] * 10)
A:pandas.tests.indexing.test_indexing.ser[mask]->range(5)
pandas.tests.indexing.test_indexing.TestDataframeNoneCoercion
pandas.tests.indexing.test_indexing.TestDataframeNoneCoercion.test_coercion_with_loc(self)
pandas.tests.indexing.test_indexing.TestDataframeNoneCoercion.test_coercion_with_setitem_and_dataframe(self)
pandas.tests.indexing.test_indexing.TestDataframeNoneCoercion.test_none_coercion_loc_and_dataframe(self)
pandas.tests.indexing.test_indexing.TestDataframeNoneCoercion.test_none_coercion_mixed_dtypes(self)
pandas.tests.indexing.test_indexing.TestFancy(Base)
pandas.tests.indexing.test_indexing.TestFancy.test_astype_assignment(self)
pandas.tests.indexing.test_indexing.TestFancy.test_contains_with_float_index(self)
pandas.tests.indexing.test_indexing.TestFancy.test_duplicate_int_indexing(self,case)
pandas.tests.indexing.test_indexing.TestFancy.test_dups_fancy_indexing(self)
pandas.tests.indexing.test_indexing.TestFancy.test_dups_fancy_indexing2(self)
pandas.tests.indexing.test_indexing.TestFancy.test_getitem_ndarray_3d(self,index,obj,idxr,idxr_id)
pandas.tests.indexing.test_indexing.TestFancy.test_index_contains(self,index,val)
pandas.tests.indexing.test_indexing.TestFancy.test_index_not_contains(self,index,val)
pandas.tests.indexing.test_indexing.TestFancy.test_index_type_coercion(self)
pandas.tests.indexing.test_indexing.TestFancy.test_indexing_mixed_frame_bug(self)
pandas.tests.indexing.test_indexing.TestFancy.test_inf_upcast(self)
pandas.tests.indexing.test_indexing.TestFancy.test_mixed_index_contains(self,index,val)
pandas.tests.indexing.test_indexing.TestFancy.test_mixed_index_not_contains(self,index,val)
pandas.tests.indexing.test_indexing.TestFancy.test_multi_assign(self)
pandas.tests.indexing.test_indexing.TestFancy.test_multitype_list_index_access(self)
pandas.tests.indexing.test_indexing.TestFancy.test_set_index_nan(self)
pandas.tests.indexing.test_indexing.TestFancy.test_setitem_dtype_upcast(self)
pandas.tests.indexing.test_indexing.TestFancy.test_setitem_list(self)
pandas.tests.indexing.test_indexing.TestFancy.test_setitem_ndarray_1d(self)
pandas.tests.indexing.test_indexing.TestFancy.test_setitem_ndarray_3d(self,index,obj,idxr,idxr_id)
pandas.tests.indexing.test_indexing.TestFancy.test_string_slice(self)
pandas.tests.indexing.test_indexing.TestMisc(Base)
pandas.tests.indexing.test_indexing.TestMisc.test_float_index_at_iat(self)
pandas.tests.indexing.test_indexing.TestMisc.test_float_index_non_scalar_assignment(self)
pandas.tests.indexing.test_indexing.TestMisc.test_float_index_to_mixed(self)
pandas.tests.indexing.test_indexing.TestMisc.test_indexing_assignment_dict_already_exists(self)
pandas.tests.indexing.test_indexing.TestMisc.test_indexing_dtypes_on_empty(self)
pandas.tests.indexing.test_indexing.TestMisc.test_list_slice(self)
pandas.tests.indexing.test_indexing.TestMisc.test_maybe_numeric_slice(self)
pandas.tests.indexing.test_indexing.TestMisc.test_mixed_index_assignment(self)
pandas.tests.indexing.test_indexing.TestMisc.test_mixed_index_no_fallback(self)
pandas.tests.indexing.test_indexing.TestMisc.test_no_reference_cycle(self)
pandas.tests.indexing.test_indexing.TestMisc.test_non_reducing_slice(self)
pandas.tests.indexing.test_indexing.TestMisc.test_partial_boolean_frame_indexing(self)
pandas.tests.indexing.test_indexing.TestMisc.test_range_in_series_indexing(self)
pandas.tests.indexing.test_indexing.TestMisc.test_rhs_alignment(self)
pandas.tests.indexing.test_indexing.TestMisc.test_slice_with_zero_step_raises(self)
pandas.tests.indexing.test_indexing.TestMisc.test_str_label_slicing_with_negative_step(self)
pandas.tests.indexing.test_indexing.TestSeriesNoneCoercion
pandas.tests.indexing.test_indexing.TestSeriesNoneCoercion.test_coercion_with_loc_and_series(self)
pandas.tests.indexing.test_indexing.TestSeriesNoneCoercion.test_coercion_with_loc_setitem(self)
pandas.tests.indexing.test_indexing.TestSeriesNoneCoercion.test_coercion_with_setitem(self)
pandas.tests.indexing.test_indexing.TestSeriesNoneCoercion.test_coercion_with_setitem_and_series(self)
pandas.tests.indexing.test_indexing.test_1tuple_without_multiindex()
pandas.tests.indexing.test_indexing.test_duplicate_index_mistyped_key_raises_keyerror()
pandas.tests.indexing.test_indexing.test_extension_array_cross_section()
pandas.tests.indexing.test_indexing.test_extension_array_cross_section_converts()
pandas.tests.indexing.test_indexing.test_ndframe_indexing_raises(idxr,error,error_message)
pandas.tests.indexing.test_indexing.test_readonly_indices()
pandas.tests.indexing.test_indexing.test_setitem_with_bool_mask_and_values_matching_n_trues_in_length()
pandas.tests.indexing.test_indexing.test_validate_indices_empty()
pandas.tests.indexing.test_indexing.test_validate_indices_high()
pandas.tests.indexing.test_indexing.test_validate_indices_low()
pandas.tests.indexing.test_indexing.test_validate_indices_ok()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/conftest.py----------------------------------------
pandas.tests.indexing.conftest.numeric_indexing_engine_type_and_dtype(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/test_scalar.py----------------------------------------
A:pandas.tests.indexing.test_scalar.indicies->self.generate_indices(f, values)
A:pandas.tests.indexing.test_scalar.expected->Series([1, 3], name=0)
A:pandas.tests.indexing.test_scalar.d->getattr(self, kind)
A:pandas.tests.indexing.test_scalar.dates->date_range('1/1/2000', periods=8)
A:pandas.tests.indexing.test_scalar.df->DataFrame([[1, 2], [3, 4]])
A:pandas.tests.indexing.test_scalar.s->Series([1, 2])
A:pandas.tests.indexing.test_scalar.result->DataFrame({'a': [0, 1], 'b': [4, 5]})
A:pandas.tests.indexing.test_scalar.df['date']->df['date'].dt.tz_localize('Asia/Shanghai').dt.tz_localize('Asia/Shanghai')
A:pandas.tests.indexing.test_scalar.ts->Timestamp('2017-08-05 00:00:00+0100', tz=tz_naive_fixture)
pandas.tests.indexing.test_scalar.TestScalar(Base)
pandas.tests.indexing.test_scalar.TestScalar.test_at_and_iat_get(self)
pandas.tests.indexing.test_scalar.TestScalar.test_at_and_iat_set(self)
pandas.tests.indexing.test_scalar.TestScalar.test_at_iat_coercion(self)
pandas.tests.indexing.test_scalar.TestScalar.test_at_to_fail(self)
pandas.tests.indexing.test_scalar.TestScalar.test_at_with_tz(self)
pandas.tests.indexing.test_scalar.TestScalar.test_getitem_zerodim_np_array(self)
pandas.tests.indexing.test_scalar.TestScalar.test_iat_invalid_args(self)
pandas.tests.indexing.test_scalar.TestScalar.test_iat_setter_incompatible_assignment(self)
pandas.tests.indexing.test_scalar.TestScalar.test_imethods_with_dups(self)
pandas.tests.indexing.test_scalar.TestScalar.test_mixed_index_at_iat_loc_iloc_dataframe(self)
pandas.tests.indexing.test_scalar.TestScalar.test_mixed_index_at_iat_loc_iloc_series(self)
pandas.tests.indexing.test_scalar.TestScalar.test_series_set_tz_timestamp(self,tz_naive_fixture)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/interval/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/interval/test_interval_new.py----------------------------------------
A:pandas.tests.indexing.interval.test_interval_new.self.s->Series(np.arange(5), IntervalIndex.from_breaks(np.arange(6)))
A:pandas.tests.indexing.interval.test_interval_new.idx->pandas.IntervalIndex.from_tuples([(1, 3), (1, 3), (3, 7)])
A:pandas.tests.indexing.interval.test_interval_new.s->Series(range(len(idx)), index=idx)
pandas.tests.indexing.interval.test_interval_new.TestIntervalIndex
pandas.tests.indexing.interval.test_interval_new.TestIntervalIndex.setup_method(self,method)
pandas.tests.indexing.interval.test_interval_new.TestIntervalIndex.test_loc_with_interval(self)
pandas.tests.indexing.interval.test_interval_new.TestIntervalIndex.test_loc_with_overlap(self)
pandas.tests.indexing.interval.test_interval_new.TestIntervalIndex.test_loc_with_scalar(self)
pandas.tests.indexing.interval.test_interval_new.TestIntervalIndex.test_loc_with_slices(self)
pandas.tests.indexing.interval.test_interval_new.TestIntervalIndex.test_non_unique(self)
pandas.tests.indexing.interval.test_interval_new.TestIntervalIndex.test_non_unique_moar(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/interval/test_interval.py----------------------------------------
A:pandas.tests.indexing.interval.test_interval.self.s->Series(np.arange(5), IntervalIndex.from_breaks(np.arange(6)))
A:pandas.tests.indexing.interval.test_interval.idx->pandas.MultiIndex.from_arrays([query_df.Item, query_df.RID, query_df.MP])
A:pandas.tests.indexing.interval.test_interval.s->pandas.cut(df.A, 5)
A:pandas.tests.indexing.interval.test_interval.df->pandas.DataFrame({'value': [1, 2, 3, 4, 5, 6, 7, 8]})
A:pandas.tests.indexing.interval.test_interval.expected->pandas.Series([1, 6, 2, 8, 7], index=idx, name='value')
A:pandas.tests.indexing.interval.test_interval.query_df->query_df.sort_index().sort_index()
pandas.tests.indexing.interval.test_interval.TestIntervalIndex
pandas.tests.indexing.interval.test_interval.TestIntervalIndex.setup_method(self,method)
pandas.tests.indexing.interval.test_interval.TestIntervalIndex.test_getitem_with_scalar(self)
pandas.tests.indexing.interval.test_interval.TestIntervalIndex.test_large_series(self)
pandas.tests.indexing.interval.test_interval.TestIntervalIndex.test_loc_getitem_frame(self)
pandas.tests.indexing.interval.test_interval.TestIntervalIndex.test_non_matching(self)
pandas.tests.indexing.interval.test_interval.TestIntervalIndex.test_nonoverlapping_monotonic(self,direction,closed)
pandas.tests.indexing.interval.test_interval.TestIntervalIndexInsideMultiIndex
pandas.tests.indexing.interval.test_interval.TestIntervalIndexInsideMultiIndex.test_mi_intervalindex_slicing_with_scalar(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/multiindex/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/multiindex/test_datetime.py----------------------------------------
A:pandas.tests.indexing.multiindex.test_datetime.idx1->Index(['a', 'a', 'a', 'b', 'b'])
A:pandas.tests.indexing.multiindex.test_datetime.idx2->period_range('2012-01', periods=len(idx1), freq='M')
A:pandas.tests.indexing.multiindex.test_datetime.s->Series(np.random.randn(len(idx1)), [idx1, idx2])
pandas.tests.indexing.multiindex.test_datetime.test_multiindex_period_datetime()
pandas.tests.indexing.multiindex.test_dt.test_multiindex_period_dt()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/multiindex/test_partial.py----------------------------------------
A:pandas.tests.indexing.multiindex.test_partial.df->DataFrame(np.random.randn(4, 4), index=rows, columns=columns)
A:pandas.tests.indexing.multiindex.test_partial.expected->DataFrame(np.random.randn(4, 4), index=rows, columns=columns).iloc[:2, 2:].droplevel('row1').droplevel('col1', axis=1)
A:pandas.tests.indexing.multiindex.test_partial.result->frame['A'].copy()
A:pandas.tests.indexing.multiindex.test_partial.index->MultiIndex(levels=[['foo', 'bar'], ['one', 'two'], [-1, 1]], codes=[[0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1]])
A:pandas.tests.indexing.multiindex.test_partial.expected.columns->DataFrame(np.random.randn(4, 4), index=rows, columns=columns).iloc[:2, 2:].droplevel('row1').droplevel('col1', axis=1).columns.droplevel(0).droplevel(0)
A:pandas.tests.indexing.multiindex.test_partial.idx->MultiIndex(codes=[[0, 0, 0], [0, 1, 1], [1, 0, 1]], levels=[['a', 'b'], ['x', 'y'], ['p', 'q']])
A:pandas.tests.indexing.multiindex.test_partial.exp->ymd.copy()
A:pandas.tests.indexing.multiindex.test_partial.columns->pandas.MultiIndex.from_product(iterables, names=['col1', 'col2'])
A:pandas.tests.indexing.multiindex.test_partial.rows->pandas.MultiIndex.from_product(iterables, names=['row1', 'row2'])
pandas.tests.indexing.multiindex.test_partial.TestMultiIndexPartial
pandas.tests.indexing.multiindex.test_partial.TestMultiIndexPartial.test_fancy_slice_partial(self,multiindex_dataframe_random_data,multiindex_year_month_day_dataframe_random_data)
pandas.tests.indexing.multiindex.test_partial.TestMultiIndexPartial.test_getitem_partial(self,multiindex_year_month_day_dataframe_random_data)
pandas.tests.indexing.multiindex.test_partial.TestMultiIndexPartial.test_getitem_partial_column_select(self)
pandas.tests.indexing.multiindex.test_partial.TestMultiIndexPartial.test_getitem_partial_int(self)
pandas.tests.indexing.multiindex.test_partial.TestMultiIndexPartial.test_partial_loc_missing(self,multiindex_year_month_day_dataframe_random_data)
pandas.tests.indexing.multiindex.test_partial.TestMultiIndexPartial.test_partial_set(self,multiindex_year_month_day_dataframe_random_data)
pandas.tests.indexing.multiindex.test_partial.TestMultiIndexPartial.test_series_slice_partial(self)
pandas.tests.indexing.multiindex.test_partial.TestMultiIndexPartial.test_setitem_multiple_partial(self,multiindex_dataframe_random_data)
pandas.tests.indexing.multiindex.test_partial.TestMultiIndexPartial.test_xs_partial(self,multiindex_dataframe_random_data,multiindex_year_month_day_dataframe_random_data)
pandas.tests.indexing.multiindex.test_partial.test_loc_getitem_partial_both_axis()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/multiindex/test_iloc.py----------------------------------------
A:pandas.tests.indexing.multiindex.test_iloc.data->numpy.random.randn(3, 3)
A:pandas.tests.indexing.multiindex.test_iloc.arr->numpy.random.randn(4, 3)
A:pandas.tests.indexing.multiindex.test_iloc.df->df.set_index(['i', 'j']).set_index(['i', 'j'])
A:pandas.tests.indexing.multiindex.test_iloc.result->DataFrame([[df.iloc[r, c] for c in range(2)] for r in range(5)])
A:pandas.tests.indexing.multiindex.test_iloc.expected->df.set_index(['i', 'j']).set_index(['i', 'j']).xs(df.index[2])
A:pandas.tests.indexing.multiindex.test_iloc.tup->zip(*[['a', 'a', 'b', 'b'], ['x', 'y', 'x', 'y']])
A:pandas.tests.indexing.multiindex.test_iloc.index->pandas.MultiIndex.from_tuples([('CC', 'A'), ('CC', 'B'), ('CC', 'B'), ('BB', 'a'), ('BB', 'b')])
A:pandas.tests.indexing.multiindex.test_iloc.columns->pandas.MultiIndex.from_tuples([('Ohio', 'Green'), ('Ohio', 'Red'), ('Colorado', 'Green')])
A:pandas.tests.indexing.multiindex.test_iloc.series->df.set_index(['i', 'j']).set_index(['i', 'j']).k.copy()
pandas.tests.indexing.multiindex.test_iloc.simple_multiindex_dataframe()
pandas.tests.indexing.multiindex.test_iloc.test_frame_getitem_slice(multiindex_dataframe_random_data)
pandas.tests.indexing.multiindex.test_iloc.test_frame_setitem_slice(multiindex_dataframe_random_data)
pandas.tests.indexing.multiindex.test_iloc.test_getitem_iloc(multiindex_dataframe_random_data)
pandas.tests.indexing.multiindex.test_iloc.test_iloc_getitem_labels()
pandas.tests.indexing.multiindex.test_iloc.test_iloc_getitem_multiple_items()
pandas.tests.indexing.multiindex.test_iloc.test_iloc_integer_locations()
pandas.tests.indexing.multiindex.test_iloc.test_iloc_returns_dataframe(simple_multiindex_dataframe)
pandas.tests.indexing.multiindex.test_iloc.test_iloc_returns_scalar(simple_multiindex_dataframe)
pandas.tests.indexing.multiindex.test_iloc.test_iloc_returns_series(indexer,expected,simple_multiindex_dataframe)
pandas.tests.indexing.multiindex.test_iloc.test_iloc_setitem_int_multiindex_series(data,indexes,values,expected_k)
pandas.tests.indexing.multiindex.test_iloc.test_indexing_ambiguity_bug_1678()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/multiindex/test_indexing_slow.py----------------------------------------
A:pandas.tests.indexing.multiindex.test_indexing_slow.mask->numpy.ones(len(df)).astype('bool')
A:pandas.tests.indexing.multiindex.test_indexing_slow.right->Series(right['jolia'].values, name=right.index[0], index=['jolia'])
A:pandas.tests.indexing.multiindex.test_indexing_slow.vals->list(map(tuple, zip(*vals)))
A:pandas.tests.indexing.multiindex.test_indexing_slow.keys->list(map(tuple, zip(*keys)))
A:pandas.tests.indexing.multiindex.test_indexing_slow.df->DataFrame(vals, columns=cols)
A:pandas.tests.indexing.multiindex.test_indexing_slow.mi->DataFrame(vals, columns=cols).set_index(cols[:-1])
A:pandas.tests.indexing.multiindex.test_indexing_slow.result->pandas.MultiIndex.from_arrays([range(10 ** 6), range(10 ** 6)])
pandas.tests.indexing.multiindex.test_indexing_slow.test_large_mi_dataframe_indexing()
pandas.tests.indexing.multiindex.test_indexing_slow.test_multiindex_get_loc()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/multiindex/test_setitem.py----------------------------------------
A:pandas.tests.indexing.multiindex.test_setitem.fn->getattr(target, index_fn)
A:pandas.tests.indexing.multiindex.test_setitem.result->getattr(target, index_fn).__getitem__(indexers)
A:pandas.tests.indexing.multiindex.test_setitem.index->pandas.MultiIndex.from_tuples([('a', 'c'), ('b', 'x'), ('a', 'd')], names=['l1', 'l2'])
A:pandas.tests.indexing.multiindex.test_setitem.df->DataFrame(np.random.randn(len(index), 4), index=index, columns=['a', 'b', 'c', 'd']).copy()
A:pandas.tests.indexing.multiindex.test_setitem.output->DataFrame(99.0, index=[0, 2, 4], columns=['B', 'C'])
A:pandas.tests.indexing.multiindex.test_setitem.idx->pandas.MultiIndex.from_product([['A', 'B', 'C'], date_range('2015-01-01', '2015-04-01', freq='MS')])
A:pandas.tests.indexing.multiindex.test_setitem.cols->pandas.MultiIndex.from_tuples([('A', '1'), ('B', '1'), ('A', '2')])
A:pandas.tests.indexing.multiindex.test_setitem.subidx->pandas.MultiIndex.from_tuples([('A', Timestamp('2015-01-01')), ('A', Timestamp('2015-02-01'))])
A:pandas.tests.indexing.multiindex.test_setitem.subcols->pandas.MultiIndex.from_tuples([('foo', Timestamp('2016-01-01')), ('foo', Timestamp('2016-02-01'))])
A:pandas.tests.indexing.multiindex.test_setitem.vals->DataFrame(np.random.random((2, 4)), index=subidx, columns=cols)
A:pandas.tests.indexing.multiindex.test_setitem.copy->DataFrame(np.random.randn(len(index), 4), index=index, columns=['a', 'b', 'c', 'd']).copy().copy()
A:pandas.tests.indexing.multiindex.test_setitem.df_orig->pandas.DataFrame.from_dict({'price': {('DE', 'Coal', 'Stock'): 2, ('DE', 'Gas', 'Stock'): 4, ('DE', 'Elec', 'Demand'): 1, ('FR', 'Gas', 'Stock'): 5, ('FR', 'Solar', 'SupIm'): 0, ('FR', 'Wind', 'SupIm'): 0}})
A:pandas.tests.indexing.multiindex.test_setitem.df_orig.index->pandas.MultiIndex.from_tuples(df_orig.index, names=['Sit', 'Com', 'Type'])
A:pandas.tests.indexing.multiindex.test_setitem.expected->pandas.DataFrame({'e': [99, 1, 100]}, index=index)
A:pandas.tests.indexing.multiindex.test_setitem.arr->numpy.array([0.0, 1.0])
A:pandas.tests.indexing.multiindex.test_setitem.exp->Series(np.random.randn(len(index)), index=index).reindex(series.index[2:])
A:pandas.tests.indexing.multiindex.test_setitem.grp->DataFrame(np.random.randn(len(index), 4), index=index, columns=['a', 'b', 'c', 'd']).copy().groupby(level=index_cols[:4])
A:pandas.tests.indexing.multiindex.test_setitem.f_index->numpy.arange(5)
A:pandas.tests.indexing.multiindex.test_setitem.new_vals->numpy.arange(df2.shape[0])
A:pandas.tests.indexing.multiindex.test_setitem.midx->MultiIndex(codes=codes, levels=levels, names=[None, 'id'])
A:pandas.tests.indexing.multiindex.test_setitem.cp->DataFrame(np.random.randn(len(index), 4), index=index, columns=['a', 'b', 'c', 'd']).copy().copy()
A:pandas.tests.indexing.multiindex.test_setitem.columns->pandas.MultiIndex.from_tuples([('A', '1'), ('A', '2'), ('B', '1')])
A:pandas.tests.indexing.multiindex.test_setitem.frame->DataFrame(np.random.randn(len(index), 4), index=index, columns=['a', 'b', 'c', 'd'])
A:pandas.tests.indexing.multiindex.test_setitem.series->Series(np.random.randn(len(index)), index=index)
A:pandas.tests.indexing.multiindex.test_setitem.reindexed->dft.reindex(columns=[('foo', 'two')])
A:pandas.tests.indexing.multiindex.test_setitem.ix->pandas.MultiIndex.from_tuples([(1, 1)])
A:pandas.tests.indexing.multiindex.test_setitem.df['A']->df['A'].astype(np.float64).astype(np.float64)
A:pandas.tests.indexing.multiindex.test_setitem.df.loc['a', 'e']->numpy.arange(99, 101, dtype='int64')
pandas.tests.indexing.multiindex.test_setitem.TestMultiIndexSetItem
pandas.tests.indexing.multiindex.test_setitem.TestMultiIndexSetItem.test_astype_assignment_with_dups(self)
pandas.tests.indexing.multiindex.test_setitem.TestMultiIndexSetItem.test_frame_getitem_setitem_boolean(self,multiindex_dataframe_random_data)
pandas.tests.indexing.multiindex.test_setitem.TestMultiIndexSetItem.test_frame_getitem_setitem_multislice(self)
pandas.tests.indexing.multiindex.test_setitem.TestMultiIndexSetItem.test_frame_setitem_multi_column(self)
pandas.tests.indexing.multiindex.test_setitem.TestMultiIndexSetItem.test_getitem_setitem_slice_integers(self)
pandas.tests.indexing.multiindex.test_setitem.TestMultiIndexSetItem.test_getitem_setitem_tuple_plus_columns(self,multiindex_year_month_day_dataframe_random_data)
pandas.tests.indexing.multiindex.test_setitem.TestMultiIndexSetItem.test_multiindex_assignment(self)
pandas.tests.indexing.multiindex.test_setitem.TestMultiIndexSetItem.test_multiindex_setitem(self)
pandas.tests.indexing.multiindex.test_setitem.TestMultiIndexSetItem.test_nonunique_assignment_1750(self)
pandas.tests.indexing.multiindex.test_setitem.TestMultiIndexSetItem.test_series_setitem(self,multiindex_year_month_day_dataframe_random_data)
pandas.tests.indexing.multiindex.test_setitem.TestMultiIndexSetItem.test_set_column_scalar_with_loc(self,multiindex_dataframe_random_data)
pandas.tests.indexing.multiindex.test_setitem.TestMultiIndexSetItem.test_setitem_change_dtype(self,multiindex_dataframe_random_data)
pandas.tests.indexing.multiindex.test_setitem.TestMultiIndexSetItem.test_setitem_multiindex(self)
pandas.tests.indexing.multiindex.test_setitem.TestMultiIndexSetItem.test_setitem_nonmonotonic(self)
pandas.tests.indexing.multiindex.test_setitem.test_frame_setitem_copy_no_write(multiindex_dataframe_random_data)
pandas.tests.indexing.multiindex.test_setitem.test_frame_setitem_copy_raises(multiindex_dataframe_random_data)
pandas.tests.indexing.multiindex.test_setitem.test_frame_setitem_view_direct(multiindex_dataframe_random_data)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/multiindex/test_chaining_and_caching.py----------------------------------------
A:pandas.tests.indexing.multiindex.test_chaining_and_caching.multiind->pandas.MultiIndex.from_tuples(tuples, names=['part', 'side'])
A:pandas.tests.indexing.multiindex.test_chaining_and_caching.zed->DataFrame(events, index=['a', 'b'], columns=multiind)
A:pandas.tests.indexing.multiindex.test_chaining_and_caching.a->numpy.random.rand(10, 3)
A:pandas.tests.indexing.multiindex.test_chaining_and_caching.df->DataFrame(a, columns=['x', 'y', 'z'])
A:pandas.tests.indexing.multiindex.test_chaining_and_caching.index->pandas.MultiIndex.from_tuples(zip(*arrays))
A:pandas.tests.indexing.multiindex.test_chaining_and_caching.s->Series(np.zeros(n), index=index)
A:pandas.tests.indexing.multiindex.test_chaining_and_caching.expected->Series(np.ones(n), index=index)
pandas.tests.indexing.multiindex.test_chaining_and_caching.test_cache_updating()
pandas.tests.indexing.multiindex.test_chaining_and_caching.test_detect_chained_assignment()
pandas.tests.indexing.multiindex.test_chaining_and_caching.test_indexer_caching()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/multiindex/test_multiindex.py----------------------------------------
A:pandas.tests.indexing.multiindex.test_multiindex.df->pandas.DataFrame({'c1': [1, 2, 3], 'c2': [np.nan, np.nan, np.nan]}, index=mi)
A:pandas.tests.indexing.multiindex.test_multiindex.idx->pandas.Index(['a', 'a', 'c'])
A:pandas.tests.indexing.multiindex.test_multiindex.s->Series(np.arange(n), MultiIndex.from_arrays((['a'] * n, np.arange(n))))
A:pandas.tests.indexing.multiindex.test_multiindex.result->pandas.DataFrame({'c1': [1, 2, 3], 'c2': [np.nan, np.nan, np.nan]}, index=mi).set_index(['a', 'b'], drop=False)
A:pandas.tests.indexing.multiindex.test_multiindex.expected->pandas.DataFrame({'c1': df['c1'], 'c2': [1.0, 1.0, np.nan]}, index=mi)
A:pandas.tests.indexing.multiindex.test_multiindex.tx->pandas.timedelta_range('09:30:00', '16:00:00', freq='30 min')
A:pandas.tests.indexing.multiindex.test_multiindex.dti->pandas.to_datetime(['20190101', '20190101', '20190102'])
A:pandas.tests.indexing.multiindex.test_multiindex.mi->pandas.MultiIndex.from_arrays([dti, idx], names=['index1', 'index2'])
A:pandas.tests.indexing.multiindex.test_multiindex.df2->pandas.DataFrame({'c1': [1, 2, 3], 'c2': [np.nan, np.nan, np.nan]}, index=mi).copy(deep=True)
A:pandas.tests.indexing.multiindex.test_multiindex.df3->pandas.DataFrame({'c1': [1, 2, 3], 'c2': [np.nan, np.nan, np.nan]}, index=mi).copy(deep=True)
pandas.tests.indexing.multiindex.test_multiindex.TestMultiIndexBasic
pandas.tests.indexing.multiindex.test_multiindex.TestMultiIndexBasic.test_contains(self)
pandas.tests.indexing.multiindex.test_multiindex.TestMultiIndexBasic.test_indexing_over_hashtable_size_cutoff(self)
pandas.tests.indexing.multiindex.test_multiindex.TestMultiIndexBasic.test_multi_nan_indexing(self)
pandas.tests.indexing.multiindex.test_multiindex.TestMultiIndexBasic.test_multiindex_contains_dropped(self)
pandas.tests.indexing.multiindex.test_multiindex.TestMultiIndexBasic.test_multiindex_perf_warn(self)
pandas.tests.indexing.multiindex.test_multiindex.TestMultiIndexBasic.test_nested_tuples_duplicates(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/multiindex/test_slice.py----------------------------------------
A:pandas.tests.indexing.multiindex.test_slice.ix->pandas.MultiIndex.from_product([_mklbl('A', 5), _mklbl('B', 7), _mklbl('C', 4), _mklbl('D', 2)])
A:pandas.tests.indexing.multiindex.test_slice.df->pandas.DataFrame(dic, index=[0, 1])
A:pandas.tests.indexing.multiindex.test_slice.index->pandas.MultiIndex.from_tuples([('A', 1), ('A', 2), ('A', 3), ('B', 1)], names=['one', 'two'])
A:pandas.tests.indexing.multiindex.test_slice.columns->pandas.MultiIndex.from_tuples([('a', 'foo'), ('a', 'bar'), ('b', 'foo'), ('b', 'bah')], names=['lvl0', 'lvl1'])
A:pandas.tests.indexing.multiindex.test_slice.expected->pandas.DataFrame({('b', 'd'): [4, 1]})
A:pandas.tests.indexing.multiindex.test_slice.s->Series(np.arange(20), MultiIndex.from_product([list('abcde'), np.arange(4)]))
A:pandas.tests.indexing.multiindex.test_slice.result->result.sort_index().sort_index()
A:pandas.tests.indexing.multiindex.test_slice.n->len(ints)
A:pandas.tests.indexing.multiindex.test_slice.idx->pandas.MultiIndex.from_product([freq, np.arange(500)])
A:pandas.tests.indexing.multiindex.test_slice.df['DATE']->pandas.to_datetime(df['DATE'])
A:pandas.tests.indexing.multiindex.test_slice.df1->df1.sort_index().sort_index()
A:pandas.tests.indexing.multiindex.test_slice.df_orig->df_orig.sort_index(axis=0).sort_index(axis=1).sort_index(axis=0).sort_index(axis=1)
A:pandas.tests.indexing.multiindex.test_slice.df.loc[(slice(None), 1), (slice(None), ['foo'])]->numpy.array([100, 100, 100, 100], dtype='int64')
A:pandas.tests.indexing.multiindex.test_slice.rhs->df_orig.sort_index(axis=0).sort_index(axis=1).sort_index(axis=0).sort_index(axis=1).loc[(slice(None), 1), (slice(None), ['foo'])].copy()
A:pandas.tests.indexing.multiindex.test_slice.exp->ymd['A'].copy()
A:pandas.tests.indexing.multiindex.test_slice.tslice_->_non_reducing_slice(slice_)
pandas.tests.indexing.multiindex.test_slice.TestMultiIndexSlicers
pandas.tests.indexing.multiindex.test_slice.TestMultiIndexSlicers.test_int_series_slicing(self,multiindex_year_month_day_dataframe_random_data)
pandas.tests.indexing.multiindex.test_slice.TestMultiIndexSlicers.test_loc_ax_single_level_indexer_simple_df(self)
pandas.tests.indexing.multiindex.test_slice.TestMultiIndexSlicers.test_loc_axis_arguments(self)
pandas.tests.indexing.multiindex.test_slice.TestMultiIndexSlicers.test_loc_axis_single_level_multi_col_indexing_multiindex_col_df(self)
pandas.tests.indexing.multiindex.test_slice.TestMultiIndexSlicers.test_loc_axis_single_level_single_col_indexing_multiindex_col_df(self)
pandas.tests.indexing.multiindex.test_slice.TestMultiIndexSlicers.test_multiindex_label_slicing_with_negative_step(self)
pandas.tests.indexing.multiindex.test_slice.TestMultiIndexSlicers.test_multiindex_slice_first_level(self)
pandas.tests.indexing.multiindex.test_slice.TestMultiIndexSlicers.test_multiindex_slicers_datetimelike(self)
pandas.tests.indexing.multiindex.test_slice.TestMultiIndexSlicers.test_multiindex_slicers_dtlike(self)
pandas.tests.indexing.multiindex.test_slice.TestMultiIndexSlicers.test_multiindex_slicers_edges(self)
pandas.tests.indexing.multiindex.test_slice.TestMultiIndexSlicers.test_multiindex_slicers_non_unique(self)
pandas.tests.indexing.multiindex.test_slice.TestMultiIndexSlicers.test_non_reducing_slice_on_multiindex(self)
pandas.tests.indexing.multiindex.test_slice.TestMultiIndexSlicers.test_per_axis_per_level_doc_examples(self)
pandas.tests.indexing.multiindex.test_slice.TestMultiIndexSlicers.test_per_axis_per_level_getitem(self)
pandas.tests.indexing.multiindex.test_slice.TestMultiIndexSlicers.test_per_axis_per_level_setitem(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/multiindex/test_set_ops.py----------------------------------------
A:pandas.tests.indexing.multiindex.test_set_ops.idx->pandas.MultiIndex.from_product([['a', 'b'], ['A', 'B']], names=['a', 'b'])
A:pandas.tests.indexing.multiindex.test_set_ops.idx2->pandas.MultiIndex.from_product([['a', 'b'], ['A', 'B']], names=['a', 'b']).copy().rename(['A', 'B'])
A:pandas.tests.indexing.multiindex.test_set_ops.tuples->sorted(zip(*arrays))
A:pandas.tests.indexing.multiindex.test_set_ops.index->pandas.MultiIndex.from_tuples(tuples)
A:pandas.tests.indexing.multiindex.test_set_ops.df->DataFrame([[1, 2], [3, 4], [5, 6]], index=mix)
A:pandas.tests.indexing.multiindex.test_set_ops.result->DataFrame([[1, 2], [3, 4], [5, 6]], index=mix).copy()
A:pandas.tests.indexing.multiindex.test_set_ops.expected->DataFrame([[1, 2], [3, 4], [5, 6]], index=mix).copy()
A:pandas.tests.indexing.multiindex.test_set_ops.mix->pandas.MultiIndex.from_tuples([('1a', '2a'), ('1a', '2b'), ('1a', '2c')])
A:pandas.tests.indexing.multiindex.test_set_ops.s->Series({(1, 1): 1, (1, 2): 2})
pandas.tests.indexing.multiindex.test_set_ops.TestMultiIndexSetOps
pandas.tests.indexing.multiindex.test_set_ops.TestMultiIndexSetOps.test_dataframe_insert_column_all_na(self)
pandas.tests.indexing.multiindex.test_set_ops.TestMultiIndexSetOps.test_mixed_depth_insert(self)
pandas.tests.indexing.multiindex.test_set_ops.TestMultiIndexSetOps.test_multiindex_symmetric_difference(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/multiindex/test_sorted.py----------------------------------------
A:pandas.tests.indexing.multiindex.test_sorted.index_columns->list('abc')
A:pandas.tests.indexing.multiindex.test_sorted.df->DataFrame({'col1': ['b', 'd', 'b', 'a'], 'col2': [3, 1, 1, 2], 'data': ['one', 'two', 'three', 'four']})
A:pandas.tests.indexing.multiindex.test_sorted.xp_idx->pandas.MultiIndex.from_tuples([(0, 1, 0)], names=['a', 'b', 'c'])
A:pandas.tests.indexing.multiindex.test_sorted.xp->Series(['x'], index=xp_idx, name='data')
A:pandas.tests.indexing.multiindex.test_sorted.expected->DataFrame({'col1': ['b', 'd', 'b', 'a'], 'col2': [3, 1, 1, 2], 'data': ['one', 'two', 'three', 'four']}).reindex(df.index[arrays[0] == 'foo'])
A:pandas.tests.indexing.multiindex.test_sorted.df2->DataFrame({'col1': ['b', 'd', 'b', 'a'], 'col2': [3, 1, 1, 2], 'data': ['one', 'two', 'three', 'four']}).set_index(['col1', 'col2'])
A:pandas.tests.indexing.multiindex.test_sorted.df2_original->DataFrame({'col1': ['b', 'd', 'b', 'a'], 'col2': [3, 1, 1, 2], 'data': ['one', 'two', 'three', 'four']}).set_index(['col1', 'col2']).copy()
A:pandas.tests.indexing.multiindex.test_sorted.result->DataFrame({'col1': ['b', 'd', 'b', 'a'], 'col2': [3, 1, 1, 2], 'data': ['one', 'two', 'three', 'four']}).xs('foo')
A:pandas.tests.indexing.multiindex.test_sorted.expected.columns->DataFrame({'col1': ['b', 'd', 'b', 'a'], 'col2': [3, 1, 1, 2], 'data': ['one', 'two', 'three', 'four']}).reindex(df.index[arrays[0] == 'foo']).columns.droplevel(0)
A:pandas.tests.indexing.multiindex.test_sorted.expected.index->DataFrame({'col1': ['b', 'd', 'b', 'a'], 'col2': [3, 1, 1, 2], 'data': ['one', 'two', 'three', 'four']}).reindex(df.index[arrays[0] == 'foo']).index.droplevel(0)
A:pandas.tests.indexing.multiindex.test_sorted.tuples->zip(*arrays)
A:pandas.tests.indexing.multiindex.test_sorted.index->pandas.MultiIndex.from_tuples(tuples)
A:pandas.tests.indexing.multiindex.test_sorted.s->Series(randn(8), index=index)
pandas.tests.indexing.multiindex.test_sorted.TestMultiIndexSorted
pandas.tests.indexing.multiindex.test_sorted.TestMultiIndexSorted.test_frame_getitem_not_sorted(self,multiindex_dataframe_random_data)
pandas.tests.indexing.multiindex.test_sorted.TestMultiIndexSorted.test_frame_getitem_not_sorted2(self)
pandas.tests.indexing.multiindex.test_sorted.TestMultiIndexSorted.test_getitem_multilevel_index_tuple_not_sorted(self)
pandas.tests.indexing.multiindex.test_sorted.TestMultiIndexSorted.test_getitem_slice_not_sorted(self,multiindex_dataframe_random_data)
pandas.tests.indexing.multiindex.test_sorted.TestMultiIndexSorted.test_series_getitem_not_sorted(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/multiindex/test_getitem.py----------------------------------------
A:pandas.tests.indexing.multiindex.test_getitem.s->Series([1, 2, 3])
A:pandas.tests.indexing.multiindex.test_getitem.s.index->pandas.MultiIndex.from_tuples([(0, 0), (1, 1), (2, 1)])
A:pandas.tests.indexing.multiindex.test_getitem.result->indexer(df)
A:pandas.tests.indexing.multiindex.test_getitem.index->Index(['h1', 'h3', 'h5'])
A:pandas.tests.indexing.multiindex.test_getitem.arr->numpy.random.randn(len(index), 1)
A:pandas.tests.indexing.multiindex.test_getitem.df->DataFrame(np.random.randn(4, 6), columns=index)
A:pandas.tests.indexing.multiindex.test_getitem.expected->Series(['a', 1, 1], index=['h1', 'h3', 'h5'], name='A1')
A:pandas.tests.indexing.multiindex.test_getitem.expected.index->Series(['a', 1, 1], index=['h1', 'h3', 'h5'], name='A1').index.droplevel(0).droplevel(0)
A:pandas.tests.indexing.multiindex.test_getitem.expected.columns->Series(['a', 1, 1], index=['h1', 'h3', 'h5'], name='A1').columns.droplevel(0)
A:pandas.tests.indexing.multiindex.test_getitem.tuples->sorted(zip(*arrays))
A:pandas.tests.indexing.multiindex.test_getitem.columns->pandas.MultiIndex.from_tuples([('A', 'A1')], names=['main', 'sub'])
pandas.tests.indexing.multiindex.test_getitem.dataframe_with_duplicate_index()
pandas.tests.indexing.multiindex.test_getitem.test_frame_getitem_multicolumn_empty_level()
pandas.tests.indexing.multiindex.test_getitem.test_frame_getitem_simple_key_error(multiindex_dataframe_random_data,indexer,expected_error_msg)
pandas.tests.indexing.multiindex.test_getitem.test_frame_getitem_toplevel(multiindex_dataframe_random_data,indexer,expected_slice)
pandas.tests.indexing.multiindex.test_getitem.test_frame_mi_access(dataframe_with_duplicate_index,indexer)
pandas.tests.indexing.multiindex.test_getitem.test_frame_mi_access_returns_frame(dataframe_with_duplicate_index)
pandas.tests.indexing.multiindex.test_getitem.test_frame_mi_access_returns_series(dataframe_with_duplicate_index)
pandas.tests.indexing.multiindex.test_getitem.test_frame_mixed_depth_get()
pandas.tests.indexing.multiindex.test_getitem.test_getitem_simple(multiindex_dataframe_random_data)
pandas.tests.indexing.multiindex.test_getitem.test_series_getitem(multiindex_year_month_day_dataframe_random_data,indexer)
pandas.tests.indexing.multiindex.test_getitem.test_series_getitem_corner_generator(multiindex_year_month_day_dataframe_random_data)
pandas.tests.indexing.multiindex.test_getitem.test_series_getitem_duplicates_multiindex(level0_value)
pandas.tests.indexing.multiindex.test_getitem.test_series_getitem_indexing_errors(multiindex_year_month_day_dataframe_random_data,indexer,expected_error,expected_error_msg)
pandas.tests.indexing.multiindex.test_getitem.test_series_getitem_multiindex(access_method,level1_value,expected)
pandas.tests.indexing.multiindex.test_getitem.test_series_getitem_returns_scalar(multiindex_year_month_day_dataframe_random_data,indexer)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/multiindex/test_loc.py----------------------------------------
A:pandas.tests.indexing.multiindex.test_loc.index->pandas.MultiIndex.from_product([a, b])
A:pandas.tests.indexing.multiindex.test_loc.x->Series(index=index, data=range(9), dtype=np.float64)
A:pandas.tests.indexing.multiindex.test_loc.y->numpy.array([1, 3])
A:pandas.tests.indexing.multiindex.test_loc.expected->pandas.Series([np.nan], dtype=object, name='OMS', index=pd.MultiIndex.from_tuples([(pd.Period('2013Q1'), 1111)], names=['Periode', 'CVR']))
A:pandas.tests.indexing.multiindex.test_loc.y1->Series([1, 3], index=[1, 2])
A:pandas.tests.indexing.multiindex.test_loc.empty->numpy.array([])
A:pandas.tests.indexing.multiindex.test_loc.scalar->numpy.int64(1)
A:pandas.tests.indexing.multiindex.test_loc.df->pandas.DataFrame(index=idx, columns=('OMS', 'OMK', 'RES', 'DRIFT_IND', 'OEVRIG_IND', 'FIN_IND', 'VARE_UD', 'LOEN_UD', 'FIN_UD'))
A:pandas.tests.indexing.multiindex.test_loc.s->Series(np.arange(9, dtype='int64'), index=idx).sort_index()
A:pandas.tests.indexing.multiindex.test_loc.indexer->tuple((convert_nested_indexer(indexer_type, k) for (indexer_type, k) in zip(types, keys)))
A:pandas.tests.indexing.multiindex.test_loc.idx->pandas.MultiIndex.from_product((a, i), names=('Periode', 'CVR'))
A:pandas.tests.indexing.multiindex.test_loc.multi_index->pandas.MultiIndex.from_product((['foo', 'bar', 'baz'], ['alpha', 'beta']))
A:pandas.tests.indexing.multiindex.test_loc.expected.index->pandas.Series([np.nan], dtype=object, name='OMS', index=pd.MultiIndex.from_tuples([(pd.Period('2013Q1'), 1111)], names=['Periode', 'CVR'])).index.droplevel(0)
A:pandas.tests.indexing.multiindex.test_loc.df.loc[:, 'B']->numpy.arange(4)
A:pandas.tests.indexing.multiindex.test_loc.expected.iloc[:, 2]->numpy.arange(4)
A:pandas.tests.indexing.multiindex.test_loc.a->pandas.period_range('2013Q1', '2013Q4', freq='Q')
pandas.tests.indexing.multiindex.test_loc.TestMultiIndexLoc
pandas.tests.indexing.multiindex.test_loc.TestMultiIndexLoc.test_get_loc_single_level(self,single_level_multiindex)
pandas.tests.indexing.multiindex.test_loc.TestMultiIndexLoc.test_loc_getitem_array(self)
pandas.tests.indexing.multiindex.test_loc.TestMultiIndexLoc.test_loc_getitem_int_slice(self)
pandas.tests.indexing.multiindex.test_loc.TestMultiIndexLoc.test_loc_getitem_nested_indexer(self,indexer_type_1,indexer_type_2)
pandas.tests.indexing.multiindex.test_loc.TestMultiIndexLoc.test_loc_getitem_series(self)
pandas.tests.indexing.multiindex.test_loc.TestMultiIndexLoc.test_loc_multiindex_incomplete(self)
pandas.tests.indexing.multiindex.test_loc.TestMultiIndexLoc.test_loc_multiindex_indexer_none(self)
pandas.tests.indexing.multiindex.test_loc.TestMultiIndexLoc.test_loc_multiindex_ints(self)
pandas.tests.indexing.multiindex.test_loc.TestMultiIndexLoc.test_loc_multiindex_labels(self)
pandas.tests.indexing.multiindex.test_loc.TestMultiIndexLoc.test_loc_multiindex_list_missing_label(self,key,pos)
pandas.tests.indexing.multiindex.test_loc.TestMultiIndexLoc.test_loc_multiindex_missing_label_raises(self)
pandas.tests.indexing.multiindex.test_loc.TestMultiIndexLoc.test_loc_multiindex_too_many_dims_raises(self)
pandas.tests.indexing.multiindex.test_loc.frame_random_data_integer_multi_index()
pandas.tests.indexing.multiindex.test_loc.single_level_multiindex()
pandas.tests.indexing.multiindex.test_loc.test_loc_getitem_duplicates_multiindex_empty_indexer(columns_indexer)
pandas.tests.indexing.multiindex.test_loc.test_loc_getitem_duplicates_multiindex_missing_indexers(indexer,pos)
pandas.tests.indexing.multiindex.test_loc.test_loc_getitem_duplicates_multiindex_non_scalar_type_object()
pandas.tests.indexing.multiindex.test_loc.test_loc_getitem_int(frame_random_data_integer_multi_index)
pandas.tests.indexing.multiindex.test_loc.test_loc_getitem_int_raises_exception(frame_random_data_integer_multi_index)
pandas.tests.indexing.multiindex.test_loc.test_loc_getitem_lowerdim_corner(multiindex_dataframe_random_data)
pandas.tests.indexing.multiindex.test_loc.test_loc_getitem_tuple_plus_slice()
pandas.tests.indexing.multiindex.test_loc.test_loc_nan_multiindex()
pandas.tests.indexing.multiindex.test_loc.test_loc_period_string_indexing()
pandas.tests.indexing.multiindex.test_loc.test_loc_setitem_single_column_slice()
pandas.tests.indexing.multiindex.test_loc.test_series_loc_getitem_fancy(multiindex_year_month_day_dataframe_random_data)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/multiindex/test_ix.py----------------------------------------
A:pandas.tests.indexing.multiindex.test_ix.df->DataFrame(np.random.randn(3, 3), columns=[[2, 2, 4], [6, 8, 10]], index=[[4, 4, 8], [8, 10, 12]])
A:pandas.tests.indexing.multiindex.test_ix.df.columns->list(range(3))
A:pandas.tests.indexing.multiindex.test_ix.index->pandas.MultiIndex.from_arrays([[4.0] * 3, [2012] * 3], names=['col', 'year'])
A:pandas.tests.indexing.multiindex.test_ix.expected->s.reindex(s.index[49:51])
pandas.tests.indexing.multiindex.test_ix.TestMultiIndex
pandas.tests.indexing.multiindex.test_ix.TestMultiIndex.test_frame_setitem_loc(self,multiindex_dataframe_random_data)
pandas.tests.indexing.multiindex.test_ix.TestMultiIndex.test_loc_general(self)
pandas.tests.indexing.multiindex.test_ix.TestMultiIndex.test_loc_multiindex_missing_label_raises(self)
pandas.tests.indexing.multiindex.test_ix.TestMultiIndex.test_series_loc_getitem_fancy(self,multiindex_year_month_day_dataframe_random_data)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/multiindex/test_xs.py----------------------------------------
A:pandas.tests.indexing.multiindex.test_xs.arr->numpy.random.randn(3, 5)
A:pandas.tests.indexing.multiindex.test_xs.index->pandas.MultiIndex.from_product([dates, ids], names=['date', 'secid'])
A:pandas.tests.indexing.multiindex.test_xs.df->DataFrame(np.random.randn(len(index), 3), index, ['X', 'Y', 'Z'])
A:pandas.tests.indexing.multiindex.test_xs.result->Series([1, 2, 3, 4], index=idx).xs('one', level='L2')
A:pandas.tests.indexing.multiindex.test_xs.expected->Series([1, 3], index=['a', 'b'])
A:pandas.tests.indexing.multiindex.test_xs.expected.index->Index(['foo', 'bar', 'baz', 'qux'], name='first')
A:pandas.tests.indexing.multiindex.test_xs.expected_index->MultiIndex(levels=[['b', 'q'], [10.0032, 20.0], [4, 5]], codes=[[0, 1], [0, 1], [1, 0]], names=['two', 'three', 'four'])
A:pandas.tests.indexing.multiindex.test_xs.dates->range(20111201, 20111205)
A:pandas.tests.indexing.multiindex.test_xs.ids->list('abcde')
A:pandas.tests.indexing.multiindex.test_xs.dt->list(date_range('20130903', periods=3))
A:pandas.tests.indexing.multiindex.test_xs.idx->pandas.MultiIndex.from_tuples([('a', 'one'), ('a', 'two'), ('b', 'one'), ('b', 'two')])
A:pandas.tests.indexing.multiindex.test_xs.s->Series([1, 2, 3, 4], index=idx)
pandas.tests.indexing.multiindex.test_xs.four_level_index_dataframe()
pandas.tests.indexing.multiindex.test_xs.test_series_getitem_multiindex_xs()
pandas.tests.indexing.multiindex.test_xs.test_series_getitem_multiindex_xs_by_label()
pandas.tests.indexing.multiindex.test_xs.test_xs_integer_key()
pandas.tests.indexing.multiindex.test_xs.test_xs_level(multiindex_dataframe_random_data)
pandas.tests.indexing.multiindex.test_xs.test_xs_level0(indexer,four_level_index_dataframe)
pandas.tests.indexing.multiindex.test_xs.test_xs_level_eq_2()
pandas.tests.indexing.multiindex.test_xs.test_xs_level_multiple(indexer,four_level_index_dataframe)
pandas.tests.indexing.multiindex.test_xs.test_xs_level_series(multiindex_dataframe_random_data)
pandas.tests.indexing.multiindex.test_xs.test_xs_level_series_slice_not_implemented(multiindex_year_month_day_dataframe_random_data)
pandas.tests.indexing.multiindex.test_xs.test_xs_level_series_ymd(multiindex_year_month_day_dataframe_random_data)
pandas.tests.indexing.multiindex.test_xs.test_xs_loc_equality(multiindex_dataframe_random_data)
pandas.tests.indexing.multiindex.test_xs.test_xs_missing_values_in_index()
pandas.tests.indexing.multiindex.test_xs.test_xs_named_levels_axis_eq_1(key,level,exp_arr,exp_index)
pandas.tests.indexing.multiindex.test_xs.test_xs_setting_with_copy_error(multiindex_dataframe_random_data)
pandas.tests.indexing.multiindex.test_xs.test_xs_setting_with_copy_error_multiple(four_level_index_dataframe)
pandas.tests.indexing.multiindex.test_xs.test_xs_values(multiindex_dataframe_random_data)
pandas.tests.indexing.multiindex.test_xs.test_xs_with_duplicates(key,level,multiindex_dataframe_random_data)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexing/multiindex/conftest.py----------------------------------------
A:pandas.tests.indexing.multiindex.conftest.index->MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'], ['one', 'two', 'three']], codes=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3], [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]], names=['first', 'second'])
A:pandas.tests.indexing.multiindex.conftest.tdf->pandas._testing.makeTimeDataFrame(100)
A:pandas.tests.indexing.multiindex.conftest.ymd->pandas._testing.makeTimeDataFrame(100).groupby([lambda x: x.year, lambda x: x.month, lambda x: x.day]).sum()
pandas.tests.indexing.multiindex.conftest.multiindex_dataframe_random_data()
pandas.tests.indexing.multiindex.conftest.multiindex_year_month_day_dataframe_random_data()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/scalar/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/scalar/test_na_scalar.py----------------------------------------
A:pandas.tests.scalar.test_na_scalar.new_NA->type(NA)()
A:pandas.tests.scalar.test_na_scalar.value->numpy.array([value])
A:pandas.tests.scalar.test_na_scalar.a->numpy.array([1, 2, 3])
A:pandas.tests.scalar.test_na_scalar.result->pandas._testing.round_trip_pickle(s)
A:pandas.tests.scalar.test_na_scalar.expected->numpy.array([pd.NA, pd.NA, pd.NA], dtype=object)
A:pandas.tests.scalar.test_na_scalar.s->s.to_frame(name='A').to_frame(name='A')
pandas.tests.scalar.test_na_scalar.test_arithmetic_ndarray(shape,all_arithmetic_functions)
pandas.tests.scalar.test_na_scalar.test_arithmetic_ops(all_arithmetic_functions)
pandas.tests.scalar.test_na_scalar.test_binary_input_not_dunder()
pandas.tests.scalar.test_na_scalar.test_comparison_ops()
pandas.tests.scalar.test_na_scalar.test_divmod_ufunc()
pandas.tests.scalar.test_na_scalar.test_hashable()
pandas.tests.scalar.test_na_scalar.test_integer_hash_collision_dict()
pandas.tests.scalar.test_na_scalar.test_integer_hash_collision_set()
pandas.tests.scalar.test_na_scalar.test_is_scalar()
pandas.tests.scalar.test_na_scalar.test_isna()
pandas.tests.scalar.test_na_scalar.test_logical_and()
pandas.tests.scalar.test_na_scalar.test_logical_not()
pandas.tests.scalar.test_na_scalar.test_logical_or()
pandas.tests.scalar.test_na_scalar.test_logical_xor()
pandas.tests.scalar.test_na_scalar.test_pickle_roundtrip()
pandas.tests.scalar.test_na_scalar.test_pickle_roundtrip_containers(as_frame,values,dtype)
pandas.tests.scalar.test_na_scalar.test_pickle_roundtrip_pandas()
pandas.tests.scalar.test_na_scalar.test_pow_special(value,asarray)
pandas.tests.scalar.test_na_scalar.test_repr()
pandas.tests.scalar.test_na_scalar.test_rpow_minus_one(value,asarray)
pandas.tests.scalar.test_na_scalar.test_rpow_special(value,asarray)
pandas.tests.scalar.test_na_scalar.test_series_isna()
pandas.tests.scalar.test_na_scalar.test_singleton()
pandas.tests.scalar.test_na_scalar.test_truthiness()
pandas.tests.scalar.test_na_scalar.test_ufunc()
pandas.tests.scalar.test_na_scalar.test_ufunc_raises()
pandas.tests.scalar.test_na_scalar.test_unary_ops()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/scalar/test_nat.py----------------------------------------
A:pandas.tests.scalar.test_nat.result->pandas.NaT.to_numpy()
A:pandas.tests.scalar.test_nat.idx->DatetimeIndex(['1/1/2000', None, None, '1/4/2000'])
A:pandas.tests.scalar.test_nat.expected->pandas.NaT.to_datetime64()
A:pandas.tests.scalar.test_nat.ser->Series(idx)
A:pandas.tests.scalar.test_nat.ts->klass('nat')
A:pandas.tests.scalar.test_nat.round_method->getattr(ts, method)
A:pandas.tests.scalar.test_nat.nat_names->dir(NaT)
A:pandas.tests.scalar.test_nat.klass_names->dir(klass)
A:pandas.tests.scalar.test_nat.ts_names->dir(Timestamp)
A:pandas.tests.scalar.test_nat.td->Timedelta(hours=3, minutes=4)
A:pandas.tests.scalar.test_nat.vec->box(['1 day', '2 day'], dtype='timedelta64[ns]')
A:pandas.tests.scalar.test_nat.box_nat->box([NaT, NaT], dtype='timedelta64[ns]')
A:pandas.tests.scalar.test_nat.other->numpy.arange(10).astype(dtype)
pandas.tests.scalar.test_nat._get_overlap_public_nat_methods(klass,as_tuple=False)
pandas.tests.scalar.test_nat.test_equality(klass,value)
pandas.tests.scalar.test_nat.test_identity(klass,value)
pandas.tests.scalar.test_nat.test_missing_public_nat_methods(klass,expected)
pandas.tests.scalar.test_nat.test_nat_arithmetic_index(op_name,value)
pandas.tests.scalar.test_nat.test_nat_arithmetic_ndarray(dtype,op,out_dtype)
pandas.tests.scalar.test_nat.test_nat_arithmetic_scalar(op_name,value,val_type)
pandas.tests.scalar.test_nat.test_nat_arithmetic_td64_vector(op_name,box)
pandas.tests.scalar.test_nat.test_nat_comparisons(compare_operators_no_eq_ne,other)
pandas.tests.scalar.test_nat.test_nat_doc_strings(compare)
pandas.tests.scalar.test_nat.test_nat_fields(nat,idx)
pandas.tests.scalar.test_nat.test_nat_iso_format(get_nat)
pandas.tests.scalar.test_nat.test_nat_methods_nan(method)
pandas.tests.scalar.test_nat.test_nat_methods_nat(method)
pandas.tests.scalar.test_nat.test_nat_methods_raise(method)
pandas.tests.scalar.test_nat.test_nat_pinned_docstrings()
pandas.tests.scalar.test_nat.test_nat_rfloordiv_timedelta(val,expected)
pandas.tests.scalar.test_nat.test_nat_vector_field_access()
pandas.tests.scalar.test_nat.test_overlap_public_nat_methods(klass,expected)
pandas.tests.scalar.test_nat.test_round_nat(klass,method,freq)
pandas.tests.scalar.test_nat.test_to_numpy_alias()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/scalar/interval/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/scalar/interval/test_ops.py----------------------------------------
A:pandas.tests.scalar.interval.test_ops.interval->Interval(0, 1)
A:pandas.tests.scalar.interval.test_ops.interval1->Interval(start, start + shift, other_closed)
A:pandas.tests.scalar.interval.test_ops.interval2->Interval(start + shift, start + 2 * shift, closed)
A:pandas.tests.scalar.interval.test_ops.result->Interval(start, start + shift, other_closed).overlaps(interval2)
pandas.tests.scalar.interval.test_ops.TestOverlaps
pandas.tests.scalar.interval.test_ops.TestOverlaps.test_overlaps_disjoint(self,start_shift,closed,other_closed)
pandas.tests.scalar.interval.test_ops.TestOverlaps.test_overlaps_endpoint(self,start_shift,closed,other_closed)
pandas.tests.scalar.interval.test_ops.TestOverlaps.test_overlaps_invalid_type(self,other)
pandas.tests.scalar.interval.test_ops.TestOverlaps.test_overlaps_nested(self,start_shift,closed,other_closed)
pandas.tests.scalar.interval.test_ops.TestOverlaps.test_overlaps_self(self,start_shift,closed)
pandas.tests.scalar.interval.test_ops.start_shift(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/scalar/interval/test_interval.py----------------------------------------
A:pandas.tests.scalar.interval.test_interval.interval_left->Interval(0, 1, closed='left')
A:pandas.tests.scalar.interval.test_interval.interval_both->Interval(0, 1, closed='both')
A:pandas.tests.scalar.interval.test_interval.interval_neither->Interval(0, 1, closed='neither')
A:pandas.tests.scalar.interval.test_interval.iv->Interval(left, left, closed)
A:pandas.tests.scalar.interval.test_interval.expected->Interval(0, 1, closed=closed)
A:pandas.tests.scalar.interval.test_interval.interval->Interval(1, 2, closed=closed)
A:pandas.tests.scalar.interval.test_interval.left->Timestamp('2017-01-01', tz=tz_left)
A:pandas.tests.scalar.interval.test_interval.right->Timestamp('2017-01-02', tz=tz_right)
pandas.tests.scalar.interval.test_interval.TestInterval
pandas.tests.scalar.interval.test_interval.TestInterval.test_comparison(self)
pandas.tests.scalar.interval.test_interval.TestInterval.test_construct_errors(self,left,right)
pandas.tests.scalar.interval.test_interval.TestInterval.test_constructor_errors(self)
pandas.tests.scalar.interval.test_interval.TestInterval.test_constructor_errors_tz(self,tz_left,tz_right)
pandas.tests.scalar.interval.test_interval.TestInterval.test_contains(self,interval)
pandas.tests.scalar.interval.test_interval.TestInterval.test_equal(self)
pandas.tests.scalar.interval.test_interval.TestInterval.test_hash(self,interval)
pandas.tests.scalar.interval.test_interval.TestInterval.test_is_empty(self,left,right,closed)
pandas.tests.scalar.interval.test_interval.TestInterval.test_length(self,left,right,expected)
pandas.tests.scalar.interval.test_interval.TestInterval.test_length_timestamp(self,tz,left,right,expected)
pandas.tests.scalar.interval.test_interval.TestInterval.test_math_add(self,closed)
pandas.tests.scalar.interval.test_interval.TestInterval.test_math_div(self,closed)
pandas.tests.scalar.interval.test_interval.TestInterval.test_math_floordiv(self,closed)
pandas.tests.scalar.interval.test_interval.TestInterval.test_math_mult(self,closed)
pandas.tests.scalar.interval.test_interval.TestInterval.test_math_sub(self,closed)
pandas.tests.scalar.interval.test_interval.TestInterval.test_properties(self,interval)
pandas.tests.scalar.interval.test_interval.TestInterval.test_repr(self,interval)
pandas.tests.scalar.interval.test_interval.interval()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/scalar/timedelta/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py----------------------------------------
A:pandas.tests.scalar.timedelta.test_timedelta.ints->pandas.date_range('2012-10-08', periods=4, freq='D').view('i8')
A:pandas.tests.scalar.timedelta.test_timedelta.td->Timedelta(days=4, hours=3)
A:pandas.tests.scalar.timedelta.test_timedelta.other->Timedelta('3 hours')
A:pandas.tests.scalar.timedelta.test_timedelta.off->cls(4)
A:pandas.tests.scalar.timedelta.test_timedelta.arr->numpy.array(periods)
A:pandas.tests.scalar.timedelta.test_timedelta.expected->Series([np.nan, 32.0], dtype='float64')
A:pandas.tests.scalar.timedelta.test_timedelta.t->Timedelta('1s')
A:pandas.tests.scalar.timedelta.test_timedelta.result->(s2 - s2.min()).sum()
A:pandas.tests.scalar.timedelta.test_timedelta.rng->timedelta_range('1 days, 10:11:12', periods=2, freq='s')
A:pandas.tests.scalar.timedelta.test_timedelta.pydt->Timedelta(days=4, hours=3).to_pytimedelta()
A:pandas.tests.scalar.timedelta.test_timedelta.td64->Timedelta(days=4, hours=3).to_timedelta64()
A:pandas.tests.scalar.timedelta.test_timedelta.t1->timedelta_range('1 days', periods=3, freq='1 min 2 s 3 us')
A:pandas.tests.scalar.timedelta.test_timedelta.t2->Timedelta('-1 days 02:34:56.789123456')
A:pandas.tests.scalar.timedelta.test_timedelta.r1->timedelta_range('1 days', periods=3, freq='1 min 2 s 3 us').round(freq)
A:pandas.tests.scalar.timedelta.test_timedelta.r2->Timedelta('-1 days 02:34:56.789123456').round(freq)
A:pandas.tests.scalar.timedelta.test_timedelta.t1a->timedelta_range('1 days', periods=3, freq='1 min 2 s')
A:pandas.tests.scalar.timedelta.test_timedelta.t1c->TimedeltaIndex([1, 1, 1], unit='D')
A:pandas.tests.scalar.timedelta.test_timedelta.d1->numpy.timedelta64(1, 'D')
A:pandas.tests.scalar.timedelta.test_timedelta.s->Series(rng)
A:pandas.tests.scalar.timedelta.test_timedelta.v->Timedelta(1, 'D')
A:pandas.tests.scalar.timedelta.test_timedelta.v_p->pandas._testing.round_trip_pickle(v)
A:pandas.tests.scalar.timedelta.test_timedelta.tds->timedelta_range('1 second', periods=20)
A:pandas.tests.scalar.timedelta.test_timedelta.ns_td->Timedelta(1, 'ns')
A:pandas.tests.scalar.timedelta.test_timedelta.min_td->Timedelta(Timedelta.min)
A:pandas.tests.scalar.timedelta.test_timedelta.max_td->Timedelta(Timedelta.max)
A:pandas.tests.scalar.timedelta.test_timedelta.data->Series(['nat', '32 days'], dtype='timedelta64[ns]')
A:pandas.tests.scalar.timedelta.test_timedelta.result_method->Series(['nat', '32 days'], dtype='timedelta64[ns]').div(delta)
A:pandas.tests.scalar.timedelta.test_timedelta.timedelta_NaT->to_timedelta('NaT')
A:pandas.tests.scalar.timedelta.test_timedelta.a->to_timedelta(list_of_strings)
A:pandas.tests.scalar.timedelta.test_timedelta.b->Series(list_of_strings).apply(to_timedelta)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltaArithmetic
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltaArithmetic.test_arithmetic_overflow(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltaArithmetic.test_array_timedelta_floordiv(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltaArithmetic.test_ops_error_str(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltaArithmetic.test_ops_notimplemented(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltaArithmetic.test_unary_ops(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltaComparison
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltaComparison.test_compare_custom_object(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltaComparison.test_compare_tick(self,tick_classes)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltaComparison.test_compare_timedelta_ndarray(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltaComparison.test_compare_unknown_type(self,val)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltaComparison.test_comparison_object_array(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_apply_to_timedelta(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_components(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_contains(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_conversion(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_fields(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_freq_conversion(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_full_format_converters(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_identity(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_implementation_limits(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_iso_conversion(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_nat_converters(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_numeric_conversions(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_overflow(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_pickle(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_resolution_deprecated(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_resolution_string(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_round(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_rounding_on_int_unit_construction(self,unit,value,expected)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_short_format_converters(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_timedelta_arithmetic(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_timedelta_conversions(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_timedelta_hash_equality(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_to_numpy_alias(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_total_seconds_precision(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_total_seconds_scalar(self)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_unit_m_y_raises(self,unit)
pandas.tests.scalar.timedelta.test_timedelta.TestTimedeltas.test_unit_parser(self,units,np_unit,wrapper)
pandas.tests.scalar.timedelta.test_timedelta.test_truthiness(value,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py----------------------------------------
A:pandas.tests.scalar.timedelta.test_arithmetic.base->Timestamp('20130102 09:01:12.123456')
A:pandas.tests.scalar.timedelta.test_arithmetic.expected_add->Timestamp('20130103 09:01:22.123456')
A:pandas.tests.scalar.timedelta.test_arithmetic.expected_sub->Timestamp('20130101 09:01:02.123456')
A:pandas.tests.scalar.timedelta.test_arithmetic.td->Timedelta(minutes=3)
A:pandas.tests.scalar.timedelta.test_arithmetic.result->divmod(offsets.Hour(54), Timedelta(hours=-4))
A:pandas.tests.scalar.timedelta.test_arithmetic.expected->numpy.array([10, np.nan])
A:pandas.tests.scalar.timedelta.test_arithmetic.td_nat->numpy.timedelta64('NaT')
A:pandas.tests.scalar.timedelta.test_arithmetic.arr->numpy.array([(10 * scalar).to_timedelta64(), np.timedelta64('NaT')])
A:pandas.tests.scalar.timedelta.test_arithmetic.exp->numpy.array([now + Timedelta('1D'), Timedelta('2D')])
A:pandas.tests.scalar.timedelta.test_arithmetic.now->pandas.Timestamp.now()
A:pandas.tests.scalar.timedelta.test_arithmetic.res->Timedelta(minutes=3).__rfloordiv__(ser)
A:pandas.tests.scalar.timedelta.test_arithmetic.scalar->Timedelta(hours=3, minutes=4)
A:pandas.tests.scalar.timedelta.test_arithmetic.ser->pandas.Series([1], dtype=np.int64)
A:pandas.tests.scalar.timedelta.test_arithmetic.dt64->numpy.datetime64('2016-01-01', 'us')
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_ops_ndarray(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_td_add_datetimelike_scalar(self,op)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_td_add_dtlike_scalar(self,op)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_td_add_mixed_timedeltalike_object_dtype_array(self,op)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_td_add_offset(self,op)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_td_add_pytimedelta(self,op)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_td_add_sub_numeric_raises(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_td_add_sub_one_day_ten_seconds(self,one_day_ten_secs)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_td_add_sub_ten_seconds(self,ten_seconds)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_td_add_td(self,op)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_td_add_timedelta64(self,op)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_td_add_timedeltalike_object_dtype_array(self,op)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_td_rsub_mixed_most_timedeltalike_object_dtype_array(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_td_rsub_nat(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_td_rsub_offset(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_td_sub_mixed_most_timedeltalike_object_dtype_array(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_td_sub_nat(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_td_sub_offset(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_td_sub_pytimedelta(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_td_sub_td(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_td_sub_td64_nat(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_td_sub_timedelta64(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaAdditionSubtraction.test_td_sub_timedeltalike_object_dtype_array(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_divmod(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_divmod_invalid(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_divmod_numeric(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_divmod_offset(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_mod_invalid(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_mod_numeric(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_mod_offset(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_mod_timedelta64(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_mod_timedelta64_nat(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_mod_timedeltalike(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_rdivmod_invalid(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_rdivmod_offset(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_rdivmod_pytimedelta(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_rmod_invalid(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_rmod_pytimedelta(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_rmod_timedelta64(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_td_div_nan(self,nan)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_td_div_numeric_scalar(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_td_div_timedeltalike_scalar(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_td_floordiv_invalid_scalar(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_td_floordiv_null_scalar(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_td_floordiv_numeric_scalar(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_td_floordiv_numeric_series(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_td_floordiv_offsets(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_td_floordiv_timedeltalike_array(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_td_floordiv_timedeltalike_scalar(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_td_mul_nan(self,op,nan)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_td_mul_nat(self,op,td_nat)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_td_mul_scalar(self,op)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_td_op_timedelta_timedeltalike_array(self,op,arr)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_td_rdiv_timedeltalike_scalar(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_td_rfloordiv_invalid_scalar(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_td_rfloordiv_null_scalar(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_td_rfloordiv_numeric_scalar(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_td_rfloordiv_numeric_series(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_td_rfloordiv_offsets(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_td_rfloordiv_timedeltalike_array(self)
pandas.tests.scalar.timedelta.test_arithmetic.TestTimedeltaMultiplicationDivision.test_td_rfloordiv_timedeltalike_scalar(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/scalar/timedelta/test_formats.py----------------------------------------
pandas.tests.scalar.timedelta.test_formats.test_isoformat(td,expected_iso)
pandas.tests.scalar.timedelta.test_formats.test_repr(td,expected_repr)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/scalar/timedelta/test_constructors.py----------------------------------------
A:pandas.tests.scalar.timedelta.test_constructors.expected->numpy.timedelta64(1, npkwarg).astype('m8[ns]').view('i8')
A:pandas.tests.scalar.timedelta.test_constructors.result->Timedelta('1H')
A:pandas.tests.scalar.timedelta.test_constructors.td->Timedelta(val)
A:pandas.tests.scalar.timedelta.test_constructors.msg->'Invalid ISO 8601 Duration format - {}'.format(fmt)
pandas.tests.scalar.timedelta.test_constructors.test_construction()
pandas.tests.scalar.timedelta.test_constructors.test_iso_constructor(fmt,exp)
pandas.tests.scalar.timedelta.test_constructors.test_iso_constructor_raises(fmt)
pandas.tests.scalar.timedelta.test_constructors.test_overflow_on_construction()
pandas.tests.scalar.timedelta.test_constructors.test_td_construction_with_np_dtypes(npdtype,item)
pandas.tests.scalar.timedelta.test_constructors.test_td_constructor_on_nanoseconds(constructed_td,conversion)
pandas.tests.scalar.timedelta.test_constructors.test_td_constructor_value_error()
pandas.tests.scalar.timedelta.test_constructors.test_td_from_repr_roundtrip(val)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/scalar/timestamp/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/scalar/timestamp/test_timezones.py----------------------------------------
A:pandas.tests.scalar.timestamp.test_timezones.pac->pandas.Timestamp.min.tz_localize('US/Pacific')
A:pandas.tests.scalar.timestamp.test_timezones.tokyo->pandas.Timestamp.max.tz_localize('Asia/Tokyo')
A:pandas.tests.scalar.timestamp.test_timezones.ts->Timestamp('2001-01-05 11:56', tz=timezones.maybe_get_tz('dateutil/UTC'))
A:pandas.tests.scalar.timestamp.test_timezones.expected0->Timestamp('2015-11-01 01:00:03-0500', tz='US/Central')
A:pandas.tests.scalar.timestamp.test_timezones.expected1->Timestamp('2015-11-01 01:00:03-0600', tz='US/Central')
A:pandas.tests.scalar.timestamp.test_timezones.result->Timestamp('2018-06-04 10:20:30', tz=tz).timetz()
A:pandas.tests.scalar.timestamp.test_timezones.ts_dst->Timestamp('2001-01-05 11:56', tz=timezones.maybe_get_tz('dateutil/UTC')).tz_localize('US/Eastern', ambiguous=True)
A:pandas.tests.scalar.timestamp.test_timezones.ts_no_dst->Timestamp('2001-01-05 11:56', tz=timezones.maybe_get_tz('dateutil/UTC')).tz_localize('US/Eastern', ambiguous=False)
A:pandas.tests.scalar.timestamp.test_timezones.localized->Timestamp('2001-01-05 11:56', tz=timezones.maybe_get_tz('dateutil/UTC')).tz_localize(tz)
A:pandas.tests.scalar.timestamp.test_timezones.reset->ts.tz_convert(tz).tz_convert(None)
A:pandas.tests.scalar.timestamp.test_timezones.naive->Timestamp(result.value)
A:pandas.tests.scalar.timestamp.test_timezones.result_pytz->Timestamp(result.value).tz_localize(pytz_zone, ambiguous=1)
A:pandas.tests.scalar.timestamp.test_timezones.result_dateutil->Timestamp(result.value).tz_localize(dateutil_zone, ambiguous=1)
A:pandas.tests.scalar.timestamp.test_timezones.stamp->Timestamp('2018-06-04 10:20:30', tz=tz)
A:pandas.tests.scalar.timestamp.test_timezones.expected->datetime(2018, 6, 4, hour=10, minute=20, second=30, tzinfo=tz).timetz()
A:pandas.tests.scalar.timestamp.test_timezones.converted->Timestamp('2001-01-05 11:56', tz=timezones.maybe_get_tz('dateutil/UTC')).tz_convert(tz)
A:pandas.tests.scalar.timestamp.test_timezones.utcdate->Timestamp('3/11/2012 22:00', tz='UTC')
A:pandas.tests.scalar.timestamp.test_timezones.utc_stamp->Timestamp('3/11/2012 05:00').tz_localize('utc')
A:pandas.tests.scalar.timestamp.test_timezones.tzinfo->tzoffset(None, 7200)
A:pandas.tests.scalar.timestamp.test_timezones.tz->pandas._libs.tslibs.timezones.maybe_get_tz(tz_naive_fixture)
A:pandas.tests.scalar.timestamp.test_timezones._datetime->datetime(2018, 6, 4, hour=10, minute=20, second=30, tzinfo=tz)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_astimezone(self,tzstr)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_timestamp_add_timedelta_push_over_dst_boundary(self,tz)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_timestamp_constructed_by_date_and_tz(self,tz)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_timestamp_constructor_near_dst_boundary(self)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_timestamp_constructor_tz_utc(self)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_timestamp_timetz_equivalent_with_datetime_tz(self,tz_naive_fixture)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_timestamp_timetz_equivalent_with_dt_tz(self,tz_naive_fixture)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_timestamp_to_datetime_tzoffset(self)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_timestamp_to_dt_tzoffset(self)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_timestamp_tz_localize(self,tz)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_timestamp_tz_localize_nonexistent_NaT(self,tz)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_timestamp_tz_localize_nonexistent_raise(self,tz)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_timestamp_tz_localize_nonexistent_shift(self,start_ts,tz,end_ts,shift,tz_type)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_timestamp_tz_localize_nonexistent_shift_invalid(self,offset,tz_type)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_tz_convert_roundtrip(self,stamp,tz_aware_fixture)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_tz_convert_utc_with_system_utc(self)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_tz_localize_ambiguous(self)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_tz_localize_ambiguous_bool(self)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_tz_localize_ambiguous_compat(self)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_tz_localize_ambiguous_raise(self)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_tz_localize_nonexistent(self,stamp,tz)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_tz_localize_nonexistent_invalid_arg(self)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_tz_localize_pushes_out_of_bounds(self)
pandas.tests.scalar.timestamp.test_timezones.TestTimestampTZOperations.test_tz_localize_roundtrip(self,stamp,tz_aware_fixture)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py----------------------------------------
A:pandas.tests.scalar.timestamp.test_arithmetic.stamp->Timestamp('2000/1/1')
A:pandas.tests.scalar.timestamp.test_arithmetic.expected->Timestamp('1999/09/23')
A:pandas.tests.scalar.timestamp.test_arithmetic.a->Timestamp('2101-01-01 00:00:00')
A:pandas.tests.scalar.timestamp.test_arithmetic.b->Timestamp('1688-01-01 00:00:00')
A:pandas.tests.scalar.timestamp.test_arithmetic.val->Timestamp(1337299200000000123)
A:pandas.tests.scalar.timestamp.test_arithmetic.td->timedelta(seconds=1)
A:pandas.tests.scalar.timestamp.test_arithmetic.ts->Timestamp(datetime.utcnow())
A:pandas.tests.scalar.timestamp.test_arithmetic.dt->datetime(2014, 3, 4)
A:pandas.tests.scalar.timestamp.test_arithmetic.td64->numpy.timedelta64(1, 'D')
pandas.tests.scalar.timestamp.test_arithmetic.TestTimestampArithmetic
pandas.tests.scalar.timestamp.test_arithmetic.TestTimestampArithmetic.test_add_int_no_freq_raises(self,ts,other)
pandas.tests.scalar.timestamp.test_arithmetic.TestTimestampArithmetic.test_add_int_with_freq(self,ts,other)
pandas.tests.scalar.timestamp.test_arithmetic.TestTimestampArithmetic.test_addition_subtraction_preserve_frequency(self,freq,td,td64)
pandas.tests.scalar.timestamp.test_arithmetic.TestTimestampArithmetic.test_addition_subtraction_types(self)
pandas.tests.scalar.timestamp.test_arithmetic.TestTimestampArithmetic.test_delta_preserve_nanos(self)
pandas.tests.scalar.timestamp.test_arithmetic.TestTimestampArithmetic.test_overflow_offset(self)
pandas.tests.scalar.timestamp.test_arithmetic.TestTimestampArithmetic.test_overflow_offset_raises(self)
pandas.tests.scalar.timestamp.test_arithmetic.TestTimestampArithmetic.test_overflow_timestamp_raises(self)
pandas.tests.scalar.timestamp.test_arithmetic.TestTimestampArithmetic.test_radd_tdscalar(self,td)
pandas.tests.scalar.timestamp.test_arithmetic.TestTimestampArithmetic.test_rsub_dtscalars(self,tz_naive_fixture)
pandas.tests.scalar.timestamp.test_arithmetic.TestTimestampArithmetic.test_timestamp_add_timedelta64_unit(self,other,expected_difference)
pandas.tests.scalar.timestamp.test_arithmetic.TestTimestampArithmetic.test_timestamp_sub_datetime(self)
pandas.tests.scalar.timestamp.test_arithmetic.TestTimestampArithmetic.test_timestamp_sub_dt(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/scalar/timestamp/test_rendering.py----------------------------------------
A:pandas.tests.scalar.timestamp.test_rendering.freq_repr->"'{0}'".format(freq)
A:pandas.tests.scalar.timestamp.test_rendering.tz_repr->tz.replace('dateutil', '')
A:pandas.tests.scalar.timestamp.test_rendering.date_only->Timestamp(date)
A:pandas.tests.scalar.timestamp.test_rendering.date_tz->Timestamp(date, tz=tz)
A:pandas.tests.scalar.timestamp.test_rendering.date_freq->Timestamp(date, freq=freq)
A:pandas.tests.scalar.timestamp.test_rendering.date_tz_freq->Timestamp(date, tz=tz, freq=freq)
A:pandas.tests.scalar.timestamp.test_rendering.date_with_utc_offset->Timestamp('2014-03-13 00:00:00-0400', tz=None)
A:pandas.tests.scalar.timestamp.test_rendering.expr->repr(date_with_utc_offset).replace("'pytz.FixedOffset(-240)'", 'pytz.FixedOffset(-240)')
A:pandas.tests.scalar.timestamp.test_rendering.stamp->Timestamp(iso8601, tz='US/Eastern')
A:pandas.tests.scalar.timestamp.test_rendering.result->pprint.pformat(nested_obj, width=50)
pandas.tests.scalar.timestamp.test_rendering.TestTimestampRendering
pandas.tests.scalar.timestamp.test_rendering.TestTimestampRendering.test_pprint(self)
pandas.tests.scalar.timestamp.test_rendering.TestTimestampRendering.test_repr(self,date,freq,tz)
pandas.tests.scalar.timestamp.test_rendering.TestTimestampRendering.test_repr_utcoffset(self)
pandas.tests.scalar.timestamp.test_rendering.TestTimestampRendering.test_timestamp_repr_pre1900(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py----------------------------------------
A:pandas.tests.scalar.timestamp.test_timestamp.ts->Timestamp(datetime.now())
A:pandas.tests.scalar.timestamp.test_timestamp.control->Timestamp('2017-09-30')
A:pandas.tests.scalar.timestamp.test_timestamp.expected_day->unicodedata.normalize('NFD', expected_day)
A:pandas.tests.scalar.timestamp.test_timestamp.expected_month->unicodedata.normalize('NFD', expected_month)
A:pandas.tests.scalar.timestamp.test_timestamp.result_day->unicodedata.normalize('NFD', result_day)
A:pandas.tests.scalar.timestamp.test_timestamp.result_month->unicodedata.normalize('NFD', result_month)
A:pandas.tests.scalar.timestamp.test_timestamp.nan_ts->Timestamp(NaT)
A:pandas.tests.scalar.timestamp.test_timestamp.dt->datetime(2011, 4, 16, 0, 0)
A:pandas.tests.scalar.timestamp.test_timestamp.d->datetime(2010, 1, 3)
A:pandas.tests.scalar.timestamp.test_timestamp.result->Timestamp(datetime.now()).to_pydatetime()
A:pandas.tests.scalar.timestamp.test_timestamp.base_dt->datetime(2014, 7, 1, 9)
A:pandas.tests.scalar.timestamp.test_timestamp.base->Timestamp('20140101 00:00:00')
A:pandas.tests.scalar.timestamp.test_timestamp.stamp->Timestamp('20090415', tz=gettz('US/Eastern'), freq='D')
A:pandas.tests.scalar.timestamp.test_timestamp.dt_tz->Timestamp('20090415', tz=gettz('US/Eastern'), freq='D').to_pydatetime()
A:pandas.tests.scalar.timestamp.test_timestamp.expected->SubDatetime(2000, 1, 1, 1)
A:pandas.tests.scalar.timestamp.test_timestamp.one_us->numpy.timedelta64(1).astype('timedelta64[us]')
A:pandas.tests.scalar.timestamp.test_timestamp.min_ts_us->numpy.datetime64(Timestamp.min).astype('M8[us]')
A:pandas.tests.scalar.timestamp.test_timestamp.max_ts_us->numpy.datetime64(Timestamp.max).astype('M8[us]')
A:pandas.tests.scalar.timestamp.test_timestamp.dt64->numpy.datetime64(date_string, unit)
A:pandas.tests.scalar.timestamp.test_timestamp.ts_from_string->Timestamp('today')
A:pandas.tests.scalar.timestamp.test_timestamp.ts_from_method->pandas.Timestamp.today()
A:pandas.tests.scalar.timestamp.test_timestamp.ts_datetime->datetime.datetime.today()
A:pandas.tests.scalar.timestamp.test_timestamp.ts_from_string_tz->Timestamp('today', tz='US/Eastern')
A:pandas.tests.scalar.timestamp.test_timestamp.ts_from_method_tz->pandas.Timestamp.today(tz='US/Eastern')
A:pandas.tests.scalar.timestamp.test_timestamp.delta->Timedelta(seconds=1)
A:pandas.tests.scalar.timestamp.test_timestamp.data->SubDatetime(2000, 1, 1)
A:pandas.tests.scalar.timestamp.test_timestamp.expected_timestamp->Timestamp('2000-01-03 00:00:00')
A:pandas.tests.scalar.timestamp.test_timestamp.expected_stdlib->datetime.datetime.fromisocalendar(2000, 1, 1)
A:pandas.tests.scalar.timestamp.test_timestamp.local->Timestamp(datetime.now()).tz_localize('Asia/Tokyo')
A:pandas.tests.scalar.timestamp.test_timestamp.conv->Timestamp(datetime.now()).tz_localize('Asia/Tokyo').tz_convert('US/Eastern')
A:pandas.tests.scalar.timestamp.test_timestamp.current_time->calendar.timegm(datetime.now().utctimetuple())
A:pandas.tests.scalar.timestamp.test_timestamp.date_component->datetime.datetime.utcnow()
A:pandas.tests.scalar.timestamp.test_timestamp.time_component->(date_component + timedelta(minutes=10)).time()
A:pandas.tests.scalar.timestamp.test_timestamp.val->numpy.int64(946684800000000000).view('M8[ns]')
A:pandas.tests.scalar.timestamp.test_timestamp.t1->Timestamp('2019-01-01 10:00', freq='H')
A:pandas.tests.scalar.timestamp.test_timestamp.t2->Timestamp('2019-01-02 12:00', tz='UTC', freq='T')
A:pandas.tests.scalar.timestamp.test_timestamp.t->Timestamp(np_datetime64_compat('2011-01-01 00:00:00.000000010Z'))
A:pandas.tests.scalar.timestamp.test_timestamp.r->Timestamp('2000-08-12T13:00:00').to_julian_date()
A:pandas.tests.scalar.timestamp.test_timestamp.dtval->Timestamp('20090415', tz=gettz('US/Eastern'), freq='D').to_pydatetime()
pandas.tests.scalar.timestamp.test_timestamp.SubDatetime(datetime)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestamp
pandas.tests.scalar.timestamp.test_timestamp.TestTimestamp.test_asm8(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestamp.test_basics_nanos(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestamp.test_class_ops_dateutil(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestamp.test_class_ops_pytz(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestamp.test_hash_equivalent(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestamp.test_roundtrip(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestamp.test_tz(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestamp.test_tz_conversion_freq(self,tz_naive_fixture)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestamp.test_unit(self,value,check_kwargs)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestamp.test_utc_z_designator(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_barely_out_of_bounds(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_bounds_with_different_units(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_construct_timestamp_near_dst(self,offset)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_construct_timestamp_preserve_original_frequency(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_construct_with_different_string_format(self,arg)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_constructor(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_constructor_fromisocalendar(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_constructor_fromordinal(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_constructor_invalid(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_constructor_invalid_Z0_isostring(self,z)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_constructor_invalid_frequency(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_constructor_invalid_tz(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_constructor_keyword(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_constructor_nanosecond(self,result)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_constructor_positional(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_constructor_strptime(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_constructor_subclassed_datetime(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_constructor_subclassed_dt(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_constructor_tz_or_tzinfo(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_constructor_with_stringoffset(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_disallow_setting_tz(self,tz)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_dont_convert_dateutil_utc_to_pytz_utc(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_invalid_date_kwarg_with_string_input(self,arg)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_max_valid(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_min_valid(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_now(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_out_of_bounds_integer_value(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_out_of_bounds_string(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_out_of_bounds_value(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_raise_tz_and_tzinfo_in_datetime_input(self,box)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_raise_tz_and_tzinfo_in_dt_input(self,box)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConstructors.test_today(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConversion
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConversion.test_conversion(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConversion.test_timestamp_to_datetime(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConversion.test_timestamp_to_datetime_dateutil(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConversion.test_timestamp_to_datetime_explicit_dateutil(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConversion.test_timestamp_to_datetime_explicit_pytz(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConversion.test_timestamp_to_dt(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConversion.test_timestamp_to_dt_dateutil(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConversion.test_timestamp_to_dt_explicit_dateutil(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConversion.test_timestamp_to_dt_explicit_pytz(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConversion.test_to_datetime_bijective(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConversion.test_to_dt_bijective(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConversion.test_to_numpy_alias(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConversion.test_to_period_tz_warning(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConversion.test_to_pydatetime_nonzero_nano(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampConversion.test_to_pydt_nonzero_nano(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampNsOperations
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampNsOperations.test_nanosecond_string_parsing(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampNsOperations.test_nanosecond_timestamp(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampProperties
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampProperties.test_fields(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampProperties.test_is_leap_year(self,tz_naive_fixture)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampProperties.test_names(self,data,time_locale)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampProperties.test_properties_business(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampProperties.test_resolution(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampProperties.test_woy_boundary(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampToJulianDate
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampToJulianDate.test_compare_1700(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampToJulianDate.test_compare_2000(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampToJulianDate.test_compare_2100(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampToJulianDate.test_compare_hour01(self)
pandas.tests.scalar.timestamp.test_timestamp.TestTimestampToJulianDate.test_compare_hour13(self)
pandas.tests.scalar.timestamp.test_timestamp.test_dt_subclass_add_timedelta(lh,rh)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/scalar/timestamp/test_comparisons.py----------------------------------------
A:pandas.tests.scalar.timestamp.test_comparisons.ts->pandas.Timestamp.now()
A:pandas.tests.scalar.timestamp.test_comparisons.other->Timestamp(stamp + 100)
A:pandas.tests.scalar.timestamp.test_comparisons.naive->Timestamp('2011-01-01 00:00:00')
A:pandas.tests.scalar.timestamp.test_comparisons.arr->numpy.array(dt64)
A:pandas.tests.scalar.timestamp.test_comparisons.expected->left_f(rhs, nat)
A:pandas.tests.scalar.timestamp.test_comparisons.val->Timestamp('20130101 12:01:02')
A:pandas.tests.scalar.timestamp.test_comparisons.a->Timestamp('3/12/2012')
A:pandas.tests.scalar.timestamp.test_comparisons.b->Timestamp('3/12/2012', tz=utc_fixture)
A:pandas.tests.scalar.timestamp.test_comparisons.lhs->numpy.datetime64(datetime(2013, 12, 6))
A:pandas.tests.scalar.timestamp.test_comparisons.rhs->Timestamp('now')
A:pandas.tests.scalar.timestamp.test_comparisons.nat->Timestamp('nat')
A:pandas.tests.scalar.timestamp.test_comparisons.left_f->getattr(operator, left)
A:pandas.tests.scalar.timestamp.test_comparisons.right_f->getattr(operator, right)
A:pandas.tests.scalar.timestamp.test_comparisons.result->right_f(nat, rhs)
A:pandas.tests.scalar.timestamp.test_comparisons.stamp->Timestamp('2012-01-01')
A:pandas.tests.scalar.timestamp.test_comparisons.dt64->numpy.datetime64('2016-01-01', 'ns')
A:pandas.tests.scalar.timestamp.test_comparisons.inf->Inf()
A:pandas.tests.scalar.timestamp.test_comparisons.timestamp->Timestamp('2018-11-30')
pandas.tests.scalar.timestamp.test_comparisons.TestTimestampComparison
pandas.tests.scalar.timestamp.test_comparisons.TestTimestampComparison.test_cant_compare_tz_naive_w_aware(self,utc_fixture)
pandas.tests.scalar.timestamp.test_comparisons.TestTimestampComparison.test_compare_invalid(self)
pandas.tests.scalar.timestamp.test_comparisons.TestTimestampComparison.test_compare_zerodim_array(self)
pandas.tests.scalar.timestamp.test_comparisons.TestTimestampComparison.test_comparison(self)
pandas.tests.scalar.timestamp.test_comparisons.TestTimestampComparison.test_comparison_object_array(self)
pandas.tests.scalar.timestamp.test_comparisons.TestTimestampComparison.test_timestamp_compare_scalars(self)
pandas.tests.scalar.timestamp.test_comparisons.TestTimestampComparison.test_timestamp_compare_with_early_datetime(self)
pandas.tests.scalar.timestamp.test_comparisons.TestTimestampComparison.test_timestamp_compare_with_early_dt(self)
pandas.tests.scalar.timestamp.test_comparisons.test_rich_comparison_with_unsupported_type()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/scalar/timestamp/test_unary_ops.py----------------------------------------
A:pandas.tests.scalar.timestamp.test_unary_ops.dt->pandas.Timestamp.now().to_pydatetime()
A:pandas.tests.scalar.timestamp.test_unary_ops.result->pandas.Timestamp.now().normalize()
A:pandas.tests.scalar.timestamp.test_unary_ops.expected->Timestamp('2013-11-30', tz=tz)
A:pandas.tests.scalar.timestamp.test_unary_ops.ts->pandas.Timestamp.now()
A:pandas.tests.scalar.timestamp.test_unary_ops.stamp->Timestamp('2000-01-05 05:09:15.13')
A:pandas.tests.scalar.timestamp.test_unary_ops.func->getattr(dt, rounder)
A:pandas.tests.scalar.timestamp.test_unary_ops.result_dt->pandas.Timestamp.now().to_pydatetime().replace(tzinfo=tzinfo).replace(tzinfo=None)
A:pandas.tests.scalar.timestamp.test_unary_ops.result_pd->Timestamp(dt).replace(tzinfo=tzinfo).replace(tzinfo=None)
A:pandas.tests.scalar.timestamp.test_unary_ops.ts_naive->Timestamp('2017-12-03 16:03:30')
A:pandas.tests.scalar.timestamp.test_unary_ops.ts_aware->pandas._libs.tslibs.conversion.localize_pydatetime(ts_naive, tz)
A:pandas.tests.scalar.timestamp.test_unary_ops.ts2->pandas._libs.tslibs.conversion.localize_pydatetime(ts_naive, tz).replace(month=6)
A:pandas.tests.scalar.timestamp.test_unary_ops.ts2b->normalize(ts2)
A:pandas.tests.scalar.timestamp.test_unary_ops.t->Timestamp('2013-11-3', tz='America/Chicago')
A:pandas.tests.scalar.timestamp.test_unary_ops.d->datetime(2019, 10, 27, 2, 30)
A:pandas.tests.scalar.timestamp.test_unary_ops.uts->pandas.Timestamp.now().replace(tzinfo=utc)
A:pandas.tests.scalar.timestamp.test_unary_ops.tsc->Timestamp('2014-10-11 11:00:01.12345678', tz='US/Central')
A:pandas.tests.scalar.timestamp.test_unary_ops.utsc->Timestamp('2014-10-11 11:00:01.12345678', tz='US/Central').tz_convert('UTC')
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_ceil(self)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_ceil_floor_edge(self,test_input,rounder,freq,expected)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_floor(self)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_normalize(self,tz_naive_fixture,arg)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_replace_across_dst(self,tz,normalize)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_replace_aware(self,tz_aware_fixture)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_replace_dst_border(self)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_replace_dst_fold(self,fold,tz)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_replace_integer_args(self,tz_aware_fixture)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_replace_invalid_kwarg(self,tz_aware_fixture)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_replace_multiple(self,tz_aware_fixture)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_replace_naive(self)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_replace_preserves_nanos(self,tz_aware_fixture)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_replace_tzinfo(self)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_replace_tzinfo_equiv_tz_localize_none(self)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_round_30min(self)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_round_dst_border_ambiguous(self,method)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_round_dst_border_nonexistent(self,method,ts_str,freq)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_round_frequencies(self,timestamp,freq,expected)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_round_int64(self,timestamp,freq)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_round_invalid_arg(self)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_round_minute_freq(self,test_input,freq,expected,rounder)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_round_nonstandard_freq(self)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_round_subsecond(self)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_round_tzaware(self)
pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps.test_timestamp(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/scalar/period/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/scalar/period/test_period.py----------------------------------------
A:pandas.tests.scalar.period.test_period.i1->Period('1982', freq='Min')
A:pandas.tests.scalar.period.test_period.i2->Period(datetime(2007, 1, 1), freq='M')
A:pandas.tests.scalar.period.test_period.i3->Period(np.datetime64('2007-01-01'), freq='M')
A:pandas.tests.scalar.period.test_period.i4->Period(np_datetime64_compat('2007-01-01 00:00:00Z'), freq='M')
A:pandas.tests.scalar.period.test_period.i5->Period(np_datetime64_compat('2007-01-01 00:00:00.000Z'), freq='M')
A:pandas.tests.scalar.period.test_period.expected->datetime(1985, 1, 1)
A:pandas.tests.scalar.period.test_period.lower->Period('4q1984')
A:pandas.tests.scalar.period.test_period.p->Period('2011-04-01', freq='D')
A:pandas.tests.scalar.period.test_period.result->Period('2011-04-01', freq='D').to_timestamp('5S', how='start')
A:pandas.tests.scalar.period.test_period.exp->Period('2011-03-30', freq='D')
A:pandas.tests.scalar.period.test_period.result1->Period('1989', freq='2A')
A:pandas.tests.scalar.period.test_period.result2->Period('1989', freq='A')
A:pandas.tests.scalar.period.test_period.freq->'W-{day}'.format(day=day)
A:pandas.tests.scalar.period.test_period.stamp->Period('2011-03-30', freq='D').to_timestamp('3D', how='end')
A:pandas.tests.scalar.period.test_period.daystr->'2011-02-{num}'.format(num=num)
A:pandas.tests.scalar.period.test_period.res->Period('2011-04-01', freq='D').strftime('%Y-%m-%d %H:%M:%S')
A:pandas.tests.scalar.period.test_period.p1->Period(p1_d, freq=offset(n, normalize, **kwds))
A:pandas.tests.scalar.period.test_period.p2->Period(p2_d, freq=offset(n, normalize, **kwds))
A:pandas.tests.scalar.period.test_period.new_p->pandas._testing.round_trip_pickle(p)
A:pandas.tests.scalar.period.test_period.exp_zone->pytz.timezone(tzstr).normalize(p)
A:pandas.tests.scalar.period.test_period.tz->maybe_get_tz(tzstr)
A:pandas.tests.scalar.period.test_period.start_ts->Period('2011-04-01', freq='D').to_timestamp(how='S')
A:pandas.tests.scalar.period.test_period.end_ts->Period('2011-04-01', freq='D').to_timestamp(how='E')
A:pandas.tests.scalar.period.test_period.xp->_ex(2013, 1, 6)
A:pandas.tests.scalar.period.test_period.a_date->Period(freq='A', year=2007)
A:pandas.tests.scalar.period.test_period.qedec_date->Period(freq='Q-DEC', year=2007, quarter=1)
A:pandas.tests.scalar.period.test_period.qejan_date->Period(freq='Q-JAN', year=2007, quarter=1)
A:pandas.tests.scalar.period.test_period.qejun_date->Period(freq='Q-JUN', year=2007, quarter=1)
A:pandas.tests.scalar.period.test_period.m_date->Period(freq='M', year=2007, month=1)
A:pandas.tests.scalar.period.test_period.w_date->Period(freq='W', year=2007, month=1, day=7)
A:pandas.tests.scalar.period.test_period.b_date->Period(freq='B', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_period.d_date->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_period.h_date1->Period(freq='H', year=2007, month=1, day=1, hour=0)
A:pandas.tests.scalar.period.test_period.h_date2->Period(freq='2H', year=2007, month=1, day=1, hour=0)
A:pandas.tests.scalar.period.test_period.t_date->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=0)
A:pandas.tests.scalar.period.test_period.s_date->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=0, second=0)
A:pandas.tests.scalar.period.test_period.self.january1->Period('2000-01', 'M')
A:pandas.tests.scalar.period.test_period.self.january2->Period('2000-01', 'M')
A:pandas.tests.scalar.period.test_period.self.february->Period('2000-02', 'M')
A:pandas.tests.scalar.period.test_period.self.march->Period('2000-03', 'M')
A:pandas.tests.scalar.period.test_period.self.day->Period('2012-01-01', 'D')
A:pandas.tests.scalar.period.test_period.p_nat->Period('NaT', freq='D')
A:pandas.tests.scalar.period.test_period.nat->Timestamp('NaT')
A:pandas.tests.scalar.period.test_period.t->Timestamp('2011-01-01')
A:pandas.tests.scalar.period.test_period.per1->Period('0001-01-07', 'D')
A:pandas.tests.scalar.period.test_period.per2->Period('2011-01-15', freq='D')
A:pandas.tests.scalar.period.test_period.ts->Timestamp('2017')
A:pandas.tests.scalar.period.test_period.per->Period('2014Q1')
pandas.tests.scalar.period.test_period.TestArithmetic
pandas.tests.scalar.period.test_period.TestArithmetic.test_add_integer(self)
pandas.tests.scalar.period.test_period.TestArithmetic.test_add_invalid(self)
pandas.tests.scalar.period.test_period.TestArithmetic.test_add_offset(self)
pandas.tests.scalar.period.test_period.TestArithmetic.test_add_offset_nat(self)
pandas.tests.scalar.period.test_period.TestArithmetic.test_add_sub_nat(self)
pandas.tests.scalar.period.test_period.TestArithmetic.test_add_timestamp_raises(self,rbox,lbox)
pandas.tests.scalar.period.test_period.TestArithmetic.test_nat_ops(self,freq)
pandas.tests.scalar.period.test_period.TestArithmetic.test_period_ops_offset(self)
pandas.tests.scalar.period.test_period.TestArithmetic.test_sub(self)
pandas.tests.scalar.period.test_period.TestArithmetic.test_sub_delta(self)
pandas.tests.scalar.period.test_period.TestArithmetic.test_sub_n_gt_1_offsets(self,offset,kwd_name,n,normalize)
pandas.tests.scalar.period.test_period.TestArithmetic.test_sub_n_gt_1_ticks(self,tick_classes,n)
pandas.tests.scalar.period.test_period.TestArithmetic.test_sub_offset(self)
pandas.tests.scalar.period.test_period.TestArithmetic.test_sub_offset_nat(self)
pandas.tests.scalar.period.test_period.TestComparisons
pandas.tests.scalar.period.test_period.TestComparisons.setup_method(self,method)
pandas.tests.scalar.period.test_period.TestComparisons.test_equal(self)
pandas.tests.scalar.period.test_period.TestComparisons.test_equal_Raises_Value(self)
pandas.tests.scalar.period.test_period.TestComparisons.test_greater(self)
pandas.tests.scalar.period.test_period.TestComparisons.test_greaterEqual(self)
pandas.tests.scalar.period.test_period.TestComparisons.test_greaterEqual_Raises_Value(self)
pandas.tests.scalar.period.test_period.TestComparisons.test_greater_Raises_Type(self)
pandas.tests.scalar.period.test_period.TestComparisons.test_greater_Raises_Value(self)
pandas.tests.scalar.period.test_period.TestComparisons.test_notEqual(self)
pandas.tests.scalar.period.test_period.TestComparisons.test_period_nat_comp(self)
pandas.tests.scalar.period.test_period.TestComparisons.test_smaller(self)
pandas.tests.scalar.period.test_period.TestComparisons.test_smallerEqual(self)
pandas.tests.scalar.period.test_period.TestComparisons.test_smallerEqual_Raises_Type(self)
pandas.tests.scalar.period.test_period.TestComparisons.test_smallerEqual_Raises_Value(self)
pandas.tests.scalar.period.test_period.TestComparisons.test_smaller_Raises_Type(self)
pandas.tests.scalar.period.test_period.TestComparisons.test_smaller_Raises_Value(self)
pandas.tests.scalar.period.test_period.TestComparisons.test_sort(self)
pandas.tests.scalar.period.test_period.TestPeriodConstruction
pandas.tests.scalar.period.test_period.TestPeriodConstruction.test_construction(self)
pandas.tests.scalar.period.test_period.TestPeriodConstruction.test_construction_bday(self)
pandas.tests.scalar.period.test_period.TestPeriodConstruction.test_construction_month(self)
pandas.tests.scalar.period.test_period.TestPeriodConstruction.test_construction_quarter(self)
pandas.tests.scalar.period.test_period.TestPeriodConstruction.test_constructor_corner(self)
pandas.tests.scalar.period.test_period.TestPeriodConstruction.test_constructor_infer_freq(self)
pandas.tests.scalar.period.test_period.TestPeriodConstruction.test_invalid_arguments(self)
pandas.tests.scalar.period.test_period.TestPeriodConstruction.test_multiples(self)
pandas.tests.scalar.period.test_period.TestPeriodConstruction.test_period_cons_annual(self,month)
pandas.tests.scalar.period.test_period.TestPeriodConstruction.test_period_cons_combined(self)
pandas.tests.scalar.period.test_period.TestPeriodConstruction.test_period_cons_mult(self)
pandas.tests.scalar.period.test_period.TestPeriodConstruction.test_period_cons_nat(self)
pandas.tests.scalar.period.test_period.TestPeriodConstruction.test_period_cons_quarterly(self,month)
pandas.tests.scalar.period.test_period.TestPeriodConstruction.test_period_cons_weekly(self,num,day)
pandas.tests.scalar.period.test_period.TestPeriodConstruction.test_period_constructor_offsets(self)
pandas.tests.scalar.period.test_period.TestPeriodConstruction.test_period_from_ordinal(self)
pandas.tests.scalar.period.test_period.TestPeriodField
pandas.tests.scalar.period.test_period.TestPeriodField.test_get_period_field_array_raises_on_out_of_range(self)
pandas.tests.scalar.period.test_period.TestPeriodMethods
pandas.tests.scalar.period.test_period.TestPeriodMethods.test_hash(self)
pandas.tests.scalar.period.test_period.TestPeriodMethods.test_microsecond_repr(self)
pandas.tests.scalar.period.test_period.TestPeriodMethods.test_millisecond_repr(self)
pandas.tests.scalar.period.test_period.TestPeriodMethods.test_repr(self)
pandas.tests.scalar.period.test_period.TestPeriodMethods.test_repr_nat(self)
pandas.tests.scalar.period.test_period.TestPeriodMethods.test_round_trip(self)
pandas.tests.scalar.period.test_period.TestPeriodMethods.test_strftime(self)
pandas.tests.scalar.period.test_period.TestPeriodMethods.test_to_timestamp(self)
pandas.tests.scalar.period.test_period.TestPeriodMethods.test_to_timestamp_mult(self)
pandas.tests.scalar.period.test_period.TestPeriodMethods.test_to_timestamp_tz_arg(self,tzstr)
pandas.tests.scalar.period.test_period.TestPeriodMethods.test_to_timestamp_tz_arg_dateutil(self,tzstr)
pandas.tests.scalar.period.test_period.TestPeriodMethods.test_to_timestamp_tz_arg_dateutil_from_string(self)
pandas.tests.scalar.period.test_period.TestPeriodProperties
pandas.tests.scalar.period.test_period.TestPeriodProperties.test_anchor_week_end_time(self)
pandas.tests.scalar.period.test_period.TestPeriodProperties.test_end_time(self)
pandas.tests.scalar.period.test_period.TestPeriodProperties.test_freq_str(self)
pandas.tests.scalar.period.test_period.TestPeriodProperties.test_is_leap_year(self,freq)
pandas.tests.scalar.period.test_period.TestPeriodProperties.test_period_deprecated_freq(self)
pandas.tests.scalar.period.test_period.TestPeriodProperties.test_properties_annually(self)
pandas.tests.scalar.period.test_period.TestPeriodProperties.test_properties_daily(self)
pandas.tests.scalar.period.test_period.TestPeriodProperties.test_properties_hourly(self)
pandas.tests.scalar.period.test_period.TestPeriodProperties.test_properties_minutely(self)
pandas.tests.scalar.period.test_period.TestPeriodProperties.test_properties_monthly(self)
pandas.tests.scalar.period.test_period.TestPeriodProperties.test_properties_quarterly(self)
pandas.tests.scalar.period.test_period.TestPeriodProperties.test_properties_secondly(self)
pandas.tests.scalar.period.test_period.TestPeriodProperties.test_properties_weekly(self)
pandas.tests.scalar.period.test_period.TestPeriodProperties.test_properties_weekly_legacy(self)
pandas.tests.scalar.period.test_period.TestPeriodProperties.test_quarterly_negative_ordinals(self)
pandas.tests.scalar.period.test_period.TestPeriodProperties.test_start_time(self)
pandas.tests.scalar.period.test_period.test_period_immutable()
pandas.tests.scalar.period.test_period.test_small_year_parsing()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/scalar/period/test_asfreq.py----------------------------------------
A:pandas.tests.scalar.period.test_asfreq.per->Period('0001-01-01', freq='B')
A:pandas.tests.scalar.period.test_asfreq.week1->per1.asfreq('W')
A:pandas.tests.scalar.period.test_asfreq.week2->per2.asfreq('W')
A:pandas.tests.scalar.period.test_asfreq.val->Period(freq='A', year=2007)
A:pandas.tests.scalar.period.test_asfreq.result1->Period(freq='1D1H', year=2007).asfreq('H', how='S')
A:pandas.tests.scalar.period.test_asfreq.result2->Period(freq='1H1D', year=2007).asfreq('H', how='S')
A:pandas.tests.scalar.period.test_asfreq.expected->Period('2007-01-01', freq='H')
A:pandas.tests.scalar.period.test_asfreq.ival_A->Period(freq='A', year=2007)
A:pandas.tests.scalar.period.test_asfreq.ival_AJAN->Period(freq='A-JAN', year=2007)
A:pandas.tests.scalar.period.test_asfreq.ival_AJUN->Period(freq='A-JUN', year=2007)
A:pandas.tests.scalar.period.test_asfreq.ival_ANOV->Period(freq='A-NOV', year=2007)
A:pandas.tests.scalar.period.test_asfreq.ival_A_to_Q_start->Period(freq='Q', year=2007, quarter=1)
A:pandas.tests.scalar.period.test_asfreq.ival_A_to_Q_end->Period(freq='Q', year=2007, quarter=4)
A:pandas.tests.scalar.period.test_asfreq.ival_A_to_M_start->Period(freq='M', year=2007, month=1)
A:pandas.tests.scalar.period.test_asfreq.ival_A_to_M_end->Period(freq='M', year=2007, month=12)
A:pandas.tests.scalar.period.test_asfreq.ival_A_to_W_start->Period(freq='W', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_A_to_W_end->Period(freq='W', year=2007, month=12, day=31)
A:pandas.tests.scalar.period.test_asfreq.ival_A_to_B_start->Period(freq='B', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_A_to_B_end->Period(freq='B', year=2007, month=12, day=31)
A:pandas.tests.scalar.period.test_asfreq.ival_A_to_D_start->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_A_to_D_end->Period(freq='D', year=2007, month=12, day=31)
A:pandas.tests.scalar.period.test_asfreq.ival_A_to_H_start->Period(freq='H', year=2007, month=1, day=1, hour=0)
A:pandas.tests.scalar.period.test_asfreq.ival_A_to_H_end->Period(freq='H', year=2007, month=12, day=31, hour=23)
A:pandas.tests.scalar.period.test_asfreq.ival_A_to_T_start->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=0)
A:pandas.tests.scalar.period.test_asfreq.ival_A_to_T_end->Period(freq='Min', year=2007, month=12, day=31, hour=23, minute=59)
A:pandas.tests.scalar.period.test_asfreq.ival_A_to_S_start->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0, second=0)
A:pandas.tests.scalar.period.test_asfreq.ival_A_to_S_end->Period(freq='S', year=2007, month=12, day=31, hour=23, minute=59, second=59)
A:pandas.tests.scalar.period.test_asfreq.ival_AJAN_to_D_end->Period(freq='D', year=2007, month=1, day=31)
A:pandas.tests.scalar.period.test_asfreq.ival_AJAN_to_D_start->Period(freq='D', year=2006, month=2, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_AJUN_to_D_end->Period(freq='D', year=2007, month=6, day=30)
A:pandas.tests.scalar.period.test_asfreq.ival_AJUN_to_D_start->Period(freq='D', year=2006, month=7, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_ANOV_to_D_end->Period(freq='D', year=2007, month=11, day=30)
A:pandas.tests.scalar.period.test_asfreq.ival_ANOV_to_D_start->Period(freq='D', year=2006, month=12, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_Q->Period(freq='Q', year=2007, quarter=1)
A:pandas.tests.scalar.period.test_asfreq.ival_Q_end_of_year->Period(freq='Q', year=2007, quarter=4)
A:pandas.tests.scalar.period.test_asfreq.ival_QEJAN->Period(freq='Q-JAN', year=2007, quarter=1)
A:pandas.tests.scalar.period.test_asfreq.ival_QEJUN->Period(freq='Q-JUN', year=2007, quarter=1)
A:pandas.tests.scalar.period.test_asfreq.ival_Q_to_A->Period(freq='A', year=2007)
A:pandas.tests.scalar.period.test_asfreq.ival_Q_to_M_start->Period(freq='M', year=2007, month=1)
A:pandas.tests.scalar.period.test_asfreq.ival_Q_to_M_end->Period(freq='M', year=2007, month=3)
A:pandas.tests.scalar.period.test_asfreq.ival_Q_to_W_start->Period(freq='W', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_Q_to_W_end->Period(freq='W', year=2007, month=3, day=31)
A:pandas.tests.scalar.period.test_asfreq.ival_Q_to_B_start->Period(freq='B', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_Q_to_B_end->Period(freq='B', year=2007, month=3, day=30)
A:pandas.tests.scalar.period.test_asfreq.ival_Q_to_D_start->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_Q_to_D_end->Period(freq='D', year=2007, month=3, day=31)
A:pandas.tests.scalar.period.test_asfreq.ival_Q_to_H_start->Period(freq='H', year=2007, month=1, day=1, hour=0)
A:pandas.tests.scalar.period.test_asfreq.ival_Q_to_H_end->Period(freq='H', year=2007, month=3, day=31, hour=23)
A:pandas.tests.scalar.period.test_asfreq.ival_Q_to_T_start->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=0)
A:pandas.tests.scalar.period.test_asfreq.ival_Q_to_T_end->Period(freq='Min', year=2007, month=3, day=31, hour=23, minute=59)
A:pandas.tests.scalar.period.test_asfreq.ival_Q_to_S_start->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0, second=0)
A:pandas.tests.scalar.period.test_asfreq.ival_Q_to_S_end->Period(freq='S', year=2007, month=3, day=31, hour=23, minute=59, second=59)
A:pandas.tests.scalar.period.test_asfreq.ival_QEJAN_to_D_start->Period(freq='D', year=2006, month=2, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_QEJAN_to_D_end->Period(freq='D', year=2006, month=4, day=30)
A:pandas.tests.scalar.period.test_asfreq.ival_QEJUN_to_D_start->Period(freq='D', year=2006, month=7, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_QEJUN_to_D_end->Period(freq='D', year=2006, month=9, day=30)
A:pandas.tests.scalar.period.test_asfreq.ival_M->Period(freq='M', year=2007, month=1)
A:pandas.tests.scalar.period.test_asfreq.ival_M_end_of_year->Period(freq='M', year=2007, month=12)
A:pandas.tests.scalar.period.test_asfreq.ival_M_end_of_quarter->Period(freq='M', year=2007, month=3)
A:pandas.tests.scalar.period.test_asfreq.ival_M_to_A->Period(freq='A', year=2007)
A:pandas.tests.scalar.period.test_asfreq.ival_M_to_Q->Period(freq='Q', year=2007, quarter=1)
A:pandas.tests.scalar.period.test_asfreq.ival_M_to_W_start->Period(freq='W', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_M_to_W_end->Period(freq='W', year=2007, month=1, day=31)
A:pandas.tests.scalar.period.test_asfreq.ival_M_to_B_start->Period(freq='B', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_M_to_B_end->Period(freq='B', year=2007, month=1, day=31)
A:pandas.tests.scalar.period.test_asfreq.ival_M_to_D_start->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_M_to_D_end->Period(freq='D', year=2007, month=1, day=31)
A:pandas.tests.scalar.period.test_asfreq.ival_M_to_H_start->Period(freq='H', year=2007, month=1, day=1, hour=0)
A:pandas.tests.scalar.period.test_asfreq.ival_M_to_H_end->Period(freq='H', year=2007, month=1, day=31, hour=23)
A:pandas.tests.scalar.period.test_asfreq.ival_M_to_T_start->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=0)
A:pandas.tests.scalar.period.test_asfreq.ival_M_to_T_end->Period(freq='Min', year=2007, month=1, day=31, hour=23, minute=59)
A:pandas.tests.scalar.period.test_asfreq.ival_M_to_S_start->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0, second=0)
A:pandas.tests.scalar.period.test_asfreq.ival_M_to_S_end->Period(freq='S', year=2007, month=1, day=31, hour=23, minute=59, second=59)
A:pandas.tests.scalar.period.test_asfreq.ival_W->Period(freq='W', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_WSUN->Period(freq='W', year=2007, month=1, day=7)
A:pandas.tests.scalar.period.test_asfreq.ival_WSAT->Period(freq='W-SAT', year=2007, month=1, day=6)
A:pandas.tests.scalar.period.test_asfreq.ival_WFRI->Period(freq='W-FRI', year=2007, month=1, day=5)
A:pandas.tests.scalar.period.test_asfreq.ival_WTHU->Period(freq='W-THU', year=2007, month=1, day=4)
A:pandas.tests.scalar.period.test_asfreq.ival_WWED->Period(freq='W-WED', year=2007, month=1, day=3)
A:pandas.tests.scalar.period.test_asfreq.ival_WTUE->Period(freq='W-TUE', year=2007, month=1, day=2)
A:pandas.tests.scalar.period.test_asfreq.ival_WMON->Period(freq='W-MON', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_WSUN_to_D_start->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_WSUN_to_D_end->Period(freq='D', year=2007, month=1, day=7)
A:pandas.tests.scalar.period.test_asfreq.ival_WSAT_to_D_start->Period(freq='D', year=2006, month=12, day=31)
A:pandas.tests.scalar.period.test_asfreq.ival_WSAT_to_D_end->Period(freq='D', year=2007, month=1, day=6)
A:pandas.tests.scalar.period.test_asfreq.ival_WFRI_to_D_start->Period(freq='D', year=2006, month=12, day=30)
A:pandas.tests.scalar.period.test_asfreq.ival_WFRI_to_D_end->Period(freq='D', year=2007, month=1, day=5)
A:pandas.tests.scalar.period.test_asfreq.ival_WTHU_to_D_start->Period(freq='D', year=2006, month=12, day=29)
A:pandas.tests.scalar.period.test_asfreq.ival_WTHU_to_D_end->Period(freq='D', year=2007, month=1, day=4)
A:pandas.tests.scalar.period.test_asfreq.ival_WWED_to_D_start->Period(freq='D', year=2006, month=12, day=28)
A:pandas.tests.scalar.period.test_asfreq.ival_WWED_to_D_end->Period(freq='D', year=2007, month=1, day=3)
A:pandas.tests.scalar.period.test_asfreq.ival_WTUE_to_D_start->Period(freq='D', year=2006, month=12, day=27)
A:pandas.tests.scalar.period.test_asfreq.ival_WTUE_to_D_end->Period(freq='D', year=2007, month=1, day=2)
A:pandas.tests.scalar.period.test_asfreq.ival_WMON_to_D_start->Period(freq='D', year=2006, month=12, day=26)
A:pandas.tests.scalar.period.test_asfreq.ival_WMON_to_D_end->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_W_end_of_year->Period(freq='W', year=2007, month=12, day=31)
A:pandas.tests.scalar.period.test_asfreq.ival_W_end_of_quarter->Period(freq='W', year=2007, month=3, day=31)
A:pandas.tests.scalar.period.test_asfreq.ival_W_end_of_month->Period(freq='W', year=2007, month=1, day=31)
A:pandas.tests.scalar.period.test_asfreq.ival_W_to_A->Period(freq='A', year=2007)
A:pandas.tests.scalar.period.test_asfreq.ival_W_to_Q->Period(freq='Q', year=2007, quarter=1)
A:pandas.tests.scalar.period.test_asfreq.ival_W_to_M->Period(freq='M', year=2007, month=1)
A:pandas.tests.scalar.period.test_asfreq.ival_W_to_A_end_of_year->Period(freq='A', year=2008)
A:pandas.tests.scalar.period.test_asfreq.ival_W_to_Q_end_of_quarter->Period(freq='Q', year=2007, quarter=2)
A:pandas.tests.scalar.period.test_asfreq.ival_W_to_M_end_of_month->Period(freq='M', year=2007, month=2)
A:pandas.tests.scalar.period.test_asfreq.ival_W_to_B_start->Period(freq='B', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_W_to_B_end->Period(freq='B', year=2007, month=1, day=5)
A:pandas.tests.scalar.period.test_asfreq.ival_W_to_D_start->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_W_to_D_end->Period(freq='D', year=2007, month=1, day=7)
A:pandas.tests.scalar.period.test_asfreq.ival_W_to_H_start->Period(freq='H', year=2007, month=1, day=1, hour=0)
A:pandas.tests.scalar.period.test_asfreq.ival_W_to_H_end->Period(freq='H', year=2007, month=1, day=7, hour=23)
A:pandas.tests.scalar.period.test_asfreq.ival_W_to_T_start->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=0)
A:pandas.tests.scalar.period.test_asfreq.ival_W_to_T_end->Period(freq='Min', year=2007, month=1, day=7, hour=23, minute=59)
A:pandas.tests.scalar.period.test_asfreq.ival_W_to_S_start->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0, second=0)
A:pandas.tests.scalar.period.test_asfreq.ival_W_to_S_end->Period(freq='S', year=2007, month=1, day=7, hour=23, minute=59, second=59)
A:pandas.tests.scalar.period.test_asfreq.ival_B->Period(freq='B', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_B_end_of_year->Period(freq='B', year=2007, month=12, day=31)
A:pandas.tests.scalar.period.test_asfreq.ival_B_end_of_quarter->Period(freq='B', year=2007, month=3, day=30)
A:pandas.tests.scalar.period.test_asfreq.ival_B_end_of_month->Period(freq='B', year=2007, month=1, day=31)
A:pandas.tests.scalar.period.test_asfreq.ival_B_end_of_week->Period(freq='B', year=2007, month=1, day=5)
A:pandas.tests.scalar.period.test_asfreq.ival_B_to_A->Period(freq='A', year=2007)
A:pandas.tests.scalar.period.test_asfreq.ival_B_to_Q->Period(freq='Q', year=2007, quarter=1)
A:pandas.tests.scalar.period.test_asfreq.ival_B_to_M->Period(freq='M', year=2007, month=1)
A:pandas.tests.scalar.period.test_asfreq.ival_B_to_W->Period(freq='W', year=2007, month=1, day=7)
A:pandas.tests.scalar.period.test_asfreq.ival_B_to_D->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_B_to_H_start->Period(freq='H', year=2007, month=1, day=1, hour=0)
A:pandas.tests.scalar.period.test_asfreq.ival_B_to_H_end->Period(freq='H', year=2007, month=1, day=1, hour=23)
A:pandas.tests.scalar.period.test_asfreq.ival_B_to_T_start->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=0)
A:pandas.tests.scalar.period.test_asfreq.ival_B_to_T_end->Period(freq='Min', year=2007, month=1, day=1, hour=23, minute=59)
A:pandas.tests.scalar.period.test_asfreq.ival_B_to_S_start->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0, second=0)
A:pandas.tests.scalar.period.test_asfreq.ival_B_to_S_end->Period(freq='S', year=2007, month=1, day=1, hour=23, minute=59, second=59)
A:pandas.tests.scalar.period.test_asfreq.ival_D->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_D_end_of_year->Period(freq='D', year=2007, month=12, day=31)
A:pandas.tests.scalar.period.test_asfreq.ival_D_end_of_quarter->Period(freq='D', year=2007, month=3, day=31)
A:pandas.tests.scalar.period.test_asfreq.ival_D_end_of_month->Period(freq='D', year=2007, month=1, day=31)
A:pandas.tests.scalar.period.test_asfreq.ival_D_end_of_week->Period(freq='D', year=2007, month=1, day=7)
A:pandas.tests.scalar.period.test_asfreq.ival_D_friday->Period(freq='D', year=2007, month=1, day=5)
A:pandas.tests.scalar.period.test_asfreq.ival_D_saturday->Period(freq='D', year=2007, month=1, day=6)
A:pandas.tests.scalar.period.test_asfreq.ival_D_sunday->Period(freq='D', year=2007, month=1, day=7)
A:pandas.tests.scalar.period.test_asfreq.ival_B_friday->Period(freq='B', year=2007, month=1, day=5)
A:pandas.tests.scalar.period.test_asfreq.ival_B_monday->Period(freq='B', year=2007, month=1, day=8)
A:pandas.tests.scalar.period.test_asfreq.ival_D_to_A->Period(freq='A', year=2007)
A:pandas.tests.scalar.period.test_asfreq.ival_Deoq_to_AJAN->Period(freq='A-JAN', year=2008)
A:pandas.tests.scalar.period.test_asfreq.ival_Deoq_to_AJUN->Period(freq='A-JUN', year=2007)
A:pandas.tests.scalar.period.test_asfreq.ival_Deoq_to_ADEC->Period(freq='A-DEC', year=2007)
A:pandas.tests.scalar.period.test_asfreq.ival_D_to_QEJAN->Period(freq='Q-JAN', year=2007, quarter=4)
A:pandas.tests.scalar.period.test_asfreq.ival_D_to_QEJUN->Period(freq='Q-JUN', year=2007, quarter=3)
A:pandas.tests.scalar.period.test_asfreq.ival_D_to_QEDEC->Period(freq='Q-DEC', year=2007, quarter=1)
A:pandas.tests.scalar.period.test_asfreq.ival_D_to_M->Period(freq='M', year=2007, month=1)
A:pandas.tests.scalar.period.test_asfreq.ival_D_to_W->Period(freq='W', year=2007, month=1, day=7)
A:pandas.tests.scalar.period.test_asfreq.ival_D_to_H_start->Period(freq='H', year=2007, month=1, day=1, hour=0)
A:pandas.tests.scalar.period.test_asfreq.ival_D_to_H_end->Period(freq='H', year=2007, month=1, day=1, hour=23)
A:pandas.tests.scalar.period.test_asfreq.ival_D_to_T_start->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=0)
A:pandas.tests.scalar.period.test_asfreq.ival_D_to_T_end->Period(freq='Min', year=2007, month=1, day=1, hour=23, minute=59)
A:pandas.tests.scalar.period.test_asfreq.ival_D_to_S_start->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0, second=0)
A:pandas.tests.scalar.period.test_asfreq.ival_D_to_S_end->Period(freq='S', year=2007, month=1, day=1, hour=23, minute=59, second=59)
A:pandas.tests.scalar.period.test_asfreq.ival_H->Period(freq='H', year=2007, month=1, day=1, hour=0)
A:pandas.tests.scalar.period.test_asfreq.ival_H_end_of_year->Period(freq='H', year=2007, month=12, day=31, hour=23)
A:pandas.tests.scalar.period.test_asfreq.ival_H_end_of_quarter->Period(freq='H', year=2007, month=3, day=31, hour=23)
A:pandas.tests.scalar.period.test_asfreq.ival_H_end_of_month->Period(freq='H', year=2007, month=1, day=31, hour=23)
A:pandas.tests.scalar.period.test_asfreq.ival_H_end_of_week->Period(freq='H', year=2007, month=1, day=7, hour=23)
A:pandas.tests.scalar.period.test_asfreq.ival_H_end_of_day->Period(freq='H', year=2007, month=1, day=1, hour=23)
A:pandas.tests.scalar.period.test_asfreq.ival_H_end_of_bus->Period(freq='H', year=2007, month=1, day=1, hour=23)
A:pandas.tests.scalar.period.test_asfreq.ival_H_to_A->Period(freq='A', year=2007)
A:pandas.tests.scalar.period.test_asfreq.ival_H_to_Q->Period(freq='Q', year=2007, quarter=1)
A:pandas.tests.scalar.period.test_asfreq.ival_H_to_M->Period(freq='M', year=2007, month=1)
A:pandas.tests.scalar.period.test_asfreq.ival_H_to_W->Period(freq='W', year=2007, month=1, day=7)
A:pandas.tests.scalar.period.test_asfreq.ival_H_to_D->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_H_to_B->Period(freq='B', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_H_to_T_start->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=0)
A:pandas.tests.scalar.period.test_asfreq.ival_H_to_T_end->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=59)
A:pandas.tests.scalar.period.test_asfreq.ival_H_to_S_start->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0, second=0)
A:pandas.tests.scalar.period.test_asfreq.ival_H_to_S_end->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=59, second=59)
A:pandas.tests.scalar.period.test_asfreq.ival_T->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=0)
A:pandas.tests.scalar.period.test_asfreq.ival_T_end_of_year->Period(freq='Min', year=2007, month=12, day=31, hour=23, minute=59)
A:pandas.tests.scalar.period.test_asfreq.ival_T_end_of_quarter->Period(freq='Min', year=2007, month=3, day=31, hour=23, minute=59)
A:pandas.tests.scalar.period.test_asfreq.ival_T_end_of_month->Period(freq='Min', year=2007, month=1, day=31, hour=23, minute=59)
A:pandas.tests.scalar.period.test_asfreq.ival_T_end_of_week->Period(freq='Min', year=2007, month=1, day=7, hour=23, minute=59)
A:pandas.tests.scalar.period.test_asfreq.ival_T_end_of_day->Period(freq='Min', year=2007, month=1, day=1, hour=23, minute=59)
A:pandas.tests.scalar.period.test_asfreq.ival_T_end_of_bus->Period(freq='Min', year=2007, month=1, day=1, hour=23, minute=59)
A:pandas.tests.scalar.period.test_asfreq.ival_T_end_of_hour->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=59)
A:pandas.tests.scalar.period.test_asfreq.ival_T_to_A->Period(freq='A', year=2007)
A:pandas.tests.scalar.period.test_asfreq.ival_T_to_Q->Period(freq='Q', year=2007, quarter=1)
A:pandas.tests.scalar.period.test_asfreq.ival_T_to_M->Period(freq='M', year=2007, month=1)
A:pandas.tests.scalar.period.test_asfreq.ival_T_to_W->Period(freq='W', year=2007, month=1, day=7)
A:pandas.tests.scalar.period.test_asfreq.ival_T_to_D->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_T_to_B->Period(freq='B', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_T_to_H->Period(freq='H', year=2007, month=1, day=1, hour=0)
A:pandas.tests.scalar.period.test_asfreq.ival_T_to_S_start->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0, second=0)
A:pandas.tests.scalar.period.test_asfreq.ival_T_to_S_end->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0, second=59)
A:pandas.tests.scalar.period.test_asfreq.ival_S->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0, second=0)
A:pandas.tests.scalar.period.test_asfreq.ival_S_end_of_year->Period(freq='S', year=2007, month=12, day=31, hour=23, minute=59, second=59)
A:pandas.tests.scalar.period.test_asfreq.ival_S_end_of_quarter->Period(freq='S', year=2007, month=3, day=31, hour=23, minute=59, second=59)
A:pandas.tests.scalar.period.test_asfreq.ival_S_end_of_month->Period(freq='S', year=2007, month=1, day=31, hour=23, minute=59, second=59)
A:pandas.tests.scalar.period.test_asfreq.ival_S_end_of_week->Period(freq='S', year=2007, month=1, day=7, hour=23, minute=59, second=59)
A:pandas.tests.scalar.period.test_asfreq.ival_S_end_of_day->Period(freq='S', year=2007, month=1, day=1, hour=23, minute=59, second=59)
A:pandas.tests.scalar.period.test_asfreq.ival_S_end_of_bus->Period(freq='S', year=2007, month=1, day=1, hour=23, minute=59, second=59)
A:pandas.tests.scalar.period.test_asfreq.ival_S_end_of_hour->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=59, second=59)
A:pandas.tests.scalar.period.test_asfreq.ival_S_end_of_minute->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0, second=59)
A:pandas.tests.scalar.period.test_asfreq.ival_S_to_A->Period(freq='A', year=2007)
A:pandas.tests.scalar.period.test_asfreq.ival_S_to_Q->Period(freq='Q', year=2007, quarter=1)
A:pandas.tests.scalar.period.test_asfreq.ival_S_to_M->Period(freq='M', year=2007, month=1)
A:pandas.tests.scalar.period.test_asfreq.ival_S_to_W->Period(freq='W', year=2007, month=1, day=7)
A:pandas.tests.scalar.period.test_asfreq.ival_S_to_D->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_S_to_B->Period(freq='B', year=2007, month=1, day=1)
A:pandas.tests.scalar.period.test_asfreq.ival_S_to_H->Period(freq='H', year=2007, month=1, day=1, hour=0)
A:pandas.tests.scalar.period.test_asfreq.ival_S_to_T->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=0)
A:pandas.tests.scalar.period.test_asfreq.p->Period('2007', freq='H')
A:pandas.tests.scalar.period.test_asfreq.result->Period('2007', freq='H').asfreq(freq, how=how)
A:pandas.tests.scalar.period.test_asfreq.p1->Period(freq='1D1H', year=2007)
A:pandas.tests.scalar.period.test_asfreq.p2->Period(freq='1H1D', year=2007)
A:pandas.tests.scalar.period.test_asfreq.initial->Period('2013')
pandas.tests.scalar.period.test_asfreq.TestFreqConversion
pandas.tests.scalar.period.test_asfreq.TestFreqConversion.test_asfreq_MS(self)
pandas.tests.scalar.period.test_asfreq.TestFreqConversion.test_asfreq_combined(self)
pandas.tests.scalar.period.test_asfreq.TestFreqConversion.test_asfreq_corner(self)
pandas.tests.scalar.period.test_asfreq.TestFreqConversion.test_asfreq_mult(self)
pandas.tests.scalar.period.test_asfreq.TestFreqConversion.test_asfreq_near_zero(self,freq)
pandas.tests.scalar.period.test_asfreq.TestFreqConversion.test_asfreq_near_zero_weekly(self)
pandas.tests.scalar.period.test_asfreq.TestFreqConversion.test_conv_annual(self)
pandas.tests.scalar.period.test_asfreq.TestFreqConversion.test_conv_business(self)
pandas.tests.scalar.period.test_asfreq.TestFreqConversion.test_conv_daily(self)
pandas.tests.scalar.period.test_asfreq.TestFreqConversion.test_conv_hourly(self)
pandas.tests.scalar.period.test_asfreq.TestFreqConversion.test_conv_minutely(self)
pandas.tests.scalar.period.test_asfreq.TestFreqConversion.test_conv_monthly(self)
pandas.tests.scalar.period.test_asfreq.TestFreqConversion.test_conv_quarterly(self)
pandas.tests.scalar.period.test_asfreq.TestFreqConversion.test_conv_secondly(self)
pandas.tests.scalar.period.test_asfreq.TestFreqConversion.test_conv_weekly(self)
pandas.tests.scalar.period.test_asfreq.TestFreqConversion.test_conv_weekly_legacy(self)
pandas.tests.scalar.period.test_asfreq.TestFreqConversion.test_to_timestamp_out_of_bounds(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/test_base.py----------------------------------------
A:pandas.tests.indexes.test_base.key->getattr(request, 'param', 'string')
A:pandas.tests.indexes.test_base.index->Index([str(x) for x in range(10)])
A:pandas.tests.indexes.test_base.new_copy2->Index([str(x) for x in range(10)]).copy(dtype=int)
A:pandas.tests.indexes.test_base.arr->numpy.arange(8).reshape(2, 2, 2)
A:pandas.tests.indexes.test_base.new_index->Index(arr, copy=True, name='name')
A:pandas.tests.indexes.test_base.result->ensure_index(intervals)
A:pandas.tests.indexes.test_base.expected->Index(intervals, dtype=object)
A:pandas.tests.indexes.test_base.s->Series(range(4), index=index)
A:pandas.tests.indexes.test_base.df->pandas.DataFrame(arr.reshape(4, 2))
A:pandas.tests.indexes.test_base.freq->pandas.infer_freq(df['date'])
A:pandas.tests.indexes.test_base.ser->pandas.Series(0, range(4))
A:pandas.tests.indexes.test_base.xp->period_range('2012-1-1', freq='M', periods=3)
A:pandas.tests.indexes.test_base.rs->Index(xp)
A:pandas.tests.indexes.test_base.arg->getattr(index, attr)
A:pandas.tests.indexes.test_base.values->numpy.random.randn(100)
A:pandas.tests.indexes.test_base.empty->klass(value)
A:pandas.tests.indexes.test_base.casted->Index([str(x) for x in range(10)]).astype('i8')
A:pandas.tests.indexes.test_base.null_index->Index([])
A:pandas.tests.indexes.test_base.i1->Index([1, 2], name='i1')
A:pandas.tests.indexes.test_base.i2->Index([5, 6], name='i2')
A:pandas.tests.indexes.test_base.i3->Index([3, 4], name='i3')
A:pandas.tests.indexes.test_base.i4->Index([('a', 'a'), ('a', 'b'), ('b', 'a')], tupleize_cols=False)
A:pandas.tests.indexes.test_base.ind->Index(['{other}%s', '~:{range}:0'], name='A')
A:pandas.tests.indexes.test_base.ind2->Index(arr, copy=False)
A:pandas.tests.indexes.test_base.ind1->Index(arr, copy=False)
A:pandas.tests.indexes.test_base.d->index[0].to_pydatetime()
A:pandas.tests.indexes.test_base.r->DatetimeIndex([s + 50 + i for i in range(100)])
A:pandas.tests.indexes.test_base.x->Series(np.random.randn(100), index=r)
A:pandas.tests.indexes.test_base.first_value->Series(np.random.randn(100), index=r).asof(x.index[0])
A:pandas.tests.indexes.test_base.expected_ts->np_datetime64_compat('2013-01-01 00:00:00.000000050+0000', 'ns')
A:pandas.tests.indexes.test_base.bool_index->numpy.ones(len(index), dtype=bool)
A:pandas.tests.indexes.test_base.empty_arr->numpy.array([], dtype=dtype)
A:pandas.tests.indexes.test_base.empty_index->type(index)([])
A:pandas.tests.indexes.test_base.empty_farr->numpy.array([], dtype=np.float_)
A:pandas.tests.indexes.test_base.intersect->type(index)(index, copy=True, name='mario').intersection(second, sort=sort)
A:pandas.tests.indexes.test_base.inter->indices.intersection(indices.drop(indices))
A:pandas.tests.indexes.test_base.index1->Index(dt_dates, dtype=object)
A:pandas.tests.indexes.test_base.idx->pandas.Index([0, 1, 2, 3])
A:pandas.tests.indexes.test_base.sorted_->pandas.Index(['a', 'b', 'c'])
A:pandas.tests.indexes.test_base.union->type(index)(index, copy=True, name='mario').union(second, sort=sort)
A:pandas.tests.indexes.test_base.j1->Index([1, 2], name='j1')
A:pandas.tests.indexes.test_base.j2->Index([], name='j2')
A:pandas.tests.indexes.test_base.j3->Index([], name='j3')
A:pandas.tests.indexes.test_base.case->klass(second.values)
A:pandas.tests.indexes.test_base.first->type(index)(index, copy=True, name='mario')
A:pandas.tests.indexes.test_base.second->type(first)(first, copy=False)
A:pandas.tests.indexes.test_base.vals->list(vals)
A:pandas.tests.indexes.test_base.date_index->pandas._testing.makeDateIndex(24, freq='h', name='hourly')
A:pandas.tests.indexes.test_base.first_cat->Index([str(x) for x in range(10)]).union(date_index)
A:pandas.tests.indexes.test_base.second_cat->Index([str(x) for x in range(10)]).union(index)
A:pandas.tests.indexes.test_base.appended->numpy.append(index, date_index.astype('O'))
A:pandas.tests.indexes.test_base.idx1->pandas.Index(['a', 'b'])
A:pandas.tests.indexes.test_base.idx2->pandas.Index(['b', 'c'])
A:pandas.tests.indexes.test_base.multi_index->pandas.core.indexes.api.MultiIndex.from_tuples(zip(first_level, [1, 2, 3]))
A:pandas.tests.indexes.test_base.reduced_index->pandas.core.indexes.api.MultiIndex.from_tuples(zip(first_level, [1, 2, 3])).map(lambda x: x[0])
A:pandas.tests.indexes.test_base.default_dict->defaultdict(lambda : 'blank')
A:pandas.tests.indexes.test_base.left->Index([], name='foo')
A:pandas.tests.indexes.test_base.right->Index([1, 2, 3], name=name)
A:pandas.tests.indexes.test_base.index2->Index(['aa'], dtype=object)
A:pandas.tests.indexes.test_base.a->pandas.Index([3, pd.Timestamp('2000'), 1])
A:pandas.tests.indexes.test_base.b->pandas.Index([2, pd.Timestamp('1999'), 1])
A:pandas.tests.indexes.test_base.op->operator.methodcaller(opname, b, sort=True)
A:pandas.tests.indexes.test_base.diff->indices.difference(indices, sort=sort)
A:pandas.tests.indexes.test_base.now->datetime.datetime.now()
A:pandas.tests.indexes.test_base.formatted->date_range('2011-01-01 04:00:00', periods=10, name='something').format(name=True)
A:pandas.tests.indexes.test_base.dates->date_range('2011-01-01 04:00:00', periods=10, name='something')
A:pandas.tests.indexes.test_base.t->Index([datetime(2012, 2, 7), datetime(2012, 2, 7, 23)])
A:pandas.tests.indexes.test_base.r1->Index(dt_dates, dtype=object).get_indexer(index2)
A:pandas.tests.indexes.test_base.e1->numpy.array([1, 3, -1], dtype=np.intp)
A:pandas.tests.indexes.test_base.actual->Index([str(x) for x in range(10)]).get_indexer(['a', 'b', 'c', 'd'], method=method)
A:pandas.tests.indexes.test_base.numeric_index->idx_class(RangeIndex(4))
A:pandas.tests.indexes.test_base.n->len(index)
A:pandas.tests.indexes.test_base.(s_start, s_stop)->Index([str(x) for x in range(10)]).slice_locs(in_slice.start, in_slice.stop, in_slice.step)
A:pandas.tests.indexes.test_base.dropped->Index([str(x) for x in range(10)]).drop(key, errors='ignore')
A:pandas.tests.indexes.test_base.removed->Index([str(x) for x in range(10)]).drop(to_drop[1])
A:pandas.tests.indexes.test_base.joined->Index([str(x) for x in range(10)]).join(index, how=join_type)
A:pandas.tests.indexes.test_base.left_index->Index(np.random.permutation(15))
A:pandas.tests.indexes.test_base.right_index->pandas._testing.makeDateIndex(10)
A:pandas.tests.indexes.test_base.mi->pandas.core.indexes.api.MultiIndex.from_tuples([(1, 2), (4, 5), (8, 9)])
A:pandas.tests.indexes.test_base.warning->pandas._testing.assert_produces_warning(DeprecationWarning, check_stacklevel=False)
A:pandas.tests.indexes.test_base.s1->Series(2, index=first)
A:pandas.tests.indexes.test_base.s2->Series(3, index=second[:-1])
A:pandas.tests.indexes.test_base.index3->Index([str(x) for x in range(10)]).copy(names=['NewName'])
A:pandas.tests.indexes.test_base.exp1->numpy.arange(8).reshape(2, 2, 2).format()
A:pandas.tests.indexes.test_base.exp2->repr(arr)
A:pandas.tests.indexes.test_base.method->getattr(indices, opname)
A:pandas.tests.indexes.test_base.ser.index->numpy.array([[2, 3]] * 4)
pandas.tests.indexes.test_base.TestIndex(Base)
pandas.tests.indexes.test_base.TestIndex._check_method_works(self,method,index)
pandas.tests.indexes.test_base.TestIndex.create_index(self)
pandas.tests.indexes.test_base.TestIndex.index(self,request)
pandas.tests.indexes.test_base.TestIndex.test_append_empty_preserve_name(self,name,expected)
pandas.tests.indexes.test_base.TestIndex.test_append_multiple(self)
pandas.tests.indexes.test_base.TestIndex.test_asof(self,index)
pandas.tests.indexes.test_base.TestIndex.test_asof_datetime_partial(self)
pandas.tests.indexes.test_base.TestIndex.test_asof_dt_partial(self)
pandas.tests.indexes.test_base.TestIndex.test_astype(self,index)
pandas.tests.indexes.test_base.TestIndex.test_boolean_cmp(self,values)
pandas.tests.indexes.test_base.TestIndex.test_booleanindex(self,index)
pandas.tests.indexes.test_base.TestIndex.test_cached_properties_not_settable(self)
pandas.tests.indexes.test_base.TestIndex.test_can_hold_identifiers(self)
pandas.tests.indexes.test_base.TestIndex.test_chained_union(self,sort)
pandas.tests.indexes.test_base.TestIndex.test_construction_list_mixed_tuples(self,index_vals)
pandas.tests.indexes.test_base.TestIndex.test_construction_list_tuples_nan(self,na_value,vtype)
pandas.tests.indexes.test_base.TestIndex.test_constructor_cast(self)
pandas.tests.indexes.test_base.TestIndex.test_constructor_casting(self,index)
pandas.tests.indexes.test_base.TestIndex.test_constructor_copy(self,index)
pandas.tests.indexes.test_base.TestIndex.test_constructor_corner(self)
pandas.tests.indexes.test_base.TestIndex.test_constructor_dtypes_datetime(self,tz_naive_fixture,attr,klass)
pandas.tests.indexes.test_base.TestIndex.test_constructor_dtypes_dt(self,tz_naive_fixture,attr,klass)
pandas.tests.indexes.test_base.TestIndex.test_constructor_dtypes_timedelta(self,attr,klass)
pandas.tests.indexes.test_base.TestIndex.test_constructor_dtypes_to_categorical(self,vals)
pandas.tests.indexes.test_base.TestIndex.test_constructor_dtypes_to_datetime(self,cast_index,vals)
pandas.tests.indexes.test_base.TestIndex.test_constructor_dtypes_to_dt(self,cast_index,vals)
pandas.tests.indexes.test_base.TestIndex.test_constructor_dtypes_to_float64(self,vals)
pandas.tests.indexes.test_base.TestIndex.test_constructor_dtypes_to_int64(self,vals)
pandas.tests.indexes.test_base.TestIndex.test_constructor_dtypes_to_object(self,cast_index,vals)
pandas.tests.indexes.test_base.TestIndex.test_constructor_dtypes_to_timedelta(self,cast_index,vals)
pandas.tests.indexes.test_base.TestIndex.test_constructor_empty(self,value,klass)
pandas.tests.indexes.test_base.TestIndex.test_constructor_empty_special(self,empty,klass)
pandas.tests.indexes.test_base.TestIndex.test_constructor_from_frame_series_freq(self)
pandas.tests.indexes.test_base.TestIndex.test_constructor_from_index_dtlike(self,cast_as_obj,index)
pandas.tests.indexes.test_base.TestIndex.test_constructor_from_series(self,klass)
pandas.tests.indexes.test_base.TestIndex.test_constructor_from_series_dtlike(self,index,has_tz)
pandas.tests.indexes.test_base.TestIndex.test_constructor_from_series_freq(self)
pandas.tests.indexes.test_base.TestIndex.test_constructor_int_dtype_float(self,dtype)
pandas.tests.indexes.test_base.TestIndex.test_constructor_int_dtype_nan(self)
pandas.tests.indexes.test_base.TestIndex.test_constructor_int_dtype_nan_raises(self,dtype)
pandas.tests.indexes.test_base.TestIndex.test_constructor_ndarray_like(self,array)
pandas.tests.indexes.test_base.TestIndex.test_constructor_no_pandas_array(self)
pandas.tests.indexes.test_base.TestIndex.test_constructor_overflow_int64(self)
pandas.tests.indexes.test_base.TestIndex.test_constructor_regular(self,indices)
pandas.tests.indexes.test_base.TestIndex.test_constructor_simple_new(self,vals,dtype)
pandas.tests.indexes.test_base.TestIndex.test_constructor_wrong_kwargs(self)
pandas.tests.indexes.test_base.TestIndex.test_contains_method_removed(self,indices)
pandas.tests.indexes.test_base.TestIndex.test_copy_and_deepcopy(self,index)
pandas.tests.indexes.test_base.TestIndex.test_delete(self,pos,expected)
pandas.tests.indexes.test_base.TestIndex.test_delete_raises(self)
pandas.tests.indexes.test_base.TestIndex.test_difference_empty_arg(self,index,sort)
pandas.tests.indexes.test_base.TestIndex.test_difference_identity(self,index,sort)
pandas.tests.indexes.test_base.TestIndex.test_difference_incomparable(self,opname)
pandas.tests.indexes.test_base.TestIndex.test_difference_incomparable_true(self,opname)
pandas.tests.indexes.test_base.TestIndex.test_difference_name_preservation(self,index,second_name,expected,sort)
pandas.tests.indexes.test_base.TestIndex.test_difference_sort(self,index,sort)
pandas.tests.indexes.test_base.TestIndex.test_difference_type(self,indices,sort)
pandas.tests.indexes.test_base.TestIndex.test_drop_by_numeric_label_errors_ignore(self,key,expected)
pandas.tests.indexes.test_base.TestIndex.test_drop_by_numeric_label_loc(self)
pandas.tests.indexes.test_base.TestIndex.test_drop_by_numeric_label_raises_missing_keys(self)
pandas.tests.indexes.test_base.TestIndex.test_drop_by_str_label(self,index)
pandas.tests.indexes.test_base.TestIndex.test_drop_by_str_label_errors_ignore(self,index)
pandas.tests.indexes.test_base.TestIndex.test_drop_by_str_label_raises_missing_keys(self,index,keys)
pandas.tests.indexes.test_base.TestIndex.test_drop_tuple(self,values,to_drop)
pandas.tests.indexes.test_base.TestIndex.test_dt_conversion_preserves_name(self,dt_conv)
pandas.tests.indexes.test_base.TestIndex.test_empty_fancy(self,index,dtype)
pandas.tests.indexes.test_base.TestIndex.test_empty_fancy_raises(self,index)
pandas.tests.indexes.test_base.TestIndex.test_equals_object(self)
pandas.tests.indexes.test_base.TestIndex.test_equals_op_index_vs_mi_same_length(self)
pandas.tests.indexes.test_base.TestIndex.test_equals_op_mismatched_multiindex_raises(self,index)
pandas.tests.indexes.test_base.TestIndex.test_equals_op_multiindex(self,mi,expected)
pandas.tests.indexes.test_base.TestIndex.test_equals_op_multiindex_identify(self)
pandas.tests.indexes.test_base.TestIndex.test_fancy(self)
pandas.tests.indexes.test_base.TestIndex.test_format(self,indices)
pandas.tests.indexes.test_base.TestIndex.test_format_bug(self)
pandas.tests.indexes.test_base.TestIndex.test_format_datetime_with_time(self)
pandas.tests.indexes.test_base.TestIndex.test_format_dt_with_time(self)
pandas.tests.indexes.test_base.TestIndex.test_format_missing(self,vals,nulls_fixture)
pandas.tests.indexes.test_base.TestIndex.test_format_with_name_time_info(self)
pandas.tests.indexes.test_base.TestIndex.test_get_indexer(self)
pandas.tests.indexes.test_base.TestIndex.test_get_indexer_invalid(self)
pandas.tests.indexes.test_base.TestIndex.test_get_indexer_methods(self,reverse,expected,method)
pandas.tests.indexes.test_base.TestIndex.test_get_indexer_nearest(self,method,tolerance,indexer,expected)
pandas.tests.indexes.test_base.TestIndex.test_get_indexer_nearest_decreasing(self,method,expected)
pandas.tests.indexes.test_base.TestIndex.test_get_indexer_nearest_error(self)
pandas.tests.indexes.test_base.TestIndex.test_get_indexer_nearest_listlike_tolerance(self,tolerance,expected,listtype)
pandas.tests.indexes.test_base.TestIndex.test_get_indexer_numeric_index_boolean_target(self,idx_class)
pandas.tests.indexes.test_base.TestIndex.test_get_indexer_strings(self,method,expected)
pandas.tests.indexes.test_base.TestIndex.test_get_indexer_strings_raises(self)
pandas.tests.indexes.test_base.TestIndex.test_get_indexer_with_NA_values(self,unique_nulls_fixture,unique_nulls_fixture2)
pandas.tests.indexes.test_base.TestIndex.test_get_level_values(self,index,name,level)
pandas.tests.indexes.test_base.TestIndex.test_get_loc(self,method)
pandas.tests.indexes.test_base.TestIndex.test_get_loc_bad_tolerance_raises(self)
pandas.tests.indexes.test_base.TestIndex.test_get_loc_outside_tolerance_raises(self,method)
pandas.tests.indexes.test_base.TestIndex.test_get_loc_raises_bad_label(self,method)
pandas.tests.indexes.test_base.TestIndex.test_get_loc_raises_missized_tolerance(self)
pandas.tests.indexes.test_base.TestIndex.test_get_loc_raises_object_nearest(self)
pandas.tests.indexes.test_base.TestIndex.test_get_loc_raises_object_tolerance(self)
pandas.tests.indexes.test_base.TestIndex.test_get_loc_tolerance(self,method,loc)
pandas.tests.indexes.test_base.TestIndex.test_get_loc_tolerance_no_method_raises(self)
pandas.tests.indexes.test_base.TestIndex.test_get_value(self,index)
pandas.tests.indexes.test_base.TestIndex.test_groupby(self)
pandas.tests.indexes.test_base.TestIndex.test_identical(self)
pandas.tests.indexes.test_base.TestIndex.test_index_ctor_infer_nan_nat(self,klass,dtype,na_val)
pandas.tests.indexes.test_base.TestIndex.test_index_ctor_infer_nat_dt_like(self,pos,klass,dtype,ctor,nulls_fixture)
pandas.tests.indexes.test_base.TestIndex.test_index_ctor_infer_periodindex(self)
pandas.tests.indexes.test_base.TestIndex.test_index_ctor_nat_result(self,swap_objs)
pandas.tests.indexes.test_base.TestIndex.test_indexing_doesnt_change_class(self)
pandas.tests.indexes.test_base.TestIndex.test_insert(self)
pandas.tests.indexes.test_base.TestIndex.test_insert_missing(self,nulls_fixture)
pandas.tests.indexes.test_base.TestIndex.test_intersect_nosort(self)
pandas.tests.indexes.test_base.TestIndex.test_intersect_str_dates(self,sort)
pandas.tests.indexes.test_base.TestIndex.test_intersection(self,index,sort)
pandas.tests.indexes.test_base.TestIndex.test_intersection_difference(self,indices,sort)
pandas.tests.indexes.test_base.TestIndex.test_intersection_equal_sort(self)
pandas.tests.indexes.test_base.TestIndex.test_intersection_equal_sort_true(self)
pandas.tests.indexes.test_base.TestIndex.test_intersection_monotonic(self,index2,keeps_name,sort)
pandas.tests.indexes.test_base.TestIndex.test_intersection_name_preservation(self,index2,keeps_name,sort)
pandas.tests.indexes.test_base.TestIndex.test_intersection_name_preservation2(self,index,first_name,second_name,expected_name,sort)
pandas.tests.indexes.test_base.TestIndex.test_intersection_non_monotonic_non_unique(self,index2,expected_arr,sort)
pandas.tests.indexes.test_base.TestIndex.test_is_(self)
pandas.tests.indexes.test_base.TestIndex.test_is_all_dates(self,index,expected)
pandas.tests.indexes.test_base.TestIndex.test_is_monotonic_incomparable(self,attr)
pandas.tests.indexes.test_base.TestIndex.test_is_numeric(self,index,expected)
pandas.tests.indexes.test_base.TestIndex.test_is_object(self,index,expected)
pandas.tests.indexes.test_base.TestIndex.test_isin(self,values,index,expected)
pandas.tests.indexes.test_base.TestIndex.test_isin_empty(self,empty)
pandas.tests.indexes.test_base.TestIndex.test_isin_level_kwarg(self,level,index)
pandas.tests.indexes.test_base.TestIndex.test_isin_level_kwarg_bad_label_raises(self,label,indices)
pandas.tests.indexes.test_base.TestIndex.test_isin_level_kwarg_bad_level_raises(self,level,indices)
pandas.tests.indexes.test_base.TestIndex.test_isin_nan_common_float64(self,nulls_fixture)
pandas.tests.indexes.test_base.TestIndex.test_isin_nan_common_object(self,nulls_fixture,nulls_fixture2)
pandas.tests.indexes.test_base.TestIndex.test_join_self(self,index,join_type)
pandas.tests.indexes.test_base.TestIndex.test_logical_compat(self,op)
pandas.tests.indexes.test_base.TestIndex.test_map_defaultdict(self)
pandas.tests.indexes.test_base.TestIndex.test_map_dictlike(self,indices,mapper)
pandas.tests.indexes.test_base.TestIndex.test_map_dictlike_simple(self,mapper)
pandas.tests.indexes.test_base.TestIndex.test_map_identity_mapping(self,indices)
pandas.tests.indexes.test_base.TestIndex.test_map_na_exclusion(self)
pandas.tests.indexes.test_base.TestIndex.test_map_tseries_indices_accsr_return_index(self)
pandas.tests.indexes.test_base.TestIndex.test_map_tseries_indices_return_index(self,attr)
pandas.tests.indexes.test_base.TestIndex.test_map_with_non_function_missing_values(self,mapper)
pandas.tests.indexes.test_base.TestIndex.test_map_with_tuples(self)
pandas.tests.indexes.test_base.TestIndex.test_map_with_tuples_mi(self)
pandas.tests.indexes.test_base.TestIndex.test_nan_first_take_datetime(self)
pandas.tests.indexes.test_base.TestIndex.test_nan_first_take_dt(self)
pandas.tests.indexes.test_base.TestIndex.test_nanosecond_index_access(self)
pandas.tests.indexes.test_base.TestIndex.test_new_axis(self,index)
pandas.tests.indexes.test_base.TestIndex.test_not_equals_object(self,comp)
pandas.tests.indexes.test_base.TestIndex.test_outer_join_sort(self)
pandas.tests.indexes.test_base.TestIndex.test_reindex_doesnt_preserve_type_if_target_is_empty_index(self,labels,dtype)
pandas.tests.indexes.test_base.TestIndex.test_reindex_no_type_preserve_target_empty_mi(self)
pandas.tests.indexes.test_base.TestIndex.test_reindex_preserves_name_if_target_is_list_or_ndarray(self,name,labels)
pandas.tests.indexes.test_base.TestIndex.test_reindex_preserves_type_if_target_is_empty_list_or_array(self,labels)
pandas.tests.indexes.test_base.TestIndex.test_set_value_deprecated(self)
pandas.tests.indexes.test_base.TestIndex.test_setops_disallow_true(self,method)
pandas.tests.indexes.test_base.TestIndex.test_slice_float_locs(self,dtype)
pandas.tests.indexes.test_base.TestIndex.test_slice_keep_name(self)
pandas.tests.indexes.test_base.TestIndex.test_slice_locs(self,dtype)
pandas.tests.indexes.test_base.TestIndex.test_slice_locs_dup(self)
pandas.tests.indexes.test_base.TestIndex.test_slice_locs_dup_numeric(self,dtype)
pandas.tests.indexes.test_base.TestIndex.test_slice_locs_na(self)
pandas.tests.indexes.test_base.TestIndex.test_slice_locs_na_raises(self)
pandas.tests.indexes.test_base.TestIndex.test_slice_locs_negative_step(self,in_slice,expected)
pandas.tests.indexes.test_base.TestIndex.test_str_attribute(self,method)
pandas.tests.indexes.test_base.TestIndex.test_str_attribute_raises(self,index)
pandas.tests.indexes.test_base.TestIndex.test_str_bool_return(self)
pandas.tests.indexes.test_base.TestIndex.test_str_bool_series_indexing(self)
pandas.tests.indexes.test_base.TestIndex.test_str_split(self,expand,expected)
pandas.tests.indexes.test_base.TestIndex.test_string_index_repr(self,index,expected)
pandas.tests.indexes.test_base.TestIndex.test_string_index_repr_with_unicode_option(self,index,expected)
pandas.tests.indexes.test_base.TestIndex.test_summary(self,indices)
pandas.tests.indexes.test_base.TestIndex.test_summary_bug(self)
pandas.tests.indexes.test_base.TestIndex.test_symmetric_difference(self,sort)
pandas.tests.indexes.test_base.TestIndex.test_symmetric_difference_mi(self,sort)
pandas.tests.indexes.test_base.TestIndex.test_symmetric_difference_missing(self,index2,expected,sort)
pandas.tests.indexes.test_base.TestIndex.test_symmetric_difference_non_index(self,sort)
pandas.tests.indexes.test_base.TestIndex.test_tab_complete_warning(self,ip)
pandas.tests.indexes.test_base.TestIndex.test_tab_completion(self,index,expected)
pandas.tests.indexes.test_base.TestIndex.test_take_bad_bounds_raises(self)
pandas.tests.indexes.test_base.TestIndex.test_take_fill_value(self)
pandas.tests.indexes.test_base.TestIndex.test_take_fill_value_none_raises(self)
pandas.tests.indexes.test_base.TestIndex.test_tuple_union_bug(self,method,expected,sort)
pandas.tests.indexes.test_base.TestIndex.test_union(self,index,sort)
pandas.tests.indexes.test_base.TestIndex.test_union_dt_as_obj(self,sort)
pandas.tests.indexes.test_base.TestIndex.test_union_from_iterables(self,index,klass,sort)
pandas.tests.indexes.test_base.TestIndex.test_union_identity(self,index,sort)
pandas.tests.indexes.test_base.TestIndex.test_union_name_preservation(self,first_list,second_list,first_name,second_name,expected_name,sort)
pandas.tests.indexes.test_base.TestIndex.test_union_sort_other_incomparable(self)
pandas.tests.indexes.test_base.TestIndex.test_union_sort_other_incomparable_true(self)
pandas.tests.indexes.test_base.TestIndex.test_union_sort_other_special(self,slice_)
pandas.tests.indexes.test_base.TestIndex.test_union_sort_special_true(self,slice_)
pandas.tests.indexes.test_base.TestIndex.test_view_with_args(self,index)
pandas.tests.indexes.test_base.TestIndex.test_view_with_args_object_array_raises(self,index)
pandas.tests.indexes.test_base.TestIndexUtils
pandas.tests.indexes.test_base.TestIndexUtils.test_ensure_index_from_sequences(self,data,names,expected)
pandas.tests.indexes.test_base.TestIndexUtils.test_ensure_index_mixed_closed_intervals(self)
pandas.tests.indexes.test_base.TestMixedIntIndex(Base)
pandas.tests.indexes.test_base.TestMixedIntIndex.create_index(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.indices(self,request)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_argsort(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_copy_name(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_copy_name2(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_difference_base(self,sort)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_dropna(self,how,dtype,vals,expected)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_dropna_dt_like(self,how,index,expected)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_dropna_invalid_how_raises(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_get_combined_index(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_index_repr_bool_nan(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_int_name_format(self,klass)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_intersect_str_dates(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_intersection_base(self,sort)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_intersection_different_type_base(self,klass,sort)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_is_monotonic_na(self,index)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_logical_compat(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_numpy_argsort(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_print_unicode_columns(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_repeat(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_repr_summary(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_str_to_bytes_raises(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_symmetric_difference(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_union_base(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_union_different_type_base(self,klass)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_unique_na(self)
pandas.tests.indexes.test_base.test_deprecated_fastpath()
pandas.tests.indexes.test_base.test_generated_op_names(opname,indices)
pandas.tests.indexes.test_base.test_index_subclass_constructor_wrong_kwargs(index_maker)
pandas.tests.indexes.test_base.test_shape_of_invalid_index()
pandas.tests.indexes.test_base.test_validate_1d_input()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/datetimelike.py----------------------------------------
A:pandas.tests.indexes.datetimelike.rng->self.create_index()
A:pandas.tests.indexes.datetimelike.idx->self.create_index()
A:pandas.tests.indexes.datetimelike.i->self.create_index()
A:pandas.tests.indexes.datetimelike.i_view->self.create_index().view(self._holder)
A:pandas.tests.indexes.datetimelike.result->self.create_index().map(mapper([], []))
A:pandas.tests.indexes.datetimelike.index->self.create_index()
A:pandas.tests.indexes.datetimelike.expected->pandas.Index([np.nan] * len(index))
pandas.tests.indexes.datetimelike.DatetimeLike(Base)
pandas.tests.indexes.datetimelike.DatetimeLike.test_argmax_axis_invalid(self)
pandas.tests.indexes.datetimelike.DatetimeLike.test_can_hold_identifiers(self)
pandas.tests.indexes.datetimelike.DatetimeLike.test_map_callable(self)
pandas.tests.indexes.datetimelike.DatetimeLike.test_map_dictlike(self,mapper)
pandas.tests.indexes.datetimelike.DatetimeLike.test_shift_identity(self)
pandas.tests.indexes.datetimelike.DatetimeLike.test_str(self)
pandas.tests.indexes.datetimelike.DatetimeLike.test_view(self)
pandas.tests.indexes.dtlike.DatetimeLike(Base)
pandas.tests.indexes.dtlike.DatetimeLike.test_argmax_axis_invalid(self)
pandas.tests.indexes.dtlike.DatetimeLike.test_can_hold_identifiers(self)
pandas.tests.indexes.dtlike.DatetimeLike.test_map_callable(self)
pandas.tests.indexes.dtlike.DatetimeLike.test_map_dictlike(self,mapper)
pandas.tests.indexes.dtlike.DatetimeLike.test_shift_identity(self)
pandas.tests.indexes.dtlike.DatetimeLike.test_str(self)
pandas.tests.indexes.dtlike.DatetimeLike.test_view(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/test_setops.py----------------------------------------
A:pandas.tests.indexes.test_setops.idx1->idx_fact1(10)
A:pandas.tests.indexes.test_setops.idx2->idx_fact2(20)
A:pandas.tests.indexes.test_setops.type_pair->tuple(sorted([type(idx1), type(idx2)], key=lambda x: str(x)))
A:pandas.tests.indexes.test_setops.res1->idx_fact1(10).union(idx2)
A:pandas.tests.indexes.test_setops.res2->idx_fact2(20).union(idx1)
A:pandas.tests.indexes.test_setops.left->pandas_dtype(left)
A:pandas.tests.indexes.test_setops.right->pandas_dtype(right)
A:pandas.tests.indexes.test_setops.a->pandas.Index([], dtype=left)
A:pandas.tests.indexes.test_setops.b->pandas.Index([], dtype=right)
pandas.tests.indexes.test_setops.index_pair(request)
pandas.tests.indexes.test_setops.test_compatible_inconsistent_pairs(idx_fact1,idx_fact2)
pandas.tests.indexes.test_setops.test_union_different_types(index_pair)
pandas.tests.indexes.test_setops.test_union_dtypes(left,right,expected)
pandas.tests.indexes.test_setops.test_union_same_types(indices)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/test_frozen.py----------------------------------------
A:pandas.tests.indexes.test_frozen.unicode_container->FrozenList(['א', 'ב', 'c'])
A:pandas.tests.indexes.test_frozen.self.container->FrozenList(self.lst)
A:pandas.tests.indexes.test_frozen.mutable_regex->re.compile('does not support mutable operations')
A:pandas.tests.indexes.test_frozen.expected->FrozenList([1, 3])
A:pandas.tests.indexes.test_frozen.result->FrozenList([1, 2, 3, 2]).difference([2])
pandas.tests.indexes.test_frozen.TestFrozenList
pandas.tests.indexes.test_frozen.TestFrozenList.check_mutable_error(self,*args,**kwargs)
pandas.tests.indexes.test_frozen.TestFrozenList.check_result(self,result,expected)
pandas.tests.indexes.test_frozen.TestFrozenList.setup_method(self,_)
pandas.tests.indexes.test_frozen.TestFrozenList.test_add(self)
pandas.tests.indexes.test_frozen.TestFrozenList.test_difference(self)
pandas.tests.indexes.test_frozen.TestFrozenList.test_difference_dupe(self)
pandas.tests.indexes.test_frozen.TestFrozenList.test_iadd(self)
pandas.tests.indexes.test_frozen.TestFrozenList.test_no_mutable_funcs(self)
pandas.tests.indexes.test_frozen.TestFrozenList.test_slicing_maintains_type(self)
pandas.tests.indexes.test_frozen.TestFrozenList.test_string_methods_dont_fail(self)
pandas.tests.indexes.test_frozen.TestFrozenList.test_tricky_container(self)
pandas.tests.indexes.test_frozen.TestFrozenList.test_tricky_container_to_bytes_raises(self)
pandas.tests.indexes.test_frozen.TestFrozenList.test_union(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/test_common.py----------------------------------------
A:pandas.tests.indexes.test_common.b->type(a)(a)
A:pandas.tests.indexes.test_common.first->indices.drop(indices).set_names(fname)
A:pandas.tests.indexes.test_common.second->indices.drop(indices).set_names(sname)
A:pandas.tests.indexes.test_common.union->indices.drop(indices).set_names(fname).union(second)
A:pandas.tests.indexes.test_common.expected->indices.drop_duplicates()
A:pandas.tests.indexes.test_common.result->holder([indices[0]] * 5).duplicated(keep=keep)
A:pandas.tests.indexes.test_common.new_ind->indices.set_names([new_name])
A:pandas.tests.indexes.test_common.res->indices.rename(new_name, inplace=True)
A:pandas.tests.indexes.test_common.idx_copy->func(indices)
A:pandas.tests.indexes.test_common.new_copy->indices.copy(deep=True, name='banana')
A:pandas.tests.indexes.test_common.idx_nan->indices._shallow_copy(vals)
A:pandas.tests.indexes.test_common.idx_unique_nan->indices._shallow_copy(vals_unique)
A:pandas.tests.indexes.test_common.expected_right->len(indices)
A:pandas.tests.indexes.test_common.ssm_left->indices._searchsorted_monotonic(value, side='left')
A:pandas.tests.indexes.test_common.ssm_right->indices._searchsorted_monotonic(value, side='right')
A:pandas.tests.indexes.test_common.ss_left->indices.searchsorted(value, side='left')
A:pandas.tests.indexes.test_common.ss_right->indices.searchsorted(value, side='right')
A:pandas.tests.indexes.test_common.unpickled->pandas._testing.round_trip_pickle(indices)
A:pandas.tests.indexes.test_common.holder->type(indices)
A:pandas.tests.indexes.test_common.idx->holder([indices[0]] * 5)
A:pandas.tests.indexes.test_common.duplicated_selection->numpy.random.choice(n, k * n)
pandas.tests.indexes.test_common.TestCommon
pandas.tests.indexes.test_common.TestCommon.test_compat(self,indices)
pandas.tests.indexes.test_common.TestCommon.test_constructor_non_hashable_name(self,indices)
pandas.tests.indexes.test_common.TestCommon.test_constructor_unwraps_index(self,indices)
pandas.tests.indexes.test_common.TestCommon.test_copy_and_deepcopy(self,indices)
pandas.tests.indexes.test_common.TestCommon.test_corner_union(self,indices,fname,sname,expected_name)
pandas.tests.indexes.test_common.TestCommon.test_droplevel(self,indices)
pandas.tests.indexes.test_common.TestCommon.test_duplicated(self,indices,keep)
pandas.tests.indexes.test_common.TestCommon.test_get_unique_index(self,indices)
pandas.tests.indexes.test_common.TestCommon.test_getitem_error(self,indices,itm)
pandas.tests.indexes.test_common.TestCommon.test_has_duplicates(self,indices)
pandas.tests.indexes.test_common.TestCommon.test_hash_error(self,indices)
pandas.tests.indexes.test_common.TestCommon.test_mutability(self,indices)
pandas.tests.indexes.test_common.TestCommon.test_pickle(self,indices)
pandas.tests.indexes.test_common.TestCommon.test_searchsorted_monotonic(self,indices)
pandas.tests.indexes.test_common.TestCommon.test_set_name_methods(self,indices)
pandas.tests.indexes.test_common.TestCommon.test_sort(self,indices)
pandas.tests.indexes.test_common.TestCommon.test_to_flat_index(self,indices)
pandas.tests.indexes.test_common.TestCommon.test_unique(self,indices)
pandas.tests.indexes.test_common.TestCommon.test_view(self,indices)
pandas.tests.indexes.test_common.TestCommon.test_wrong_number_names(self,indices)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/common.py----------------------------------------
A:pandas.tests.indexes.common.idx->self.create_index()
A:pandas.tests.indexes.common.s->self.create_index().to_series(name='__test')
A:pandas.tests.indexes.common.df->self.create_index().to_frame(index=False, name=idx_name)
A:pandas.tests.indexes.common.msg->'Not supported for type {}'.format(type(idx).__name__)
A:pandas.tests.indexes.common.expected->CategoricalIndex(index.values, name=name)
A:pandas.tests.indexes.common.result->self.create_index().astype('category', copy=copy)
A:pandas.tests.indexes.common.div_err->div_err.replace(' __', ' __r').replace(' __', ' __r')
A:pandas.tests.indexes.common.actual->self.create_index().get_indexer(idx)
A:pandas.tests.indexes.common.indexer->indices.get_indexer(indices[0:2])
A:pandas.tests.indexes.common.(indexer, _)->indices.get_indexer_non_unique(indices[0:2])
A:pandas.tests.indexes.common.first->type(indices)(indices, copy=True, name='mario')
A:pandas.tests.indexes.common.second->type(first)(first, copy=False)
A:pandas.tests.indexes.common.s1->Series(2, index=first)
A:pandas.tests.indexes.common.s2->Series(3, index=second[:-1])
A:pandas.tests.indexes.common.index_type->type(indices)
A:pandas.tests.indexes.common.result2->indices.memory_usage()
A:pandas.tests.indexes.common.result3->indices.memory_usage(deep=True)
A:pandas.tests.indexes.common.i->self.create_index()
A:pandas.tests.indexes.common.rep->numpy.arange(len(i))
A:pandas.tests.indexes.common.intersect->type(indices)(indices, copy=True, name='mario').intersection(second)
A:pandas.tests.indexes.common.union->type(indices)(indices, copy=True, name='mario').union(second)
A:pandas.tests.indexes.common.same_values->Index(indices, dtype=object)
A:pandas.tests.indexes.common.index_a->self.create_index()
A:pandas.tests.indexes.common.n->len(index_a)
A:pandas.tests.indexes.common.index_c->index_a[0:-1].append(index_a[-2:-1])
A:pandas.tests.indexes.common.expected1->numpy.array([True] * n)
A:pandas.tests.indexes.common.expected2->numpy.array([True] * (n - 1) + [False])
A:pandas.tests.indexes.common.array_a->numpy.array(index_a)
A:pandas.tests.indexes.common.array_b->numpy.array(index_a[0:-1])
A:pandas.tests.indexes.common.array_c->numpy.array(index_a[0:-1].append(index_a[-2:-1]))
A:pandas.tests.indexes.common.array_d->numpy.array(index_a[0:1])
A:pandas.tests.indexes.common.series_a->Series(array_a)
A:pandas.tests.indexes.common.series_b->Series(array_b)
A:pandas.tests.indexes.common.series_c->Series(array_c)
A:pandas.tests.indexes.common.series_d->Series(array_d)
A:pandas.tests.indexes.common.expected3->numpy.array([False] * (len(index_a) - 2) + [True, False])
A:pandas.tests.indexes.common.values->numpy.asarray(idx.values)
A:pandas.tests.indexes.common.index->self.create_index()
A:pandas.tests.indexes.common.joined->self.create_index().join(index, how=join_type)
A:pandas.tests.indexes.common.identity->mapper(index.values, index)
A:pandas.tests.indexes.common.dtype->CategoricalDtype(index.unique().tolist()[:-1], ordered)
A:pandas.tests.indexes.common.index_dup->self.create_index().insert(0, index[0])
A:pandas.tests.indexes.common.index_na->self.create_index().insert(0, np.nan)
A:pandas.tests.indexes.common.index_na_dup->self.create_index().insert(0, np.nan).insert(0, np.nan)
A:pandas.tests.indexes.common.nrefs_pre->len(gc.get_referrers(index))
pandas.tests.indexes.common.Base
pandas.tests.indexes.common.Base.test_argsort(self,request,indices)
pandas.tests.indexes.common.Base.test_astype_category(self,copy,name,ordered)
pandas.tests.indexes.common.Base.test_boolean_context_compat(self)
pandas.tests.indexes.common.Base.test_constructor_name_unhashable(self)
pandas.tests.indexes.common.Base.test_copy_name(self,indices)
pandas.tests.indexes.common.Base.test_create_index_existing_name(self)
pandas.tests.indexes.common.Base.test_delete_base(self,indices)
pandas.tests.indexes.common.Base.test_difference_base(self,sort,indices)
pandas.tests.indexes.common.Base.test_empty(self)
pandas.tests.indexes.common.Base.test_engine_reference_cycle(self)
pandas.tests.indexes.common.Base.test_ensure_copied_data(self,indices)
pandas.tests.indexes.common.Base.test_equals(self,indices)
pandas.tests.indexes.common.Base.test_equals_op(self)
pandas.tests.indexes.common.Base.test_fillna(self,indices)
pandas.tests.indexes.common.Base.test_get_indexer_consistency(self,indices)
pandas.tests.indexes.common.Base.test_getitem_2d_deprecated(self)
pandas.tests.indexes.common.Base.test_hasnans_isnans(self,indices)
pandas.tests.indexes.common.Base.test_insert_base(self,indices)
pandas.tests.indexes.common.Base.test_intersection_base(self,indices)
pandas.tests.indexes.common.Base.test_is_unique(self)
pandas.tests.indexes.common.Base.test_join_self_unique(self,join_type)
pandas.tests.indexes.common.Base.test_logical_compat(self)
pandas.tests.indexes.common.Base.test_map(self)
pandas.tests.indexes.common.Base.test_map_dictlike(self,mapper)
pandas.tests.indexes.common.Base.test_map_str(self)
pandas.tests.indexes.common.Base.test_memory_usage(self,indices)
pandas.tests.indexes.common.Base.test_ndarray_compat_properties(self)
pandas.tests.indexes.common.Base.test_nulls(self,indices)
pandas.tests.indexes.common.Base.test_numeric_compat(self)
pandas.tests.indexes.common.Base.test_numpy_argsort(self,indices)
pandas.tests.indexes.common.Base.test_numpy_repeat(self)
pandas.tests.indexes.common.Base.test_pickle_compat_construction(self)
pandas.tests.indexes.common.Base.test_putmask_with_wrong_mask(self)
pandas.tests.indexes.common.Base.test_reindex_base(self)
pandas.tests.indexes.common.Base.test_repeat(self)
pandas.tests.indexes.common.Base.test_repr_max_seq_item_setting(self)
pandas.tests.indexes.common.Base.test_repr_roundtrip(self)
pandas.tests.indexes.common.Base.test_set_ops_error_cases(self,case,method,indices)
pandas.tests.indexes.common.Base.test_shift(self)
pandas.tests.indexes.common.Base.test_str(self)
pandas.tests.indexes.common.Base.test_symmetric_difference(self,indices)
pandas.tests.indexes.common.Base.test_take(self,indices)
pandas.tests.indexes.common.Base.test_take_invalid_kwargs(self)
pandas.tests.indexes.common.Base.test_to_frame(self,name)
pandas.tests.indexes.common.Base.test_to_series(self)
pandas.tests.indexes.common.Base.test_to_series_with_arguments(self)
pandas.tests.indexes.common.Base.test_union_base(self,indices)
pandas.tests.indexes.common.Base.test_where(self,klass)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/test_numeric.py----------------------------------------
A:pandas.tests.indexes.test_numeric.idx->UInt64Index(2 ** 63 + np.array([1, 1, 2, 5], dtype='uint64'))
A:pandas.tests.indexes.test_numeric.expected->UInt64Index([7606741985629028552, 17876870360202815256, 17876870360202815256], dtype='uint64')
A:pandas.tests.indexes.test_numeric.a->numpy.zeros(5, dtype='float64')
A:pandas.tests.indexes.test_numeric.int_idx->Index(range(6))
A:pandas.tests.indexes.test_numeric.float_idx->Index(np.arange(0, 0.6, 0.1))
A:pandas.tests.indexes.test_numeric.obj_idx->Index('A B C D E F'.split())
A:pandas.tests.indexes.test_numeric.dt_idx->pandas.date_range('2013-01-01', freq='M', periods=6)
A:pandas.tests.indexes.test_numeric.to_groupby->numpy.array([1, 2, np.nan, np.nan, 2, 1])
A:pandas.tests.indexes.test_numeric.i->i.rename('foo').rename('foo')
A:pandas.tests.indexes.test_numeric.result->pandas.Float64Index([0.5, 1.5]).union(index)
A:pandas.tests.indexes.test_numeric.index->pandas.RangeIndex(start=0, stop=3)
A:pandas.tests.indexes.test_numeric.i2->Float64Index([1.0, np.nan])
A:pandas.tests.indexes.test_numeric.sliced->UInt64Index(2 ** 63 + np.array([1, 1, 2, 5], dtype='uint64')).slice_locs(np.nan)
A:pandas.tests.indexes.test_numeric.exp->Index([1.0, 'obj', 3.0], name='x')
A:pandas.tests.indexes.test_numeric.i_view->i.rename('foo').rename('foo').view(self._holder)
A:pandas.tests.indexes.test_numeric.same_values_different_type->Index(i, dtype=object)
A:pandas.tests.indexes.test_numeric.same_values->Index(i, dtype=object)
A:pandas.tests.indexes.test_numeric.left->index_large.join(other, how='left')
A:pandas.tests.indexes.test_numeric.(joined, lidx, ridx)->index_large.join(other, how='left').join(left, return_indexers=True)
A:pandas.tests.indexes.test_numeric.exp_joined->Index([3, 3, 3, 3, 4, 4, 4, 4])
A:pandas.tests.indexes.test_numeric.exp_lidx->numpy.array([2, 2, 3, 3, 0, 0, 1, 1], dtype=np.intp)
A:pandas.tests.indexes.test_numeric.exp_ridx->numpy.array([2, 3, 2, 3, 0, 1, 0, 1], dtype=np.intp)
A:pandas.tests.indexes.test_numeric.joined->pandas.RangeIndex(start=0, stop=3).join(index, how=join_type)
A:pandas.tests.indexes.test_numeric.other->pandas.Float64Index([0.5, 1.5])
A:pandas.tests.indexes.test_numeric.taken->pandas.RangeIndex(start=0, stop=3).take([3, 0, 1])
A:pandas.tests.indexes.test_numeric.new_index->Int64Index(arr, copy=True)
A:pandas.tests.indexes.test_numeric.arr->Index([1, 2, 3, 4], dtype=object)
A:pandas.tests.indexes.test_numeric.target->UInt64Index(np.arange(10).astype('uint64') * 5 + 2 ** 63)
A:pandas.tests.indexes.test_numeric.indexer->index_large.get_indexer(target, method='backfill')
A:pandas.tests.indexes.test_numeric.other_mono->UInt64Index(2 ** 63 + np.array([1, 2, 7, 10, 12, 25], dtype='uint64'))
A:pandas.tests.indexes.test_numeric.(res, lidx, ridx)->index_large.join(other_mono, how='outer', return_indexers=True)
A:pandas.tests.indexes.test_numeric.ind->res.take(ind).argsort()
A:pandas.tests.indexes.test_numeric.res->res.take(ind).take(ind)
A:pandas.tests.indexes.test_numeric.lidx->lidx.take(ind).take(ind)
A:pandas.tests.indexes.test_numeric.ridx->ridx.take(ind).take(ind)
A:pandas.tests.indexes.test_numeric.eres->UInt64Index(2 ** 63 + np.array([0, 1, 2, 7, 10, 12, 15, 20, 25], dtype='uint64'))
A:pandas.tests.indexes.test_numeric.elidx->numpy.array([0, -1, -1, -1, 1, -1, 2, 3, 4], dtype=np.intp)
A:pandas.tests.indexes.test_numeric.eridx->numpy.array([-1, 0, 1, 2, 3, 4, -1, -1, 5], dtype=np.intp)
A:pandas.tests.indexes.test_numeric.res2->index_large.intersection(other_mono)
A:pandas.tests.indexes.test_numeric.idx2->UInt64Index(2 ** 63 + np.array([1, 2, 5, 7, 9], dtype='uint64'))
A:pandas.tests.indexes.test_numeric.outer->index_large.join(other, how='outer')
A:pandas.tests.indexes.test_numeric.outer2->pandas.Float64Index([0.5, 1.5]).join(index_large, how='outer')
A:pandas.tests.indexes.test_numeric.inner->index_large.join(other, how='inner')
A:pandas.tests.indexes.test_numeric.inner2->pandas.Float64Index([0.5, 1.5]).join(index_large, how='inner')
A:pandas.tests.indexes.test_numeric.left2->pandas.Float64Index([0.5, 1.5]).join(index_large, how='left')
A:pandas.tests.indexes.test_numeric.right->index_large.join(other, how='right')
A:pandas.tests.indexes.test_numeric.right2->pandas.Float64Index([0.5, 1.5]).join(index_large, how='right')
A:pandas.tests.indexes.test_numeric.noidx_res->index_large.join(other_mono, how='outer')
A:pandas.tests.indexes.test_numeric.series->pandas.Series([0, 1, 2, 3, 4, 5], index=[7606741985629028552, 17876870360202815256, 17876870360202815256, 13106359306506049338, 8991270399732411471, 8991270399732411472])
pandas.tests.indexes.test_numeric.Numeric(Base)
pandas.tests.indexes.test_numeric.Numeric.test_can_hold_identifiers(self)
pandas.tests.indexes.test_numeric.Numeric.test_explicit_conversions(self)
pandas.tests.indexes.test_numeric.Numeric.test_index_groupby(self)
pandas.tests.indexes.test_numeric.Numeric.test_insert(self,nulls_fixture)
pandas.tests.indexes.test_numeric.Numeric.test_numeric_compat(self)
pandas.tests.indexes.test_numeric.Numeric.test_where(self,klass)
pandas.tests.indexes.test_numeric.NumericInt(Numeric)
pandas.tests.indexes.test_numeric.NumericInt.test_cant_or_shouldnt_cast(self)
pandas.tests.indexes.test_numeric.NumericInt.test_identical(self)
pandas.tests.indexes.test_numeric.NumericInt.test_is_monotonic(self)
pandas.tests.indexes.test_numeric.NumericInt.test_is_strictly_monotonic(self)
pandas.tests.indexes.test_numeric.NumericInt.test_join_non_unique(self)
pandas.tests.indexes.test_numeric.NumericInt.test_join_self(self,join_type)
pandas.tests.indexes.test_numeric.NumericInt.test_logical_compat(self)
pandas.tests.indexes.test_numeric.NumericInt.test_prevent_casting(self)
pandas.tests.indexes.test_numeric.NumericInt.test_slice_keep_name(self)
pandas.tests.indexes.test_numeric.NumericInt.test_take_fill_value(self)
pandas.tests.indexes.test_numeric.NumericInt.test_take_preserve_name(self)
pandas.tests.indexes.test_numeric.NumericInt.test_union_noncomparable(self)
pandas.tests.indexes.test_numeric.NumericInt.test_view(self)
pandas.tests.indexes.test_numeric.NumericInt.test_view_index(self)
pandas.tests.indexes.test_numeric.TestFloat64Index(Numeric)
pandas.tests.indexes.test_numeric.TestFloat64Index.check_coerce(self,a,b,is_float_index=True)
pandas.tests.indexes.test_numeric.TestFloat64Index.check_is_index(self,i)
pandas.tests.indexes.test_numeric.TestFloat64Index.create_index(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.float_index(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.indices(self,request)
pandas.tests.indexes.test_numeric.TestFloat64Index.mixed_index(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_astype(self,mixed_index,float_index)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_astype_from_object(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_cannot_cast_inf_to_int(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_constructor(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_constructor_coerce(self,mixed_index,float_index)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_constructor_explicit(self,mixed_index,float_index)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_constructor_invalid(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_contains_nans(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_contains_not_nans(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_doesnt_contain_all_the_things(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_equals_numeric(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_fillna_float64(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_get_indexer(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_get_loc(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_get_loc_missing_nan(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_get_loc_na(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_invalid_dtype(self,index,dtype)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_nan_multiple_containment(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_repr_roundtrip(self,indices)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_take_fill_value(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_type_coercion_fail(self,any_int_dtype)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_type_coercion_valid(self,float_dtype)
pandas.tests.indexes.test_numeric.TestInt64Index(NumericInt)
pandas.tests.indexes.test_numeric.TestInt64Index.create_index(self)
pandas.tests.indexes.test_numeric.TestInt64Index.indices(self,request)
pandas.tests.indexes.test_numeric.TestInt64Index.test_coerce_list(self)
pandas.tests.indexes.test_numeric.TestInt64Index.test_constructor(self)
pandas.tests.indexes.test_numeric.TestInt64Index.test_constructor_coercion_signed_to_unsigned(self,uint_dtype)
pandas.tests.indexes.test_numeric.TestInt64Index.test_constructor_corner(self)
pandas.tests.indexes.test_numeric.TestInt64Index.test_constructor_unwraps_index(self)
pandas.tests.indexes.test_numeric.TestInt64Index.test_get_indexer(self)
pandas.tests.indexes.test_numeric.TestInt64Index.test_get_indexer_nan(self)
pandas.tests.indexes.test_numeric.TestInt64Index.test_intersection(self)
pandas.tests.indexes.test_numeric.TestInt64Index.test_join_inner(self)
pandas.tests.indexes.test_numeric.TestInt64Index.test_join_left(self)
pandas.tests.indexes.test_numeric.TestInt64Index.test_join_non_int_index(self)
pandas.tests.indexes.test_numeric.TestInt64Index.test_join_outer(self)
pandas.tests.indexes.test_numeric.TestInt64Index.test_join_right(self)
pandas.tests.indexes.test_numeric.TestUInt64Index(NumericInt)
pandas.tests.indexes.test_numeric.TestUInt64Index.create_index(self)
pandas.tests.indexes.test_numeric.TestUInt64Index.index_large(self)
pandas.tests.indexes.test_numeric.TestUInt64Index.indices(self,request)
pandas.tests.indexes.test_numeric.TestUInt64Index.test_constructor(self)
pandas.tests.indexes.test_numeric.TestUInt64Index.test_get_indexer(self,index_large)
pandas.tests.indexes.test_numeric.TestUInt64Index.test_intersection(self,index_large)
pandas.tests.indexes.test_numeric.TestUInt64Index.test_join_inner(self,index_large)
pandas.tests.indexes.test_numeric.TestUInt64Index.test_join_left(self,index_large)
pandas.tests.indexes.test_numeric.TestUInt64Index.test_join_non_int_index(self,index_large)
pandas.tests.indexes.test_numeric.TestUInt64Index.test_join_outer(self,index_large)
pandas.tests.indexes.test_numeric.TestUInt64Index.test_join_right(self,index_large)
pandas.tests.indexes.test_numeric.test_int_float_union_dtype(dtype)
pandas.tests.indexes.test_numeric.test_range_float_union_dtype()
pandas.tests.indexes.test_numeric.test_uint_index_does_not_convert_to_float64()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/conftest.py----------------------------------------
pandas.tests.indexes.conftest.indices(request)
pandas.tests.indexes.conftest.one(request)
pandas.tests.indexes.conftest.zero(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/test_numpy_compat.py----------------------------------------
A:pandas.tests.indexes.test_numpy_compat.result->func(idx)
A:pandas.tests.indexes.test_numpy_compat.exp->Index(func(idx.values), name=idx.name)
A:pandas.tests.indexes.test_numpy_compat.idx->Index([1, 2])
A:pandas.tests.indexes.test_numpy_compat.expected->numpy.array([False, False])
pandas.tests.indexes.test_numpy_compat.test_elementwise_comparison_warning()
pandas.tests.indexes.test_numpy_compat.test_numpy_ufuncs_basic(indices,func)
pandas.tests.indexes.test_numpy_compat.test_numpy_ufuncs_other(indices,func)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/datetimes/test_astype.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_astype.idx->DatetimeIndex(['2000-01-01', '2000-01-02', '2000-01-03'])
A:pandas.tests.indexes.datetimes.test_astype.result->pandas.date_range('2000', periods=2, tz=tz)._data.astype(bool)
A:pandas.tests.indexes.datetimes.test_astype.expected->numpy.array([True, True])
A:pandas.tests.indexes.datetimes.test_astype.rng->date_range('20090415', '20090519')
A:pandas.tests.indexes.datetimes.test_astype.arr->date_range('2000', periods=2)
A:pandas.tests.indexes.datetimes.test_astype.idx_tz->DatetimeIndex(['2016-05-16', 'NaT', NaT, np.NaN], tz='EST')
A:pandas.tests.indexes.datetimes.test_astype.casted->date_range('20090415', '20090519').astype('O')
A:pandas.tests.indexes.datetimes.test_astype.exp_values->list(rng)
A:pandas.tests.indexes.datetimes.test_astype.converted->date_range('20090415', '20090519').to_pydatetime()
A:pandas.tests.indexes.datetimes.test_astype.rng_eastern->date_range('20090415', '20090519', tz='dateutil/US/Eastern')
A:pandas.tests.indexes.datetimes.test_astype.rng_utc->date_range('20090415', '20090519', tz=dateutil.tz.tzutc())
A:pandas.tests.indexes.datetimes.test_astype.self.index->DatetimeIndex(data)
A:pandas.tests.indexes.datetimes.test_astype.period->index.to_period(freq='U')
A:pandas.tests.indexes.datetimes.test_astype.ts->pandas.date_range('1/1/2000', '2/1/2000', tz='Etc/GMT-1')
A:pandas.tests.indexes.datetimes.test_astype.obj->pandas.date_range('2000', periods=2, tz=tz)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_astype(self)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_astype_datetime64(self)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_astype_object(self)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_astype_object_tz(self,tz)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_astype_object_with_nat(self)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_astype_raises(self,dtype)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_astype_str(self)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_astype_str_compat(self)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_astype_uint(self)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_astype_with_tz(self)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_index_convert_to_datetime_array(self)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_index_convert_to_datetime_array_dateutil(self)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_index_convert_to_datetime_array_explicit_pytz(self)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_integer_index_astype_datetime(self,tz,dtype)
pandas.tests.indexes.datetimes.test_astype.TestToPeriod
pandas.tests.indexes.datetimes.test_astype.TestToPeriod.setup_method(self,method)
pandas.tests.indexes.datetimes.test_astype.TestToPeriod.test_astype_array_fallback(self,tz)
pandas.tests.indexes.datetimes.test_astype.TestToPeriod.test_astype_category(self,tz)
pandas.tests.indexes.datetimes.test_astype.TestToPeriod.test_to_period_microsecond(self)
pandas.tests.indexes.datetimes.test_astype.TestToPeriod.test_to_period_millisecond(self)
pandas.tests.indexes.datetimes.test_astype.TestToPeriod.test_to_period_nofreq(self)
pandas.tests.indexes.datetimes.test_astype.TestToPeriod.test_to_period_tz(self,tz)
pandas.tests.indexes.datetimes.test_astype.TestToPeriod.test_to_period_tz_utc_offset_consistency(self,tz)
pandas.tests.indexes.dts.test_astype.TestDatetimeIndex
pandas.tests.indexes.dts.test_astype.TestDatetimeIndex.test_astype(self)
pandas.tests.indexes.dts.test_astype.TestDatetimeIndex.test_astype_dt64(self)
pandas.tests.indexes.dts.test_astype.TestDatetimeIndex.test_astype_object(self)
pandas.tests.indexes.dts.test_astype.TestDatetimeIndex.test_astype_object_tz(self,tz)
pandas.tests.indexes.dts.test_astype.TestDatetimeIndex.test_astype_object_with_nat(self)
pandas.tests.indexes.dts.test_astype.TestDatetimeIndex.test_astype_raises(self,dtype)
pandas.tests.indexes.dts.test_astype.TestDatetimeIndex.test_astype_str(self)
pandas.tests.indexes.dts.test_astype.TestDatetimeIndex.test_astype_str_compat(self)
pandas.tests.indexes.dts.test_astype.TestDatetimeIndex.test_astype_uint(self)
pandas.tests.indexes.dts.test_astype.TestDatetimeIndex.test_astype_with_tz(self)
pandas.tests.indexes.dts.test_astype.TestDatetimeIndex.test_index_convert_to_dt_array(self)
pandas.tests.indexes.dts.test_astype.TestDatetimeIndex.test_index_convert_to_dt_array_dateutil(self)
pandas.tests.indexes.dts.test_astype.TestDatetimeIndex.test_index_convert_to_dt_array_explicit_pytz(self)
pandas.tests.indexes.dts.test_astype.TestDatetimeIndex.test_integer_index_astype_dt(self,tz,dtype)
pandas.tests.indexes.dts.test_astype.TestToPeriod
pandas.tests.indexes.dts.test_astype.TestToPeriod.setup_method(self,method)
pandas.tests.indexes.dts.test_astype.TestToPeriod.test_astype_array_fallback(self,tz)
pandas.tests.indexes.dts.test_astype.TestToPeriod.test_astype_category(self,tz)
pandas.tests.indexes.dts.test_astype.TestToPeriod.test_to_period_microsecond(self)
pandas.tests.indexes.dts.test_astype.TestToPeriod.test_to_period_millisecond(self)
pandas.tests.indexes.dts.test_astype.TestToPeriod.test_to_period_nofreq(self)
pandas.tests.indexes.dts.test_astype.TestToPeriod.test_to_period_tz(self,tz)
pandas.tests.indexes.dts.test_astype.TestToPeriod.test_to_period_tz_utc_offset_consistency(self,tz)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/datetimes/test_misc.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_misc.rng->date_range('1/1/2000', '3/1/2000')
A:pandas.tests.indexes.datetimes.test_misc.idx->pandas.date_range(start=Timestamp('1970-01-01'), end=Timestamp('1970-01-04'), freq='D')
A:pandas.tests.indexes.datetimes.test_misc.expected->unicodedata.normalize('NFD', result)
A:pandas.tests.indexes.datetimes.test_misc.exp->DatetimeIndex([], freq='D', tz=dti.tz, name='name')
A:pandas.tests.indexes.datetimes.test_misc.dti_naive->pandas.date_range(freq='D', start=datetime(1998, 1, 1), periods=365)
A:pandas.tests.indexes.datetimes.test_misc.dti_tz->pandas.date_range(freq='D', start=datetime(1998, 1, 1), periods=365, tz='US/Eastern')
A:pandas.tests.indexes.datetimes.test_misc.res->getattr(dti, accessor)
A:pandas.tests.indexes.datetimes.test_misc.dti->pandas.to_datetime(arr)
A:pandas.tests.indexes.datetimes.test_misc.bday_egypt->pandas.offsets.CustomBusinessDay(weekmask='Sun Mon Tue Wed Thu')
A:pandas.tests.indexes.datetimes.test_misc.dates->DatetimeIndex(dates, tz='Europe/Brussels')
A:pandas.tests.indexes.datetimes.test_misc.name->name.capitalize().capitalize()
A:pandas.tests.indexes.datetimes.test_misc.ts->Timestamp(pd.NaT)
A:pandas.tests.indexes.datetimes.test_misc.result->unicodedata.normalize('NFD', result)
A:pandas.tests.indexes.datetimes.test_misc.arr->numpy.array([np.datetime64('2012-02-15T12:00:00.000000000')])
pandas.tests.indexes.datetimes.test_misc.TestDatetime64
pandas.tests.indexes.datetimes.test_misc.TestDatetime64.test_datetime_name_accessors(self,time_locale)
pandas.tests.indexes.datetimes.test_misc.TestDatetime64.test_datetimeindex_accessors(self)
pandas.tests.indexes.datetimes.test_misc.TestDatetime64.test_nanosecond_field(self)
pandas.tests.indexes.datetimes.test_misc.TestTimeSeries
pandas.tests.indexes.datetimes.test_misc.TestTimeSeries.test_pass_datetimeindex_to_index(self)
pandas.tests.indexes.datetimes.test_misc.TestTimeSeries.test_range_edges(self)
pandas.tests.indexes.datetimes.test_misc.test_iter_readonly()
pandas.tests.indexes.dts.test_misc.TestDatetime64
pandas.tests.indexes.dts.test_misc.TestDatetime64.test_dt_name_accessors(self,time_locale)
pandas.tests.indexes.dts.test_misc.TestDatetime64.test_dtindex_accessors(self)
pandas.tests.indexes.dts.test_misc.TestDatetime64.test_nanosecond_field(self)
pandas.tests.indexes.dts.test_misc.TestTimeSeries
pandas.tests.indexes.dts.test_misc.TestTimeSeries.test_pass_dtindex_to_index(self)
pandas.tests.indexes.dts.test_misc.TestTimeSeries.test_range_edges(self)
pandas.tests.indexes.dts.test_misc.test_iter_readonly()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/datetimes/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/datetimes/test_datetime.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_datetime.index->pandas.date_range('2018-01-01', periods=count, freq='M', name=name).map(lambda x: (x.year, x.month))
A:pandas.tests.indexes.datetimes.test_datetime.unpickled->pandas._testing.round_trip_pickle(index)
A:pandas.tests.indexes.datetimes.test_datetime.key->time(15, 11, 30)
A:pandas.tests.indexes.datetimes.test_datetime.idx->date_range(start='2019-01-01', end='2019-01-30', freq='D', tz='UTC')
A:pandas.tests.indexes.datetimes.test_datetime.ts->pandas.Series(np.random.randn(n), index=idx)
A:pandas.tests.indexes.datetimes.test_datetime.i->numpy.arange(start, n, step)
A:pandas.tests.indexes.datetimes.test_datetime.periods->numpy.int_(1000)
A:pandas.tests.indexes.datetimes.test_datetime.idx1->idx1.tz_localize('Asia/Tokyo').tz_localize('Asia/Tokyo')
A:pandas.tests.indexes.datetimes.test_datetime.idx2->pandas.DatetimeIndex(['2014-03', '2014-03', '2014-02', '2014-01', '2014-03', '2014-01'])
A:pandas.tests.indexes.datetimes.test_datetime.d1->date(2002, 9, 1)
A:pandas.tests.indexes.datetimes.test_datetime.d2->date(2013, 10, 27)
A:pandas.tests.indexes.datetimes.test_datetime.d3->date(2012, 9, 30)
A:pandas.tests.indexes.datetimes.test_datetime.result_append->idx1.tz_localize('Asia/Tokyo').tz_localize('Asia/Tokyo').append(idx2)
A:pandas.tests.indexes.datetimes.test_datetime.expected->DataFrame(idx, index=idx)
A:pandas.tests.indexes.datetimes.test_datetime.result_union->idx1.tz_localize('Asia/Tokyo').tz_localize('Asia/Tokyo').union(idx2)
A:pandas.tests.indexes.datetimes.test_datetime.result->date_range(start='2019-01-01', end='2019-01-30', freq='D', tz='UTC').to_frame()
A:pandas.tests.indexes.datetimes.test_datetime.df->pandas._testing.makeCustomDataframe(10, 10, data_gen_f=lambda *args: np.random.randint(2), c_idx_type='p', r_idx_type='dt')
A:pandas.tests.indexes.datetimes.test_datetime.rng->date_range('1/1/2000', periods=5)
A:pandas.tests.indexes.datetimes.test_datetime.exp->Index([f(x) for x in rng], dtype='<U8')
A:pandas.tests.indexes.datetimes.test_datetime.dti->date_range('2017-01-01', '2018-01-01', freq='B')
A:pandas.tests.indexes.datetimes.test_datetime.captured->capsys.readouterr()
A:pandas.tests.indexes.datetimes.test_datetime.non_datetime->Index(list('abc'))
A:pandas.tests.indexes.datetimes.test_datetime.ordered->date_range(start='2019-01-01', end='2019-01-30', freq='D', tz='UTC').sort_values(ascending=False)
A:pandas.tests.indexes.datetimes.test_datetime.(ordered, dexer)->date_range(start='2019-01-01', end='2019-01-30', freq='D', tz='UTC').sort_values(return_indexer=True, ascending=False)
A:pandas.tests.indexes.datetimes.test_datetime.monthly_group->pandas._testing.makeCustomDataframe(10, 10, data_gen_f=lambda *args: np.random.randint(2), c_idx_type='p', r_idx_type='dt').groupby(lambda x: (x.year, x.month))
A:pandas.tests.indexes.datetimes.test_datetime.dr->date_range('2011/1/1', '2012/1/1', freq='W-FRI')
A:pandas.tests.indexes.datetimes.test_datetime.a->DataFrame()
A:pandas.tests.indexes.datetimes.test_datetime.c->DataFrame({'A': 'foo', 'B': dr}, index=dr)
A:pandas.tests.indexes.datetimes.test_datetime.cols->pandas._testing.makeCustomDataframe(10, 10, data_gen_f=lambda *args: np.random.randint(2), c_idx_type='p', r_idx_type='dt').columns.join(df.index, how='outer')
A:pandas.tests.indexes.datetimes.test_datetime.joined->pandas.date_range('2018-01-01', periods=count, freq='M', name=name).map(lambda x: (x.year, x.month)).join(index, how=join_type)
A:pandas.tests.indexes.datetimes.test_datetime.ns->int(1000000000.0 / 24414)
A:pandas.tests.indexes.datetimes.test_datetime.dtstart->numpy.datetime64('2012-09-20T00:00:00')
A:pandas.tests.indexes.datetimes.test_datetime.new_index->pandas.date_range(start=index[0], end=index[-1], freq=index.freq)
A:pandas.tests.indexes.datetimes.test_datetime.exp_arr->numpy.arange(100, dtype=np.intp).repeat(5)
A:pandas.tests.indexes.datetimes.test_datetime.exp_idx->DatetimeIndex(['2014-03', '2014-02', '2014-01'])
A:pandas.tests.indexes.datetimes.test_datetime.(arr, idx)->date_range('2000-01', periods=4, freq='M', tz='Asia/Tokyo').factorize()
A:pandas.tests.indexes.datetimes.test_datetime.idx3->date_range('2000-01', periods=4, freq='M', tz='Asia/Tokyo')
A:pandas.tests.indexes.datetimes.test_datetime.base->pandas.date_range('2016-11-05', freq='H', periods=100, tz=tz)
A:pandas.tests.indexes.datetimes.test_datetime.(arr, res)->obj.factorize()
A:pandas.tests.indexes.datetimes.test_datetime.exp_index->pandas.MultiIndex.from_product(((2018,), range(1, 7)), names=[name, name])
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.assert_index_parameters(self,index)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_append_join_nondatetimeindex(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_append_numpy_bug_1681(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_argmin_argmax(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_asarray_tz_aware(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_asarray_tz_naive(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_does_not_convert_mixed_integer(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_factorize(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_factorize_dst(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_factorize_tz(self,tz_naive_fixture)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_groupby_function_tuple_1677(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_hash_error(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_index_map(self,name)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_isin(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_iteration_over_chunksize(self,periods)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_iteration_preserves_tz(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_join_self(self,join_type)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_join_with_period_index(self,join_type)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_map(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_map_bug_1677(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_map_fallthrough(self,capsys)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_misc_coverage(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_nat(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_ns_index(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_reindex_preserves_tz_if_target_is_empty_list_or_array(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_roundtrip_pickle_with_tz(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_sort_values(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_string_index_series_name_converted(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_stringified_slice_with_tz(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_time_loc(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_time_overflow_for_32bit_machines(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_to_frame_datetime_tz(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_unique(self,arr,expected)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_week_of_month_frequency(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.assert_index_parameters(self,index)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_append_join_nondtindex(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_append_numpy_bug_1681(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_argmin_argmax(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_asarray_tz_aware(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_asarray_tz_naive(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_does_not_convert_mixed_integer(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_factorize(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_factorize_dst(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_factorize_tz(self,tz_naive_fixture)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_groupby_function_tuple_1677(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_hash_error(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_index_map(self,name)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_isin(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_iteration_over_chunksize(self,periods)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_iteration_preserves_tz(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_join_self(self,join_type)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_join_with_period_index(self,join_type)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_map(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_map_bug_1677(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_map_fallthrough(self,capsys)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_misc_coverage(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_nat(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_ns_index(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_reindex_preserves_tz_if_target_is_empty_list_or_array(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_roundtrip_pickle_with_tz(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_sort_values(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_string_index_series_name_converted(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_stringified_slice_with_tz(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_time_loc(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_time_overflow_for_32bit_machines(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_to_frame_dt_tz(self)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_unique(self,arr,expected)
pandas.tests.indexes.dts.test_dt.TestDatetimeIndex.test_week_of_month_frequency(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/datetimes/test_date_range.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_date_range.rng->pandas.date_range(start, end=None, periods=1, freq='B')
A:pandas.tests.indexes.datetimes.test_date_range.ts->Timestamp('2014-03-05', freq='D')
A:pandas.tests.indexes.datetimes.test_date_range.datetime_instance->datetime(2014, 3, 4)
A:pandas.tests.indexes.datetimes.test_date_range.dti->date_range(end=end, periods=len(expected), freq='-1H')
A:pandas.tests.indexes.datetimes.test_date_range.dti2->date_range(start=start2, periods=len(expected2), freq='-1H')
A:pandas.tests.indexes.datetimes.test_date_range.dti3->date_range(end=dti[-1], periods=len(dti), freq='D')
A:pandas.tests.indexes.datetimes.test_date_range.start->pandas.Timestamp.max.floor('D').to_pydatetime()
A:pandas.tests.indexes.datetimes.test_date_range.end->datetime(2009, 5, 13)
A:pandas.tests.indexes.datetimes.test_date_range.expected->pandas.DatetimeIndex(['2020-11-25 15:00:00', '2020-11-25 16:00:00', '2020-11-27 15:00:00', '2020-11-27 16:00:00'], freq=freq)
A:pandas.tests.indexes.datetimes.test_date_range.start2->Timestamp('1970-02-01')
A:pandas.tests.indexes.datetimes.test_date_range.end2->Timestamp('1677-10-22')
A:pandas.tests.indexes.datetimes.test_date_range.expected2->DatetimeIndex(expected2_list, dtype='datetime64[ns]', freq='W-SUN', tz=None)
A:pandas.tests.indexes.datetimes.test_date_range.exp->pandas.DatetimeIndex(['2011-01-31', '2010-11-30', '2010-09-30'], freq='-2M')
A:pandas.tests.indexes.datetimes.test_date_range.ex_first->Timestamp('2000-01-03')
A:pandas.tests.indexes.datetimes.test_date_range.snap->datetime.datetime.today()
A:pandas.tests.indexes.datetimes.test_date_range.offset->DateOffset(months=3)
A:pandas.tests.indexes.datetimes.test_date_range.values->DatetimeIndex([snap + i * offset for i in range(n)])
A:pandas.tests.indexes.datetimes.test_date_range.the_time->time(8, 15)
A:pandas.tests.indexes.datetimes.test_date_range.dr->bdate_range(end=end, periods=20, freq='C')
A:pandas.tests.indexes.datetimes.test_date_range.result->pandas.date_range(start='2020-11-25 15:00', periods=4, freq=freq)
A:pandas.tests.indexes.datetimes.test_date_range.idx->DatetimeIndex(['2014-07-04 09:00', '2014-07-04 10:00', '2014-07-04 11:00', '2014-07-04 12:00', '2014-07-04 13:00', '2014-07-04 14:00', '2014-07-04 15:00', '2014-07-04 16:00', '2014-07-07 09:00', '2014-07-07 10:00', '2014-07-07 11:00', '2014-07-07 12:00', '2014-07-07 13:00', '2014-07-07 14:00', '2014-07-07 15:00', '2014-07-07 16:00', '2014-07-08 09:00', '2014-07-08 10:00', '2014-07-08 11:00', '2014-07-08 12:00', '2014-07-08 13:00', '2014-07-08 14:00', '2014-07-08 15:00', '2014-07-08 16:00'], freq='BH')
A:pandas.tests.indexes.datetimes.test_date_range.res->date_range(start='20110101', periods=periods, freq='WOM-1MON')
A:pandas.tests.indexes.datetimes.test_date_range.pre_dst->Timestamp('2010-11-07 01:00:00').tz_localize('US/Pacific', ambiguous=True)
A:pandas.tests.indexes.datetimes.test_date_range.pst_dst->Timestamp('2010-11-07 01:00:00').tz_localize('US/Pacific', ambiguous=False)
A:pandas.tests.indexes.datetimes.test_date_range.tz->timezone('US/Eastern')
A:pandas.tests.indexes.datetimes.test_date_range.begin->Timestamp('2011/1/1')
A:pandas.tests.indexes.datetimes.test_date_range.closed->date_range(begin, end, closed=None, freq=freq, tz='US/Eastern')
A:pandas.tests.indexes.datetimes.test_date_range.left->date_range(begin, end, closed='left', freq=freq, tz='US/Eastern')
A:pandas.tests.indexes.datetimes.test_date_range.right->date_range(begin, end, closed='right', freq=freq, tz='US/Eastern')
A:pandas.tests.indexes.datetimes.test_date_range.begintz->Timestamp('2011/1/1', tz='US/Eastern')
A:pandas.tests.indexes.datetimes.test_date_range.endtz->Timestamp('2014/1/1', tz='US/Eastern')
A:pandas.tests.indexes.datetimes.test_date_range.right_boundary->date_range('2015-09-12', '2015-12-01', freq='QS-MAR', closed=closed)
A:pandas.tests.indexes.datetimes.test_date_range.left_boundary->date_range('2015-09-01', '2015-09-12', freq='QS-MAR', closed=closed)
A:pandas.tests.indexes.datetimes.test_date_range.both_boundary->date_range('2015-09-01', '2015-12-01', freq='QS-MAR', closed=closed)
A:pandas.tests.indexes.datetimes.test_date_range.result_1->date_range('2005-01-12 10:00', '2005-01-12 16:00', freq='345min')
A:pandas.tests.indexes.datetimes.test_date_range.result_2->date_range('2005-01-13 10:00', '2005-01-13 16:00', freq='345min')
A:pandas.tests.indexes.datetimes.test_date_range.expected_1->DatetimeIndex(['2005-01-12 10:00:00', '2005-01-12 15:45:00'], dtype='datetime64[ns]', freq='345T', tz=None)
A:pandas.tests.indexes.datetimes.test_date_range.expected_2->DatetimeIndex(['2005-01-13 10:00:00', '2005-01-13 15:45:00'], dtype='datetime64[ns]', freq='345T', tz=None)
A:pandas.tests.indexes.datetimes.test_date_range.rng1->bdate_range('12/5/2011', '12/5/2011', freq='C')
A:pandas.tests.indexes.datetimes.test_date_range.rng2->bdate_range('12/2/2011', '12/5/2011', freq='C')
A:pandas.tests.indexes.datetimes.test_date_range.result1->pandas.date_range(start='2015-04-15 00:00:03', end='2016-04-22 00:00:00', freq='Q')
A:pandas.tests.indexes.datetimes.test_date_range.result2->pandas.date_range(start='2015-04-15 00:00:03', end='2015-06-22 00:00:04', freq='W')
A:pandas.tests.indexes.datetimes.test_date_range.expected1->DatetimeIndex(expected1_list, dtype='datetime64[ns]', freq='Q-DEC', tz=None)
A:pandas.tests.indexes.datetimes.test_date_range.naive->bdate_range(START, END, freq=BDay(), tz=None)
A:pandas.tests.indexes.datetimes.test_date_range.aware->bdate_range(START, END, freq=BDay(), tz='Asia/Hong_Kong')
A:pandas.tests.indexes.datetimes.test_date_range.rng2._data.freq->CDay()
A:pandas.tests.indexes.datetimes.test_date_range.freq->pandas.offsets.CustomBusinessHour(start='15:00', holidays=['2020-11-26'])
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_bday_near_overflow(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_bday_overflow_error(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_bdays_and_open_boundaries(self,closed)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_constructor(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_date_parse_failure(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_daterange_bug_456(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_misc(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_naive_aware_conflicts(self)
pandas.tests.indexes.datetimes.test_date_range.TestCustomDateRange
pandas.tests.indexes.datetimes.test_date_range.TestCustomDateRange.test_all_custom_freq(self,freq)
pandas.tests.indexes.datetimes.test_date_range.TestCustomDateRange.test_cdaterange(self)
pandas.tests.indexes.datetimes.test_date_range.TestCustomDateRange.test_cdaterange_holidays(self)
pandas.tests.indexes.datetimes.test_date_range.TestCustomDateRange.test_cdaterange_weekmask(self)
pandas.tests.indexes.datetimes.test_date_range.TestCustomDateRange.test_cdaterange_weekmask_and_holidays(self)
pandas.tests.indexes.datetimes.test_date_range.TestCustomDateRange.test_constructor(self)
pandas.tests.indexes.datetimes.test_date_range.TestCustomDateRange.test_daterange_bug_456(self)
pandas.tests.indexes.datetimes.test_date_range.TestCustomDateRange.test_misc(self)
pandas.tests.indexes.datetimes.test_date_range.TestCustomDateRange.test_range_with_millisecond_resolution(self,start_end)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_begin_year_alias(self,freq)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_business_end_year_alias(self,freq)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_cached_range_bug(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_catch_infinite_loop(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_compat_replace(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_construct_over_dst(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_construct_with_different_start_end_string_format(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_date_range_ambiguous_arguments(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_date_range_bms_bug(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_date_range_businesshour(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_date_range_convenience_periods(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_date_range_fy5252(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_date_range_gen_error(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_date_range_int64_overflow_non_recoverable(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_date_range_int64_overflow_stride_endpoint_different_signs(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_date_range_linspacing_tz(self,start,end,result_tz)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_date_range_multiplication_overflow(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_date_range_nat(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_date_range_negative_freq(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_date_range_normalize(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_date_range_out_of_bounds(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_date_range_unsigned_overflow_handling(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_end_year_alias(self,freq)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_error_with_zero_monthends(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_freq_divides_end_in_nanos(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_negative_non_tick_frequency_descending_dates(self,tz_aware_fixture)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_range_bug(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_range_closed(self,freq)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_range_closed_boundary(self,closed)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_range_closed_with_tz_aware_start_end(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_range_misspecified(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_range_tz_dateutil(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_range_tz_dst_straddle_pytz(self,start,end)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_range_tz_pytz(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_timezone_comparaison_assert(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_timezone_comparaison_bug(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_wom_len(self,periods)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_years_only(self)
pandas.tests.indexes.datetimes.test_date_range.TestGenRangeGeneration
pandas.tests.indexes.datetimes.test_date_range.TestGenRangeGeneration.test_1(self)
pandas.tests.indexes.datetimes.test_date_range.TestGenRangeGeneration.test_2(self)
pandas.tests.indexes.datetimes.test_date_range.TestGenRangeGeneration.test_3(self)
pandas.tests.indexes.datetimes.test_date_range.TestGenRangeGeneration.test_generate(self)
pandas.tests.indexes.datetimes.test_date_range.TestGenRangeGeneration.test_generate_cday(self)
pandas.tests.indexes.datetimes.test_date_range.TestGenRangeGeneration.test_mismatching_tz_raises_err(self,start,end)
pandas.tests.indexes.datetimes.test_date_range.TestGenRangeGeneration.test_precision_finer_than_offset(self)
pandas.tests.indexes.datetimes.test_date_range.TestTimestampEquivDateRange
pandas.tests.indexes.datetimes.test_date_range.TestTimestampEquivDateRange.test_date_range_timestamp_equiv(self)
pandas.tests.indexes.datetimes.test_date_range.TestTimestampEquivDateRange.test_date_range_timestamp_equiv_dateutil(self)
pandas.tests.indexes.datetimes.test_date_range.TestTimestampEquivDateRange.test_date_range_timestamp_equiv_explicit_dateutil(self)
pandas.tests.indexes.datetimes.test_date_range.TestTimestampEquivDateRange.test_date_range_timestamp_equiv_explicit_pytz(self)
pandas.tests.indexes.datetimes.test_date_range.TestTimestampEquivDateRange.test_date_range_timestamp_equiv_from_datetime_instance(self)
pandas.tests.indexes.datetimes.test_date_range.TestTimestampEquivDateRange.test_date_range_timestamp_equiv_preserve_frequency(self)
pandas.tests.indexes.datetimes.test_date_range.test_date_range_with_custom_holidays()
pandas.tests.indexes.dts.test_date_range.TestBusinessDateRange
pandas.tests.indexes.dts.test_date_range.TestBusinessDateRange.test_bday_near_overflow(self)
pandas.tests.indexes.dts.test_date_range.TestBusinessDateRange.test_bday_overflow_error(self)
pandas.tests.indexes.dts.test_date_range.TestBusinessDateRange.test_bdays_and_open_boundaries(self,closed)
pandas.tests.indexes.dts.test_date_range.TestBusinessDateRange.test_constructor(self)
pandas.tests.indexes.dts.test_date_range.TestBusinessDateRange.test_date_parse_failure(self)
pandas.tests.indexes.dts.test_date_range.TestBusinessDateRange.test_daterange_bug_456(self)
pandas.tests.indexes.dts.test_date_range.TestBusinessDateRange.test_misc(self)
pandas.tests.indexes.dts.test_date_range.TestBusinessDateRange.test_naive_aware_conflicts(self)
pandas.tests.indexes.dts.test_date_range.TestCustomDateRange
pandas.tests.indexes.dts.test_date_range.TestCustomDateRange.test_all_custom_freq(self,freq)
pandas.tests.indexes.dts.test_date_range.TestCustomDateRange.test_cdaterange(self)
pandas.tests.indexes.dts.test_date_range.TestCustomDateRange.test_cdaterange_holidays(self)
pandas.tests.indexes.dts.test_date_range.TestCustomDateRange.test_cdaterange_weekmask(self)
pandas.tests.indexes.dts.test_date_range.TestCustomDateRange.test_cdaterange_weekmask_and_holidays(self)
pandas.tests.indexes.dts.test_date_range.TestCustomDateRange.test_constructor(self)
pandas.tests.indexes.dts.test_date_range.TestCustomDateRange.test_daterange_bug_456(self)
pandas.tests.indexes.dts.test_date_range.TestCustomDateRange.test_misc(self)
pandas.tests.indexes.dts.test_date_range.TestCustomDateRange.test_range_with_millisecond_resolution(self,start_end)
pandas.tests.indexes.dts.test_date_range.TestDateRanges
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_begin_year_alias(self,freq)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_business_end_year_alias(self,freq)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_cached_range_bug(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_catch_infinite_loop(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_compat_replace(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_construct_over_dst(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_construct_with_different_start_end_string_format(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_date_range_ambiguous_arguments(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_date_range_bms_bug(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_date_range_businesshour(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_date_range_convenience_periods(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_date_range_fy5252(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_date_range_gen_error(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_date_range_int64_overflow_non_recoverable(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_date_range_int64_overflow_stride_endpoint_different_signs(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_date_range_linspacing_tz(self,start,end,result_tz)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_date_range_multiplication_overflow(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_date_range_nat(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_date_range_negative_freq(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_date_range_normalize(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_date_range_out_of_bounds(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_date_range_unsigned_overflow_handling(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_end_year_alias(self,freq)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_error_with_zero_monthends(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_freq_divides_end_in_nanos(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_negative_non_tick_frequency_descending_dates(self,tz_aware_fixture)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_range_bug(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_range_closed(self,freq)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_range_closed_boundary(self,closed)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_range_closed_with_tz_aware_start_end(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_range_misspecified(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_range_tz_dateutil(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_range_tz_dst_straddle_pytz(self,start,end)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_range_tz_pytz(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_timezone_comparaison_assert(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_timezone_comparaison_bug(self)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_wom_len(self,periods)
pandas.tests.indexes.dts.test_date_range.TestDateRanges.test_years_only(self)
pandas.tests.indexes.dts.test_date_range.TestGenRangeGeneration
pandas.tests.indexes.dts.test_date_range.TestGenRangeGeneration.test_1(self)
pandas.tests.indexes.dts.test_date_range.TestGenRangeGeneration.test_2(self)
pandas.tests.indexes.dts.test_date_range.TestGenRangeGeneration.test_3(self)
pandas.tests.indexes.dts.test_date_range.TestGenRangeGeneration.test_generate(self)
pandas.tests.indexes.dts.test_date_range.TestGenRangeGeneration.test_generate_cday(self)
pandas.tests.indexes.dts.test_date_range.TestGenRangeGeneration.test_mismatching_tz_raises_err(self,start,end)
pandas.tests.indexes.dts.test_date_range.TestGenRangeGeneration.test_precision_finer_than_offset(self)
pandas.tests.indexes.dts.test_date_range.TestTimestampEquivDateRange
pandas.tests.indexes.dts.test_date_range.TestTimestampEquivDateRange.test_date_range_timestamp_equiv(self)
pandas.tests.indexes.dts.test_date_range.TestTimestampEquivDateRange.test_date_range_timestamp_equiv_dateutil(self)
pandas.tests.indexes.dts.test_date_range.TestTimestampEquivDateRange.test_date_range_timestamp_equiv_explicit_dateutil(self)
pandas.tests.indexes.dts.test_date_range.TestTimestampEquivDateRange.test_date_range_timestamp_equiv_explicit_pytz(self)
pandas.tests.indexes.dts.test_date_range.TestTimestampEquivDateRange.test_date_range_timestamp_equiv_from_dt_instance(self)
pandas.tests.indexes.dts.test_date_range.TestTimestampEquivDateRange.test_date_range_timestamp_equiv_preserve_frequency(self)
pandas.tests.indexes.dts.test_date_range.test_date_range_with_custom_holidays()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/datetimes/test_timezones.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_timezones.self.__offset->timedelta(minutes=offset)
A:pandas.tests.indexes.datetimes.test_timezones.fixed_off->FixedOffset(-420, '-07:00')
A:pandas.tests.indexes.datetimes.test_timezones.fixed_off_no_name->FixedOffset(-330, None)
A:pandas.tests.indexes.datetimes.test_timezones.idx->Index([start, end])
A:pandas.tests.indexes.datetimes.test_timezones.conv->date_range('3/11/2012 04:00', periods=10, freq='H', tz=tzstr).tz_localize('US/Pacific')
A:pandas.tests.indexes.datetimes.test_timezones.tt->DatetimeIndex(ts)
A:pandas.tests.indexes.datetimes.test_timezones.ut->DatetimeIndex(ts).tz_convert('US/Eastern')
A:pandas.tests.indexes.datetimes.test_timezones.expected->date_range('1/1/2000', periods=10, tz=tz)
A:pandas.tests.indexes.datetimes.test_timezones.idx1->to_datetime(arr).tz_localize(tzstr)
A:pandas.tests.indexes.datetimes.test_timezones.exp1->date_range(start='2014-01-01', end='2014-12-31', freq='M')
A:pandas.tests.indexes.datetimes.test_timezones.idx2->pandas.date_range(start='2005-11-10 08:00:00', freq='H', periods=2, tz=tzstr)
A:pandas.tests.indexes.datetimes.test_timezones.exp2->date_range(start='2014-01-01', end='2014-12-31', freq='D')
A:pandas.tests.indexes.datetimes.test_timezones.idx3->DatetimeIndex(arr, tz=tzstr)
A:pandas.tests.indexes.datetimes.test_timezones.exp3->date_range(start='2014-01-01', end='2014-03-01', freq='H')
A:pandas.tests.indexes.datetimes.test_timezones.idx4->DatetimeIndex(np.array(arr), tz=tzstr)
A:pandas.tests.indexes.datetimes.test_timezones.exp4->date_range(start='2014-08-01', end='2014-10-31', freq='T')
A:pandas.tests.indexes.datetimes.test_timezones.converted->to_datetime(dates_aware, utc=True)
A:pandas.tests.indexes.datetimes.test_timezones.reset->dr.tz_localize(pytz.utc).tz_localize(None)
A:pandas.tests.indexes.datetimes.test_timezones.dti->DatetimeIndex(dates)
A:pandas.tests.indexes.datetimes.test_timezones.dti2->DatetimeIndex(dates).tz_localize(None)
A:pandas.tests.indexes.datetimes.test_timezones.rng->date_range('3/11/2012 04:00', periods=10, freq='H', tz=tzstr)
A:pandas.tests.indexes.datetimes.test_timezones.rng_eastern->date_range('3/11/2012 04:00', periods=10, freq='H', tz=tzstr).tz_convert(tzstr)
A:pandas.tests.indexes.datetimes.test_timezones.dr->date_range('2012-11-02', periods=10, tz=tzstr)
A:pandas.tests.indexes.datetimes.test_timezones.index->DatetimeIndex(['2018-02-08 15:00:00.168456358', '2018-02-08 15:00:00.168456359'], tz=tz)
A:pandas.tests.indexes.datetimes.test_timezones.result->to_datetime(dates)
A:pandas.tests.indexes.datetimes.test_timezones.di->DatetimeIndex(times)
A:pandas.tests.indexes.datetimes.test_timezones.localized->date_range('2012-11-02', periods=10, tz=tzstr).tz_localize(pytz.utc)
A:pandas.tests.indexes.datetimes.test_timezones.localized_infer->date_range('2012-11-02', periods=10, tz=tzstr).tz_localize(tz, ambiguous='infer')
A:pandas.tests.indexes.datetimes.test_timezones.fromdates->DatetimeIndex(strdates, tz=tzstr)
A:pandas.tests.indexes.datetimes.test_timezones.dti_utc->pandas.date_range(start='1/1/2005 05:00', end='1/1/2005 5:00:30.256', freq='L', tz='utc')
A:pandas.tests.indexes.datetimes.test_timezones.dti3->DatetimeIndex(dates).tz_localize(None).tz_convert(prefix + 'US/Pacific')
A:pandas.tests.indexes.datetimes.test_timezones.exp->Timestamp('3/11/2012 01:00', tz='US/Eastern')
A:pandas.tests.indexes.datetimes.test_timezones.offset->int(offset.total_seconds() * 1000000000)
A:pandas.tests.indexes.datetimes.test_timezones.di_test->DatetimeIndex(times, tz='US/Eastern')
A:pandas.tests.indexes.datetimes.test_timezones.is_dst->numpy.array([1] * 10)
A:pandas.tests.indexes.datetimes.test_timezones.localized_is_dst->date_range('2012-11-02', periods=10, tz=tzstr).tz_localize(tz, ambiguous=is_dst)
A:pandas.tests.indexes.datetimes.test_timezones.times->date_range('2019-03-10 00:00', '2019-03-10 02:00', freq='H', tz=tz, nonexistent=option)
A:pandas.tests.indexes.datetimes.test_timezones.dr_utc->pandas.bdate_range('1/1/2009', '1/1/2010', tz=pytz.utc)
A:pandas.tests.indexes.datetimes.test_timezones.off->FixedOffset(420, '+07:00')
A:pandas.tests.indexes.datetimes.test_timezones.start->datetime(2012, 3, 11, 5, 0, 0, tzinfo=off)
A:pandas.tests.indexes.datetimes.test_timezones.end->datetime(2012, 6, 11, 5, 0, 0, tzinfo=off)
A:pandas.tests.indexes.datetimes.test_timezones.rng2->pandas.DatetimeIndex(['2012-01-01', '2012-01-02'], tz='Asia/Tokyo')
A:pandas.tests.indexes.datetimes.test_timezones.rng3->rng3.tz_localize('US/Eastern').tz_localize('US/Eastern')
A:pandas.tests.indexes.datetimes.test_timezones.dr2->DatetimeIndex(list(dr), name='foo')
A:pandas.tests.indexes.datetimes.test_timezones.left->date_range('1/1/2011', periods=100, freq='H', tz='utc')
A:pandas.tests.indexes.datetimes.test_timezones.right->date_range('1/1/2011', periods=100, freq='H', tz='US/Eastern')
A:pandas.tests.indexes.datetimes.test_timezones.tz->pandas._libs.tslibs.timezones.maybe_get_tz(tzstr)
A:pandas.tests.indexes.datetimes.test_timezones.ind->ind.drop(ind[-1]).drop(ind[-1])
A:pandas.tests.indexes.datetimes.test_timezones.t3->DatetimeIndex(['2019-01-01 10:00'], freq='H')
A:pandas.tests.indexes.datetimes.test_timezones.t4->DatetimeIndex(['2019-01-02 12:00'], tz='UTC', freq='T')
A:pandas.tests.indexes.datetimes.test_timezones.utc_range->date_range('1/1/2000', periods=20, tz='UTC')
A:pandas.tests.indexes.datetimes.test_timezones.eastern_range->date_range('1/1/2000', periods=20, tz='UTC').tz_convert('US/Eastern')
A:pandas.tests.indexes.datetimes.test_timezones.berlin_range->date_range('1/1/2000', periods=20, tz='UTC').tz_convert('Europe/Berlin')
A:pandas.tests.indexes.datetimes.test_timezones.objs->date_range('3/11/2012 04:00', periods=10, freq='H', tz=tzstr).astype(object)
A:pandas.tests.indexes.datetimes.test_timezones.rng_repr->repr(rng_eastern)
A:pandas.tests.indexes.datetimes.test_timezones.dt->dt.replace(tzinfo=tzlocal()).replace(tzinfo=tzlocal())
A:pandas.tests.indexes.datetimes.test_timezones.arr->numpy.array([dateutil.parser.parse('2012-06-13T01:39:00Z')], dtype=object)
A:pandas.tests.indexes.datetimes.test_timezones.dates->numpy.array([datetime(2000, 1, 1, tzinfo=fixed_off), datetime(2000, 1, 2, tzinfo=fixed_off), datetime(2000, 1, 3, tzinfo=fixed_off)])
A:pandas.tests.indexes.datetimes.test_timezones.central->date_range('2012-11-02', periods=10, tz=tzstr).tz_convert(tz)
A:pandas.tests.indexes.datetimes.test_timezones.naive->dr[0].to_pydatetime().replace(tzinfo=None)
A:pandas.tests.indexes.datetimes.test_timezones.ex_vals->numpy.array([Timestamp(x).value for x in dates_aware])
A:pandas.tests.indexes.datetimes.test_timezones.stamp->Timestamp('3/11/2012 05:00', tz=tzstr)
pandas.tests.indexes.datetimes.test_timezones.FixedOffset(self,offset,name)
pandas.tests.indexes.datetimes.test_timezones.FixedOffset.__init__(self,offset,name)
pandas.tests.indexes.datetimes.test_timezones.FixedOffset.dst(self,dt)
pandas.tests.indexes.datetimes.test_timezones.FixedOffset.tzname(self,dt)
pandas.tests.indexes.datetimes.test_timezones.FixedOffset.utcoffset(self,dt)
pandas.tests.indexes.datetimes.test_timezones.TestDateRange
pandas.tests.indexes.datetimes.test_timezones.TestDateRange.test_date_range_span_dst_transition(self,tzstr)
pandas.tests.indexes.datetimes.test_timezones.TestDateRange.test_date_range_timezone_str_argument(self,tzstr)
pandas.tests.indexes.datetimes.test_timezones.TestDateRange.test_date_range_with_fixedoffset_noname(self)
pandas.tests.indexes.datetimes.test_timezones.TestDateRange.test_date_range_with_tz(self,tzstr)
pandas.tests.indexes.datetimes.test_timezones.TestDateRange.test_hongkong_tz_convert(self)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_date_accessor(self,dtype)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_date_range_localize(self)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_drop_dst_boundary(self)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_astype_asobject_tzinfos(self,tzstr)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_construction_ambiguous_endpoint(self,tz)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_construction_nonexistent_endpoint(self,tz,option,expected)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_construction_univalent(self)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_constructor_static_tzinfo(self,prefix)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_constructor_with_fixed_tz(self)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_convert_datetime_list(self,tzstr)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_convert_tz_aware_datetime_datetime(self,tz)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_drop_dont_lose_tz(self)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_equals_with_tz(self)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_from_tzaware_datetime(self,tz)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_intersection(self)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_take_dont_lose_meta(self,tzstr)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_to_pydatetime(self)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_to_pydatetime_fizedtz(self)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_constructors(self,tzstr)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_conversion_freq(self,tz_naive_fixture)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_convert_compat_timestamp(self,prefix)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_convert_dst(self)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_convert_hour_overflow_dst(self)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_convert_hour_overflow_dst_timestamps(self,tz)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_convert_trans_pos_plus_1__bug(self,freq,n)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_convert_tzlocal(self)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_convert_utc_to_local_no_modify(self,tz)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize(self,prefix)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_ambiguous_flags(self,tz)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_ambiguous_infer(self,tz)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_ambiguous_nat(self,tz)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_ambiguous_times(self,tz)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_bdate_range(self)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_naive(self)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_nonexistent(self,tz,method,exp)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_nonexistent_raise_coerce(self)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_nonexistent_shift(self,start_ts,tz,end_ts,shift,tz_type)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_nonexistent_shift_invalid(self,offset,tz_type)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_pass_dates_to_utc(self,tzstr)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_roundtrip(self,tz_aware_fixture)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_tzlocal(self)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_utc_conversion(self,tz)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_nat(self,tzstr)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_union_aware(self)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_union_mixed(self)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_dti_with_timezone_repr(self,tzstr)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_field_access_localize(self,prefix)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_iteration_preserves_nanoseconds(self,tz)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_join_utc_convert(self,join_type)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_normalize_tz(self)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_normalize_tz_local(self,timezone)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_time_accessor(self,dtype)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_timestamp_equality_different_timezones(self)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_timetz_accessor(self,tz_naive_fixture)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_tz_convert_nat(self)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_tz_convert_roundtrip(self,tz_aware_fixture)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_tz_convert_unsorted(self,tzstr)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_utc_box_timestamp_and_localize(self,tzstr)
pandas.tests.indexes.datetimes.test_timezones.TestDatetimeIndexTimezones.test_with_tz(self,tz)
pandas.tests.indexes.datetimes.test_timezones.TestToDatetime
pandas.tests.indexes.datetimes.test_timezones.TestToDatetime.test_to_datetime_fixed_offset(self)
pandas.tests.indexes.datetimes.test_timezones.TestToDatetime.test_to_datetime_utc(self)
pandas.tests.indexes.dts.test_timezones.FixedOffset(self,offset,name)
pandas.tests.indexes.dts.test_timezones.FixedOffset.dst(self,dt)
pandas.tests.indexes.dts.test_timezones.FixedOffset.tzname(self,dt)
pandas.tests.indexes.dts.test_timezones.FixedOffset.utcoffset(self,dt)
pandas.tests.indexes.dts.test_timezones.TestDateRange
pandas.tests.indexes.dts.test_timezones.TestDateRange.test_date_range_span_dst_transition(self,tzstr)
pandas.tests.indexes.dts.test_timezones.TestDateRange.test_date_range_timezone_str_argument(self,tzstr)
pandas.tests.indexes.dts.test_timezones.TestDateRange.test_date_range_with_fixedoffset_noname(self)
pandas.tests.indexes.dts.test_timezones.TestDateRange.test_date_range_with_tz(self,tzstr)
pandas.tests.indexes.dts.test_timezones.TestDateRange.test_hongkong_tz_convert(self)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_date_accessor(self,dtype)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_date_range_localize(self)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_drop_dst_boundary(self)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_astype_asobject_tzinfos(self,tzstr)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_construction_ambiguous_endpoint(self,tz)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_construction_nonexistent_endpoint(self,tz,option,expected)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_construction_univalent(self)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_constructor_static_tzinfo(self,prefix)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_constructor_with_fixed_tz(self)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_convert_dt_list(self,tzstr)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_convert_tz_aware_dt_dt(self,tz)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_drop_dont_lose_tz(self)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_equals_with_tz(self)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_from_tzaware_dt(self,tz)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_intersection(self)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_take_dont_lose_meta(self,tzstr)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_to_pydt(self)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_to_pydt_fizedtz(self)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_constructors(self,tzstr)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_conversion_freq(self,tz_naive_fixture)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_convert_compat_timestamp(self,prefix)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_convert_dst(self)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_convert_hour_overflow_dst(self)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_convert_hour_overflow_dst_timestamps(self,tz)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_convert_trans_pos_plus_1__bug(self,freq,n)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_convert_tzlocal(self)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_convert_utc_to_local_no_modify(self,tz)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize(self,prefix)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_ambiguous_flags(self,tz)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_ambiguous_infer(self,tz)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_ambiguous_nat(self,tz)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_ambiguous_times(self,tz)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_bdate_range(self)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_naive(self)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_nonexistent(self,tz,method,exp)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_nonexistent_raise_coerce(self)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_nonexistent_shift(self,start_ts,tz,end_ts,shift,tz_type)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_nonexistent_shift_invalid(self,offset,tz_type)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_pass_dates_to_utc(self,tzstr)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_roundtrip(self,tz_aware_fixture)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_tzlocal(self)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_localize_utc_conversion(self,tz)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_tz_nat(self,tzstr)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_union_aware(self)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_union_mixed(self)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_dti_with_timezone_repr(self,tzstr)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_field_access_localize(self,prefix)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_iteration_preserves_nanoseconds(self,tz)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_join_utc_convert(self,join_type)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_normalize_tz(self)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_normalize_tz_local(self,timezone)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_time_accessor(self,dtype)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_timestamp_equality_different_timezones(self)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_timetz_accessor(self,tz_naive_fixture)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_tz_convert_nat(self)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_tz_convert_roundtrip(self,tz_aware_fixture)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_tz_convert_unsorted(self,tzstr)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_utc_box_timestamp_and_localize(self,tzstr)
pandas.tests.indexes.dts.test_timezones.TestDatetimeIndexTimezones.test_with_tz(self,tz)
pandas.tests.indexes.dts.test_timezones.TestToDatetime
pandas.tests.indexes.dts.test_timezones.TestToDatetime.test_to_dt_fixed_offset(self)
pandas.tests.indexes.dts.test_timezones.TestToDatetime.test_to_dt_utc(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/datetimes/test_join.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_join.df->pandas._testing.makeCustomDataframe(10, 10, data_gen_f=lambda *args: np.random.randint(2), c_idx_type='p', r_idx_type='dt')
A:pandas.tests.indexes.datetimes.test_join.cols->pandas._testing.makeCustomDataframe(10, 10, data_gen_f=lambda *args: np.random.randint(2), c_idx_type='p', r_idx_type='dt').columns.join(df.index, how='outer')
A:pandas.tests.indexes.datetimes.test_join.joined->date_range('1/1/2000', periods=10).join(index, how=join_type)
A:pandas.tests.indexes.datetimes.test_join.index->date_range('1/1/2000', periods=10)
A:pandas.tests.indexes.datetimes.test_join.expected->date_range('2016-01-01', periods=10, tz=tz).delete(5)
A:pandas.tests.indexes.datetimes.test_join.result->dti[:5].join(dti[6:], how='outer')
A:pandas.tests.indexes.datetimes.test_join.rng->date_range(start=start, end=end, freq=freq)
A:pandas.tests.indexes.datetimes.test_join.idx->Index(['a', 'b', 'c', 'd'])
A:pandas.tests.indexes.datetimes.test_join.left->date_range(start=start, end=end, freq=freq).tz_convert('US/Eastern')
A:pandas.tests.indexes.datetimes.test_join.right->date_range(start=start, end=end, freq=freq).tz_convert('Europe/Berlin')
A:pandas.tests.indexes.datetimes.test_join.dti->date_range('2016-01-01', periods=10, tz=tz)
A:pandas.tests.indexes.datetimes.test_join.empty->Index([])
A:pandas.tests.indexes.datetimes.test_join.idx1->to_datetime(['2012-11-06 16:00:11.477563', '2012-11-06 16:00:11.477563'])
A:pandas.tests.indexes.datetimes.test_join.idx2->to_datetime(['2012-11-06 15:11:09.006507', '2012-11-06 15:11:09.006507'])
A:pandas.tests.indexes.datetimes.test_join.rs->to_datetime(['2012-11-06 16:00:11.477563', '2012-11-06 16:00:11.477563']).join(idx2, how='outer')
A:pandas.tests.indexes.datetimes.test_join.the_join->date_range(start=start, end=end, freq=freq).join(other, how='outer')
A:pandas.tests.indexes.datetimes.test_join.other->date_range(start, end, freq=BMonthEnd())
A:pandas.tests.indexes.datetimes.test_join.naive->date_range(start, end, freq=BDay(), tz=None)
A:pandas.tests.indexes.datetimes.test_join.aware->date_range(start, end, freq=BDay(), tz='Asia/Hong_Kong')
pandas.tests.indexes.datetimes.test_join.TestJoin
pandas.tests.indexes.datetimes.test_join.TestJoin.test_datetimeindex_union_join_empty(self,sort)
pandas.tests.indexes.datetimes.test_join.TestJoin.test_does_not_convert_mixed_integer(self)
pandas.tests.indexes.datetimes.test_join.TestJoin.test_join_nonunique(self)
pandas.tests.indexes.datetimes.test_join.TestJoin.test_join_object_index(self)
pandas.tests.indexes.datetimes.test_join.TestJoin.test_join_preserves_freq(self,tz)
pandas.tests.indexes.datetimes.test_join.TestJoin.test_join_self(self,join_type)
pandas.tests.indexes.datetimes.test_join.TestJoin.test_join_utc_convert(self,join_type)
pandas.tests.indexes.datetimes.test_join.TestJoin.test_join_with_period_index(self,join_type)
pandas.tests.indexes.datetimes.test_join.TestJoin.test_naive_aware_conflicts(self)
pandas.tests.indexes.datetimes.test_join.TestJoin.test_outer_join(self,freq)
pandas.tests.indexes.dts.test_join.TestJoin
pandas.tests.indexes.dts.test_join.TestJoin.test_does_not_convert_mixed_integer(self)
pandas.tests.indexes.dts.test_join.TestJoin.test_dtindex_union_join_empty(self,sort)
pandas.tests.indexes.dts.test_join.TestJoin.test_join_nonunique(self)
pandas.tests.indexes.dts.test_join.TestJoin.test_join_object_index(self)
pandas.tests.indexes.dts.test_join.TestJoin.test_join_preserves_freq(self,tz)
pandas.tests.indexes.dts.test_join.TestJoin.test_join_self(self,join_type)
pandas.tests.indexes.dts.test_join.TestJoin.test_join_utc_convert(self,join_type)
pandas.tests.indexes.dts.test_join.TestJoin.test_join_with_period_index(self,join_type)
pandas.tests.indexes.dts.test_join.TestJoin.test_naive_aware_conflicts(self)
pandas.tests.indexes.dts.test_join.TestJoin.test_outer_join(self,freq)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/datetimes/test_tools.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_tools.result->pandas.to_datetime(klass([nulls_fixture]))
A:pandas.tests.indexes.datetimes.test_tools.s->pandas.Series(['2014-1-1', '2014-2-2', '2015-3-3'])
A:pandas.tests.indexes.datetimes.test_tools.expected->pandas.Series([np.datetime64('1970-01-01 00:00:00.000000001'), np.datetime64('1970-01-01 00:00:00.000000002'), np.datetime64('NaT'), np.datetime64('2043-01-25 23:56:49.213693952'), np.datetime64('NaT')])
A:pandas.tests.indexes.datetimes.test_tools.(lang, _)->locale.getlocale()
A:pandas.tests.indexes.datetimes.test_tools.val->'01-{}-2011 00:00:01.978'.format(month_abbr)
A:pandas.tests.indexes.datetimes.test_tools.exp->DatetimeIndex([pd.Timestamp(expected)])
A:pandas.tests.indexes.datetimes.test_tools.arg->pandas.Index(['2010-01-01 12:00:00 Z'], name='foo')
A:pandas.tests.indexes.datetimes.test_tools.dti->date_range('2015-04-05', periods=3).rename('foo')
A:pandas.tests.indexes.datetimes.test_tools.arr->numpy.array(['2262-04-11 23:47:16.854775808'], dtype=object)
A:pandas.tests.indexes.datetimes.test_tools.actual->pandas.to_datetime('20080115')
A:pandas.tests.indexes.datetimes.test_tools.npnow->numpy.datetime64('now').astype('datetime64[ns]')
A:pandas.tests.indexes.datetimes.test_tools.pdnow->pandas.to_datetime('now')
A:pandas.tests.indexes.datetimes.test_tools.nptoday->numpy.datetime64('today').astype('datetime64[ns]').astype(np.int64)
A:pandas.tests.indexes.datetimes.test_tools.pdtoday->pandas.to_datetime('today')
A:pandas.tests.indexes.datetimes.test_tools.tstoday->pandas.Timestamp('today')
A:pandas.tests.indexes.datetimes.test_tools.tstoday2->pandas.Timestamp.today()
A:pandas.tests.indexes.datetimes.test_tools.msg->'Out of bounds nanosecond timestamp: {}'.format(dt)
A:pandas.tests.indexes.datetimes.test_tools.us_eastern->pytz.timezone('US/Eastern')
A:pandas.tests.indexes.datetimes.test_tools.data->pandas.Series(test_dates)
A:pandas.tests.indexes.datetimes.test_tools.tz1->psycopg2.tz.FixedOffsetTimezone(offset=-300, name=None)
A:pandas.tests.indexes.datetimes.test_tools.tz2->psycopg2.tz.FixedOffsetTimezone(offset=-240, name=None)
A:pandas.tests.indexes.datetimes.test_tools.i->pandas.DatetimeIndex(['2000-01-01 08:00:00'], tz=psycopg2.tz.FixedOffsetTimezone(offset=-300, name=None))
A:pandas.tests.indexes.datetimes.test_tools.res->pandas.to_datetime(ser, unit='ns')
A:pandas.tests.indexes.datetimes.test_tools.arr2->numpy.array(arr1).astype('int64')
A:pandas.tests.indexes.datetimes.test_tools.df->pandas.DataFrame({'year': [2015, 2016], 'month': [2, 3], 'day': [4, 5]})
A:pandas.tests.indexes.datetimes.test_tools.df2->DataFrame({'year': [2015, 2016], 'month': [2, 20], 'day': [4, 5], 'hour': [4, 5]})
A:pandas.tests.indexes.datetimes.test_tools.expected2->Series([Timestamp('20150204 00:00:00'), Timestamp('20160205 00:0:00')])
A:pandas.tests.indexes.datetimes.test_tools.df['month']->df['month'].astype('int8').astype('int8')
A:pandas.tests.indexes.datetimes.test_tools.df['day']->df['day'].astype('int8').astype('int8')
A:pandas.tests.indexes.datetimes.test_tools.rs->to_datetime('2001', cache=cache)
A:pandas.tests.indexes.datetimes.test_tools.xp->datetime(2001, 1, 1)
A:pandas.tests.indexes.datetimes.test_tools.result_coerce->to_datetime(s, errors='coerce', cache=cache)
A:pandas.tests.indexes.datetimes.test_tools.expected_coerce->Series([datetime(2006, 10, 18), datetime(2008, 10, 18), NaT])
A:pandas.tests.indexes.datetimes.test_tools.result_ignore->to_datetime(s, errors='ignore', cache=cache)
A:pandas.tests.indexes.datetimes.test_tools.td->pandas.Series(['May 04', 'Jun 02', ''], index=[1, 2, 3])
A:pandas.tests.indexes.datetimes.test_tools.scalar->numpy.int64(1337904000000000).view('M8[us]')
A:pandas.tests.indexes.datetimes.test_tools.as_obj->numpy.int64(1337904000000000).view('M8[us]').astype('O')
A:pandas.tests.indexes.datetimes.test_tools.index->DatetimeIndex([scalar])
A:pandas.tests.indexes.datetimes.test_tools.value->Timestamp(scalar)
A:pandas.tests.indexes.datetimes.test_tools.rng->DatetimeIndex(rng.values)
A:pandas.tests.indexes.datetimes.test_tools.ints->list(rng.asi8)
A:pandas.tests.indexes.datetimes.test_tools.strings->numpy.array(['1/1/2000', '1/2/2000', np.nan, '1/4/2000, 12:34:56'], dtype=object)
A:pandas.tests.indexes.datetimes.test_tools.expected[i]->to_datetime(x, cache=cache)
A:pandas.tests.indexes.datetimes.test_tools.result2->to_datetime(date_str)
A:pandas.tests.indexes.datetimes.test_tools.malformed->numpy.array(['1/100/2000', np.nan], dtype=object)
A:pandas.tests.indexes.datetimes.test_tools.series->Series(['1/1/2000', np.nan, '1/3/2000', np.nan, '1/5/2000'], index=idx, name='foo')
A:pandas.tests.indexes.datetimes.test_tools.dseries->Series([to_datetime('1/1/2000', cache=cache), np.nan, to_datetime('1/3/2000', cache=cache), np.nan, to_datetime('1/5/2000', cache=cache)], index=idx, name='foo')
A:pandas.tests.indexes.datetimes.test_tools.dresult->to_datetime(dseries, cache=cache)
A:pandas.tests.indexes.datetimes.test_tools.base->base.tz_localize('UTC').tz_convert(tz).tz_localize('UTC').tz_convert(tz)
A:pandas.tests.indexes.datetimes.test_tools.values->base.tz_localize('UTC').tz_convert(tz).tz_localize('UTC').tz_convert(tz).values.astype(dtype)
A:pandas.tests.indexes.datetimes.test_tools.idx1->DatetimeIndex(arr, dayfirst=True)
A:pandas.tests.indexes.datetimes.test_tools.idx2->DatetimeIndex(np.array(arr), dayfirst=True)
A:pandas.tests.indexes.datetimes.test_tools.idx3->to_datetime(arr, dayfirst=True, cache=cache)
A:pandas.tests.indexes.datetimes.test_tools.idx4->to_datetime(np.array(arr), dayfirst=True, cache=cache)
A:pandas.tests.indexes.datetimes.test_tools.idx5->DatetimeIndex(Index(arr), dayfirst=True)
A:pandas.tests.indexes.datetimes.test_tools.idx6->DatetimeIndex(Series(arr), dayfirst=True)
A:pandas.tests.indexes.datetimes.test_tools.obj->klass(dti)
A:pandas.tests.indexes.datetimes.test_tools.dt_string->datetime(2011, 12, 30, 0, 0, 0).strftime(expected_format)
A:pandas.tests.indexes.datetimes.test_tools.format_for_string_of_nans->pandas.core.tools.datetimes._guess_datetime_format_for_array(np.array([np.nan, np.nan, np.nan], dtype='O'))
A:pandas.tests.indexes.datetimes.test_tools.s_as_dt_strings->pandas.Series(['2014-1-1', '2014-2-2', '2015-3-3']).apply(lambda x: x.strftime(test_format))
A:pandas.tests.indexes.datetimes.test_tools.with_format->pandas.to_datetime(s_as_dt_strings, format=test_format, cache=cache)
A:pandas.tests.indexes.datetimes.test_tools.no_infer->pandas.to_datetime(s_as_dt_strings, infer_datetime_format=False, cache=cache)
A:pandas.tests.indexes.datetimes.test_tools.yes_infer->pandas.to_datetime(s_as_dt_strings, infer_datetime_format=True, cache=cache)
A:pandas.tests.indexes.datetimes.test_tools.(result1, _, _)->pandas._libs.tslibs.parsing.parse_time_string(date_str)
A:pandas.tests.indexes.datetimes.test_tools.result3->to_datetime([date_str])
A:pandas.tests.indexes.datetimes.test_tools.result4->Timestamp(date_str)
A:pandas.tests.indexes.datetimes.test_tools.result6->DatetimeIndex([date_str], yearfirst=yearfirst)
A:pandas.tests.indexes.datetimes.test_tools.result8->DatetimeIndex(Index([date_str]), yearfirst=yearfirst)
A:pandas.tests.indexes.datetimes.test_tools.result9->DatetimeIndex(Series([date_str]), yearfirst=yearfirst)
A:pandas.tests.indexes.datetimes.test_tools.result5->Timestamp(date_str)
A:pandas.tests.indexes.datetimes.test_tools.result7->date_range(date_str, freq='S', periods=1, yearfirst=yearfirst)
A:pandas.tests.indexes.datetimes.test_tools.dateutil_result->parse(date_str, dayfirst=dayfirst, yearfirst=yearfirst)
A:pandas.tests.indexes.datetimes.test_tools.dt_time->to_datetime(dt_string, cache=cache)
A:pandas.tests.indexes.datetimes.test_tools.ser->ser.astype('Int64').astype('Int64')
A:pandas.tests.indexes.datetimes.test_tools.ser_copy->ser.astype('Int64').astype('Int64').copy()
pandas.tests.indexes.datetimes.test_tools.TestDatetimeParsingWrappers
pandas.tests.indexes.datetimes.test_tools.TestDatetimeParsingWrappers.test_na_values_with_cache(self,cache,unique_nulls_fixture,unique_nulls_fixture2)
pandas.tests.indexes.datetimes.test_tools.TestDatetimeParsingWrappers.test_parsers(self,date_str,expected,cache)
pandas.tests.indexes.datetimes.test_tools.TestDatetimeParsingWrappers.test_parsers_dayfirst_yearfirst(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestDatetimeParsingWrappers.test_parsers_nat(self)
pandas.tests.indexes.datetimes.test_tools.TestDatetimeParsingWrappers.test_parsers_time(self)
pandas.tests.indexes.datetimes.test_tools.TestDatetimeParsingWrappers.test_parsers_timestring(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestDatetimeParsingWrappers.test_parsers_timezone_minute_offsets_roundtrip(self,cache,dt_string,tz,dt_string_repr)
pandas.tests.indexes.datetimes.test_tools.TestDaysInMonth
pandas.tests.indexes.datetimes.test_tools.TestDaysInMonth.test_day_not_in_month_coerce(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestDaysInMonth.test_day_not_in_month_ignore(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestDaysInMonth.test_day_not_in_month_raise(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestGuessDatetimeFormat
pandas.tests.indexes.datetimes.test_tools.TestGuessDatetimeFormat.test_guess_datetime_format_for_array(self)
pandas.tests.indexes.datetimes.test_tools.TestOrigin
pandas.tests.indexes.datetimes.test_tools.TestOrigin.test_arg_tz_ns_unit(self,offset,utc,exp)
pandas.tests.indexes.datetimes.test_tools.TestOrigin.test_epoch(self,units,epochs,epoch_1960,units_from_epochs)
pandas.tests.indexes.datetimes.test_tools.TestOrigin.test_invalid_origin(self)
pandas.tests.indexes.datetimes.test_tools.TestOrigin.test_invalid_origins(self,origin,exc,units,units_from_epochs)
pandas.tests.indexes.datetimes.test_tools.TestOrigin.test_invalid_origins_tzinfo(self)
pandas.tests.indexes.datetimes.test_tools.TestOrigin.test_invalid_unit(self,units,julian_dates)
pandas.tests.indexes.datetimes.test_tools.TestOrigin.test_julian_round_trip(self)
pandas.tests.indexes.datetimes.test_tools.TestOrigin.test_processing_order(self)
pandas.tests.indexes.datetimes.test_tools.TestOrigin.test_to_basic(self,julian_dates)
pandas.tests.indexes.datetimes.test_tools.TestOrigin.test_to_datetime_out_of_bounds_with_format_arg(self,format)
pandas.tests.indexes.datetimes.test_tools.TestTimeConversionFormats
pandas.tests.indexes.datetimes.test_tools.TestTimeConversionFormats.test_int_to_datetime_format_YYYYMMDD_typeerror(self,int_date,expected)
pandas.tests.indexes.datetimes.test_tools.TestTimeConversionFormats.test_parse_nanoseconds_with_formula(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestTimeConversionFormats.test_to_datetime_format(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestTimeConversionFormats.test_to_datetime_format_YYYYMMDD(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestTimeConversionFormats.test_to_datetime_format_YYYYMMDD_overflow(self,input_s,expected)
pandas.tests.indexes.datetimes.test_tools.TestTimeConversionFormats.test_to_datetime_format_YYYYMMDD_with_none(self,input_s)
pandas.tests.indexes.datetimes.test_tools.TestTimeConversionFormats.test_to_datetime_format_integer(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestTimeConversionFormats.test_to_datetime_format_microsecond(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestTimeConversionFormats.test_to_datetime_format_time(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestTimeConversionFormats.test_to_datetime_format_weeks(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestTimeConversionFormats.test_to_datetime_parse_timezone_keeps_name(self)
pandas.tests.indexes.datetimes.test_tools.TestTimeConversionFormats.test_to_datetime_parse_timezone_malformed(self,offset)
pandas.tests.indexes.datetimes.test_tools.TestTimeConversionFormats.test_to_datetime_parse_tzname_or_tzoffset(self,fmt,dates,expected_dates)
pandas.tests.indexes.datetimes.test_tools.TestTimeConversionFormats.test_to_datetime_with_non_exact(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_datetime_bool(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_datetime_invalid_datatype(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_datetime_invalid_index(self,values,format,infer)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_datetime_invalid_scalar(self,value,format,infer)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_datetime_outofbounds_scalar(self,value,format,infer)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_error_iso_week_year(self,msg,s,_format)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_iso8601_strings_mixed_offsets_with_naive(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_iso_8601_strings_with_different_offsets(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_iso_8601_strings_with_same_offset(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_mixed_offsets_with_native_datetime_raises(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_no_slicing_errors_in_should_cache(self,listlike)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_non_iso_strings_with_tz_offset(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_timestamp_utc_true(self,ts,expected)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_YYYYMMDD(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_array_of_dt64s(self,cache,unit)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_cache(self,utc,format,constructor)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_cache_scalar(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_cache_series(self,utc,format)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_coerce(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_coerce_malformed(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_different_offsets(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_dt64s(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_dt64s_out_of_bounds(self,cache,dt)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_dtarr(self,tz)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_from_deque(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_iso_week_year_format(self,s,_format,dt)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_now(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_pydatetime(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_today(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_today_now_unicode_bytes(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_tz(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_tz_psycopg2(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_tz_pytz(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_unparseable_ignore(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_utc_true(self,cache,init_constructor,end_constructor,test_method)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_utc_true_with_series_datetime_ns(self,cache,date,dtype)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_utc_true_with_series_single_value(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_utc_true_with_series_tzaware_string(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_with_format_out_of_bounds(self,dt_str)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_week_without_day_and_calendar_year(self,date,format)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeInferFormat
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeInferFormat.test_to_datetime_infer_datetime_format_consistent_format(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeInferFormat.test_to_datetime_infer_datetime_format_inconsistent_format(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeInferFormat.test_to_datetime_infer_datetime_format_series_start_with_nans(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeInferFormat.test_to_datetime_infer_datetime_format_series_with_nans(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeInferFormat.test_to_datetime_iso8601_noleading_0s(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeMisc
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeMisc.test_dayfirst(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeMisc.test_dti_constructor_numpy_timeunits(self,cache,dtype)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeMisc.test_string_na_nat_conversion(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeMisc.test_to_datetime_barely_out_of_bounds(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeMisc.test_to_datetime_default(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeMisc.test_to_datetime_dta_tz(self,klass)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeMisc.test_to_datetime_iso8601(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeMisc.test_to_datetime_list_of_integers(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeMisc.test_to_datetime_on_datetime64_series(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeMisc.test_to_datetime_other_datetime64_units(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeMisc.test_to_datetime_overflow(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeMisc.test_to_datetime_types(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeMisc.test_to_datetime_unprocessable_input(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeMisc.test_to_datetime_with_apply(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeMisc.test_to_datetime_with_space_in_series(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeUnit
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeUnit.test_dataframe(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeUnit.test_dataframe_dtypes(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeUnit.test_dataframe_utc_true(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeUnit.test_to_datetime_errors_ignore_utc_true(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeUnit.test_unit(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeUnit.test_unit_consistency(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeUnit.test_unit_ignore_keeps_name(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeUnit.test_unit_mixed(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeUnit.test_unit_rounding(self,cache)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeUnit.test_unit_with_numeric(self,cache)
pandas.tests.indexes.datetimes.test_tools.epoch_1960()
pandas.tests.indexes.datetimes.test_tools.epochs(epoch_1960,request)
pandas.tests.indexes.datetimes.test_tools.julian_dates()
pandas.tests.indexes.datetimes.test_tools.test_na_to_datetime(nulls_fixture,klass)
pandas.tests.indexes.datetimes.test_tools.test_nullable_integer_to_datetime()
pandas.tests.indexes.datetimes.test_tools.test_should_cache(listlike,do_caching)
pandas.tests.indexes.datetimes.test_tools.test_should_cache_errors(unique_share,check_count,err_message)
pandas.tests.indexes.datetimes.test_tools.units(request)
pandas.tests.indexes.datetimes.test_tools.units_from_epochs()
pandas.tests.indexes.dts.test_tools.TestDatetimeParsingWrappers
pandas.tests.indexes.dts.test_tools.TestDatetimeParsingWrappers.test_na_values_with_cache(self,cache,unique_nulls_fixture,unique_nulls_fixture2)
pandas.tests.indexes.dts.test_tools.TestDatetimeParsingWrappers.test_parsers(self,date_str,expected,cache)
pandas.tests.indexes.dts.test_tools.TestDatetimeParsingWrappers.test_parsers_dayfirst_yearfirst(self,cache)
pandas.tests.indexes.dts.test_tools.TestDatetimeParsingWrappers.test_parsers_nat(self)
pandas.tests.indexes.dts.test_tools.TestDatetimeParsingWrappers.test_parsers_time(self)
pandas.tests.indexes.dts.test_tools.TestDatetimeParsingWrappers.test_parsers_timestring(self,cache)
pandas.tests.indexes.dts.test_tools.TestDatetimeParsingWrappers.test_parsers_timezone_minute_offsets_roundtrip(self,cache,dt_string,tz,dt_string_repr)
pandas.tests.indexes.dts.test_tools.TestDaysInMonth
pandas.tests.indexes.dts.test_tools.TestDaysInMonth.test_day_not_in_month_coerce(self,cache)
pandas.tests.indexes.dts.test_tools.TestDaysInMonth.test_day_not_in_month_ignore(self,cache)
pandas.tests.indexes.dts.test_tools.TestDaysInMonth.test_day_not_in_month_raise(self,cache)
pandas.tests.indexes.dts.test_tools.TestGuessDatetimeFormat
pandas.tests.indexes.dts.test_tools.TestGuessDatetimeFormat.test_guess_dt_format_for_array(self)
pandas.tests.indexes.dts.test_tools.TestOrigin
pandas.tests.indexes.dts.test_tools.TestOrigin.test_arg_tz_ns_unit(self,offset,utc,exp)
pandas.tests.indexes.dts.test_tools.TestOrigin.test_epoch(self,units,epochs,epoch_1960,units_from_epochs)
pandas.tests.indexes.dts.test_tools.TestOrigin.test_invalid_origin(self)
pandas.tests.indexes.dts.test_tools.TestOrigin.test_invalid_origins(self,origin,exc,units,units_from_epochs)
pandas.tests.indexes.dts.test_tools.TestOrigin.test_invalid_origins_tzinfo(self)
pandas.tests.indexes.dts.test_tools.TestOrigin.test_invalid_unit(self,units,julian_dates)
pandas.tests.indexes.dts.test_tools.TestOrigin.test_julian_round_trip(self)
pandas.tests.indexes.dts.test_tools.TestOrigin.test_processing_order(self)
pandas.tests.indexes.dts.test_tools.TestOrigin.test_to_basic(self,julian_dates)
pandas.tests.indexes.dts.test_tools.TestOrigin.test_to_dt_out_of_bounds_with_format_arg(self,format)
pandas.tests.indexes.dts.test_tools.TestTimeConversionFormats
pandas.tests.indexes.dts.test_tools.TestTimeConversionFormats.test_int_to_dt_format_YYYYMMDD_typeerror(self,int_date,expected)
pandas.tests.indexes.dts.test_tools.TestTimeConversionFormats.test_parse_nanoseconds_with_formula(self,cache)
pandas.tests.indexes.dts.test_tools.TestTimeConversionFormats.test_to_dt_format(self,cache)
pandas.tests.indexes.dts.test_tools.TestTimeConversionFormats.test_to_dt_format_YYYYMMDD(self,cache)
pandas.tests.indexes.dts.test_tools.TestTimeConversionFormats.test_to_dt_format_YYYYMMDD_overflow(self,input_s,expected)
pandas.tests.indexes.dts.test_tools.TestTimeConversionFormats.test_to_dt_format_YYYYMMDD_with_none(self,input_s)
pandas.tests.indexes.dts.test_tools.TestTimeConversionFormats.test_to_dt_format_integer(self,cache)
pandas.tests.indexes.dts.test_tools.TestTimeConversionFormats.test_to_dt_format_microsecond(self,cache)
pandas.tests.indexes.dts.test_tools.TestTimeConversionFormats.test_to_dt_format_time(self,cache)
pandas.tests.indexes.dts.test_tools.TestTimeConversionFormats.test_to_dt_format_weeks(self,cache)
pandas.tests.indexes.dts.test_tools.TestTimeConversionFormats.test_to_dt_parse_timezone_keeps_name(self)
pandas.tests.indexes.dts.test_tools.TestTimeConversionFormats.test_to_dt_parse_timezone_malformed(self,offset)
pandas.tests.indexes.dts.test_tools.TestTimeConversionFormats.test_to_dt_parse_tzname_or_tzoffset(self,fmt,dates,expected_dates)
pandas.tests.indexes.dts.test_tools.TestTimeConversionFormats.test_to_dt_with_non_exact(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetime
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_dt_bool(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_dt_invalid_datatype(self)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_dt_invalid_index(self,values,format,infer)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_dt_invalid_scalar(self,value,format,infer)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_dt_outofbounds_scalar(self,value,format,infer)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_error_iso_week_year(self,msg,s,_format)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_iso8601_strings_mixed_offsets_with_naive(self)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_iso_8601_strings_with_different_offsets(self)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_iso_8601_strings_with_same_offset(self)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_mixed_offsets_with_native_dt_raises(self)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_no_slicing_errors_in_should_cache(self,listlike)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_non_iso_strings_with_tz_offset(self)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_timestamp_utc_true(self,ts,expected)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_YYYYMMDD(self)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_array_of_dt64s(self,cache,unit)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_cache(self,utc,format,constructor)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_cache_scalar(self)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_cache_series(self,utc,format)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_coerce(self)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_coerce_malformed(self)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_different_offsets(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_dt64s(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_dt64s_out_of_bounds(self,cache,dt)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_dtarr(self,tz)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_from_deque(self)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_iso_week_year_format(self,s,_format,dt)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_now(self)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_pydt(self)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_today(self)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_today_now_unicode_bytes(self)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_tz(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_tz_psycopg2(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_tz_pytz(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_unparseable_ignore(self)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_utc_true(self,cache,init_constructor,end_constructor,test_method)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_utc_true_with_series_dt_ns(self,cache,date,dtype)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_utc_true_with_series_single_value(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_utc_true_with_series_tzaware_string(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_to_dt_with_format_out_of_bounds(self,dt_str)
pandas.tests.indexes.dts.test_tools.TestToDatetime.test_week_without_day_and_calendar_year(self,date,format)
pandas.tests.indexes.dts.test_tools.TestToDatetimeInferFormat
pandas.tests.indexes.dts.test_tools.TestToDatetimeInferFormat.test_to_dt_infer_dt_format_consistent_format(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetimeInferFormat.test_to_dt_infer_dt_format_inconsistent_format(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetimeInferFormat.test_to_dt_infer_dt_format_series_start_with_nans(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetimeInferFormat.test_to_dt_infer_dt_format_series_with_nans(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetimeInferFormat.test_to_dt_iso8601_noleading_0s(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetimeMisc
pandas.tests.indexes.dts.test_tools.TestToDatetimeMisc.test_dayfirst(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetimeMisc.test_dti_constructor_numpy_timeunits(self,cache,dtype)
pandas.tests.indexes.dts.test_tools.TestToDatetimeMisc.test_string_na_nat_conversion(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetimeMisc.test_to_dt_barely_out_of_bounds(self)
pandas.tests.indexes.dts.test_tools.TestToDatetimeMisc.test_to_dt_default(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetimeMisc.test_to_dt_dta_tz(self,klass)
pandas.tests.indexes.dts.test_tools.TestToDatetimeMisc.test_to_dt_iso8601(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetimeMisc.test_to_dt_list_of_integers(self)
pandas.tests.indexes.dts.test_tools.TestToDatetimeMisc.test_to_dt_on_dt64_series(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetimeMisc.test_to_dt_other_dt64_units(self)
pandas.tests.indexes.dts.test_tools.TestToDatetimeMisc.test_to_dt_overflow(self)
pandas.tests.indexes.dts.test_tools.TestToDatetimeMisc.test_to_dt_types(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetimeMisc.test_to_dt_unprocessable_input(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetimeMisc.test_to_dt_with_apply(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetimeMisc.test_to_dt_with_space_in_series(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetimeUnit
pandas.tests.indexes.dts.test_tools.TestToDatetimeUnit.test_dataframe(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetimeUnit.test_dataframe_dtypes(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetimeUnit.test_dataframe_utc_true(self)
pandas.tests.indexes.dts.test_tools.TestToDatetimeUnit.test_to_dt_errors_ignore_utc_true(self)
pandas.tests.indexes.dts.test_tools.TestToDatetimeUnit.test_unit(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetimeUnit.test_unit_consistency(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetimeUnit.test_unit_ignore_keeps_name(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetimeUnit.test_unit_mixed(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetimeUnit.test_unit_rounding(self,cache)
pandas.tests.indexes.dts.test_tools.TestToDatetimeUnit.test_unit_with_numeric(self,cache)
pandas.tests.indexes.dts.test_tools.epoch_1960()
pandas.tests.indexes.dts.test_tools.epochs(epoch_1960,request)
pandas.tests.indexes.dts.test_tools.julian_dates()
pandas.tests.indexes.dts.test_tools.test_na_to_dt(nulls_fixture,klass)
pandas.tests.indexes.dts.test_tools.test_nullable_integer_to_dt()
pandas.tests.indexes.dts.test_tools.test_should_cache(listlike,do_caching)
pandas.tests.indexes.dts.test_tools.test_should_cache_errors(unique_share,check_count,err_message)
pandas.tests.indexes.dts.test_tools.units(request)
pandas.tests.indexes.dts.test_tools.units_from_epochs()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/datetimes/test_setops.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_setops.everything->pandas._testing.makeDateIndex(10)
A:pandas.tests.indexes.datetimes.test_setops.union->pandas._testing.makeDateIndex(10).union(second, sort=sort)
A:pandas.tests.indexes.datetimes.test_setops.expected->DatetimeIndex([])
A:pandas.tests.indexes.datetimes.test_setops.case->box(second.values)
A:pandas.tests.indexes.datetimes.test_setops.result->bdate_range('11/30/2011', '12/31/2011', freq='C').intersection(b)
A:pandas.tests.indexes.datetimes.test_setops.rng1->pandas.DatetimeIndex(rng_dates, tz=tz)
A:pandas.tests.indexes.datetimes.test_setops.other1->pandas.date_range('1/6/2000', freq='D', periods=5, tz=tz)
A:pandas.tests.indexes.datetimes.test_setops.expected1->pandas.DatetimeIndex(rng_dates, tz=tz)
A:pandas.tests.indexes.datetimes.test_setops.expected1_notsorted->pandas.DatetimeIndex(list(other1) + list(rng1))
A:pandas.tests.indexes.datetimes.test_setops.rng2->pandas.DatetimeIndex(rng_dates, tz=tz)
A:pandas.tests.indexes.datetimes.test_setops.other2->pandas.date_range('1/4/2000', freq='D', periods=5, tz=tz)
A:pandas.tests.indexes.datetimes.test_setops.expected2->pandas.DatetimeIndex(rng_dates[:3], tz=tz)
A:pandas.tests.indexes.datetimes.test_setops.expected2_notsorted->pandas.DatetimeIndex(list(other2) + list(rng2[:3]))
A:pandas.tests.indexes.datetimes.test_setops.rng3->pandas.DatetimeIndex(rng_dates, tz=tz)
A:pandas.tests.indexes.datetimes.test_setops.other3->pandas.DatetimeIndex([], tz=tz)
A:pandas.tests.indexes.datetimes.test_setops.expected3->pandas.DatetimeIndex(rng_dates, tz=tz)
A:pandas.tests.indexes.datetimes.test_setops.result_union->date_range('20160922', '20160925', freq='D').union(rng, sort=sort)
A:pandas.tests.indexes.datetimes.test_setops.idx->DatetimeIndex(['2000-01-03', '2000-01-01', '2000-01-02'])
A:pandas.tests.indexes.datetimes.test_setops.ordered->DatetimeIndex(idx.sort_values(), freq='infer')
A:pandas.tests.indexes.datetimes.test_setops.rng_a->date_range('1/1/2012', periods=4, freq='3H')
A:pandas.tests.indexes.datetimes.test_setops.rng_b->date_range('1/1/2012', periods=4, freq='4H')
A:pandas.tests.indexes.datetimes.test_setops.exp->pandas.date_range('1/1/1980', '1/1/2012', freq='MS')
A:pandas.tests.indexes.datetimes.test_setops.left->date_range('2013-01-01', '2013-02-01')
A:pandas.tests.indexes.datetimes.test_setops.right->DatetimeIndex(['2012-05-29 13:04:21.322000', '2012-05-11 15:27:24.873000', '2012-05-11 15:31:05.350000'])
A:pandas.tests.indexes.datetimes.test_setops.dti->date_range(start='1/1/2001', end='2/1/2001', freq='D')
A:pandas.tests.indexes.datetimes.test_setops.s1->Series(np.random.randn(len(rng1)), rng1)
A:pandas.tests.indexes.datetimes.test_setops.s2->Series(np.random.randn(len(rng2)), rng2)
A:pandas.tests.indexes.datetimes.test_setops.df->DataFrame({'s1': s1, 's2': s2})
A:pandas.tests.indexes.datetimes.test_setops.i1->Int64Index(np.arange(0, 20, 2))
A:pandas.tests.indexes.datetimes.test_setops.i2->date_range(start='2012-01-03 00:00:00', periods=10, freq='D')
A:pandas.tests.indexes.datetimes.test_setops.first->pandas._testing.makeDateIndex(10)
A:pandas.tests.indexes.datetimes.test_setops.intersect->pandas._testing.makeDateIndex(10).intersection(second)
A:pandas.tests.indexes.datetimes.test_setops.third->Index(['a', 'b', 'c'])
A:pandas.tests.indexes.datetimes.test_setops.base->DatetimeIndex(['2011-01-05', '2011-01-04', '2011-01-02', '2011-01-03'], tz=tz, name='idx')
A:pandas.tests.indexes.datetimes.test_setops.rng4->date_range('7/1/2000', '7/31/2000', freq='D', tz=tz, name='idx')
A:pandas.tests.indexes.datetimes.test_setops.expected4->DatetimeIndex([], tz=tz, name='idx')
A:pandas.tests.indexes.datetimes.test_setops.rng->date_range(START, END, freq=BMonthEnd())
A:pandas.tests.indexes.datetimes.test_setops.index_1->date_range('1/1/2012', periods=4, freq='12H')
A:pandas.tests.indexes.datetimes.test_setops.result_diff->date_range(START, END, freq=BMonthEnd()).difference(other, sort)
A:pandas.tests.indexes.datetimes.test_setops.index->date_range('20160920', '20160925', freq='D')
A:pandas.tests.indexes.datetimes.test_setops.other->date_range('20160922', '20160925', freq='D')
A:pandas.tests.indexes.datetimes.test_setops.idx_diff->date_range('20160920', '20160925', freq='D').difference(other, sort)
A:pandas.tests.indexes.datetimes.test_setops.dti1->date_range(freq='Q-JAN', start=datetime(1997, 12, 31), periods=100)
A:pandas.tests.indexes.datetimes.test_setops.dti2->date_range(freq='Q-JAN', start=datetime(1997, 12, 31), periods=98)
A:pandas.tests.indexes.datetimes.test_setops.empty->Index([])
A:pandas.tests.indexes.datetimes.test_setops.idx1->to_datetime(['2012-11-06 16:00:11.477563', '2012-11-06 16:00:11.477563'])
A:pandas.tests.indexes.datetimes.test_setops.idx2->to_datetime(['2012-11-06 15:11:09.006507', '2012-11-06 15:11:09.006507'])
A:pandas.tests.indexes.datetimes.test_setops.rs->to_datetime(['2012-11-06 16:00:11.477563', '2012-11-06 16:00:11.477563']).join(idx2, how='outer')
A:pandas.tests.indexes.datetimes.test_setops.self.rng->bdate_range(START, END, freq='C')
A:pandas.tests.indexes.datetimes.test_setops.the_union->self.rng.union(rng, sort=sort)
A:pandas.tests.indexes.datetimes.test_setops.the_join->self.rng.join(rng, how='outer')
A:pandas.tests.indexes.datetimes.test_setops.the_int->rng[:10].intersection(rng[10:])
A:pandas.tests.indexes.datetimes.test_setops.a->bdate_range('11/30/2011', '12/31/2011', freq='C')
A:pandas.tests.indexes.datetimes.test_setops.b->bdate_range('12/10/2011', '12/20/2011', freq='C')
A:pandas.tests.indexes.datetimes.test_setops.tz->dateutil_gettz('US/Eastern')
A:pandas.tests.indexes.datetimes.test_setops.early_start->datetime(2011, 1, 1)
A:pandas.tests.indexes.datetimes.test_setops.early_end->datetime(2011, 3, 1)
A:pandas.tests.indexes.datetimes.test_setops.late_start->datetime(2011, 3, 1)
A:pandas.tests.indexes.datetimes.test_setops.late_end->datetime(2011, 5, 1)
A:pandas.tests.indexes.datetimes.test_setops.early_dr->date_range(start=early_start, end=early_end, tz=tz, freq=MonthEnd())
A:pandas.tests.indexes.datetimes.test_setops.late_dr->date_range(start=late_start, end=late_end, tz=tz, freq=MonthEnd())
pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex
pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.setup_method(self,method)
pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_intersection(self)
pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_intersection_bug(self)
pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_month_range_union_tz_dateutil(self,sort)
pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_month_range_union_tz_pytz(self,sort)
pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_outer_join(self)
pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_union(self,sort)
pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_union_not_cacheable(self,sort)
pandas.tests.indexes.datetimes.test_setops.TestCustomDatetimeIndex
pandas.tests.indexes.datetimes.test_setops.TestCustomDatetimeIndex.setup_method(self,method)
pandas.tests.indexes.datetimes.test_setops.TestCustomDatetimeIndex.test_intersection_bug(self)
pandas.tests.indexes.datetimes.test_setops.TestCustomDatetimeIndex.test_outer_join(self)
pandas.tests.indexes.datetimes.test_setops.TestCustomDatetimeIndex.test_union(self,sort)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_datetimeindex_diff(self,sort)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_datetimeindex_union_join_empty(self,sort)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_difference(self,tz,sort)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_difference_freq(self,sort)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_intersection(self,tz,sort)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_intersection2(self)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_intersection_bug_1708(self)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_intersection_empty(self)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_join_nonunique(self)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union(self,tz,sort)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union2(self,sort)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union3(self,sort,box)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_bug_1730(self,sort)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_bug_1745(self,sort)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_bug_4564(self,sort)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_coverage(self,sort)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_dataframe_index(self)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_freq_both_none(self,sort)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_freq_infer(self)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_with_DatetimeIndex(self,sort)
pandas.tests.indexes.dts.test_setops.TestBusinessDatetimeIndex
pandas.tests.indexes.dts.test_setops.TestBusinessDatetimeIndex.setup_method(self,method)
pandas.tests.indexes.dts.test_setops.TestBusinessDatetimeIndex.test_intersection(self)
pandas.tests.indexes.dts.test_setops.TestBusinessDatetimeIndex.test_intersection_bug(self)
pandas.tests.indexes.dts.test_setops.TestBusinessDatetimeIndex.test_month_range_union_tz_dateutil(self,sort)
pandas.tests.indexes.dts.test_setops.TestBusinessDatetimeIndex.test_month_range_union_tz_pytz(self,sort)
pandas.tests.indexes.dts.test_setops.TestBusinessDatetimeIndex.test_outer_join(self)
pandas.tests.indexes.dts.test_setops.TestBusinessDatetimeIndex.test_union(self,sort)
pandas.tests.indexes.dts.test_setops.TestBusinessDatetimeIndex.test_union_not_cacheable(self,sort)
pandas.tests.indexes.dts.test_setops.TestCustomDatetimeIndex
pandas.tests.indexes.dts.test_setops.TestCustomDatetimeIndex.setup_method(self,method)
pandas.tests.indexes.dts.test_setops.TestCustomDatetimeIndex.test_intersection_bug(self)
pandas.tests.indexes.dts.test_setops.TestCustomDatetimeIndex.test_outer_join(self)
pandas.tests.indexes.dts.test_setops.TestCustomDatetimeIndex.test_union(self,sort)
pandas.tests.indexes.dts.test_setops.TestDatetimeIndexSetOps
pandas.tests.indexes.dts.test_setops.TestDatetimeIndexSetOps.test_difference(self,tz,sort)
pandas.tests.indexes.dts.test_setops.TestDatetimeIndexSetOps.test_difference_freq(self,sort)
pandas.tests.indexes.dts.test_setops.TestDatetimeIndexSetOps.test_dtindex_diff(self,sort)
pandas.tests.indexes.dts.test_setops.TestDatetimeIndexSetOps.test_dtindex_union_join_empty(self,sort)
pandas.tests.indexes.dts.test_setops.TestDatetimeIndexSetOps.test_intersection(self,tz,sort)
pandas.tests.indexes.dts.test_setops.TestDatetimeIndexSetOps.test_intersection2(self)
pandas.tests.indexes.dts.test_setops.TestDatetimeIndexSetOps.test_intersection_bug_1708(self)
pandas.tests.indexes.dts.test_setops.TestDatetimeIndexSetOps.test_intersection_empty(self)
pandas.tests.indexes.dts.test_setops.TestDatetimeIndexSetOps.test_join_nonunique(self)
pandas.tests.indexes.dts.test_setops.TestDatetimeIndexSetOps.test_union(self,tz,sort)
pandas.tests.indexes.dts.test_setops.TestDatetimeIndexSetOps.test_union2(self,sort)
pandas.tests.indexes.dts.test_setops.TestDatetimeIndexSetOps.test_union3(self,sort,box)
pandas.tests.indexes.dts.test_setops.TestDatetimeIndexSetOps.test_union_bug_1730(self,sort)
pandas.tests.indexes.dts.test_setops.TestDatetimeIndexSetOps.test_union_bug_1745(self,sort)
pandas.tests.indexes.dts.test_setops.TestDatetimeIndexSetOps.test_union_bug_4564(self,sort)
pandas.tests.indexes.dts.test_setops.TestDatetimeIndexSetOps.test_union_coverage(self,sort)
pandas.tests.indexes.dts.test_setops.TestDatetimeIndexSetOps.test_union_dataframe_index(self)
pandas.tests.indexes.dts.test_setops.TestDatetimeIndexSetOps.test_union_freq_both_none(self,sort)
pandas.tests.indexes.dts.test_setops.TestDatetimeIndexSetOps.test_union_freq_infer(self)
pandas.tests.indexes.dts.test_setops.TestDatetimeIndexSetOps.test_union_with_DatetimeIndex(self,sort)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/datetimes/test_missing.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_missing.idx->pandas.DatetimeIndex(['2011-01-01 09:00', pd.NaT, '2011-01-01 11:00'], tz=tz)
A:pandas.tests.indexes.datetimes.test_missing.exp->pandas.Index([pd.Timestamp('2011-01-01 09:00', tz=tz), 'x', pd.Timestamp('2011-01-01 11:00', tz=tz)], dtype=object)
pandas.tests.indexes.datetimes.test_missing.TestDatetimeIndex
pandas.tests.indexes.datetimes.test_missing.TestDatetimeIndex.test_fillna_datetime64(self,tz)
pandas.tests.indexes.dts.test_missing.TestDatetimeIndex
pandas.tests.indexes.dts.test_missing.TestDatetimeIndex.test_fillna_dt64(self,tz)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/datetimes/test_partial_slicing.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_partial_slicing.dti->date_range(freq='D', start=datetime(2005, 1, 1), periods=500)
A:pandas.tests.indexes.datetimes.test_partial_slicing.st->pandas.Timestamp('2013-07-01 00:00:00', tz='America/Los_Angeles')
A:pandas.tests.indexes.datetimes.test_partial_slicing.et->pandas.Timestamp('2013-07-02 00:00:00', tz='America/Los_Angeles')
A:pandas.tests.indexes.datetimes.test_partial_slicing.dr->pandas.date_range(st, et, freq='H', name='timebucket')
A:pandas.tests.indexes.datetimes.test_partial_slicing.ts->Series(np.arange(20), date_range('2014-01-01', periods=20, freq='MS'))
A:pandas.tests.indexes.datetimes.test_partial_slicing.empty_idx->date_range(freq='1H', periods=0, end='2015')
A:pandas.tests.indexes.datetimes.test_partial_slicing.right->date_range(freq='1H', periods=0, end='2015')._maybe_cast_slice_bound('2015-01-02', 'right', 'loc')
A:pandas.tests.indexes.datetimes.test_partial_slicing.exp->Timestamp('2015-01-02 00:00:00')
A:pandas.tests.indexes.datetimes.test_partial_slicing.left->date_range(freq='1H', periods=0, end='2015')._maybe_cast_slice_bound('2015-01-02', 'left', 'loc')
A:pandas.tests.indexes.datetimes.test_partial_slicing.idx->pandas.date_range(start='2018-12-02 14:50:00-07:00', end='2018-12-02 14:50:00-07:00', freq='1min')
A:pandas.tests.indexes.datetimes.test_partial_slicing.result->op(df.A, datetimelike)
A:pandas.tests.indexes.datetimes.test_partial_slicing.expected->pandas.Series(range(12), index=pd.date_range('2000', periods=12, freq='M'), name='A')
A:pandas.tests.indexes.datetimes.test_partial_slicing.df->pandas.DataFrame({'A': range(24)}, index=pd.date_range('2000', periods=24, freq='M'))
A:pandas.tests.indexes.datetimes.test_partial_slicing.date_index->pandas.to_datetime(date_list)
A:pandas.tests.indexes.datetimes.test_partial_slicing.s->pandas.Series(np.arange(10), pd.date_range('2014-01-01', periods=10))
A:pandas.tests.indexes.datetimes.test_partial_slicing.rng->date_range(start=datetime(2005, 1, 1, 0, 0, 59, microsecond=999990), periods=20, freq='US')
A:pandas.tests.indexes.datetimes.test_partial_slicing.unit->Timedelta('1 ' + resolution)
A:pandas.tests.indexes.datetimes.test_partial_slicing.middate->datetime(2012, 1, 1, 0, 0, 0)
A:pandas.tests.indexes.datetimes.test_partial_slicing.index->DatetimeIndex([middate - unit, middate, middate + unit])
A:pandas.tests.indexes.datetimes.test_partial_slicing.ts_string->Series(np.arange(20), date_range('2014-01-01', periods=20, freq='MS')).strftime(fmt)
A:pandas.tests.indexes.datetimes.test_partial_slicing.df_multi->pandas.DataFrame({'A': range(24)}, index=pd.date_range('2000', periods=24, freq='M')).set_index(['ACCOUNT', 'TICKER'], append=True)
A:pandas.tests.indexes.datetimes.test_partial_slicing.s2->s[:-1].copy()
A:pandas.tests.indexes.datetimes.test_partial_slicing.df2->pandas.DataFrame(s)
A:pandas.tests.indexes.datetimes.test_partial_slicing.timestamp->pandas.Timestamp('2014-01-10')
A:pandas.tests.indexes.datetimes.test_partial_slicing.start->str(start)
A:pandas.tests.indexes.datetimes.test_partial_slicing.end->str(end)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_dti_slicing(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_getitem_with_datestring_with_UTC_offset(self,start,end)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_loc_datetime_length_one(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_monotone_DTI_indexing_bug(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_partial_slice(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_partial_slice_daily(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_partial_slice_doesnt_require_monotonicity(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_partial_slice_hourly(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_partial_slice_minutely(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_partial_slice_second_precision(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_partial_slicing_dataframe(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_partial_slicing_with_multiindex(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_selection_by_datetimelike(self,datetimelike,op,expected)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_slice_bounds_empty(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_slice_duplicate_monotonic(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_slice_keeps_name(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_slice_month(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_slice_quarter(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_slice_reduce_to_series(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_slice_with_negative_step(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_slice_with_zero_step_raises(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_slice_year(self)
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing.test_dti_slicing(self)
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing.test_getitem_with_datestring_with_UTC_offset(self,start,end)
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing.test_loc_dt_length_one(self)
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing.test_monotone_DTI_indexing_bug(self)
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing.test_partial_slice(self)
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing.test_partial_slice_daily(self)
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing.test_partial_slice_doesnt_require_monotonicity(self)
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing.test_partial_slice_hourly(self)
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing.test_partial_slice_minutely(self)
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing.test_partial_slice_second_precision(self)
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing.test_partial_slicing_dataframe(self)
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing.test_partial_slicing_with_multiindex(self)
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing.test_selection_by_dtlike(self,datetimelike,op,expected)
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing.test_slice_bounds_empty(self)
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing.test_slice_duplicate_monotonic(self)
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing.test_slice_keeps_name(self)
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing.test_slice_month(self)
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing.test_slice_quarter(self)
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing.test_slice_reduce_to_series(self)
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing.test_slice_with_negative_step(self)
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing.test_slice_with_zero_step_raises(self)
pandas.tests.indexes.dts.test_partial_slicing.TestSlicing.test_slice_year(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/datetimes/test_ops.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_ops.s->Series(dict(year=2000, month=1, day=10))
A:pandas.tests.indexes.datetimes.test_ops.rng->date_range(START, END, freq=BMonthEnd())
A:pandas.tests.indexes.datetimes.test_ops.result->pandas.DatetimeIndex(idx.asi8, freq='infer')
A:pandas.tests.indexes.datetimes.test_ops.index->DatetimeIndex(index_dates, tz=tz, name='idx')
A:pandas.tests.indexes.datetimes.test_ops.exp->base[5:].append(base[:5])
A:pandas.tests.indexes.datetimes.test_ops.expected_rng->DatetimeIndex([Timestamp('2016-01-01 00:00:00', tz=tz, freq='30T'), Timestamp('2016-01-01 00:00:00', tz=tz, freq='30T'), Timestamp('2016-01-01 00:30:00', tz=tz, freq='30T'), Timestamp('2016-01-01 00:30:00', tz=tz, freq='30T')])
A:pandas.tests.indexes.datetimes.test_ops.res->Series(idx).drop_duplicates(keep=False)
A:pandas.tests.indexes.datetimes.test_ops.idx->pandas.date_range(start=START, end=END, periods=3)
A:pandas.tests.indexes.datetimes.test_ops.exp_idx->DatetimeIndex(['2013-01-01 09:00', '2013-01-01 08:00', pd.NaT], tz=tz)
A:pandas.tests.indexes.datetimes.test_ops.expected->DatetimeIndex(expected_dates, tz=tz, name='idx')
A:pandas.tests.indexes.datetimes.test_ops.ordered->DatetimeIndex(index_dates, tz=tz, name='idx').sort_values(ascending=False)
A:pandas.tests.indexes.datetimes.test_ops.(ordered, indexer)->DatetimeIndex(index_dates, tz=tz, name='idx').sort_values(return_indexer=True, ascending=False)
A:pandas.tests.indexes.datetimes.test_ops.idx_dup->pandas.date_range(start=START, end=END, periods=3).append(idx)
A:pandas.tests.indexes.datetimes.test_ops.base->pandas.date_range('2011-01-01', '2011-01-31', freq='D', name='idx')
A:pandas.tests.indexes.datetimes.test_ops.idx2->pandas.DatetimeIndex(['2011-01-01', '2011-01-02', 'NaT'], tz='US/Pacific')
A:pandas.tests.indexes.datetimes.test_ops.idx3->pandas.DatetimeIndex._simple_new(idx.asi8, tz='US/Pacific')
A:pandas.tests.indexes.datetimes.test_ops.oob->pandas.Index([datetime(2500, 1, 1)] * 3, dtype=object)
A:pandas.tests.indexes.datetimes.test_ops.oob2->pandas.Index([datetime(2500, 1, 1)] * 3, dtype=object).map(np.datetime64)
A:pandas.tests.indexes.datetimes.test_ops.self.rng->bdate_range(START, END, freq='C')
A:pandas.tests.indexes.datetimes.test_ops.unpickled->pandas._testing.round_trip_pickle(self.rng)
A:pandas.tests.indexes.datetimes.test_ops.cp->self.rng.copy()
A:pandas.tests.indexes.datetimes.test_ops.shifted->date_range(START, END, freq=BMonthEnd()).shift(1, freq=CDay())
A:pandas.tests.indexes.datetimes.test_ops.t1->t1.rename('foo').rename('foo')
A:pandas.tests.indexes.datetimes.test_ops.t2->t2.rename('foo').rename('foo')
A:pandas.tests.indexes.datetimes.test_ops.t2v->Index(t2.values)
pandas.tests.indexes.datetimes.test_ops.TestBusinessDatetimeIndex
pandas.tests.indexes.datetimes.test_ops.TestBusinessDatetimeIndex.setup_method(self,method)
pandas.tests.indexes.datetimes.test_ops.TestBusinessDatetimeIndex.test_comparison(self)
pandas.tests.indexes.datetimes.test_ops.TestBusinessDatetimeIndex.test_copy(self)
pandas.tests.indexes.datetimes.test_ops.TestBusinessDatetimeIndex.test_equals(self)
pandas.tests.indexes.datetimes.test_ops.TestBusinessDatetimeIndex.test_identical(self)
pandas.tests.indexes.datetimes.test_ops.TestBusinessDatetimeIndex.test_pickle_unpickle(self)
pandas.tests.indexes.datetimes.test_ops.TestBusinessDatetimeIndex.test_shift(self)
pandas.tests.indexes.datetimes.test_ops.TestCustomDatetimeIndex
pandas.tests.indexes.datetimes.test_ops.TestCustomDatetimeIndex.setup_method(self,method)
pandas.tests.indexes.datetimes.test_ops.TestCustomDatetimeIndex.test_comparison(self)
pandas.tests.indexes.datetimes.test_ops.TestCustomDatetimeIndex.test_copy(self)
pandas.tests.indexes.datetimes.test_ops.TestCustomDatetimeIndex.test_equals(self)
pandas.tests.indexes.datetimes.test_ops.TestCustomDatetimeIndex.test_pickle_unpickle(self)
pandas.tests.indexes.datetimes.test_ops.TestCustomDatetimeIndex.test_shift(self)
pandas.tests.indexes.datetimes.test_ops.TestCustomDatetimeIndex.test_shift_periods(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps(Ops)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.setup_method(self,method)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_drop_duplicates(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_drop_duplicates_metadata(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_equals(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_freq_setter(self,values,freq,tz)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_freq_setter_errors(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_infer_freq(self,freq)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_nat(self,tz_naive_fixture)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_nonunique_contains(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_ops_properties(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_ops_properties_basic(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_order_with_freq(self,idx)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_order_without_freq(self,index_dates,expected_dates,tz_naive_fixture)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_repeat(self,tz_naive_fixture)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_repeat_range(self,tz_naive_fixture)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_resolution(self,tz_naive_fixture)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_value_counts_unique(self,tz_naive_fixture)
pandas.tests.indexes.dts.test_ops.TestBusinessDatetimeIndex
pandas.tests.indexes.dts.test_ops.TestBusinessDatetimeIndex.setup_method(self,method)
pandas.tests.indexes.dts.test_ops.TestBusinessDatetimeIndex.test_comparison(self)
pandas.tests.indexes.dts.test_ops.TestBusinessDatetimeIndex.test_copy(self)
pandas.tests.indexes.dts.test_ops.TestBusinessDatetimeIndex.test_equals(self)
pandas.tests.indexes.dts.test_ops.TestBusinessDatetimeIndex.test_identical(self)
pandas.tests.indexes.dts.test_ops.TestBusinessDatetimeIndex.test_pickle_unpickle(self)
pandas.tests.indexes.dts.test_ops.TestBusinessDatetimeIndex.test_shift(self)
pandas.tests.indexes.dts.test_ops.TestCustomDatetimeIndex
pandas.tests.indexes.dts.test_ops.TestCustomDatetimeIndex.setup_method(self,method)
pandas.tests.indexes.dts.test_ops.TestCustomDatetimeIndex.test_comparison(self)
pandas.tests.indexes.dts.test_ops.TestCustomDatetimeIndex.test_copy(self)
pandas.tests.indexes.dts.test_ops.TestCustomDatetimeIndex.test_equals(self)
pandas.tests.indexes.dts.test_ops.TestCustomDatetimeIndex.test_pickle_unpickle(self)
pandas.tests.indexes.dts.test_ops.TestCustomDatetimeIndex.test_shift(self)
pandas.tests.indexes.dts.test_ops.TestCustomDatetimeIndex.test_shift_periods(self)
pandas.tests.indexes.dts.test_ops.TestDatetimeIndexOps(Ops)
pandas.tests.indexes.dts.test_ops.TestDatetimeIndexOps.setup_method(self,method)
pandas.tests.indexes.dts.test_ops.TestDatetimeIndexOps.test_drop_duplicates(self)
pandas.tests.indexes.dts.test_ops.TestDatetimeIndexOps.test_drop_duplicates_metadata(self)
pandas.tests.indexes.dts.test_ops.TestDatetimeIndexOps.test_equals(self)
pandas.tests.indexes.dts.test_ops.TestDatetimeIndexOps.test_freq_setter(self,values,freq,tz)
pandas.tests.indexes.dts.test_ops.TestDatetimeIndexOps.test_freq_setter_errors(self)
pandas.tests.indexes.dts.test_ops.TestDatetimeIndexOps.test_infer_freq(self,freq)
pandas.tests.indexes.dts.test_ops.TestDatetimeIndexOps.test_nat(self,tz_naive_fixture)
pandas.tests.indexes.dts.test_ops.TestDatetimeIndexOps.test_nonunique_contains(self)
pandas.tests.indexes.dts.test_ops.TestDatetimeIndexOps.test_ops_properties(self)
pandas.tests.indexes.dts.test_ops.TestDatetimeIndexOps.test_ops_properties_basic(self)
pandas.tests.indexes.dts.test_ops.TestDatetimeIndexOps.test_order_with_freq(self,idx)
pandas.tests.indexes.dts.test_ops.TestDatetimeIndexOps.test_order_without_freq(self,index_dates,expected_dates,tz_naive_fixture)
pandas.tests.indexes.dts.test_ops.TestDatetimeIndexOps.test_repeat(self,tz_naive_fixture)
pandas.tests.indexes.dts.test_ops.TestDatetimeIndexOps.test_repeat_range(self,tz_naive_fixture)
pandas.tests.indexes.dts.test_ops.TestDatetimeIndexOps.test_resolution(self,tz_naive_fixture)
pandas.tests.indexes.dts.test_ops.TestDatetimeIndexOps.test_value_counts_unique(self,tz_naive_fixture)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/datetimes/test_shift.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_shift.idx->date_range('2013-11-03', tz='America/Chicago', periods=7, freq='H')
A:pandas.tests.indexes.datetimes.test_shift.exp->pandas.DatetimeIndex(['2011-01-01 07:00', '2011-01-01 08:00', '2011-01-01 09:00'], name='xxx', tz=tz)
A:pandas.tests.indexes.datetimes.test_shift.drange->pandas.date_range('20130101', periods=5)
A:pandas.tests.indexes.datetimes.test_shift.result->Series(data=[1], index=[dt_est]).shift(shift, freq='H')
A:pandas.tests.indexes.datetimes.test_shift.expected->Series(1, index=DatetimeIndex([result_time], tz='EST'))
A:pandas.tests.indexes.datetimes.test_shift.rng->date_range('1/1/2000', periods=20)
A:pandas.tests.indexes.datetimes.test_shift.dti->pandas.DatetimeIndex(['2011-01-01 10:00', '2011-01-01'], freq=None)
A:pandas.tests.indexes.datetimes.test_shift.dr->date_range('2011/1/1', '2012/1/1', freq='W-FRI')
A:pandas.tests.indexes.datetimes.test_shift.dr_tz->date_range('2011/1/1', '2012/1/1', freq='W-FRI').tz_localize(tzstr)
A:pandas.tests.indexes.datetimes.test_shift.s->Series(data=[1], index=[dt_est])
A:pandas.tests.indexes.datetimes.test_shift.dt->datetime(2014, 11, 14, 0)
A:pandas.tests.indexes.datetimes.test_shift.dt_est->pytz.timezone('EST').localize(dt)
pandas.tests.indexes.datetimes.test_shift.TestDatetimeIndexShift
pandas.tests.indexes.datetimes.test_shift.TestDatetimeIndexShift.test_dti_shift_across_dst(self)
pandas.tests.indexes.datetimes.test_shift.TestDatetimeIndexShift.test_dti_shift_freqs(self)
pandas.tests.indexes.datetimes.test_shift.TestDatetimeIndexShift.test_dti_shift_int(self)
pandas.tests.indexes.datetimes.test_shift.TestDatetimeIndexShift.test_dti_shift_localized(self,tzstr)
pandas.tests.indexes.datetimes.test_shift.TestDatetimeIndexShift.test_dti_shift_near_midnight(self,shift,result_time)
pandas.tests.indexes.datetimes.test_shift.TestDatetimeIndexShift.test_dti_shift_no_freq(self)
pandas.tests.indexes.datetimes.test_shift.TestDatetimeIndexShift.test_dti_shift_tzaware(self,tz_naive_fixture)
pandas.tests.indexes.dts.test_shift.TestDatetimeIndexShift
pandas.tests.indexes.dts.test_shift.TestDatetimeIndexShift.test_dti_shift_across_dst(self)
pandas.tests.indexes.dts.test_shift.TestDatetimeIndexShift.test_dti_shift_freqs(self)
pandas.tests.indexes.dts.test_shift.TestDatetimeIndexShift.test_dti_shift_int(self)
pandas.tests.indexes.dts.test_shift.TestDatetimeIndexShift.test_dti_shift_localized(self,tzstr)
pandas.tests.indexes.dts.test_shift.TestDatetimeIndexShift.test_dti_shift_near_midnight(self,shift,result_time)
pandas.tests.indexes.dts.test_shift.TestDatetimeIndexShift.test_dti_shift_no_freq(self)
pandas.tests.indexes.dts.test_shift.TestDatetimeIndexShift.test_dti_shift_tzaware(self,tz_naive_fixture)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/datetimes/test_datetimelike.py----------------------------------------
pandas.tests.indexes.datetimes.test_datetimelike.TestDatetimeIndex(DatetimeLike)
pandas.tests.indexes.datetimes.test_datetimelike.TestDatetimeIndex.create_index(self)
pandas.tests.indexes.datetimes.test_datetimelike.TestDatetimeIndex.indices(self,request)
pandas.tests.indexes.datetimes.test_datetimelike.TestDatetimeIndex.test_intersection(self)
pandas.tests.indexes.datetimes.test_datetimelike.TestDatetimeIndex.test_pickle_compat_construction(self)
pandas.tests.indexes.datetimes.test_datetimelike.TestDatetimeIndex.test_shift(self)
pandas.tests.indexes.datetimes.test_datetimelike.TestDatetimeIndex.test_union(self)
pandas.tests.indexes.dts.test_dtlike.TestDatetimeIndex(DatetimeLike)
pandas.tests.indexes.dts.test_dtlike.TestDatetimeIndex.create_index(self)
pandas.tests.indexes.dts.test_dtlike.TestDatetimeIndex.indices(self,request)
pandas.tests.indexes.dts.test_dtlike.TestDatetimeIndex.test_intersection(self)
pandas.tests.indexes.dts.test_dtlike.TestDatetimeIndex.test_pickle_compat_construction(self)
pandas.tests.indexes.dts.test_dtlike.TestDatetimeIndex.test_shift(self)
pandas.tests.indexes.dts.test_dtlike.TestDatetimeIndex.test_union(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/datetimes/test_formats.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_formats.index->DatetimeIndex(['2017-01-01', pd.NaT, '2017-01-03'])
A:pandas.tests.indexes.datetimes.test_formats.expected->numpy.array(['2017-01-01', 'pandas', '2017-01-03'], dtype=object)
A:pandas.tests.indexes.datetimes.test_formats.result->idx._summary()
A:pandas.tests.indexes.datetimes.test_formats.dr->pandas.date_range(start='1/1/2012', periods=3)
A:pandas.tests.indexes.datetimes.test_formats.idx1->DatetimeIndex([], freq='D')
A:pandas.tests.indexes.datetimes.test_formats.idx2->DatetimeIndex(['2011-01-01'], freq='D')
A:pandas.tests.indexes.datetimes.test_formats.idx3->DatetimeIndex(['2011-01-01', '2011-01-02'], freq='D')
A:pandas.tests.indexes.datetimes.test_formats.idx4->DatetimeIndex(['2011-01-01', '2011-01-02', '2011-01-03'], freq='D')
A:pandas.tests.indexes.datetimes.test_formats.idx5->DatetimeIndex(['2011-01-01 09:00', '2011-01-01 10:00', '2011-01-01 11:00'], freq='H', tz='Asia/Tokyo')
A:pandas.tests.indexes.datetimes.test_formats.idx6->DatetimeIndex(['2011-01-01 09:00', '2011-01-01 10:00', pd.NaT], tz='US/Eastern')
A:pandas.tests.indexes.datetimes.test_formats.idx7->DatetimeIndex(['2011-01-01 09:00', '2011-01-02 10:15'])
A:pandas.tests.indexes.datetimes.test_formats.rng->pandas.bdate_range(datetime(2009, 1, 1), datetime(2010, 1, 1), freq='C')
pandas.tests.indexes.datetimes.test_formats.TestDatetimeIndexRendering
pandas.tests.indexes.datetimes.test_formats.TestDatetimeIndexRendering.test_dti_business_repr(self)
pandas.tests.indexes.datetimes.test_formats.TestDatetimeIndexRendering.test_dti_business_summary(self)
pandas.tests.indexes.datetimes.test_formats.TestDatetimeIndexRendering.test_dti_business_summary_dateutil(self)
pandas.tests.indexes.datetimes.test_formats.TestDatetimeIndexRendering.test_dti_business_summary_pytz(self)
pandas.tests.indexes.datetimes.test_formats.TestDatetimeIndexRendering.test_dti_custom_business_repr(self)
pandas.tests.indexes.datetimes.test_formats.TestDatetimeIndexRendering.test_dti_custom_business_summary(self)
pandas.tests.indexes.datetimes.test_formats.TestDatetimeIndexRendering.test_dti_custom_business_summary_dateutil(self)
pandas.tests.indexes.datetimes.test_formats.TestDatetimeIndexRendering.test_dti_custom_business_summary_pytz(self)
pandas.tests.indexes.datetimes.test_formats.TestDatetimeIndexRendering.test_dti_repr_short(self)
pandas.tests.indexes.datetimes.test_formats.TestDatetimeIndexRendering.test_dti_representation(self,method)
pandas.tests.indexes.datetimes.test_formats.TestDatetimeIndexRendering.test_dti_representation_to_series(self)
pandas.tests.indexes.datetimes.test_formats.TestDatetimeIndexRendering.test_dti_summary(self)
pandas.tests.indexes.datetimes.test_formats.test_to_native_types()
pandas.tests.indexes.dts.test_formats.TestDatetimeIndexRendering
pandas.tests.indexes.dts.test_formats.TestDatetimeIndexRendering.test_dti_business_repr(self)
pandas.tests.indexes.dts.test_formats.TestDatetimeIndexRendering.test_dti_business_summary(self)
pandas.tests.indexes.dts.test_formats.TestDatetimeIndexRendering.test_dti_business_summary_dateutil(self)
pandas.tests.indexes.dts.test_formats.TestDatetimeIndexRendering.test_dti_business_summary_pytz(self)
pandas.tests.indexes.dts.test_formats.TestDatetimeIndexRendering.test_dti_custom_business_repr(self)
pandas.tests.indexes.dts.test_formats.TestDatetimeIndexRendering.test_dti_custom_business_summary(self)
pandas.tests.indexes.dts.test_formats.TestDatetimeIndexRendering.test_dti_custom_business_summary_dateutil(self)
pandas.tests.indexes.dts.test_formats.TestDatetimeIndexRendering.test_dti_custom_business_summary_pytz(self)
pandas.tests.indexes.dts.test_formats.TestDatetimeIndexRendering.test_dti_repr_short(self)
pandas.tests.indexes.dts.test_formats.TestDatetimeIndexRendering.test_dti_representation(self,method)
pandas.tests.indexes.dts.test_formats.TestDatetimeIndexRendering.test_dti_representation_to_series(self)
pandas.tests.indexes.dts.test_formats.TestDatetimeIndexRendering.test_dti_summary(self)
pandas.tests.indexes.dts.test_formats.test_to_native_types()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/datetimes/test_indexing.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_indexing.idx->pandas.date_range('2000-01-01', periods=3)
A:pandas.tests.indexes.datetimes.test_indexing.idx1->pandas.date_range('2011-01-01', '2011-01-31', freq='D', name='idx')
A:pandas.tests.indexes.datetimes.test_indexing.idx2->pandas.date_range('2011-01-01', '2011-01-31', freq='D', tz='Asia/Tokyo', name='idx')
A:pandas.tests.indexes.datetimes.test_indexing.expected->DatetimeIndex(['2000-01-01 09:00', '2000-01-01 11:00', '2000-01-01 13:00', '2000-01-01 15:00', '2000-01-01 17:00'], freq=None, name='idx', tz=tz)
A:pandas.tests.indexes.datetimes.test_indexing.rng->pandas.bdate_range(START, END, freq='C')
A:pandas.tests.indexes.datetimes.test_indexing.exp->numpy.array([0, 1, 2], dtype=np.intp)
A:pandas.tests.indexes.datetimes.test_indexing.i->pandas.date_range('20130101', periods=3, tz='US/Eastern')
A:pandas.tests.indexes.datetimes.test_indexing.result->pandas.date_range('1970-01-01', periods=10).get_value(arr, key.to_datetime64())
A:pandas.tests.indexes.datetimes.test_indexing.i2->Index([pd.NaT, pd.NaT] + i[2:].tolist())
A:pandas.tests.indexes.datetimes.test_indexing.dti->pandas.date_range('1970-01-01', periods=10)
A:pandas.tests.indexes.datetimes.test_indexing.taken1->pandas.date_range('2000-01-01', periods=3).take([5, 6, 8, 12])
A:pandas.tests.indexes.datetimes.test_indexing.key->pandas.Timestamp('2019-12-12 10:19:25', tz='US/Eastern')
A:pandas.tests.indexes.datetimes.test_indexing.res->pandas.date_range('2000-01-01', periods=3).insert(0, null)
A:pandas.tests.indexes.datetimes.test_indexing.expected_0->date_range(start='2000-02-01', periods=4, freq='M', name='idx')
A:pandas.tests.indexes.datetimes.test_indexing.expected_3->DatetimeIndex(['2000-01-31', '2000-02-29', '2000-03-31', '2000-04-30'], name='idx', freq='M')
A:pandas.tests.indexes.datetimes.test_indexing.expected_1_nofreq->DatetimeIndex(['2000-01-31', '2000-01-31', '2000-02-29', '2000-03-31'], name='idx', freq=None)
A:pandas.tests.indexes.datetimes.test_indexing.expected_3_nofreq->DatetimeIndex(['2000-01-31', '2000-02-29', '2000-03-31', '2000-01-02'], name='idx', freq=None)
A:pandas.tests.indexes.datetimes.test_indexing.expected_4->date_range(start='2000-01-01', periods=4, freq='M', name='idx')
A:pandas.tests.indexes.datetimes.test_indexing.expected_1->DatetimeIndex(['2000-01-31', '2000-03-31', '2000-04-30', '2000-05-31'], freq=None, name='idx')
A:pandas.tests.indexes.datetimes.test_indexing.expected_0_2->date_range(start='2000-01-04', periods=7, freq='D', name='idx')
A:pandas.tests.indexes.datetimes.test_indexing.expected_7_9->date_range(start='2000-01-01', periods=7, freq='D', name='idx')
A:pandas.tests.indexes.datetimes.test_indexing.expected_3_5->DatetimeIndex(['2000-01-01', '2000-01-02', '2000-01-03', '2000-01-07', '2000-01-08', '2000-01-09', '2000-01-10'], freq=None, name='idx')
A:pandas.tests.indexes.datetimes.test_indexing.ts->pandas.Series(1, index=pd.date_range('2000-01-01 09:00', periods=10, freq='H', name='idx', tz=tz))
A:pandas.tests.indexes.datetimes.test_indexing.arr->numpy.arange(6, 8)
A:pandas.tests.indexes.datetimes.test_indexing.index->DatetimeIndex(['1/3/2000', 'NaT'])
pandas.tests.indexes.datetimes.test_indexing.TestDatetimeIndex
pandas.tests.indexes.datetimes.test_indexing.TestDatetimeIndex.test_delete(self)
pandas.tests.indexes.datetimes.test_indexing.TestDatetimeIndex.test_delete_slice(self)
pandas.tests.indexes.datetimes.test_indexing.TestDatetimeIndex.test_get_indexer(self)
pandas.tests.indexes.datetimes.test_indexing.TestDatetimeIndex.test_get_loc(self)
pandas.tests.indexes.datetimes.test_indexing.TestDatetimeIndex.test_get_loc_nat(self)
pandas.tests.indexes.datetimes.test_indexing.TestDatetimeIndex.test_get_value(self)
pandas.tests.indexes.datetimes.test_indexing.TestDatetimeIndex.test_insert(self)
pandas.tests.indexes.datetimes.test_indexing.TestDatetimeIndex.test_insert_invalid_na(self,tz)
pandas.tests.indexes.datetimes.test_indexing.TestDatetimeIndex.test_insert_nat(self,tz,null)
pandas.tests.indexes.datetimes.test_indexing.TestDatetimeIndex.test_reasonable_key_error(self)
pandas.tests.indexes.datetimes.test_indexing.TestDatetimeIndex.test_timedelta_invalid_key(self,key)
pandas.tests.indexes.datetimes.test_indexing.TestGetItem
pandas.tests.indexes.datetimes.test_indexing.TestGetItem.test_dti_business_getitem(self)
pandas.tests.indexes.datetimes.test_indexing.TestGetItem.test_dti_business_getitem_matplotlib_hackaround(self)
pandas.tests.indexes.datetimes.test_indexing.TestGetItem.test_dti_custom_getitem(self)
pandas.tests.indexes.datetimes.test_indexing.TestGetItem.test_dti_custom_getitem_matplotlib_hackaround(self)
pandas.tests.indexes.datetimes.test_indexing.TestGetItem.test_ellipsis(self)
pandas.tests.indexes.datetimes.test_indexing.TestGetItem.test_getitem(self)
pandas.tests.indexes.datetimes.test_indexing.TestGetLoc
pandas.tests.indexes.datetimes.test_indexing.TestGetLoc.test_get_loc_tz_aware(self)
pandas.tests.indexes.datetimes.test_indexing.TestTake
pandas.tests.indexes.datetimes.test_indexing.TestTake.test_take(self)
pandas.tests.indexes.datetimes.test_indexing.TestTake.test_take2(self,tz)
pandas.tests.indexes.datetimes.test_indexing.TestTake.test_take_fill_value(self)
pandas.tests.indexes.datetimes.test_indexing.TestTake.test_take_fill_value_with_timezone(self)
pandas.tests.indexes.datetimes.test_indexing.TestTake.test_take_invalid_kwargs(self)
pandas.tests.indexes.datetimes.test_indexing.TestWhere
pandas.tests.indexes.datetimes.test_indexing.TestWhere.test_where_invalid_dtypes(self)
pandas.tests.indexes.datetimes.test_indexing.TestWhere.test_where_other(self)
pandas.tests.indexes.datetimes.test_indexing.TestWhere.test_where_tz(self)
pandas.tests.indexes.dts.test_indexing.TestDatetimeIndex
pandas.tests.indexes.dts.test_indexing.TestDatetimeIndex.test_delete(self)
pandas.tests.indexes.dts.test_indexing.TestDatetimeIndex.test_delete_slice(self)
pandas.tests.indexes.dts.test_indexing.TestDatetimeIndex.test_get_indexer(self)
pandas.tests.indexes.dts.test_indexing.TestDatetimeIndex.test_get_loc(self)
pandas.tests.indexes.dts.test_indexing.TestDatetimeIndex.test_get_loc_nat(self)
pandas.tests.indexes.dts.test_indexing.TestDatetimeIndex.test_get_value(self)
pandas.tests.indexes.dts.test_indexing.TestDatetimeIndex.test_insert(self)
pandas.tests.indexes.dts.test_indexing.TestDatetimeIndex.test_insert_invalid_na(self,tz)
pandas.tests.indexes.dts.test_indexing.TestDatetimeIndex.test_insert_nat(self,tz,null)
pandas.tests.indexes.dts.test_indexing.TestDatetimeIndex.test_reasonable_key_error(self)
pandas.tests.indexes.dts.test_indexing.TestDatetimeIndex.test_timedelta_invalid_key(self,key)
pandas.tests.indexes.dts.test_indexing.TestGetItem
pandas.tests.indexes.dts.test_indexing.TestGetItem.test_dti_business_getitem(self)
pandas.tests.indexes.dts.test_indexing.TestGetItem.test_dti_business_getitem_matplotlib_hackaround(self)
pandas.tests.indexes.dts.test_indexing.TestGetItem.test_dti_custom_getitem(self)
pandas.tests.indexes.dts.test_indexing.TestGetItem.test_dti_custom_getitem_matplotlib_hackaround(self)
pandas.tests.indexes.dts.test_indexing.TestGetItem.test_ellipsis(self)
pandas.tests.indexes.dts.test_indexing.TestGetItem.test_getitem(self)
pandas.tests.indexes.dts.test_indexing.TestGetLoc
pandas.tests.indexes.dts.test_indexing.TestGetLoc.test_get_loc_tz_aware(self)
pandas.tests.indexes.dts.test_indexing.TestTake
pandas.tests.indexes.dts.test_indexing.TestTake.test_take(self)
pandas.tests.indexes.dts.test_indexing.TestTake.test_take2(self,tz)
pandas.tests.indexes.dts.test_indexing.TestTake.test_take_fill_value(self)
pandas.tests.indexes.dts.test_indexing.TestTake.test_take_fill_value_with_timezone(self)
pandas.tests.indexes.dts.test_indexing.TestTake.test_take_invalid_kwargs(self)
pandas.tests.indexes.dts.test_indexing.TestWhere
pandas.tests.indexes.dts.test_indexing.TestWhere.test_where_invalid_dtypes(self)
pandas.tests.indexes.dts.test_indexing.TestWhere.test_where_other(self)
pandas.tests.indexes.dts.test_indexing.TestWhere.test_where_tz(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/datetimes/test_constructors.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_constructors.result->Index(np.array([Timestamp('2019', tz='UTC'), np.nan], dtype=object))
A:pandas.tests.indexes.datetimes.test_constructors.dti->date_range(start='1/1/2005', end='12/1/2005', freq='M')
A:pandas.tests.indexes.datetimes.test_constructors.ci->pandas.CategoricalIndex(dti)
A:pandas.tests.indexes.datetimes.test_constructors.carr->pandas.Categorical(dti)
A:pandas.tests.indexes.datetimes.test_constructors.cser->pandas.Series(ci)
A:pandas.tests.indexes.datetimes.test_constructors.data->numpy.array([0], dtype='m8[ns]')
A:pandas.tests.indexes.datetimes.test_constructors.df->pandas.DataFrame({'dt': pd.date_range('20130101', periods=3), 'dttz': pd.date_range('20130101', periods=3, tz='US/Eastern'), 'dt_with_null': [pd.Timestamp('20130101'), pd.NaT, pd.Timestamp('20130103')], 'dtns': pd.date_range('20130101', periods=3, freq='ns')})
A:pandas.tests.indexes.datetimes.test_constructors.i->pandas.date_range('20130101', periods=5, freq='H', tz=tz)
A:pandas.tests.indexes.datetimes.test_constructors.expected->DatetimeIndex([Timestamp('2019', tz='UTC'), pd.NaT])
A:pandas.tests.indexes.datetimes.test_constructors.i2->DatetimeIndex(i.tz_localize(None).asi8, tz='UTC')
A:pandas.tests.indexes.datetimes.test_constructors.exp->DatetimeIndex(['1970-01-01 00:00:00.00000000', '1970-01-01 00:00:00.00000001', '1970-01-01 00:00:00.00000002'])
A:pandas.tests.indexes.datetimes.test_constructors.val->numpy.datetime64('2000-01-01 00:00:00', 'ns')
A:pandas.tests.indexes.datetimes.test_constructors.values->numpy.array([val.view('i8')])
A:pandas.tests.indexes.datetimes.test_constructors.rng->DatetimeIndex(['1-1-2000 00:00:01'])
A:pandas.tests.indexes.datetimes.test_constructors.strings->numpy.array(['2000-01-01', '2000-01-02', 'NaT'])
A:pandas.tests.indexes.datetimes.test_constructors.from_ints->DatetimeIndex(expected.asi8)
A:pandas.tests.indexes.datetimes.test_constructors.idx->date_range(end=edate, freq=('D', 5), periods=20)
A:pandas.tests.indexes.datetimes.test_constructors.expected_i8->date_range('2013-01-01T00:00:00', '2016-01-01T23:59:59', freq=freq, tz='Asia/Tokyo')
A:pandas.tests.indexes.datetimes.test_constructors.t1->Timestamp(1352934390 * 1000000000 + 1000000 + 1000 + 1)
A:pandas.tests.indexes.datetimes.test_constructors.dti.tz->pytz.timezone('US/Pacific')
A:pandas.tests.indexes.datetimes.test_constructors.start->Timestamp('2013-01-01 06:00:00', tz='America/Los_Angeles')
A:pandas.tests.indexes.datetimes.test_constructors.end->Timestamp('2013-01-02 06:00:00', tz='America/Los_Angeles')
A:pandas.tests.indexes.datetimes.test_constructors.ts->Timestamp('2018-01-01', tz=tz)
A:pandas.tests.indexes.datetimes.test_constructors.index->DatetimeIndex(arr, copy=True)
A:pandas.tests.indexes.datetimes.test_constructors.test->test.resample('Y').mean().resample('Y').mean()
A:pandas.tests.indexes.datetimes.test_constructors.tz->dateutil.tz.tzlocal()
A:pandas.tests.indexes.datetimes.test_constructors.rng2->date_range('2014', '2015', freq='MS', tz=tz)
A:pandas.tests.indexes.datetimes.test_constructors.rng1->date_range('2014', '2015', freq='M', tz=tz)
A:pandas.tests.indexes.datetimes.test_constructors.expected1->date_range('2014-01-31', '2014-12-31', freq='M', tz=tz)
A:pandas.tests.indexes.datetimes.test_constructors.expected2->date_range('2014-01-01', '2015-01-01', freq='MS', tz=tz)
A:pandas.tests.indexes.datetimes.test_constructors.rng3->date_range('2014', '2020', freq='A', tz=tz)
A:pandas.tests.indexes.datetimes.test_constructors.expected3->date_range('2014-12-31', '2019-12-31', freq='A', tz=tz)
A:pandas.tests.indexes.datetimes.test_constructors.rng4->date_range('2014', '2020', freq='AS', tz=tz)
A:pandas.tests.indexes.datetimes.test_constructors.expected4->date_range('2014-01-01', '2020-01-01', freq='AS', tz=tz)
A:pandas.tests.indexes.datetimes.test_constructors.arr->to_datetime(['1/1/2005', '1/2/2005', 'Jan 3, 2005', '2005-01-04'])
A:pandas.tests.indexes.datetimes.test_constructors.org->date_range(start='2001/02/01 09:00', freq=freq, tz='US/Pacific', periods=1)
A:pandas.tests.indexes.datetimes.test_constructors.idx1->date_range(start=sdate, end=edate, freq='BQ')
A:pandas.tests.indexes.datetimes.test_constructors.idx2->date_range(start=sdate, end=edate, freq=offsets.BQuarterEnd(startingMonth=12))
A:pandas.tests.indexes.datetimes.test_constructors.idx3->DatetimeIndex(arr)
A:pandas.tests.indexes.datetimes.test_constructors.idx4->DatetimeIndex(arr)
A:pandas.tests.indexes.datetimes.test_constructors.idx5->DatetimeIndex(arr)
A:pandas.tests.indexes.datetimes.test_constructors.idx6->DatetimeIndex(arr)
A:pandas.tests.indexes.datetimes.test_constructors.idx7->DatetimeIndex(['12/05/2007', '25/01/2008'], dayfirst=True)
A:pandas.tests.indexes.datetimes.test_constructors.idx8->DatetimeIndex(['2007/05/12', '2008/01/25'], dayfirst=False, yearfirst=True)
A:pandas.tests.indexes.datetimes.test_constructors.sdate->datetime(1999, 12, 25)
A:pandas.tests.indexes.datetimes.test_constructors.edate->datetime(2000, 1, 1)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_000constructor_resolution(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_categorical_preserves_tz(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_base_constructor(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_caching(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_dti_with_mixed_timezones(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_from_replaced_timestamps_with_dst(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_index_with_mixed_timezones(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_index_with_mixed_timezones_with_NaT(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_int_rountrip(self,tz_naive_fixture)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_outofbounds(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_with_alt(self,kwargs,tz_aware_fixture)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_with_alt_tz_localize(self,kwargs,tz_aware_fixture)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_with_nat_and_tzlocal(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_with_ndarray(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_construction_with_tz_and_tz_aware_dti(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_coverage(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_datetime64_tzformat(self,freq)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_dtype(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_invalid_dtype_raises(self,dtype)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_name(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_no_precision_raises(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_start_end_with_tz(self,tz)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_timestamp_near_dst(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_with_int_tz(self,klass,box,tz,dtype)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_with_non_normalized_pytz(self,tz)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_constructor_wrong_precision_raises(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_disallow_setting_tz(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_dti_with_period_data_raises(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_dti_with_timedelta64_data_raises(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_freq_validation_with_nat(self,dt_cls)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_index_constructor_with_numpy_object_array_and_timestamp_tz_with_nan(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_integer_values_and_tz_interpreted_as_utc(self)
pandas.tests.indexes.datetimes.test_constructors.TestDatetimeIndex.test_shallow_copy_inherits_array_freq(self,index)
pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries
pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_constructor_int64_nocopy(self)
pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_ctor_str_intraday(self)
pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_datetimeindex_constructor_misc(self)
pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_dti_constructor_preserve_dti_freq(self)
pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_dti_constructor_small_int(self,any_int_dtype)
pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_dti_constructor_years_only(self,tz_naive_fixture)
pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_from_freq_recreate_from_data(self,freq)
pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_index_cast_datetime64_other_units(self)
pandas.tests.indexes.datetimes.test_constructors.TestTimeSeries.test_is_(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_000constructor_resolution(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_categorical_preserves_tz(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_construction_base_constructor(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_construction_caching(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_construction_dti_with_mixed_timezones(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_construction_from_replaced_timestamps_with_dst(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_construction_index_with_mixed_timezones(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_construction_index_with_mixed_timezones_with_NaT(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_construction_int_rountrip(self,tz_naive_fixture)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_construction_outofbounds(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_construction_with_alt(self,kwargs,tz_aware_fixture)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_construction_with_alt_tz_localize(self,kwargs,tz_aware_fixture)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_construction_with_nat_and_tzlocal(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_construction_with_ndarray(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_construction_with_tz_and_tz_aware_dti(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_constructor_coverage(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_constructor_dt64_tzformat(self,freq)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_constructor_dtype(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_constructor_invalid_dtype_raises(self,dtype)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_constructor_name(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_constructor_no_precision_raises(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_constructor_start_end_with_tz(self,tz)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_constructor_timestamp_near_dst(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_constructor_with_int_tz(self,klass,box,tz,dtype)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_constructor_with_non_normalized_pytz(self,tz)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_constructor_wrong_precision_raises(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_disallow_setting_tz(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_dti_with_period_data_raises(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_dti_with_timedelta64_data_raises(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_freq_validation_with_nat(self,dt_cls)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_index_constructor_with_numpy_object_array_and_timestamp_tz_with_nan(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_integer_values_and_tz_interpreted_as_utc(self)
pandas.tests.indexes.dts.test_constructors.TestDatetimeIndex.test_shallow_copy_inherits_array_freq(self,index)
pandas.tests.indexes.dts.test_constructors.TestTimeSeries
pandas.tests.indexes.dts.test_constructors.TestTimeSeries.test_constructor_int64_nocopy(self)
pandas.tests.indexes.dts.test_constructors.TestTimeSeries.test_ctor_str_intraday(self)
pandas.tests.indexes.dts.test_constructors.TestTimeSeries.test_dti_constructor_preserve_dti_freq(self)
pandas.tests.indexes.dts.test_constructors.TestTimeSeries.test_dti_constructor_small_int(self,any_int_dtype)
pandas.tests.indexes.dts.test_constructors.TestTimeSeries.test_dti_constructor_years_only(self,tz_naive_fixture)
pandas.tests.indexes.dts.test_constructors.TestTimeSeries.test_dtindex_constructor_misc(self)
pandas.tests.indexes.dts.test_constructors.TestTimeSeries.test_from_freq_recreate_from_data(self,freq)
pandas.tests.indexes.dts.test_constructors.TestTimeSeries.test_index_cast_dt64_other_units(self)
pandas.tests.indexes.dts.test_constructors.TestTimeSeries.test_is_(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/datetimes/test_scalar_compat.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_scalar_compat.rng->date_range('1/1/2000 9:30', periods=10, freq='D')
A:pandas.tests.indexes.datetimes.test_scalar_compat.idx->pandas._testing.makeDateIndex(100)
A:pandas.tests.indexes.datetimes.test_scalar_compat.result->DatetimeIndex([pd.NaT, Timestamp('2018-01-01 01:00:00')]).normalize()
A:pandas.tests.indexes.datetimes.test_scalar_compat.dti->DatetimeIndex([pd.NaT, Timestamp('2018-01-01 01:00:00')])
A:pandas.tests.indexes.datetimes.test_scalar_compat.expected->DatetimeIndex([pd.NaT, Timestamp('2018-01-01')])
A:pandas.tests.indexes.datetimes.test_scalar_compat.expected_rng->DatetimeIndex([Timestamp('2016-01-01 00:00:00', tz=tz, freq='2T'), Timestamp('2016-01-01 00:02:00', tz=tz, freq='2T'), Timestamp('2016-01-01 00:04:00', tz=tz, freq='2T'), Timestamp('2016-01-01 00:06:00', tz=tz, freq='2T'), Timestamp('2016-01-01 00:08:00', tz=tz, freq='2T')])
A:pandas.tests.indexes.datetimes.test_scalar_compat.index->DatetimeIndex(['2016-10-17 12:00:00.001501031'])
A:pandas.tests.indexes.datetimes.test_scalar_compat.dt->date_range(start=start, freq=index_freq, periods=periods)
A:pandas.tests.indexes.datetimes.test_scalar_compat.func->getattr(dt, rounder)
A:pandas.tests.indexes.datetimes.test_scalar_compat.diff->abs(result.asi8 - dt.asi8)
A:pandas.tests.indexes.datetimes.test_scalar_compat.arr_ns->numpy.array([1380585600000000000, 1380585600000000000]).astype('datetime64[ns]')
A:pandas.tests.indexes.datetimes.test_scalar_compat.rng_ns->DatetimeIndex(arr_ns)
A:pandas.tests.indexes.datetimes.test_scalar_compat.rng_ns_normalized->DatetimeIndex(arr_ns).normalize()
A:pandas.tests.indexes.datetimes.test_scalar_compat.dr->date_range(start=Timestamp('2000-02-27'), periods=5, freq='S')
A:pandas.tests.indexes.datetimes.test_scalar_compat.r1->pandas.Index([x.to_julian_date() for x in dr])
A:pandas.tests.indexes.datetimes.test_scalar_compat.r2->date_range(start=Timestamp('2000-02-27'), periods=5, freq='S').to_julian_date()
pandas.tests.indexes.datetimes.test_scalar_compat.TestDateTimeIndexToJulianDate
pandas.tests.indexes.datetimes.test_scalar_compat.TestDateTimeIndexToJulianDate.test_1700(self)
pandas.tests.indexes.datetimes.test_scalar_compat.TestDateTimeIndexToJulianDate.test_2000(self)
pandas.tests.indexes.datetimes.test_scalar_compat.TestDateTimeIndexToJulianDate.test_hour(self)
pandas.tests.indexes.datetimes.test_scalar_compat.TestDateTimeIndexToJulianDate.test_minute(self)
pandas.tests.indexes.datetimes.test_scalar_compat.TestDateTimeIndexToJulianDate.test_second(self)
pandas.tests.indexes.datetimes.test_scalar_compat.TestDatetimeIndexOps
pandas.tests.indexes.datetimes.test_scalar_compat.TestDatetimeIndexOps.test_ceil_floor_edge(self,test_input,rounder,freq,expected)
pandas.tests.indexes.datetimes.test_scalar_compat.TestDatetimeIndexOps.test_dti_date(self)
pandas.tests.indexes.datetimes.test_scalar_compat.TestDatetimeIndexOps.test_dti_date_out_of_range(self,data)
pandas.tests.indexes.datetimes.test_scalar_compat.TestDatetimeIndexOps.test_dti_time(self)
pandas.tests.indexes.datetimes.test_scalar_compat.TestDatetimeIndexOps.test_dti_timestamp_fields(self,field)
pandas.tests.indexes.datetimes.test_scalar_compat.TestDatetimeIndexOps.test_dti_timestamp_freq_fields(self)
pandas.tests.indexes.datetimes.test_scalar_compat.TestDatetimeIndexOps.test_no_rounding_occurs(self,tz_naive_fixture)
pandas.tests.indexes.datetimes.test_scalar_compat.TestDatetimeIndexOps.test_normalize(self)
pandas.tests.indexes.datetimes.test_scalar_compat.TestDatetimeIndexOps.test_normalize_nat(self)
pandas.tests.indexes.datetimes.test_scalar_compat.TestDatetimeIndexOps.test_round(self,tz_naive_fixture)
pandas.tests.indexes.datetimes.test_scalar_compat.TestDatetimeIndexOps.test_round_daily(self)
pandas.tests.indexes.datetimes.test_scalar_compat.TestDatetimeIndexOps.test_round_int64(self,start,index_freq,periods,round_freq)
pandas.tests.indexes.datetimes.test_scalar_compat.TestDatetimeIndexOps.test_round_invalid(self,freq,error_msg)
pandas.tests.indexes.dts.test_scalar_compat.TestDateTimeIndexToJulianDate
pandas.tests.indexes.dts.test_scalar_compat.TestDateTimeIndexToJulianDate.test_1700(self)
pandas.tests.indexes.dts.test_scalar_compat.TestDateTimeIndexToJulianDate.test_2000(self)
pandas.tests.indexes.dts.test_scalar_compat.TestDateTimeIndexToJulianDate.test_hour(self)
pandas.tests.indexes.dts.test_scalar_compat.TestDateTimeIndexToJulianDate.test_minute(self)
pandas.tests.indexes.dts.test_scalar_compat.TestDateTimeIndexToJulianDate.test_second(self)
pandas.tests.indexes.dts.test_scalar_compat.TestDatetimeIndexOps
pandas.tests.indexes.dts.test_scalar_compat.TestDatetimeIndexOps.test_ceil_floor_edge(self,test_input,rounder,freq,expected)
pandas.tests.indexes.dts.test_scalar_compat.TestDatetimeIndexOps.test_dti_date(self)
pandas.tests.indexes.dts.test_scalar_compat.TestDatetimeIndexOps.test_dti_date_out_of_range(self,data)
pandas.tests.indexes.dts.test_scalar_compat.TestDatetimeIndexOps.test_dti_time(self)
pandas.tests.indexes.dts.test_scalar_compat.TestDatetimeIndexOps.test_dti_timestamp_fields(self,field)
pandas.tests.indexes.dts.test_scalar_compat.TestDatetimeIndexOps.test_dti_timestamp_freq_fields(self)
pandas.tests.indexes.dts.test_scalar_compat.TestDatetimeIndexOps.test_no_rounding_occurs(self,tz_naive_fixture)
pandas.tests.indexes.dts.test_scalar_compat.TestDatetimeIndexOps.test_normalize(self)
pandas.tests.indexes.dts.test_scalar_compat.TestDatetimeIndexOps.test_normalize_nat(self)
pandas.tests.indexes.dts.test_scalar_compat.TestDatetimeIndexOps.test_round(self,tz_naive_fixture)
pandas.tests.indexes.dts.test_scalar_compat.TestDatetimeIndexOps.test_round_daily(self)
pandas.tests.indexes.dts.test_scalar_compat.TestDatetimeIndexOps.test_round_int64(self,start,index_freq,periods,round_freq)
pandas.tests.indexes.dts.test_scalar_compat.TestDatetimeIndexOps.test_round_invalid(self,freq,error_msg)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/timedeltas/test_astype.py----------------------------------------
A:pandas.tests.indexes.timedeltas.test_astype.idx->TimedeltaIndex([100000000000000.0, 'NaT', NaT, np.NaN])
A:pandas.tests.indexes.timedeltas.test_astype.result->pandas.timedelta_range('1H', periods=2)._data.astype(bool)
A:pandas.tests.indexes.timedeltas.test_astype.expected->numpy.array([True, True])
A:pandas.tests.indexes.timedeltas.test_astype.rng->timedelta_range('1 days', periods=10)
A:pandas.tests.indexes.timedeltas.test_astype.arr->timedelta_range('1H', periods=2)
A:pandas.tests.indexes.timedeltas.test_astype.obj->pandas.timedelta_range('1H', periods=2)
pandas.tests.indexes.timedeltas.test_astype.TestTimedeltaIndex
pandas.tests.indexes.timedeltas.test_astype.TestTimedeltaIndex.test_astype(self)
pandas.tests.indexes.timedeltas.test_astype.TestTimedeltaIndex.test_astype_array_fallback(self)
pandas.tests.indexes.timedeltas.test_astype.TestTimedeltaIndex.test_astype_category(self)
pandas.tests.indexes.timedeltas.test_astype.TestTimedeltaIndex.test_astype_object(self)
pandas.tests.indexes.timedeltas.test_astype.TestTimedeltaIndex.test_astype_object_with_nat(self)
pandas.tests.indexes.timedeltas.test_astype.TestTimedeltaIndex.test_astype_raises(self,dtype)
pandas.tests.indexes.timedeltas.test_astype.TestTimedeltaIndex.test_astype_timedelta64(self)
pandas.tests.indexes.timedeltas.test_astype.TestTimedeltaIndex.test_astype_uint(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/timedeltas/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/timedeltas/test_join.py----------------------------------------
A:pandas.tests.indexes.timedeltas.test_join.rng->timedelta_range('1 days', periods=10)
A:pandas.tests.indexes.timedeltas.test_join.idx->Index(['a', 'b', 'c', 'd'])
A:pandas.tests.indexes.timedeltas.test_join.result->tdi[:5].join(tdi[6:], how='outer')
A:pandas.tests.indexes.timedeltas.test_join.index->timedelta_range('1 day', periods=10)
A:pandas.tests.indexes.timedeltas.test_join.joined->df.columns.join(df.index, how='outer').join(df.columns)
A:pandas.tests.indexes.timedeltas.test_join.df->pandas._testing.makeCustomDataframe(10, 10, data_gen_f=lambda *args, **kwargs: np.random.randn(), r_idx_type='i', c_idx_type='td')
A:pandas.tests.indexes.timedeltas.test_join.cols->pandas._testing.makeCustomDataframe(10, 10, data_gen_f=lambda *args, **kwargs: np.random.randn(), r_idx_type='i', c_idx_type='td').columns.join(df.index, how='outer')
A:pandas.tests.indexes.timedeltas.test_join.tdi->timedelta_range('1 day', periods=10)
A:pandas.tests.indexes.timedeltas.test_join.expected->timedelta_range('1 day', periods=10).delete(5)
pandas.tests.indexes.timedeltas.test_join.TestJoin
pandas.tests.indexes.timedeltas.test_join.TestJoin.test_append_join_nondatetimeindex(self)
pandas.tests.indexes.timedeltas.test_join.TestJoin.test_append_join_nondtindex(self)
pandas.tests.indexes.timedeltas.test_join.TestJoin.test_does_not_convert_mixed_integer(self)
pandas.tests.indexes.timedeltas.test_join.TestJoin.test_join_preserves_freq(self)
pandas.tests.indexes.timedeltas.test_join.TestJoin.test_join_self(self,join_type)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/timedeltas/test_tools.py----------------------------------------
A:pandas.tests.indexes.timedeltas.test_tools.result->pandas.to_timedelta(arr, unit='s')
A:pandas.tests.indexes.timedeltas.test_tools.expected->Series([np.timedelta64(1000000000, 'ns'), timedelta_NaT], dtype='<m8[ns]')
A:pandas.tests.indexes.timedeltas.test_tools.arr->numpy.array([1] * 5, dtype='timedelta64[D]')
A:pandas.tests.indexes.timedeltas.test_tools.invalid_data->Series(['apple', '1 days'])
A:pandas.tests.indexes.timedeltas.test_tools.timedelta_NaT->numpy.timedelta64('NaT')
A:pandas.tests.indexes.timedeltas.test_tools.actual->pandas.to_timedelta(pd.NaT)
A:pandas.tests.indexes.timedeltas.test_tools.expected_asi8->numpy.arange(999990000, int(1000000000.0), 1000, dtype='int64')
pandas.tests.indexes.timedeltas.test_tools.TestTimedeltas
pandas.tests.indexes.timedeltas.test_tools.TestTimedeltas.test_to_timedelta(self)
pandas.tests.indexes.timedeltas.test_tools.TestTimedeltas.test_to_timedelta_float(self)
pandas.tests.indexes.timedeltas.test_tools.TestTimedeltas.test_to_timedelta_invalid(self)
pandas.tests.indexes.timedeltas.test_tools.TestTimedeltas.test_to_timedelta_on_missing_values(self)
pandas.tests.indexes.timedeltas.test_tools.TestTimedeltas.test_to_timedelta_via_apply(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/timedeltas/test_setops.py----------------------------------------
A:pandas.tests.indexes.timedeltas.test_setops.i1->Int64Index(np.arange(0, 20, 2))
A:pandas.tests.indexes.timedeltas.test_setops.i2->timedelta_range(start='1 day', periods=10, freq='D')
A:pandas.tests.indexes.timedeltas.test_setops.result->TimedeltaIndex(['1 hour', '2 hour', '4 hour', '3 hour'], name='idx').intersection(rng, sort=sort)
A:pandas.tests.indexes.timedeltas.test_setops.expected->expected.sort_values().sort_values()
A:pandas.tests.indexes.timedeltas.test_setops.tdi->pandas.timedelta_range('1 Day', periods=5)
A:pandas.tests.indexes.timedeltas.test_setops.idx->TimedeltaIndex(['3d', '1d', '2d'])
A:pandas.tests.indexes.timedeltas.test_setops.ordered->TimedeltaIndex(idx.sort_values(), freq='infer')
A:pandas.tests.indexes.timedeltas.test_setops.rng_a->timedelta_range('1 day', periods=4, freq='3H')
A:pandas.tests.indexes.timedeltas.test_setops.rng_b->timedelta_range('1 day', periods=4, freq='4H')
A:pandas.tests.indexes.timedeltas.test_setops.exp->TimedeltaIndex(sorted(set(left) | set(right)))
A:pandas.tests.indexes.timedeltas.test_setops.left->timedelta_range('1 day', '30d')
A:pandas.tests.indexes.timedeltas.test_setops.right->TimedeltaIndex(['2 day 13:04:21.322000', '1 day 15:27:24.873000', '1 day 15:31:05.350000'])
A:pandas.tests.indexes.timedeltas.test_setops.index_1->timedelta_range('1 day', periods=0, freq='h')
A:pandas.tests.indexes.timedeltas.test_setops.first->timedelta_range('1 day', periods=4, freq='h')
A:pandas.tests.indexes.timedeltas.test_setops.second->timedelta_range('1 day', periods=4, freq='h')
A:pandas.tests.indexes.timedeltas.test_setops.intersect->timedelta_range('1 day', periods=4, freq='h').intersection(second, sort=sort)
A:pandas.tests.indexes.timedeltas.test_setops.inter->timedelta_range('1 day', periods=4, freq='h').intersection(first, sort=sort)
A:pandas.tests.indexes.timedeltas.test_setops.index_2->timedelta_range('1 day', periods=3, freq='h')
A:pandas.tests.indexes.timedeltas.test_setops.base->TimedeltaIndex(['1 hour', '2 hour', '4 hour', '3 hour'], name='idx')
A:pandas.tests.indexes.timedeltas.test_setops.index->pandas.TimedeltaIndex(['5 days', '3 days', '2 days', '4 days', '1 days', '0 days'])
A:pandas.tests.indexes.timedeltas.test_setops.other->timedelta_range('2 days', '5 days', freq='D')
A:pandas.tests.indexes.timedeltas.test_setops.idx_diff->pandas.TimedeltaIndex(['5 days', '3 days', '2 days', '4 days', '1 days', '0 days']).difference(other, sort)
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndex
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndex.test_intersection(self,rng,expected,sort)
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndex.test_intersection_bug_1708(self)
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndex.test_intersection_equal(self,sort)
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndex.test_intersection_non_monotonic(self,rng,expected,sort)
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndex.test_intersection_zero_length(self,period_1,period_2,sort)
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndex.test_union(self)
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndex.test_union_bug_1730(self)
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndex.test_union_bug_1745(self)
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndex.test_union_bug_4564(self)
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndex.test_union_coverage(self)
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndex.test_union_freq_infer(self)
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndex.test_union_sort_false(self)
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndex.test_zero_length_input_index(self,sort)
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndexDifference
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndexDifference.test_difference_freq(self,sort)
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndexDifference.test_difference_sort(self,sort)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/timedeltas/test_timedelta.py----------------------------------------
A:pandas.tests.indexes.timedeltas.test_timedelta.idx->Index(['a', 'b', 'c', 'd'])
A:pandas.tests.indexes.timedeltas.test_timedelta.exp->Int64Index([f(x) for x in rng])
A:pandas.tests.indexes.timedeltas.test_timedelta.index->timedelta_range('1 days', periods=10)
A:pandas.tests.indexes.timedeltas.test_timedelta.result->TimedeltaIndex(td).astype('timedelta64[s]')
A:pandas.tests.indexes.timedeltas.test_timedelta.idx1->TimedeltaIndex(['1 day', '1 day', '2 day', '2 day', '3 day', '3 day'])
A:pandas.tests.indexes.timedeltas.test_timedelta.exp_arr->numpy.array([0, 1, 2, 3], dtype=np.intp)
A:pandas.tests.indexes.timedeltas.test_timedelta.exp_idx->TimedeltaIndex(['1 day', '2 day', '3 day'])
A:pandas.tests.indexes.timedeltas.test_timedelta.(arr, idx)->timedelta_range('1 day', periods=4, freq='s').factorize()
A:pandas.tests.indexes.timedeltas.test_timedelta.idx3->timedelta_range('1 day', periods=4, freq='s')
A:pandas.tests.indexes.timedeltas.test_timedelta.joined->df.columns.join(df.index, how='outer').join(df.columns)
A:pandas.tests.indexes.timedeltas.test_timedelta.df->pandas._testing.makeCustomDataframe(10, 10, data_gen_f=lambda *args, **kwargs: randn(), r_idx_type='i', c_idx_type='td')
A:pandas.tests.indexes.timedeltas.test_timedelta.cols->pandas._testing.makeCustomDataframe(10, 10, data_gen_f=lambda *args, **kwargs: randn(), r_idx_type='i', c_idx_type='td').columns.join(df.index, how='outer')
A:pandas.tests.indexes.timedeltas.test_timedelta.ordered->Index(['a', 'b', 'c', 'd']).sort_values(ascending=False)
A:pandas.tests.indexes.timedeltas.test_timedelta.(ordered, dexer)->Index(['a', 'b', 'c', 'd']).sort_values(return_indexer=True, ascending=False)
A:pandas.tests.indexes.timedeltas.test_timedelta.rng->timedelta_range('1 day 1 s', periods=5, freq='h')
A:pandas.tests.indexes.timedeltas.test_timedelta.non_td->Index(list('abc'))
A:pandas.tests.indexes.timedeltas.test_timedelta.expected->Index([31 * 86400, 31 * 86400, 31 * 86400 + 5 * 60 + 3, np.nan])
A:pandas.tests.indexes.timedeltas.test_timedelta.rng_p->pandas._testing.round_trip_pickle(rng)
A:pandas.tests.indexes.timedeltas.test_timedelta.td->TimedeltaIndex(td)
A:pandas.tests.indexes.timedeltas.test_timedelta.a->DataFrame()
A:pandas.tests.indexes.timedeltas.test_timedelta.c->DataFrame({'A': 'foo', 'B': td}, index=td)
A:pandas.tests.indexes.timedeltas.test_timedelta.tdi->pandas.TimedeltaIndex(['1 Day', '2 Days', None, '3 Days', '4 Days'])
A:pandas.tests.indexes.timedeltas.test_timedelta.s->Series(rng)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimeSeries
pandas.tests.indexes.timedeltas.test_timedelta.TestTimeSeries.test_series_box_timedelta(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex(DatetimeLike)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.create_index(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.indices(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_append_join_nondatetimeindex(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_append_join_nondtindex(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_append_numpy_bug_1681(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_argmin_argmax(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_delete_doesnt_infer_freq(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_does_not_convert_mixed_integer(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_factorize(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_fields(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_fillna_timedelta(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_freq_conversion(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_hash_error(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_isin(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_join_self(self,join_type)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_map(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_misc_coverage(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_numeric_compat(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_pass_TimedeltaIndex_to_index(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_pickle(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_pickle_compat_construction(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_shift(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_sort_values(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_unit_m_y_raises(self,unit)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/timedeltas/test_partial_slicing.py----------------------------------------
A:pandas.tests.indexes.timedeltas.test_partial_slicing.dr->pandas.timedelta_range('1d', '5d', freq='H', name='timebucket')
A:pandas.tests.indexes.timedeltas.test_partial_slicing.rng->timedelta_range('1 day 10:11:12', freq='us', periods=2000)
A:pandas.tests.indexes.timedeltas.test_partial_slicing.s->Series(np.arange(len(rng)), index=rng)
A:pandas.tests.indexes.timedeltas.test_partial_slicing.ts->Series(np.arange(20), timedelta_range('0', periods=20, freq='H'))
pandas.tests.indexes.timedeltas.test_partial_slicing.TestSlicing
pandas.tests.indexes.timedeltas.test_partial_slicing.TestSlicing.test_partial_slice(self)
pandas.tests.indexes.timedeltas.test_partial_slicing.TestSlicing.test_partial_slice_high_reso(self)
pandas.tests.indexes.timedeltas.test_partial_slicing.TestSlicing.test_slice_keeps_name(self)
pandas.tests.indexes.timedeltas.test_partial_slicing.TestSlicing.test_slice_with_negative_step(self)
pandas.tests.indexes.timedeltas.test_partial_slicing.TestSlicing.test_slice_with_zero_step_raises(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/timedeltas/test_ops.py----------------------------------------
A:pandas.tests.indexes.timedeltas.test_ops.idx->TimedeltaIndex(['0 days', '2 days', '4 days'])
A:pandas.tests.indexes.timedeltas.test_ops.exp_idx->TimedeltaIndex(['1 days 09:00:00', '1 days 08:00:00', pd.NaT])
A:pandas.tests.indexes.timedeltas.test_ops.expected->Series([3, 2, 1], index=exp_idx)
A:pandas.tests.indexes.timedeltas.test_ops.tdi->pandas.timedelta_range(start=0, periods=10, freq='1s')
A:pandas.tests.indexes.timedeltas.test_ops.ts->pandas.Series(np.random.normal(size=10), index=tdi)
A:pandas.tests.indexes.timedeltas.test_ops.idx1->TimedeltaIndex(['1 hour', '3 hour', '5 hour', '2 hour ', '1 hour'], name='idx1')
A:pandas.tests.indexes.timedeltas.test_ops.idx2->pandas.TimedeltaIndex(['2 days', '1 days', 'NaT'])
A:pandas.tests.indexes.timedeltas.test_ops.ordered->TimedeltaIndex(['0 days', '2 days', '4 days']).sort_values(ascending=False)
A:pandas.tests.indexes.timedeltas.test_ops.(ordered, indexer)->TimedeltaIndex(['0 days', '2 days', '4 days']).sort_values(return_indexer=True, ascending=False)
A:pandas.tests.indexes.timedeltas.test_ops.exp1->TimedeltaIndex(['1 hour', '1 hour', '2 hour', '3 hour', '5 hour'], name='idx1')
A:pandas.tests.indexes.timedeltas.test_ops.exp->TimedeltaIndex(['1 days', '1 days', '1 days', 'NaT', 'NaT', 'NaT', '3 days', '3 days', '3 days'])
A:pandas.tests.indexes.timedeltas.test_ops.result->pandas.TimedeltaIndex(idx.asi8, freq='infer')
A:pandas.tests.indexes.timedeltas.test_ops.idx_dup->TimedeltaIndex(['0 days', '2 days', '4 days']).append(idx)
A:pandas.tests.indexes.timedeltas.test_ops.base->pandas.timedelta_range('1 day', '31 day', freq='D', name='idx')
A:pandas.tests.indexes.timedeltas.test_ops.res->Series(idx).drop_duplicates(keep=False)
A:pandas.tests.indexes.timedeltas.test_ops.index->TimedeltaIndex(['1 days', 'NaT', '3 days'])
A:pandas.tests.indexes.timedeltas.test_ops.oob->pandas.Index([timedelta(days=10 ** 6)] * 3, dtype=object)
A:pandas.tests.indexes.timedeltas.test_ops.oob2->pandas.Index([np.timedelta64(x) for x in oob], dtype=object)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps(Ops)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.setup_method(self,method)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_drop_duplicates(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_drop_duplicates_metadata(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_equals(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_freq_setter(self,values,freq)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_freq_setter_errors(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_infer_freq(self,freq)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_nat(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_nonunique_contains(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_ops_properties(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_order(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_repeat(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_shift(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_unknown_attribute(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_value_counts_unique(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/timedeltas/test_shift.py----------------------------------------
A:pandas.tests.indexes.timedeltas.test_shift.idx->pandas.TimedeltaIndex(['5 hours', '6 hours', '9 hours'], name='xxx')
A:pandas.tests.indexes.timedeltas.test_shift.exp->pandas.TimedeltaIndex(['04:57:00', '05:57:00', '8:57:00'], name='xxx')
A:pandas.tests.indexes.timedeltas.test_shift.result->trange.shift(3, freq='2D 1s')
A:pandas.tests.indexes.timedeltas.test_shift.expected->TimedeltaIndex(['6 days 01:00:03', '7 days 01:00:03', '8 days 01:00:03', '9 days 01:00:03', '10 days 01:00:03'], freq='D')
A:pandas.tests.indexes.timedeltas.test_shift.tdi->TimedeltaIndex(['1 days 01:00:00', '2 days 01:00:00'], freq=None)
pandas.tests.indexes.timedeltas.test_shift.TestTimedeltaIndexShift
pandas.tests.indexes.timedeltas.test_shift.TestTimedeltaIndexShift.test_shift_no_freq(self)
pandas.tests.indexes.timedeltas.test_shift.TestTimedeltaIndexShift.test_tdi_shift_empty(self)
pandas.tests.indexes.timedeltas.test_shift.TestTimedeltaIndexShift.test_tdi_shift_hours(self)
pandas.tests.indexes.timedeltas.test_shift.TestTimedeltaIndexShift.test_tdi_shift_int(self)
pandas.tests.indexes.timedeltas.test_shift.TestTimedeltaIndexShift.test_tdi_shift_minutes(self)
pandas.tests.indexes.timedeltas.test_shift.TestTimedeltaIndexShift.test_tdi_shift_nonstandard_freq(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/timedeltas/test_formats.py----------------------------------------
A:pandas.tests.indexes.timedeltas.test_formats.idx1->TimedeltaIndex([], freq='D')
A:pandas.tests.indexes.timedeltas.test_formats.idx2->TimedeltaIndex(['1 days'], freq='D')
A:pandas.tests.indexes.timedeltas.test_formats.idx3->TimedeltaIndex(['1 days', '2 days'], freq='D')
A:pandas.tests.indexes.timedeltas.test_formats.idx4->TimedeltaIndex(['1 days', '2 days', '3 days'], freq='D')
A:pandas.tests.indexes.timedeltas.test_formats.idx5->TimedeltaIndex(['1 days 00:00:01', '2 days', '3 days'])
A:pandas.tests.indexes.timedeltas.test_formats.result->idx._summary()
pandas.tests.indexes.timedeltas.test_formats.TestTimedeltaIndexRendering
pandas.tests.indexes.timedeltas.test_formats.TestTimedeltaIndexRendering.test_representation(self,method)
pandas.tests.indexes.timedeltas.test_formats.TestTimedeltaIndexRendering.test_representation_to_series(self)
pandas.tests.indexes.timedeltas.test_formats.TestTimedeltaIndexRendering.test_summary(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/timedeltas/test_indexing.py----------------------------------------
A:pandas.tests.indexes.timedeltas.test_indexing.idx->pandas.to_timedelta(['0 days', '1 days', '2 days'])
A:pandas.tests.indexes.timedeltas.test_indexing.idx1->timedelta_range('1 day', '31 day', freq='D', name='idx')
A:pandas.tests.indexes.timedeltas.test_indexing.expected->TimedeltaIndex(['1day', pd.NaT, '2day', '3day'])
A:pandas.tests.indexes.timedeltas.test_indexing.tdi->timedelta_range('1 day', periods=3, freq='D', name='idx')
A:pandas.tests.indexes.timedeltas.test_indexing.i2->Index([pd.NaT, pd.NaT] + tdi[2:].tolist())
A:pandas.tests.indexes.timedeltas.test_indexing.result->pandas.to_timedelta(['0 days', '1 days', '2 days']).delete(slice(n[0], n[-1] + 1))
A:pandas.tests.indexes.timedeltas.test_indexing.taken1->pandas.to_timedelta(['0 days', '1 days', '2 days']).take([2, 4, 10])
A:pandas.tests.indexes.timedeltas.test_indexing.exp->TimedeltaIndex(['4day', '1day', '5day', '2day'], name='idx')
A:pandas.tests.indexes.timedeltas.test_indexing.expected_0->timedelta_range(start='2 Days', periods=4, freq='D', name='idx')
A:pandas.tests.indexes.timedeltas.test_indexing.expected_3->TimedeltaIndex(['1day 00:00:01', '1day 00:00:02', '1day 00:00:03', '1day 00:00:04'], name='idx', freq='s')
A:pandas.tests.indexes.timedeltas.test_indexing.expected_1_nofreq->TimedeltaIndex(['1day 00:00:01', '1day 00:00:01', '1day 00:00:02', '1day 00:00:03'], name='idx', freq=None)
A:pandas.tests.indexes.timedeltas.test_indexing.expected_3_nofreq->TimedeltaIndex(['1day 00:00:01', '1day 00:00:02', '1day 00:00:03', '1day 00:00:05'], name='idx', freq=None)
A:pandas.tests.indexes.timedeltas.test_indexing.expected_4->timedelta_range(start='1 Days', periods=4, freq='D', name='idx')
A:pandas.tests.indexes.timedeltas.test_indexing.expected_1->TimedeltaIndex(['1 day', '3 day', '4 day', '5 day'], freq=None, name='idx')
A:pandas.tests.indexes.timedeltas.test_indexing.expected_0_2->timedelta_range(start='4 days', periods=7, freq='D', name='idx')
A:pandas.tests.indexes.timedeltas.test_indexing.expected_7_9->timedelta_range(start='1 days', periods=7, freq='D', name='idx')
A:pandas.tests.indexes.timedeltas.test_indexing.expected_3_5->TimedeltaIndex(['1 d', '2 d', '3 d', '7 d', '8 d', '9 d', '10d'], freq=None, name='idx')
A:pandas.tests.indexes.timedeltas.test_indexing.tidx->TimedeltaIndex(['1 days 01:00:00', 'NaT', '2 days 01:00:00'])
A:pandas.tests.indexes.timedeltas.test_indexing.target->pandas.to_timedelta(['-1 hour', '12 hours', '1 day 1 hour'])
A:pandas.tests.indexes.timedeltas.test_indexing.res->pandas.to_timedelta(['0 days', '1 days', '2 days']).get_indexer(target, 'nearest', tolerance=Timedelta('1 hour'))
pandas.tests.indexes.timedeltas.test_indexing.TestGetItem
pandas.tests.indexes.timedeltas.test_indexing.TestGetItem.test_ellipsis(self)
pandas.tests.indexes.timedeltas.test_indexing.TestGetItem.test_getitem(self)
pandas.tests.indexes.timedeltas.test_indexing.TestGetItem.test_timestamp_invalid_key(self,key)
pandas.tests.indexes.timedeltas.test_indexing.TestTake
pandas.tests.indexes.timedeltas.test_indexing.TestTake.test_take(self)
pandas.tests.indexes.timedeltas.test_indexing.TestTake.test_take2(self)
pandas.tests.indexes.timedeltas.test_indexing.TestTake.test_take_fill_value(self)
pandas.tests.indexes.timedeltas.test_indexing.TestTake.test_take_invalid_kwargs(self)
pandas.tests.indexes.timedeltas.test_indexing.TestTimedeltaIndex
pandas.tests.indexes.timedeltas.test_indexing.TestTimedeltaIndex.test_delete(self)
pandas.tests.indexes.timedeltas.test_indexing.TestTimedeltaIndex.test_delete_slice(self)
pandas.tests.indexes.timedeltas.test_indexing.TestTimedeltaIndex.test_get_indexer(self)
pandas.tests.indexes.timedeltas.test_indexing.TestTimedeltaIndex.test_get_loc(self)
pandas.tests.indexes.timedeltas.test_indexing.TestTimedeltaIndex.test_get_loc_nat(self)
pandas.tests.indexes.timedeltas.test_indexing.TestTimedeltaIndex.test_insert(self)
pandas.tests.indexes.timedeltas.test_indexing.TestTimedeltaIndex.test_insert_dont_cast_strings(self)
pandas.tests.indexes.timedeltas.test_indexing.TestTimedeltaIndex.test_insert_empty(self)
pandas.tests.indexes.timedeltas.test_indexing.TestTimedeltaIndex.test_insert_invalid_na(self)
pandas.tests.indexes.timedeltas.test_indexing.TestTimedeltaIndex.test_insert_nat(self,null)
pandas.tests.indexes.timedeltas.test_indexing.TestWhere
pandas.tests.indexes.timedeltas.test_indexing.TestWhere.test_where_invalid_dtypes(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/timedeltas/test_constructors.py----------------------------------------
A:pandas.tests.indexes.timedeltas.test_constructors.arr->numpy.arange(10, dtype=np.int64)
A:pandas.tests.indexes.timedeltas.test_constructors.tdi->TimedeltaIndex([1.5, 2.25], unit='D')
A:pandas.tests.indexes.timedeltas.test_constructors.result->TimedeltaIndex(strings)
A:pandas.tests.indexes.timedeltas.test_constructors.dti->pandas.date_range('2016-01-01', periods=3)
A:pandas.tests.indexes.timedeltas.test_constructors.expected->to_timedelta([1, 2, 3], unit='d')
A:pandas.tests.indexes.timedeltas.test_constructors.rng->timedelta_range('1 days', periods=10.5)
A:pandas.tests.indexes.timedeltas.test_constructors.exp->timedelta_range('1 days', periods=10)
A:pandas.tests.indexes.timedeltas.test_constructors.strings->numpy.array(['1 days', '2 days', '3 days'])
A:pandas.tests.indexes.timedeltas.test_constructors.from_ints->TimedeltaIndex(expected.asi8)
A:pandas.tests.indexes.timedeltas.test_constructors.idx->timedelta_range(start='1 days', periods=1, freq='D', name='TEST')
A:pandas.tests.indexes.timedeltas.test_constructors.idx2->TimedeltaIndex(idx, name='something else')
pandas.tests.indexes.timedeltas.test_constructors.TestTimedeltaIndex
pandas.tests.indexes.timedeltas.test_constructors.TestTimedeltaIndex.test_construction_base_constructor(self)
pandas.tests.indexes.timedeltas.test_constructors.TestTimedeltaIndex.test_constructor(self)
pandas.tests.indexes.timedeltas.test_constructors.TestTimedeltaIndex.test_constructor_coverage(self)
pandas.tests.indexes.timedeltas.test_constructors.TestTimedeltaIndex.test_constructor_iso(self)
pandas.tests.indexes.timedeltas.test_constructors.TestTimedeltaIndex.test_constructor_name(self)
pandas.tests.indexes.timedeltas.test_constructors.TestTimedeltaIndex.test_constructor_no_precision_raises(self)
pandas.tests.indexes.timedeltas.test_constructors.TestTimedeltaIndex.test_constructor_wrong_precision_raises(self)
pandas.tests.indexes.timedeltas.test_constructors.TestTimedeltaIndex.test_dt64_data_invalid(self)
pandas.tests.indexes.timedeltas.test_constructors.TestTimedeltaIndex.test_float64_ns_rounded(self)
pandas.tests.indexes.timedeltas.test_constructors.TestTimedeltaIndex.test_float64_unit_conversion(self)
pandas.tests.indexes.timedeltas.test_constructors.TestTimedeltaIndex.test_infer_from_tdi(self)
pandas.tests.indexes.timedeltas.test_constructors.TestTimedeltaIndex.test_infer_from_tdi_mismatch(self)
pandas.tests.indexes.timedeltas.test_constructors.TestTimedeltaIndex.test_int64_nocopy(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/timedeltas/test_scalar_compat.py----------------------------------------
A:pandas.tests.indexes.timedeltas.test_scalar_compat.rng->timedelta_range('1 days, 10:11:12.100123456', periods=2, freq='s')
A:pandas.tests.indexes.timedeltas.test_scalar_compat.ser->Series([np.nan, np.nan], dtype='timedelta64[ns]')
A:pandas.tests.indexes.timedeltas.test_scalar_compat.s_expt->Series([1 * 86400 + 10 * 3600 + 11 * 60 + 12 + 100123456.0 / 1000000000.0, np.nan], index=[0, 1])
A:pandas.tests.indexes.timedeltas.test_scalar_compat.td->pandas.timedelta_range(start='16801 days', periods=5, freq='30Min')
A:pandas.tests.indexes.timedeltas.test_scalar_compat.expected_rng->TimedeltaIndex([Timedelta('16801 days 00:00:00'), Timedelta('16801 days 00:00:00'), Timedelta('16801 days 01:00:00'), Timedelta('16801 days 02:00:00'), Timedelta('16801 days 02:00:00')])
pandas.tests.indexes.timedeltas.test_scalar_compat.TestVectorizedTimedelta
pandas.tests.indexes.timedeltas.test_scalar_compat.TestVectorizedTimedelta.test_tdi_round(self)
pandas.tests.indexes.timedeltas.test_scalar_compat.TestVectorizedTimedelta.test_tdi_total_seconds(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/timedeltas/test_timedelta_range.py----------------------------------------
A:pandas.tests.indexes.timedeltas.test_timedelta_range.expected->timedelta_range(start='0 days', end='4 days', freq=freq)
A:pandas.tests.indexes.timedeltas.test_timedelta_range.result->timedelta_range(start='0 days', end='4 days', periods=periods)
A:pandas.tests.indexes.timedeltas.test_timedelta_range.arr->numpy.arange(10).reshape(2, 5)
A:pandas.tests.indexes.timedeltas.test_timedelta_range.df->pandas.DataFrame(np.random.normal(size=(10, 4)))
A:pandas.tests.indexes.timedeltas.test_timedelta_range.df.index->pandas.timedelta_range(start='0s', periods=10, freq='s')
pandas.tests.indexes.timedeltas.test_timedelta_range.TestTimedeltas
pandas.tests.indexes.timedeltas.test_timedelta_range.TestTimedeltas.test_errors(self)
pandas.tests.indexes.timedeltas.test_timedelta_range.TestTimedeltas.test_linspace_behavior(self,periods,freq)
pandas.tests.indexes.timedeltas.test_timedelta_range.TestTimedeltas.test_timedelta_range(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/categorical/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/categorical/test_category.py----------------------------------------
A:pandas.tests.indexes.categorical.test_category.categories->list('cab')
A:pandas.tests.indexes.categorical.test_category.idx->pandas.CategoricalIndex([1, 2, 3], name='foo')
A:pandas.tests.indexes.categorical.test_category.ci->pandas.CategoricalIndex(range(32768))
A:pandas.tests.indexes.categorical.test_category.result->CategoricalIndex(data, categories=categories, ordered=ordered_fixture).map(str)
A:pandas.tests.indexes.categorical.test_category.exp->CategoricalIndex([1.0, 1.0, 3.0, 1.0], name='x')
A:pandas.tests.indexes.categorical.test_category.a->pandas.CategoricalIndex(['A'], categories=['A', 'B'])
A:pandas.tests.indexes.categorical.test_category.b->pandas.CategoricalIndex(['A'], categories=['B', 'A'])
A:pandas.tests.indexes.categorical.test_category.c->pandas.CategoricalIndex(['C'], categories=['B', 'A'])
A:pandas.tests.indexes.categorical.test_category.values->pandas.Categorical(data)
A:pandas.tests.indexes.categorical.test_category.expected->CategoricalIndex(map(str, data), categories=map(str, categories), ordered=ordered_fixture)
A:pandas.tests.indexes.categorical.test_category.i->self.create_index()
A:pandas.tests.indexes.categorical.test_category.fst->Index(['a', 'b'])
A:pandas.tests.indexes.categorical.test_category.snd->CategoricalIndex(['d', 'e'])
A:pandas.tests.indexes.categorical.test_category.ii->pandas.IntervalIndex.from_arrays(left=[-0.001, 2.0], right=[2, 4], closed='right')
A:pandas.tests.indexes.categorical.test_category.index->CategoricalIndex(data, categories=categories, ordered=ordered_fixture)
A:pandas.tests.indexes.categorical.test_category.dtype->CategoricalDtype(index.unique().tolist()[:-1], dtype_ordered)
A:pandas.tests.indexes.categorical.test_category.actual->pandas.CategoricalIndex(range(32768)).get_indexer(finder)
A:pandas.tests.indexes.categorical.test_category.oidx->Index(np.array(ci))
A:pandas.tests.indexes.categorical.test_category.(res, indexer)->pandas.CategoricalIndex(['C'], categories=['B', 'A']).reindex(['a', 'b'])
A:pandas.tests.indexes.categorical.test_category.cat->CategoricalIndex(['a', 'b', 'c'], categories=['a', 'b', 'c', 'd'])
A:pandas.tests.indexes.categorical.test_category.idx1->Index(list('abcde'))
A:pandas.tests.indexes.categorical.test_category.idx2->Index(list('aacded'))
A:pandas.tests.indexes.categorical.test_category.r1->Index(list('abcde')).get_indexer(idx2)
A:pandas.tests.indexes.categorical.test_category.cidx1->CategoricalIndex(list('abcde'), categories=list('edabc'))
A:pandas.tests.indexes.categorical.test_category.cidx2->CategoricalIndex(list('aacded'), categories=list('edabc'))
A:pandas.tests.indexes.categorical.test_category.res->CategoricalIndex(list('aabbb'), categories=list('abc')).get_loc('b')
A:pandas.tests.indexes.categorical.test_category.cidx3->CategoricalIndex(list('aabbb'), categories=list('abc'))
A:pandas.tests.indexes.categorical.test_category.idx3->Index(list('aabbb'))
A:pandas.tests.indexes.categorical.test_category.ci1->CategoricalIndex(['a', 'b'], categories=['a', 'b'], ordered=True)
A:pandas.tests.indexes.categorical.test_category.ci2->CategoricalIndex(['a', 'b'], categories=['a', 'b', 'c'], ordered=True)
A:pandas.tests.indexes.categorical.test_category.df->pandas.DataFrame({'A': [1, 2, 3]}, index=pd.CategoricalIndex(['a', 'b', 'c']))
A:pandas.tests.indexes.categorical.test_category.exp_cats->pandas.DatetimeIndex(['2011-01-01', '2011-02-01', '2011-03-01'])
A:pandas.tests.indexes.categorical.test_category.ci.values._codes->pandas.CategoricalIndex(range(32768)).values._codes.astype('int64')
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex(Base)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.create_index(self,categories=None,ordered=False)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.indices(self,request)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_append(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_append_to_another(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_astype(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_astype_category(self,name,dtype_ordered,index_ordered)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_can_hold_identifiers(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_contains(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_contains_interval(self,item,expected)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_contains_list(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_delete(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_disallow_addsub_ops(self,func,op_name)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_drop_duplicates(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_engine_type(self,dtype,engine_type)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_ensure_copied_data(self,indices)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_equals_categorical(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_equals_categoridcal_unordered(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_fillna_categorical(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_frame_repr(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_get_indexer(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_get_loc(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_has_duplicates(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_identical(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_insert(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_is_monotonic(self,data,non_lexsorted_data)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_isin(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_map(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_map_str(self,data,categories,ordered_fixture)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_map_with_categorical_series(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_map_with_nan(self,data,f)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_method_delegation(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_reindex_base(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_reindex_dtype(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_reindex_duplicate_target(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_reindex_empty_index(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_reindexing(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_repr_roundtrip(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_string_categorical_index_repr(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_take_fill_value(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_take_fill_value_datetime(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_take_fill_value_dt(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_take_invalid_kwargs(self)
pandas.tests.indexes.categorical.test_category.TestCategoricalIndex.test_where(self,klass)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/categorical/test_constructors.py----------------------------------------
A:pandas.tests.indexes.categorical.test_constructors.ci->CategoricalIndex(['a', 'b', 'c'])
A:pandas.tests.indexes.categorical.test_constructors.result->pandas.CategoricalIndex._create_categorical(ci, ci)
A:pandas.tests.indexes.categorical.test_constructors.c->Categorical(list('aabbca'))
A:pandas.tests.indexes.categorical.test_constructors.expected->Categorical(['a', 'b', 'c'])
A:pandas.tests.indexes.categorical.test_constructors.idx->Index(range(3))
A:pandas.tests.indexes.categorical.test_constructors.cat->CategoricalIndex([], categories=[True, False])
A:pandas.tests.indexes.categorical.test_constructors.categories->sorted(cat.categories.tolist())
A:pandas.tests.indexes.categorical.test_constructors.dtype->CategoricalDtype(categories=cats, ordered=ordered)
pandas.tests.indexes.categorical.test_constructors.TestCategoricalIndexConstructors
pandas.tests.indexes.categorical.test_constructors.TestCategoricalIndexConstructors.test_construction(self)
pandas.tests.indexes.categorical.test_constructors.TestCategoricalIndexConstructors.test_construction_empty_with_bool_categories(self)
pandas.tests.indexes.categorical.test_constructors.TestCategoricalIndexConstructors.test_construction_with_categorical_dtype(self)
pandas.tests.indexes.categorical.test_constructors.TestCategoricalIndexConstructors.test_construction_with_dtype(self)
pandas.tests.indexes.categorical.test_constructors.TestCategoricalIndexConstructors.test_create_categorical(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/interval/test_astype.py----------------------------------------
A:pandas.tests.indexes.interval.test_astype.result->interval_range(Timedelta('0 days'), periods=10).astype(dtype)
A:pandas.tests.indexes.interval.test_astype.expected->pandas.IntervalIndex.from_arrays(index.left.astype(subtype), index.right.astype(subtype), closed=index.closed)
A:pandas.tests.indexes.interval.test_astype.dtype->IntervalDtype('datetime64[ns]')
A:pandas.tests.indexes.interval.test_astype.index->interval_range(Timedelta('0 days'), periods=10)
pandas.tests.indexes.interval.test_astype.Base
pandas.tests.indexes.interval.test_astype.Base.test_astype_cannot_cast(self,index,dtype)
pandas.tests.indexes.interval.test_astype.Base.test_astype_category(self,index)
pandas.tests.indexes.interval.test_astype.Base.test_astype_idempotent(self,index)
pandas.tests.indexes.interval.test_astype.Base.test_astype_invalid_dtype(self,index)
pandas.tests.indexes.interval.test_astype.Base.test_astype_object(self,index)
pandas.tests.indexes.interval.test_astype.TestDatetimelikeSubtype(Base)
pandas.tests.indexes.interval.test_astype.TestDatetimelikeSubtype.index(self,request)
pandas.tests.indexes.interval.test_astype.TestDatetimelikeSubtype.test_subtype_datetimelike(self)
pandas.tests.indexes.interval.test_astype.TestDatetimelikeSubtype.test_subtype_dtlike(self)
pandas.tests.indexes.interval.test_astype.TestDatetimelikeSubtype.test_subtype_float(self,index)
pandas.tests.indexes.interval.test_astype.TestDatetimelikeSubtype.test_subtype_integer(self,index,subtype)
pandas.tests.indexes.interval.test_astype.TestFloatSubtype(Base)
pandas.tests.indexes.interval.test_astype.TestFloatSubtype.index(self,request)
pandas.tests.indexes.interval.test_astype.TestFloatSubtype.test_subtype_datetimelike(self,index,subtype)
pandas.tests.indexes.interval.test_astype.TestFloatSubtype.test_subtype_dtlike(self,index,subtype)
pandas.tests.indexes.interval.test_astype.TestFloatSubtype.test_subtype_integer(self,subtype)
pandas.tests.indexes.interval.test_astype.TestFloatSubtype.test_subtype_integer_errors(self)
pandas.tests.indexes.interval.test_astype.TestIntSubtype(Base)
pandas.tests.indexes.interval.test_astype.TestIntSubtype.index(self,request)
pandas.tests.indexes.interval.test_astype.TestIntSubtype.test_subtype_conversion(self,index,subtype)
pandas.tests.indexes.interval.test_astype.TestIntSubtype.test_subtype_integer(self,subtype_start,subtype_end)
pandas.tests.indexes.interval.test_astype.TestIntSubtype.test_subtype_integer_errors(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/interval/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/interval/test_base.py----------------------------------------
A:pandas.tests.indexes.interval.test_base.expected->IntervalIndex([np.nan] + idx[1:].tolist())
A:pandas.tests.indexes.interval.test_base.expected_name1->pandas.IntervalIndex.from_breaks(np.arange(5), closed=closed, name='foo')
A:pandas.tests.indexes.interval.test_base.expected_name2->pandas.IntervalIndex.from_breaks(np.arange(5), closed=closed, name='bar')
A:pandas.tests.indexes.interval.test_base.expected_other_closed->pandas.IntervalIndex.from_breaks(np.arange(5), closed=other_closed)
A:pandas.tests.indexes.interval.test_base.index->self.create_index(closed=closed)
A:pandas.tests.indexes.interval.test_base.result->self.create_index().where(klass(cond))
A:pandas.tests.indexes.interval.test_base.idx->self.create_index()
pandas.tests.indexes.interval.test_base.TestBase(Base)
pandas.tests.indexes.interval.test_base.TestBase.create_index(self,closed='right')
pandas.tests.indexes.interval.test_base.TestBase.indices(self)
pandas.tests.indexes.interval.test_base.TestBase.test_equals(self,closed)
pandas.tests.indexes.interval.test_base.TestBase.test_getitem_2d_deprecated(self)
pandas.tests.indexes.interval.test_base.TestBase.test_repr_max_seq_item_setting(self)
pandas.tests.indexes.interval.test_base.TestBase.test_repr_roundtrip(self)
pandas.tests.indexes.interval.test_base.TestBase.test_take(self,closed)
pandas.tests.indexes.interval.test_base.TestBase.test_where(self,closed,klass)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/interval/test_interval_tree.py----------------------------------------
A:pandas.tests.indexes.interval.test_interval_tree.marks->pytest.mark.skipif(compat.is_platform_32bit(), reason='GH 23440: int type mismatch on 32bit')
A:pandas.tests.indexes.interval.test_interval_tree.result->numpy.sort(indexer)
A:pandas.tests.indexes.interval.test_interval_tree.expected->numpy.array([], dtype='intp')
A:pandas.tests.indexes.interval.test_interval_tree.tree->IntervalTree(left, right)
A:pandas.tests.indexes.interval.test_interval_tree.(indexer, missing)->IntervalTree(left, right).get_indexer_non_unique(np.array([0.5]))
A:pandas.tests.indexes.interval.test_interval_tree.target->numpy.array([target_value], dtype=target_dtype)
A:pandas.tests.indexes.interval.test_interval_tree.(result_indexer, result_missing)->IntervalTree(left, right).get_indexer_non_unique(target)
A:pandas.tests.indexes.interval.test_interval_tree.expected_indexer->numpy.array([-1], dtype='intp')
A:pandas.tests.indexes.interval.test_interval_tree.expected_missing->numpy.array([0], dtype='intp')
A:pandas.tests.indexes.interval.test_interval_tree.left->numpy.array([0, 0, 0], dtype=dtype)
A:pandas.tests.indexes.interval.test_interval_tree.x->numpy.arange(1000, dtype='float64')
A:pandas.tests.indexes.interval.test_interval_tree.found->numpy.arange(1000, dtype='float64').astype('intp')
A:pandas.tests.indexes.interval.test_interval_tree.not_found->(-1 * np.ones(1000)).astype('intp')
pandas.tests.indexes.interval.test_interval_tree.TestIntervalTree
pandas.tests.indexes.interval.test_interval_tree.TestIntervalTree.test_construction_overflow(self)
pandas.tests.indexes.interval.test_interval_tree.TestIntervalTree.test_duplicates(self,dtype)
pandas.tests.indexes.interval.test_interval_tree.TestIntervalTree.test_get_indexer(self,tree)
pandas.tests.indexes.interval.test_interval_tree.TestIntervalTree.test_get_indexer_closed(self,closed,leaf_size)
pandas.tests.indexes.interval.test_interval_tree.TestIntervalTree.test_get_indexer_non_unique(self,tree)
pandas.tests.indexes.interval.test_interval_tree.TestIntervalTree.test_get_indexer_non_unique_overflow(self,dtype,target_value,target_dtype)
pandas.tests.indexes.interval.test_interval_tree.TestIntervalTree.test_get_indexer_overflow(self,dtype,target_value,target_dtype)
pandas.tests.indexes.interval.test_interval_tree.TestIntervalTree.test_is_overlapping(self,closed,order,left,right,expected)
pandas.tests.indexes.interval.test_interval_tree.TestIntervalTree.test_is_overlapping_endpoints(self,closed,order)
pandas.tests.indexes.interval.test_interval_tree.TestIntervalTree.test_is_overlapping_trivial(self,closed,left,right)
pandas.tests.indexes.interval.test_interval_tree.dtype(request)
pandas.tests.indexes.interval.test_interval_tree.leaf_size(request)
pandas.tests.indexes.interval.test_interval_tree.skipif_32bit(param)
pandas.tests.indexes.interval.test_interval_tree.tree(request,leaf_size)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/interval/test_setops.py----------------------------------------
A:pandas.tests.indexes.interval.test_setops.index->monotonic_index(0, 11, closed=closed)
A:pandas.tests.indexes.interval.test_setops.other->interval_range(Timestamp('20180101'), periods=9, closed=closed)
A:pandas.tests.indexes.interval.test_setops.expected->getattr(index.astype('O'), op_name)(Index([1, 2, 3]))
A:pandas.tests.indexes.interval.test_setops.result->set_op(Index([1, 2, 3]), sort=sort)
A:pandas.tests.indexes.interval.test_setops.set_op->getattr(index, op_name)
A:pandas.tests.indexes.interval.test_setops.msg->'can only do {op} between two IntervalIndex objects that have compatible dtypes'.format(op=op_name)
pandas.tests.indexes.interval.test_setops.TestIntervalIndex
pandas.tests.indexes.interval.test_setops.TestIntervalIndex.test_difference(self,closed,sort)
pandas.tests.indexes.interval.test_setops.TestIntervalIndex.test_intersection(self,closed,sort)
pandas.tests.indexes.interval.test_setops.TestIntervalIndex.test_set_incompatible_types(self,closed,op_name,sort)
pandas.tests.indexes.interval.test_setops.TestIntervalIndex.test_symmetric_difference(self,closed,sort)
pandas.tests.indexes.interval.test_setops.TestIntervalIndex.test_union(self,closed,sort)
pandas.tests.indexes.interval.test_setops.empty_index(dtype='int64',closed='right')
pandas.tests.indexes.interval.test_setops.monotonic_index(start,end,dtype='int64',closed='right')
pandas.tests.indexes.interval.test_setops.name(request)
pandas.tests.indexes.interval.test_setops.sort(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/interval/test_interval_range.py----------------------------------------
A:pandas.tests.indexes.interval.test_interval_range.breaks->timedelta_range(start=start, end=end, freq=freq)
A:pandas.tests.indexes.interval.test_interval_range.expected->interval_range(start=start, end=end)
A:pandas.tests.indexes.interval.test_interval_range.result->interval_range(start=start, end=end, freq=freq)
A:pandas.tests.indexes.interval.test_interval_range.index->interval_range(start=start, end=end, periods=5)
A:pandas.tests.indexes.interval.test_interval_range.start->Timestamp('2017-01-01', tz='US/Eastern')
A:pandas.tests.indexes.interval.test_interval_range.end->Timestamp('2017-01-07', tz='US/Pacific')
pandas.tests.indexes.interval.test_interval_range.TestIntervalRange
pandas.tests.indexes.interval.test_interval_range.TestIntervalRange.test_constructor_coverage(self)
pandas.tests.indexes.interval.test_interval_range.TestIntervalRange.test_constructor_numeric(self,closed,name,freq,periods)
pandas.tests.indexes.interval.test_interval_range.TestIntervalRange.test_constructor_timedelta(self,closed,name,freq,periods)
pandas.tests.indexes.interval.test_interval_range.TestIntervalRange.test_constructor_timestamp(self,closed,name,freq,periods,tz)
pandas.tests.indexes.interval.test_interval_range.TestIntervalRange.test_early_truncation(self,start,end,freq,expected_endpoint)
pandas.tests.indexes.interval.test_interval_range.TestIntervalRange.test_errors(self)
pandas.tests.indexes.interval.test_interval_range.TestIntervalRange.test_float_subtype(self,start,end,freq)
pandas.tests.indexes.interval.test_interval_range.TestIntervalRange.test_linspace_dst_transition(self,start,mid,end)
pandas.tests.indexes.interval.test_interval_range.TestIntervalRange.test_no_invalid_float_truncation(self,start,end,freq)
pandas.tests.indexes.interval.test_interval_range.name(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/interval/test_formats.py----------------------------------------
A:pandas.tests.indexes.interval.test_formats.df->DataFrame({'A': [1, 2, 3, 4]}, index=IntervalIndex.from_breaks([0, 1, 2, 3, 4]))
A:pandas.tests.indexes.interval.test_formats.result->pandas.IntervalIndex.from_tuples(tuples, closed=closed).to_native_types()
A:pandas.tests.indexes.interval.test_formats.index->pandas.IntervalIndex.from_tuples(tuples, closed=closed)
A:pandas.tests.indexes.interval.test_formats.obj->constructor(list('abc'), index=index)
A:pandas.tests.indexes.interval.test_formats.expected->numpy.array(expected_data)
pandas.tests.indexes.interval.test_formats.TestIntervalIndexRendering
pandas.tests.indexes.interval.test_formats.TestIntervalIndexRendering.test_frame_repr(self)
pandas.tests.indexes.interval.test_formats.TestIntervalIndexRendering.test_repr_missing(self,constructor,expected)
pandas.tests.indexes.interval.test_formats.TestIntervalIndexRendering.test_to_native_types(self,tuples,closed,expected_data)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/interval/test_indexing.py----------------------------------------
A:pandas.tests.indexes.interval.test_indexing.idx->pandas.IntervalIndex.from_tuples([(0, 1), (2, 3)], closed=closed)
A:pandas.tests.indexes.interval.test_indexing.msg->re.escape("Interval({bound[0]}, {bound[1]}, closed='{side}')".format(bound=bound, side=side))
A:pandas.tests.indexes.interval.test_indexing.index->pandas.IntervalIndex.from_tuples(tuples)
A:pandas.tests.indexes.interval.test_indexing.result->pandas.IntervalIndex.from_tuples(tuples).get_indexer(categorical_target)
A:pandas.tests.indexes.interval.test_indexing.interval->Interval(index[0].left, index[0].right)
A:pandas.tests.indexes.interval.test_indexing.expected->pandas.IntervalIndex.from_tuples(tuples).get_indexer(target)
A:pandas.tests.indexes.interval.test_indexing.categorical_target->CategoricalIndex(target, ordered=ordered_fixture)
A:pandas.tests.indexes.interval.test_indexing.(result_indexer, result_missing)->pandas.IntervalIndex.from_tuples(tuples).get_indexer_non_unique(query)
A:pandas.tests.indexes.interval.test_indexing.expected_indexer->numpy.array(expected[0], dtype='intp')
A:pandas.tests.indexes.interval.test_indexing.expected_missing->numpy.array(expected[1], dtype='intp')
pandas.tests.indexes.interval.test_indexing.TestGetIndexer
pandas.tests.indexes.interval.test_indexing.TestGetIndexer.test_get_indexer_categorical(self,target,ordered_fixture)
pandas.tests.indexes.interval.test_indexing.TestGetIndexer.test_get_indexer_errors(self,tuples,closed)
pandas.tests.indexes.interval.test_indexing.TestGetIndexer.test_get_indexer_length_one(self,item,closed)
pandas.tests.indexes.interval.test_indexing.TestGetIndexer.test_get_indexer_length_one_interval(self,size,closed)
pandas.tests.indexes.interval.test_indexing.TestGetIndexer.test_get_indexer_non_unique_with_int_and_float(self,query,expected)
pandas.tests.indexes.interval.test_indexing.TestGetIndexer.test_get_indexer_with_int_and_float(self,query,expected)
pandas.tests.indexes.interval.test_indexing.TestGetIndexer.test_get_indexer_with_interval(self,query,expected)
pandas.tests.indexes.interval.test_indexing.TestGetLoc
pandas.tests.indexes.interval.test_indexing.TestGetLoc.test_get_loc_datetimelike_nonoverlapping(self,breaks)
pandas.tests.indexes.interval.test_indexing.TestGetLoc.test_get_loc_datetimelike_overlapping(self,arrays)
pandas.tests.indexes.interval.test_indexing.TestGetLoc.test_get_loc_decreasing(self,values)
pandas.tests.indexes.interval.test_indexing.TestGetLoc.test_get_loc_dtlike_nonoverlapping(self,breaks)
pandas.tests.indexes.interval.test_indexing.TestGetLoc.test_get_loc_dtlike_overlapping(self,arrays)
pandas.tests.indexes.interval.test_indexing.TestGetLoc.test_get_loc_interval(self,closed,side)
pandas.tests.indexes.interval.test_indexing.TestGetLoc.test_get_loc_length_one_interval(self,left,right,closed,other_closed)
pandas.tests.indexes.interval.test_indexing.TestGetLoc.test_get_loc_length_one_scalar(self,scalar,closed)
pandas.tests.indexes.interval.test_indexing.TestGetLoc.test_get_loc_scalar(self,closed,scalar)
pandas.tests.indexes.interval.test_indexing.TestSliceLocs
pandas.tests.indexes.interval.test_indexing.TestSliceLocs.test_slice_locs_with_interval(self)
pandas.tests.indexes.interval.test_indexing.TestSliceLocs.test_slice_locs_with_ints_and_floats_errors(self,tuples,query)
pandas.tests.indexes.interval.test_indexing.TestSliceLocs.test_slice_locs_with_ints_and_floats_succeeds(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/interval/test_constructors.py----------------------------------------
A:pandas.tests.indexes.interval.test_constructors.result_kwargs->self.get_kwargs_from_breaks(cat_breaks)
A:pandas.tests.indexes.interval.test_constructors.result->Index(intervals)
A:pandas.tests.indexes.interval.test_constructors.expected_kwargs->self.get_kwargs_from_breaks(breaks.astype(subtype))
A:pandas.tests.indexes.interval.test_constructors.expected->Index(intervals, dtype=object)
A:pandas.tests.indexes.interval.test_constructors.iv_dtype->IntervalDtype(subtype)
A:pandas.tests.indexes.interval.test_constructors.expected_values->numpy.array([], dtype=object)
A:pandas.tests.indexes.interval.test_constructors.expected_subtype->getattr(breaks, 'dtype', np.int64)
A:pandas.tests.indexes.interval.test_constructors.breaks->numpy.arange(10, dtype='int64')
A:pandas.tests.indexes.interval.test_constructors.cat_breaks->cat_constructor(breaks)
A:pandas.tests.indexes.interval.test_constructors.filler->self.get_kwargs_from_breaks(range(10))
A:pandas.tests.indexes.interval.test_constructors.periods->period_range('2000-01-01', periods=10)
A:pandas.tests.indexes.interval.test_constructors.periods_kwargs->self.get_kwargs_from_breaks(periods)
A:pandas.tests.indexes.interval.test_constructors.decreasing_kwargs->self.get_kwargs_from_breaks(range(10, -1, -1))
A:pandas.tests.indexes.interval.test_constructors.data->Categorical(list('01234abcde'), ordered=True)
A:pandas.tests.indexes.interval.test_constructors.left->numpy.arange(9, dtype=left_subtype)
A:pandas.tests.indexes.interval.test_constructors.right->numpy.arange(1, 10, dtype=right_subtype)
A:pandas.tests.indexes.interval.test_constructors.expected_left->Float64Index(left)
A:pandas.tests.indexes.interval.test_constructors.expected_right->Float64Index(right)
A:pandas.tests.indexes.interval.test_constructors.tuples->Categorical(list('01234abcde'), ordered=True).to_tuples()
A:pandas.tests.indexes.interval.test_constructors.idx_na_tuple->pandas.IntervalIndex.from_tuples(na_tuple)
A:pandas.tests.indexes.interval.test_constructors.idx_na_element->pandas.IntervalIndex.from_tuples([(0, 1), np.nan, (2, 3)])
A:pandas.tests.indexes.interval.test_constructors.values->values_constructor(intervals)
pandas.tests.indexes.interval.test_constructors.Base
pandas.tests.indexes.interval.test_constructors.Base.test_constructor(self,constructor,breaks,closed,name)
pandas.tests.indexes.interval.test_constructors.Base.test_constructor_categorical_valid(self,constructor,cat_constructor)
pandas.tests.indexes.interval.test_constructors.Base.test_constructor_dtype(self,constructor,breaks,subtype)
pandas.tests.indexes.interval.test_constructors.Base.test_constructor_empty(self,constructor,breaks,closed)
pandas.tests.indexes.interval.test_constructors.Base.test_constructor_nan(self,constructor,breaks,closed)
pandas.tests.indexes.interval.test_constructors.Base.test_constructor_string(self,constructor,breaks)
pandas.tests.indexes.interval.test_constructors.Base.test_generic_errors(self,constructor)
pandas.tests.indexes.interval.test_constructors.TestClassConstructors(Base)
pandas.tests.indexes.interval.test_constructors.TestClassConstructors.constructor(self,request)
pandas.tests.indexes.interval.test_constructors.TestClassConstructors.get_kwargs_from_breaks(self,breaks,closed='right')
pandas.tests.indexes.interval.test_constructors.TestClassConstructors.test_constructor_errors(self,constructor)
pandas.tests.indexes.interval.test_constructors.TestClassConstructors.test_constructor_string(self)
pandas.tests.indexes.interval.test_constructors.TestClassConstructors.test_generic_errors(self,constructor)
pandas.tests.indexes.interval.test_constructors.TestClassConstructors.test_index_mixed_closed(self)
pandas.tests.indexes.interval.test_constructors.TestClassConstructors.test_index_object_dtype(self,values_constructor)
pandas.tests.indexes.interval.test_constructors.TestClassConstructors.test_override_inferred_closed(self,constructor,data,closed)
pandas.tests.indexes.interval.test_constructors.TestFromArrays(Base)
pandas.tests.indexes.interval.test_constructors.TestFromArrays.constructor(self)
pandas.tests.indexes.interval.test_constructors.TestFromArrays.get_kwargs_from_breaks(self,breaks,closed='right')
pandas.tests.indexes.interval.test_constructors.TestFromArrays.test_constructor_errors(self)
pandas.tests.indexes.interval.test_constructors.TestFromArrays.test_mixed_float_int(self,left_subtype,right_subtype)
pandas.tests.indexes.interval.test_constructors.TestFromBreaks(Base)
pandas.tests.indexes.interval.test_constructors.TestFromBreaks.constructor(self)
pandas.tests.indexes.interval.test_constructors.TestFromBreaks.get_kwargs_from_breaks(self,breaks,closed='right')
pandas.tests.indexes.interval.test_constructors.TestFromBreaks.test_constructor_errors(self)
pandas.tests.indexes.interval.test_constructors.TestFromBreaks.test_length_one(self)
pandas.tests.indexes.interval.test_constructors.TestFromTuples(Base)
pandas.tests.indexes.interval.test_constructors.TestFromTuples.constructor(self)
pandas.tests.indexes.interval.test_constructors.TestFromTuples.get_kwargs_from_breaks(self,breaks,closed='right')
pandas.tests.indexes.interval.test_constructors.TestFromTuples.test_constructor_errors(self)
pandas.tests.indexes.interval.test_constructors.TestFromTuples.test_na_tuples(self)
pandas.tests.indexes.interval.test_constructors.name(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/interval/test_interval.py----------------------------------------
A:pandas.tests.indexes.interval.test_interval.index->pandas.IntervalIndex.from_arrays([0, 1], [1, 2])
A:pandas.tests.indexes.interval.test_interval.expected->interval_range(0, 5, closed=new_closed, name=name)
A:pandas.tests.indexes.interval.test_interval.expected_left->Index([0, np.nan, 2, 3, 4, 5, 6, 7, 8, 9])
A:pandas.tests.indexes.interval.test_interval.result->dir(index)
A:pandas.tests.indexes.interval.test_interval.idx_item->IntervalIndex([item])
A:pandas.tests.indexes.interval.test_interval.bad_item->Interval(item.left, item.right, closed=closed)
A:pandas.tests.indexes.interval.test_interval.na_idx->IntervalIndex([np.nan], closed=data.closed)
A:pandas.tests.indexes.interval.test_interval.idx->pandas.IntervalIndex.from_tuples(tuples)
A:pandas.tests.indexes.interval.test_interval.i->pandas.IntervalIndex.from_arrays([0, 1], [1, 2])
A:pandas.tests.indexes.interval.test_interval.interval->Interval(breaks[0], breaks[1])
A:pandas.tests.indexes.interval.test_interval.to_convert->to_convert.insert(0, breaks[0]).insert(0, breaks[0])
A:pandas.tests.indexes.interval.test_interval.key->make_key(breaks2)
A:pandas.tests.indexes.interval.test_interval.msg->"invalid option for 'closed': {closed}".format(closed=bad_closed)
A:pandas.tests.indexes.interval.test_interval.actual->pandas.IntervalIndex.from_arrays([0, 1], [1, 2]).get_indexer(target)
A:pandas.tests.indexes.interval.test_interval.ii->pandas.IntervalIndex.from_arrays([0, 1, np.nan], [1, 2, np.nan], closed=closed)
A:pandas.tests.indexes.interval.test_interval.other->self.create_index(closed=other_closed)
A:pandas.tests.indexes.interval.test_interval.idx2->pandas.IntervalIndex.from_arrays([np.nan, 0, 1], [np.nan, 1, 2], closed=closed)
A:pandas.tests.indexes.interval.test_interval.start->Timestamp('2000-01-08T18:00', tz=tz)
A:pandas.tests.indexes.interval.test_interval.dates->date_range(start=start, periods=10)
A:pandas.tests.indexes.interval.test_interval.iv_true->Interval(Timestamp('2000-01-02', tz=tz), Timestamp('2000-01-03', tz=tz))
A:pandas.tests.indexes.interval.test_interval.iv_false->Interval(Timestamp('1999-12-31', tz=tz), Timestamp('2000-01-01', tz=tz))
A:pandas.tests.indexes.interval.test_interval.target->date_range(start=start, periods=7, freq='6H')
A:pandas.tests.indexes.interval.test_interval.index1->pandas.IntervalIndex.from_arrays([0, 1], [1, 2], closed=closed)
A:pandas.tests.indexes.interval.test_interval.index2->pandas.IntervalIndex.from_arrays([1, 2], [2, 3], closed=closed)
A:pandas.tests.indexes.interval.test_interval.index_other_closed->pandas.IntervalIndex.from_arrays([0, 1], [1, 2], closed=other_closed)
A:pandas.tests.indexes.interval.test_interval.expected_notna->Index(com.asarray_tuplesafe(tuples[:-1]))
A:pandas.tests.indexes.interval.test_interval.left->numpy.arange(0, 4, dtype='i8')
A:pandas.tests.indexes.interval.test_interval.right->numpy.arange(1, 5, dtype='i8')
A:pandas.tests.indexes.interval.test_interval.year_2017->pandas.Interval(pd.Timestamp('2017-01-01 00:00:00'), pd.Timestamp('2018-01-01 00:00:00'))
A:pandas.tests.indexes.interval.test_interval.year_2017_index->pandas.IntervalIndex([year_2017])
pandas.tests.indexes.interval.test_interval.TestIntervalIndex
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.create_index(self,closed='right')
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.create_index_with_nan(self,closed='right')
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_append(self,closed)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_comparison(self)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_contains_dunder(self)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_contains_method(self)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_copy(self,closed)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_datetime(self,tz)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_delete(self,closed)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_dropna(self,closed)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_dt(self,tz)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_ensure_copied_data(self,closed)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_get_item(self,closed)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_insert(self,data)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_is_all_dates(self)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_is_non_overlapping_monotonic(self,closed)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_is_overlapping(self,start,shift,na_value,closed)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_is_unique_interval(self,closed)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_isin(self,closed)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_length(self,closed,breaks)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_maybe_convert_i8(self,breaks)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_maybe_convert_i8_errors(self,breaks1,breaks2,make_key)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_maybe_convert_i8_nat(self,breaks)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_maybe_convert_i8_numeric(self,breaks,make_key)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_missing_values(self,closed)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_monotonic(self,closed)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_nbytes(self)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_non_contiguous(self,closed)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_properties(self,closed)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_set_closed(self,name,closed,new_closed)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_set_closed_errors(self,bad_closed)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_sort_values(self,closed)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_to_tuples(self,tuples)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_to_tuples_na(self,tuples,na_tuple)
pandas.tests.indexes.interval.test_interval.TestIntervalIndex.test_with_nans(self,closed)
pandas.tests.indexes.interval.test_interval.name(request)
pandas.tests.indexes.interval.test_interval.test_dir()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_astype.py----------------------------------------
A:pandas.tests.indexes.multi.test_astype.expected->idx.copy()
A:pandas.tests.indexes.multi.test_astype.actual->idx.astype('O')
pandas.tests.indexes.multi.test_astype.test_astype(idx)
pandas.tests.indexes.multi.test_astype.test_astype_category(idx,ordered)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_duplicates.py----------------------------------------
A:pandas.tests.indexes.multi.test_duplicates.mi->MultiIndex(levels=[list('abcde')[:n], list('WXYZ')[:m]], codes=np.random.permutation(list(codes)).T)
A:pandas.tests.indexes.multi.test_duplicates.res->MultiIndex(levels=[list('abcde')[:n], list('WXYZ')[:m]], codes=np.random.permutation(list(codes)).T).unique()
A:pandas.tests.indexes.multi.test_duplicates.exp->pandas.MultiIndex.from_arrays([eidx1, eidx2])
A:pandas.tests.indexes.multi.test_duplicates.idx1->DatetimeIndex(['2015-01-01', '2015-01-01', '2015-01-01', '2015-01-01', 'NaT', 'NaT'])
A:pandas.tests.indexes.multi.test_duplicates.idx2->DatetimeIndex(['2015-01-01', '2015-01-01', '2015-01-02', '2015-01-02', 'NaT', '2015-01-01'], tz='Asia/Tokyo')
A:pandas.tests.indexes.multi.test_duplicates.result->MultiIndex(levels=[list('abcde')[:n], list('WXYZ')[:m]], codes=np.random.permutation(list(codes)).T).duplicated(keep=keep)
A:pandas.tests.indexes.multi.test_duplicates.eidx1->DatetimeIndex(['2015-01-01', '2015-01-01', 'NaT', 'NaT'])
A:pandas.tests.indexes.multi.test_duplicates.eidx2->DatetimeIndex(['2015-01-01', '2015-01-02', 'NaT', '2015-01-01'], tz='Asia/Tokyo')
A:pandas.tests.indexes.multi.test_duplicates.expected->pandas._libs.hashtable.duplicated_object(mi.values, keep=keep)
A:pandas.tests.indexes.multi.test_duplicates.mi_nan->MultiIndex(levels=[['a', 'b'], [0, 1]], codes=[[-1, 0, 0, 1, 1], [-1, 0, 1, 0, 1]])
A:pandas.tests.indexes.multi.test_duplicates.mi_nan_dup->MultiIndex(levels=[['a', 'b'], [0, 1]], codes=[[-1, -1, 0, 0, 1, 1], [-1, -1, 0, 1, 0, 1]])
A:pandas.tests.indexes.multi.test_duplicates.codes->product(range(-1, n), range(-1, m))
A:pandas.tests.indexes.multi.test_duplicates.level->numpy.arange(500)
A:pandas.tests.indexes.multi.test_duplicates.values->MultiIndex(levels=[list('abcde')[:n], list('WXYZ')[:m]], codes=np.random.permutation(list(codes)).T).values.tolist()
pandas.tests.indexes.multi.test_duplicates.test_duplicate_level_names(names)
pandas.tests.indexes.multi.test_duplicates.test_duplicate_meta_data()
pandas.tests.indexes.multi.test_duplicates.test_duplicate_multiindex_codes()
pandas.tests.indexes.multi.test_duplicates.test_duplicated(idx_dup,keep,expected)
pandas.tests.indexes.multi.test_duplicates.test_duplicated2()
pandas.tests.indexes.multi.test_duplicates.test_duplicated_large(keep)
pandas.tests.indexes.multi.test_duplicates.test_get_unique_index(idx,dropna)
pandas.tests.indexes.multi.test_duplicates.test_has_duplicates(idx,idx_dup)
pandas.tests.indexes.multi.test_duplicates.test_has_duplicates_from_tuples()
pandas.tests.indexes.multi.test_duplicates.test_has_duplicates_overflow()
pandas.tests.indexes.multi.test_duplicates.test_unique(names)
pandas.tests.indexes.multi.test_duplicates.test_unique_datetimelike()
pandas.tests.indexes.multi.test_duplicates.test_unique_dtlike()
pandas.tests.indexes.multi.test_duplicates.test_unique_level(idx,level)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_sorting.py----------------------------------------
A:pandas.tests.indexes.multi.test_sorting.tuples->list(idx)
A:pandas.tests.indexes.multi.test_sorting.index->pandas.MultiIndex.from_tuples(tuples)
A:pandas.tests.indexes.multi.test_sorting.(sorted_idx, _)->pandas.MultiIndex.from_tuples(tuples).sortlevel(1, ascending=False)
A:pandas.tests.indexes.multi.test_sorting.expected->idx.values.argsort()
A:pandas.tests.indexes.multi.test_sorting.by1->sorted(tuples, key=lambda x: (x[1], x[0]))
A:pandas.tests.indexes.multi.test_sorting.mi->pandas.MultiIndex(levels=[level0, level1], codes=[[0, 2, -1, 1, -1], [0, 1, 2, 3, 2]])
A:pandas.tests.indexes.multi.test_sorting.result->idx.argsort()
A:pandas.tests.indexes.multi.test_sorting.df->df.groupby(['first', 'second']).sum().groupby(['first', 'second']).sum()
A:pandas.tests.indexes.multi.test_sorting.dfm->dfm.sort_index().sort_index()
A:pandas.tests.indexes.multi.test_sorting.recons->pandas.MultiIndex(levels=[level0, level1], codes=[[0, 2, -1, 1, -1], [0, 1, 2, 3, 2]])._sort_levels_monotonic()
A:pandas.tests.indexes.multi.test_sorting.df2->df.groupby(['first', 'second']).sum().groupby(['first', 'second']).sum().set_index(['first', 'second'], drop=False)
A:pandas.tests.indexes.multi.test_sorting.result2->idx.argsort().remove_unused_levels()
A:pandas.tests.indexes.multi.test_sorting.rng->numpy.random.RandomState(4)
pandas.tests.indexes.multi.test_sorting.test_argsort(idx)
pandas.tests.indexes.multi.test_sorting.test_numpy_argsort(idx)
pandas.tests.indexes.multi.test_sorting.test_reconstruct_remove_unused()
pandas.tests.indexes.multi.test_sorting.test_reconstruct_sort()
pandas.tests.indexes.multi.test_sorting.test_remove_unused_levels_large(first_type,second_type)
pandas.tests.indexes.multi.test_sorting.test_remove_unused_nan(level0,level1)
pandas.tests.indexes.multi.test_sorting.test_sort(indices)
pandas.tests.indexes.multi.test_sorting.test_sortlevel(idx)
pandas.tests.indexes.multi.test_sorting.test_sortlevel_deterministic()
pandas.tests.indexes.multi.test_sorting.test_sortlevel_not_sort_remaining()
pandas.tests.indexes.multi.test_sorting.test_unsortedindex()
pandas.tests.indexes.multi.test_sorting.test_unsortedindex_doc_examples()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_analytics.py----------------------------------------
A:pandas.tests.indexes.multi.test_analytics.groups->pandas.MultiIndex.from_product(vals, names=['str', 'dt']).groupby(idx)
A:pandas.tests.indexes.multi.test_analytics.labels->pandas.MultiIndex.from_product(vals, names=['str', 'dt']).tolist()
A:pandas.tests.indexes.multi.test_analytics.major_axis->Index(list(range(4)))
A:pandas.tests.indexes.multi.test_analytics.minor_axis->Index(list(range(2)))
A:pandas.tests.indexes.multi.test_analytics.major_codes->numpy.array([0, 0, 1, 2, 3, 3])
A:pandas.tests.indexes.multi.test_analytics.minor_codes->numpy.array([0, 1, 0, 1, 0, 1])
A:pandas.tests.indexes.multi.test_analytics.index->MultiIndex(levels=[major_axis, minor_axis], codes=[major_codes, minor_codes])
A:pandas.tests.indexes.multi.test_analytics.result->pandas.MultiIndex.from_product(vals, names=['str', 'dt']).map(mapper(expected, idx))
A:pandas.tests.indexes.multi.test_analytics.i->pandas.MultiIndex.from_tuples([('A', 1), ('A', 2)])
A:pandas.tests.indexes.multi.test_analytics.names->numpy.array(['foo', 'bar'])
A:pandas.tests.indexes.multi.test_analytics.m->pandas.MultiIndex.from_product([numbers, names], names=names)
A:pandas.tests.indexes.multi.test_analytics.expected->pandas.Index([np.nan] * len(idx))
A:pandas.tests.indexes.multi.test_analytics.dti->date_range('2011-01-01', freq='M', periods=3)
A:pandas.tests.indexes.multi.test_analytics.dti_tz->date_range('2011-01-01', freq='M', periods=3, tz='US/Eastern')
A:pandas.tests.indexes.multi.test_analytics.pi->period_range('2011-01', freq='M', periods=3)
A:pandas.tests.indexes.multi.test_analytics.mi->pandas.MultiIndex.from_arrays([[1, 2, 3], [1.1, np.nan, 3.3], ['a', 'b', 'c'], dti, dti_tz, pi])
A:pandas.tests.indexes.multi.test_analytics.res->pandas.MultiIndex.from_arrays([[1, 2, 3], [1.1, np.nan, 3.3], ['a', 'b', 'c'], dti, dti_tz, pi]).append(other)
A:pandas.tests.indexes.multi.test_analytics.exp->pandas.MultiIndex.from_arrays([[1, 2, 3, 'x', 'y', 'z'], [1.1, np.nan, 3.3, 'x', 'y', 'z'], ['a', 'b', 'c', 'x', 'y', 'z'], dti.append(pd.Index(['x', 'y', 'z'])), dti_tz.append(pd.Index(['x', 'y', 'z'])), pi.append(pd.Index(['x', 'y', 'z']))])
A:pandas.tests.indexes.multi.test_analytics.other->pandas.MultiIndex.from_arrays([['x', 'y', 'z'], ['x', 'y', 'z'], ['x', 'y', 'z'], ['x', 'y', 'z'], ['x', 'y', 'z'], ['x', 'y', 'z']])
A:pandas.tests.indexes.multi.test_analytics.idx->pandas.MultiIndex.from_product(vals, names=['str', 'dt'])
A:pandas.tests.indexes.multi.test_analytics.identity->mapper(idx.values, idx)
pandas.tests.indexes.multi.test_analytics.test_append_mixed_dtypes()
pandas.tests.indexes.multi.test_analytics.test_groupby(idx)
pandas.tests.indexes.multi.test_analytics.test_iter(idx)
pandas.tests.indexes.multi.test_analytics.test_map(idx)
pandas.tests.indexes.multi.test_analytics.test_map_dictlike(idx,mapper)
pandas.tests.indexes.multi.test_analytics.test_numpy_repeat()
pandas.tests.indexes.multi.test_analytics.test_numpy_type_funcs(idx,func)
pandas.tests.indexes.multi.test_analytics.test_numpy_ufuncs(idx,func)
pandas.tests.indexes.multi.test_analytics.test_reorder_levels(idx)
pandas.tests.indexes.multi.test_analytics.test_shift(idx)
pandas.tests.indexes.multi.test_analytics.test_sub(idx)
pandas.tests.indexes.multi.test_analytics.test_take(idx)
pandas.tests.indexes.multi.test_analytics.test_take_fill_value()
pandas.tests.indexes.multi.test_analytics.test_take_invalid_kwargs(idx)
pandas.tests.indexes.multi.test_analytics.test_truncate()
pandas.tests.indexes.multi.test_analytics.test_where()
pandas.tests.indexes.multi.test_analytics.test_where_array_like(klass)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_join.py----------------------------------------
A:pandas.tests.indexes.multi.test_join.(join_index, lidx, ridx)->other.join(idx, how=join_type, level='second', return_indexers=True)
A:pandas.tests.indexes.multi.test_join.exp_level->other.join(idx.levels[1], how=join_type)
A:pandas.tests.indexes.multi.test_join.mask->numpy.array([x[1] in exp_level for x in idx], dtype=bool)
A:pandas.tests.indexes.multi.test_join.(join_index2, ridx2, lidx2)->pandas.Index([1, 2, 5], name='b').join(other, how=join_type, level='second', return_indexers=True)
A:pandas.tests.indexes.multi.test_join.index->Index(['three', 'one', 'two'])
A:pandas.tests.indexes.multi.test_join.result->Index(['three', 'one', 'two']).join(idx, level='second')
A:pandas.tests.indexes.multi.test_join.joined->pandas.Index([1, 2, 5], name='b').join(idx, how=join_type)
A:pandas.tests.indexes.multi.test_join.midx->pandas.MultiIndex.from_product([np.arange(4), np.arange(4)], names=['a', 'b'])
A:pandas.tests.indexes.multi.test_join.idx->pandas.Index([1, 2, 5], name='b')
A:pandas.tests.indexes.multi.test_join.(jidx, lidx, ridx)->pandas.MultiIndex.from_product([np.arange(4), np.arange(4)], names=['a', 'b']).join(idx, how='left', return_indexers=True)
A:pandas.tests.indexes.multi.test_join.exp_idx->pandas.MultiIndex.from_product([np.arange(4), [1, 2]], names=['a', 'b'])
A:pandas.tests.indexes.multi.test_join.exp_lidx->numpy.array([1, 2, 5, 6, 9, 10, 13, 14], dtype=np.intp)
A:pandas.tests.indexes.multi.test_join.exp_ridx->numpy.array([-1, -1, -1, -1], dtype=np.intp)
A:pandas.tests.indexes.multi.test_join.(jidx, ridx, lidx)->pandas.Index([1, 2, 5], name='b').join(midx, how='right', return_indexers=True)
A:pandas.tests.indexes.multi.test_join.midx1->pandas.MultiIndex.from_product([[1, 2], [3, 4]], names=['a', 'b'])
A:pandas.tests.indexes.multi.test_join.midx2->pandas.MultiIndex.from_product([[1, 2], [3, 4]], names=['b', 'a'])
A:pandas.tests.indexes.multi.test_join.(join_idx, lidx, ridx)->pandas.MultiIndex.from_product([[1, 2], [3, 4]], names=['a', 'b']).join(midx2, return_indexers=False)
pandas.tests.indexes.multi.test_join.test_join_level(idx,other,join_type)
pandas.tests.indexes.multi.test_join.test_join_level_corner_case(idx)
pandas.tests.indexes.multi.test_join.test_join_multi()
pandas.tests.indexes.multi.test_join.test_join_multi_wrong_order()
pandas.tests.indexes.multi.test_join.test_join_self(idx,join_type)
pandas.tests.indexes.multi.test_join.test_join_self_unique(idx,join_type)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_copy.py----------------------------------------
A:pandas.tests.indexes.multi.test_copy.i_copy->MultiIndex(levels=[['foo', 'bar'], ['fizz', 'buzz']], codes=[[0, 0, 0, 1], [0, 0, 1, 1]], names=['first', 'second'])._shallow_copy()
A:pandas.tests.indexes.multi.test_copy.i_view->MultiIndex(levels=[['foo', 'bar'], ['fizz', 'buzz']], codes=[[0, 0, 0, 1], [0, 0, 1, 1]], names=['first', 'second']).view()
A:pandas.tests.indexes.multi.test_copy.idx->MultiIndex(levels=[['foo', 'bar'], ['fizz', 'buzz']], codes=[[0, 0, 0, 1], [0, 0, 1, 1]], names=['first', 'second'])
A:pandas.tests.indexes.multi.test_copy.idx_copy->MultiIndex(levels=[['foo', 'bar'], ['fizz', 'buzz']], codes=[[0, 0, 0, 1], [0, 0, 1, 1]], names=['first', 'second']).copy(**{kwarg: value, 'deep': deep})
pandas.tests.indexes.multi.test_copy.assert_multiindex_copied(copy,original)
pandas.tests.indexes.multi.test_copy.test_copy(idx)
pandas.tests.indexes.multi.test_copy.test_copy_and_deepcopy(func)
pandas.tests.indexes.multi.test_copy.test_copy_method(deep)
pandas.tests.indexes.multi.test_copy.test_copy_method_kwargs(deep,kwarg,value)
pandas.tests.indexes.multi.test_copy.test_shallow_copy(idx)
pandas.tests.indexes.multi.test_copy.test_view(idx)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_reshape.py----------------------------------------
A:pandas.tests.indexes.multi.test_reshape.new_index->idx.insert(0, ('abc', 'three'))
A:pandas.tests.indexes.multi.test_reshape.exp0->Index(list(idx.levels[0]) + ['abc'], name='first')
A:pandas.tests.indexes.multi.test_reshape.exp1->Index(list(idx.levels[1]) + ['three'], name='second')
A:pandas.tests.indexes.multi.test_reshape.left->pandas.Series(np.linspace(0, 10, 11), pd.MultiIndex.from_tuples(idx[:-2]))
A:pandas.tests.indexes.multi.test_reshape.ts->left['3rd'].copy(deep=True)
A:pandas.tests.indexes.multi.test_reshape.right->pandas.Series(np.linspace(0, 12, 13), pd.MultiIndex.from_tuples(idx))
A:pandas.tests.indexes.multi.test_reshape.result->idx.delete(-1)
A:pandas.tests.indexes.multi.test_reshape.names->numpy.array(['foo', 'bar'])
A:pandas.tests.indexes.multi.test_reshape.m->pandas.MultiIndex.from_product([numbers, names], names=names)
A:pandas.tests.indexes.multi.test_reshape.expected->pandas.MultiIndex.from_product([numbers, names.repeat(reps)], names=names)
pandas.tests.indexes.multi.test_reshape.test_append(idx)
pandas.tests.indexes.multi.test_reshape.test_delete_base(idx)
pandas.tests.indexes.multi.test_reshape.test_insert(idx)
pandas.tests.indexes.multi.test_reshape.test_insert_base(idx)
pandas.tests.indexes.multi.test_reshape.test_repeat()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_setops.py----------------------------------------
A:pandas.tests.indexes.multi.test_setops.intersect->first.intersection(second, sort=sort)
A:pandas.tests.indexes.multi.test_setops.result->pandas.MultiIndex.from_product([[1, pd.Timestamp('2000')], ['a', 'b']]).union(idx[:1], sort=False)
A:pandas.tests.indexes.multi.test_setops.union->first.union(second, sort=sort)
A:pandas.tests.indexes.multi.test_setops.answer->answer.sort_values().sort_values()
A:pandas.tests.indexes.multi.test_setops.vals->sorted(vals)
A:pandas.tests.indexes.multi.test_setops.expected->pandas.MultiIndex.from_product([[0, 1], ['a', 'b']])
A:pandas.tests.indexes.multi.test_setops.idx->pandas.MultiIndex.from_product([[1, pd.Timestamp('2000')], ['a', 'b']])
A:pandas.tests.indexes.multi.test_setops.other->pandas.MultiIndex.from_product([[3, pd.Timestamp('2000'), 4], ['c', 'd']])
A:pandas.tests.indexes.multi.test_setops.the_union->pandas.MultiIndex.from_product([[1, pd.Timestamp('2000')], ['a', 'b']]).union(idx[:0], sort=sort)
A:pandas.tests.indexes.multi.test_setops.the_int->pandas.MultiIndex.from_product([[1, pd.Timestamp('2000')], ['a', 'b']]).intersection(idx, sort=sort)
A:pandas.tests.indexes.multi.test_setops.empty->idx[:2].intersection(idx[2:], sort=sort)
A:pandas.tests.indexes.multi.test_setops.sorted_->pandas.MultiIndex.from_product([[0, 1], ['a', 'b']])
A:pandas.tests.indexes.multi.test_setops.idx1->pandas.MultiIndex.from_product([['a', 'b'], [1, 2]])
A:pandas.tests.indexes.multi.test_setops.idx2->pandas.MultiIndex.from_product([['b', 'c'], [1, 2]])
pandas.tests.indexes.multi.test_setops.test_difference(idx,sort)
pandas.tests.indexes.multi.test_setops.test_difference_base(idx,sort)
pandas.tests.indexes.multi.test_setops.test_difference_sort_incomparable()
pandas.tests.indexes.multi.test_setops.test_difference_sort_incomparable_true()
pandas.tests.indexes.multi.test_setops.test_difference_sort_special()
pandas.tests.indexes.multi.test_setops.test_difference_sort_special_true()
pandas.tests.indexes.multi.test_setops.test_empty(idx)
pandas.tests.indexes.multi.test_setops.test_intersect_equal_sort()
pandas.tests.indexes.multi.test_setops.test_intersect_equal_sort_true()
pandas.tests.indexes.multi.test_setops.test_intersection(idx,sort)
pandas.tests.indexes.multi.test_setops.test_intersection_base(idx,sort)
pandas.tests.indexes.multi.test_setops.test_set_ops_error_cases(idx,case,sort,method)
pandas.tests.indexes.multi.test_setops.test_setops_disallow_true(method)
pandas.tests.indexes.multi.test_setops.test_symmetric_difference(idx,sort)
pandas.tests.indexes.multi.test_setops.test_union(idx,sort)
pandas.tests.indexes.multi.test_setops.test_union_base(idx,sort)
pandas.tests.indexes.multi.test_setops.test_union_sort_other_empty(slice_)
pandas.tests.indexes.multi.test_setops.test_union_sort_other_empty_sort(slice_)
pandas.tests.indexes.multi.test_setops.test_union_sort_other_incomparable()
pandas.tests.indexes.multi.test_setops.test_union_sort_other_incomparable_sort()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_equivalence.py----------------------------------------
A:pandas.tests.indexes.multi.test_equivalence.same_values->Index(idx, dtype=object)
A:pandas.tests.indexes.multi.test_equivalence.n->len(index_a)
A:pandas.tests.indexes.multi.test_equivalence.index_c->index_a[0:-1].append(index_a[-2:-1])
A:pandas.tests.indexes.multi.test_equivalence.expected1->numpy.array([True] * n)
A:pandas.tests.indexes.multi.test_equivalence.expected2->numpy.array([True] * (n - 1) + [False])
A:pandas.tests.indexes.multi.test_equivalence.array_a->numpy.array(index_a)
A:pandas.tests.indexes.multi.test_equivalence.array_b->numpy.array(index_a[0:-1])
A:pandas.tests.indexes.multi.test_equivalence.array_c->numpy.array(index_a[0:-1].append(index_a[-2:-1]))
A:pandas.tests.indexes.multi.test_equivalence.array_d->numpy.array(index_a[0:1])
A:pandas.tests.indexes.multi.test_equivalence.series_a->Series(array_a)
A:pandas.tests.indexes.multi.test_equivalence.series_b->Series(array_b)
A:pandas.tests.indexes.multi.test_equivalence.series_c->Series(array_c)
A:pandas.tests.indexes.multi.test_equivalence.series_d->Series(array_d)
A:pandas.tests.indexes.multi.test_equivalence.expected3->numpy.array([False] * (len(index_a) - 2) + [True, False])
A:pandas.tests.indexes.multi.test_equivalence.index->MultiIndex(levels=[major_axis, minor_axis], codes=[major_codes, minor_codes])
A:pandas.tests.indexes.multi.test_equivalence.index2->MultiIndex(levels=index.levels[:-1], codes=index.codes[:-1])
A:pandas.tests.indexes.multi.test_equivalence.major_axis->Index(['foo', 'bar', 'baz', 'qux'])
A:pandas.tests.indexes.multi.test_equivalence.minor_axis->Index(['one', 'two'])
A:pandas.tests.indexes.multi.test_equivalence.major_codes->numpy.array([0, 0, 2, 2, 3, 3])
A:pandas.tests.indexes.multi.test_equivalence.minor_codes->numpy.array([0, 1, 0, 1, 0, 1])
A:pandas.tests.indexes.multi.test_equivalence.mi->pandas.MultiIndex.from_tuples(zip(range(10), range(10)))
A:pandas.tests.indexes.multi.test_equivalence.mi2->pandas.MultiIndex.from_tuples(zip(range(10), range(10))).view()
A:pandas.tests.indexes.multi.test_equivalence.mi3->pandas.MultiIndex.from_tuples(zip(range(10), range(10))).view().set_levels([list(range(10)), list(range(10))])
A:pandas.tests.indexes.multi.test_equivalence.mi4->pandas.MultiIndex.from_tuples(zip(range(10), range(10))).view().set_levels([list(range(10)), list(range(10))]).view()
A:pandas.tests.indexes.multi.test_equivalence.i->pandas.MultiIndex.from_tuples([(0, pd.NaT), (0, pd.Timestamp('20130101'))])
A:pandas.tests.indexes.multi.test_equivalence.result->pandas.Series(midx > midx)
A:pandas.tests.indexes.multi.test_equivalence.mi5->pandas.MultiIndex.from_tuples(zip(range(10), range(10))).view()
A:pandas.tests.indexes.multi.test_equivalence.midx->pandas.MultiIndex.from_product([[0, 1]])
A:pandas.tests.indexes.multi.test_equivalence.expected->pandas.Series([False, False])
pandas.tests.indexes.multi.test_equivalence.test_equals(idx)
pandas.tests.indexes.multi.test_equivalence.test_equals_missing_values()
pandas.tests.indexes.multi.test_equivalence.test_equals_multi(idx)
pandas.tests.indexes.multi.test_equivalence.test_equals_op(idx)
pandas.tests.indexes.multi.test_equivalence.test_equals_operator(idx)
pandas.tests.indexes.multi.test_equivalence.test_identical(idx)
pandas.tests.indexes.multi.test_equivalence.test_is_()
pandas.tests.indexes.multi.test_equivalence.test_is_all_dates(idx)
pandas.tests.indexes.multi.test_equivalence.test_is_numeric(idx)
pandas.tests.indexes.multi.test_equivalence.test_multiindex_compare()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_missing.py----------------------------------------
A:pandas.tests.indexes.multi.test_missing.idx->MultiIndex(levels=[[np.nan, None, pd.NaT, '128', 2], [np.nan, None, pd.NaT, '128', 2]], codes=[[0, -1, 1, 2, 3, 4], [0, -1, 3, 3, 3, 4]])
A:pandas.tests.indexes.multi.test_missing.result->MultiIndex(levels=[[np.nan, None, pd.NaT, '128', 2], [np.nan, None, pd.NaT, '128', 2]], codes=[[0, -1, 1, 2, 3, 4], [0, -1, 3, 3, 3, 4]]).fillna(idx[0])
A:pandas.tests.indexes.multi.test_missing.expected->numpy.array([False] * len(index), dtype=bool)
A:pandas.tests.indexes.multi.test_missing.exp->pandas.MultiIndex.from_arrays([[1, np.nan, 3, 5], [1, 2, np.nan, 5], ['a', 'b', 'c', 'e']])
A:pandas.tests.indexes.multi.test_missing.index->type(idx)(values)
A:pandas.tests.indexes.multi.test_missing.idx0->pandas.MultiIndex(levels=[['A', 'B'], []], codes=[[1, 0], [-1, -1]], names=[0, 1])
A:pandas.tests.indexes.multi.test_missing.idx1->pandas.MultiIndex(levels=[['C'], ['D']], codes=[[0], [0]], names=[0, 1])
A:pandas.tests.indexes.multi.test_missing.idxm->pandas.MultiIndex(levels=[['A', 'B'], []], codes=[[1, 0], [-1, -1]], names=[0, 1]).join(idx1, how='outer')
A:pandas.tests.indexes.multi.test_missing.df0->pandas.DataFrame([[1, 2]], index=idx0)
A:pandas.tests.indexes.multi.test_missing.df1->pandas.DataFrame([[3, 4]], index=idx1)
pandas.tests.indexes.multi.test_missing.test_dropna()
pandas.tests.indexes.multi.test_missing.test_fillna(idx)
pandas.tests.indexes.multi.test_missing.test_hasnans_isnans(idx)
pandas.tests.indexes.multi.test_missing.test_nan_stays_float()
pandas.tests.indexes.multi.test_missing.test_nulls(idx)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_conversion.py----------------------------------------
A:pandas.tests.indexes.multi.test_conversion.result->idx.to_flat_index()
A:pandas.tests.indexes.multi.test_conversion.exp->list(idx.values)
A:pandas.tests.indexes.multi.test_conversion.index->pandas.MultiIndex.from_product([[1, 2], ['a', 'b'], date_range('20130101', periods=3, tz='US/Eastern')], names=['one', 'two', 'three'])
A:pandas.tests.indexes.multi.test_conversion.expected->pandas.Index((('foo', 'one'), ('foo', 'two'), ('bar', 'one'), ('baz', 'two'), ('qux', 'one'), ('qux', 'two')), tupleize_cols=False)
A:pandas.tests.indexes.multi.test_conversion.mi->pandas.MultiIndex.from_arrays([['a', 'b', 'c'], ['x', 'y', 'z'], ['q', 'w', 'e']], names=expected)
A:pandas.tests.indexes.multi.test_conversion.expected_df->pandas.DataFrame({'dates': pd.date_range('19910905', periods=6, tz='US/Eastern'), 'a': [1, 1, 1, 2, 2, 2], 'b': pd.Categorical(['a', 'a', 'b', 'b', 'c', 'c'], ordered=True), 'c': ['x', 'x', 'y', 'z', 'x', 'y']})
A:pandas.tests.indexes.multi.test_conversion.df->pandas.MultiIndex.from_arrays([['a', 'b', 'c'], ['x', 'y', 'z'], ['q', 'w', 'e']], names=expected).to_frame(index=False)
A:pandas.tests.indexes.multi.test_conversion.df_dtypes->pandas.MultiIndex.from_arrays([['a', 'b', 'c'], ['x', 'y', 'z'], ['q', 'w', 'e']], names=expected).to_frame(index=False).dtypes.to_dict()
A:pandas.tests.indexes.multi.test_conversion.unpickled->pandas._testing.round_trip_pickle(indices)
A:pandas.tests.indexes.multi.test_conversion.s->idx.to_series(name='__test')
pandas.tests.indexes.multi.test_conversion.test_pickle(indices)
pandas.tests.indexes.multi.test_conversion.test_roundtrip_pickle_with_tz()
pandas.tests.indexes.multi.test_conversion.test_to_flat_index(idx)
pandas.tests.indexes.multi.test_conversion.test_to_frame()
pandas.tests.indexes.multi.test_conversion.test_to_frame_dtype_fidelity()
pandas.tests.indexes.multi.test_conversion.test_to_frame_resulting_column_order()
pandas.tests.indexes.multi.test_conversion.test_to_numpy(idx)
pandas.tests.indexes.multi.test_conversion.test_to_series(idx)
pandas.tests.indexes.multi.test_conversion.test_to_series_with_arguments(idx)
pandas.tests.indexes.multi.test_conversion.test_tolist(idx)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_partial_indexing.py----------------------------------------
A:pandas.tests.indexes.multi.test_partial_indexing.dr->date_range('2013-01-01', periods=100, freq='D')
A:pandas.tests.indexes.multi.test_partial_indexing.ix->pandas.MultiIndex.from_product([dr, ['a', 'b']])
A:pandas.tests.indexes.multi.test_partial_indexing.df->DataFrame(np.random.randn(200, 1), columns=['A'], index=ix)
A:pandas.tests.indexes.multi.test_partial_indexing.df_swap->df_swap.sort_index().sort_index()
A:pandas.tests.indexes.multi.test_partial_indexing.expected.index->expected.index.droplevel(1)
pandas.tests.indexes.multi.test_partial_indexing.test_partial_string_timestamp_multiindex()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_get_set.py----------------------------------------
A:pandas.tests.indexes.multi.test_get_set.act->numpy.asarray(act)
A:pandas.tests.indexes.multi.test_get_set.exp->CategoricalIndex([1, 2, 3, 1, 2, 3])
A:pandas.tests.indexes.multi.test_get_set.result->pandas.MultiIndex.from_arrays([sizes, colors], names=['size', 'color']).set_levels(map(int, ['3', '2', '1']), level='size')
A:pandas.tests.indexes.multi.test_get_set.expected->pandas.MultiIndex.from_arrays([expected_sizes, colors], names=['size', 'color'])
A:pandas.tests.indexes.multi.test_get_set.index->pandas.MultiIndex.from_arrays([sizes, colors], names=['size', 'color'])
A:pandas.tests.indexes.multi.test_get_set.ind->pandas.MultiIndex.from_tuples([(0, i) for i in range(130)])
A:pandas.tests.indexes.multi.test_get_set.res->pandas.MultiIndex.from_tuples([(0, i) for i in range(130)]).set_names(new_names2, level=[0, 1], inplace=True)
A:pandas.tests.indexes.multi.test_get_set.ind2->pandas.MultiIndex.from_arrays([lev1, lev2], names=['Name', 'Number']).copy()
A:pandas.tests.indexes.multi.test_get_set.inplace_return->pandas.MultiIndex.from_arrays([lev1, lev2], names=['Name', 'Number']).copy().set_codes(new_codes, level=[0, 1], inplace=True)
A:pandas.tests.indexes.multi.test_get_set.original_index->pandas.MultiIndex.from_arrays([lev1, lev2], names=['Name', 'Number']).copy()
A:pandas.tests.indexes.multi.test_get_set.new_codes->range(129, -1, -1)
A:pandas.tests.indexes.multi.test_get_set.m->pandas.MultiIndex.from_product([[0, 1]])
A:pandas.tests.indexes.multi.test_get_set.cidx->CategoricalIndex(list('bac'), ordered=ordered)
A:pandas.tests.indexes.multi.test_get_set.result_lvl->pandas.MultiIndex.from_arrays([sizes, colors], names=['size', 'color']).set_levels(map(int, ['3', '2', '1']), level='size').get_level_values(0)
A:pandas.tests.indexes.multi.test_get_set.expected_lvl->CategoricalIndex(list('bacb'), categories=cidx.categories, ordered=cidx.ordered)
A:pandas.tests.indexes.multi.test_get_set.idx->pandas.MultiIndex.from_arrays([lev1, lev2], names=['Name', 'Number'])
A:pandas.tests.indexes.multi.test_get_set.df->df.sort_index().sort_index()
pandas.tests.indexes.multi.test_get_set.assert_matching(actual,expected,check_dtype=False)
pandas.tests.indexes.multi.test_get_set.test_get_level_number_integer(idx)
pandas.tests.indexes.multi.test_get_set.test_get_level_values(idx)
pandas.tests.indexes.multi.test_get_set.test_get_level_values_all_na()
pandas.tests.indexes.multi.test_get_set.test_get_level_values_int_with_na()
pandas.tests.indexes.multi.test_get_set.test_get_level_values_na()
pandas.tests.indexes.multi.test_get_set.test_get_value_duplicates()
pandas.tests.indexes.multi.test_get_set.test_set_codes(idx)
pandas.tests.indexes.multi.test_get_set.test_set_levels(idx)
pandas.tests.indexes.multi.test_get_set.test_set_levels_categorical(ordered)
pandas.tests.indexes.multi.test_get_set.test_set_levels_codes_directly(idx)
pandas.tests.indexes.multi.test_get_set.test_set_levels_codes_names_bad_input(idx)
pandas.tests.indexes.multi.test_get_set.test_set_levels_with_iterable()
pandas.tests.indexes.multi.test_get_set.test_set_name_methods(idx,index_names)
pandas.tests.indexes.multi.test_get_set.test_set_names_with_nlevel_1(inplace)
pandas.tests.indexes.multi.test_get_set.test_set_value_keeps_names()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_contains.py----------------------------------------
A:pandas.tests.indexes.multi.test_contains.midx->pandas.MultiIndex.from_arrays([[np.nan, 'a', 'b'], ['c', 'd', np.nan]])
A:pandas.tests.indexes.multi.test_contains.mi->MultiIndex(levels=[['C'], pd.date_range('2012-01-01', periods=5)], codes=[[0, 0, 0, 0, 0, 0], [-1, 0, 1, 2, 3, 4]], names=[None, 'B'])
A:pandas.tests.indexes.multi.test_contains.idx->pandas.MultiIndex.from_arrays([[1, 2], [np.nan, 3]])
A:pandas.tests.indexes.multi.test_contains.result->pandas.MultiIndex.from_arrays([[1, 2], [np.nan, 3]]).isin(values)
A:pandas.tests.indexes.multi.test_contains.expected->numpy.array([False, False, True, True])
pandas.tests.indexes.multi.test_contains.test_contains(idx)
pandas.tests.indexes.multi.test_contains.test_contains_top_level()
pandas.tests.indexes.multi.test_contains.test_contains_with_missing_value()
pandas.tests.indexes.multi.test_contains.test_contains_with_nat()
pandas.tests.indexes.multi.test_contains.test_isin()
pandas.tests.indexes.multi.test_contains.test_isin_level_kwarg()
pandas.tests.indexes.multi.test_contains.test_isin_multi_index_with_missing_value(labels,expected,level)
pandas.tests.indexes.multi.test_contains.test_isin_nan_not_pypy()
pandas.tests.indexes.multi.test_contains.test_isin_nan_pypy()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_format.py----------------------------------------
A:pandas.tests.indexes.multi.test_format.index->MultiIndex(levels=[[0, 1], [0, 1], [0, 1], [0]], codes=[[0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0]])
A:pandas.tests.indexes.multi.test_format.result->pandas.MultiIndex.from_product([list('ab'), range(3)], names=['first', 'second']).__repr__()
A:pandas.tests.indexes.multi.test_format.mi->pandas.MultiIndex.from_product([list('ab'), range(3)], names=['first', 'second'])
A:pandas.tests.indexes.multi.test_format.idx->idx.repeat(50).repeat(50)
pandas.tests.indexes.multi.test_format.TestRepr
pandas.tests.indexes.multi.test_format.TestRepr.test_repr(self,idx)
pandas.tests.indexes.multi.test_format.TestRepr.test_rjust(self,narrow_multi_index)
pandas.tests.indexes.multi.test_format.TestRepr.test_tuple_width(self,wide_multi_index)
pandas.tests.indexes.multi.test_format.test_format(idx)
pandas.tests.indexes.multi.test_format.test_format_integer_names()
pandas.tests.indexes.multi.test_format.test_format_sparse_config(idx)
pandas.tests.indexes.multi.test_format.test_format_sparse_display()
pandas.tests.indexes.multi.test_format.test_repr_max_seq_item_setting(idx)
pandas.tests.indexes.multi.test_format.test_repr_roundtrip_raises()
pandas.tests.indexes.multi.test_format.test_repr_with_unicode_data()
pandas.tests.indexes.multi.test_format.test_unicode_string_with_unicode()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_integrity.py----------------------------------------
A:pandas.tests.indexes.multi.test_integrity.i->pandas.MultiIndex.from_product([['a'], range(1000)])
A:pandas.tests.indexes.multi.test_integrity.result->pandas.MultiIndex.from_product(vals, names=['str', 'dt']).memory_usage()
A:pandas.tests.indexes.multi.test_integrity.expected->pandas.Int64Index(np.tile(np.arange(10), 10), name='buzz')
A:pandas.tests.indexes.multi.test_integrity.ints->numpy.arange(2007, 2012)
A:pandas.tests.indexes.multi.test_integrity.naive->pandas.DatetimeIndex(ints)
A:pandas.tests.indexes.multi.test_integrity.aware->pandas.DatetimeIndex(ints, tz='US/Central')
A:pandas.tests.indexes.multi.test_integrity.idx->pandas.MultiIndex.from_product(vals, names=['str', 'dt'])
A:pandas.tests.indexes.multi.test_integrity.outer->pandas.Int64Index([x[0] for x in result])
A:pandas.tests.indexes.multi.test_integrity.inner->pandas.PeriodIndex([x[1] for x in result])
A:pandas.tests.indexes.multi.test_integrity.pidx->pandas.PeriodIndex(ints, freq='D')
A:pandas.tests.indexes.multi.test_integrity.major_axis->list(range(70000))
A:pandas.tests.indexes.multi.test_integrity.minor_axis->list(range(10))
A:pandas.tests.indexes.multi.test_integrity.major_codes->numpy.array([0, 0, 1, 1, 1, 2, 2, 3, 3])
A:pandas.tests.indexes.multi.test_integrity.minor_codes->numpy.array([0, 1, 0, 1, 1, 0, 1, 0, 1])
A:pandas.tests.indexes.multi.test_integrity.index->pandas.MultiIndex.from_product([np.arange(1000), np.arange(1000)], names=['one', 'two'])
A:pandas.tests.indexes.multi.test_integrity.df_below_1000000->pandas.DataFrame(1, index=pd.MultiIndex.from_product([[1, 2], range(499999)]), columns=['dest'])
A:pandas.tests.indexes.multi.test_integrity.df_above_1000000->pandas.DataFrame(1, index=pd.MultiIndex.from_product([[1, 2], range(500001)]), columns=['dest'])
A:pandas.tests.indexes.multi.test_integrity.r->list(range(1000000))
A:pandas.tests.indexes.multi.test_integrity.df->pandas.concat({'foo': foo.stack(), 'bar': bar.stack()}, axis=1)
A:pandas.tests.indexes.multi.test_integrity.mutable_regex->re.compile('does not support mutable operations')
A:pandas.tests.indexes.multi.test_integrity.ind->pandas.MultiIndex.from_arrays([['A', 'A', 'B', 'B', 'B'], [1, 2, 1, 2, 3]])
A:pandas.tests.indexes.multi.test_integrity.foo->pandas.DataFrame(np.arange(100).reshape((10, 10)))
A:pandas.tests.indexes.multi.test_integrity.bar->pandas.DataFrame(np.arange(100).reshape((10, 10)))
A:pandas.tests.indexes.multi.test_integrity.result2->pandas.MultiIndex.from_product(vals, names=['str', 'dt']).memory_usage()
A:pandas.tests.indexes.multi.test_integrity.result3->pandas.MultiIndex.from_product(vals, names=['str', 'dt']).memory_usage(deep=True)
pandas.tests.indexes.multi.test_integrity.take_invalid_kwargs()
pandas.tests.indexes.multi.test_integrity.test_can_hold_identifiers(idx)
pandas.tests.indexes.multi.test_integrity.test_consistency()
pandas.tests.indexes.multi.test_integrity.test_dims()
pandas.tests.indexes.multi.test_integrity.test_hash_collisions()
pandas.tests.indexes.multi.test_integrity.test_hash_error(indices)
pandas.tests.indexes.multi.test_integrity.test_isna_behavior(idx)
pandas.tests.indexes.multi.test_integrity.test_labels_dtypes()
pandas.tests.indexes.multi.test_integrity.test_large_multiindex_error()
pandas.tests.indexes.multi.test_integrity.test_level_setting_resets_attributes()
pandas.tests.indexes.multi.test_integrity.test_memory_usage(idx)
pandas.tests.indexes.multi.test_integrity.test_metadata_immutable(idx)
pandas.tests.indexes.multi.test_integrity.test_million_record_attribute_error()
pandas.tests.indexes.multi.test_integrity.test_mutability(indices)
pandas.tests.indexes.multi.test_integrity.test_nlevels(idx)
pandas.tests.indexes.multi.test_integrity.test_rangeindex_fallback_coercion_bug()
pandas.tests.indexes.multi.test_integrity.test_values_boxed()
pandas.tests.indexes.multi.test_integrity.test_values_multiindex_datetimeindex()
pandas.tests.indexes.multi.test_integrity.test_values_multiindex_dtindex()
pandas.tests.indexes.multi.test_integrity.test_values_multiindex_periodindex()
pandas.tests.indexes.multi.test_integrity.test_wrong_number_names(indices)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_names.py----------------------------------------
A:pandas.tests.indexes.multi.test_names.x->pandas.MultiIndex.from_tuples([('a', 'b'), (1, 2), ('c', 'd')], names=['x', 'y'])
A:pandas.tests.indexes.multi.test_names.result->result.set_index('z').set_index('z')
A:pandas.tests.indexes.multi.test_names.df_expected->df_expected.set_index('z').set_index('z')
A:pandas.tests.indexes.multi.test_names.view->pandas.MultiIndex.from_product([['a'], [1, 2]], names=['a', 'b']).view()
A:pandas.tests.indexes.multi.test_names.copy->pandas.MultiIndex.from_product([['a'], [1, 2]], names=['a', 'b']).copy()
A:pandas.tests.indexes.multi.test_names.shallow_copy->pandas.MultiIndex.from_product([['a'], [1, 2]], names=['a', 'b'])._shallow_copy()
A:pandas.tests.indexes.multi.test_names.taken->pandas.MultiIndex.from_product([['a'], [1, 2]], names=['a', 'b']).take([3, 0, 1])
A:pandas.tests.indexes.multi.test_names.multi_idx->pandas.Index([(1, 2), (3, 4)], names=['MyName1', 'MyName2'])
A:pandas.tests.indexes.multi.test_names.multi_idx1->pandas.Index([(1, 2), (3, 4)], names=['MyName1', 'MyName2']).copy()
A:pandas.tests.indexes.multi.test_names.multi_idx2->pandas.Index([(1, 2), (3, 4)], names=['MyName1', 'MyName2']).copy(names=['NewName1', 'NewName2'])
A:pandas.tests.indexes.multi.test_names.multi_idx3->pandas.Index([(1, 2), (3, 4)], names=['MyName1', 'MyName2']).copy(name=['NewName1', 'NewName2'])
A:pandas.tests.indexes.multi.test_names.idx->pandas.MultiIndex.from_product([['a'], [1, 2]], names=['a', 'b'])
A:pandas.tests.indexes.multi.test_names.new->pandas.Series(1, index=idx.levels[0])
pandas.tests.indexes.multi.test_names.check_level_names(index,names)
pandas.tests.indexes.multi.test_names.test_changing_names(idx)
pandas.tests.indexes.multi.test_names.test_copy_names()
pandas.tests.indexes.multi.test_names.test_duplicate_level_names_access_raises(idx)
pandas.tests.indexes.multi.test_names.test_get_names_from_levels()
pandas.tests.indexes.multi.test_names.test_index_name_retained()
pandas.tests.indexes.multi.test_names.test_names(idx,index_names)
pandas.tests.indexes.multi.test_names.test_setting_names_from_levels_raises()
pandas.tests.indexes.multi.test_names.test_slice_keep_name()
pandas.tests.indexes.multi.test_names.test_take_preserve_name(idx)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_monotonic.py----------------------------------------
A:pandas.tests.indexes.multi.test_monotonic.i->pandas.MultiIndex.from_arrays([[], []])
A:pandas.tests.indexes.multi.test_monotonic.idx->pandas.MultiIndex(levels=[['baz', 'bar'], ['next', 'mom']], codes=[[0, 0, 1, 1], [0, 0, 0, 1]])
A:pandas.tests.indexes.multi.test_monotonic.expected_right->len(indices)
A:pandas.tests.indexes.multi.test_monotonic.ssm_left->indices._searchsorted_monotonic(value, side='left')
A:pandas.tests.indexes.multi.test_monotonic.ssm_right->indices._searchsorted_monotonic(value, side='right')
A:pandas.tests.indexes.multi.test_monotonic.ss_left->indices.searchsorted(value, side='left')
A:pandas.tests.indexes.multi.test_monotonic.ss_right->indices.searchsorted(value, side='right')
pandas.tests.indexes.multi.test_monotonic.test_is_monotonic_decreasing()
pandas.tests.indexes.multi.test_monotonic.test_is_monotonic_increasing()
pandas.tests.indexes.multi.test_monotonic.test_is_strictly_monotonic_decreasing()
pandas.tests.indexes.multi.test_monotonic.test_is_strictly_monotonic_increasing()
pandas.tests.indexes.multi.test_monotonic.test_searchsorted_monotonic(indices)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_indexing.py----------------------------------------
A:pandas.tests.indexes.multi.test_indexing.(sorted_idx, _)->pandas.MultiIndex.from_arrays(index_arr).sortlevel(0)
A:pandas.tests.indexes.multi.test_indexing.result->pandas.MultiIndex.from_arrays(index_arr).slice_locs(start=start_idx, end=end_idx)
A:pandas.tests.indexes.multi.test_indexing.df->pandas.DataFrame({'foo': np.arange(len(idx))}, idx)
A:pandas.tests.indexes.multi.test_indexing.stacked->pandas.DataFrame({'foo': np.arange(len(idx))}, idx).stack()
A:pandas.tests.indexes.multi.test_indexing.slob->slice(*idx.slice_locs(df.index[5] + timedelta(seconds=30), df.index[15] - timedelta(seconds=30)))
A:pandas.tests.indexes.multi.test_indexing.expected->slice(2, 4, None)
A:pandas.tests.indexes.multi.test_indexing.index->MultiIndex(levels=[[2000], list(range(4))], codes=[np.array([0, 0, 0, 0]), np.array([0, 1, 2, 3])])
A:pandas.tests.indexes.multi.test_indexing.(sorted_index, _)->MultiIndex(levels=[[2000], list(range(4))], codes=[np.array([0, 0, 0, 0]), np.array([0, 1, 2, 3])]).sortlevel(0)
A:pandas.tests.indexes.multi.test_indexing.major_axis->Index(np.arange(4))
A:pandas.tests.indexes.multi.test_indexing.minor_axis->Index(np.arange(2))
A:pandas.tests.indexes.multi.test_indexing.major_codes->numpy.array([0, 0, 1, 2, 2, 3, 3], dtype=np.intp)
A:pandas.tests.indexes.multi.test_indexing.minor_codes->numpy.array([0, 1, 0, 0, 1, 0, 1], dtype=np.intp)
A:pandas.tests.indexes.multi.test_indexing.r1->Index(list(range(10)) + list(range(10))).get_indexer([1, 2, 3])
A:pandas.tests.indexes.multi.test_indexing.e1->numpy.array([0, 0, 1, 1, 2], dtype=np.intp)
A:pandas.tests.indexes.multi.test_indexing.r2->Index(list(range(20))).get_indexer(idx1[::-1], method='backfill')
A:pandas.tests.indexes.multi.test_indexing.rffill1->Index(list(range(20))).get_indexer(idx1, method='ffill')
A:pandas.tests.indexes.multi.test_indexing.rbfill1->Index(list(range(20))).get_indexer(idx1, method='bfill')
A:pandas.tests.indexes.multi.test_indexing.rexp1->Index(list(range(10)) + list(range(10))).get_indexer(idx2)
A:pandas.tests.indexes.multi.test_indexing.idx1->Index(list(range(10)) + list(range(10)))
A:pandas.tests.indexes.multi.test_indexing.idx2->Index(list(range(20)))
A:pandas.tests.indexes.multi.test_indexing.midx->pandas.MultiIndex.from_product([Categorical(['a', 'b', 'c']), Categorical(date_range('2012-01-01', periods=3, freq='H'))])
A:pandas.tests.indexes.multi.test_indexing.indexer->pandas.MultiIndex.from_arrays(index_arr).get_indexer(idx[0:2])
A:pandas.tests.indexes.multi.test_indexing.(indexer, _)->pandas.MultiIndex.from_arrays(index_arr).get_indexer_non_unique(idx[0:2])
A:pandas.tests.indexes.multi.test_indexing.idx->pandas.MultiIndex.from_arrays(index_arr)
A:pandas.tests.indexes.multi.test_indexing.rs->MultiIndex(levels=[[2000], list(range(4))], codes=[np.array([0, 0, 0, 0]), np.array([0, 1, 2, 3])]).get_loc('c')
A:pandas.tests.indexes.multi.test_indexing.(loc, new_index)->MultiIndex(levels=[[2000], list(range(4))], codes=[np.array([0, 0, 0, 0]), np.array([0, 1, 2, 3])]).get_loc_level((0, 1, 0))
A:pandas.tests.indexes.multi.test_indexing.exp_index->index[expected].droplevel(0).droplevel(0)
A:pandas.tests.indexes.multi.test_indexing.(result, new_index)->MultiIndex(levels=[[2000], list(range(4))], codes=[np.array([0, 0, 0, 0]), np.array([0, 1, 2, 3])]).get_loc_level((2000, slice(None, None)))
A:pandas.tests.indexes.multi.test_indexing.levels[level]->numpy.array([0, nulls_fixture], dtype=type(nulls_fixture))
A:pandas.tests.indexes.multi.test_indexing.key[level]->key_dtype(1)
A:pandas.tests.indexes.multi.test_indexing.qidx->pandas.MultiIndex.from_product([pd.date_range(start='2019-01-02T00:15:33', end='2019-01-05T02:15:33', freq='H', name='date'), ['x'], [3]])
A:pandas.tests.indexes.multi.test_indexing.should_be->pandas.Series(data=np.arange(24, len(qidx) + 24), index=qidx, name='foo')
pandas.tests.indexes.multi.test_indexing.test_get_indexer()
pandas.tests.indexes.multi.test_indexing.test_get_indexer_categorical_time()
pandas.tests.indexes.multi.test_indexing.test_get_indexer_consistency(idx)
pandas.tests.indexes.multi.test_indexing.test_get_indexer_nearest()
pandas.tests.indexes.multi.test_indexing.test_get_indexer_with_missing_value(index_arr,labels,expected)
pandas.tests.indexes.multi.test_indexing.test_get_loc(idx)
pandas.tests.indexes.multi.test_indexing.test_get_loc_cast_bool()
pandas.tests.indexes.multi.test_indexing.test_get_loc_duplicates()
pandas.tests.indexes.multi.test_indexing.test_get_loc_implicit_cast(level,dtypes)
pandas.tests.indexes.multi.test_indexing.test_get_loc_level()
pandas.tests.indexes.multi.test_indexing.test_get_loc_missing_nan()
pandas.tests.indexes.multi.test_indexing.test_get_loc_multiple_dtypes(dtype1,dtype2)
pandas.tests.indexes.multi.test_indexing.test_get_loc_nan(level,nulls_fixture)
pandas.tests.indexes.multi.test_indexing.test_get_loc_with_values_including_missing_values()
pandas.tests.indexes.multi.test_indexing.test_get_slice_bound_with_missing_value(index_arr,expected,target,algo)
pandas.tests.indexes.multi.test_indexing.test_getitem(idx)
pandas.tests.indexes.multi.test_indexing.test_getitem_bool_index_all(ind1,ind2)
pandas.tests.indexes.multi.test_indexing.test_getitem_bool_index_single(ind1,ind2)
pandas.tests.indexes.multi.test_indexing.test_getitem_group_select(idx)
pandas.tests.indexes.multi.test_indexing.test_putmask_with_wrong_mask(idx)
pandas.tests.indexes.multi.test_indexing.test_slice_indexer_with_missing_value(index_arr,expected,start_idx,end_idx)
pandas.tests.indexes.multi.test_indexing.test_slice_locs()
pandas.tests.indexes.multi.test_indexing.test_slice_locs_not_contained()
pandas.tests.indexes.multi.test_indexing.test_slice_locs_not_sorted()
pandas.tests.indexes.multi.test_indexing.test_slice_locs_partial(idx)
pandas.tests.indexes.multi.test_indexing.test_slice_locs_with_missing_value(index_arr,expected,start_idx,end_idx)
pandas.tests.indexes.multi.test_indexing.test_slice_locs_with_type_mismatch()
pandas.tests.indexes.multi.test_indexing.test_timestamp_multiindex_indexer()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/conftest.py----------------------------------------
A:pandas.tests.indexes.multi.conftest.major_axis->Index(['foo', 'bar', 'baz', 'qux'])
A:pandas.tests.indexes.multi.conftest.minor_axis->Index(['one', 'two'])
A:pandas.tests.indexes.multi.conftest.major_codes->numpy.array([0, 0, 1, 0, 1, 1])
A:pandas.tests.indexes.multi.conftest.minor_codes->numpy.array([0, 1, 0, 1, 0, 1])
A:pandas.tests.indexes.multi.conftest.mi->MultiIndex(levels=[major_axis, minor_axis], codes=[major_codes, minor_codes], names=index_names, verify_integrity=False)
A:pandas.tests.indexes.multi.conftest.ci->pandas.CategoricalIndex(list('a' * n) + ['abc'] * n)
A:pandas.tests.indexes.multi.conftest.dti->pandas.date_range('2000-01-01', freq='s', periods=n * 2)
pandas.tests.indexes.multi.conftest.compat_props()
pandas.tests.indexes.multi.conftest.holder()
pandas.tests.indexes.multi.conftest.idx()
pandas.tests.indexes.multi.conftest.idx_dup()
pandas.tests.indexes.multi.conftest.index_names()
pandas.tests.indexes.multi.conftest.narrow_multi_index()
pandas.tests.indexes.multi.conftest.wide_multi_index()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_constructors.py----------------------------------------
A:pandas.tests.indexes.multi.test_constructors.result->pandas.MultiIndex.from_frame(df)
A:pandas.tests.indexes.multi.test_constructors.expected->pandas.MultiIndex.from_tuples([('a', 'a'), ('a', 'b'), ('b', 'a'), ('b', 'b')], names=['L1', 'L2'])
A:pandas.tests.indexes.multi.test_constructors.mi->pandas.MultiIndex.from_frame(df, names=names_in)
A:pandas.tests.indexes.multi.test_constructors.levels->numpy.array(['a', 'b', 'c'])
A:pandas.tests.indexes.multi.test_constructors.codes->numpy.array([1, 1, 2, 0, 0, 1, 1])
A:pandas.tests.indexes.multi.test_constructors.arrays->tuple((tuple(np.asarray(lev).take(level_codes)) for (lev, level_codes) in zip(idx.levels, idx.codes)))
A:pandas.tests.indexes.multi.test_constructors.idx1->pandas.CategoricalIndex(list('abcaab'), categories=list('bac'), ordered=False)
A:pandas.tests.indexes.multi.test_constructors.idx2->pandas.CategoricalIndex(list('abcaab'), categories=list('bac'), ordered=True)
A:pandas.tests.indexes.multi.test_constructors.result2->pandas.MultiIndex.from_arrays([pd.Series(idx1), pd.Series(idx2)])
A:pandas.tests.indexes.multi.test_constructors.idx3->pandas.timedelta_range('1 days', freq='D', periods=3)
A:pandas.tests.indexes.multi.test_constructors.idx4->pandas.period_range('2011-01-01', freq='D', periods=3)
A:pandas.tests.indexes.multi.test_constructors.result3->pandas.MultiIndex.from_arrays([idx1.values, idx2.values])
A:pandas.tests.indexes.multi.test_constructors.a->MultiIndex(levels=[[], []], codes=[[], []], names=['a', 'b'])
A:pandas.tests.indexes.multi.test_constructors.b->pandas.MultiIndex.from_arrays(arrays=[[], []], names=['a', 'b'])
A:pandas.tests.indexes.multi.test_constructors.idx->pandas.CategoricalIndex(list('abcaab'), categories=list('bac'), ordered=ordered)
A:pandas.tests.indexes.multi.test_constructors.lvl2->list(range(N))
A:pandas.tests.indexes.multi.test_constructors.dt_index->date_range('2000-01-01', periods=2)
A:pandas.tests.indexes.multi.test_constructors.etalon->construct_1d_object_array_from_listlike([(1, pd.Timestamp('2000-01-01')), (1, pd.Timestamp('2000-01-02')), (2, pd.Timestamp('2000-01-01')), (2, pd.Timestamp('2000-01-02'))])
A:pandas.tests.indexes.multi.test_constructors.df->pandas.DataFrame([['a', 'a'], ['a', 'b'], ['b', 'a'], ['b', 'b']], columns=pd.MultiIndex.from_tuples([('L1', 'x'), ('L2', 'y')]))
A:pandas.tests.indexes.multi.test_constructors.original_dtypes->pandas.DataFrame([['a', 'a'], ['a', 'b'], ['b', 'a'], ['b', 'b']], columns=pd.MultiIndex.from_tuples([('L1', 'x'), ('L2', 'y')])).dtypes.to_dict()
A:pandas.tests.indexes.multi.test_constructors.expected_mi->pandas.MultiIndex.from_arrays([pd.date_range('19910905', periods=6, tz='US/Eastern'), [1, 1, 1, 2, 2, 2], pd.Categorical(['a', 'a', 'b', 'b', 'c', 'c'], ordered=True), ['x', 'x', 'y', 'z', 'x', 'y']], names=['dates', 'a', 'b', 'c'])
pandas.tests.indexes.multi.test_constructors.test_constructor_mismatched_codes_levels(idx)
pandas.tests.indexes.multi.test_constructors.test_constructor_no_levels()
pandas.tests.indexes.multi.test_constructors.test_constructor_nonhashable_names()
pandas.tests.indexes.multi.test_constructors.test_constructor_single_level()
pandas.tests.indexes.multi.test_constructors.test_copy_in_constructor()
pandas.tests.indexes.multi.test_constructors.test_create_index_existing_name(idx)
pandas.tests.indexes.multi.test_constructors.test_from_arrays(idx)
pandas.tests.indexes.multi.test_constructors.test_from_arrays_different_lengths(idx1,idx2)
pandas.tests.indexes.multi.test_constructors.test_from_arrays_empty()
pandas.tests.indexes.multi.test_constructors.test_from_arrays_index_datetimelike_mixed()
pandas.tests.indexes.multi.test_constructors.test_from_arrays_index_dtlike_mixed()
pandas.tests.indexes.multi.test_constructors.test_from_arrays_index_series_categorical()
pandas.tests.indexes.multi.test_constructors.test_from_arrays_index_series_datetimetz()
pandas.tests.indexes.multi.test_constructors.test_from_arrays_index_series_dttz()
pandas.tests.indexes.multi.test_constructors.test_from_arrays_index_series_period()
pandas.tests.indexes.multi.test_constructors.test_from_arrays_index_series_timedelta()
pandas.tests.indexes.multi.test_constructors.test_from_arrays_invalid_input(invalid_sequence_of_arrays)
pandas.tests.indexes.multi.test_constructors.test_from_arrays_iterator(idx)
pandas.tests.indexes.multi.test_constructors.test_from_arrays_respects_none_names()
pandas.tests.indexes.multi.test_constructors.test_from_arrays_tuples(idx)
pandas.tests.indexes.multi.test_constructors.test_from_frame()
pandas.tests.indexes.multi.test_constructors.test_from_frame_dtype_fidelity()
pandas.tests.indexes.multi.test_constructors.test_from_frame_error(non_frame)
pandas.tests.indexes.multi.test_constructors.test_from_frame_invalid_names(names,expected_error_msg)
pandas.tests.indexes.multi.test_constructors.test_from_frame_valid_names(names_in,names_out)
pandas.tests.indexes.multi.test_constructors.test_from_product()
pandas.tests.indexes.multi.test_constructors.test_from_product_datetimeindex()
pandas.tests.indexes.multi.test_constructors.test_from_product_dtindex()
pandas.tests.indexes.multi.test_constructors.test_from_product_empty_one_level()
pandas.tests.indexes.multi.test_constructors.test_from_product_empty_three_levels(N)
pandas.tests.indexes.multi.test_constructors.test_from_product_empty_two_levels(first,second)
pandas.tests.indexes.multi.test_constructors.test_from_product_empty_zero_levels()
pandas.tests.indexes.multi.test_constructors.test_from_product_index_series_categorical(ordered,f)
pandas.tests.indexes.multi.test_constructors.test_from_product_infer_names(a,b,expected_names)
pandas.tests.indexes.multi.test_constructors.test_from_product_invalid_input(invalid_input)
pandas.tests.indexes.multi.test_constructors.test_from_product_iterator()
pandas.tests.indexes.multi.test_constructors.test_from_product_readonly()
pandas.tests.indexes.multi.test_constructors.test_from_product_respects_none_names()
pandas.tests.indexes.multi.test_constructors.test_from_tuples()
pandas.tests.indexes.multi.test_constructors.test_from_tuples_empty()
pandas.tests.indexes.multi.test_constructors.test_from_tuples_index_values(idx)
pandas.tests.indexes.multi.test_constructors.test_from_tuples_iterator()
pandas.tests.indexes.multi.test_constructors.test_from_tuples_with_tuple_label()
pandas.tests.indexes.multi.test_constructors.test_index_equal_empty_iterable()
pandas.tests.indexes.multi.test_constructors.test_na_levels()
pandas.tests.indexes.multi.test_constructors.test_tuples_with_name_string()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_reindex.py----------------------------------------
A:pandas.tests.indexes.multi.test_reindex.(result, indexer)->pandas.MultiIndex.from_tuples([(0, 0), (1, 1), (1, 1), (2, 2)]).reindex(list(idx))
A:pandas.tests.indexes.multi.test_reindex.index->Index(['one'])
A:pandas.tests.indexes.multi.test_reindex.(target, indexer)->pandas.MultiIndex.from_tuples([(0, 0), (1, 1), (1, 1), (2, 2)]).reindex(index, level='second')
A:pandas.tests.indexes.multi.test_reindex.(target2, indexer2)->Index(['one']).reindex(idx, level='second')
A:pandas.tests.indexes.multi.test_reindex.exp_index->pandas.MultiIndex.from_tuples([(0, 0), (1, 1), (1, 1), (2, 2)]).join(index, level='second', how='right')
A:pandas.tests.indexes.multi.test_reindex.exp_index2->pandas.MultiIndex.from_tuples([(0, 0), (1, 1), (1, 1), (2, 2)]).join(index, level='second', how='left')
A:pandas.tests.indexes.multi.test_reindex.exp_indexer->numpy.array([0, 2, 4])
A:pandas.tests.indexes.multi.test_reindex.exp_indexer2->numpy.array([0, -1, 0, -1, 0, -1])
A:pandas.tests.indexes.multi.test_reindex.idx->pandas.MultiIndex.from_tuples([(0, 0), (1, 1), (1, 1), (2, 2)])
A:pandas.tests.indexes.multi.test_reindex.target->pandas.MultiIndex.from_tuples([(0, 0), (1, 1), (1, 1), (2, 2)]).copy()
A:pandas.tests.indexes.multi.test_reindex.other_dtype->pandas.MultiIndex.from_product([[1, 2], [3, 4]])
A:pandas.tests.indexes.multi.test_reindex.expected->numpy.arange(idx.size, dtype=np.intp)
A:pandas.tests.indexes.multi.test_reindex.actual->pandas.MultiIndex.from_tuples([(0, 0), (1, 1), (1, 1), (2, 2)]).get_indexer(idx)
A:pandas.tests.indexes.multi.test_reindex.a->pandas.Series(np.arange(4), index=idx)
A:pandas.tests.indexes.multi.test_reindex.new_idx->pandas.MultiIndex.from_tuples([(0, 0), (1, 1), (2, 2)])
pandas.tests.indexes.multi.test_reindex.test_reindex(idx)
pandas.tests.indexes.multi.test_reindex.test_reindex_base(idx)
pandas.tests.indexes.multi.test_reindex.test_reindex_level(idx)
pandas.tests.indexes.multi.test_reindex.test_reindex_lvl_preserves_names_when_target_is_list_or_array()
pandas.tests.indexes.multi.test_reindex.test_reindex_lvl_preserves_type_if_target_is_empty_list_or_array()
pandas.tests.indexes.multi.test_reindex.test_reindex_non_unique()
pandas.tests.indexes.multi.test_reindex.test_reindex_preserves_names_when_target_is_list_or_ndarray(idx)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_drop.py----------------------------------------
A:pandas.tests.indexes.multi.test_drop.dropped->index[:2].droplevel([])
A:pandas.tests.indexes.multi.test_drop.index->MultiIndex(levels=[Index(range(4)), Index(range(4)), Index(range(4))], codes=[np.array([0, 0, 1, 2, 2, 2, 3, 3]), np.array([0, 1, 0, 0, 0, 1, 0, 1]), np.array([1, 0, 1, 1, 0, 0, 1, 0])], names=['one', 'two', 'three'])
A:pandas.tests.indexes.multi.test_drop.dropped2->idx.drop(index)
A:pandas.tests.indexes.multi.test_drop.mixed_index->pandas.MultiIndex.from_tuples([('qux', 'one'), ('bar', 'two')])
A:pandas.tests.indexes.multi.test_drop.expected->index[:2].droplevel(2).droplevel(0)
A:pandas.tests.indexes.multi.test_drop.lexsorted_mi->pandas.MultiIndex.from_tuples(tuples, names=['b', 'c'])
A:pandas.tests.indexes.multi.test_drop.df->df.iloc[[0, 2, 2, 3]].copy().iloc[[0, 2, 2, 3]].copy()
A:pandas.tests.indexes.multi.test_drop.mi->pandas.MultiIndex.from_arrays([[1, 2, 3], [4, 5, 6]], names=['a', 'b'])
A:pandas.tests.indexes.multi.test_drop.s->pandas.Series([10, 20, 30], index=mi)
A:pandas.tests.indexes.multi.test_drop.expected_s->pandas.Series([10, 20, 30], index=mi).drop(labels, level=level, errors='ignore')
A:pandas.tests.indexes.multi.test_drop.expected_df->df.iloc[[0, 2, 2, 3]].copy().iloc[[0, 2, 2, 3]].copy().drop(labels, level=level, errors='ignore')
pandas.tests.indexes.multi.test_drop.test_drop(idx)
pandas.tests.indexes.multi.test_drop.test_drop_errors_ignore(labels,level)
pandas.tests.indexes.multi.test_drop.test_drop_not_lexsorted()
pandas.tests.indexes.multi.test_drop.test_drop_raise_exception_if_labels_not_in_level(msg,labels,level)
pandas.tests.indexes.multi.test_drop.test_drop_with_non_unique_datetime_index_and_invalid_keys()
pandas.tests.indexes.multi.test_drop.test_drop_with_non_unique_dt_index_and_invalid_keys()
pandas.tests.indexes.multi.test_drop.test_droplevel_list()
pandas.tests.indexes.multi.test_drop.test_droplevel_with_names(idx)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/multi/test_compat.py----------------------------------------
A:pandas.tests.indexes.multi.test_compat.div_err->div_err.replace(' __', ' __r').replace(' __', ' __r')
A:pandas.tests.indexes.multi.test_compat.msg->'cannot perform {method}'.format(method=method)
A:pandas.tests.indexes.multi.test_compat.i1->pandas.MultiIndex.from_tuples([('A', 1), ('A', 2)])
A:pandas.tests.indexes.multi.test_compat.i2->pandas.MultiIndex.from_tuples([('A', 1), ('A', 3)])
A:pandas.tests.indexes.multi.test_compat.common->pandas.MultiIndex.from_tuples([('A', 1), ('A', 2)]).intersection(i2)
A:pandas.tests.indexes.multi.test_compat.mi1->MultiIndex(levels=levels, codes=codes)
A:pandas.tests.indexes.multi.test_compat.mi2->MultiIndex(levels=levels2, codes=codes)
A:pandas.tests.indexes.multi.test_compat.vals->MultiIndex(levels=levels, codes=codes).values.copy()
A:pandas.tests.indexes.multi.test_compat.vals2->MultiIndex(levels=levels2, codes=codes).values.copy()
A:pandas.tests.indexes.multi.test_compat.exp_values->numpy.empty((6,), dtype=object)
pandas.tests.indexes.multi.test_compat.test_boolean_context_compat(idx)
pandas.tests.indexes.multi.test_compat.test_boolean_context_compat2()
pandas.tests.indexes.multi.test_compat.test_compat(indices)
pandas.tests.indexes.multi.test_compat.test_inplace_mutation_resets_values()
pandas.tests.indexes.multi.test_compat.test_logical_compat(idx,method)
pandas.tests.indexes.multi.test_compat.test_ndarray_compat_properties(idx,compat_props)
pandas.tests.indexes.multi.test_compat.test_numeric_compat(idx)
pandas.tests.indexes.multi.test_compat.test_pickle_compat_construction(holder)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/ranges/test_range.py----------------------------------------
A:pandas.tests.indexes.ranges.test_range.idx->RangeIndex(2, 10, 3)
A:pandas.tests.indexes.ranges.test_range.index->RangeIndex(stop, start, step)
A:pandas.tests.indexes.ranges.test_range.i->RangeIndex(0, 1000)
A:pandas.tests.indexes.ranges.test_range.i_copy->RangeIndex(0, 1000).copy()
A:pandas.tests.indexes.ranges.test_range.result->indices[0].append(indices[1:])
A:pandas.tests.indexes.ranges.test_range.expected->Index(index.values[::-1], name='foo')
A:pandas.tests.indexes.ranges.test_range.i_view->RangeIndex(0, 1000).view(RangeIndex)
A:pandas.tests.indexes.ranges.test_range.df->pandas.DataFrame({'א': [1, 2, 3], 'ב': [4, 5, 6], 'c': [7, 8, 9]})
A:pandas.tests.indexes.ranges.test_range.same_values_different_type->Index(i, dtype=object)
A:pandas.tests.indexes.ranges.test_range.same_values->Index(i, dtype=object)
A:pandas.tests.indexes.ranges.test_range.target->RangeIndex(6)
A:pandas.tests.indexes.ranges.test_range.indexer->RangeIndex(stop, start, step).get_indexer(target, method='backfill')
A:pandas.tests.indexes.ranges.test_range.other->Index([4, 4, 3, 3])
A:pandas.tests.indexes.ranges.test_range.(res, lidx, ridx)->RangeIndex(stop, start, step).join(other, return_indexers=True)
A:pandas.tests.indexes.ranges.test_range.noidx_res->RangeIndex(stop, start, step).join(other, how='outer')
A:pandas.tests.indexes.ranges.test_range.eres->Int64Index([0, 2, 4, 4, 6, 8, 10, 12, 14, 16, 18])
A:pandas.tests.indexes.ranges.test_range.elidx->numpy.array([0, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9], dtype=np.intp)
A:pandas.tests.indexes.ranges.test_range.eridx->numpy.array([-1, -1, 0, 1, -1, -1, -1, -1, -1, -1, -1], dtype=np.intp)
A:pandas.tests.indexes.ranges.test_range.ind->res.take(ind).argsort()
A:pandas.tests.indexes.ranges.test_range.res->res.take(ind).take(ind)
A:pandas.tests.indexes.ranges.test_range.lidx->lidx.take(ind).take(ind)
A:pandas.tests.indexes.ranges.test_range.ridx->ridx.take(ind).take(ind)
A:pandas.tests.indexes.ranges.test_range.outer->RangeIndex(stop, start, step).join(other, how='outer')
A:pandas.tests.indexes.ranges.test_range.outer2->Index([4, 4, 3, 3]).join(index, how='outer')
A:pandas.tests.indexes.ranges.test_range.inner->RangeIndex(stop, start, step).join(other, how='inner')
A:pandas.tests.indexes.ranges.test_range.inner2->Index([4, 4, 3, 3]).join(index, how='inner')
A:pandas.tests.indexes.ranges.test_range.left->RangeIndex(stop, start, step).join(other, how='left')
A:pandas.tests.indexes.ranges.test_range.left2->Index([4, 4, 3, 3]).join(index, how='left')
A:pandas.tests.indexes.ranges.test_range.right->RangeIndex(stop, start, step).join(other, how='right')
A:pandas.tests.indexes.ranges.test_range.right2->Index([4, 4, 3, 3]).join(index, how='right')
A:pandas.tests.indexes.ranges.test_range.joined->RangeIndex(stop, start, step).join(index, how=join_type)
A:pandas.tests.indexes.ranges.test_range.i2->RangeIndex(0, 10)
A:pandas.tests.indexes.ranges.test_range.taken->RangeIndex(stop, start, step).take([3, 0, 1])
A:pandas.tests.indexes.ranges.test_range.a->numpy.zeros(5, dtype='float64')
A:pandas.tests.indexes.ranges.test_range.arr->numpy.arange(start, stop, step)
A:pandas.tests.indexes.ranges.test_range.result2->indices[0].append(indices[1])
pandas.tests.indexes.ranges.test_range.TestRangeIndex(Numeric)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.appends(self,request)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.create_index(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.indices(self,request)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_append(self,appends)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_cached_data(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_can_hold_identifiers(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_cant_or_shouldnt_cast(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_copy(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_delete(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_deprecated_start_stop_step_attrs(self,attr_name)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_dtype(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_engineless_lookup(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_equals_range(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_explicit_conversions(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_extended_gcd(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_get_indexer(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_get_indexer_backfill(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_get_indexer_decreasing(self,stop)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_get_indexer_limit(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_get_indexer_pad(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_has_duplicates(self,indices)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_identical(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_insert(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_is_monotonic(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_join_inner(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_join_left(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_join_non_int_index(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_join_non_unique(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_join_outer(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_join_right(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_join_self(self,join_type)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_len_specialised(self,step)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_logical_compat(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_max_fitting_element(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_min_fitting_element(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_nbytes(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_pickle_compat_construction(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_prevent_casting(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_print_unicode_columns(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_repr(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_repr_roundtrip(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_slice_keep_name(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_slice_specialised(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_start_stop_step_attrs(self,index,start,stop,step)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_take_fill_value(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_take_preserve_name(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_too_many_names(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_view(self)
pandas.tests.indexes.ranges.test_range.TestRangeIndex.test_view_index(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/ranges/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/ranges/test_setops.py----------------------------------------
A:pandas.tests.indexes.ranges.test_setops.index->RangeIndex(start=0, stop=20, step=2)
A:pandas.tests.indexes.ranges.test_setops.other->Index([datetime.now() + timedelta(i) for i in range(4)], dtype=object)
A:pandas.tests.indexes.ranges.test_setops.result->Index([datetime.now() + timedelta(i) for i in range(4)], dtype=object).union(index, sort=sort)
A:pandas.tests.indexes.ranges.test_setops.expected->Index(np.concatenate((other, index)))
A:pandas.tests.indexes.ranges.test_setops.first->RangeIndex(10, -2, -2)
A:pandas.tests.indexes.ranges.test_setops.res1->idx1.union(idx2, sort=False)
A:pandas.tests.indexes.ranges.test_setops.res2->idx2.union(idx1, sort=None)
A:pandas.tests.indexes.ranges.test_setops.res3->idx1._int64index.union(idx2, sort=None)
pandas.tests.indexes.ranges.test_setops.TestRangeIndexSetOps
pandas.tests.indexes.ranges.test_setops.TestRangeIndexSetOps.test_intersection(self,sort)
pandas.tests.indexes.ranges.test_setops.TestRangeIndexSetOps.test_union_noncomparable(self,sort)
pandas.tests.indexes.ranges.test_setops.TestRangeIndexSetOps.test_union_sorted(self,unions)
pandas.tests.indexes.ranges.test_setops.TestRangeIndexSetOps.unions(self,request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/ranges/test_constructors.py----------------------------------------
A:pandas.tests.indexes.ranges.test_constructors.result->Index(range(1, 5, 2))
A:pandas.tests.indexes.ranges.test_constructors.expected->RangeIndex(1, 5, 2)
A:pandas.tests.indexes.ranges.test_constructors.index->RangeIndex(1, 5)
A:pandas.tests.indexes.ranges.test_constructors.orig->RangeIndex(10)
A:pandas.tests.indexes.ranges.test_constructors.copy->RangeIndex(orig)
A:pandas.tests.indexes.ranges.test_constructors.new->Index(copy)
A:pandas.tests.indexes.ranges.test_constructors.arr->numpy.array([1, 2, 3, 4], dtype=object)
pandas.tests.indexes.ranges.test_constructors.TestRangeIndexConstructors
pandas.tests.indexes.ranges.test_constructors.TestRangeIndexConstructors.test_constructor(self,args,kwargs,start,stop,step,name)
pandas.tests.indexes.ranges.test_constructors.TestRangeIndexConstructors.test_constructor_corner(self)
pandas.tests.indexes.ranges.test_constructors.TestRangeIndexConstructors.test_constructor_invalid_args(self)
pandas.tests.indexes.ranges.test_constructors.TestRangeIndexConstructors.test_constructor_name(self)
pandas.tests.indexes.ranges.test_constructors.TestRangeIndexConstructors.test_constructor_range(self)
pandas.tests.indexes.ranges.test_constructors.TestRangeIndexConstructors.test_constructor_same(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/period/test_astype.py----------------------------------------
A:pandas.tests.indexes.period.test_astype.idx->PeriodIndex(['2013-01-01', '2013-01-02', 'NaT', '2013-01-04'], freq='D', name='idx')
A:pandas.tests.indexes.period.test_astype.result->pandas.period_range('2000', periods=2)._data.astype(bool)
A:pandas.tests.indexes.period.test_astype.expected->numpy.array([True, True])
A:pandas.tests.indexes.period.test_astype.arr->period_range('2000', periods=2)
A:pandas.tests.indexes.period.test_astype.exp->numpy.array([pd.Period('2011-01-01', freq='D'), pd.NaT], dtype=object)
A:pandas.tests.indexes.period.test_astype.result_list->PeriodIndex(['2013-01-01', '2013-01-02', 'NaT', '2013-01-04'], freq='D', name='idx').tolist()
A:pandas.tests.indexes.period.test_astype.obj->pandas.period_range('2000', periods=2)
pandas.tests.indexes.period.test_astype.TestPeriodIndexAsType
pandas.tests.indexes.period.test_astype.TestPeriodIndexAsType.test_astype_array_fallback(self)
pandas.tests.indexes.period.test_astype.TestPeriodIndexAsType.test_astype_category(self)
pandas.tests.indexes.period.test_astype.TestPeriodIndexAsType.test_astype_conversion(self)
pandas.tests.indexes.period.test_astype.TestPeriodIndexAsType.test_astype_object(self)
pandas.tests.indexes.period.test_astype.TestPeriodIndexAsType.test_astype_object2(self)
pandas.tests.indexes.period.test_astype.TestPeriodIndexAsType.test_astype_raises(self,dtype)
pandas.tests.indexes.period.test_astype.TestPeriodIndexAsType.test_astype_uint(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/period/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/period/test_period_range.py----------------------------------------
A:pandas.tests.indexes.period.test_period_range.expected->PeriodIndex([], freq='W', name='foo')
A:pandas.tests.indexes.period.test_period_range.result->period_range(start=end, end=start, freq='W', name='foo')
pandas.tests.indexes.period.test_period_range.TestPeriodRange
pandas.tests.indexes.period.test_period_range.TestPeriodRange.test_construction_from_period(self)
pandas.tests.indexes.period.test_period_range.TestPeriodRange.test_construction_from_string(self,freq)
pandas.tests.indexes.period.test_period_range.TestPeriodRange.test_errors(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/period/test_period.py----------------------------------------
A:pandas.tests.indexes.period.test_period.idx->PeriodIndex(['2011-01', '2011-02', 'NaT', '2012-03', '2012-04'], freq='D', name='name')
A:pandas.tests.indexes.period.test_period.result->period_range('2017Q1', periods=4, freq='Q').insert(1, na)
A:pandas.tests.indexes.period.test_period.expected->PeriodIndex(['2017Q1', pd.NaT, '2017Q2', '2017Q3', '2017Q4'], freq='Q')
A:pandas.tests.indexes.period.test_period.exp->Index([x.ordinal for x in index])
A:pandas.tests.indexes.period.test_period.index->period_range('1/1/2000', periods=10)
A:pandas.tests.indexes.period.test_period.series->Series(1, index=index)
A:pandas.tests.indexes.period.test_period.pi->PeriodIndex(['2000', '2001'], freq='D')
A:pandas.tests.indexes.period.test_period.start->Period('02-Apr-2005', 'B')
A:pandas.tests.indexes.period.test_period.i1->period_range(end=end_intv, periods=10)
A:pandas.tests.indexes.period.test_period.end_intv->Period('2006-12-31', 'W')
A:pandas.tests.indexes.period.test_period.i2->PeriodIndex(np.array([end_intv, Period('2005-05-05', 'B')]))
A:pandas.tests.indexes.period.test_period.vals->numpy.array(vals)
A:pandas.tests.indexes.period.test_period.periods->list(rng)
A:pandas.tests.indexes.period.test_period.s->Series([0, 1, 2, 3], index_as_arrays)
A:pandas.tests.indexes.period.test_period.field_idx->getattr(periodindex, field)
A:pandas.tests.indexes.period.test_period.field_s->getattr(s.dt, field)
A:pandas.tests.indexes.period.test_period.df->DataFrame({'A': [Period(2019), 'x1', 'x2'], 'B': [Period(2018), Period(2016), 'y1'], 'C': [Period(2017), 'z1', Period(2015)], 'V1': [1, 2, 3], 'V2': [10, 20, 30]}).set_index(['A', 'B', 'C'])
A:pandas.tests.indexes.period.test_period.idx1->PeriodIndex(ordinal=[-1, 0, 1], freq='A')
A:pandas.tests.indexes.period.test_period.idx2->PeriodIndex(ordinal=np.array([-1, 0, 1]), freq='A')
A:pandas.tests.indexes.period.test_period.period_index->PeriodIndex(p_values)
A:pandas.tests.indexes.period.test_period.object_index->Index(o_values)
A:pandas.tests.indexes.period.test_period.exp_arr->numpy.array([0, 0, 1, 2, 0, 2], dtype=np.intp)
A:pandas.tests.indexes.period.test_period.exp_idx->PeriodIndex(['2014-03', '2014-02', '2014-01'], freq='M')
A:pandas.tests.indexes.period.test_period.(arr, idx)->PeriodIndex(ordinal=np.array([-1, 0, 1]), freq='A').factorize()
A:pandas.tests.indexes.period.test_period.ind2->period_range('1/1/2000', periods=10).view()
A:pandas.tests.indexes.period.test_period.rng->period_range('1/1/2000', periods=20, freq='D')
A:pandas.tests.indexes.period.test_period.expected_index->expected_index.shift(1, freq='D').shift(-1, freq='ns').shift(1, freq='D').shift(-1, freq='ns')
A:pandas.tests.indexes.period.test_period.ts->Series(np.random.randn(len(idx)), index=idx)
A:pandas.tests.indexes.period.test_period.d1->date_range('12/31/1990', '12/31/1999', freq='A-DEC')
A:pandas.tests.indexes.period.test_period.d2->date_range('12/31/2000', '12/31/2009', freq='A-DEC')
A:pandas.tests.indexes.period.test_period.s1->s1.to_period().to_period()
A:pandas.tests.indexes.period.test_period.s2->s2.to_period().to_period()
A:pandas.tests.indexes.period.test_period.prng->period_range('1/1/2011', '1/1/2012', freq='M')
A:pandas.tests.indexes.period.test_period.new_prng->pandas._testing.round_trip_pickle(prng)
A:pandas.tests.indexes.period.test_period.joined->period_range('1/1/2000', periods=10).join(index, how=join_type)
A:pandas.tests.indexes.period.test_period.offset->pandas.offsets.BusinessDay()
pandas.tests.indexes.period.test_period.TestPeriodIndex(DatetimeLike)
pandas.tests.indexes.period.test_period.TestPeriodIndex._check_all_fields(self,periodindex)
pandas.tests.indexes.period.test_period.TestPeriodIndex.create_index(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.indices(self,request)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_append_concat(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_contains(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_contains_nat(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_contains_raise_error_if_period_index_is_in_multi_index(self,msg,key)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_convert_array_of_periods(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_end_time(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_factorize(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_fields(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_fillna_period(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_hash_error(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_index_duplicate_periods(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_index_unique(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_insert(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_is_(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_is_full(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_iteration(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_join_self(self,join_type)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_make_time_series(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_map(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_ndarray_compat_properties(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_negative_ordinals(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_no_millisecond_field(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_period_index_length(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_period_reindex_with_object(self,p_values,o_values,values,expected_values)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_period_set_index_reindex(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_periods_number_check(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_pickle_compat_construction(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_pickle_freq(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_pickle_round_trip(self,freq)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_pindex_fieldaccessor_nat(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_pindex_multiples(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_pindex_qaccess(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_repeat_freqstr(self,index,use_numpy)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_shallow_copy_changing_freq_raises(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_shallow_copy_empty(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_shallow_copy_i8(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_shift(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_start_time(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_values(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_view_asi8(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_where(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_with_multi_index(self)
pandas.tests.indexes.period.test_period.test_maybe_convert_timedelta()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/period/test_tools.py----------------------------------------
A:pandas.tests.indexes.period.test_tools.rng->date_range('01-Jan-2012', periods=8, freq='M')
A:pandas.tests.indexes.period.test_tools.exp->pandas.DatetimeIndex(['2011-01-31', '2011-02-28', '2011-03-31'], tz='US/Eastern')
A:pandas.tests.indexes.period.test_tools.period->Period(ordinal=-1, freq='W')
A:pandas.tests.indexes.period.test_tools.index->period_range('1/1/2012', periods=4, freq='D')
A:pandas.tests.indexes.period.test_tools.series->Series(1, index=index, name='foo')
A:pandas.tests.indexes.period.test_tools.exp_index->date_range('1/1/2001 00:59:59', end='1/2/2001 00:59:59', freq='H')
A:pandas.tests.indexes.period.test_tools.result->period_range('1/1/2012', periods=4, freq='D').to_timestamp()
A:pandas.tests.indexes.period.test_tools.delta->timedelta(hours=23, minutes=59, seconds=59)
A:pandas.tests.indexes.period.test_tools.idx->period_range(start='2011', periods=2, freq='1D1H', name='idx')
A:pandas.tests.indexes.period.test_tools.expected->DatetimeIndex(['2011-01-02 00:00', '2011-01-03 01:00'], name='idx')
A:pandas.tests.indexes.period.test_tools.res->pandas.PeriodIndex(['2011-01', '2011-02', '2011-03'], freq='M').astype('datetime64[ns, US/Eastern]', how='end')
A:pandas.tests.indexes.period.test_tools.dti->date_range('1/1/2000', '1/7/2002', freq='B')
A:pandas.tests.indexes.period.test_tools.pi1->date_range('1/1/2000', '1/7/2002', freq='B').to_period()
A:pandas.tests.indexes.period.test_tools.pi2->date_range('1/1/2000', '1/7/2002', freq='B').to_period(freq='D')
A:pandas.tests.indexes.period.test_tools.pi3->date_range('1/1/2000', '1/7/2002', freq='B').to_period(freq='3D')
A:pandas.tests.indexes.period.test_tools.freq->'Q-{month}'.format(month=month)
A:pandas.tests.indexes.period.test_tools.stamps->PeriodIndex(year=years, quarter=quarters).to_timestamp('D', 'end')
A:pandas.tests.indexes.period.test_tools.prng->date_range('01-Jan-2012', periods=8, freq='M').to_period()
A:pandas.tests.indexes.period.test_tools.pi->pandas.PeriodIndex(['2011-01', '2011-02', '2011-03'], freq='M')
A:pandas.tests.indexes.period.test_tools.didx->pandas.date_range(start='1950-01-31', end='1950-07-31', freq='M')
A:pandas.tests.indexes.period.test_tools.pidx->pandas.PeriodIndex(['2014-01-01', '2014-01-02', '2014-01-03', '2014-01-04', '2014-01-05'], freq='D')
A:pandas.tests.indexes.period.test_tools.a->pandas.Series([1, np.nan, np.nan, 4, 5, np.nan, 7], index=idx)
A:pandas.tests.indexes.period.test_tools.b->pandas.Series([9, 9, 9, 9, 9, 9, 9], index=idx)
A:pandas.tests.indexes.period.test_tools.p1->pandas.Period('2014-01-01', freq=freq)
A:pandas.tests.indexes.period.test_tools.p2->pandas.Period('2014-01-04', freq=freq)
A:pandas.tests.indexes.period.test_tools.other->numpy.array([0, 1], dtype=np.int64)
A:pandas.tests.indexes.period.test_tools.rs->period_range('1/1/2012', periods=4, freq='D').tolist()
A:pandas.tests.indexes.period.test_tools.recon->PeriodIndex(rs)
A:pandas.tests.indexes.period.test_tools.result2->period_range('1/1/2012', periods=4, freq='D').to_timestamp().to_period(freq='M')
A:pandas.tests.indexes.period.test_tools.result3->period_range('1/1/2012', periods=4, freq='D').to_timestamp().to_period(freq='3M')
A:pandas.tests.indexes.period.test_tools.conv->period_range('1/1/2012', periods=4, freq='D').to_timestamp('D')
A:pandas.tests.indexes.period.test_tools.years->numpy.arange(1960, 2000).repeat(4)
A:pandas.tests.indexes.period.test_tools.quarters->numpy.tile(list(range(1, 5)), 40)
A:pandas.tests.indexes.period.test_tools.pindex->PeriodIndex(year=years, quarter=quarters)
pandas.tests.indexes.period.test_tools.TestPeriodIndex
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_combine_first(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_dti_to_period(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_period_dt64_round_trip(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_searchsorted(self,freq)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_searchsorted_invalid(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_to_period_annualish(self,off)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_to_period_monthish(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_to_period_quarterly(self,month)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_to_period_quarterlyish(self,off)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_to_timestamp(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_to_timestamp_freq(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_to_timestamp_repr_is_code(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_to_timestamp_to_period_astype(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndexConversion
pandas.tests.indexes.period.test_tools.TestPeriodIndexConversion.test_period_astype_to_timestamp(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndexConversion.test_to_timestamp_1703(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndexConversion.test_to_timestamp_pi_combined(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndexConversion.test_to_timestamp_pi_mult(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndexConversion.test_to_timestamp_pi_nat(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndexConversion.test_to_timestamp_preserve_name(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndexConversion.test_to_timestamp_quarterly_bug(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndexConversion.test_tolist(self)
pandas.tests.indexes.period.test_tools.TestPeriodRepresentation
pandas.tests.indexes.period.test_tools.TestPeriodRepresentation._check_freq(self,freq,base_date)
pandas.tests.indexes.period.test_tools.TestPeriodRepresentation.test_annual(self)
pandas.tests.indexes.period.test_tools.TestPeriodRepresentation.test_freq(self,freq)
pandas.tests.indexes.period.test_tools.TestPeriodRepresentation.test_monthly(self)
pandas.tests.indexes.period.test_tools.TestPeriodRepresentation.test_negone_ordinals(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/period/test_setops.py----------------------------------------
A:pandas.tests.indexes.period.test_setops.index->period_range('20160920', '20160925', freq='D')
A:pandas.tests.indexes.period.test_setops.joined->period_range('20160920', '20160925', freq='D').join(index[:-5], how=join_type)
A:pandas.tests.indexes.period.test_setops.res->s.index.join(df.columns, how='outer')
A:pandas.tests.indexes.period.test_setops.df->pandas.DataFrame({'s1': s1, 's2': s2})
A:pandas.tests.indexes.period.test_setops.expected->PeriodIndex(['20160920', '20160921'], freq='D')
A:pandas.tests.indexes.period.test_setops.other1->pandas.period_range('1/6/2000', freq='D', periods=5)
A:pandas.tests.indexes.period.test_setops.rng1->pandas.PeriodIndex(period_rng, freq='D')
A:pandas.tests.indexes.period.test_setops.expected1->pandas.PeriodIndex(['2000-01-06', '2000-01-07', '2000-01-08', '2000-01-09', '2000-01-10', '2000-01-01', '2000-01-02', '2000-01-03', '2000-01-04', '2000-01-05'], freq='D')
A:pandas.tests.indexes.period.test_setops.rng2->pandas.PeriodIndex(period_rng, freq='D')
A:pandas.tests.indexes.period.test_setops.other2->pandas.period_range('1/4/2000', freq='D', periods=5)
A:pandas.tests.indexes.period.test_setops.expected2->pandas.PeriodIndex(['1/3/2000', '1/2/2000', '1/1/2000'], freq='D')
A:pandas.tests.indexes.period.test_setops.rng3->pandas.PeriodIndex(period_rng, freq='D')
A:pandas.tests.indexes.period.test_setops.other3->pandas.PeriodIndex([], freq='D')
A:pandas.tests.indexes.period.test_setops.expected3->PeriodIndex(['2011-01-04', '2011-01-02'], freq='D', name=None)
A:pandas.tests.indexes.period.test_setops.rng4->pandas.PeriodIndex(period_rng, freq='H')
A:pandas.tests.indexes.period.test_setops.other4->pandas.period_range('2000-01-02 09:00', freq='H', periods=5)
A:pandas.tests.indexes.period.test_setops.expected4->PeriodIndex([], freq='D', name='idx')
A:pandas.tests.indexes.period.test_setops.rng5->pandas.PeriodIndex(['2000-01-01 09:03', '2000-01-01 09:01', '2000-01-01 09:05'], freq='T')
A:pandas.tests.indexes.period.test_setops.other5->pandas.PeriodIndex(['2000-01-01 09:01', '2000-01-01 09:05'], freq='T')
A:pandas.tests.indexes.period.test_setops.expected5->pandas.PeriodIndex(['2000-01-01 09:03'], freq='T')
A:pandas.tests.indexes.period.test_setops.rng6->pandas.PeriodIndex(period_rng, freq='M')
A:pandas.tests.indexes.period.test_setops.other6->pandas.period_range('2000-04-01', freq='M', periods=7)
A:pandas.tests.indexes.period.test_setops.expected6->pandas.PeriodIndex(['2000-02-01', '2000-01-01', '2000-03-01'], freq='M')
A:pandas.tests.indexes.period.test_setops.rng7->pandas.PeriodIndex(period_rng, freq='A')
A:pandas.tests.indexes.period.test_setops.other7->pandas.period_range('1998-01-01', freq='A', periods=8)
A:pandas.tests.indexes.period.test_setops.expected7->pandas.PeriodIndex(['2007', '2006'], freq='A')
A:pandas.tests.indexes.period.test_setops.rng8->pandas.PeriodIndex(['1/3/2000', '1/2/2000', '1/1/2000', '1/5/2000', '1/4/2000'], freq='D')
A:pandas.tests.indexes.period.test_setops.other8->pandas.period_range('1/6/2000', freq='D', periods=5)
A:pandas.tests.indexes.period.test_setops.expected8->pandas.PeriodIndex(['1/3/2000', '1/2/2000', '1/1/2000', '1/5/2000', '1/4/2000', '1/6/2000', '1/7/2000', '1/8/2000', '1/9/2000', '1/10/2000'], freq='D')
A:pandas.tests.indexes.period.test_setops.result_union->date_range('6/1/2000', '6/15/2000', freq='T').union(other, sort=sort)
A:pandas.tests.indexes.period.test_setops.result->date_range('6/1/2000', '6/15/2000', freq='T').intersection(rng[0:0])
A:pandas.tests.indexes.period.test_setops.index2->period_range('1/1/2000', '1/20/2000', freq='W-WED')
A:pandas.tests.indexes.period.test_setops.index3->period_range('1/1/2000', '1/20/2000', freq='2D')
A:pandas.tests.indexes.period.test_setops.s1->pandas.Series(np.random.randn(len(rng1)), rng1)
A:pandas.tests.indexes.period.test_setops.s2->pandas.Series(np.random.randn(len(rng2)), rng2)
A:pandas.tests.indexes.period.test_setops.exp->pandas.period_range('1/1/1980', '1/1/2012', freq='M')
A:pandas.tests.indexes.period.test_setops.left->_permute(index[:-5])
A:pandas.tests.indexes.period.test_setops.right->_permute(index[10:])
A:pandas.tests.indexes.period.test_setops.base->PeriodIndex(['2011-01-05', '2011-01-04', '2011-01-02', '2011-01-03'], freq='D', name='idx')
A:pandas.tests.indexes.period.test_setops.rng->date_range('6/1/2000', '6/15/2000', freq='T')
A:pandas.tests.indexes.period.test_setops.result_difference->date_range('6/1/2000', '6/15/2000', freq='T').difference(other, sort=sort)
A:pandas.tests.indexes.period.test_setops.other->period_range('20160922', '20160925', freq='D')
A:pandas.tests.indexes.period.test_setops.idx_diff->period_range('20160920', '20160925', freq='D').difference(other, sort)
pandas.tests.indexes.period.test_setops.TestPeriodIndex
pandas.tests.indexes.period.test_setops.TestPeriodIndex.test_difference(self,sort)
pandas.tests.indexes.period.test_setops.TestPeriodIndex.test_difference_freq(self,sort)
pandas.tests.indexes.period.test_setops.TestPeriodIndex.test_intersection(self,sort)
pandas.tests.indexes.period.test_setops.TestPeriodIndex.test_intersection_cases(self,sort)
pandas.tests.indexes.period.test_setops.TestPeriodIndex.test_join_does_not_recur(self)
pandas.tests.indexes.period.test_setops.TestPeriodIndex.test_join_self(self,join_type)
pandas.tests.indexes.period.test_setops.TestPeriodIndex.test_joins(self,join_type)
pandas.tests.indexes.period.test_setops.TestPeriodIndex.test_union(self,sort)
pandas.tests.indexes.period.test_setops.TestPeriodIndex.test_union_dataframe_index(self)
pandas.tests.indexes.period.test_setops.TestPeriodIndex.test_union_misc(self,sort)
pandas.tests.indexes.period.test_setops._permute(obj)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/period/test_partial_slicing.py----------------------------------------
A:pandas.tests.indexes.period.test_partial_slicing.ts->Series(np.arange(20), period_range('2014-01', periods=20, freq='M'))
A:pandas.tests.indexes.period.test_partial_slicing.idx->period_range('20010101', periods=10, freq='D', name='bob')
A:pandas.tests.indexes.period.test_partial_slicing.pi->period_range(start='1/1/10', end='12/31/12', freq='M')
A:pandas.tests.indexes.period.test_partial_slicing.s->Series(np.random.rand(len(idx)), index=idx)
A:pandas.tests.indexes.period.test_partial_slicing.didx->pandas.date_range(start='2013/10/01', freq='D', periods=10)
A:pandas.tests.indexes.period.test_partial_slicing.pidx->period_range(start='2013/10/01', freq='D', periods=10)
A:pandas.tests.indexes.period.test_partial_slicing.df->DataFrame(dict(units=[100 + i for i in range(10)]), index=idx)
A:pandas.tests.indexes.period.test_partial_slicing.empty->DataFrame(index=type(idx)([], freq='D'), columns=['units'])
A:pandas.tests.indexes.period.test_partial_slicing.empty['units']->empty['units'].astype('int64').astype('int64')
pandas.tests.indexes.period.test_partial_slicing.TestPeriodIndex
pandas.tests.indexes.period.test_partial_slicing.TestPeriodIndex.setup_method(self,method)
pandas.tests.indexes.period.test_partial_slicing.TestPeriodIndex.test_pindex_slice_index(self)
pandas.tests.indexes.period.test_partial_slicing.TestPeriodIndex.test_range_slice_day(self)
pandas.tests.indexes.period.test_partial_slicing.TestPeriodIndex.test_range_slice_outofbounds(self)
pandas.tests.indexes.period.test_partial_slicing.TestPeriodIndex.test_range_slice_seconds(self)
pandas.tests.indexes.period.test_partial_slicing.TestPeriodIndex.test_slice_keep_name(self)
pandas.tests.indexes.period.test_partial_slicing.TestPeriodIndex.test_slice_with_negative_step(self)
pandas.tests.indexes.period.test_partial_slicing.TestPeriodIndex.test_slice_with_zero_step_raises(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/period/test_ops.py----------------------------------------
A:pandas.tests.indexes.period.test_ops.idx->pandas.period_range('2018Q1', periods=4, freq='Q')
A:pandas.tests.indexes.period.test_ops.exp_idx->PeriodIndex(['2013-01-01 09:00', '2013-01-01 08:00', NaT], freq='H')
A:pandas.tests.indexes.period.test_ops.expected->PeriodIndex(['2013', '2011', '2011', 'NaT'], name='pidx', freq='D')
A:pandas.tests.indexes.period.test_ops.result->PeriodIndex(['2011', '2013', 'NaT', '2011'], name='pidx', freq='D').sort_values(ascending=False)
A:pandas.tests.indexes.period.test_ops.idx_dup->pandas.period_range('2018Q1', periods=4, freq='Q').append(idx)
A:pandas.tests.indexes.period.test_ops.base->pandas.period_range('2011-01-01', '2011-01-31', freq='D', name='idx')
A:pandas.tests.indexes.period.test_ops.res->Series(idx).drop_duplicates(keep=False)
A:pandas.tests.indexes.period.test_ops.exp->numpy.array([2, 1, 3, 4, 0])
A:pandas.tests.indexes.period.test_ops.pidx->PeriodIndex(['2011', '2013', 'NaT', '2011'], name='pidx', freq='D')
A:pandas.tests.indexes.period.test_ops.iidx->Index([2011, 2013, 2015, 2012, 2011], name='idx')
A:pandas.tests.indexes.period.test_ops.ordered->pandas.period_range('2018Q1', periods=4, freq='Q').sort_values(ascending=False)
A:pandas.tests.indexes.period.test_ops.(ordered, indexer)->pandas.period_range('2018Q1', periods=4, freq='Q').sort_values(return_indexer=True, ascending=False)
A:pandas.tests.indexes.period.test_ops.pexpected->PeriodIndex(['2011', '2011', '2012', '2013', '2015'], name='pidx', freq='A')
A:pandas.tests.indexes.period.test_ops.iexpected->Index([2011, 2011, 2012, 2013, 2015], name='idx')
A:pandas.tests.indexes.period.test_ops.idx1->PeriodIndex(['2011-01-01', '2011-01-03', '2011-01-05', '2011-01-02', '2011-01-01'], freq='D', name='idx1')
A:pandas.tests.indexes.period.test_ops.exp1->PeriodIndex(['2011-01-01', '2011-01-01', '2011-01-02', '2011-01-03', '2011-01-05'], freq='D', name='idx1')
A:pandas.tests.indexes.period.test_ops.idx2->pandas.PeriodIndex(['2011-01-01', '2011-01-02', 'NaT'], freq='H')
A:pandas.tests.indexes.period.test_ops.exp2->PeriodIndex(['2011-01-01', '2011-01-01', '2011-01-02', '2011-01-03', '2011-01-05'], freq='D', name='idx2')
A:pandas.tests.indexes.period.test_ops.idx3->pandas.PeriodIndex._simple_new(idx._values._simple_new(idx._values.asi8, freq='H'))
A:pandas.tests.indexes.period.test_ops.exp3->PeriodIndex([NaT, NaT, '2011-01-02', '2011-01-03', '2011-01-05'], freq='D', name='idx3')
A:pandas.tests.indexes.period.test_ops.idx.freq->pandas.offsets.Day()
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps(Ops)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.setup_method(self,method)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_drop_duplicates(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_drop_duplicates_metadata(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_equals(self,freq)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_freq_setter_deprecated(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_nat(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_ops_properties(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_order(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_order_compat(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_resolution(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_shift(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_value_counts_unique(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/period/test_asfreq.py----------------------------------------
A:pandas.tests.indexes.period.test_asfreq.pi1->PeriodIndex(['2011-01-01', '2011-02-01', '2011-03-01'], freq='D')
A:pandas.tests.indexes.period.test_asfreq.pi2->period_range(freq='Q', start='1/1/2001', end='1/1/2001')
A:pandas.tests.indexes.period.test_asfreq.pi3->period_range(freq='M', start='1/1/2001', end='1/1/2001')
A:pandas.tests.indexes.period.test_asfreq.pi4->period_range(freq='D', start='1/1/2001', end='1/1/2001')
A:pandas.tests.indexes.period.test_asfreq.pi5->period_range(freq='H', start='1/1/2001', end='1/1/2001 00:00')
A:pandas.tests.indexes.period.test_asfreq.pi6->period_range(freq='Min', start='1/1/2001', end='1/1/2001 00:00')
A:pandas.tests.indexes.period.test_asfreq.pi7->period_range(freq='S', start='1/1/2001', end='1/1/2001 00:00:00')
A:pandas.tests.indexes.period.test_asfreq.result1->PeriodIndex(['2011-01-01', '2011-02-01', '2011-03-01'], freq='D').asfreq('3M')
A:pandas.tests.indexes.period.test_asfreq.result2->PeriodIndex(['2011-01-01', '2011-02-01', '2011-03-01'], freq='D').asfreq('M')
A:pandas.tests.indexes.period.test_asfreq.expected->PeriodIndex(['2011Q1', '2011Q1', 'NaT', '2011Q2'], freq='Q')
A:pandas.tests.indexes.period.test_asfreq.idx->PeriodIndex(['2011-01', '2011-02', 'NaT', '2011-04'], freq='M')
A:pandas.tests.indexes.period.test_asfreq.result->Series(np.random.randn(len(index)), index=index).asfreq('D', how='start')
A:pandas.tests.indexes.period.test_asfreq.pi->pandas.PeriodIndex(['2001-01-01 00:00', '2001-01-02 02:00', 'NaT'], freq=freq)
A:pandas.tests.indexes.period.test_asfreq.exp->PeriodIndex(['2011-01', '2011-02', '2011-03'], freq='3M')
A:pandas.tests.indexes.period.test_asfreq.index->period_range(freq='A', start='1/1/2001', end='12/31/2010')
A:pandas.tests.indexes.period.test_asfreq.ts->Series(np.random.randn(len(index)), index=index)
A:pandas.tests.indexes.period.test_asfreq.df->DataFrame(np.random.randn(len(index), 3), index=index)
A:pandas.tests.indexes.period.test_asfreq.df_result->DataFrame(np.random.randn(len(index), 3), index=index).asfreq('D', how='end')
A:pandas.tests.indexes.period.test_asfreq.exp_index->period_range(freq='A', start='1/1/2001', end='12/31/2010').asfreq('D', how='end')
pandas.tests.indexes.period.test_asfreq.TestPeriodIndex
pandas.tests.indexes.period.test_asfreq.TestPeriodIndex.test_asfreq(self)
pandas.tests.indexes.period.test_asfreq.TestPeriodIndex.test_asfreq_combined_pi(self)
pandas.tests.indexes.period.test_asfreq.TestPeriodIndex.test_asfreq_mult_pi(self,freq)
pandas.tests.indexes.period.test_asfreq.TestPeriodIndex.test_asfreq_nat(self)
pandas.tests.indexes.period.test_asfreq.TestPeriodIndex.test_asfreq_ts(self)
pandas.tests.indexes.period.test_asfreq.TestPeriodIndex.test_astype_asfreq(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/period/test_shift.py----------------------------------------
A:pandas.tests.indexes.period.test_shift.idx->period_range(freq='A', start='1/1/2001', end='12/1/2009')
A:pandas.tests.indexes.period.test_shift.result->pandas.period_range('20130101', periods=5, freq='D').shift(1)
A:pandas.tests.indexes.period.test_shift.expected->PeriodIndex(['2013-01-02', '2013-01-03', '2013-01-04', '2013-01-05', '2013-01-06'], freq='D')
A:pandas.tests.indexes.period.test_shift.pi1->period_range(freq='D', start='1/1/2001', end='12/1/2009')
A:pandas.tests.indexes.period.test_shift.pi2->period_range(freq='D', start='12/31/2000', end='11/30/2009')
A:pandas.tests.indexes.period.test_shift.exp->pandas.PeriodIndex(['2011-01-01 07:00', '2011-01-01 08:00', '2011-01-01 09:00'], name='xxx', freq='H')
A:pandas.tests.indexes.period.test_shift.drange->pandas.period_range('20130101', periods=5, freq='D')
pandas.tests.indexes.period.test_shift.TestPeriodIndexShift
pandas.tests.indexes.period.test_shift.TestPeriodIndexShift.test_pi_shift_ndarray(self)
pandas.tests.indexes.period.test_shift.TestPeriodIndexShift.test_shift(self)
pandas.tests.indexes.period.test_shift.TestPeriodIndexShift.test_shift_corner_cases(self)
pandas.tests.indexes.period.test_shift.TestPeriodIndexShift.test_shift_gh8083(self)
pandas.tests.indexes.period.test_shift.TestPeriodIndexShift.test_shift_nat(self)
pandas.tests.indexes.period.test_shift.TestPeriodIndexShift.test_shift_periods(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/period/test_formats.py----------------------------------------
A:pandas.tests.indexes.period.test_formats.index->PeriodIndex(['2017-01-01', pd.NaT, '2017-01-03'], freq='D')
A:pandas.tests.indexes.period.test_formats.expected->numpy.array(['2017-01-01', 'pandas', '2017-01-03'], dtype=object)
A:pandas.tests.indexes.period.test_formats.result->idx._summary()
A:pandas.tests.indexes.period.test_formats.df->pandas.DataFrame({'A': [1, 2, 3]}, index=pd.date_range('2000', periods=3))
A:pandas.tests.indexes.period.test_formats.idx1->PeriodIndex([], freq='D')
A:pandas.tests.indexes.period.test_formats.idx2->PeriodIndex(['2011-01-01'], freq='D')
A:pandas.tests.indexes.period.test_formats.idx3->PeriodIndex(['2011-01-01', '2011-01-02'], freq='D')
A:pandas.tests.indexes.period.test_formats.idx4->PeriodIndex(['2011-01-01', '2011-01-02', '2011-01-03'], freq='D')
A:pandas.tests.indexes.period.test_formats.idx5->PeriodIndex(['2011', '2012', '2013'], freq='A')
A:pandas.tests.indexes.period.test_formats.idx6->PeriodIndex(['2011-01-01 09:00', '2012-02-01 10:00', 'NaT'], freq='H')
A:pandas.tests.indexes.period.test_formats.idx7->pandas.period_range('2013Q1', periods=1, freq='Q')
A:pandas.tests.indexes.period.test_formats.idx8->pandas.period_range('2013Q1', periods=2, freq='Q')
A:pandas.tests.indexes.period.test_formats.idx9->pandas.period_range('2013Q1', periods=3, freq='Q')
A:pandas.tests.indexes.period.test_formats.idx10->PeriodIndex(['2011-01-01', '2011-02-01'], freq='3D')
pandas.tests.indexes.period.test_formats.TestPeriodIndexRendering
pandas.tests.indexes.period.test_formats.TestPeriodIndexRendering.test_frame_repr(self)
pandas.tests.indexes.period.test_formats.TestPeriodIndexRendering.test_representation(self,method)
pandas.tests.indexes.period.test_formats.TestPeriodIndexRendering.test_representation_to_series(self)
pandas.tests.indexes.period.test_formats.TestPeriodIndexRendering.test_summary(self)
pandas.tests.indexes.period.test_formats.test_to_native_types()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/period/test_indexing.py----------------------------------------
A:pandas.tests.indexes.period.test_indexing.idx->pandas.period_range('2002-01', '2003-12', freq='M')
A:pandas.tests.indexes.period.test_indexing.idx1->pandas.PeriodIndex([p1, p2, p1])
A:pandas.tests.indexes.period.test_indexing.expected->numpy.array([-1, -1, -1], dtype=np.intp)
A:pandas.tests.indexes.period.test_indexing.exp->pandas.PeriodIndex(['2007-01', '2007-02', '2007-06', '2007-07'], freq='M', name='x')
A:pandas.tests.indexes.period.test_indexing.rng->period_range(start='2012-01-01', periods=10, freq='D')
A:pandas.tests.indexes.period.test_indexing.ts->Series(range(len(rng)), index=rng)
A:pandas.tests.indexes.period.test_indexing.dt1->datetime(2011, 10, 2)
A:pandas.tests.indexes.period.test_indexing.dt4->datetime(2012, 4, 20)
A:pandas.tests.indexes.period.test_indexing.s->Series(np.random.randn(10), index=index)
A:pandas.tests.indexes.period.test_indexing.didx->DatetimeIndex(['2011-01-01', 'NaT', '2011-01-03'])
A:pandas.tests.indexes.period.test_indexing.pidx->PeriodIndex(['2011-01-01', 'NaT', '2011-01-03'], freq='M')
A:pandas.tests.indexes.period.test_indexing.i->period_range('20130101', periods=5, freq='D')
A:pandas.tests.indexes.period.test_indexing.result->pandas.PeriodIndex([p1, p2, p1]).get_indexer_non_unique(idx2)
A:pandas.tests.indexes.period.test_indexing.i2->pandas.PeriodIndex([pd.NaT, pd.NaT] + pi[2:].tolist(), freq='D')
A:pandas.tests.indexes.period.test_indexing.pi->pandas.date_range('2016-01-01', periods=3).to_period('D')
A:pandas.tests.indexes.period.test_indexing.index->period_range('1/1/2001', periods=10)
A:pandas.tests.indexes.period.test_indexing.taken1->period_range('1/1/2001', periods=10).take([5, 6, 8, 12])
A:pandas.tests.indexes.period.test_indexing.bad_period->Period('2012', 'A')
A:pandas.tests.indexes.period.test_indexing.p0->pandas.Period('2017-09-01')
A:pandas.tests.indexes.period.test_indexing.p1->pandas.Period('2017-09-02')
A:pandas.tests.indexes.period.test_indexing.p2->pandas.Period('2017-09-03')
A:pandas.tests.indexes.period.test_indexing.idx0->pandas.PeriodIndex([p0, p1, p2])
A:pandas.tests.indexes.period.test_indexing.expected_idx1_p1->slice(0, 2)
A:pandas.tests.indexes.period.test_indexing.idx2->pandas.PeriodIndex([p2, p1, p3, p4])
A:pandas.tests.indexes.period.test_indexing.expected_idx2_p2->numpy.array([True, False, True])
A:pandas.tests.indexes.period.test_indexing.idx_inc0->pandas.PeriodIndex([p0, p1, p2])
A:pandas.tests.indexes.period.test_indexing.idx_inc1->pandas.PeriodIndex([p0, p1, p1])
A:pandas.tests.indexes.period.test_indexing.idx_dec0->pandas.PeriodIndex([p2, p1, p0])
A:pandas.tests.indexes.period.test_indexing.idx_dec1->pandas.PeriodIndex([p2, p1, p1])
A:pandas.tests.indexes.period.test_indexing.p3->pandas.Period('2017-09-04')
A:pandas.tests.indexes.period.test_indexing.input0->numpy.array([1, 2, 3])
A:pandas.tests.indexes.period.test_indexing.result0->pandas.PeriodIndex([p0, p1, p2]).get_value(input0, p1)
A:pandas.tests.indexes.period.test_indexing.input1->numpy.array([1, 2, 3])
A:pandas.tests.indexes.period.test_indexing.expected1->numpy.array([1, 2])
A:pandas.tests.indexes.period.test_indexing.result1->pandas.PeriodIndex([p1, p2, p1]).get_value(input1, p1)
A:pandas.tests.indexes.period.test_indexing.input2->numpy.array([1, 2, 3])
A:pandas.tests.indexes.period.test_indexing.expected2->numpy.array([1, 3])
A:pandas.tests.indexes.period.test_indexing.result2->pandas.PeriodIndex([p2, p1, p3, p4]).get_value(input2, p1)
A:pandas.tests.indexes.period.test_indexing.tp0->pandas.Period('2017-08-31')
A:pandas.tests.indexes.period.test_indexing.tp1->pandas.Period('2017-09-02')
A:pandas.tests.indexes.period.test_indexing.tp2->pandas.Period('2017-09-05')
A:pandas.tests.indexes.period.test_indexing.tp3->pandas.Period('2017-09-09')
A:pandas.tests.indexes.period.test_indexing.target->pandas.PeriodIndex(['1999-12-31T23', '2000-01-01T12', '2000-01-02T01'], freq='H')
A:pandas.tests.indexes.period.test_indexing.res->pandas.period_range('2002-01', '2003-12', freq='M').get_indexer(target, 'nearest', tolerance=pd.Timedelta('1 day'))
A:pandas.tests.indexes.period.test_indexing.dti->pandas.date_range('2016-01-01', periods=3)
A:pandas.tests.indexes.period.test_indexing.pi2->pandas.date_range('2016-01-01', periods=3).to_period('W')
A:pandas.tests.indexes.period.test_indexing.p4->pandas.Period('2017-09-05')
A:pandas.tests.indexes.period.test_indexing.expected_indexer->numpy.array([1, 0, 2, -1, -1], dtype=np.intp)
A:pandas.tests.indexes.period.test_indexing.expected_missing->numpy.array([2, 3], dtype=np.int64)
A:pandas.tests.indexes.period.test_indexing.df->pandas.DataFrame(np.random.randn(24, 10), index=idx)
pandas.tests.indexes.period.test_indexing.TestGetItem
pandas.tests.indexes.period.test_indexing.TestGetItem.test_ellipsis(self)
pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem(self)
pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_datetime(self)
pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_day(self)
pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_dt(self)
pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_index(self)
pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_list_periods(self)
pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_nat(self)
pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_partial(self)
pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_seconds(self)
pandas.tests.indexes.period.test_indexing.TestIndexing
pandas.tests.indexes.period.test_indexing.TestIndexing.test_contains(self)
pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_indexer(self)
pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_indexer2(self)
pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_indexer_mismatched_dtype(self)
pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_indexer_non_unique(self)
pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_loc(self)
pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_loc2(self)
pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_loc_msg(self)
pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_loc_nat(self)
pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_value(self)
pandas.tests.indexes.period.test_indexing.TestIndexing.test_indexing(self)
pandas.tests.indexes.period.test_indexing.TestIndexing.test_is_monotonic_decreasing(self)
pandas.tests.indexes.period.test_indexing.TestIndexing.test_is_monotonic_increasing(self)
pandas.tests.indexes.period.test_indexing.TestIndexing.test_period_index_indexer(self)
pandas.tests.indexes.period.test_indexing.TestTake
pandas.tests.indexes.period.test_indexing.TestTake.test_take(self)
pandas.tests.indexes.period.test_indexing.TestTake.test_take_fill_value(self)
pandas.tests.indexes.period.test_indexing.TestTake.test_take_misc(self)
pandas.tests.indexes.period.test_indexing.TestWhere
pandas.tests.indexes.period.test_indexing.TestWhere.test_where(self,klass)
pandas.tests.indexes.period.test_indexing.TestWhere.test_where_invalid_dtypes(self)
pandas.tests.indexes.period.test_indexing.TestWhere.test_where_other(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/period/test_constructors.py----------------------------------------
A:pandas.tests.indexes.period.test_constructors.dtype->PeriodDtype('D')
A:pandas.tests.indexes.period.test_constructors.result->PeriodIndex(org.values, freq=freq)._simple_new(idx, name='p', freq='M')
A:pandas.tests.indexes.period.test_constructors.expected->Index([str(num) for num in raw])
A:pandas.tests.indexes.period.test_constructors.values->values_constructor(periods)
A:pandas.tests.indexes.period.test_constructors.p->PeriodIndex(lops)
A:pandas.tests.indexes.period.test_constructors.index->PeriodIndex(raw, freq='A')
A:pandas.tests.indexes.period.test_constructors.index2->PeriodIndex(year=years, quarter=quarters, freq='2Q-DEC')
A:pandas.tests.indexes.period.test_constructors.idx->PeriodIndex(org.values, freq=freq)
A:pandas.tests.indexes.period.test_constructors.exp->Series(period_range('1/1/2000', periods=10))
A:pandas.tests.indexes.period.test_constructors.years->numpy.arange(1960, 2000, dtype=np.int64).repeat(4)
A:pandas.tests.indexes.period.test_constructors.quarters->numpy.tile(np.array([1, 2, 3, 4], dtype=np.int64), 40)
A:pandas.tests.indexes.period.test_constructors.pindex->PeriodIndex(year=years, quarter=quarters)
A:pandas.tests.indexes.period.test_constructors.vals->numpy.array(vals)
A:pandas.tests.indexes.period.test_constructors.data->pandas.Series(data)
A:pandas.tests.indexes.period.test_constructors.res->PeriodIndex(raw, freq='A').map(str)
A:pandas.tests.indexes.period.test_constructors.year->pandas.Series([2001, 2002, 2003])
A:pandas.tests.indexes.period.test_constructors.lops->list(map(Period, strs))
A:pandas.tests.indexes.period.test_constructors.pidx->period_range(start='2016-01-01', periods=2, freq=freq)
A:pandas.tests.indexes.period.test_constructors.pi->period_range(freq='S', start='1/1/2001', end='1/1/2001 23:59:59')
A:pandas.tests.indexes.period.test_constructors.start->Period('02-Apr-2005', 'B')
A:pandas.tests.indexes.period.test_constructors.i1->period_range(start=start, end=end_intv)
A:pandas.tests.indexes.period.test_constructors.end_intv->Period('2005-05-01', 'B')
A:pandas.tests.indexes.period.test_constructors.i2->PeriodIndex(np.array([end_intv, Period('2005-05-05', 'B')]))
A:pandas.tests.indexes.period.test_constructors.org->period_range(start='2001/04/01', freq=freq, periods=1)
A:pandas.tests.indexes.period.test_constructors.self.series->Series(period_range('2000-01-01', periods=10, freq='D'))
A:pandas.tests.indexes.period.test_constructors.s->Series(period_range('1/1/2000', periods=10), dtype=PeriodDtype('D'))
pandas.tests.indexes.period.test_constructors.TestPeriodIndex
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_base_constructor_with_period_dtype(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_construction_base_constructor(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_U(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_arrays_negative_year(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_corner(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_datetime64arr(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_datetime64arr_ok(self,box)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_dt64arr(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_dt64arr_ok(self,box)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_dtype(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_empty(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_field_arrays(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_floats(self,floats)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_freq_combined(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_freq_mult(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_freq_mult_dti_compat(self,mult,freq)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_fromarraylike(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_incompat_freq(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_invalid_quarters(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_mixed(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_nano(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_nat(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_pi_nat(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_simple_new(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_simple_new_empty(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_use_start_freq(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_year_and_quarter(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_index_object_dtype(self,values_constructor)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_map_with_string_constructor(self)
pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_recreate_from_data(self,freq)
pandas.tests.indexes.period.test_constructors.TestSeriesPeriod
pandas.tests.indexes.period.test_constructors.TestSeriesPeriod.setup_method(self,method)
pandas.tests.indexes.period.test_constructors.TestSeriesPeriod.test_constructor_cant_cast_period(self)
pandas.tests.indexes.period.test_constructors.TestSeriesPeriod.test_constructor_cast_object(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/indexes/period/test_scalar_compat.py----------------------------------------
A:pandas.tests.indexes.period.test_scalar_compat.index->period_range(freq='M', start='2016-01-01', end='2016-05-31')
A:pandas.tests.indexes.period.test_scalar_compat.expected_index->date_range('2016-01-01', end='2016-05-31', freq='M')
pandas.tests.indexes.period.test_scalar_compat.TestPeriodIndexOps
pandas.tests.indexes.period.test_scalar_compat.TestPeriodIndexOps.test_end_time(self)
pandas.tests.indexes.period.test_scalar_compat.TestPeriodIndexOps.test_start_time(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/config/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/config/test_config.py----------------------------------------
A:pandas.tests.config.test_config.cls.gc->deepcopy(getattr(cls.cf, '_global_config'))
A:pandas.tests.config.test_config.cls.do->deepcopy(getattr(cls.cf, '_deprecated_options'))
A:pandas.tests.config.test_config.cls.ro->deepcopy(getattr(cls.cf, '_registered_options'))
A:pandas.tests.config.test_config.v->self.cf.is_one_of_factory([None, 12])
A:pandas.tests.config.test_config.validator->self.cf.is_one_of_factory([None, self.cf.is_callable])
A:pandas.tests.config.test_config.ctx->self.cf.option_context(option_name, context_value)
pandas.tests.config.test_config.TestConfig
pandas.tests.config.test_config.TestConfig.setup_class(cls)
pandas.tests.config.test_config.TestConfig.setup_method(self,method)
pandas.tests.config.test_config.TestConfig.teardown_method(self,method)
pandas.tests.config.test_config.TestConfig.test_api(self)
pandas.tests.config.test_config.TestConfig.test_attribute_access(self)
pandas.tests.config.test_config.TestConfig.test_callback(self)
pandas.tests.config.test_config.TestConfig.test_case_insensitive(self)
pandas.tests.config.test_config.TestConfig.test_config_prefix(self)
pandas.tests.config.test_config.TestConfig.test_deprecate_option(self)
pandas.tests.config.test_config.TestConfig.test_describe_option(self)
pandas.tests.config.test_config.TestConfig.test_dictwrapper_getattr(self)
pandas.tests.config.test_config.TestConfig.test_get_option(self)
pandas.tests.config.test_config.TestConfig.test_is_one_of_factory(self)
pandas.tests.config.test_config.TestConfig.test_option_context_scope(self)
pandas.tests.config.test_config.TestConfig.test_register_option(self)
pandas.tests.config.test_config.TestConfig.test_reset_option(self)
pandas.tests.config.test_config.TestConfig.test_reset_option_all(self)
pandas.tests.config.test_config.TestConfig.test_set_ContextManager(self)
pandas.tests.config.test_config.TestConfig.test_set_option(self)
pandas.tests.config.test_config.TestConfig.test_set_option_empty_args(self)
pandas.tests.config.test_config.TestConfig.test_set_option_invalid_single_argument_type(self)
pandas.tests.config.test_config.TestConfig.test_set_option_multiple(self)
pandas.tests.config.test_config.TestConfig.test_set_option_uneven_args(self)
pandas.tests.config.test_config.TestConfig.test_validation(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/config/test_localization.py----------------------------------------
A:pandas.tests.config.test_localization._current_locale->locale.getlocale()
A:pandas.tests.config.test_localization.pytestmark->pytest.mark.skipif(is_platform_windows() or not _all_locales, reason='Need non-Windows and locales')
A:pandas.tests.config.test_localization._skip_if_only_one_locale->pytest.mark.skipif(len(_all_locales) <= 1, reason='Need multiple locales for meaningful test')
A:pandas.tests.config.test_localization.(new_lang, new_enc)->normalized_locale.split('.')
A:pandas.tests.config.test_localization.current_locale->locale.getlocale()
A:pandas.tests.config.test_localization.system_locale->os.environ.get('LC_ALL')
pandas.tests.config.test_localization.test_can_set_locale_invalid_get(monkeypatch)
pandas.tests.config.test_localization.test_can_set_locale_invalid_set()
pandas.tests.config.test_localization.test_can_set_locale_valid_set()
pandas.tests.config.test_localization.test_encoding_detected()
pandas.tests.config.test_localization.test_get_locales_at_least_one()
pandas.tests.config.test_localization.test_get_locales_prefix()
pandas.tests.config.test_localization.test_set_locale(lang,enc)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/computation/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/computation/test_eval.py----------------------------------------
A:pandas.tests.computation.test_eval._good_arith_ops->set(_arith_ops_syms).difference(_special_case_arith_ops_syms)
A:pandas.tests.computation.test_eval.nan_df1->DataFrame(rand(10, 5))
A:pandas.tests.computation.test_eval.nan_df2->DataFrame(rand(10, 5))
A:pandas.tests.computation.test_eval.self.current_engines->filter(lambda x: x != self.engine, _engines)
A:pandas.tests.computation.test_eval.lhs_new->check_operands(lhs, mid, cmp1)
A:pandas.tests.computation.test_eval.rhs_new->check_operands(mid, rhs, cmp2)
A:pandas.tests.computation.test_eval.expected->Series([False, False, False], name='A')
A:pandas.tests.computation.test_eval.result->pandas.DataFrame([[0, 10], [1, 20]], columns=['cat', 'count']).query('not (cat > 0)', engine=engine, parser=parser)
A:pandas.tests.computation.test_eval.nlhs->_eval_single_bin(lhs, arith1, rhs, self.engine)
A:pandas.tests.computation.test_eval.(nlhs, ghs)->_eval_single_bin(lhs, arith1, rhs, self.engine).align(ghs)
A:pandas.tests.computation.test_eval.res->pandas.eval('sin + dotted_line', engine=engine, parser=parser)
A:pandas.tests.computation.test_eval.elb->numpy.array([bool(el)])
A:pandas.tests.computation.test_eval.(lhs, rhs)->map(lambda x: np.array([x]), (lhs, rhs))
A:pandas.tests.computation.test_eval.ev->pandas.eval(ex, engine=self.engine, parser=self.parser)
A:pandas.tests.computation.test_eval.expr->' * '.join('a' * 33)
A:pandas.tests.computation.test_eval.lhs->gen[lhs]()
A:pandas.tests.computation.test_eval.df->pandas.DataFrame([[0, 10], [1, 20]], columns=['cat', 'count'])
A:pandas.tests.computation.test_eval.x->self.eval('1')
A:pandas.tests.computation.test_eval.self.cmp_ops->list(filter(lambda x: x not in ('in', 'not in'), expr._cmp_ops_syms))
A:pandas.tests.computation.test_eval.only_one_dt->reduce(operator.xor, map(_is_datetime, args))
A:pandas.tests.computation.test_eval.args->product(self.lhs_index_types, self.index_types, self.index_types, self.index_types)
A:pandas.tests.computation.test_eval.df2->DataFrame(np.random.randn(5, 3))
A:pandas.tests.computation.test_eval.df3->pandas._testing.makeCustomDataframe(5, 2, data_gen_f=f, r_idx_type=r2, c_idx_type=c2)
A:pandas.tests.computation.test_eval.index->getattr(locals().get(obj_name), index_name)
A:pandas.tests.computation.test_eval.s->numpy.array([1])
A:pandas.tests.computation.test_eval.a->pandas.eval(lhs, engine=engine, parser=parser)
A:pandas.tests.computation.test_eval.b->pandas.eval(rhs, engine=engine, parser=parser)
A:pandas.tests.computation.test_eval.index_name->random.choice(['index', 'columns'])
A:pandas.tests.computation.test_eval.obj_name->random.choice(['df', 'df2'])
A:pandas.tests.computation.test_eval.expected2->DataFrame(np.random.randn(5, 3)).add(s)
A:pandas.tests.computation.test_eval.msg->str(w[0].message)
A:pandas.tests.computation.test_eval.loged->numpy.log10(s.size - df.shape[1])
A:pandas.tests.computation.test_eval.expec->_eval_single_bin(1, op, x + 1, self.engine)
A:pandas.tests.computation.test_eval.y->Series(randn(10))
A:pandas.tests.computation.test_eval.exp->eval(ex)
A:pandas.tests.computation.test_eval.orig_df->pandas.DataFrame([[0, 10], [1, 20]], columns=['cat', 'count']).copy()
A:pandas.tests.computation.test_eval.old_a->pandas.DataFrame([[0, 10], [1, 20]], columns=['cat', 'count']).a.copy()
A:pandas.tests.computation.test_eval.actual->pandas.DataFrame([[0, 10], [1, 20]], columns=['cat', 'count']).eval('c = a + b', inplace=False)
A:pandas.tests.computation.test_eval.ans->pandas.DataFrame([[0, 10], [1, 20]], columns=['cat', 'count']).eval('\n        c = a * @local_func(b=7, a=1)\n        d = c + @local_func(b=7, a=1)\n        ', inplace=True)
A:pandas.tests.computation.test_eval.df_orig->pandas.DataFrame([[0, 10], [1, 20]], columns=['cat', 'count']).copy()
A:pandas.tests.computation.test_eval.r->self.eval('df[df[df < 2] < 2] + df * 2', local_dict={'df': df})
A:pandas.tests.computation.test_eval.df['dates1']->date_range('1/1/2012', periods=5)
A:pandas.tests.computation.test_eval.cls.arith_ops->filter(lambda x: x not in ('in', 'not in'), cls.arith_ops)
A:pandas.tests.computation.test_eval.got->self.eval(expr)
A:pandas.tests.computation.test_eval.expect->numpy.sin(df.a)
A:pandas.tests.computation.test_eval._var_s->randn(10)
A:pandas.tests.computation.test_eval.lcls->locals().copy()
A:pandas.tests.computation.test_eval.lcls2->locals().copy()
A:pandas.tests.computation.test_eval.gbls->globals().copy()
A:pandas.tests.computation.test_eval.gbls2->globals().copy()
A:pandas.tests.computation.test_eval.inst->VisitorClass('x + 1', engine, parser)
A:pandas.tests.computation.test_eval.mid->gen[lhs]()
A:pandas.tests.computation.test_eval.rhs->gen[rhs]()
pandas.tests.computation.test_eval.TestAlignment
pandas.tests.computation.test_eval.TestAlignment.test_align_nested_unary_op(self,engine,parser)
pandas.tests.computation.test_eval.TestAlignment.test_basic_frame_alignment(self,engine,parser)
pandas.tests.computation.test_eval.TestAlignment.test_basic_frame_series_alignment(self,engine,parser)
pandas.tests.computation.test_eval.TestAlignment.test_basic_series_frame_alignment(self,engine,parser)
pandas.tests.computation.test_eval.TestAlignment.test_complex_series_frame_alignment(self,engine,parser)
pandas.tests.computation.test_eval.TestAlignment.test_frame_comparison(self,engine,parser)
pandas.tests.computation.test_eval.TestAlignment.test_medium_complex_frame_alignment(self,engine,parser)
pandas.tests.computation.test_eval.TestAlignment.test_performance_warning_for_poor_alignment(self,engine,parser)
pandas.tests.computation.test_eval.TestAlignment.test_series_frame_commutativity(self,engine,parser)
pandas.tests.computation.test_eval.TestEvalNumexprPandas
pandas.tests.computation.test_eval.TestEvalNumexprPandas.check_alignment(self,result,nlhs,ghs,op)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.check_binary_arith_op(self,lhs,arith1,rhs)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.check_chained_cmp_op(self,lhs,cmp1,mid,cmp2,rhs)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.check_compound_invert_op(self,lhs,cmp1,rhs)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.check_equal(self,result,expected)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.check_floor_division(self,lhs,arith1,rhs)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.check_modulus(self,lhs,arith1,rhs)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.check_pow(self,lhs,arith1,rhs)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.check_simple_cmp_op(self,lhs,cmp1,rhs)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.check_single_invert_op(self,lhs,cmp1,rhs)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.ex(self,op,var_name='lhs')
pandas.tests.computation.test_eval.TestEvalNumexprPandas.get_expected_pow_result(self,lhs,rhs)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.setup_class(cls)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.setup_data(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.setup_method(self,method)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.setup_ops(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.teardown_class(cls)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.teardown_method(self,method)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_binary_arith_ops(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_chained_cmp_op(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_complex_cmp_ops(self,cmp1,cmp2)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_compound_invert_op(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_disallow_python_keywords(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_disallow_scalar_bool_ops(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_float_comparison_bin_op(self,dtype)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_float_truncation(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_floor_division(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_frame_invert(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_frame_negate(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_frame_pos(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_identical(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_line_continuation(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_modulus(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_pow(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_scalar_unary(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_series_invert(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_series_negate(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_series_pos(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_simple_cmp_ops(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_single_invert_op(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_unary_in_array(self)
pandas.tests.computation.test_eval.TestEvalNumexprPython(TestEvalNumexprPandas)
pandas.tests.computation.test_eval.TestEvalNumexprPython.check_chained_cmp_op(self,lhs,cmp1,mid,cmp2,rhs)
pandas.tests.computation.test_eval.TestEvalNumexprPython.setup_class(cls)
pandas.tests.computation.test_eval.TestEvalNumexprPython.setup_ops(self)
pandas.tests.computation.test_eval.TestEvalPythonPandas(TestEvalPythonPython)
pandas.tests.computation.test_eval.TestEvalPythonPandas.check_chained_cmp_op(self,lhs,cmp1,mid,cmp2,rhs)
pandas.tests.computation.test_eval.TestEvalPythonPandas.setup_class(cls)
pandas.tests.computation.test_eval.TestEvalPythonPython(TestEvalNumexprPython)
pandas.tests.computation.test_eval.TestEvalPythonPython.check_alignment(self,result,nlhs,ghs,op)
pandas.tests.computation.test_eval.TestEvalPythonPython.check_modulus(self,lhs,arith1,rhs)
pandas.tests.computation.test_eval.TestEvalPythonPython.setup_class(cls)
pandas.tests.computation.test_eval.TestMathNumExprPandas(TestMathPythonPython)
pandas.tests.computation.test_eval.TestMathNumExprPandas.setup_class(cls)
pandas.tests.computation.test_eval.TestMathNumExprPython(TestMathPythonPython)
pandas.tests.computation.test_eval.TestMathNumExprPython.setup_class(cls)
pandas.tests.computation.test_eval.TestMathPythonPandas(TestMathPythonPython)
pandas.tests.computation.test_eval.TestMathPythonPandas.setup_class(cls)
pandas.tests.computation.test_eval.TestMathPythonPython
pandas.tests.computation.test_eval.TestMathPythonPython.check_result_type(self,dtype,expect_dtype)
pandas.tests.computation.test_eval.TestMathPythonPython.eval(self,*args,**kwargs)
pandas.tests.computation.test_eval.TestMathPythonPython.setup_class(cls)
pandas.tests.computation.test_eval.TestMathPythonPython.teardown_class(cls)
pandas.tests.computation.test_eval.TestMathPythonPython.test_binary_functions(self)
pandas.tests.computation.test_eval.TestMathPythonPython.test_df_arithmetic_subexpression(self)
pandas.tests.computation.test_eval.TestMathPythonPython.test_df_use_case(self)
pandas.tests.computation.test_eval.TestMathPythonPython.test_floor_and_ceil_functions_raise_error(self,ne_lt_2_6_9,unary_fns_for_ne)
pandas.tests.computation.test_eval.TestMathPythonPython.test_keyword_arg(self)
pandas.tests.computation.test_eval.TestMathPythonPython.test_result_complex128(self)
pandas.tests.computation.test_eval.TestMathPythonPython.test_result_types(self)
pandas.tests.computation.test_eval.TestMathPythonPython.test_unary_functions(self,unary_fns_for_ne)
pandas.tests.computation.test_eval.TestMathPythonPython.test_undefined_func(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.assignment_not_inplace(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.eval(self,*args,**kwargs)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.setup_class(cls)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.teardown_class(cls)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_4d_ndarray_fails(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_assignment_column(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_assignment_fails(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_assignment_in_query(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_attr_expression(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_basic_period_index_boolean_expression(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_basic_period_index_subscript_expression(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_bool_ops_with_constants(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_cannot_copy_item(self,invalid_target)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_cannot_item_assign(self,invalid_target)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_column_in(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_constant(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_date_boolean(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_failing_subscript_with_name_error(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_inplace_no_assignment(self,target)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_lhs_expression_subscript(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_multi_line_expression(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_multi_line_expression_callable_local_variable(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_multi_line_expression_callable_local_variable_with_kwargs(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_multi_line_expression_local_variable(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_multi_line_expression_not_inplace(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_nested_period_index_subscript_expression(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_query_inplace(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_simple_arith_ops(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_simple_bool_ops(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_simple_in_ops(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_single_variable(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_truediv(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPython(TestOperationsNumExprPandas)
pandas.tests.computation.test_eval.TestOperationsNumExprPython.setup_class(cls)
pandas.tests.computation.test_eval.TestOperationsNumExprPython.test_bool_ops_with_constants(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPython.test_check_many_exprs(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPython.test_fails_ampersand(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPython.test_fails_and(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPython.test_fails_not(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPython.test_fails_or(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPython.test_fails_pipe(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPython.test_simple_bool_ops(self)
pandas.tests.computation.test_eval.TestOperationsPythonPandas(TestOperationsNumExprPandas)
pandas.tests.computation.test_eval.TestOperationsPythonPandas.setup_class(cls)
pandas.tests.computation.test_eval.TestOperationsPythonPython(TestOperationsNumExprPython)
pandas.tests.computation.test_eval.TestOperationsPythonPython.setup_class(cls)
pandas.tests.computation.test_eval.TestScope
pandas.tests.computation.test_eval.TestScope.test_global_scope(self,engine,parser)
pandas.tests.computation.test_eval.TestScope.test_no_new_globals(self,engine,parser)
pandas.tests.computation.test_eval.TestScope.test_no_new_locals(self,engine,parser)
pandas.tests.computation.test_eval.TestTypeCasting
pandas.tests.computation.test_eval.TestTypeCasting.test_binop_typecasting(self,engine,parser,op,dt)
pandas.tests.computation.test_eval.TestValidate
pandas.tests.computation.test_eval.TestValidate.test_validate_bool_args(self)
pandas.tests.computation.test_eval._bool_and_frame(lhs,rhs)
pandas.tests.computation.test_eval._eval_single_bin(lhs,cmp1,rhs,engine)
pandas.tests.computation.test_eval._is_datetime(x)
pandas.tests.computation.test_eval._is_dt(x)
pandas.tests.computation.test_eval._is_py3_complex_incompat(result,expected)
pandas.tests.computation.test_eval._series_and_2d_ndarray(lhs,rhs)
pandas.tests.computation.test_eval._series_and_frame(lhs,rhs)
pandas.tests.computation.test_eval.engine(request)
pandas.tests.computation.test_eval.engine_has_neg_frac(engine)
pandas.tests.computation.test_eval.ne_lt_2_6_9()
pandas.tests.computation.test_eval.parser(request)
pandas.tests.computation.test_eval.should_warn(*args)
pandas.tests.computation.test_eval.test_bad_resolver_raises(engine,parser)
pandas.tests.computation.test_eval.test_bool_ops_fails_on_scalars(lhs,cmp,rhs,engine,parser)
pandas.tests.computation.test_eval.test_disallowed_nodes(engine,parser)
pandas.tests.computation.test_eval.test_empty_string_raises(engine,parser)
pandas.tests.computation.test_eval.test_equals_various(other)
pandas.tests.computation.test_eval.test_inf(engine,parser)
pandas.tests.computation.test_eval.test_invalid_engine()
pandas.tests.computation.test_eval.test_invalid_local_variable_reference(engine,parser)
pandas.tests.computation.test_eval.test_invalid_parser()
pandas.tests.computation.test_eval.test_more_than_one_expression_raises(engine,parser)
pandas.tests.computation.test_eval.test_name_error_exprs(engine,parser)
pandas.tests.computation.test_eval.test_negate_lt_eq_le(engine,parser)
pandas.tests.computation.test_eval.test_numexpr_builtin_raises(engine,parser)
pandas.tests.computation.test_eval.test_syntax_error_exprs(engine,parser)
pandas.tests.computation.test_eval.test_truediv_deprecated(engine,parser)
pandas.tests.computation.test_eval.unary_fns_for_ne()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/computation/test_compat.py----------------------------------------
A:pandas.tests.computation.test_compat.res->pandas.eval('a + b', engine=engine, parser=parser)
pandas.tests.computation.test_compat.test_compat()
pandas.tests.computation.test_compat.test_invalid_numexpr_version(engine,parser)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/resample/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/resample/test_base.py----------------------------------------
A:pandas.tests.resample.test_base.all_ts->pytest.mark.parametrize('_index_factory,_series_name,_index_start,_index_end', [DATE_RANGE, PERIOD_RANGE, TIMEDELTA_RANGE])
A:pandas.tests.resample.test_base.result->s.resample(freq).quantile(q)
A:pandas.tests.resample.test_base.new_index->create_index(frame.index[0], frame.index[-1], freq='1H')
A:pandas.tests.resample.test_base.expected->s.resample(freq).agg(lambda x: x.quantile(q)).rename(s.name)
A:pandas.tests.resample.test_base.frame->s.to_frame('value')
A:pandas.tests.resample.test_base.xp->DataFrame()
A:pandas.tests.resample.test_base.expected.index->df.index._shallow_copy(freq=freq)
A:pandas.tests.resample.test_base.index->empty_frame.copy().index._shallow_copy(freq=freq)
A:pandas.tests.resample.test_base.empty_frame->empty_frame.copy().copy()
A:pandas.tests.resample.test_base.empty_series->Series([], index, dtype)
A:pandas.tests.resample.test_base.expected_index->expected_index.to_timestamp().to_timestamp()
A:pandas.tests.resample.test_base.result_agg->df.resample('2D', loffset='2H').agg(arg)
A:pandas.tests.resample.test_base.expected.columns->pandas.MultiIndex.from_tuples([('value', 'mean')])
A:pandas.tests.resample.test_base.tg->Grouper(freq=freq, convention='start')
A:pandas.tests.resample.test_base.grouped->series.groupby(tg)
A:pandas.tests.resample.test_base.resampled->series.resample(freq)
pandas.tests.resample.test_base.create_index(_index_factory)
pandas.tests.resample.test_base.test_apply_to_empty_series(empty_series)
pandas.tests.resample.test_base.test_asfreq(series_and_frame,freq,create_index)
pandas.tests.resample.test_base.test_asfreq_fill_value(series,create_index)
pandas.tests.resample.test_base.test_raises_on_non_datetimelike_index()
pandas.tests.resample.test_base.test_raises_on_non_dtlike_index()
pandas.tests.resample.test_base.test_resample_count_empty_dataframe(freq,empty_frame)
pandas.tests.resample.test_base.test_resample_count_empty_series(freq,empty_series,resample_method)
pandas.tests.resample.test_base.test_resample_empty_dataframe(empty_frame,freq,resample_method)
pandas.tests.resample.test_base.test_resample_empty_dtypes(index,dtype,resample_method)
pandas.tests.resample.test_base.test_resample_empty_series(freq,empty_series,resample_method)
pandas.tests.resample.test_base.test_resample_interpolate(frame)
pandas.tests.resample.test_base.test_resample_loffset_arg_type(frame,create_index,arg)
pandas.tests.resample.test_base.test_resample_quantile(series)
pandas.tests.resample.test_base.test_resample_size_empty_dataframe(freq,empty_frame)
pandas.tests.resample.test_base.test_resampler_is_iterable(series)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/resample/test_period_index.py----------------------------------------
A:pandas.tests.resample.test_period_index.expected->pandas.Series(0, index=pd.period_range(start, end, freq=start_freq)).to_timestamp().resample(end_freq, base=base).mean()
A:pandas.tests.resample.test_period_index.start->datetime(year=2013, month=11, day=1, hour=0, minute=0, tzinfo=dateutil.tz.tzutc())
A:pandas.tests.resample.test_period_index.end->datetime(year=2013, month=11, day=2, hour=0, minute=0, tzinfo=dateutil.tz.tzutc())
A:pandas.tests.resample.test_period_index.new_index->period_range(start='2000', freq=freq, periods=period_mult * len(pi))
A:pandas.tests.resample.test_period_index.result->_get_period_range_edges(first, last, offset)
A:pandas.tests.resample.test_period_index.frame->DataFrame([2, 3, 5], index=pi)
A:pandas.tests.resample.test_period_index.rng->period_range('2000Q1', periods=10, freq='Q-DEC')
A:pandas.tests.resample.test_period_index.df->DataFrame([{'REST_KEY': 1, 'DLY_TRN_QT': 80, 'DLY_SLS_AMT': 90, 'COOP_DLY_TRN_QT': 30, 'COOP_DLY_SLS_AMT': 20}] * 28 + [{'REST_KEY': 2, 'DLY_TRN_QT': 70, 'DLY_SLS_AMT': 10, 'COOP_DLY_TRN_QT': 50, 'COOP_DLY_SLS_AMT': 20}] * 28, index=index.append(index)).sort_index()
A:pandas.tests.resample.test_period_index.ts->Series(np.arange(10), index=rng)
A:pandas.tests.resample.test_period_index.expected.index->period_range('1/1/1990', '6/30/1995', freq='a-dec')
A:pandas.tests.resample.test_period_index.msg->'Frequency <Week: weekday=2> cannot be resampled to {}, as they are not sub or super periods'.format(expected_error_msg)
A:pandas.tests.resample.test_period_index.resampled->DataFrame([{'REST_KEY': 1, 'DLY_TRN_QT': 80, 'DLY_SLS_AMT': 90, 'COOP_DLY_TRN_QT': 30, 'COOP_DLY_SLS_AMT': 20}] * 28 + [{'REST_KEY': 2, 'DLY_TRN_QT': 70, 'DLY_SLS_AMT': 10, 'COOP_DLY_TRN_QT': 50, 'COOP_DLY_SLS_AMT': 20}] * 28, index=index.append(index)).sort_index().resample(to_freq).mean()
A:pandas.tests.resample.test_period_index.rdf->DataFrame([{'REST_KEY': 1, 'DLY_TRN_QT': 80, 'DLY_SLS_AMT': 90, 'COOP_DLY_TRN_QT': 30, 'COOP_DLY_SLS_AMT': 20}] * 28 + [{'REST_KEY': 2, 'DLY_TRN_QT': 70, 'DLY_SLS_AMT': 10, 'COOP_DLY_TRN_QT': 50, 'COOP_DLY_SLS_AMT': 20}] * 28, index=index.append(index)).sort_index().resample('D').ffill()
A:pandas.tests.resample.test_period_index.exp->Series(np.arange(10), index=rng).to_timestamp().resample('A').mean().to_period()
A:pandas.tests.resample.test_period_index.ex_index->date_range(start='1/1/2012 9:30', freq='10min', periods=3)
A:pandas.tests.resample.test_period_index.freq->'W-{day}'.format(day=day)
A:pandas.tests.resample.test_period_index.s->pandas.Series(0, index=pd.period_range(start, end, freq=start_freq))
A:pandas.tests.resample.test_period_index.index->PeriodIndex(periods, freq='S')
A:pandas.tests.resample.test_period_index.result2->pandas.Series(0, index=pd.period_range(start, end, freq=start_freq)).resample('T', kind='period').mean()
A:pandas.tests.resample.test_period_index.series->series.tz_convert(local_timezone).tz_convert(local_timezone)
A:pandas.tests.resample.test_period_index.expected_index->PeriodIndex(data=[], freq=pi.freq)
A:pandas.tests.resample.test_period_index.local_timezone->pytz.timezone('America/Los_Angeles')
A:pandas.tests.resample.test_period_index.idx->date_range(start='8/15/2012', periods=100, freq=from_freq)
A:pandas.tests.resample.test_period_index.last->pandas.Period(last)
A:pandas.tests.resample.test_period_index.both->pandas.Series(0, index=pd.period_range(start, end, freq=start_freq)).resample('M').ffill().resample('M').last().astype('int64')
A:pandas.tests.resample.test_period_index.quar_ts->Series(np.arange(10), index=rng).resample('Q-{month}'.format(month=month)).ffill()
A:pandas.tests.resample.test_period_index.stamps->pandas.Series(0, index=pd.period_range(start, end, freq=start_freq)).to_timestamp()
A:pandas.tests.resample.test_period_index.qdates->period_range(ts.index[0].asfreq('D', 'start'), ts.index[-1].asfreq('D', 'end'), freq='Q-{month}'.format(month=month))
A:pandas.tests.resample.test_period_index.filled->pandas.Series(0, index=pd.period_range(start, end, freq=start_freq)).resample('A').ffill()
A:pandas.tests.resample.test_period_index.exp_rng->period_range('1/1/2000', '2/1/2000 23:00', freq='H')
A:pandas.tests.resample.test_period_index.dr->date_range(start='2012-4-13', end='2012-5-1')
A:pandas.tests.resample.test_period_index.ts_utc->Series(np.arange(10), index=rng).tz_localize('UTC')
A:pandas.tests.resample.test_period_index.ts_local->Series(np.arange(10), index=rng).tz_localize('UTC').tz_convert('America/Los_Angeles')
A:pandas.tests.resample.test_period_index.ts_local_naive->Series(np.arange(10), index=rng).tz_localize('UTC').tz_convert('America/Los_Angeles').copy()
A:pandas.tests.resample.test_period_index.ts['first']->numpy.random.randn(len(rng))
A:pandas.tests.resample.test_period_index.ts['second']->numpy.cumsum(np.random.randn(len(rng)))
A:pandas.tests.resample.test_period_index.ind->date_range(start='8/6/2012', end='8/26/2012', freq='D')
A:pandas.tests.resample.test_period_index.n->len(ind)
A:pandas.tests.resample.test_period_index.foo->Series(index=pd.bdate_range('20000101', '20000201'), dtype=np.float64)
A:pandas.tests.resample.test_period_index.res1->Series(index=pd.bdate_range('20000101', '20000201'), dtype=np.float64).resample('BMS').mean()
A:pandas.tests.resample.test_period_index.res2->Series(index=pd.bdate_range('20000101', '20000201'), dtype=np.float64).resample('BMS').mean().resample('B').mean()
A:pandas.tests.resample.test_period_index.result_agg->DataFrame([{'REST_KEY': 1, 'DLY_TRN_QT': 80, 'DLY_SLS_AMT': 90, 'COOP_DLY_TRN_QT': 30, 'COOP_DLY_SLS_AMT': 20}] * 28 + [{'REST_KEY': 2, 'DLY_TRN_QT': 70, 'DLY_SLS_AMT': 10, 'COOP_DLY_TRN_QT': 50, 'COOP_DLY_SLS_AMT': 20}] * 28, index=index.append(index)).sort_index().resample('2D', loffset='2H', kind=kind).agg(agg_arg)
A:pandas.tests.resample.test_period_index.expected.columns->pandas.MultiIndex.from_tuples([('value', 'mean')])
A:pandas.tests.resample.test_period_index.pi->PeriodIndex([pd.NaT] * 3, freq='S')
A:pandas.tests.resample.test_period_index.first->pandas.Period(first)
A:pandas.tests.resample.test_period_index.exp_first->pandas.Period(exp_first, freq=offset)
A:pandas.tests.resample.test_period_index.exp_last->pandas.Period(exp_last, freq=offset)
A:pandas.tests.resample.test_period_index.offset->pandas.tseries.frequencies.to_offset(offset)
pandas.tests.resample.test_period_index.TestPeriodIndex
pandas.tests.resample.test_period_index.TestPeriodIndex.test_all_values_single_bin(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_annual_upsample(self,simple_period_range_series)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_annual_upsample_cases(self,targ,conv,meth,month,simple_period_range_series)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_asfreq(self,series_and_frame,freq,kind)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_asfreq_fill_value(self,series)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_basic_downsample(self,simple_period_range_series)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_basic_upsample(self,freq,simple_period_range_series)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_cant_fill_missing_dups(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_closed_left_corner(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_default_left_closed_label(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_default_right_closed_label(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_evenly_divisible_with_no_extra_bins(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_fill_method_and_how_upsample(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_get_period_range_edges(self,first,last,offset,exp_first,exp_last)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_loffset_returns_datetimeindex(self,frame,kind,agg_arg)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_loffset_returns_dtindex(self,frame,kind,agg_arg)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_monthly_upsample(self,target,convention,simple_period_range_series)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_not_subperiod(self,simple_period_range_series,rule,expected_error_msg)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_quarterly_resampling(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_quarterly_upsample(self,month,target,convention,simple_period_range_series)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_resample_5minute(self,freq,kind)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_resample_ambiguous_time_bin_edge(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_resample_basic(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_resample_bms_2752(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_resample_count(self,freq,expected_vals)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_resample_fill_missing(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_resample_incompat_freq(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_resample_irregular_sparse(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_resample_nonexistent_time_bin_edge(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_resample_same_freq(self,resample_method)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_resample_to_quarterly(self,simple_period_range_series)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_resample_to_timestamps(self,simple_period_range_series)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_resample_tz_localized(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_resample_weekly_all_na(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_resample_weekly_bug_1726(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_resample_with_dst_time_change(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_resample_with_nat(self,periods,values,freq,expected_values)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_resample_with_non_zero_base(self,start,end,start_freq,end_freq,base)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_resample_with_only_nat(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_resample_with_pytz(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_selection(self,index,freq,kind,kwargs)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_upsample_daily_business_daily(self,simple_period_range_series)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_upsample_with_limit(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_upsampling_ohlc(self,freq,period_mult,kind)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_weekly_upsample(self,day,target,convention,simple_period_range_series)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_with_local_timezone_dateutil(self)
pandas.tests.resample.test_period_index.TestPeriodIndex.test_with_local_timezone_pytz(self)
pandas.tests.resample.test_period_index._index_factory()
pandas.tests.resample.test_period_index._series_name()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/resample/test_timedelta.py----------------------------------------
A:pandas.tests.resample.test_timedelta.df->DataFrame({'time': times}, index=times)
A:pandas.tests.resample.test_timedelta.result->DataFrame({'time': times}, index=times).resample('10s').agg(lambda x: x.value_counts().index[0])
A:pandas.tests.resample.test_timedelta.expected->expected.reindex(['Group_obj', 'Group'], axis=1).reindex(['Group_obj', 'Group'], axis=1)
A:pandas.tests.resample.test_timedelta.index->pandas.timedelta_range('0', periods=9, freq='10L')
A:pandas.tests.resample.test_timedelta.expected.index->pandas.timedelta_range('0 days', freq='30T', periods=50)
A:pandas.tests.resample.test_timedelta.s->Series(list(range(5)), index=pd.timedelta_range('1 day', freq='s', periods=5))
A:pandas.tests.resample.test_timedelta.series->Series(range(9), index=index)
A:pandas.tests.resample.test_timedelta.rng->timedelta_range(start='0s', periods=25, freq='s')
A:pandas.tests.resample.test_timedelta.ts->Series(np.random.randn(len(rng)), index=rng)
A:pandas.tests.resample.test_timedelta.with_base->Series(np.random.randn(len(rng)), index=rng).resample('2s', base=5).mean()
A:pandas.tests.resample.test_timedelta.without_base->Series(np.random.randn(len(rng)), index=rng).resample('2s').mean()
A:pandas.tests.resample.test_timedelta.exp_without_base->timedelta_range(start='0s', end='25s', freq='2s')
A:pandas.tests.resample.test_timedelta.exp_with_base->timedelta_range(start='5s', end='29s', freq='2s')
A:pandas.tests.resample.test_timedelta.df['Group']->df['Group_obj'].astype('category')
A:pandas.tests.resample.test_timedelta.times->timedelta_range('1 day', '4 day', freq='4D')
A:pandas.tests.resample.test_timedelta.times2->timedelta_range('1 day', '4 day', freq='2D')
A:pandas.tests.resample.test_timedelta.exp->Series(times2, index=times2, name='time')
A:pandas.tests.resample.test_timedelta.res->df['time'].resample('2D').first()
pandas.tests.resample.test_timedelta.test_asfreq_bug()
pandas.tests.resample.test_timedelta.test_resample_as_freq_with_subperiod()
pandas.tests.resample.test_timedelta.test_resample_base_with_timedeltaindex()
pandas.tests.resample.test_timedelta.test_resample_categorical_data_with_timedeltaindex()
pandas.tests.resample.test_timedelta.test_resample_single_period_timedelta()
pandas.tests.resample.test_timedelta.test_resample_timedelta_idempotency()
pandas.tests.resample.test_timedelta.test_resample_timedelta_values()
pandas.tests.resample.test_timedelta.test_resample_with_nat()
pandas.tests.resample.test_timedelta.test_resample_with_timedeltas()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/resample/test_resample_api.py----------------------------------------
A:pandas.tests.resample.test_resample_api.dti->date_range(start=datetime(2005, 1, 1), end=datetime(2005, 1, 10), freq='Min')
A:pandas.tests.resample.test_resample_api.test_series->Series(np.random.rand(len(dti)), dti)
A:pandas.tests.resample.test_resample_api._test_frame->DataFrame({'A': test_series, 'B': test_series, 'C': np.arange(len(dti))})
A:pandas.tests.resample.test_resample_api.r->pandas.DataFrame(list(range(200)), index=pd.date_range(start='2017-01-01', freq='15min', periods=200, tz='Europe/Berlin'), columns=[col_name]).resample('2D')
A:pandas.tests.resample.test_resample_api.result->ser.resample('1D').agg('min')
A:pandas.tests.resample.test_resample_api.df->pandas.DataFrame(list(range(200)), index=pd.date_range(start='2017-01-01', freq='15min', periods=200, tz='Europe/Berlin'), columns=[col_name])
A:pandas.tests.resample.test_resample_api.index->pandas.date_range('2020-01-01', '2020-01-02', freq='1h')
A:pandas.tests.resample.test_resample_api.expected->pandas.Series([pd.Timestamp(0), pd.Timestamp(0)], index=index[::24])
A:pandas.tests.resample.test_resample_api.g->Series(np.random.rand(len(dti)), dti).groupby(pd.Grouper(freq='20min'))
A:pandas.tests.resample.test_resample_api.rng->numpy.arange(len(index), dtype=np.int64)
A:pandas.tests.resample.test_resample_api.ts->Series(np.arange(len(rng), dtype='int64'), index=rng)
A:pandas.tests.resample.test_resample_api.rs->pandas.Series(arr, index=index).resample('1D')
A:pandas.tests.resample.test_resample_api.df_col->pandas.DataFrame(list(range(200)), index=pd.date_range(start='2017-01-01', freq='15min', periods=200, tz='Europe/Berlin'), columns=[col_name]).reset_index()
A:pandas.tests.resample.test_resample_api.df_mult->pandas.DataFrame(list(range(200)), index=pd.date_range(start='2017-01-01', freq='15min', periods=200, tz='Europe/Berlin'), columns=[col_name]).reset_index().copy()
A:pandas.tests.resample.test_resample_api.df_mult.index->pandas.MultiIndex.from_arrays([range(10), df.index], names=['index', 'date'])
A:pandas.tests.resample.test_resample_api.a_mean->r['A'].mean()
A:pandas.tests.resample.test_resample_api.a_std->r['A'].std()
A:pandas.tests.resample.test_resample_api.a_sum->r['A'].sum()
A:pandas.tests.resample.test_resample_api.b_mean->r['B'].mean()
A:pandas.tests.resample.test_resample_api.b_std->r['B'].std()
A:pandas.tests.resample.test_resample_api.b_sum->r['B'].sum()
A:pandas.tests.resample.test_resample_api.expected.columns->pandas.MultiIndex.from_tuples([('A', 'sum'), ('A', 'std'), ('B', 'mean'), ('B', 'std')])
A:pandas.tests.resample.test_resample_api.rcustom->t['B'].apply(lambda x: np.std(x, ddof=1))
A:pandas.tests.resample.test_resample_api.df_exp->DataFrame({'a': rng}, index=index)
A:pandas.tests.resample.test_resample_api.exp->DataFrame({'a': rng}, index=index).resample('2D').sum()
A:pandas.tests.resample.test_resample_api.arr->numpy.zeros_like(index)
A:pandas.tests.resample.test_resample_api.ser->pandas.Series(arr, index=index)
pandas.tests.resample.test_resample_api.test_agg()
pandas.tests.resample.test_resample_api.test_agg_consistency()
pandas.tests.resample.test_resample_api.test_agg_misc()
pandas.tests.resample.test_resample_api.test_agg_nested_dicts()
pandas.tests.resample.test_resample_api.test_agg_with_datetime_index_list_agg_func(col_name)
pandas.tests.resample.test_resample_api.test_agg_with_dt_index_list_agg_func(col_name)
pandas.tests.resample.test_resample_api.test_api()
pandas.tests.resample.test_resample_api.test_api_compat_before_use()
pandas.tests.resample.test_resample_api.test_apply_without_aggregation()
pandas.tests.resample.test_resample_api.test_attribute_access(test_frame)
pandas.tests.resample.test_resample_api.test_combined_up_downsampling_of_irregular()
pandas.tests.resample.test_resample_api.test_downsample_but_actually_upsampling()
pandas.tests.resample.test_resample_api.test_fillna()
pandas.tests.resample.test_resample_api.test_frame()
pandas.tests.resample.test_resample_api.test_getitem(test_frame)
pandas.tests.resample.test_resample_api.test_groupby_resample_api()
pandas.tests.resample.test_resample_api.test_groupby_resample_on_api()
pandas.tests.resample.test_resample_api.test_pipe(test_frame)
pandas.tests.resample.test_resample_api.test_resample_agg_readonly()
pandas.tests.resample.test_resample_api.test_select_bad_cols(key,test_frame)
pandas.tests.resample.test_resample_api.test_selection_api_validation()
pandas.tests.resample.test_resample_api.test_str()
pandas.tests.resample.test_resample_api.test_transform()
pandas.tests.resample.test_resample_api.test_try_aggregate_non_existing_column()
pandas.tests.resample.test_resample_api.tests_skip_nuisance(test_frame)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/resample/test_datetime_index.py----------------------------------------
A:pandas.tests.resample.test_datetime_index.s->pandas.Series(0, index=pd.date_range('19910905 13:00', '19911005 07:00', freq=freq1))
A:pandas.tests.resample.test_datetime_index.b->pandas.Series(0, index=pd.date_range('19910905 13:00', '19911005 07:00', freq=freq1)).loc[:'4-14-2000'].resample('30T').ohlc()
A:pandas.tests.resample.test_datetime_index.g->DataFrame(dict(A=ts, B=ts + 2)).groupby(pd.Grouper(freq='D'))
A:pandas.tests.resample.test_datetime_index.idx->pandas.date_range('2013-04-01', '2013-05-01', tz='Europe/London', freq='H')
A:pandas.tests.resample.test_datetime_index.expect->pandas.Series(0, index=pd.date_range('19910905 13:00', '19911005 07:00', freq=freq1)).groupby(grouper).agg(lambda x: x[-1])
A:pandas.tests.resample.test_datetime_index.result->DataFrame(dict(A=ts, B=ts + 2)).resample('Q').apply(np.product)
A:pandas.tests.resample.test_datetime_index.df->DataFrame(dict(A=ts, B=ts + 2))
A:pandas.tests.resample.test_datetime_index.r->pandas.Series(0, index=pd.date_range('19910905 13:00', '19911005 07:00', freq=freq1)).resample('M')
A:pandas.tests.resample.test_datetime_index.expected->DataFrame(np.array([[0, 24], [60, 210], [336, 720], [990, 1716]], dtype=np.int64), index=DatetimeIndex(['2012-03-31', '2012-06-30', '2012-09-30', '2012-12-31'], freq='Q-DEC'), columns=['A', 'B'])
A:pandas.tests.resample.test_datetime_index.ts->Series(range(12), index=index)
A:pandas.tests.resample.test_datetime_index.grouper->Grouper(freq=Minute(5))
A:pandas.tests.resample.test_datetime_index.grouplist->numpy.ones_like(s)
A:pandas.tests.resample.test_datetime_index.expected.index->period_range('1990-01', '2000-01', freq='M')
A:pandas.tests.resample.test_datetime_index.data->numpy.arange(5, dtype=np.int64)
A:pandas.tests.resample.test_datetime_index.ind->date_range(start='2014-01-01', periods=len(data), freq='d')
A:pandas.tests.resample.test_datetime_index.df_standard->DataFrame(dict(A=ts, B=ts + 2)).resample('M').apply(fn)
A:pandas.tests.resample.test_datetime_index.df_lambda->DataFrame(dict(A=ts, B=ts + 2)).resample('M').apply(lambda x: str(type(x)))
A:pandas.tests.resample.test_datetime_index.df_partial->DataFrame(dict(A=ts, B=ts + 2)).resample('M').apply(partial(fn))
A:pandas.tests.resample.test_datetime_index.df_partial2->DataFrame(dict(A=ts, B=ts + 2)).resample('M').apply(partial(fn, a=2))
A:pandas.tests.resample.test_datetime_index.df_class->DataFrame(dict(A=ts, B=ts + 2)).resample('M').apply(FnClass())
A:pandas.tests.resample.test_datetime_index.dti->date_range('2013-09-30', '2013-11-02', freq='30Min', tz='Europe/Paris')
A:pandas.tests.resample.test_datetime_index.dates->date_range(tz.localize(dt), periods=4, freq='2H')
A:pandas.tests.resample.test_datetime_index.series->Series(1, index=dates)
A:pandas.tests.resample.test_datetime_index.result1->pandas.Series(0, index=pd.date_range('19910905 13:00', '19911005 07:00', freq=freq1)).resample(str(n1_) + freq1).mean()
A:pandas.tests.resample.test_datetime_index.result2->pandas.Series(0, index=pd.date_range('19910905 13:00', '19911005 07:00', freq=freq1)).resample(str(n2_) + freq2).mean()
A:pandas.tests.resample.test_datetime_index.rng->pandas.date_range('2012-06-12', periods=200, freq='h')
A:pandas.tests.resample.test_datetime_index.ser->Series(np.random.rand(len(dti)), dti)
A:pandas.tests.resample.test_datetime_index.business_day_offset->BDay()
A:pandas.tests.resample.test_datetime_index.index->date_range(start='2012-01-31', freq='M', periods=12)
A:pandas.tests.resample.test_datetime_index.a->pandas.Series(0, index=pd.date_range('19910905 13:00', '19911005 07:00', freq=freq1)).loc[:'4-15-2000'].resample('30T').ohlc()
A:pandas.tests.resample.test_datetime_index.res->df['timestamp'].resample('2D').first()
A:pandas.tests.resample.test_datetime_index.exp->Series([datetime(2016, 1, 15), pd.NaT, datetime(2016, 1, 19)], index=date_range('2016-01-15', periods=3, freq='2D'), name='timestamp')
A:pandas.tests.resample.test_datetime_index.exp.columns->pandas.MultiIndex.from_tuples([('a', 'c', 'open'), ('a', 'c', 'high'), ('a', 'c', 'low'), ('a', 'c', 'close'), ('b', 'd', 'open'), ('b', 'd', 'high'), ('b', 'd', 'low'), ('b', 'd', 'close')])
A:pandas.tests.resample.test_datetime_index.bs->pandas.Series(0, index=pd.date_range('19910905 13:00', '19911005 07:00', freq=freq1)).resample('B', closed='right', label='right').mean()
A:pandas.tests.resample.test_datetime_index.resampled->Series(range(12), index=index).resample('M').mean()
A:pandas.tests.resample.test_datetime_index.exp_rng->date_range('12/31/1999 23:57:00', '1/1/2000 01:57', freq='5min')
A:pandas.tests.resample.test_datetime_index.dt->datetime(2014, 10, 26)
A:pandas.tests.resample.test_datetime_index.exp_index->period_range('Jan-2000', 'Dec-2000', freq='M')
A:pandas.tests.resample.test_datetime_index.s2->Series(np.random.randint(0, 5, 50), index=pd.period_range('2012-01-01', freq='H', periods=50), dtype='float64')
A:pandas.tests.resample.test_datetime_index.indx->pandas.date_range(start=pd.to_datetime(start), periods=10, freq='100n')
A:pandas.tests.resample.test_datetime_index.exp_indx->pandas.date_range(start=pd.to_datetime(exp_start), periods=10, freq='100n')
A:pandas.tests.resample.test_datetime_index.ex_index->date_range('1999-12-31 23:55', periods=4, freq='5t')
A:pandas.tests.resample.test_datetime_index.foo_exp->Series(range(12), index=index).resample('M').mean()
A:pandas.tests.resample.test_datetime_index.bar_exp->Series(range(12), index=index).resample('M').std()
A:pandas.tests.resample.test_datetime_index.start->datetime(1999, 3, 1, 5)
A:pandas.tests.resample.test_datetime_index.end->datetime(2012, 7, 31, 4)
A:pandas.tests.resample.test_datetime_index.bad_ind->date_range(start, end, freq='30min')
A:pandas.tests.resample.test_datetime_index.i30->pandas.date_range('2002-02-02', periods=4, freq='30T')
A:pandas.tests.resample.test_datetime_index.i10->pandas.date_range(i30[0], i30[-1], freq='10T')
A:pandas.tests.resample.test_datetime_index.s10->pandas.Series(0, index=pd.date_range('19910905 13:00', '19911005 07:00', freq=freq1)).reindex(index=i10, method='bfill')
A:pandas.tests.resample.test_datetime_index.s10_2->pandas.Series(0, index=pd.date_range('19910905 13:00', '19911005 07:00', freq=freq1)).reindex(index=i10, method='bfill', limit=2)
A:pandas.tests.resample.test_datetime_index.rl->pandas.Series(0, index=pd.date_range('19910905 13:00', '19911005 07:00', freq=freq1)).reindex_like(s10, method='bfill', limit=2)
A:pandas.tests.resample.test_datetime_index.r10_2->pandas.Series(0, index=pd.date_range('19910905 13:00', '19911005 07:00', freq=freq1)).resample('10Min').bfill(limit=2)
A:pandas.tests.resample.test_datetime_index.r10->pandas.Series(0, index=pd.date_range('19910905 13:00', '19911005 07:00', freq=freq1)).resample('10Min').bfill()
A:pandas.tests.resample.test_datetime_index.exp_idx->pandas.DatetimeIndex(['2014-07-31', '2014-08-31', '2014-09-30', '2014-10-31', '2014-11-30'], freq='M', name='A')
A:pandas.tests.resample.test_datetime_index.df.columns->pandas.MultiIndex.from_arrays([df.columns.tolist()] * 2, names=['lev0', 'lev1'])
A:pandas.tests.resample.test_datetime_index.index2->pandas.date_range('4-15-2000', '5-15-2000', freq='h')
A:pandas.tests.resample.test_datetime_index.index3->date_range(start='2012-01-31', freq='M', periods=12).append(index2)
A:pandas.tests.resample.test_datetime_index.prng->numpy.random.RandomState(1234)
A:pandas.tests.resample.test_datetime_index.dr->date_range('2015-09-19', periods=n, freq='T')
A:pandas.tests.resample.test_datetime_index.left->Series(range(12), index=index).resample('7T').size()
A:pandas.tests.resample.test_datetime_index.ix->date_range(start=left.index.min(), end=ts.index.max(), freq='7T')
A:pandas.tests.resample.test_datetime_index.bins->numpy.searchsorted(ix.values, ts.index.values, side='right')
A:pandas.tests.resample.test_datetime_index.sorter->numpy.lexsort((vals, bins))
A:pandas.tests.resample.test_datetime_index.arr->numpy.bincount(bins[mask] - 1, minlength=len(ix)).astype('int64', copy=False)
A:pandas.tests.resample.test_datetime_index.right->Series(val, index=ix)
A:pandas.tests.resample.test_datetime_index.val->numpy.bincount(bins, minlength=len(ix) + 1)[1:].astype('int64', copy=False)
A:pandas.tests.resample.test_datetime_index.df1->DataFrame([1477786980, 1477790580], columns=['ts'])
A:pandas.tests.resample.test_datetime_index.dti1->DatetimeIndex(pd.to_datetime(df1.ts, unit='s').dt.tz_localize('UTC').dt.tz_convert('Europe/Madrid'))
A:pandas.tests.resample.test_datetime_index.df2->DataFrame([1477785600, 1477789200], columns=['ts'])
A:pandas.tests.resample.test_datetime_index.dti2->DatetimeIndex(pd.to_datetime(df2.ts, unit='s').dt.tz_localize('UTC').dt.tz_convert('Europe/Madrid'))
A:pandas.tests.resample.test_datetime_index.expected_index_values->pandas.date_range('2016-11-02', '2016-11-24', freq='d', tz='America/Chicago')
A:pandas.tests.resample.test_datetime_index.values->range(dti.size)
A:pandas.tests.resample.test_datetime_index.tz->pytz.timezone('Europe/Berlin')
A:pandas.tests.resample.test_datetime_index.frame->DataFrame([2, 3, 5, 7, 11], index=index)
A:pandas.tests.resample.test_datetime_index.index_1s->DatetimeIndex(['1970-01-01 00:00:00', '1970-01-01 00:00:01', '1970-01-01 00:00:02'])
A:pandas.tests.resample.test_datetime_index.frame_1s->DataFrame([3, 7, 11], index=index_1s)
A:pandas.tests.resample.test_datetime_index.index_2s->DatetimeIndex(['1970-01-01 00:00:00', '1970-01-01 00:00:02'])
A:pandas.tests.resample.test_datetime_index.frame_2s->DataFrame([5, 11], index=index_2s)
A:pandas.tests.resample.test_datetime_index.index_3s->DatetimeIndex(['1970-01-01 00:00:00'])
A:pandas.tests.resample.test_datetime_index.frame_3s->DataFrame([7], index=index_3s)
A:pandas.tests.resample.test_datetime_index.first->first.to_timestamp(first.freq).to_timestamp(first.freq)
A:pandas.tests.resample.test_datetime_index.last->last.to_timestamp(last.freq).to_timestamp(last.freq)
A:pandas.tests.resample.test_datetime_index.exp_first->pandas.Timestamp(exp_first, freq=offset)
A:pandas.tests.resample.test_datetime_index.exp_last->pandas.Timestamp(exp_last, freq=offset)
A:pandas.tests.resample.test_datetime_index.offset->pandas.tseries.frequencies.to_offset(offset)
pandas.tests.resample.test_datetime_index._index_factory()
pandas.tests.resample.test_datetime_index._index_freq()
pandas.tests.resample.test_datetime_index._static_values(index)
pandas.tests.resample.test_datetime_index.test_anchored_lowercase_buglet()
pandas.tests.resample.test_datetime_index.test_asfreq_non_unique()
pandas.tests.resample.test_datetime_index.test_corner_cases(simple_period_range_series,simple_date_range_series)
pandas.tests.resample.test_datetime_index.test_custom_grouper(index)
pandas.tests.resample.test_datetime_index.test_downsample_across_dst()
pandas.tests.resample.test_datetime_index.test_downsample_across_dst_weekly()
pandas.tests.resample.test_datetime_index.test_downsample_non_unique()
pandas.tests.resample.test_datetime_index.test_get_timestamp_range_edges(first,last,offset,exp_first,exp_last)
pandas.tests.resample.test_datetime_index.test_groupby_with_dst_time_change()
pandas.tests.resample.test_datetime_index.test_how_lambda_functions(simple_date_range_series)
pandas.tests.resample.test_datetime_index.test_monthly_resample_error()
pandas.tests.resample.test_datetime_index.test_nanosecond_resample_error()
pandas.tests.resample.test_datetime_index.test_nearest_upsample_with_limit()
pandas.tests.resample.test_datetime_index.test_numpy_compat(func)
pandas.tests.resample.test_datetime_index.test_ohlc_5min()
pandas.tests.resample.test_datetime_index.test_period_with_agg()
pandas.tests.resample.test_datetime_index.test_resample_across_dst()
pandas.tests.resample.test_datetime_index.test_resample_anchored_intraday(simple_date_range_series)
pandas.tests.resample.test_datetime_index.test_resample_anchored_monthstart(simple_date_range_series)
pandas.tests.resample.test_datetime_index.test_resample_anchored_multiday()
pandas.tests.resample.test_datetime_index.test_resample_anchored_ticks()
pandas.tests.resample.test_datetime_index.test_resample_apply_product()
pandas.tests.resample.test_datetime_index.test_resample_apply_with_additional_args(series)
pandas.tests.resample.test_datetime_index.test_resample_axis1()
pandas.tests.resample.test_datetime_index.test_resample_base()
pandas.tests.resample.test_datetime_index.test_resample_basic(series,closed,expected)
pandas.tests.resample.test_datetime_index.test_resample_basic_from_daily()
pandas.tests.resample.test_datetime_index.test_resample_basic_grouper(series)
pandas.tests.resample.test_datetime_index.test_resample_consistency()
pandas.tests.resample.test_datetime_index.test_resample_daily_anchored()
pandas.tests.resample.test_datetime_index.test_resample_datetime_values()
pandas.tests.resample.test_datetime_index.test_resample_dst_anchor()
pandas.tests.resample.test_datetime_index.test_resample_dtype_coercion()
pandas.tests.resample.test_datetime_index.test_resample_dtype_preservation()
pandas.tests.resample.test_datetime_index.test_resample_dup_index()
pandas.tests.resample.test_datetime_index.test_resample_equivalent_offsets(n1,freq1,n2,freq2,k)
pandas.tests.resample.test_datetime_index.test_resample_extra_index_point()
pandas.tests.resample.test_datetime_index.test_resample_float_base()
pandas.tests.resample.test_datetime_index.test_resample_frame_basic()
pandas.tests.resample.test_datetime_index.test_resample_group_info(n,k)
pandas.tests.resample.test_datetime_index.test_resample_how(series,downsample_method)
pandas.tests.resample.test_datetime_index.test_resample_how_callables()
pandas.tests.resample.test_datetime_index.test_resample_how_method()
pandas.tests.resample.test_datetime_index.test_resample_how_ohlc(series)
pandas.tests.resample.test_datetime_index.test_resample_integerarray()
pandas.tests.resample.test_datetime_index.test_resample_loffset(loffset)
pandas.tests.resample.test_datetime_index.test_resample_loffset_count()
pandas.tests.resample.test_datetime_index.test_resample_loffset_upsample()
pandas.tests.resample.test_datetime_index.test_resample_median_bug_1688()
pandas.tests.resample.test_datetime_index.test_resample_not_monotonic()
pandas.tests.resample.test_datetime_index.test_resample_nunique()
pandas.tests.resample.test_datetime_index.test_resample_nunique_preserves_column_level_names()
pandas.tests.resample.test_datetime_index.test_resample_nunique_with_date_gap()
pandas.tests.resample.test_datetime_index.test_resample_ohlc(series)
pandas.tests.resample.test_datetime_index.test_resample_ohlc_dataframe()
pandas.tests.resample.test_datetime_index.test_resample_ohlc_result()
pandas.tests.resample.test_datetime_index.test_resample_reresample()
pandas.tests.resample.test_datetime_index.test_resample_rounding()
pandas.tests.resample.test_datetime_index.test_resample_segfault()
pandas.tests.resample.test_datetime_index.test_resample_single_group()
pandas.tests.resample.test_datetime_index.test_resample_size()
pandas.tests.resample.test_datetime_index.test_resample_string_kwargs(series,keyword,value)
pandas.tests.resample.test_datetime_index.test_resample_timegrouper()
pandas.tests.resample.test_datetime_index.test_resample_timestamp_to_period(simple_date_range_series)
pandas.tests.resample.test_datetime_index.test_resample_to_period_monthly_buglet()
pandas.tests.resample.test_datetime_index.test_resample_unequal_times()
pandas.tests.resample.test_datetime_index.test_resample_upsample()
pandas.tests.resample.test_datetime_index.test_resample_upsampling_picked_but_not_correct()
pandas.tests.resample.test_datetime_index.test_resample_with_nat()
pandas.tests.resample.test_datetime_index.test_upsample_apply_functions()
pandas.tests.resample.test_datetime_index.test_upsample_with_limit()
pandas.tests.resample.test_datetime_index.test_weekly_resample_buglet()
pandas.tests.resample.test_dt_index._index_factory()
pandas.tests.resample.test_dt_index._index_freq()
pandas.tests.resample.test_dt_index._static_values(index)
pandas.tests.resample.test_dt_index.test_anchored_lowercase_buglet()
pandas.tests.resample.test_dt_index.test_asfreq_non_unique()
pandas.tests.resample.test_dt_index.test_corner_cases(simple_period_range_series,simple_date_range_series)
pandas.tests.resample.test_dt_index.test_custom_grouper(index)
pandas.tests.resample.test_dt_index.test_downsample_across_dst()
pandas.tests.resample.test_dt_index.test_downsample_across_dst_weekly()
pandas.tests.resample.test_dt_index.test_downsample_non_unique()
pandas.tests.resample.test_dt_index.test_get_timestamp_range_edges(first,last,offset,exp_first,exp_last)
pandas.tests.resample.test_dt_index.test_groupby_with_dst_time_change()
pandas.tests.resample.test_dt_index.test_how_lambda_functions(simple_date_range_series)
pandas.tests.resample.test_dt_index.test_monthly_resample_error()
pandas.tests.resample.test_dt_index.test_nanosecond_resample_error()
pandas.tests.resample.test_dt_index.test_nearest_upsample_with_limit()
pandas.tests.resample.test_dt_index.test_numpy_compat(func)
pandas.tests.resample.test_dt_index.test_ohlc_5min()
pandas.tests.resample.test_dt_index.test_period_with_agg()
pandas.tests.resample.test_dt_index.test_resample_across_dst()
pandas.tests.resample.test_dt_index.test_resample_anchored_intraday(simple_date_range_series)
pandas.tests.resample.test_dt_index.test_resample_anchored_monthstart(simple_date_range_series)
pandas.tests.resample.test_dt_index.test_resample_anchored_multiday()
pandas.tests.resample.test_dt_index.test_resample_anchored_ticks()
pandas.tests.resample.test_dt_index.test_resample_apply_product()
pandas.tests.resample.test_dt_index.test_resample_apply_with_additional_args(series)
pandas.tests.resample.test_dt_index.test_resample_axis1()
pandas.tests.resample.test_dt_index.test_resample_base()
pandas.tests.resample.test_dt_index.test_resample_basic(series,closed,expected)
pandas.tests.resample.test_dt_index.test_resample_basic_from_daily()
pandas.tests.resample.test_dt_index.test_resample_basic_grouper(series)
pandas.tests.resample.test_dt_index.test_resample_consistency()
pandas.tests.resample.test_dt_index.test_resample_daily_anchored()
pandas.tests.resample.test_dt_index.test_resample_dst_anchor()
pandas.tests.resample.test_dt_index.test_resample_dt_values()
pandas.tests.resample.test_dt_index.test_resample_dtype_coercion()
pandas.tests.resample.test_dt_index.test_resample_dtype_preservation()
pandas.tests.resample.test_dt_index.test_resample_dup_index()
pandas.tests.resample.test_dt_index.test_resample_equivalent_offsets(n1,freq1,n2,freq2,k)
pandas.tests.resample.test_dt_index.test_resample_extra_index_point()
pandas.tests.resample.test_dt_index.test_resample_float_base()
pandas.tests.resample.test_dt_index.test_resample_frame_basic()
pandas.tests.resample.test_dt_index.test_resample_group_info(n,k)
pandas.tests.resample.test_dt_index.test_resample_how(series,downsample_method)
pandas.tests.resample.test_dt_index.test_resample_how_callables()
pandas.tests.resample.test_dt_index.test_resample_how_method()
pandas.tests.resample.test_dt_index.test_resample_how_ohlc(series)
pandas.tests.resample.test_dt_index.test_resample_integerarray()
pandas.tests.resample.test_dt_index.test_resample_loffset(loffset)
pandas.tests.resample.test_dt_index.test_resample_loffset_count()
pandas.tests.resample.test_dt_index.test_resample_loffset_upsample()
pandas.tests.resample.test_dt_index.test_resample_median_bug_1688()
pandas.tests.resample.test_dt_index.test_resample_not_monotonic()
pandas.tests.resample.test_dt_index.test_resample_nunique()
pandas.tests.resample.test_dt_index.test_resample_nunique_preserves_column_level_names()
pandas.tests.resample.test_dt_index.test_resample_nunique_with_date_gap()
pandas.tests.resample.test_dt_index.test_resample_ohlc(series)
pandas.tests.resample.test_dt_index.test_resample_ohlc_dataframe()
pandas.tests.resample.test_dt_index.test_resample_ohlc_result()
pandas.tests.resample.test_dt_index.test_resample_reresample()
pandas.tests.resample.test_dt_index.test_resample_rounding()
pandas.tests.resample.test_dt_index.test_resample_segfault()
pandas.tests.resample.test_dt_index.test_resample_single_group()
pandas.tests.resample.test_dt_index.test_resample_size()
pandas.tests.resample.test_dt_index.test_resample_string_kwargs(series,keyword,value)
pandas.tests.resample.test_dt_index.test_resample_timegrouper()
pandas.tests.resample.test_dt_index.test_resample_timestamp_to_period(simple_date_range_series)
pandas.tests.resample.test_dt_index.test_resample_to_period_monthly_buglet()
pandas.tests.resample.test_dt_index.test_resample_unequal_times()
pandas.tests.resample.test_dt_index.test_resample_upsample()
pandas.tests.resample.test_dt_index.test_resample_upsampling_picked_but_not_correct()
pandas.tests.resample.test_dt_index.test_resample_with_nat()
pandas.tests.resample.test_dt_index.test_upsample_apply_functions()
pandas.tests.resample.test_dt_index.test_upsample_with_limit()
pandas.tests.resample.test_dt_index.test_weekly_resample_buglet()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/resample/conftest.py----------------------------------------
A:pandas.tests.resample.conftest.rng->period_range(start, end, freq=freq)
pandas.tests.resample.conftest._index_end()
pandas.tests.resample.conftest._index_freq()
pandas.tests.resample.conftest._index_name()
pandas.tests.resample.conftest._index_start()
pandas.tests.resample.conftest._series_name()
pandas.tests.resample.conftest._static_values(index)
pandas.tests.resample.conftest.downsample_method(request)
pandas.tests.resample.conftest.empty_frame(series)
pandas.tests.resample.conftest.empty_series(series)
pandas.tests.resample.conftest.frame(index,_series_name,_static_values)
pandas.tests.resample.conftest.index(_index_factory,_index_start,_index_end,_index_freq,_index_name)
pandas.tests.resample.conftest.resample_method(request)
pandas.tests.resample.conftest.series(index,_series_name,_static_values)
pandas.tests.resample.conftest.series_and_frame(request,series,frame)
pandas.tests.resample.conftest.simple_date_range_series()
pandas.tests.resample.conftest.simple_period_range_series()
pandas.tests.resample.conftest.upsample_method(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/resample/test_time_grouper.py----------------------------------------
A:pandas.tests.resample.test_time_grouper.test_series->Series(np.random.randn(1000), index=date_range('1/1/2000', periods=1000))
A:pandas.tests.resample.test_time_grouper.grouper->Grouper(freq='A', label='right', closed='right')
A:pandas.tests.resample.test_time_grouper.grouped->DataFrame(data, columns=['A', 'B', 'C', 'D']).groupby(Grouper(key='key', freq='D'))
A:pandas.tests.resample.test_time_grouper.applied->DataFrame(data, columns=['A', 'B', 'C', 'D']).groupby(Grouper(key='key', freq='D')).apply(f)
A:pandas.tests.resample.test_time_grouper.expected->pandas.Series(expected_values, index=index)
A:pandas.tests.resample.test_time_grouper.applied.index->DataFrame(data, columns=['A', 'B', 'C', 'D']).groupby(Grouper(key='key', freq='D')).apply(f).index.droplevel(0)
A:pandas.tests.resample.test_time_grouper.expected.index->date_range(start='2013-01-01', freq='D', periods=5, name='key')
A:pandas.tests.resample.test_time_grouper.result->methodcaller(method, **method_args)(resampled)
A:pandas.tests.resample.test_time_grouper.ind->pandas.date_range(start='2000-01-01', freq='D', periods=N)
A:pandas.tests.resample.test_time_grouper.df->DataFrame(data, columns=['A', 'B', 'C', 'D'])
A:pandas.tests.resample.test_time_grouper.tg->Grouper(freq='M')
A:pandas.tests.resample.test_time_grouper.(_, grouper, _)->Grouper(freq='M')._get_grouper(df)
A:pandas.tests.resample.test_time_grouper.index->pandas.to_datetime(['2017-01-01T00:00:00', '2017-01-01T00:30:00', '2017-01-01T01:00:00'])
A:pandas.tests.resample.test_time_grouper.data->numpy.random.randn(n, 4).astype('int64')
A:pandas.tests.resample.test_time_grouper.normal_df->DataFrame(data, columns=['A', 'B', 'C', 'D'])
A:pandas.tests.resample.test_time_grouper.dt_df->DataFrame(data, columns=['A', 'B', 'C', 'D'])
A:pandas.tests.resample.test_time_grouper.normal_grouped->DataFrame(data, columns=['A', 'B', 'C', 'D']).groupby('key')
A:pandas.tests.resample.test_time_grouper.dt_grouped->DataFrame(data, columns=['A', 'B', 'C', 'D']).groupby(Grouper(key='key', freq='D'))
A:pandas.tests.resample.test_time_grouper.dt_result->DataFrame(data, columns=['A', 'B', 'C', 'D']).groupby(Grouper(key='key', freq='D')).size()
A:pandas.tests.resample.test_time_grouper.s->pandas.Series(1, index=pd.date_range('2017', periods=2, freq='H'))
A:pandas.tests.resample.test_time_grouper.normal_result->DataFrame(data, columns=['A', 'B', 'C', 'D']).groupby('key').size()
A:pandas.tests.resample.test_time_grouper.pad->Series([0], index=[3])
A:pandas.tests.resample.test_time_grouper.resampled->pandas.Series(1, index=pd.date_range('2017', periods=2, freq='H')).resample('30T')
pandas.tests.resample.test_time_grouper.test_aaa_group_order()
pandas.tests.resample.test_time_grouper.test_aggregate_normal(resample_method)
pandas.tests.resample.test_time_grouper.test_aggregate_with_nat(func,fill_value)
pandas.tests.resample.test_time_grouper.test_aggregate_with_nat_size()
pandas.tests.resample.test_time_grouper.test_apply()
pandas.tests.resample.test_time_grouper.test_apply_iteration()
pandas.tests.resample.test_time_grouper.test_count()
pandas.tests.resample.test_time_grouper.test_fails_on_no_datetime_index(name,func)
pandas.tests.resample.test_time_grouper.test_fails_on_no_dt_index(name,func)
pandas.tests.resample.test_time_grouper.test_numpy_reduction()
pandas.tests.resample.test_time_grouper.test_repr()
pandas.tests.resample.test_time_grouper.test_resample_entirly_nat_window(method,method_args,unit)
pandas.tests.resample.test_time_grouper.test_upsample_sum(method,method_args,expected_values)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/resample/test_resampler_grouper.py----------------------------------------
A:pandas.tests.resample.test_resampler_grouper.test_frame->DataFrame({'A': [1] * 20 + [2] * 12 + [3] * 8, 'B': np.arange(40)}, index=date_range('1/1/2000', freq='s', periods=40))
A:pandas.tests.resample.test_resampler_grouper.code->dedent('    import pandas._testing as tm\n    s = tm.makeTimeSeries()\n    rs = s.resample("D")\n    ')
A:pandas.tests.resample.test_resampler_grouper.warning->pandas._testing.assert_produces_warning(DeprecationWarning, check_stacklevel=False)
A:pandas.tests.resample.test_resampler_grouper.df->DataFrame(np.random.randn(20, 3), columns=list('aaa'), index=pd.date_range('2012-01-01', periods=20, freq='s'))
A:pandas.tests.resample.test_resampler_grouper.df.date->pandas.to_datetime(df.date)
A:pandas.tests.resample.test_resampler_grouper.expected->df.copy().resample('5s').median()
A:pandas.tests.resample.test_resampler_grouper.result->DataFrame(np.random.randn(20, 3), columns=list('aaa'), index=pd.date_range('2012-01-01', periods=20, freq='s')).resample('5s').median()
A:pandas.tests.resample.test_resampler_grouper.g->DataFrame({'A': [1] * 20 + [2] * 12 + [3] * 8, 'B': np.arange(40)}, index=date_range('1/1/2000', freq='s', periods=40)).groupby('A')
A:pandas.tests.resample.test_resampler_grouper.r->DataFrame({'A': [1] * 20 + [2] * 12 + [3] * 8, 'B': np.arange(40)}, index=date_range('1/1/2000', freq='s', periods=40)).groupby('A').resample('2s')
A:pandas.tests.resample.test_resampler_grouper.exp->DataFrame(np.random.randn(20, 3), columns=list('aaa'), index=pd.date_range('2012-01-01', periods=20, freq='s')).set_index('date').groupby('id').resample('2D')['data'].sum()
A:pandas.tests.resample.test_resampler_grouper.index->date_range('2000-01-01', freq='2D', periods=5)
A:pandas.tests.resample.test_resampler_grouper.s->Series([1, 2], index=['a', 'b'])
A:pandas.tests.resample.test_resampler_grouper.mindex->pandas.MultiIndex.from_arrays(mi, names=['col0', None])
A:pandas.tests.resample.test_resampler_grouper.df2->DataFrame(np.random.randn(20, 3), columns=list('aaa'), index=pd.date_range('2012-01-01', periods=20, freq='s')).copy()
pandas.tests.resample.test_resampler_grouper.test_apply()
pandas.tests.resample.test_resampler_grouper.test_apply_with_mutated_index()
pandas.tests.resample.test_resampler_grouper.test_consistency_with_window()
pandas.tests.resample.test_resampler_grouper.test_deferred_with_groupby()
pandas.tests.resample.test_resampler_grouper.test_getitem()
pandas.tests.resample.test_resampler_grouper.test_getitem_multiple()
pandas.tests.resample.test_resampler_grouper.test_groupby_resample_on_api_with_getitem()
pandas.tests.resample.test_resampler_grouper.test_median_duplicate_columns()
pandas.tests.resample.test_resampler_grouper.test_methods()
pandas.tests.resample.test_resampler_grouper.test_nearest()
pandas.tests.resample.test_resampler_grouper.test_resample_groupby_with_label()
pandas.tests.resample.test_resampler_grouper.test_tab_complete_ipython6_warning(ip)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/internals/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/internals/test_internals.py----------------------------------------
A:pandas.tests.internals.test_internals.arr->pandas.arrays.PandasArray(np.array([1, 2]))
A:pandas.tests.internals.test_internals.placement->slice(2)
A:pandas.tests.internals.test_internals.num_items->len(placement)
A:pandas.tests.internals.test_internals.mat->create_single_mgr('f8', num_rows=5).as_array()
A:pandas.tests.internals.test_internals.values->numpy.array([1.0, 2.0])
A:pandas.tests.internals.test_internals.m->re.search('M8\\[ns,\\s*(\\w+\\/?\\w*)\\]', typestr)
A:pandas.tests.internals.test_internals.block_placements->OrderedDict()
A:pandas.tests.internals.test_internals.d->d.strip().strip()
A:pandas.tests.internals.test_internals.blockstr->blockstr.strip().strip()
A:pandas.tests.internals.test_internals.names->names.strip().split(',').strip().split(',')
A:pandas.tests.internals.test_internals.mgr_items->Index(mgr_items)
A:pandas.tests.internals.test_internals.self.fblock->create_block('float', [0, 2, 4])
A:pandas.tests.internals.test_internals.self.cblock->create_block('complex', [7])
A:pandas.tests.internals.test_internals.self.oblock->create_block('object', [1, 3])
A:pandas.tests.internals.test_internals.self.bool_block->create_block('bool', [5])
A:pandas.tests.internals.test_internals.self.int_block->create_block('int', [6])
A:pandas.tests.internals.test_internals.int32block->create_block('i4', [0])
A:pandas.tests.internals.test_internals.avals->pandas._testing.randn(2, 10)
A:pandas.tests.internals.test_internals.bvals->pandas._testing.randn(2, 10)
A:pandas.tests.internals.test_internals.ref_cols->Index(['e', 'a', 'b', 'd', 'f'])
A:pandas.tests.internals.test_internals.ablock->make_block(avals, ref_cols.get_indexer(['e', 'b']))
A:pandas.tests.internals.test_internals.bblock->make_block(bvals, ref_cols.get_indexer(['a', 'd']))
A:pandas.tests.internals.test_internals.merged->make_block(avals, ref_cols.get_indexer(['e', 'b'])).merge(bblock)
A:pandas.tests.internals.test_internals.cop->self.fblock.copy()
A:pandas.tests.internals.test_internals.newb->self.fblock.copy()
A:pandas.tests.internals.test_internals.block->make_block(values=values.copy(), placement=np.arange(3))
A:pandas.tests.internals.test_internals.val->date(2010, 10, 10)
A:pandas.tests.internals.test_internals.mgr->create_single_mgr('f8', num_rows=5)
A:pandas.tests.internals.test_internals.tmp_mgr->create_mgr('a:bool; a: f8')
A:pandas.tests.internals.test_internals.blocks[0].mgr_locs->numpy.array([0])
A:pandas.tests.internals.test_internals.blocks[1].mgr_locs->numpy.array([1])
A:pandas.tests.internals.test_internals.mgr2->create_single_mgr('f8', num_rows=5).consolidate()
A:pandas.tests.internals.test_internals.smgr->create_single_mgr('category')
A:pandas.tests.internals.test_internals.smgr2->pandas._testing.round_trip_pickle(smgr)
A:pandas.tests.internals.test_internals.cols->pandas.MultiIndex.from_tuples([('1st', 'a'), ('2nd', 'b'), ('3rd', 'c')])
A:pandas.tests.internals.test_internals.df->DataFrame({'a': [1]})
A:pandas.tests.internals.test_internals.blocks->DataFrame({'a': [1]})._to_dict_of_blocks()
A:pandas.tests.internals.test_internals.cp->create_single_mgr('f8', num_rows=5).copy(deep=True)
A:pandas.tests.internals.test_internals.t->numpy.dtype(t)
A:pandas.tests.internals.test_internals.tmgr->create_single_mgr('f8', num_rows=5).astype(t, errors='ignore')
A:pandas.tests.internals.test_internals.old_blocks->set(old_mgr.blocks)
A:pandas.tests.internals.test_internals.new_blocks->set(new_mgr.blocks)
A:pandas.tests.internals.test_internals.new_mgr->create_single_mgr('f8', num_rows=5).convert(numeric=True)
A:pandas.tests.internals.test_internals.df_unique->DataFrame({'a': [1]}).copy()
A:pandas.tests.internals.test_internals.cons->create_single_mgr('f8', num_rows=5).consolidate().get_numeric_data()
A:pandas.tests.internals.test_internals.reindexed->create_single_mgr('f8', num_rows=5).reindex_indexer(new_labels, indexer, axis, fill_value=fill_value)
A:pandas.tests.internals.test_internals.numeric->create_single_mgr('f8', num_rows=5).get_numeric_data()
A:pandas.tests.internals.test_internals.numeric2->create_single_mgr('f8', num_rows=5).get_numeric_data(copy=True)
A:pandas.tests.internals.test_internals.bools->create_single_mgr('f8', num_rows=5).get_bool_data()
A:pandas.tests.internals.test_internals.bools2->create_single_mgr('f8', num_rows=5).get_bool_data(copy=True)
A:pandas.tests.internals.test_internals.bm1->create_mgr('a,b,c: i8-1; d,e,f: i8-2')
A:pandas.tests.internals.test_internals.bm2->BlockManager(bm1.blocks[::-1], bm1.axes)
A:pandas.tests.internals.test_internals.bm->create_mgr(mgr_string)
A:pandas.tests.internals.test_internals.block_perms->itertools.permutations(bm.blocks)
A:pandas.tests.internals.test_internals.bm_this->BlockManager(bm_perm, bm.axes)
A:pandas.tests.internals.test_internals.slobj->numpy.concatenate([slobj, np.zeros(len(ax) - len(slobj), dtype=bool)])
A:pandas.tests.internals.test_internals.sliced->create_single_mgr('f8', num_rows=5).get_slice(slobj, axis=axis)
A:pandas.tests.internals.test_internals.taken->create_single_mgr('f8', num_rows=5).take(indexer, axis)
A:pandas.tests.internals.test_internals.indexer->create_single_mgr('f8', num_rows=5).axes[axis].get_indexer_for(new_labels)
A:pandas.tests.internals.test_internals.reindexed_mat->pandas.core.algorithms.take_nd(mat, indexer, axis, fill_value=fill_value)
A:pandas.tests.internals.test_internals.bpl->BlockPlacement(slice(0, 5))
A:pandas.tests.internals.test_internals.self.dtype->numpy.dtype(dtype)
A:pandas.tests.internals.test_internals.e->DummyElement(value, dtype)
A:pandas.tests.internals.test_internals.s->pandas.DataFrame({'A': [e.value, e.value]}, dtype=e.dtype)
A:pandas.tests.internals.test_internals.blk->create_block(typestr, [1])
A:pandas.tests.internals.test_internals.idx->pandas.Index([0, 1, 2, 3, 4])
A:pandas.tests.internals.test_internals.a->pandas.Series([1, 2, 3]).reindex(idx)
A:pandas.tests.internals.test_internals.b->pandas.Series(pd.Categorical([1, 2, 3])).reindex(idx)
A:pandas.tests.internals.test_internals.result->make_block(arr.to_numpy(), slice(len(arr)), dtype=arr.dtype)
A:pandas.tests.internals.test_internals.df1->pandas.DataFrame({'a': [1, 2], 'b': ['s', 'd']})
A:pandas.tests.internals.test_internals.df2->pandas.DataFrame({'a': ['s', 'd'], 'b': [1, 2]})
pandas.tests.internals.test_internals.DummyElement(self,value,dtype)
pandas.tests.internals.test_internals.DummyElement.__array__(self)
pandas.tests.internals.test_internals.DummyElement.__init__(self,value,dtype)
pandas.tests.internals.test_internals.DummyElement.__repr__(self)->str
pandas.tests.internals.test_internals.DummyElement.__str__(self)->str
pandas.tests.internals.test_internals.DummyElement.any(self,axis=None)
pandas.tests.internals.test_internals.DummyElement.astype(self,dtype,copy=False)
pandas.tests.internals.test_internals.DummyElement.view(self,dtype)
pandas.tests.internals.test_internals.TestBlock
pandas.tests.internals.test_internals.TestBlock.setup_method(self,method)
pandas.tests.internals.test_internals.TestBlock.test_attrs(self)
pandas.tests.internals.test_internals.TestBlock.test_constructor(self)
pandas.tests.internals.test_internals.TestBlock.test_copy(self)
pandas.tests.internals.test_internals.TestBlock.test_delete(self)
pandas.tests.internals.test_internals.TestBlock.test_insert(self)
pandas.tests.internals.test_internals.TestBlock.test_merge(self)
pandas.tests.internals.test_internals.TestBlock.test_mgr_locs(self)
pandas.tests.internals.test_internals.TestBlock.test_pickle(self)
pandas.tests.internals.test_internals.TestBlock.test_reindex_cast(self)
pandas.tests.internals.test_internals.TestBlock.test_reindex_index(self)
pandas.tests.internals.test_internals.TestBlockManager
pandas.tests.internals.test_internals.TestBlockManager.test_as_array_datetime(self)
pandas.tests.internals.test_internals.TestBlockManager.test_as_array_datetime_tz(self)
pandas.tests.internals.test_internals.TestBlockManager.test_as_array_dt(self)
pandas.tests.internals.test_internals.TestBlockManager.test_as_array_dt_tz(self)
pandas.tests.internals.test_internals.TestBlockManager.test_as_array_float(self)
pandas.tests.internals.test_internals.TestBlockManager.test_as_array_int_bool(self)
pandas.tests.internals.test_internals.TestBlockManager.test_astype(self,t)
pandas.tests.internals.test_internals.TestBlockManager.test_attrs(self)
pandas.tests.internals.test_internals.TestBlockManager.test_categorical_block_pickle(self)
pandas.tests.internals.test_internals.TestBlockManager.test_consolidate(self)
pandas.tests.internals.test_internals.TestBlockManager.test_consolidate_ordering_issues(self,mgr)
pandas.tests.internals.test_internals.TestBlockManager.test_constructor_corner(self)
pandas.tests.internals.test_internals.TestBlockManager.test_contains(self,mgr)
pandas.tests.internals.test_internals.TestBlockManager.test_convert(self)
pandas.tests.internals.test_internals.TestBlockManager.test_copy(self,mgr)
pandas.tests.internals.test_internals.TestBlockManager.test_duplicate_ref_loc_failure(self)
pandas.tests.internals.test_internals.TestBlockManager.test_equals(self)
pandas.tests.internals.test_internals.TestBlockManager.test_equals_block_order_different_dtypes(self)
pandas.tests.internals.test_internals.TestBlockManager.test_get(self)
pandas.tests.internals.test_internals.TestBlockManager.test_get_bool_data(self)
pandas.tests.internals.test_internals.TestBlockManager.test_get_numeric_data(self)
pandas.tests.internals.test_internals.TestBlockManager.test_interleave(self)
pandas.tests.internals.test_internals.TestBlockManager.test_interleave_non_unique_cols(self)
pandas.tests.internals.test_internals.TestBlockManager.test_is_mixed_dtype(self)
pandas.tests.internals.test_internals.TestBlockManager.test_missing_unicode_key(self)
pandas.tests.internals.test_internals.TestBlockManager.test_non_unique_pickle(self)
pandas.tests.internals.test_internals.TestBlockManager.test_pickle(self,mgr)
pandas.tests.internals.test_internals.TestBlockManager.test_reindex_index(self)
pandas.tests.internals.test_internals.TestBlockManager.test_reindex_items(self)
pandas.tests.internals.test_internals.TestBlockManager.test_set(self)
pandas.tests.internals.test_internals.TestBlockManager.test_set_change_dtype(self,mgr)
pandas.tests.internals.test_internals.TestBlockManager.test_set_change_dtype_slice(self)
pandas.tests.internals.test_internals.TestBlockManager.test_single_mgr_ctor(self)
pandas.tests.internals.test_internals.TestBlockManager.test_sparse(self)
pandas.tests.internals.test_internals.TestBlockManager.test_sparse_mixed(self)
pandas.tests.internals.test_internals.TestBlockManager.test_unicode_repr_doesnt_raise(self)
pandas.tests.internals.test_internals.TestBlockManager.test_validate_bool_args(self)
pandas.tests.internals.test_internals.TestBlockPlacement
pandas.tests.internals.test_internals.TestBlockPlacement.test_array_to_slice_conversion(self)
pandas.tests.internals.test_internals.TestBlockPlacement.test_blockplacement_add(self)
pandas.tests.internals.test_internals.TestBlockPlacement.test_blockplacement_add_int(self)
pandas.tests.internals.test_internals.TestBlockPlacement.test_not_slice_like_arrays(self)
pandas.tests.internals.test_internals.TestBlockPlacement.test_not_slice_like_slices(self)
pandas.tests.internals.test_internals.TestBlockPlacement.test_slice_iter(self)
pandas.tests.internals.test_internals.TestBlockPlacement.test_slice_len(self)
pandas.tests.internals.test_internals.TestBlockPlacement.test_slice_to_array_conversion(self)
pandas.tests.internals.test_internals.TestBlockPlacement.test_unbounded_slice_raises(self)
pandas.tests.internals.test_internals.TestBlockPlacement.test_zero_step_raises(self)
pandas.tests.internals.test_internals.TestCanHoldElement
pandas.tests.internals.test_internals.TestCanHoldElement.test_binop_other(self,op,value,dtype)
pandas.tests.internals.test_internals.TestDatetimeBlock
pandas.tests.internals.test_internals.TestDatetimeBlock.test_can_hold_element(self)
pandas.tests.internals.test_internals.TestIndexing
pandas.tests.internals.test_internals.TestIndexing.test_get_slice(self)
pandas.tests.internals.test_internals.TestIndexing.test_reindex_axis(self)
pandas.tests.internals.test_internals.TestIndexing.test_reindex_indexer(self)
pandas.tests.internals.test_internals.TestIndexing.test_take(self)
pandas.tests.internals.test_internals.assert_block_equal(left,right)
pandas.tests.internals.test_internals.create_block(typestr,placement,item_shape=None,num_offset=0)
pandas.tests.internals.test_internals.create_mgr(descr,item_shape=None)
pandas.tests.internals.test_internals.create_single_mgr(typestr,num_rows=None)
pandas.tests.internals.test_internals.get_numeric_mat(shape)
pandas.tests.internals.test_internals.mgr()
pandas.tests.internals.test_internals.test_block_shape()
pandas.tests.internals.test_internals.test_dataframe_not_equal()
pandas.tests.internals.test_internals.test_holder(typestr,holder)
pandas.tests.internals.test_internals.test_make_block_no_pandas_array()
pandas.tests.internals.test_internals.test_validate_ndim()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/window/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/window/test_window.py----------------------------------------
A:pandas.tests.window.test_window.o->getattr(self, which)
A:pandas.tests.window.test_window.w->Window(Series([2, 4, 6]), window=[0, 2])
A:pandas.tests.window.test_window.df->pandas.DataFrame({'A': np.arange(5)})
A:pandas.tests.window.test_window.roll->pandas.DataFrame({'A': np.arange(5)}).rolling(2, win_type='triang')
pandas.tests.window.test_window.TestWindow(Base)
pandas.tests.window.test_window.TestWindow.setup_method(self,method)
pandas.tests.window.test_window.TestWindow.test_agg_function_support(self,arg)
pandas.tests.window.test_window.TestWindow.test_constructor(self,which)
pandas.tests.window.test_window.TestWindow.test_constructor_with_win_type(self,which,win_types)
pandas.tests.window.test_window.TestWindow.test_numpy_compat(self,method)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/window/test_rolling.py----------------------------------------
A:pandas.tests.window.test_rolling.df->pandas.DataFrame([0, 1, 2, 1, 0], columns=['a'])
A:pandas.tests.window.test_rolling.o->getattr(self, which)
A:pandas.tests.window.test_rolling.expected_data->numpy.append([0.0, 1.0], np.arange(3.0, 27.0, 3))
A:pandas.tests.window.test_rolling.result->constructor(values).rolling(3).count()
A:pandas.tests.window.test_rolling.expected->constructor(expected_counts)
A:pandas.tests.window.test_rolling.result_roll_sum->pandas.DataFrame([0, 1, 2, 1, 0], columns=['a']).rolling(window=window, min_periods=2).sum()
A:pandas.tests.window.test_rolling.result_roll_generic->pandas.DataFrame([0, 1, 2, 1, 0], columns=['a']).rolling(window=window, min_periods=2).apply(sum, raw=raw)
A:pandas.tests.window.test_rolling.r->Rolling(Series([2, 4, 6]), window=2)
A:pandas.tests.window.test_rolling.ser->pandas.Series(data=np.arange(10), index=pd.date_range('2000', periods=10))
A:pandas.tests.window.test_rolling.roll->pandas.Series(np.arange(3)).rolling(0)
A:pandas.tests.window.test_rolling.exp_idx->pandas.MultiIndex.from_arrays(arrays=[[1, 1, 2], ser.index], names=('A', None))
A:pandas.tests.window.test_rolling.x->pandas.Series([np.nan] * 4, index=pd.DatetimeIndex(['2017-01-01', '2017-01-04', '2017-01-06', '2017-01-07']))
A:pandas.tests.window.test_rolling.cols->pandas.MultiIndex.from_product([['A', 'B'], ['C', 'D', 'E']], names=['1', '2'])
A:pandas.tests.window.test_rolling.obj->klass([1, 2, 3, 4])
A:pandas.tests.window.test_rolling.axis->pandas.DataFrame([0, 1, 2, 1, 0], columns=['a'])._get_axis_number(axis_frame)
A:pandas.tests.window.test_rolling.arr->numpy.array([1, 3, np.nan, 3, 5])
A:pandas.tests.window.test_rolling.date_today->datetime.datetime.now()
A:pandas.tests.window.test_rolling.days->pandas.date_range(date_today, date_today + timedelta(365), freq='D')
A:pandas.tests.window.test_rolling.npr->numpy.random.RandomState(seed=421)
A:pandas.tests.window.test_rolling.data->numpy.random.RandomState(seed=421).randint(1, high=100, size=len(days))
pandas.tests.window.test_rolling.TestRolling(Base)
pandas.tests.window.test_rolling.TestRolling.setup_method(self,method)
pandas.tests.window.test_rolling.TestRolling.test_closed(self)
pandas.tests.window.test_rolling.TestRolling.test_closed_empty(self,closed,arithmetic_win_operators)
pandas.tests.window.test_rolling.TestRolling.test_closed_median_quantile(self,closed,expected)
pandas.tests.window.test_rolling.TestRolling.test_closed_min_max_datetime(self,input_dtype,func,closed,expected)
pandas.tests.window.test_rolling.TestRolling.test_closed_min_max_dt(self,input_dtype,func,closed,expected)
pandas.tests.window.test_rolling.TestRolling.test_closed_min_max_minp(self,func,closed,expected)
pandas.tests.window.test_rolling.TestRolling.test_closed_one_entry(self,func)
pandas.tests.window.test_rolling.TestRolling.test_closed_one_entry_groupby(self,func)
pandas.tests.window.test_rolling.TestRolling.test_closed_uneven(self)
pandas.tests.window.test_rolling.TestRolling.test_constructor(self,which)
pandas.tests.window.test_rolling.TestRolling.test_constructor_timedelta_window_and_minperiods(self,window,raw)
pandas.tests.window.test_rolling.TestRolling.test_constructor_with_timedelta_window(self,window)
pandas.tests.window.test_rolling.TestRolling.test_constructor_with_win_type(self,which)
pandas.tests.window.test_rolling.TestRolling.test_doc_string(self)
pandas.tests.window.test_rolling.TestRolling.test_empty_window_median_quantile(self)
pandas.tests.window.test_rolling.TestRolling.test_iter_raises(self,klass)
pandas.tests.window.test_rolling.TestRolling.test_missing_minp_zero(self)
pandas.tests.window.test_rolling.TestRolling.test_missing_minp_zero_variable(self)
pandas.tests.window.test_rolling.TestRolling.test_multi_index_names(self)
pandas.tests.window.test_rolling.TestRolling.test_numpy_compat(self,method)
pandas.tests.window.test_rolling.TestRolling.test_readonly_array(self)
pandas.tests.window.test_rolling.TestRolling.test_rolling_axis_count(self,axis_frame)
pandas.tests.window.test_rolling.TestRolling.test_rolling_axis_sum(self,axis_frame)
pandas.tests.window.test_rolling.TestRolling.test_rolling_datetime(self,axis_frame,tz_naive_fixture)
pandas.tests.window.test_rolling.TestRolling.test_rolling_dt(self,axis_frame,tz_naive_fixture)
pandas.tests.window.test_rolling.TestRolling.tests_empty_df_rolling(self,roller)
pandas.tests.window.test_rolling.test_min_periods1()
pandas.tests.window.test_rolling.test_rolling_count_default_min_periods_with_null_values(constructor)
pandas.tests.window.test_rolling.test_rolling_count_with_min_periods(constructor)
pandas.tests.window.test_rolling.test_rolling_window_as_string()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/window/test_apply.py----------------------------------------
A:pandas.tests.window.test_apply.vals->Series([1, 2, 3, 4])
A:pandas.tests.window.test_apply.result->df.groupby('gr')['a'].rolling(1).apply(foo, args=args_kwargs[0], kwargs=args_kwargs[1])
A:pandas.tests.window.test_apply.expected->Series([11.0, 12.0], index=midx, name='a')
A:pandas.tests.window.test_apply.df->DataFrame({'gr': [1, 1], 'a': [1, 2]})
A:pandas.tests.window.test_apply.s->Series([None, None, None])
A:pandas.tests.window.test_apply.er->DataFrame({'gr': [1, 1], 'a': [1, 2]}).rolling(window=1)
A:pandas.tests.window.test_apply.r->DataFrame({'gr': [1, 1], 'a': [1, 2]}).rolling(window='1s')
A:pandas.tests.window.test_apply.idx->Index(['gr', 'a'])
A:pandas.tests.window.test_apply.midx->pandas.MultiIndex.from_tuples([(1, 0), (1, 1)], names=['gr', None])
A:pandas.tests.window.test_apply.gb_rolling->DataFrame({'gr': [1, 1], 'a': [1, 2]}).groupby('gr')['a'].rolling(1)
pandas.tests.window.test_apply.test_all_apply(engine_and_raw)
pandas.tests.window.test_apply.test_invalid_engine()
pandas.tests.window.test_apply.test_invalid_engine_kwargs_cython()
pandas.tests.window.test_apply.test_invalid_kwargs_nopython()
pandas.tests.window.test_apply.test_invalid_raw_numba()
pandas.tests.window.test_apply.test_ragged_apply(engine_and_raw)
pandas.tests.window.test_apply.test_rolling_apply(engine_and_raw)
pandas.tests.window.test_apply.test_rolling_apply_args_kwargs(args_kwargs)
pandas.tests.window.test_apply.test_rolling_apply_invalid_raw(bad_raw)
pandas.tests.window.test_apply.test_rolling_apply_out_of_bounds(engine_and_raw)
pandas.tests.window.test_apply.test_rolling_apply_with_pandas_objects(window)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/window/test_timeseries_window.py----------------------------------------
A:pandas.tests.window.test_timeseries_window.self.regular->DataFrame({'A': date_range('20130101', periods=5, freq='s'), 'B': range(5)}).set_index('A')
A:pandas.tests.window.test_timeseries_window.self.ragged->DataFrame({'B': range(5)})
A:pandas.tests.window.test_timeseries_window.df->DataFrame({'column': range(6)}, index=MultiIndex.from_product([date_range('20190101', periods=3), range(2)], names=['date', 'seq']))
A:pandas.tests.window.test_timeseries_window.df['C']->date_range('20130101', periods=len(df))
A:pandas.tests.window.test_timeseries_window.non_monotonic_index->DataFrame({'column': range(6)}, index=MultiIndex.from_product([date_range('20190101', periods=3), range(2)], names=['date', 'seq'])).index.to_list()
A:pandas.tests.window.test_timeseries_window.expected->DataFrame({'column': [0.0, 1.0, 3.0, 6.0, 10.0, 15.0]}, index=df.index)
A:pandas.tests.window.test_timeseries_window.result->DataFrame({'column': range(6)}, index=MultiIndex.from_product([date_range('20190101', periods=3), range(2)], names=['date', 'seq'])).rolling('10d', on=df.index.get_level_values('date')).sum()
A:pandas.tests.window.test_timeseries_window.expected1->DataFrame({'A': [0.0, 1, 3, 3, 7], 'B': [0, 1, 3, np.nan, 4], 'C': df['C']}, columns=['A', 'C', 'B'])
A:pandas.tests.window.test_timeseries_window.df.index->date_range('20130101', periods=5, freq='2D')
A:pandas.tests.window.test_timeseries_window.dfp->DataFrame({'B': np.random.randn(N)}, index=date_range('20130101', periods=N, freq='s'))
A:pandas.tests.window.test_timeseries_window.index->date_range(start='2018-1-1 01:00:00', freq=f'1{freq}', periods=10)
A:pandas.tests.window.test_timeseries_window.s->Series(data=0, index=index)
A:pandas.tests.window.test_timeseries_window.er->DataFrame({'column': range(6)}, index=MultiIndex.from_product([date_range('20190101', periods=3), range(2)], names=['date', 'seq'])).rolling(window=1)
A:pandas.tests.window.test_timeseries_window.r->df.between_time('09:00', '16:00').rolling(window='5H')
A:pandas.tests.window.test_timeseries_window.dft->DataFrame({'column': range(6)}, index=MultiIndex.from_product([date_range('20190101', periods=3), range(2)], names=['date', 'seq'])).between_time('09:00', '16:00')
A:pandas.tests.window.test_timeseries_window.x->x.between_time('09:00', '16:00').between_time('09:00', '16:00')
A:pandas.tests.window.test_timeseries_window.df['date']->to_datetime(df['date'])
A:pandas.tests.window.test_timeseries_window.dates->date_range(start='2016-01-01 09:30:00', periods=20, freq='s')
A:pandas.tests.window.test_timeseries_window.df2->DataFrame({'column': range(6)}, index=MultiIndex.from_product([date_range('20190101', periods=3), range(2)], names=['date', 'seq'])).sort_values('B')
A:pandas.tests.window.test_timeseries_window.idx->date_range('2017-01-01', periods=24, freq='1h')
A:pandas.tests.window.test_timeseries_window.ss->Series(np.arange(len(idx)), index=idx)
A:pandas.tests.window.test_timeseries_window.expected2->Series(np.arange(len(idx)), index=idx).rolling(3, min_periods=1).cov()
pandas.tests.window.test_timeseries_window.TestRollingTS
pandas.tests.window.test_timeseries_window.TestRollingTS.setup_method(self,method)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_all(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_all2(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_basic_regular(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_closed(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_doc_string(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_frame_on(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_frame_on2(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_freqs_ops(self,freq,op,result_data)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_groupby_monotonic(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_min_periods(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_monotonic_on(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_non_monotonic(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_non_monotonic_on(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_on(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_perf_min(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_ragged_count(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_ragged_kurt(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_ragged_max(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_ragged_mean(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_ragged_median(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_ragged_min(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_ragged_quantile(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_ragged_skew(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_ragged_std(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_ragged_sum(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_ragged_var(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_regular_min(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_rolling_cov_offset(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_rolling_on_decreasing_index(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_rolling_on_empty(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_rolling_on_multi_index_level(self)
pandas.tests.window.test_timeseries_window.TestRollingTS.test_valid(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/window/test_numba.py----------------------------------------
A:pandas.tests.window.test_numba.f->numba.jit(f)
A:pandas.tests.window.test_numba.s->Series(range(10))
A:pandas.tests.window.test_numba.result->Series(range(10)).rolling(2).apply(func_1, engine='numba', engine_kwargs=engine_kwargs, raw=True)
A:pandas.tests.window.test_numba.expected->Series(range(10)).rolling(2).apply(func_1, engine='cython', raw=True)
A:pandas.tests.window.test_numba.func_1->numba.jit(func_1)
A:pandas.tests.window.test_numba.func_2->numba.jit(func_2)
A:pandas.tests.window.test_numba.roll->Series(range(10)).rolling(2)
pandas.tests.window.test_numba.TestApply
pandas.tests.window.test_numba.TestApply.test_cache(self,jit,nogil,parallel,nopython)
pandas.tests.window.test_numba.TestApply.test_numba_vs_cython(self,jit,nogil,parallel,nopython)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/window/test_ewm.py----------------------------------------
A:pandas.tests.window.test_ewm.df->DataFrame({'B': [0, 1, 2, np.nan, 4]})
A:pandas.tests.window.test_ewm.o->getattr(self, which)
A:pandas.tests.window.test_ewm.e->EWM(Series([2, 4, 6]), alpha=0.5)
pandas.tests.window.test_ewm.TestEWM(Base)
pandas.tests.window.test_ewm.TestEWM.setup_method(self,method)
pandas.tests.window.test_ewm.TestEWM.test_constructor(self,which)
pandas.tests.window.test_ewm.TestEWM.test_doc_string(self)
pandas.tests.window.test_ewm.TestEWM.test_numpy_compat(self,method)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/window/test_api.py----------------------------------------
A:pandas.tests.window.test_api.r->Series(np.random.randn(100)).rolling(window=10, min_periods=1, win_type='gaussian')
A:pandas.tests.window.test_api.df->pandas.DataFrame([['A', 10, 20], ['A', 20, 30], ['A', 30, 40], ['B', 10, 30], ['B', 30, 40], ['B', 40, 80], ['B', 80, 90]], columns=['stock', 'low', 'high'])
A:pandas.tests.window.test_api.g->pandas.DataFrame([['A', 10, 20], ['A', 20, 30], ['A', 30, 40], ['B', 10, 30], ['B', 30, 40], ['B', 40, 80], ['B', 80, 90]], columns=['stock', 'low', 'high']).rolling(window=5)
A:pandas.tests.window.test_api.result->f().agg(OrderedDict((('low', ['mean', 'max']), ('high', ['mean', 'min']))))
A:pandas.tests.window.test_api.expected->pandas.DataFrame(expected_vals, index=index, columns=columns)
A:pandas.tests.window.test_api.a_mean->r['A'].mean()
A:pandas.tests.window.test_api.a_std->r['A'].std()
A:pandas.tests.window.test_api.a_sum->r['A'].sum()
A:pandas.tests.window.test_api.b_mean->r['B'].mean()
A:pandas.tests.window.test_api.b_std->r['B'].std()
A:pandas.tests.window.test_api.expected.columns->pandas.MultiIndex.from_tuples([('ra', 'mean'), ('ra', 'std'), ('rb', 'mean'), ('rb', 'std')])
A:pandas.tests.window.test_api.rcustom->r['B'].apply(lambda x: np.std(x, ddof=1), raw=raw)
A:pandas.tests.window.test_api.s->Series(np.arange(100), name='foo')
A:pandas.tests.window.test_api.s2->Series(np.arange(100), name='foo').rolling(30).sum()
A:pandas.tests.window.test_api.s3->Series(np.arange(100), name='foo').rolling(20).sum()
A:pandas.tests.window.test_api.f->getattr(df.groupby('stock'), func)
A:pandas.tests.window.test_api.window->f()
A:pandas.tests.window.test_api.index->pandas.MultiIndex.from_tuples([('A', 0), ('A', 1), ('A', 2), ('B', 3), ('B', 4), ('B', 5), ('B', 6)], names=['stock', None])
A:pandas.tests.window.test_api.columns->pandas.MultiIndex.from_tuples([('low', 'mean'), ('low', 'max'), ('high', 'mean'), ('high', 'min')])
pandas.tests.window.test_api.TestApi(Base)
pandas.tests.window.test_api.TestApi.setup_method(self,method)
pandas.tests.window.test_api.TestApi.test_agg(self)
pandas.tests.window.test_api.TestApi.test_agg_apply(self,raw)
pandas.tests.window.test_api.TestApi.test_agg_consistency(self)
pandas.tests.window.test_api.TestApi.test_agg_nested_dicts(self)
pandas.tests.window.test_api.TestApi.test_attribute_access(self)
pandas.tests.window.test_api.TestApi.test_count_nonnumeric_types(self)
pandas.tests.window.test_api.TestApi.test_getitem(self)
pandas.tests.window.test_api.TestApi.test_multiple_agg_funcs(self,func,window_size,expected_vals)
pandas.tests.window.test_api.TestApi.test_preserve_metadata(self)
pandas.tests.window.test_api.TestApi.test_select_bad_cols(self)
pandas.tests.window.test_api.TestApi.test_skip_sum_object_raises(self)
pandas.tests.window.test_api.TestApi.test_window_with_args(self)
pandas.tests.window.test_api.TestApi.tests_skip_nuisance(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/window/common.py----------------------------------------
A:pandas.tests.window.common._nan_locs->numpy.arange(20, 40)
A:pandas.tests.window.common._inf_locs->numpy.array([])
A:pandas.tests.window.common.arr->randn(N)
A:pandas.tests.window.common.self.rng->bdate_range(datetime(2009, 1, 1), periods=N)
A:pandas.tests.window.common.self.series->Series(arr.copy(), index=self.rng)
A:pandas.tests.window.common.self.frame->DataFrame(randn(N, K), index=self.rng, columns=np.arange(K))
A:pandas.tests.window.common.values->x.values.ravel()
A:pandas.tests.window.common._consistency_data->_create_consistency_data()
A:pandas.tests.window.common.mean_x->mean(x)
A:pandas.tests.window.common.expected->get_result(self.frame[1], self.frame[5])
A:pandas.tests.window.common.count_x->count(x)
A:pandas.tests.window.common.corr_x_x->corr(x, x)
A:pandas.tests.window.common.var_unbiased_x->var_unbiased(x)
A:pandas.tests.window.common.var_biased_x->var_biased(x)
A:pandas.tests.window.common.var_debiasing_factors_x->var_debiasing_factors(x)
A:pandas.tests.window.common.var_x->var(x)
A:pandas.tests.window.common.std_x->std(x)
A:pandas.tests.window.common.cov_x_x->cov(x, x)
A:pandas.tests.window.common.mean_x2->mean(x * x)
A:pandas.tests.window.common.corr_x_y->corr(x, y)
A:pandas.tests.window.common.corr_y_x->corr(y, x)
A:pandas.tests.window.common.cov_x_y->cov(x, y)
A:pandas.tests.window.common.cov_y_x->cov(y, x)
A:pandas.tests.window.common.var_x_plus_y->var(x + y)
A:pandas.tests.window.common.var_y->var(y)
A:pandas.tests.window.common.std_y->std(y)
A:pandas.tests.window.common.mean_y->mean(y)
A:pandas.tests.window.common.mean_x_times_y->mean(x * y)
A:pandas.tests.window.common.result->ew_func(Series([1.0]), Series([1.0]), 50, name=name, min_periods=min_periods)
A:pandas.tests.window.common.result.index->ew_func(Series([1.0]), Series([1.0]), 50, name=name, min_periods=min_periods).index.droplevel(1)
A:pandas.tests.window.common.empty->Series([], dtype=np.float64)
pandas.tests.window.common.Base
pandas.tests.window.common.Base._create_data(self)
pandas.tests.window.common.ConsistencyBase(Base)
pandas.tests.window.common.ConsistencyBase._check_pairwise_moment(self,dispatch,name,**kwargs)
pandas.tests.window.common.ConsistencyBase._create_data(self)
pandas.tests.window.common.ConsistencyBase._test_moments_consistency(self,min_periods,count,mean,corr,var_unbiased=None,std_unbiased=None,cov_unbiased=None,var_biased=None,std_biased=None,cov_biased=None)
pandas.tests.window.common.ConsistencyBase._test_moments_consistency_is_constant(self,min_periods,count,mean,corr)
pandas.tests.window.common.ConsistencyBase._test_moments_consistency_mock_mean(self,mean,mock_mean)
pandas.tests.window.common.ConsistencyBase._test_moments_consistency_var_debiasing_factors(self,var_biased=None,var_unbiased=None,var_debiasing_factors=None)
pandas.tests.window.common._create_consistency_data()
pandas.tests.window.common.check_binary_ew(name,A,B)
pandas.tests.window.common.check_binary_ew_min_periods(name,min_periods,A,B)
pandas.tests.window.common.ew_func(A,B,com,name,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/window/test_dtypes.py----------------------------------------
A:pandas.tests.window.test_dtypes.sr1->Series(range(5), dtype=dtype)
A:pandas.tests.window.test_dtypes.sr2->Series(range(10, 0, -2), dtype=dtype)
A:pandas.tests.window.test_dtypes.sr3->Series(range(5), dtype=dtype).copy()
A:pandas.tests.window.test_dtypes.df->DataFrame(np.arange(10).reshape((5, 2)), dtype=dtype)
A:pandas.tests.window.test_dtypes.self.data->self._create_dtype_data(self.dtype)
A:pandas.tests.window.test_dtypes.self.expects->self.get_expects()
A:pandas.tests.window.test_dtypes.roll->d.rolling(window=self.window)
A:pandas.tests.window.test_dtypes.result->f(roll)
A:pandas.tests.window.test_dtypes.dtype->numpy.dtype('M8[ns]')
pandas.tests.window.test_dtypes.DatetimeLike(Dtype)
pandas.tests.window.test_dtypes.DatetimeLike.check_dtypes(self,f,f_name,d,d_name,exp)
pandas.tests.window.test_dtypes.Dtype
pandas.tests.window.test_dtypes.Dtype._create_data(self)
pandas.tests.window.test_dtypes.Dtype._create_dtype_data(self,dtype)
pandas.tests.window.test_dtypes.Dtype.check_dtypes(self,f,f_name,d,d_name,exp)
pandas.tests.window.test_dtypes.Dtype.get_expects(self)
pandas.tests.window.test_dtypes.Dtype.test_dtypes(self)
pandas.tests.window.test_dtypes.Dtype_float(Dtype)
pandas.tests.window.test_dtypes.Dtype_integer(Dtype)
pandas.tests.window.test_dtypes.Dtype_uinteger(Dtype)
pandas.tests.window.test_dtypes.TestDtype_category(Dtype)
pandas.tests.window.test_dtypes.TestDtype_category._create_dtype_data(self,dtype)
pandas.tests.window.test_dtypes.TestDtype_datetime(DatetimeLike)
pandas.tests.window.test_dtypes.TestDtype_datetime64UTC(DatetimeLike)
pandas.tests.window.test_dtypes.TestDtype_datetime64UTC._create_data(self)
pandas.tests.window.test_dtypes.TestDtype_dt(DatetimeLike)
pandas.tests.window.test_dtypes.TestDtype_dt64UTC(DatetimeLike)
pandas.tests.window.test_dtypes.TestDtype_dt64UTC._create_data(self)
pandas.tests.window.test_dtypes.TestDtype_float16(Dtype_float)
pandas.tests.window.test_dtypes.TestDtype_float32(Dtype_float)
pandas.tests.window.test_dtypes.TestDtype_float64(Dtype_float)
pandas.tests.window.test_dtypes.TestDtype_int16(Dtype_integer)
pandas.tests.window.test_dtypes.TestDtype_int32(Dtype_integer)
pandas.tests.window.test_dtypes.TestDtype_int64(Dtype_integer)
pandas.tests.window.test_dtypes.TestDtype_int8(Dtype_integer)
pandas.tests.window.test_dtypes.TestDtype_object(Dtype)
pandas.tests.window.test_dtypes.TestDtype_timedelta(DatetimeLike)
pandas.tests.window.test_dtypes.TestDtype_uint16(Dtype_uinteger)
pandas.tests.window.test_dtypes.TestDtype_uint32(Dtype_uinteger)
pandas.tests.window.test_dtypes.TestDtype_uint64(Dtype_uinteger)
pandas.tests.window.test_dtypes.TestDtype_uint8(Dtype_uinteger)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/window/test_base_indexer.py----------------------------------------
A:pandas.tests.window.test_base_indexer.indexer->CustomIndexer()
A:pandas.tests.window.test_base_indexer.s->Series(range(10))
A:pandas.tests.window.test_base_indexer.result->DataFrame({'values': range(2)}).rolling(indexer, center=True, min_periods=1, closed='both').sum()
A:pandas.tests.window.test_base_indexer.expected->DataFrame({'values': [0.0, 1.0, 10.0, 3.0, 4.0]})
A:pandas.tests.window.test_base_indexer.df->DataFrame({'values': range(2)})
A:pandas.tests.window.test_base_indexer.start->numpy.empty(num_values, dtype=np.int64)
A:pandas.tests.window.test_base_indexer.end->numpy.empty(num_values, dtype=np.int64)
pandas.tests.window.test_base_indexer.test_bad_get_window_bounds_signature()
pandas.tests.window.test_base_indexer.test_expanding_indexer()
pandas.tests.window.test_base_indexer.test_indexer_accepts_rolling_args()
pandas.tests.window.test_base_indexer.test_indexer_constructor_arg()
pandas.tests.window.test_base_indexer.test_win_type_not_implemented()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/window/test_expanding.py----------------------------------------
A:pandas.tests.window.test_expanding.df->DataFrame(np.ones((10, 20)))
A:pandas.tests.window.test_expanding.o->getattr(self, which)
A:pandas.tests.window.test_expanding.e->Expanding(Series([2, 4, 6]), window=2)
A:pandas.tests.window.test_expanding.expected->constructor(expected_counts)
A:pandas.tests.window.test_expanding.result->constructor(values).expanding().count()
A:pandas.tests.window.test_expanding.x->pandas.Series([np.nan])
A:pandas.tests.window.test_expanding.obj->klass([1, 2, 3, 4])
A:pandas.tests.window.test_expanding.axis->DataFrame(np.ones((10, 20)))._get_axis_number(axis_frame)
pandas.tests.window.test_expanding.TestExpanding(Base)
pandas.tests.window.test_expanding.TestExpanding.setup_method(self,method)
pandas.tests.window.test_expanding.TestExpanding.test_constructor(self,which)
pandas.tests.window.test_expanding.TestExpanding.test_doc_string(self)
pandas.tests.window.test_expanding.TestExpanding.test_empty_df_expanding(self,expander)
pandas.tests.window.test_expanding.TestExpanding.test_expanding_axis(self,axis_frame)
pandas.tests.window.test_expanding.TestExpanding.test_iter_raises(self,klass)
pandas.tests.window.test_expanding.TestExpanding.test_missing_minp_zero(self)
pandas.tests.window.test_expanding.TestExpanding.test_numpy_compat(self,method)
pandas.tests.window.test_expanding.test_expanding_count_default_min_periods_with_null_values(constructor)
pandas.tests.window.test_expanding.test_expanding_count_with_min_periods(constructor)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/window/test_grouper.py----------------------------------------
A:pandas.tests.window.test_grouper.self.series->Series(np.arange(10))
A:pandas.tests.window.test_grouper.self.frame->DataFrame({'A': [1] * 20 + [2] * 12 + [3] * 8, 'B': np.arange(40)})
A:pandas.tests.window.test_grouper.g->self.frame.groupby('A')
A:pandas.tests.window.test_grouper.g_mutated->get_groupby(self.frame, by='A', mutated=True)
A:pandas.tests.window.test_grouper.expected->Series([expected_value] * 3, index=pd.MultiIndex.from_tuples(((1, 0), (1, 1), (1, 2)), names=['id', None]), name='value')
A:pandas.tests.window.test_grouper.result->pandas.DataFrame({'id': [1, 1, 1], 'value': [1, 2, 3]}).groupby('id').value.rolling(1).apply(foo, raw=raw_value)
A:pandas.tests.window.test_grouper.r->self.frame.groupby('A').expanding()
A:pandas.tests.window.test_grouper.df->pandas.DataFrame({'id': [1, 1, 1], 'value': [1, 2, 3]})
A:pandas.tests.window.test_grouper.mi->pandas.MultiIndex.from_tuples([('bar', 3), ('bar', 4), ('bar', 5), ('foo', 0), ('foo', 1), ('foo', 2)])
pandas.tests.window.test_grouper.TestGrouperGrouping
pandas.tests.window.test_grouper.TestGrouperGrouping.setup_method(self,method)
pandas.tests.window.test_grouper.TestGrouperGrouping.test_expanding(self)
pandas.tests.window.test_grouper.TestGrouperGrouping.test_expanding_apply(self,raw)
pandas.tests.window.test_grouper.TestGrouperGrouping.test_expanding_corr_cov(self)
pandas.tests.window.test_grouper.TestGrouperGrouping.test_expanding_quantile(self,interpolation)
pandas.tests.window.test_grouper.TestGrouperGrouping.test_getitem(self)
pandas.tests.window.test_grouper.TestGrouperGrouping.test_getitem_multiple(self)
pandas.tests.window.test_grouper.TestGrouperGrouping.test_groupby_rolling(self,expected_value,raw_value)
pandas.tests.window.test_grouper.TestGrouperGrouping.test_mutated(self)
pandas.tests.window.test_grouper.TestGrouperGrouping.test_rolling(self)
pandas.tests.window.test_grouper.TestGrouperGrouping.test_rolling_apply(self,raw)
pandas.tests.window.test_grouper.TestGrouperGrouping.test_rolling_apply_mutability(self)
pandas.tests.window.test_grouper.TestGrouperGrouping.test_rolling_corr_cov(self)
pandas.tests.window.test_grouper.TestGrouperGrouping.test_rolling_quantile(self,interpolation)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/window/conftest.py----------------------------------------
pandas.tests.window.conftest.arithmetic_win_operators(request)
pandas.tests.window.conftest.center(request)
pandas.tests.window.conftest.closed(request)
pandas.tests.window.conftest.engine(request)
pandas.tests.window.conftest.engine_and_raw(request)
pandas.tests.window.conftest.min_periods(request)
pandas.tests.window.conftest.nogil(request)
pandas.tests.window.conftest.nopython(request)
pandas.tests.window.conftest.parallel(request)
pandas.tests.window.conftest.raw(request)
pandas.tests.window.conftest.win_types(request)
pandas.tests.window.conftest.win_types_special(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/window/test_pairwise.py----------------------------------------
A:pandas.tests.window.test_pairwise.df2->DataFrame([[None, 1, 1], [None, 1, 2], [None, 3, 2], [None, 8, 1]], columns=['Y', 'Z', 'X'])
A:pandas.tests.window.test_pairwise.s->Series(range(5), index=date_range('2020', periods=5))
A:pandas.tests.window.test_pairwise.result->Series(range(5), index=date_range('2020', periods=5)).rolling('12H').corr(s)
A:pandas.tests.window.test_pairwise.expected_index->df.index.union(self.df2.index)
A:pandas.tests.window.test_pairwise.expected_columns->df.columns.union(self.df2.columns)
A:pandas.tests.window.test_pairwise.expected->Series([np.nan] * 5, index=date_range('2020', periods=5))
pandas.tests.window.test_pairwise.TestPairwise
pandas.tests.window.test_pairwise.TestPairwise.compare(self,result,expected)
pandas.tests.window.test_pairwise.TestPairwise.test_corr_freq_memory_error(self)
pandas.tests.window.test_pairwise.TestPairwise.test_no_flex(self,f)
pandas.tests.window.test_pairwise.TestPairwise.test_no_pairwise_with_other(self,f)
pandas.tests.window.test_pairwise.TestPairwise.test_no_pairwise_with_self(self,f)
pandas.tests.window.test_pairwise.TestPairwise.test_pairwise_with_other(self,f)
pandas.tests.window.test_pairwise.TestPairwise.test_pairwise_with_self(self,f)
pandas.tests.window.test_pairwise.TestPairwise.test_pairwise_with_series(self,f)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/util/test_deprecate_kwarg.py----------------------------------------
pandas.tests.util.test_deprecate_kwarg._f1(new=False)
pandas.tests.util.test_deprecate_kwarg._f2(new=False)
pandas.tests.util.test_deprecate_kwarg._f3(new=0)
pandas.tests.util.test_deprecate_kwarg._f3_mapping(x)
pandas.tests.util.test_deprecate_kwarg._f4(old=True,unchanged=True)
pandas.tests.util.test_deprecate_kwarg.test_bad_deprecate_kwarg()
pandas.tests.util.test_deprecate_kwarg.test_callable_deprecate_kwarg(x)
pandas.tests.util.test_deprecate_kwarg.test_callable_deprecate_kwarg_fail()
pandas.tests.util.test_deprecate_kwarg.test_deprecate_keyword(key)
pandas.tests.util.test_deprecate_kwarg.test_deprecate_kwarg(key,klass)
pandas.tests.util.test_deprecate_kwarg.test_dict_deprecate_kwarg(key)
pandas.tests.util.test_deprecate_kwarg.test_missing_deprecate_kwarg(key)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/util/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/util/test_deprecate.py----------------------------------------
A:pandas.tests.util.test_deprecate.depr_func->deprecate('depr_func', new_func_no_docstring, '1.0', msg='Use new_func instead.')
A:pandas.tests.util.test_deprecate.result->depr_func()
pandas.tests.util.test_deprecate.new_func()
pandas.tests.util.test_deprecate.new_func_no_docstring()
pandas.tests.util.test_deprecate.new_func_with_deprecation()
pandas.tests.util.test_deprecate.new_func_wrong_docstring()
pandas.tests.util.test_deprecate.test_deprecate_no_docstring()
pandas.tests.util.test_deprecate.test_deprecate_ok()
pandas.tests.util.test_deprecate.test_deprecate_wrong_docstring()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/util/test_validate_kwargs.py----------------------------------------
A:pandas.tests.util.test_validate_kwargs.kwargs->dict(f=None, b=1)
pandas.tests.util.test_validate_kwargs.test_bad_kwarg()
pandas.tests.util.test_validate_kwargs.test_not_all_none(i)
pandas.tests.util.test_validate_kwargs.test_validate_bool_kwarg(name,value)
pandas.tests.util.test_validate_kwargs.test_validate_bool_kwarg_fail(name,value)
pandas.tests.util.test_validate_kwargs.test_validation()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/util/test_assert_series_equal.py----------------------------------------
A:pandas.tests.util.test_assert_series_equal.data->range(3)
A:pandas.tests.util.test_assert_series_equal.s1->Series(Categorical(['a', 'b']))
A:pandas.tests.util.test_assert_series_equal.s2->Series(Categorical(['a', 'b'], categories=list('abc')))
A:pandas.tests.util.test_assert_series_equal.kwargs->dict(check_index_type=check_index_type)
pandas.tests.util.test_assert_series_equal._assert_not_series_equal(a,b,**kwargs)
pandas.tests.util.test_assert_series_equal._assert_not_series_equal_both(a,b,**kwargs)
pandas.tests.util.test_assert_series_equal._assert_series_equal_both(a,b,**kwargs)
pandas.tests.util.test_assert_series_equal.test_less_precise(data1,data2,dtype,check_less_precise)
pandas.tests.util.test_assert_series_equal.test_series_equal(data)
pandas.tests.util.test_assert_series_equal.test_series_equal_categorical_mismatch(check_categorical)
pandas.tests.util.test_assert_series_equal.test_series_equal_index_dtype(s1,s2,msg,check_index_type)
pandas.tests.util.test_assert_series_equal.test_series_equal_length_mismatch(check_less_precise)
pandas.tests.util.test_assert_series_equal.test_series_equal_values_mismatch(check_less_precise)
pandas.tests.util.test_assert_series_equal.test_series_not_equal_metadata_mismatch(kwargs)
pandas.tests.util.test_assert_series_equal.test_series_not_equal_value_mismatch(data1,data2)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/util/test_validate_args_and_kwargs.py----------------------------------------
pandas.tests.util.test_validate_args_and_kwargs.test_duplicate_argument()
pandas.tests.util.test_validate_args_and_kwargs.test_invalid_total_length_max_length_multiple()
pandas.tests.util.test_validate_args_and_kwargs.test_invalid_total_length_max_length_one()
pandas.tests.util.test_validate_args_and_kwargs.test_missing_args_or_kwargs(args,kwargs)
pandas.tests.util.test_validate_args_and_kwargs.test_validation()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/util/test_assert_extension_array_equal.py----------------------------------------
A:pandas.tests.util.test_assert_extension_array_equal.arr1->SparseArray([np.nan, 1, 2, np.nan])
A:pandas.tests.util.test_assert_extension_array_equal.arr2->SparseArray([np.nan, 1, 2, 3])
A:pandas.tests.util.test_assert_extension_array_equal.kwargs->dict(check_dtype=check_dtype)
A:pandas.tests.util.test_assert_extension_array_equal.numpy_array->numpy.arange(5)
A:pandas.tests.util.test_assert_extension_array_equal.extension_array->SparseArray(numpy_array)
pandas.tests.util.test_assert_extension_array_equal.test_assert_extension_array_equal_dtype_mismatch(check_dtype)
pandas.tests.util.test_assert_extension_array_equal.test_assert_extension_array_equal_less_precise(check_less_precise)
pandas.tests.util.test_assert_extension_array_equal.test_assert_extension_array_equal_missing_values()
pandas.tests.util.test_assert_extension_array_equal.test_assert_extension_array_equal_non_extension_array(side)
pandas.tests.util.test_assert_extension_array_equal.test_assert_extension_array_equal_not_exact(kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/util/test_assert_numpy_array_equal.py----------------------------------------
A:pandas.tests.util.test_assert_numpy_array_equal.a->numpy.array([np.nan], dtype=object)
A:pandas.tests.util.test_assert_numpy_array_equal.b->numpy.array([pd.NA], dtype=object)
A:pandas.tests.util.test_assert_numpy_array_equal.other->numpy.array([np.nan], dtype=object).copy()
pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_bad_type()
pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_class_mismatch(a,b,klass1,klass2)
pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_shape_mismatch()
pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_shape_mismatch_override()
pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_value_mismatch1()
pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_value_mismatch2()
pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_value_mismatch3()
pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_value_mismatch4()
pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_value_mismatch5()
pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_value_mismatch6()
pandas.tests.util.test_assert_numpy_array_equal.test_numpy_array_equal_contains_na()
pandas.tests.util.test_assert_numpy_array_equal.test_numpy_array_equal_copy_flag(other_type,check_same)
pandas.tests.util.test_assert_numpy_array_equal.test_numpy_array_equal_different_na()
pandas.tests.util.test_assert_numpy_array_equal.test_numpy_array_equal_identical_na(nulls_fixture)
pandas.tests.util.test_assert_numpy_array_equal.test_numpy_array_equal_object()
pandas.tests.util.test_assert_numpy_array_equal.test_numpy_array_equal_unicode()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/util/test_assert_almost_equal.py----------------------------------------
A:pandas.tests.util.test_assert_almost_equal.real_dict->dict(a=val)
A:pandas.tests.util.test_assert_almost_equal.a->numpy.array([Timestamp('2011-01-01'), Timestamp('2011-01-01')])
A:pandas.tests.util.test_assert_almost_equal.b->numpy.array([Timestamp('2011-01-01'), Timestamp('2011-01-02')])
pandas.tests.util.test_assert_almost_equal._assert_almost_equal_both(a,b,**kwargs)
pandas.tests.util.test_assert_almost_equal._assert_not_almost_equal(a,b,**kwargs)
pandas.tests.util.test_assert_almost_equal._assert_not_almost_equal_both(a,b,**kwargs)
pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_class_mismatch(a,b,klass1,klass2)
pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_dict_like_object(val)
pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_dicts()
pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_edge_case_ndarrays(left_dtype,right_dtype)
pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_inf(a,b)
pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_iterable_length_mismatch()
pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_iterable_values_mismatch()
pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_iterables(a,b)
pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_null()
pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_numbers(a,b)
pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_numbers_with_zeros(a,b)
pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_object()
pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_pandas(a,b)
pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_shape_mismatch_override()
pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_strings()
pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_timestamp()
pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_unicode()
pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_value_mismatch()
pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_value_mismatch1()
pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_value_mismatch2()
pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_value_mismatch3()
pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_value_mismatch4()
pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_dicts(a,b)
pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_inf()
pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_iterables(a,b)
pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_null(a,b)
pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_numbers(a,b)
pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_numbers_with_mixed(a,b)
pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_numbers_with_zeros(a,b)
pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_strings(a,b)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/util/test_validate_args.py----------------------------------------
A:pandas.tests.util.test_validate_args.compat_args->dict(foo=None)
pandas.tests.util.test_validate_args.test_bad_arg_length_max_value_multiple()
pandas.tests.util.test_validate_args.test_bad_arg_length_max_value_single()
pandas.tests.util.test_validate_args.test_bad_min_fname_arg_count()
pandas.tests.util.test_validate_args.test_not_all_defaults(i)
pandas.tests.util.test_validate_args.test_validation()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/util/test_assert_interval_array_equal.py----------------------------------------
A:pandas.tests.util.test_assert_interval_array_equal.kwargs->dict(periods=4)
pandas.tests.util.test_assert_interval_array_equal.test_interval_array_equal(kwargs)
pandas.tests.util.test_assert_interval_array_equal.test_interval_array_equal_closed_mismatch()
pandas.tests.util.test_assert_interval_array_equal.test_interval_array_equal_end_mismatch()
pandas.tests.util.test_assert_interval_array_equal.test_interval_array_equal_periods_mismatch()
pandas.tests.util.test_assert_interval_array_equal.test_interval_array_equal_start_mismatch()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/util/test_hashing.py----------------------------------------
A:pandas.tests.util.test_hashing.a->hash_pandas_object(obj, hash_key='9876543210123456')
A:pandas.tests.util.test_hashing.b->hash_pandas_object(obj, hash_key='9876543210123465')
A:pandas.tests.util.test_hashing.result->pandas.util.hash_pandas_object(pd.Series(['a', 'b']), hash_key=None)
A:pandas.tests.util.test_hashing.expected->pandas.Series([4578374827886788867, 17338122309987883691], dtype='uint64')
A:pandas.tests.util.test_hashing.result1->hash_array(np.asarray(hashes[0:1], dtype=object), 'utf8')
A:pandas.tests.util.test_hashing.result2->hash_array(np.asarray(hashes[1:2], dtype=object), 'utf8')
A:pandas.tests.util.test_hashing.mi->MultiIndex(levels=[['b', 'd', 'a'], [1, 2, 3]], codes=[[0, 1, 0, 2], [2, 0, 0, 1]], names=['col1', 'col2'])
A:pandas.tests.util.test_hashing.recons->MultiIndex(levels=[['b', 'd', 'a'], [1, 2, 3]], codes=[[0, 1, 0, 2], [2, 0, 0, 1]], names=['col1', 'col2'])._sort_levels_monotonic()
A:pandas.tests.util.test_hashing.s2->s1.astype('category').cat.set_categories(s1)
A:pandas.tests.util.test_hashing.s3->s1.astype('category').cat.set_categories(s1).cat.set_categories(list(reversed(s1)))
A:pandas.tests.util.test_hashing.h1->hash_pandas_object(s1, categorize=categorize)
A:pandas.tests.util.test_hashing.h2->hash_pandas_object(s2, categorize=categorize)
A:pandas.tests.util.test_hashing.h3->hash_pandas_object(s3, categorize=categorize)
A:pandas.tests.util.test_hashing.c->pandas.Categorical.from_codes([-1, 0], categories=[pd.Timestamp('2012-01-01')])
A:pandas.tests.util.test_hashing.obj->Series(list('abc'))
A:pandas.tests.util.test_hashing.s->pandas._testing.rands_array(length, 2)
A:pandas.tests.util.test_hashing.expected1->numpy.array([14963968704024874985], dtype=np.uint64)
A:pandas.tests.util.test_hashing.expected2->numpy.array([16428432627716348016], dtype=np.uint64)
A:pandas.tests.util.test_hashing.df->pandas.DataFrame({'data': [tuple('1'), tuple('2')]})
A:pandas.tests.util.test_hashing.df2->pandas.DataFrame({'data': [tuple([1]), tuple([2])]})
A:pandas.tests.util.test_hashing.df3->pandas.DataFrame({'data': [tuple([1, []]), tuple([2, {}])]})
pandas.tests.util.test_hashing._check_equal(obj,**kwargs)
pandas.tests.util.test_hashing._check_not_equal_with_index(obj)
pandas.tests.util.test_hashing.index(request)
pandas.tests.util.test_hashing.series(request)
pandas.tests.util.test_hashing.test_already_encoded(index)
pandas.tests.util.test_hashing.test_alternate_encoding(index)
pandas.tests.util.test_hashing.test_categorical_consistency(s1,categorize)
pandas.tests.util.test_hashing.test_categorical_with_nan_consistency()
pandas.tests.util.test_hashing.test_consistency()
pandas.tests.util.test_hashing.test_hash_array(series)
pandas.tests.util.test_hashing.test_hash_array_errors(val)
pandas.tests.util.test_hashing.test_hash_array_mixed(arr2)
pandas.tests.util.test_hashing.test_hash_collisions()
pandas.tests.util.test_hashing.test_hash_keys()
pandas.tests.util.test_hashing.test_hash_object_none_key()
pandas.tests.util.test_hashing.test_hash_pandas_empty_object(obj,index)
pandas.tests.util.test_hashing.test_hash_pandas_object(obj,index)
pandas.tests.util.test_hashing.test_hash_pandas_object2(series,index)
pandas.tests.util.test_hashing.test_hash_scalar(val)
pandas.tests.util.test_hashing.test_hash_tuple(tup)
pandas.tests.util.test_hashing.test_hash_tuples()
pandas.tests.util.test_hashing.test_hash_tuples_err(val)
pandas.tests.util.test_hashing.test_hash_with_tuple()
pandas.tests.util.test_hashing.test_invalid_key()
pandas.tests.util.test_hashing.test_multiindex_objects()
pandas.tests.util.test_hashing.test_multiindex_unique()
pandas.tests.util.test_hashing.test_pandas_errors(obj)
pandas.tests.util.test_hashing.test_same_len_hash_collisions(l_exp,l_add)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/util/test_safe_import.py----------------------------------------
A:pandas.tests.util.test_safe_import.result->pandas.util._test_decorators.safe_import(mod_name, min_version=min_version)
A:pandas.tests.util.test_safe_import.mod->types.ModuleType(mod_name)
pandas.tests.util.test_safe_import.test_safe_import_dummy(monkeypatch,min_version,valid)
pandas.tests.util.test_safe_import.test_safe_import_exists()
pandas.tests.util.test_safe_import.test_safe_import_non_existent(name)
pandas.tests.util.test_safe_import.test_safe_import_versions(min_version,valid)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/util/test_assert_produces_warning.py----------------------------------------
pandas.tests.util.test_assert_produces_warning.f()
pandas.tests.util.test_assert_produces_warning.test_assert_produces_warning_honors_filter()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/util/test_util.py----------------------------------------
A:pandas.tests.util.test_util.r->pandas._testing.rands(10)
A:pandas.tests.util.test_util.arr->pandas._testing.rands_array(7, size=(10, 10))
A:pandas.tests.util.test_util.ret->pandas._testing.convert_rows_list_to_csv_str(rows_list)
A:pandas.tests.util.test_util.result->datapath(*args)
A:pandas.tests.util.test_util.expected->os.path.join(os.path.dirname(os.path.dirname(__file__)), *args)
pandas.tests.util.test_util.test_convert_rows_list_to_csv_str()
pandas.tests.util.test_util.test_create_temp_directory()
pandas.tests.util.test_util.test_datapath(datapath)
pandas.tests.util.test_util.test_datapath_missing(datapath)
pandas.tests.util.test_util.test_numpy_err_state_is_default()
pandas.tests.util.test_util.test_rands()
pandas.tests.util.test_util.test_rands_array_1d()
pandas.tests.util.test_util.test_rands_array_2d()
pandas.tests.util.test_util.test_rng_context()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/util/test_assert_frame_equal.py----------------------------------------
A:pandas.tests.util.test_assert_frame_equal.df1->DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
A:pandas.tests.util.test_assert_frame_equal.df2->DataFrame({'A': [1, 2, 3], 'B': [4, 5, 7]})
A:pandas.tests.util.test_assert_frame_equal.kwargs->dict(check_dtype=check_dtype)
A:pandas.tests.util.test_assert_frame_equal.df1['col1']->df1['col1'].astype('int64').astype('int64')
A:pandas.tests.util.test_assert_frame_equal.msg->msg.format(obj=obj_fixture).format(obj=obj_fixture)
pandas.tests.util.test_assert_frame_equal._assert_frame_equal_both(a,b,**kwargs)
pandas.tests.util.test_assert_frame_equal._assert_not_frame_equal(a,b,**kwargs)
pandas.tests.util.test_assert_frame_equal._assert_not_frame_equal_both(a,b,**kwargs)
pandas.tests.util.test_assert_frame_equal.by_blocks_fixture(request)
pandas.tests.util.test_assert_frame_equal.obj_fixture(request)
pandas.tests.util.test_assert_frame_equal.test_empty_dtypes(check_dtype)
pandas.tests.util.test_assert_frame_equal.test_frame_equal_block_mismatch(by_blocks_fixture,obj_fixture)
pandas.tests.util.test_assert_frame_equal.test_frame_equal_columns_mismatch(obj_fixture)
pandas.tests.util.test_assert_frame_equal.test_frame_equal_index_dtype_mismatch(df1,df2,msg,check_index_type)
pandas.tests.util.test_assert_frame_equal.test_frame_equal_index_mismatch(obj_fixture)
pandas.tests.util.test_assert_frame_equal.test_frame_equal_row_order_mismatch(check_like,obj_fixture)
pandas.tests.util.test_assert_frame_equal.test_frame_equal_shape_mismatch(df1,df2,obj_fixture)
pandas.tests.util.test_assert_frame_equal.test_frame_equal_unicode(df1,df2,msg,by_blocks_fixture,obj_fixture)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/util/conftest.py----------------------------------------
pandas.tests.util.conftest.check_categorical(request)
pandas.tests.util.conftest.check_dtype(request)
pandas.tests.util.conftest.check_exact(request)
pandas.tests.util.conftest.check_index_type(request)
pandas.tests.util.conftest.check_less_precise(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/util/test_assert_categorical_equal.py----------------------------------------
A:pandas.tests.util.test_assert_categorical_equal.c1->Categorical(data, ordered=False)
A:pandas.tests.util.test_assert_categorical_equal.c2->Categorical(data, ordered=True)
A:pandas.tests.util.test_assert_categorical_equal.kwargs->dict(check_category_order=check_category_order)
pandas.tests.util.test_assert_categorical_equal.test_categorical_equal(c)
pandas.tests.util.test_assert_categorical_equal.test_categorical_equal_categories_mismatch()
pandas.tests.util.test_assert_categorical_equal.test_categorical_equal_codes_mismatch()
pandas.tests.util.test_assert_categorical_equal.test_categorical_equal_object_override(obj)
pandas.tests.util.test_assert_categorical_equal.test_categorical_equal_order_mismatch(check_category_order)
pandas.tests.util.test_assert_categorical_equal.test_categorical_equal_ordered_mismatch()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tests/util/test_assert_index_equal.py----------------------------------------
A:pandas.tests.util.test_assert_index_equal.idx1->Index(Categorical(['a', 'b']))
A:pandas.tests.util.test_assert_index_equal.idx2->Index(Categorical(['a', 'b'], categories=['a', 'b', 'c']))
A:pandas.tests.util.test_assert_index_equal.kwargs->dict(check_exact=check_exact, check_less_precise=check_less_precise)
pandas.tests.util.test_assert_index_equal.test_index_equal_category_mismatch(check_categorical)
pandas.tests.util.test_assert_index_equal.test_index_equal_class_mismatch(check_exact)
pandas.tests.util.test_assert_index_equal.test_index_equal_length_mismatch(check_exact)
pandas.tests.util.test_assert_index_equal.test_index_equal_level_values_mismatch(check_exact,check_less_precise)
pandas.tests.util.test_assert_index_equal.test_index_equal_levels_mismatch()
pandas.tests.util.test_assert_index_equal.test_index_equal_names(name1,name2)
pandas.tests.util.test_assert_index_equal.test_index_equal_values_close(check_exact)
pandas.tests.util.test_assert_index_equal.test_index_equal_values_less_close(check_exact,check_less_precise)
pandas.tests.util.test_assert_index_equal.test_index_equal_values_mismatch(check_exact)
pandas.tests.util.test_assert_index_equal.test_index_equal_values_too_far(check_exact,check_less_precise)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tseries/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tseries/api.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tseries/offsets.py----------------------------------------
A:pandas.tseries.offsets.other->to_offset(other)
A:pandas.tseries.offsets.tz->getattr(other, 'tzinfo', None)
A:pandas.tseries.offsets.nano->getattr(other, 'nanosecond', 0)
A:pandas.tseries.offsets.result->to_offset(other).__add__(self)
A:pandas.tseries.offsets.value->getattr(self, attr)
A:pandas.tseries.offsets._params->cache_readonly(BaseOffset._params.fget)
A:pandas.tseries.offsets._attributes->frozenset(['n', 'normalize'])
A:pandas.tseries.offsets._deprecations->frozenset(['isAnchored', 'onOffset'])
A:pandas.tseries.offsets.(off, use_rd)->pandas._libs.tslibs.offsets._determine_offset(kwds)
A:pandas.tseries.offsets.tzinfo->getattr(other, 'tzinfo', None)
A:pandas.tseries.offsets.shifted->datetime(other.year + n, self.startingMonth, 1)
A:pandas.tseries.offsets.i->self._apply_index_days(i, roll)
A:pandas.tseries.offsets.asper->self._apply_index_days(i, roll).to_period('W')
A:pandas.tseries.offsets.delta->Timedelta(**timedelta_kwds)
A:pandas.tseries.offsets.dt->datetime(dt.year, dt.month, dt.day)
A:pandas.tseries.offsets.(calendar, holidays)->_get_calendar(weekmask=weekmask, holidays=holidays, calendar=calendar)
A:pandas.tseries.offsets.hrs->int(s / 3600)
A:pandas.tseries.offsets.mts->int(s / 60)
A:pandas.tseries.offsets.zero->timedelta(0, 0, 0)
A:pandas.tseries.offsets.wday->datetime(other.year, other.month, dim).weekday()
A:pandas.tseries.offsets.time->self._apply_index_days(i, roll).to_perioddelta('D')
A:pandas.tseries.offsets.roll->numpy.where(base_period.to_timestamp(how='end') == normed, self.n, self.n - 1)
A:pandas.tseries.offsets.start->to_offset(offset).rollforward(start)
A:pandas.tseries.offsets.end->to_offset(offset).rollback(end)
A:pandas.tseries.offsets.num_openings->len(start)
A:pandas.tseries.offsets.index->numpy.argsort(start)
A:pandas.tseries.offsets.dtstart->datetime(2014, 4, 1, start.hour, start.minute)
A:pandas.tseries.offsets.until->datetime(2014, 4, day, end.hour, end.minute)
A:pandas.tseries.offsets.nanosecond->getattr(other, 'nanosecond', 0)
A:pandas.tseries.offsets.businesshours->self._get_business_hours_by_sec(st, self.end[i])
A:pandas.tseries.offsets.(bd, r)->divmod(abs(n * 60), businesshours // 60)
A:pandas.tseries.offsets.skip_bd->BusinessDay(n=bd)
A:pandas.tseries.offsets.prev_open->self._prev_opening_time(other)
A:pandas.tseries.offsets.bhour_remain->timedelta(0)
A:pandas.tseries.offsets.op->self._next_opening_time(dt)
A:pandas.tseries.offsets.span->(dt - op).total_seconds()
A:pandas.tseries.offsets.out->super()._repr_attrs()
A:pandas.tseries.offsets.hours->','.join((f"{st.strftime('%H:%M')}-{en.strftime('%H:%M')}" for (st, en) in zip(self.start, self.end)))
A:pandas.tseries.offsets.np_dt->numpy.datetime64(date_in.date())
A:pandas.tseries.offsets.np_incr_dt->numpy.busday_offset(np_dt, self.n, roll=roll, busdaycal=self.calendar)
A:pandas.tseries.offsets.dt_date->numpy.busday_offset(np_dt, self.n, roll=roll, busdaycal=self.calendar).astype(datetime)
A:pandas.tseries.offsets.day64->_to_dt64(dt, 'datetime64[D]')
A:pandas.tseries.offsets.compare_day->self._get_offset_day(other)
A:pandas.tseries.offsets.n->pandas._libs.tslibs.offsets.roll_convention(other.day, self.n, self.day_of_month)
A:pandas.tseries.offsets.cbday->CustomBusinessDay(n=self.n, normalize=False, **self.kwds)
A:pandas.tseries.offsets.moff->MonthEnd(n=1, normalize=False)
A:pandas.tseries.offsets.cur_month_offset_date->self.month_roll(other)
A:pandas.tseries.offsets.compare_date->self.cbday_roll(cur_month_offset_date)
A:pandas.tseries.offsets.days_in_month->pandas._libs.tslibs.ccalendar.get_days_in_month(dt.year, dt.month)
A:pandas.tseries.offsets.roll_end->numpy.where(is_month_end, 1, 0)
A:pandas.tseries.offsets.roll_before->numpy.where(~after_day_of_month, 1, 0)
A:pandas.tseries.offsets.roll_after->numpy.where(after_day_of_month, n + 2, n + 1)
A:pandas.tseries.offsets.roll_start->numpy.where(is_month_start, -1, 0)
A:pandas.tseries.offsets._inc->Timedelta(nanoseconds=1)
A:pandas.tseries.offsets.otherDay->to_offset(other).weekday()
A:pandas.tseries.offsets.off->dtindex.to_perioddelta('D')
A:pandas.tseries.offsets.(base, mult)->pandas._libs.tslibs.frequencies.get_freq_code(self.freqstr)
A:pandas.tseries.offsets.base_period->dtindex.to_period(base)
A:pandas.tseries.offsets.base->dtindex.to_period(base)._time_shift(roll).to_timestamp(how='end')
A:pandas.tseries.offsets.to_day->self._get_offset_day(shifted)
A:pandas.tseries.offsets.mstart->datetime(other.year, other.month, 1)
A:pandas.tseries.offsets.weekday->pandas._libs.tslibs.ccalendar.int_to_weekday.get(self.weekday, '')
A:pandas.tseries.offsets.dim->pandas._libs.tslibs.ccalendar.get_days_in_month(dt.year, self.startingMonth)
A:pandas.tseries.offsets.mend->datetime(other.year, other.month, dim)
A:pandas.tseries.offsets.qtrs->pandas._libs.tslibs.offsets.roll_qtrday(other, self.n, self.startingMonth, day_opt=self._day_opt, modby=3)
A:pandas.tseries.offsets.years->roll_yearday(other, self.n, self.month, self._day_opt)
A:pandas.tseries.offsets.year_end->self.get_year_end(dt)
A:pandas.tseries.offsets.norm->Timestamp(dt).normalize().tz_localize(None)
A:pandas.tseries.offsets.prev_year->pandas._libs.tslibs.conversion.localize_pydatetime(prev_year, other.tzinfo)
A:pandas.tseries.offsets.cur_year->pandas._libs.tslibs.conversion.localize_pydatetime(cur_year, other.tzinfo)
A:pandas.tseries.offsets.next_year->pandas._libs.tslibs.conversion.localize_pydatetime(next_year, other.tzinfo)
A:pandas.tseries.offsets.target_date->datetime(dt.year, self.startingMonth, dim)
A:pandas.tseries.offsets.suffix->self._offset.get_rule_code_suffix()
A:pandas.tseries.offsets.prefix->self._get_suffix_prefix()
A:pandas.tseries.offsets.qtr_lens->self.get_weeks(dt)
A:pandas.tseries.offsets.tdelta->Timedelta(0)
A:pandas.tseries.offsets.(prev_year_end, num_qtrs, tdelta)->self._rollback_to_year(other)
A:pandas.tseries.offsets.weeks->sum(qtr_lens[:n])
A:pandas.tseries.offsets.res->pandas._libs.tslibs.offsets.shift_day(res, days=weeks * 7)
A:pandas.tseries.offsets.year_has_extra_week->self.year_has_extra_week(dt)
A:pandas.tseries.offsets.next_year_end->self._offset.rollforward(norm)
A:pandas.tseries.offsets.current->pandas._libs.tslibs.offsets.shift_day(current, days=qtr_len * 7)
A:pandas.tseries.offsets.current_easter->pandas._libs.tslibs.conversion.localize_pydatetime(current_easter, other.tzinfo)
A:pandas.tseries.offsets.new->datetime(new.year, new.month, new.day, other.hour, other.minute, other.second, other.microsecond)
A:pandas.tseries.offsets.__gt__->_tick_comp(operator.gt)
A:pandas.tseries.offsets.__ge__->_tick_comp(operator.ge)
A:pandas.tseries.offsets.__lt__->_tick_comp(operator.lt)
A:pandas.tseries.offsets.__le__->_tick_comp(operator.le)
A:pandas.tseries.offsets.nanos->delta_to_nanoseconds(delta)
A:pandas.tseries.offsets.offset->to_offset(offset)
A:pandas.tseries.offsets.next_date->to_offset(offset).apply(cur)
pandas.offsets.BQuarterBegin(QuarterOffset)
pandas.offsets.BQuarterEnd(QuarterOffset)
pandas.offsets.BYearBegin(YearOffset)
pandas.offsets.BYearEnd(YearOffset)
pandas.offsets.BusinessDay(self,n=1,normalize=False,offset=timedelta(0))
pandas.offsets.BusinessDay._offset_str(self)
pandas.offsets.BusinessDay.apply(self,other)
pandas.offsets.BusinessDay.apply_index(self,i)
pandas.offsets.BusinessDay.is_on_offset(self,dt)
pandas.offsets.BusinessHour(self,n=1,normalize=False,start='09:00',end='17:00',offset=timedelta(0))
pandas.offsets.BusinessHourMixin(self,start='09:00',end='17:00',offset=timedelta(0))
pandas.offsets.BusinessHourMixin._get_business_hours_by_sec(self,start,end)
pandas.offsets.BusinessHourMixin._get_closing_time(self,dt)
pandas.offsets.BusinessHourMixin._is_on_offset(self,dt)
pandas.offsets.BusinessHourMixin._next_opening_time(self,other,sign=1)
pandas.offsets.BusinessHourMixin._prev_opening_time(self,other)
pandas.offsets.BusinessHourMixin._repr_attrs(self)
pandas.offsets.BusinessHourMixin.apply(self,other)
pandas.offsets.BusinessHourMixin.is_on_offset(self,dt)
pandas.offsets.BusinessHourMixin.next_bday(self)
pandas.offsets.BusinessHourMixin.rollback(self,dt)
pandas.offsets.BusinessHourMixin.rollforward(self,dt)
pandas.offsets.BusinessMixin
pandas.offsets.BusinessMixin._repr_attrs(self)
pandas.offsets.BusinessMixin.offset(self)
pandas.offsets.BusinessMonthBegin(MonthOffset)
pandas.offsets.BusinessMonthEnd(MonthOffset)
pandas.offsets.CustomBusinessDay(self,n=1,normalize=False,weekmask='MonTueWedThuFri',holidays=None,calendar=None,offset=timedelta(0))
pandas.offsets.CustomBusinessDay.apply(self,other)
pandas.offsets.CustomBusinessDay.apply_index(self,i)
pandas.offsets.CustomBusinessDay.is_on_offset(self,dt)
pandas.offsets.CustomBusinessHour(self,n=1,normalize=False,weekmask='MonTueWedThuFri',holidays=None,calendar=None,start='09:00',end='17:00',offset=timedelta(0))
pandas.offsets.CustomBusinessMonthBegin(_CustomBusinessMonth)
pandas.offsets.CustomBusinessMonthEnd(_CustomBusinessMonth)
pandas.offsets.DateOffset(self,n=1,normalize=False,**kwds)
pandas.offsets.DateOffset._offset_str(self)
pandas.offsets.DateOffset._prefix(self)
pandas.offsets.DateOffset._repr_attrs(self)
pandas.offsets.DateOffset.apply(self,other)
pandas.offsets.DateOffset.apply_index(self,i)
pandas.offsets.DateOffset.freqstr(self)
pandas.offsets.DateOffset.isAnchored(self)
pandas.offsets.DateOffset.is_anchored(self)
pandas.offsets.DateOffset.is_on_offset(self,dt)
pandas.offsets.DateOffset.name(self)
pandas.offsets.DateOffset.nanos(self)
pandas.offsets.DateOffset.onOffset(self,dt)
pandas.offsets.DateOffset.rollback(self,dt)
pandas.offsets.DateOffset.rollforward(self,dt)
pandas.offsets.DateOffset.rule_code(self)
pandas.offsets.Day(Tick)
pandas.offsets.Easter(DateOffset)
pandas.offsets.Easter.apply(self,other)
pandas.offsets.Easter.is_on_offset(self,dt)
pandas.offsets.FY5253(self,n=1,normalize=False,weekday=0,startingMonth=1,variation='nearest')
pandas.offsets.FY5253._from_name(cls,*args)
pandas.offsets.FY5253._get_suffix_prefix(self)
pandas.offsets.FY5253._parse_suffix(cls,varion_code,startingMonth_code,weekday_code)
pandas.offsets.FY5253.apply(self,other)
pandas.offsets.FY5253.get_rule_code_suffix(self)
pandas.offsets.FY5253.get_year_end(self,dt)
pandas.offsets.FY5253.is_anchored(self)
pandas.offsets.FY5253.is_on_offset(self,dt)
pandas.offsets.FY5253.rule_code(self)
pandas.offsets.FY5253Quarter(self,n=1,normalize=False,weekday=0,startingMonth=1,qtr_with_extra_week=1,variation='nearest')
pandas.offsets.FY5253Quarter._from_name(cls,*args)
pandas.offsets.FY5253Quarter._offset(self)
pandas.offsets.FY5253Quarter._rollback_to_year(self,other)
pandas.offsets.FY5253Quarter.apply(self,other)
pandas.offsets.FY5253Quarter.get_weeks(self,dt)
pandas.offsets.FY5253Quarter.is_anchored(self)
pandas.offsets.FY5253Quarter.is_on_offset(self,dt)
pandas.offsets.FY5253Quarter.rule_code(self)
pandas.offsets.FY5253Quarter.year_has_extra_week(self,dt)
pandas.offsets.Hour(Tick)
pandas.offsets.LastWeekOfMonth(self,n=1,normalize=False,weekday=0)
pandas.offsets.LastWeekOfMonth._from_name(cls,suffix=None)
pandas.offsets.LastWeekOfMonth._get_offset_day(self,other)
pandas.offsets.LastWeekOfMonth.rule_code(self)
pandas.offsets.Micro(Tick)
pandas.offsets.Milli(Tick)
pandas.offsets.Minute(Tick)
pandas.offsets.MonthBegin(MonthOffset)
pandas.offsets.MonthEnd(MonthOffset)
pandas.offsets.MonthOffset(SingleConstructorOffset)
pandas.offsets.MonthOffset.apply(self,other)
pandas.offsets.MonthOffset.apply_index(self,i)
pandas.offsets.MonthOffset.is_on_offset(self,dt)
pandas.offsets.MonthOffset.name(self)
pandas.offsets.Nano(Tick)
pandas.offsets.QuarterBegin(QuarterOffset)
pandas.offsets.QuarterEnd(QuarterOffset)
pandas.offsets.QuarterOffset(self,n=1,normalize=False,startingMonth=None)
pandas.offsets.QuarterOffset._from_name(cls,suffix=None)
pandas.offsets.QuarterOffset.apply(self,other)
pandas.offsets.QuarterOffset.apply_index(self,dtindex)
pandas.offsets.QuarterOffset.is_anchored(self)
pandas.offsets.QuarterOffset.is_on_offset(self,dt)
pandas.offsets.QuarterOffset.rule_code(self)
pandas.offsets.Second(Tick)
pandas.offsets.SemiMonthBegin(SemiMonthOffset)
pandas.offsets.SemiMonthBegin._apply(self,n,other)
pandas.offsets.SemiMonthBegin._apply_index_days(self,i,roll)
pandas.offsets.SemiMonthBegin._get_roll(self,i,before_day_of_month,after_day_of_month)
pandas.offsets.SemiMonthBegin.is_on_offset(self,dt)
pandas.offsets.SemiMonthEnd(SemiMonthOffset)
pandas.offsets.SemiMonthEnd._apply(self,n,other)
pandas.offsets.SemiMonthEnd._apply_index_days(self,i,roll)
pandas.offsets.SemiMonthEnd._get_roll(self,i,before_day_of_month,after_day_of_month)
pandas.offsets.SemiMonthEnd.is_on_offset(self,dt)
pandas.offsets.SemiMonthOffset(self,n=1,normalize=False,day_of_month=None)
pandas.offsets.SemiMonthOffset._apply(self,n,other)
pandas.offsets.SemiMonthOffset._apply_index_days(self,i,roll)
pandas.offsets.SemiMonthOffset._from_name(cls,suffix=None)
pandas.offsets.SemiMonthOffset._get_roll(self,i,before_day_of_month,after_day_of_month)
pandas.offsets.SemiMonthOffset.apply(self,other)
pandas.offsets.SemiMonthOffset.apply_index(self,i)
pandas.offsets.SemiMonthOffset.rule_code(self)
pandas.offsets.SingleConstructorOffset(DateOffset)
pandas.offsets.SingleConstructorOffset._from_name(cls,suffix=None)
pandas.offsets.Tick(self,n=1,normalize=False)
pandas.offsets.Tick.__add__(self,other)
pandas.offsets.Tick.__eq__(self,other:Any)->bool
pandas.offsets.Tick.__hash__(self)
pandas.offsets.Tick.__ne__(self,other)
pandas.offsets.Tick.apply(self,other)
pandas.offsets.Tick.delta(self)
pandas.offsets.Tick.is_anchored(self)
pandas.offsets.Tick.nanos(self)
pandas.offsets.Week(self,n=1,normalize=False,weekday=None)
pandas.offsets.Week._end_apply_index(self,dtindex)
pandas.offsets.Week._from_name(cls,suffix=None)
pandas.offsets.Week.apply(self,other)
pandas.offsets.Week.apply_index(self,i)
pandas.offsets.Week.is_anchored(self)
pandas.offsets.Week.is_on_offset(self,dt)
pandas.offsets.Week.rule_code(self)
pandas.offsets.WeekOfMonth(self,n=1,normalize=False,week=0,weekday=0)
pandas.offsets.WeekOfMonth._from_name(cls,suffix=None)
pandas.offsets.WeekOfMonth._get_offset_day(self,other)
pandas.offsets.WeekOfMonth.rule_code(self)
pandas.offsets.YearBegin(YearOffset)
pandas.offsets.YearEnd(YearOffset)
pandas.offsets.YearOffset(self,n=1,normalize=False,month=None)
pandas.offsets.YearOffset._from_name(cls,suffix=None)
pandas.offsets.YearOffset._get_offset_day(self,other)
pandas.offsets.YearOffset.apply(self,other)
pandas.offsets.YearOffset.apply_index(self,dtindex)
pandas.offsets.YearOffset.is_on_offset(self,dt)
pandas.offsets.YearOffset.rule_code(self)
pandas.offsets._CustomBusinessMonth(self,n=1,normalize=False,weekmask='MonTueWedThuFri',holidays=None,calendar=None,offset=timedelta(0))
pandas.offsets._CustomBusinessMonth.apply(self,other)
pandas.offsets._CustomBusinessMonth.cbday_roll(self)
pandas.offsets._CustomBusinessMonth.m_offset(self)
pandas.offsets._CustomBusinessMonth.month_roll(self)
pandas.offsets._CustomMixin(self,weekmask,holidays,calendar)
pandas.offsets._WeekOfMonthMixin
pandas.offsets._WeekOfMonthMixin.apply(self,other)
pandas.offsets._WeekOfMonthMixin.is_on_offset(self,dt)
pandas.offsets._delta_to_tick(delta)
pandas.offsets._tick_comp(op)
pandas.offsets.apply_wraps(func)
pandas.offsets.as_timestamp(obj)
pandas.offsets.generate_range(start=None,end=None,periods=None,offset=BDay())
pandas.tseries.offsets.BQuarterBegin(QuarterOffset)
pandas.tseries.offsets.BQuarterEnd(QuarterOffset)
pandas.tseries.offsets.BYearBegin(YearOffset)
pandas.tseries.offsets.BYearEnd(YearOffset)
pandas.tseries.offsets.BusinessDay(self,n=1,normalize=False,offset=timedelta(0))
pandas.tseries.offsets.BusinessDay.__init__(self,n=1,normalize=False,offset=timedelta(0))
pandas.tseries.offsets.BusinessDay._offset_str(self)
pandas.tseries.offsets.BusinessDay.apply(self,other)
pandas.tseries.offsets.BusinessDay.apply_index(self,i)
pandas.tseries.offsets.BusinessDay.is_on_offset(self,dt)
pandas.tseries.offsets.BusinessHour(self,n=1,normalize=False,start='09:00',end='17:00',offset=timedelta(0))
pandas.tseries.offsets.BusinessHour.__init__(self,n=1,normalize=False,start='09:00',end='17:00',offset=timedelta(0))
pandas.tseries.offsets.BusinessHourMixin(self,start='09:00',end='17:00',offset=timedelta(0))
pandas.tseries.offsets.BusinessHourMixin.__init__(self,start='09:00',end='17:00',offset=timedelta(0))
pandas.tseries.offsets.BusinessHourMixin._get_business_hours_by_sec(self,start,end)
pandas.tseries.offsets.BusinessHourMixin._get_closing_time(self,dt)
pandas.tseries.offsets.BusinessHourMixin._is_on_offset(self,dt)
pandas.tseries.offsets.BusinessHourMixin._next_opening_time(self,other,sign=1)
pandas.tseries.offsets.BusinessHourMixin._prev_opening_time(self,other)
pandas.tseries.offsets.BusinessHourMixin._repr_attrs(self)
pandas.tseries.offsets.BusinessHourMixin.apply(self,other)
pandas.tseries.offsets.BusinessHourMixin.is_on_offset(self,dt)
pandas.tseries.offsets.BusinessHourMixin.next_bday(self)
pandas.tseries.offsets.BusinessHourMixin.rollback(self,dt)
pandas.tseries.offsets.BusinessHourMixin.rollforward(self,dt)
pandas.tseries.offsets.BusinessMixin
pandas.tseries.offsets.BusinessMixin._repr_attrs(self)
pandas.tseries.offsets.BusinessMixin.offset(self)
pandas.tseries.offsets.BusinessMonthBegin(MonthOffset)
pandas.tseries.offsets.BusinessMonthEnd(MonthOffset)
pandas.tseries.offsets.CustomBusinessDay(self,n=1,normalize=False,weekmask='MonTueWedThuFri',holidays=None,calendar=None,offset=timedelta(0))
pandas.tseries.offsets.CustomBusinessDay.__init__(self,n=1,normalize=False,weekmask='MonTueWedThuFri',holidays=None,calendar=None,offset=timedelta(0))
pandas.tseries.offsets.CustomBusinessDay.apply(self,other)
pandas.tseries.offsets.CustomBusinessDay.apply_index(self,i)
pandas.tseries.offsets.CustomBusinessDay.is_on_offset(self,dt)
pandas.tseries.offsets.CustomBusinessHour(self,n=1,normalize=False,weekmask='MonTueWedThuFri',holidays=None,calendar=None,start='09:00',end='17:00',offset=timedelta(0))
pandas.tseries.offsets.CustomBusinessHour.__init__(self,n=1,normalize=False,weekmask='MonTueWedThuFri',holidays=None,calendar=None,start='09:00',end='17:00',offset=timedelta(0))
pandas.tseries.offsets.CustomBusinessMonthBegin(_CustomBusinessMonth)
pandas.tseries.offsets.CustomBusinessMonthEnd(_CustomBusinessMonth)
pandas.tseries.offsets.DateOffset(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.DateOffset.__init__(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.DateOffset._offset_str(self)
pandas.tseries.offsets.DateOffset._prefix(self)
pandas.tseries.offsets.DateOffset._repr_attrs(self)
pandas.tseries.offsets.DateOffset.apply(self,other)
pandas.tseries.offsets.DateOffset.apply_index(self,i)
pandas.tseries.offsets.DateOffset.freqstr(self)
pandas.tseries.offsets.DateOffset.isAnchored(self)
pandas.tseries.offsets.DateOffset.is_anchored(self)
pandas.tseries.offsets.DateOffset.is_on_offset(self,dt)
pandas.tseries.offsets.DateOffset.name(self)
pandas.tseries.offsets.DateOffset.nanos(self)
pandas.tseries.offsets.DateOffset.onOffset(self,dt)
pandas.tseries.offsets.DateOffset.rollback(self,dt)
pandas.tseries.offsets.DateOffset.rollforward(self,dt)
pandas.tseries.offsets.DateOffset.rule_code(self)
pandas.tseries.offsets.Day(Tick)
pandas.tseries.offsets.Easter(DateOffset)
pandas.tseries.offsets.Easter.apply(self,other)
pandas.tseries.offsets.Easter.is_on_offset(self,dt)
pandas.tseries.offsets.FY5253(self,n=1,normalize=False,weekday=0,startingMonth=1,variation='nearest')
pandas.tseries.offsets.FY5253.__init__(self,n=1,normalize=False,weekday=0,startingMonth=1,variation='nearest')
pandas.tseries.offsets.FY5253._from_name(cls,*args)
pandas.tseries.offsets.FY5253._get_suffix_prefix(self)
pandas.tseries.offsets.FY5253._parse_suffix(cls,varion_code,startingMonth_code,weekday_code)
pandas.tseries.offsets.FY5253.apply(self,other)
pandas.tseries.offsets.FY5253.get_rule_code_suffix(self)
pandas.tseries.offsets.FY5253.get_year_end(self,dt)
pandas.tseries.offsets.FY5253.is_anchored(self)
pandas.tseries.offsets.FY5253.is_on_offset(self,dt)
pandas.tseries.offsets.FY5253.rule_code(self)
pandas.tseries.offsets.FY5253Quarter(self,n=1,normalize=False,weekday=0,startingMonth=1,qtr_with_extra_week=1,variation='nearest')
pandas.tseries.offsets.FY5253Quarter.__init__(self,n=1,normalize=False,weekday=0,startingMonth=1,qtr_with_extra_week=1,variation='nearest')
pandas.tseries.offsets.FY5253Quarter._from_name(cls,*args)
pandas.tseries.offsets.FY5253Quarter._offset(self)
pandas.tseries.offsets.FY5253Quarter._rollback_to_year(self,other)
pandas.tseries.offsets.FY5253Quarter.apply(self,other)
pandas.tseries.offsets.FY5253Quarter.get_weeks(self,dt)
pandas.tseries.offsets.FY5253Quarter.is_anchored(self)
pandas.tseries.offsets.FY5253Quarter.is_on_offset(self,dt)
pandas.tseries.offsets.FY5253Quarter.rule_code(self)
pandas.tseries.offsets.FY5253Quarter.year_has_extra_week(self,dt)
pandas.tseries.offsets.Hour(Tick)
pandas.tseries.offsets.LastWeekOfMonth(self,n=1,normalize=False,weekday=0)
pandas.tseries.offsets.LastWeekOfMonth.__init__(self,n=1,normalize=False,weekday=0)
pandas.tseries.offsets.LastWeekOfMonth._from_name(cls,suffix=None)
pandas.tseries.offsets.LastWeekOfMonth._get_offset_day(self,other)
pandas.tseries.offsets.LastWeekOfMonth.rule_code(self)
pandas.tseries.offsets.Micro(Tick)
pandas.tseries.offsets.Milli(Tick)
pandas.tseries.offsets.Minute(Tick)
pandas.tseries.offsets.MonthBegin(MonthOffset)
pandas.tseries.offsets.MonthEnd(MonthOffset)
pandas.tseries.offsets.MonthOffset(SingleConstructorOffset)
pandas.tseries.offsets.MonthOffset.apply(self,other)
pandas.tseries.offsets.MonthOffset.apply_index(self,i)
pandas.tseries.offsets.MonthOffset.is_on_offset(self,dt)
pandas.tseries.offsets.MonthOffset.name(self)
pandas.tseries.offsets.Nano(Tick)
pandas.tseries.offsets.QuarterBegin(QuarterOffset)
pandas.tseries.offsets.QuarterEnd(QuarterOffset)
pandas.tseries.offsets.QuarterOffset(self,n=1,normalize=False,startingMonth=None)
pandas.tseries.offsets.QuarterOffset.__init__(self,n=1,normalize=False,startingMonth=None)
pandas.tseries.offsets.QuarterOffset._from_name(cls,suffix=None)
pandas.tseries.offsets.QuarterOffset.apply(self,other)
pandas.tseries.offsets.QuarterOffset.apply_index(self,dtindex)
pandas.tseries.offsets.QuarterOffset.is_anchored(self)
pandas.tseries.offsets.QuarterOffset.is_on_offset(self,dt)
pandas.tseries.offsets.QuarterOffset.rule_code(self)
pandas.tseries.offsets.Second(Tick)
pandas.tseries.offsets.SemiMonthBegin(SemiMonthOffset)
pandas.tseries.offsets.SemiMonthBegin._apply(self,n,other)
pandas.tseries.offsets.SemiMonthBegin._apply_index_days(self,i,roll)
pandas.tseries.offsets.SemiMonthBegin._get_roll(self,i,before_day_of_month,after_day_of_month)
pandas.tseries.offsets.SemiMonthBegin.is_on_offset(self,dt)
pandas.tseries.offsets.SemiMonthEnd(SemiMonthOffset)
pandas.tseries.offsets.SemiMonthEnd._apply(self,n,other)
pandas.tseries.offsets.SemiMonthEnd._apply_index_days(self,i,roll)
pandas.tseries.offsets.SemiMonthEnd._get_roll(self,i,before_day_of_month,after_day_of_month)
pandas.tseries.offsets.SemiMonthEnd.is_on_offset(self,dt)
pandas.tseries.offsets.SemiMonthOffset(self,n=1,normalize=False,day_of_month=None)
pandas.tseries.offsets.SemiMonthOffset.__init__(self,n=1,normalize=False,day_of_month=None)
pandas.tseries.offsets.SemiMonthOffset._apply(self,n,other)
pandas.tseries.offsets.SemiMonthOffset._apply_index_days(self,i,roll)
pandas.tseries.offsets.SemiMonthOffset._from_name(cls,suffix=None)
pandas.tseries.offsets.SemiMonthOffset._get_roll(self,i,before_day_of_month,after_day_of_month)
pandas.tseries.offsets.SemiMonthOffset.apply(self,other)
pandas.tseries.offsets.SemiMonthOffset.apply_index(self,i)
pandas.tseries.offsets.SemiMonthOffset.rule_code(self)
pandas.tseries.offsets.SingleConstructorOffset(DateOffset)
pandas.tseries.offsets.SingleConstructorOffset._from_name(cls,suffix=None)
pandas.tseries.offsets.Tick(self,n=1,normalize=False)
pandas.tseries.offsets.Tick.__add__(self,other)
pandas.tseries.offsets.Tick.__eq__(self,other:Any)->bool
pandas.tseries.offsets.Tick.__hash__(self)
pandas.tseries.offsets.Tick.__init__(self,n=1,normalize=False)
pandas.tseries.offsets.Tick.__ne__(self,other)
pandas.tseries.offsets.Tick.apply(self,other)
pandas.tseries.offsets.Tick.delta(self)
pandas.tseries.offsets.Tick.is_anchored(self)
pandas.tseries.offsets.Tick.nanos(self)
pandas.tseries.offsets.Week(self,n=1,normalize=False,weekday=None)
pandas.tseries.offsets.Week.__init__(self,n=1,normalize=False,weekday=None)
pandas.tseries.offsets.Week._end_apply_index(self,dtindex)
pandas.tseries.offsets.Week._from_name(cls,suffix=None)
pandas.tseries.offsets.Week.apply(self,other)
pandas.tseries.offsets.Week.apply_index(self,i)
pandas.tseries.offsets.Week.is_anchored(self)
pandas.tseries.offsets.Week.is_on_offset(self,dt)
pandas.tseries.offsets.Week.rule_code(self)
pandas.tseries.offsets.WeekOfMonth(self,n=1,normalize=False,week=0,weekday=0)
pandas.tseries.offsets.WeekOfMonth.__init__(self,n=1,normalize=False,week=0,weekday=0)
pandas.tseries.offsets.WeekOfMonth._from_name(cls,suffix=None)
pandas.tseries.offsets.WeekOfMonth._get_offset_day(self,other)
pandas.tseries.offsets.WeekOfMonth.rule_code(self)
pandas.tseries.offsets.YearBegin(YearOffset)
pandas.tseries.offsets.YearEnd(YearOffset)
pandas.tseries.offsets.YearOffset(self,n=1,normalize=False,month=None)
pandas.tseries.offsets.YearOffset.__init__(self,n=1,normalize=False,month=None)
pandas.tseries.offsets.YearOffset._from_name(cls,suffix=None)
pandas.tseries.offsets.YearOffset._get_offset_day(self,other)
pandas.tseries.offsets.YearOffset.apply(self,other)
pandas.tseries.offsets.YearOffset.apply_index(self,dtindex)
pandas.tseries.offsets.YearOffset.is_on_offset(self,dt)
pandas.tseries.offsets.YearOffset.rule_code(self)
pandas.tseries.offsets._CustomBusinessMonth(self,n=1,normalize=False,weekmask='MonTueWedThuFri',holidays=None,calendar=None,offset=timedelta(0))
pandas.tseries.offsets._CustomBusinessMonth.__init__(self,n=1,normalize=False,weekmask='MonTueWedThuFri',holidays=None,calendar=None,offset=timedelta(0))
pandas.tseries.offsets._CustomBusinessMonth.apply(self,other)
pandas.tseries.offsets._CustomBusinessMonth.cbday_roll(self)
pandas.tseries.offsets._CustomBusinessMonth.m_offset(self)
pandas.tseries.offsets._CustomBusinessMonth.month_roll(self)
pandas.tseries.offsets._CustomMixin(self,weekmask,holidays,calendar)
pandas.tseries.offsets._CustomMixin.__init__(self,weekmask,holidays,calendar)
pandas.tseries.offsets._WeekOfMonthMixin
pandas.tseries.offsets._WeekOfMonthMixin.apply(self,other)
pandas.tseries.offsets._WeekOfMonthMixin.is_on_offset(self,dt)
pandas.tseries.offsets._delta_to_tick(delta)
pandas.tseries.offsets._tick_comp(op)
pandas.tseries.offsets.apply_wraps(func)
pandas.tseries.offsets.as_timestamp(obj)
pandas.tseries.offsets.generate_range(start=None,end=None,periods=None,offset=BDay())


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tseries/frequencies.py----------------------------------------
A:pandas.tseries.frequencies.(name, _)->pandas._libs.tslibs.frequencies._base_and_stride(name)
A:pandas.tseries.frequencies.freq->Timedelta(freq)
A:pandas.tseries.frequencies.stride->int(stride)
A:pandas.tseries.frequencies.splitted->re.split(libfreqs.opattern, freq)
A:pandas.tseries.frequencies.(stride, name)->pandas._libs.tslibs.resolution.Resolution.get_stride_from_decimal(float(stride), prefix)
A:pandas.tseries.frequencies.offset->klass._from_name(*split[1:])
A:pandas.tseries.frequencies.name->pandas._libs.tslibs.frequencies._lite_rule_alias.get(name, name)
A:pandas.tseries.frequencies.split->pandas._libs.tslibs.frequencies._lite_rule_alias.get(name, name).split('-')
A:pandas.tseries.frequencies.inferer->_FrequencyInferer(index, warn=warn)
A:pandas.tseries.frequencies.index->pandas.DatetimeIndex(index.asi8)
A:pandas.tseries.frequencies.self.values->tz_convert(self.values, UTC, index.tz)
A:pandas.tseries.frequencies.annual_rule->self._get_annual_rule()
A:pandas.tseries.frequencies.quarterly_rule->self._get_quarterly_rule()
A:pandas.tseries.frequencies.monthly_rule->self._get_monthly_rule()
A:pandas.tseries.frequencies.wom_rule->self._get_wom_rule()
A:pandas.tseries.frequencies.pos_check->self.month_position_check()
A:pandas.tseries.frequencies.first_weekday->self.index[0].weekday()
A:pandas.tseries.frequencies.shifts->numpy.floor_divide(shifts, _ONE_DAY)
A:pandas.tseries.frequencies.weekdays->unique(self.index.weekday)
A:pandas.tseries.frequencies.week_of_months->unique((self.index.day - 1) // 7)
A:pandas.tseries.frequencies.count->int(count)
pandas.tseries.frequencies._FrequencyInferer(self,index,warn:bool=True)
pandas.tseries.frequencies._FrequencyInferer.__init__(self,index,warn:bool=True)
pandas.tseries.frequencies._FrequencyInferer._get_annual_rule(self)->Optional[str]
pandas.tseries.frequencies._FrequencyInferer._get_monthly_rule(self)->Optional[str]
pandas.tseries.frequencies._FrequencyInferer._get_quarterly_rule(self)->Optional[str]
pandas.tseries.frequencies._FrequencyInferer._get_wom_rule(self)->Optional[str]
pandas.tseries.frequencies._FrequencyInferer._infer_daily_rule(self)->Optional[str]
pandas.tseries.frequencies._FrequencyInferer._is_business_daily(self)->bool
pandas.tseries.frequencies._FrequencyInferer.day_deltas(self)
pandas.tseries.frequencies._FrequencyInferer.deltas(self)
pandas.tseries.frequencies._FrequencyInferer.deltas_asi8(self)
pandas.tseries.frequencies._FrequencyInferer.fields(self)
pandas.tseries.frequencies._FrequencyInferer.get_freq(self)->Optional[str]
pandas.tseries.frequencies._FrequencyInferer.hour_deltas(self)
pandas.tseries.frequencies._FrequencyInferer.is_unique(self)->bool
pandas.tseries.frequencies._FrequencyInferer.is_unique_asi8(self)
pandas.tseries.frequencies._FrequencyInferer.mdiffs(self)
pandas.tseries.frequencies._FrequencyInferer.month_position_check(self)
pandas.tseries.frequencies._FrequencyInferer.rep_stamp(self)
pandas.tseries.frequencies._FrequencyInferer.ydiffs(self)
pandas.tseries.frequencies._TimedeltaFrequencyInferer(_FrequencyInferer)
pandas.tseries.frequencies._TimedeltaFrequencyInferer._infer_daily_rule(self)
pandas.tseries.frequencies._get_offset(name:str)->DateOffset
pandas.tseries.frequencies._is_multiple(us,mult:int)->bool
pandas.tseries.frequencies._maybe_add_count(base:str,count:float)->str
pandas.tseries.frequencies.get_offset(name:str)->DateOffset
pandas.tseries.frequencies.get_period_alias(offset_str:str)->Optional[str]
pandas.tseries.frequencies.infer_freq(index,warn:bool=True)->Optional[str]
pandas.tseries.frequencies.to_offset(freq)->Optional[DateOffset]


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/tseries/holiday.py----------------------------------------
A:pandas.tseries.holiday.dow->Timestamp(datetime(self.year, self.month, self.day)).weekday()
A:pandas.tseries.holiday.start_date->Timestamp(datetime(1970, 1, 1))
A:pandas.tseries.holiday.end_date->Timestamp(datetime(2200, 12, 31))
A:pandas.tseries.holiday.dt->Timestamp(datetime(self.year, self.month, self.day))
A:pandas.tseries.holiday.dates->date_range(start=reference_start_date, end=reference_end_date, freq=year_offset, tz=start_date.tz)
A:pandas.tseries.holiday.holiday_dates->self._apply_rule(dates)
A:pandas.tseries.holiday.filter_start_date->max(self.start_date.tz_localize(filter_start_date.tz), filter_start_date)
A:pandas.tseries.holiday.filter_end_date->min(self.end_date.tz_localize(filter_end_date.tz), filter_end_date)
A:pandas.tseries.holiday.year_offset->DateOffset(years=1)
A:pandas.tseries.holiday.reference_start_date->Timestamp(datetime(start_date.year - 1, self.month, self.day))
A:pandas.tseries.holiday.reference_end_date->Timestamp(datetime(end_date.year + 1, self.month, self.day))
A:pandas.tseries.holiday.calendar_class->type(name, (base_class,), {'rules': rules, 'name': name})
A:pandas.tseries.holiday.start->Timestamp(start)
A:pandas.tseries.holiday.end->Timestamp(end)
A:pandas.tseries.holiday.rule_holidays->rule.dates(start, end, return_name=True)
A:pandas.tseries.holiday.holidays->self.merge_class(self, other)
A:pandas.tseries.holiday.USMemorialDay->Holiday('Memorial Day', month=5, day=31, offset=DateOffset(weekday=MO(-1)))
A:pandas.tseries.holiday.USLaborDay->Holiday('Labor Day', month=9, day=1, offset=DateOffset(weekday=MO(1)))
A:pandas.tseries.holiday.USColumbusDay->Holiday('Columbus Day', month=10, day=1, offset=DateOffset(weekday=MO(2)))
A:pandas.tseries.holiday.USThanksgivingDay->Holiday('Thanksgiving', month=11, day=1, offset=DateOffset(weekday=TH(4)))
A:pandas.tseries.holiday.USMartinLutherKingJr->Holiday('Martin Luther King Jr. Day', start_date=datetime(1986, 1, 1), month=1, day=1, offset=DateOffset(weekday=MO(3)))
A:pandas.tseries.holiday.USPresidentsDay->Holiday('Presidents Day', month=2, day=1, offset=DateOffset(weekday=MO(3)))
A:pandas.tseries.holiday.GoodFriday->Holiday('Good Friday', month=1, day=1, offset=[Easter(), Day(-2)])
A:pandas.tseries.holiday.EasterMonday->Holiday('Easter Monday', month=1, day=1, offset=[Easter(), Day(1)])
A:pandas.tseries.holiday.rules->AbstractHolidayCalendar.merge_class(base, other)
pandas.tseries.holiday.AbstractHolidayCalendar(self,name=None,rules=None)
pandas.tseries.holiday.AbstractHolidayCalendar.__init__(self,name=None,rules=None)
pandas.tseries.holiday.AbstractHolidayCalendar.holidays(self,start=None,end=None,return_name=False)
pandas.tseries.holiday.AbstractHolidayCalendar.merge(self,other,inplace=False)
pandas.tseries.holiday.AbstractHolidayCalendar.merge_class(base,other)
pandas.tseries.holiday.AbstractHolidayCalendar.rule_from_name(self,name)
pandas.tseries.holiday.Holiday(self,name,year=None,month=None,day=None,offset=None,observance=None,start_date=None,end_date=None,days_of_week=None)
pandas.tseries.holiday.Holiday.__init__(self,name,year=None,month=None,day=None,offset=None,observance=None,start_date=None,end_date=None,days_of_week=None)
pandas.tseries.holiday.Holiday.__repr__(self)->str
pandas.tseries.holiday.Holiday._apply_rule(self,dates)
pandas.tseries.holiday.Holiday._reference_dates(self,start_date,end_date)
pandas.tseries.holiday.Holiday.dates(self,start_date,end_date,return_name=False)
pandas.tseries.holiday.HolidayCalendarFactory(name,base,other,base_class=AbstractHolidayCalendar)
pandas.tseries.holiday.HolidayCalendarMetaClass(cls,clsname,bases,attrs)
pandas.tseries.holiday.HolidayCalendarMetaClass.__new__(cls,clsname,bases,attrs)
pandas.tseries.holiday.USFederalHolidayCalendar(AbstractHolidayCalendar)
pandas.tseries.holiday.after_nearest_workday(dt)
pandas.tseries.holiday.before_nearest_workday(dt)
pandas.tseries.holiday.get_calendar(name)
pandas.tseries.holiday.nearest_workday(dt)
pandas.tseries.holiday.next_monday(dt)
pandas.tseries.holiday.next_monday_or_tuesday(dt)
pandas.tseries.holiday.next_workday(dt)
pandas.tseries.holiday.previous_friday(dt)
pandas.tseries.holiday.previous_workday(dt)
pandas.tseries.holiday.register(cls)
pandas.tseries.holiday.sunday_to_monday(dt)
pandas.tseries.holiday.weekend_to_monday(dt)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/api/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/api/extensions/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/api/indexers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/api/types/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/errors/__init__.py----------------------------------------
pandas.errors.__init__.AbstractMethodError(self,class_instance,methodtype='method')
pandas.errors.__init__.AbstractMethodError.__init__(self,class_instance,methodtype='method')
pandas.errors.__init__.AbstractMethodError.__str__(self)->str
pandas.errors.__init__.AccessorRegistrationWarning(Warning)
pandas.errors.__init__.DtypeWarning(Warning)
pandas.errors.__init__.EmptyDataError(ValueError)
pandas.errors.__init__.MergeError(ValueError)
pandas.errors.__init__.ParserError(ValueError)
pandas.errors.__init__.ParserWarning(Warning)
pandas.errors.__init__.PerformanceWarning(Warning)
pandas.errors.__init__.UnsortedIndexError(KeyError)
pandas.errors.__init__.UnsupportedFunctionCall(ValueError)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/_libs/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/_libs/tslibs/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/_libs/window/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/_config/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/_config/config.py----------------------------------------
A:pandas._config.config.DeprecatedOption->namedtuple('DeprecatedOption', 'key msg rkey removal_ver')
A:pandas._config.config.RegisteredOption->namedtuple('RegisteredOption', 'key defval doc validator cb')
A:pandas._config.config.keys->sorted(_registered_options.keys())
A:pandas._config.config.key->key.lower().lower()
A:pandas._config.config.(root, k)->_get_root(key)
A:pandas._config.config.nargs->len(args)
A:pandas._config.config.silent->kwargs.pop('silent', False)
A:pandas._config.config.o->_get_registered_option(k)
A:pandas._config.config.s->'\n'.join(ls)
A:pandas._config.config.prefix->object.__getattribute__(self, 'prefix')
A:pandas._config.config.opts_desc->_describe_option('all', _print_desc=False)
A:pandas._config.config.opts_list->pp_options_list(list(_registered_options.keys()))
A:pandas._config.config.get_option->wrap(get_option)
A:pandas._config.config.set_option->wrap(set_option)
A:pandas._config.config.reset_option->CallableDynamicDoc(_reset_option, _reset_option_tmpl)
A:pandas._config.config.describe_option->CallableDynamicDoc(_describe_option, _describe_option_tmpl)
A:pandas._config.config.options->DictWrapper(_global_config)
A:pandas._config.config.self.ops->list(zip(args[::2], args[1::2]))
A:pandas._config.config.path->key.lower().lower().split('.')
A:pandas._config.config._registered_options[key]->RegisteredOption(key=key, defval=defval, doc=doc, validator=validator, cb=cb)
A:pandas._config.config._deprecated_options[key]->DeprecatedOption(key, msg, rkey, removal_ver)
A:pandas._config.config.d->_get_deprecated_option(k)
A:pandas._config.config.ls->wrap(', '.join(ks), width, initial_indent=pfx, subsequent_indent='  ', break_long_words=False)
A:pandas._config.config.register_option->wrap(register_option)
A:pandas._config.config._type->tuple(_type)
A:pandas._config.config.type_repr->'|'.join(map(str, _type))
A:pandas._config.config.pp_values->'|'.join(uvals)
A:pandas._config.config.is_int->is_type_factory(int)
A:pandas._config.config.is_bool->is_type_factory(bool)
A:pandas._config.config.is_float->is_type_factory(float)
A:pandas._config.config.is_str->is_type_factory(str)
A:pandas._config.config.is_text->is_instance_factory((str, bytes))
pandas._config.config.CallableDynamicDoc(self,func,doc_tmpl)
pandas._config.config.CallableDynamicDoc.__doc__(self)
pandas._config.config.CallableDynamicDoc.__init__(self,func,doc_tmpl)
pandas._config.config.DictWrapper(self,d,prefix='')
pandas._config.config.DictWrapper.__dir__(self)
pandas._config.config.DictWrapper.__getattr__(self,key:str)
pandas._config.config.DictWrapper.__init__(self,d,prefix='')
pandas._config.config.DictWrapper.__setattr__(self,key,val)
pandas._config.config.OptionError(AttributeError,KeyError)
pandas._config.config._build_option_description(k)
pandas._config.config._describe_option(pat='',_print_desc=True)
pandas._config.config._get_deprecated_option(key)
pandas._config.config._get_option(pat,silent=False)
pandas._config.config._get_registered_option(key)
pandas._config.config._get_root(key)
pandas._config.config._get_single_key(pat,silent)
pandas._config.config._is_deprecated(key)
pandas._config.config._reset_option(pat,silent=False)
pandas._config.config._select_options(pat)
pandas._config.config._set_option(*args,**kwargs)
pandas._config.config._translate_key(key)
pandas._config.config._warn_if_deprecated(key)
pandas._config.config.config_prefix(prefix)
pandas._config.config.deprecate_option(key,msg=None,rkey=None,removal_ver=None)
pandas._config.config.get_default_val(pat)
pandas._config.config.is_callable(obj)
pandas._config.config.is_instance_factory(_type)
pandas._config.config.is_nonnegative_int(value)
pandas._config.config.is_one_of_factory(legal_values)
pandas._config.config.is_type_factory(_type)
pandas._config.config.option_context(self,*args)
pandas._config.config.option_context.__enter__(self)
pandas._config.config.option_context.__exit__(self,*args)
pandas._config.config.option_context.__init__(self,*args)
pandas._config.config.pp_options_list(keys,width=80,_print=False)
pandas._config.config.register_option(key:str,defval:object,doc='',validator=None,cb=None)
pandas.option_context(self,*args)
pandas.option_context.__enter__(self)
pandas.option_context.__exit__(self,*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/_config/dates.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/_config/display.py----------------------------------------
A:pandas._config.display.encoding->sys.getdefaultencoding()
A:pandas._config.display._initial_defencoding->sys.getdefaultencoding()
pandas._config.detect_console_encoding()
pandas._config.display.detect_console_encoding()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/_config/localization.py----------------------------------------
A:pandas._config.localization.current_locale->locale.getlocale()
A:pandas._config.localization.normalized_locale->locale.getlocale()
A:pandas._config.localization.raw_locales->raw_locales.split(b'\n').split(b'\n')
A:pandas._config.localization.pattern->re.compile(f'{prefix}.*')
A:pandas._config.localization.found->re.compile(f'{prefix}.*').findall('\n'.join(out_locales))
pandas._config.localization._default_locale_getter()
pandas._config.localization._valid_locales(locales,normalize)
pandas._config.localization.can_set_locale(lc,lc_var=locale.LC_ALL)
pandas._config.localization.get_locales(prefix=None,normalize=True,locale_getter=_default_locale_getter)
pandas._config.localization.set_locale(new_locale,lc_var=locale.LC_ALL)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/util/__init__.py----------------------------------------
A:pandas.util.__init__.testing->_testing()


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/util/_doctools.py----------------------------------------
A:pandas.util._doctools.vcells->max([self._shape(l)[0] for l in left] + [self._shape(right)[0]])
A:pandas.util._doctools.hcells->sum([self._shape(l)[1] for l in left] + [self._shape(right)[1]])
A:pandas.util._doctools.right->self._conv(right)
A:pandas.util._doctools.(hcells, vcells)->self._get_cells(left, right, vertical)
A:pandas.util._doctools.fig->matplotlib.pyplot.figure(figsize=figsize)
A:pandas.util._doctools.gs->matplotlib.gridspec.GridSpec(1, hcells)
A:pandas.util._doctools.max_left_cols->max((self._shape(l)[1] for l in left))
A:pandas.util._doctools.max_left_rows->max((self._shape(l)[0] for l in left))
A:pandas.util._doctools.ax->matplotlib.pyplot.subplot(gs[0, i:])
A:pandas.util._doctools.max_rows->max((self._shape(df)[0] for df in left + [right]))
A:pandas.util._doctools.sp->self._shape(l)
A:pandas.util._doctools.data->pandas.concat([col_df, data])
A:pandas.util._doctools.col->pandas.MultiIndex.from_tuples([(1, 'A'), (1, 'B')])
A:pandas.util._doctools.col_df->pandas.DataFrame(values)
A:pandas.util._doctools.df->self._insert_index(df)
A:pandas.util._doctools.tb->pandas.plotting.table(ax, df, loc=9)
A:pandas.util._doctools.props->pandas.plotting.table(ax, df, loc=9).properties()
A:pandas.util._doctools.p->TablePlotter()
A:pandas.util._doctools.df1->pandas.DataFrame({'A': [10, 11, 12], 'B': [20, 21, 22], 'C': [30, 31, 32]})
A:pandas.util._doctools.df2->pandas.DataFrame({'A': [10, 12], 'C': [30, 32]})
A:pandas.util._doctools.df3->pandas.DataFrame({'v1': [1, 2, 3, 4, 5, 6], 'v2': [5, 6, 7, 8, 9, 10]}, index=idx)
A:pandas.util._doctools.idx->pandas.MultiIndex.from_tuples([(1, 'A'), (1, 'B'), (1, 'C'), (2, 'A'), (2, 'B'), (2, 'C')])
pandas.util._doctools.TablePlotter(self,cell_width:float=0.37,cell_height:float=0.25,font_size:float=7.5)
pandas.util._doctools.TablePlotter.__init__(self,cell_width:float=0.37,cell_height:float=0.25,font_size:float=7.5)
pandas.util._doctools.TablePlotter._conv(self,data)
pandas.util._doctools.TablePlotter._get_cells(self,left,right,vertical)->Tuple[int, int]
pandas.util._doctools.TablePlotter._insert_index(self,data)
pandas.util._doctools.TablePlotter._make_table(self,ax,df,title:str,height:Optional[float]=None)
pandas.util._doctools.TablePlotter._shape(self,df:pd.DataFrame)->Tuple[int, int]
pandas.util._doctools.TablePlotter.plot(self,left,right,labels=None,vertical:bool=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/util/_print_versions.py----------------------------------------
A:pandas.util._print_versions.pipe->subprocess.Popen('git log --format="%H" -n 1'.split(' '), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
A:pandas.util._print_versions.(so, serr)->subprocess.Popen('git log --format="%H" -n 1'.split(' '), stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
A:pandas.util._print_versions.commit->so.decode('utf-8').strip().strip('"')
A:pandas.util._print_versions.(sysname, nodename, release, version, machine, processor)->platform.uname()
A:pandas.util._print_versions.sys_info->get_sys_info()
A:pandas.util._print_versions.mod->import_optional_dependency(modname, raise_on_missing=False, on_version='ignore')
A:pandas.util._print_versions.ver->_get_version(mod)
A:pandas.util._print_versions.j->dict(system=dict(sys_info), dependencies=dict(deps_blob))
A:pandas.util._print_versions.maxlen->max((len(x) for x in deps))
A:pandas.util._print_versions.tpl->'{{k:<{maxlen}}}: {{stat}}'.format(maxlen=maxlen)
A:pandas.util._print_versions.parser->OptionParser()
A:pandas.util._print_versions.(options, args)->OptionParser().parse_args()
pandas.show_versions(as_json=False)
pandas.util._print_versions.get_sys_info()->List[Tuple[str, Optional[Union[str, int]]]]
pandas.util._print_versions.main()->int
pandas.util._print_versions.show_versions(as_json=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/util/_exceptions.py----------------------------------------
A:pandas.util._exceptions.msg->msg.replace(old_name, new_name).replace(old_name, new_name)
pandas.util._exceptions.rewrite_exception(old_name:str,new_name:str)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/util/_decorators.py----------------------------------------
A:pandas.util._decorators.F->TypeVar('F', bound=FuncType)
A:pandas.util._decorators.(empty1, summary, empty2, doc)->alternative.__doc__.split('\n', 3)
A:pandas.util._decorators.wrapper.__doc__->dedent(f'\n        {summary.strip()}\n\n        .. deprecated:: {version}\n            {msg}\n\n        {dedent(doc)}')
A:pandas.util._decorators.old_arg_value->kwargs.pop(old_arg_name, None)
A:pandas.util._decorators.new_arg_value->mapping.get(old_arg_value, old_arg_value)
A:pandas.util._decorators.sig->inspect.Signature(params)
A:pandas.util._decorators.self.addendum->indent(addendum, indents=indents)
A:pandas.util._decorators.func.__doc__->dedent(self.join.join(docitems))
A:pandas.util._decorators.jointext->''.join(['\n'] + ['    '] * indents)
pandas.util.Appender(self,addendum:Optional[str],join:str='',indents:int=0)
pandas.util.Substitution(self,*args,**kwargs)
pandas.util.Substitution.update(self,*args,**kwargs)->None
pandas.util._decorators.Appender(self,addendum:Optional[str],join:str='',indents:int=0)
pandas.util._decorators.Appender.__init__(self,addendum:Optional[str],join:str='',indents:int=0)
pandas.util._decorators.Substitution(self,*args,**kwargs)
pandas.util._decorators.Substitution.__init__(self,*args,**kwargs)
pandas.util._decorators.Substitution.update(self,*args,**kwargs)->None
pandas.util._decorators.deprecate(name:str,alternative:Callable[...,Any],version:str,alt_name:Optional[str]=None,klass:Optional[Type[Warning]]=None,stacklevel:int=2,msg:Optional[str]=None)->Callable[..., Any]
pandas.util._decorators.deprecate_kwarg(old_arg_name:str,new_arg_name:Optional[str],mapping:Optional[Union[Mapping[Any,Any],Callable[[Any],Any]]]=None,stacklevel:int=2)->Callable[..., Any]
pandas.util._decorators.indent(text:Optional[str],indents:int=1)->str
pandas.util._decorators.rewrite_axis_style_signature(name:str,extra_params:List[Tuple[str,Any]])->Callable[..., Any]


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/util/testing.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/util/_depr_module.py----------------------------------------
A:pandas.util._depr_module.self.removals->frozenset(self.removals)
A:pandas.util._depr_module.self.self_dir->frozenset(dir(type(self)))
A:pandas.util._depr_module.deprmodule->importlib.import_module(mod)
A:pandas.util._depr_module.obj->getattr(deprmodule, name)
pandas.util._depr_module._DeprecatedModule(self,deprmod,deprmodto=None,removals=None,moved=None)
pandas.util._depr_module._DeprecatedModule.__dir__(self)->Iterable[str]
pandas.util._depr_module._DeprecatedModule.__getattr__(self,name:str)
pandas.util._depr_module._DeprecatedModule.__init__(self,deprmod,deprmodto=None,removals=None,moved=None)
pandas.util._depr_module._DeprecatedModule.__repr__(self)->str
pandas.util._depr_module._DeprecatedModule._import_deprmod(self,mod=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/util/_tester.py----------------------------------------
A:pandas.util._tester.PKG->os.path.dirname(os.path.dirname(__file__))
A:pandas.util._tester.joined->' '.join(cmd)
pandas.test(extra_args=None)
pandas.util._tester.test(extra_args=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/util/_validators.py----------------------------------------
A:pandas.util._validators.kwargs->dict(zip(compat_args, args))
A:pandas.util._validators.kwds->dict(zip(compat_args, args)).copy()
A:pandas.util._validators.args_dict->dict(zip(compat_args, args))
A:pandas.util._validators.axis->data._get_axis_name(kwargs.get('axis', 0))
A:pandas.util._validators.ax->data._get_axis_name(k)
A:pandas.util._validators.method->clean_fill_method(method)
A:pandas.util._validators.q_arr->numpy.asarray(q)
pandas.util._validators._check_arg_length(fname,args,max_fname_arg_count,compat_args)
pandas.util._validators._check_for_default_values(fname,arg_val_dict,compat_args)
pandas.util._validators._check_for_invalid_keys(fname,kwargs,compat_args)
pandas.util._validators.validate_args(fname,args,max_fname_arg_count,compat_args)
pandas.util._validators.validate_args_and_kwargs(fname,args,kwargs,max_fname_arg_count,compat_args)
pandas.util._validators.validate_axis_style_args(data,args,kwargs,arg_name,method_name)
pandas.util._validators.validate_bool_kwarg(value,arg_name)
pandas.util._validators.validate_fillna_kwargs(value,method,validate_scalar_dict_value=True)
pandas.util._validators.validate_kwargs(fname,kwargs,compat_args)
pandas.util._validators.validate_percentile(q:Union[float,Iterable[float]])->np.ndarray


----------------------------------------/dataset/nuaa/anaconda3/envs/pandas1.0.4/lib/python3.6/site-packages/pandas/util/_test_decorators.py----------------------------------------
A:pandas.util._test_decorators.mod->safe_import('matplotlib')
A:pandas.util._test_decorators.version->getattr(sys.modules[mod_name], '__VERSION__')
A:pandas.util._test_decorators.tables->safe_import('tables')
A:pandas.util._test_decorators.xfail_non_writeable->pytest.mark.xfail(tables and LooseVersion(np.__version__) >= LooseVersion('1.16') and (LooseVersion(tables.__version__) < LooseVersion('3.5.1')), reason='gh-25511, gh-24839. pytables needs a release beyong 3.4.4 to support numpy 1.16x')
A:pandas.util._test_decorators.(lang, _)->locale.getlocale()
A:pandas.util._test_decorators.skip_if_no_mpl->pytest.mark.skipif(_skip_if_no_mpl(), reason='Missing matplotlib dependency')
A:pandas.util._test_decorators.skip_if_mpl->pytest.mark.skipif(not _skip_if_no_mpl(), reason='matplotlib is present')
A:pandas.util._test_decorators.skip_if_32bit->pytest.mark.skipif(is_platform_32bit(), reason='skipping for 32 bit')
A:pandas.util._test_decorators.skip_if_windows->pytest.mark.skipif(is_platform_windows(), reason='Running on Windows')
A:pandas.util._test_decorators.skip_if_windows_python_3->pytest.mark.skipif(is_platform_windows(), reason='not used on win32')
A:pandas.util._test_decorators.skip_if_has_locale->pytest.mark.skipif(_skip_if_has_locale(), reason=f'Specific locale is set {locale.getlocale()[0]}')
A:pandas.util._test_decorators.skip_if_not_us_locale->pytest.mark.skipif(_skip_if_not_us_locale(), reason=f'Specific locale is set {locale.getlocale()[0]}')
A:pandas.util._test_decorators.skip_if_no_scipy->pytest.mark.skipif(_skip_if_no_scipy(), reason='Missing SciPy requirement')
A:pandas.util._test_decorators.skip_if_no_ne->pytest.mark.skipif(not _USE_NUMEXPR, reason=f'numexpr enabled->{_USE_NUMEXPR}, installed->{_NUMEXPR_INSTALLED}')
A:pandas.util._test_decorators.fixture.__doc__->fixture.__doc__.format(*args)
A:pandas.util._test_decorators.psutil->safe_import('psutil')
A:pandas.util._test_decorators.proc->safe_import('psutil').Process()
A:pandas.util._test_decorators.flist->safe_import('psutil').Process().open_files()
A:pandas.util._test_decorators.flist2->safe_import('psutil').Process().open_files()
A:pandas.util._test_decorators.async_mark->pytest.mark.skip(reason='Missing dependency pytest-asyncio')
pandas.util._test_decorators._skip_if_has_locale()
pandas.util._test_decorators._skip_if_no_mpl()
pandas.util._test_decorators._skip_if_no_scipy()->bool
pandas.util._test_decorators._skip_if_not_us_locale()
pandas.util._test_decorators.async_mark()
pandas.util._test_decorators.check_file_leaks(func)->Callable
pandas.util._test_decorators.parametrize_fixture_doc(*args)
pandas.util._test_decorators.safe_import(mod_name:str,min_version:Optional[str]=None)
pandas.util._test_decorators.skip_if_installed(package:str)->Callable
pandas.util._test_decorators.skip_if_no(package:str,min_version:Optional[str]=None)->Callable
pandas.util._test_decorators.skip_if_np_lt(ver_str:str,reason:Optional[str]=None,*args,**kwds)->Callable

