
----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cross_validation.py----------------------------------------
A:sklearn.cross_validation.self.n->int(n)
A:sklearn.cross_validation.ind->numpy.arange(len(labels))
A:sklearn.cross_validation.train_index->numpy.logical_not(test_index)
A:sklearn.cross_validation.test_mask->self._empty_mask()
A:sklearn.cross_validation.self.n_foldsn_folds->int(n_folds)
A:sklearn.cross_validation.self.idxs->numpy.arange(n)
A:sklearn.cross_validation.rng->check_random_state(self.random_state)
A:sklearn.cross_validation.y->numpy.asarray(y)
A:sklearn.cross_validation.(unique_labels, y_inversed)->numpy.unique(y, return_inverse=True)
A:sklearn.cross_validation.label_counts->numpy.bincount(y_inversed)
A:sklearn.cross_validation.min_labels->numpy.min(label_counts)
A:sklearn.cross_validation.test_folds->numpy.zeros(n_samples, dtype=np.int)
A:sklearn.cross_validation.self.labels->numpy.array(labels, copy=True)
A:sklearn.cross_validation.self.unique_labels->numpy.unique(labels)
A:sklearn.cross_validation.self.n_unique_labels->len(self.unique_labels)
A:sklearn.cross_validation.comb->combinations(range(self.n_unique_labels), self.p)
A:sklearn.cross_validation.test_index->self._empty_mask()
A:sklearn.cross_validation.idx->numpy.array(idx)
A:sklearn.cross_validation.self.train_size->int(ceil(train_size * n))
A:sklearn.cross_validation.self.test_size->int(ceil(test_size * n))
A:sklearn.cross_validation.permutation->check_random_state(self.random_state).permutation(cls_count[i])
A:sklearn.cross_validation.train->check_random_state(self.random_state).permutation(train)
A:sklearn.cross_validation.test->check_random_state(self.random_state).permutation(test)
A:sklearn.cross_validation.(self.n_train, self.n_test)->_validate_shuffle_split(n, test_size, train_size)
A:sklearn.cross_validation.train_m->numpy.zeros(self.n, dtype=bool)
A:sklearn.cross_validation.test_m->numpy.zeros(self.n, dtype=bool)
A:sklearn.cross_validation.n_test->float(test_size)
A:sklearn.cross_validation.n_train->float(train_size)
A:sklearn.cross_validation.self.y->numpy.array(y)
A:sklearn.cross_validation.(self.classes, self.y_indices)->numpy.unique(y, return_inverse=True)
A:sklearn.cross_validation.cls_count->numpy.bincount(self.y_indices)
A:sklearn.cross_validation.n_i->numpy.round(self.n_train * p_i).astype(int)
A:sklearn.cross_validation.t_i->numpy.minimum(cls_count - n_i, np.round(self.n_test * p_i).astype(int))
A:sklearn.cross_validation.missing_idx->check_random_state(self.random_state).permutation(missing_idx)
A:sklearn.cross_validation.(X, y)->check_arrays(X, y, sparse_format='csr', allow_nans=True)
A:sklearn.cross_validation.cv->ShuffleSplit(n_samples, test_size=test_size, train_size=train_size, random_state=random_state)
A:sklearn.cross_validation.scorer->check_scoring(estimator, scoring=scoring, score_func=score_func)
A:sklearn.cross_validation.parallel->Parallel(n_jobs=n_jobs, verbose=verbose, pre_dispatch=pre_dispatch)
A:sklearn.cross_validation.scores->parallel((delayed(_fit_and_score)(clone(estimator), X, y, scorer, train, test, verbose, None, fit_params) for (train, test) in cv))
A:sklearn.cross_validation.n_samples->_num_samples(arrays[0])
A:sklearn.cross_validation.fit_params->dict([(k, np.asarray(v)[train] if hasattr(v, '__len__') and len(v) == n_samples else v) for (k, v) in fit_params.items()])
A:sklearn.cross_validation.start_time->time.time()
A:sklearn.cross_validation.(X_train, y_train)->_safe_split(estimator, X, y, train)
A:sklearn.cross_validation.(X_test, y_test)->_safe_split(estimator, X, y, test, train)
A:sklearn.cross_validation.test_score->_score(estimator, X_test, y_test, scorer)
A:sklearn.cross_validation.train_score->_score(estimator, X_train, y_train, scorer)
A:sklearn.cross_validation.X_subset->safe_indexing(X, indices)
A:sklearn.cross_validation.y_subset->safe_indexing(y, indices)
A:sklearn.cross_validation.score->_permutation_test_score(clone(estimator), X, y, cv, scorer)
A:sklearn.cross_validation.ind[this_mask]->options.pop('random_state', None).permutation(ind[this_mask])
A:sklearn.cross_validation.is_sparse->scipy.sparse.issparse(X)
A:sklearn.cross_validation.random_state->options.pop('random_state', None)
A:sklearn.cross_validation.permutation_scores->numpy.array(permutation_scores)
A:sklearn.cross_validation.n_arrays->len(arrays)
A:sklearn.cross_validation.test_size->options.pop('test_size', None)
A:sklearn.cross_validation.train_size->options.pop('train_size', None)
A:sklearn.cross_validation.arrays->check_arrays(*arrays, **options)
A:sklearn.cross_validation.(train, test)->next(iter(cv))
sklearn.cross_validation.BaseShuffleSplit(self,n,n_iter=10,test_size=0.1,train_size=None,indices=None,random_state=None,n_iterations=None)
sklearn.cross_validation.BaseShuffleSplit.__init__(self,n,n_iter=10,test_size=0.1,train_size=None,indices=None,random_state=None,n_iterations=None)
sklearn.cross_validation.BaseShuffleSplit.__iter__(self)
sklearn.cross_validation.BaseShuffleSplit._iter_indices(self)
sklearn.cross_validation.BaseShuffleSplit.indices(self)
sklearn.cross_validation.Bootstrap(self,n,n_iter=3,train_size=0.5,test_size=None,random_state=None,n_bootstraps=None)
sklearn.cross_validation.Bootstrap.__init__(self,n,n_iter=3,train_size=0.5,test_size=None,random_state=None,n_bootstraps=None)
sklearn.cross_validation.Bootstrap.__iter__(self)
sklearn.cross_validation.Bootstrap.__len__(self)
sklearn.cross_validation.Bootstrap.__repr__(self)
sklearn.cross_validation.KFold(self,n,n_folds=3,indices=None,shuffle=False,random_state=None)
sklearn.cross_validation.KFold.__init__(self,n,n_folds=3,indices=None,shuffle=False,random_state=None)
sklearn.cross_validation.KFold.__len__(self)
sklearn.cross_validation.KFold.__repr__(self)
sklearn.cross_validation.KFold._iter_test_indices(self)
sklearn.cross_validation.LeaveOneLabelOut(self,labels,indices=None)
sklearn.cross_validation.LeaveOneLabelOut.__init__(self,labels,indices=None)
sklearn.cross_validation.LeaveOneLabelOut.__len__(self)
sklearn.cross_validation.LeaveOneLabelOut.__repr__(self)
sklearn.cross_validation.LeaveOneLabelOut._iter_test_masks(self)
sklearn.cross_validation.LeaveOneOut(_PartitionIterator)
sklearn.cross_validation.LeaveOneOut.__len__(self)
sklearn.cross_validation.LeaveOneOut.__repr__(self)
sklearn.cross_validation.LeaveOneOut._iter_test_indices(self)
sklearn.cross_validation.LeavePLabelOut(self,labels,p,indices=None)
sklearn.cross_validation.LeavePLabelOut.__init__(self,labels,p,indices=None)
sklearn.cross_validation.LeavePLabelOut.__len__(self)
sklearn.cross_validation.LeavePLabelOut.__repr__(self)
sklearn.cross_validation.LeavePLabelOut._iter_test_masks(self)
sklearn.cross_validation.LeavePOut(self,n,p,indices=None)
sklearn.cross_validation.LeavePOut.__init__(self,n,p,indices=None)
sklearn.cross_validation.LeavePOut.__len__(self)
sklearn.cross_validation.LeavePOut.__repr__(self)
sklearn.cross_validation.LeavePOut._iter_test_indices(self)
sklearn.cross_validation.ShuffleSplit(BaseShuffleSplit)
sklearn.cross_validation.ShuffleSplit.__len__(self)
sklearn.cross_validation.ShuffleSplit.__repr__(self)
sklearn.cross_validation.ShuffleSplit._iter_indices(self)
sklearn.cross_validation.StratifiedKFold(self,y,n_folds=3,indices=None,shuffle=False,random_state=None)
sklearn.cross_validation.StratifiedKFold.__init__(self,y,n_folds=3,indices=None,shuffle=False,random_state=None)
sklearn.cross_validation.StratifiedKFold.__len__(self)
sklearn.cross_validation.StratifiedKFold.__repr__(self)
sklearn.cross_validation.StratifiedKFold._iter_test_masks(self)
sklearn.cross_validation.StratifiedShuffleSplit(self,y,n_iter=10,test_size=0.1,train_size=None,indices=None,random_state=None,n_iterations=None)
sklearn.cross_validation.StratifiedShuffleSplit.__init__(self,y,n_iter=10,test_size=0.1,train_size=None,indices=None,random_state=None,n_iterations=None)
sklearn.cross_validation.StratifiedShuffleSplit.__len__(self)
sklearn.cross_validation.StratifiedShuffleSplit.__repr__(self)
sklearn.cross_validation.StratifiedShuffleSplit._iter_indices(self)
sklearn.cross_validation._BaseKFold(self,n,n_folds,indices,shuffle,random_state)
sklearn.cross_validation._BaseKFold.__init__(self,n,n_folds,indices,shuffle,random_state)
sklearn.cross_validation._PartitionIterator(self,n,indices=None)
sklearn.cross_validation._PartitionIterator.__init__(self,n,indices=None)
sklearn.cross_validation._PartitionIterator.__iter__(self)
sklearn.cross_validation._PartitionIterator._empty_mask(self)
sklearn.cross_validation._PartitionIterator._iter_test_indices(self)
sklearn.cross_validation._PartitionIterator._iter_test_masks(self)
sklearn.cross_validation._PartitionIterator.indices(self)
sklearn.cross_validation._check_cv(cv,X=None,y=None,classifier=False,warn_mask=False)
sklearn.cross_validation._fit_and_score(estimator,X,y,scorer,train,test,verbose,parameters,fit_params,return_train_score=False,return_parameters=False)
sklearn.cross_validation._permutation_test_score(estimator,X,y,cv,scorer)
sklearn.cross_validation._safe_split(estimator,X,y,indices,train_indices=None)
sklearn.cross_validation._score(estimator,X_test,y_test,scorer)
sklearn.cross_validation._shuffle(y,labels,random_state)
sklearn.cross_validation._validate_shuffle_split(n,test_size,train_size)
sklearn.cross_validation.check_cv(cv,X=None,y=None,classifier=False)
sklearn.cross_validation.cross_val_score(estimator,X,y=None,scoring=None,cv=None,n_jobs=1,verbose=0,fit_params=None,score_func=None,pre_dispatch='2*n_jobs')
sklearn.cross_validation.permutation_test_score(estimator,X,y,score_func=None,cv=None,n_permutations=100,n_jobs=1,labels=None,random_state=0,verbose=0,scoring=None)
sklearn.cross_validation.train_test_split(*arrays,**options)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/isotonic.py----------------------------------------
A:sklearn.isotonic.(rho, _)->spearmanr(x, y)
A:sklearn.isotonic.rho_0->math.tanh(F - 1.96 * F_se)
A:sklearn.isotonic.rho_1->math.tanh(F + 1.96 * F_se)
A:sklearn.isotonic.y->as_float_array(y)
A:sklearn.isotonic.sample_weight->numpy.copy(sample_weight)
A:sklearn.isotonic.solution->numpy.empty(len(y))
A:sklearn.isotonic.y_->_isotonic_regression(y, sample_weight, solution)
A:sklearn.isotonic.self.f_->scipy.interpolate.interp1d(X, y, kind='linear', bounds_error=bounds_error)
A:sklearn.isotonic.(X, y, sample_weight)->check_arrays(X, y, sample_weight, sparse_format='dense')
A:sklearn.isotonic.self.increasing_->check_increasing(X, y)
A:sklearn.isotonic.order->numpy.lexsort((y, X))
A:sklearn.isotonic.order_inv->self._build_y(X, y, sample_weight)
A:sklearn.isotonic.self.X_->as_float_array(X[order], copy=False)
A:sklearn.isotonic.self.y_->isotonic_regression(y[order], sample_weight, self.y_min, self.y_max, increasing=self.increasing_)
A:sklearn.isotonic.self.X_min_->numpy.min(self.X_)
A:sklearn.isotonic.self.X_max_->numpy.max(self.X_)
A:sklearn.isotonic.T->numpy.clip(T, self.X_min_, self.X_max_)
sklearn.isotonic.IsotonicRegression(self,y_min=None,y_max=None,increasing=True,out_of_bounds='nan')
sklearn.isotonic.IsotonicRegression.__init__(self,y_min=None,y_max=None,increasing=True,out_of_bounds='nan')
sklearn.isotonic.IsotonicRegression._build_f(self,X,y)
sklearn.isotonic.IsotonicRegression._build_y(self,X,y,sample_weight)
sklearn.isotonic.IsotonicRegression._check_fit_data(self,X,y,sample_weight=None)
sklearn.isotonic.IsotonicRegression.fit(self,X,y,sample_weight=None,weight=None)
sklearn.isotonic.IsotonicRegression.fit_transform(self,X,y,sample_weight=None,weight=None)
sklearn.isotonic.IsotonicRegression.predict(self,T)
sklearn.isotonic.IsotonicRegression.transform(self,T)
sklearn.isotonic.check_increasing(x,y)
sklearn.isotonic.isotonic_regression(y,sample_weight=None,y_min=None,y_max=None,weight=None,increasing=True)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/multiclass.py----------------------------------------
A:sklearn.multiclass.unique_y->numpy.unique(y)
A:sklearn.multiclass.estimator->clone(estimator)
A:sklearn.multiclass.score->_predict_binary(estimators[k], X)
A:sklearn.multiclass.lb->LabelBinarizer()
A:sklearn.multiclass.Y->numpy.array([code_book[cls_idx[y[i]]] for i in range(X.shape[0])], dtype=np.int)
A:sklearn.multiclass.estimators->Parallel(n_jobs=n_jobs)((delayed(_fit_binary)(estimator, X, Y[:, i]) for i in range(Y.shape[1])))
A:sklearn.multiclass.(self.estimators_, self.label_binarizer_)->fit_ovr(self.estimator, X, y, n_jobs=self.n_jobs)
A:sklearn.multiclass.cond->numpy.logical_or(y == i, y == j)
A:sklearn.multiclass.y_binary->numpy.empty(y.shape, np.int)
A:sklearn.multiclass.ind->numpy.arange(X.shape[0])
A:sklearn.multiclass.classes->numpy.unique(y)
A:sklearn.multiclass.votes->numpy.zeros((n_samples, n_classes))
A:sklearn.multiclass.scores->numpy.zeros((n_samples, n_classes))
A:sklearn.multiclass.pred->euclidean_distances(Y, code_book).argmin(axis=1)
A:sklearn.multiclass.prediction->numpy.zeros((n_samples, n_classes)).argmax(axis=1)
A:sklearn.multiclass.(self.estimators_, self.classes_)->fit_ovo(self.estimator, X, y, self.n_jobs)
A:sklearn.multiclass.random_state->check_random_state(random_state)
A:sklearn.multiclass.code_size->int(n_classes * code_size)
A:sklearn.multiclass.code_book->check_random_state(random_state).random_sample((n_classes, code_size))
A:sklearn.multiclass.cls_idx->dict(((c, i) for (i, c) in enumerate(classes)))
A:sklearn.multiclass.(self.estimators_, self.classes_, self.code_book_)->fit_ecoc(self.estimator, X, y, self.code_size, self.random_state, self.n_jobs)
sklearn.multiclass.OneVsOneClassifier(self,estimator,n_jobs=1)
sklearn.multiclass.OneVsOneClassifier.__init__(self,estimator,n_jobs=1)
sklearn.multiclass.OneVsOneClassifier.fit(self,X,y)
sklearn.multiclass.OneVsOneClassifier.predict(self,X)
sklearn.multiclass.OneVsRestClassifier(self,estimator,n_jobs=1)
sklearn.multiclass.OneVsRestClassifier.__init__(self,estimator,n_jobs=1)
sklearn.multiclass.OneVsRestClassifier._check_is_fitted(self)
sklearn.multiclass.OneVsRestClassifier.classes_(self)
sklearn.multiclass.OneVsRestClassifier.coef_(self)
sklearn.multiclass.OneVsRestClassifier.decision_function(self,X)
sklearn.multiclass.OneVsRestClassifier.fit(self,X,y)
sklearn.multiclass.OneVsRestClassifier.intercept_(self)
sklearn.multiclass.OneVsRestClassifier.multilabel_(self)
sklearn.multiclass.OneVsRestClassifier.predict(self,X)
sklearn.multiclass.OneVsRestClassifier.predict_proba(self,X)
sklearn.multiclass.OneVsRestClassifier.score(self,X,y)
sklearn.multiclass.OutputCodeClassifier(self,estimator,code_size=1.5,random_state=None,n_jobs=1)
sklearn.multiclass.OutputCodeClassifier.__init__(self,estimator,code_size=1.5,random_state=None,n_jobs=1)
sklearn.multiclass.OutputCodeClassifier.fit(self,X,y)
sklearn.multiclass.OutputCodeClassifier.predict(self,X)
sklearn.multiclass._ConstantPredictor(BaseEstimator)
sklearn.multiclass._ConstantPredictor.decision_function(self,X)
sklearn.multiclass._ConstantPredictor.fit(self,X,y)
sklearn.multiclass._ConstantPredictor.predict(self,X)
sklearn.multiclass._ConstantPredictor.predict_proba(self,X)
sklearn.multiclass._check_estimator(estimator)
sklearn.multiclass._fit_binary(estimator,X,y,classes=None)
sklearn.multiclass._fit_ovo_binary(estimator,X,y,i,j)
sklearn.multiclass._predict_binary(estimator,X)
sklearn.multiclass.fit_ecoc(estimator,X,y,code_size=1.5,random_state=None,n_jobs=1)
sklearn.multiclass.fit_ovo(estimator,X,y,n_jobs=1)
sklearn.multiclass.fit_ovr(estimator,X,y,n_jobs=1)
sklearn.multiclass.predict_ecoc(estimators,classes,code_book,X)
sklearn.multiclass.predict_ovo(estimators,classes,X)
sklearn.multiclass.predict_ovr(estimators,label_binarizer,X)
sklearn.multiclass.predict_proba_ovr(estimators,X,is_multilabel)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/learning_curve.py----------------------------------------
A:sklearn.learning_curve.(X, y)->check_arrays(X, y, sparse_format='csr', allow_lists=True)
A:sklearn.learning_curve.cv->_check_cv(cv, X, y, classifier=is_classifier(estimator))
A:sklearn.learning_curve.scorer->check_scoring(estimator, scoring=scoring)
A:sklearn.learning_curve.n_max_training_samples->len(cv[0][0])
A:sklearn.learning_curve.train_sizes_abs->numpy.unique(train_sizes_abs)
A:sklearn.learning_curve.parallel->Parallel(n_jobs=n_jobs, pre_dispatch=pre_dispatch, verbose=verbose)
A:sklearn.learning_curve.out->out.reshape(n_cv_folds, n_params, 2).transpose((2, 1, 0)).reshape(n_cv_folds, n_params, 2).transpose((2, 1, 0))
A:sklearn.learning_curve.n_min_required_samples->numpy.min(train_sizes_abs)
A:sklearn.learning_curve.n_max_required_samples->numpy.max(train_sizes_abs)
A:sklearn.learning_curve.partitions->zip(train_sizes, np.split(train, train_sizes)[:-1])
A:sklearn.learning_curve.(X_train, y_train)->_safe_split(estimator, X, y, train_subset)
A:sklearn.learning_curve.(X_partial_train, y_partial_train)->_safe_split(estimator, X, y, partial_train)
A:sklearn.learning_curve.(X_test, y_test)->_safe_split(estimator, X, y, test, train_subset)
A:sklearn.learning_curve.n_params->len(param_range)
sklearn.learning_curve._incremental_fit_estimator(estimator,X,y,classes,train,test,train_sizes,scorer,verbose)
sklearn.learning_curve._translate_train_sizes(train_sizes,n_max_training_samples)
sklearn.learning_curve.learning_curve(estimator,X,y,train_sizes=np.linspace(0.1,1.0,5),cv=None,scoring=None,exploit_incremental_learning=False,n_jobs=1,pre_dispatch='all',verbose=0)
sklearn.learning_curve.validation_curve(estimator,X,y,param_name,param_range,cv=None,scoring=None,n_jobs=1,pre_dispatch='all',verbose=0)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/kernel_approximation.py----------------------------------------
A:sklearn.kernel_approximation.X->numpy.asarray(X)
A:sklearn.kernel_approximation.random_state->check_random_state(self.random_state)
A:sklearn.kernel_approximation.self.random_offset_->check_random_state(self.random_state).uniform(0, 2 * np.pi, size=self.n_components)
A:sklearn.kernel_approximation.projection->safe_sparse_dot(X, self.random_weights_)
A:sklearn.kernel_approximation.uniform->check_random_state(self.random_state).uniform(size=(n_features, self.n_components))
A:sklearn.kernel_approximation.sparse->scipy.sparse.issparse(X)
A:sklearn.kernel_approximation.X_step->scipy.sparse.csr_matrix((data_step, indices, indptr), shape=X.shape, dtype=X.dtype, copy=False)
A:sklearn.kernel_approximation.X_step[non_zero]->numpy.sqrt(X_nz * self.sample_interval_)
A:sklearn.kernel_approximation.factor_nz->numpy.sqrt(step_nz / np.cosh(np.pi * j * self.sample_interval_))
A:sklearn.kernel_approximation.indices->numpy.asarray(X).indices.copy()
A:sklearn.kernel_approximation.indptr->numpy.asarray(X).indptr.copy()
A:sklearn.kernel_approximation.data_step->numpy.sqrt(X.data * self.sample_interval_)
A:sklearn.kernel_approximation.rnd->check_random_state(self.random_state)
A:sklearn.kernel_approximation.n_components->min(n_samples, n_components)
A:sklearn.kernel_approximation.inds->check_random_state(self.random_state).permutation(n_samples)
A:sklearn.kernel_approximation.basis_kernel->pairwise_kernels(basis, metric=self.kernel, filter_params=True, **self._get_kernel_params())
A:sklearn.kernel_approximation.(U, S, V)->svd(basis_kernel)
A:sklearn.kernel_approximation.self.normalization_->numpy.dot(U * 1.0 / np.sqrt(S), V)
A:sklearn.kernel_approximation.embedded->pairwise_kernels(X, self.components_, metric=self.kernel, filter_params=True, **self._get_kernel_params())
sklearn.kernel_approximation.AdditiveChi2Sampler(self,sample_steps=2,sample_interval=None)
sklearn.kernel_approximation.AdditiveChi2Sampler.__init__(self,sample_steps=2,sample_interval=None)
sklearn.kernel_approximation.AdditiveChi2Sampler._transform_dense(self,X)
sklearn.kernel_approximation.AdditiveChi2Sampler._transform_sparse(self,X)
sklearn.kernel_approximation.AdditiveChi2Sampler.fit(self,X,y=None)
sklearn.kernel_approximation.AdditiveChi2Sampler.transform(self,X,y=None)
sklearn.kernel_approximation.Nystroem(self,kernel='rbf',gamma=None,coef0=1,degree=3,kernel_params=None,n_components=100,random_state=None)
sklearn.kernel_approximation.Nystroem.__init__(self,kernel='rbf',gamma=None,coef0=1,degree=3,kernel_params=None,n_components=100,random_state=None)
sklearn.kernel_approximation.Nystroem._get_kernel_params(self)
sklearn.kernel_approximation.Nystroem.fit(self,X,y=None)
sklearn.kernel_approximation.Nystroem.transform(self,X)
sklearn.kernel_approximation.RBFSampler(self,gamma=1.0,n_components=100,random_state=None)
sklearn.kernel_approximation.RBFSampler.__init__(self,gamma=1.0,n_components=100,random_state=None)
sklearn.kernel_approximation.RBFSampler.fit(self,X,y=None)
sklearn.kernel_approximation.RBFSampler.transform(self,X,y=None)
sklearn.kernel_approximation.SkewedChi2Sampler(self,skewedness=1.0,n_components=100,random_state=None)
sklearn.kernel_approximation.SkewedChi2Sampler.__init__(self,skewedness=1.0,n_components=100,random_state=None)
sklearn.kernel_approximation.SkewedChi2Sampler.fit(self,X,y=None)
sklearn.kernel_approximation.SkewedChi2Sampler.transform(self,X,y=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/dummy.py----------------------------------------
A:sklearn.dummy.y->numpy.ravel(y)
A:sklearn.dummy.constant->numpy.reshape(np.atleast_1d(self.constant), (-1, 1))
A:sklearn.dummy.(classes, y_k)->numpy.unique(y[:, k], return_inverse=True)
A:sklearn.dummy.X->safe_asarray(X)
A:sklearn.dummy.n_samples->int(X.shape[0])
A:sklearn.dummy.rs->check_random_state(self.random_state)
A:sklearn.dummy.proba->self.predict_proba(X)
A:sklearn.dummy.ret->check_random_state(self.random_state).randint(n_classes_[k], size=n_samples)
A:sklearn.dummy.out->numpy.zeros((n_samples, n_classes_[k]), dtype=np.float64)
A:sklearn.dummy.ind->numpy.where(classes_[k] == constant[k])
A:sklearn.dummy.self.constant_->numpy.reshape(self.constant, (1, -1))
A:sklearn.dummy.self.constant->safe_asarray(self.constant)
A:sklearn.dummy.self.n_outputs_->numpy.size(self.constant_)
sklearn.dummy.DummyClassifier(self,strategy='stratified',random_state=None,constant=None)
sklearn.dummy.DummyClassifier.__init__(self,strategy='stratified',random_state=None,constant=None)
sklearn.dummy.DummyClassifier.fit(self,X,y)
sklearn.dummy.DummyClassifier.predict(self,X)
sklearn.dummy.DummyClassifier.predict_log_proba(self,X)
sklearn.dummy.DummyClassifier.predict_proba(self,X)
sklearn.dummy.DummyRegressor(self,strategy='mean',constant=None)
sklearn.dummy.DummyRegressor.__init__(self,strategy='mean',constant=None)
sklearn.dummy.DummyRegressor.fit(self,X,y)
sklearn.dummy.DummyRegressor.predict(self,X)
sklearn.dummy.DummyRegressor.y_mean_(self)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/naive_bayes.py----------------------------------------
A:sklearn.naive_bayes.jll->safe_sparse_dot(X, (self.feature_log_prob_ - neg_prob).T)
A:sklearn.naive_bayes.log_prob_x->logsumexp(jll, axis=1)
A:sklearn.naive_bayes.(X, y)->check_arrays(X, y, sparse_format='csr')
A:sklearn.naive_bayes.y->column_or_1d(y, warn=True)
A:sklearn.naive_bayes.self.classes_unique_y->numpy.unique(y)
A:sklearn.naive_bayes.self.theta_->numpy.zeros((n_classes, n_features))
A:sklearn.naive_bayes.self.sigma_->numpy.zeros((n_classes, n_features))
A:sklearn.naive_bayes.self.class_prior_->numpy.zeros(n_classes)
A:sklearn.naive_bayes.self.theta_[i, :]->numpy.mean(Xi, axis=0)
A:sklearn.naive_bayes.X->binarize(X, threshold=self.binarize)
A:sklearn.naive_bayes.jointi->numpy.log(self.class_prior_[i])
A:sklearn.naive_bayes.n_classes->len(self.classes_)
A:sklearn.naive_bayes.self.class_log_prior_->numpy.log(class_prior)
A:sklearn.naive_bayes.self.class_count_->numpy.zeros(n_effective_classes, dtype=np.float64)
A:sklearn.naive_bayes.self.feature_count_->numpy.zeros((n_effective_classes, n_features), dtype=np.float64)
A:sklearn.naive_bayes.Y->Y.astype(np.float64).astype(np.float64)
A:sklearn.naive_bayes.labelbin->LabelBinarizer()
A:sklearn.naive_bayes.coef_->property(_get_coef)
A:sklearn.naive_bayes.intercept_->property(_get_intercept)
A:sklearn.naive_bayes.smoothed_cc->smoothed_fc.sum(axis=1)
A:sklearn.naive_bayes.neg_prob->numpy.log(1 - np.exp(self.feature_log_prob_))
sklearn.naive_bayes.BaseDiscreteNB(BaseNB)
sklearn.naive_bayes.BaseDiscreteNB._get_coef(self)
sklearn.naive_bayes.BaseDiscreteNB._get_intercept(self)
sklearn.naive_bayes.BaseDiscreteNB._update_class_log_prior(self,class_prior=None)
sklearn.naive_bayes.BaseDiscreteNB.fit(self,X,y,sample_weight=None)
sklearn.naive_bayes.BaseDiscreteNB.partial_fit(self,X,y,classes=None,sample_weight=None)
sklearn.naive_bayes.BaseNB(six.with_metaclass(ABCMeta,BaseEstimator,ClassifierMixin))
sklearn.naive_bayes.BaseNB._joint_log_likelihood(self,X)
sklearn.naive_bayes.BaseNB.predict(self,X)
sklearn.naive_bayes.BaseNB.predict_log_proba(self,X)
sklearn.naive_bayes.BaseNB.predict_proba(self,X)
sklearn.naive_bayes.BernoulliNB(self,alpha=1.0,binarize=0.0,fit_prior=True,class_prior=None)
sklearn.naive_bayes.BernoulliNB.__init__(self,alpha=1.0,binarize=0.0,fit_prior=True,class_prior=None)
sklearn.naive_bayes.BernoulliNB._count(self,X,Y)
sklearn.naive_bayes.BernoulliNB._joint_log_likelihood(self,X)
sklearn.naive_bayes.BernoulliNB._update_feature_log_prob(self)
sklearn.naive_bayes.GaussianNB(BaseNB)
sklearn.naive_bayes.GaussianNB._joint_log_likelihood(self,X)
sklearn.naive_bayes.GaussianNB.fit(self,X,y)
sklearn.naive_bayes.MultinomialNB(self,alpha=1.0,fit_prior=True,class_prior=None)
sklearn.naive_bayes.MultinomialNB.__init__(self,alpha=1.0,fit_prior=True,class_prior=None)
sklearn.naive_bayes.MultinomialNB._count(self,X,Y)
sklearn.naive_bayes.MultinomialNB._joint_log_likelihood(self,X)
sklearn.naive_bayes.MultinomialNB._update_feature_log_prob(self)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/pipeline.py----------------------------------------
A:sklearn.pipeline.self.named_steps->dict(steps)
A:sklearn.pipeline.(names, estimators)->zip(*steps)
A:sklearn.pipeline.self.steps->tosequence(zip(names, estimators))
A:sklearn.pipeline.out->dict(self.transformer_list)
A:sklearn.pipeline.fit_params_steps->dict(((step, {}) for (step, _) in self.steps))
A:sklearn.pipeline.(step, param)->pname.split('__', 1)
A:sklearn.pipeline.Xt->transform.transform(Xt)
A:sklearn.pipeline.(Xt, fit_params)->self._pre_transform(X, y, **fit_params)
A:sklearn.pipeline.namecount->defaultdict(int)
A:sklearn.pipeline.X_transformed->transformer.fit(X, y, **fit_params).transform(X)
A:sklearn.pipeline.transformers->Parallel(n_jobs=self.n_jobs)((delayed(_fit_one_transformer)(trans, X, y) for (name, trans) in self.transformer_list))
A:sklearn.pipeline.result->Parallel(n_jobs=self.n_jobs)((delayed(_fit_transform_one)(trans, name, X, y, self.transformer_weights, **fit_params) for (name, trans) in self.transformer_list))
A:sklearn.pipeline.(Xs, transformers)->zip(*result)
A:sklearn.pipeline.Xs->numpy.hstack(Xs)
sklearn.pipeline.FeatureUnion(self,transformer_list,n_jobs=1,transformer_weights=None)
sklearn.pipeline.FeatureUnion.__init__(self,transformer_list,n_jobs=1,transformer_weights=None)
sklearn.pipeline.FeatureUnion._update_transformer_list(self,transformers)
sklearn.pipeline.FeatureUnion.fit(self,X,y=None)
sklearn.pipeline.FeatureUnion.fit_transform(self,X,y=None,**fit_params)
sklearn.pipeline.FeatureUnion.get_feature_names(self)
sklearn.pipeline.FeatureUnion.get_params(self,deep=True)
sklearn.pipeline.FeatureUnion.transform(self,X)
sklearn.pipeline.Pipeline(self,steps)
sklearn.pipeline.Pipeline.__init__(self,steps)
sklearn.pipeline.Pipeline._pairwise(self)
sklearn.pipeline.Pipeline._pre_transform(self,X,y=None,**fit_params)
sklearn.pipeline.Pipeline.decision_function(self,X)
sklearn.pipeline.Pipeline.fit(self,X,y=None,**fit_params)
sklearn.pipeline.Pipeline.fit_transform(self,X,y=None,**fit_params)
sklearn.pipeline.Pipeline.get_params(self,deep=True)
sklearn.pipeline.Pipeline.inverse_transform(self,X)
sklearn.pipeline.Pipeline.predict(self,X)
sklearn.pipeline.Pipeline.predict_log_proba(self,X)
sklearn.pipeline.Pipeline.predict_proba(self,X)
sklearn.pipeline.Pipeline.score(self,X,y=None)
sklearn.pipeline.Pipeline.transform(self,X)
sklearn.pipeline._fit_one_transformer(transformer,X,y)
sklearn.pipeline._fit_transform_one(transformer,name,X,y,transformer_weights,**fit_params)
sklearn.pipeline._name_estimators(estimators)
sklearn.pipeline._transform_one(transformer,name,X,transformer_weights)
sklearn.pipeline.make_pipeline(*steps)
sklearn.pipeline.make_union(*transformers)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/base.py----------------------------------------
A:sklearn.base.estimator_type->type(estimator)
A:sklearn.base.new_object_params->_get_sub_estimator(estimator).get_params(deep=False)
A:sklearn.base.new_object_params[name]->clone(param, safe=False)
A:sklearn.base.new_object->klass(**new_object_params)
A:sklearn.base.params_set->klass(**new_object_params).get_params(deep=False)
A:sklearn.base.equality_test->numpy.all(param1 == param2)
A:sklearn.base.options->numpy.get_printoptions()
A:sklearn.base.params_list->list()
A:sklearn.base.this_line_length->len(line_sep)
A:sklearn.base.lines->'\n'.join((l.rstrip(' ') for l in lines.split('\n')))
A:sklearn.base.init->getattr(cls.__init__, 'deprecated_original', cls.__init__)
A:sklearn.base.(args, varargs, kw, default)->inspect.getargspec(init)
A:sklearn.base.out->dict()
A:sklearn.base.value->getattr(self, key, None)
A:sklearn.base.deep_items->getattr(self, key, None).get_params().items()
A:sklearn.base.valid_params->self.get_params(deep=True)
A:sklearn.base.split->key.split('__', 1)
A:sklearn.base.estimator->_get_sub_estimator(estimator)
sklearn.base.BaseEstimator(object)
sklearn.base.BaseEstimator.__repr__(self)
sklearn.base.BaseEstimator._get_param_names(cls)
sklearn.base.BaseEstimator.get_params(self,deep=True)
sklearn.base.BaseEstimator.set_params(self,**params)
sklearn.base.BiclusterMixin(object)
sklearn.base.BiclusterMixin.biclusters_(self)
sklearn.base.BiclusterMixin.get_indices(self,i)
sklearn.base.BiclusterMixin.get_shape(self,i)
sklearn.base.BiclusterMixin.get_submatrix(self,i,data)
sklearn.base.ClassifierMixin(object)
sklearn.base.ClassifierMixin.score(self,X,y,sample_weight=None)
sklearn.base.ClusterMixin(object)
sklearn.base.ClusterMixin.fit_predict(self,X,y=None)
sklearn.base.MetaEstimatorMixin(object)
sklearn.base.RegressorMixin(object)
sklearn.base.RegressorMixin.score(self,X,y,sample_weight=None)
sklearn.base.TransformerMixin(object)
sklearn.base.TransformerMixin.fit_transform(self,X,y=None,**fit_params)
sklearn.base._get_sub_estimator(estimator)
sklearn.base._pprint(params,offset=0,printer=repr)
sklearn.base.clone(estimator,safe=True)
sklearn.base.is_classifier(estimator)
sklearn.clone(estimator,safe=True)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/lda.py----------------------------------------
A:sklearn.lda.(X, y)->check_arrays(X, y, sparse_format='dense')
A:sklearn.lda.y->column_or_1d(y, warn=True)
A:sklearn.lda.(self.classes_, y)->numpy.unique(y, return_inverse=True)
A:sklearn.lda.n_classes->len(self.classes_)
A:sklearn.lda.cov->numpy.zeros((n_features, n_features))
A:sklearn.lda.meang->Xg.mean(0)
A:sklearn.lda.self.means_->numpy.asarray(means)
A:sklearn.lda.Xc->numpy.concatenate(Xc, axis=0)
A:sklearn.lda.std->numpy.concatenate(Xc, axis=0).std(axis=0)
A:sklearn.lda.(U, S, V)->scipy.linalg.svd(X, full_matrices=False)
A:sklearn.lda.rank->numpy.sum(S > tol * S[0])
A:sklearn.lda.xbar->numpy.dot(self.priors_, self.means_)
A:sklearn.lda.X->array2d(X)
A:sklearn.lda.(_, S, V)->scipy.linalg.svd(X, full_matrices=0)
A:sklearn.lda.self.scalings_->numpy.dot(scalings, V.T[:, :rank])
A:sklearn.lda.self.coef_->numpy.dot(self.means_ - self.xbar_, self.scalings_)
A:sklearn.lda.dec_func->self._decision_function(X)
A:sklearn.lda.X_new->numpy.dot(X - self.xbar_, self.scalings_)
A:sklearn.lda.d->self._decision_function(X)
A:sklearn.lda.y_pred->self.classes_.take(d.argmax(1))
A:sklearn.lda.values->self._decision_function(X)
A:sklearn.lda.likelihood->numpy.exp(values - values.max(axis=1)[:, np.newaxis])
A:sklearn.lda.normalization->logsumexp(loglikelihood, axis=1)
sklearn.lda.LDA(self,n_components=None,priors=None)
sklearn.lda.LDA.__init__(self,n_components=None,priors=None)
sklearn.lda.LDA._decision_function(self,X)
sklearn.lda.LDA.decision_function(self,X)
sklearn.lda.LDA.fit(self,X,y,store_covariance=False,tol=0.0001)
sklearn.lda.LDA.predict(self,X)
sklearn.lda.LDA.predict_log_proba(self,X)
sklearn.lda.LDA.predict_proba(self,X)
sklearn.lda.LDA.transform(self,X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/grid_search.py----------------------------------------
A:sklearn.grid_search.items->sorted(self.param_distributions.items())
A:sklearn.grid_search.(keys, values)->zip(*items)
A:sklearn.grid_search.params->dict()
A:sklearn.grid_search.product->partial(reduce, operator.mul)
A:sklearn.grid_search.rnd->check_random_state(self.random_state)
A:sklearn.grid_search.params[k]->v.rvs()
A:sklearn.grid_search.(score, n_samples_test, _)->_fit_and_score(estimator, X, y, scorer, train, test, verbose, parameters, fit_params)
A:sklearn.grid_search.self.scorer_->check_scoring(self.estimator, scoring=self.scoring, loss_func=self.loss_func, score_func=self.score_func)
A:sklearn.grid_search.n_samples->_num_samples(X)
A:sklearn.grid_search.(X, y)->check_arrays(X, y, allow_lists=True, sparse_format='csr', allow_nans=True)
A:sklearn.grid_search.cv->check_cv(cv, X, y, classifier=is_classifier(estimator))
A:sklearn.grid_search.n_candidates->len(parameter_iterable)
A:sklearn.grid_search.base_estimator->clone(self.estimator)
A:sklearn.grid_search.out->Parallel(n_jobs=self.n_jobs, verbose=self.verbose, pre_dispatch=pre_dispatch)((delayed(_fit_and_score)(clone(base_estimator), X, y, self.scorer_, train, test, self.verbose, parameters, self.fit_params, return_parameters=True) for parameters in parameter_iterable for (train, test) in cv))
A:sklearn.grid_search.n_fits->len(out)
A:sklearn.grid_search.n_folds->len(cv)
A:sklearn.grid_search.scores->list()
A:sklearn.grid_search.grid_scores->list()
A:sklearn.grid_search.best_estimator->clone(base_estimator).set_params(**best.parameters)
A:sklearn.grid_search.sampled_params->ParameterSampler(self.param_distributions, self.n_iter, random_state=self.random_state)
sklearn.grid_search.BaseSearchCV(self,estimator,scoring=None,loss_func=None,score_func=None,fit_params=None,n_jobs=1,iid=True,refit=True,cv=None,verbose=0,pre_dispatch='2*n_jobs')
sklearn.grid_search.BaseSearchCV.__init__(self,estimator,scoring=None,loss_func=None,score_func=None,fit_params=None,n_jobs=1,iid=True,refit=True,cv=None,verbose=0,pre_dispatch='2*n_jobs')
sklearn.grid_search.BaseSearchCV._fit(self,X,y,parameter_iterable)
sklearn.grid_search.BaseSearchCV.decision_function(self)
sklearn.grid_search.BaseSearchCV.predict(self)
sklearn.grid_search.BaseSearchCV.predict_proba(self)
sklearn.grid_search.BaseSearchCV.score(self,X,y=None)
sklearn.grid_search.BaseSearchCV.transform(self)
sklearn.grid_search.GridSearchCV(self,estimator,param_grid,scoring=None,loss_func=None,score_func=None,fit_params=None,n_jobs=1,iid=True,refit=True,cv=None,verbose=0,pre_dispatch='2*n_jobs')
sklearn.grid_search.GridSearchCV.__init__(self,estimator,param_grid,scoring=None,loss_func=None,score_func=None,fit_params=None,n_jobs=1,iid=True,refit=True,cv=None,verbose=0,pre_dispatch='2*n_jobs')
sklearn.grid_search.GridSearchCV.fit(self,X,y=None)
sklearn.grid_search.ParameterGrid(self,param_grid)
sklearn.grid_search.ParameterGrid.__init__(self,param_grid)
sklearn.grid_search.ParameterGrid.__iter__(self)
sklearn.grid_search.ParameterGrid.__len__(self)
sklearn.grid_search.ParameterSampler(self,param_distributions,n_iter,random_state=None)
sklearn.grid_search.ParameterSampler.__init__(self,param_distributions,n_iter,random_state=None)
sklearn.grid_search.ParameterSampler.__iter__(self)
sklearn.grid_search.ParameterSampler.__len__(self)
sklearn.grid_search.RandomizedSearchCV(self,estimator,param_distributions,n_iter=10,scoring=None,fit_params=None,n_jobs=1,iid=True,refit=True,cv=None,verbose=0,pre_dispatch='2*n_jobs',random_state=None)
sklearn.grid_search.RandomizedSearchCV.__init__(self,estimator,param_distributions,n_iter=10,scoring=None,fit_params=None,n_jobs=1,iid=True,refit=True,cv=None,verbose=0,pre_dispatch='2*n_jobs',random_state=None)
sklearn.grid_search.RandomizedSearchCV.fit(self,X,y=None)
sklearn.grid_search._CVScoreTuple(namedtuple('_CVScoreTuple',('parameters','mean_validation_score','cv_validation_scores')))
sklearn.grid_search._CVScoreTuple.__repr__(self)
sklearn.grid_search._check_param_grid(param_grid)
sklearn.grid_search.fit_grid_point(X,y,estimator,parameters,train,test,scorer,verbose,**fit_params)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/qda.py----------------------------------------
A:sklearn.qda.(X, y)->check_arrays(X, y)
A:sklearn.qda.y->column_or_1d(y, warn=True)
A:sklearn.qda.(self.classes_, y)->numpy.unique(y, return_inverse=True)
A:sklearn.qda.n_classes->len(self.classes_)
A:sklearn.qda.meang->Xg.mean(0)
A:sklearn.qda.(U, S, Vt)->numpy.linalg.svd(Xgc, full_matrices=False)
A:sklearn.qda.rank->numpy.sum(S > tol)
A:sklearn.qda.self.means_->numpy.asarray(means)
A:sklearn.qda.self.scalings_->numpy.asarray(scalings)
A:sklearn.qda.X->array2d(X)
A:sklearn.qda.X2->numpy.dot(Xm, R * S ** (-0.5))
A:sklearn.qda.dec_func->self._decision_function(X)
A:sklearn.qda.d->self._decision_function(X)
A:sklearn.qda.y_pred->self.classes_.take(d.argmax(1))
A:sklearn.qda.values->self._decision_function(X)
A:sklearn.qda.likelihood->numpy.exp(values - values.max(axis=1)[:, np.newaxis])
A:sklearn.qda.probas_->self.predict_proba(X)
sklearn.qda.QDA(self,priors=None,reg_param=0.0)
sklearn.qda.QDA.__init__(self,priors=None,reg_param=0.0)
sklearn.qda.QDA._decision_function(self,X)
sklearn.qda.QDA.decision_function(self,X)
sklearn.qda.QDA.fit(self,X,y,store_covariances=False,tol=0.0001)
sklearn.qda.QDA.predict(self,X)
sklearn.qda.QDA.predict_log_proba(self,X)
sklearn.qda.QDA.predict_proba(self,X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/setup.py----------------------------------------
A:sklearn.setup.config->Configuration('sklearn', parent_package, top_path)
A:sklearn.setup.blas_info->get_info('blas_opt', 0)
sklearn.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/_build_utils.py----------------------------------------
A:sklearn._build_utils.def_macros->get_info('blas_opt', 0).get('define_macros', [])
A:sklearn._build_utils.blas_info->get_info('blas_opt', 0)
A:sklearn._build_utils.cblas_libs->get_info('blas_opt', 0).pop('libraries', [])
sklearn._build_utils.get_blas_info()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/__init__.py----------------------------------------
A:sklearn.__init__._random_seed->int(_random_seed)
sklearn.__init__.setup_module(module)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/hmm.py----------------------------------------
A:sklearn.hmm.Asum->A.sum(axis)
A:sklearn.hmm.shape->numpy.ones(g.covars_.ndim)
A:sklearn.hmm.obs->numpy.asarray(obs)
A:sklearn.hmm.framelogprob->self._compute_log_likelihood(seq)
A:sklearn.hmm.(logprob, fwdlattice)->self._do_forward_pass(framelogprob)
A:sklearn.hmm.bwdlattice->numpy.zeros((n_observations, n_components))
A:sklearn.hmm.(logprob, _)->self._do_forward_pass(framelogprob)
A:sklearn.hmm.(viterbi_logprob, state_sequence)->self._do_viterbi_pass(framelogprob)
A:sklearn.hmm.(_, posteriors)->self.score_samples(obs)
A:sklearn.hmm.state_sequence->numpy.argmax(posteriors, axis=1)
A:sklearn.hmm.map_logprob->numpy.max(posteriors, axis=1).sum()
A:sklearn.hmm.(logprob, state_sequence)->decoder[algorithm](obs)
A:sklearn.hmm.(_, state_sequence)->self.decode(obs, algorithm)
A:sklearn.hmm.random_state->check_random_state(random_state)
A:sklearn.hmm.startprob_cdf->numpy.cumsum(startprob_pdf)
A:sklearn.hmm.transmat_cdf->numpy.cumsum(transmat_pdf, 1)
A:sklearn.hmm.rand->check_random_state(random_state).rand()
A:sklearn.hmm.currstate->(transmat_cdf[currstate] > rand).argmax()
A:sklearn.hmm.stats->super(GMMHMM, self)._initialize_sufficient_statistics()
A:sklearn.hmm.(lpr, fwdlattice)->self._do_forward_pass(framelogprob)
A:sklearn.hmm.algorithm->property(_get_algorithm, _set_algorithm)
A:sklearn.hmm.startprob->numpy.asarray(startprob, dtype=np.float)
A:sklearn.hmm.self._log_startprob->numpy.log(np.asarray(startprob).copy())
A:sklearn.hmm.startprob_->property(_get_startprob, _set_startprob)
A:sklearn.hmm.transmat->numpy.tile(1.0 / self.n_components, (self.n_components, self.n_components))
A:sklearn.hmm.self._log_transmat->numpy.log(np.asarray(transmat).copy())
A:sklearn.hmm.underflow_idx->numpy.isnan(self._log_emissionprob)
A:sklearn.hmm.transmat_->normalize(np.maximum(self.transmat_prior - 1.0 + stats['trans'], 1e-20), axis=1)
A:sklearn.hmm.(state_sequence, logprob)->_hmmc._viterbi(n_observations, n_components, self._log_startprob, self._log_transmat, framelogprob)
A:sklearn.hmm.fwdlattice->numpy.zeros((n_observations, n_components))
A:sklearn.hmm.lneta->numpy.zeros((n_observations - 1, n_components, n_components))
A:sklearn.hmm.lnP->logsumexp(fwdlattice[-1])
A:sklearn.hmm.self.startprob_->normalize(np.maximum(self.startprob_prior - 1.0 + stats['start'], 1e-20))
A:sklearn.hmm.means->numpy.asarray(means)
A:sklearn.hmm.self._means_->numpy.asarray(means).copy()
A:sklearn.hmm.means_->property(_get_means, _set_means)
A:sklearn.hmm.covars->numpy.asarray(covars)
A:sklearn.hmm.self._covars_->numpy.tile(self._covars_.mean(1)[:, np.newaxis], (1, self._covars_.shape[1]))
A:sklearn.hmm.covars_->property(_get_covars, _set_covars)
A:sklearn.hmm.cv->numpy.cov(obs[0].T)
A:sklearn.hmm.stats['post']->numpy.zeros(self.n_components)
A:sklearn.hmm.stats['obs']->numpy.zeros((self.n_components, self.n_symbols))
A:sklearn.hmm.stats['obs**2']->numpy.zeros((self.n_components, self.n_features))
A:sklearn.hmm.stats['obs*obs.T']->numpy.zeros((self.n_components, self.n_features, self.n_features))
A:sklearn.hmm.obsobsT->numpy.outer(o, o)
A:sklearn.hmm.cvnum->numpy.empty((self.n_components, self.n_features, self.n_features))
A:sklearn.hmm.obsmean->numpy.outer(stats['obs'][c], self._means_[c])
A:sklearn.hmm.cvweight->max(covars_weight - self.n_features, 0)
A:sklearn.hmm.emissionprob->normalize(self.random_state.rand(self.n_components, self.n_symbols), 1)
A:sklearn.hmm.self._log_emissionprob->numpy.log(emissionprob)
A:sklearn.hmm.emissionprob_->property(_get_emissionprob, _set_emissionprob)
A:sklearn.hmm.cdf->numpy.cumsum(self.emissionprob_[state, :])
A:sklearn.hmm.symbol->(cdf > rand).argmax()
A:sklearn.hmm.self.random_state->check_random_state(self.random_state)
A:sklearn.hmm.symbols->numpy.asarray(obs).flatten()
A:sklearn.hmm.self.n_symbols->len(symbols)
A:sklearn.hmm.g->GMM(n_mix, covariance_type=covariance_type)
A:sklearn.hmm.allobs->numpy.concatenate(obs, 0)
A:sklearn.hmm.(_, lgmm_posteriors)->GMM(n_mix, covariance_type=covariance_type).score_samples(obs)
A:sklearn.hmm.gmm_posteriors->numpy.exp(lgmm_posteriors)
A:sklearn.hmm.tmp_gmm->GMM(g.n_components, covariance_type=g.covariance_type)
A:sklearn.hmm.norm->GMM(g.n_components, covariance_type=g.covariance_type)._do_mstep(obs, gmm_posteriors, params)
A:sklearn.hmm.cvnorm->numpy.copy(norm)
A:sklearn.hmm.g.weights_->normalize(norm)
A:sklearn.hmm.eye->numpy.eye(n_features)
sklearn.hmm.GMMHMM(self,n_components=1,n_mix=1,startprob=None,transmat=None,startprob_prior=None,transmat_prior=None,algorithm='viterbi',gmms=None,covariance_type='diag',covars_prior=0.01,random_state=None,n_iter=10,thresh=0.01,params=string.ascii_letters,init_params=string.ascii_letters)
sklearn.hmm.GMMHMM.__init__(self,n_components=1,n_mix=1,startprob=None,transmat=None,startprob_prior=None,transmat_prior=None,algorithm='viterbi',gmms=None,covariance_type='diag',covars_prior=0.01,random_state=None,n_iter=10,thresh=0.01,params=string.ascii_letters,init_params=string.ascii_letters)
sklearn.hmm.GMMHMM._accumulate_sufficient_statistics(self,stats,obs,framelogprob,posteriors,fwdlattice,bwdlattice,params)
sklearn.hmm.GMMHMM._compute_log_likelihood(self,obs)
sklearn.hmm.GMMHMM._do_mstep(self,stats,params)
sklearn.hmm.GMMHMM._generate_sample_from_state(self,state,random_state=None)
sklearn.hmm.GMMHMM._init(self,obs,params='stwmc')
sklearn.hmm.GMMHMM._initialize_sufficient_statistics(self)
sklearn.hmm.GMMHMM.covariance_type(self)
sklearn.hmm.GaussianHMM(self,n_components=1,covariance_type='diag',startprob=None,transmat=None,startprob_prior=None,transmat_prior=None,algorithm='viterbi',means_prior=None,means_weight=0,covars_prior=0.01,covars_weight=1,random_state=None,n_iter=10,thresh=0.01,params=string.ascii_letters,init_params=string.ascii_letters)
sklearn.hmm.GaussianHMM.__init__(self,n_components=1,covariance_type='diag',startprob=None,transmat=None,startprob_prior=None,transmat_prior=None,algorithm='viterbi',means_prior=None,means_weight=0,covars_prior=0.01,covars_weight=1,random_state=None,n_iter=10,thresh=0.01,params=string.ascii_letters,init_params=string.ascii_letters)
sklearn.hmm.GaussianHMM._accumulate_sufficient_statistics(self,stats,obs,framelogprob,posteriors,fwdlattice,bwdlattice,params)
sklearn.hmm.GaussianHMM._compute_log_likelihood(self,obs)
sklearn.hmm.GaussianHMM._do_mstep(self,stats,params)
sklearn.hmm.GaussianHMM._generate_sample_from_state(self,state,random_state=None)
sklearn.hmm.GaussianHMM._get_covars(self)
sklearn.hmm.GaussianHMM._get_means(self)
sklearn.hmm.GaussianHMM._init(self,obs,params='stmc')
sklearn.hmm.GaussianHMM._initialize_sufficient_statistics(self)
sklearn.hmm.GaussianHMM._set_covars(self,covars)
sklearn.hmm.GaussianHMM._set_means(self,means)
sklearn.hmm.GaussianHMM.covariance_type(self)
sklearn.hmm.GaussianHMM.fit(self,obs)
sklearn.hmm.MultinomialHMM(self,n_components=1,startprob=None,transmat=None,startprob_prior=None,transmat_prior=None,algorithm='viterbi',random_state=None,n_iter=10,thresh=0.01,params=string.ascii_letters,init_params=string.ascii_letters)
sklearn.hmm.MultinomialHMM.__init__(self,n_components=1,startprob=None,transmat=None,startprob_prior=None,transmat_prior=None,algorithm='viterbi',random_state=None,n_iter=10,thresh=0.01,params=string.ascii_letters,init_params=string.ascii_letters)
sklearn.hmm.MultinomialHMM._accumulate_sufficient_statistics(self,stats,obs,framelogprob,posteriors,fwdlattice,bwdlattice,params)
sklearn.hmm.MultinomialHMM._check_input_symbols(self,obs)
sklearn.hmm.MultinomialHMM._compute_log_likelihood(self,obs)
sklearn.hmm.MultinomialHMM._do_mstep(self,stats,params)
sklearn.hmm.MultinomialHMM._generate_sample_from_state(self,state,random_state=None)
sklearn.hmm.MultinomialHMM._get_emissionprob(self)
sklearn.hmm.MultinomialHMM._init(self,obs,params='ste')
sklearn.hmm.MultinomialHMM._initialize_sufficient_statistics(self)
sklearn.hmm.MultinomialHMM._set_emissionprob(self,emissionprob)
sklearn.hmm.MultinomialHMM.fit(self,obs,**kwargs)
sklearn.hmm._BaseHMM(self,n_components=1,startprob=None,transmat=None,startprob_prior=None,transmat_prior=None,algorithm='viterbi',random_state=None,n_iter=10,thresh=0.01,params=string.ascii_letters,init_params=string.ascii_letters)
sklearn.hmm._BaseHMM.__init__(self,n_components=1,startprob=None,transmat=None,startprob_prior=None,transmat_prior=None,algorithm='viterbi',random_state=None,n_iter=10,thresh=0.01,params=string.ascii_letters,init_params=string.ascii_letters)
sklearn.hmm._BaseHMM._accumulate_sufficient_statistics(self,stats,seq,framelogprob,posteriors,fwdlattice,bwdlattice,params)
sklearn.hmm._BaseHMM._compute_log_likelihood(self,obs)
sklearn.hmm._BaseHMM._decode_map(self,obs)
sklearn.hmm._BaseHMM._decode_viterbi(self,obs)
sklearn.hmm._BaseHMM._do_backward_pass(self,framelogprob)
sklearn.hmm._BaseHMM._do_forward_pass(self,framelogprob)
sklearn.hmm._BaseHMM._do_mstep(self,stats,params)
sklearn.hmm._BaseHMM._do_viterbi_pass(self,framelogprob)
sklearn.hmm._BaseHMM._generate_sample_from_state(self,state,random_state=None)
sklearn.hmm._BaseHMM._get_algorithm(self)
sklearn.hmm._BaseHMM._get_startprob(self)
sklearn.hmm._BaseHMM._get_transmat(self)
sklearn.hmm._BaseHMM._init(self,obs,params)
sklearn.hmm._BaseHMM._initialize_sufficient_statistics(self)
sklearn.hmm._BaseHMM._set_algorithm(self,algorithm)
sklearn.hmm._BaseHMM._set_startprob(self,startprob)
sklearn.hmm._BaseHMM._set_transmat(self,transmat)
sklearn.hmm._BaseHMM.decode(self,obs,algorithm='viterbi')
sklearn.hmm._BaseHMM.eval(self,X)
sklearn.hmm._BaseHMM.fit(self,obs)
sklearn.hmm._BaseHMM.predict(self,obs,algorithm='viterbi')
sklearn.hmm._BaseHMM.predict_proba(self,obs)
sklearn.hmm._BaseHMM.sample(self,n=1,random_state=None)
sklearn.hmm._BaseHMM.score(self,obs)
sklearn.hmm._BaseHMM.score_samples(self,obs)
sklearn.hmm.normalize(A,axis=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/random_projection.py----------------------------------------
A:sklearn.random_projection.eps->numpy.asarray(eps)
A:sklearn.random_projection.n_samples->numpy.asarray(n_samples)
A:sklearn.random_projection.rng->check_random_state(random_state)
A:sklearn.random_projection.components->scipy.sparse.csr_matrix((data, indices, indptr), shape=(n_components, n_features))
A:sklearn.random_projection.density->_check_density(density, n_features)
A:sklearn.random_projection.n_nonzero_i->check_random_state(random_state).binomial(n_features, density)
A:sklearn.random_projection.indices_i->sample_without_replacement(n_features, n_nonzero_i, random_state=rng)
A:sklearn.random_projection.indices->numpy.concatenate(indices)
A:sklearn.random_projection.(X, y)->check_arrays(X, y)
A:sklearn.random_projection.X->numpy.atleast_2d(X)
A:sklearn.random_projection.self.n_components_->johnson_lindenstrauss_min_dim(n_samples=n_samples, eps=self.eps)
A:sklearn.random_projection.self.components_->self._make_random_matrix(self.n_components_, n_features)
A:sklearn.random_projection.X_new->safe_sparse_dot(X, self.components_.T, dense_output=self.dense_output)
A:sklearn.random_projection.random_state->check_random_state(self.random_state)
A:sklearn.random_projection.self.density_->_check_density(self.density, n_features)
sklearn.random_projection.BaseRandomProjection(self,n_components='auto',eps=0.1,dense_output=False,random_state=None)
sklearn.random_projection.BaseRandomProjection.__init__(self,n_components='auto',eps=0.1,dense_output=False,random_state=None)
sklearn.random_projection.BaseRandomProjection._make_random_matrix(n_components,n_features)
sklearn.random_projection.BaseRandomProjection.fit(self,X,y=None)
sklearn.random_projection.BaseRandomProjection.transform(self,X,y=None)
sklearn.random_projection.GaussianRandomProjection(self,n_components='auto',eps=0.1,random_state=None)
sklearn.random_projection.GaussianRandomProjection.__init__(self,n_components='auto',eps=0.1,random_state=None)
sklearn.random_projection.GaussianRandomProjection._make_random_matrix(self,n_components,n_features)
sklearn.random_projection.SparseRandomProjection(self,n_components='auto',density='auto',eps=0.1,dense_output=False,random_state=None)
sklearn.random_projection.SparseRandomProjection.__init__(self,n_components='auto',density='auto',eps=0.1,dense_output=False,random_state=None)
sklearn.random_projection.SparseRandomProjection._make_random_matrix(self,n_components,n_features)
sklearn.random_projection._check_density(density,n_features)
sklearn.random_projection._check_input_size(n_components,n_features)
sklearn.random_projection.gaussian_random_matrix(n_components,n_features,random_state=None)
sklearn.random_projection.johnson_lindenstrauss_min_dim(n_samples,eps=0.1)
sklearn.random_projection.sparse_random_matrix(n_components,n_features,density='auto',random_state=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/pls.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/hierarchical.py----------------------------------------
A:sklearn.cluster.hierarchical.connectivity->connectivity.tolil().tolil()
A:sklearn.cluster.hierarchical.(n_components, labels)->connected_components(connectivity)
A:sklearn.cluster.hierarchical.D->pairwise_distances(Xi, Xj, metric=affinity)
A:sklearn.cluster.hierarchical.(ii, jj)->numpy.where(D == np.min(D))
A:sklearn.cluster.hierarchical.X->safe_asarray(X)
A:sklearn.cluster.hierarchical.out->scipy.cluster.hierarchy.linkage(X, method=linkage, metric=affinity)
A:sklearn.cluster.hierarchical.children_->out[:, :2].astype(np.int)
A:sklearn.cluster.hierarchical.coord_row->numpy.empty(coord_col.shape, dtype=np.intp, order='C')
A:sklearn.cluster.hierarchical.coord_col->join_func(A[i], A[j], used_node, n_i, n_j)
A:sklearn.cluster.hierarchical.moments_1->numpy.zeros(n_nodes, order='C')
A:sklearn.cluster.hierarchical.moments_2->numpy.zeros((n_nodes, n_features), order='C')
A:sklearn.cluster.hierarchical.inertia->list()
A:sklearn.cluster.hierarchical.parent->numpy.arange(n_nodes, dtype=np.intp)
A:sklearn.cluster.hierarchical.used_node->numpy.ones(n_nodes, dtype=np.intp)
A:sklearn.cluster.hierarchical.not_visited->numpy.empty(n_nodes, dtype=np.int8, order='C')
A:sklearn.cluster.hierarchical.(inert, i, j)->heappop(inertia)
A:sklearn.cluster.hierarchical.n_additions->len(coord_row)
A:sklearn.cluster.hierarchical.ini->numpy.empty(n_additions, dtype=np.float, order='C')
A:sklearn.cluster.hierarchical.children->numpy.array(children)
A:sklearn.cluster.hierarchical.(i, j)->numpy.triu_indices(X.shape[0], k=1)
A:sklearn.cluster.hierarchical.distances->paired_distances(X[connectivity.row], X[connectivity.col], metric=affinity)
A:sklearn.cluster.hierarchical.A->numpy.empty(n_nodes, dtype=object)
A:sklearn.cluster.hierarchical.A[ind]->IntFloatDict(np.asarray(row, dtype=np.intp), np.asarray(data, dtype=np.float64))
A:sklearn.cluster.hierarchical.edge->heappop(inertia)
A:sklearn.cluster.hierarchical._TREE_BUILDERS->dict(ward=ward_tree, complete=_complete_linkage, average=_average_linkage)
A:sklearn.cluster.hierarchical.label->numpy.zeros(n_leaves, dtype=np.intp)
A:sklearn.cluster.hierarchical.memory->Memory(cachedir=memory, verbose=0)
A:sklearn.cluster.hierarchical.n_samples->len(X)
A:sklearn.cluster.hierarchical.(self.children_, self.n_components_, self.n_leaves_, parents)->Memory(cachedir=memory, verbose=0).cache(tree_builder)(X, self.connectivity, n_components=self.n_components, n_clusters=n_clusters, **kwargs)
A:sklearn.cluster.hierarchical.self.labels_->numpy.searchsorted(np.unique(labels), labels)
A:sklearn.cluster.hierarchical.labels->numpy.copy(labels[:n_samples])
sklearn.cluster.AgglomerativeClustering(self,n_clusters=2,affinity='euclidean',memory=Memory(cachedir=None,verbose=0),connectivity=None,n_components=None,compute_full_tree='auto',linkage='ward',pooling_func=np.mean)
sklearn.cluster.AgglomerativeClustering.fit(self,X)
sklearn.cluster.FeatureAgglomeration(AgglomerativeClustering,AgglomerationTransform)
sklearn.cluster.FeatureAgglomeration.fit(self,X,y=None,**params)
sklearn.cluster.Ward(self,n_clusters=2,memory=Memory(cachedir=None,verbose=0),connectivity=None,copy=None,n_components=None,compute_full_tree='auto',pooling_func=np.mean)
sklearn.cluster.WardAgglomeration(AgglomerationTransform,Ward)
sklearn.cluster.WardAgglomeration.fit(self,X,y=None,**params)
sklearn.cluster.hierarchical.AgglomerativeClustering(self,n_clusters=2,affinity='euclidean',memory=Memory(cachedir=None,verbose=0),connectivity=None,n_components=None,compute_full_tree='auto',linkage='ward',pooling_func=np.mean)
sklearn.cluster.hierarchical.AgglomerativeClustering.__init__(self,n_clusters=2,affinity='euclidean',memory=Memory(cachedir=None,verbose=0),connectivity=None,n_components=None,compute_full_tree='auto',linkage='ward',pooling_func=np.mean)
sklearn.cluster.hierarchical.AgglomerativeClustering.fit(self,X)
sklearn.cluster.hierarchical.FeatureAgglomeration(AgglomerativeClustering,AgglomerationTransform)
sklearn.cluster.hierarchical.FeatureAgglomeration.fit(self,X,y=None,**params)
sklearn.cluster.hierarchical.Ward(self,n_clusters=2,memory=Memory(cachedir=None,verbose=0),connectivity=None,copy=None,n_components=None,compute_full_tree='auto',pooling_func=np.mean)
sklearn.cluster.hierarchical.Ward.__init__(self,n_clusters=2,memory=Memory(cachedir=None,verbose=0),connectivity=None,copy=None,n_components=None,compute_full_tree='auto',pooling_func=np.mean)
sklearn.cluster.hierarchical.WardAgglomeration(AgglomerationTransform,Ward)
sklearn.cluster.hierarchical.WardAgglomeration.fit(self,X,y=None,**params)
sklearn.cluster.hierarchical._average_linkage(*args,**kwargs)
sklearn.cluster.hierarchical._complete_linkage(*args,**kwargs)
sklearn.cluster.hierarchical._fix_connectivity(X,connectivity,n_components=None,affinity='euclidean')
sklearn.cluster.hierarchical._hc_cut(n_clusters,children,n_leaves)
sklearn.cluster.hierarchical.linkage_tree(X,connectivity=None,n_components=None,n_clusters=None,linkage='complete',affinity='euclidean')
sklearn.cluster.hierarchical.ward_tree(X,connectivity=None,n_components=None,copy=None,n_clusters=None)
sklearn.cluster.linkage_tree(X,connectivity=None,n_components=None,n_clusters=None,linkage='complete',affinity='euclidean')
sklearn.cluster.ward_tree(X,connectivity=None,n_components=None,copy=None,n_clusters=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/spectral.py----------------------------------------
A:sklearn.cluster.spectral.random_state->check_random_state(self.random_state)
A:sklearn.cluster.spectral.vectors->as_float_array(vectors, copy=copy)
A:sklearn.cluster.spectral.norm_ones->numpy.sqrt(n_samples)
A:sklearn.cluster.spectral.rotation->numpy.dot(Vh.T, U.T)
A:sklearn.cluster.spectral.c->numpy.zeros(n_samples)
A:sklearn.cluster.spectral.t_discrete->numpy.dot(vectors, rotation)
A:sklearn.cluster.spectral.labels->discretize(maps, random_state=random_state)
A:sklearn.cluster.spectral.vectors_discrete->csc_matrix((np.ones(len(labels)), (np.arange(0, n_samples), labels)), shape=(n_samples, n_components))
A:sklearn.cluster.spectral.(U, S, Vh)->numpy.linalg.svd(t_svd)
A:sklearn.cluster.spectral.maps->spectral_embedding(affinity, n_components=n_components, eigen_solver=eigen_solver, random_state=random_state, eigen_tol=eigen_tol, drop_first=False)
A:sklearn.cluster.spectral.(_, labels, _)->k_means(maps, n_clusters, random_state=random_state, n_init=n_init)
A:sklearn.cluster.spectral.connectivity->kneighbors_graph(X, n_neighbors=self.n_neighbors)
A:sklearn.cluster.spectral.self.affinity_matrix_->pairwise_kernels(X, metric=self.affinity, filter_params=True, **params)
A:sklearn.cluster.spectral.self.labels_->spectral_clustering(self.affinity_matrix_, n_clusters=self.n_clusters, eigen_solver=self.eigen_solver, random_state=random_state, n_init=self.n_init, eigen_tol=self.eigen_tol, assign_labels=self.assign_labels)
sklearn.cluster.SpectralClustering(self,n_clusters=8,eigen_solver=None,random_state=None,n_init=10,gamma=1.0,affinity='rbf',n_neighbors=10,eigen_tol=0.0,assign_labels='kmeans',degree=3,coef0=1,kernel_params=None)
sklearn.cluster.SpectralClustering._pairwise(self)
sklearn.cluster.SpectralClustering.fit(self,X)
sklearn.cluster.spectral.SpectralClustering(self,n_clusters=8,eigen_solver=None,random_state=None,n_init=10,gamma=1.0,affinity='rbf',n_neighbors=10,eigen_tol=0.0,assign_labels='kmeans',degree=3,coef0=1,kernel_params=None)
sklearn.cluster.spectral.SpectralClustering.__init__(self,n_clusters=8,eigen_solver=None,random_state=None,n_init=10,gamma=1.0,affinity='rbf',n_neighbors=10,eigen_tol=0.0,assign_labels='kmeans',degree=3,coef0=1,kernel_params=None)
sklearn.cluster.spectral.SpectralClustering._pairwise(self)
sklearn.cluster.spectral.SpectralClustering.fit(self,X)
sklearn.cluster.spectral.discretize(vectors,copy=True,max_svd_restarts=30,n_iter_max=20,random_state=None)
sklearn.cluster.spectral.spectral_clustering(affinity,n_clusters=8,n_components=None,eigen_solver=None,random_state=None,n_init=10,eigen_tol=0.0,assign_labels='kmeans')
sklearn.cluster.spectral_clustering(affinity,n_clusters=8,n_components=None,eigen_solver=None,random_state=None,n_init=10,eigen_tol=0.0,assign_labels='kmeans')


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/k_means_.py----------------------------------------
A:sklearn.cluster.k_means_.centers->centers.toarray().toarray()
A:sklearn.cluster.k_means_.center_id->check_random_state(self.random_state).randint(n_samples)
A:sklearn.cluster.k_means_.centers[0]->X[center_id].toarray()
A:sklearn.cluster.k_means_.closest_dist_sq->euclidean_distances(centers[0], X, Y_norm_squared=x_squared_norms, squared=True)
A:sklearn.cluster.k_means_.current_pot->euclidean_distances(centers[0], X, Y_norm_squared=x_squared_norms, squared=True).sum()
A:sklearn.cluster.k_means_.candidate_ids->numpy.searchsorted(closest_dist_sq.cumsum(), rand_vals)
A:sklearn.cluster.k_means_.distance_to_candidates->euclidean_distances(X[candidate_ids], X, Y_norm_squared=x_squared_norms, squared=True)
A:sklearn.cluster.k_means_.new_dist_sq->numpy.minimum(closest_dist_sq, distance_to_candidates[trial])
A:sklearn.cluster.k_means_.new_pot->numpy.minimum(closest_dist_sq, distance_to_candidates[trial]).sum()
A:sklearn.cluster.k_means_.centers[c]->X[best_candidate].toarray()
A:sklearn.cluster.k_means_.variances->numpy.var(X, axis=0)
A:sklearn.cluster.k_means_.random_state->check_random_state(self.random_state)
A:sklearn.cluster.k_means_.X->self._check_test_data(X)
A:sklearn.cluster.k_means_.tol->_tolerance(X, self.tol)
A:sklearn.cluster.k_means_.X_mean->self._check_test_data(X).mean(axis=0)
A:sklearn.cluster.k_means_.init->numpy.asarray(init, dtype=np.float64)
A:sklearn.cluster.k_means_.x_squared_norms->row_norms(X, squared=True)
A:sklearn.cluster.k_means_.(labels, inertia, centers)->zip(*results)
A:sklearn.cluster.k_means_.best_labels->numpy.empty(n_samples, dtype=np.int32).copy()
A:sklearn.cluster.k_means_.best_centers->centers.toarray().toarray().copy()
A:sklearn.cluster.k_means_.seeds->check_random_state(self.random_state).randint(np.iinfo(np.int32).max, size=n_init)
A:sklearn.cluster.k_means_.results->Parallel(n_jobs=n_jobs, verbose=0)((delayed(_kmeans_single)(X, n_clusters, max_iter=max_iter, init=init, verbose=verbose, tol=tol, precompute_distances=precompute_distances, x_squared_norms=x_squared_norms, random_state=seed) for seed in seeds))
A:sklearn.cluster.k_means_.best->numpy.argmin(inertia)
A:sklearn.cluster.k_means_.distances->numpy.zeros(X.shape[0], dtype=np.float64)
A:sklearn.cluster.k_means_.centers_old->centers.toarray().toarray().copy()
A:sklearn.cluster.k_means_.(labels, inertia)->zip(*results)
A:sklearn.cluster.k_means_.all_distances->euclidean_distances(centers, X, x_squared_norms, squared=True)
A:sklearn.cluster.k_means_.labels->numpy.empty(n_samples, dtype=np.int32)
A:sklearn.cluster.k_means_.mindist->numpy.minimum(dist, mindist)
A:sklearn.cluster.k_means_.inertia->_k_means._assign_labels_array(X, x_squared_norms, centers, labels, distances=distances)
A:sklearn.cluster.k_means_.init_indices->check_random_state(self.random_state).random_integers(0, n_samples - 1, init_size)
A:sklearn.cluster.k_means_.(self.cluster_centers_, self.labels_, self.inertia_)->k_means(X, n_clusters=self.n_clusters, init=self.init, n_init=self.n_init, max_iter=self.max_iter, verbose=self.verbose, precompute_distances=self.precompute_distances, tol=self.tol, random_state=random_state, copy_x=self.copy_x, n_jobs=self.n_jobs)
A:sklearn.cluster.k_means_.(nearest_center, inertia)->_labels_inertia(X, x_squared_norms, centers, distances=distances)
A:sklearn.cluster.k_means_.n_reassigns->to_reassign.sum()
A:sklearn.cluster.k_means_.new_centers->choice(X.shape[0], replace=False, size=n_reassigns, random_state=random_state)
A:sklearn.cluster.k_means_.counts[to_reassign]->numpy.min(counts[~to_reassign])
A:sklearn.cluster.k_means_.count->center_mask.sum()
A:sklearn.cluster.k_means_.ewa_diff->context.get('ewa_diff')
A:sklearn.cluster.k_means_.ewa_inertia->context.get('ewa_inertia')
A:sklearn.cluster.k_means_.ewa_inertia_min->context.get('ewa_inertia_min')
A:sklearn.cluster.k_means_.no_improvement->context.get('no_improvement', 0)
A:sklearn.cluster.k_means_.self.init->numpy.ascontiguousarray(self.init, dtype=np.float64)
A:sklearn.cluster.k_means_.old_center_buffer->numpy.zeros(0, np.double)
A:sklearn.cluster.k_means_.n_batches->int(np.ceil(float(n_samples) / self.batch_size))
A:sklearn.cluster.k_means_.n_iter->int(self.max_iter * n_batches)
A:sklearn.cluster.k_means_.validation_indices->check_random_state(self.random_state).random_integers(0, n_samples - 1, init_size)
A:sklearn.cluster.k_means_.counts->numpy.zeros(self.n_clusters, dtype=np.int32)
A:sklearn.cluster.k_means_.cluster_centers->_init_centroids(X, self.n_clusters, self.init, random_state=random_state, x_squared_norms=x_squared_norms, init_size=init_size)
A:sklearn.cluster.k_means_.(batch_inertia, centers_squared_diff)->_mini_batch_step(X[minibatch_indices], x_squared_norms[minibatch_indices], self.cluster_centers_, self.counts_, old_center_buffer, tol > 0.0, distances=distances, random_reassign=(iteration_idx + 1) % (10 + self.counts_.min()) == 0, random_state=random_state, reassignment_ratio=self.reassignment_ratio, verbose=self.verbose)
A:sklearn.cluster.k_means_.(_, inertia)->_labels_inertia(X_valid, x_squared_norms_valid, cluster_centers)
A:sklearn.cluster.k_means_.minibatch_indices->check_random_state(self.random_state).random_integers(0, n_samples - 1, self.batch_size)
A:sklearn.cluster.k_means_.(self.labels_, self.inertia_)->_labels_inertia(X, x_squared_norms, self.cluster_centers_)
A:sklearn.cluster.k_means_.slices->gen_batches(X.shape[0], self.batch_size)
A:sklearn.cluster.k_means_.self.random_state_->getattr(self, 'random_state_', check_random_state(self.random_state))
A:sklearn.cluster.k_means_.self.cluster_centers_->_init_centroids(X, self.n_clusters, self.init, random_state=self.random_state_, x_squared_norms=x_squared_norms, init_size=self.init_size)
A:sklearn.cluster.k_means_.self.counts_->numpy.zeros(self.n_clusters, dtype=np.int32)
sklearn.cluster.KMeans(self,n_clusters=8,init='k-means++',n_init=10,max_iter=300,tol=0.0001,precompute_distances=True,verbose=0,random_state=None,copy_x=True,n_jobs=1)
sklearn.cluster.KMeans._check_fit_data(self,X)
sklearn.cluster.KMeans._check_fitted(self)
sklearn.cluster.KMeans._check_test_data(self,X)
sklearn.cluster.KMeans._transform(self,X)
sklearn.cluster.KMeans.fit(self,X,y=None)
sklearn.cluster.KMeans.fit_predict(self,X)
sklearn.cluster.KMeans.fit_transform(self,X,y=None)
sklearn.cluster.KMeans.predict(self,X)
sklearn.cluster.KMeans.score(self,X)
sklearn.cluster.KMeans.transform(self,X,y=None)
sklearn.cluster.MiniBatchKMeans(self,n_clusters=8,init='k-means++',max_iter=100,batch_size=100,verbose=0,compute_labels=True,random_state=None,tol=0.0,max_no_improvement=10,init_size=None,n_init=3,reassignment_ratio=0.01)
sklearn.cluster.MiniBatchKMeans._labels_inertia_minibatch(self,X)
sklearn.cluster.MiniBatchKMeans.fit(self,X,y=None)
sklearn.cluster.MiniBatchKMeans.partial_fit(self,X,y=None)
sklearn.cluster.MiniBatchKMeans.predict(self,X)
sklearn.cluster.k_means(X,n_clusters,init='k-means++',precompute_distances=True,n_init=10,max_iter=300,verbose=False,tol=0.0001,random_state=None,copy_x=True,n_jobs=1)
sklearn.cluster.k_means_.KMeans(self,n_clusters=8,init='k-means++',n_init=10,max_iter=300,tol=0.0001,precompute_distances=True,verbose=0,random_state=None,copy_x=True,n_jobs=1)
sklearn.cluster.k_means_.KMeans.__init__(self,n_clusters=8,init='k-means++',n_init=10,max_iter=300,tol=0.0001,precompute_distances=True,verbose=0,random_state=None,copy_x=True,n_jobs=1)
sklearn.cluster.k_means_.KMeans._check_fit_data(self,X)
sklearn.cluster.k_means_.KMeans._check_fitted(self)
sklearn.cluster.k_means_.KMeans._check_test_data(self,X)
sklearn.cluster.k_means_.KMeans._transform(self,X)
sklearn.cluster.k_means_.KMeans.fit(self,X,y=None)
sklearn.cluster.k_means_.KMeans.fit_predict(self,X)
sklearn.cluster.k_means_.KMeans.fit_transform(self,X,y=None)
sklearn.cluster.k_means_.KMeans.predict(self,X)
sklearn.cluster.k_means_.KMeans.score(self,X)
sklearn.cluster.k_means_.KMeans.transform(self,X,y=None)
sklearn.cluster.k_means_.MiniBatchKMeans(self,n_clusters=8,init='k-means++',max_iter=100,batch_size=100,verbose=0,compute_labels=True,random_state=None,tol=0.0,max_no_improvement=10,init_size=None,n_init=3,reassignment_ratio=0.01)
sklearn.cluster.k_means_.MiniBatchKMeans.__init__(self,n_clusters=8,init='k-means++',max_iter=100,batch_size=100,verbose=0,compute_labels=True,random_state=None,tol=0.0,max_no_improvement=10,init_size=None,n_init=3,reassignment_ratio=0.01)
sklearn.cluster.k_means_.MiniBatchKMeans._labels_inertia_minibatch(self,X)
sklearn.cluster.k_means_.MiniBatchKMeans.fit(self,X,y=None)
sklearn.cluster.k_means_.MiniBatchKMeans.partial_fit(self,X,y=None)
sklearn.cluster.k_means_.MiniBatchKMeans.predict(self,X)
sklearn.cluster.k_means_._init_centroids(X,k,init,random_state=None,x_squared_norms=None,init_size=None)
sklearn.cluster.k_means_._k_init(X,n_clusters,x_squared_norms,random_state,n_local_trials=None)
sklearn.cluster.k_means_._kmeans_single(X,n_clusters,x_squared_norms,max_iter=300,init='k-means++',verbose=False,random_state=None,tol=0.0001,precompute_distances=True)
sklearn.cluster.k_means_._labels_inertia(X,x_squared_norms,centers,precompute_distances=True,distances=None)
sklearn.cluster.k_means_._labels_inertia_precompute_dense(X,x_squared_norms,centers,distances)
sklearn.cluster.k_means_._mini_batch_convergence(model,iteration_idx,n_iter,tol,n_samples,centers_squared_diff,batch_inertia,context,verbose=0)
sklearn.cluster.k_means_._mini_batch_step(X,x_squared_norms,centers,counts,old_center_buffer,compute_squared_diff,distances,random_reassign=False,random_state=None,reassignment_ratio=0.01,verbose=False)
sklearn.cluster.k_means_._tolerance(X,tol)
sklearn.cluster.k_means_.k_means(X,n_clusters,init='k-means++',precompute_distances=True,n_init=10,max_iter=300,verbose=False,tol=0.0001,random_state=None,copy_x=True,n_jobs=1)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/setup.py----------------------------------------
A:sklearn.cluster.setup.(cblas_libs, blas_info)->get_blas_info()
A:sklearn.cluster.setup.config->Configuration('cluster', parent_package, top_path)
sklearn.cluster.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/affinity_propagation_.py----------------------------------------
A:sklearn.cluster.affinity_propagation_.S->as_float_array(S, copy=copy)
A:sklearn.cluster.affinity_propagation_.preference->numpy.median(S)
A:sklearn.cluster.affinity_propagation_.random_state->numpy.random.RandomState(0)
A:sklearn.cluster.affinity_propagation_.A->numpy.minimum(A, 0)
A:sklearn.cluster.affinity_propagation_.R->numpy.zeros((n_samples, n_samples))
A:sklearn.cluster.affinity_propagation_.e->numpy.zeros((n_samples, convergence_iter))
A:sklearn.cluster.affinity_propagation_.ind->numpy.arange(n_samples)
A:sklearn.cluster.affinity_propagation_.Rold->numpy.zeros((n_samples, n_samples)).copy()
A:sklearn.cluster.affinity_propagation_.I->numpy.argmax(AS, axis=1)
A:sklearn.cluster.affinity_propagation_.Y2->numpy.max(AS, axis=1)
A:sklearn.cluster.affinity_propagation_.Rp->numpy.maximum(R, 0)
A:sklearn.cluster.affinity_propagation_.dA->numpy.diag(A)
A:sklearn.cluster.affinity_propagation_.K->numpy.sum(E, axis=0)
A:sklearn.cluster.affinity_propagation_.se->numpy.sum(e, axis=1)
A:sklearn.cluster.affinity_propagation_.c->numpy.argmax(S[:, I], axis=1)
A:sklearn.cluster.affinity_propagation_.c[I]->numpy.arange(K)
A:sklearn.cluster.affinity_propagation_.j->numpy.argmax(np.sum(S[ii[:, np.newaxis], ii], axis=0))
A:sklearn.cluster.affinity_propagation_.cluster_centers_indices->numpy.unique(labels)
A:sklearn.cluster.affinity_propagation_.labels->numpy.empty((n_samples, 1))
A:sklearn.cluster.affinity_propagation_.(self.cluster_centers_indices_, self.labels_)->affinity_propagation(self.affinity_matrix_, self.preference, max_iter=self.max_iter, convergence_iter=self.convergence_iter, damping=self.damping, copy=self.copy, verbose=self.verbose)
A:sklearn.cluster.affinity_propagation_.self.cluster_centers_->X[self.cluster_centers_indices_].copy()
sklearn.cluster.AffinityPropagation(self,damping=0.5,max_iter=200,convergence_iter=15,copy=True,preference=None,affinity='euclidean',verbose=False)
sklearn.cluster.AffinityPropagation._pairwise(self)
sklearn.cluster.AffinityPropagation.fit(self,X)
sklearn.cluster.AffinityPropagation.predict(self,X)
sklearn.cluster.affinity_propagation(S,preference=None,convergence_iter=15,max_iter=200,damping=0.5,copy=True,verbose=False)
sklearn.cluster.affinity_propagation_.AffinityPropagation(self,damping=0.5,max_iter=200,convergence_iter=15,copy=True,preference=None,affinity='euclidean',verbose=False)
sklearn.cluster.affinity_propagation_.AffinityPropagation.__init__(self,damping=0.5,max_iter=200,convergence_iter=15,copy=True,preference=None,affinity='euclidean',verbose=False)
sklearn.cluster.affinity_propagation_.AffinityPropagation._pairwise(self)
sklearn.cluster.affinity_propagation_.AffinityPropagation.fit(self,X)
sklearn.cluster.affinity_propagation_.AffinityPropagation.predict(self,X)
sklearn.cluster.affinity_propagation_.affinity_propagation(S,preference=None,convergence_iter=15,max_iter=200,damping=0.5,copy=True,verbose=False)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/dbscan_.py----------------------------------------
A:sklearn.cluster.dbscan_.X->numpy.asarray(X)
A:sklearn.cluster.dbscan_.random_state->check_random_state(random_state)
A:sklearn.cluster.dbscan_.index_order->check_random_state(random_state).permutation(n)
A:sklearn.cluster.dbscan_.D->pairwise_distances(X, metric=metric)
A:sklearn.cluster.dbscan_.neighbors_model->NearestNeighbors(radius=eps, algorithm=algorithm, leaf_size=leaf_size, metric=metric, p=p)
A:sklearn.cluster.dbscan_.clust->dbscan(X, **self.get_params())
A:sklearn.cluster.dbscan_.self.components_->X[self.core_sample_indices_].copy()
sklearn.cluster.DBSCAN(self,eps=0.5,min_samples=5,metric='euclidean',algorithm='auto',leaf_size=30,p=None,random_state=None)
sklearn.cluster.DBSCAN.fit(self,X)
sklearn.cluster.dbscan(X,eps=0.5,min_samples=5,metric='minkowski',algorithm='auto',leaf_size=30,p=2,random_state=None)
sklearn.cluster.dbscan_.DBSCAN(self,eps=0.5,min_samples=5,metric='euclidean',algorithm='auto',leaf_size=30,p=None,random_state=None)
sklearn.cluster.dbscan_.DBSCAN.__init__(self,eps=0.5,min_samples=5,metric='euclidean',algorithm='auto',leaf_size=30,p=None,random_state=None)
sklearn.cluster.dbscan_.DBSCAN.fit(self,X)
sklearn.cluster.dbscan_.dbscan(X,eps=0.5,min_samples=5,metric='minkowski',algorithm='auto',leaf_size=30,p=2,random_state=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/_feature_agglomeration.py----------------------------------------
A:sklearn.cluster._feature_agglomeration.X->array2d(X)
A:sklearn.cluster._feature_agglomeration.(unil, inverse)->numpy.unique(self.labels_, return_inverse=True)
sklearn.cluster._feature_agglomeration.AgglomerationTransform(TransformerMixin)
sklearn.cluster._feature_agglomeration.AgglomerationTransform.inverse_transform(self,Xred)
sklearn.cluster._feature_agglomeration.AgglomerationTransform.transform(self,X,pooling_func=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/mean_shift_.py----------------------------------------
A:sklearn.cluster.mean_shift_.random_state->check_random_state(random_state)
A:sklearn.cluster.mean_shift_.nbrs->NearestNeighbors(n_neighbors=1).fit(cluster_centers)
A:sklearn.cluster.mean_shift_.(d, _)->NearestNeighbors(n_neighbors=1).fit(cluster_centers).kneighbors(X[batch, :], return_distance=True)
A:sklearn.cluster.mean_shift_.bandwidth->estimate_bandwidth(X)
A:sklearn.cluster.mean_shift_.seeds->get_bin_seeds(X, bandwidth, min_bin_freq)
A:sklearn.cluster.mean_shift_.my_mean->numpy.mean(points_within, axis=0)
A:sklearn.cluster.mean_shift_.center_intensity_dict[tuple(my_mean)]->len(points_within)
A:sklearn.cluster.mean_shift_.sorted_by_intensity->sorted(center_intensity_dict.items(), key=lambda tup: tup[1], reverse=True)
A:sklearn.cluster.mean_shift_.sorted_centers->numpy.array([tup[0] for tup in sorted_by_intensity])
A:sklearn.cluster.mean_shift_.unique->numpy.ones(len(sorted_centers), dtype=np.bool)
A:sklearn.cluster.mean_shift_.labels->idxs.flatten()
A:sklearn.cluster.mean_shift_.(distances, idxs)->NearestNeighbors(n_neighbors=1).fit(cluster_centers).kneighbors(X)
A:sklearn.cluster.mean_shift_.bin_sizes->defaultdict(int)
A:sklearn.cluster.mean_shift_.binned_point->numpy.cast[np.int32](point / bin_size)
A:sklearn.cluster.mean_shift_.bin_seeds->numpy.array([point for (point, freq) in six.iteritems(bin_sizes) if freq >= min_bin_freq], dtype=np.float32)
A:sklearn.cluster.mean_shift_.(self.cluster_centers_, self.labels_)->mean_shift(X, bandwidth=self.bandwidth, seeds=self.seeds, min_bin_freq=self.min_bin_freq, bin_seeding=self.bin_seeding, cluster_all=self.cluster_all)
sklearn.cluster.MeanShift(self,bandwidth=None,seeds=None,bin_seeding=False,min_bin_freq=1,cluster_all=True)
sklearn.cluster.MeanShift.fit(self,X)
sklearn.cluster.MeanShift.predict(self,X)
sklearn.cluster.estimate_bandwidth(X,quantile=0.3,n_samples=None,random_state=0)
sklearn.cluster.get_bin_seeds(X,bin_size,min_bin_freq=1)
sklearn.cluster.mean_shift(X,bandwidth=None,seeds=None,bin_seeding=False,min_bin_freq=1,cluster_all=True,max_iterations=300)
sklearn.cluster.mean_shift_.MeanShift(self,bandwidth=None,seeds=None,bin_seeding=False,min_bin_freq=1,cluster_all=True)
sklearn.cluster.mean_shift_.MeanShift.__init__(self,bandwidth=None,seeds=None,bin_seeding=False,min_bin_freq=1,cluster_all=True)
sklearn.cluster.mean_shift_.MeanShift.fit(self,X)
sklearn.cluster.mean_shift_.MeanShift.predict(self,X)
sklearn.cluster.mean_shift_.estimate_bandwidth(X,quantile=0.3,n_samples=None,random_state=0)
sklearn.cluster.mean_shift_.get_bin_seeds(X,bin_size,min_bin_freq=1)
sklearn.cluster.mean_shift_.mean_shift(X,bandwidth=None,seeds=None,bin_seeding=False,min_bin_freq=1,cluster_all=True,max_iterations=300)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/tests/test_dbscan.py----------------------------------------
A:sklearn.cluster.tests.test_dbscan.X->generate_clustered_data(n_clusters=n_clusters)
A:sklearn.cluster.tests.test_dbscan.D->pairwise_distances(X)
A:sklearn.cluster.tests.test_dbscan.(core_samples, labels)->dbscan(D, metric='precomputed', eps=eps, min_samples=min_samples)
A:sklearn.cluster.tests.test_dbscan.db->DBSCAN(leaf_size=20, eps=eps, min_samples=min_samples, algorithm='ball_tree')
A:sklearn.cluster.tests.test_dbscan.obj->DBSCAN()
A:sklearn.cluster.tests.test_dbscan.s->pickle.dumps(obj)
sklearn.cluster.tests.test_dbscan.test_dbscan_badargs()
sklearn.cluster.tests.test_dbscan.test_dbscan_balltree()
sklearn.cluster.tests.test_dbscan.test_dbscan_callable()
sklearn.cluster.tests.test_dbscan.test_dbscan_feature()
sklearn.cluster.tests.test_dbscan.test_dbscan_similarity()
sklearn.cluster.tests.test_dbscan.test_pickle()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/tests/test_affinity_propagation.py----------------------------------------
A:sklearn.cluster.tests.test_affinity_propagation.(X, _)->make_blobs(n_samples=60, n_features=2, centers=centers, cluster_std=0.4, shuffle=True, random_state=0)
A:sklearn.cluster.tests.test_affinity_propagation.(cluster_centers_indices, labels)->affinity_propagation(S, preference=preference)
A:sklearn.cluster.tests.test_affinity_propagation.n_clusters_->len(cluster_centers_indices)
A:sklearn.cluster.tests.test_affinity_propagation.af->AffinityPropagation(affinity='precomputed')
A:sklearn.cluster.tests.test_affinity_propagation.(_, labels_no_copy)->affinity_propagation(S, preference=preference, copy=False)
A:sklearn.cluster.tests.test_affinity_propagation.labels->AffinityPropagation(affinity='precomputed').fit_predict(X)
A:sklearn.cluster.tests.test_affinity_propagation.labels2->AffinityPropagation(affinity='precomputed').predict(X)
A:sklearn.cluster.tests.test_affinity_propagation.S->numpy.dot(X, X.T)
sklearn.cluster.tests.test_affinity_propagation.test_affinity_propagation()
sklearn.cluster.tests.test_affinity_propagation.test_affinity_propagation_predict()
sklearn.cluster.tests.test_affinity_propagation.test_affinity_propagation_predict_error()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/tests/common.py----------------------------------------
A:sklearn.cluster.tests.common.prng->numpy.random.RandomState(seed)
A:sklearn.cluster.tests.common.X->numpy.empty((0, n_features))
sklearn.cluster.tests.common.generate_clustered_data(seed=0,n_clusters=3,n_features=2,n_samples_per_cluster=20,std=0.4)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/tests/test_k_means.py----------------------------------------
A:sklearn.cluster.tests.test_k_means.centers->numpy.array([[0.0, 5.0, 0.0, 0.0, 0.0], [1.0, 1.0, 4.0, 0.0, 0.0], [1.0, 0.0, 0.0, 5.0, 1.0]])
A:sklearn.cluster.tests.test_k_means.(X, true_labels)->make_blobs(n_samples=n_samples, centers=centers, cluster_std=1.0, random_state=42)
A:sklearn.cluster.tests.test_k_means.X_csr->scipy.sparse.csr_matrix(X)
A:sklearn.cluster.tests.test_k_means.rnd->numpy.random.RandomState(42)
A:sklearn.cluster.tests.test_k_means.X->numpy.random.RandomState(42).uniform(size=(n_samples, 10))
A:sklearn.cluster.tests.test_k_means.km->KMeans(n_clusters=n_clusters, init='random', n_init=n_init, random_state=j).fit(X)
A:sklearn.cluster.tests.test_k_means.pred_x->assert_warns(RuntimeWarning, km.predict, X)
A:sklearn.cluster.tests.test_k_means.rng->numpy.random.RandomState(42)
A:sklearn.cluster.tests.test_k_means.mindist->numpy.minimum(dist, mindist)
A:sklearn.cluster.tests.test_k_means.dist->numpy.sum((X - noisy_centers[center_id]) ** 2, axis=1)
A:sklearn.cluster.tests.test_k_means.inertia_gold->numpy.minimum(dist, mindist).sum()
A:sklearn.cluster.tests.test_k_means.x_squared_norms->(X ** 2).sum(axis=1)
A:sklearn.cluster.tests.test_k_means.(labels_array, inertia_array)->_labels_inertia(X, x_squared_norms, noisy_centers)
A:sklearn.cluster.tests.test_k_means.x_squared_norms_from_csr->row_norms(X_csr, squared=True)
A:sklearn.cluster.tests.test_k_means.(labels_csr, inertia_csr)->_labels_inertia(X_csr, x_squared_norms_from_csr, noisy_centers)
A:sklearn.cluster.tests.test_k_means.new_centers->old_centers.copy()
A:sklearn.cluster.tests.test_k_means.new_centers_csr->old_centers.copy()
A:sklearn.cluster.tests.test_k_means.counts->numpy.zeros(new_centers.shape[0], dtype=np.int32)
A:sklearn.cluster.tests.test_k_means.counts_csr->numpy.zeros(new_centers.shape[0], dtype=np.int32)
A:sklearn.cluster.tests.test_k_means.x_squared_norms_csr->row_norms(X_csr, squared=True)
A:sklearn.cluster.tests.test_k_means.buffer->numpy.zeros(centers.shape[1], dtype=np.double)
A:sklearn.cluster.tests.test_k_means.buffer_csr->numpy.zeros(centers.shape[1], dtype=np.double)
A:sklearn.cluster.tests.test_k_means.(old_inertia, incremental_diff)->_mini_batch_step(X_mb, x_mb_squared_norms, new_centers, counts, buffer, 1, None, random_reassign=False)
A:sklearn.cluster.tests.test_k_means.(labels, new_inertia)->_labels_inertia(X_mb, x_mb_squared_norms, new_centers)
A:sklearn.cluster.tests.test_k_means.effective_diff->numpy.sum((new_centers_csr - old_centers) ** 2)
A:sklearn.cluster.tests.test_k_means.(old_inertia_csr, incremental_diff_csr)->_mini_batch_step(X_mb_csr, x_mb_squared_norms_csr, new_centers_csr, counts_csr, buffer_csr, 1, None, random_reassign=False)
A:sklearn.cluster.tests.test_k_means.(labels_csr, new_inertia_csr)->_labels_inertia(X_mb_csr, x_mb_squared_norms_csr, new_centers_csr)
A:sklearn.cluster.tests.test_k_means.bad_centers->numpy.array([[+0, 1, 0, 0], [0.2, 0, 0.2, 0.2], [+0, 0, 0, 0]])
A:sklearn.cluster.tests.test_k_means.mb_k_means->MiniBatchKMeans(n_clusters=n_clusters, init='random', n_init=10).fit(X_csr)
A:sklearn.cluster.tests.test_k_means.sys.stdout->StringIO()
A:sklearn.cluster.tests.test_k_means.(zeroed_X, true_labels)->make_blobs(n_samples=n_samples, centers=5, cluster_std=1.0, random_state=42)
A:sklearn.cluster.tests.test_k_means.score_before->MiniBatchKMeans(n_clusters=n_clusters, init='random', n_init=10).fit(X_csr).score(this_X)
A:sklearn.cluster.tests.test_k_means.labels->KMeans(n_clusters=n_clusters, init='random', n_init=n_init, random_state=j).fit(X).predict(X)
A:sklearn.cluster.tests.test_k_means.my_X->numpy.array([[1.1, 1.1], [0.9, 1.1], [1.1, 0.9], [0.9, 1.1]])
A:sklearn.cluster.tests.test_k_means.array_init->numpy.array([[1.0, 1.0], [5.0, 5.0], [-5.0, -5.0]])
A:sklearn.cluster.tests.test_k_means.pred->MiniBatchKMeans(n_clusters=n_clusters, init='random', n_init=10).fit(X_csr).predict(mb_k_means.cluster_centers_)
A:sklearn.cluster.tests.test_k_means.km1->KMeans(n_clusters=n_clusters, max_iter=1, random_state=42)
A:sklearn.cluster.tests.test_k_means.s1->KMeans(n_clusters=n_clusters, max_iter=1, random_state=42).fit(X).score(X)
A:sklearn.cluster.tests.test_k_means.km2->KMeans(n_clusters=n_clusters, max_iter=10, random_state=42)
A:sklearn.cluster.tests.test_k_means.s2->KMeans(n_clusters=n_clusters, max_iter=10, random_state=42).fit(X).score(X)
A:sklearn.cluster.tests.test_k_means.X_int->numpy.array(X_list, dtype=np.int32)
A:sklearn.cluster.tests.test_k_means.X_int_csr->scipy.sparse.csr_matrix(X_int)
A:sklearn.cluster.tests.test_k_means.scores->numpy.array([v_measure_score(expected_labels, km.labels_) for km in fitted_models])
A:sklearn.cluster.tests.test_k_means.X_new->KMeans(n_clusters=n_clusters, init='random', n_init=n_init, random_state=j).fit(X).transform(km.cluster_centers_)
A:sklearn.cluster.tests.test_k_means.X1->KMeans(n_clusters=3, random_state=51).fit(X).transform(X)
A:sklearn.cluster.tests.test_k_means.X2->KMeans(n_clusters=3, random_state=51).fit_transform(X)
A:sklearn.cluster.tests.test_k_means.inertia->inertia.mean(axis=1).mean(axis=1)
A:sklearn.cluster.tests.test_k_means.(cluster_centers, labels, inertia)->k_means(X, n_clusters=n_clusters, verbose=True)
sklearn.cluster.tests.test_k_means._check_fitted_model(km)
sklearn.cluster.tests.test_k_means._has_blas_lib(libname)
sklearn.cluster.tests.test_k_means.test_fit_transform()
sklearn.cluster.tests.test_k_means.test_input_dtypes()
sklearn.cluster.tests.test_k_means.test_k_means_check_fitted()
sklearn.cluster.tests.test_k_means.test_k_means_copyx()
sklearn.cluster.tests.test_k_means.test_k_means_function()
sklearn.cluster.tests.test_k_means.test_k_means_invalid_init()
sklearn.cluster.tests.test_k_means.test_k_means_new_centers()
sklearn.cluster.tests.test_k_means.test_k_means_non_collapsed()
sklearn.cluster.tests.test_k_means.test_k_means_perfect_init()
sklearn.cluster.tests.test_k_means.test_k_means_plus_plus_init()
sklearn.cluster.tests.test_k_means.test_k_means_plus_plus_init_2_jobs()
sklearn.cluster.tests.test_k_means.test_k_means_plus_plus_init_not_precomputed()
sklearn.cluster.tests.test_k_means.test_k_means_plus_plus_init_sparse()
sklearn.cluster.tests.test_k_means.test_k_means_random_init()
sklearn.cluster.tests.test_k_means.test_k_means_random_init_not_precomputed()
sklearn.cluster.tests.test_k_means.test_k_means_random_init_sparse()
sklearn.cluster.tests.test_k_means.test_kmeans_dtype()
sklearn.cluster.tests.test_k_means.test_labels_assignment_and_inertia()
sklearn.cluster.tests.test_k_means.test_mb_k_means_plus_plus_init_dense_array()
sklearn.cluster.tests.test_k_means.test_mb_k_means_plus_plus_init_sparse_matrix()
sklearn.cluster.tests.test_k_means.test_mb_kmeans_verbose()
sklearn.cluster.tests.test_k_means.test_mini_batch_k_means_random_init_partial_fit()
sklearn.cluster.tests.test_k_means.test_mini_match_k_means_invalid_init()
sklearn.cluster.tests.test_k_means.test_minibatch_default_init_size()
sklearn.cluster.tests.test_k_means.test_minibatch_init_with_large_k()
sklearn.cluster.tests.test_k_means.test_minibatch_k_means_init_multiple_runs_with_explicit_centers()
sklearn.cluster.tests.test_k_means.test_minibatch_k_means_perfect_init_dense_array()
sklearn.cluster.tests.test_k_means.test_minibatch_k_means_perfect_init_sparse_csr()
sklearn.cluster.tests.test_k_means.test_minibatch_k_means_random_init_dense_array()
sklearn.cluster.tests.test_k_means.test_minibatch_k_means_random_init_sparse_csr()
sklearn.cluster.tests.test_k_means.test_minibatch_reassign()
sklearn.cluster.tests.test_k_means.test_minibatch_sensible_reassign_fit()
sklearn.cluster.tests.test_k_means.test_minibatch_sensible_reassign_partial_fit()
sklearn.cluster.tests.test_k_means.test_minibatch_set_init_size()
sklearn.cluster.tests.test_k_means.test_minibatch_tol()
sklearn.cluster.tests.test_k_means.test_minibatch_update_consistency()
sklearn.cluster.tests.test_k_means.test_minibatch_with_many_reassignments()
sklearn.cluster.tests.test_k_means.test_n_init()
sklearn.cluster.tests.test_k_means.test_predict()
sklearn.cluster.tests.test_k_means.test_predict_minibatch_dense_input()
sklearn.cluster.tests.test_k_means.test_predict_minibatch_kmeanspp_init_sparse_input()
sklearn.cluster.tests.test_k_means.test_predict_minibatch_random_init_sparse_input()
sklearn.cluster.tests.test_k_means.test_score()
sklearn.cluster.tests.test_k_means.test_sparse_mb_k_means_callable_init()
sklearn.cluster.tests.test_k_means.test_transform()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/tests/test_mean_shift.py----------------------------------------
A:sklearn.cluster.tests.test_mean_shift.(X, _)->make_blobs(n_samples=300, n_features=2, centers=centers, cluster_std=0.4, shuffle=True, random_state=11)
A:sklearn.cluster.tests.test_mean_shift.bandwidth->estimate_bandwidth(X, n_samples=200)
A:sklearn.cluster.tests.test_mean_shift.ms->MeanShift()
A:sklearn.cluster.tests.test_mean_shift.labels_unique->numpy.unique(labels)
A:sklearn.cluster.tests.test_mean_shift.n_clusters_->len(labels_unique)
A:sklearn.cluster.tests.test_mean_shift.(cluster_centers, labels)->mean_shift(X, bandwidth=bandwidth)
A:sklearn.cluster.tests.test_mean_shift.labels->MeanShift().fit_predict(X)
A:sklearn.cluster.tests.test_mean_shift.labels2->MeanShift().predict(X)
A:sklearn.cluster.tests.test_mean_shift.X->numpy.array([[1.0, 1.0], [1.5, 1.5], [1.8, 1.2], [2.0, 1.0], [2.1, 1.1], [0.0, 0.0]])
A:sklearn.cluster.tests.test_mean_shift.ground_truth->set([(1.0, 1.0), (2.0, 1.0)])
A:sklearn.cluster.tests.test_mean_shift.test_bins->get_bin_seeds(X, 0.01, 1)
A:sklearn.cluster.tests.test_mean_shift.test_result->set([tuple(p) for p in test_bins])
sklearn.cluster.tests.test_mean_shift.test_bin_seeds()
sklearn.cluster.tests.test_mean_shift.test_estimate_bandwidth()
sklearn.cluster.tests.test_mean_shift.test_mean_shift()
sklearn.cluster.tests.test_mean_shift.test_meanshift_predict()
sklearn.cluster.tests.test_mean_shift.test_unfitted()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/tests/test_hierarchical.py----------------------------------------
A:sklearn.cluster.tests.test_hierarchical.rnd->numpy.random.RandomState(0)
A:sklearn.cluster.tests.test_hierarchical.X->numpy.array([(0.014, 0.12), (0.014, 0.099), (0.014, 0.097), (0.017, 0.153), (0.017, 0.153), (0.018, 0.153), (0.018, 0.153), (0.018, 0.153), (0.018, 0.153), (0.018, 0.153), (0.018, 0.153), (0.018, 0.153), (0.018, 0.152), (0.018, 0.149), (0.018, 0.144)])
A:sklearn.cluster.tests.test_hierarchical.dis->cosine_distances(X)
A:sklearn.cluster.tests.test_hierarchical.res->linkage_tree(X, affinity=manhattan_distances)
A:sklearn.cluster.tests.test_hierarchical.mask->numpy.ones([10, 10], dtype=np.bool)
A:sklearn.cluster.tests.test_hierarchical.connectivity->kneighbors_graph(X, 10)
A:sklearn.cluster.tests.test_hierarchical.(children, n_components, n_leaves, parent)->tree_builder(X.T, connectivity)
A:sklearn.cluster.tests.test_hierarchical.(children, n_nodes, n_leaves, parent)->linkage_func(X.T, connectivity)
A:sklearn.cluster.tests.test_hierarchical.clustering->AgglomerativeClustering(n_clusters=10, connectivity=np.ones((n_samples, n_samples)), affinity=affinity, linkage='complete')
A:sklearn.cluster.tests.test_hierarchical.clustering2->AgglomerativeClustering(n_clusters=10, connectivity=None, affinity=affinity, linkage='complete')
A:sklearn.cluster.tests.test_hierarchical.ward->AgglomerativeClustering(n_clusters=4, connectivity=connectivity, linkage='ward')
A:sklearn.cluster.tests.test_hierarchical.agglo->FeatureAgglomeration(n_clusters=5, connectivity=connectivity)
A:sklearn.cluster.tests.test_hierarchical.X_red->FeatureAgglomeration(n_clusters=5, connectivity=connectivity).transform(X)
A:sklearn.cluster.tests.test_hierarchical.X_full->FeatureAgglomeration(n_clusters=5, connectivity=connectivity).inverse_transform(X_red)
A:sklearn.cluster.tests.test_hierarchical.n->len(cut)
A:sklearn.cluster.tests.test_hierarchical.ecut->numpy.zeros((n, k))
A:sklearn.cluster.tests.test_hierarchical.out->scipy.cluster.hierarchy.linkage(X, method=linkage)
A:sklearn.cluster.tests.test_hierarchical.children_->out[:, :2].astype(np.int)
A:sklearn.cluster.tests.test_hierarchical.(children, _, n_leaves, _)->_TREE_BUILDERS[linkage](X, connectivity)
A:sklearn.cluster.tests.test_hierarchical.cut->_hc_cut(k, children, n_leaves)
A:sklearn.cluster.tests.test_hierarchical.cut_->_hc_cut(k, children_, n_leaves)
A:sklearn.cluster.tests.test_hierarchical.x->numpy.array([[0, 0], [1, 1]])
A:sklearn.cluster.tests.test_hierarchical.m->numpy.array([[True, False], [False, True]])
A:sklearn.cluster.tests.test_hierarchical.c->grid_to_graph(n_x=2, n_y=2, mask=m)
A:sklearn.cluster.tests.test_hierarchical.w->AgglomerativeClustering(connectivity=c, linkage='ward')
A:sklearn.cluster.tests.test_hierarchical.rng->numpy.random.RandomState(0)
A:sklearn.cluster.tests.test_hierarchical.keys->numpy.unique(rng.randint(100, size=10).astype(np.intp))
A:sklearn.cluster.tests.test_hierarchical.values->numpy.random.RandomState(0).rand(len(keys))
A:sklearn.cluster.tests.test_hierarchical.d->IntFloatDict(keys, values)
A:sklearn.cluster.tests.test_hierarchical.other->IntFloatDict(other_keys, other_values)
sklearn.cluster.tests.test_hierarchical.assess_same_labelling(cut1,cut2)
sklearn.cluster.tests.test_hierarchical.test_agglomerative_clustering()
sklearn.cluster.tests.test_hierarchical.test_connectivity_fixing_non_lil()
sklearn.cluster.tests.test_hierarchical.test_connectivity_popagation()
sklearn.cluster.tests.test_hierarchical.test_height_linkage_tree()
sklearn.cluster.tests.test_hierarchical.test_int_float_dict()
sklearn.cluster.tests.test_hierarchical.test_linkage_misc()
sklearn.cluster.tests.test_hierarchical.test_scikit_vs_scipy()
sklearn.cluster.tests.test_hierarchical.test_structured_linkage_tree()
sklearn.cluster.tests.test_hierarchical.test_unstructured_linkage_tree()
sklearn.cluster.tests.test_hierarchical.test_ward_agglomeration()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/tests/test_spectral.py----------------------------------------
A:sklearn.cluster.tests.test_spectral.S->scipy.sparse.coo_matrix(S)
A:sklearn.cluster.tests.test_spectral.model->SpectralClustering(random_state=0, n_clusters=2, affinity='precomputed', eigen_solver=eigen_solver, assign_labels=assign_labels).fit(mat)
A:sklearn.cluster.tests.test_spectral.model_copy->loads(dumps(model))
A:sklearn.cluster.tests.test_spectral.centers->numpy.array([[0.0, 0.0, 0.0], [10.0, 10.0, 10.0], [20.0, 20.0, 20.0]])
A:sklearn.cluster.tests.test_spectral.(X, true_labels)->make_blobs(n_samples=100, centers=centers, cluster_std=1.0, random_state=42)
A:sklearn.cluster.tests.test_spectral.D->pairwise_distances(X)
A:sklearn.cluster.tests.test_spectral.labels->spectral_clustering(S, n_clusters=len(centers), random_state=0, eigen_solver='amg')
A:sklearn.cluster.tests.test_spectral.(X, y)->make_blobs(n_samples=20, random_state=0, centers=[[1, 1], [-1, -1]], cluster_std=0.01)
A:sklearn.cluster.tests.test_spectral.sp->SpectralClustering(n_clusters=2, affinity='<unknown>')
A:sklearn.cluster.tests.test_spectral.kernels_available->kernel_metrics()
A:sklearn.cluster.tests.test_spectral.random_state->numpy.random.RandomState(seed)
A:sklearn.cluster.tests.test_spectral.y_true->numpy.array(y_true, np.float)
A:sklearn.cluster.tests.test_spectral.y_indicator->scipy.sparse.coo_matrix((np.ones(n_samples), (np.arange(n_samples), y_true)), shape=(n_samples, n_class + 1))
A:sklearn.cluster.tests.test_spectral.y_pred->discretize(y_true_noisy, random_state)
sklearn.cluster.tests.test_spectral.test_affinities()
sklearn.cluster.tests.test_spectral.test_discretize(seed=8)
sklearn.cluster.tests.test_spectral.test_spectral_amg_mode()
sklearn.cluster.tests.test_spectral.test_spectral_clustering()
sklearn.cluster.tests.test_spectral.test_spectral_clustering_sparse()
sklearn.cluster.tests.test_spectral.test_spectral_unknown_assign_labels()
sklearn.cluster.tests.test_spectral.test_spectral_unknown_mode()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/bicluster/utils.py----------------------------------------
A:sklearn.cluster.bicluster.utils.row_ind->numpy.zeros(shape[0], dtype=np.bool)
A:sklearn.cluster.bicluster.utils.col_ind->numpy.zeros(shape[1], dtype=np.bool)
A:sklearn.cluster.bicluster.utils.indices->get_indices(rows, columns)
A:sklearn.cluster.bicluster.utils.(rows, cols)->get_indices(rows, columns)
sklearn.cluster.bicluster.utils.check_array_ndim(X)
sklearn.cluster.bicluster.utils.get_indicators(rows,columns,shape)
sklearn.cluster.bicluster.utils.get_indices(rows,columns)
sklearn.cluster.bicluster.utils.get_shape(rows,columns)
sklearn.cluster.bicluster.utils.get_submatrix(rows,columns,data)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/bicluster/spectral.py----------------------------------------
A:sklearn.cluster.bicluster.spectral.X->make_nonnegative(X, min_value=1)
A:sklearn.cluster.bicluster.spectral.row_diag->numpy.where(np.isnan(row_diag), 0, row_diag)
A:sklearn.cluster.bicluster.spectral.col_diag->numpy.where(np.isnan(col_diag), 0, col_diag)
A:sklearn.cluster.bicluster.spectral.r->dia_matrix((row_diag, [0]), shape=(n_rows, n_rows))
A:sklearn.cluster.bicluster.spectral.c->dia_matrix((col_diag, [0]), shape=(n_cols, n_cols))
A:sklearn.cluster.bicluster.spectral.(X_new, _, _)->_scale_normalize(X_scaled)
A:sklearn.cluster.bicluster.spectral.dist->norm(X_scaled - X_new)
A:sklearn.cluster.bicluster.spectral.L->numpy.log(X)
A:sklearn.cluster.bicluster.spectral.col_avg->numpy.log(X).mean(axis=0)
A:sklearn.cluster.bicluster.spectral.avg->numpy.log(X).mean()
A:sklearn.cluster.bicluster.spectral.(X,)->check_arrays(X, sparse_format='csr', dtype=np.float64)
A:sklearn.cluster.bicluster.spectral.(u, _, vt)->svds(array, k=n_components, ncv=self.n_svd_vecs)
A:sklearn.cluster.bicluster.spectral.(_, v)->eigsh(safe_sparse_dot(array.T, array), ncv=self.n_svd_vecs)
A:sklearn.cluster.bicluster.spectral.(_, u)->eigsh(safe_sparse_dot(array, array.T), ncv=self.n_svd_vecs)
A:sklearn.cluster.bicluster.spectral.model->KMeans(n_clusters, init=self.init, n_init=self.n_init, n_jobs=self.n_jobs, random_state=self.random_state)
A:sklearn.cluster.bicluster.spectral.(normalized_data, row_diag, col_diag)->_scale_normalize(X)
A:sklearn.cluster.bicluster.spectral.(u, v)->self._svd(normalized_data, n_sv, n_discard)
A:sklearn.cluster.bicluster.spectral.z->numpy.vstack((row_diag[:, np.newaxis] * u, col_diag[:, np.newaxis] * v))
A:sklearn.cluster.bicluster.spectral.(_, labels)->self._k_means(projected, n_clusters)
A:sklearn.cluster.bicluster.spectral.self.rows_->numpy.vstack((self.row_labels_ == label for label in range(n_row_clusters) for _ in range(n_col_clusters)))
A:sklearn.cluster.bicluster.spectral.self.columns_->numpy.vstack((self.column_labels_ == label for _ in range(n_row_clusters) for label in range(n_col_clusters)))
A:sklearn.cluster.bicluster.spectral.normalized_data->_log_normalize(X)
A:sklearn.cluster.bicluster.spectral.(normalized_data, _, _)->_scale_normalize(X)
A:sklearn.cluster.bicluster.spectral.best_ut->self._fit_best_piecewise(ut, self.n_best, n_row_clusters)
A:sklearn.cluster.bicluster.spectral.best_vt->self._fit_best_piecewise(vt, self.n_best, n_col_clusters)
A:sklearn.cluster.bicluster.spectral.self.row_labels_->self._project_and_cluster(X, best_vt.T, n_row_clusters)
A:sklearn.cluster.bicluster.spectral.self.column_labels_->self._project_and_cluster(X.T, best_ut.T, n_col_clusters)
A:sklearn.cluster.bicluster.spectral.(centroid, labels)->self._k_means(v.reshape(-1, 1), n_clusters)
A:sklearn.cluster.bicluster.spectral.piecewise_vectors->numpy.apply_along_axis(make_piecewise, axis=1, arr=vectors)
A:sklearn.cluster.bicluster.spectral.dists->numpy.apply_along_axis(norm, axis=1, arr=vectors - piecewise_vectors)
A:sklearn.cluster.bicluster.spectral.projected->safe_sparse_dot(data, vectors)
sklearn.cluster.SpectralBiclustering(self,n_clusters=3,method='bistochastic',n_components=6,n_best=3,svd_method='randomized',n_svd_vecs=None,mini_batch=False,init='k-means++',n_init=10,n_jobs=1,random_state=None)
sklearn.cluster.SpectralBiclustering._check_parameters(self)
sklearn.cluster.SpectralBiclustering._fit(self,X)
sklearn.cluster.SpectralBiclustering._fit_best_piecewise(self,vectors,n_best,n_clusters)
sklearn.cluster.SpectralBiclustering._project_and_cluster(self,data,vectors,n_clusters)
sklearn.cluster.SpectralCoclustering(self,n_clusters=3,svd_method='randomized',n_svd_vecs=None,mini_batch=False,init='k-means++',n_init=10,n_jobs=1,random_state=None)
sklearn.cluster.SpectralCoclustering._fit(self,X)
sklearn.cluster.bicluster.spectral.BaseSpectral(self,n_clusters=3,svd_method='randomized',n_svd_vecs=None,mini_batch=False,init='k-means++',n_init=10,n_jobs=1,random_state=None)
sklearn.cluster.bicluster.spectral.BaseSpectral.__init__(self,n_clusters=3,svd_method='randomized',n_svd_vecs=None,mini_batch=False,init='k-means++',n_init=10,n_jobs=1,random_state=None)
sklearn.cluster.bicluster.spectral.BaseSpectral._check_parameters(self)
sklearn.cluster.bicluster.spectral.BaseSpectral._k_means(self,data,n_clusters)
sklearn.cluster.bicluster.spectral.BaseSpectral._svd(self,array,n_components,n_discard)
sklearn.cluster.bicluster.spectral.BaseSpectral.fit(self,X)
sklearn.cluster.bicluster.spectral.SpectralBiclustering(self,n_clusters=3,method='bistochastic',n_components=6,n_best=3,svd_method='randomized',n_svd_vecs=None,mini_batch=False,init='k-means++',n_init=10,n_jobs=1,random_state=None)
sklearn.cluster.bicluster.spectral.SpectralBiclustering.__init__(self,n_clusters=3,method='bistochastic',n_components=6,n_best=3,svd_method='randomized',n_svd_vecs=None,mini_batch=False,init='k-means++',n_init=10,n_jobs=1,random_state=None)
sklearn.cluster.bicluster.spectral.SpectralBiclustering._check_parameters(self)
sklearn.cluster.bicluster.spectral.SpectralBiclustering._fit(self,X)
sklearn.cluster.bicluster.spectral.SpectralBiclustering._fit_best_piecewise(self,vectors,n_best,n_clusters)
sklearn.cluster.bicluster.spectral.SpectralBiclustering._project_and_cluster(self,data,vectors,n_clusters)
sklearn.cluster.bicluster.spectral.SpectralCoclustering(self,n_clusters=3,svd_method='randomized',n_svd_vecs=None,mini_batch=False,init='k-means++',n_init=10,n_jobs=1,random_state=None)
sklearn.cluster.bicluster.spectral.SpectralCoclustering.__init__(self,n_clusters=3,svd_method='randomized',n_svd_vecs=None,mini_batch=False,init='k-means++',n_init=10,n_jobs=1,random_state=None)
sklearn.cluster.bicluster.spectral.SpectralCoclustering._fit(self,X)
sklearn.cluster.bicluster.spectral._bistochastic_normalize(X,max_iter=1000,tol=1e-05)
sklearn.cluster.bicluster.spectral._log_normalize(X)
sklearn.cluster.bicluster.spectral._scale_normalize(X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/bicluster/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/bicluster/tests/test_utils.py----------------------------------------
A:sklearn.cluster.bicluster.tests.test_utils.(row_ind, col_ind)->get_indicators(rows, columns, shape)
A:sklearn.cluster.bicluster.tests.test_utils.data->numpy.arange(20).reshape(5, 4)
A:sklearn.cluster.bicluster.tests.test_utils.submatrix->submatrix.toarray().toarray()
A:sklearn.cluster.bicluster.tests.test_utils.X->X.toarray().toarray()
sklearn.cluster.bicluster.tests.test_utils.test_get_indicators()
sklearn.cluster.bicluster.tests.test_utils.test_get_shape()
sklearn.cluster.bicluster.tests.test_utils.test_get_submatrix()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/bicluster/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cluster/bicluster/tests/test_spectral.py----------------------------------------
A:sklearn.cluster.bicluster.tests.test_spectral.(S, rows, cols)->make_checkerboard((30, 40), 3, noise=0, random_state=0)
A:sklearn.cluster.bicluster.tests.test_spectral.S->numpy.where(S < 1, 0, S)
A:sklearn.cluster.bicluster.tests.test_spectral.model->SpectralBiclustering()
A:sklearn.cluster.bicluster.tests.test_spectral.row_sum->numpy.asarray(row_sum).squeeze()
A:sklearn.cluster.bicluster.tests.test_spectral.col_sum->numpy.asarray(col_sum).squeeze()
A:sklearn.cluster.bicluster.tests.test_spectral.generator->numpy.random.RandomState(0)
A:sklearn.cluster.bicluster.tests.test_spectral.X->numpy.random.RandomState(0).rand(100, 100)
A:sklearn.cluster.bicluster.tests.test_spectral.(scaled, _, _)->_scale_normalize(mat)
A:sklearn.cluster.bicluster.tests.test_spectral.scaled->_bistochastic_normalize(mat)
A:sklearn.cluster.bicluster.tests.test_spectral.mat->numpy.random.RandomState(0).rand(100, 100)
A:sklearn.cluster.bicluster.tests.test_spectral.vectors->numpy.array([[1, 0], [0, 1], [0, 0]])
A:sklearn.cluster.bicluster.tests.test_spectral.best->SpectralBiclustering()._fit_best_piecewise(vectors, n_best=2, n_clusters=2)
A:sklearn.cluster.bicluster.tests.test_spectral.data->numpy.arange(27).reshape((3, 3, 3))
A:sklearn.cluster.bicluster.tests.test_spectral.labels->SpectralBiclustering()._project_and_cluster(data, vectors, n_clusters=2)
sklearn.cluster.bicluster.tests.test_spectral._do_bistochastic_test(scaled)
sklearn.cluster.bicluster.tests.test_spectral._do_scale_test(scaled)
sklearn.cluster.bicluster.tests.test_spectral.test_bistochastic_normalize()
sklearn.cluster.bicluster.tests.test_spectral.test_errors()
sklearn.cluster.bicluster.tests.test_spectral.test_fit_best_piecewise()
sklearn.cluster.bicluster.tests.test_spectral.test_log_normalize()
sklearn.cluster.bicluster.tests.test_spectral.test_perfect_checkerboard()
sklearn.cluster.bicluster.tests.test_spectral.test_project_and_cluster()
sklearn.cluster.bicluster.tests.test_spectral.test_scale_normalize()
sklearn.cluster.bicluster.tests.test_spectral.test_spectral_biclustering()
sklearn.cluster.bicluster.tests.test_spectral.test_spectral_coclustering()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_extraction/text.py----------------------------------------
A:sklearn.feature_extraction.text.nkfd_form->unicodedata.normalize('NFKD', s)
A:sklearn.feature_extraction.text._white_spaces->re.compile('\\s\\s+')
A:sklearn.feature_extraction.text.doc->doc.decode(self.encoding, self.decode_error).decode(self.encoding, self.decode_error)
A:sklearn.feature_extraction.text.n_original_tokens->len(original_tokens)
A:sklearn.feature_extraction.text.text_document->self._white_spaces.sub(' ', text_document)
A:sklearn.feature_extraction.text.text_len->len(text_document)
A:sklearn.feature_extraction.text.w_len->len(w)
A:sklearn.feature_extraction.text.token_pattern->re.compile(self.token_pattern)
A:sklearn.feature_extraction.text.preprocess->self.build_preprocessor()
A:sklearn.feature_extraction.text.stop_words->self.get_stop_words()
A:sklearn.feature_extraction.text.tokenize->self.build_tokenizer()
A:sklearn.feature_extraction.text.indices->numpy.array(list(self.vocabulary_.values()))
A:sklearn.feature_extraction.text.self.vocabulary_->dict(vocabulary)
A:sklearn.feature_extraction.text.analyzer->self.build_analyzer()
A:sklearn.feature_extraction.text.X->super(TfidfVectorizer, self).transform(raw_documents)
A:sklearn.feature_extraction.text.sorted_features->sorted(six.iteritems(vocabulary))
A:sklearn.feature_extraction.text.map_index->numpy.empty(len(sorted_features), dtype=np.int32)
A:sklearn.feature_extraction.text.dfs->_document_frequency(X)
A:sklearn.feature_extraction.text.tfs->numpy.asarray(X.sum(axis=0)).ravel()
A:sklearn.feature_extraction.text.mask->numpy.ones(len(dfs), dtype=bool)
A:sklearn.feature_extraction.text.new_mask->numpy.zeros(len(dfs), dtype=bool)
A:sklearn.feature_extraction.text.removed_terms->set()
A:sklearn.feature_extraction.text.vocabulary->dict(vocabulary)
A:sklearn.feature_extraction.text.analyze->self.build_analyzer()
A:sklearn.feature_extraction.text.j_indices->numpy.array([], dtype=np.int32)
A:sklearn.feature_extraction.text.indptr->numpy.frombuffer(indptr, dtype=np.intc)
A:sklearn.feature_extraction.text.values->numpy.ones(len(j_indices))
A:sklearn.feature_extraction.text.(vocabulary, X)->self._count_vocab(raw_documents, self.fixed_vocabulary_)
A:sklearn.feature_extraction.text.(X, self.stop_words_)->self._limit_features(X, vocabulary, max_doc_count, min_doc_count, max_features)
A:sklearn.feature_extraction.text.(_, X)->self._count_vocab(raw_documents, fixed_vocab=True)
A:sklearn.feature_extraction.text.terms->numpy.array(list(self.vocabulary_.keys()))
A:sklearn.feature_extraction.text.df->_document_frequency(X)
A:sklearn.feature_extraction.text.self._idf_diag->scipy.sparse.spdiags(idf, diags=0, m=n_features, n=n_features)
A:sklearn.feature_extraction.text.self._tfidf->TfidfTransformer(norm=norm, use_idf=use_idf, smooth_idf=smooth_idf, sublinear_tf=sublinear_tf)
sklearn.feature_extraction.text.CountVectorizer(self,input='content',encoding='utf-8',charset=None,decode_error='strict',charset_error=None,strip_accents=None,lowercase=True,preprocessor=None,tokenizer=None,stop_words=None,token_pattern='(?u)\\b\\w\\w+\\b',ngram_range=(1,1),analyzer='word',max_df=1.0,min_df=1,max_features=None,vocabulary=None,binary=False,dtype=np.int64)
sklearn.feature_extraction.text.CountVectorizer.__init__(self,input='content',encoding='utf-8',charset=None,decode_error='strict',charset_error=None,strip_accents=None,lowercase=True,preprocessor=None,tokenizer=None,stop_words=None,token_pattern='(?u)\\b\\w\\w+\\b',ngram_range=(1,1),analyzer='word',max_df=1.0,min_df=1,max_features=None,vocabulary=None,binary=False,dtype=np.int64)
sklearn.feature_extraction.text.CountVectorizer._count_vocab(self,raw_documents,fixed_vocab)
sklearn.feature_extraction.text.CountVectorizer._limit_features(self,X,vocabulary,high=None,low=None,limit=None)
sklearn.feature_extraction.text.CountVectorizer._sort_features(self,X,vocabulary)
sklearn.feature_extraction.text.CountVectorizer.fit(self,raw_documents,y=None)
sklearn.feature_extraction.text.CountVectorizer.fit_transform(self,raw_documents,y=None)
sklearn.feature_extraction.text.CountVectorizer.get_feature_names(self)
sklearn.feature_extraction.text.CountVectorizer.inverse_transform(self,X)
sklearn.feature_extraction.text.CountVectorizer.transform(self,raw_documents)
sklearn.feature_extraction.text.HashingVectorizer(self,input='content',charset=None,encoding='utf-8',decode_error='strict',charset_error=None,strip_accents=None,lowercase=True,preprocessor=None,tokenizer=None,stop_words=None,token_pattern='(?u)\\b\\w\\w+\\b',ngram_range=(1,1),analyzer='word',n_features=2**20,binary=False,norm='l2',non_negative=False,dtype=np.float64)
sklearn.feature_extraction.text.HashingVectorizer.__init__(self,input='content',charset=None,encoding='utf-8',decode_error='strict',charset_error=None,strip_accents=None,lowercase=True,preprocessor=None,tokenizer=None,stop_words=None,token_pattern='(?u)\\b\\w\\w+\\b',ngram_range=(1,1),analyzer='word',n_features=2**20,binary=False,norm='l2',non_negative=False,dtype=np.float64)
sklearn.feature_extraction.text.HashingVectorizer._get_hasher(self)
sklearn.feature_extraction.text.HashingVectorizer.fit(self,X,y=None)
sklearn.feature_extraction.text.HashingVectorizer.partial_fit(self,X,y=None)
sklearn.feature_extraction.text.HashingVectorizer.transform(self,X,y=None)
sklearn.feature_extraction.text.TfidfTransformer(self,norm='l2',use_idf=True,smooth_idf=True,sublinear_tf=False)
sklearn.feature_extraction.text.TfidfTransformer.__init__(self,norm='l2',use_idf=True,smooth_idf=True,sublinear_tf=False)
sklearn.feature_extraction.text.TfidfTransformer.fit(self,X,y=None)
sklearn.feature_extraction.text.TfidfTransformer.idf_(self)
sklearn.feature_extraction.text.TfidfTransformer.transform(self,X,copy=True)
sklearn.feature_extraction.text.TfidfVectorizer(self,input='content',encoding='utf-8',charset=None,decode_error='strict',charset_error=None,strip_accents=None,lowercase=True,preprocessor=None,tokenizer=None,analyzer='word',stop_words=None,token_pattern='(?u)\\b\\w\\w+\\b',ngram_range=(1,1),max_df=1.0,min_df=1,max_features=None,vocabulary=None,binary=False,dtype=np.int64,norm='l2',use_idf=True,smooth_idf=True,sublinear_tf=False)
sklearn.feature_extraction.text.TfidfVectorizer.__init__(self,input='content',encoding='utf-8',charset=None,decode_error='strict',charset_error=None,strip_accents=None,lowercase=True,preprocessor=None,tokenizer=None,analyzer='word',stop_words=None,token_pattern='(?u)\\b\\w\\w+\\b',ngram_range=(1,1),max_df=1.0,min_df=1,max_features=None,vocabulary=None,binary=False,dtype=np.int64,norm='l2',use_idf=True,smooth_idf=True,sublinear_tf=False)
sklearn.feature_extraction.text.TfidfVectorizer.fit(self,raw_documents,y=None)
sklearn.feature_extraction.text.TfidfVectorizer.fit_transform(self,raw_documents,y=None)
sklearn.feature_extraction.text.TfidfVectorizer.idf_(self)
sklearn.feature_extraction.text.TfidfVectorizer.norm(self)
sklearn.feature_extraction.text.TfidfVectorizer.norm(self,value)
sklearn.feature_extraction.text.TfidfVectorizer.smooth_idf(self)
sklearn.feature_extraction.text.TfidfVectorizer.smooth_idf(self,value)
sklearn.feature_extraction.text.TfidfVectorizer.sublinear_tf(self)
sklearn.feature_extraction.text.TfidfVectorizer.sublinear_tf(self,value)
sklearn.feature_extraction.text.TfidfVectorizer.transform(self,raw_documents,copy=True)
sklearn.feature_extraction.text.TfidfVectorizer.use_idf(self)
sklearn.feature_extraction.text.TfidfVectorizer.use_idf(self,value)
sklearn.feature_extraction.text.VectorizerMixin(object)
sklearn.feature_extraction.text.VectorizerMixin._char_ngrams(self,text_document)
sklearn.feature_extraction.text.VectorizerMixin._char_wb_ngrams(self,text_document)
sklearn.feature_extraction.text.VectorizerMixin._check_vocabulary(self)
sklearn.feature_extraction.text.VectorizerMixin._word_ngrams(self,tokens,stop_words=None)
sklearn.feature_extraction.text.VectorizerMixin.build_analyzer(self)
sklearn.feature_extraction.text.VectorizerMixin.build_preprocessor(self)
sklearn.feature_extraction.text.VectorizerMixin.build_tokenizer(self)
sklearn.feature_extraction.text.VectorizerMixin.decode(self,doc)
sklearn.feature_extraction.text.VectorizerMixin.fixed_vocabulary(self)
sklearn.feature_extraction.text.VectorizerMixin.get_stop_words(self)
sklearn.feature_extraction.text._check_stop_list(stop)
sklearn.feature_extraction.text._document_frequency(X)
sklearn.feature_extraction.text._make_int_array()
sklearn.feature_extraction.text.strip_accents_ascii(s)
sklearn.feature_extraction.text.strip_accents_unicode(s)
sklearn.feature_extraction.text.strip_tags(s)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_extraction/stop_words.py----------------------------------------
A:sklearn.feature_extraction.stop_words.ENGLISH_STOP_WORDS->frozenset(['a', 'about', 'above', 'across', 'after', 'afterwards', 'again', 'against', 'all', 'almost', 'alone', 'along', 'already', 'also', 'although', 'always', 'am', 'among', 'amongst', 'amoungst', 'amount', 'an', 'and', 'another', 'any', 'anyhow', 'anyone', 'anything', 'anyway', 'anywhere', 'are', 'around', 'as', 'at', 'back', 'be', 'became', 'because', 'become', 'becomes', 'becoming', 'been', 'before', 'beforehand', 'behind', 'being', 'below', 'beside', 'besides', 'between', 'beyond', 'bill', 'both', 'bottom', 'but', 'by', 'call', 'can', 'cannot', 'cant', 'co', 'con', 'could', 'couldnt', 'cry', 'de', 'describe', 'detail', 'do', 'done', 'down', 'due', 'during', 'each', 'eg', 'eight', 'either', 'eleven', 'else', 'elsewhere', 'empty', 'enough', 'etc', 'even', 'ever', 'every', 'everyone', 'everything', 'everywhere', 'except', 'few', 'fifteen', 'fify', 'fill', 'find', 'fire', 'first', 'five', 'for', 'former', 'formerly', 'forty', 'found', 'four', 'from', 'front', 'full', 'further', 'get', 'give', 'go', 'had', 'has', 'hasnt', 'have', 'he', 'hence', 'her', 'here', 'hereafter', 'hereby', 'herein', 'hereupon', 'hers', 'herself', 'him', 'himself', 'his', 'how', 'however', 'hundred', 'i', 'ie', 'if', 'in', 'inc', 'indeed', 'interest', 'into', 'is', 'it', 'its', 'itself', 'keep', 'last', 'latter', 'latterly', 'least', 'less', 'ltd', 'made', 'many', 'may', 'me', 'meanwhile', 'might', 'mill', 'mine', 'more', 'moreover', 'most', 'mostly', 'move', 'much', 'must', 'my', 'myself', 'name', 'namely', 'neither', 'never', 'nevertheless', 'next', 'nine', 'no', 'nobody', 'none', 'noone', 'nor', 'not', 'nothing', 'now', 'nowhere', 'of', 'off', 'often', 'on', 'once', 'one', 'only', 'onto', 'or', 'other', 'others', 'otherwise', 'our', 'ours', 'ourselves', 'out', 'over', 'own', 'part', 'per', 'perhaps', 'please', 'put', 'rather', 're', 'same', 'see', 'seem', 'seemed', 'seeming', 'seems', 'serious', 'several', 'she', 'should', 'show', 'side', 'since', 'sincere', 'six', 'sixty', 'so', 'some', 'somehow', 'someone', 'something', 'sometime', 'sometimes', 'somewhere', 'still', 'such', 'system', 'take', 'ten', 'than', 'that', 'the', 'their', 'them', 'themselves', 'then', 'thence', 'there', 'thereafter', 'thereby', 'therefore', 'therein', 'thereupon', 'these', 'they', 'thick', 'thin', 'third', 'this', 'those', 'though', 'three', 'through', 'throughout', 'thru', 'thus', 'to', 'together', 'too', 'top', 'toward', 'towards', 'twelve', 'twenty', 'two', 'un', 'under', 'until', 'up', 'upon', 'us', 'very', 'via', 'was', 'we', 'well', 'were', 'what', 'whatever', 'when', 'whence', 'whenever', 'where', 'whereafter', 'whereas', 'whereby', 'wherein', 'whereupon', 'wherever', 'whether', 'which', 'while', 'whither', 'who', 'whoever', 'whole', 'whom', 'whose', 'why', 'will', 'with', 'within', 'without', 'would', 'yet', 'you', 'your', 'yours', 'yourself', 'yourselves'])


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_extraction/hashing.py----------------------------------------
A:sklearn.feature_extraction.hashing.raw_X->iter(raw_X)
A:sklearn.feature_extraction.hashing.(indices, indptr, values)->_hashing.transform(raw_X, self.n_features, self.dtype)
A:sklearn.feature_extraction.hashing.X->scipy.sparse.csr_matrix((values, indices, indptr), dtype=self.dtype, shape=(n_samples, self.n_features))
sklearn.feature_extraction.FeatureHasher(self,n_features=2**20,input_type='dict',dtype=np.float64,non_negative=False)
sklearn.feature_extraction.FeatureHasher._validate_params(n_features,input_type)
sklearn.feature_extraction.FeatureHasher.fit(self,X=None,y=None)
sklearn.feature_extraction.FeatureHasher.transform(self,raw_X,y=None)
sklearn.feature_extraction.hashing.FeatureHasher(self,n_features=2**20,input_type='dict',dtype=np.float64,non_negative=False)
sklearn.feature_extraction.hashing.FeatureHasher.__init__(self,n_features=2**20,input_type='dict',dtype=np.float64,non_negative=False)
sklearn.feature_extraction.hashing.FeatureHasher._validate_params(n_features,input_type)
sklearn.feature_extraction.hashing.FeatureHasher.fit(self,X=None,y=None)
sklearn.feature_extraction.hashing.FeatureHasher.transform(self,raw_X,y=None)
sklearn.feature_extraction.hashing._iteritems(d)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_extraction/dict_vectorizer.py----------------------------------------
A:sklearn.feature_extraction.dict_vectorizer.feature_names->sorted(feature_names)
A:sklearn.feature_extraction.dict_vectorizer.self.vocabulary_->dict(((f, i) for (i, f) in enumerate(feature_names)))
A:sklearn.feature_extraction.dict_vectorizer.X->_tosequence(X)
A:sklearn.feature_extraction.dict_vectorizer.indices->numpy.frombuffer(indices, dtype=np.intc)
A:sklearn.feature_extraction.dict_vectorizer.indptr->numpy.frombuffer(indptr, dtype=np.intc)
A:sklearn.feature_extraction.dict_vectorizer.Xa->numpy.zeros((len(X), len(vocab)), dtype=dtype)
A:sklearn.feature_extraction.dict_vectorizer.Xa[i, vocab[f]]->dtype(v)
A:sklearn.feature_extraction.dict_vectorizer.new_vocab[names[i]]->len(new_vocab)
sklearn.feature_extraction.DictVectorizer(self,dtype=np.float64,separator='=',sparse=True)
sklearn.feature_extraction.DictVectorizer.fit(self,X,y=None)
sklearn.feature_extraction.DictVectorizer.fit_transform(self,X,y=None)
sklearn.feature_extraction.DictVectorizer.get_feature_names(self)
sklearn.feature_extraction.DictVectorizer.inverse_transform(self,X,dict_type=dict)
sklearn.feature_extraction.DictVectorizer.restrict(self,support,indices=False)
sklearn.feature_extraction.DictVectorizer.transform(self,X,y=None)
sklearn.feature_extraction.dict_vectorizer.DictVectorizer(self,dtype=np.float64,separator='=',sparse=True)
sklearn.feature_extraction.dict_vectorizer.DictVectorizer.__init__(self,dtype=np.float64,separator='=',sparse=True)
sklearn.feature_extraction.dict_vectorizer.DictVectorizer.fit(self,X,y=None)
sklearn.feature_extraction.dict_vectorizer.DictVectorizer.fit_transform(self,X,y=None)
sklearn.feature_extraction.dict_vectorizer.DictVectorizer.get_feature_names(self)
sklearn.feature_extraction.dict_vectorizer.DictVectorizer.inverse_transform(self,X,dict_type=dict)
sklearn.feature_extraction.dict_vectorizer.DictVectorizer.restrict(self,support,indices=False)
sklearn.feature_extraction.dict_vectorizer.DictVectorizer.transform(self,X,y=None)
sklearn.feature_extraction.dict_vectorizer._tosequence(X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_extraction/setup.py----------------------------------------
A:sklearn.feature_extraction.setup.config->Configuration('feature_extraction', parent_package, top_path)
sklearn.feature_extraction.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_extraction/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_extraction/image.py----------------------------------------
A:sklearn.feature_extraction.image.vertices->numpy.arange(n_x * n_y * n_z).reshape((n_x, n_y, n_z))
A:sklearn.feature_extraction.image.edges_deep->numpy.vstack((vertices[:, :, :-1].ravel(), vertices[:, :, 1:].ravel()))
A:sklearn.feature_extraction.image.edges_right->numpy.vstack((vertices[:, :-1].ravel(), vertices[:, 1:].ravel()))
A:sklearn.feature_extraction.image.edges_down->numpy.vstack((vertices[:-1].ravel(), vertices[1:].ravel()))
A:sklearn.feature_extraction.image.edges->_mask_edges_weights(mask, edges)
A:sklearn.feature_extraction.image.gradient->numpy.abs(img[edges[0] // (n_y * n_z), edges[0] % (n_y * n_z) // n_z, edges[0] % (n_y * n_z) % n_z] - img[edges[1] // (n_y * n_z), edges[1] % (n_y * n_z) // n_z, edges[1] % (n_y * n_z) % n_z])
A:sklearn.feature_extraction.image.inds->numpy.arange(mask.size)
A:sklearn.feature_extraction.image.ind_mask->numpy.logical_and(np.in1d(edges[0], inds), np.in1d(edges[1], inds))
A:sklearn.feature_extraction.image.maxval->_mask_edges_weights(mask, edges).max()
A:sklearn.feature_extraction.image.order->numpy.searchsorted(np.unique(edges.ravel()), np.arange(maxval + 1))
A:sklearn.feature_extraction.image.img->numpy.zeros(image_size)
A:sklearn.feature_extraction.image.weights->numpy.ones(edges.shape[1], dtype=dtype)
A:sklearn.feature_extraction.image.(edges, weights)->_mask_edges_weights(mask, edges, weights)
A:sklearn.feature_extraction.image.diag->numpy.ones(n_voxels, dtype=dtype)
A:sklearn.feature_extraction.image.mask->numpy.asarray(mask, dtype=np.bool)
A:sklearn.feature_extraction.image.n_voxels->numpy.sum(mask)
A:sklearn.feature_extraction.image.diag_idx->numpy.arange(n_voxels)
A:sklearn.feature_extraction.image.i_idx->numpy.hstack((edges[0], edges[1]))
A:sklearn.feature_extraction.image.j_idx->numpy.hstack((edges[1], edges[0]))
A:sklearn.feature_extraction.image.graph->scipy.sparse.coo_matrix((np.hstack((weights, weights, diag)), (np.hstack((i_idx, diag_idx)), np.hstack((j_idx, diag_idx)))), (n_voxels, n_voxels), dtype=dtype)
A:sklearn.feature_extraction.image.patch_shape->tuple([patch_shape] * arr_ndim)
A:sklearn.feature_extraction.image.extraction_step->tuple([extraction_step] * arr_ndim)
A:sklearn.feature_extraction.image.shape->tuple(list(patch_indices_shape) + list(patch_shape))
A:sklearn.feature_extraction.image.strides->tuple(list(indexing_strides) + list(patch_strides))
A:sklearn.feature_extraction.image.patches->numpy.empty(patches_shape)
A:sklearn.feature_extraction.image.image->image.reshape((i_h, i_w, -1)).reshape((i_h, i_w, -1))
A:sklearn.feature_extraction.image.extracted_patches->extract_patches(image, patch_shape=(p_h, p_w, n_colors), extraction_step=1)
A:sklearn.feature_extraction.image.n_patches->_compute_n_patches(i_h, i_w, p_h, p_w, self.max_patches)
A:sklearn.feature_extraction.image.rng->check_random_state(random_state)
A:sklearn.feature_extraction.image.i_s->check_random_state(random_state).randint(i_h - p_h + 1, size=n_patches)
A:sklearn.feature_extraction.image.j_s->check_random_state(random_state).randint(i_w - p_w + 1, size=n_patches)
A:sklearn.feature_extraction.image.self.random_state->check_random_state(self.random_state)
A:sklearn.feature_extraction.image.X->numpy.reshape(X, (n_images, i_h, i_w, -1))
A:sklearn.feature_extraction.image.patches[ii * n_patches:(ii + 1) * n_patches]->extract_patches_2d(image, patch_size, self.max_patches, self.random_state)
sklearn.feature_extraction.grid_to_graph(n_x,n_y,n_z=1,mask=None,return_as=sparse.coo_matrix,dtype=np.int)
sklearn.feature_extraction.image.PatchExtractor(self,patch_size=None,max_patches=None,random_state=None)
sklearn.feature_extraction.image.PatchExtractor.__init__(self,patch_size=None,max_patches=None,random_state=None)
sklearn.feature_extraction.image.PatchExtractor.fit(self,X,y=None)
sklearn.feature_extraction.image.PatchExtractor.transform(self,X)
sklearn.feature_extraction.image._compute_gradient_3d(edges,img)
sklearn.feature_extraction.image._compute_n_patches(i_h,i_w,p_h,p_w,max_patches=None)
sklearn.feature_extraction.image._make_edges_3d(n_x,n_y,n_z=1)
sklearn.feature_extraction.image._mask_edges_weights(mask,edges,weights=None)
sklearn.feature_extraction.image._to_graph(n_x,n_y,n_z,mask=None,img=None,return_as=sparse.coo_matrix,dtype=None)
sklearn.feature_extraction.image.extract_patches(arr,patch_shape=8,extraction_step=1)
sklearn.feature_extraction.image.extract_patches_2d(image,patch_size,max_patches=None,random_state=None)
sklearn.feature_extraction.image.grid_to_graph(n_x,n_y,n_z=1,mask=None,return_as=sparse.coo_matrix,dtype=np.int)
sklearn.feature_extraction.image.img_to_graph(img,mask=None,return_as=sparse.coo_matrix,dtype=None)
sklearn.feature_extraction.image.reconstruct_from_patches_2d(patches,image_size)
sklearn.feature_extraction.img_to_graph(img,mask=None,return_as=sparse.coo_matrix,dtype=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_extraction/tests/test_feature_hasher.py----------------------------------------
A:sklearn.feature_extraction.tests.test_feature_hasher.h->FeatureHasher(n_features=np.uint16(2 ** 6))
A:sklearn.feature_extraction.tests.test_feature_hasher.X1->FeatureHasher(n_features=16).transform(raw_X)
A:sklearn.feature_extraction.tests.test_feature_hasher.X2->FeatureHasher(n_features=16, input_type='pair').transform(gen)
A:sklearn.feature_extraction.tests.test_feature_hasher.X->FeatureHasher().transform([{'foo': 0}])
A:sklearn.feature_extraction.tests.test_feature_hasher.(x1, x2)->FeatureHasher(n_features=np.uint16(2 ** 6)).transform(raw_X).toarray()
A:sklearn.feature_extraction.tests.test_feature_hasher.x1_nz->sorted(np.abs(x1[x1 != 0]))
A:sklearn.feature_extraction.tests.test_feature_hasher.x2_nz->sorted(np.abs(x2[x2 != 0]))
A:sklearn.feature_extraction.tests.test_feature_hasher.hasher->FeatureHasher()
sklearn.feature_extraction.tests.test_feature_hasher.test_feature_hasher_dicts()
sklearn.feature_extraction.tests.test_feature_hasher.test_feature_hasher_pairs()
sklearn.feature_extraction.tests.test_feature_hasher.test_feature_hasher_strings()
sklearn.feature_extraction.tests.test_feature_hasher.test_hash_empty_input()
sklearn.feature_extraction.tests.test_feature_hasher.test_hasher_invalid_input()
sklearn.feature_extraction.tests.test_feature_hasher.test_hasher_set_params()
sklearn.feature_extraction.tests.test_feature_hasher.test_hasher_zeros()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_extraction/tests/test_text.py----------------------------------------
A:sklearn.feature_extraction.tests.test_text.wa->CountVectorizer(ngram_range=(1, 2), encoding='ascii').build_analyzer()
A:sklearn.feature_extraction.tests.test_text.text->StringIO('A test with a file-like object!')
A:sklearn.feature_extraction.tests.test_text.text_bytes->StringIO('A test with a file-like object!').encode('utf-8')
A:sklearn.feature_extraction.tests.test_text.ca->assert_warns_message(DeprecationWarning, in_warning_message, CountVectorizer, analyzer='char', ngram_range=(3, 6), charset='ascii').build_analyzer()
A:sklearn.feature_extraction.tests.test_text.cnga->CountVectorizer(input='file', analyzer='char_wb', ngram_range=(3, 6)).build_analyzer()
A:sklearn.feature_extraction.tests.test_text.terms->numpy.sort(np.unique(analyze(doc)))
A:sklearn.feature_extraction.tests.test_text.v->TfidfVectorizer(binary=True, use_idf=False, norm=None)
A:sklearn.feature_extraction.tests.test_text.vect->TfidfVectorizer(use_idf=True)
A:sklearn.feature_extraction.tests.test_text.X->TfidfVectorizer(binary=True, use_idf=False, norm=None).fit_transform(['hello world', 'hello hello']).toarray()
A:sklearn.feature_extraction.tests.test_text.pipe->Pipeline([('count', CountVectorizer(vocabulary=what_we_like)), ('tfidf', TfidfTransformer())])
A:sklearn.feature_extraction.tests.test_text.cv->CountVectorizer(max_df=0.5)
A:sklearn.feature_extraction.tests.test_text.X1->CountVectorizer(max_df=0.5).fit_transform(ALL_FOOD_DOCS[:5])
A:sklearn.feature_extraction.tests.test_text.X2->TfidfVectorizer(binary=True, use_idf=False, norm=None).transform(['hello world', 'hello hello']).toarray()
A:sklearn.feature_extraction.tests.test_text.tr->TfidfTransformer(sublinear_tf=True, use_idf=False, norm=None)
A:sklearn.feature_extraction.tests.test_text.tfidf->TfidfTransformer(norm='l1').fit(counts_train).transform(counts_train).toarray()
A:sklearn.feature_extraction.tests.test_text.train_data->iter(ALL_FOOD_DOCS[:-1])
A:sklearn.feature_extraction.tests.test_text.v1->CountVectorizer(max_df=0.5)
A:sklearn.feature_extraction.tests.test_text.counts_train->counts_train.tocsr().tocsr()
A:sklearn.feature_extraction.tests.test_text.v2->CountVectorizer(vocabulary=v1.vocabulary_)
A:sklearn.feature_extraction.tests.test_text.counts_test->counts_test.tocsr().tocsr()
A:sklearn.feature_extraction.tests.test_text.t1->TfidfTransformer(norm='l1')
A:sklearn.feature_extraction.tests.test_text.tfidf_test->TfidfTransformer(norm='l1').transform(counts_test).toarray()
A:sklearn.feature_extraction.tests.test_text.t2->TfidfTransformer(norm='l1', use_idf=False)
A:sklearn.feature_extraction.tests.test_text.tf->TfidfTransformer(norm='l1', use_idf=False).fit(counts_train).transform(counts_train).toarray()
A:sklearn.feature_extraction.tests.test_text.t3->TfidfTransformer(use_idf=True)
A:sklearn.feature_extraction.tests.test_text.tv->TfidfVectorizer(norm='l2', use_idf=False, smooth_idf=False, sublinear_tf=False)
A:sklearn.feature_extraction.tests.test_text.tfidf2->TfidfVectorizer(norm='l2', use_idf=False, smooth_idf=False, sublinear_tf=False).fit_transform(train_data).toarray()
A:sklearn.feature_extraction.tests.test_text.tfidf_test2->TfidfVectorizer(norm='l2', use_idf=False, smooth_idf=False, sublinear_tf=False).transform(test_data).toarray()
A:sklearn.feature_extraction.tests.test_text.v3->CountVectorizer(vocabulary=None)
A:sklearn.feature_extraction.tests.test_text.feature_names->CountVectorizer(max_df=0.5).get_feature_names()
A:sklearn.feature_extraction.tests.test_text.expected_vocabulary->set(['burger', 'beer', 'salad', 'pizza'])
A:sklearn.feature_extraction.tests.test_text.expected_stop_words->set([u'celeri', u'tomato', u'copyright', u'coke', u'sparkling', u'water', u'the'])
A:sklearn.feature_extraction.tests.test_text.vectorizer->vec_factory(max_df=0.6, max_features=4)
A:sklearn.feature_extraction.tests.test_text.cv_1->CountVectorizer(max_features=1)
A:sklearn.feature_extraction.tests.test_text.cv_3->CountVectorizer(max_features=3)
A:sklearn.feature_extraction.tests.test_text.cv_None->CountVectorizer(max_features=None)
A:sklearn.feature_extraction.tests.test_text.counts_1->CountVectorizer(max_features=1).fit_transform(JUNK_FOOD_DOCS).sum(axis=0)
A:sklearn.feature_extraction.tests.test_text.counts_3->CountVectorizer(max_features=3).fit_transform(JUNK_FOOD_DOCS).sum(axis=0)
A:sklearn.feature_extraction.tests.test_text.counts_None->CountVectorizer(max_features=None).fit_transform(JUNK_FOOD_DOCS).sum(axis=0)
A:sklearn.feature_extraction.tests.test_text.features_1->CountVectorizer(max_features=1).get_feature_names()
A:sklearn.feature_extraction.tests.test_text.features_3->CountVectorizer(max_features=3).get_feature_names()
A:sklearn.feature_extraction.tests.test_text.features_None->CountVectorizer(max_features=None).get_feature_names()
A:sklearn.feature_extraction.tests.test_text.X_sparse->TfidfVectorizer(use_idf=True).fit_transform(test_data)
A:sklearn.feature_extraction.tests.test_text.transformed_data->transformed_data.toarray().toarray()
A:sklearn.feature_extraction.tests.test_text.inversed_data->vec_factory(max_df=0.6, max_features=4).inverse_transform(transformed_data)
A:sklearn.feature_extraction.tests.test_text.analyze->vec_factory(max_df=0.6, max_features=4).build_analyzer()
A:sklearn.feature_extraction.tests.test_text.inversed_terms->numpy.sort(np.unique(inversed_terms))
A:sklearn.feature_extraction.tests.test_text.inversed_data2->vec_factory(max_df=0.6, max_features=4).inverse_transform(transformed_data)
A:sklearn.feature_extraction.tests.test_text.(train_data, test_data, target_train, target_test)->train_test_split(data, target, test_size=0.1, random_state=0)
A:sklearn.feature_extraction.tests.test_text.pipeline->Pipeline([('vect', TfidfVectorizer()), ('svc', LinearSVC())])
A:sklearn.feature_extraction.tests.test_text.grid_search->GridSearchCV(pipeline, parameters, n_jobs=1)
A:sklearn.feature_extraction.tests.test_text.pred->GridSearchCV(pipeline, parameters, n_jobs=1).fit(train_data, target_train).predict(test_data)
A:sklearn.feature_extraction.tests.test_text.cv_scores->cross_val_score(pipeline, data, target, cv=3)
A:sklearn.feature_extraction.tests.test_text.X_counted->TfidfVectorizer(use_idf=True).fit_transform([document])
A:sklearn.feature_extraction.tests.test_text.X_hashed->TfidfVectorizer(use_idf=True).transform([document])
A:sklearn.feature_extraction.tests.test_text.X_1->TfidfVectorizer(use_idf=True).fit_transform(ALL_FOOD_DOCS)
A:sklearn.feature_extraction.tests.test_text.X_2->TfidfVectorizer(use_idf=True).transform(ALL_FOOD_DOCS)
A:sklearn.feature_extraction.tests.test_text.s->pickle.dumps(orig)
A:sklearn.feature_extraction.tests.test_text.copy->pickle.loads(s)
A:sklearn.feature_extraction.tests.test_text.orig->TfidfTransformer().fit(X)
A:sklearn.feature_extraction.tests.test_text.hv->HashingVectorizer()
A:sklearn.feature_extraction.tests.test_text.vect_vocab->TfidfVectorizer(vocabulary=['the'])
A:sklearn.feature_extraction.tests.test_text.vect_vocab_clone->clone(vect_vocab)
sklearn.feature_extraction.tests.test_text.lazy_analyze(s)
sklearn.feature_extraction.tests.test_text.split_tokenize(s)
sklearn.feature_extraction.tests.test_text.strip_eacute(s)
sklearn.feature_extraction.tests.test_text.test_char_ngram_analyzer()
sklearn.feature_extraction.tests.test_text.test_char_wb_ngram_analyzer()
sklearn.feature_extraction.tests.test_text.test_count_binary_occurrences()
sklearn.feature_extraction.tests.test_text.test_count_vectorizer_max_features()
sklearn.feature_extraction.tests.test_text.test_count_vectorizer_pipeline_grid_selection()
sklearn.feature_extraction.tests.test_text.test_countvectorizer_custom_vocabulary()
sklearn.feature_extraction.tests.test_text.test_countvectorizer_custom_vocabulary_gap_index()
sklearn.feature_extraction.tests.test_text.test_countvectorizer_custom_vocabulary_pipeline()
sklearn.feature_extraction.tests.test_text.test_countvectorizer_custom_vocabulary_repeated_indeces()
sklearn.feature_extraction.tests.test_text.test_countvectorizer_empty_vocabulary()
sklearn.feature_extraction.tests.test_text.test_countvectorizer_stop_words()
sklearn.feature_extraction.tests.test_text.test_feature_names()
sklearn.feature_extraction.tests.test_text.test_fit_countvectorizer_twice()
sklearn.feature_extraction.tests.test_text.test_hashed_binary_occurrences()
sklearn.feature_extraction.tests.test_text.test_hashing_vectorizer()
sklearn.feature_extraction.tests.test_text.test_hashingvectorizer_nan_in_docs()
sklearn.feature_extraction.tests.test_text.test_non_unique_vocab()
sklearn.feature_extraction.tests.test_text.test_pickling_transformer()
sklearn.feature_extraction.tests.test_text.test_pickling_vectorizer()
sklearn.feature_extraction.tests.test_text.test_strip_accents()
sklearn.feature_extraction.tests.test_text.test_sublinear_tf()
sklearn.feature_extraction.tests.test_text.test_tf_idf_smoothing()
sklearn.feature_extraction.tests.test_text.test_tfidf_no_smoothing()
sklearn.feature_extraction.tests.test_text.test_tfidf_vectorizer_setters()
sklearn.feature_extraction.tests.test_text.test_tfidf_vectorizer_with_fixed_vocabulary()
sklearn.feature_extraction.tests.test_text.test_tfidfvectorizer_binary()
sklearn.feature_extraction.tests.test_text.test_tfidfvectorizer_export_idf()
sklearn.feature_extraction.tests.test_text.test_to_ascii()
sklearn.feature_extraction.tests.test_text.test_unicode_decode_error()
sklearn.feature_extraction.tests.test_text.test_vectorizer()
sklearn.feature_extraction.tests.test_text.test_vectorizer_inverse_transform()
sklearn.feature_extraction.tests.test_text.test_vectorizer_max_df()
sklearn.feature_extraction.tests.test_text.test_vectorizer_max_features()
sklearn.feature_extraction.tests.test_text.test_vectorizer_min_df()
sklearn.feature_extraction.tests.test_text.test_vectorizer_pipeline_cross_validation()
sklearn.feature_extraction.tests.test_text.test_vectorizer_pipeline_grid_selection()
sklearn.feature_extraction.tests.test_text.test_vectorizer_unicode()
sklearn.feature_extraction.tests.test_text.test_vectorizer_vocab_clone()
sklearn.feature_extraction.tests.test_text.test_word_analyzer_unigrams()
sklearn.feature_extraction.tests.test_text.test_word_analyzer_unigrams_and_bigrams()
sklearn.feature_extraction.tests.test_text.uppercase(s)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_extraction/tests/test_dict_vectorizer.py----------------------------------------
A:sklearn.feature_extraction.tests.test_dict_vectorizer.v->DictVectorizer(sparse=sparse).fit(D)
A:sklearn.feature_extraction.tests.test_dict_vectorizer.X->X.toarray().toarray()
A:sklearn.feature_extraction.tests.test_dict_vectorizer.d1->dict([('useless%d' % i, 10) for i in range(20)], useful1=1, useful2=20)
A:sklearn.feature_extraction.tests.test_dict_vectorizer.d2->dict([('useless%d' % i, 10) for i in range(20)], useful1=20, useful2=1)
A:sklearn.feature_extraction.tests.test_dict_vectorizer.sel->SelectKBest(chi2, k=2).fit(X, [0, 1])
A:sklearn.feature_extraction.tests.test_dict_vectorizer.D_out->DictVectorizer(sparse=sparse).fit(D).inverse_transform(X)
A:sklearn.feature_extraction.tests.test_dict_vectorizer.names->DictVectorizer(sparse=sparse).fit(D).get_feature_names()
A:sklearn.feature_extraction.tests.test_dict_vectorizer.rng->Random(42)
A:sklearn.feature_extraction.tests.test_dict_vectorizer.d_sorted->dict(items)
A:sklearn.feature_extraction.tests.test_dict_vectorizer.d_shuffled->dict(items)
A:sklearn.feature_extraction.tests.test_dict_vectorizer.v_1->DictVectorizer().fit([d_sorted])
A:sklearn.feature_extraction.tests.test_dict_vectorizer.v_2->DictVectorizer().fit([d_shuffled])
sklearn.feature_extraction.tests.test_dict_vectorizer.test_deterministic_vocabulary()
sklearn.feature_extraction.tests.test_dict_vectorizer.test_dictvectorizer()
sklearn.feature_extraction.tests.test_dict_vectorizer.test_feature_selection()
sklearn.feature_extraction.tests.test_dict_vectorizer.test_one_of_k()
sklearn.feature_extraction.tests.test_dict_vectorizer.test_unseen_or_no_features()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_extraction/tests/test_image.py----------------------------------------
A:sklearn.feature_extraction.tests.test_image.grad_x->img_to_graph(x)
A:sklearn.feature_extraction.tests.test_image.grad_y->img_to_graph(y)
A:sklearn.feature_extraction.tests.test_image.mask->numpy.ones((size, size))
A:sklearn.feature_extraction.tests.test_image.A->grid_to_graph(n_x=size, n_y=size, n_z=size, mask=mask, dtype=np.float)
A:sklearn.feature_extraction.tests.test_image.lena->lena.astype(np.float).astype(np.float)
A:sklearn.feature_extraction.tests.test_image.graph->grid_to_graph(*lena.shape, mask=mask, dtype=None)
A:sklearn.feature_extraction.tests.test_image.lena_color->numpy.zeros(lena.shape + (3,))
A:sklearn.feature_extraction.tests.test_image.images->numpy.zeros((3,) + lena.shape)
A:sklearn.feature_extraction.tests.test_image.downsampled_lena->_downsampled_lena()
A:sklearn.feature_extraction.tests.test_image.orange_lena->_orange_lena(downsampled_lena)
A:sklearn.feature_extraction.tests.test_image.lena_collection->_make_images(downsampled_lena)
A:sklearn.feature_extraction.tests.test_image.patches->extract_patches(lena, patch_shape=p)
A:sklearn.feature_extraction.tests.test_image.expected_n_patches->int(0.5 * (i_h - p_h + 1) * (i_w - p_w + 1))
A:sklearn.feature_extraction.tests.test_image.lena_reconstructed->reconstruct_from_patches_2d(patches, lena.shape)
A:sklearn.feature_extraction.tests.test_image.extr->PatchExtractor(patch_size=(p_h, p_w), random_state=0)
A:sklearn.feature_extraction.tests.test_image.lenas->_make_images(orange_lena)
A:sklearn.feature_extraction.tests.test_image.image->numpy.arange(np.prod(image_shape)).reshape(image_shape)
A:sklearn.feature_extraction.tests.test_image.ndim->len(image_shape)
sklearn.feature_extraction.tests.test_image._downsampled_lena()
sklearn.feature_extraction.tests.test_image._make_images(lena=None)
sklearn.feature_extraction.tests.test_image._orange_lena(lena=None)
sklearn.feature_extraction.tests.test_image.test_connect_regions()
sklearn.feature_extraction.tests.test_image.test_connect_regions_with_grid()
sklearn.feature_extraction.tests.test_image.test_extract_patches_all()
sklearn.feature_extraction.tests.test_image.test_extract_patches_all_color()
sklearn.feature_extraction.tests.test_image.test_extract_patches_all_rect()
sklearn.feature_extraction.tests.test_image.test_extract_patches_max_patches()
sklearn.feature_extraction.tests.test_image.test_extract_patches_square()
sklearn.feature_extraction.tests.test_image.test_extract_patches_strided()
sklearn.feature_extraction.tests.test_image.test_grid_to_graph()
sklearn.feature_extraction.tests.test_image.test_img_to_graph()
sklearn.feature_extraction.tests.test_image.test_patch_extractor_all_patches()
sklearn.feature_extraction.tests.test_image.test_patch_extractor_color()
sklearn.feature_extraction.tests.test_image.test_patch_extractor_fit()
sklearn.feature_extraction.tests.test_image.test_patch_extractor_max_patches()
sklearn.feature_extraction.tests.test_image.test_patch_extractor_max_patches_default()
sklearn.feature_extraction.tests.test_image.test_reconstruct_patches_perfect()
sklearn.feature_extraction.tests.test_image.test_reconstruct_patches_perfect_color()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_extraction/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/arpack.py----------------------------------------
A:sklearn.utils.arpack.ZNAUPD_ERRORS->DNAUPD_ERRORS.copy()
A:sklearn.utils.arpack.SNEUPD_ERRORS->DNEUPD_ERRORS.copy()
A:sklearn.utils.arpack.CNEUPD_ERRORS->ZNEUPD_ERRORS.copy()
A:sklearn.utils.arpack.SSEUPD_ERRORS->DSEUPD_ERRORS.copy()
A:sklearn.utils.arpack.msg->infodict.get(info, 'Unknown error')
A:sklearn.utils.arpack.self.resid->numpy.zeros(n, tp)
A:sklearn.utils.arpack.ncv->min(ncv, n)
A:sklearn.utils.arpack.self.v->numpy.zeros((n, ncv), tp)
A:sklearn.utils.arpack.self.iparam->numpy.zeros(11, 'int')
A:sklearn.utils.arpack.(ev, vec)->self.extract(True)
A:sklearn.utils.arpack.ev->numpy.zeros((0,))
A:sklearn.utils.arpack.vec->numpy.zeros((self.n, 0))
A:sklearn.utils.arpack.self.workd->numpy.zeros(3 * n, self.tp)
A:sklearn.utils.arpack.self.workl->numpy.zeros(3 * self.ncv * (self.ncv + 2), self.tp)
A:sklearn.utils.arpack.self.ipntr->numpy.zeros(14, 'int')
A:sklearn.utils.arpack.(self.ido, self.resid, self.v, self.iparam, self.ipntr, self.info)->self._arpack_solver(self.ido, self.bmat, self.which, self.k, self.tol, self.resid, self.v, self.iparam, self.ipntr, self.workd, self.workl, self.rwork, self.info)
A:sklearn.utils.arpack.xslice->slice(self.ipntr[0] - 1, self.ipntr[0] - 1 + self.n)
A:sklearn.utils.arpack.yslice->slice(self.ipntr[1] - 1, self.ipntr[1] - 1 + self.n)
A:sklearn.utils.arpack.self.workd[yslice]->self.B(self.workd[xslice])
A:sklearn.utils.arpack.self.workd[xslice]->self.OPb(self.workd[xslice])
A:sklearn.utils.arpack.Bxslice->slice(self.ipntr[2] - 1, self.ipntr[2] - 1 + self.n)
A:sklearn.utils.arpack.Ax->self.A_matvec(self.workd[xslice])
A:sklearn.utils.arpack.sselect->numpy.zeros(self.ncv, 'int')
A:sklearn.utils.arpack.(d, z, ierr)->self._arpack_extract(return_eigenvectors, howmny, sselect, self.sigma, workev, self.bmat, self.which, k, self.tol, self.resid, self.v, self.iparam, self.ipntr, self.workd, self.workl, self.rwork, ierr)
A:sklearn.utils.arpack.self.rwork->numpy.zeros(self.ncv, self.tp.lower())
A:sklearn.utils.arpack.sigmar->numpy.real(self.sigma)
A:sklearn.utils.arpack.sigmai->numpy.imag(self.sigma)
A:sklearn.utils.arpack.workev->numpy.zeros(3 * self.ncv, self.tp)
A:sklearn.utils.arpack.dr->numpy.zeros(k + 1, self.tp)
A:sklearn.utils.arpack.di->numpy.zeros(k + 1, self.tp)
A:sklearn.utils.arpack.zr->numpy.zeros((n, k + 1), self.tp)
A:sklearn.utils.arpack.(dr, di, zr, ierr)->self._arpack_extract(return_eigenvectors, howmny, sselect, sigmar, sigmai, workev, self.bmat, self.which, k, self.tol, self.resid, self.v, self.iparam, self.ipntr, self.workd, self.workl, self.info)
A:sklearn.utils.arpack.z->numpy.zeros((n, k + 1), self.tp).astype(self.tp.upper())
A:sklearn.utils.arpack.z[:, i + 1]->z[:, i].conjugate()
A:sklearn.utils.arpack.d[i]->numpy.dot(zr[:, i], self.matvec(zr[:, i]))
A:sklearn.utils.arpack.d[i + 1]->numpy.dot(zr[:, i], self.matvec(zr[:, i])).conj()
A:sklearn.utils.arpack.rd->numpy.round(d, decimals=_ndigits[self.tp])
A:sklearn.utils.arpack.ind->numpy.argsort(abs(rd))
A:sklearn.utils.arpack.m->aslinearoperator(m)
A:sklearn.utils.arpack.x->numpy.zeros(A.shape[1])
A:sklearn.utils.arpack.self.M_lu->lu_factor(M)
A:sklearn.utils.arpack.(b, info)->self.ifunc(self.OP, x, tol=self.tol)
A:sklearn.utils.arpack.self.OP->LinearOperator(self.A.shape, self.mult_func, dtype=dtype)
A:sklearn.utils.arpack.A->numpy.asarray(A)
A:sklearn.utils.arpack.Minv_matvec->get_OPinv_matvec(A, M, sigma, symmetric=True, tol=tol)
A:sklearn.utils.arpack.Minv->_aslinearoperator_with_dtype(Minv)
A:sklearn.utils.arpack.OPinv->_aslinearoperator_with_dtype(OPinv)
A:sklearn.utils.arpack.params->_SymmetricArpackParams(n, k, A.dtype.char, matvec, mode, M_matvec, Minv_matvec, sigma, ncv, v0, maxiter, which, tol)
A:sklearn.utils.arpack.ret->eigs(A, k, M=M, sigma=sigma, which=which, v0=v0, ncv=ncv, maxiter=maxiter, tol=tol, return_eigenvectors=return_eigenvectors, Minv=Minv, OPinv=OPinv)
A:sklearn.utils.arpack.M->_aslinearoperator_with_dtype(M)
A:sklearn.utils.arpack.XH->herm(A)
A:sklearn.utils.arpack.X->herm(A)
A:sklearn.utils.arpack.XH_X->LinearOperator(matvec=matvec_XH_X, dtype=X.dtype, shape=(X.shape[1], X.shape[1]))
A:sklearn.utils.arpack.(eigvals, eigvec)->eigensolver(XH_X, k=k, tol=tol ** 2)
A:sklearn.utils.arpack.s->numpy.sqrt(eigvals)
A:sklearn.utils.arpack.vh->herm(np.dot(X, u) / s)
sklearn.utils.arpack.ArpackError(self,info,infodict=_NAUPD_ERRORS)
sklearn.utils.arpack.ArpackError.__init__(self,info,infodict=_NAUPD_ERRORS)
sklearn.utils.arpack.ArpackNoConvergence(self,msg,eigenvalues,eigenvectors)
sklearn.utils.arpack.ArpackNoConvergence.__init__(self,msg,eigenvalues,eigenvectors)
sklearn.utils.arpack.IterInv(self,M,ifunc=gmres,tol=0)
sklearn.utils.arpack.IterInv.__init__(self,M,ifunc=gmres,tol=0)
sklearn.utils.arpack.IterInv._matvec(self,x)
sklearn.utils.arpack.IterOpInv(self,A,M,sigma,ifunc=gmres,tol=0)
sklearn.utils.arpack.IterOpInv.__init__(self,A,M,sigma,ifunc=gmres,tol=0)
sklearn.utils.arpack.IterOpInv._matvec(self,x)
sklearn.utils.arpack.IterOpInv.mult_func(self,x)
sklearn.utils.arpack.IterOpInv.mult_func_M_None(self,x)
sklearn.utils.arpack.LuInv(self,M)
sklearn.utils.arpack.LuInv.__init__(self,M)
sklearn.utils.arpack.LuInv._matvec(self,x)
sklearn.utils.arpack.SpLuInv(self,M)
sklearn.utils.arpack.SpLuInv.__init__(self,M)
sklearn.utils.arpack.SpLuInv._matvec(self,x)
sklearn.utils.arpack._ArpackParams(self,n,k,tp,mode=1,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
sklearn.utils.arpack._ArpackParams.__init__(self,n,k,tp,mode=1,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
sklearn.utils.arpack._ArpackParams._raise_no_convergence(self)
sklearn.utils.arpack._SymmetricArpackParams(self,n,k,tp,matvec,mode=1,M_matvec=None,Minv_matvec=None,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
sklearn.utils.arpack._SymmetricArpackParams.__init__(self,n,k,tp,matvec,mode=1,M_matvec=None,Minv_matvec=None,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
sklearn.utils.arpack._SymmetricArpackParams.extract(self,return_eigenvectors)
sklearn.utils.arpack._SymmetricArpackParams.iterate(self)
sklearn.utils.arpack._UnsymmetricArpackParams(self,n,k,tp,matvec,mode=1,M_matvec=None,Minv_matvec=None,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
sklearn.utils.arpack._UnsymmetricArpackParams.__init__(self,n,k,tp,matvec,mode=1,M_matvec=None,Minv_matvec=None,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
sklearn.utils.arpack._UnsymmetricArpackParams.extract(self,return_eigenvectors)
sklearn.utils.arpack._UnsymmetricArpackParams.iterate(self)
sklearn.utils.arpack._aslinearoperator_with_dtype(m)
sklearn.utils.arpack._eigs(A,k=6,M=None,sigma=None,which='LM',v0=None,ncv=None,maxiter=None,tol=0,return_eigenvectors=True,Minv=None,OPinv=None,OPpart=None)
sklearn.utils.arpack._eigsh(A,k=6,M=None,sigma=None,which='LM',v0=None,ncv=None,maxiter=None,tol=0,return_eigenvectors=True,Minv=None,OPinv=None,mode='normal')
sklearn.utils.arpack._svds(A,k=6,ncv=None,tol=0)
sklearn.utils.arpack.get_OPinv_matvec(A,M,sigma,symmetric=False,tol=0)
sklearn.utils.arpack.get_inv_matvec(M,symmetric=False,tol=0)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/fixes.py----------------------------------------
A:sklearn.utils.fixes.np_version->tuple(np_version)
A:sklearn.utils.fixes.out->numpy.asscalar(out)
A:sklearn.utils.fixes.major_index->numpy.compress(mask, major_index)
A:sklearn.utils.fixes.value->numpy.compress(mask, value)
A:sklearn.utils.fixes.(major_index, value)->_minor_reduce(mat, min_or_max)
A:sklearn.utils.fixes.value[not_full]->min_or_max(value[not_full], 0)
A:sklearn.utils.fixes.res->coo_matrix((value, (major_index, np.zeros(len(value)))), dtype=X.dtype, shape=(M, 1))
A:sklearn.utils.fixes.zero->X.dtype.type(0)
A:sklearn.utils.fixes.m->min_or_max(zero, m)
A:sklearn.utils.fixes.pool->tuple(iterable)
A:sklearn.utils.fixes.n->len(pool)
A:sklearn.utils.fixes.result->bool(result)
A:sklearn.utils.fixes.x->numpy.array(a, copy=False, subok=True, ndmin=1)
A:sklearn.utils.fixes.y->numpy.array(b, copy=False, subok=True, ndmin=1)
A:sklearn.utils.fixes.xfin->numpy.isfinite(x)
A:sklearn.utils.fixes.yfin->numpy.isfinite(y)
A:sklearn.utils.fixes.cond->numpy.zeros_like(finite, subok=True)
A:sklearn.utils.fixes.cond[finite]->within_tol(x[finite], y[finite], atol, rtol)
A:sklearn.utils.fixes.ar1->numpy.asarray(ar1).ravel()
A:sklearn.utils.fixes.ar2->numpy.unique(ar2)
A:sklearn.utils.fixes.mask->numpy.zeros(len(ar1), dtype=np.bool)
A:sklearn.utils.fixes.(ar1, rev_idx)->numpy.unique(ar1, return_inverse=True)
A:sklearn.utils.fixes.ar->numpy.concatenate((ar1, ar2))
A:sklearn.utils.fixes.order->numpy.concatenate((ar1, ar2)).argsort(kind='mergesort')
A:sklearn.utils.fixes.flag->numpy.concatenate((bool_ar, [invert]))


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/validation.py----------------------------------------
A:sklearn.utils.validation.X->array2d(X, dtype=dtype, order=order, copy=copy, force_all_finite=force_all_finite)
A:sklearn.utils.validation.X.data->numpy.array(X.data, copy=False, order=order)
A:sklearn.utils.validation.X_2d->safe_copy(X_2d)
A:sklearn.utils.validation.x->numpy.asarray(x)
A:sklearn.utils.validation.sparse_format->options.pop('sparse_format', None)
A:sklearn.utils.validation.copy->options.pop('copy', False)
A:sklearn.utils.validation.check_ccontiguous->options.pop('check_ccontiguous', False)
A:sklearn.utils.validation.dtype->options.pop('dtype', None)
A:sklearn.utils.validation.allow_lists->options.pop('allow_lists', False)
A:sklearn.utils.validation.allow_nans->options.pop('allow_nans', False)
A:sklearn.utils.validation.allow_nd->options.pop('allow_nd', False)
A:sklearn.utils.validation.n_samples->_num_samples(arrays[0])
A:sklearn.utils.validation.size->_num_samples(array)
A:sklearn.utils.validation.array->array.copy().copy()
A:sklearn.utils.validation.array.data->numpy.asarray(array.data, dtype=dtype)
A:sklearn.utils.validation.shape->numpy.shape(y)
sklearn.utils.array2d(X,dtype=None,order=None,copy=False,force_all_finite=True)
sklearn.utils.as_float_array(X,copy=True,force_all_finite=True)
sklearn.utils.assert_all_finite(X)
sklearn.utils.atleast2d_or_csc(X,dtype=None,order=None,copy=False,force_all_finite=True)
sklearn.utils.atleast2d_or_csr(X,dtype=None,order=None,copy=False,force_all_finite=True)
sklearn.utils.check_arrays(*arrays,**options)
sklearn.utils.check_random_state(seed)
sklearn.utils.column_or_1d(y,warn=False)
sklearn.utils.safe_asarray(X,dtype=None,order=None,copy=False,force_all_finite=True)
sklearn.utils.validation.DataConversionWarning(UserWarning)
sklearn.utils.validation.NonBLASDotWarning(UserWarning)
sklearn.utils.validation._assert_all_finite(X)
sklearn.utils.validation._atleast2d_or_sparse(X,dtype,order,copy,sparse_class,convmethod,check_same_type,force_all_finite)
sklearn.utils.validation._num_samples(x)
sklearn.utils.validation.array2d(X,dtype=None,order=None,copy=False,force_all_finite=True)
sklearn.utils.validation.as_float_array(X,copy=True,force_all_finite=True)
sklearn.utils.validation.assert_all_finite(X)
sklearn.utils.validation.atleast2d_or_csc(X,dtype=None,order=None,copy=False,force_all_finite=True)
sklearn.utils.validation.atleast2d_or_csr(X,dtype=None,order=None,copy=False,force_all_finite=True)
sklearn.utils.validation.check_arrays(*arrays,**options)
sklearn.utils.validation.check_random_state(seed)
sklearn.utils.validation.column_or_1d(y,warn=False)
sklearn.utils.validation.safe_asarray(X,dtype=None,order=None,copy=False,force_all_finite=True)
sklearn.utils.validation.warn_if_not_float(X,estimator='Thisalgorithm')
sklearn.utils.warn_if_not_float(X,estimator='Thisalgorithm')


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/testing.py----------------------------------------
A:sklearn.utils.testing.error_message->str(e)
A:sklearn.utils.testing.result->func(*args, **kw)
A:sklearn.utils.testing.msg->str(msg.args[0] if hasattr(msg, 'args') else msg)
A:sklearn.utils.testing.datasets->dict(columns_dict)
A:sklearn.utils.testing.ordering->sorted(list(datasets.keys()))
A:sklearn.utils.testing.datasets['mldata_descr_ordering']->scipy.empty((1, len(ordering)), dtype='object')
A:sklearn.utils.testing.matfile->BytesIO()
A:sklearn.utils.testing.datasets.mldata.urlopen->mock_mldata_urlopen(mock_datasets)
A:sklearn.utils.testing.module->__import__(modname, fromlist='dummy')
A:sklearn.utils.testing.classes->inspect.getmembers(module, inspect.isclass)
A:sklearn.utils.testing.all_classes->set(all_classes)
A:sklearn.utils.testing.(mac_version, _, _)->platform.mac_ver()
A:sklearn.utils.testing.with_network->with_setup(check_skip_network)
sklearn.utils.testing._IgnoreWarnings(self)
sklearn.utils.testing._IgnoreWarnings.__enter__(self)
sklearn.utils.testing._IgnoreWarnings.__exit__(self,*exc_info)
sklearn.utils.testing._IgnoreWarnings.__init__(self)
sklearn.utils.testing._IgnoreWarnings.__repr__(self)
sklearn.utils.testing._assert_allclose(actual,desired,rtol=1e-07,atol=0,err_msg='',verbose=True)
sklearn.utils.testing._assert_greater(a,b,msg=None)
sklearn.utils.testing._assert_less(a,b,msg=None)
sklearn.utils.testing._ignore_warnings(fn)
sklearn.utils.testing.all_estimators(include_meta_estimators=False,include_other=False,type_filter=None)
sklearn.utils.testing.assert_greater_equal(a,b,msg=None)
sklearn.utils.testing.assert_less_equal(a,b,msg=None)
sklearn.utils.testing.assert_no_warnings(func,*args,**kw)
sklearn.utils.testing.assert_raise_message(exception,message,function,*args,**kwargs)
sklearn.utils.testing.assert_warns(warning_class,func,*args,**kw)
sklearn.utils.testing.assert_warns_message(warning_class,message,func,*args,**kw)
sklearn.utils.testing.check_skip_network()
sklearn.utils.testing.check_skip_travis()
sklearn.utils.testing.clean_warning_registry()
sklearn.utils.testing.fake_mldata(columns_dict,dataname,matfile,ordering=None)
sklearn.utils.testing.if_matplotlib(func)
sklearn.utils.testing.if_not_mac_os(versions=('10.7','10.8','10.9'),message='Multi-processbuginMacOSX>=10.7(seeissue#636)')
sklearn.utils.testing.ignore_warnings(obj=None)
sklearn.utils.testing.install_mldata_mock(mock_datasets)
sklearn.utils.testing.mock_mldata_urlopen(self,mock_datasets)
sklearn.utils.testing.mock_mldata_urlopen.__init__(self,mock_datasets)
sklearn.utils.testing.set_random_state(estimator,random_state=0)
sklearn.utils.testing.uninstall_mldata_mock()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/multiclass.py----------------------------------------
A:sklearn.utils.multiclass.y->numpy.asarray(y)
A:sklearn.utils.multiclass.ys_types->set(['multiclass'])
A:sklearn.utils.multiclass.label_type->set(['multiclass']).pop()
A:sklearn.utils.multiclass._unique_labels->_FN_UNIQUE_LABELS.get(label_type, None)
A:sklearn.utils.multiclass.ys_labels->set(chain.from_iterable((_unique_labels(y) for y in ys)))
A:sklearn.utils.multiclass.labels->numpy.unique(y)
A:sklearn.utils.multiclass.clf.classes_->unique_labels(classes)
sklearn.utils.multiclass._check_partial_fit_first_call(clf,classes=None)
sklearn.utils.multiclass._is_integral_float(y)
sklearn.utils.multiclass._unique_indicator(y)
sklearn.utils.multiclass._unique_multiclass(y)
sklearn.utils.multiclass._unique_sequence_of_sequence(y)
sklearn.utils.multiclass.is_label_indicator_matrix(y)
sklearn.utils.multiclass.is_multilabel(y)
sklearn.utils.multiclass.is_sequence_of_sequences(y)
sklearn.utils.multiclass.type_of_target(y)
sklearn.utils.multiclass.unique_labels(*ys)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/class_weight.py----------------------------------------
A:sklearn.utils.class_weight.weight->numpy.ones(classes.shape[0], dtype=np.float64, order='C')
A:sklearn.utils.class_weight.le->LabelEncoder()
A:sklearn.utils.class_weight.y_ind->LabelEncoder().fit_transform(y)
A:sklearn.utils.class_weight.i->numpy.searchsorted(classes, c)
sklearn.utils.class_weight.compute_class_weight(class_weight,classes,y)
sklearn.utils.compute_class_weight(class_weight,classes,y)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/graph.py----------------------------------------
A:sklearn.utils.graph.graph->scipy.sparse.lil_matrix(graph)
A:sklearn.utils.graph.next_level->set()
A:sklearn.utils.graph.csgraph->csgraph.astype(np.float).astype(np.float)
A:sklearn.utils.graph.lap->scipy.sparse.coo_matrix((new_data, (new_row, new_col)), shape=lap.shape)
A:sklearn.utils.graph.diagonal_holes->list(set(range(n_nodes)).difference(diag_idx))
A:sklearn.utils.graph.new_data->numpy.concatenate([lap.data, np.ones(len(diagonal_holes))])
A:sklearn.utils.graph.new_row->numpy.concatenate([lap.row, diagonal_holes])
A:sklearn.utils.graph.new_col->numpy.concatenate([lap.col, diagonal_holes])
A:sklearn.utils.graph.w->numpy.sqrt(w)
A:sklearn.utils.graph.lap.data[diag_mask]->(1 - w_zeros[lap.row[diag_mask]]).astype(lap.data.dtype)
A:sklearn.utils.graph.lap.flat[::n_nodes + 1]->numpy.sqrt(w).astype(lap.dtype)
sklearn.utils.graph._laplacian_dense(graph,normed=False,return_diag=False)
sklearn.utils.graph._laplacian_sparse(graph,normed=False,return_diag=False)
sklearn.utils.graph.graph_laplacian(csgraph,normed=False,return_diag=False)
sklearn.utils.graph.single_source_shortest_path_length(graph,source,cutoff=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/setup.py----------------------------------------
A:sklearn.utils.setup.config->Configuration('utils', parent_package, top_path)
A:sklearn.utils.setup.(cblas_libs, blas_info)->get_blas_info()
A:sklearn.utils.setup.cblas_compile_args->blas_info.pop('extra_compile_args', [])
sklearn.utils.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/random.py----------------------------------------
A:sklearn.utils.random.random_state->check_random_state(random_state)
A:sklearn.utils.random.a->numpy.array(a, copy=False)
A:sklearn.utils.random.pop_size->operator.index(a.item())
A:sklearn.utils.random.p->p.copy().copy()
A:sklearn.utils.random.size->numpy.prod(shape, dtype=np.intp)
A:sklearn.utils.random.cdf->numpy.cumsum(p)
A:sklearn.utils.random.uniform_samples->check_random_state(random_state).random_sample(shape)
A:sklearn.utils.random.idx->idx.item(0).item(0)
A:sklearn.utils.random.found->numpy.zeros(shape, dtype=np.int)
A:sklearn.utils.random.flat_found->numpy.zeros(shape, dtype=np.int).ravel()
A:sklearn.utils.random.x->check_random_state(random_state).rand(size - n_uniq)
A:sklearn.utils.random.new->new.take(unique_indices).take(unique_indices)
A:sklearn.utils.random.(_, unique_indices)->numpy.unique(new, return_index=True)
A:sklearn.utils.random.res->numpy.empty((), dtype=a.dtype)
sklearn.utils.random.choice(a,size=None,replace=True,p=None,random_state=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/__init__.py----------------------------------------
A:sklearn.utils.__init__.wrapped.__doc__->self._update_doc(fun.__doc__)
A:sklearn.utils.__init__.mask->numpy.asarray(mask)
A:sklearn.utils.__init__.ind->numpy.arange(mask.shape[0])
A:sklearn.utils.__init__.random_state->check_random_state(options.pop('random_state', None))
A:sklearn.utils.__init__.replace->options.pop('replace', True)
A:sklearn.utils.__init__.max_n_samples->options.pop('n_samples', None)
A:sklearn.utils.__init__.arrays->check_arrays(*arrays, sparse_format='csr')
A:sklearn.utils.__init__.indices->numpy.arange(n_samples)
A:sklearn.utils.__init__.X->X.copy().copy()
A:sklearn.utils.__init__.end->min(n_samples, end)
sklearn.utils.__init__.ConvergenceWarning(Warning)
sklearn.utils.__init__.deprecated(self,extra='')
sklearn.utils.__init__.deprecated.__init__(self,extra='')
sklearn.utils.__init__.deprecated._decorate_class(self,cls)
sklearn.utils.__init__.deprecated._decorate_fun(self,fun)
sklearn.utils.__init__.deprecated._update_doc(self,olddoc)
sklearn.utils.__init__.gen_batches(n,batch_size)
sklearn.utils.__init__.gen_even_slices(n,n_packs,n_samples=None)
sklearn.utils.__init__.resample(*arrays,**options)
sklearn.utils.__init__.safe_indexing(X,indices)
sklearn.utils.__init__.safe_mask(X,mask)
sklearn.utils.__init__.safe_sqr(X,copy=True)
sklearn.utils.__init__.shuffle(*arrays,**options)
sklearn.utils.__init__.tosequence(x)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/bench.py----------------------------------------
sklearn.utils.bench.total_seconds(delta)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/sparsefuncs.py----------------------------------------
A:sklearn.utils.sparsefuncs.X.indices->numpy.concatenate([X.indices[:m_start], X.indices[n_start:n_stop], X.indices[m_stop:n_start], X.indices[m_start:m_stop], X.indices[n_stop:]])
A:sklearn.utils.sparsefuncs.X.data->numpy.concatenate([X.data[:m_start], X.data[n_start:n_stop], X.data[m_stop:n_start], X.data[m_start:m_stop], X.data[n_stop:]])
sklearn.utils.sparsefuncs._raise_typeerror(X)
sklearn.utils.sparsefuncs.inplace_column_scale(X,scale)
sklearn.utils.sparsefuncs.inplace_csr_column_scale(X,scale)
sklearn.utils.sparsefuncs.inplace_csr_row_scale(X,scale)
sklearn.utils.sparsefuncs.inplace_row_scale(X,scale)
sklearn.utils.sparsefuncs.inplace_swap_column(X,m,n)
sklearn.utils.sparsefuncs.inplace_swap_row(X,m,n)
sklearn.utils.sparsefuncs.inplace_swap_row_csc(X,m,n)
sklearn.utils.sparsefuncs.inplace_swap_row_csr(X,m,n)
sklearn.utils.sparsefuncs.mean_variance_axis0(X)
sklearn.utils.sparsefuncs.min_max_axis(X,axis)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/extmath.py----------------------------------------
A:sklearn.utils.extmath.x->_ravel(x)
A:sklearn.utils.extmath.(nrm2,)->scipy.linalg.get_blas_funcs(['nrm2'], [x])
A:sklearn.utils.extmath._ravel->partial(np.ravel, order='K')
A:sklearn.utils.extmath.norms->numpy.einsum('ij,ij->i', X, X)
A:sklearn.utils.extmath.(sign, ld)->numpy.linalg.slogdet(A)
A:sklearn.utils.extmath.(A, trans_a)->_impose_f_order(A)
A:sklearn.utils.extmath.(B, trans_b)->_impose_f_order(B)
A:sklearn.utils.extmath.ret->ret.toarray().toarray()
A:sklearn.utils.extmath.random_state->check_random_state(random_state)
A:sklearn.utils.extmath.R->check_random_state(random_state).normal(size=(A.shape[1], size))
A:sklearn.utils.extmath.Y->safe_sparse_dot(A, safe_sparse_dot(A.T, Y))
A:sklearn.utils.extmath.(Q, R)->scipy.linalg.qr(Y, mode='economic')
A:sklearn.utils.extmath.Q->randomized_range_finder(M, n_random, n_iter, random_state)
A:sklearn.utils.extmath.B->safe_sparse_dot(Q.T, M)
A:sklearn.utils.extmath.(Uhat, s, V)->scipy.linalg.svd(B, full_matrices=False)
A:sklearn.utils.extmath.U->numpy.dot(Q, Uhat)
A:sklearn.utils.extmath.(U, V)->svd_flip(U, V)
A:sklearn.utils.extmath.arr->numpy.rollaxis(arr, axis)
A:sklearn.utils.extmath.vmax->numpy.rollaxis(arr, axis).max(axis=0)
A:sklearn.utils.extmath.out->numpy.empty_like(X)
A:sklearn.utils.extmath.a->numpy.asarray_chkfinite(a)
A:sklearn.utils.extmath.w->numpy.asarray(w)
A:sklearn.utils.extmath.scores->numpy.unique(np.ravel(a))
A:sklearn.utils.extmath.testshape->list(a.shape)
A:sklearn.utils.extmath.oldmostfreq->numpy.zeros(testshape)
A:sklearn.utils.extmath.oldcounts->numpy.maximum(counts, oldcounts)
A:sklearn.utils.extmath.template->numpy.zeros(a.shape)
A:sklearn.utils.extmath.counts->numpy.expand_dims(np.sum(template, axis), axis)
A:sklearn.utils.extmath.mostfrequent->numpy.where(counts > oldcounts, score, oldmostfreq)
A:sklearn.utils.extmath.(s, u)->scipy.linalg.eigh(a, lower=lower)
A:sklearn.utils.extmath.t->u.dtype.char.lower()
A:sklearn.utils.extmath.psigma_diag->numpy.zeros_like(s)
A:sklearn.utils.extmath.n->numpy.prod([x.size for x in arrays])
A:sklearn.utils.extmath.out[:, 0]->numpy.repeat(arrays[0], m)
A:sklearn.utils.extmath.max_abs_cols->numpy.argmax(np.abs(u), axis=0)
A:sklearn.utils.extmath.signs->numpy.sign(u[max_abs_cols, xrange(u.shape[1])])
A:sklearn.utils.extmath.X->array2d(X, dtype=np.float)
A:sklearn.utils.extmath.m->array2d(X, dtype=np.float).data.min()
A:sklearn.utils.extmath.min_->safe_min(X)
sklearn.utils.extmath._fast_dot(A,B)
sklearn.utils.extmath._have_blas_gemm()
sklearn.utils.extmath._impose_f_order(X)
sklearn.utils.extmath.cartesian(arrays,out=None)
sklearn.utils.extmath.density(w,**kwargs)
sklearn.utils.extmath.fast_logdet(A)
sklearn.utils.extmath.log_logistic(X,out=None)
sklearn.utils.extmath.logistic_sigmoid(X,log=False,out=None)
sklearn.utils.extmath.logsumexp(arr,axis=0)
sklearn.utils.extmath.make_nonnegative(X,min_value=0)
sklearn.utils.extmath.norm(x)
sklearn.utils.extmath.pinvh(a,cond=None,rcond=None,lower=True)
sklearn.utils.extmath.randomized_range_finder(A,size,n_iter,random_state=None)
sklearn.utils.extmath.randomized_svd(M,n_components,n_oversamples=10,n_iter=0,transpose='auto',flip_sign=True,random_state=0,n_iterations=None)
sklearn.utils.extmath.row_norms(X,squared=False)
sklearn.utils.extmath.safe_min(X)
sklearn.utils.extmath.safe_sparse_dot(a,b,dense_output=False)
sklearn.utils.extmath.squared_norm(x)
sklearn.utils.extmath.svd_flip(u,v)
sklearn.utils.extmath.weighted_mode(a,w,axis=0)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/linear_assignment_.py----------------------------------------
A:sklearn.utils.linear_assignment_.indices->numpy.array(indices, dtype=int)
A:sklearn.utils.linear_assignment_.cost_matrix->numpy.atleast_2d(cost_matrix)
A:sklearn.utils.linear_assignment_.self.C->numpy.atleast_2d(cost_matrix).copy()
A:sklearn.utils.linear_assignment_.self.row_uncovered->numpy.ones(n, dtype=np.bool)
A:sklearn.utils.linear_assignment_.self.col_uncovered->numpy.ones(m, dtype=np.bool)
A:sklearn.utils.linear_assignment_.self.path->numpy.zeros((n + m, 2), dtype=int)
A:sklearn.utils.linear_assignment_.self.marked->numpy.zeros((n, m), dtype=int)
A:sklearn.utils.linear_assignment_.col->numpy.argmax(state.marked[path[count, 0]] == 2)
A:sklearn.utils.linear_assignment_.state->_HungarianState(cost_matrix)
A:sklearn.utils.linear_assignment_.step->step(state)
A:sklearn.utils.linear_assignment_.C->(state.C == 0).astype(np.int)
A:sklearn.utils.linear_assignment_.(row, col)->numpy.unravel_index(np.argmax(covered_C), (n, m))
A:sklearn.utils.linear_assignment_.star_col->numpy.argmax(state.marked[row] == 1)
A:sklearn.utils.linear_assignment_.row->numpy.argmax(state.marked[:, path[count, 1]] == 1)
A:sklearn.utils.linear_assignment_.minval->numpy.min(minval[state.col_uncovered])
sklearn.utils.linear_assignment_._HungarianState(self,cost_matrix)
sklearn.utils.linear_assignment_._HungarianState.__init__(self,cost_matrix)
sklearn.utils.linear_assignment_._HungarianState._clear_covers(self)
sklearn.utils.linear_assignment_._HungarianState._find_prime_in_row(self,row)
sklearn.utils.linear_assignment_._hungarian(cost_matrix)
sklearn.utils.linear_assignment_._step1(state)
sklearn.utils.linear_assignment_._step3(state)
sklearn.utils.linear_assignment_._step4(state)
sklearn.utils.linear_assignment_._step5(state)
sklearn.utils.linear_assignment_._step6(state)
sklearn.utils.linear_assignment_.linear_assignment(X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/sparsetools/setup.py----------------------------------------
A:sklearn.utils.sparsetools.setup.config->Configuration('sparsetools', parent_package, top_path)
sklearn.utils.sparsetools.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/sparsetools/_graph_validation.py----------------------------------------
A:sklearn.utils.sparsetools._graph_validation.csgraph->csgraph_from_dense(csgraph, null_value=null_value_in, infinity_null=infinity_null, nan_null=nan_null)
sklearn.utils.sparsetools._graph_validation.validate_graph(csgraph,directed,dtype=DTYPE,csr_output=True,dense_output=True,copy_if_dense=False,copy_if_sparse=False,null_value_in=0,null_value_out=np.inf,infinity_null=True,nan_null=True)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/sparsetools/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/tests/test_multiclass.py----------------------------------------
A:sklearn.utils.tests.test_multiclass.mix_multilabel_format->product(EXAMPLES['multilabel-indicator'], EXAMPLES['multilabel-sequences'])
A:sklearn.utils.tests.test_multiclass.mix_clf_format->product(EXAMPLES['multilabel-indicator'] + EXAMPLES['multilabel-sequences'], EXAMPLES['multiclass'] + EXAMPLES['binary'])
A:sklearn.utils.tests.test_multiclass.example->example.toarray().toarray()
A:sklearn.utils.tests.test_multiclass.check->partial(assert_warns, DeprecationWarning, is_sequence_of_sequences)
sklearn.utils.tests.test_multiclass.NotAnArray(self,data)
sklearn.utils.tests.test_multiclass.NotAnArray.__array__(self)
sklearn.utils.tests.test_multiclass.NotAnArray.__init__(self,data)
sklearn.utils.tests.test_multiclass.test_is_label_indicator_matrix()
sklearn.utils.tests.test_multiclass.test_is_multilabel()
sklearn.utils.tests.test_multiclass.test_is_sequence_of_sequences()
sklearn.utils.tests.test_multiclass.test_type_of_target()
sklearn.utils.tests.test_multiclass.test_unique_labels()
sklearn.utils.tests.test_multiclass.test_unique_labels_mixed_types()
sklearn.utils.tests.test_multiclass.test_unique_labels_non_specific()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/tests/test_fast_dict.py----------------------------------------
A:sklearn.utils.tests.test_fast_dict.rng->numpy.random.RandomState(0)
A:sklearn.utils.tests.test_fast_dict.keys->numpy.arange(100, dtype=np.intp)
A:sklearn.utils.tests.test_fast_dict.values->numpy.arange(100, dtype=np.float)
A:sklearn.utils.tests.test_fast_dict.d->IntFloatDict(keys, values)
sklearn.utils.tests.test_fast_dict.test_int_float_dict()
sklearn.utils.tests.test_fast_dict.test_int_float_dict_argmin()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/tests/test_bench.py----------------------------------------
sklearn.utils.tests.test_bench.test_total_seconds()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/tests/test_graph.py----------------------------------------
A:sklearn.utils.tests.test_graph.sp_mat->scipy.sparse.csr_matrix(mat)
A:sklearn.utils.tests.test_graph.laplacian->graph_laplacian(mat, normed=normed)
sklearn.utils.tests.test_graph.test_graph_laplacian()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/tests/test_fixes.py----------------------------------------
A:sklearn.utils.tests.test_fixes.x->numpy.arange(10)
A:sklearn.utils.tests.test_fixes.out->numpy.zeros_like(x, dtype=np.float32)
sklearn.utils.tests.test_fixes.test_divide()
sklearn.utils.tests.test_fixes.test_expit()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/tests/test_utils.py----------------------------------------
A:sklearn.utils.tests.test_utils.rng_42->numpy.random.RandomState(42)
A:sklearn.utils.tests.test_utils.spam->ham()
A:sklearn.utils.tests.test_utils.ham->Ham()
A:sklearn.utils.tests.test_utils.random_state->check_random_state(0)
A:sklearn.utils.tests.test_utils.X->check_random_state(0).rand(5, 4)
A:sklearn.utils.tests.test_utils.X_csr->scipy.sparse.csr_matrix(X)
A:sklearn.utils.tests.test_utils.mask->safe_mask(X_csr, mask)
A:sklearn.utils.tests.test_utils.a->numpy.dot(a, a.conj().T)
A:sklearn.utils.tests.test_utils.a_pinv->pinvh(a)
A:sklearn.utils.tests.test_utils.(u, s, vt)->numpy.linalg.svd(a)
A:sklearn.utils.tests.test_utils.a_pinvh->pinvh(a)
A:sklearn.utils.tests.test_utils.inds->numpy.array([1, 2])
A:sklearn.utils.tests.test_utils.X_inds->safe_indexing(X, inds)
A:sklearn.utils.tests.test_utils.X_arrays->safe_indexing(np.array(X), inds)
sklearn.utils.tests.test_utils.test_column_or_1d()
sklearn.utils.tests.test_utils.test_deprecated()
sklearn.utils.tests.test_utils.test_make_rng()
sklearn.utils.tests.test_utils.test_pinvh_nonpositive()
sklearn.utils.tests.test_utils.test_pinvh_simple_complex()
sklearn.utils.tests.test_utils.test_pinvh_simple_real()
sklearn.utils.tests.test_utils.test_resample_noarg()
sklearn.utils.tests.test_utils.test_resample_value_errors()
sklearn.utils.tests.test_utils.test_safe_indexing()
sklearn.utils.tests.test_utils.test_safe_mask()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/tests/test_random.py----------------------------------------
A:sklearn.utils.tests.test_random.s->sample_without_replacement(n_population, n_samples)
A:sklearn.utils.tests.test_random.unique->numpy.unique(s)
A:sklearn.utils.tests.test_random.n_expected->combinations(n_population, n_samples, exact=True)
sklearn.utils.tests.test_random.check_edge_case_of_sample_int(sample_without_replacement)
sklearn.utils.tests.test_random.check_sample_int(sample_without_replacement)
sklearn.utils.tests.test_random.check_sample_int_distribution(sample_without_replacement)
sklearn.utils.tests.test_random.test_invalid_sample_without_replacement_algorithm()
sklearn.utils.tests.test_random.test_sample_without_replacement_algorithms()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/tests/test_shortest_path.py----------------------------------------
A:sklearn.utils.tests.test_shortest_path.graph->numpy.minimum(graph, graph.T)
A:sklearn.utils.tests.test_shortest_path.graph[i, j]->min(graph[i, j], graph[i, k] + graph[k, j])
A:sklearn.utils.tests.test_shortest_path.rng->numpy.random.RandomState(0)
A:sklearn.utils.tests.test_shortest_path.dist_matrix->numpy.minimum(dist_matrix, dist_matrix.T)
A:sklearn.utils.tests.test_shortest_path.graph_FW->graph_shortest_path(dist_matrix, directed, 'FW')
A:sklearn.utils.tests.test_shortest_path.graph_py->floyd_warshall_slow(dist_matrix.copy(), directed)
A:sklearn.utils.tests.test_shortest_path.graph_D->graph_shortest_path(dist_matrix, directed, 'D')
A:sklearn.utils.tests.test_shortest_path.dist_dict->defaultdict(int)
A:sklearn.utils.tests.test_shortest_path.X->numpy.array([[0.0, 0.0, 4.0], [1.0, 0.0, 2.0], [0.0, 5.0, 0.0]])
A:sklearn.utils.tests.test_shortest_path.dist_FW->graph_shortest_path(X, directed=False, method='FW')
A:sklearn.utils.tests.test_shortest_path.dist_D->graph_shortest_path(X, directed=False, method='D')
sklearn.utils.tests.test_shortest_path.floyd_warshall_slow(graph,directed=False)
sklearn.utils.tests.test_shortest_path.generate_graph(N=20)
sklearn.utils.tests.test_shortest_path.test_dijkstra()
sklearn.utils.tests.test_shortest_path.test_dijkstra_bug_fix()
sklearn.utils.tests.test_shortest_path.test_floyd_warshall()
sklearn.utils.tests.test_shortest_path.test_shortest_path()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/tests/test_validation.py----------------------------------------
A:sklearn.utils.tests.test_validation.X->scipy.sparse.csc_matrix(np.arange(4))
A:sklearn.utils.tests.test_validation.Y->numpy.arange(6).reshape(3, 2).copy('F')
A:sklearn.utils.tests.test_validation.X2->as_float_array(X, copy=True)
A:sklearn.utils.tests.test_validation.N->as_float_array(M, copy=True)
A:sklearn.utils.tests.test_validation.M->numpy.memmap(tmp, shape=100, dtype=np.float32)
A:sklearn.utils.tests.test_validation.B->validator(A, order='F', copy=copy)
A:sklearn.utils.tests.test_validation.(X_, Y_, Z_)->check_arrays(X, Y, None)
A:sklearn.utils.tests.test_validation.(X_, Y_)->check_arrays(X, Y, allow_lists=True)
sklearn.utils.tests.test_validation.test_as_float_array()
sklearn.utils.tests.test_validation.test_atleast2d_or_sparse()
sklearn.utils.tests.test_validation.test_check_arrays()
sklearn.utils.tests.test_validation.test_check_arrays_exceptions()
sklearn.utils.tests.test_validation.test_memmap()
sklearn.utils.tests.test_validation.test_np_matrix()
sklearn.utils.tests.test_validation.test_ordering()
sklearn.utils.tests.test_validation.test_safe_asarray()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/tests/test_sparsefuncs.py----------------------------------------
A:sklearn.utils.tests.test_sparsefuncs.(X, _)->make_classification(5, 4, random_state=0)
A:sklearn.utils.tests.test_sparsefuncs.X_lil->scipy.sparse.lil_matrix(X)
A:sklearn.utils.tests.test_sparsefuncs.X_csr->scipy.sparse.csr_matrix(X)
A:sklearn.utils.tests.test_sparsefuncs.(X_means, X_vars)->mean_variance_axis0(X_csc)
A:sklearn.utils.tests.test_sparsefuncs.X_csc->scipy.sparse.csc_matrix(X)
A:sklearn.utils.tests.test_sparsefuncs.X->numpy.array([[0, 3, 0], [2, -1, 0], [0, 0, 0], [9, 8, 7], [4, 0, 5]], dtype=np.float64)
A:sklearn.utils.tests.test_sparsefuncs.rows->numpy.array([0, 2, 3], dtype=np.intp)
A:sklearn.utils.tests.test_sparsefuncs.out->numpy.ones((rows.shape[0], X.shape[1]), dtype=np.float64)
A:sklearn.utils.tests.test_sparsefuncs.rng->numpy.random.RandomState(0)
A:sklearn.utils.tests.test_sparsefuncs.Xr->numpy.array([[0, 3, 0], [2, -1, 0], [0, 0, 0], [9, 8, 7], [4, 0, 5]], dtype=np.float64).tocsr()
A:sklearn.utils.tests.test_sparsefuncs.Xc->numpy.array([[0, 3, 0], [2, -1, 0], [0, 0, 0], [9, 8, 7], [4, 0, 5]], dtype=np.float64).tocsc()
A:sklearn.utils.tests.test_sparsefuncs.XA->numpy.array([[0, 3, 0], [2, -1, 0], [0, 0, 0], [9, 8, 7], [4, 0, 5]], dtype=np.float64).toarray()
A:sklearn.utils.tests.test_sparsefuncs.scale->scale.astype(np.float32).astype(np.float32)
A:sklearn.utils.tests.test_sparsefuncs.swap->scipy.linalg.get_blas_funcs(('swap',), (X,))
A:sklearn.utils.tests.test_sparsefuncs.(X[0], X[-1])->swap(X[0], X[-1])
A:sklearn.utils.tests.test_sparsefuncs.(X[2], X[3])->swap(X[2], X[3])
A:sklearn.utils.tests.test_sparsefuncs.(X[:, 0], X[:, -1])->swap(X[:, 0], X[:, -1])
A:sklearn.utils.tests.test_sparsefuncs.(X[:, 0], X[:, 1])->swap(X[:, 0], X[:, 1])
A:sklearn.utils.tests.test_sparsefuncs.(mins_csr, maxs_csr)->min_max_axis(X_csr, axis=1)
A:sklearn.utils.tests.test_sparsefuncs.(mins_csc, maxs_csc)->min_max_axis(X_csc, axis=1)
sklearn.utils.tests.test_sparsefuncs.test_densify_rows()
sklearn.utils.tests.test_sparsefuncs.test_inplace_column_scale()
sklearn.utils.tests.test_sparsefuncs.test_inplace_row_scale()
sklearn.utils.tests.test_sparsefuncs.test_inplace_swap_column()
sklearn.utils.tests.test_sparsefuncs.test_inplace_swap_row()
sklearn.utils.tests.test_sparsefuncs.test_mean_variance_axis0()
sklearn.utils.tests.test_sparsefuncs.test_min_max_axis0()
sklearn.utils.tests.test_sparsefuncs.test_min_max_axis1()
sklearn.utils.tests.test_sparsefuncs.test_min_max_axis_errors()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/tests/test_testing.py----------------------------------------
A:sklearn.utils.tests.test_testing.lda->LDA()
A:sklearn.utils.tests.test_testing.tree->DecisionTreeClassifier()
sklearn.utils.tests.test_testing.TestWarns(unittest.TestCase)
sklearn.utils.tests.test_testing.TestWarns.test_warn(self)
sklearn.utils.tests.test_testing.TestWarns.test_warn_wrong_warning(self)
sklearn.utils.tests.test_testing.test_assert_raise_message()
sklearn.utils.tests.test_testing.test_set_random_state()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/tests/test_murmurhash.py----------------------------------------
A:sklearn.utils.tests.test_murmurhash.rng->numpy.random.RandomState(42)
A:sklearn.utils.tests.test_murmurhash.keys->keys.reshape((3, 2, 1)).reshape((3, 2, 1))
A:sklearn.utils.tests.test_murmurhash.expected->expected.reshape(keys.shape).reshape(keys.shape)
A:sklearn.utils.tests.test_murmurhash.previous_hashes->set()
A:sklearn.utils.tests.test_murmurhash.h->murmurhash3_32(' ' * i, 0)
A:sklearn.utils.tests.test_murmurhash.bins->numpy.zeros(n_bins, dtype=np.float)
sklearn.utils.tests.test_murmurhash.test_mmhash3_bytes()
sklearn.utils.tests.test_murmurhash.test_mmhash3_int()
sklearn.utils.tests.test_murmurhash.test_mmhash3_int_array()
sklearn.utils.tests.test_murmurhash.test_mmhash3_unicode()
sklearn.utils.tests.test_murmurhash.test_no_collision_on_byte_range()
sklearn.utils.tests.test_murmurhash.test_uniform_distribution()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/tests/test_linear_assignment.py----------------------------------------
A:sklearn.utils.tests.test_linear_assignment.cost_matrix->numpy.array(cost_matrix)
A:sklearn.utils.tests.test_linear_assignment.indexes->_hungarian(cost_matrix.T)
sklearn.utils.tests.test_linear_assignment.test_hungarian()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/tests/test_extmath.py----------------------------------------
A:sklearn.utils.tests.test_extmath.rng->numpy.random.RandomState(42)
A:sklearn.utils.tests.test_extmath.X->make_low_rank_matrix(n_samples=n_samples, n_features=n_features, effective_rank=rank, tail_strength=0.5, random_state=0)
A:sklearn.utils.tests.test_extmath.X_csr->scipy.sparse.csr_matrix(X)
A:sklearn.utils.tests.test_extmath.X_csc->scipy.sparse.csc_matrix(X)
A:sklearn.utils.tests.test_extmath.X_coo->scipy.sparse.coo_matrix(X)
A:sklearn.utils.tests.test_extmath.X_lil->scipy.sparse.lil_matrix(X)
A:sklearn.utils.tests.test_extmath.x->numpy.linspace(-2, 2, 50)
A:sklearn.utils.tests.test_extmath.weights->numpy.ones(x.shape)
A:sklearn.utils.tests.test_extmath.(mode, score)->weighted_mode(x, w, axis=1)
A:sklearn.utils.tests.test_extmath.(mode2, score2)->weighted_mode(x, weights, axis)
A:sklearn.utils.tests.test_extmath.w->numpy.random.RandomState(42).random_sample(x.shape)
A:sklearn.utils.tests.test_extmath.logx->numpy.log(x)
A:sklearn.utils.tests.test_extmath.logX->numpy.vstack([logx, logx])
A:sklearn.utils.tests.test_extmath.(U, s, V)->scipy.linalg.svd(X, full_matrices=False)
A:sklearn.utils.tests.test_extmath.(Ua, sa, Va)->randomized_svd(X, k)
A:sklearn.utils.tests.test_extmath.sq_norm->(X ** 2).sum(axis=1)
A:sklearn.utils.tests.test_extmath.Xcsr->scipy.sparse.csr_matrix(X, dtype=np.float32)
A:sklearn.utils.tests.test_extmath.(_, s, _)->scipy.linalg.svd(X, full_matrices=False)
A:sklearn.utils.tests.test_extmath.(_, sa, _)->randomized_svd(X, k, n_iter=0)
A:sklearn.utils.tests.test_extmath.(_, sap, _)->randomized_svd(X, k, n_iter=5)
A:sklearn.utils.tests.test_extmath.(U1, s1, V1)->randomized_svd(X, k, n_iter=3, transpose=False, random_state=0)
A:sklearn.utils.tests.test_extmath.(U2, s2, V2)->randomized_svd(X, k, n_iter=3, transpose=True, random_state=0)
A:sklearn.utils.tests.test_extmath.(U3, s3, V3)->randomized_svd(X, k, n_iter=3, transpose='auto', random_state=0)
A:sklearn.utils.tests.test_extmath.(U4, s4, V4)->scipy.linalg.svd(X, full_matrices=False)
A:sklearn.utils.tests.test_extmath.a->numpy.array([[2.0, 0.0], [0.0, 1.0]])
A:sklearn.utils.tests.test_extmath.(u1, s1, v1)->randomized_svd(a, 2, flip_sign=True, random_state=41)
A:sklearn.utils.tests.test_extmath.(u2, s2, v2)->randomized_svd(a, 2, flip_sign=True, random_state=seed)
A:sklearn.utils.tests.test_extmath.true_out->numpy.array([[1, 4, 6], [1, 4, 7], [1, 5, 6], [1, 5, 7], [2, 4, 6], [2, 4, 7], [2, 5, 6], [2, 5, 7], [3, 4, 6], [3, 4, 7], [3, 5, 6], [3, 5, 7]])
A:sklearn.utils.tests.test_extmath.out->cartesian(axes)
A:sklearn.utils.tests.test_extmath.extreme_x->numpy.array([-100.0, 100.0])
A:sklearn.utils.tests.test_extmath.A->A.astype(dtype).astype(dtype)
A:sklearn.utils.tests.test_extmath.B->B.astype(dtype).astype(dtype)
A:sklearn.utils.tests.test_extmath.E->numpy.empty(0)
A:sklearn.utils.tests.test_extmath.C->numpy.dot(A.T, B)
A:sklearn.utils.tests.test_extmath.C_->fast_dot(A.T, B)
sklearn.utils.tests.test_extmath.test_cartesian()
sklearn.utils.tests.test_extmath.test_density()
sklearn.utils.tests.test_extmath.test_fast_dot()
sklearn.utils.tests.test_extmath.test_logistic_sigmoid()
sklearn.utils.tests.test_extmath.test_logsumexp()
sklearn.utils.tests.test_extmath.test_norm_squared_norm()
sklearn.utils.tests.test_extmath.test_random_weights()
sklearn.utils.tests.test_extmath.test_randomized_svd_infinite_rank()
sklearn.utils.tests.test_extmath.test_randomized_svd_low_rank()
sklearn.utils.tests.test_extmath.test_randomized_svd_low_rank_with_noise()
sklearn.utils.tests.test_extmath.test_randomized_svd_sign_flip()
sklearn.utils.tests.test_extmath.test_randomized_svd_transpose_consistency()
sklearn.utils.tests.test_extmath.test_row_norms()
sklearn.utils.tests.test_extmath.test_uniform_weights()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/utils/tests/test_class_weight.py----------------------------------------
A:sklearn.utils.tests.test_class_weight.y->numpy.asarray([1, 0, 0, 3, 3, 3])
A:sklearn.utils.tests.test_class_weight.classes->numpy.array([1, 0, 3])
A:sklearn.utils.tests.test_class_weight.cw->compute_class_weight('auto', classes, y)
sklearn.utils.tests.test_class_weight.test_compute_class_weight()
sklearn.utils.tests.test_class_weight.test_compute_class_weight_auto_negative()
sklearn.utils.tests.test_class_weight.test_compute_class_weight_auto_unordered()
sklearn.utils.tests.test_class_weight.test_compute_class_weight_not_present()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/manifold/locally_linear.py----------------------------------------
A:sklearn.manifold.locally_linear.X->array2d(X)
A:sklearn.manifold.locally_linear.Z->Z.astype(np.float).astype(np.float)
A:sklearn.manifold.locally_linear.B->numpy.empty((n_samples, n_neighbors), dtype=X.dtype)
A:sklearn.manifold.locally_linear.v->numpy.ones(n_neighbors, dtype=X.dtype)
A:sklearn.manifold.locally_linear.G->numpy.dot(C, C.T)
A:sklearn.manifold.locally_linear.trace->numpy.trace(G)
A:sklearn.manifold.locally_linear.w->solve(G, v, sym_pos=True)
A:sklearn.manifold.locally_linear.knn->NearestNeighbors(n_neighbors + 1).fit(X)
A:sklearn.manifold.locally_linear.data->barycenter_weights(X, X[ind], reg=reg)
A:sklearn.manifold.locally_linear.indptr->numpy.arange(0, n_samples * n_neighbors + 1, n_neighbors)
A:sklearn.manifold.locally_linear.random_state->check_random_state(self.random_state)
A:sklearn.manifold.locally_linear.v0->check_random_state(self.random_state).rand(M.shape[0])
A:sklearn.manifold.locally_linear.(eigen_values, eigen_vectors)->eigh(M, eigvals=(k_skip, k + k_skip - 1), overwrite_a=True)
A:sklearn.manifold.locally_linear.M->numpy.zeros((N, N))
A:sklearn.manifold.locally_linear.index->numpy.argsort(np.abs(eigen_values))
A:sklearn.manifold.locally_linear.nbrs->NearestNeighbors(n_neighbors=n_neighbors + 1)
A:sklearn.manifold.locally_linear.W->barycenter_kneighbors_graph(nbrs, n_neighbors=n_neighbors, reg=reg)
A:sklearn.manifold.locally_linear.neighbors->NearestNeighbors(n_neighbors=n_neighbors + 1).kneighbors(X, n_neighbors=n_neighbors + 1, return_distance=False)
A:sklearn.manifold.locally_linear.Yi->numpy.empty((n_neighbors, 1 + n_components + dp), dtype=np.float)
A:sklearn.manifold.locally_linear.Ci->numpy.dot(Xi, Xi.T)
A:sklearn.manifold.locally_linear.(Q, R)->qr(Yi)
A:sklearn.manifold.locally_linear.S->solve(G, v, sym_pos=True).sum(0)
A:sklearn.manifold.locally_linear.(nbrs_x, nbrs_y)->numpy.meshgrid(neighbors[i], neighbors[i])
A:sklearn.manifold.locally_linear.V->numpy.zeros((N, n_neighbors, n_neighbors))
A:sklearn.manifold.locally_linear.nev->min(d_in, n_neighbors)
A:sklearn.manifold.locally_linear.evals->numpy.zeros([N, nev])
A:sklearn.manifold.locally_linear.(V[i], evals[i], _)->svd(X_nbrs, full_matrices=True)
A:sklearn.manifold.locally_linear.C_nbrs->numpy.dot(X_nbrs, X_nbrs.T)
A:sklearn.manifold.locally_linear.(evi, vi)->eigh(C_nbrs)
A:sklearn.manifold.locally_linear.tmp->numpy.dot(V.transpose(0, 2, 1), np.ones(n_neighbors))
A:sklearn.manifold.locally_linear.w_reg->numpy.zeros((N, n_neighbors))
A:sklearn.manifold.locally_linear.w_reg[i]->numpy.dot(V[i], tmp[i])
A:sklearn.manifold.locally_linear.eta->numpy.median(rho)
A:sklearn.manifold.locally_linear.s_range->numpy.zeros(N, dtype=int)
A:sklearn.manifold.locally_linear.evals_cumsum->numpy.cumsum(evals, 1)
A:sklearn.manifold.locally_linear.s_range[i]->numpy.searchsorted(eta_range[i, ::-1], eta)
A:sklearn.manifold.locally_linear.norm_h->numpy.linalg.norm(h)
A:sklearn.manifold.locally_linear.Wi_sum1->Wi.sum(1)
A:sklearn.manifold.locally_linear.Gi->numpy.zeros((n_neighbors, n_components + 1))
A:sklearn.manifold.locally_linear.GiGiT->numpy.dot(Gi, Gi.T)
A:sklearn.manifold.locally_linear.self.nbrs_->NearestNeighbors(self.n_neighbors, algorithm=self.neighbors_algorithm)
A:sklearn.manifold.locally_linear.(X,)->check_arrays(X, sparse_format='dense')
A:sklearn.manifold.locally_linear.(self.embedding_, self.reconstruction_error_)->locally_linear_embedding(self.nbrs_, self.n_neighbors, self.n_components, eigen_solver=self.eigen_solver, tol=self.tol, max_iter=self.max_iter, method=self.method, hessian_tol=self.hessian_tol, modified_tol=self.modified_tol, random_state=random_state)
A:sklearn.manifold.locally_linear.ind->self.nbrs_.kneighbors(X, n_neighbors=self.n_neighbors, return_distance=False)
A:sklearn.manifold.locally_linear.weights->barycenter_weights(X, self.nbrs_._fit_X[ind], reg=self.reg)
A:sklearn.manifold.locally_linear.X_new->numpy.empty((X.shape[0], self.n_components))
A:sklearn.manifold.locally_linear.X_new[i]->numpy.dot(self.embedding_[ind[i]].T, weights[i])
sklearn.manifold.LocallyLinearEmbedding(self,n_neighbors=5,n_components=2,reg=0.001,eigen_solver='auto',tol=1e-06,max_iter=100,method='standard',hessian_tol=0.0001,modified_tol=1e-12,neighbors_algorithm='auto',random_state=None)
sklearn.manifold.LocallyLinearEmbedding._fit_transform(self,X)
sklearn.manifold.LocallyLinearEmbedding.fit(self,X,y=None)
sklearn.manifold.LocallyLinearEmbedding.fit_transform(self,X,y=None)
sklearn.manifold.LocallyLinearEmbedding.transform(self,X)
sklearn.manifold.locally_linear.LocallyLinearEmbedding(self,n_neighbors=5,n_components=2,reg=0.001,eigen_solver='auto',tol=1e-06,max_iter=100,method='standard',hessian_tol=0.0001,modified_tol=1e-12,neighbors_algorithm='auto',random_state=None)
sklearn.manifold.locally_linear.LocallyLinearEmbedding.__init__(self,n_neighbors=5,n_components=2,reg=0.001,eigen_solver='auto',tol=1e-06,max_iter=100,method='standard',hessian_tol=0.0001,modified_tol=1e-12,neighbors_algorithm='auto',random_state=None)
sklearn.manifold.locally_linear.LocallyLinearEmbedding._fit_transform(self,X)
sklearn.manifold.locally_linear.LocallyLinearEmbedding.fit(self,X,y=None)
sklearn.manifold.locally_linear.LocallyLinearEmbedding.fit_transform(self,X,y=None)
sklearn.manifold.locally_linear.LocallyLinearEmbedding.transform(self,X)
sklearn.manifold.locally_linear.barycenter_kneighbors_graph(X,n_neighbors,reg=0.001)
sklearn.manifold.locally_linear.barycenter_weights(X,Z,reg=0.001)
sklearn.manifold.locally_linear.locally_linear_embedding(X,n_neighbors,n_components,reg=0.001,eigen_solver='auto',tol=1e-06,max_iter=100,method='standard',hessian_tol=0.0001,modified_tol=1e-12,random_state=None)
sklearn.manifold.locally_linear.null_space(M,k,k_skip=1,eigen_solver='arpack',tol=1e-06,max_iter=100,random_state=None)
sklearn.manifold.locally_linear_embedding(X,n_neighbors,n_components,reg=0.001,eigen_solver='auto',tol=1e-06,max_iter=100,method='standard',hessian_tol=0.0001,modified_tol=1e-12,random_state=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/manifold/spectral_embedding_.py----------------------------------------
A:sklearn.manifold.spectral_embedding_.connected_components_matrix->numpy.zeros(shape=graph.shape[0], dtype=np.bool)
A:sklearn.manifold.spectral_embedding_.last_num_component->numpy.zeros(shape=graph.shape[0], dtype=np.bool).sum()
A:sklearn.manifold.spectral_embedding_.(_, node_to_add)->numpy.where(graph[connected_components_matrix] != 0)
A:sklearn.manifold.spectral_embedding_.(n_connected_components, _)->connected_components(graph)
A:sklearn.manifold.spectral_embedding_.laplacian->_set_diag(laplacian, 1)
A:sklearn.manifold.spectral_embedding_.random_state->check_random_state(self.random_state)
A:sklearn.manifold.spectral_embedding_.(laplacian, dd)->graph_laplacian(adjacency, normed=norm_laplacian, return_diag=True)
A:sklearn.manifold.spectral_embedding_.(lambdas, diffusion_map)->lobpcg(laplacian, X, tol=1e-15, largest=False, maxiter=2000)
A:sklearn.manifold.spectral_embedding_.ml->smoothed_aggregation_solver(atleast2d_or_csr(laplacian))
A:sklearn.manifold.spectral_embedding_.M->smoothed_aggregation_solver(atleast2d_or_csr(laplacian)).aspreconditioner()
A:sklearn.manifold.spectral_embedding_.X->check_random_state(self.random_state).rand(laplacian.shape[0], n_components + 1)
A:sklearn.manifold.spectral_embedding_.X[:, 0]->dd.ravel()
A:sklearn.manifold.spectral_embedding_.self.affinity_matrix_->self.affinity(X)
A:sklearn.manifold.spectral_embedding_.affinity_matrix->self._get_affinity_matrix(X)
A:sklearn.manifold.spectral_embedding_.self.embedding_->spectral_embedding(affinity_matrix, n_components=self.n_components, eigen_solver=self.eigen_solver, random_state=random_state)
sklearn.manifold.SpectralEmbedding(self,n_components=2,affinity='nearest_neighbors',gamma=None,random_state=None,eigen_solver=None,n_neighbors=None)
sklearn.manifold.SpectralEmbedding._get_affinity_matrix(self,X,Y=None)
sklearn.manifold.SpectralEmbedding._pairwise(self)
sklearn.manifold.SpectralEmbedding.fit(self,X,y=None)
sklearn.manifold.SpectralEmbedding.fit_transform(self,X,y=None)
sklearn.manifold.spectral_embedding(adjacency,n_components=8,eigen_solver=None,random_state=None,eigen_tol=0.0,norm_laplacian=True,drop_first=True,mode=None)
sklearn.manifold.spectral_embedding_.SpectralEmbedding(self,n_components=2,affinity='nearest_neighbors',gamma=None,random_state=None,eigen_solver=None,n_neighbors=None)
sklearn.manifold.spectral_embedding_.SpectralEmbedding.__init__(self,n_components=2,affinity='nearest_neighbors',gamma=None,random_state=None,eigen_solver=None,n_neighbors=None)
sklearn.manifold.spectral_embedding_.SpectralEmbedding._get_affinity_matrix(self,X,Y=None)
sklearn.manifold.spectral_embedding_.SpectralEmbedding._pairwise(self)
sklearn.manifold.spectral_embedding_.SpectralEmbedding.fit(self,X,y=None)
sklearn.manifold.spectral_embedding_.SpectralEmbedding.fit_transform(self,X,y=None)
sklearn.manifold.spectral_embedding_._graph_connected_component(graph,node_id)
sklearn.manifold.spectral_embedding_._graph_is_connected(graph)
sklearn.manifold.spectral_embedding_._set_diag(laplacian,value)
sklearn.manifold.spectral_embedding_.spectral_embedding(adjacency,n_components=8,eigen_solver=None,random_state=None,eigen_tol=0.0,norm_laplacian=True,drop_first=True,mode=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/manifold/mds.py----------------------------------------
A:sklearn.manifold.mds.random_state->check_random_state(random_state)
A:sklearn.manifold.mds.sim_flat->((1 - np.tri(n_samples)) * similarities).ravel()
A:sklearn.manifold.mds.X->X.reshape((n_samples, n_components)).reshape((n_samples, n_components))
A:sklearn.manifold.mds.ir->IsotonicRegression()
A:sklearn.manifold.mds.dis->numpy.sqrt((X ** 2).sum(axis=1)).sum()
A:sklearn.manifold.mds.dis_flat->numpy.sqrt((X ** 2).sum(axis=1)).sum().ravel()
A:sklearn.manifold.mds.disparities_flat->IsotonicRegression().fit_transform(sim_flat_w, dis_flat_w)
A:sklearn.manifold.mds.disparities->disparities.reshape((n_samples, n_samples)).reshape((n_samples, n_samples))
A:sklearn.manifold.mds.(similarities,)->check_arrays(similarities, sparse_format='dense')
A:sklearn.manifold.mds.init->numpy.asarray(init).copy()
A:sklearn.manifold.mds.(pos, stress)->_smacof_single(similarities, metric=metric, n_components=n_components, init=init, max_iter=max_iter, verbose=verbose, eps=eps, random_state=random_state)
A:sklearn.manifold.mds.best_pos->pos.copy()
A:sklearn.manifold.mds.seeds->check_random_state(random_state).randint(np.iinfo(np.int32).max, size=n_init)
A:sklearn.manifold.mds.results->Parallel(n_jobs=n_jobs, verbose=max(verbose - 1, 0))((delayed(_smacof_single)(similarities, metric=metric, n_components=n_components, init=init, max_iter=max_iter, verbose=verbose, eps=eps, random_state=seed) for seed in seeds))
A:sklearn.manifold.mds.(positions, stress)->zip(*results)
A:sklearn.manifold.mds.best->numpy.argmin(stress)
A:sklearn.manifold.mds.self.dissimilarity_matrix_->euclidean_distances(X)
A:sklearn.manifold.mds.(self.embedding_, self.stress_)->smacof(self.dissimilarity_matrix_, metric=self.metric, n_components=self.n_components, init=init, n_init=self.n_init, n_jobs=self.n_jobs, max_iter=self.max_iter, verbose=self.verbose, eps=self.eps, random_state=self.random_state)
sklearn.manifold.MDS(self,n_components=2,metric=True,n_init=4,max_iter=300,verbose=0,eps=0.001,n_jobs=1,random_state=None,dissimilarity='euclidean')
sklearn.manifold.MDS._pairwise(self)
sklearn.manifold.MDS.fit(self,X,init=None,y=None)
sklearn.manifold.MDS.fit_transform(self,X,init=None,y=None)
sklearn.manifold.mds.MDS(self,n_components=2,metric=True,n_init=4,max_iter=300,verbose=0,eps=0.001,n_jobs=1,random_state=None,dissimilarity='euclidean')
sklearn.manifold.mds.MDS.__init__(self,n_components=2,metric=True,n_init=4,max_iter=300,verbose=0,eps=0.001,n_jobs=1,random_state=None,dissimilarity='euclidean')
sklearn.manifold.mds.MDS._pairwise(self)
sklearn.manifold.mds.MDS.fit(self,X,init=None,y=None)
sklearn.manifold.mds.MDS.fit_transform(self,X,init=None,y=None)
sklearn.manifold.mds._smacof_single(similarities,metric=True,n_components=2,init=None,max_iter=300,verbose=0,eps=0.001,random_state=None)
sklearn.manifold.mds.smacof(similarities,metric=True,n_components=2,init=None,n_init=8,n_jobs=1,max_iter=300,verbose=0,eps=0.001,random_state=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/manifold/isomap.py----------------------------------------
A:sklearn.manifold.isomap.self.nbrs_->NearestNeighbors(n_neighbors=n_neighbors, algorithm=neighbors_algorithm)
A:sklearn.manifold.isomap.(X,)->check_arrays(X, sparse_format='dense')
A:sklearn.manifold.isomap.self.kernel_pca_->KernelPCA(n_components=self.n_components, kernel='precomputed', eigen_solver=self.eigen_solver, tol=self.tol, max_iter=self.max_iter)
A:sklearn.manifold.isomap.kng->kneighbors_graph(self.nbrs_, self.n_neighbors, mode='distance')
A:sklearn.manifold.isomap.self.dist_matrix_->graph_shortest_path(kng, method=self.path_method, directed=False)
A:sklearn.manifold.isomap.self.embedding_->self.kernel_pca_.fit_transform(G)
A:sklearn.manifold.isomap.G_center->KernelCenterer().fit_transform(G)
A:sklearn.manifold.isomap.(distances, indices)->self.nbrs_.kneighbors(X, return_distance=True)
A:sklearn.manifold.isomap.G_X->numpy.zeros((X.shape[0], self.training_data_.shape[0]))
A:sklearn.manifold.isomap.G_X[i]->numpy.min(self.dist_matrix_[indices[i]] + distances[i][:, None], 0)
sklearn.manifold.Isomap(self,n_neighbors=5,n_components=2,eigen_solver='auto',tol=0,max_iter=None,path_method='auto',neighbors_algorithm='auto')
sklearn.manifold.Isomap._fit_transform(self,X)
sklearn.manifold.Isomap.fit(self,X,y=None)
sklearn.manifold.Isomap.fit_transform(self,X,y=None)
sklearn.manifold.Isomap.reconstruction_error(self)
sklearn.manifold.Isomap.transform(self,X)
sklearn.manifold.isomap.Isomap(self,n_neighbors=5,n_components=2,eigen_solver='auto',tol=0,max_iter=None,path_method='auto',neighbors_algorithm='auto')
sklearn.manifold.isomap.Isomap.__init__(self,n_neighbors=5,n_components=2,eigen_solver='auto',tol=0,max_iter=None,path_method='auto',neighbors_algorithm='auto')
sklearn.manifold.isomap.Isomap._fit_transform(self,X)
sklearn.manifold.isomap.Isomap.fit(self,X,y=None)
sklearn.manifold.isomap.Isomap.fit_transform(self,X,y=None)
sklearn.manifold.isomap.Isomap.reconstruction_error(self)
sklearn.manifold.isomap.Isomap.transform(self,X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/manifold/setup.py----------------------------------------
A:sklearn.manifold.setup.config->Configuration('manifold', parent_package, top_path)
sklearn.manifold.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/manifold/t_sne.py----------------------------------------
A:sklearn.manifold.t_sne.conditional_P->_utils._binary_search_perplexity(distances, desired_perplexity, verbose)
A:sklearn.manifold.t_sne.sum_P->numpy.maximum(np.sum(P), MACHINE_EPSILON)
A:sklearn.manifold.t_sne.P->_joint_probabilities(distances, self.perplexity, self.verbose)
A:sklearn.manifold.t_sne.X_embedded->X_embedded.ravel().reshape(n_samples, self.n_components)
A:sklearn.manifold.t_sne.n->pdist(X_embedded, 'sqeuclidean')
A:sklearn.manifold.t_sne.Q->numpy.maximum(n / (2.0 * np.sum(n)), MACHINE_EPSILON)
A:sklearn.manifold.t_sne.grad->grad.ravel().ravel()
A:sklearn.manifold.t_sne.PQd->squareform((P - Q) * n)
A:sklearn.manifold.t_sne.p->p0.copy().ravel()
A:sklearn.manifold.t_sne.update->numpy.zeros_like(p)
A:sklearn.manifold.t_sne.gains->numpy.ones_like(p)
A:sklearn.manifold.t_sne.(new_error, grad)->objective(p, *args)
A:sklearn.manifold.t_sne.error_diff->numpy.abs(new_error - error)
A:sklearn.manifold.t_sne.grad_norm->scipy.linalg.norm(grad)
A:sklearn.manifold.t_sne.dec->numpy.invert(inc)
A:sklearn.manifold.t_sne.dist_X->pairwise_distances(X, squared=True)
A:sklearn.manifold.t_sne.dist_X_embedded->pairwise_distances(X_embedded, squared=True)
A:sklearn.manifold.t_sne.ind_X->numpy.argsort(dist_X, axis=1)
A:sklearn.manifold.t_sne.ranks->numpy.zeros(n_neighbors)
A:sklearn.manifold.t_sne.(X,)->check_arrays(X)
A:sklearn.manifold.t_sne.random_state->check_random_state(self.random_state)
A:sklearn.manifold.t_sne.distances->pairwise_distances(X, metric=self.metric, squared=True)
A:sklearn.manifold.t_sne.pca->RandomizedPCA(n_components=self.n_components, random_state=random_state)
A:sklearn.manifold.t_sne.self.embedding_->self._tsne(P, alpha, n_samples, random_state, X_embedded=X_embedded)
A:sklearn.manifold.t_sne.params->X_embedded.ravel().reshape(n_samples, self.n_components).ravel()
A:sklearn.manifold.t_sne.(params, error, it)->_gradient_descent(_kl_divergence, params, it=it + 1, n_iter=self.n_iter, momentum=0.8, learning_rate=self.learning_rate, verbose=self.verbose, args=[P, alpha, n_samples, self.n_components])
sklearn.manifold.TSNE(self,n_components=2,perplexity=30.0,early_exaggeration=4.0,learning_rate=1000.0,n_iter=1000,metric='euclidean',init='random',verbose=0,random_state=None)
sklearn.manifold.TSNE._fit(self,X)
sklearn.manifold.TSNE._tsne(self,P,alpha,n_samples,random_state,X_embedded=None)
sklearn.manifold.TSNE.fit_transform(self,X)
sklearn.manifold.t_sne.TSNE(self,n_components=2,perplexity=30.0,early_exaggeration=4.0,learning_rate=1000.0,n_iter=1000,metric='euclidean',init='random',verbose=0,random_state=None)
sklearn.manifold.t_sne.TSNE.__init__(self,n_components=2,perplexity=30.0,early_exaggeration=4.0,learning_rate=1000.0,n_iter=1000,metric='euclidean',init='random',verbose=0,random_state=None)
sklearn.manifold.t_sne.TSNE._fit(self,X)
sklearn.manifold.t_sne.TSNE._tsne(self,P,alpha,n_samples,random_state,X_embedded=None)
sklearn.manifold.t_sne.TSNE.fit_transform(self,X)
sklearn.manifold.t_sne._gradient_descent(objective,p0,it,n_iter,n_iter_without_progress=30,momentum=0.5,learning_rate=1000.0,min_gain=0.01,min_grad_norm=1e-07,min_error_diff=1e-07,verbose=0,args=[])
sklearn.manifold.t_sne._joint_probabilities(distances,desired_perplexity,verbose)
sklearn.manifold.t_sne._kl_divergence(params,P,alpha,n_samples,n_components)
sklearn.manifold.t_sne.trustworthiness(X,X_embedded,n_neighbors=5,precomputed=False)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/manifold/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/coordinate_descent.py----------------------------------------
A:sklearn.linear_model.coordinate_descent.n_samples->len(y)
A:sklearn.linear_model.coordinate_descent.X_sparse->scipy.sparse.isspmatrix(X)
A:sklearn.linear_model.coordinate_descent.X->array2d(X, dtype=np.float64, order='F', copy=self.copy_X and self.fit_intercept)
A:sklearn.linear_model.coordinate_descent.(X, y, _, _, _)->center_data(X, y, fit_intercept, normalize, copy=False)
A:sklearn.linear_model.coordinate_descent.Xy->safe_sparse_dot(X.T, y, dense_output=True)
A:sklearn.linear_model.coordinate_descent.(_, _, X_mean, _, X_std)->sparse_center_data(X, y, fit_intercept, normalize)
A:sklearn.linear_model.coordinate_descent.mean_dot->numpy.sum(X_mean[:, np.newaxis] * y, axis=1)
A:sklearn.linear_model.coordinate_descent.X_sparse_scaling->numpy.ones(n_features)
A:sklearn.linear_model.coordinate_descent.(X, y, X_mean, y_mean, X_std, precompute, Xy)->_pre_fit(X, y, None, self.precompute, self.normalize, self.fit_intercept, copy=True)
A:sklearn.linear_model.coordinate_descent.alphas->numpy.tile(np.sort(alphas)[::-1], (n_l1_ratio, 1))
A:sklearn.linear_model.coordinate_descent.n_alphas->len(alphas[0])
A:sklearn.linear_model.coordinate_descent.tol->params.get('tol', 0.0001)
A:sklearn.linear_model.coordinate_descent.positive->params.get('positive', False)
A:sklearn.linear_model.coordinate_descent.max_iter->params.get('max_iter', 1000)
A:sklearn.linear_model.coordinate_descent.dual_gaps->numpy.empty(n_alphas)
A:sklearn.linear_model.coordinate_descent.coefs->numpy.empty((n_outputs, n_features, n_alphas), dtype=np.float64)
A:sklearn.linear_model.coordinate_descent.coef_->numpy.zeros((n_targets, n_features), dtype=np.float64, order='F')
A:sklearn.linear_model.coordinate_descent.model->MultiTaskLasso()
A:sklearn.linear_model.coordinate_descent.path->staticmethod(lasso_path)
A:sklearn.linear_model.coordinate_descent.y->numpy.asarray(y, dtype=np.float64)
A:sklearn.linear_model.coordinate_descent.dual_gaps_->numpy.zeros(n_targets, dtype=np.float64)
A:sklearn.linear_model.coordinate_descent.(_, this_coef, this_dual_gap)->self.path(X, y[:, k], l1_ratio=self.l1_ratio, eps=None, n_alphas=None, alphas=[self.alpha], precompute=precompute, Xy=this_Xy, fit_intercept=False, normalize=False, copy_X=True, verbose=False, tol=self.tol, positive=self.positive, X_mean=X_mean, X_std=X_std, coef_init=coef_[k], max_iter=self.max_iter)
A:sklearn.linear_model.coordinate_descent.(self.coef_, self.dual_gap_)->map(np.squeeze, [coef_, dual_gaps_])
A:sklearn.linear_model.coordinate_descent.(X_train, y_train, X_mean, y_mean, X_std, precompute, Xy)->_pre_fit(X_train, y_train, None, precompute, normalize, fit_intercept, copy=False)
A:sklearn.linear_model.coordinate_descent.path_params->self.get_params()
A:sklearn.linear_model.coordinate_descent.X_train->atleast2d_or_csc(X_train, dtype=dtype, order=X_order)
A:sklearn.linear_model.coordinate_descent.(alphas, coefs, _)->path(X_train, y_train, **path_params)
A:sklearn.linear_model.coordinate_descent.y_mean->numpy.atleast_1d(y_mean)
A:sklearn.linear_model.coordinate_descent.nonzeros->numpy.flatnonzero(X_std)
A:sklearn.linear_model.coordinate_descent.coefs_feature_major->numpy.rollaxis(coefs, 1)
A:sklearn.linear_model.coordinate_descent.feature_2d->numpy.reshape(coefs_feature_major, (n_features, -1))
A:sklearn.linear_model.coordinate_descent.X_test_coefs->safe_sparse_dot(X_test, coefs)
A:sklearn.linear_model.coordinate_descent.this_mses->(residues ** 2).mean(axis=0).mean(axis=0)
A:sklearn.linear_model.coordinate_descent.l1_ratios->numpy.atleast_1d(path_params['l1_ratio'])
A:sklearn.linear_model.coordinate_descent.n_l1_ratio->len(l1_ratios)
A:sklearn.linear_model.coordinate_descent.cv->check_cv(self.cv, X)
A:sklearn.linear_model.coordinate_descent.folds->list(cv)
A:sklearn.linear_model.coordinate_descent.mse_paths->numpy.reshape(mse_paths, (n_l1_ratio, len(folds), -1))
A:sklearn.linear_model.coordinate_descent.mean_mse->numpy.mean(mse_paths, axis=1)
A:sklearn.linear_model.coordinate_descent.self.mse_path_->numpy.squeeze(np.rollaxis(mse_paths, 2, 1))
A:sklearn.linear_model.coordinate_descent.i_best_alpha->numpy.argmin(mse_alphas)
A:sklearn.linear_model.coordinate_descent.self.alphas_->numpy.asarray(alphas[0])
A:sklearn.linear_model.coordinate_descent.common_params->dict(((name, value) for (name, value) in self.get_params().items() if name in model.get_params()))
A:sklearn.linear_model.coordinate_descent.(X, y, X_mean, y_mean, X_std)->center_data(X, y, self.fit_intercept, self.normalize, copy=False)
A:sklearn.linear_model.coordinate_descent.self.coef_->numpy.asfortranarray(self.coef_)
A:sklearn.linear_model.coordinate_descent.(self.coef_, self.dual_gap_, self.eps_)->cd_fast.enet_coordinate_descent_multi_task(self.coef_, l1_reg, l2_reg, X, y, self.max_iter, self.tol)
sklearn.linear_model.ElasticNet(self,alpha=1.0,l1_ratio=0.5,fit_intercept=True,normalize=False,precompute='auto',max_iter=1000,copy_X=True,tol=0.0001,warm_start=False,positive=False)
sklearn.linear_model.ElasticNet.decision_function(self,X)
sklearn.linear_model.ElasticNet.fit(self,X,y)
sklearn.linear_model.ElasticNet.sparse_coef_(self)
sklearn.linear_model.ElasticNetCV(self,l1_ratio=0.5,eps=0.001,n_alphas=100,alphas=None,fit_intercept=True,normalize=False,precompute='auto',max_iter=1000,tol=0.0001,cv=None,copy_X=True,verbose=0,n_jobs=1,positive=False)
sklearn.linear_model.Lasso(self,alpha=1.0,fit_intercept=True,normalize=False,precompute='auto',copy_X=True,max_iter=1000,tol=0.0001,warm_start=False,positive=False)
sklearn.linear_model.LassoCV(self,eps=0.001,n_alphas=100,alphas=None,fit_intercept=True,normalize=False,precompute='auto',max_iter=1000,tol=0.0001,copy_X=True,cv=None,verbose=False,n_jobs=1,positive=False)
sklearn.linear_model.MultiTaskElasticNet(self,alpha=1.0,l1_ratio=0.5,fit_intercept=True,normalize=False,copy_X=True,max_iter=1000,tol=0.0001,warm_start=False)
sklearn.linear_model.MultiTaskElasticNet.fit(self,X,y)
sklearn.linear_model.MultiTaskElasticNetCV(self,l1_ratio=0.5,eps=0.001,n_alphas=100,alphas=None,fit_intercept=True,normalize=False,max_iter=1000,tol=0.0001,cv=None,copy_X=True,verbose=0,n_jobs=1)
sklearn.linear_model.MultiTaskLasso(self,alpha=1.0,fit_intercept=True,normalize=False,copy_X=True,max_iter=1000,tol=0.0001,warm_start=False)
sklearn.linear_model.MultiTaskLassoCV(self,eps=0.001,n_alphas=100,alphas=None,fit_intercept=True,normalize=False,max_iter=1000,tol=0.0001,copy_X=True,cv=None,verbose=False,n_jobs=1)
sklearn.linear_model.coordinate_descent.ElasticNet(self,alpha=1.0,l1_ratio=0.5,fit_intercept=True,normalize=False,precompute='auto',max_iter=1000,copy_X=True,tol=0.0001,warm_start=False,positive=False)
sklearn.linear_model.coordinate_descent.ElasticNet.__init__(self,alpha=1.0,l1_ratio=0.5,fit_intercept=True,normalize=False,precompute='auto',max_iter=1000,copy_X=True,tol=0.0001,warm_start=False,positive=False)
sklearn.linear_model.coordinate_descent.ElasticNet.decision_function(self,X)
sklearn.linear_model.coordinate_descent.ElasticNet.fit(self,X,y)
sklearn.linear_model.coordinate_descent.ElasticNet.sparse_coef_(self)
sklearn.linear_model.coordinate_descent.ElasticNetCV(self,l1_ratio=0.5,eps=0.001,n_alphas=100,alphas=None,fit_intercept=True,normalize=False,precompute='auto',max_iter=1000,tol=0.0001,cv=None,copy_X=True,verbose=0,n_jobs=1,positive=False)
sklearn.linear_model.coordinate_descent.ElasticNetCV.__init__(self,l1_ratio=0.5,eps=0.001,n_alphas=100,alphas=None,fit_intercept=True,normalize=False,precompute='auto',max_iter=1000,tol=0.0001,cv=None,copy_X=True,verbose=0,n_jobs=1,positive=False)
sklearn.linear_model.coordinate_descent.Lasso(self,alpha=1.0,fit_intercept=True,normalize=False,precompute='auto',copy_X=True,max_iter=1000,tol=0.0001,warm_start=False,positive=False)
sklearn.linear_model.coordinate_descent.Lasso.__init__(self,alpha=1.0,fit_intercept=True,normalize=False,precompute='auto',copy_X=True,max_iter=1000,tol=0.0001,warm_start=False,positive=False)
sklearn.linear_model.coordinate_descent.LassoCV(self,eps=0.001,n_alphas=100,alphas=None,fit_intercept=True,normalize=False,precompute='auto',max_iter=1000,tol=0.0001,copy_X=True,cv=None,verbose=False,n_jobs=1,positive=False)
sklearn.linear_model.coordinate_descent.LassoCV.__init__(self,eps=0.001,n_alphas=100,alphas=None,fit_intercept=True,normalize=False,precompute='auto',max_iter=1000,tol=0.0001,copy_X=True,cv=None,verbose=False,n_jobs=1,positive=False)
sklearn.linear_model.coordinate_descent.LinearModelCV(self,eps=0.001,n_alphas=100,alphas=None,fit_intercept=True,normalize=False,precompute='auto',max_iter=1000,tol=0.0001,copy_X=True,cv=None,verbose=False,n_jobs=1,positive=False)
sklearn.linear_model.coordinate_descent.LinearModelCV.__init__(self,eps=0.001,n_alphas=100,alphas=None,fit_intercept=True,normalize=False,precompute='auto',max_iter=1000,tol=0.0001,copy_X=True,cv=None,verbose=False,n_jobs=1,positive=False)
sklearn.linear_model.coordinate_descent.LinearModelCV.fit(self,X,y)
sklearn.linear_model.coordinate_descent.MultiTaskElasticNet(self,alpha=1.0,l1_ratio=0.5,fit_intercept=True,normalize=False,copy_X=True,max_iter=1000,tol=0.0001,warm_start=False)
sklearn.linear_model.coordinate_descent.MultiTaskElasticNet.__init__(self,alpha=1.0,l1_ratio=0.5,fit_intercept=True,normalize=False,copy_X=True,max_iter=1000,tol=0.0001,warm_start=False)
sklearn.linear_model.coordinate_descent.MultiTaskElasticNet.fit(self,X,y)
sklearn.linear_model.coordinate_descent.MultiTaskElasticNetCV(self,l1_ratio=0.5,eps=0.001,n_alphas=100,alphas=None,fit_intercept=True,normalize=False,max_iter=1000,tol=0.0001,cv=None,copy_X=True,verbose=0,n_jobs=1)
sklearn.linear_model.coordinate_descent.MultiTaskElasticNetCV.__init__(self,l1_ratio=0.5,eps=0.001,n_alphas=100,alphas=None,fit_intercept=True,normalize=False,max_iter=1000,tol=0.0001,cv=None,copy_X=True,verbose=0,n_jobs=1)
sklearn.linear_model.coordinate_descent.MultiTaskLasso(self,alpha=1.0,fit_intercept=True,normalize=False,copy_X=True,max_iter=1000,tol=0.0001,warm_start=False)
sklearn.linear_model.coordinate_descent.MultiTaskLasso.__init__(self,alpha=1.0,fit_intercept=True,normalize=False,copy_X=True,max_iter=1000,tol=0.0001,warm_start=False)
sklearn.linear_model.coordinate_descent.MultiTaskLassoCV(self,eps=0.001,n_alphas=100,alphas=None,fit_intercept=True,normalize=False,max_iter=1000,tol=0.0001,copy_X=True,cv=None,verbose=False,n_jobs=1)
sklearn.linear_model.coordinate_descent.MultiTaskLassoCV.__init__(self,eps=0.001,n_alphas=100,alphas=None,fit_intercept=True,normalize=False,max_iter=1000,tol=0.0001,copy_X=True,cv=None,verbose=False,n_jobs=1)
sklearn.linear_model.coordinate_descent._alpha_grid(X,y,Xy=None,l1_ratio=1.0,fit_intercept=True,eps=0.001,n_alphas=100,normalize=False,copy_X=True)
sklearn.linear_model.coordinate_descent._path_residuals(X,y,train,test,path,path_params,alphas=None,l1_ratio=1,X_order=None,dtype=None)
sklearn.linear_model.coordinate_descent.enet_path(X,y,l1_ratio=0.5,eps=0.001,n_alphas=100,alphas=None,precompute='auto',Xy=None,fit_intercept=True,normalize=False,copy_X=True,coef_init=None,verbose=False,return_models=False,**params)
sklearn.linear_model.coordinate_descent.lasso_path(X,y,eps=0.001,n_alphas=100,alphas=None,precompute='auto',Xy=None,fit_intercept=None,normalize=None,copy_X=True,coef_init=None,verbose=False,return_models=False,**params)
sklearn.linear_model.enet_path(X,y,l1_ratio=0.5,eps=0.001,n_alphas=100,alphas=None,precompute='auto',Xy=None,fit_intercept=True,normalize=False,copy_X=True,coef_init=None,verbose=False,return_models=False,**params)
sklearn.linear_model.lasso_path(X,y,eps=0.001,n_alphas=100,alphas=None,precompute='auto',Xy=None,fit_intercept=None,normalize=None,copy_X=True,coef_init=None,verbose=False,return_models=False,**params)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/perceptron.py----------------------------------------
sklearn.linear_model.Perceptron(self,penalty=None,alpha=0.0001,fit_intercept=True,n_iter=5,shuffle=False,verbose=0,eta0=1.0,n_jobs=1,random_state=0,class_weight=None,warm_start=False)
sklearn.linear_model.perceptron.Perceptron(self,penalty=None,alpha=0.0001,fit_intercept=True,n_iter=5,shuffle=False,verbose=0,eta0=1.0,n_jobs=1,random_state=0,class_weight=None,warm_start=False)
sklearn.linear_model.perceptron.Perceptron.__init__(self,penalty=None,alpha=0.0001,fit_intercept=True,n_iter=5,shuffle=False,verbose=0,eta0=1.0,n_jobs=1,random_state=0,class_weight=None,warm_start=False)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/passive_aggressive.py----------------------------------------
sklearn.linear_model.PassiveAggressiveClassifier(self,C=1.0,fit_intercept=True,n_iter=5,shuffle=False,verbose=0,loss='hinge',n_jobs=1,random_state=None,warm_start=False)
sklearn.linear_model.PassiveAggressiveClassifier.fit(self,X,y,coef_init=None,intercept_init=None)
sklearn.linear_model.PassiveAggressiveClassifier.partial_fit(self,X,y,classes=None)
sklearn.linear_model.PassiveAggressiveRegressor(self,C=1.0,fit_intercept=True,n_iter=5,shuffle=False,verbose=0,loss='epsilon_insensitive',epsilon=DEFAULT_EPSILON,random_state=None,class_weight=None,warm_start=False)
sklearn.linear_model.PassiveAggressiveRegressor.fit(self,X,y,coef_init=None,intercept_init=None)
sklearn.linear_model.PassiveAggressiveRegressor.partial_fit(self,X,y)
sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier(self,C=1.0,fit_intercept=True,n_iter=5,shuffle=False,verbose=0,loss='hinge',n_jobs=1,random_state=None,warm_start=False)
sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier.__init__(self,C=1.0,fit_intercept=True,n_iter=5,shuffle=False,verbose=0,loss='hinge',n_jobs=1,random_state=None,warm_start=False)
sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier.fit(self,X,y,coef_init=None,intercept_init=None)
sklearn.linear_model.passive_aggressive.PassiveAggressiveClassifier.partial_fit(self,X,y,classes=None)
sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor(self,C=1.0,fit_intercept=True,n_iter=5,shuffle=False,verbose=0,loss='epsilon_insensitive',epsilon=DEFAULT_EPSILON,random_state=None,class_weight=None,warm_start=False)
sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor.__init__(self,C=1.0,fit_intercept=True,n_iter=5,shuffle=False,verbose=0,loss='epsilon_insensitive',epsilon=DEFAULT_EPSILON,random_state=None,class_weight=None,warm_start=False)
sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor.fit(self,X,y,coef_init=None,intercept_init=None)
sklearn.linear_model.passive_aggressive.PassiveAggressiveRegressor.partial_fit(self,X,y)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/logistic.py----------------------------------------
sklearn.linear_model.LogisticRegression(self,penalty='l2',dual=False,tol=0.0001,C=1.0,fit_intercept=True,intercept_scaling=1,class_weight=None,random_state=None)
sklearn.linear_model.LogisticRegression.predict_log_proba(self,X)
sklearn.linear_model.LogisticRegression.predict_proba(self,X)
sklearn.linear_model.logistic.LogisticRegression(self,penalty='l2',dual=False,tol=0.0001,C=1.0,fit_intercept=True,intercept_scaling=1,class_weight=None,random_state=None)
sklearn.linear_model.logistic.LogisticRegression.__init__(self,penalty='l2',dual=False,tol=0.0001,C=1.0,fit_intercept=True,intercept_scaling=1,class_weight=None,random_state=None)
sklearn.linear_model.logistic.LogisticRegression.predict_log_proba(self,X)
sklearn.linear_model.logistic.LogisticRegression.predict_proba(self,X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/least_angle.py----------------------------------------
A:sklearn.linear_model.least_angle.max_features->min(max_iter, n_features)
A:sklearn.linear_model.least_angle.coefs->numpy.resize(coefs, (n_iter + add_features, n_features))
A:sklearn.linear_model.least_angle.alphas->numpy.resize(alphas, n_iter + add_features)
A:sklearn.linear_model.least_angle.sign_active->numpy.append(sign_active, 0.0)
A:sklearn.linear_model.least_angle.L->numpy.zeros((max_features, max_features), dtype=X.dtype)
A:sklearn.linear_model.least_angle.(swap, nrm2)->scipy.linalg.get_blas_funcs(('swap', 'nrm2'), (X,))
A:sklearn.linear_model.least_angle.(solve_cholesky,)->get_lapack_funcs(('potrs',), (X,))
A:sklearn.linear_model.least_angle.X->array2d(X)
A:sklearn.linear_model.least_angle.Gram->self._get_gram()
A:sklearn.linear_model.least_angle.Cov->Xy.copy()
A:sklearn.linear_model.least_angle.C_idx->numpy.argmax(np.abs(Cov))
A:sklearn.linear_model.least_angle.C->numpy.fabs(C_)
A:sklearn.linear_model.least_angle.sign_active[n_active]->numpy.sign(C_)
A:sklearn.linear_model.least_angle.(Cov[C_idx], Cov[0])->swap(Cov[C_idx], Cov[0])
A:sklearn.linear_model.least_angle.(X.T[n], X.T[m])->swap(X.T[n], X.T[m])
A:sklearn.linear_model.least_angle.L[n_active, :n_active]->numpy.dot(X.T[n_active], X.T[:n_active].T)
A:sklearn.linear_model.least_angle.(Gram[m], Gram[n])->swap(Gram[m], Gram[n])
A:sklearn.linear_model.least_angle.(Gram[:, m], Gram[:, n])->swap(Gram[:, m], Gram[:, n])
A:sklearn.linear_model.least_angle.v->numpy.dot(L[n_active, :n_active], L[n_active, :n_active])
A:sklearn.linear_model.least_angle.diag->max(np.sqrt(np.abs(c - v)), eps)
A:sklearn.linear_model.least_angle.(least_squares, info)->solve_cholesky(L_, sign_active[:n_active], lower=True)
A:sklearn.linear_model.least_angle.L_->L[:n_active, :n_active].copy()
A:sklearn.linear_model.least_angle.tmp->max(np.sum(least_squares * sign_active[:n_active]), eps)
A:sklearn.linear_model.least_angle.eq_dir->numpy.dot(X.T[:n_active].T, least_squares)
A:sklearn.linear_model.least_angle.corr_eq_dir->numpy.dot(Gram[:n_active, n_active:].T, least_squares)
A:sklearn.linear_model.least_angle.g1->utils.arrayfuncs.min_pos((C - Cov) / (AA - corr_eq_dir + tiny))
A:sklearn.linear_model.least_angle.g2->utils.arrayfuncs.min_pos((C + Cov) / (AA + corr_eq_dir + tiny))
A:sklearn.linear_model.least_angle.gamma_->min(g1, g2, C / AA)
A:sklearn.linear_model.least_angle.z_pos->utils.arrayfuncs.min_pos(z)
A:sklearn.linear_model.least_angle.coef->numpy.zeros_like(coef)
A:sklearn.linear_model.least_angle.(X.T[i], X.T[i + 1])->swap(X.T[i], X.T[i + 1])
A:sklearn.linear_model.least_angle.temp->numpy.dot(X.T[drop_idx], residual)
A:sklearn.linear_model.least_angle.(Gram[i], Gram[i + 1])->swap(Gram[i], Gram[i + 1])
A:sklearn.linear_model.least_angle.(Gram[:, i], Gram[:, i + 1])->swap(Gram[:, i], Gram[:, i + 1])
A:sklearn.linear_model.least_angle.y->numpy.asarray(y)
A:sklearn.linear_model.least_angle.(X, y, X_mean, y_mean, X_std)->self._center_data(X, y, self.fit_intercept, self.normalize, self.copy_X)
A:sklearn.linear_model.least_angle.alpha->getattr(self, 'alpha', 0.0)
A:sklearn.linear_model.least_angle.(alphas, active, coef_path)->lars_path(X, y[:, k], Gram=Gram, Xy=this_Xy, copy_X=self.copy_X, copy_Gram=True, alpha_min=alpha, method=self.method, verbose=max(0, self.verbose - 1), max_iter=max_iter, eps=self.eps, return_path=True)
A:sklearn.linear_model.least_angle.self.coef_->numpy.empty((n_targets, n_features))
A:sklearn.linear_model.least_angle.(alphas, _, self.coef_[k])->lars_path(X, y[:, k], Gram=Gram, Xy=this_Xy, copy_X=self.copy_X, copy_Gram=True, alpha_min=alpha, method=self.method, verbose=max(0, self.verbose - 1), max_iter=max_iter, eps=self.eps, return_path=False)
A:sklearn.linear_model.least_angle.X_train->X_train.copy().copy()
A:sklearn.linear_model.least_angle.y_train->as_float_array(y_train, copy=False)
A:sklearn.linear_model.least_angle.X_test->X_test.copy().copy()
A:sklearn.linear_model.least_angle.y_test->as_float_array(y_test, copy=False)
A:sklearn.linear_model.least_angle.X_mean->X_train.copy().copy().mean(axis=0)
A:sklearn.linear_model.least_angle.y_mean->as_float_array(y_train, copy=False).mean(axis=0)
A:sklearn.linear_model.least_angle.norms->numpy.sqrt(np.sum(X_train ** 2, axis=0))
A:sklearn.linear_model.least_angle.nonzeros->numpy.flatnonzero(norms)
A:sklearn.linear_model.least_angle.(alphas, active, coefs)->lars_path(X_train, y_train, Gram=Gram, copy_X=False, copy_Gram=False, method=method, verbose=max(0, verbose - 1), max_iter=max_iter, eps=eps)
A:sklearn.linear_model.least_angle.(X, y)->check_arrays(X, y)
A:sklearn.linear_model.least_angle.cv->check_cv(self.cv, X, y, classifier=False)
A:sklearn.linear_model.least_angle.cv_paths->Parallel(n_jobs=self.n_jobs, verbose=self.verbose)((delayed(_lars_path_residues)(X[train], y[train], X[test], y[test], Gram=Gram, copy=False, method=self.method, verbose=max(0, self.verbose - 1), normalize=self.normalize, fit_intercept=self.fit_intercept, max_iter=self.max_iter, eps=self.eps) for (train, test) in cv))
A:sklearn.linear_model.least_angle.all_alphas->numpy.unique(all_alphas)
A:sklearn.linear_model.least_angle.stride->int(max(1, int(len(all_alphas) / float(self.max_n_alphas))))
A:sklearn.linear_model.least_angle.mse_path->numpy.empty((len(all_alphas), len(cv_paths)))
A:sklearn.linear_model.least_angle.this_residues->scipy.interpolate.interp1d(alphas, residues, axis=0)(all_alphas)
A:sklearn.linear_model.least_angle.mse_path[:, index]->numpy.mean(this_residues, axis=-1)
A:sklearn.linear_model.least_angle.mask->numpy.all(np.isfinite(mse_path), axis=-1)
A:sklearn.linear_model.least_angle.i_best_alpha->numpy.argmin(mse_path.mean(axis=-1))
A:sklearn.linear_model.least_angle.(X, y, Xmean, ymean, Xstd)->base.LinearModel._center_data(X, y, self.fit_intercept, self.normalize, self.copy_X)
A:sklearn.linear_model.least_angle.(alphas_, active_, coef_path_)->lars_path(X, y, Gram=Gram, copy_X=copy_X, copy_Gram=True, alpha_min=0.0, method='lasso', verbose=self.verbose, max_iter=max_iter, eps=self.eps)
A:sklearn.linear_model.least_angle.K->log(n_samples)
A:sklearn.linear_model.least_angle.mean_squared_error->numpy.mean(R ** 2, axis=0)
A:sklearn.linear_model.least_angle.df->numpy.zeros(coef_path_.shape[1], dtype=np.int)
A:sklearn.linear_model.least_angle.df[k]->numpy.sum(mask)
A:sklearn.linear_model.least_angle.n_best->numpy.argmin(self.criterion_)
sklearn.linear_model.Lars(self,fit_intercept=True,verbose=False,normalize=True,precompute='auto',n_nonzero_coefs=500,eps=np.finfo(np.float).eps,copy_X=True,fit_path=True)
sklearn.linear_model.Lars._get_gram(self)
sklearn.linear_model.Lars.fit(self,X,y,Xy=None)
sklearn.linear_model.LarsCV(self,fit_intercept=True,verbose=False,max_iter=500,normalize=True,precompute='auto',cv=None,max_n_alphas=1000,n_jobs=1,eps=np.finfo(np.float).eps,copy_X=True)
sklearn.linear_model.LarsCV.alpha(self)
sklearn.linear_model.LarsCV.fit(self,X,y)
sklearn.linear_model.LassoLars(self,alpha=1.0,fit_intercept=True,verbose=False,normalize=True,precompute='auto',max_iter=500,eps=np.finfo(np.float).eps,copy_X=True,fit_path=True)
sklearn.linear_model.LassoLarsCV(LarsCV)
sklearn.linear_model.LassoLarsIC(self,criterion='aic',fit_intercept=True,verbose=False,normalize=True,precompute='auto',max_iter=500,eps=np.finfo(np.float).eps,copy_X=True)
sklearn.linear_model.LassoLarsIC.fit(self,X,y,copy_X=True)
sklearn.linear_model.lars_path(X,y,Xy=None,Gram=None,max_iter=500,alpha_min=0,method='lar',copy_X=True,eps=np.finfo(np.float).eps,copy_Gram=True,verbose=0,return_path=True)
sklearn.linear_model.least_angle.Lars(self,fit_intercept=True,verbose=False,normalize=True,precompute='auto',n_nonzero_coefs=500,eps=np.finfo(np.float).eps,copy_X=True,fit_path=True)
sklearn.linear_model.least_angle.Lars.__init__(self,fit_intercept=True,verbose=False,normalize=True,precompute='auto',n_nonzero_coefs=500,eps=np.finfo(np.float).eps,copy_X=True,fit_path=True)
sklearn.linear_model.least_angle.Lars._get_gram(self)
sklearn.linear_model.least_angle.Lars.fit(self,X,y,Xy=None)
sklearn.linear_model.least_angle.LarsCV(self,fit_intercept=True,verbose=False,max_iter=500,normalize=True,precompute='auto',cv=None,max_n_alphas=1000,n_jobs=1,eps=np.finfo(np.float).eps,copy_X=True)
sklearn.linear_model.least_angle.LarsCV.__init__(self,fit_intercept=True,verbose=False,max_iter=500,normalize=True,precompute='auto',cv=None,max_n_alphas=1000,n_jobs=1,eps=np.finfo(np.float).eps,copy_X=True)
sklearn.linear_model.least_angle.LarsCV.alpha(self)
sklearn.linear_model.least_angle.LarsCV.fit(self,X,y)
sklearn.linear_model.least_angle.LassoLars(self,alpha=1.0,fit_intercept=True,verbose=False,normalize=True,precompute='auto',max_iter=500,eps=np.finfo(np.float).eps,copy_X=True,fit_path=True)
sklearn.linear_model.least_angle.LassoLars.__init__(self,alpha=1.0,fit_intercept=True,verbose=False,normalize=True,precompute='auto',max_iter=500,eps=np.finfo(np.float).eps,copy_X=True,fit_path=True)
sklearn.linear_model.least_angle.LassoLarsCV(LarsCV)
sklearn.linear_model.least_angle.LassoLarsIC(self,criterion='aic',fit_intercept=True,verbose=False,normalize=True,precompute='auto',max_iter=500,eps=np.finfo(np.float).eps,copy_X=True)
sklearn.linear_model.least_angle.LassoLarsIC.__init__(self,criterion='aic',fit_intercept=True,verbose=False,normalize=True,precompute='auto',max_iter=500,eps=np.finfo(np.float).eps,copy_X=True)
sklearn.linear_model.least_angle.LassoLarsIC.fit(self,X,y,copy_X=True)
sklearn.linear_model.least_angle._lars_path_residues(X_train,y_train,X_test,y_test,Gram=None,copy=True,method='lars',verbose=False,fit_intercept=True,normalize=True,max_iter=500,eps=np.finfo(np.float).eps)
sklearn.linear_model.least_angle.lars_path(X,y,Xy=None,Gram=None,max_iter=500,alpha_min=0,method='lar',copy_X=True,eps=np.finfo(np.float).eps,copy_Gram=True,verbose=0,return_path=True)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/randomized_l1.py----------------------------------------
A:sklearn.linear_model.randomized_l1.random_state->check_random_state(random_state)
A:sklearn.linear_model.randomized_l1._center_data->staticmethod(center_data)
A:sklearn.linear_model.randomized_l1.(X, y)->check_arrays(X, y)
A:sklearn.linear_model.randomized_l1.X->as_float_array(X, copy=False)
A:sklearn.linear_model.randomized_l1.(X, y, X_mean, y_mean, X_std)->self._center_data(X, y, self.fit_intercept, self.normalize)
A:sklearn.linear_model.randomized_l1.(estimator_func, params)->self._make_estimator_and_params(X, y)
A:sklearn.linear_model.randomized_l1.memory->Memory(cachedir=memory)
A:sklearn.linear_model.randomized_l1.scores_->Memory(cachedir=memory).cache(_resample_model, ignore=['verbose', 'n_jobs', 'pre_dispatch'])(estimator_func, X, y, scaling=self.scaling, n_resampling=self.n_resampling, n_jobs=self.n_jobs, verbose=self.verbose, pre_dispatch=self.pre_dispatch, random_state=self.random_state, sample_fraction=self.sample_fraction, **params)
A:sklearn.linear_model.randomized_l1.self.scores_->numpy.max(self.all_scores_, axis=1)
A:sklearn.linear_model.randomized_l1.mask->self.get_support()
A:sklearn.linear_model.randomized_l1.support->self.get_support()
A:sklearn.linear_model.randomized_l1.Xt->numpy.zeros((X.shape[0], support.size))
A:sklearn.linear_model.randomized_l1.alpha->numpy.atleast_1d(np.asarray(alpha, dtype=np.float))
A:sklearn.linear_model.randomized_l1.(alphas_, _, coef_)->lars_path(X, y, Gram=precompute, copy_X=False, copy_Gram=False, alpha_min=np.min(alpha), method='lasso', verbose=verbose, max_iter=max_iter, eps=eps)
A:sklearn.linear_model.randomized_l1.interpolator->interp1d(alphas_[::-1], coef_[:, ::-1], bounds_error=False, fill_value=0.0)
A:sklearn.linear_model.randomized_l1.scores->numpy.zeros((X.shape[1], len(C)), dtype=np.bool)
A:sklearn.linear_model.randomized_l1.model->LassoLarsIC(precompute=self.precompute, criterion=self.alpha, max_iter=self.max_iter, eps=self.eps)
A:sklearn.linear_model.randomized_l1.size->len(weights)
A:sklearn.linear_model.randomized_l1.weight_dia->scipy.sparse.dia_matrix((1 - weights, 0), (size, size))
A:sklearn.linear_model.randomized_l1.C->numpy.atleast_1d(np.asarray(C, dtype=np.float))
A:sklearn.linear_model.randomized_l1.clf->LogisticRegression(C=this_C, tol=tol, penalty='l1', dual=False, fit_intercept=fit_intercept)
A:sklearn.linear_model.randomized_l1.this_scores[:]->numpy.any(np.abs(clf.coef_) > 10 * np.finfo(np.float).eps, axis=0)
A:sklearn.linear_model.randomized_l1.params->dict(C=self.C, tol=self.tol, fit_intercept=self.fit_intercept)
A:sklearn.linear_model.randomized_l1.(X, _, Xmean, _, X_std)->center_data(X, y, fit_intercept, normalize=normalize)
A:sklearn.linear_model.randomized_l1.(alphas, _, coefs)->lars_path(X, y, method='lasso', verbose=False, alpha_min=alpha_min)
A:sklearn.linear_model.randomized_l1.rng->check_random_state(random_state)
A:sklearn.linear_model.randomized_l1.paths->Parallel(n_jobs=n_jobs, verbose=verbose)((delayed(_lasso_stability_path)(X, y, mask=rng.rand(n_samples) < sample_fraction, weights=1.0 - scaling * rng.random_integers(0, 1, size=(n_features,)), eps=eps) for k in range(n_resampling)))
A:sklearn.linear_model.randomized_l1.all_alphas->numpy.array(all_alphas)
A:sklearn.linear_model.randomized_l1.stride->int(max(1, int(len(all_alphas) / float(n_grid))))
A:sklearn.linear_model.randomized_l1.scores_path->numpy.zeros((n_features, len(all_alphas)))
sklearn.linear_model.RandomizedLasso(self,alpha='aic',scaling=0.5,sample_fraction=0.75,n_resampling=200,selection_threshold=0.25,fit_intercept=True,verbose=False,normalize=True,precompute='auto',max_iter=500,eps=np.finfo(np.float).eps,random_state=None,n_jobs=1,pre_dispatch='3*n_jobs',memory=Memory(cachedir=None,verbose=0))
sklearn.linear_model.RandomizedLasso._make_estimator_and_params(self,X,y)
sklearn.linear_model.RandomizedLogisticRegression(self,C=1,scaling=0.5,sample_fraction=0.75,n_resampling=200,selection_threshold=0.25,tol=0.001,fit_intercept=True,verbose=False,normalize=True,random_state=None,n_jobs=1,pre_dispatch='3*n_jobs',memory=Memory(cachedir=None,verbose=0))
sklearn.linear_model.RandomizedLogisticRegression._center_data(self,X,y,fit_intercept,normalize=False)
sklearn.linear_model.RandomizedLogisticRegression._make_estimator_and_params(self,X,y)
sklearn.linear_model.lasso_stability_path(X,y,scaling=0.5,random_state=None,n_resampling=200,n_grid=100,sample_fraction=0.75,eps=4*np.finfo(np.float).eps,n_jobs=1,verbose=False)
sklearn.linear_model.randomized_l1.BaseRandomizedLinearModel(self)
sklearn.linear_model.randomized_l1.BaseRandomizedLinearModel.__init__(self)
sklearn.linear_model.randomized_l1.BaseRandomizedLinearModel._make_estimator_and_params(self,X,y)
sklearn.linear_model.randomized_l1.BaseRandomizedLinearModel.fit(self,X,y)
sklearn.linear_model.randomized_l1.BaseRandomizedLinearModel.get_support(self,indices=False)
sklearn.linear_model.randomized_l1.BaseRandomizedLinearModel.inverse_transform(self,X)
sklearn.linear_model.randomized_l1.BaseRandomizedLinearModel.transform(self,X)
sklearn.linear_model.randomized_l1.RandomizedLasso(self,alpha='aic',scaling=0.5,sample_fraction=0.75,n_resampling=200,selection_threshold=0.25,fit_intercept=True,verbose=False,normalize=True,precompute='auto',max_iter=500,eps=np.finfo(np.float).eps,random_state=None,n_jobs=1,pre_dispatch='3*n_jobs',memory=Memory(cachedir=None,verbose=0))
sklearn.linear_model.randomized_l1.RandomizedLasso.__init__(self,alpha='aic',scaling=0.5,sample_fraction=0.75,n_resampling=200,selection_threshold=0.25,fit_intercept=True,verbose=False,normalize=True,precompute='auto',max_iter=500,eps=np.finfo(np.float).eps,random_state=None,n_jobs=1,pre_dispatch='3*n_jobs',memory=Memory(cachedir=None,verbose=0))
sklearn.linear_model.randomized_l1.RandomizedLasso._make_estimator_and_params(self,X,y)
sklearn.linear_model.randomized_l1.RandomizedLogisticRegression(self,C=1,scaling=0.5,sample_fraction=0.75,n_resampling=200,selection_threshold=0.25,tol=0.001,fit_intercept=True,verbose=False,normalize=True,random_state=None,n_jobs=1,pre_dispatch='3*n_jobs',memory=Memory(cachedir=None,verbose=0))
sklearn.linear_model.randomized_l1.RandomizedLogisticRegression.__init__(self,C=1,scaling=0.5,sample_fraction=0.75,n_resampling=200,selection_threshold=0.25,tol=0.001,fit_intercept=True,verbose=False,normalize=True,random_state=None,n_jobs=1,pre_dispatch='3*n_jobs',memory=Memory(cachedir=None,verbose=0))
sklearn.linear_model.randomized_l1.RandomizedLogisticRegression._center_data(self,X,y,fit_intercept,normalize=False)
sklearn.linear_model.randomized_l1.RandomizedLogisticRegression._make_estimator_and_params(self,X,y)
sklearn.linear_model.randomized_l1._lasso_stability_path(X,y,mask,weights,eps)
sklearn.linear_model.randomized_l1._randomized_lasso(X,y,weights,mask,alpha=1.0,verbose=False,precompute=False,eps=np.finfo(np.float).eps,max_iter=500)
sklearn.linear_model.randomized_l1._randomized_logistic(X,y,weights,mask,C=1.0,verbose=False,fit_intercept=True,tol=0.001)
sklearn.linear_model.randomized_l1._resample_model(estimator_func,X,y,scaling=0.5,n_resampling=200,n_jobs=1,verbose=False,pre_dispatch='3*n_jobs',random_state=None,sample_fraction=0.75,**params)
sklearn.linear_model.randomized_l1.lasso_stability_path(X,y,scaling=0.5,random_state=None,n_resampling=200,n_grid=100,sample_fraction=0.75,eps=4*np.finfo(np.float).eps,n_jobs=1,verbose=False)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/ridge.py----------------------------------------
A:sklearn.linear_model.ridge.X1->scipy.sparse.linalg.aslinearoperator(X)
A:sklearn.linear_model.ridge.coefs->numpy.empty([n_targets, n_features])
A:sklearn.linear_model.ridge.mv->create_mv(alpha[i])
A:sklearn.linear_model.ridge.C->scipy.sparse.linalg.LinearOperator((n_features, n_features), matvec=mv, dtype=X.dtype)
A:sklearn.linear_model.ridge.(coef, info)->scipy.sparse.linalg.cg(C, y_column, tol=tol)
A:sklearn.linear_model.ridge.coefs[i]->scipy.sparse.linalg.aslinearoperator(X).rmatvec(coef)
A:sklearn.linear_model.ridge.y_column->scipy.sparse.linalg.aslinearoperator(X).rmatvec(y_column)
A:sklearn.linear_model.ridge.(coefs[i], info)->scipy.sparse.linalg.cg(C, y_column, maxiter=max_iter, tol=tol)
A:sklearn.linear_model.ridge.sqrt_alpha->numpy.sqrt(alpha)
A:sklearn.linear_model.ridge.sample_weight_matrix->scipy.sparse.dia_matrix((sample_weight, 0), shape=(n_samples, n_samples))
A:sklearn.linear_model.ridge.weighted_X->safe_sparse_dot(sample_weight_matrix, X)
A:sklearn.linear_model.ridge.A->safe_sparse_dot(X.T, X, dense_output=True)
A:sklearn.linear_model.ridge.Xy->safe_sparse_dot(X.T, y, dense_output=True)
A:sklearn.linear_model.ridge.one_alpha->numpy.array_equal(alpha, len(alpha) * [alpha[0]])
A:sklearn.linear_model.ridge.coef[:]->scipy.linalg.solve(A, target, sym_pos=True, overwrite_a=False).ravel()
A:sklearn.linear_model.ridge.sw->numpy.sqrt(np.atleast_1d(sample_weight))
A:sklearn.linear_model.ridge.dual_coef->_solve_cholesky_kernel(K, y, alpha, sample_weight)
A:sklearn.linear_model.ridge.dual_coefs->numpy.empty([n_targets, n_samples])
A:sklearn.linear_model.ridge.dual_coef[:]->scipy.linalg.solve(K, target, sym_pos=True, overwrite_a=False).ravel()
A:sklearn.linear_model.ridge.(U, s, Vt)->scipy.linalg.svd(X, full_matrices=False)
A:sklearn.linear_model.ridge.UTy->numpy.dot(U.T, y)
A:sklearn.linear_model.ridge.d->numpy.zeros((s.size, alpha.size))
A:sklearn.linear_model.ridge.y->column_or_1d(y, warn=True)
A:sklearn.linear_model.ridge.solver->_deprecate_dense_cholesky(self.solver)
A:sklearn.linear_model.ridge.alpha->numpy.repeat(alpha, n_targets)
A:sklearn.linear_model.ridge.coef->coef.ravel().ravel()
A:sklearn.linear_model.ridge.K->safe_sparse_dot(X, X.T, dense_output=True)
A:sklearn.linear_model.ridge.X->safe_asarray(X, dtype=np.float)
A:sklearn.linear_model.ridge.(X, y, X_mean, y_mean, X_std)->base.LinearModel._center_data(X, y, self.fit_intercept, self.normalize, self.copy_X, sample_weight=sample_weight)
A:sklearn.linear_model.ridge.self.coef_->safe_sparse_dot(self.dual_coef_.T, X)
A:sklearn.linear_model.ridge.self._label_binarizer->LabelBinarizer(pos_label=1, neg_label=-1)
A:sklearn.linear_model.ridge.Y->self._label_binarizer.fit_transform(y)
A:sklearn.linear_model.ridge.cw->compute_class_weight(class_weight, self.classes_, Y)
A:sklearn.linear_model.ridge.self.alphas->numpy.asarray(alphas)
A:sklearn.linear_model.ridge.(v, Q)->scipy.linalg.eigh(K)
A:sklearn.linear_model.ridge.QT_y->numpy.dot(Q.T, y)
A:sklearn.linear_model.ridge.c->numpy.dot(Q, self._diag_dot(w, QT_y))
A:sklearn.linear_model.ridge.G_diag->self._decomp_diag(w, Q)
A:sklearn.linear_model.ridge.(U, s, _)->scipy.linalg.svd(X, full_matrices=0)
A:sklearn.linear_model.ridge.UT_y->numpy.dot(U.T, y)
A:sklearn.linear_model.ridge.with_sw->len(np.shape(sample_weight))
A:sklearn.linear_model.ridge.(v, Q, QT_y)->_pre_compute(X, y)
A:sklearn.linear_model.ridge.cv_values->numpy.zeros((n_samples * n_y, len(self.alphas)))
A:sklearn.linear_model.ridge.scorer->check_scoring(self, scoring=self.scoring, allow_none=True, loss_func=self.loss_func, score_func=self.score_func, score_overrides_loss=True)
A:sklearn.linear_model.ridge.(out, c)->_values(weighted_alpha, y, v, Q, QT_y)
A:sklearn.linear_model.ridge.cv_values[:, i]->out.ravel()
A:sklearn.linear_model.ridge.best->numpy.argmax(out)
A:sklearn.linear_model.ridge.self.cv_values_->numpy.zeros((n_samples * n_y, len(self.alphas))).reshape(cv_values_shape)
A:sklearn.linear_model.ridge.estimator->_RidgeGCV(self.alphas, fit_intercept=self.fit_intercept, normalize=self.normalize, scoring=self.scoring, score_func=self.score_func, loss_func=self.loss_func, gcv_mode=self.gcv_mode, store_cv_values=self.store_cv_values)
A:sklearn.linear_model.ridge.gs->GridSearchCV(Ridge(fit_intercept=self.fit_intercept), parameters, fit_params=fit_params, cv=self.cv)
sklearn.linear_model.Ridge(self,alpha=1.0,fit_intercept=True,normalize=False,copy_X=True,max_iter=None,tol=0.001,solver='auto')
sklearn.linear_model.Ridge.fit(self,X,y,sample_weight=None)
sklearn.linear_model.RidgeCV(_BaseRidgeCV,RegressorMixin)
sklearn.linear_model.RidgeClassifier(self,alpha=1.0,fit_intercept=True,normalize=False,copy_X=True,max_iter=None,tol=0.001,class_weight=None,solver='auto')
sklearn.linear_model.RidgeClassifier.classes_(self)
sklearn.linear_model.RidgeClassifier.fit(self,X,y)
sklearn.linear_model.RidgeClassifierCV(self,alphas=np.array([0.1,1.0,10.0]),fit_intercept=True,normalize=False,scoring=None,score_func=None,loss_func=None,cv=None,class_weight=None)
sklearn.linear_model.RidgeClassifierCV.classes_(self)
sklearn.linear_model.RidgeClassifierCV.fit(self,X,y,sample_weight=None,class_weight=None)
sklearn.linear_model.ridge.Ridge(self,alpha=1.0,fit_intercept=True,normalize=False,copy_X=True,max_iter=None,tol=0.001,solver='auto')
sklearn.linear_model.ridge.Ridge.__init__(self,alpha=1.0,fit_intercept=True,normalize=False,copy_X=True,max_iter=None,tol=0.001,solver='auto')
sklearn.linear_model.ridge.Ridge.fit(self,X,y,sample_weight=None)
sklearn.linear_model.ridge.RidgeCV(_BaseRidgeCV,RegressorMixin)
sklearn.linear_model.ridge.RidgeClassifier(self,alpha=1.0,fit_intercept=True,normalize=False,copy_X=True,max_iter=None,tol=0.001,class_weight=None,solver='auto')
sklearn.linear_model.ridge.RidgeClassifier.__init__(self,alpha=1.0,fit_intercept=True,normalize=False,copy_X=True,max_iter=None,tol=0.001,class_weight=None,solver='auto')
sklearn.linear_model.ridge.RidgeClassifier.classes_(self)
sklearn.linear_model.ridge.RidgeClassifier.fit(self,X,y)
sklearn.linear_model.ridge.RidgeClassifierCV(self,alphas=np.array([0.1,1.0,10.0]),fit_intercept=True,normalize=False,scoring=None,score_func=None,loss_func=None,cv=None,class_weight=None)
sklearn.linear_model.ridge.RidgeClassifierCV.__init__(self,alphas=np.array([0.1,1.0,10.0]),fit_intercept=True,normalize=False,scoring=None,score_func=None,loss_func=None,cv=None,class_weight=None)
sklearn.linear_model.ridge.RidgeClassifierCV.classes_(self)
sklearn.linear_model.ridge.RidgeClassifierCV.fit(self,X,y,sample_weight=None,class_weight=None)
sklearn.linear_model.ridge._BaseRidge(self,alpha=1.0,fit_intercept=True,normalize=False,copy_X=True,max_iter=None,tol=0.001,solver='auto')
sklearn.linear_model.ridge._BaseRidge.__init__(self,alpha=1.0,fit_intercept=True,normalize=False,copy_X=True,max_iter=None,tol=0.001,solver='auto')
sklearn.linear_model.ridge._BaseRidge.fit(self,X,y,sample_weight=None)
sklearn.linear_model.ridge._BaseRidgeCV(self,alphas=np.array([0.1,1.0,10.0]),fit_intercept=True,normalize=False,scoring=None,score_func=None,loss_func=None,cv=None,gcv_mode=None,store_cv_values=False)
sklearn.linear_model.ridge._BaseRidgeCV.__init__(self,alphas=np.array([0.1,1.0,10.0]),fit_intercept=True,normalize=False,scoring=None,score_func=None,loss_func=None,cv=None,gcv_mode=None,store_cv_values=False)
sklearn.linear_model.ridge._BaseRidgeCV.fit(self,X,y,sample_weight=None)
sklearn.linear_model.ridge._RidgeGCV(self,alphas=[0.1,1.0,10.0],fit_intercept=True,normalize=False,scoring=None,score_func=None,loss_func=None,copy_X=True,gcv_mode=None,store_cv_values=False)
sklearn.linear_model.ridge._RidgeGCV.__init__(self,alphas=[0.1,1.0,10.0],fit_intercept=True,normalize=False,scoring=None,score_func=None,loss_func=None,copy_X=True,gcv_mode=None,store_cv_values=False)
sklearn.linear_model.ridge._RidgeGCV._decomp_diag(self,v_prime,Q)
sklearn.linear_model.ridge._RidgeGCV._diag_dot(self,D,B)
sklearn.linear_model.ridge._RidgeGCV._errors(self,alpha,y,v,Q,QT_y)
sklearn.linear_model.ridge._RidgeGCV._errors_svd(self,alpha,y,v,U,UT_y)
sklearn.linear_model.ridge._RidgeGCV._pre_compute(self,X,y)
sklearn.linear_model.ridge._RidgeGCV._pre_compute_svd(self,X,y)
sklearn.linear_model.ridge._RidgeGCV._values(self,alpha,y,v,Q,QT_y)
sklearn.linear_model.ridge._RidgeGCV._values_svd(self,alpha,y,v,U,UT_y)
sklearn.linear_model.ridge._RidgeGCV.fit(self,X,y,sample_weight=None)
sklearn.linear_model.ridge._deprecate_dense_cholesky(solver)
sklearn.linear_model.ridge._solve_cholesky(X,y,alpha,sample_weight=None)
sklearn.linear_model.ridge._solve_cholesky_kernel(K,y,alpha,sample_weight=None)
sklearn.linear_model.ridge._solve_lsqr(X,y,alpha,max_iter=None,tol=0.001)
sklearn.linear_model.ridge._solve_sparse_cg(X,y,alpha,max_iter=None,tol=0.001)
sklearn.linear_model.ridge._solve_svd(X,y,alpha)
sklearn.linear_model.ridge.ridge_regression(X,y,alpha,sample_weight=None,solver='auto',max_iter=None,tol=0.001)
sklearn.linear_model.ridge_regression(X,y,alpha,sample_weight=None,solver='auto',max_iter=None,tol=0.001)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/base.py----------------------------------------
A:sklearn.linear_model.base.X->safe_asarray(X)
A:sklearn.linear_model.base.(X_mean, X_var)->mean_variance_axis0(X)
A:sklearn.linear_model.base.X_std->numpy.ones(X.shape[1])
A:sklearn.linear_model.base.y_mean->numpy.average(y, axis=0, weights=sample_weight)
A:sklearn.linear_model.base.X_mean->numpy.zeros(X.shape[1])
A:sklearn.linear_model.base._center_data->staticmethod(center_data)
A:sklearn.linear_model.base.scores->self.decision_function(X)
A:sklearn.linear_model.base.indices->self.decision_function(X).argmax(axis=1)
A:sklearn.linear_model.base.prob->self.decision_function(X)
A:sklearn.linear_model.base.self.coef_->numpy.ravel(self.coef_)
A:sklearn.linear_model.base.y->numpy.asarray(y)
A:sklearn.linear_model.base.(X, y, X_mean, y_mean, X_std)->center_data(X, y, fit_intercept, normalize, copy=copy)
A:sklearn.linear_model.base.out->lsqr(X, y)
A:sklearn.linear_model.base.outs->Parallel(n_jobs=n_jobs)((delayed(lsqr)(X, y[:, j].ravel()) for j in range(y.shape[1])))
A:sklearn.linear_model.base.self.residues_->numpy.vstack((out[3] for out in outs))
A:sklearn.linear_model.base.(self.coef_, self.residues_, self.rank_, self.singular_)->scipy.linalg.lstsq(X, y)
A:sklearn.linear_model.base.precompute->numpy.dot(X.T, X)
A:sklearn.linear_model.base.Xy->numpy.dot(X.T, y)
sklearn.linear_model.LinearRegression(self,fit_intercept=True,normalize=False,copy_X=True)
sklearn.linear_model.LinearRegression.fit(self,X,y,n_jobs=1)
sklearn.linear_model.base.LinearClassifierMixin(ClassifierMixin)
sklearn.linear_model.base.LinearClassifierMixin._predict_proba_lr(self,X)
sklearn.linear_model.base.LinearClassifierMixin.decision_function(self,X)
sklearn.linear_model.base.LinearClassifierMixin.predict(self,X)
sklearn.linear_model.base.LinearModel(six.with_metaclass(ABCMeta,BaseEstimator))
sklearn.linear_model.base.LinearModel._set_intercept(self,X_mean,y_mean,X_std)
sklearn.linear_model.base.LinearModel.decision_function(self,X)
sklearn.linear_model.base.LinearModel.fit(self,X,y)
sklearn.linear_model.base.LinearModel.predict(self,X)
sklearn.linear_model.base.LinearRegression(self,fit_intercept=True,normalize=False,copy_X=True)
sklearn.linear_model.base.LinearRegression.__init__(self,fit_intercept=True,normalize=False,copy_X=True)
sklearn.linear_model.base.LinearRegression.fit(self,X,y,n_jobs=1)
sklearn.linear_model.base.SparseCoefMixin(object)
sklearn.linear_model.base.SparseCoefMixin.densify(self)
sklearn.linear_model.base.SparseCoefMixin.sparsify(self)
sklearn.linear_model.base._pre_fit(X,y,Xy,precompute,normalize,fit_intercept,copy)
sklearn.linear_model.base.center_data(X,y,fit_intercept,normalize=False,copy=True,sample_weight=None)
sklearn.linear_model.base.sparse_center_data(X,y,fit_intercept,normalize=False)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/bayes.py----------------------------------------
A:sklearn.linear_model.bayes.(X, y)->check_arrays(X, y, sparse_format='dense', dtype=np.float)
A:sklearn.linear_model.bayes.(X, y, X_mean, y_mean, X_std)->self._center_data(X, y, self.fit_intercept, self.normalize, self.copy_X)
A:sklearn.linear_model.bayes.self.scores_->list()
A:sklearn.linear_model.bayes.XT_y->numpy.dot(X.T, y)
A:sklearn.linear_model.bayes.(U, S, Vh)->scipy.linalg.svd(X, full_matrices=False)
A:sklearn.linear_model.bayes.coef_->numpy.zeros(n_features)
A:sklearn.linear_model.bayes.rmse_->numpy.sum((y - np.dot(X, coef_)) ** 2)
A:sklearn.linear_model.bayes.gamma_->numpy.sum(alpha_ * eigen_vals_ / (lambda_ + alpha_ * eigen_vals_))
A:sklearn.linear_model.bayes.coef_old_->numpy.copy(coef_)
A:sklearn.linear_model.bayes.keep_lambda->numpy.ones(n_features, dtype=bool)
A:sklearn.linear_model.bayes.lambda_->numpy.ones(n_features)
A:sklearn.linear_model.bayes.sigma_->numpy.dot(sigma_, X[:, keep_lambda] * np.reshape(1.0 / lambda_[keep_lambda], [1, -1]))
A:sklearn.linear_model.bayes.s->(lambda_1 * np.log(lambda_) - lambda_2 * lambda_).sum()
sklearn.linear_model.ARDRegression(self,n_iter=300,tol=0.001,alpha_1=1e-06,alpha_2=1e-06,lambda_1=1e-06,lambda_2=1e-06,compute_score=False,threshold_lambda=10000.0,fit_intercept=True,normalize=False,copy_X=True,verbose=False)
sklearn.linear_model.ARDRegression.fit(self,X,y)
sklearn.linear_model.BayesianRidge(self,n_iter=300,tol=0.001,alpha_1=1e-06,alpha_2=1e-06,lambda_1=1e-06,lambda_2=1e-06,compute_score=False,fit_intercept=True,normalize=False,copy_X=True,verbose=False)
sklearn.linear_model.BayesianRidge.fit(self,X,y)
sklearn.linear_model.bayes.ARDRegression(self,n_iter=300,tol=0.001,alpha_1=1e-06,alpha_2=1e-06,lambda_1=1e-06,lambda_2=1e-06,compute_score=False,threshold_lambda=10000.0,fit_intercept=True,normalize=False,copy_X=True,verbose=False)
sklearn.linear_model.bayes.ARDRegression.__init__(self,n_iter=300,tol=0.001,alpha_1=1e-06,alpha_2=1e-06,lambda_1=1e-06,lambda_2=1e-06,compute_score=False,threshold_lambda=10000.0,fit_intercept=True,normalize=False,copy_X=True,verbose=False)
sklearn.linear_model.bayes.ARDRegression.fit(self,X,y)
sklearn.linear_model.bayes.BayesianRidge(self,n_iter=300,tol=0.001,alpha_1=1e-06,alpha_2=1e-06,lambda_1=1e-06,lambda_2=1e-06,compute_score=False,fit_intercept=True,normalize=False,copy_X=True,verbose=False)
sklearn.linear_model.bayes.BayesianRidge.__init__(self,n_iter=300,tol=0.001,alpha_1=1e-06,alpha_2=1e-06,lambda_1=1e-06,lambda_2=1e-06,compute_score=False,fit_intercept=True,normalize=False,copy_X=True,verbose=False)
sklearn.linear_model.bayes.BayesianRidge.fit(self,X,y)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/omp.py----------------------------------------
A:sklearn.linear_model.omp.X->array2d(X)
A:sklearn.linear_model.omp.(nrm2, swap)->scipy.linalg.get_blas_funcs(('nrm2', 'swap'), (Gram,))
A:sklearn.linear_model.omp.(potrs,)->get_lapack_funcs(('potrs',), (Gram,))
A:sklearn.linear_model.omp.alpha->numpy.dot(X.T, y)
A:sklearn.linear_model.omp.gamma->numpy.empty(0)
A:sklearn.linear_model.omp.indices->numpy.arange(len(Gram))
A:sklearn.linear_model.omp.L->numpy.empty((max_features, max_features), dtype=Gram.dtype)
A:sklearn.linear_model.omp.coefs->orthogonal_mp(X_train, y_train, n_nonzero_coefs=max_iter, tol=None, precompute=False, copy_X=False, return_path=True)
A:sklearn.linear_model.omp.lam->numpy.argmax(np.abs(alpha))
A:sklearn.linear_model.omp.L[n_active, :n_active]->numpy.dot(X[:, :n_active].T, X[:, lam])
A:sklearn.linear_model.omp.L[n_active, n_active]->numpy.sqrt(1 - v)
A:sklearn.linear_model.omp.(X.T[n_active], X.T[lam])->swap(X.T[n_active], X.T[lam])
A:sklearn.linear_model.omp.(gamma, _)->potrs(L[:n_active, :n_active], Xy[:n_active], lower=True, overwrite_b=False)
A:sklearn.linear_model.omp.Xy->Xy.copy().copy()
A:sklearn.linear_model.omp.(Gram[n_active], Gram[lam])->swap(Gram[n_active], Gram[lam])
A:sklearn.linear_model.omp.(Gram.T[n_active], Gram.T[lam])->swap(Gram.T[n_active], Gram.T[lam])
A:sklearn.linear_model.omp.beta->numpy.dot(Gram[:, :n_active], gamma)
A:sklearn.linear_model.omp.delta->numpy.inner(gamma, beta[:n_active])
A:sklearn.linear_model.omp.y->numpy.asarray(y)
A:sklearn.linear_model.omp.n_nonzero_coefs->int(0.1 * len(Gram))
A:sklearn.linear_model.omp.G->numpy.asfortranarray(G)
A:sklearn.linear_model.omp.norms_squared->numpy.sum(y ** 2, axis=0)
A:sklearn.linear_model.omp.coef->numpy.zeros((len(Gram), Xy.shape[1]))
A:sklearn.linear_model.omp.out->_gram_omp(Gram, Xy[:, k], n_nonzero_coefs, norms_squared[k] if tol is not None else None, tol, copy_Gram=copy_Gram, copy_Xy=copy_Xy, return_path=return_path)
A:sklearn.linear_model.omp.Gram->array2d(Gram, order='F', copy=copy_Gram)
A:sklearn.linear_model.omp.(X, y, X_mean, y_mean, X_std, Gram, Xy)->_pre_fit(X, y, Xy, precompute, self.normalize, self.fit_intercept, copy=copy_X)
A:sklearn.linear_model.omp.self.n_nonzero_coefs_->max(int(0.1 * n_features), 1)
A:sklearn.linear_model.omp.X_train->X_train.copy().copy()
A:sklearn.linear_model.omp.y_train->as_float_array(y_train, copy=False)
A:sklearn.linear_model.omp.X_test->X_test.copy().copy()
A:sklearn.linear_model.omp.y_test->as_float_array(y_test, copy=False)
A:sklearn.linear_model.omp.X_mean->X_train.copy().copy().mean(axis=0)
A:sklearn.linear_model.omp.y_mean->as_float_array(y_train, copy=False).mean(axis=0)
A:sklearn.linear_model.omp.norms->numpy.sqrt(np.sum(X_train ** 2, axis=0))
A:sklearn.linear_model.omp.nonzeros->numpy.flatnonzero(norms)
A:sklearn.linear_model.omp.(X, y)->check_arrays(X, y)
A:sklearn.linear_model.omp.cv->check_cv(self.cv, X, y, classifier=False)
A:sklearn.linear_model.omp.cv_paths->Parallel(n_jobs=self.n_jobs, verbose=self.verbose)((delayed(_omp_path_residues)(X[train], y[train], X[test], y[test], self.copy, self.fit_intercept, self.normalize, max_iter) for (train, test) in cv))
A:sklearn.linear_model.omp.min_early_stop->min((fold.shape[0] for fold in cv_paths))
A:sklearn.linear_model.omp.mse_folds->numpy.array([(fold[:min_early_stop] ** 2).mean(axis=1) for fold in cv_paths])
A:sklearn.linear_model.omp.omp->OrthogonalMatchingPursuit(n_nonzero_coefs=best_n_nonzero_coefs, copy_X=None, fit_intercept=self.fit_intercept, normalize=self.normalize)
sklearn.linear_model.OrthogonalMatchingPursuit(self,copy_X=None,copy_Gram=None,copy_Xy=None,n_nonzero_coefs=None,tol=None,fit_intercept=True,normalize=True,precompute='auto',precompute_gram=None)
sklearn.linear_model.OrthogonalMatchingPursuit.fit(self,X,y,Gram=None,Xy=None)
sklearn.linear_model.OrthogonalMatchingPursuitCV(self,copy=True,fit_intercept=True,normalize=True,max_iter=None,cv=None,n_jobs=1,verbose=False)
sklearn.linear_model.OrthogonalMatchingPursuitCV.fit(self,X,y)
sklearn.linear_model.omp.OrthogonalMatchingPursuit(self,copy_X=None,copy_Gram=None,copy_Xy=None,n_nonzero_coefs=None,tol=None,fit_intercept=True,normalize=True,precompute='auto',precompute_gram=None)
sklearn.linear_model.omp.OrthogonalMatchingPursuit.__init__(self,copy_X=None,copy_Gram=None,copy_Xy=None,n_nonzero_coefs=None,tol=None,fit_intercept=True,normalize=True,precompute='auto',precompute_gram=None)
sklearn.linear_model.omp.OrthogonalMatchingPursuit.fit(self,X,y,Gram=None,Xy=None)
sklearn.linear_model.omp.OrthogonalMatchingPursuitCV(self,copy=True,fit_intercept=True,normalize=True,max_iter=None,cv=None,n_jobs=1,verbose=False)
sklearn.linear_model.omp.OrthogonalMatchingPursuitCV.__init__(self,copy=True,fit_intercept=True,normalize=True,max_iter=None,cv=None,n_jobs=1,verbose=False)
sklearn.linear_model.omp.OrthogonalMatchingPursuitCV.fit(self,X,y)
sklearn.linear_model.omp._cholesky_omp(X,y,n_nonzero_coefs,tol=None,copy_X=True,return_path=False)
sklearn.linear_model.omp._gram_omp(Gram,Xy,n_nonzero_coefs,tol_0=None,tol=None,copy_Gram=True,copy_Xy=True,return_path=False)
sklearn.linear_model.omp._omp_path_residues(X_train,y_train,X_test,y_test,copy=True,fit_intercept=True,normalize=True,max_iter=100)
sklearn.linear_model.omp.orthogonal_mp(X,y,n_nonzero_coefs=None,tol=None,precompute=False,copy_X=True,return_path=False,precompute_gram=None)
sklearn.linear_model.omp.orthogonal_mp_gram(Gram,Xy,n_nonzero_coefs=None,tol=None,norms_squared=None,copy_Gram=True,copy_Xy=True,return_path=False)
sklearn.linear_model.orthogonal_mp(X,y,n_nonzero_coefs=None,tol=None,precompute=False,copy_X=True,return_path=False,precompute_gram=None)
sklearn.linear_model.orthogonal_mp_gram(Gram,Xy,n_nonzero_coefs=None,tol=None,norms_squared=None,copy_Gram=True,copy_Xy=True,return_path=False)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/setup.py----------------------------------------
A:sklearn.linear_model.setup.config->Configuration('linear_model', parent_package, top_path)
A:sklearn.linear_model.setup.(cblas_libs, blas_info)->get_blas_info()
sklearn.linear_model.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/ransac.py----------------------------------------
A:sklearn.linear_model.ransac._EPSILON->numpy.spacing(1)
A:sklearn.linear_model.ransac.nom->max(_EPSILON, 1 - probability)
A:sklearn.linear_model.ransac.denom->max(_EPSILON, 1 - inlier_ratio ** min_samples)
A:sklearn.linear_model.ransac.base_estimator->LinearRegression()
A:sklearn.linear_model.ransac.min_samples->numpy.ceil(self.min_samples * X.shape[0])
A:sklearn.linear_model.ransac.residual_threshold->numpy.median(np.abs(y - np.median(y)))
A:sklearn.linear_model.ransac.random_state->check_random_state(self.random_state)
A:sklearn.linear_model.ransac.sample_idxs->numpy.arange(n_samples)
A:sklearn.linear_model.ransac.X->atleast2d_or_csr(X)
A:sklearn.linear_model.ransac.y->numpy.asarray(y)
A:sklearn.linear_model.ransac.subset_idxs->sample_without_replacement(n_samples, min_samples, random_state=random_state)
A:sklearn.linear_model.ransac.y_pred->LinearRegression().predict(X)
A:sklearn.linear_model.ransac.residuals_subset->residual_metric(y_pred - y)
A:sklearn.linear_model.ransac.n_inliers_subset->numpy.sum(inlier_mask_subset)
A:sklearn.linear_model.ransac.score_subset->LinearRegression().score(X_inlier_subset, y_inlier_subset)
sklearn.linear_model.RANSACRegressor(self,base_estimator=None,min_samples=None,residual_threshold=None,is_data_valid=None,is_model_valid=None,max_trials=100,stop_n_inliers=np.inf,stop_score=np.inf,stop_probability=0.99,residual_metric=None,random_state=None)
sklearn.linear_model.RANSACRegressor.fit(self,X,y)
sklearn.linear_model.RANSACRegressor.predict(self,X)
sklearn.linear_model.RANSACRegressor.score(self,X,y)
sklearn.linear_model.ransac.RANSACRegressor(self,base_estimator=None,min_samples=None,residual_threshold=None,is_data_valid=None,is_model_valid=None,max_trials=100,stop_n_inliers=np.inf,stop_score=np.inf,stop_probability=0.99,residual_metric=None,random_state=None)
sklearn.linear_model.ransac.RANSACRegressor.__init__(self,base_estimator=None,min_samples=None,residual_threshold=None,is_data_valid=None,is_model_valid=None,max_trials=100,stop_n_inliers=np.inf,stop_score=np.inf,stop_probability=0.99,residual_metric=None,random_state=None)
sklearn.linear_model.ransac.RANSACRegressor.fit(self,X,y)
sklearn.linear_model.ransac.RANSACRegressor.predict(self,X)
sklearn.linear_model.ransac.RANSACRegressor.score(self,X,y)
sklearn.linear_model.ransac._dynamic_max_trials(n_inliers,n_samples,min_samples,probability)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/stochastic_gradient.py----------------------------------------
A:sklearn.linear_model.stochastic_gradient.typw->numpy.sqrt(1.0 / np.sqrt(self.alpha))
A:sklearn.linear_model.stochastic_gradient.penalty->str(penalty).lower()
A:sklearn.linear_model.stochastic_gradient.sample_weight->self._validate_sample_weight(sample_weight, n_samples)
A:sklearn.linear_model.stochastic_gradient.coef_init->coef_init.ravel().ravel()
A:sklearn.linear_model.stochastic_gradient.self.coef_->est.coef_.ravel().reshape(1, -1)
A:sklearn.linear_model.stochastic_gradient.intercept_init->numpy.asarray(intercept_init, dtype=np.float64)
A:sklearn.linear_model.stochastic_gradient.self.intercept_->numpy.atleast_1d(intercept)
A:sklearn.linear_model.stochastic_gradient.dataset->ArrayDataset(X, y_i, sample_weight)
A:sklearn.linear_model.stochastic_gradient.y_i->numpy.ones(y.shape, dtype=np.float64, order='C')
A:sklearn.linear_model.stochastic_gradient.coef->est.coef_.ravel()
A:sklearn.linear_model.stochastic_gradient.(y_i, coef, intercept)->_prepare_fit_binary(est, y, i)
A:sklearn.linear_model.stochastic_gradient.(dataset, intercept_decay)->_make_dataset(X, y, sample_weight)
A:sklearn.linear_model.stochastic_gradient.penalty_type->self._get_penalty_type(self.penalty)
A:sklearn.linear_model.stochastic_gradient.learning_rate_type->self._get_learning_rate_type(learning_rate)
A:sklearn.linear_model.stochastic_gradient.random_state->check_random_state(self.random_state)
A:sklearn.linear_model.stochastic_gradient.seed->check_random_state(self.random_state).randint(0, np.iinfo(np.int32).max)
A:sklearn.linear_model.stochastic_gradient.self.n_jobs->int(n_jobs)
A:sklearn.linear_model.stochastic_gradient.X->atleast2d_or_csr(X)
A:sklearn.linear_model.stochastic_gradient.y->column_or_1d(y, warn=True)
A:sklearn.linear_model.stochastic_gradient.self._expanded_class_weight->compute_class_weight(self.class_weight, self.classes_, y)
A:sklearn.linear_model.stochastic_gradient.self.loss_function->self._get_loss_function(loss)
A:sklearn.linear_model.stochastic_gradient.(y,)->check_arrays(y)
A:sklearn.linear_model.stochastic_gradient.classes->numpy.unique(y)
A:sklearn.linear_model.stochastic_gradient.(coef, intercept)->fit_binary(self, 1, X, y, alpha, C, learning_rate, n_iter, self._expanded_class_weight[1], self._expanded_class_weight[0], sample_weight)
A:sklearn.linear_model.stochastic_gradient.result->Parallel(n_jobs=self.n_jobs, backend='threading', verbose=self.verbose)((delayed(fit_binary)(self, i, X, y, alpha, C, learning_rate, n_iter, self._expanded_class_weight[i], 1.0, sample_weight) for i in range(len(self.classes_))))
A:sklearn.linear_model.stochastic_gradient.scores->self.decision_function(X)
A:sklearn.linear_model.stochastic_gradient.prob2->numpy.ones((scores.shape[0], 2))
A:sklearn.linear_model.stochastic_gradient.prob_sum->prob.sum(axis=1)
A:sklearn.linear_model.stochastic_gradient.prob_sum[all_zero]->len(self.classes_)
A:sklearn.linear_model.stochastic_gradient.(X, y)->check_arrays(X, y, sparse_format='csr', copy=False, check_ccontiguous=True, dtype=np.float64)
A:sklearn.linear_model.stochastic_gradient.loss_function->self._get_loss_function(loss)
A:sklearn.linear_model.stochastic_gradient.(self.coef_, intercept)->plain_sgd(self.coef_, self.intercept_[0], loss_function, penalty_type, alpha, C, self.l1_ratio, dataset, n_iter, int(self.fit_intercept), int(self.verbose), int(self.shuffle), seed, 1.0, 1.0, learning_rate_type, self.eta0, self.power_t, self.t_, intercept_decay)
sklearn.linear_model.SGDClassifier(self,loss='hinge',penalty='l2',alpha=0.0001,l1_ratio=0.15,fit_intercept=True,n_iter=5,shuffle=False,verbose=0,epsilon=DEFAULT_EPSILON,n_jobs=1,random_state=None,learning_rate='optimal',eta0=0.0,power_t=0.5,class_weight=None,warm_start=False)
sklearn.linear_model.SGDClassifier._check_proba(self)
sklearn.linear_model.SGDClassifier._predict_log_proba(self,X)
sklearn.linear_model.SGDClassifier._predict_proba(self,X)
sklearn.linear_model.SGDClassifier.predict_log_proba(self)
sklearn.linear_model.SGDClassifier.predict_proba(self)
sklearn.linear_model.SGDRegressor(self,loss='squared_loss',penalty='l2',alpha=0.0001,l1_ratio=0.15,fit_intercept=True,n_iter=5,shuffle=False,verbose=0,epsilon=DEFAULT_EPSILON,random_state=None,learning_rate='invscaling',eta0=0.01,power_t=0.25,warm_start=False)
sklearn.linear_model.stochastic_gradient.BaseSGD(self,loss,penalty='l2',alpha=0.0001,C=1.0,l1_ratio=0.15,fit_intercept=True,n_iter=5,shuffle=False,verbose=0,epsilon=0.1,random_state=None,learning_rate='optimal',eta0=0.0,power_t=0.5,warm_start=False)
sklearn.linear_model.stochastic_gradient.BaseSGD.__init__(self,loss,penalty='l2',alpha=0.0001,C=1.0,l1_ratio=0.15,fit_intercept=True,n_iter=5,shuffle=False,verbose=0,epsilon=0.1,random_state=None,learning_rate='optimal',eta0=0.0,power_t=0.5,warm_start=False)
sklearn.linear_model.stochastic_gradient.BaseSGD._allocate_parameter_mem(self,n_classes,n_features,coef_init=None,intercept_init=None)
sklearn.linear_model.stochastic_gradient.BaseSGD._get_learning_rate_type(self,learning_rate)
sklearn.linear_model.stochastic_gradient.BaseSGD._get_loss_function(self,loss)
sklearn.linear_model.stochastic_gradient.BaseSGD._get_penalty_type(self,penalty)
sklearn.linear_model.stochastic_gradient.BaseSGD._init_t(self,loss_function)
sklearn.linear_model.stochastic_gradient.BaseSGD._validate_params(self)
sklearn.linear_model.stochastic_gradient.BaseSGD._validate_sample_weight(self,sample_weight,n_samples)
sklearn.linear_model.stochastic_gradient.BaseSGD.fit(self,X,y)
sklearn.linear_model.stochastic_gradient.BaseSGD.set_params(self,*args,**kwargs)
sklearn.linear_model.stochastic_gradient.BaseSGDClassifier(self,loss='hinge',penalty='l2',alpha=0.0001,l1_ratio=0.15,fit_intercept=True,n_iter=5,shuffle=False,verbose=0,epsilon=DEFAULT_EPSILON,n_jobs=1,random_state=None,learning_rate='optimal',eta0=0.0,power_t=0.5,class_weight=None,warm_start=False)
sklearn.linear_model.stochastic_gradient.BaseSGDClassifier.__init__(self,loss='hinge',penalty='l2',alpha=0.0001,l1_ratio=0.15,fit_intercept=True,n_iter=5,shuffle=False,verbose=0,epsilon=DEFAULT_EPSILON,n_jobs=1,random_state=None,learning_rate='optimal',eta0=0.0,power_t=0.5,class_weight=None,warm_start=False)
sklearn.linear_model.stochastic_gradient.BaseSGDClassifier._fit(self,X,y,alpha,C,loss,learning_rate,coef_init=None,intercept_init=None,sample_weight=None)
sklearn.linear_model.stochastic_gradient.BaseSGDClassifier._fit_binary(self,X,y,alpha,C,sample_weight,learning_rate,n_iter)
sklearn.linear_model.stochastic_gradient.BaseSGDClassifier._fit_multiclass(self,X,y,alpha,C,learning_rate,sample_weight,n_iter)
sklearn.linear_model.stochastic_gradient.BaseSGDClassifier._partial_fit(self,X,y,alpha,C,loss,learning_rate,n_iter,classes,sample_weight,coef_init,intercept_init)
sklearn.linear_model.stochastic_gradient.BaseSGDClassifier.fit(self,X,y,coef_init=None,intercept_init=None,class_weight=None,sample_weight=None)
sklearn.linear_model.stochastic_gradient.BaseSGDClassifier.partial_fit(self,X,y,classes=None,sample_weight=None)
sklearn.linear_model.stochastic_gradient.BaseSGDRegressor(self,loss='squared_loss',penalty='l2',alpha=0.0001,l1_ratio=0.15,fit_intercept=True,n_iter=5,shuffle=False,verbose=0,epsilon=DEFAULT_EPSILON,random_state=None,learning_rate='invscaling',eta0=0.01,power_t=0.25,warm_start=False)
sklearn.linear_model.stochastic_gradient.BaseSGDRegressor.__init__(self,loss='squared_loss',penalty='l2',alpha=0.0001,l1_ratio=0.15,fit_intercept=True,n_iter=5,shuffle=False,verbose=0,epsilon=DEFAULT_EPSILON,random_state=None,learning_rate='invscaling',eta0=0.01,power_t=0.25,warm_start=False)
sklearn.linear_model.stochastic_gradient.BaseSGDRegressor._fit(self,X,y,alpha,C,loss,learning_rate,coef_init=None,intercept_init=None,sample_weight=None)
sklearn.linear_model.stochastic_gradient.BaseSGDRegressor._fit_regressor(self,X,y,alpha,C,loss,learning_rate,sample_weight,n_iter)
sklearn.linear_model.stochastic_gradient.BaseSGDRegressor._partial_fit(self,X,y,alpha,C,loss,learning_rate,n_iter,sample_weight,coef_init,intercept_init)
sklearn.linear_model.stochastic_gradient.BaseSGDRegressor.decision_function(self,X)
sklearn.linear_model.stochastic_gradient.BaseSGDRegressor.fit(self,X,y,coef_init=None,intercept_init=None,sample_weight=None)
sklearn.linear_model.stochastic_gradient.BaseSGDRegressor.partial_fit(self,X,y,sample_weight=None)
sklearn.linear_model.stochastic_gradient.BaseSGDRegressor.predict(self,X)
sklearn.linear_model.stochastic_gradient.SGDClassifier(self,loss='hinge',penalty='l2',alpha=0.0001,l1_ratio=0.15,fit_intercept=True,n_iter=5,shuffle=False,verbose=0,epsilon=DEFAULT_EPSILON,n_jobs=1,random_state=None,learning_rate='optimal',eta0=0.0,power_t=0.5,class_weight=None,warm_start=False)
sklearn.linear_model.stochastic_gradient.SGDClassifier.__init__(self,loss='hinge',penalty='l2',alpha=0.0001,l1_ratio=0.15,fit_intercept=True,n_iter=5,shuffle=False,verbose=0,epsilon=DEFAULT_EPSILON,n_jobs=1,random_state=None,learning_rate='optimal',eta0=0.0,power_t=0.5,class_weight=None,warm_start=False)
sklearn.linear_model.stochastic_gradient.SGDClassifier._check_proba(self)
sklearn.linear_model.stochastic_gradient.SGDClassifier._predict_log_proba(self,X)
sklearn.linear_model.stochastic_gradient.SGDClassifier._predict_proba(self,X)
sklearn.linear_model.stochastic_gradient.SGDClassifier.predict_log_proba(self)
sklearn.linear_model.stochastic_gradient.SGDClassifier.predict_proba(self)
sklearn.linear_model.stochastic_gradient.SGDRegressor(self,loss='squared_loss',penalty='l2',alpha=0.0001,l1_ratio=0.15,fit_intercept=True,n_iter=5,shuffle=False,verbose=0,epsilon=DEFAULT_EPSILON,random_state=None,learning_rate='invscaling',eta0=0.01,power_t=0.25,warm_start=False)
sklearn.linear_model.stochastic_gradient.SGDRegressor.__init__(self,loss='squared_loss',penalty='l2',alpha=0.0001,l1_ratio=0.15,fit_intercept=True,n_iter=5,shuffle=False,verbose=0,epsilon=DEFAULT_EPSILON,random_state=None,learning_rate='invscaling',eta0=0.01,power_t=0.25,warm_start=False)
sklearn.linear_model.stochastic_gradient._check_fit_data(X,y)
sklearn.linear_model.stochastic_gradient._make_dataset(X,y_i,sample_weight)
sklearn.linear_model.stochastic_gradient._prepare_fit_binary(est,y,i)
sklearn.linear_model.stochastic_gradient.fit_binary(est,i,X,y,alpha,C,learning_rate,n_iter,pos_weight,neg_weight,sample_weight)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/tests/test_coordinate_descent.py----------------------------------------
A:sklearn.linear_model.tests.test_coordinate_descent.clf->LassoCV(n_alphas=5)
A:sklearn.linear_model.tests.test_coordinate_descent.pred->LassoCV(n_alphas=5).predict(T)
A:sklearn.linear_model.tests.test_coordinate_descent.X->numpy.random.randn(10, 2)
A:sklearn.linear_model.tests.test_coordinate_descent.random_state->numpy.random.RandomState(0)
A:sklearn.linear_model.tests.test_coordinate_descent.w->numpy.random.RandomState(0).randn(n_features)
A:sklearn.linear_model.tests.test_coordinate_descent.y->numpy.random.randn(10, 2)
A:sklearn.linear_model.tests.test_coordinate_descent.X_test->numpy.random.RandomState(0).randn(n_samples, n_features)
A:sklearn.linear_model.tests.test_coordinate_descent.y_test->numpy.dot(X_test, w)
A:sklearn.linear_model.tests.test_coordinate_descent.(X, y, X_test, y_test)->build_dataset()
A:sklearn.linear_model.tests.test_coordinate_descent.lars->LassoLarsCV(normalize=False, max_iter=30).fit(X, y)
A:sklearn.linear_model.tests.test_coordinate_descent.mse_lars->scipy.interpolate.interp1d(lars.cv_alphas_, lars.cv_mse_path_.T)
A:sklearn.linear_model.tests.test_coordinate_descent.clf_unconstrained->LassoCV(n_alphas=3, eps=0.1, max_iter=max_iter, cv=2, n_jobs=1)
A:sklearn.linear_model.tests.test_coordinate_descent.clf_constrained->LassoCV(n_alphas=3, eps=0.1, max_iter=max_iter, positive=True, cv=2, n_jobs=1)
A:sklearn.linear_model.tests.test_coordinate_descent.(alphas_lars, _, coef_path_lars)->lars_path(X, y, method='lasso')
A:sklearn.linear_model.tests.test_coordinate_descent.coef_path_cont_lars->scipy.interpolate.interp1d(alphas_lars[::-1], coef_path_lars[:, ::-1])
A:sklearn.linear_model.tests.test_coordinate_descent.(alphas_lasso2, coef_path_lasso2, _)->lasso_path(X, y, alphas=alphas, fit_intercept=False, return_models=False)
A:sklearn.linear_model.tests.test_coordinate_descent.coef_path_cont_lasso->scipy.interpolate.interp1d(alphas_lasso2[::-1], coef_path_lasso2[:, ::-1])
A:sklearn.linear_model.tests.test_coordinate_descent.(X, y, _, _)->build_dataset()
A:sklearn.linear_model.tests.test_coordinate_descent.clf1->LassoCV(n_alphas=5)
A:sklearn.linear_model.tests.test_coordinate_descent.clf2->ElasticNet(alpha=0.1, max_iter=10)
A:sklearn.linear_model.tests.test_coordinate_descent.lasso->Lasso(alpha=0.1, max_iter=1000, precompute=True, positive=True)
A:sklearn.linear_model.tests.test_coordinate_descent.enet->ElasticNet(alpha=0.1, max_iter=1000, positive=True)
A:sklearn.linear_model.tests.test_coordinate_descent.enetcv_unconstrained->ElasticNetCV(n_alphas=3, eps=0.1, max_iter=max_iter, cv=2, n_jobs=1)
A:sklearn.linear_model.tests.test_coordinate_descent.enetcv_constrained->ElasticNetCV(n_alphas=3, eps=0.1, max_iter=max_iter, cv=2, positive=True, n_jobs=1)
A:sklearn.linear_model.tests.test_coordinate_descent.estimator->ElasticNet(alpha=0.01, fit_intercept=True)
sklearn.linear_model.tests.test_coordinate_descent.build_dataset(n_samples=50,n_features=200,n_informative_features=10,n_targets=1)
sklearn.linear_model.tests.test_coordinate_descent.check_warnings()
sklearn.linear_model.tests.test_coordinate_descent.test_1d_multioutput_enet_and_multitask_enet_cv()
sklearn.linear_model.tests.test_coordinate_descent.test_1d_multioutput_lasso_and_multitask_lasso_cv()
sklearn.linear_model.tests.test_coordinate_descent.test_enet_cv_positive_constraint()
sklearn.linear_model.tests.test_coordinate_descent.test_enet_multitarget()
sklearn.linear_model.tests.test_coordinate_descent.test_enet_path()
sklearn.linear_model.tests.test_coordinate_descent.test_enet_positive_constraint()
sklearn.linear_model.tests.test_coordinate_descent.test_enet_toy()
sklearn.linear_model.tests.test_coordinate_descent.test_lasso_alpha_warning()
sklearn.linear_model.tests.test_coordinate_descent.test_lasso_cv()
sklearn.linear_model.tests.test_coordinate_descent.test_lasso_cv_positive_constraint()
sklearn.linear_model.tests.test_coordinate_descent.test_lasso_path_return_models_vs_new_return_gives_same_coefficients()
sklearn.linear_model.tests.test_coordinate_descent.test_lasso_positive_constraint()
sklearn.linear_model.tests.test_coordinate_descent.test_lasso_toy()
sklearn.linear_model.tests.test_coordinate_descent.test_lasso_zero()
sklearn.linear_model.tests.test_coordinate_descent.test_multi_task_lasso_and_enet()
sklearn.linear_model.tests.test_coordinate_descent.test_multioutput_enetcv_error()
sklearn.linear_model.tests.test_coordinate_descent.test_multitask_enet_and_lasso_cv()
sklearn.linear_model.tests.test_coordinate_descent.test_path_parameters()
sklearn.linear_model.tests.test_coordinate_descent.test_precompute_invalid_argument()
sklearn.linear_model.tests.test_coordinate_descent.test_sparse_input_dtype_enet_and_lassocv()
sklearn.linear_model.tests.test_coordinate_descent.test_warm_start()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/tests/test_perceptron.py----------------------------------------
A:sklearn.linear_model.tests.test_perceptron.iris->load_iris()
A:sklearn.linear_model.tests.test_perceptron.random_state->check_random_state(12)
A:sklearn.linear_model.tests.test_perceptron.indices->numpy.arange(iris.data.shape[0])
A:sklearn.linear_model.tests.test_perceptron.X_csr->scipy.sparse.csr_matrix(X)
A:sklearn.linear_model.tests.test_perceptron.self.w->numpy.zeros(n_features, dtype=np.float64)
A:sklearn.linear_model.tests.test_perceptron.X->numpy.atleast_2d(X)
A:sklearn.linear_model.tests.test_perceptron.clf->Perceptron()
A:sklearn.linear_model.tests.test_perceptron.score->Perceptron().score(data, y)
A:sklearn.linear_model.tests.test_perceptron.y_bin->y.copy()
A:sklearn.linear_model.tests.test_perceptron.clf1->MyPerceptron(n_iter=2)
A:sklearn.linear_model.tests.test_perceptron.clf2->Perceptron(n_iter=2, shuffle=False)
sklearn.linear_model.tests.test_perceptron.MyPerceptron(self,n_iter=1)
sklearn.linear_model.tests.test_perceptron.MyPerceptron.__init__(self,n_iter=1)
sklearn.linear_model.tests.test_perceptron.MyPerceptron.fit(self,X,y)
sklearn.linear_model.tests.test_perceptron.MyPerceptron.predict(self,X)
sklearn.linear_model.tests.test_perceptron.MyPerceptron.project(self,X)
sklearn.linear_model.tests.test_perceptron.test_perceptron_accuracy()
sklearn.linear_model.tests.test_perceptron.test_perceptron_correctness()
sklearn.linear_model.tests.test_perceptron.test_undefined_methods()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/tests/test_logistic.py----------------------------------------
A:sklearn.linear_model.tests.test_logistic.X_sp->scipy.sparse.csr_matrix(X)
A:sklearn.linear_model.tests.test_logistic.iris->sklearn.datasets.load_iris()
A:sklearn.linear_model.tests.test_logistic.n_samples->len(y)
A:sklearn.linear_model.tests.test_logistic.classes->numpy.unique(y)
A:sklearn.linear_model.tests.test_logistic.predicted->sklearn.linear_model.logistic.LogisticRegression(random_state=0).fit(X, y).predict(X)
A:sklearn.linear_model.tests.test_logistic.probabilities->sklearn.linear_model.logistic.LogisticRegression(random_state=0).predict_proba(iris.data)
A:sklearn.linear_model.tests.test_logistic.clf->sklearn.linear_model.logistic.LogisticRegression(random_state=0)
A:sklearn.linear_model.tests.test_logistic.pred->sklearn.linear_model.logistic.LogisticRegression(random_state=0).predict(iris.data)
A:sklearn.linear_model.tests.test_logistic.pred_d_d->sklearn.linear_model.logistic.LogisticRegression(random_state=0).decision_function(iris.data)
A:sklearn.linear_model.tests.test_logistic.pred_s_d->sklearn.linear_model.logistic.LogisticRegression(random_state=0).decision_function(iris.data)
A:sklearn.linear_model.tests.test_logistic.sp_data->scipy.sparse.coo_matrix(iris.data)
A:sklearn.linear_model.tests.test_logistic.pred_s_s->sklearn.linear_model.logistic.LogisticRegression(random_state=0).decision_function(sp_data)
A:sklearn.linear_model.tests.test_logistic.pred_d_s->sklearn.linear_model.logistic.LogisticRegression(random_state=0).decision_function(sp_data)
A:sklearn.linear_model.tests.test_logistic.rng->numpy.random.RandomState(0)
A:sklearn.linear_model.tests.test_logistic.X_->numpy.random.RandomState(0).random_sample((5, 10))
A:sklearn.linear_model.tests.test_logistic.y_->numpy.ones(X_.shape[0])
A:sklearn.linear_model.tests.test_logistic.Xnan->numpy.array(X, dtype=np.float64)
A:sklearn.linear_model.tests.test_logistic.(X, y)->sklearn.datasets.make_classification(n_samples=20)
A:sklearn.linear_model.tests.test_logistic.lr1->sklearn.linear_model.logistic.LogisticRegression(random_state=0)
A:sklearn.linear_model.tests.test_logistic.lr2->sklearn.linear_model.logistic.LogisticRegression(random_state=0)
sklearn.linear_model.tests.test_logistic.check_predictions(clf,X,y)
sklearn.linear_model.tests.test_logistic.test_error()
sklearn.linear_model.tests.test_logistic.test_inconsistent_input()
sklearn.linear_model.tests.test_logistic.test_liblinear_random_state()
sklearn.linear_model.tests.test_logistic.test_nan()
sklearn.linear_model.tests.test_logistic.test_predict_2_classes()
sklearn.linear_model.tests.test_logistic.test_predict_3_classes()
sklearn.linear_model.tests.test_logistic.test_predict_iris()
sklearn.linear_model.tests.test_logistic.test_sparsify()
sklearn.linear_model.tests.test_logistic.test_write_parameters()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/tests/test_base.py----------------------------------------
A:sklearn.linear_model.tests.test_base.clf->LinearRegression(fit_intercept=True)
A:sklearn.linear_model.tests.test_base.X2->numpy.array([[0.38349978, 0.61650022], [0.58853682, 0.41146318]])
A:sklearn.linear_model.tests.test_base.X3->numpy.array([[0.27677969, 0.70693172, 0.01628859], [0.08385139, 0.20692515, 0.70922346]])
A:sklearn.linear_model.tests.test_base.y->check_random_state(0).rand(n_samples)
A:sklearn.linear_model.tests.test_base.lr2_without_intercept->LinearRegression(fit_intercept=False).fit(X2, y)
A:sklearn.linear_model.tests.test_base.lr2_with_intercept->LinearRegression(fit_intercept=True).fit(X2, y)
A:sklearn.linear_model.tests.test_base.lr3_without_intercept->LinearRegression(fit_intercept=False).fit(X3, y)
A:sklearn.linear_model.tests.test_base.lr3_with_intercept->LinearRegression(fit_intercept=True).fit(X3, y)
A:sklearn.linear_model.tests.test_base.random_state->check_random_state(random_state)
A:sklearn.linear_model.tests.test_base.X->X.tolil().tolil()
A:sklearn.linear_model.tests.test_base.beta->check_random_state(random_state).rand(n)
A:sklearn.linear_model.tests.test_base.ols->LinearRegression()
A:sklearn.linear_model.tests.test_base.(X, y)->make_regression()
A:sklearn.linear_model.tests.test_base.Y_pred->LinearRegression().predict(X)
A:sklearn.linear_model.tests.test_base.y_pred->LinearRegression().predict(X)
A:sklearn.linear_model.tests.test_base.rng->check_random_state(0)
A:sklearn.linear_model.tests.test_base.expected_X_mean->numpy.average(X, axis=0, weights=sample_weight)
A:sklearn.linear_model.tests.test_base.expected_y_mean->numpy.average(y, axis=0, weights=sample_weight)
A:sklearn.linear_model.tests.test_base.(Xt, yt, X_mean, y_mean, X_std)->sparse_center_data(X, y, fit_intercept=True, normalize=True)
A:sklearn.linear_model.tests.test_base.(_, yt, _, y_mean, _)->center(X, y, fit_intercept=True, normalize=True)
A:sklearn.linear_model.tests.test_base.sample_weight->check_random_state(0).rand(n_samples)
A:sklearn.linear_model.tests.test_base.XA->X.tolil().tolil().toarray()
A:sklearn.linear_model.tests.test_base.csr->scipy.sparse.csr_matrix(X)
A:sklearn.linear_model.tests.test_base.(csr_, y, _, _, _)->sparse_center_data(csr, y, True)
sklearn.linear_model.tests.test_base.test_center_data()
sklearn.linear_model.tests.test_base.test_center_data_multioutput()
sklearn.linear_model.tests.test_base.test_center_data_weighted()
sklearn.linear_model.tests.test_base.test_csr_sparse_center_data()
sklearn.linear_model.tests.test_base.test_fit_intercept()
sklearn.linear_model.tests.test_base.test_linear_regression()
sklearn.linear_model.tests.test_base.test_linear_regression_multiple_outcome(random_state=0)
sklearn.linear_model.tests.test_base.test_linear_regression_sparse(random_state=0)
sklearn.linear_model.tests.test_base.test_linear_regression_sparse_multiple_outcome(random_state=0)
sklearn.linear_model.tests.test_base.test_sparse_center_data()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/tests/test_randomized_l1.py----------------------------------------
A:sklearn.linear_model.tests.test_randomized_l1.diabetes->load_diabetes()
A:sklearn.linear_model.tests.test_randomized_l1.X->StandardScaler().fit_transform(X)
A:sklearn.linear_model.tests.test_randomized_l1.(F, _)->f_classif(X, y)
A:sklearn.linear_model.tests.test_randomized_l1.(coef_grid, scores_path)->lasso_stability_path(X, y, scaling=scaling, random_state=42, n_resampling=30)
A:sklearn.linear_model.tests.test_randomized_l1.clf->RandomizedLogisticRegression(verbose=False, C=1.0, random_state=42, scaling=scaling, n_resampling=50, tol=0.001)
A:sklearn.linear_model.tests.test_randomized_l1.X_r->RandomizedLogisticRegression(verbose=False, C=1.0, random_state=42, scaling=scaling, n_resampling=50, tol=0.001).transform(X)
A:sklearn.linear_model.tests.test_randomized_l1.X_full->RandomizedLogisticRegression(verbose=False, C=1.0, random_state=42, scaling=scaling, n_resampling=50, tol=0.001).inverse_transform(X_r)
A:sklearn.linear_model.tests.test_randomized_l1.iris->load_iris()
A:sklearn.linear_model.tests.test_randomized_l1.X_orig->StandardScaler().fit_transform(X).copy()
A:sklearn.linear_model.tests.test_randomized_l1.(X, y, _, _, _)->center_data(X, y, True, True)
A:sklearn.linear_model.tests.test_randomized_l1.X_sp->scipy.sparse.csr_matrix(X)
sklearn.linear_model.tests.test_randomized_l1.test_lasso_stability_path()
sklearn.linear_model.tests.test_randomized_l1.test_randomized_lasso()
sklearn.linear_model.tests.test_randomized_l1.test_randomized_logistic()
sklearn.linear_model.tests.test_randomized_l1.test_randomized_logistic_sparse()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/tests/test_ransac.py----------------------------------------
A:sklearn.linear_model.tests.test_ransac.X->numpy.random.rand(10, 2)
A:sklearn.linear_model.tests.test_ransac.data->numpy.column_stack([X, y])
A:sklearn.linear_model.tests.test_ransac.outliers->numpy.array((10, 30, 200))
A:sklearn.linear_model.tests.test_ransac.base_estimator->LinearRegression()
A:sklearn.linear_model.tests.test_ransac.ransac_estimator->RANSACRegressor(base_estimator, min_samples=2, stop_probability=1.1)
A:sklearn.linear_model.tests.test_ransac.ref_inlier_mask->numpy.ones_like(ransac_estimator.inlier_mask_).astype(np.bool_)
A:sklearn.linear_model.tests.test_ransac.y->numpy.zeros((100,))
A:sklearn.linear_model.tests.test_ransac.X_sparse->scipy.sparse.csc_matrix(X)
A:sklearn.linear_model.tests.test_ransac.ransac_none_estimator->RANSACRegressor(None, 2, 5, random_state=0)
A:sklearn.linear_model.tests.test_ransac.ransac_estimator1->RANSACRegressor(base_estimator, min_samples=2, residual_threshold=5, random_state=0, residual_metric=residual_metric1)
A:sklearn.linear_model.tests.test_ransac.ransac_estimator2->RANSACRegressor(base_estimator, min_samples=2, residual_threshold=5, random_state=0, residual_metric=residual_metric2)
A:sklearn.linear_model.tests.test_ransac.ransac_estimator3->RANSACRegressor(base_estimator, min_samples=-1, residual_threshold=5, random_state=0)
A:sklearn.linear_model.tests.test_ransac.ransac_estimator4->RANSACRegressor(base_estimator, min_samples=5.2, residual_threshold=5, random_state=0)
A:sklearn.linear_model.tests.test_ransac.ransac_estimator5->RANSACRegressor(base_estimator, min_samples=2.0, residual_threshold=5, random_state=0)
A:sklearn.linear_model.tests.test_ransac.ransac_estimator6->RANSACRegressor(base_estimator, residual_threshold=5, random_state=0)
A:sklearn.linear_model.tests.test_ransac.ransac_estimator7->RANSACRegressor(base_estimator, min_samples=X.shape[0] + 1, residual_threshold=5, random_state=0)
A:sklearn.linear_model.tests.test_ransac.yyy->numpy.column_stack([y, y, y])
A:sklearn.linear_model.tests.test_ransac.ransac_estimator0->RANSACRegressor(base_estimator, min_samples=2, residual_threshold=5, random_state=0)
sklearn.linear_model.tests.test_ransac.test_ransac_default_residual_threshold()
sklearn.linear_model.tests.test_ransac.test_ransac_dynamic_max_trials()
sklearn.linear_model.tests.test_ransac.test_ransac_inliers_outliers()
sklearn.linear_model.tests.test_ransac.test_ransac_is_data_valid()
sklearn.linear_model.tests.test_ransac.test_ransac_is_model_valid()
sklearn.linear_model.tests.test_ransac.test_ransac_max_trials()
sklearn.linear_model.tests.test_ransac.test_ransac_min_n_samples()
sklearn.linear_model.tests.test_ransac.test_ransac_multi_dimensional_targets()
sklearn.linear_model.tests.test_ransac.test_ransac_none_estimator()
sklearn.linear_model.tests.test_ransac.test_ransac_predict()
sklearn.linear_model.tests.test_ransac.test_ransac_residual_metric()
sklearn.linear_model.tests.test_ransac.test_ransac_score()
sklearn.linear_model.tests.test_ransac.test_ransac_sparse_coo()
sklearn.linear_model.tests.test_ransac.test_ransac_sparse_csc()
sklearn.linear_model.tests.test_ransac.test_ransac_sparse_csr()
sklearn.linear_model.tests.test_ransac.test_ransac_stop_n_inliers()
sklearn.linear_model.tests.test_ransac.test_ransac_stop_score()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/tests/test_bayes.py----------------------------------------
A:sklearn.linear_model.tests.test_bayes.diabetes->sklearn.datasets.load_diabetes()
A:sklearn.linear_model.tests.test_bayes.clf->ARDRegression(compute_score=True)
A:sklearn.linear_model.tests.test_bayes.X->numpy.array([[1], [2], [3]])
A:sklearn.linear_model.tests.test_bayes.Y->numpy.array([1, 2, 3])
sklearn.linear_model.tests.test_bayes.test_bayesian_on_diabetes()
sklearn.linear_model.tests.test_bayes.test_toy_ard_object()
sklearn.linear_model.tests.test_bayes.test_toy_bayesian_ridge_object()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/tests/test_sgd.py----------------------------------------
A:sklearn.linear_model.tests.test_sgd.X->numpy.random.RandomState(42).normal(size=(n_samples, n_features))
A:sklearn.linear_model.tests.test_sgd.T->numpy.array([[-1, -1], [2, 2], [3, 2]])
A:sklearn.linear_model.tests.test_sgd.X2->numpy.array([[-1, 1], [-0.75, 0.5], [-1.5, 1.5], [1, 1], [0.75, 0.5], [1.5, 1.5], [-1, -1], [0, -0.5], [1, -1]])
A:sklearn.linear_model.tests.test_sgd.T2->numpy.array([[-1.5, 0.5], [1, 2], [0, -2]])
A:sklearn.linear_model.tests.test_sgd.X3->numpy.array([[1, 1, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0]])
A:sklearn.linear_model.tests.test_sgd.Y3->numpy.array([1, 1, 1, 1, 2, 2, 2, 2])
A:sklearn.linear_model.tests.test_sgd.X4->numpy.array([[1, 0.9, 0.8, 0, 0, 0], [1, 0.84, 0.98, 0, 0, 0], [1, 0.96, 0.88, 0, 0, 0], [1, 0.91, 0.99, 0, 0, 0], [0, 0, 0, 0.89, 0.91, 1], [0, 0, 0, 0.79, 0.84, 1], [0, 0, 0, 0.91, 0.95, 1], [0, 0, 0, 0.93, 1, 1]])
A:sklearn.linear_model.tests.test_sgd.Y4->numpy.array([1, 1, 1, 1, 2, 2, 2, 2])
A:sklearn.linear_model.tests.test_sgd.iris->sklearn.datasets.load_iris()
A:sklearn.linear_model.tests.test_sgd.X5->numpy.array([[-2, -1], [-1, -1], [-1, -2], [1, 1], [1, 2], [2, 1]])
A:sklearn.linear_model.tests.test_sgd.clf->self.factory(epsilon=0.9)
A:sklearn.linear_model.tests.test_sgd.clf2->self.factory(alpha=0.01, n_iter=5, penalty='l2')
A:sklearn.linear_model.tests.test_sgd.clf3->self.factory(alpha=0.01, eta0=0.01, n_iter=5, shuffle=False, warm_start=True, learning_rate=lr)
A:sklearn.linear_model.tests.test_sgd.pred->self.factory(epsilon=0.9).predict(X)
A:sklearn.linear_model.tests.test_sgd.p->self.factory(epsilon=0.9).predict_proba(x)
A:sklearn.linear_model.tests.test_sgd.d->self.factory(epsilon=0.9).decision_function(x)
A:sklearn.linear_model.tests.test_sgd.l->self.factory(epsilon=0.9).predict_log_proba([-1, -1])
A:sklearn.linear_model.tests.test_sgd.x->numpy.random.RandomState(42).normal(size=(n_samples, n_features)).mean(axis=0)
A:sklearn.linear_model.tests.test_sgd.n->len(X4)
A:sklearn.linear_model.tests.test_sgd.rng->numpy.random.RandomState(42)
A:sklearn.linear_model.tests.test_sgd.idx->numpy.arange(X.shape[0])
A:sklearn.linear_model.tests.test_sgd.clf_weighted->self.factory(alpha=0.1, n_iter=1000, class_weight={0: 0.5, 1: 0.5})
A:sklearn.linear_model.tests.test_sgd.clf_auto->self.factory(alpha=0.0001, n_iter=1000, class_weight='auto').fit(X, y)
A:sklearn.linear_model.tests.test_sgd.X_imbalanced->numpy.vstack([X] + [X_0] * 10)
A:sklearn.linear_model.tests.test_sgd.y_imbalanced->numpy.concatenate([y] + [y_0] * 10)
A:sklearn.linear_model.tests.test_sgd.y_pred->self.factory(epsilon=0.9).predict(T)
A:sklearn.linear_model.tests.test_sgd.classes->numpy.unique(Y_)
A:sklearn.linear_model.tests.test_sgd.id1->id(clf.coef_.data)
A:sklearn.linear_model.tests.test_sgd.id2->id(clf.coef_.data)
A:sklearn.linear_model.tests.test_sgd.y_pred2->self.factory(epsilon=0.9).predict(T)
A:sklearn.linear_model.tests.test_sgd.score->self.factory(epsilon=0.9).score(X, y)
A:sklearn.linear_model.tests.test_sgd.ground_truth_coef->numpy.random.RandomState(42).randn(n_features)
A:sklearn.linear_model.tests.test_sgd.y->(np.dot(scale(X), ground_truth) > 0.0).astype(np.int32)
A:sklearn.linear_model.tests.test_sgd.cd->sklearn.linear_model.ElasticNet(alpha=alpha, l1_ratio=l1_ratio, fit_intercept=False)
A:sklearn.linear_model.tests.test_sgd.sgd->self.factory(penalty='elasticnet', n_iter=50, alpha=alpha, l1_ratio=l1_ratio, fit_intercept=False)
A:sklearn.linear_model.tests.test_sgd.(X, y)->sklearn.datasets.make_classification(n_samples=1000, n_features=100, n_informative=20, random_state=1234)
A:sklearn.linear_model.tests.test_sgd.est_en->SGDClassifier(alpha=0.001, penalty='elasticnet', l1_ratio=1e-10).fit(X, y)
A:sklearn.linear_model.tests.test_sgd.est_l1->SGDClassifier(alpha=0.001, penalty='l1').fit(X, y)
A:sklearn.linear_model.tests.test_sgd.est_l2->SGDClassifier(alpha=0.001, penalty='l2').fit(X, y)
A:sklearn.linear_model.tests.test_sgd.ground_truth->numpy.random.RandomState(42).normal(size=n_features)
A:sklearn.linear_model.tests.test_sgd.model->SGDClassifier(alpha=0.1, loss='squared_hinge', n_iter=500)
sklearn.linear_model.tests.test_sgd.CommonTest(object)
sklearn.linear_model.tests.test_sgd.CommonTest._test_warm_start(self,X,Y,lr)
sklearn.linear_model.tests.test_sgd.CommonTest.test_clone(self)
sklearn.linear_model.tests.test_sgd.CommonTest.test_input_format(self)
sklearn.linear_model.tests.test_sgd.CommonTest.test_warm_start_constant(self)
sklearn.linear_model.tests.test_sgd.CommonTest.test_warm_start_invscaling(self)
sklearn.linear_model.tests.test_sgd.CommonTest.test_warm_start_optimal(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase(unittest.TestCase,CommonTest)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase._test_partial_fit_equal_fit(self,lr)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_argument_coef(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_auto_weight(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_class_weights(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_equal_class_weight(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_fit_then_partial_fit(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_multiple_fit(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_partial_fit_binary(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_partial_fit_equal_fit_constant(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_partial_fit_equal_fit_invscaling(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_partial_fit_equal_fit_optimal(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_partial_fit_exception(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_partial_fit_multiclass(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_provide_coef(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_regression_losses(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_sample_weights(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_set_coef_multiclass(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_set_intercept(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_set_intercept_binary(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_set_intercept_to_intercept(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_sgd(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_sgd_at_least_two_labels(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_sgd_bad_alpha(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_sgd_bad_eta0(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_sgd_bad_l1_ratio(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_sgd_bad_learning_rate_schedule(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_sgd_bad_loss(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_sgd_bad_penalty(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_sgd_l1(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_sgd_multiclass(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_sgd_multiclass_njobs(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_sgd_multiclass_with_init_coef(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_sgd_n_iter_param(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_sgd_proba(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_sgd_shuffle_param(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_warm_start_multiclass(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_wrong_class_weight_format(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_wrong_class_weight_label(self)
sklearn.linear_model.tests.test_sgd.DenseSGDClassifierTestCase.test_wrong_sample_weights(self)
sklearn.linear_model.tests.test_sgd.DenseSGDRegressorTestCase(unittest.TestCase,CommonTest)
sklearn.linear_model.tests.test_sgd.DenseSGDRegressorTestCase._test_partial_fit_equal_fit(self,lr)
sklearn.linear_model.tests.test_sgd.DenseSGDRegressorTestCase.test_elasticnet_convergence(self)
sklearn.linear_model.tests.test_sgd.DenseSGDRegressorTestCase.test_loss_function_epsilon(self)
sklearn.linear_model.tests.test_sgd.DenseSGDRegressorTestCase.test_partial_fit(self)
sklearn.linear_model.tests.test_sgd.DenseSGDRegressorTestCase.test_partial_fit_equal_fit_constant(self)
sklearn.linear_model.tests.test_sgd.DenseSGDRegressorTestCase.test_partial_fit_equal_fit_invscaling(self)
sklearn.linear_model.tests.test_sgd.DenseSGDRegressorTestCase.test_partial_fit_equal_fit_optimal(self)
sklearn.linear_model.tests.test_sgd.DenseSGDRegressorTestCase.test_sgd(self)
sklearn.linear_model.tests.test_sgd.DenseSGDRegressorTestCase.test_sgd_bad_loss(self)
sklearn.linear_model.tests.test_sgd.DenseSGDRegressorTestCase.test_sgd_bad_penalty(self)
sklearn.linear_model.tests.test_sgd.DenseSGDRegressorTestCase.test_sgd_epsilon_insensitive(self)
sklearn.linear_model.tests.test_sgd.DenseSGDRegressorTestCase.test_sgd_huber_fit(self)
sklearn.linear_model.tests.test_sgd.DenseSGDRegressorTestCase.test_sgd_least_squares_fit(self)
sklearn.linear_model.tests.test_sgd.SparseSGDClassifier(SGDClassifier)
sklearn.linear_model.tests.test_sgd.SparseSGDClassifier.decision_function(self,X)
sklearn.linear_model.tests.test_sgd.SparseSGDClassifier.fit(self,X,y,*args,**kw)
sklearn.linear_model.tests.test_sgd.SparseSGDClassifier.partial_fit(self,X,y,*args,**kw)
sklearn.linear_model.tests.test_sgd.SparseSGDClassifier.predict_proba(self,X)
sklearn.linear_model.tests.test_sgd.SparseSGDClassifierTestCase(DenseSGDClassifierTestCase)
sklearn.linear_model.tests.test_sgd.SparseSGDRegressor(SGDRegressor)
sklearn.linear_model.tests.test_sgd.SparseSGDRegressor.decision_function(self,X,*args,**kw)
sklearn.linear_model.tests.test_sgd.SparseSGDRegressor.fit(self,X,y,*args,**kw)
sklearn.linear_model.tests.test_sgd.SparseSGDRegressor.partial_fit(self,X,y,*args,**kw)
sklearn.linear_model.tests.test_sgd.SparseSGDRegressorTestCase(DenseSGDRegressorTestCase)
sklearn.linear_model.tests.test_sgd.test_l1_ratio()
sklearn.linear_model.tests.test_sgd.test_underflow_or_overlow()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/tests/test_passive_aggressive.py----------------------------------------
A:sklearn.linear_model.tests.test_passive_aggressive.iris->load_iris()
A:sklearn.linear_model.tests.test_passive_aggressive.random_state->check_random_state(12)
A:sklearn.linear_model.tests.test_passive_aggressive.indices->numpy.arange(iris.data.shape[0])
A:sklearn.linear_model.tests.test_passive_aggressive.X_csr->scipy.sparse.csr_matrix(X)
A:sklearn.linear_model.tests.test_passive_aggressive.self.w->numpy.zeros(n_features, dtype=np.float64)
A:sklearn.linear_model.tests.test_passive_aggressive.p->self.project(X[i])
A:sklearn.linear_model.tests.test_passive_aggressive.loss->max(np.abs(p - y[i]) - self.epsilon, 0)
A:sklearn.linear_model.tests.test_passive_aggressive.sqnorm->numpy.dot(X[i], X[i])
A:sklearn.linear_model.tests.test_passive_aggressive.step->min(self.C, loss / sqnorm)
A:sklearn.linear_model.tests.test_passive_aggressive.clf->PassiveAggressiveClassifier()
A:sklearn.linear_model.tests.test_passive_aggressive.score->PassiveAggressiveClassifier().score(data, y)
A:sklearn.linear_model.tests.test_passive_aggressive.classes->numpy.unique(y)
A:sklearn.linear_model.tests.test_passive_aggressive.y_bin->y.copy()
A:sklearn.linear_model.tests.test_passive_aggressive.clf1->MyPassiveAggressive(C=1.0, loss=loss, fit_intercept=True, n_iter=2)
A:sklearn.linear_model.tests.test_passive_aggressive.clf2->PassiveAggressiveClassifier(C=1.0, loss=loss, fit_intercept=True, n_iter=2)
A:sklearn.linear_model.tests.test_passive_aggressive.reg->PassiveAggressiveRegressor()
A:sklearn.linear_model.tests.test_passive_aggressive.pred->PassiveAggressiveRegressor().predict(data)
A:sklearn.linear_model.tests.test_passive_aggressive.reg1->MyPassiveAggressive(C=1.0, loss=loss, fit_intercept=True, n_iter=2)
A:sklearn.linear_model.tests.test_passive_aggressive.reg2->PassiveAggressiveRegressor(C=1.0, loss=loss, fit_intercept=True, n_iter=2)
sklearn.linear_model.tests.test_passive_aggressive.MyPassiveAggressive(self,C=1.0,epsilon=0.01,loss='hinge',fit_intercept=True,n_iter=1,random_state=None)
sklearn.linear_model.tests.test_passive_aggressive.MyPassiveAggressive.__init__(self,C=1.0,epsilon=0.01,loss='hinge',fit_intercept=True,n_iter=1,random_state=None)
sklearn.linear_model.tests.test_passive_aggressive.MyPassiveAggressive.fit(self,X,y)
sklearn.linear_model.tests.test_passive_aggressive.MyPassiveAggressive.project(self,X)
sklearn.linear_model.tests.test_passive_aggressive.test_classifier_accuracy()
sklearn.linear_model.tests.test_passive_aggressive.test_classifier_correctness()
sklearn.linear_model.tests.test_passive_aggressive.test_classifier_partial_fit()
sklearn.linear_model.tests.test_passive_aggressive.test_classifier_refit()
sklearn.linear_model.tests.test_passive_aggressive.test_classifier_undefined_methods()
sklearn.linear_model.tests.test_passive_aggressive.test_regressor_correctness()
sklearn.linear_model.tests.test_passive_aggressive.test_regressor_mse()
sklearn.linear_model.tests.test_passive_aggressive.test_regressor_partial_fit()
sklearn.linear_model.tests.test_passive_aggressive.test_regressor_undefined_methods()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/tests/test_sparse_coordinate_descent.py----------------------------------------
A:sklearn.linear_model.tests.test_sparse_coordinate_descent.clf->ElasticNetCV(n_alphas=n_alphas, eps=0.001, max_iter=max_iter, l1_ratio=0.5, fit_intercept=False)
A:sklearn.linear_model.tests.test_sparse_coordinate_descent.X->scipy.sparse.csc_matrix(X)
A:sklearn.linear_model.tests.test_sparse_coordinate_descent.clf_dense->ElasticNet(fit_intercept=True, normalize=True)
A:sklearn.linear_model.tests.test_sparse_coordinate_descent.clf_sparse->ElasticNet(fit_intercept=True, normalize=True)
A:sklearn.linear_model.tests.test_sparse_coordinate_descent.T->scipy.sparse.lil_matrix((3, 1))
A:sklearn.linear_model.tests.test_sparse_coordinate_descent.pred->ElasticNetCV(n_alphas=n_alphas, eps=0.001, max_iter=max_iter, l1_ratio=0.5, fit_intercept=False).predict(T)
A:sklearn.linear_model.tests.test_sparse_coordinate_descent.random_state->numpy.random.RandomState(seed)
A:sklearn.linear_model.tests.test_sparse_coordinate_descent.w->numpy.abs(w)
A:sklearn.linear_model.tests.test_sparse_coordinate_descent.rnd->numpy.random.RandomState(seed).uniform(size=(n_samples, n_features))
A:sklearn.linear_model.tests.test_sparse_coordinate_descent.y->numpy.ravel(y)
A:sklearn.linear_model.tests.test_sparse_coordinate_descent.(X, y)->make_sparse_data(n_samples=40, n_features=10)
A:sklearn.linear_model.tests.test_sparse_coordinate_descent.s_clf->Lasso(alpha=0.1, fit_intercept=False, max_iter=max_iter, tol=1e-07)
A:sklearn.linear_model.tests.test_sparse_coordinate_descent.d_clf->Lasso(alpha=0.1, fit_intercept=False, max_iter=max_iter, tol=1e-07)
A:sklearn.linear_model.tests.test_sparse_coordinate_descent.estimator->ElasticNet(alpha=0.01, fit_intercept=True, precompute=None)
A:sklearn.linear_model.tests.test_sparse_coordinate_descent.clfs->LassoCV(max_iter=100, cv=4, normalize=normalize)
A:sklearn.linear_model.tests.test_sparse_coordinate_descent.clfd->LassoCV(max_iter=100, cv=4, normalize=normalize)
sklearn.linear_model.tests.test_sparse_coordinate_descent._test_sparse_enet_not_as_toy_dataset(alpha,fit_intercept,positive)
sklearn.linear_model.tests.test_sparse_coordinate_descent.make_sparse_data(n_samples=100,n_features=100,n_informative=10,seed=42,positive=False,n_targets=1)
sklearn.linear_model.tests.test_sparse_coordinate_descent.test_enet_multitarget()
sklearn.linear_model.tests.test_sparse_coordinate_descent.test_enet_toy_explicit_sparse_input()
sklearn.linear_model.tests.test_sparse_coordinate_descent.test_enet_toy_list_input()
sklearn.linear_model.tests.test_sparse_coordinate_descent.test_lasso_zero()
sklearn.linear_model.tests.test_sparse_coordinate_descent.test_normalize_option()
sklearn.linear_model.tests.test_sparse_coordinate_descent.test_path_parameters()
sklearn.linear_model.tests.test_sparse_coordinate_descent.test_same_output_sparse_dense_lasso_and_enet_cv()
sklearn.linear_model.tests.test_sparse_coordinate_descent.test_sparse_coef()
sklearn.linear_model.tests.test_sparse_coordinate_descent.test_sparse_enet_not_as_toy_dataset()
sklearn.linear_model.tests.test_sparse_coordinate_descent.test_sparse_lasso_not_as_toy_dataset()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/tests/test_ridge.py----------------------------------------
A:sklearn.linear_model.tests.test_ridge.diabetes->sklearn.datasets.load_diabetes()
A:sklearn.linear_model.tests.test_ridge.ind->numpy.arange(X_diabetes.shape[0])
A:sklearn.linear_model.tests.test_ridge.rng->numpy.random.RandomState(42)
A:sklearn.linear_model.tests.test_ridge.iris->sklearn.datasets.load_iris()
A:sklearn.linear_model.tests.test_ridge.X_iris->scipy.sparse.csr_matrix(iris.data)
A:sklearn.linear_model.tests.test_ridge.y->numpy.ones(3)
A:sklearn.linear_model.tests.test_ridge.X->numpy.eye(3)
A:sklearn.linear_model.tests.test_ridge.ridge->Ridge(alpha=1)
A:sklearn.linear_model.tests.test_ridge.coef->_solve_cholesky(X_diabetes, y, alpha=[0.01])
A:sklearn.linear_model.tests.test_ridge.K->numpy.eye(3).dot(X.T)
A:sklearn.linear_model.tests.test_ridge.dual_coef->_solve_cholesky_kernel(K, y, alpha=[0.01])
A:sklearn.linear_model.tests.test_ridge.coefs->ridge_regression(X, y, alpha=alpha, sample_weight=sample_weight, solver=solver)
A:sklearn.linear_model.tests.test_ridge.coefs2->ridge_regression(X * np.sqrt(sample_weight)[:, np.newaxis], y * np.sqrt(sample_weight), alpha=alpha, solver=solver)
A:sklearn.linear_model.tests.test_ridge.est->Ridge(alpha=alpha, solver=solver)
A:sklearn.linear_model.tests.test_ridge.sample_weight->numpy.sqrt(sample_weight)
A:sklearn.linear_model.tests.test_ridge.hess->numpy.dot(X_weighted.T, X_weighted)
A:sklearn.linear_model.tests.test_ridge.Y->numpy.eye(3).dot(beta)
A:sklearn.linear_model.tests.test_ridge.clf->RidgeClassifierCV(class_weight={1: 0.001}, alphas=[0.01, 0.1, 1, 10])
A:sklearn.linear_model.tests.test_ridge.ols->LinearRegression(fit_intercept=False)
A:sklearn.linear_model.tests.test_ridge.penalties->numpy.arange(n_targets)
A:sklearn.linear_model.tests.test_ridge.coef_cholesky->numpy.array([Ridge(alpha=alpha, solver='cholesky').fit(X, target).coef_ for (alpha, target) in zip(penalties, y.T)])
A:sklearn.linear_model.tests.test_ridge.ridge_gcv->_RidgeGCV(fit_intercept=False)
A:sklearn.linear_model.tests.test_ridge.decomp->_RidgeGCV(fit_intercept=False)._pre_compute_svd(X_diabetes, y_diabetes)
A:sklearn.linear_model.tests.test_ridge.(errors, c)->_RidgeGCV(fit_intercept=False)._errors(1.0, y_diabetes, *decomp)
A:sklearn.linear_model.tests.test_ridge.(values, c)->_RidgeGCV(fit_intercept=False)._values(1.0, y_diabetes, *decomp)
A:sklearn.linear_model.tests.test_ridge.(errors3, c)->_RidgeGCV(fit_intercept=False)._errors_svd(ridge.alpha, y_diabetes, *decomp)
A:sklearn.linear_model.tests.test_ridge.(values3, c)->_RidgeGCV(fit_intercept=False)._values_svd(ridge.alpha, y_diabetes, *decomp)
A:sklearn.linear_model.tests.test_ridge.ridge_gcv2->RidgeCV(fit_intercept=False, loss_func=mean_squared_error)
A:sklearn.linear_model.tests.test_ridge.ridge_gcv3->RidgeCV(fit_intercept=False, score_func=func)
A:sklearn.linear_model.tests.test_ridge.ridge_gcv4->RidgeCV(fit_intercept=False, scoring=scorer)
A:sklearn.linear_model.tests.test_ridge.Y_pred->Ridge(alpha=1).predict(filter_(X_diabetes))
A:sklearn.linear_model.tests.test_ridge.y_pred->RidgeClassifierCV(class_weight={1: 0.001}, alphas=[0.01, 0.1, 1, 10]).predict(filter_(X_iris))
A:sklearn.linear_model.tests.test_ridge.ridge_cv->RidgeCV()
A:sklearn.linear_model.tests.test_ridge.cv->KFold(n_samples, 5)
A:sklearn.linear_model.tests.test_ridge.score->Ridge(alpha=1).score(filter_(X_diabetes), y_diabetes)
A:sklearn.linear_model.tests.test_ridge.ridge2->Ridge(tol=0.001)
A:sklearn.linear_model.tests.test_ridge.score2->Ridge(tol=0.001).score(filter_(X_diabetes), y_diabetes)
A:sklearn.linear_model.tests.test_ridge.ret_dense->test_func(DENSE_FILTER)
A:sklearn.linear_model.tests.test_ridge.ret_sparse->test_func(SPARSE_FILTER)
A:sklearn.linear_model.tests.test_ridge.clfa->RidgeClassifier(class_weight='auto')
A:sklearn.linear_model.tests.test_ridge.rngrng->numpy.random.RandomState(42)
A:sklearn.linear_model.tests.test_ridge.x->numpy.random.RandomState(42).randn(n_samples, n_features)
A:sklearn.linear_model.tests.test_ridge.n_alphas->len(alphas)
A:sklearn.linear_model.tests.test_ridge.r->RidgeCV(alphas=alphas, store_cv_values=True)
A:sklearn.linear_model.tests.test_ridge.alpha->numpy.atleast_1d(alpha)
A:sklearn.linear_model.tests.test_ridge.beta->numpy.random.RandomState(42).randn(n_features, n_targets)
A:sklearn.linear_model.tests.test_ridge.coef_sample_space->_solve_cholesky_kernel(K, Y_noisy, alpha, sample_weight=sample_weights)
A:sklearn.linear_model.tests.test_ridge.coef_feature_space->_solve_cholesky(X, Y_noisy, alpha, sample_weight=sample_weights)
A:sklearn.linear_model.tests.test_ridge.sparse_ridge->Ridge(alpha=1.0, fit_intercept=False)
A:sklearn.linear_model.tests.test_ridge.dense_ridge->Ridge(alpha=1.0, fit_intercept=False)
A:sklearn.linear_model.tests.test_ridge.X_sparse->sparse_converter(X)
sklearn.linear_model.tests.test_ridge._test_multi_ridge_diabetes(filter_)
sklearn.linear_model.tests.test_ridge._test_ridge_classifiers(filter_)
sklearn.linear_model.tests.test_ridge._test_ridge_cv(filter_)
sklearn.linear_model.tests.test_ridge._test_ridge_diabetes(filter_)
sklearn.linear_model.tests.test_ridge._test_ridge_loo(filter_)
sklearn.linear_model.tests.test_ridge._test_tolerance(filter_)
sklearn.linear_model.tests.test_ridge.test_class_weights()
sklearn.linear_model.tests.test_ridge.test_class_weights_cv()
sklearn.linear_model.tests.test_ridge.test_dense_sparse()
sklearn.linear_model.tests.test_ridge.test_deprecation_warning_dense_cholesky()
sklearn.linear_model.tests.test_ridge.test_primal_dual_relationship()
sklearn.linear_model.tests.test_ridge.test_raises_value_error_if_sample_weights_greater_than_1d()
sklearn.linear_model.tests.test_ridge.test_raises_value_error_if_sample_weights_greater_than_1d()
sklearn.linear_model.tests.test_ridge.test_raises_value_error_if_solver_not_supported()
sklearn.linear_model.tests.test_ridge.test_ridge()
sklearn.linear_model.tests.test_ridge.test_ridge_cv_sparse_svd()
sklearn.linear_model.tests.test_ridge.test_ridge_individual_penalties()
sklearn.linear_model.tests.test_ridge.test_ridge_intercept()
sklearn.linear_model.tests.test_ridge.test_ridge_sample_weights()
sklearn.linear_model.tests.test_ridge.test_ridge_sample_weights_in_feature_space()
sklearn.linear_model.tests.test_ridge.test_ridge_shapes()
sklearn.linear_model.tests.test_ridge.test_ridge_singular()
sklearn.linear_model.tests.test_ridge.test_ridge_vs_lstsq()
sklearn.linear_model.tests.test_ridge.test_ridgecv_store_cv_values()
sklearn.linear_model.tests.test_ridge.test_sparse_design_with_sample_weights()
sklearn.linear_model.tests.test_ridge.test_sparse_design_with_sample_weights()
sklearn.linear_model.tests.test_ridge.test_toy_ridge_object()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/tests/test_omp.py----------------------------------------
A:sklearn.linear_model.tests.test_omp.(y, X, gamma)->make_sparse_coded_signal(n_targets, n_features, n_samples, n_nonzero_coefs, random_state=0)
A:sklearn.linear_model.tests.test_omp.gamma->numpy.zeros(n_features)
A:sklearn.linear_model.tests.test_omp.gamma_gram->orthogonal_mp_gram(G, Xy[:, 0], 5)
A:sklearn.linear_model.tests.test_omp.(idx,)->gamma[:, 0].nonzero()
A:sklearn.linear_model.tests.test_omp.gamma_rec->orthogonal_mp(X, y[:, 0], 5)
A:sklearn.linear_model.tests.test_omp.omp->OrthogonalMatchingPursuit(n_nonzero_coefs=n_features)
A:sklearn.linear_model.tests.test_omp.omp1->OrthogonalMatchingPursuit(n_nonzero_coefs=1, fit_intercept=False, normalize=False)
A:sklearn.linear_model.tests.test_omp.omp2->OrthogonalMatchingPursuit(n_nonzero_coefs=1, fit_intercept=True, normalize=False)
A:sklearn.linear_model.tests.test_omp.omp3->OrthogonalMatchingPursuit(n_nonzero_coefs=1, fit_intercept=False, normalize=True)
A:sklearn.linear_model.tests.test_omp.newX->rng.randn(n_samples, n_features).copy()
A:sklearn.linear_model.tests.test_omp.newy->numpy.dot(newX, gamma)
A:sklearn.linear_model.tests.test_omp.new_y->numpy.dot(X, gamma)
A:sklearn.linear_model.tests.test_omp.new_Xy->numpy.dot(X.T, new_y)
A:sklearn.linear_model.tests.test_omp.gamma_hat->orthogonal_mp(X, new_y, 2)
A:sklearn.linear_model.tests.test_omp.gamma_hat_gram->orthogonal_mp_gram(G, new_Xy, 2)
A:sklearn.linear_model.tests.test_omp.y_empty->numpy.zeros_like(y)
A:sklearn.linear_model.tests.test_omp.Xy_empty->numpy.dot(X.T, y_empty)
A:sklearn.linear_model.tests.test_omp.gamma_empty->ignore_warnings(orthogonal_mp)(X, y_empty, 1)
A:sklearn.linear_model.tests.test_omp.gamma_empty_gram->ignore_warnings(orthogonal_mp)(G, Xy_empty, 1)
A:sklearn.linear_model.tests.test_omp.path->orthogonal_mp_gram(G, Xy, n_nonzero_coefs=5, return_path=True)
A:sklearn.linear_model.tests.test_omp.last->orthogonal_mp_gram(G, Xy, n_nonzero_coefs=5, return_path=False)
A:sklearn.linear_model.tests.test_omp.ompcv->OrthogonalMatchingPursuitCV(normalize=True, fit_intercept=False, max_iter=10, cv=5)
A:sklearn.linear_model.tests.test_omp.rng->check_random_state(0)
A:sklearn.linear_model.tests.test_omp.X->check_random_state(0).randn(n_samples, n_features)
A:sklearn.linear_model.tests.test_omp.Y->check_random_state(0).randn(n_samples, n_targets)
A:sklearn.linear_model.tests.test_omp.lstsq->LinearRegression()
sklearn.linear_model.tests.test_omp.test_bad_input()
sklearn.linear_model.tests.test_omp.test_correct_shapes()
sklearn.linear_model.tests.test_omp.test_correct_shapes_gram()
sklearn.linear_model.tests.test_omp.test_estimator()
sklearn.linear_model.tests.test_omp.test_identical_regressors()
sklearn.linear_model.tests.test_omp.test_n_nonzero_coefs()
sklearn.linear_model.tests.test_omp.test_no_atoms()
sklearn.linear_model.tests.test_omp.test_omp_cv()
sklearn.linear_model.tests.test_omp.test_omp_path()
sklearn.linear_model.tests.test_omp.test_omp_reaches_least_squares()
sklearn.linear_model.tests.test_omp.test_perfect_signal_recovery()
sklearn.linear_model.tests.test_omp.test_scaling_with_gram()
sklearn.linear_model.tests.test_omp.test_swapped_regressors()
sklearn.linear_model.tests.test_omp.test_tol()
sklearn.linear_model.tests.test_omp.test_unreachable_accuracy()
sklearn.linear_model.tests.test_omp.test_with_without_gram()
sklearn.linear_model.tests.test_omp.test_with_without_gram_tol()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/linear_model/tests/test_least_angle.py----------------------------------------
A:sklearn.linear_model.tests.test_least_angle.diabetes->sklearn.datasets.load_diabetes()
A:sklearn.linear_model.tests.test_least_angle.sys.stdout->StringIO()
A:sklearn.linear_model.tests.test_least_angle.(alphas_, active, coef_path_)->sklearn.linear_model.lars_path(X, y, method='lasso')
A:sklearn.linear_model.tests.test_least_angle.cov->numpy.dot(X.T, res)
A:sklearn.linear_model.tests.test_least_angle.C->numpy.max(abs(cov))
A:sklearn.linear_model.tests.test_least_angle.ocur->len(cov[C - eps < abs(cov)])
A:sklearn.linear_model.tests.test_least_angle.G->numpy.dot(X.T, X)
A:sklearn.linear_model.tests.test_least_angle.Xy->numpy.dot(X.T, y)
A:sklearn.linear_model.tests.test_least_angle.output->sklearn.linear_model.lars_path(X, y, method=method)
A:sklearn.linear_model.tests.test_least_angle.output_pre->sklearn.linear_model.lars_path(X, y, Gram=G, Xy=Xy, method=method)
A:sklearn.linear_model.tests.test_least_angle.clf->sklearn.linear_model.Lars(fit_intercept=False).fit(H, np.arange(n))
A:sklearn.linear_model.tests.test_least_angle.X->numpy.random.RandomState(42).randn(n, m)
A:sklearn.linear_model.tests.test_least_angle.y->y.squeeze().squeeze()
A:sklearn.linear_model.tests.test_least_angle.(_, _, coef_path_)->sklearn.linear_model.lars_path(X, y, Gram='auto', copy_X=False, copy_Gram=False, alpha_min=0.0, method='lasso', verbose=0, max_iter=500)
A:sklearn.linear_model.tests.test_least_angle.(alphas_, active_, coef_path_)->sklearn.linear_model.lars_path(X, y, method='lasso', Gram=G, Xy=Xy, alpha_min=0.9)
A:sklearn.linear_model.tests.test_least_angle.(alpha_, active, coef)->sklearn.linear_model.lars_path(X, y, method='lasso', Gram=G, Xy=Xy, alpha_min=0.9, return_path=False)
A:sklearn.linear_model.tests.test_least_angle.X1->numpy.array([[1, 1.0], [1.0, 1.0]])
A:sklearn.linear_model.tests.test_least_angle.y1->numpy.array([1, 1])
A:sklearn.linear_model.tests.test_least_angle.(alphas, active, coef_path)->f(ConvergenceWarning, in_warn_message, linear_model.lars_path, X1, y1)
A:sklearn.linear_model.tests.test_least_angle.lars->sklearn.linear_model.Lars(n_nonzero_coefs=6, verbose=verbose)
A:sklearn.linear_model.tests.test_least_angle.coord_descent->sklearn.linear_model.Lasso(alpha=alpha, tol=1e-10, normalize=False)
A:sklearn.linear_model.tests.test_least_angle.(alphas, _, lasso_path)->sklearn.linear_model.lars_path(X, y, method='lasso', alpha_min=0.9)
A:sklearn.linear_model.tests.test_least_angle.lasso_cd->sklearn.linear_model.Lasso(fit_intercept=True, normalize=True, tol=1e-08)
A:sklearn.linear_model.tests.test_least_angle.error->scipy.linalg.norm(lasso_path[:, -1] - lasso_cd.coef_)
A:sklearn.linear_model.tests.test_least_angle.clf1->sklearn.linear_model.LassoLars(alpha=alpha, normalize=False).fit(X, y)
A:sklearn.linear_model.tests.test_least_angle.clf2->sklearn.linear_model.Lasso(alpha=alpha, tol=1e-08, normalize=False).fit(X, y)
A:sklearn.linear_model.tests.test_least_angle.err->scipy.linalg.norm(clf1.coef_ - clf2.coef_)
A:sklearn.linear_model.tests.test_least_angle.lasso->sklearn.linear_model.LassoLars()
A:sklearn.linear_model.tests.test_least_angle.lasso2->sklearn.linear_model.LassoLars(alpha=lasso.alphas_[2])
A:sklearn.linear_model.tests.test_least_angle.rng->numpy.random.RandomState(42)
A:sklearn.linear_model.tests.test_least_angle.w->numpy.zeros((m, 1))
A:sklearn.linear_model.tests.test_least_angle.i->numpy.arange(0, m)
A:sklearn.linear_model.tests.test_least_angle.(lars_alphas, _, lars_coef)->f(ConvergenceWarning, in_warn_message, linear_model.lars_path, X, y, method='lasso')
A:sklearn.linear_model.tests.test_least_angle.(_, lasso_coef2, _)->sklearn.linear_model.lasso_path(X, y, alphas=lars_alphas, tol=1e-06, fit_intercept=False)
A:sklearn.linear_model.tests.test_least_angle.lasso_coef->numpy.zeros((w.shape[0], len(lars_alphas)))
A:sklearn.linear_model.tests.test_least_angle.iter_models->enumerate(linear_model.lasso_path(X, y, alphas=lars_alphas, tol=1e-06, return_models=True, fit_intercept=False))
A:sklearn.linear_model.tests.test_least_angle.lars_obj->objective_function(lars_coef_)
A:sklearn.linear_model.tests.test_least_angle.cd_obj->objective_function(cd_coef_)
A:sklearn.linear_model.tests.test_least_angle.Y_pred->estimator.predict(X)
A:sklearn.linear_model.tests.test_least_angle.Y_dec->estimator.decision_function(X)
A:sklearn.linear_model.tests.test_least_angle.y_pred->estimator.predict(X)
A:sklearn.linear_model.tests.test_least_angle.lars_cv->sklearn.linear_model.LassoLarsCV()
A:sklearn.linear_model.tests.test_least_angle.lars_bic->sklearn.linear_model.LassoLarsIC('bic')
A:sklearn.linear_model.tests.test_least_angle.lars_aic->sklearn.linear_model.LassoLarsIC('aic')
A:sklearn.linear_model.tests.test_least_angle.lars_broken->sklearn.linear_model.LassoLarsIC('<unknown>')
sklearn.linear_model.tests.test_least_angle.test_all_precomputed()
sklearn.linear_model.tests.test_least_angle.test_collinearity()
sklearn.linear_model.tests.test_least_angle.test_lars_add_features()
sklearn.linear_model.tests.test_least_angle.test_lars_cv()
sklearn.linear_model.tests.test_least_angle.test_lars_drop_for_good()
sklearn.linear_model.tests.test_least_angle.test_lars_lstsq()
sklearn.linear_model.tests.test_least_angle.test_lars_n_nonzero_coefs(verbose=False)
sklearn.linear_model.tests.test_least_angle.test_lasso_gives_lstsq_solution()
sklearn.linear_model.tests.test_least_angle.test_lasso_lars_ic()
sklearn.linear_model.tests.test_least_angle.test_lasso_lars_path_length()
sklearn.linear_model.tests.test_least_angle.test_lasso_lars_vs_lasso_cd(verbose=False)
sklearn.linear_model.tests.test_least_angle.test_lasso_lars_vs_lasso_cd_early_stopping(verbose=False)
sklearn.linear_model.tests.test_least_angle.test_lasso_lars_vs_lasso_cd_ill_conditioned()
sklearn.linear_model.tests.test_least_angle.test_multitarget()
sklearn.linear_model.tests.test_least_angle.test_no_path()
sklearn.linear_model.tests.test_least_angle.test_no_path_all_precomputed()
sklearn.linear_model.tests.test_least_angle.test_no_path_precomputed()
sklearn.linear_model.tests.test_least_angle.test_rank_deficient_design()
sklearn.linear_model.tests.test_least_angle.test_simple()
sklearn.linear_model.tests.test_least_angle.test_simple_precomputed()
sklearn.linear_model.tests.test_least_angle.test_singular_matrix()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tests/test_learning_curve.py----------------------------------------
A:sklearn.tests.test_learning_curve.(X, y)->make_classification(n_samples=2, n_features=1, n_informative=1, n_redundant=0, n_classes=2, n_clusters_per_class=1, random_state=0)
A:sklearn.tests.test_learning_curve.estimator->MockImprovingEstimator(20)
A:sklearn.tests.test_learning_curve.(train_sizes, train_scores, test_scores)->learning_curve(estimator, X, y, cv=cv, train_sizes=np.linspace(0.1, 1.0, 10))
A:sklearn.tests.test_learning_curve.(X, _)->make_classification(n_samples=30, n_features=1, n_informative=1, n_redundant=0, n_classes=2, n_clusters_per_class=1, random_state=0)
A:sklearn.tests.test_learning_curve.sys.stdout->StringIO()
A:sklearn.tests.test_learning_curve.out->sys.stdout.getvalue()
A:sklearn.tests.test_learning_curve.train_sizes->numpy.linspace(0.2, 1.0, 5)
A:sklearn.tests.test_learning_curve.(train_sizes_inc, train_scores_inc, test_scores_inc)->learning_curve(estimator, X, y, train_sizes=train_sizes, cv=3, exploit_incremental_learning=True)
A:sklearn.tests.test_learning_curve.(train_sizes_batch, train_scores_batch, test_scores_batch)->learning_curve(estimator, X, y, cv=3, train_sizes=train_sizes, exploit_incremental_learning=False)
A:sklearn.tests.test_learning_curve.(train_sizes, _, _)->assert_warns(RuntimeWarning, learning_curve, estimator, X, y, cv=3, train_sizes=np.linspace(0.33, 1.0, 3))
A:sklearn.tests.test_learning_curve.cv->KFold(n=30, n_folds=3, indices=False)
A:sklearn.tests.test_learning_curve.param_range->numpy.linspace(0, 1, 10)
A:sklearn.tests.test_learning_curve.(train_scores, test_scores)->validation_curve(MockEstimatorWithParameter(), X, y, param_name='param', param_range=param_range, cv=2)
sklearn.tests.test_learning_curve.MockEstimatorWithParameter(self,param=0.5)
sklearn.tests.test_learning_curve.MockEstimatorWithParameter.__init__(self,param=0.5)
sklearn.tests.test_learning_curve.MockEstimatorWithParameter._is_training_data(self,X)
sklearn.tests.test_learning_curve.MockEstimatorWithParameter.fit(self,X_subset,y_subset)
sklearn.tests.test_learning_curve.MockEstimatorWithParameter.predict(self,X)
sklearn.tests.test_learning_curve.MockEstimatorWithParameter.score(self,X=None,y=None)
sklearn.tests.test_learning_curve.MockImprovingEstimator(self,n_max_train_sizes)
sklearn.tests.test_learning_curve.MockImprovingEstimator.__init__(self,n_max_train_sizes)
sklearn.tests.test_learning_curve.MockImprovingEstimator._is_training_data(self,X)
sklearn.tests.test_learning_curve.MockImprovingEstimator.fit(self,X_subset,y_subset=None)
sklearn.tests.test_learning_curve.MockImprovingEstimator.predict(self,X)
sklearn.tests.test_learning_curve.MockImprovingEstimator.score(self,X=None,Y=None)
sklearn.tests.test_learning_curve.MockIncrementalImprovingEstimator(self,n_max_train_sizes)
sklearn.tests.test_learning_curve.MockIncrementalImprovingEstimator.__init__(self,n_max_train_sizes)
sklearn.tests.test_learning_curve.MockIncrementalImprovingEstimator._is_training_data(self,X)
sklearn.tests.test_learning_curve.MockIncrementalImprovingEstimator.partial_fit(self,X,y=None,**params)
sklearn.tests.test_learning_curve.test_learning_curve()
sklearn.tests.test_learning_curve.test_learning_curve_batch_and_incremental_learning_are_equal()
sklearn.tests.test_learning_curve.test_learning_curve_incremental_learning()
sklearn.tests.test_learning_curve.test_learning_curve_incremental_learning_not_possible()
sklearn.tests.test_learning_curve.test_learning_curve_incremental_learning_unsupervised()
sklearn.tests.test_learning_curve.test_learning_curve_n_sample_range_out_of_bounds()
sklearn.tests.test_learning_curve.test_learning_curve_remove_duplicate_sample_sizes()
sklearn.tests.test_learning_curve.test_learning_curve_unsupervised()
sklearn.tests.test_learning_curve.test_learning_curve_verbose()
sklearn.tests.test_learning_curve.test_learning_curve_with_boolean_indices()
sklearn.tests.test_learning_curve.test_validation_curve()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tests/test_multiclass.py----------------------------------------
A:sklearn.tests.test_multiclass.iris->sklearn.datasets.load_iris()
A:sklearn.tests.test_multiclass.rng->numpy.random.RandomState(0)
A:sklearn.tests.test_multiclass.perm->numpy.random.RandomState(0).permutation(iris.target.size)
A:sklearn.tests.test_multiclass.ovr->OneVsRestClassifier(DecisionTreeClassifier())
A:sklearn.tests.test_multiclass.pred->numpy.array([l.argmax() for l in Y_proba])
A:sklearn.tests.test_multiclass.clf->Pipeline([('tree', DecisionTreeClassifier())])
A:sklearn.tests.test_multiclass.pred2->Pipeline([('tree', DecisionTreeClassifier())]).fit(iris.data, iris.target).predict(iris.data)
A:sklearn.tests.test_multiclass.X->numpy.eye(4)
A:sklearn.tests.test_multiclass.y->numpy.array(['a', 'b', 'c', 'd'])
A:sklearn.tests.test_multiclass.y_pred->OneVsRestClassifier(DecisionTreeClassifier()).predict_proba(X)
A:sklearn.tests.test_multiclass.Y->numpy.array([[0, 1, 1], [0, 1, 0], [1, 1, 1], [1, 0, 1], [1, 0, 0]])
A:sklearn.tests.test_multiclass.classes->set('ham eggs spam'.split())
A:sklearn.tests.test_multiclass.base_clf->MultinomialNB(alpha=1)
A:sklearn.tests.test_multiclass.(X, Y)->sklearn.datasets.make_classification(n_samples=100, n_features=20, random_state=0)
A:sklearn.tests.test_multiclass.Y_pred->Pipeline([('tree', DecisionTreeClassifier())]).predict(X_test)
A:sklearn.tests.test_multiclass.decision_only->OneVsRestClassifier(svm.SVR()).fit(X_train, Y_train)
A:sklearn.tests.test_multiclass.Y_proba->Pipeline([('tree', DecisionTreeClassifier())]).predict_proba(X_test)
A:sklearn.tests.test_multiclass.cv->GridSearchCV(ecoc, {'estimator__C': Cs})
A:sklearn.tests.test_multiclass.ovr_pipe->OneVsRestClassifier(clf)
A:sklearn.tests.test_multiclass.ovo->OneVsOneClassifier(svc)
A:sklearn.tests.test_multiclass.multi_clf->OneVsOneClassifier(Perceptron())
A:sklearn.tests.test_multiclass.ovo_prediction->OneVsOneClassifier(Perceptron()).fit(X, y).predict(X)
A:sklearn.tests.test_multiclass.predictions->numpy.vstack([clf.predict(X) for clf in multi_clf.estimators_])
A:sklearn.tests.test_multiclass.scores->numpy.vstack([clf.decision_function(X) for clf in multi_clf.estimators_])
A:sklearn.tests.test_multiclass.votes->numpy.zeros((4, 3))
A:sklearn.tests.test_multiclass.y_ref->numpy.array([2, 0, 1, 2])
A:sklearn.tests.test_multiclass.svc->LinearSVC()
A:sklearn.tests.test_multiclass.ecoc->OutputCodeClassifier(LinearSVC(random_state=0), random_state=0)
sklearn.tests.test_multiclass.test_ecoc_exceptions()
sklearn.tests.test_multiclass.test_ecoc_fit_predict()
sklearn.tests.test_multiclass.test_ecoc_gridsearch()
sklearn.tests.test_multiclass.test_ovo_exceptions()
sklearn.tests.test_multiclass.test_ovo_fit_predict()
sklearn.tests.test_multiclass.test_ovo_gridsearch()
sklearn.tests.test_multiclass.test_ovo_string_y()
sklearn.tests.test_multiclass.test_ovo_ties()
sklearn.tests.test_multiclass.test_ovo_ties2()
sklearn.tests.test_multiclass.test_ovr_always_present()
sklearn.tests.test_multiclass.test_ovr_coef_()
sklearn.tests.test_multiclass.test_ovr_coef_exceptions()
sklearn.tests.test_multiclass.test_ovr_exceptions()
sklearn.tests.test_multiclass.test_ovr_fit_predict()
sklearn.tests.test_multiclass.test_ovr_fit_predict_svc()
sklearn.tests.test_multiclass.test_ovr_gridsearch()
sklearn.tests.test_multiclass.test_ovr_multilabel()
sklearn.tests.test_multiclass.test_ovr_multilabel_dataset()
sklearn.tests.test_multiclass.test_ovr_multilabel_decision_function()
sklearn.tests.test_multiclass.test_ovr_multilabel_predict_proba()
sklearn.tests.test_multiclass.test_ovr_pipeline()
sklearn.tests.test_multiclass.test_ovr_single_label_decision_function()
sklearn.tests.test_multiclass.test_ovr_single_label_predict_proba()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tests/test_base.py----------------------------------------
A:sklearn.tests.test_base.selector->SelectFpr(f_classif, alpha=0.1)
A:sklearn.tests.test_base.new_selector->clone(selector)
A:sklearn.tests.test_base.buggy->Buggy()
A:sklearn.tests.test_base.no_estimator->NoEstimator()
A:sklearn.tests.test_base.varg_est->VargEstimator()
A:sklearn.tests.test_base.clf->Pipeline([('svc', SVC())])
A:sklearn.tests.test_base.clf2->clone(clf)
A:sklearn.tests.test_base.my_estimator->MyEstimator()
A:sklearn.tests.test_base.test->T(K(), K())
A:sklearn.tests.test_base.some_est->T(a=['long_params'] * 1000)
A:sklearn.tests.test_base.est->DeprecatedAttributeEstimator(a=1)
A:sklearn.tests.test_base.svc->SVC()
A:sklearn.tests.test_base.rng->numpy.random.RandomState(0)
A:sklearn.tests.test_base.sample_weight->numpy.random.RandomState(0).randint(1, 10, size=len(ds.target))
sklearn.tests.test_base.Buggy(self,a=None)
sklearn.tests.test_base.Buggy.__init__(self,a=None)
sklearn.tests.test_base.DeprecatedAttributeEstimator(self,a=None,b=None)
sklearn.tests.test_base.DeprecatedAttributeEstimator.__init__(self,a=None,b=None)
sklearn.tests.test_base.DeprecatedAttributeEstimator.b(self)
sklearn.tests.test_base.K(self,c=None,d=None)
sklearn.tests.test_base.K.__init__(self,c=None,d=None)
sklearn.tests.test_base.MyEstimator(self,l1=0,empty=None)
sklearn.tests.test_base.MyEstimator.__init__(self,l1=0,empty=None)
sklearn.tests.test_base.NoEstimator(self)
sklearn.tests.test_base.NoEstimator.__init__(self)
sklearn.tests.test_base.NoEstimator.fit(self,X=None,y=None)
sklearn.tests.test_base.NoEstimator.predict(self,X=None)
sklearn.tests.test_base.T(self,a=None,b=None)
sklearn.tests.test_base.T.__init__(self,a=None,b=None)
sklearn.tests.test_base.VargEstimator(self,*vargs)
sklearn.tests.test_base.VargEstimator.__init__(self,*vargs)
sklearn.tests.test_base.test_clone()
sklearn.tests.test_base.test_clone_2()
sklearn.tests.test_base.test_clone_buggy()
sklearn.tests.test_base.test_clone_empty_array()
sklearn.tests.test_base.test_get_params()
sklearn.tests.test_base.test_get_params_deprecated()
sklearn.tests.test_base.test_is_classifier()
sklearn.tests.test_base.test_repr()
sklearn.tests.test_base.test_score_sample_weight()
sklearn.tests.test_base.test_set_params()
sklearn.tests.test_base.test_str()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tests/test_grid_search.py----------------------------------------
A:sklearn.tests.test_grid_search.X->numpy.arange(20, dtype=np.float64).reshape(5, -1)
A:sklearn.tests.test_grid_search.y->numpy.array([0] * 5 + [1] * 5)
A:sklearn.tests.test_grid_search.grid1->ParameterGrid(params1)
A:sklearn.tests.test_grid_search.grid2->ParameterGrid(params2)
A:sklearn.tests.test_grid_search.points->set((tuple(chain(*sorted(p.items()))) for p in grid2))
A:sklearn.tests.test_grid_search.empty->ParameterGrid({})
A:sklearn.tests.test_grid_search.has_empty->ParameterGrid([{'C': [1, 10]}, {}])
A:sklearn.tests.test_grid_search.clf->SVC(probability=False)
A:sklearn.tests.test_grid_search.grid_search->GridSearchCV(est, est_parameters, cv=cv)
A:sklearn.tests.test_grid_search.sys.stdout->StringIO()
A:sklearn.tests.test_grid_search.(X, y)->make_multilabel_classification(return_indicator=True, random_state=0)
A:sklearn.tests.test_grid_search.clf_no_score->LinearSVCNoScore(random_state=0)
A:sklearn.tests.test_grid_search.grid_search_no_score->GridSearchCV(clf_no_score, {'C': Cs})
A:sklearn.tests.test_grid_search.random_search->RandomizedSearchCV(est, est_parameters, cv=cv)
A:sklearn.tests.test_grid_search.(X_, y_)->make_classification(n_samples=200, n_features=100, random_state=0)
A:sklearn.tests.test_grid_search.cv->KFold(y.shape[0], random_state=0)
A:sklearn.tests.test_grid_search.mask->numpy.ones(X.shape[0], dtype=np.bool)
A:sklearn.tests.test_grid_search.svm->SVC(kernel='linear')
A:sklearn.tests.test_grid_search.y_pred->KFold(y.shape[0], random_state=0).predict(K_test)
A:sklearn.tests.test_grid_search.X_->scipy.sparse.csr_matrix(X_)
A:sklearn.tests.test_grid_search.y_pred2->KFold(y.shape[0], random_state=0).predict(X_[180:])
A:sklearn.tests.test_grid_search.F1Loss->make_scorer(f1_loss, greater_is_better=False)
A:sklearn.tests.test_grid_search.y_pred3->KFold(y.shape[0], random_state=0).predict(X_[180:])
A:sklearn.tests.test_grid_search.y_pred_func->KFold(y.shape[0], random_state=0).predict(X[180:])
A:sklearn.tests.test_grid_search.y_pred_loss->KFold(y.shape[0], random_state=0).predict(X[180:])
A:sklearn.tests.test_grid_search.K_train->numpy.zeros((10, 20))
A:sklearn.tests.test_grid_search.K_test->numpy.dot(X_[180:], X_[:180].T)
A:sklearn.tests.test_grid_search.y_train->numpy.ones((10,))
A:sklearn.tests.test_grid_search.km->KMeans(random_state=0)
A:sklearn.tests.test_grid_search.sc->SpectralClustering()
A:sklearn.tests.test_grid_search.sampler->ParameterSampler(param_distributions=param_distributions, n_iter=10, random_state=0)
A:sklearn.tests.test_grid_search.params->dict(C=distributions.expon(scale=10), gamma=distributions.expon(scale=0.1))
A:sklearn.tests.test_grid_search.search->RandomizedSearchCV(SVC(), n_iter=n_search_iter, cv=n_cv_iter, param_distributions=params, iid=False)
A:sklearn.tests.test_grid_search.sorted_grid_scores->list(sorted(search.grid_scores_, key=lambda x: x.mean_validation_score))
A:sklearn.tests.test_grid_search.correct_score->est.score(X[test], y[test])
A:sklearn.tests.test_grid_search.dec->SVC(probability=False).decision_function(X[test])
A:sklearn.tests.test_grid_search.gs->GridSearchCV(clf, {}, cv=2).fit(X, y)
A:sklearn.tests.test_grid_search.p->Pipeline([('imputer', Imputer(strategy='mean', missing_values='NaN')), ('classifier', MockClassifier())])
sklearn.tests.test_grid_search.BrokenClassifier(self,parameter=None)
sklearn.tests.test_grid_search.BrokenClassifier.__init__(self,parameter=None)
sklearn.tests.test_grid_search.BrokenClassifier.fit(self,X,y)
sklearn.tests.test_grid_search.BrokenClassifier.predict(self,X)
sklearn.tests.test_grid_search.LinearSVCNoScore(LinearSVC)
sklearn.tests.test_grid_search.LinearSVCNoScore.score(self)
sklearn.tests.test_grid_search.MockClassifier(self,foo_param=0)
sklearn.tests.test_grid_search.MockClassifier.__init__(self,foo_param=0)
sklearn.tests.test_grid_search.MockClassifier.fit(self,X,Y)
sklearn.tests.test_grid_search.MockClassifier.get_params(self,deep=False)
sklearn.tests.test_grid_search.MockClassifier.predict(self,T)
sklearn.tests.test_grid_search.MockClassifier.score(self,X=None,Y=None)
sklearn.tests.test_grid_search.MockClassifier.set_params(self,**params)
sklearn.tests.test_grid_search.MockListClassifier(self,foo_param=0,check_y_is_list=False,check_X_is_list=True)
sklearn.tests.test_grid_search.MockListClassifier.__init__(self,foo_param=0,check_y_is_list=False,check_X_is_list=True)
sklearn.tests.test_grid_search.MockListClassifier.fit(self,X,Y)
sklearn.tests.test_grid_search.MockListClassifier.get_params(self,deep=False)
sklearn.tests.test_grid_search.MockListClassifier.predict(self,T)
sklearn.tests.test_grid_search.MockListClassifier.score(self,X=None,Y=None)
sklearn.tests.test_grid_search.MockListClassifier.set_params(self,**params)
sklearn.tests.test_grid_search.test_X_as_list()
sklearn.tests.test_grid_search.test_bad_estimator()
sklearn.tests.test_grid_search.test_deprecated_score_func()
sklearn.tests.test_grid_search.test_grid_search()
sklearn.tests.test_grid_search.test_grid_search_allows_nans()
sklearn.tests.test_grid_search.test_grid_search_bad_param_grid()
sklearn.tests.test_grid_search.test_grid_search_error()
sklearn.tests.test_grid_search.test_grid_search_iid()
sklearn.tests.test_grid_search.test_grid_search_no_score()
sklearn.tests.test_grid_search.test_grid_search_one_grid_point()
sklearn.tests.test_grid_search.test_grid_search_precomputed_kernel()
sklearn.tests.test_grid_search.test_grid_search_precomputed_kernel_error_kernel_function()
sklearn.tests.test_grid_search.test_grid_search_precomputed_kernel_error_nonsquare()
sklearn.tests.test_grid_search.test_grid_search_score_consistency()
sklearn.tests.test_grid_search.test_grid_search_sparse()
sklearn.tests.test_grid_search.test_grid_search_sparse_scoring()
sklearn.tests.test_grid_search.test_grid_search_with_multioutput_data()
sklearn.tests.test_grid_search.test_no_refit()
sklearn.tests.test_grid_search.test_param_sampler()
sklearn.tests.test_grid_search.test_parameter_grid()
sklearn.tests.test_grid_search.test_pickle()
sklearn.tests.test_grid_search.test_predict_proba_disabled()
sklearn.tests.test_grid_search.test_randomized_search_grid_scores()
sklearn.tests.test_grid_search.test_refit()
sklearn.tests.test_grid_search.test_trivial_grid_scores()
sklearn.tests.test_grid_search.test_unsupervised_grid_search()
sklearn.tests.test_grid_search.test_y_as_list()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tests/test_naive_bayes.py----------------------------------------
A:sklearn.tests.test_naive_bayes.X->numpy.array([[-2, -1], [-1, -1], [-1, -2], [1, 1], [1, 2], [2, 1]])
A:sklearn.tests.test_naive_bayes.y->numpy.array([1, 1, 1, 2, 2, 2])
A:sklearn.tests.test_naive_bayes.rng->numpy.random.RandomState(0)
A:sklearn.tests.test_naive_bayes.X1->numpy.random.RandomState(0).normal(size=(10, 3))
A:sklearn.tests.test_naive_bayes.y1->(rng.normal(size=10) > 0).astype(np.int)
A:sklearn.tests.test_naive_bayes.X2->numpy.random.RandomState(0).randint(5, size=(6, 100))
A:sklearn.tests.test_naive_bayes.y2->numpy.array([1, 1, 2, 2, 3, 3])
A:sklearn.tests.test_naive_bayes.clf->MultinomialNB()
A:sklearn.tests.test_naive_bayes.y_pred->MultinomialNB().predict(X2)
A:sklearn.tests.test_naive_bayes.y_pred_proba->MultinomialNB().predict_proba(X)
A:sklearn.tests.test_naive_bayes.y_pred_log_proba->MultinomialNB().predict_log_proba(X)
A:sklearn.tests.test_naive_bayes.clf2->pickle.load(BytesIO(store.getvalue()))
A:sklearn.tests.test_naive_bayes.y_pred2->pickle.load(BytesIO(store.getvalue())).predict(X)
A:sklearn.tests.test_naive_bayes.y_pred_proba2->pickle.load(BytesIO(store.getvalue())).predict_proba(X)
A:sklearn.tests.test_naive_bayes.y_pred_log_proba2->pickle.load(BytesIO(store.getvalue())).predict_log_proba(X)
A:sklearn.tests.test_naive_bayes.clf3->cls()
A:sklearn.tests.test_naive_bayes.y_pred3->cls().predict(X)
A:sklearn.tests.test_naive_bayes.y_pred_proba3->cls().predict_proba(X)
A:sklearn.tests.test_naive_bayes.y_pred_log_proba3->cls().predict_log_proba(X)
A:sklearn.tests.test_naive_bayes.clf1->cls()
A:sklearn.tests.test_naive_bayes.store->BytesIO()
A:sklearn.tests.test_naive_bayes.prior->numpy.exp(clf.class_log_prior_)
A:sklearn.tests.test_naive_bayes.sample_weight->numpy.array([1, 1, 2, 2], dtype=np.float)
A:sklearn.tests.test_naive_bayes.positive_prior->numpy.exp(clf.intercept_[0])
A:sklearn.tests.test_naive_bayes.digits->load_digits()
A:sklearn.tests.test_naive_bayes.binary_3v8->numpy.logical_or(digits.target == 3, digits.target == 8)
A:sklearn.tests.test_naive_bayes.scores->cross_val_score(GaussianNB(), X_3v8, y_3v8, cv=10)
sklearn.tests.test_naive_bayes.check_partial_fit(cls)
sklearn.tests.test_naive_bayes.check_sample_weight_multiclass(cls)
sklearn.tests.test_naive_bayes.test_check_accuracy_on_digits()
sklearn.tests.test_naive_bayes.test_coef_intercept_shape()
sklearn.tests.test_naive_bayes.test_discrete_prior()
sklearn.tests.test_naive_bayes.test_discretenb_partial_fit()
sklearn.tests.test_naive_bayes.test_discretenb_pickle()
sklearn.tests.test_naive_bayes.test_discretenb_predict_proba()
sklearn.tests.test_naive_bayes.test_discretenb_provide_prior()
sklearn.tests.test_naive_bayes.test_discretenb_uniform_prior()
sklearn.tests.test_naive_bayes.test_gnb()
sklearn.tests.test_naive_bayes.test_gnb_prior()
sklearn.tests.test_naive_bayes.test_input_check_fit()
sklearn.tests.test_naive_bayes.test_input_check_partial_fit()
sklearn.tests.test_naive_bayes.test_mnnb()
sklearn.tests.test_naive_bayes.test_sample_weight_mnb()
sklearn.tests.test_naive_bayes.test_sample_weight_multiclass()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tests/test_hmm.py----------------------------------------
A:sklearn.tests.test_hmm.rng->numpy.random.RandomState(0)
A:sklearn.tests.test_hmm.self.prng->numpy.random.RandomState(9)
A:sklearn.tests.test_hmm.h->sklearn.hmm.GMMHMM(self.n_components, covariance_type=self.covariance_type)
A:sklearn.tests.test_hmm.framelogprob->numpy.log(self.prng.rand(nobs, n_components))
A:sklearn.tests.test_hmm.(h, framelogprob)->self.setup_example_hmm()
A:sklearn.tests.test_hmm.d->dict(((x[:-1], getattr(h, x)) for x in params))
A:sklearn.tests.test_hmm.h2->self.StubHMM(h.n_components, **d)
A:sklearn.tests.test_hmm.startprob->numpy.array([1, 0, 0, 0, 0])
A:sklearn.tests.test_hmm.transmat->numpy.array([[0.9, 0.1, 0, 0, 0], [0, 0.9, 0.1, 0, 0], [0, 0, 0.9, 0.1, 0], [0, 0, 0, 0.9, 0.1], [0, 0, 0, 0, 1.0]])
A:sklearn.tests.test_hmm.(logprob, fwdlattice)->sklearn.hmm.GMMHMM(self.n_components, covariance_type=self.covariance_type)._do_forward_pass(framelogprob)
A:sklearn.tests.test_hmm.reffwdlattice->numpy.array([[0.45, 0.1], [0.3105, 0.041], [0.023, 0.0975], [0.0408, 0.015], [0.0298, 0.0046]])
A:sklearn.tests.test_hmm.bwdlattice->sklearn.hmm.GMMHMM(self.n_components, covariance_type=self.covariance_type)._do_backward_pass(framelogprob)
A:sklearn.tests.test_hmm.refbwdlattice->numpy.array([[0.0661, 0.0455], [0.0906, 0.1503], [0.4593, 0.2437], [0.69, 0.41], [1.0, 1.0]])
A:sklearn.tests.test_hmm.(logprob, state_sequence)->sklearn.hmm.GMMHMM(self.n_components, covariance_type=self.covariance_type).decode(observations)
A:sklearn.tests.test_hmm.nobs->len(refstateseq)
A:sklearn.tests.test_hmm.(logprob, posteriors)->sklearn.hmm.GMMHMM(self.n_components, covariance_type=self.covariance_type).score_samples([])
A:sklearn.tests.test_hmm.refposteriors->numpy.array([[0.8673, 0.1327], [0.8204, 0.1796], [0.3075, 0.6925], [0.8204, 0.1796], [0.8673, 0.1327]])
A:sklearn.tests.test_hmm.(logprob, hmmposteriors)->sklearn.hmm.GMMHMM(self.n_components, covariance_type=self.covariance_type).score_samples([])
A:sklearn.tests.test_hmm.gmmposteriors->numpy.exp(framelogprob - np.tile(norm, (1, n_components)))
A:sklearn.tests.test_hmm.(viterbi_ll, state_sequence)->sklearn.hmm.GMMHMM(self.n_components, covariance_type=self.covariance_type).decode([])
A:sklearn.tests.test_hmm.gmmstate_sequence->numpy.exp(framelogprob - np.tile(norm, (1, n_components))).argmax(axis=1)
A:sklearn.tests.test_hmm.self.prngprng->numpy.random.RandomState(10)
A:sklearn.tests.test_hmm.self.startprob->self.prng.rand(self.n_components)
A:sklearn.tests.test_hmm.self.transmat->self.prng.rand(self.n_components, self.n_components)
A:sklearn.tests.test_hmm.self.means->check_random_state(prng).randint(-20, 20, (n_components, n_features))
A:sklearn.tests.test_hmm.gaussidx->numpy.repeat(np.arange(self.n_components), 5)
A:sklearn.tests.test_hmm.(ll, posteriors)->sklearn.hmm.GMMHMM(self.n_components, covariance_type=self.covariance_type).score_samples(obs)
A:sklearn.tests.test_hmm.(viterbi_ll, stateseq)->sklearn.hmm.GMMHMM(self.n_components, covariance_type=self.covariance_type).decode(obs)
A:sklearn.tests.test_hmm.h.covars_->numpy.tile(np.identity(10), (5, 1, 1))
A:sklearn.tests.test_hmm.h.transmat_->sklearn.hmm.normalize(self.prng.rand(self.n_components, self.n_components), axis=1)
A:sklearn.tests.test_hmm.delta_min->numpy.diff(trainll).min()
A:sklearn.tests.test_hmm.h.means_->numpy.zeros((5, 10))
A:sklearn.tests.test_hmm.self.h->sklearn.hmm.MultinomialHMM(self.n_components, startprob=self.startprob, transmat=self.transmat)
A:sklearn.tests.test_hmm.emissionprob->numpy.array([[0.8, 0.2, 0.0], [0.7, 0.2, 1.0]])
A:sklearn.tests.test_hmm.state_sequence->self.h.predict(observations)
A:sklearn.tests.test_hmm.posteriors->self.h.predict_proba(observations)
A:sklearn.tests.test_hmm.idx->numpy.repeat(np.arange(self.n_components), 10)
A:sklearn.tests.test_hmm.h.startprob_->sklearn.hmm.normalize(self.prng.rand(self.n_components))
A:sklearn.tests.test_hmm.h.emissionprob_->sklearn.hmm.normalize(self.prng.rand(self.n_components, self.n_symbols), axis=1)
A:sklearn.tests.test_hmm.learner->sklearn.hmm.MultinomialHMM(self.n_components)
A:sklearn.tests.test_hmm.prng->check_random_state(prng)
A:sklearn.tests.test_hmm.g->sklearn.mixture.GMM(n_mix, covariance_type=covariance_type)
A:sklearn.tests.test_hmm.g.means_->check_random_state(prng).randint(-20, 20, (n_mix, n_features))
A:sklearn.tests.test_hmm.g.weights_->sklearn.hmm.normalize(prng.rand(n_mix))
A:sklearn.tests.test_hmm.refstateseq->numpy.repeat(np.arange(self.n_components), 5)
A:sklearn.tests.test_hmm.Anorm->sklearn.hmm.normalize(A, axis)
sklearn.tests.test_hmm.GMMHMMBaseTester(object)
sklearn.tests.test_hmm.GMMHMMBaseTester.setUp(self)
sklearn.tests.test_hmm.GMMHMMBaseTester.test_attributes(self)
sklearn.tests.test_hmm.GMMHMMBaseTester.test_fit(self,params='stmwc',n_iter=5,verbose=False,**kwargs)
sklearn.tests.test_hmm.GMMHMMBaseTester.test_fit_works_on_sequences_of_different_length(self)
sklearn.tests.test_hmm.GMMHMMBaseTester.test_sample(self,n=1000)
sklearn.tests.test_hmm.GMMHMMBaseTester.test_score_samples_and_decode(self)
sklearn.tests.test_hmm.GaussianHMMBaseTester(object)
sklearn.tests.test_hmm.GaussianHMMBaseTester.setUp(self)
sklearn.tests.test_hmm.GaussianHMMBaseTester.test_bad_covariance_type(self)
sklearn.tests.test_hmm.GaussianHMMBaseTester.test_fit(self,params='stmc',n_iter=5,verbose=False,**kwargs)
sklearn.tests.test_hmm.GaussianHMMBaseTester.test_fit_non_ergodic_transmat(self)
sklearn.tests.test_hmm.GaussianHMMBaseTester.test_fit_with_length_one_signal(self)
sklearn.tests.test_hmm.GaussianHMMBaseTester.test_fit_with_priors(self,params='stmc',n_iter=5,verbose=False)
sklearn.tests.test_hmm.GaussianHMMBaseTester.test_fit_works_on_sequences_of_different_length(self)
sklearn.tests.test_hmm.GaussianHMMBaseTester.test_sample(self,n=1000)
sklearn.tests.test_hmm.GaussianHMMBaseTester.test_score_samples_and_decode(self)
sklearn.tests.test_hmm.MultinomialHMMTestCase(TestCase)
sklearn.tests.test_hmm.MultinomialHMMTestCase.setUp(self)
sklearn.tests.test_hmm.MultinomialHMMTestCase.test_attributes(self)
sklearn.tests.test_hmm.MultinomialHMMTestCase.test_decode_map_algorithm(self)
sklearn.tests.test_hmm.MultinomialHMMTestCase.test_fit(self,params='ste',n_iter=5,verbose=False,**kwargs)
sklearn.tests.test_hmm.MultinomialHMMTestCase.test_fit_emissionprob(self)
sklearn.tests.test_hmm.MultinomialHMMTestCase.test_fit_with_init(self,params='ste',n_iter=5,verbose=False,**kwargs)
sklearn.tests.test_hmm.MultinomialHMMTestCase.test_predict(self)
sklearn.tests.test_hmm.MultinomialHMMTestCase.test_sample(self,n=1000)
sklearn.tests.test_hmm.MultinomialHMMTestCase.test_score_samples(self)
sklearn.tests.test_hmm.MultinomialHMMTestCase.test_set_emissionprob(self)
sklearn.tests.test_hmm.MultinomialHMMTestCase.test_wikipedia_viterbi_example(self)
sklearn.tests.test_hmm.TestBaseHMM(TestCase)
sklearn.tests.test_hmm.TestBaseHMM.StubHMM(hmm._BaseHMM)
sklearn.tests.test_hmm.TestBaseHMM.StubHMM._compute_log_likelihood(self,X)
sklearn.tests.test_hmm.TestBaseHMM.StubHMM._generate_sample_from_state(self)
sklearn.tests.test_hmm.TestBaseHMM.StubHMM._init(self)
sklearn.tests.test_hmm.TestBaseHMM.setUp(self)
sklearn.tests.test_hmm.TestBaseHMM.setup_example_hmm(self)
sklearn.tests.test_hmm.TestBaseHMM.test_base_hmm_attributes(self)
sklearn.tests.test_hmm.TestBaseHMM.test_do_backward_pass(self)
sklearn.tests.test_hmm.TestBaseHMM.test_do_forward_pass(self)
sklearn.tests.test_hmm.TestBaseHMM.test_do_viterbi_pass(self)
sklearn.tests.test_hmm.TestBaseHMM.test_hmm_decode_consistent_with_gmm(self)
sklearn.tests.test_hmm.TestBaseHMM.test_hmm_score_samples_consistent_with_gmm(self)
sklearn.tests.test_hmm.TestBaseHMM.test_init(self)
sklearn.tests.test_hmm.TestBaseHMM.test_score_samples(self)
sklearn.tests.test_hmm.TestBaseHMM.test_set_startprob(self)
sklearn.tests.test_hmm.TestBaseHMM.test_set_transmat(self)
sklearn.tests.test_hmm.TestGMMHMMWithDiagCovars(GMMHMMBaseTester,TestCase)
sklearn.tests.test_hmm.TestGMMHMMWithDiagCovars.test_fit_means(self)
sklearn.tests.test_hmm.TestGMMHMMWithDiagCovars.test_fit_startprob_and_transmat(self)
sklearn.tests.test_hmm.TestGMMHMMWithFullCovars(GMMHMMBaseTester,TestCase)
sklearn.tests.test_hmm.TestGMMHMMWithTiedCovars(GMMHMMBaseTester,TestCase)
sklearn.tests.test_hmm.TestGaussianHMMWithDiagonalCovars(GaussianHMMBaseTester,TestCase)
sklearn.tests.test_hmm.TestGaussianHMMWithFullCovars(GaussianHMMBaseTester,TestCase)
sklearn.tests.test_hmm.TestGaussianHMMWithSphericalCovars(GaussianHMMBaseTester,TestCase)
sklearn.tests.test_hmm.TestGaussianHMMWithSphericalCovars.test_fit_startprob_and_transmat(self)
sklearn.tests.test_hmm.TestGaussianHMMWithTiedCovars(GaussianHMMBaseTester,TestCase)
sklearn.tests.test_hmm.create_random_gmm(n_mix,n_features,covariance_type,prng=0)
sklearn.tests.test_hmm.test_normalize_1D()
sklearn.tests.test_hmm.test_normalize_3D()
sklearn.tests.test_hmm.train_hmm_and_keep_track_of_log_likelihood(hmm,obs,n_iter=1,**kwargs)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tests/test_qda.py----------------------------------------
A:sklearn.tests.test_qda.X->numpy.array([[0, 0], [-2, -2], [-2, -1], [-1, -1], [-1, -2], [1, 3], [1, 2], [2, 1], [2, 2]])
A:sklearn.tests.test_qda.y->numpy.array([1, 1, 1, 1, 1, 2, 2, 2, 2])
A:sklearn.tests.test_qda.y3->numpy.array([1, 2, 3, 2, 3, 1, 2, 3, 1])
A:sklearn.tests.test_qda.X1->numpy.array([[-3], [-2], [-1], [-1], [0], [1], [1], [2], [3]])
A:sklearn.tests.test_qda.X2->numpy.array([[-3, 0], [-2, 0], [-1, 0], [-1, 0], [0, 0], [1, 0], [1, 0], [2, 0], [3, 0]])
A:sklearn.tests.test_qda.clf->sklearn.qda.QDA(reg_param=0.01)
A:sklearn.tests.test_qda.y_pred->sklearn.qda.QDA(reg_param=0.01).fit(X2, y).predict(X2)
A:sklearn.tests.test_qda.y_pred1->sklearn.qda.QDA(reg_param=0.01).fit(X1, y).predict(X1)
A:sklearn.tests.test_qda.y_proba_pred1->sklearn.qda.QDA(reg_param=0.01).predict_proba(X1)
A:sklearn.tests.test_qda.y_log_proba_pred1->sklearn.qda.QDA(reg_param=0.01).predict_log_proba(X1)
A:sklearn.tests.test_qda.y_pred3->sklearn.qda.QDA(reg_param=0.01).fit(X, y3).predict(X)
A:sklearn.tests.test_qda.n_pos->numpy.sum(y_pred == 2)
A:sklearn.tests.test_qda.n_pos2->numpy.sum(y_pred == 2)
sklearn.tests.test_qda.test_qda()
sklearn.tests.test_qda.test_qda_priors()
sklearn.tests.test_qda.test_qda_regularization()
sklearn.tests.test_qda.test_qda_store_covariances()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tests/test_cross_validation.py----------------------------------------
A:sklearn.tests.test_cross_validation.X->numpy.array([[-3, 4], [2, 4], [3, 3], [0, 2], [-3, 1], [-2, 1], [0, 0], [-2, -1], [-1, -2], [1, -2]])
A:sklearn.tests.test_cross_validation.T->T.reshape(len(T), -1).reshape(len(T), -1)
A:sklearn.tests.test_cross_validation.X_sparse->coo_matrix(X)
A:sklearn.tests.test_cross_validation.expected_n_iter->len(cv)
A:sklearn.tests.test_cross_validation.collected_test_samples->set()
A:sklearn.tests.test_cross_validation.cv->sklearn.cross_validation._check_cv(3, X, y_multioutput, classifier=True)
A:sklearn.tests.test_cross_validation.kf->sklearn.cross_validation.KFold(4, 2, indices=False)
A:sklearn.tests.test_cross_validation.splits->sklearn.cross_validation.StratifiedShuffleSplit(labels, n_iter=n_iter, test_size=1.0 / n_folds, random_state=0)
A:sklearn.tests.test_cross_validation.(train, test)->next(splits)
A:sklearn.tests.test_cross_validation.labels->numpy.array([1, 2, 3, 4])
A:sklearn.tests.test_cross_validation.ind->numpy.arange(300)
A:sklearn.tests.test_cross_validation.sorted_array->numpy.arange(201, 300)
A:sklearn.tests.test_cross_validation.all_folds->numpy.concatenate((all_folds, ind[test]))
A:sklearn.tests.test_cross_validation.kf0->list(cval.StratifiedKFold(labels, 5, shuffle=True, random_state=0))
A:sklearn.tests.test_cross_validation.kf1->list(cval.StratifiedKFold(labels, 5, shuffle=True, random_state=1))
A:sklearn.tests.test_cross_validation.digits->load_digits()
A:sklearn.tests.test_cross_validation.model->SVC(C=10, gamma=0.005)
A:sklearn.tests.test_cross_validation.n->len(y)
A:sklearn.tests.test_cross_validation.mean_score->sklearn.cross_validation.cross_val_score(model, X, y, cv=cv).mean()
A:sklearn.tests.test_cross_validation.ss1->sklearn.cross_validation.ShuffleSplit(10, test_size=0.2, random_state=0)
A:sklearn.tests.test_cross_validation.ss2->sklearn.cross_validation.ShuffleSplit(10, test_size=2, random_state=0)
A:sklearn.tests.test_cross_validation.ss3->sklearn.cross_validation.ShuffleSplit(10, test_size=np.int32(2), random_state=0)
A:sklearn.tests.test_cross_validation.ss4->sklearn.cross_validation.ShuffleSplit(10, test_size=typ(2), random_state=0)
A:sklearn.tests.test_cross_validation.y->numpy.array([[1, 1], [0, 1], [0, 1], [0, 1], [1, 1], [0, 1], [1, 0], [1, 1], [1, 0], [0, 0]])
A:sklearn.tests.test_cross_validation.sss->sklearn.cross_validation.StratifiedShuffleSplit(y, 6, test_size=0.33, random_state=0)
A:sklearn.tests.test_cross_validation.sss1->sklearn.cross_validation.StratifiedShuffleSplit(y, indices=False, random_state=0)
A:sklearn.tests.test_cross_validation.(train_mask, test_mask)->next(iter(sss1))
A:sklearn.tests.test_cross_validation.sss2->sklearn.cross_validation.StratifiedShuffleSplit(y, indices=True, random_state=0)
A:sklearn.tests.test_cross_validation.(train_indices, test_indices)->next(iter(sss2))
A:sklearn.tests.test_cross_validation.bf->scipy.stats.binom(n_splits, p)
A:sklearn.tests.test_cross_validation.p->Pipeline([('imputer', Imputer(strategy='mean', missing_values='NaN')), ('classifier', MockClassifier())])
A:sklearn.tests.test_cross_validation.label_counts->numpy.unique(labels)
A:sklearn.tests.test_cross_validation.labels_changing->numpy.array(labels, copy=True)
A:sklearn.tests.test_cross_validation.lolo->sklearn.cross_validation.LeaveOneLabelOut(labels, indices=False)
A:sklearn.tests.test_cross_validation.lolo_changing->sklearn.cross_validation.LeaveOneLabelOut(labels_changing)
A:sklearn.tests.test_cross_validation.lplo->sklearn.cross_validation.LeavePLabelOut(labels, p=2)
A:sklearn.tests.test_cross_validation.lplo_changing->sklearn.cross_validation.LeavePLabelOut(labels_changing, p=2)
A:sklearn.tests.test_cross_validation.clf->KNeighborsClassifier(n_neighbors=1)
A:sklearn.tests.test_cross_validation.scores->sklearn.cross_validation.cross_val_score(reg, X, y, cv=5)
A:sklearn.tests.test_cross_validation.svm->SVC(kernel='linear')
A:sklearn.tests.test_cross_validation.iris->load_iris()
A:sklearn.tests.test_cross_validation.cv_indices->sklearn.cross_validation.KFold(len(y), 5, indices=True)
A:sklearn.tests.test_cross_validation.scores_indices->sklearn.cross_validation.cross_val_score(svm, X, y, cv=cv_indices)
A:sklearn.tests.test_cross_validation.cv_masks->sklearn.cross_validation.KFold(len(y), 5, indices=False)
A:sklearn.tests.test_cross_validation.scores_masks->sklearn.cross_validation.cross_val_score(svm, X, y, cv=cv_masks)
A:sklearn.tests.test_cross_validation.linear_kernel->numpy.dot(X, X.T)
A:sklearn.tests.test_cross_validation.score_precomputed->sklearn.cross_validation.cross_val_score(svm, linear_kernel, y)
A:sklearn.tests.test_cross_validation.score_linear->sklearn.cross_validation.cross_val_score(svm, X, y)
A:sklearn.tests.test_cross_validation.n_classes->len(np.unique(y))
A:sklearn.tests.test_cross_validation.score->sklearn.cross_validation.cross_val_score(clf, X, y, score_func=score_func)
A:sklearn.tests.test_cross_validation.X_s->coo_matrix(X)
A:sklearn.tests.test_cross_validation.split->sklearn.cross_validation.train_test_split(X, X_s, y)
A:sklearn.tests.test_cross_validation.zo_scores->sklearn.cross_validation.cross_val_score(clf, iris.data, iris.target, scoring='accuracy', cv=5)
A:sklearn.tests.test_cross_validation.f1_scores->sklearn.cross_validation.cross_val_score(clf, iris.data, iris.target, score_func=f1_score, cv=5)
A:sklearn.tests.test_cross_validation.(X, y)->make_regression(n_samples=30, n_features=20, n_informative=5, random_state=0)
A:sklearn.tests.test_cross_validation.reg->Ridge()
A:sklearn.tests.test_cross_validation.r2_scores->sklearn.cross_validation.cross_val_score(reg, X, y, scoring='r2', cv=5)
A:sklearn.tests.test_cross_validation.mse_scores->sklearn.cross_validation.cross_val_score(reg, X, y, cv=5, scoring='mean_squared_error')
A:sklearn.tests.test_cross_validation.expected_mse->numpy.array([-763.07, -553.16, -274.38, -273.26, -1681.99])
A:sklearn.tests.test_cross_validation.ev_scores->sklearn.cross_validation.cross_val_score(reg, X, y, cv=5, score_func=explained_variance_score)
A:sklearn.tests.test_cross_validation.(score, scores, pvalue)->sklearn.cross_validation.permutation_test_score(svm, X, y, score_func=accuracy_score, cv=cv)
A:sklearn.tests.test_cross_validation.(score_label, _, pvalue_label)->sklearn.cross_validation.permutation_test_score(svm_sparse, X_sparse, y, cv=cv_sparse, scoring='accuracy', labels=np.ones(y.size), random_state=0)
A:sklearn.tests.test_cross_validation.scorer->make_scorer(fbeta_score, beta=2)
A:sklearn.tests.test_cross_validation.svm_sparse->SVC(kernel='linear')
A:sklearn.tests.test_cross_validation.cv_sparse->sklearn.cross_validation.StratifiedKFold(y, 2)
A:sklearn.tests.test_cross_validation.loo->sklearn.cross_validation.LeaveOneOut(4, indices=False)
A:sklearn.tests.test_cross_validation.lpo->sklearn.cross_validation.LeavePOut(4, 2, indices=False)
A:sklearn.tests.test_cross_validation.skf->sklearn.cross_validation.StratifiedKFold(y, 2, indices=False)
A:sklearn.tests.test_cross_validation.lopo->sklearn.cross_validation.LeavePLabelOut(labels, 2, indices=False)
A:sklearn.tests.test_cross_validation.ss->sklearn.cross_validation.ShuffleSplit(10, random_state=21)
A:sklearn.tests.test_cross_validation.b->sklearn.cross_validation.Bootstrap(2)
A:sklearn.tests.test_cross_validation.loo_mask->sklearn.cross_validation.LeaveOneOut(5, indices=False)
A:sklearn.tests.test_cross_validation.loo_ind->sklearn.cross_validation.LeaveOneOut(5, indices=True)
A:sklearn.tests.test_cross_validation.lpo_mask->sklearn.cross_validation.LeavePOut(10, 2, indices=False)
A:sklearn.tests.test_cross_validation.lpo_ind->sklearn.cross_validation.LeavePOut(10, 2, indices=True)
A:sklearn.tests.test_cross_validation.kf_mask->sklearn.cross_validation.KFold(10, 5, indices=False, shuffle=True, random_state=1)
A:sklearn.tests.test_cross_validation.kf_ind->sklearn.cross_validation.KFold(10, 5, indices=True, shuffle=True, random_state=1)
A:sklearn.tests.test_cross_validation.skf_mask->sklearn.cross_validation.StratifiedKFold(y, 3, indices=False)
A:sklearn.tests.test_cross_validation.skf_ind->sklearn.cross_validation.StratifiedKFold(y, 3, indices=True)
A:sklearn.tests.test_cross_validation.lolo_mask->sklearn.cross_validation.LeaveOneLabelOut(labels, indices=False)
A:sklearn.tests.test_cross_validation.lolo_ind->sklearn.cross_validation.LeaveOneLabelOut(labels, indices=True)
A:sklearn.tests.test_cross_validation.lopo_mask->sklearn.cross_validation.LeavePLabelOut(labels, 2, indices=False)
A:sklearn.tests.test_cross_validation.lopo_ind->sklearn.cross_validation.LeavePLabelOut(labels, 2, indices=True)
A:sklearn.tests.test_cross_validation.clfp->SVC(kernel='precomputed')
A:sklearn.tests.test_cross_validation.K->numpy.dot(X, X.T)
A:sklearn.tests.test_cross_validation.(X_tr, y_tr)->sklearn.cross_validation._safe_split(clf, X, y, tr)
A:sklearn.tests.test_cross_validation.(K_tr, y_tr2)->sklearn.cross_validation._safe_split(clfp, K, y, tr)
A:sklearn.tests.test_cross_validation.(X_te, y_te)->sklearn.cross_validation._safe_split(clf, X, y, te, tr)
A:sklearn.tests.test_cross_validation.(K_te, y_te2)->sklearn.cross_validation._safe_split(clfp, K, y, te, tr)
A:sklearn.tests.test_cross_validation.y_binary->numpy.array([0, 1, 0, 1, 0, 0, 1, 1, 1])
A:sklearn.tests.test_cross_validation.y_multiclass->numpy.array([0, 1, 0, 1, 2, 1, 2, 0, 2])
A:sklearn.tests.test_cross_validation.y_indicator_matrix->LabelBinarizer().fit_transform(y_seq_of_seqs)
A:sklearn.tests.test_cross_validation.y_multioutput->numpy.array([[1, 2], [0, 3], [0, 0], [3, 1], [2, 0]])
A:sklearn.tests.test_cross_validation.scoring_micro->make_scorer(precision_score, average='micro')
A:sklearn.tests.test_cross_validation.scoring_macro->make_scorer(precision_score, average='macro')
A:sklearn.tests.test_cross_validation.scoring_samples->make_scorer(precision_score, average='samples')
A:sklearn.tests.test_cross_validation.score_micro->sklearn.cross_validation.cross_val_score(clf, X, y, scoring=scoring_micro, cv=5)
A:sklearn.tests.test_cross_validation.score_macro->sklearn.cross_validation.cross_val_score(clf, X, y, scoring=scoring_macro, cv=5)
A:sklearn.tests.test_cross_validation.score_samples->sklearn.cross_validation.cross_val_score(clf, X, y, scoring=scoring_samples, cv=5)
sklearn.tests.test_cross_validation.MockClassifier(self,a=0,allow_nd=False)
sklearn.tests.test_cross_validation.MockClassifier.__init__(self,a=0,allow_nd=False)
sklearn.tests.test_cross_validation.MockClassifier.fit(self,X,Y=None,sample_weight=None,class_prior=None)
sklearn.tests.test_cross_validation.MockClassifier.predict(self,T)
sklearn.tests.test_cross_validation.MockClassifier.score(self,X=None,Y=None)
sklearn.tests.test_cross_validation.MockListClassifier(self,foo_param=0,check_y_is_list=False,check_X_is_list=True)
sklearn.tests.test_cross_validation.MockListClassifier.__init__(self,foo_param=0,check_y_is_list=False,check_X_is_list=True)
sklearn.tests.test_cross_validation.MockListClassifier.fit(self,X,Y)
sklearn.tests.test_cross_validation.MockListClassifier.predict(self,T)
sklearn.tests.test_cross_validation.MockListClassifier.score(self,X=None,Y=None)
sklearn.tests.test_cross_validation.check_cv_coverage(cv,expected_n_iter=None,n_samples=None)
sklearn.tests.test_cross_validation.check_valid_split(train,test,n_samples=None)
sklearn.tests.test_cross_validation.test_bootstrap_errors()
sklearn.tests.test_cross_validation.test_bootstrap_test_sizes()
sklearn.tests.test_cross_validation.test_check_cv_return_types()
sklearn.tests.test_cross_validation.test_cross_indices_exception()
sklearn.tests.test_cross_validation.test_cross_val_generator_mask_indices_same()
sklearn.tests.test_cross_validation.test_cross_val_generator_with_default_indices()
sklearn.tests.test_cross_validation.test_cross_val_generator_with_indices()
sklearn.tests.test_cross_validation.test_cross_val_generator_with_mask()
sklearn.tests.test_cross_validation.test_cross_val_score()
sklearn.tests.test_cross_validation.test_cross_val_score_allow_nans()
sklearn.tests.test_cross_validation.test_cross_val_score_errors()
sklearn.tests.test_cross_validation.test_cross_val_score_fit_params()
sklearn.tests.test_cross_validation.test_cross_val_score_mask()
sklearn.tests.test_cross_validation.test_cross_val_score_multilabel()
sklearn.tests.test_cross_validation.test_cross_val_score_precomputed()
sklearn.tests.test_cross_validation.test_cross_val_score_score_func()
sklearn.tests.test_cross_validation.test_cross_val_score_with_score_func_classification()
sklearn.tests.test_cross_validation.test_cross_val_score_with_score_func_regression()
sklearn.tests.test_cross_validation.test_kfold_balance()
sklearn.tests.test_cross_validation.test_kfold_can_detect_dependent_samples_on_digits()
sklearn.tests.test_cross_validation.test_kfold_indices()
sklearn.tests.test_cross_validation.test_kfold_no_shuffle()
sklearn.tests.test_cross_validation.test_kfold_valueerrors()
sklearn.tests.test_cross_validation.test_leave_label_out_changing_labels()
sklearn.tests.test_cross_validation.test_permutation_score()
sklearn.tests.test_cross_validation.test_permutation_test_score_allow_nans()
sklearn.tests.test_cross_validation.test_safe_split_with_precomputed_kernel()
sklearn.tests.test_cross_validation.test_shuffle_kfold()
sklearn.tests.test_cross_validation.test_shuffle_split()
sklearn.tests.test_cross_validation.test_shuffle_stratifiedkfold()
sklearn.tests.test_cross_validation.test_shufflesplit_errors()
sklearn.tests.test_cross_validation.test_shufflesplit_reproducible()
sklearn.tests.test_cross_validation.test_stratified_kfold_no_shuffle()
sklearn.tests.test_cross_validation.test_stratified_kfold_ratios()
sklearn.tests.test_cross_validation.test_stratified_shuffle_split_even()
sklearn.tests.test_cross_validation.test_stratified_shuffle_split_init()
sklearn.tests.test_cross_validation.test_stratified_shuffle_split_iter()
sklearn.tests.test_cross_validation.test_stratified_shuffle_split_iter_no_indices()
sklearn.tests.test_cross_validation.test_stratifiedkfold_balance()
sklearn.tests.test_cross_validation.test_train_test_split()
sklearn.tests.test_cross_validation.test_train_test_split_allow_nans()
sklearn.tests.test_cross_validation.test_train_test_split_errors()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tests/test_check_build.py----------------------------------------
sklearn.tests.test_check_build.test_raise_build_error()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tests/test_random_projection.py----------------------------------------
A:sklearn.tests.test_random_projection.all_random_matrix->set(all_sparse_random_matrix + all_dense_random_matrix)
A:sklearn.tests.test_random_projection.all_RandomProjection->set(all_SparseRandomProjection + all_DenseRandomProjection)
A:sklearn.tests.test_random_projection.rng->numpy.random.RandomState(0)
A:sklearn.tests.test_random_projection.data_coo->scipy.sparse.coo_matrix((rng.randn(n_nonzeros), (rng.randint(n_samples, size=n_nonzeros), rng.randint(n_features, size=n_nonzeros))), shape=(n_samples, n_features))
A:sklearn.tests.test_random_projection.n_nonzeros->int(n_samples * n_features / 100.0)
A:sklearn.tests.test_random_projection.(data, data_csr)->make_sparse_random_data(n_samples, n_features, n_nonzeros)
A:sklearn.tests.test_random_projection.A->densify(A)
A:sklearn.tests.test_random_projection.values->numpy.unique(A)
A:sklearn.tests.test_random_projection.(data, _)->make_sparse_random_data(5, n_features, int(n_features / 4))
A:sklearn.tests.test_random_projection.rp->RandomProjection(n_components=100, density=0.001, random_state=0)
A:sklearn.tests.test_random_projection.original_distances->original_distances.ravel().ravel()
A:sklearn.tests.test_random_projection.projected->RandomProjection(n_components=100, density=0.001, random_state=0).fit_transform(data)
A:sklearn.tests.test_random_projection.projected_distances->projected_distances.ravel().ravel()
A:sklearn.tests.test_random_projection.sparse_data->scipy.sparse.csr_matrix(data)
A:sklearn.tests.test_random_projection.projected_1->RandomProjection(n_components=100, density=0.001, random_state=0).transform(data)
A:sklearn.tests.test_random_projection.projected_2->RandomProjection(n_components=100, density=0.001, random_state=0).transform(data)
A:sklearn.tests.test_random_projection.rp2->RandomProjection(random_state=0, eps=0.5)
A:sklearn.tests.test_random_projection.projected_3->RandomProjection(random_state=0, eps=0.5).fit_transform(data)
sklearn.tests.test_random_projection.check_input_size_random_matrix(random_matrix)
sklearn.tests.test_random_projection.check_input_with_sparse_random_matrix(random_matrix)
sklearn.tests.test_random_projection.check_size_generated(random_matrix)
sklearn.tests.test_random_projection.check_zero_mean_and_unit_norm(random_matrix)
sklearn.tests.test_random_projection.densify(matrix)
sklearn.tests.test_random_projection.make_sparse_random_data(n_samples,n_features,n_nonzeros)
sklearn.tests.test_random_projection.test_SparseRandomProjection_output_representation()
sklearn.tests.test_random_projection.test_basic_property_of_random_matrix()
sklearn.tests.test_random_projection.test_correct_RandomProjection_dimensions_embedding()
sklearn.tests.test_random_projection.test_gaussian_random_matrix()
sklearn.tests.test_random_projection.test_input_size_jl_min_dim()
sklearn.tests.test_random_projection.test_invalid_jl_domain()
sklearn.tests.test_random_projection.test_random_projection_embedding_quality()
sklearn.tests.test_random_projection.test_random_projection_transformer_invalid_input()
sklearn.tests.test_random_projection.test_sparse_random_matrix()
sklearn.tests.test_random_projection.test_sparse_random_projection_transformer_invalid_density()
sklearn.tests.test_random_projection.test_too_many_samples_to_find_a_safe_embedding()
sklearn.tests.test_random_projection.test_try_to_transform_before_fit()
sklearn.tests.test_random_projection.test_warning_n_components_greater_than_n_features()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tests/test_pipeline.py----------------------------------------
A:sklearn.tests.test_pipeline.pipe->make_pipeline(t1, t2, FitParamT())
A:sklearn.tests.test_pipeline.clf->SVC(probability=True, random_state=0)
A:sklearn.tests.test_pipeline.filter1->SelectKBest(f_classif, k=2)
A:sklearn.tests.test_pipeline.pipe2->clone(pipe)
A:sklearn.tests.test_pipeline.params->make_pipeline(t1, t2, FitParamT()).get_params()
A:sklearn.tests.test_pipeline.params2->clone(pipe).get_params()
A:sklearn.tests.test_pipeline.iris->load_iris()
A:sklearn.tests.test_pipeline.pca->RandomizedPCA(n_components=2, random_state=0)
A:sklearn.tests.test_pipeline.n_classes->len(np.unique(y))
A:sklearn.tests.test_pipeline.scaler->StandardScaler()
A:sklearn.tests.test_pipeline.predict->make_pipeline(t1, t2, FitParamT()).predict(X)
A:sklearn.tests.test_pipeline.proba->make_pipeline(t1, t2, FitParamT()).predict_proba(X)
A:sklearn.tests.test_pipeline.log_proba->make_pipeline(t1, t2, FitParamT()).predict_log_proba(X)
A:sklearn.tests.test_pipeline.decision_function->make_pipeline(t1, t2, FitParamT()).decision_function(X)
A:sklearn.tests.test_pipeline.svd->TruncatedSVD(n_components=2, random_state=0)
A:sklearn.tests.test_pipeline.select->SelectKBest(k=1)
A:sklearn.tests.test_pipeline.fs->FeatureUnion([('words', CountVectorizer(analyzer='word')), ('chars', CountVectorizer(analyzer='char'))])
A:sklearn.tests.test_pipeline.X_transformed->FeatureUnion([('words', CountVectorizer(analyzer='word')), ('chars', CountVectorizer(analyzer='char'))]).transform(X)
A:sklearn.tests.test_pipeline.X_sp->scipy.sparse.csr_matrix(X)
A:sklearn.tests.test_pipeline.X_sp_transformed->FeatureUnion([('words', CountVectorizer(analyzer='word')), ('chars', CountVectorizer(analyzer='char'))]).fit_transform(X_sp, y)
A:sklearn.tests.test_pipeline.mock->TransfT()
A:sklearn.tests.test_pipeline.fu->make_union(pca, mock)
A:sklearn.tests.test_pipeline.(names, transformers)->zip(*fu.transformer_list)
A:sklearn.tests.test_pipeline.pipeline->Pipeline([('mock', transft)])
A:sklearn.tests.test_pipeline.X_trans->Pipeline([('mock', transft)]).fit_transform(X, y)
A:sklearn.tests.test_pipeline.X_trans2->TransfT().fit(X, y).transform(X)
A:sklearn.tests.test_pipeline.X_trans3->RandomizedPCA(n_components=2, random_state=0).fit_transform(X)
A:sklearn.tests.test_pipeline.X_back->Pipeline([('mock', transft)]).inverse_transform(X_trans)
A:sklearn.tests.test_pipeline.X_back2->RandomizedPCA(n_components=2, random_state=0).inverse_transform(X_trans)
A:sklearn.tests.test_pipeline.transft->TransfT()
A:sklearn.tests.test_pipeline.t1->TransfT()
A:sklearn.tests.test_pipeline.t2->TransfT()
A:sklearn.tests.test_pipeline.X_fit_transformed->FeatureUnion([('words', CountVectorizer(analyzer='word')), ('chars', CountVectorizer(analyzer='char'))]).fit_transform(X, y)
A:sklearn.tests.test_pipeline.X_fit_transformed_wo_method->FeatureUnion([('words', CountVectorizer(analyzer='word')), ('chars', CountVectorizer(analyzer='char'))]).fit_transform(X, y)
A:sklearn.tests.test_pipeline.fs_parallel->FeatureUnion([('words', CountVectorizer(analyzer='word')), ('chars', CountVectorizer(analyzer='char'))], n_jobs=2)
A:sklearn.tests.test_pipeline.fs_parallel2->FeatureUnion([('words', CountVectorizer(analyzer='word')), ('chars', CountVectorizer(analyzer='char'))], n_jobs=2)
A:sklearn.tests.test_pipeline.X_transformed_parallel->FeatureUnion([('words', CountVectorizer(analyzer='word')), ('chars', CountVectorizer(analyzer='char'))], n_jobs=2).transform(X)
A:sklearn.tests.test_pipeline.X_transformed_parallel2->FeatureUnion([('words', CountVectorizer(analyzer='word')), ('chars', CountVectorizer(analyzer='char'))], n_jobs=2).transform(X)
A:sklearn.tests.test_pipeline.word_vect->CountVectorizer(analyzer='word')
A:sklearn.tests.test_pipeline.char_vect->CountVectorizer(analyzer='char_wb', ngram_range=(3, 3))
A:sklearn.tests.test_pipeline.ft->FeatureUnion([('chars', char_vect), ('words', word_vect)])
A:sklearn.tests.test_pipeline.feature_names->FeatureUnion([('chars', char_vect), ('words', word_vect)]).get_feature_names()
sklearn.tests.test_pipeline.FitParamT(self)
sklearn.tests.test_pipeline.FitParamT.__init__(self)
sklearn.tests.test_pipeline.FitParamT.fit(self,X,y,should_succeed=False)
sklearn.tests.test_pipeline.FitParamT.predict(self,X)
sklearn.tests.test_pipeline.IncorrectT(self,a=None,b=None)
sklearn.tests.test_pipeline.IncorrectT.__init__(self,a=None,b=None)
sklearn.tests.test_pipeline.T(IncorrectT)
sklearn.tests.test_pipeline.T.fit(self,X,y)
sklearn.tests.test_pipeline.TransfT(T)
sklearn.tests.test_pipeline.TransfT.transform(self,X,y=None)
sklearn.tests.test_pipeline.test_feature_union()
sklearn.tests.test_pipeline.test_feature_union_feature_names()
sklearn.tests.test_pipeline.test_feature_union_parallel()
sklearn.tests.test_pipeline.test_feature_union_weights()
sklearn.tests.test_pipeline.test_make_pipeline()
sklearn.tests.test_pipeline.test_make_union()
sklearn.tests.test_pipeline.test_pipeline_fit_params()
sklearn.tests.test_pipeline.test_pipeline_fit_transform()
sklearn.tests.test_pipeline.test_pipeline_init()
sklearn.tests.test_pipeline.test_pipeline_methods_anova()
sklearn.tests.test_pipeline.test_pipeline_methods_pca_svm()
sklearn.tests.test_pipeline.test_pipeline_methods_preprocessing_svm()
sklearn.tests.test_pipeline.test_pipeline_transform()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tests/test_kernel_approximation.py----------------------------------------
A:sklearn.tests.test_kernel_approximation.rng->numpy.random.RandomState(0)
A:sklearn.tests.test_kernel_approximation.X->list(X)
A:sklearn.tests.test_kernel_approximation.Y->numpy.random.RandomState(0).random_sample(size=(300, 50))
A:sklearn.tests.test_kernel_approximation.kernel->rbf_kernel(X, Y, gamma=gamma)
A:sklearn.tests.test_kernel_approximation.transform->SkewedChi2Sampler(skewedness=c, n_components=1000, random_state=42)
A:sklearn.tests.test_kernel_approximation.X_trans->RBFSampler(gamma=gamma, n_components=1000, random_state=42).fit_transform(X)
A:sklearn.tests.test_kernel_approximation.Y_trans->RBFSampler(gamma=gamma, n_components=1000, random_state=42).transform(Y)
A:sklearn.tests.test_kernel_approximation.kernel_approx->numpy.dot(X_trans, Y_trans.T)
A:sklearn.tests.test_kernel_approximation.X_sp_trans->SkewedChi2Sampler(skewedness=c, n_components=1000, random_state=42).fit_transform(csr_matrix(X))
A:sklearn.tests.test_kernel_approximation.Y_sp_trans->SkewedChi2Sampler(skewedness=c, n_components=1000, random_state=42).transform(csr_matrix(Y))
A:sklearn.tests.test_kernel_approximation.Y_neg->numpy.random.RandomState(0).random_sample(size=(300, 50)).copy()
A:sklearn.tests.test_kernel_approximation.rbf_transform->RBFSampler(gamma=gamma, n_components=1000, random_state=42)
A:sklearn.tests.test_kernel_approximation.rnd->numpy.random.RandomState(42)
A:sklearn.tests.test_kernel_approximation.X_transformed->Nystroem(kernel='polynomial', n_components=X.shape[0], degree=3.1, coef0=0.1).fit_transform(X)
A:sklearn.tests.test_kernel_approximation.K->polynomial_kernel(X, degree=3.1, coef0=0.1)
A:sklearn.tests.test_kernel_approximation.trans->Nystroem(n_components=2, kernel=kern, random_state=rnd)
A:sklearn.tests.test_kernel_approximation.kernels_available->kernel_metrics()
A:sklearn.tests.test_kernel_approximation.nystroem->Nystroem(kernel='polynomial', n_components=X.shape[0], degree=3.1, coef0=0.1)
sklearn.tests.test_kernel_approximation.test_additive_chi2_sampler()
sklearn.tests.test_kernel_approximation.test_input_validation()
sklearn.tests.test_kernel_approximation.test_nystroem_approximation()
sklearn.tests.test_kernel_approximation.test_nystroem_callable()
sklearn.tests.test_kernel_approximation.test_nystroem_poly_kernel_params()
sklearn.tests.test_kernel_approximation.test_rbf_sampler()
sklearn.tests.test_kernel_approximation.test_skewed_chi2_sampler()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tests/test_isotonic.py----------------------------------------
A:sklearn.tests.test_isotonic.is_increasing->assert_warns_message(UserWarning, 'interval', check_increasing, x, y)
A:sklearn.tests.test_isotonic.y->numpy.array([3, 7, 5, 9, 8, 7, 10])
A:sklearn.tests.test_isotonic.y_->assert_no_warnings(ir.fit_transform, x, y)
A:sklearn.tests.test_isotonic.x->numpy.arange(len(y))
A:sklearn.tests.test_isotonic.ir->IsotonicRegression()
A:sklearn.tests.test_isotonic.perm->numpy.random.permutation(len(y))
A:sklearn.tests.test_isotonic.rng->numpy.random.RandomState(42)
A:sklearn.tests.test_isotonic.weights->numpy.ones(n)
A:sklearn.tests.test_isotonic.y_set_value->IsotonicRegression().fit_transform(x, y, sample_weight=weights)
A:sklearn.tests.test_isotonic.y_default_value->IsotonicRegression().fit_transform(x, y)
A:sklearn.tests.test_isotonic.y_result->numpy.round(ir.fit_transform(x, y))
A:sklearn.tests.test_isotonic.received_y->IsotonicRegression().fit_transform(x, y, sample_weight=sample_weight)
A:sklearn.tests.test_isotonic.y1->IsotonicRegression().predict([min(x) - 10, max(x) + 10])
A:sklearn.tests.test_isotonic.y2->IsotonicRegression().predict(x)
sklearn.tests.test_isotonic.test_assert_raises_exceptions()
sklearn.tests.test_isotonic.test_check_ci_warn()
sklearn.tests.test_isotonic.test_check_increasing_down()
sklearn.tests.test_isotonic.test_check_increasing_down_extreme()
sklearn.tests.test_isotonic.test_check_increasing_up()
sklearn.tests.test_isotonic.test_check_increasing_up_extreme()
sklearn.tests.test_isotonic.test_isotonic_fit_transform_weight_deprecation()
sklearn.tests.test_isotonic.test_isotonic_fit_weight_deprecation()
sklearn.tests.test_isotonic.test_isotonic_min_max_boundaries()
sklearn.tests.test_isotonic.test_isotonic_regression()
sklearn.tests.test_isotonic.test_isotonic_regression_auto_decreasing()
sklearn.tests.test_isotonic.test_isotonic_regression_auto_increasing()
sklearn.tests.test_isotonic.test_isotonic_regression_oob_bad()
sklearn.tests.test_isotonic.test_isotonic_regression_oob_bad_after()
sklearn.tests.test_isotonic.test_isotonic_regression_oob_clip()
sklearn.tests.test_isotonic.test_isotonic_regression_oob_nan()
sklearn.tests.test_isotonic.test_isotonic_regression_oob_raise()
sklearn.tests.test_isotonic.test_isotonic_regression_reversed()
sklearn.tests.test_isotonic.test_isotonic_regression_weight_deprecation()
sklearn.tests.test_isotonic.test_isotonic_sample_weight()
sklearn.tests.test_isotonic.test_isotonic_sample_weight_parameter_default_value()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tests/test_lda.py----------------------------------------
A:sklearn.tests.test_lda.X->(means[:, np.newaxis, :] + scatter[np.newaxis, :, :]).reshape((-1, 3))
A:sklearn.tests.test_lda.y->numpy.repeat(np.arange(means.shape[0]), scatter.shape[0])
A:sklearn.tests.test_lda.y3->numpy.array([1, 1, 2, 2, 3, 3])
A:sklearn.tests.test_lda.X1->numpy.array([[-2], [-1], [-1], [1], [1], [2]])
A:sklearn.tests.test_lda.clf->sklearn.lda.LDA().fit(X, y)
A:sklearn.tests.test_lda.y_pred->sklearn.lda.LDA().fit(X, y).fit(X, y).predict(X)
A:sklearn.tests.test_lda.y_pred1->sklearn.lda.LDA().fit(X, y).fit(X1, y).predict(X1)
A:sklearn.tests.test_lda.y_proba_pred1->sklearn.lda.LDA().fit(X, y).predict_proba(X1)
A:sklearn.tests.test_lda.y_log_proba_pred1->sklearn.lda.LDA().fit(X, y).predict_log_proba(X1)
A:sklearn.tests.test_lda.y_pred3->sklearn.lda.LDA().fit(X, y).fit(X, y3).predict(X)
A:sklearn.tests.test_lda.X_transformed->sklearn.lda.LDA().fit(X, y).fit(X, y).transform(X)
A:sklearn.tests.test_lda.means->numpy.array([[0, 0, -1], [0, 2, 0], [0, -2, 0], [0, 0, 5]])
A:sklearn.tests.test_lda.scatter->numpy.array([[0.1, 0, 0], [-0.1, 0, 0], [0, 0.1, 0], [0, -0.1, 0], [0, 0, 0.1], [0, 0, -0.1]])
A:sklearn.tests.test_lda.means_transformed->sklearn.lda.LDA().fit(X, y).transform(means)
sklearn.tests.test_lda.test_lda_orthogonality()
sklearn.tests.test_lda.test_lda_predict()
sklearn.tests.test_lda.test_lda_transform()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tests/test_dummy.py----------------------------------------
A:sklearn.tests.test_dummy.proba->DummyClassifier(strategy='constant', random_state=0, constant=[2, 0]).predict_proba(X)
A:sklearn.tests.test_dummy.log_proba->DummyClassifier(strategy='constant', random_state=0, constant=[2, 0]).predict_log_proba(X)
A:sklearn.tests.test_dummy.y->numpy.array([[2, 3], [1, 3], [2, 3], [2, 0]])
A:sklearn.tests.test_dummy.n_samples->len(X)
A:sklearn.tests.test_dummy.X->numpy.random.RandomState(seed=1).randn(10, 10)
A:sklearn.tests.test_dummy.est->DummyRegressor(strategy='constant', constant=[1, 2, 3, 4])
A:sklearn.tests.test_dummy.y_pred->DummyClassifier(strategy='constant', random_state=0, constant=[2, 0]).predict(X)
A:sklearn.tests.test_dummy.clf->DummyClassifier(strategy='constant', random_state=0, constant=[2, 0])
A:sklearn.tests.test_dummy.random_state->numpy.random.RandomState(seed=1)
A:sklearn.tests.test_dummy.reg->DummyRegressor(strategy='constant', constant=43)
A:sklearn.tests.test_dummy.X_learn->numpy.random.RandomState(seed=1).randn(10, 10)
A:sklearn.tests.test_dummy.y_learn->numpy.random.RandomState(seed=1).randn(10, 5)
A:sklearn.tests.test_dummy.mean->numpy.mean(y_learn, axis=0).reshape((1, -1))
A:sklearn.tests.test_dummy.X_test->numpy.random.RandomState(seed=1).randn(20, 10)
A:sklearn.tests.test_dummy.y_test->numpy.random.RandomState(seed=1).randn(20, 5)
A:sklearn.tests.test_dummy.y_pred_learn->DummyRegressor(strategy='constant', constant=[1, 2, 3, 4]).predict(X_learn)
A:sklearn.tests.test_dummy.y_pred_test->DummyRegressor(strategy='constant', constant=[1, 2, 3, 4]).predict(X_test)
A:sklearn.tests.test_dummy.median->numpy.median(y_learn, axis=0).reshape((1, -1))
A:sklearn.tests.test_dummy.constants->numpy.random.RandomState(seed=1).randn(5)
sklearn.tests.test_dummy._check_behavior_2d(clf)
sklearn.tests.test_dummy._check_behavior_2d_for_constant(clf)
sklearn.tests.test_dummy._check_equality_regressor(statistic,y_learn,y_pred_learn,y_test,y_pred_test)
sklearn.tests.test_dummy._check_predict_proba(clf,X,y)
sklearn.tests.test_dummy.test_classifier_exceptions()
sklearn.tests.test_dummy.test_constant_size_multioutput_regressor()
sklearn.tests.test_dummy.test_constant_strategy()
sklearn.tests.test_dummy.test_constant_strategy_exceptions()
sklearn.tests.test_dummy.test_constant_strategy_multioutput()
sklearn.tests.test_dummy.test_constant_strategy_multioutput_regressor()
sklearn.tests.test_dummy.test_constant_strategy_regressor()
sklearn.tests.test_dummy.test_constants_not_specified_regressor()
sklearn.tests.test_dummy.test_mean_strategy_multioutput_regressor()
sklearn.tests.test_dummy.test_mean_strategy_regressor()
sklearn.tests.test_dummy.test_median_strategy_multioutput_regressor()
sklearn.tests.test_dummy.test_median_strategy_regressor()
sklearn.tests.test_dummy.test_most_frequent_strategy()
sklearn.tests.test_dummy.test_most_frequent_strategy_multioutput()
sklearn.tests.test_dummy.test_regressor_exceptions()
sklearn.tests.test_dummy.test_stratified_strategy()
sklearn.tests.test_dummy.test_stratified_strategy_multioutput()
sklearn.tests.test_dummy.test_string_labels()
sklearn.tests.test_dummy.test_uniform_strategy()
sklearn.tests.test_dummy.test_uniform_strategy_multioutput()
sklearn.tests.test_dummy.test_unknown_strategey_regressor()
sklearn.tests.test_dummy.test_y_mean_attribute_regressor()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tests/test_common.py----------------------------------------
A:sklearn.tests.test_common.estimators->all_estimators()
A:sklearn.tests.test_common.classifier->Classifier()
A:sklearn.tests.test_common.estimator->Estimator(k=1)
A:sklearn.tests.test_common.init->getattr(estimator.__init__, 'deprecated_original', estimator.__init__)
A:sklearn.tests.test_common.(args, varargs, kws, defaults)->inspect.getargspec(init)
A:sklearn.tests.test_common.params->Clustering().get_params()
A:sklearn.tests.test_common.msg->'Base estimators such as {0} should not be included in all_estimators'.format(name)
A:sklearn.tests.test_common.rng->numpy.random.RandomState(0)
A:sklearn.tests.test_common.X->numpy.array([[3, 0], [0, 1], [0, 2], [1, 1], [1, 2], [2, 1]])
A:sklearn.tests.test_common.y->StandardScaler().fit_transform(y)
A:sklearn.tests.test_common.transformers->all_estimators(type_filter='transformer')
A:sklearn.tests.test_common.(X, y)->_boston_subset(n_samples=50)
A:sklearn.tests.test_common.transformer->Transformer()
A:sklearn.tests.test_common.X_pred->Transformer().fit(X, y_).transform(X)
A:sklearn.tests.test_common.X_pred2->Transformer().transform(X)
A:sklearn.tests.test_common.X_pred3->Transformer().fit_transform(X, y=y_)
A:sklearn.tests.test_common.rnd->numpy.random.RandomState(0)
A:sklearn.tests.test_common.X_train_finite->numpy.random.RandomState(0).uniform(size=(10, 3))
A:sklearn.tests.test_common.X_train_nan->numpy.random.RandomState(0).uniform(size=(10, 3))
A:sklearn.tests.test_common.X_train_inf->numpy.random.RandomState(0).uniform(size=(10, 3))
A:sklearn.tests.test_common.random_state->numpy.random.RandomState(seed=12345)
A:sklearn.tests.test_common.y_->NotAnArray(np.asarray(y))
A:sklearn.tests.test_common.pickled_transformer->pickle.dumps(transformer)
A:sklearn.tests.test_common.unpickled_transformer->pickle.loads(pickled_transformer)
A:sklearn.tests.test_common.pickled_X_pred->pickle.loads(pickled_transformer).transform(X)
A:sklearn.tests.test_common.X_train->numpy.random.RandomState(0).uniform(size=(10, 3))
A:sklearn.tests.test_common.X_test->numpy.random.RandomState(0).uniform(size=(10, 3))
A:sklearn.tests.test_common.classifiers->all_estimators(type_filter='classifier')
A:sklearn.tests.test_common.clustering->Clustering()
A:sklearn.tests.test_common.iris->load_iris()
A:sklearn.tests.test_common.alg->Alg()
A:sklearn.tests.test_common.pred2->Estimator().predict(X)
A:sklearn.tests.test_common.(X_m, y_m)->shuffle(X_m, y_m, random_state=7)
A:sklearn.tests.test_common.X_m->StandardScaler().fit_transform(X_m)
A:sklearn.tests.test_common.classes->numpy.unique(y_)
A:sklearn.tests.test_common.n_classes->len(classes)
A:sklearn.tests.test_common.y_pred->Classifier().predict(X_test)
A:sklearn.tests.test_common.decision->Classifier().decision_function(X)
A:sklearn.tests.test_common.dec_pred->(decision.ravel() > 0).astype(np.int)
A:sklearn.tests.test_common.y_prob->Classifier().predict_proba(X)
A:sklearn.tests.test_common.accuracy->accuracy_score(y_, y_pred)
A:sklearn.tests.test_common.pickled_classifier->pickle.dumps(classifier)
A:sklearn.tests.test_common.unpickled_classifier->pickle.loads(pickled_classifier)
A:sklearn.tests.test_common.pickled_y_pred->pickle.loads(pickled_regressor).predict(X)
A:sklearn.tests.test_common.boston->load_boston()
A:sklearn.tests.test_common.regressors->all_estimators(type_filter='regressor')
A:sklearn.tests.test_common.(X, _)->_boston_subset()
A:sklearn.tests.test_common.regressor_1->Estimator()
A:sklearn.tests.test_common.regressor_2->Estimator()
A:sklearn.tests.test_common.pred1->Estimator().predict(X)
A:sklearn.tests.test_common.regressor->Regressor()
A:sklearn.tests.test_common.pickled_regressor->pickle.dumps(regressor)
A:sklearn.tests.test_common.unpickled_regressor->pickle.loads(pickled_regressor)
A:sklearn.tests.test_common.cwd->os.getcwd()
A:sklearn.tests.test_common.setup_path->os.path.abspath(os.path.join(sklearn.__path__[0], '..'))
A:sklearn.tests.test_common.setup_filename->os.path.join(setup_path, 'setup.py')
A:sklearn.tests.test_common.(X_train, X_test, y_train, y_test)->train_test_split(X, y, test_size=0.5, random_state=0)
A:sklearn.tests.test_common.n_centers->len(np.unique(y_train))
A:sklearn.tests.test_common.y_pred_auto->Classifier().predict(X_test)
A:sklearn.tests.test_common.new_params->Clustering().get_params()
A:sklearn.tests.test_common.clusterers->all_estimators(type_filter='cluster')
A:sklearn.tests.test_common.pkgs->pkgutil.walk_packages(path=sklearn.__path__, prefix='sklearn.', onerror=lambda _: None)
A:sklearn.tests.test_common.package->__import__(modname, fromlist='dummy')
A:sklearn.tests.test_common.est->pickle.loads(pickle.dumps(est))
A:sklearn.tests.test_common.pred_orig->pickle.loads(pickle.dumps(est)).predict(X)
A:sklearn.tests.test_common.pred->pickle.loads(pickle.dumps(est)).predict(X)
sklearn.tests.test_common.NotAnArray(self,data)
sklearn.tests.test_common.NotAnArray.__array__(self,dtype=None)
sklearn.tests.test_common.NotAnArray.__init__(self,data)
sklearn.tests.test_common._boston_subset(n_samples=200)
sklearn.tests.test_common._is_32bit()
sklearn.tests.test_common.check_class_weight_auto_classifiers(name,Classifier,X_train,y_train,X_test,y_test,weights)
sklearn.tests.test_common.check_class_weight_classifiers(name,Classifier,X_train,y_train,X_test,y_test)
sklearn.tests.test_common.check_classifiers_classes(name,Classifier,X,y,y_names)
sklearn.tests.test_common.check_classifiers_input_shapes(name,Classifier,X,y)
sklearn.tests.test_common.check_classifiers_one_label(name,Classifier,X_train,X_test,y)
sklearn.tests.test_common.check_classifiers_pickle(name,Classifier,X,y)
sklearn.tests.test_common.check_classifiers_train(name,Classifier,X,y)
sklearn.tests.test_common.check_cluster_overwrite_params(name,Clustering,X,y)
sklearn.tests.test_common.check_clustering(name,Alg,X,y)
sklearn.tests.test_common.check_estimators_nan_inf(name,Estimator,X_train,X_train_finite,y)
sklearn.tests.test_common.check_estimators_not_an_array(name,Estimator,X,y)
sklearn.tests.test_common.check_estimators_overwrite_params(name,Estimator,X,y)
sklearn.tests.test_common.check_parameters_default_constructible(name,Estimator)
sklearn.tests.test_common.check_regressors_classifiers_sparse_data(name,Estimator,X,y)
sklearn.tests.test_common.check_regressors_int(name,Regressor,X,y)
sklearn.tests.test_common.check_regressors_pickle(name,Regressor,X,y)
sklearn.tests.test_common.check_regressors_train(name,Regressor,X,y)
sklearn.tests.test_common.check_sparsify_binary_classifier(name,Estimator,X,y)
sklearn.tests.test_common.check_sparsify_multiclass_classifier(name,Classifier,X,y)
sklearn.tests.test_common.check_transformer(name,Transformer,X,y)
sklearn.tests.test_common.check_transformer_pickle(name,Transformer,X,y)
sklearn.tests.test_common.check_transformer_sparse_data(name,Transformer,X,y)
sklearn.tests.test_common.multioutput_estimator_convert_y_2d(name,y)
sklearn.tests.test_common.test_all_estimator_no_base_class()
sklearn.tests.test_common.test_all_estimators()
sklearn.tests.test_common.test_class_weight_auto_classifies()
sklearn.tests.test_common.test_class_weight_classifiers()
sklearn.tests.test_common.test_classifiers_classes()
sklearn.tests.test_common.test_classifiers_input_shapes()
sklearn.tests.test_common.test_classifiers_not_an_array()
sklearn.tests.test_common.test_classifiers_one_label()
sklearn.tests.test_common.test_classifiers_pickle()
sklearn.tests.test_common.test_classifiers_train()
sklearn.tests.test_common.test_cluster_overwrite_params()
sklearn.tests.test_common.test_clustering()
sklearn.tests.test_common.test_configure()
sklearn.tests.test_common.test_estimators_nan_inf()
sklearn.tests.test_common.test_estimators_overwrite_params()
sklearn.tests.test_common.test_estimators_sparse_data()
sklearn.tests.test_common.test_import_all_consistency()
sklearn.tests.test_common.test_regressor_pickle()
sklearn.tests.test_common.test_regressors_int()
sklearn.tests.test_common.test_regressors_not_an_array()
sklearn.tests.test_common.test_regressors_train()
sklearn.tests.test_common.test_root_import_all_completeness()
sklearn.tests.test_common.test_sparsify_estimators()
sklearn.tests.test_common.test_transformers()
sklearn.tests.test_common.test_transformers_pickle()
sklearn.tests.test_common.test_transformers_sparse_data()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tests/test_init.py----------------------------------------
sklearn.tests.test_init.test_import_skl()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/ensemble/partial_dependence.py----------------------------------------
A:sklearn.ensemble.partial_dependence.uniques->numpy.unique(X[:, col])
A:sklearn.ensemble.partial_dependence.emp_percentiles->mquantiles(X, prob=percentiles, axis=0)
A:sklearn.ensemble.partial_dependence.axis->numpy.linspace(emp_percentiles[0, col], emp_percentiles[1, col], num=grid_resolution, endpoint=True)
A:sklearn.ensemble.partial_dependence.target_variables->numpy.asarray(target_variables, dtype=np.int32, order='C').ravel()
A:sklearn.ensemble.partial_dependence.X->array2d(X, dtype=DTYPE, order='C')
A:sklearn.ensemble.partial_dependence.(grid, axes)->_grid_from_X(X[:, target_variables], percentiles, grid_resolution)
A:sklearn.ensemble.partial_dependence.grid->numpy.asarray(grid, dtype=DTYPE, order='C')
A:sklearn.ensemble.partial_dependence.pdp->numpy.zeros((n_trees_per_stage, grid.shape[0]), dtype=np.float64, order='C')
A:sklearn.ensemble.partial_dependence.label_idx->numpy.searchsorted(gbrt.classes_, label)
A:sklearn.ensemble.partial_dependence.feature_names->feature_names.tolist().tolist()
A:sklearn.ensemble.partial_dependence.fx->feature_names.tolist().tolist().index(fx)
A:sklearn.ensemble.partial_dependence.fxs->numpy.array([convert_feature(fx) for fx in fxs], dtype=np.int32)
A:sklearn.ensemble.partial_dependence.pd_result->Parallel(n_jobs=n_jobs, verbose=verbose)((delayed(partial_dependence)(gbrt, fxs, X=X, grid_resolution=grid_resolution) for fxs in features))
A:sklearn.ensemble.partial_dependence.n_fx->len(axes)
A:sklearn.ensemble.partial_dependence.(old_min_pd, old_max_pd)->pdp_lim.get(n_fx, (min_pd, max_pd))
A:sklearn.ensemble.partial_dependence.min_pd->min(min_pd, old_min_pd)
A:sklearn.ensemble.partial_dependence.max_pd->max(max_pd, old_max_pd)
A:sklearn.ensemble.partial_dependence.Z_level->numpy.linspace(*pdp_lim[2], num=8)
A:sklearn.ensemble.partial_dependence.fig->fig.add_subplot(n_rows, n_cols, i + 1).get_figure()
A:sklearn.ensemble.partial_dependence.n_cols->min(n_cols, len(features))
A:sklearn.ensemble.partial_dependence.n_rows->int(np.ceil(len(features) / float(n_cols)))
A:sklearn.ensemble.partial_dependence.ax->fig.add_subplot(n_rows, n_cols, i + 1).get_figure().add_subplot(n_rows, n_cols, i + 1)
A:sklearn.ensemble.partial_dependence.(XX, YY)->numpy.meshgrid(axes[0], axes[1])
A:sklearn.ensemble.partial_dependence.CS->fig.add_subplot(n_rows, n_cols, i + 1).get_figure().add_subplot(n_rows, n_cols, i + 1).contour(XX, YY, Z, levels=Z_level, linewidths=0.5, colors='k')
A:sklearn.ensemble.partial_dependence.deciles->mquantiles(X[:, fx[1]], prob=np.arange(0.1, 1.0, 0.1))
A:sklearn.ensemble.partial_dependence.trans->matplotlib.transforms.blended_transform_factory(ax.transAxes, ax.transData)
A:sklearn.ensemble.partial_dependence.ylim->fig.add_subplot(n_rows, n_cols, i + 1).get_figure().add_subplot(n_rows, n_cols, i + 1).get_ylim()
A:sklearn.ensemble.partial_dependence.tick_formatter->ScalarFormatter()
A:sklearn.ensemble.partial_dependence.xlim->fig.add_subplot(n_rows, n_cols, i + 1).get_figure().add_subplot(n_rows, n_cols, i + 1).get_xlim()
sklearn.ensemble.partial_dependence._grid_from_X(X,percentiles=(0.05,0.95),grid_resolution=100)
sklearn.ensemble.partial_dependence.partial_dependence(gbrt,target_variables,grid=None,X=None,percentiles=(0.05,0.95),grid_resolution=100)
sklearn.ensemble.partial_dependence.plot_partial_dependence(gbrt,X,features,feature_names=None,label=None,n_cols=3,grid_resolution=100,percentiles=(0.05,0.95),n_jobs=1,verbose=0,ax=None,line_kw=None,contour_kw=None,**fig_kw)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/ensemble/forest.py----------------------------------------
A:sklearn.ensemble.forest.curr_sample_weight->sample_weight.copy()
A:sklearn.ensemble.forest.random_state->check_random_state(self.random_state)
A:sklearn.ensemble.forest.indices->check_random_state(self.random_state).randint(0, n_samples, n_samples)
A:sklearn.ensemble.forest.sample_counts->numpy.bincount(indices, minlength=n_samples)
A:sklearn.ensemble.forest.proba->self.predict_proba(X)
A:sklearn.ensemble.forest.proba_tree->self._make_estimator(append=False).predict_proba(X)
A:sklearn.ensemble.forest.X->safe_asarray(X)
A:sklearn.ensemble.forest.results->Parallel(n_jobs=self.n_jobs, verbose=self.verbose, backend='threading')((delayed(_parallel_apply)(tree, X) for tree in self.estimators_))
A:sklearn.ensemble.forest.(X,)->check_arrays(X, dtype=DTYPE, sparse_format='dense')
A:sklearn.ensemble.forest.y->check_random_state(self.random_state).uniform(size=X.shape[0])
A:sklearn.ensemble.forest.(n_jobs, n_trees, starts)->_partition_estimators(self)
A:sklearn.ensemble.forest.tree->self._make_estimator(append=False)
A:sklearn.ensemble.forest.all_trees->Parallel(n_jobs=n_jobs, verbose=self.verbose, backend='threading')((delayed(_parallel_build_trees)(trees[starts[i]:starts[i + 1]], self, X, y, sample_weight, verbose=self.verbose) for i in range(n_jobs)))
A:sklearn.ensemble.forest.self.estimators_->list(itertools.chain(*all_trees))
A:sklearn.ensemble.forest.mask->numpy.ones(n_samples, dtype=np.bool)
A:sklearn.ensemble.forest.p_estimator->estimator.predict(X[mask, :])
A:sklearn.ensemble.forest.(classes_k, y[:, k])->numpy.unique(y[:, k], return_inverse=True)
A:sklearn.ensemble.forest.n_samples->len(X)
A:sklearn.ensemble.forest.predictions->numpy.zeros((n_samples, self.n_outputs_))
A:sklearn.ensemble.forest.predictions[:, k]->self.classes_[k].take(np.argmax(proba[k], axis=1), axis=0)
A:sklearn.ensemble.forest.all_proba->Parallel(n_jobs=n_jobs, verbose=self.verbose, backend='threading')((delayed(_parallel_predict_proba)(self.estimators_[starts[i]:starts[i + 1]], X, self.n_classes_, self.n_outputs_) for i in range(n_jobs)))
A:sklearn.ensemble.forest.proba[k]->numpy.log(proba[k])
A:sklearn.ensemble.forest.all_y_hat->Parallel(n_jobs=n_jobs, verbose=self.verbose, backend='threading')((delayed(_parallel_predict_regression)(self.estimators_[starts[i]:starts[i + 1]], X) for i in range(n_jobs)))
A:sklearn.ensemble.forest.n_predictions->numpy.zeros((n_samples, self.n_outputs_))
A:sklearn.ensemble.forest.self.oob_prediction_->self.oob_prediction_.reshape((n_samples,))
A:sklearn.ensemble.forest.rnd->check_random_state(self.random_state)
A:sklearn.ensemble.forest.self.one_hot_encoder_->OneHotEncoder(sparse=self.sparse_output)
sklearn.ensemble.ExtraTreesClassifier(self,n_estimators=10,criterion='gini',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features='auto',max_leaf_nodes=None,bootstrap=False,oob_score=False,n_jobs=1,random_state=None,verbose=0,min_density=None,compute_importances=None)
sklearn.ensemble.ExtraTreesRegressor(self,n_estimators=10,criterion='mse',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features='auto',max_leaf_nodes=None,bootstrap=False,oob_score=False,n_jobs=1,random_state=None,verbose=0,min_density=None,compute_importances=None)
sklearn.ensemble.RandomForestClassifier(self,n_estimators=10,criterion='gini',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features='auto',max_leaf_nodes=None,bootstrap=True,oob_score=False,n_jobs=1,random_state=None,verbose=0,min_density=None,compute_importances=None)
sklearn.ensemble.RandomForestRegressor(self,n_estimators=10,criterion='mse',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features='auto',max_leaf_nodes=None,bootstrap=True,oob_score=False,n_jobs=1,random_state=None,verbose=0,min_density=None,compute_importances=None)
sklearn.ensemble.RandomTreesEmbedding(self,n_estimators=10,max_depth=5,min_samples_split=2,min_samples_leaf=1,max_leaf_nodes=None,sparse_output=True,n_jobs=1,random_state=None,verbose=0,min_density=None)
sklearn.ensemble.RandomTreesEmbedding._set_oob_score(*args)
sklearn.ensemble.RandomTreesEmbedding.fit(self,X,y=None)
sklearn.ensemble.RandomTreesEmbedding.fit_transform(self,X,y=None)
sklearn.ensemble.RandomTreesEmbedding.transform(self,X)
sklearn.ensemble.forest.BaseForest(self,base_estimator,n_estimators=10,estimator_params=tuple(),bootstrap=False,oob_score=False,n_jobs=1,random_state=None,verbose=0)
sklearn.ensemble.forest.BaseForest.__init__(self,base_estimator,n_estimators=10,estimator_params=tuple(),bootstrap=False,oob_score=False,n_jobs=1,random_state=None,verbose=0)
sklearn.ensemble.forest.BaseForest._set_oob_score(self,X,y)
sklearn.ensemble.forest.BaseForest._validate_y(self,y)
sklearn.ensemble.forest.BaseForest.apply(self,X)
sklearn.ensemble.forest.BaseForest.feature_importances_(self)
sklearn.ensemble.forest.BaseForest.fit(self,X,y,sample_weight=None)
sklearn.ensemble.forest.ExtraTreesClassifier(self,n_estimators=10,criterion='gini',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features='auto',max_leaf_nodes=None,bootstrap=False,oob_score=False,n_jobs=1,random_state=None,verbose=0,min_density=None,compute_importances=None)
sklearn.ensemble.forest.ExtraTreesClassifier.__init__(self,n_estimators=10,criterion='gini',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features='auto',max_leaf_nodes=None,bootstrap=False,oob_score=False,n_jobs=1,random_state=None,verbose=0,min_density=None,compute_importances=None)
sklearn.ensemble.forest.ExtraTreesRegressor(self,n_estimators=10,criterion='mse',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features='auto',max_leaf_nodes=None,bootstrap=False,oob_score=False,n_jobs=1,random_state=None,verbose=0,min_density=None,compute_importances=None)
sklearn.ensemble.forest.ExtraTreesRegressor.__init__(self,n_estimators=10,criterion='mse',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features='auto',max_leaf_nodes=None,bootstrap=False,oob_score=False,n_jobs=1,random_state=None,verbose=0,min_density=None,compute_importances=None)
sklearn.ensemble.forest.ForestClassifier(self,base_estimator,n_estimators=10,estimator_params=tuple(),bootstrap=False,oob_score=False,n_jobs=1,random_state=None,verbose=0)
sklearn.ensemble.forest.ForestClassifier.__init__(self,base_estimator,n_estimators=10,estimator_params=tuple(),bootstrap=False,oob_score=False,n_jobs=1,random_state=None,verbose=0)
sklearn.ensemble.forest.ForestClassifier._set_oob_score(self,X,y)
sklearn.ensemble.forest.ForestClassifier._validate_y(self,y)
sklearn.ensemble.forest.ForestClassifier.predict(self,X)
sklearn.ensemble.forest.ForestClassifier.predict_log_proba(self,X)
sklearn.ensemble.forest.ForestClassifier.predict_proba(self,X)
sklearn.ensemble.forest.ForestRegressor(self,base_estimator,n_estimators=10,estimator_params=tuple(),bootstrap=False,oob_score=False,n_jobs=1,random_state=None,verbose=0)
sklearn.ensemble.forest.ForestRegressor.__init__(self,base_estimator,n_estimators=10,estimator_params=tuple(),bootstrap=False,oob_score=False,n_jobs=1,random_state=None,verbose=0)
sklearn.ensemble.forest.ForestRegressor._set_oob_score(self,X,y)
sklearn.ensemble.forest.ForestRegressor.predict(self,X)
sklearn.ensemble.forest.RandomForestClassifier(self,n_estimators=10,criterion='gini',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features='auto',max_leaf_nodes=None,bootstrap=True,oob_score=False,n_jobs=1,random_state=None,verbose=0,min_density=None,compute_importances=None)
sklearn.ensemble.forest.RandomForestClassifier.__init__(self,n_estimators=10,criterion='gini',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features='auto',max_leaf_nodes=None,bootstrap=True,oob_score=False,n_jobs=1,random_state=None,verbose=0,min_density=None,compute_importances=None)
sklearn.ensemble.forest.RandomForestRegressor(self,n_estimators=10,criterion='mse',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features='auto',max_leaf_nodes=None,bootstrap=True,oob_score=False,n_jobs=1,random_state=None,verbose=0,min_density=None,compute_importances=None)
sklearn.ensemble.forest.RandomForestRegressor.__init__(self,n_estimators=10,criterion='mse',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features='auto',max_leaf_nodes=None,bootstrap=True,oob_score=False,n_jobs=1,random_state=None,verbose=0,min_density=None,compute_importances=None)
sklearn.ensemble.forest.RandomTreesEmbedding(self,n_estimators=10,max_depth=5,min_samples_split=2,min_samples_leaf=1,max_leaf_nodes=None,sparse_output=True,n_jobs=1,random_state=None,verbose=0,min_density=None)
sklearn.ensemble.forest.RandomTreesEmbedding.__init__(self,n_estimators=10,max_depth=5,min_samples_split=2,min_samples_leaf=1,max_leaf_nodes=None,sparse_output=True,n_jobs=1,random_state=None,verbose=0,min_density=None)
sklearn.ensemble.forest.RandomTreesEmbedding._set_oob_score(*args)
sklearn.ensemble.forest.RandomTreesEmbedding.fit(self,X,y=None)
sklearn.ensemble.forest.RandomTreesEmbedding.fit_transform(self,X,y=None)
sklearn.ensemble.forest.RandomTreesEmbedding.transform(self,X)
sklearn.ensemble.forest._parallel_apply(tree,X)
sklearn.ensemble.forest._parallel_build_trees(trees,forest,X,y,sample_weight,verbose)
sklearn.ensemble.forest._parallel_predict_proba(trees,X,n_classes,n_outputs)
sklearn.ensemble.forest._parallel_predict_regression(trees,X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/ensemble/gradient_boosting.py----------------------------------------
A:sklearn.ensemble.gradient_boosting.self.quantile->scipy.stats.scoreatpercentile(y, self.alpha * 100.0)
A:sklearn.ensemble.gradient_boosting.y->column_or_1d(y, warn=True)
A:sklearn.ensemble.gradient_boosting.self.mean->numpy.mean(y)
A:sklearn.ensemble.gradient_boosting.n_pos->numpy.sum(y)
A:sklearn.ensemble.gradient_boosting.self.prior->numpy.log(n_pos / n_neg)
A:sklearn.ensemble.gradient_boosting.class_counts->numpy.bincount(y)
A:sklearn.ensemble.gradient_boosting.terminal_regions->DecisionTreeRegressor(criterion=criterion, splitter=splitter, max_depth=self.max_depth, min_samples_split=self.min_samples_split, min_samples_leaf=self.min_samples_leaf, max_features=self.max_features, max_leaf_nodes=self.max_leaf_nodes, random_state=random_state).apply(X)
A:sklearn.ensemble.gradient_boosting.masked_terminal_regions->DecisionTreeRegressor(criterion=criterion, splitter=splitter, max_depth=self.max_depth, min_samples_split=self.min_samples_split, min_samples_leaf=self.min_samples_leaf, max_features=self.max_features, max_leaf_nodes=self.max_leaf_nodes, random_state=random_state).apply(X).copy()
A:sklearn.ensemble.gradient_boosting.pred->pred.ravel().ravel()
A:sklearn.ensemble.gradient_boosting.tree.value[leaf, 0, 0]->numpy.median(y.take(terminal_region, axis=0) - pred.take(terminal_region, axis=0))
A:sklearn.ensemble.gradient_boosting.gamma->scipy.stats.scoreatpercentile(np.abs(diff), self.alpha * 100)
A:sklearn.ensemble.gradient_boosting.sq_loss->numpy.sum(0.5 * diff[gamma_mask] ** 2.0)
A:sklearn.ensemble.gradient_boosting.lin_loss->numpy.sum(gamma * (np.abs(diff[~gamma_mask]) - gamma / 2.0))
A:sklearn.ensemble.gradient_boosting.residual->loss.negative_gradient(y, y_pred, k=k)
A:sklearn.ensemble.gradient_boosting.median->numpy.median(diff)
A:sklearn.ensemble.gradient_boosting.val->scipy.stats.scoreatpercentile(diff, self.percentile)
A:sklearn.ensemble.gradient_boosting.numerator->loss.negative_gradient(y, y_pred, k=k).sum()
A:sklearn.ensemble.gradient_boosting.denominator->numpy.sum((y - residual) * (1.0 - y + residual))
A:sklearn.ensemble.gradient_boosting.Y->numpy.zeros((y.shape[0], self.K), dtype=np.float64)
A:sklearn.ensemble.gradient_boosting.self.verbose_fmt->' '.join(verbose_fmt)
A:sklearn.ensemble.gradient_boosting.self.start_time->time()
A:sklearn.ensemble.gradient_boosting.remaining_time->'{0:.2f}s'.format(remaining_time)
A:sklearn.ensemble.gradient_boosting.self.estimators_->numpy.empty((0, 0), dtype=np.object)
A:sklearn.ensemble.gradient_boosting.tree->DecisionTreeRegressor(criterion=criterion, splitter=splitter, max_depth=self.max_depth, min_samples_split=self.min_samples_split, min_samples_leaf=self.min_samples_leaf, max_features=self.max_features, max_leaf_nodes=self.max_leaf_nodes, random_state=random_state)
A:sklearn.ensemble.gradient_boosting.sample_weight->_random_sample_mask(n_samples, n_inbag, random_state).astype(np.float64)
A:sklearn.ensemble.gradient_boosting.self.loss_->loss_class(self.n_classes_)
A:sklearn.ensemble.gradient_boosting.max_features->int(self.max_features * self.n_features)
A:sklearn.ensemble.gradient_boosting.self.init_->INIT_ESTIMATORS[self.init]()
A:sklearn.ensemble.gradient_boosting.self.train_score_->numpy.zeros((self.n_estimators,), dtype=np.float64)
A:sklearn.ensemble.gradient_boosting.self._oob_score_->numpy.zeros(total_n_estimators, dtype=np.float64)
A:sklearn.ensemble.gradient_boosting.self.oob_improvement_->numpy.zeros((total_n_estimators,), dtype=np.float64)
A:sklearn.ensemble.gradient_boosting.(X,)->check_arrays(X, dtype=DTYPE, sparse_format='dense')
A:sklearn.ensemble.gradient_boosting.random_state->check_random_state(self.random_state)
A:sklearn.ensemble.gradient_boosting.y_pred->self._fit_stage(i, X, y, y_pred, sample_mask, criterion, splitter, random_state)
A:sklearn.ensemble.gradient_boosting.n_stages->self._fit_stages(X, y, y_pred, random_state, begin_at_stage, monitor)
A:sklearn.ensemble.gradient_boosting.sample_mask->_random_sample_mask(n_samples, n_inbag, random_state)
A:sklearn.ensemble.gradient_boosting.n_inbag->max(1, int(self.subsample * n_samples))
A:sklearn.ensemble.gradient_boosting.criterion->FriedmanMSE(1)
A:sklearn.ensemble.gradient_boosting.splitter->PresortBestSplitter(criterion, self.max_features_, self.min_samples_leaf, random_state)
A:sklearn.ensemble.gradient_boosting.verbose_reporter->VerboseReporter(self.verbose)
A:sklearn.ensemble.gradient_boosting.old_oob_score->loss_(y[~sample_mask], y_pred[~sample_mask])
A:sklearn.ensemble.gradient_boosting.self.train_score_[i]->loss_(y, y_pred)
A:sklearn.ensemble.gradient_boosting.self._oob_score_[i]->loss_(y[~sample_mask], y_pred[~sample_mask])
A:sklearn.ensemble.gradient_boosting.early_stopping->monitor(i, self, locals())
A:sklearn.ensemble.gradient_boosting.score->self.decision_function(X)
A:sklearn.ensemble.gradient_boosting.X->array2d(X, dtype=DTYPE, order='C')
A:sklearn.ensemble.gradient_boosting.total_sum->numpy.zeros((self.n_features,), dtype=np.float64)
A:sklearn.ensemble.gradient_boosting.(self.classes_, y)->numpy.unique(y, return_inverse=True)
A:sklearn.ensemble.gradient_boosting.self.n_classes_->len(self.classes_)
A:sklearn.ensemble.gradient_boosting.proba->self.predict_proba(X)
sklearn.ensemble.GradientBoostingClassifier(self,loss='deviance',learning_rate=0.1,n_estimators=100,subsample=1.0,min_samples_split=2,min_samples_leaf=1,max_depth=3,init=None,random_state=None,max_features=None,verbose=0,max_leaf_nodes=None,warm_start=False)
sklearn.ensemble.GradientBoostingClassifier._score_to_proba(self,score)
sklearn.ensemble.GradientBoostingClassifier.fit(self,X,y,monitor=None)
sklearn.ensemble.GradientBoostingClassifier.predict(self,X)
sklearn.ensemble.GradientBoostingClassifier.predict_proba(self,X)
sklearn.ensemble.GradientBoostingClassifier.staged_predict(self,X)
sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba(self,X)
sklearn.ensemble.GradientBoostingRegressor(self,loss='ls',learning_rate=0.1,n_estimators=100,subsample=1.0,min_samples_split=2,min_samples_leaf=1,max_depth=3,init=None,random_state=None,max_features=None,alpha=0.9,verbose=0,max_leaf_nodes=None,warm_start=False)
sklearn.ensemble.GradientBoostingRegressor.fit(self,X,y,monitor=None)
sklearn.ensemble.GradientBoostingRegressor.predict(self,X)
sklearn.ensemble.GradientBoostingRegressor.staged_predict(self,X)
sklearn.ensemble.gradient_boosting.BaseGradientBoosting(self,loss,learning_rate,n_estimators,min_samples_split,min_samples_leaf,max_depth,init,subsample,max_features,random_state,alpha=0.9,verbose=0,max_leaf_nodes=None,warm_start=False)
sklearn.ensemble.gradient_boosting.BaseGradientBoosting.__init__(self,loss,learning_rate,n_estimators,min_samples_split,min_samples_leaf,max_depth,init,subsample,max_features,random_state,alpha=0.9,verbose=0,max_leaf_nodes=None,warm_start=False)
sklearn.ensemble.gradient_boosting.BaseGradientBoosting._check_params(self)
sklearn.ensemble.gradient_boosting.BaseGradientBoosting._clear_state(self)
sklearn.ensemble.gradient_boosting.BaseGradientBoosting._fit_stage(self,i,X,y,y_pred,sample_mask,criterion,splitter,random_state)
sklearn.ensemble.gradient_boosting.BaseGradientBoosting._fit_stages(self,X,y,y_pred,random_state,begin_at_stage=0,monitor=None)
sklearn.ensemble.gradient_boosting.BaseGradientBoosting._init_decision_function(self,X)
sklearn.ensemble.gradient_boosting.BaseGradientBoosting._init_state(self)
sklearn.ensemble.gradient_boosting.BaseGradientBoosting._is_initialized(self)
sklearn.ensemble.gradient_boosting.BaseGradientBoosting._make_estimator(self,append=True)
sklearn.ensemble.gradient_boosting.BaseGradientBoosting._resize_state(self)
sklearn.ensemble.gradient_boosting.BaseGradientBoosting.decision_function(self,X)
sklearn.ensemble.gradient_boosting.BaseGradientBoosting.feature_importances_(self)
sklearn.ensemble.gradient_boosting.BaseGradientBoosting.fit(self,X,y,monitor=None)
sklearn.ensemble.gradient_boosting.BaseGradientBoosting.oob_score_(self)
sklearn.ensemble.gradient_boosting.BaseGradientBoosting.staged_decision_function(self,X)
sklearn.ensemble.gradient_boosting.BinomialDeviance(self,n_classes)
sklearn.ensemble.gradient_boosting.BinomialDeviance.__init__(self,n_classes)
sklearn.ensemble.gradient_boosting.BinomialDeviance._update_terminal_region(self,tree,terminal_regions,leaf,X,y,residual,pred)
sklearn.ensemble.gradient_boosting.BinomialDeviance.init_estimator(self)
sklearn.ensemble.gradient_boosting.BinomialDeviance.negative_gradient(self,y,pred,**kargs)
sklearn.ensemble.gradient_boosting.GradientBoostingClassifier(self,loss='deviance',learning_rate=0.1,n_estimators=100,subsample=1.0,min_samples_split=2,min_samples_leaf=1,max_depth=3,init=None,random_state=None,max_features=None,verbose=0,max_leaf_nodes=None,warm_start=False)
sklearn.ensemble.gradient_boosting.GradientBoostingClassifier.__init__(self,loss='deviance',learning_rate=0.1,n_estimators=100,subsample=1.0,min_samples_split=2,min_samples_leaf=1,max_depth=3,init=None,random_state=None,max_features=None,verbose=0,max_leaf_nodes=None,warm_start=False)
sklearn.ensemble.gradient_boosting.GradientBoostingClassifier._score_to_proba(self,score)
sklearn.ensemble.gradient_boosting.GradientBoostingClassifier.fit(self,X,y,monitor=None)
sklearn.ensemble.gradient_boosting.GradientBoostingClassifier.predict(self,X)
sklearn.ensemble.gradient_boosting.GradientBoostingClassifier.predict_proba(self,X)
sklearn.ensemble.gradient_boosting.GradientBoostingClassifier.staged_predict(self,X)
sklearn.ensemble.gradient_boosting.GradientBoostingClassifier.staged_predict_proba(self,X)
sklearn.ensemble.gradient_boosting.GradientBoostingRegressor(self,loss='ls',learning_rate=0.1,n_estimators=100,subsample=1.0,min_samples_split=2,min_samples_leaf=1,max_depth=3,init=None,random_state=None,max_features=None,alpha=0.9,verbose=0,max_leaf_nodes=None,warm_start=False)
sklearn.ensemble.gradient_boosting.GradientBoostingRegressor.__init__(self,loss='ls',learning_rate=0.1,n_estimators=100,subsample=1.0,min_samples_split=2,min_samples_leaf=1,max_depth=3,init=None,random_state=None,max_features=None,alpha=0.9,verbose=0,max_leaf_nodes=None,warm_start=False)
sklearn.ensemble.gradient_boosting.GradientBoostingRegressor.fit(self,X,y,monitor=None)
sklearn.ensemble.gradient_boosting.GradientBoostingRegressor.predict(self,X)
sklearn.ensemble.gradient_boosting.GradientBoostingRegressor.staged_predict(self,X)
sklearn.ensemble.gradient_boosting.HuberLossFunction(self,n_classes,alpha=0.9)
sklearn.ensemble.gradient_boosting.HuberLossFunction.__init__(self,n_classes,alpha=0.9)
sklearn.ensemble.gradient_boosting.HuberLossFunction._update_terminal_region(self,tree,terminal_regions,leaf,X,y,residual,pred)
sklearn.ensemble.gradient_boosting.HuberLossFunction.init_estimator(self)
sklearn.ensemble.gradient_boosting.HuberLossFunction.negative_gradient(self,y,pred,**kargs)
sklearn.ensemble.gradient_boosting.LeastAbsoluteError(self,y,pred)
sklearn.ensemble.gradient_boosting.LeastAbsoluteError.__call__(self,y,pred)
sklearn.ensemble.gradient_boosting.LeastAbsoluteError._update_terminal_region(self,tree,terminal_regions,leaf,X,y,residual,pred)
sklearn.ensemble.gradient_boosting.LeastAbsoluteError.init_estimator(self)
sklearn.ensemble.gradient_boosting.LeastAbsoluteError.negative_gradient(self,y,pred,**kargs)
sklearn.ensemble.gradient_boosting.LeastSquaresError(self,y,pred)
sklearn.ensemble.gradient_boosting.LeastSquaresError.__call__(self,y,pred)
sklearn.ensemble.gradient_boosting.LeastSquaresError._update_terminal_region(self,tree,terminal_regions,leaf,X,y,residual,pred)
sklearn.ensemble.gradient_boosting.LeastSquaresError.init_estimator(self)
sklearn.ensemble.gradient_boosting.LeastSquaresError.negative_gradient(self,y,pred,**kargs)
sklearn.ensemble.gradient_boosting.LeastSquaresError.update_terminal_regions(self,tree,X,y,residual,y_pred,sample_mask,learning_rate=1.0,k=0)
sklearn.ensemble.gradient_boosting.LogOddsEstimator(BaseEstimator)
sklearn.ensemble.gradient_boosting.LogOddsEstimator.fit(self,X,y)
sklearn.ensemble.gradient_boosting.LogOddsEstimator.predict(self,X)
sklearn.ensemble.gradient_boosting.LossFunction(self,n_classes)
sklearn.ensemble.gradient_boosting.LossFunction.__init__(self,n_classes)
sklearn.ensemble.gradient_boosting.LossFunction._update_terminal_region(self,tree,terminal_regions,leaf,X,y,residual,pred)
sklearn.ensemble.gradient_boosting.LossFunction.init_estimator(self,X,y)
sklearn.ensemble.gradient_boosting.LossFunction.negative_gradient(self,y,y_pred,**kargs)
sklearn.ensemble.gradient_boosting.LossFunction.update_terminal_regions(self,tree,X,y,residual,y_pred,sample_mask,learning_rate=1.0,k=0)
sklearn.ensemble.gradient_boosting.MeanEstimator(BaseEstimator)
sklearn.ensemble.gradient_boosting.MeanEstimator.fit(self,X,y)
sklearn.ensemble.gradient_boosting.MeanEstimator.predict(self,X)
sklearn.ensemble.gradient_boosting.MultinomialDeviance(self,n_classes)
sklearn.ensemble.gradient_boosting.MultinomialDeviance.__init__(self,n_classes)
sklearn.ensemble.gradient_boosting.MultinomialDeviance._update_terminal_region(self,tree,terminal_regions,leaf,X,y,residual,pred)
sklearn.ensemble.gradient_boosting.MultinomialDeviance.init_estimator(self)
sklearn.ensemble.gradient_boosting.MultinomialDeviance.negative_gradient(self,y,pred,k=0)
sklearn.ensemble.gradient_boosting.PriorProbabilityEstimator(BaseEstimator)
sklearn.ensemble.gradient_boosting.PriorProbabilityEstimator.fit(self,X,y)
sklearn.ensemble.gradient_boosting.PriorProbabilityEstimator.predict(self,X)
sklearn.ensemble.gradient_boosting.QuantileEstimator(self,alpha=0.9)
sklearn.ensemble.gradient_boosting.QuantileEstimator.__init__(self,alpha=0.9)
sklearn.ensemble.gradient_boosting.QuantileEstimator.fit(self,X,y)
sklearn.ensemble.gradient_boosting.QuantileEstimator.predict(self,X)
sklearn.ensemble.gradient_boosting.QuantileLossFunction(self,n_classes,alpha=0.9)
sklearn.ensemble.gradient_boosting.QuantileLossFunction.__init__(self,n_classes,alpha=0.9)
sklearn.ensemble.gradient_boosting.QuantileLossFunction._update_terminal_region(self,tree,terminal_regions,leaf,X,y,residual,pred)
sklearn.ensemble.gradient_boosting.QuantileLossFunction.init_estimator(self)
sklearn.ensemble.gradient_boosting.QuantileLossFunction.negative_gradient(self,y,pred,**kargs)
sklearn.ensemble.gradient_boosting.RegressionLossFunction(self,n_classes)
sklearn.ensemble.gradient_boosting.RegressionLossFunction.__init__(self,n_classes)
sklearn.ensemble.gradient_boosting.VerboseReporter(self,verbose)
sklearn.ensemble.gradient_boosting.VerboseReporter.__init__(self,verbose)
sklearn.ensemble.gradient_boosting.VerboseReporter.init(self,est,begin_at_stage=0)
sklearn.ensemble.gradient_boosting.VerboseReporter.update(self,j,est)
sklearn.ensemble.gradient_boosting.ZeroEstimator(BaseEstimator)
sklearn.ensemble.gradient_boosting.ZeroEstimator.fit(self,X,y)
sklearn.ensemble.gradient_boosting.ZeroEstimator.predict(self,X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/ensemble/base.py----------------------------------------
A:sklearn.ensemble.base.estimator->clone(self.base_estimator_)
A:sklearn.ensemble.base.n_jobs->min(ensemble.n_jobs, ensemble.n_estimators)
A:sklearn.ensemble.base.starts->numpy.cumsum(n_estimators)
sklearn.ensemble.BaseEnsemble(self,base_estimator,n_estimators=10,estimator_params=tuple())
sklearn.ensemble.BaseEnsemble.__getitem__(self,index)
sklearn.ensemble.BaseEnsemble.__iter__(self)
sklearn.ensemble.BaseEnsemble.__len__(self)
sklearn.ensemble.BaseEnsemble._make_estimator(self,append=True)
sklearn.ensemble.BaseEnsemble._validate_estimator(self,default=None)
sklearn.ensemble.base.BaseEnsemble(self,base_estimator,n_estimators=10,estimator_params=tuple())
sklearn.ensemble.base.BaseEnsemble.__getitem__(self,index)
sklearn.ensemble.base.BaseEnsemble.__init__(self,base_estimator,n_estimators=10,estimator_params=tuple())
sklearn.ensemble.base.BaseEnsemble.__iter__(self)
sklearn.ensemble.base.BaseEnsemble.__len__(self)
sklearn.ensemble.base.BaseEnsemble._make_estimator(self,append=True)
sklearn.ensemble.base.BaseEnsemble._validate_estimator(self,default=None)
sklearn.ensemble.base._partition_estimators(ensemble)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/ensemble/setup.py----------------------------------------
A:sklearn.ensemble.setup.config->Configuration('ensemble', parent_package, top_path)
sklearn.ensemble.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/ensemble/weight_boosting.py----------------------------------------
A:sklearn.ensemble.weight_boosting.X->safe_asarray(X)
A:sklearn.ensemble.weight_boosting.(X,)->check_arrays(X, dtype=DTYPE)
A:sklearn.ensemble.weight_boosting.(X, y)->check_arrays(X, y, check_ccontiguous=True)
A:sklearn.ensemble.weight_boosting.y->column_or_1d(y, warn=True)
A:sklearn.ensemble.weight_boosting.sample_weight->numpy.empty(X.shape[0], dtype=np.float)
A:sklearn.ensemble.weight_boosting.self.estimator_weights_->numpy.zeros(self.n_estimators, dtype=np.float)
A:sklearn.ensemble.weight_boosting.self.estimator_errors_->numpy.ones(self.n_estimators, dtype=np.float)
A:sklearn.ensemble.weight_boosting.(sample_weight, estimator_weight, estimator_error)->self._boost(iboost, X, y, sample_weight)
A:sklearn.ensemble.weight_boosting.sample_weight_sum->numpy.sum(sample_weight)
A:sklearn.ensemble.weight_boosting.norm->self.estimator_weights_.sum()
A:sklearn.ensemble.weight_boosting.proba->numpy.exp(1.0 / (n_classes - 1) * proba)
A:sklearn.ensemble.weight_boosting.log_proba->numpy.log(proba)
A:sklearn.ensemble.weight_boosting.estimator->self._make_estimator()
A:sklearn.ensemble.weight_boosting.y_predict_proba->self._make_estimator().predict_proba(X)
A:sklearn.ensemble.weight_boosting.self.classes_->getattr(estimator, 'classes_', None)
A:sklearn.ensemble.weight_boosting.self.n_classes_->len(self.classes_)
A:sklearn.ensemble.weight_boosting.y_predict->self._make_estimator().predict(X)
A:sklearn.ensemble.weight_boosting.estimator_error->(sample_weight * error_vect).sum()
A:sklearn.ensemble.weight_boosting.y_codes->numpy.array([-1.0 / (n_classes - 1), 1.0])
A:sklearn.ensemble.weight_boosting.y_coding->numpy.array([-1.0 / (n_classes - 1), 1.0]).take(classes == y[:, np.newaxis])
A:sklearn.ensemble.weight_boosting.pred->sum(((estimator.predict(X) == classes).T * w for (estimator, w) in zip(self.estimators_, self.estimator_weights_)))
A:sklearn.ensemble.weight_boosting.current_pred->self._make_estimator().predict(X)
A:sklearn.ensemble.weight_boosting.tmp_pred->numpy.copy(pred)
A:sklearn.ensemble.weight_boosting.current_proba->_samme_proba(estimator, n_classes, X)
A:sklearn.ensemble.weight_boosting.real_proba->numpy.exp(1.0 / (n_classes - 1) * (proba / norm))
A:sklearn.ensemble.weight_boosting.generator->check_random_state(self.random_state)
A:sklearn.ensemble.weight_boosting.cdf->numpy.empty(X.shape[0], dtype=np.float).cumsum()
A:sklearn.ensemble.weight_boosting.uniform_samples->check_random_state(self.random_state).random_sample(X.shape[0])
A:sklearn.ensemble.weight_boosting.bootstrap_idx->numpy.array(bootstrap_idx, copy=False)
A:sklearn.ensemble.weight_boosting.error_vect->numpy.abs(y_predict - y)
A:sklearn.ensemble.weight_boosting.error_max->numpy.abs(y_predict - y).max()
A:sklearn.ensemble.weight_boosting.sorted_idx->numpy.argsort(predictions, axis=1)
A:sklearn.ensemble.weight_boosting.weight_cdf->self.estimator_weights_[sorted_idx].cumsum(axis=1)
A:sklearn.ensemble.weight_boosting.median_idx->median_or_above.argmax(axis=1)
sklearn.ensemble.AdaBoostClassifier(self,base_estimator=None,n_estimators=50,learning_rate=1.0,algorithm='SAMME.R',random_state=None)
sklearn.ensemble.AdaBoostClassifier._boost(self,iboost,X,y,sample_weight)
sklearn.ensemble.AdaBoostClassifier._boost_discrete(self,iboost,X,y,sample_weight)
sklearn.ensemble.AdaBoostClassifier._boost_real(self,iboost,X,y,sample_weight)
sklearn.ensemble.AdaBoostClassifier._validate_estimator(self)
sklearn.ensemble.AdaBoostClassifier.decision_function(self,X)
sklearn.ensemble.AdaBoostClassifier.fit(self,X,y,sample_weight=None)
sklearn.ensemble.AdaBoostClassifier.predict(self,X)
sklearn.ensemble.AdaBoostClassifier.predict_log_proba(self,X)
sklearn.ensemble.AdaBoostClassifier.predict_proba(self,X)
sklearn.ensemble.AdaBoostClassifier.staged_decision_function(self,X)
sklearn.ensemble.AdaBoostClassifier.staged_predict(self,X)
sklearn.ensemble.AdaBoostClassifier.staged_predict_proba(self,X)
sklearn.ensemble.AdaBoostRegressor(self,base_estimator=None,n_estimators=50,learning_rate=1.0,loss='linear',random_state=None)
sklearn.ensemble.AdaBoostRegressor._boost(self,iboost,X,y,sample_weight)
sklearn.ensemble.AdaBoostRegressor._get_median_predict(self,X,limit)
sklearn.ensemble.AdaBoostRegressor._validate_estimator(self)
sklearn.ensemble.AdaBoostRegressor.fit(self,X,y,sample_weight=None)
sklearn.ensemble.AdaBoostRegressor.predict(self,X)
sklearn.ensemble.AdaBoostRegressor.staged_predict(self,X)
sklearn.ensemble.weight_boosting.AdaBoostClassifier(self,base_estimator=None,n_estimators=50,learning_rate=1.0,algorithm='SAMME.R',random_state=None)
sklearn.ensemble.weight_boosting.AdaBoostClassifier.__init__(self,base_estimator=None,n_estimators=50,learning_rate=1.0,algorithm='SAMME.R',random_state=None)
sklearn.ensemble.weight_boosting.AdaBoostClassifier._boost(self,iboost,X,y,sample_weight)
sklearn.ensemble.weight_boosting.AdaBoostClassifier._boost_discrete(self,iboost,X,y,sample_weight)
sklearn.ensemble.weight_boosting.AdaBoostClassifier._boost_real(self,iboost,X,y,sample_weight)
sklearn.ensemble.weight_boosting.AdaBoostClassifier._validate_estimator(self)
sklearn.ensemble.weight_boosting.AdaBoostClassifier.decision_function(self,X)
sklearn.ensemble.weight_boosting.AdaBoostClassifier.fit(self,X,y,sample_weight=None)
sklearn.ensemble.weight_boosting.AdaBoostClassifier.predict(self,X)
sklearn.ensemble.weight_boosting.AdaBoostClassifier.predict_log_proba(self,X)
sklearn.ensemble.weight_boosting.AdaBoostClassifier.predict_proba(self,X)
sklearn.ensemble.weight_boosting.AdaBoostClassifier.staged_decision_function(self,X)
sklearn.ensemble.weight_boosting.AdaBoostClassifier.staged_predict(self,X)
sklearn.ensemble.weight_boosting.AdaBoostClassifier.staged_predict_proba(self,X)
sklearn.ensemble.weight_boosting.AdaBoostRegressor(self,base_estimator=None,n_estimators=50,learning_rate=1.0,loss='linear',random_state=None)
sklearn.ensemble.weight_boosting.AdaBoostRegressor.__init__(self,base_estimator=None,n_estimators=50,learning_rate=1.0,loss='linear',random_state=None)
sklearn.ensemble.weight_boosting.AdaBoostRegressor._boost(self,iboost,X,y,sample_weight)
sklearn.ensemble.weight_boosting.AdaBoostRegressor._get_median_predict(self,X,limit)
sklearn.ensemble.weight_boosting.AdaBoostRegressor._validate_estimator(self)
sklearn.ensemble.weight_boosting.AdaBoostRegressor.fit(self,X,y,sample_weight=None)
sklearn.ensemble.weight_boosting.AdaBoostRegressor.predict(self,X)
sklearn.ensemble.weight_boosting.AdaBoostRegressor.staged_predict(self,X)
sklearn.ensemble.weight_boosting.BaseWeightBoosting(self,base_estimator=None,n_estimators=50,estimator_params=tuple(),learning_rate=1.0,random_state=None)
sklearn.ensemble.weight_boosting.BaseWeightBoosting.__init__(self,base_estimator=None,n_estimators=50,estimator_params=tuple(),learning_rate=1.0,random_state=None)
sklearn.ensemble.weight_boosting.BaseWeightBoosting._boost(self,iboost,X,y,sample_weight)
sklearn.ensemble.weight_boosting.BaseWeightBoosting._check_fitted(self)
sklearn.ensemble.weight_boosting.BaseWeightBoosting.feature_importances_(self)
sklearn.ensemble.weight_boosting.BaseWeightBoosting.fit(self,X,y,sample_weight=None)
sklearn.ensemble.weight_boosting.BaseWeightBoosting.staged_score(self,X,y,sample_weight=None)
sklearn.ensemble.weight_boosting._samme_proba(estimator,n_classes,X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/ensemble/bagging.py----------------------------------------
A:sklearn.ensemble.bagging.max_samples->int(self.max_samples * X.shape[0])
A:sklearn.ensemble.bagging.max_features->int(self.max_features * self.n_features_)
A:sklearn.ensemble.bagging.random_state->check_random_state(self.random_state)
A:sklearn.ensemble.bagging.seed->check_random_state(random_state.randint(MAX_INT))
A:sklearn.ensemble.bagging.estimator->ensemble._make_estimator(append=False)
A:sklearn.ensemble.bagging.features->sample_without_replacement(n_features, max_features, random_state=random_state)
A:sklearn.ensemble.bagging.curr_sample_weight->sample_weight.copy()
A:sklearn.ensemble.bagging.indices->sample_without_replacement(n_samples, max_samples, random_state=random_state)
A:sklearn.ensemble.bagging.sample_counts->numpy.bincount(indices, minlength=n_samples)
A:sklearn.ensemble.bagging.not_indices->sample_without_replacement(n_samples, n_samples - max_samples, random_state=random_state)
A:sklearn.ensemble.bagging.proba->numpy.zeros((n_samples, n_classes))
A:sklearn.ensemble.bagging.proba_estimator->ensemble._make_estimator(append=False).predict_proba(X[:, features])
A:sklearn.ensemble.bagging.predictions->numpy.zeros((n_samples,))
A:sklearn.ensemble.bagging.log_proba->numpy.logaddexp(log_proba, all_log_proba[j])
A:sklearn.ensemble.bagging.all_classes->numpy.arange(n_classes, dtype=np.int)
A:sklearn.ensemble.bagging.log_proba_estimator->ensemble._make_estimator(append=False).predict_log_proba(X[:, features])
A:sklearn.ensemble.bagging.log_proba[:, estimator.classes_]->numpy.logaddexp(log_proba[:, estimator.classes_], log_proba_estimator[:, range(len(estimator.classes_))])
A:sklearn.ensemble.bagging.missing->numpy.setdiff1d(all_classes, estimator.classes_)
A:sklearn.ensemble.bagging.log_proba[:, missing]->numpy.logaddexp(log_proba[:, missing], -np.inf)
A:sklearn.ensemble.bagging.(X, y)->check_arrays(X, y)
A:sklearn.ensemble.bagging.y->column_or_1d(y, warn=True)
A:sklearn.ensemble.bagging.(n_jobs, n_estimators, starts)->_partition_estimators(self)
A:sklearn.ensemble.bagging.seeds->check_random_state(self.random_state).randint(MAX_INT, size=self.n_estimators)
A:sklearn.ensemble.bagging.all_results->Parallel(n_jobs=n_jobs, verbose=self.verbose)((delayed(_parallel_build_estimators)(n_estimators[i], self, X, y, sample_weight, seeds[starts[i]:starts[i + 1]], verbose=self.verbose) for i in range(n_jobs)))
A:sklearn.ensemble.bagging.self.estimators_->list(itertools.chain.from_iterable((t[0] for t in all_results)))
A:sklearn.ensemble.bagging.self.estimators_samples_->list(itertools.chain.from_iterable((t[1] for t in all_results)))
A:sklearn.ensemble.bagging.self.estimators_features_->list(itertools.chain.from_iterable((t[2] for t in all_results)))
A:sklearn.ensemble.bagging.mask->numpy.ones(n_samples, dtype=np.bool)
A:sklearn.ensemble.bagging.p->ensemble._make_estimator(append=False).predict(X[mask, :][:, features])
A:sklearn.ensemble.bagging.oob_score->accuracy_score(y, classes_.take(np.argmax(predictions, axis=1)))
A:sklearn.ensemble.bagging.(self.classes_, y)->numpy.unique(y, return_inverse=True)
A:sklearn.ensemble.bagging.self.n_classes_->len(self.classes_)
A:sklearn.ensemble.bagging.(X,)->check_arrays(X)
A:sklearn.ensemble.bagging.all_proba->Parallel(n_jobs=n_jobs, verbose=self.verbose)((delayed(_parallel_predict_proba)(self.estimators_[starts[i]:starts[i + 1]], self.estimators_features_[starts[i]:starts[i + 1]], X, self.n_classes_) for i in range(n_jobs)))
A:sklearn.ensemble.bagging.all_log_proba->Parallel(n_jobs=n_jobs, verbose=self.verbose)((delayed(_parallel_predict_log_proba)(self.estimators_[starts[i]:starts[i + 1]], self.estimators_features_[starts[i]:starts[i + 1]], X, self.n_classes_) for i in range(n_jobs)))
A:sklearn.ensemble.bagging.all_decisions->Parallel(n_jobs=n_jobs, verbose=self.verbose)((delayed(_parallel_decision_function)(self.estimators_[starts[i]:starts[i + 1]], self.estimators_features_[starts[i]:starts[i + 1]], X) for i in range(n_jobs)))
A:sklearn.ensemble.bagging.all_y_hat->Parallel(n_jobs=n_jobs, verbose=self.verbose)((delayed(_parallel_predict_regression)(self.estimators_[starts[i]:starts[i + 1]], self.estimators_features_[starts[i]:starts[i + 1]], X) for i in range(n_jobs)))
A:sklearn.ensemble.bagging.n_predictions->numpy.zeros((n_samples,))
A:sklearn.ensemble.bagging.self.oob_score_->r2_score(y, predictions)
sklearn.ensemble.BaggingClassifier(self,base_estimator=None,n_estimators=10,max_samples=1.0,max_features=1.0,bootstrap=True,bootstrap_features=False,oob_score=False,n_jobs=1,random_state=None,verbose=0)
sklearn.ensemble.BaggingClassifier._set_oob_score(self,X,y)
sklearn.ensemble.BaggingClassifier._validate_estimator(self)
sklearn.ensemble.BaggingClassifier._validate_y(self,y)
sklearn.ensemble.BaggingClassifier.decision_function(self,X)
sklearn.ensemble.BaggingClassifier.predict(self,X)
sklearn.ensemble.BaggingClassifier.predict_log_proba(self,X)
sklearn.ensemble.BaggingClassifier.predict_proba(self,X)
sklearn.ensemble.BaggingRegressor(self,base_estimator=None,n_estimators=10,max_samples=1.0,max_features=1.0,bootstrap=True,bootstrap_features=False,oob_score=False,n_jobs=1,random_state=None,verbose=0)
sklearn.ensemble.BaggingRegressor._set_oob_score(self,X,y)
sklearn.ensemble.BaggingRegressor._validate_estimator(self)
sklearn.ensemble.BaggingRegressor.predict(self,X)
sklearn.ensemble.bagging.BaggingClassifier(self,base_estimator=None,n_estimators=10,max_samples=1.0,max_features=1.0,bootstrap=True,bootstrap_features=False,oob_score=False,n_jobs=1,random_state=None,verbose=0)
sklearn.ensemble.bagging.BaggingClassifier.__init__(self,base_estimator=None,n_estimators=10,max_samples=1.0,max_features=1.0,bootstrap=True,bootstrap_features=False,oob_score=False,n_jobs=1,random_state=None,verbose=0)
sklearn.ensemble.bagging.BaggingClassifier._set_oob_score(self,X,y)
sklearn.ensemble.bagging.BaggingClassifier._validate_estimator(self)
sklearn.ensemble.bagging.BaggingClassifier._validate_y(self,y)
sklearn.ensemble.bagging.BaggingClassifier.decision_function(self,X)
sklearn.ensemble.bagging.BaggingClassifier.predict(self,X)
sklearn.ensemble.bagging.BaggingClassifier.predict_log_proba(self,X)
sklearn.ensemble.bagging.BaggingClassifier.predict_proba(self,X)
sklearn.ensemble.bagging.BaggingRegressor(self,base_estimator=None,n_estimators=10,max_samples=1.0,max_features=1.0,bootstrap=True,bootstrap_features=False,oob_score=False,n_jobs=1,random_state=None,verbose=0)
sklearn.ensemble.bagging.BaggingRegressor.__init__(self,base_estimator=None,n_estimators=10,max_samples=1.0,max_features=1.0,bootstrap=True,bootstrap_features=False,oob_score=False,n_jobs=1,random_state=None,verbose=0)
sklearn.ensemble.bagging.BaggingRegressor._set_oob_score(self,X,y)
sklearn.ensemble.bagging.BaggingRegressor._validate_estimator(self)
sklearn.ensemble.bagging.BaggingRegressor.predict(self,X)
sklearn.ensemble.bagging.BaseBagging(self,base_estimator=None,n_estimators=10,max_samples=1.0,max_features=1.0,bootstrap=True,bootstrap_features=False,oob_score=False,n_jobs=1,random_state=None,verbose=0)
sklearn.ensemble.bagging.BaseBagging.__init__(self,base_estimator=None,n_estimators=10,max_samples=1.0,max_features=1.0,bootstrap=True,bootstrap_features=False,oob_score=False,n_jobs=1,random_state=None,verbose=0)
sklearn.ensemble.bagging.BaseBagging._set_oob_score(self,X,y)
sklearn.ensemble.bagging.BaseBagging._validate_y(self,y)
sklearn.ensemble.bagging.BaseBagging.fit(self,X,y,sample_weight=None)
sklearn.ensemble.bagging._parallel_build_estimators(n_estimators,ensemble,X,y,sample_weight,seeds,verbose)
sklearn.ensemble.bagging._parallel_decision_function(estimators,estimators_features,X)
sklearn.ensemble.bagging._parallel_predict_log_proba(estimators,estimators_features,X,n_classes)
sklearn.ensemble.bagging._parallel_predict_proba(estimators,estimators_features,X,n_classes)
sklearn.ensemble.bagging._parallel_predict_regression(estimators,estimators_features,X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/ensemble/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/ensemble/tests/test_bagging.py----------------------------------------
A:sklearn.ensemble.tests.test_bagging.rng->check_random_state(0)
A:sklearn.ensemble.tests.test_bagging.iris->load_iris()
A:sklearn.ensemble.tests.test_bagging.perm->check_random_state(0).permutation(boston.target.size)
A:sklearn.ensemble.tests.test_bagging.boston->load_boston()
A:sklearn.ensemble.tests.test_bagging.(X_train, X_test, y_train, y_test)->train_test_split(boston.data, boston.target, random_state=rng)
A:sklearn.ensemble.tests.test_bagging.grid->ParameterGrid({'max_samples': [0.5, 1.0], 'max_features': [0.5, 1.0], 'bootstrap': [True, False], 'bootstrap_features': [True, False]})
A:sklearn.ensemble.tests.test_bagging.self.data_type_->type(X)
A:sklearn.ensemble.tests.test_bagging.X_train_sparse->sparse_format(X_train)
A:sklearn.ensemble.tests.test_bagging.X_test_sparse->sparse_format(X_test)
A:sklearn.ensemble.tests.test_bagging.sparse_classifier->BaggingRegressor(base_estimator=CustomSVR(), random_state=1, **params).fit(X_train_sparse, y_train)
A:sklearn.ensemble.tests.test_bagging.sparse_results->BaggingRegressor(base_estimator=CustomSVR(), random_state=1, **params).fit(X_train_sparse, y_train).predict(X_test_sparse)
A:sklearn.ensemble.tests.test_bagging.dense_results->BaggingRegressor(base_estimator=CustomSVR(), random_state=1, **params).fit(X_train, y_train).predict(X_test)
A:sklearn.ensemble.tests.test_bagging.sparse_type->type(X_train_sparse)
A:sklearn.ensemble.tests.test_bagging.base_estimator->DecisionTreeRegressor().fit(X_train, y_train)
A:sklearn.ensemble.tests.test_bagging.ensemble->BaggingRegressor(SVR(), n_jobs=3, random_state=0).fit(X_train, y_train)
A:sklearn.ensemble.tests.test_bagging.clf->BaggingRegressor(base_estimator=DecisionTreeRegressor(), n_estimators=50, bootstrap=True, oob_score=True, random_state=rng).fit(X_train, y_train)
A:sklearn.ensemble.tests.test_bagging.test_score->BaggingRegressor(base_estimator=DecisionTreeRegressor(), n_estimators=50, bootstrap=True, oob_score=True, random_state=rng).fit(X_train, y_train).score(X_test, y_test)
A:sklearn.ensemble.tests.test_bagging.clf1->BaggingRegressor(base_estimator=KNeighborsRegressor(), n_estimators=1, bootstrap=False, bootstrap_features=False, random_state=rng).fit(X_train, y_train)
A:sklearn.ensemble.tests.test_bagging.clf2->KNeighborsRegressor().fit(X_train, y_train)
A:sklearn.ensemble.tests.test_bagging.base->DecisionTreeClassifier()
A:sklearn.ensemble.tests.test_bagging.y1->BaggingRegressor(SVR(), n_jobs=3, random_state=0).fit(X_train, y_train).predict(X_test)
A:sklearn.ensemble.tests.test_bagging.y2->BaggingRegressor(SVR(), n_jobs=3, random_state=0).fit(X_train, y_train).predict(X_test)
A:sklearn.ensemble.tests.test_bagging.y3->BaggingRegressor(SVR(), n_jobs=3, random_state=0).fit(X_train, y_train).predict(X_test)
A:sklearn.ensemble.tests.test_bagging.decisions1->BaggingRegressor(SVR(), n_jobs=3, random_state=0).fit(X_train, y_train).decision_function(X_test)
A:sklearn.ensemble.tests.test_bagging.decisions2->BaggingRegressor(SVR(), n_jobs=3, random_state=0).fit(X_train, y_train).decision_function(X_test)
A:sklearn.ensemble.tests.test_bagging.decisions3->BaggingRegressor(SVR(), n_jobs=3, random_state=0).fit(X_train, y_train).decision_function(X_test)
sklearn.ensemble.tests.test_bagging.test_base_estimator()
sklearn.ensemble.tests.test_bagging.test_bootstrap_features()
sklearn.ensemble.tests.test_bagging.test_bootstrap_samples()
sklearn.ensemble.tests.test_bagging.test_classification()
sklearn.ensemble.tests.test_bagging.test_error()
sklearn.ensemble.tests.test_bagging.test_gridsearch()
sklearn.ensemble.tests.test_bagging.test_oob_score_classification()
sklearn.ensemble.tests.test_bagging.test_oob_score_regression()
sklearn.ensemble.tests.test_bagging.test_parallel_classification()
sklearn.ensemble.tests.test_bagging.test_parallel_regression()
sklearn.ensemble.tests.test_bagging.test_probability()
sklearn.ensemble.tests.test_bagging.test_regression()
sklearn.ensemble.tests.test_bagging.test_single_estimator()
sklearn.ensemble.tests.test_bagging.test_sparse_classification()
sklearn.ensemble.tests.test_bagging.test_sparse_regression()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/ensemble/tests/test_gradient_boosting_loss_functions.py----------------------------------------
A:sklearn.ensemble.tests.test_gradient_boosting_loss_functions.bd->BinomialDeviance(2)
A:sklearn.ensemble.tests.test_gradient_boosting_loss_functions.est->LogOddsEstimator()
sklearn.ensemble.tests.test_gradient_boosting_loss_functions.test_binomial_deviance()
sklearn.ensemble.tests.test_gradient_boosting_loss_functions.test_log_odds_estimator()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/ensemble/tests/test_gradient_boosting.py----------------------------------------
A:sklearn.ensemble.tests.test_gradient_boosting.rng->numpy.random.RandomState(0)
A:sklearn.ensemble.tests.test_gradient_boosting.boston->sklearn.datasets.load_boston()
A:sklearn.ensemble.tests.test_gradient_boosting.perm->numpy.random.RandomState(0).permutation(iris.target.size)
A:sklearn.ensemble.tests.test_gradient_boosting.iris->sklearn.datasets.load_iris()
A:sklearn.ensemble.tests.test_gradient_boosting.clf->GradientBoostingClassifier(n_estimators=10, warm_start=True)
A:sklearn.ensemble.tests.test_gradient_boosting.(X, y)->sklearn.datasets.make_hastie_10_2(n_samples=100, random_state=1)
A:sklearn.ensemble.tests.test_gradient_boosting.gbrt->GradientBoostingRegressor(n_estimators=1, max_features='log2')
A:sklearn.ensemble.tests.test_gradient_boosting.y_pred->GBEstimator(max_depth=1).fit(X, y).predict(boston.data)
A:sklearn.ensemble.tests.test_gradient_boosting.mse->mean_squared_error(boston.target, y_pred)
A:sklearn.ensemble.tests.test_gradient_boosting.score->GradientBoostingClassifier(n_estimators=10, warm_start=True).score(iris.data, iris.target)
A:sklearn.ensemble.tests.test_gradient_boosting.random_state->check_random_state(1)
A:sklearn.ensemble.tests.test_gradient_boosting.X->numpy.array(boston.data, dtype=np.float32)
A:sklearn.ensemble.tests.test_gradient_boosting.y->numpy.array(iris.target)
A:sklearn.ensemble.tests.test_gradient_boosting.X_new->GradientBoostingClassifier(n_estimators=10, warm_start=True).transform(X, threshold='mean')
A:sklearn.ensemble.tests.test_gradient_boosting.y_proba->GradientBoostingClassifier(n_estimators=10, warm_start=True).predict_proba(T)
A:sklearn.ensemble.tests.test_gradient_boosting.X_sparse->scipy.sparse.csr_matrix(X)
A:sklearn.ensemble.tests.test_gradient_boosting.x->numpy.array([])
A:sklearn.ensemble.tests.test_gradient_boosting.deviance->GradientBoostingRegressor(n_estimators=1, max_features='log2').loss_(y_test, gbrt.decision_function(X_test))
A:sklearn.ensemble.tests.test_gradient_boosting.serialized_clf->pickle.dumps(clf, protocol=pickle.HIGHEST_PROTOCOL)
A:sklearn.ensemble.tests.test_gradient_boosting.clf_quantile->GradientBoostingRegressor(n_estimators=100, loss='quantile', max_depth=4, alpha=0.5, random_state=7)
A:sklearn.ensemble.tests.test_gradient_boosting.y_quantile->GradientBoostingRegressor(n_estimators=100, loss='quantile', max_depth=4, alpha=0.5, random_state=7).predict(boston.data)
A:sklearn.ensemble.tests.test_gradient_boosting.clf_lad->GradientBoostingRegressor(n_estimators=100, loss='lad', max_depth=4, random_state=7)
A:sklearn.ensemble.tests.test_gradient_boosting.y_lad->GradientBoostingRegressor(n_estimators=100, loss='lad', max_depth=4, random_state=7).predict(boston.data)
A:sklearn.ensemble.tests.test_gradient_boosting.symbol_y->tosequence(map(str, y))
A:sklearn.ensemble.tests.test_gradient_boosting.float_y->numpy.asarray(y, dtype=np.float32)
A:sklearn.ensemble.tests.test_gradient_boosting.y_->numpy.asfortranarray(y_)
A:sklearn.ensemble.tests.test_gradient_boosting.X_->numpy.ascontiguousarray(X)
A:sklearn.ensemble.tests.test_gradient_boosting.sys.stdout->StringIO()
A:sklearn.ensemble.tests.test_gradient_boosting.header->verbose_output.readline().rstrip()
A:sklearn.ensemble.tests.test_gradient_boosting.n_lines->sum((1 for l in verbose_output.readlines()))
A:sklearn.ensemble.tests.test_gradient_boosting.est->GBEstimator(max_depth=1).fit(X, y)
A:sklearn.ensemble.tests.test_gradient_boosting.est_ws->Cls(n_estimators=100, max_depth=1, subsample=0.5, random_state=1, warm_start=True)
A:sklearn.ensemble.tests.test_gradient_boosting.est_2->Cls(n_estimators=100, max_depth=1, warm_start=True)
A:sklearn.ensemble.tests.test_gradient_boosting.est2->clone(est)
sklearn.ensemble.tests.test_gradient_boosting.early_stopping_monitor(i,est,locals)
sklearn.ensemble.tests.test_gradient_boosting.test_boston()
sklearn.ensemble.tests.test_gradient_boosting.test_check_inputs()
sklearn.ensemble.tests.test_gradient_boosting.test_check_inputs_predict()
sklearn.ensemble.tests.test_gradient_boosting.test_check_max_features()
sklearn.ensemble.tests.test_gradient_boosting.test_classification_synthetic()
sklearn.ensemble.tests.test_gradient_boosting.test_classification_toy()
sklearn.ensemble.tests.test_gradient_boosting.test_complete_classification()
sklearn.ensemble.tests.test_gradient_boosting.test_complete_regression()
sklearn.ensemble.tests.test_gradient_boosting.test_degenerate_targets()
sklearn.ensemble.tests.test_gradient_boosting.test_feature_importances()
sklearn.ensemble.tests.test_gradient_boosting.test_float_class_labels()
sklearn.ensemble.tests.test_gradient_boosting.test_iris()
sklearn.ensemble.tests.test_gradient_boosting.test_loss_function()
sklearn.ensemble.tests.test_gradient_boosting.test_max_feature_auto()
sklearn.ensemble.tests.test_gradient_boosting.test_max_feature_regression()
sklearn.ensemble.tests.test_gradient_boosting.test_max_leaf_nodes_max_depth()
sklearn.ensemble.tests.test_gradient_boosting.test_mem_layout()
sklearn.ensemble.tests.test_gradient_boosting.test_monitor_early_stopping()
sklearn.ensemble.tests.test_gradient_boosting.test_more_verbose_output()
sklearn.ensemble.tests.test_gradient_boosting.test_oob_improvement()
sklearn.ensemble.tests.test_gradient_boosting.test_oob_improvement_raise()
sklearn.ensemble.tests.test_gradient_boosting.test_oob_multilcass_iris()
sklearn.ensemble.tests.test_gradient_boosting.test_oob_score()
sklearn.ensemble.tests.test_gradient_boosting.test_parameter_checks()
sklearn.ensemble.tests.test_gradient_boosting.test_probability()
sklearn.ensemble.tests.test_gradient_boosting.test_quantile_loss()
sklearn.ensemble.tests.test_gradient_boosting.test_regression_synthetic()
sklearn.ensemble.tests.test_gradient_boosting.test_serialization()
sklearn.ensemble.tests.test_gradient_boosting.test_shape_y()
sklearn.ensemble.tests.test_gradient_boosting.test_staged_predict()
sklearn.ensemble.tests.test_gradient_boosting.test_staged_predict_proba()
sklearn.ensemble.tests.test_gradient_boosting.test_symbol_labels()
sklearn.ensemble.tests.test_gradient_boosting.test_verbose_output()
sklearn.ensemble.tests.test_gradient_boosting.test_warm_start()
sklearn.ensemble.tests.test_gradient_boosting.test_warm_start_clear()
sklearn.ensemble.tests.test_gradient_boosting.test_warm_start_equal_n_estimators()
sklearn.ensemble.tests.test_gradient_boosting.test_warm_start_max_depth()
sklearn.ensemble.tests.test_gradient_boosting.test_warm_start_n_estimators()
sklearn.ensemble.tests.test_gradient_boosting.test_warm_start_oob()
sklearn.ensemble.tests.test_gradient_boosting.test_warm_start_oob_switch()
sklearn.ensemble.tests.test_gradient_boosting.test_warm_start_smaller_n_estimators()
sklearn.ensemble.tests.test_gradient_boosting.test_warm_start_wo_nestimators_change()
sklearn.ensemble.tests.test_gradient_boosting.test_warm_start_zero_n_estimators()
sklearn.ensemble.tests.test_gradient_boosting.test_warn_deviance()
sklearn.ensemble.tests.test_gradient_boosting.test_zero_estimator_clf()
sklearn.ensemble.tests.test_gradient_boosting.test_zero_estimator_reg()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/ensemble/tests/test_base.py----------------------------------------
A:sklearn.ensemble.tests.test_base.ensemble->BaggingClassifier(base_estimator=Perceptron(), n_estimators=0)
A:sklearn.ensemble.tests.test_base.iris->load_iris()
sklearn.ensemble.tests.test_base.test_base()
sklearn.ensemble.tests.test_base.test_base_zero_n_estimators()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/ensemble/tests/test_partial_dependence.py----------------------------------------
A:sklearn.ensemble.tests.test_partial_dependence.boston->sklearn.datasets.load_boston()
A:sklearn.ensemble.tests.test_partial_dependence.iris->sklearn.datasets.load_iris()
A:sklearn.ensemble.tests.test_partial_dependence.clf->GradientBoostingClassifier(n_estimators=10, random_state=1)
A:sklearn.ensemble.tests.test_partial_dependence.(pdp, axes)->partial_dependence(clf, [0], X=boston.data, grid_resolution=grid_resolution)
A:sklearn.ensemble.tests.test_partial_dependence.X_->numpy.asarray(X)
A:sklearn.ensemble.tests.test_partial_dependence.grid->numpy.random.rand(10, 2, 1)
A:sklearn.ensemble.tests.test_partial_dependence.(pdp_2, axes)->partial_dependence(clf, [0], grid=grid)
A:sklearn.ensemble.tests.test_partial_dependence.(fig, axs)->plot_partial_dependence(clf, iris.data, [0, 1], label='setosa', grid_resolution=grid_resolution)
A:sklearn.ensemble.tests.test_partial_dependence.feature_names->sklearn.datasets.load_boston().feature_names.tolist()
sklearn.ensemble.tests.test_partial_dependence.test_partial_dependecy_input()
sklearn.ensemble.tests.test_partial_dependence.test_partial_dependence_classifier()
sklearn.ensemble.tests.test_partial_dependence.test_partial_dependence_multiclass()
sklearn.ensemble.tests.test_partial_dependence.test_partial_dependence_regressor()
sklearn.ensemble.tests.test_partial_dependence.test_plot_partial_dependence()
sklearn.ensemble.tests.test_partial_dependence.test_plot_partial_dependence_input()
sklearn.ensemble.tests.test_partial_dependence.test_plot_partial_dependence_multiclass()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/ensemble/tests/test_weight_boosting.py----------------------------------------
A:sklearn.ensemble.tests.test_weight_boosting.rng->numpy.random.RandomState(0)
A:sklearn.ensemble.tests.test_weight_boosting.iris->sklearn.datasets.load_iris()
A:sklearn.ensemble.tests.test_weight_boosting.perm->numpy.random.RandomState(0).permutation(iris.target.size)
A:sklearn.ensemble.tests.test_weight_boosting.(iris.data, iris.target)->shuffle(iris.data, iris.target, random_state=rng)
A:sklearn.ensemble.tests.test_weight_boosting.boston->sklearn.datasets.load_boston()
A:sklearn.ensemble.tests.test_weight_boosting.(boston.data, boston.target)->shuffle(boston.data, boston.target, random_state=rng)
A:sklearn.ensemble.tests.test_weight_boosting.clf->AdaBoostRegressor(SVR(), random_state=0)
A:sklearn.ensemble.tests.test_weight_boosting.classes->numpy.unique(iris.target)
A:sklearn.ensemble.tests.test_weight_boosting.proba->AdaBoostRegressor(SVR(), random_state=0).predict_proba(iris.data)
A:sklearn.ensemble.tests.test_weight_boosting.score->AdaBoostRegressor(random_state=0).score(boston.data, boston.target)
A:sklearn.ensemble.tests.test_weight_boosting.iris_weights->numpy.random.RandomState(0).randint(10, size=iris.target.shape)
A:sklearn.ensemble.tests.test_weight_boosting.boston_weights->numpy.random.RandomState(0).randint(10, size=boston.target.shape)
A:sklearn.ensemble.tests.test_weight_boosting.predictions->AdaBoostRegressor(SVR(), random_state=0).predict(boston.data)
A:sklearn.ensemble.tests.test_weight_boosting.boost->AdaBoostRegressor(base_estimator=DecisionTreeRegressor(), random_state=0)
A:sklearn.ensemble.tests.test_weight_boosting.obj->AdaBoostRegressor(random_state=0)
A:sklearn.ensemble.tests.test_weight_boosting.s->pickle.dumps(obj)
A:sklearn.ensemble.tests.test_weight_boosting.obj2->pickle.loads(s)
A:sklearn.ensemble.tests.test_weight_boosting.score2->pickle.loads(s).score(boston.data, boston.target)
A:sklearn.ensemble.tests.test_weight_boosting.(X, y)->sklearn.datasets.make_regression(n_samples=100, n_features=50, n_targets=1, random_state=42)
A:sklearn.ensemble.tests.test_weight_boosting.self.data_type_->type(X)
A:sklearn.ensemble.tests.test_weight_boosting.y->numpy.ravel(y)
A:sklearn.ensemble.tests.test_weight_boosting.(X_train, X_test, y_train, y_test)->train_test_split(X, y, random_state=0)
A:sklearn.ensemble.tests.test_weight_boosting.X_train_sparse->sparse_format(X_train)
A:sklearn.ensemble.tests.test_weight_boosting.X_test_sparse->sparse_format(X_test)
A:sklearn.ensemble.tests.test_weight_boosting.sparse_classifier->AdaBoostRegressor(base_estimator=CustomSVR(probability=True), random_state=1).fit(X_train_sparse, y_train)
A:sklearn.ensemble.tests.test_weight_boosting.dense_classifier->AdaBoostClassifier(base_estimator=CustomSVC(probability=True), random_state=1, algorithm='SAMME').fit(X_train, y_train)
A:sklearn.ensemble.tests.test_weight_boosting.sparse_results->AdaBoostRegressor(base_estimator=CustomSVR(probability=True), random_state=1).fit(X_train_sparse, y_train).staged_predict(X_test_sparse)
A:sklearn.ensemble.tests.test_weight_boosting.dense_results->AdaBoostClassifier(base_estimator=CustomSVC(probability=True), random_state=1, algorithm='SAMME').fit(X_train, y_train).staged_predict(X_test)
A:sklearn.ensemble.tests.test_weight_boosting.sparse_type->type(X_train_sparse)
A:sklearn.ensemble.tests.test_weight_boosting.dense_classifierdense_results->AdaBoostRegressor(base_estimator=CustomSVR(probability=True), random_state=1).fit(X_train, y_train)
sklearn.ensemble.tests.test_weight_boosting.test_base_estimator()
sklearn.ensemble.tests.test_weight_boosting.test_boston()
sklearn.ensemble.tests.test_weight_boosting.test_classification_toy()
sklearn.ensemble.tests.test_weight_boosting.test_error()
sklearn.ensemble.tests.test_weight_boosting.test_gridsearch()
sklearn.ensemble.tests.test_weight_boosting.test_importances()
sklearn.ensemble.tests.test_weight_boosting.test_iris()
sklearn.ensemble.tests.test_weight_boosting.test_pickle()
sklearn.ensemble.tests.test_weight_boosting.test_regression_toy()
sklearn.ensemble.tests.test_weight_boosting.test_sparse_classification()
sklearn.ensemble.tests.test_weight_boosting.test_sparse_regression()
sklearn.ensemble.tests.test_weight_boosting.test_staged_predict()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/ensemble/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/ensemble/tests/test_forest.py----------------------------------------
A:sklearn.ensemble.tests.test_forest.iris->sklearn.datasets.load_iris()
A:sklearn.ensemble.tests.test_forest.rng->check_random_state(12321)
A:sklearn.ensemble.tests.test_forest.perm->check_random_state(12321).permutation(boston.target.size)
A:sklearn.ensemble.tests.test_forest.boston->sklearn.datasets.load_boston()
A:sklearn.ensemble.tests.test_forest.FOREST_ESTIMATORS->dict()
A:sklearn.ensemble.tests.test_forest.clf->ExtraTreesRegressor(n_estimators=100, max_features=1, random_state=1).fit(X, y)
A:sklearn.ensemble.tests.test_forest.leaf_indices->ExtraTreesRegressor(n_estimators=100, max_features=1, random_state=1).fit(X, y).apply(X)
A:sklearn.ensemble.tests.test_forest.score->ForestEstimator(random_state=0).score(X, y)
A:sklearn.ensemble.tests.test_forest.r->FOREST_REGRESSORS[name](random_state=0)
A:sklearn.ensemble.tests.test_forest.n_important->numpy.sum(importances > 0.1)
A:sklearn.ensemble.tests.test_forest.X_new->ExtraTreesRegressor(n_estimators=100, max_features=1, random_state=1).fit(X, y).transform(X, threshold='mean')
A:sklearn.ensemble.tests.test_forest.sample_weight->numpy.ones(y.shape)
A:sklearn.ensemble.tests.test_forest.(X, y)->sklearn.datasets.make_hastie_10_2(n_samples=100, random_state=1)
A:sklearn.ensemble.tests.test_forest.est->ForestEstimator(max_depth=1, n_estimators=1).fit(X, y)
A:sklearn.ensemble.tests.test_forest.test_score->ForestEstimator(max_depth=1, n_estimators=1).fit(X, y).score(X[n_samples // 2:, :], y[n_samples // 2:])
A:sklearn.ensemble.tests.test_forest.forest->ForestEstimator(n_estimators=10, n_jobs=3, random_state=0)
A:sklearn.ensemble.tests.test_forest.y1->ForestEstimator(n_estimators=10, n_jobs=3, random_state=0).predict(X)
A:sklearn.ensemble.tests.test_forest.y2->ForestEstimator(n_estimators=10, n_jobs=3, random_state=0).predict(X)
A:sklearn.ensemble.tests.test_forest.obj->ForestEstimator(random_state=0)
A:sklearn.ensemble.tests.test_forest.pickle_object->pickle.dumps(obj)
A:sklearn.ensemble.tests.test_forest.obj2->pickle.loads(pickle_object)
A:sklearn.ensemble.tests.test_forest.score2->pickle.loads(pickle_object).score(X, y)
A:sklearn.ensemble.tests.test_forest.y_pred->ForestEstimator(max_depth=1, n_estimators=1).fit(X, y).fit(X_train, y_train).predict(X_test)
A:sklearn.ensemble.tests.test_forest.proba->ForestEstimator(max_depth=1, n_estimators=1).fit(X, y).predict_proba(X_test)
A:sklearn.ensemble.tests.test_forest.log_proba->ForestEstimator(max_depth=1, n_estimators=1).fit(X, y).predict_log_proba(X_test)
A:sklearn.ensemble.tests.test_forest.hasher->RandomTreesEmbedding(n_estimators=30, random_state=1)
A:sklearn.ensemble.tests.test_forest.X_transformed->RandomTreesEmbedding(n_estimators=30, random_state=1).fit_transform(X)
A:sklearn.ensemble.tests.test_forest.hasher_dense->RandomTreesEmbedding(n_estimators=10, sparse_output=False, random_state=0)
A:sklearn.ensemble.tests.test_forest.hasher_sparse->RandomTreesEmbedding(n_estimators=10, sparse_output=True, random_state=0)
A:sklearn.ensemble.tests.test_forest.X_transformed_dense->RandomTreesEmbedding(n_estimators=10, sparse_output=False, random_state=0).fit_transform(X)
A:sklearn.ensemble.tests.test_forest.X_transformed_sparse->RandomTreesEmbedding(n_estimators=10, sparse_output=True, random_state=0).fit_transform(X)
A:sklearn.ensemble.tests.test_forest.svd->TruncatedSVD(n_components=2)
A:sklearn.ensemble.tests.test_forest.X_reduced->TruncatedSVD(n_components=2).fit_transform(X_transformed)
A:sklearn.ensemble.tests.test_forest.linear_clf->LinearSVC()
A:sklearn.ensemble.tests.test_forest.X_train->check_random_state(12321).randn(n_samples, n_features)
A:sklearn.ensemble.tests.test_forest.y_train->check_random_state(12321).randint(0, 2, n_samples)
A:sklearn.ensemble.tests.test_forest.X_test->check_random_state(12321).randn(n_samples, n_features)
A:sklearn.ensemble.tests.test_forest.X->numpy.empty((1000, 2))
A:sklearn.ensemble.tests.test_forest.y->check_random_state(12321).rand(1000)
A:sklearn.ensemble.tests.test_forest.uniques->defaultdict(int)
A:sklearn.ensemble.tests.test_forest.tree->''.join(('%d,%d/' % (f, int(t)) if f >= 0 else '-' for (f, t) in zip(tree.tree_.feature, tree.tree_.threshold)))
A:sklearn.ensemble.tests.test_forest.X[:, 0]->numpy.random.randint(0, 2, 1000)
A:sklearn.ensemble.tests.test_forest.X[:, 1]->numpy.random.randint(0, 3, 1000)
sklearn.ensemble.tests.test_forest.check_boston_criterion(name,criterion)
sklearn.ensemble.tests.test_forest.check_classes_shape(name)
sklearn.ensemble.tests.test_forest.check_classification_toy(name)
sklearn.ensemble.tests.test_forest.check_gridsearch(name)
sklearn.ensemble.tests.test_forest.check_importance(name,X,y)
sklearn.ensemble.tests.test_forest.check_iris_criterion(name,criterion)
sklearn.ensemble.tests.test_forest.check_max_leaf_nodes_max_depth(name,X,y)
sklearn.ensemble.tests.test_forest.check_multioutput(name,X_train,X_test,y_train,y_test)
sklearn.ensemble.tests.test_forest.check_oob_score(name,X,y,n_estimators=20)
sklearn.ensemble.tests.test_forest.check_parallel(name,X,y)
sklearn.ensemble.tests.test_forest.check_pickle(name,X,y)
sklearn.ensemble.tests.test_forest.check_probability(name)
sklearn.ensemble.tests.test_forest.check_regressor_attributes(name)
sklearn.ensemble.tests.test_forest.test_boston()
sklearn.ensemble.tests.test_forest.test_classes_shape()
sklearn.ensemble.tests.test_forest.test_classification_toy()
sklearn.ensemble.tests.test_forest.test_distribution()
sklearn.ensemble.tests.test_forest.test_gridsearch()
sklearn.ensemble.tests.test_forest.test_importances()
sklearn.ensemble.tests.test_forest.test_iris()
sklearn.ensemble.tests.test_forest.test_max_leaf_nodes_max_depth()
sklearn.ensemble.tests.test_forest.test_multioutput()
sklearn.ensemble.tests.test_forest.test_oob_score()
sklearn.ensemble.tests.test_forest.test_parallel()
sklearn.ensemble.tests.test_forest.test_parallel_train()
sklearn.ensemble.tests.test_forest.test_pickle()
sklearn.ensemble.tests.test_forest.test_probability()
sklearn.ensemble.tests.test_forest.test_random_hasher()
sklearn.ensemble.tests.test_forest.test_random_trees_dense_equal()
sklearn.ensemble.tests.test_forest.test_random_trees_dense_type()
sklearn.ensemble.tests.test_forest.test_regressor_attributes()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/neural_network/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/neural_network/rbm.py----------------------------------------
A:sklearn.neural_network.rbm.(X,)->check_arrays(X, sparse_format='csr', dtype=np.float)
A:sklearn.neural_network.rbm.p->numpy.dot(h, self.components_)
A:sklearn.neural_network.rbm.rng->check_random_state(self.random_state)
A:sklearn.neural_network.rbm.h_->self._sample_hiddens(v, rng)
A:sklearn.neural_network.rbm.v_->atleast2d_or_csr(X).copy()
A:sklearn.neural_network.rbm.self.random_state_->check_random_state(self.random_state)
A:sklearn.neural_network.rbm.self.components_->numpy.asarray(rng.normal(0, 0.01, (self.n_components, X.shape[1])), order='fortran')
A:sklearn.neural_network.rbm.self.intercept_hidden_->numpy.zeros(self.n_components)
A:sklearn.neural_network.rbm.self.intercept_visible_->numpy.zeros(X.shape[1])
A:sklearn.neural_network.rbm.self.h_samples_->numpy.zeros((self.batch_size, self.n_components))
A:sklearn.neural_network.rbm.h_pos->self._mean_hiddens(v_pos)
A:sklearn.neural_network.rbm.v_neg->self._sample_visibles(self.h_samples_, rng)
A:sklearn.neural_network.rbm.h_neg->self._mean_hiddens(v_neg)
A:sklearn.neural_network.rbm.v->atleast2d_or_csr(X)
A:sklearn.neural_network.rbm.fe->self._free_energy(v)
A:sklearn.neural_network.rbm.fe_->self._free_energy(v_)
A:sklearn.neural_network.rbm.n_batches->int(np.ceil(float(n_samples) / self.batch_size))
A:sklearn.neural_network.rbm.batch_slices->list(gen_even_slices(n_batches * self.batch_size, n_batches, n_samples))
A:sklearn.neural_network.rbm.begin->time.time()
A:sklearn.neural_network.rbm.end->time.time()
sklearn.neural_network.BernoulliRBM(self,n_components=256,learning_rate=0.1,batch_size=10,n_iter=10,verbose=0,random_state=None)
sklearn.neural_network.BernoulliRBM._fit(self,v_pos,rng)
sklearn.neural_network.BernoulliRBM._free_energy(self,v)
sklearn.neural_network.BernoulliRBM._mean_hiddens(self,v)
sklearn.neural_network.BernoulliRBM._sample_hiddens(self,v,rng)
sklearn.neural_network.BernoulliRBM._sample_visibles(self,h,rng)
sklearn.neural_network.BernoulliRBM.fit(self,X,y=None)
sklearn.neural_network.BernoulliRBM.gibbs(self,v)
sklearn.neural_network.BernoulliRBM.partial_fit(self,X)
sklearn.neural_network.BernoulliRBM.score_samples(self,X)
sklearn.neural_network.BernoulliRBM.transform(self,X)
sklearn.neural_network.rbm.BernoulliRBM(self,n_components=256,learning_rate=0.1,batch_size=10,n_iter=10,verbose=0,random_state=None)
sklearn.neural_network.rbm.BernoulliRBM.__init__(self,n_components=256,learning_rate=0.1,batch_size=10,n_iter=10,verbose=0,random_state=None)
sklearn.neural_network.rbm.BernoulliRBM._fit(self,v_pos,rng)
sklearn.neural_network.rbm.BernoulliRBM._free_energy(self,v)
sklearn.neural_network.rbm.BernoulliRBM._mean_hiddens(self,v)
sklearn.neural_network.rbm.BernoulliRBM._sample_hiddens(self,v,rng)
sklearn.neural_network.rbm.BernoulliRBM._sample_visibles(self,h,rng)
sklearn.neural_network.rbm.BernoulliRBM.fit(self,X,y=None)
sklearn.neural_network.rbm.BernoulliRBM.gibbs(self,v)
sklearn.neural_network.rbm.BernoulliRBM.partial_fit(self,X)
sklearn.neural_network.rbm.BernoulliRBM.score_samples(self,X)
sklearn.neural_network.rbm.BernoulliRBM.transform(self,X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/preprocessing/_weights.py----------------------------------------
A:sklearn.preprocessing._weights.y->numpy.searchsorted(np.unique(y), y)
A:sklearn.preprocessing._weights.bins->numpy.bincount(y)
sklearn.preprocessing._weights._balance_weights(y)
sklearn.preprocessing._weights.balance_weights(y)
sklearn.preprocessing.balance_weights(y)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/preprocessing/data.py----------------------------------------
A:sklearn.preprocessing.data.X->atleast2d_or_csc(X, copy=copy)
A:sklearn.preprocessing.data.Xr->numpy.rollaxis(X, axis)
A:sklearn.preprocessing.data.mean_->numpy.rollaxis(X, axis).mean(axis=0)
A:sklearn.preprocessing.data.std_->numpy.rollaxis(X, axis).std(axis=0)
A:sklearn.preprocessing.data.(_, var)->mean_variance_axis0(X)
A:sklearn.preprocessing.data.(mean_, std_)->_mean_and_std(X, axis, with_mean=with_mean, with_std=with_std)
A:sklearn.preprocessing.data.data_min->numpy.min(X, axis=0)
A:sklearn.preprocessing.data.self.std_->numpy.sqrt(var)
A:sklearn.preprocessing.data.(self.mean_, self.std_)->_mean_and_std(X, axis=0, with_mean=self.with_mean, with_std=self.with_std)
A:sklearn.preprocessing.data.start->int(not include_bias)
A:sklearn.preprocessing.data.combn->itertools.chain.from_iterable((comb(range(n_features), i) for i in range(start, degree + 1)))
A:sklearn.preprocessing.data.powers->numpy.vstack((np.bincount(c, minlength=n_features) for c in combn))
A:sklearn.preprocessing.data.self.powers_->self._power_matrix(n_features, self.degree, self.interaction_only, self.include_bias)
A:sklearn.preprocessing.data.norms->row_norms(X)
A:sklearn.preprocessing.data.not_cond->numpy.logical_not(cond)
A:sklearn.preprocessing.data.K->K.copy().copy()
A:sklearn.preprocessing.data.col->numpy.concatenate((np.zeros(n_samples), col))
A:sklearn.preprocessing.data.row->numpy.concatenate((np.arange(n_samples), X.row))
A:sklearn.preprocessing.data.data->numpy.ones(n_samples * n_features)
A:sklearn.preprocessing.data.indptr->numpy.concatenate((np.array([0]), indptr))
A:sklearn.preprocessing.data.indices->numpy.cumsum(n_values)
A:sklearn.preprocessing.data.ind->numpy.arange(n_features)
A:sklearn.preprocessing.data.sel->numpy.zeros(n_features, dtype=bool)
A:sklearn.preprocessing.data.not_sel->numpy.logical_not(sel)
A:sklearn.preprocessing.data.n_selected->numpy.sum(sel)
A:sklearn.preprocessing.data.X_sel->transform(X[:, ind[sel]])
A:sklearn.preprocessing.data.n_values->numpy.hstack([[0], n_values])
A:sklearn.preprocessing.data.column_indices->(X + indices[:-1]).ravel()
A:sklearn.preprocessing.data.row_indices->numpy.repeat(np.arange(n_samples, dtype=np.int32), n_features)
A:sklearn.preprocessing.data.out->scipy.sparse.coo_matrix((data, (row_indices, column_indices)), shape=(n_samples, indices[-1]), dtype=self.dtype).tocsr()
sklearn.preprocessing.Binarizer(self,threshold=0.0,copy=True)
sklearn.preprocessing.Binarizer.fit(self,X,y=None)
sklearn.preprocessing.Binarizer.transform(self,X,y=None,copy=None)
sklearn.preprocessing.KernelCenterer(BaseEstimator,TransformerMixin)
sklearn.preprocessing.KernelCenterer.fit(self,K,y=None)
sklearn.preprocessing.KernelCenterer.transform(self,K,y=None,copy=True)
sklearn.preprocessing.MinMaxScaler(self,feature_range=(0,1),copy=True)
sklearn.preprocessing.MinMaxScaler.fit(self,X,y=None)
sklearn.preprocessing.MinMaxScaler.inverse_transform(self,X)
sklearn.preprocessing.MinMaxScaler.transform(self,X)
sklearn.preprocessing.Normalizer(self,norm='l2',copy=True)
sklearn.preprocessing.Normalizer.fit(self,X,y=None)
sklearn.preprocessing.Normalizer.transform(self,X,y=None,copy=None)
sklearn.preprocessing.OneHotEncoder(self,n_values='auto',categorical_features='all',dtype=np.float,sparse=True)
sklearn.preprocessing.OneHotEncoder._fit_transform(self,X)
sklearn.preprocessing.OneHotEncoder._transform(self,X)
sklearn.preprocessing.OneHotEncoder.fit(self,X,y=None)
sklearn.preprocessing.OneHotEncoder.fit_transform(self,X,y=None)
sklearn.preprocessing.OneHotEncoder.transform(self,X)
sklearn.preprocessing.PolynomialFeatures(self,degree=2,interaction_only=False,include_bias=True)
sklearn.preprocessing.PolynomialFeatures._power_matrix(n_features,degree,interaction_only,include_bias)
sklearn.preprocessing.PolynomialFeatures.fit(self,X,y=None)
sklearn.preprocessing.PolynomialFeatures.transform(self,X,y=None)
sklearn.preprocessing.StandardScaler(self,copy=True,with_mean=True,with_std=True)
sklearn.preprocessing.StandardScaler.fit(self,X,y=None)
sklearn.preprocessing.StandardScaler.inverse_transform(self,X,copy=None)
sklearn.preprocessing.StandardScaler.transform(self,X,y=None,copy=None)
sklearn.preprocessing.add_dummy_feature(X,value=1.0)
sklearn.preprocessing.binarize(X,threshold=0.0,copy=True)
sklearn.preprocessing.data.Binarizer(self,threshold=0.0,copy=True)
sklearn.preprocessing.data.Binarizer.__init__(self,threshold=0.0,copy=True)
sklearn.preprocessing.data.Binarizer.fit(self,X,y=None)
sklearn.preprocessing.data.Binarizer.transform(self,X,y=None,copy=None)
sklearn.preprocessing.data.KernelCenterer(BaseEstimator,TransformerMixin)
sklearn.preprocessing.data.KernelCenterer.fit(self,K,y=None)
sklearn.preprocessing.data.KernelCenterer.transform(self,K,y=None,copy=True)
sklearn.preprocessing.data.MinMaxScaler(self,feature_range=(0,1),copy=True)
sklearn.preprocessing.data.MinMaxScaler.__init__(self,feature_range=(0,1),copy=True)
sklearn.preprocessing.data.MinMaxScaler.fit(self,X,y=None)
sklearn.preprocessing.data.MinMaxScaler.inverse_transform(self,X)
sklearn.preprocessing.data.MinMaxScaler.transform(self,X)
sklearn.preprocessing.data.Normalizer(self,norm='l2',copy=True)
sklearn.preprocessing.data.Normalizer.__init__(self,norm='l2',copy=True)
sklearn.preprocessing.data.Normalizer.fit(self,X,y=None)
sklearn.preprocessing.data.Normalizer.transform(self,X,y=None,copy=None)
sklearn.preprocessing.data.OneHotEncoder(self,n_values='auto',categorical_features='all',dtype=np.float,sparse=True)
sklearn.preprocessing.data.OneHotEncoder.__init__(self,n_values='auto',categorical_features='all',dtype=np.float,sparse=True)
sklearn.preprocessing.data.OneHotEncoder._fit_transform(self,X)
sklearn.preprocessing.data.OneHotEncoder._transform(self,X)
sklearn.preprocessing.data.OneHotEncoder.fit(self,X,y=None)
sklearn.preprocessing.data.OneHotEncoder.fit_transform(self,X,y=None)
sklearn.preprocessing.data.OneHotEncoder.transform(self,X)
sklearn.preprocessing.data.PolynomialFeatures(self,degree=2,interaction_only=False,include_bias=True)
sklearn.preprocessing.data.PolynomialFeatures.__init__(self,degree=2,interaction_only=False,include_bias=True)
sklearn.preprocessing.data.PolynomialFeatures._power_matrix(n_features,degree,interaction_only,include_bias)
sklearn.preprocessing.data.PolynomialFeatures.fit(self,X,y=None)
sklearn.preprocessing.data.PolynomialFeatures.transform(self,X,y=None)
sklearn.preprocessing.data.StandardScaler(self,copy=True,with_mean=True,with_std=True)
sklearn.preprocessing.data.StandardScaler.__init__(self,copy=True,with_mean=True,with_std=True)
sklearn.preprocessing.data.StandardScaler.fit(self,X,y=None)
sklearn.preprocessing.data.StandardScaler.inverse_transform(self,X,copy=None)
sklearn.preprocessing.data.StandardScaler.transform(self,X,y=None,copy=None)
sklearn.preprocessing.data._mean_and_std(X,axis=0,with_mean=True,with_std=True)
sklearn.preprocessing.data._transform_selected(X,transform,selected='all',copy=True)
sklearn.preprocessing.data.add_dummy_feature(X,value=1.0)
sklearn.preprocessing.data.binarize(X,threshold=0.0,copy=True)
sklearn.preprocessing.data.normalize(X,norm='l2',axis=1,copy=True)
sklearn.preprocessing.data.scale(X,axis=0,with_mean=True,with_std=True,copy=True)
sklearn.preprocessing.normalize(X,norm='l2',axis=1,copy=True)
sklearn.preprocessing.scale(X,axis=0,with_mean=True,with_std=True,copy=True)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/preprocessing/imputation.py----------------------------------------
A:sklearn.preprocessing.imputation.n_negative->numpy.count_nonzero(data < 0)
A:sklearn.preprocessing.imputation.(middle, is_odd)->divmod(n_elems, 2)
A:sklearn.preprocessing.imputation.mode->scipy.stats.mode(array)
A:sklearn.preprocessing.imputation.X->X.toarray().toarray()
A:sklearn.preprocessing.imputation.self.statistics_->self._dense_fit(X, self.strategy, self.missing_values, self.axis)
A:sklearn.preprocessing.imputation.n_zeros_axis->numpy.zeros(X.shape[not axis], dtype=int)
A:sklearn.preprocessing.imputation.mask_missing_values->_get_mask(X.data, missing_values)
A:sklearn.preprocessing.imputation.mask_valids->numpy.hsplit(np.logical_not(mask_missing_values), X.indptr[1:-1])
A:sklearn.preprocessing.imputation.new_data->X.toarray().toarray().data.copy()
A:sklearn.preprocessing.imputation.sums->X.toarray().toarray().sum(axis=axis)
A:sklearn.preprocessing.imputation.mask_non_zeros->scipy.sparse.csc_matrix((mask_valids.astype(np.float64), X.indices, X.indptr), copy=False)
A:sklearn.preprocessing.imputation.s->scipy.sparse.csc_matrix((mask_valids.astype(np.float64), X.indices, X.indptr), copy=False).sum(axis=0)
A:sklearn.preprocessing.imputation.n_non_missing->numpy.diff(X.indptr)
A:sklearn.preprocessing.imputation.columns_all->numpy.hsplit(X.data, X.indptr[1:-1])
A:sklearn.preprocessing.imputation.median->numpy.ma.getdata(median_masked)
A:sklearn.preprocessing.imputation.median[i]->_get_median(column, n_zeros_axis[i])
A:sklearn.preprocessing.imputation.most_frequent->numpy.empty(X.shape[0])
A:sklearn.preprocessing.imputation.most_frequent[i]->_most_frequent(row, np.nan, 0)
A:sklearn.preprocessing.imputation.mask->_get_mask(X, self.missing_values)
A:sklearn.preprocessing.imputation.masked_X->numpy.ma.masked_array(X, mask=mask)
A:sklearn.preprocessing.imputation.mean_masked->numpy.ma.mean(masked_X, axis=axis)
A:sklearn.preprocessing.imputation.mean->numpy.ma.getdata(mean_masked)
A:sklearn.preprocessing.imputation.masked_X.mask->numpy.logical_or(masked_X.mask, np.isnan(X))
A:sklearn.preprocessing.imputation.median_masked->numpy.ma.median(masked_X, axis=axis)
A:sklearn.preprocessing.imputation.row_mask->numpy.logical_not(row_mask).astype(np.bool)
A:sklearn.preprocessing.imputation.statistics->self._dense_fit(X, self.strategy, self.missing_values, self.axis)
A:sklearn.preprocessing.imputation.invalid_mask->numpy.isnan(statistics)
A:sklearn.preprocessing.imputation.valid_mask->numpy.logical_not(invalid_mask)
A:sklearn.preprocessing.imputation.X.data[mask]->valid_statistics[indexes].astype(X.dtype)
A:sklearn.preprocessing.imputation.n_missing->numpy.sum(mask, axis=self.axis)
A:sklearn.preprocessing.imputation.values->numpy.repeat(valid_statistics, n_missing)
sklearn.preprocessing.Imputer(self,missing_values='NaN',strategy='mean',axis=0,verbose=0,copy=True)
sklearn.preprocessing.Imputer._dense_fit(self,X,strategy,missing_values,axis)
sklearn.preprocessing.Imputer._sparse_fit(self,X,strategy,missing_values,axis)
sklearn.preprocessing.Imputer.fit(self,X,y=None)
sklearn.preprocessing.Imputer.transform(self,X)
sklearn.preprocessing.imputation.Imputer(self,missing_values='NaN',strategy='mean',axis=0,verbose=0,copy=True)
sklearn.preprocessing.imputation.Imputer.__init__(self,missing_values='NaN',strategy='mean',axis=0,verbose=0,copy=True)
sklearn.preprocessing.imputation.Imputer._dense_fit(self,X,strategy,missing_values,axis)
sklearn.preprocessing.imputation.Imputer._sparse_fit(self,X,strategy,missing_values,axis)
sklearn.preprocessing.imputation.Imputer.fit(self,X,y=None)
sklearn.preprocessing.imputation.Imputer.transform(self,X)
sklearn.preprocessing.imputation._get_elem_at_rank(rank,data,n_negative,n_zeros)
sklearn.preprocessing.imputation._get_mask(X,value_to_mask)
sklearn.preprocessing.imputation._get_median(data,n_zeros)
sklearn.preprocessing.imputation._most_frequent(array,extra_value,n_repeat)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/preprocessing/label.py----------------------------------------
A:sklearn.preprocessing.label.y->numpy.empty(len(y), dtype=classes.dtype)
A:sklearn.preprocessing.label.self.classes_->numpy.empty(len(classes), dtype=dtype)
A:sklearn.preprocessing.label.(self.classes_, y)->numpy.unique(y, return_inverse=True)
A:sklearn.preprocessing.label.classes->sorted(set(itertools.chain.from_iterable(y)))
A:sklearn.preprocessing.label.diff->numpy.setdiff1d(classes, self.classes_)
A:sklearn.preprocessing.label.self.y_type_->type_of_target(y)
A:sklearn.preprocessing.label.self.sparse_input_->scipy.sparse.issparse(y)
A:sklearn.preprocessing.label.y_is_multilabel->type_of_target(y).startswith('multilabel')
A:sklearn.preprocessing.label.y_inv->y_inv.toarray().toarray()
A:sklearn.preprocessing.label.(y,)->check_arrays(y)
A:sklearn.preprocessing.label.y_type->type_of_target(y)
A:sklearn.preprocessing.label.n_classes->len(classes)
A:sklearn.preprocessing.label.Y->Y[:, -1].reshape((-1, 1))
A:sklearn.preprocessing.label.sorted_class->numpy.sort(classes)
A:sklearn.preprocessing.label.y_in_classes->in1d(y, classes)
A:sklearn.preprocessing.label.indices->array.array('i')
A:sklearn.preprocessing.label.indptr->array.array('i', [0])
A:sklearn.preprocessing.label.data->numpy.ones(len(indices), dtype=int)
A:sklearn.preprocessing.label.outputs->numpy.arange(n_outputs)
A:sklearn.preprocessing.label.row_nnz->numpy.diff(y.indptr)
A:sklearn.preprocessing.label.y_data_repeated_max->numpy.repeat(row_max, row_nnz)
A:sklearn.preprocessing.label.y_i_all_argmax->numpy.append(y_i_all_argmax, [len(y.data)])
A:sklearn.preprocessing.label.index_first_argmax->numpy.searchsorted(y_i_all_argmax, y.indptr[:-1])
A:sklearn.preprocessing.label.y_ind_ext->numpy.append(y.indices, [0])
A:sklearn.preprocessing.label.y.data->numpy.array(y.data > threshold, dtype=np.int)
A:sklearn.preprocessing.label.mlb->MultiLabelBinarizer(classes=classes).fit([])
A:sklearn.preprocessing.label.class_mapping->numpy.empty(len(tmp), dtype=dtype)
A:sklearn.preprocessing.label.yt->yt.tocsr().tocsr()
A:sklearn.preprocessing.label.tmp->sorted(class_mapping, key=class_mapping.get)
A:sklearn.preprocessing.label.(self.classes_, inverse)->numpy.unique(class_mapping, return_inverse=True)
A:sklearn.preprocessing.label.yt.indices->numpy.take(inverse, yt.indices)
A:sklearn.preprocessing.label.class_to_index->dict(zip(self.classes_, range(len(self.classes_))))
A:sklearn.preprocessing.label.unexpected->numpy.setdiff1d(yt, [0, 1])
sklearn.preprocessing.LabelBinarizer(self,neg_label=0,pos_label=1,sparse_output=False)
sklearn.preprocessing.LabelBinarizer._check_fitted(self)
sklearn.preprocessing.LabelBinarizer.fit(self,y)
sklearn.preprocessing.LabelBinarizer.indicator_matrix_(self)
sklearn.preprocessing.LabelBinarizer.inverse_transform(self,Y,threshold=None)
sklearn.preprocessing.LabelBinarizer.multilabel(self)
sklearn.preprocessing.LabelBinarizer.multilabel_(self)
sklearn.preprocessing.LabelBinarizer.transform(self,y)
sklearn.preprocessing.LabelEncoder(BaseEstimator,TransformerMixin)
sklearn.preprocessing.LabelEncoder._check_fitted(self)
sklearn.preprocessing.LabelEncoder.fit(self,y)
sklearn.preprocessing.LabelEncoder.fit_transform(self,y)
sklearn.preprocessing.LabelEncoder.inverse_transform(self,y)
sklearn.preprocessing.LabelEncoder.transform(self,y)
sklearn.preprocessing.MultiLabelBinarizer(self,classes=None,sparse_output=False)
sklearn.preprocessing.MultiLabelBinarizer._transform(self,y,class_mapping)
sklearn.preprocessing.MultiLabelBinarizer.fit(self,y)
sklearn.preprocessing.MultiLabelBinarizer.fit_transform(self,y)
sklearn.preprocessing.MultiLabelBinarizer.inverse_transform(self,yt)
sklearn.preprocessing.MultiLabelBinarizer.transform(self,y)
sklearn.preprocessing.label.LabelBinarizer(self,neg_label=0,pos_label=1,sparse_output=False)
sklearn.preprocessing.label.LabelBinarizer.__init__(self,neg_label=0,pos_label=1,sparse_output=False)
sklearn.preprocessing.label.LabelBinarizer._check_fitted(self)
sklearn.preprocessing.label.LabelBinarizer.fit(self,y)
sklearn.preprocessing.label.LabelBinarizer.indicator_matrix_(self)
sklearn.preprocessing.label.LabelBinarizer.inverse_transform(self,Y,threshold=None)
sklearn.preprocessing.label.LabelBinarizer.multilabel(self)
sklearn.preprocessing.label.LabelBinarizer.multilabel_(self)
sklearn.preprocessing.label.LabelBinarizer.transform(self,y)
sklearn.preprocessing.label.LabelEncoder(BaseEstimator,TransformerMixin)
sklearn.preprocessing.label.LabelEncoder._check_fitted(self)
sklearn.preprocessing.label.LabelEncoder.fit(self,y)
sklearn.preprocessing.label.LabelEncoder.fit_transform(self,y)
sklearn.preprocessing.label.LabelEncoder.inverse_transform(self,y)
sklearn.preprocessing.label.LabelEncoder.transform(self,y)
sklearn.preprocessing.label.MultiLabelBinarizer(self,classes=None,sparse_output=False)
sklearn.preprocessing.label.MultiLabelBinarizer.__init__(self,classes=None,sparse_output=False)
sklearn.preprocessing.label.MultiLabelBinarizer._transform(self,y,class_mapping)
sklearn.preprocessing.label.MultiLabelBinarizer.fit(self,y)
sklearn.preprocessing.label.MultiLabelBinarizer.fit_transform(self,y)
sklearn.preprocessing.label.MultiLabelBinarizer.inverse_transform(self,yt)
sklearn.preprocessing.label.MultiLabelBinarizer.transform(self,y)
sklearn.preprocessing.label._check_numpy_unicode_bug(labels)
sklearn.preprocessing.label._inverse_binarize_multiclass(y,classes)
sklearn.preprocessing.label._inverse_binarize_thresholding(y,output_type,classes,threshold)
sklearn.preprocessing.label.label_binarize(y,classes,neg_label=0,pos_label=1,sparse_output=False,multilabel=None)
sklearn.preprocessing.label_binarize(y,classes,neg_label=0,pos_label=1,sparse_output=False,multilabel=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/preprocessing/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/neighbors/unsupervised.py----------------------------------------
sklearn.neighbors.NearestNeighbors(self,n_neighbors=5,radius=1.0,algorithm='auto',leaf_size=30,metric='minkowski',p=2,metric_params=None,**kwargs)
sklearn.neighbors.unsupervised.NearestNeighbors(self,n_neighbors=5,radius=1.0,algorithm='auto',leaf_size=30,metric='minkowski',p=2,metric_params=None,**kwargs)
sklearn.neighbors.unsupervised.NearestNeighbors.__init__(self,n_neighbors=5,radius=1.0,algorithm='auto',leaf_size=30,metric='minkowski',p=2,metric_params=None,**kwargs)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/neighbors/base.py----------------------------------------
A:sklearn.neighbors.base.VALID_METRICS->dict(ball_tree=BallTree.valid_metrics, kd_tree=KDTree.valid_metrics, brute=list(PAIRWISE_DISTANCE_FUNCTIONS.keys()) + ['braycurtis', 'canberra', 'chebyshev', 'correlation', 'cosine', 'dice', 'hamming', 'jaccard', 'kulsinski', 'mahalanobis', 'matching', 'minkowski', 'rogerstanimoto', 'russellrao', 'seuclidean', 'sokalmichener', 'sokalsneath', 'sqeuclidean', 'yule', 'wminkowski'])
A:sklearn.neighbors.base.VALID_METRICS_SPARSE->dict(ball_tree=[], kd_tree=[], brute=PAIRWISE_DISTANCE_FUNCTIONS.keys())
A:sklearn.neighbors.base.self.effective_metric_params_->self.metric_params.copy()
A:sklearn.neighbors.base.effective_p->self.effective_metric_params_.get('p', self.p)
A:sklearn.neighbors.base.p->self.effective_metric_params_.pop('p', 2)
A:sklearn.neighbors.base.X->safe_asarray(X)
A:sklearn.neighbors.base.self._fit_X->safe_asarray(X).copy()
A:sklearn.neighbors.base.self._tree->KDTree(X, self.leaf_size, metric=self.effective_metric_, **self.effective_metric_params_)
A:sklearn.neighbors.base.dist->numpy.array([d[neigh_ind[i]] for (i, d) in enumerate(dist)], dtype=dtype_F)
A:sklearn.neighbors.base.neigh_ind->numpy.asarray(neigh_ind, dtype='object')
A:sklearn.neighbors.base.result->self._tree.query(X, n_neighbors, return_distance=return_distance)
A:sklearn.neighbors.base.A_indptr->numpy.concatenate((np.zeros(1, dtype=int), np.cumsum(n_neighbors)))
A:sklearn.neighbors.base.A_data->numpy.ones(n_nonzero)
A:sklearn.neighbors.base.A_ind->numpy.concatenate(list(A_ind))
A:sklearn.neighbors.base.(data, ind)->self.kneighbors(X, n_neighbors + 1, return_distance=True)
A:sklearn.neighbors.base.results->self._tree.query_radius(X, radius, return_distance=return_distance)
A:sklearn.neighbors.base.(dist, A_ind)->self.radius_neighbors(X, radius, return_distance=True)
A:sklearn.neighbors.base.n_neighbors->numpy.array([len(a) for a in A_ind])
A:sklearn.neighbors.base.n_nonzero->numpy.sum(n_neighbors)
A:sklearn.neighbors.base.(X, y)->check_arrays(X, y, sparse_format='csr')
A:sklearn.neighbors.base.y->y.reshape((-1, 1)).reshape((-1, 1))
A:sklearn.neighbors.base.self._y->self._y.ravel()
A:sklearn.neighbors.base.(classes, self._y[:, k])->numpy.unique(y[:, k], return_inverse=True)
sklearn.neighbors.base.KNeighborsMixin(object)
sklearn.neighbors.base.KNeighborsMixin.kneighbors(self,X,n_neighbors=None,return_distance=True)
sklearn.neighbors.base.KNeighborsMixin.kneighbors_graph(self,X,n_neighbors=None,mode='connectivity')
sklearn.neighbors.base.NeighborsBase(self)
sklearn.neighbors.base.NeighborsBase.__init__(self)
sklearn.neighbors.base.NeighborsBase._fit(self,X)
sklearn.neighbors.base.NeighborsBase._init_params(self,n_neighbors=None,radius=None,algorithm='auto',leaf_size=30,metric='minkowski',p=2,metric_params=None,**kwargs)
sklearn.neighbors.base.NeighborsWarning(UserWarning)
sklearn.neighbors.base.RadiusNeighborsMixin(object)
sklearn.neighbors.base.RadiusNeighborsMixin.radius_neighbors(self,X,radius=None,return_distance=True)
sklearn.neighbors.base.RadiusNeighborsMixin.radius_neighbors_graph(self,X,radius=None,mode='connectivity')
sklearn.neighbors.base.SupervisedFloatMixin(object)
sklearn.neighbors.base.SupervisedFloatMixin.fit(self,X,y)
sklearn.neighbors.base.SupervisedIntegerMixin(object)
sklearn.neighbors.base.SupervisedIntegerMixin.fit(self,X,y)
sklearn.neighbors.base.UnsupervisedMixin(object)
sklearn.neighbors.base.UnsupervisedMixin.fit(self,X,y=None)
sklearn.neighbors.base._check_weights(weights)
sklearn.neighbors.base._get_weights(dist,weights)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/neighbors/nearest_centroid.py----------------------------------------
A:sklearn.neighbors.nearest_centroid.(X, y)->check_arrays(X, y, sparse_format='csr')
A:sklearn.neighbors.nearest_centroid.y->column_or_1d(y, warn=True)
A:sklearn.neighbors.nearest_centroid.classes->numpy.unique(y)
A:sklearn.neighbors.nearest_centroid.self.centroids_->numpy.array([dataset_centroid_ + msd[i] for i in xrange(n_classes)])
A:sklearn.neighbors.nearest_centroid.self.centroids_[i]->X[center_mask].mean(axis=0)
A:sklearn.neighbors.nearest_centroid.nk->numpy.array([np.sum(classes == cur_class) for cur_class in classes])
A:sklearn.neighbors.nearest_centroid.m->numpy.sqrt(1.0 / nk + 1.0 / n_samples)
A:sklearn.neighbors.nearest_centroid.variance->variance.sum(axis=0).sum(axis=0)
A:sklearn.neighbors.nearest_centroid.s->numpy.sqrt(variance / (n_samples - n_classes))
A:sklearn.neighbors.nearest_centroid.mm->numpy.sqrt(1.0 / nk + 1.0 / n_samples).reshape(len(m), 1)
A:sklearn.neighbors.nearest_centroid.signs->numpy.sign(deviation)
A:sklearn.neighbors.nearest_centroid.deviation->numpy.multiply(deviation, signs)
A:sklearn.neighbors.nearest_centroid.msd->numpy.multiply(ms, deviation)
A:sklearn.neighbors.nearest_centroid.X->atleast2d_or_csr(X)
sklearn.neighbors.NearestCentroid(self,metric='euclidean',shrink_threshold=None)
sklearn.neighbors.NearestCentroid.fit(self,X,y)
sklearn.neighbors.NearestCentroid.predict(self,X)
sklearn.neighbors.nearest_centroid.NearestCentroid(self,metric='euclidean',shrink_threshold=None)
sklearn.neighbors.nearest_centroid.NearestCentroid.__init__(self,metric='euclidean',shrink_threshold=None)
sklearn.neighbors.nearest_centroid.NearestCentroid.fit(self,X,y)
sklearn.neighbors.nearest_centroid.NearestCentroid.predict(self,X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/neighbors/classification.py----------------------------------------
A:sklearn.neighbors.classification.self.weights->_check_weights(weights)
A:sklearn.neighbors.classification.X->atleast2d_or_csr(X)
A:sklearn.neighbors.classification.(neigh_dist, neigh_ind)->self.radius_neighbors(X)
A:sklearn.neighbors.classification._y->self._y.reshape((-1, 1))
A:sklearn.neighbors.classification.n_outputs->len(classes_)
A:sklearn.neighbors.classification.weights->_get_weights(neigh_dist, self.weights)
A:sklearn.neighbors.classification.y_pred->y_pred.ravel().ravel()
A:sklearn.neighbors.classification.(mode, _)->weighted_mode(_y[neigh_ind, k], weights, axis=1)
A:sklearn.neighbors.classification.mode->mode.ravel().ravel()
A:sklearn.neighbors.classification.y_pred[:, k]->classes_k.take(mode)
A:sklearn.neighbors.classification.all_rows->numpy.arange(X.shape[0])
A:sklearn.neighbors.classification.proba_k->numpy.zeros((n_samples, classes_k.size))
A:sklearn.neighbors.classification.pred_labels->numpy.array([_y[ind, k] for ind in neigh_ind], dtype=object)
A:sklearn.neighbors.classification.y_pred[inliers, k]->classes_k.take(mode)
sklearn.neighbors.KNeighborsClassifier(self,n_neighbors=5,weights='uniform',algorithm='auto',leaf_size=30,p=2,metric='minkowski',metric_params=None,**kwargs)
sklearn.neighbors.KNeighborsClassifier.predict(self,X)
sklearn.neighbors.KNeighborsClassifier.predict_proba(self,X)
sklearn.neighbors.RadiusNeighborsClassifier(self,radius=1.0,weights='uniform',algorithm='auto',leaf_size=30,p=2,metric='minkowski',outlier_label=None,metric_params=None,**kwargs)
sklearn.neighbors.RadiusNeighborsClassifier.predict(self,X)
sklearn.neighbors.classification.KNeighborsClassifier(self,n_neighbors=5,weights='uniform',algorithm='auto',leaf_size=30,p=2,metric='minkowski',metric_params=None,**kwargs)
sklearn.neighbors.classification.KNeighborsClassifier.__init__(self,n_neighbors=5,weights='uniform',algorithm='auto',leaf_size=30,p=2,metric='minkowski',metric_params=None,**kwargs)
sklearn.neighbors.classification.KNeighborsClassifier.predict(self,X)
sklearn.neighbors.classification.KNeighborsClassifier.predict_proba(self,X)
sklearn.neighbors.classification.RadiusNeighborsClassifier(self,radius=1.0,weights='uniform',algorithm='auto',leaf_size=30,p=2,metric='minkowski',outlier_label=None,metric_params=None,**kwargs)
sklearn.neighbors.classification.RadiusNeighborsClassifier.__init__(self,radius=1.0,weights='uniform',algorithm='auto',leaf_size=30,p=2,metric='minkowski',outlier_label=None,metric_params=None,**kwargs)
sklearn.neighbors.classification.RadiusNeighborsClassifier.predict(self,X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/neighbors/graph.py----------------------------------------
A:sklearn.neighbors.graph.X->NearestNeighbors(radius=radius).fit(X)
sklearn.neighbors.graph.kneighbors_graph(X,n_neighbors,mode='connectivity')
sklearn.neighbors.graph.radius_neighbors_graph(X,radius,mode='connectivity')
sklearn.neighbors.kneighbors_graph(X,n_neighbors,mode='connectivity')
sklearn.neighbors.radius_neighbors_graph(X,radius,mode='connectivity')


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/neighbors/regression.py----------------------------------------
A:sklearn.neighbors.regression.self.weights->_check_weights(weights)
A:sklearn.neighbors.regression.X->atleast2d_or_csr(X)
A:sklearn.neighbors.regression.(neigh_dist, neigh_ind)->self.radius_neighbors(X)
A:sklearn.neighbors.regression.weights->_get_weights(neigh_dist, self.weights)
A:sklearn.neighbors.regression._y->_y.reshape((-1, 1)).reshape((-1, 1))
A:sklearn.neighbors.regression.y_pred->y_pred.ravel().ravel()
A:sklearn.neighbors.regression.denom->numpy.sum(weights, axis=1)
A:sklearn.neighbors.regression.num->numpy.sum(_y[neigh_ind, j] * weights, axis=1)
sklearn.neighbors.KNeighborsRegressor(self,n_neighbors=5,weights='uniform',algorithm='auto',leaf_size=30,p=2,metric='minkowski',metric_params=None,**kwargs)
sklearn.neighbors.KNeighborsRegressor.predict(self,X)
sklearn.neighbors.RadiusNeighborsRegressor(self,radius=1.0,weights='uniform',algorithm='auto',leaf_size=30,p=2,metric='minkowski',metric_params=None,**kwargs)
sklearn.neighbors.RadiusNeighborsRegressor.predict(self,X)
sklearn.neighbors.regression.KNeighborsRegressor(self,n_neighbors=5,weights='uniform',algorithm='auto',leaf_size=30,p=2,metric='minkowski',metric_params=None,**kwargs)
sklearn.neighbors.regression.KNeighborsRegressor.__init__(self,n_neighbors=5,weights='uniform',algorithm='auto',leaf_size=30,p=2,metric='minkowski',metric_params=None,**kwargs)
sklearn.neighbors.regression.KNeighborsRegressor.predict(self,X)
sklearn.neighbors.regression.RadiusNeighborsRegressor(self,radius=1.0,weights='uniform',algorithm='auto',leaf_size=30,p=2,metric='minkowski',metric_params=None,**kwargs)
sklearn.neighbors.regression.RadiusNeighborsRegressor.__init__(self,radius=1.0,weights='uniform',algorithm='auto',leaf_size=30,p=2,metric='minkowski',metric_params=None,**kwargs)
sklearn.neighbors.regression.RadiusNeighborsRegressor.predict(self,X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/neighbors/setup.py----------------------------------------
A:sklearn.neighbors.setup.config->Configuration('neighbors', parent_package, top_path)
sklearn.neighbors.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/neighbors/kde.py----------------------------------------
A:sklearn.neighbors.kde.algorithm->self._choose_algorithm(self.algorithm, self.metric)
A:sklearn.neighbors.kde.X->check_random_state(random_state).normal(size=(n_samples, dim))
A:sklearn.neighbors.kde.self.tree_->TREE_DICT[algorithm](X, metric=self.metric, leaf_size=self.leaf_size, **kwargs)
A:sklearn.neighbors.kde.log_density->self.tree_.kernel_density(X, h=self.bandwidth, kernel=self.kernel, atol=atol_N, rtol=self.rtol, breadth_first=self.breadth_first, return_log=True)
A:sklearn.neighbors.kde.data->numpy.asarray(self.tree_.data)
A:sklearn.neighbors.kde.rng->check_random_state(random_state)
A:sklearn.neighbors.kde.i->check_random_state(random_state).randint(data.shape[0], size=n_samples)
A:sklearn.neighbors.kde.s_sq->row_norms(X, squared=True)
sklearn.neighbors.KernelDensity(self,bandwidth=1.0,algorithm='auto',kernel='gaussian',metric='euclidean',atol=0,rtol=0,breadth_first=True,leaf_size=40,metric_params=None)
sklearn.neighbors.KernelDensity._choose_algorithm(self,algorithm,metric)
sklearn.neighbors.KernelDensity.fit(self,X)
sklearn.neighbors.KernelDensity.sample(self,n_samples=1,random_state=None)
sklearn.neighbors.KernelDensity.score(self,X)
sklearn.neighbors.KernelDensity.score_samples(self,X)
sklearn.neighbors.kde.KernelDensity(self,bandwidth=1.0,algorithm='auto',kernel='gaussian',metric='euclidean',atol=0,rtol=0,breadth_first=True,leaf_size=40,metric_params=None)
sklearn.neighbors.kde.KernelDensity.__init__(self,bandwidth=1.0,algorithm='auto',kernel='gaussian',metric='euclidean',atol=0,rtol=0,breadth_first=True,leaf_size=40,metric_params=None)
sklearn.neighbors.kde.KernelDensity._choose_algorithm(self,algorithm,metric)
sklearn.neighbors.kde.KernelDensity.fit(self,X)
sklearn.neighbors.kde.KernelDensity.sample(self,n_samples=1,random_state=None)
sklearn.neighbors.kde.KernelDensity.score(self,X)
sklearn.neighbors.kde.KernelDensity.score_samples(self,X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/neighbors/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/covariance/outlier_detection.py----------------------------------------
A:sklearn.covariance.outlier_detection.mahal_dist->self.mahalanobis(X)
A:sklearn.covariance.outlier_detection.values->self.decision_function(X, raw_values=True)
A:sklearn.covariance.outlier_detection.self.threshold->scipy.stats.scoreatpercentile(self.dist_, 100.0 * (1.0 - self.contamination))
sklearn.covariance.EllipticEnvelope(self,store_precision=True,assume_centered=False,support_fraction=None,contamination=0.1,random_state=None)
sklearn.covariance.EllipticEnvelope.fit(self,X,y=None)
sklearn.covariance.outlier_detection.EllipticEnvelope(self,store_precision=True,assume_centered=False,support_fraction=None,contamination=0.1,random_state=None)
sklearn.covariance.outlier_detection.EllipticEnvelope.__init__(self,store_precision=True,assume_centered=False,support_fraction=None,contamination=0.1,random_state=None)
sklearn.covariance.outlier_detection.EllipticEnvelope.fit(self,X,y=None)
sklearn.covariance.outlier_detection.OutlierDetectionMixin(self,contamination=0.1)
sklearn.covariance.outlier_detection.OutlierDetectionMixin.__init__(self,contamination=0.1)
sklearn.covariance.outlier_detection.OutlierDetectionMixin.decision_function(self,X,raw_values=False)
sklearn.covariance.outlier_detection.OutlierDetectionMixin.predict(self,X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/covariance/shrunk_covariance_.py----------------------------------------
A:sklearn.covariance.shrunk_covariance_.emp_cov->empirical_covariance(X, assume_centered=assume_centered)
A:sklearn.covariance.shrunk_covariance_.self.location_->numpy.reshape(X, (1, -1)).mean(0)
A:sklearn.covariance.shrunk_covariance_.covariance->shrunk_covariance(covariance, self.shrinkage)
A:sklearn.covariance.shrunk_covariance_.X->numpy.reshape(X, (1, -1))
A:sklearn.covariance.shrunk_covariance_.n_splits->int(n_features / block_size)
A:sklearn.covariance.shrunk_covariance_.rows->slice(block_size * i, block_size * (i + 1))
A:sklearn.covariance.shrunk_covariance_.cols->slice(block_size * j, block_size * (j + 1))
A:sklearn.covariance.shrunk_covariance_.beta->min(beta, delta)
A:sklearn.covariance.shrunk_covariance_.shrinkage->min(num / den, 1.0)
A:sklearn.covariance.shrunk_covariance_.(covariance, shrinkage)->oas(X - self.location_, assume_centered=True)
A:sklearn.covariance.shrunk_covariance_.alpha->numpy.mean(emp_cov ** 2)
sklearn.covariance.LedoitWolf(self,store_precision=True,assume_centered=False,block_size=1000)
sklearn.covariance.LedoitWolf.fit(self,X,y=None)
sklearn.covariance.OAS(EmpiricalCovariance)
sklearn.covariance.OAS.fit(self,X,y=None)
sklearn.covariance.ShrunkCovariance(self,store_precision=True,assume_centered=False,shrinkage=0.1)
sklearn.covariance.ShrunkCovariance.fit(self,X,y=None)
sklearn.covariance.ledoit_wolf(X,assume_centered=False,block_size=1000)
sklearn.covariance.ledoit_wolf_shrinkage(X,assume_centered=False,block_size=1000)
sklearn.covariance.oas(X,assume_centered=False)
sklearn.covariance.shrunk_covariance(emp_cov,shrinkage=0.1)
sklearn.covariance.shrunk_covariance_.LedoitWolf(self,store_precision=True,assume_centered=False,block_size=1000)
sklearn.covariance.shrunk_covariance_.LedoitWolf.__init__(self,store_precision=True,assume_centered=False,block_size=1000)
sklearn.covariance.shrunk_covariance_.LedoitWolf.fit(self,X,y=None)
sklearn.covariance.shrunk_covariance_.OAS(EmpiricalCovariance)
sklearn.covariance.shrunk_covariance_.OAS.fit(self,X,y=None)
sklearn.covariance.shrunk_covariance_.ShrunkCovariance(self,store_precision=True,assume_centered=False,shrinkage=0.1)
sklearn.covariance.shrunk_covariance_.ShrunkCovariance.__init__(self,store_precision=True,assume_centered=False,shrinkage=0.1)
sklearn.covariance.shrunk_covariance_.ShrunkCovariance.fit(self,X,y=None)
sklearn.covariance.shrunk_covariance_.ledoit_wolf(X,assume_centered=False,block_size=1000)
sklearn.covariance.shrunk_covariance_.ledoit_wolf_shrinkage(X,assume_centered=False,block_size=1000)
sklearn.covariance.shrunk_covariance_.oas(X,assume_centered=False)
sklearn.covariance.shrunk_covariance_.shrunk_covariance(emp_cov,shrinkage=0.1)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/covariance/graph_lasso_.py----------------------------------------
A:sklearn.covariance.graph_lasso_.gap->numpy.sum(emp_cov * precision_)
A:sklearn.covariance.graph_lasso_.A->numpy.copy(emp_cov)
A:sklearn.covariance.graph_lasso_.precision_->pinvh(covariance_)
A:sklearn.covariance.graph_lasso_.covariance_->empirical_covariance(X, assume_centered=self.assume_centered).copy()
A:sklearn.covariance.graph_lasso_.indices->numpy.arange(n_features)
A:sklearn.covariance.graph_lasso_.costs->list()
A:sklearn.covariance.graph_lasso_.errors->dict(invalid='raise')
A:sklearn.covariance.graph_lasso_.(coefs, _, _)->linear_model.cd_fast.enet_coordinate_descent_gram(coefs, alpha, 0, sub_covariance, row, row, max_iter, tol)
A:sklearn.covariance.graph_lasso_.(_, _, coefs)->lars_path(sub_covariance, row, Xy=row, Gram=sub_covariance, alpha_min=alpha / (n_features - 1), copy_Gram=True, method='lars')
A:sklearn.covariance.graph_lasso_.coefs->numpy.dot(sub_covariance, coefs)
A:sklearn.covariance.graph_lasso_.d_gap->_dual_gap(emp_cov, precision_, alpha)
A:sklearn.covariance.graph_lasso_.cost->_objective(emp_cov, precision_, alpha)
A:sklearn.covariance.graph_lasso_.X->numpy.asarray(X)
A:sklearn.covariance.graph_lasso_.self.location_->numpy.asarray(X).mean(0)
A:sklearn.covariance.graph_lasso_.emp_cov->empirical_covariance(X, assume_centered=self.assume_centered)
A:sklearn.covariance.graph_lasso_.(self.covariance_, self.precision_)->graph_lasso(emp_cov, alpha=best_alpha, mode=self.mode, tol=self.tol, max_iter=self.max_iter, verbose=inner_verbose)
A:sklearn.covariance.graph_lasso_.inner_verbose->max(0, self.verbose - 1)
A:sklearn.covariance.graph_lasso_.covariances_->list()
A:sklearn.covariance.graph_lasso_.precisions_->list()
A:sklearn.covariance.graph_lasso_.scores_->list()
A:sklearn.covariance.graph_lasso_.test_emp_cov->empirical_covariance(X_test)
A:sklearn.covariance.graph_lasso_.(covariance_, precision_)->graph_lasso(emp_cov, alpha=alpha, cov_init=covariance_, mode=mode, tol=tol, max_iter=max_iter, verbose=inner_verbose)
A:sklearn.covariance.graph_lasso_.this_score->numpy.mean(scores)
A:sklearn.covariance.graph_lasso_.cv->check_cv(self.cv, X, y, classifier=False)
A:sklearn.covariance.graph_lasso_.path->list(zip(*path))
A:sklearn.covariance.graph_lasso_.alpha_1->alpha_max(emp_cov)
A:sklearn.covariance.graph_lasso_.t0->time.time()
A:sklearn.covariance.graph_lasso_.this_path->Parallel(n_jobs=self.n_jobs, verbose=self.verbose)((delayed(graph_lasso_path)(X[train], alphas=alphas, X_test=X[test], mode=self.mode, tol=self.tol, max_iter=int(0.1 * self.max_iter), verbose=inner_verbose) for (train, test) in cv))
A:sklearn.covariance.graph_lasso_.(covs, _, scores)->zip(*this_path)
A:sklearn.covariance.graph_lasso_.covs->zip(*covs)
A:sklearn.covariance.graph_lasso_.scores->zip(*scores)
A:sklearn.covariance.graph_lasso_.alphas->list(path[0])
A:sklearn.covariance.graph_lasso_.grid_scores->list(path[1])
A:sklearn.covariance.graph_lasso_.self.grid_scores->numpy.array(grid_scores)
sklearn.covariance.GraphLasso(self,alpha=0.01,mode='cd',tol=0.0001,max_iter=100,verbose=False,assume_centered=False)
sklearn.covariance.GraphLasso.fit(self,X,y=None)
sklearn.covariance.GraphLassoCV(self,alphas=4,n_refinements=4,cv=None,tol=0.0001,max_iter=100,mode='cd',n_jobs=1,verbose=False,assume_centered=False)
sklearn.covariance.GraphLassoCV.fit(self,X,y=None)
sklearn.covariance.graph_lasso(emp_cov,alpha,cov_init=None,mode='cd',tol=0.0001,max_iter=100,verbose=False,return_costs=False,eps=np.finfo(np.float).eps)
sklearn.covariance.graph_lasso_.GraphLasso(self,alpha=0.01,mode='cd',tol=0.0001,max_iter=100,verbose=False,assume_centered=False)
sklearn.covariance.graph_lasso_.GraphLasso.__init__(self,alpha=0.01,mode='cd',tol=0.0001,max_iter=100,verbose=False,assume_centered=False)
sklearn.covariance.graph_lasso_.GraphLasso.fit(self,X,y=None)
sklearn.covariance.graph_lasso_.GraphLassoCV(self,alphas=4,n_refinements=4,cv=None,tol=0.0001,max_iter=100,mode='cd',n_jobs=1,verbose=False,assume_centered=False)
sklearn.covariance.graph_lasso_.GraphLassoCV.__init__(self,alphas=4,n_refinements=4,cv=None,tol=0.0001,max_iter=100,mode='cd',n_jobs=1,verbose=False,assume_centered=False)
sklearn.covariance.graph_lasso_.GraphLassoCV.fit(self,X,y=None)
sklearn.covariance.graph_lasso_._dual_gap(emp_cov,precision_,alpha)
sklearn.covariance.graph_lasso_._objective(mle,precision_,alpha)
sklearn.covariance.graph_lasso_.alpha_max(emp_cov)
sklearn.covariance.graph_lasso_.graph_lasso(emp_cov,alpha,cov_init=None,mode='cd',tol=0.0001,max_iter=100,verbose=False,return_costs=False,eps=np.finfo(np.float).eps)
sklearn.covariance.graph_lasso_.graph_lasso_path(X,alphas,cov_init=None,X_test=None,mode='cd',tol=0.0001,max_iter=100,verbose=False)
sklearn.covariance.graph_lasso_path(X,alphas,cov_init=None,X_test=None,mode='cd',tol=0.0001,max_iter=100,verbose=False)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/covariance/empirical_covariance_.py----------------------------------------
A:sklearn.covariance.empirical_covariance_.X->numpy.reshape(X, (1, -1))
A:sklearn.covariance.empirical_covariance_.covariance->empirical_covariance(X, assume_centered=self.assume_centered)
A:sklearn.covariance.empirical_covariance_.self.precision_->pinvh(covariance)
A:sklearn.covariance.empirical_covariance_.precision->self.get_precision()
A:sklearn.covariance.empirical_covariance_.self.location_->numpy.reshape(X, (1, -1)).mean(0)
A:sklearn.covariance.empirical_covariance_.test_cov->empirical_covariance(X_test - self.location_, assume_centered=True)
A:sklearn.covariance.empirical_covariance_.res->log_likelihood(test_cov, self.get_precision())
A:sklearn.covariance.empirical_covariance_.squared_norm->numpy.amax(linalg.svdvals(np.dot(error.T, error)))
A:sklearn.covariance.empirical_covariance_.result->numpy.sqrt(squared_norm)
A:sklearn.covariance.empirical_covariance_.mahalanobis_dist->numpy.sum(np.dot(centered_obs, precision) * centered_obs, 1)
sklearn.covariance.EmpiricalCovariance(self,store_precision=True,assume_centered=False)
sklearn.covariance.EmpiricalCovariance._set_covariance(self,covariance)
sklearn.covariance.EmpiricalCovariance.error_norm(self,comp_cov,norm='frobenius',scaling=True,squared=True)
sklearn.covariance.EmpiricalCovariance.fit(self,X,y=None)
sklearn.covariance.EmpiricalCovariance.get_precision(self)
sklearn.covariance.EmpiricalCovariance.mahalanobis(self,observations)
sklearn.covariance.EmpiricalCovariance.score(self,X_test,y=None)
sklearn.covariance.empirical_covariance(X,assume_centered=False)
sklearn.covariance.empirical_covariance_.EmpiricalCovariance(self,store_precision=True,assume_centered=False)
sklearn.covariance.empirical_covariance_.EmpiricalCovariance.__init__(self,store_precision=True,assume_centered=False)
sklearn.covariance.empirical_covariance_.EmpiricalCovariance._set_covariance(self,covariance)
sklearn.covariance.empirical_covariance_.EmpiricalCovariance.error_norm(self,comp_cov,norm='frobenius',scaling=True,squared=True)
sklearn.covariance.empirical_covariance_.EmpiricalCovariance.fit(self,X,y=None)
sklearn.covariance.empirical_covariance_.EmpiricalCovariance.get_precision(self)
sklearn.covariance.empirical_covariance_.EmpiricalCovariance.mahalanobis(self,observations)
sklearn.covariance.empirical_covariance_.EmpiricalCovariance.score(self,X_test,y=None)
sklearn.covariance.empirical_covariance_.empirical_covariance(X,assume_centered=False)
sklearn.covariance.empirical_covariance_.log_likelihood(emp_cov,precision)
sklearn.covariance.log_likelihood(emp_cov,precision)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/covariance/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/covariance/robust_covariance.py----------------------------------------
A:sklearn.covariance.robust_covariance.X->numpy.reshape(X, (1, -1))
A:sklearn.covariance.robust_covariance.random_state->check_random_state(self.random_state)
A:sklearn.covariance.robust_covariance.support->numpy.zeros(n_samples, dtype=bool)
A:sklearn.covariance.robust_covariance.precision->pinvh(raw_covariance)
A:sklearn.covariance.robust_covariance.dist->numpy.zeros(n_samples)
A:sklearn.covariance.robust_covariance.location->numpy.asarray([np.mean(X)])
A:sklearn.covariance.robust_covariance.covariance->numpy.asarray([[np.var(X)]])
A:sklearn.covariance.robust_covariance.det->fast_logdet(covariance)
A:sklearn.covariance.robust_covariance.(all_locs_sub, all_covs_sub, all_dets_sub, all_supports_sub, all_ds_sub)->zip(*all_estimates)
A:sklearn.covariance.robust_covariance.n_support->int(support_fraction * n_samples)
A:sklearn.covariance.robust_covariance.X_sorted->numpy.sort(np.ravel(X))
A:sklearn.covariance.robust_covariance.samples_shuffle->check_random_state(self.random_state).permutation(n_samples)
A:sklearn.covariance.robust_covariance.h_subset->int(np.ceil(n_samples_subsets * (n_support / float(n_samples))))
A:sklearn.covariance.robust_covariance.n_trials->max(10, n_trials_tot // n_subsets)
A:sklearn.covariance.robust_covariance.all_best_locations->numpy.zeros((n_best_tot, n_features))
A:sklearn.covariance.robust_covariance.all_best_covariances->numpy.zeros((n_best_tot, n_features, n_features))
A:sklearn.covariance.robust_covariance.(best_locations_sub, best_covariances_sub, _, _)->select_candidates(current_subset, h_subset, n_trials, select=n_best_sub, n_iter=2, cov_computation_method=cov_computation_method, random_state=random_state)
A:sklearn.covariance.robust_covariance.subset_slice->numpy.arange(i * n_best_sub, (i + 1) * n_best_sub)
A:sklearn.covariance.robust_covariance.n_samples_merged->min(1500, n_samples)
A:sklearn.covariance.robust_covariance.h_merged->int(np.ceil(n_samples_merged * (n_support / float(n_samples))))
A:sklearn.covariance.robust_covariance.(locations_merged, covariances_merged, supports_merged, d)->select_candidates(X[selection], h_merged, n_trials=(all_best_locations, all_best_covariances), select=n_best_merged, cov_computation_method=cov_computation_method, random_state=random_state)
A:sklearn.covariance.robust_covariance.(locations_full, covariances_full, supports_full, d)->select_candidates(X, n_support, n_trials=(locations_best, covariances_best), select=1, cov_computation_method=cov_computation_method, random_state=random_state)
A:sklearn.covariance.robust_covariance.(locations_best, covariances_best, _, _)->select_candidates(X, n_support, n_trials=n_trials, select=n_best, n_iter=2, cov_computation_method=cov_computation_method, random_state=random_state)
A:sklearn.covariance.robust_covariance._nonrobust_covariance->staticmethod(empirical_covariance)
A:sklearn.covariance.robust_covariance.(raw_location, raw_covariance, raw_support, raw_dist)->fast_mcd(X, support_fraction=self.support_fraction, cov_computation_method=self._nonrobust_covariance, random_state=random_state)
A:sklearn.covariance.robust_covariance.raw_location->numpy.zeros(n_features)
A:sklearn.covariance.robust_covariance.raw_covariance->self._nonrobust_covariance(X[raw_support], assume_centered=True)
A:sklearn.covariance.robust_covariance.raw_dist->numpy.sum(np.dot(X, precision) * X, 1)
A:sklearn.covariance.robust_covariance.location_reweighted->data[mask].mean(0)
A:sklearn.covariance.robust_covariance.covariance_reweighted->self._nonrobust_covariance(data[mask], assume_centered=self.assume_centered)
A:sklearn.covariance.robust_covariance.support_reweighted->numpy.zeros(n_samples, dtype=bool)
A:sklearn.covariance.robust_covariance.self.dist_->numpy.sum(np.dot(X_centered, self.get_precision()) * X_centered, 1)
sklearn.covariance.MinCovDet(self,store_precision=True,assume_centered=False,support_fraction=None,random_state=None)
sklearn.covariance.MinCovDet.correct_covariance(self,data)
sklearn.covariance.MinCovDet.fit(self,X,y=None)
sklearn.covariance.MinCovDet.reweight_covariance(self,data)
sklearn.covariance.fast_mcd(X,support_fraction=None,cov_computation_method=empirical_covariance,random_state=None)
sklearn.covariance.robust_covariance.MinCovDet(self,store_precision=True,assume_centered=False,support_fraction=None,random_state=None)
sklearn.covariance.robust_covariance.MinCovDet.__init__(self,store_precision=True,assume_centered=False,support_fraction=None,random_state=None)
sklearn.covariance.robust_covariance.MinCovDet.correct_covariance(self,data)
sklearn.covariance.robust_covariance.MinCovDet.fit(self,X,y=None)
sklearn.covariance.robust_covariance.MinCovDet.reweight_covariance(self,data)
sklearn.covariance.robust_covariance._c_step(X,n_support,random_state,remaining_iterations=30,initial_estimates=None,verbose=False,cov_computation_method=empirical_covariance)
sklearn.covariance.robust_covariance.c_step(X,n_support,remaining_iterations=30,initial_estimates=None,verbose=False,cov_computation_method=empirical_covariance,random_state=None)
sklearn.covariance.robust_covariance.fast_mcd(X,support_fraction=None,cov_computation_method=empirical_covariance,random_state=None)
sklearn.covariance.robust_covariance.select_candidates(X,n_support,n_trials,select=1,n_iter=30,verbose=False,cov_computation_method=empirical_covariance,random_state=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/covariance/tests/test_robust_covariance.py----------------------------------------
A:sklearn.covariance.tests.test_robust_covariance.rand_gen->numpy.random.RandomState(0)
A:sklearn.covariance.tests.test_robust_covariance.data->numpy.random.RandomState(0).randn(n_samples, n_features)
A:sklearn.covariance.tests.test_robust_covariance.inliers_mask->numpy.ones(n_samples).astype(bool)
A:sklearn.covariance.tests.test_robust_covariance.mcd_fit->MinCovDet(random_state=rand_gen).fit(data)
A:sklearn.covariance.tests.test_robust_covariance.error_location->numpy.mean((pure_data.mean(0) - T) ** 2)
A:sklearn.covariance.tests.test_robust_covariance.error_cov->numpy.mean((empirical_covariance(pure_data) - S) ** 2)
A:sklearn.covariance.tests.test_robust_covariance.rnd->numpy.random.RandomState(0)
A:sklearn.covariance.tests.test_robust_covariance.X->numpy.random.RandomState(0).randn(100, 10)
A:sklearn.covariance.tests.test_robust_covariance.mcd->MinCovDet()
A:sklearn.covariance.tests.test_robust_covariance.clf->EllipticEnvelope(contamination=0.1)
A:sklearn.covariance.tests.test_robust_covariance.y_pred->EllipticEnvelope(contamination=0.1).predict(X)
A:sklearn.covariance.tests.test_robust_covariance.decision->EllipticEnvelope(contamination=0.1).decision_function(X, raw_values=True)
A:sklearn.covariance.tests.test_robust_covariance.decision_transformed->EllipticEnvelope(contamination=0.1).decision_function(X, raw_values=False)
sklearn.covariance.tests.test_robust_covariance.launch_mcd_on_dataset(n_samples,n_features,n_outliers,tol_loc,tol_cov,tol_support)
sklearn.covariance.tests.test_robust_covariance.test_mcd()
sklearn.covariance.tests.test_robust_covariance.test_mcd_issue1127()
sklearn.covariance.tests.test_robust_covariance.test_outlier_detection()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/covariance/tests/test_covariance.py----------------------------------------
A:sklearn.covariance.tests.test_covariance.cov->ShrunkCovariance(shrinkage=0.5, store_precision=False)
A:sklearn.covariance.tests.test_covariance.emp_cov->empirical_covariance(X)
A:sklearn.covariance.tests.test_covariance.mahal_dist->ShrunkCovariance(shrinkage=0.5, store_precision=False).mahalanobis(X)
A:sklearn.covariance.tests.test_covariance.X_1d->X[:, 0].reshape((-1, 1))
A:sklearn.covariance.tests.test_covariance.X_1sample->numpy.arange(5)
A:sklearn.covariance.tests.test_covariance.X_integer->numpy.asarray([[0, 1], [1, 0]])
A:sklearn.covariance.tests.test_covariance.result->numpy.asarray([[0.25, -0.25], [-0.25, 0.25]])
A:sklearn.covariance.tests.test_covariance.lw->LedoitWolf(store_precision=False)
A:sklearn.covariance.tests.test_covariance.score_->OAS(store_precision=False).score(X_centered)
A:sklearn.covariance.tests.test_covariance.(lw_cov_from_mle, lw_shinkrage_from_mle)->ledoit_wolf(X_1d)
A:sklearn.covariance.tests.test_covariance.scov->ShrunkCovariance(shrinkage=oa.shrinkage_)
A:sklearn.covariance.tests.test_covariance.X_large->numpy.ones((20, 200))
A:sklearn.covariance.tests.test_covariance.oa->OAS(store_precision=False)
A:sklearn.covariance.tests.test_covariance.(oa_cov_from_mle, oa_shinkrage_from_mle)->oas(X_1d)
sklearn.covariance.tests.test_covariance.test_covariance()
sklearn.covariance.tests.test_covariance.test_ledoit_wolf()
sklearn.covariance.tests.test_covariance.test_oas()
sklearn.covariance.tests.test_covariance.test_shrunk_covariance()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/covariance/tests/test_graph_lasso.py----------------------------------------
A:sklearn.covariance.tests.test_graph_lasso.random_state->check_random_state(random_state)
A:sklearn.covariance.tests.test_graph_lasso.prec->make_sparse_spd_matrix(dim, alpha=0.96, random_state=random_state)
A:sklearn.covariance.tests.test_graph_lasso.cov->scipy.linalg.inv(prec)
A:sklearn.covariance.tests.test_graph_lasso.X->check_random_state(random_state).multivariate_normal(np.zeros(dim), cov, size=n_samples)
A:sklearn.covariance.tests.test_graph_lasso.emp_cov->empirical_covariance(X)
A:sklearn.covariance.tests.test_graph_lasso.covs->dict()
A:sklearn.covariance.tests.test_graph_lasso.(cov_, _, costs)->graph_lasso(emp_cov, alpha=alpha, return_costs=True)
A:sklearn.covariance.tests.test_graph_lasso.model->GraphLasso(alpha=0.1).fit(X)
A:sklearn.covariance.tests.test_graph_lasso.precs->list()
A:sklearn.covariance.tests.test_graph_lasso.sys.stdout->StringIO()
sklearn.covariance.tests.test_graph_lasso.test_graph_lasso(random_state=0)
sklearn.covariance.tests.test_graph_lasso.test_graph_lasso_cv(random_state=1)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/covariance/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/mixture/gmm.py----------------------------------------
A:sklearn.mixture.gmm.rng->check_random_state(random_state)
A:sklearn.mixture.gmm.n_dim->len(mean)
A:sklearn.mixture.gmm.rand->check_random_state(random_state).rand(n_samples)
A:sklearn.mixture.gmm.(s, U)->scipy.linalg.eigh(covar)
A:sklearn.mixture.gmm.covars->numpy.asarray(covars)
A:sklearn.mixture.gmm.X->numpy.asarray(X, dtype=np.float)
A:sklearn.mixture.gmm.logprob->logsumexp(lpr, axis=1)
A:sklearn.mixture.gmm.responsibilities->numpy.exp(lpr - logprob[:, np.newaxis])
A:sklearn.mixture.gmm.(logprob, _)->self.score_samples(X)
A:sklearn.mixture.gmm.(logprob, responsibilities)->self.score_samples(X)
A:sklearn.mixture.gmm.random_state->check_random_state(random_state)
A:sklearn.mixture.gmm.weight_cdf->numpy.cumsum(self.weights_)
A:sklearn.mixture.gmm.comps->numpy.cumsum(self.weights_).searchsorted(rand)
A:sklearn.mixture.gmm.num_comp_in_X->comp_in_X.sum()
A:sklearn.mixture.gmm.self.weights_->numpy.tile(1.0 / self.n_components, self.n_components)
A:sklearn.mixture.gmm.self.covars_->covar_mstep_func(self, X, responsibilities, weighted_X_sum, inverse_weights, min_covar)
A:sklearn.mixture.gmm.(curr_log_likelihood, responsibilities)->self.score_samples(X)
A:sklearn.mixture.gmm.weights->numpy.exp(lpr - logprob[:, np.newaxis]).sum(axis=0)
A:sklearn.mixture.gmm.weighted_X_sum->numpy.dot(responsibilities.T, X)
A:sklearn.mixture.gmm.cv->numpy.empty((gmm.n_components, n_features, n_features))
A:sklearn.mixture.gmm.icv->pinvh(covars)
A:sklearn.mixture.gmm.nmix->len(means)
A:sklearn.mixture.gmm.log_prob->numpy.empty((n_samples, nmix))
A:sklearn.mixture.gmm.cv_chol->scipy.linalg.cholesky(cv + min_covar * np.eye(n_dim), lower=True)
A:sklearn.mixture.gmm.avg_X2->numpy.dot(X.T, X)
A:sklearn.mixture.gmm.avg_means2->numpy.dot(gmm.means_.T, weighted_X_sum)
sklearn.mixture.GMM(self,n_components=1,covariance_type='diag',random_state=None,thresh=0.01,min_covar=0.001,n_iter=100,n_init=1,params='wmc',init_params='wmc')
sklearn.mixture.GMM._do_mstep(self,X,responsibilities,params,min_covar=0)
sklearn.mixture.GMM._get_covars(self)
sklearn.mixture.GMM._n_parameters(self)
sklearn.mixture.GMM._set_covars(self,covars)
sklearn.mixture.GMM.aic(self,X)
sklearn.mixture.GMM.bic(self,X)
sklearn.mixture.GMM.eval(self,X)
sklearn.mixture.GMM.fit(self,X)
sklearn.mixture.GMM.predict(self,X)
sklearn.mixture.GMM.predict_proba(self,X)
sklearn.mixture.GMM.sample(self,n_samples=1,random_state=None)
sklearn.mixture.GMM.score(self,X)
sklearn.mixture.GMM.score_samples(self,X)
sklearn.mixture._validate_covars(covars,covariance_type,n_components)
sklearn.mixture.distribute_covar_matrix_to_match_covariance_type(tied_cv,covariance_type,n_components)
sklearn.mixture.gmm.GMM(self,n_components=1,covariance_type='diag',random_state=None,thresh=0.01,min_covar=0.001,n_iter=100,n_init=1,params='wmc',init_params='wmc')
sklearn.mixture.gmm.GMM.__init__(self,n_components=1,covariance_type='diag',random_state=None,thresh=0.01,min_covar=0.001,n_iter=100,n_init=1,params='wmc',init_params='wmc')
sklearn.mixture.gmm.GMM._do_mstep(self,X,responsibilities,params,min_covar=0)
sklearn.mixture.gmm.GMM._get_covars(self)
sklearn.mixture.gmm.GMM._n_parameters(self)
sklearn.mixture.gmm.GMM._set_covars(self,covars)
sklearn.mixture.gmm.GMM.aic(self,X)
sklearn.mixture.gmm.GMM.bic(self,X)
sklearn.mixture.gmm.GMM.eval(self,X)
sklearn.mixture.gmm.GMM.fit(self,X)
sklearn.mixture.gmm.GMM.predict(self,X)
sklearn.mixture.gmm.GMM.predict_proba(self,X)
sklearn.mixture.gmm.GMM.sample(self,n_samples=1,random_state=None)
sklearn.mixture.gmm.GMM.score(self,X)
sklearn.mixture.gmm.GMM.score_samples(self,X)
sklearn.mixture.gmm._covar_mstep_diag(gmm,X,responsibilities,weighted_X_sum,norm,min_covar)
sklearn.mixture.gmm._covar_mstep_full(gmm,X,responsibilities,weighted_X_sum,norm,min_covar)
sklearn.mixture.gmm._covar_mstep_spherical(*args)
sklearn.mixture.gmm._covar_mstep_tied(gmm,X,responsibilities,weighted_X_sum,norm,min_covar)
sklearn.mixture.gmm._log_multivariate_normal_density_diag(X,means,covars)
sklearn.mixture.gmm._log_multivariate_normal_density_full(X,means,covars,min_covar=1e-07)
sklearn.mixture.gmm._log_multivariate_normal_density_spherical(X,means,covars)
sklearn.mixture.gmm._log_multivariate_normal_density_tied(X,means,covars)
sklearn.mixture.gmm._validate_covars(covars,covariance_type,n_components)
sklearn.mixture.gmm.distribute_covar_matrix_to_match_covariance_type(tied_cv,covariance_type,n_components)
sklearn.mixture.gmm.log_multivariate_normal_density(X,means,covars,covariance_type='diag')
sklearn.mixture.gmm.sample_gaussian(mean,covar,covariance_type='diag',n_samples=1,random_state=None)
sklearn.mixture.log_multivariate_normal_density(X,means,covars,covariance_type='diag')
sklearn.mixture.sample_gaussian(mean,covar,covariance_type='diag',n_samples=1,random_state=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/mixture/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/mixture/dpgmm.py----------------------------------------
A:sklearn.mixture.dpgmm.v->numpy.exp(v - out)
A:sklearn.mixture.dpgmm.out->logsumexp(v)
A:sklearn.mixture.dpgmm.l->numpy.sum(digamma(0.5 * (a - np.arange(-1, n_features - 1))))
A:sklearn.mixture.dpgmm.logprior->self._bound_concentration()
A:sklearn.mixture.dpgmm.q->(cdist(x, mu[np.newaxis], 'mahalanobis', VI=A) ** 2).reshape(-1)
A:sklearn.mixture.dpgmm.bound->numpy.sum(z * p, axis=-1)
A:sklearn.mixture.dpgmm.X->numpy.asarray(X)
A:sklearn.mixture.dpgmm.z->log_normalize(z, axis=-1)
A:sklearn.mixture.dpgmm.sd->digamma(self.gamma_.T[1] + self.gamma_.T[2])
A:sklearn.mixture.dpgmm.dgamma2->numpy.zeros(self.n_components)
A:sklearn.mixture.dpgmm.p->_bound_state_log_lik(X, self._initial_bound + self.bound_prec_, self.precs_, self.means_, self.covariance_type)
A:sklearn.mixture.dpgmm.sz->numpy.sum(z, axis=0)
A:sklearn.mixture.dpgmm.num->numpy.dot(cov, num)
A:sklearn.mixture.dpgmm.sq_diff->numpy.sum((X - self.means_[k]) ** 2, axis=1)
A:sklearn.mixture.dpgmm.self.scale_->numpy.identity(n_features)
A:sklearn.mixture.dpgmm.self.det_scale_->numpy.ones(self.n_components)
A:sklearn.mixture.dpgmm.sum_resp->numpy.sum(z.T[k])
A:sklearn.mixture.dpgmm.self.scale_[k]->pinvh(self.scale_[k])
A:sklearn.mixture.dpgmm.self.det_scale_[k]->scipy.linalg.det(self.scale_[k])
A:sklearn.mixture.dpgmm.dg12->digamma(self.gamma_.T[1] + self.gamma_.T[2])
A:sklearn.mixture.dpgmm.c->numpy.sum(z * _bound_state_log_lik(X, self._initial_bound + self.bound_prec_, self.precs_, self.means_, self.covariance_type))
A:sklearn.mixture.dpgmm.self.random_state->check_random_state(self.random_state)
A:sklearn.mixture.dpgmm.self.weights_->numpy.tile(1.0 / self.n_components, self.n_components)
A:sklearn.mixture.dpgmm.self.dof_->numpy.ones(self.n_components)
A:sklearn.mixture.dpgmm.self.precs_->numpy.identity(n_features)
A:sklearn.mixture.dpgmm.self.bound_prec_->numpy.zeros(self.n_components)
A:sklearn.mixture.dpgmm.self.bound_prec_[k]->wishart_log_det(self.dof_[k], self.scale_[k], self.det_scale_[k], n_features)
A:sklearn.mixture.dpgmm.(curr_logprob, z)->self.score_samples(X)
A:sklearn.mixture.dpgmm.dg->digamma(self.gamma_)
A:sklearn.mixture.dpgmm.sg->digamma(np.sum(self.gamma_))
sklearn.mixture.DPGMM(self,n_components=1,covariance_type='diag',alpha=1.0,random_state=None,thresh=0.01,verbose=False,min_covar=None,n_iter=10,params='wmc',init_params='wmc')
sklearn.mixture.DPGMM._bound_concentration(self)
sklearn.mixture.DPGMM._bound_means(self)
sklearn.mixture.DPGMM._bound_precisions(self)
sklearn.mixture.DPGMM._bound_proportions(self,z)
sklearn.mixture.DPGMM._do_mstep(self,X,z,params)
sklearn.mixture.DPGMM._get_covars(self)
sklearn.mixture.DPGMM._get_precisions(self)
sklearn.mixture.DPGMM._initialize_gamma(self)
sklearn.mixture.DPGMM._logprior(self,z)
sklearn.mixture.DPGMM._monitor(self,X,z,n,end=False)
sklearn.mixture.DPGMM._set_covars(self,covars)
sklearn.mixture.DPGMM._set_weights(self)
sklearn.mixture.DPGMM._update_concentration(self,z)
sklearn.mixture.DPGMM._update_means(self,X,z)
sklearn.mixture.DPGMM._update_precisions(self,X,z)
sklearn.mixture.DPGMM.eval(self,X)
sklearn.mixture.DPGMM.fit(self,X)
sklearn.mixture.DPGMM.lower_bound(self,X,z)
sklearn.mixture.DPGMM.score_samples(self,X)
sklearn.mixture.VBGMM(self,n_components=1,covariance_type='diag',alpha=1.0,random_state=None,thresh=0.01,verbose=False,min_covar=None,n_iter=10,params='wmc',init_params='wmc')
sklearn.mixture.VBGMM._bound_concentration(self)
sklearn.mixture.VBGMM._bound_proportions(self,z)
sklearn.mixture.VBGMM._initialize_gamma(self)
sklearn.mixture.VBGMM._monitor(self,X,z,n,end=False)
sklearn.mixture.VBGMM._set_weights(self)
sklearn.mixture.VBGMM._update_concentration(self,z)
sklearn.mixture.VBGMM.eval(self,X)
sklearn.mixture.VBGMM.score_samples(self,X)
sklearn.mixture.dpgmm.DPGMM(self,n_components=1,covariance_type='diag',alpha=1.0,random_state=None,thresh=0.01,verbose=False,min_covar=None,n_iter=10,params='wmc',init_params='wmc')
sklearn.mixture.dpgmm.DPGMM.__init__(self,n_components=1,covariance_type='diag',alpha=1.0,random_state=None,thresh=0.01,verbose=False,min_covar=None,n_iter=10,params='wmc',init_params='wmc')
sklearn.mixture.dpgmm.DPGMM._bound_concentration(self)
sklearn.mixture.dpgmm.DPGMM._bound_means(self)
sklearn.mixture.dpgmm.DPGMM._bound_precisions(self)
sklearn.mixture.dpgmm.DPGMM._bound_proportions(self,z)
sklearn.mixture.dpgmm.DPGMM._do_mstep(self,X,z,params)
sklearn.mixture.dpgmm.DPGMM._get_covars(self)
sklearn.mixture.dpgmm.DPGMM._get_precisions(self)
sklearn.mixture.dpgmm.DPGMM._initialize_gamma(self)
sklearn.mixture.dpgmm.DPGMM._logprior(self,z)
sklearn.mixture.dpgmm.DPGMM._monitor(self,X,z,n,end=False)
sklearn.mixture.dpgmm.DPGMM._set_covars(self,covars)
sklearn.mixture.dpgmm.DPGMM._set_weights(self)
sklearn.mixture.dpgmm.DPGMM._update_concentration(self,z)
sklearn.mixture.dpgmm.DPGMM._update_means(self,X,z)
sklearn.mixture.dpgmm.DPGMM._update_precisions(self,X,z)
sklearn.mixture.dpgmm.DPGMM.eval(self,X)
sklearn.mixture.dpgmm.DPGMM.fit(self,X)
sklearn.mixture.dpgmm.DPGMM.lower_bound(self,X,z)
sklearn.mixture.dpgmm.DPGMM.score_samples(self,X)
sklearn.mixture.dpgmm.VBGMM(self,n_components=1,covariance_type='diag',alpha=1.0,random_state=None,thresh=0.01,verbose=False,min_covar=None,n_iter=10,params='wmc',init_params='wmc')
sklearn.mixture.dpgmm.VBGMM.__init__(self,n_components=1,covariance_type='diag',alpha=1.0,random_state=None,thresh=0.01,verbose=False,min_covar=None,n_iter=10,params='wmc',init_params='wmc')
sklearn.mixture.dpgmm.VBGMM._bound_concentration(self)
sklearn.mixture.dpgmm.VBGMM._bound_proportions(self,z)
sklearn.mixture.dpgmm.VBGMM._initialize_gamma(self)
sklearn.mixture.dpgmm.VBGMM._monitor(self,X,z,n,end=False)
sklearn.mixture.dpgmm.VBGMM._set_weights(self)
sklearn.mixture.dpgmm.VBGMM._update_concentration(self,z)
sklearn.mixture.dpgmm.VBGMM.eval(self,X)
sklearn.mixture.dpgmm.VBGMM.score_samples(self,X)
sklearn.mixture.dpgmm._bound_state_log_lik(X,initial_bound,precs,means,covariance_type)
sklearn.mixture.dpgmm._bound_wishart(a,B,detB)
sklearn.mixture.dpgmm._sym_quad_form(x,mu,A)
sklearn.mixture.dpgmm.digamma(x)
sklearn.mixture.dpgmm.gammaln(x)
sklearn.mixture.dpgmm.log_normalize(v,axis=0)
sklearn.mixture.dpgmm.wishart_log_det(a,b,detB,n_features)
sklearn.mixture.dpgmm.wishart_logz(v,s,dets,n_features)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/mixture/tests/test_dpgmm.py----------------------------------------
A:sklearn.mixture.tests.test_dpgmm.(X, y)->make_blobs(random_state=1)
A:sklearn.mixture.tests.test_dpgmm.dpgmm->Model(n_components=10, random_state=1, alpha=20, n_iter=50)
A:sklearn.mixture.tests.test_dpgmm.indices->numpy.unique(dpgmm.predict(X))
A:sklearn.mixture.tests.test_dpgmm.active->numpy.zeros(10, dtype=np.bool)
A:sklearn.mixture.tests.test_dpgmm.v->numpy.array([0.1, 0.8, 0.01, 0.09])
A:sklearn.mixture.tests.test_dpgmm.a->numpy.log(2 * v)
A:sklearn.mixture.tests.test_dpgmm.(_, z)->g.score_samples(train_obs)
sklearn.mixture.tests.test_DPGMMTester(GMMTester)
sklearn.mixture.tests.test_DPGMMTester.score(self,g,train_obs)
sklearn.mixture.tests.test_VBGMMTester(GMMTester)
sklearn.mixture.tests.test_VBGMMTester.score(self,g,train_obs)
sklearn.mixture.tests.test_dpgmm.DPGMMTester(GMMTester)
sklearn.mixture.tests.test_dpgmm.DPGMMTester.score(self,g,train_obs)
sklearn.mixture.tests.test_dpgmm.TestDPGMMWithDiagCovars(unittest.TestCase,DPGMMTester)
sklearn.mixture.tests.test_dpgmm.TestDPGMMWithFullCovars(unittest.TestCase,DPGMMTester)
sklearn.mixture.tests.test_dpgmm.TestDPGMMWithSphericalCovars(unittest.TestCase,DPGMMTester)
sklearn.mixture.tests.test_dpgmm.TestDPGMMWithTiedCovars(unittest.TestCase,DPGMMTester)
sklearn.mixture.tests.test_dpgmm.TestVBGMMWithDiagCovars(unittest.TestCase,VBGMMTester)
sklearn.mixture.tests.test_dpgmm.TestVBGMMWithFullCovars(unittest.TestCase,VBGMMTester)
sklearn.mixture.tests.test_dpgmm.TestVBGMMWithSphericalCovars(unittest.TestCase,VBGMMTester)
sklearn.mixture.tests.test_dpgmm.TestVBGMMWithTiedCovars(unittest.TestCase,VBGMMTester)
sklearn.mixture.tests.test_dpgmm.VBGMMTester(GMMTester)
sklearn.mixture.tests.test_dpgmm.VBGMMTester.score(self,g,train_obs)
sklearn.mixture.tests.test_dpgmm.do_model(self,**kwds)
sklearn.mixture.tests.test_dpgmm.test_class_weights()
sklearn.mixture.tests.test_dpgmm.test_log_normalize()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/mixture/tests/test_gmm.py----------------------------------------
A:sklearn.mixture.tests.test_gmm.rng->numpy.random.RandomState(0)
A:sklearn.mixture.tests.test_gmm.samples->sklearn.mixture.GMM(n_components=n_components, covariance_type=cv_type, random_state=rng, min_covar=1e-07).sample(n)
A:sklearn.mixture.tests.test_gmm.A->numpy.random.RandomState(0).randn(n_features, n_features)
A:sklearn.mixture.tests.test_gmm.x->sample_gaussian([0, 0], [[4, 3], [1, 0.1]], covariance_type='full', random_state=42)
A:sklearn.mixture.tests.test_gmm.ref->_naive_lmvnpdf_diag(X, mu, cv)
A:sklearn.mixture.tests.test_gmm.stds->numpy.sqrt(cv)
A:sklearn.mixture.tests.test_gmm.ref[:, i]->numpy.log(stats.norm.pdf(X, m, std)).sum(axis=1)
A:sklearn.mixture.tests.test_gmm.lpr->sklearn.mixture.log_multivariate_normal_density(X, mu, fullcv, 'full')
A:sklearn.mixture.tests.test_gmm.cv->numpy.tile(spherecv, (n_features, 1))
A:sklearn.mixture.tests.test_gmm.reference->_naive_lmvnpdf_diag(X, mu, cv)
A:sklearn.mixture.tests.test_gmm.fullcv->numpy.array([np.diag(x) for x in cv])
A:sklearn.mixture.tests.test_gmm.g->sklearn.mixture.GMM(n_components=n_components, covariance_type=cv_type, random_state=rng, min_covar=1e-07)
A:sklearn.mixture.tests.test_gmm.weights->numpy.random.RandomState(0).rand(n_components)
A:sklearn.mixture.tests.test_gmm.means->numpy.random.RandomState(0).randint(-20, 20, (n_components, n_features))
A:sklearn.mixture.tests.test_gmm.self.weights->numpy.random.RandomState(0).rand(self.n_components)
A:sklearn.mixture.tests.test_gmm.self.means->numpy.random.RandomState(0).randint(-20, 20, (self.n_components, self.n_features))
A:sklearn.mixture.tests.test_gmm.self.I->numpy.eye(self.n_features)
A:sklearn.mixture.tests.test_gmm.gaussidx->numpy.repeat(np.arange(self.n_components), 5)
A:sklearn.mixture.tests.test_gmm.n_samples->len(gaussidx)
A:sklearn.mixture.tests.test_gmm.(ll, responsibilities)->sklearn.mixture.GMM(n_components=n_components, covariance_type=cv_type, random_state=rng, min_covar=1e-07).score_samples(X)
A:sklearn.mixture.tests.test_gmm.g.covars_->numpy.maximum(self.covars[self.covariance_type], 0.1)
A:sklearn.mixture.tests.test_gmm.X->numpy.random.RandomState(0).randn(n_samples, n_dim)
A:sklearn.mixture.tests.test_gmm.delta_min->numpy.diff(trainll).min()
A:sklearn.mixture.tests.test_gmm.trainll->sklearn.mixture.GMM(n_components=n_components, covariance_type=cv_type, random_state=rng, min_covar=1e-07).score(X)
A:sklearn.mixture.tests.test_gmm.train1->sklearn.mixture.GMM(n_components=n_components, covariance_type=cv_type, random_state=rng, min_covar=1e-07).fit(X).score(X).sum()
A:sklearn.mixture.tests.test_gmm.train2->sklearn.mixture.GMM(n_components=n_components, covariance_type=cv_type, random_state=rng, min_covar=1e-07).fit(X).score(X).sum()
sklearn.mixture.tests.test_GMMTester
sklearn.mixture.tests.test_GMMTester._setUp(self)
sklearn.mixture.tests.test_GMMTester.score(self,g,X)
sklearn.mixture.tests.test_GMMTester.test_eval(self)
sklearn.mixture.tests.test_GMMTester.test_sample(self,n=100)
sklearn.mixture.tests.test_GMMTester.test_train(self,params='wmc')
sklearn.mixture.tests.test_GMMTester.test_train_1d(self,params='wmc')
sklearn.mixture.tests.test_GMMTester.test_train_degenerate(self,params='wmc')
sklearn.mixture.tests.test_gmm.GMMTester
sklearn.mixture.tests.test_gmm.GMMTester._setUp(self)
sklearn.mixture.tests.test_gmm.GMMTester.score(self,g,X)
sklearn.mixture.tests.test_gmm.GMMTester.test_eval(self)
sklearn.mixture.tests.test_gmm.GMMTester.test_sample(self,n=100)
sklearn.mixture.tests.test_gmm.GMMTester.test_train(self,params='wmc')
sklearn.mixture.tests.test_gmm.GMMTester.test_train_1d(self,params='wmc')
sklearn.mixture.tests.test_gmm.GMMTester.test_train_degenerate(self,params='wmc')
sklearn.mixture.tests.test_gmm.TestGMMWithDiagonalCovars(unittest.TestCase,GMMTester)
sklearn.mixture.tests.test_gmm.TestGMMWithFullCovars(unittest.TestCase,GMMTester)
sklearn.mixture.tests.test_gmm.TestGMMWithSphericalCovars(unittest.TestCase,GMMTester)
sklearn.mixture.tests.test_gmm.TestGMMWithTiedCovars(unittest.TestCase,GMMTester)
sklearn.mixture.tests.test_gmm._naive_lmvnpdf_diag(X,mu,cv)
sklearn.mixture.tests.test_gmm.test_GMM_attributes()
sklearn.mixture.tests.test_gmm.test_aic()
sklearn.mixture.tests.test_gmm.test_lmvnpdf_diag()
sklearn.mixture.tests.test_gmm.test_lmvnpdf_full()
sklearn.mixture.tests.test_gmm.test_lmvnpdf_spherical()
sklearn.mixture.tests.test_gmm.test_multiple_init()
sklearn.mixture.tests.test_gmm.test_n_parameters()
sklearn.mixture.tests.test_gmm.test_sample_gaussian()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/mixture/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/metrics/metrics.py----------------------------------------
A:sklearn.metrics.metrics.(y_true, y_pred)->check_arrays(y_true, y_pred, allow_lists=True)
A:sklearn.metrics.metrics.y_true->LabelEncoder().transform(y_true)
A:sklearn.metrics.metrics.y_pred->LabelEncoder().transform(y_pred)
A:sklearn.metrics.metrics.type_true->type_of_target(y_true)
A:sklearn.metrics.metrics.type_pred->type_of_target(y_pred)
A:sklearn.metrics.metrics.y_type->type_of_target(y_true)
A:sklearn.metrics.metrics.values->values.reshape((-1, 1)).reshape((-1, 1))
A:sklearn.metrics.metrics.sample_weight->column_or_1d(sample_weight)
A:sklearn.metrics.metrics.average->numpy.average(values, weights=sample_weight)
A:sklearn.metrics.metrics.variance->numpy.average((values - average) ** 2, weights=sample_weight)
A:sklearn.metrics.metrics.(x, y)->check_arrays(x, y)
A:sklearn.metrics.metrics.order->numpy.lexsort((y, x))
A:sklearn.metrics.metrics.dx->numpy.diff(x)
A:sklearn.metrics.metrics.(y_true, pred_decision)->check_arrays(y_true, pred_decision)
A:sklearn.metrics.metrics.lbin->LabelBinarizer(neg_label=-1)
A:sklearn.metrics.metrics.pred_decision->numpy.ravel(pred_decision)
A:sklearn.metrics.metrics.(precision, recall, thresholds)->precision_recall_curve(y_true, y_score, sample_weight=sample_weight)
A:sklearn.metrics.metrics.(y_true, y_score)->check_arrays(y_true, y_score)
A:sklearn.metrics.metrics.score_weight->numpy.repeat(score_weight, y_true.shape[1])
A:sklearn.metrics.metrics.y_score->column_or_1d(y_score)
A:sklearn.metrics.metrics.average_weight->numpy.sum(y_true, axis=0)
A:sklearn.metrics.metrics.score->numpy.array([len(set(true) ^ set(pred)) == 0 for (pred, true) in zip(y_pred, y_true)])
A:sklearn.metrics.metrics.y_true_c->LabelEncoder().transform(y_true).take([c], axis=not_average_axis).ravel()
A:sklearn.metrics.metrics.y_score_c->column_or_1d(y_score).take([c], axis=not_average_axis).ravel()
A:sklearn.metrics.metrics.score[c]->binary_metric(y_true_c, y_score_c, sample_weight=score_weight)
A:sklearn.metrics.metrics.(fpr, tpr, tresholds)->roc_curve(y_true, y_score, sample_weight=sample_weight)
A:sklearn.metrics.metrics.(y_type, y_true, y_pred)->_check_reg_targets(y_true, y_pred)
A:sklearn.metrics.metrics.lb->LabelEncoder()
A:sklearn.metrics.metrics.classes->numpy.asarray(classes)
A:sklearn.metrics.metrics.(fps, tps, thresholds)->_binary_clf_curve(y_true, y_score, pos_label=pos_label, sample_weight=sample_weight)
A:sklearn.metrics.metrics.last_ind->tps.searchsorted(tps[-1])
A:sklearn.metrics.metrics.sl->slice(last_ind, None, -1)
A:sklearn.metrics.metrics.fpr->numpy.repeat(np.nan, fps.shape)
A:sklearn.metrics.metrics.tpr->numpy.repeat(np.nan, tps.shape)
A:sklearn.metrics.metrics.labels->numpy.asarray(labels)
A:sklearn.metrics.metrics.label_to_ind->dict(((y, x) for (x, y) in enumerate(labels)))
A:sklearn.metrics.metrics.ind->numpy.logical_and(y_pred < n_labels, y_true < n_labels)
A:sklearn.metrics.metrics.CM->coo_matrix((np.ones(y_true.shape[0], dtype=np.int), (y_true, y_pred)), shape=(n_labels, n_labels)).toarray()
A:sklearn.metrics.metrics.n_samples->len(y_true)
A:sklearn.metrics.metrics.T->numpy.append(1 - T, T, axis=1)
A:sklearn.metrics.metrics.Y->numpy.append(1 - Y, Y, axis=1)
A:sklearn.metrics.metrics.(T, Y)->check_arrays(T, Y)
A:sklearn.metrics.metrics.pred_inter_true->numpy.sum(np.logical_and(y_pred_pos_label, y_true_pos_label), axis=1)
A:sklearn.metrics.metrics.pred_union_true->numpy.sum(np.logical_or(y_pred_pos_label, y_true_pos_label), axis=1)
A:sklearn.metrics.metrics.true_set->set(true)
A:sklearn.metrics.metrics.pred_set->set(pred)
A:sklearn.metrics.metrics.size_true_union_pred->len(true_set | pred_set)
A:sklearn.metrics.metrics.(_, _, f, _)->precision_recall_fscore_support(y_true, y_pred, beta=beta, labels=labels, pos_label=pos_label, average=average, warn_for=('f-score',), sample_weight=sample_weight)
A:sklearn.metrics.metrics.msg_start->'{0} is'.format(metric.title())
A:sklearn.metrics.metrics.msg->msg.format('in {0}s with'.format(axis1)).format('in {0}s with'.format(axis1))
A:sklearn.metrics.metrics.sum_weight->numpy.expand_dims(sample_weight, 1)
A:sklearn.metrics.metrics.tp_sum->numpy.array([tp_sum.sum()])
A:sklearn.metrics.metrics.pred_sum->numpy.array([pred_sum.sum()])
A:sklearn.metrics.metrics.true_sum->numpy.array([true_sum.sum()])
A:sklearn.metrics.metrics.true_sumpred_sumtp_sum->numpy.zeros(len(labels))
A:sklearn.metrics.metrics.precision->numpy.average(precision, weights=weights)
A:sklearn.metrics.metrics.recall->numpy.average(recall, weights=weights)
A:sklearn.metrics.metrics.f_score->numpy.average(f_score, weights=weights)
A:sklearn.metrics.metrics.indices->numpy.searchsorted(labels, label_order)
A:sklearn.metrics.metrics.(p, _, _, _)->precision_recall_fscore_support(y_true, y_pred, labels=labels, pos_label=pos_label, average=average, warn_for=('precision',), sample_weight=sample_weight)
A:sklearn.metrics.metrics.(_, r, _, _)->precision_recall_fscore_support(y_true, y_pred, labels=labels, pos_label=pos_label, average=average, warn_for=('recall',), sample_weight=sample_weight)
A:sklearn.metrics.metrics.width->max(width, len(last_line_heading))
A:sklearn.metrics.metrics.(p, r, f1, s)->precision_recall_fscore_support(y_true, y_pred, labels=labels, average=None, sample_weight=sample_weight)
A:sklearn.metrics.metrics.loss->numpy.array([len(set(pred).symmetric_difference(true)) for (pred, true) in zip(y_pred, y_true)])
A:sklearn.metrics.metrics.(_, numerator)->_average_and_variance(y_true - y_pred, sample_weight)
A:sklearn.metrics.metrics.(_, denominator)->_average_and_variance(y_true, sample_weight)
A:sklearn.metrics.metrics.numerator->(weight * (y_true - y_pred) ** 2).sum(dtype=np.float64)
A:sklearn.metrics.metrics.denominator->(weight * (y_true - np.average(y_true, axis=0, weights=sample_weight)) ** 2).sum(dtype=np.float64)
sklearn.metrics.accuracy_score(y_true,y_pred,normalize=True,sample_weight=None)
sklearn.metrics.auc(x,y,reorder=False)
sklearn.metrics.auc_score(y_true,y_score)
sklearn.metrics.average_precision_score(y_true,y_score,average='macro',sample_weight=None)
sklearn.metrics.classification_report(y_true,y_pred,labels=None,target_names=None,sample_weight=None)
sklearn.metrics.confusion_matrix(y_true,y_pred,labels=None)
sklearn.metrics.explained_variance_score(y_true,y_pred,sample_weight=None)
sklearn.metrics.f1_score(y_true,y_pred,labels=None,pos_label=1,average='weighted',sample_weight=None)
sklearn.metrics.fbeta_score(y_true,y_pred,beta,labels=None,pos_label=1,average='weighted',sample_weight=None)
sklearn.metrics.hamming_loss(y_true,y_pred,classes=None)
sklearn.metrics.hinge_loss(y_true,pred_decision,pos_label=None,neg_label=None)
sklearn.metrics.jaccard_similarity_score(y_true,y_pred,normalize=True)
sklearn.metrics.log_loss(y_true,y_pred,eps=1e-15,normalize=True)
sklearn.metrics.matthews_corrcoef(y_true,y_pred)
sklearn.metrics.mean_absolute_error(y_true,y_pred,sample_weight=None)
sklearn.metrics.mean_squared_error(y_true,y_pred,sample_weight=None)
sklearn.metrics.metrics.UndefinedMetricWarning(UserWarning)
sklearn.metrics.metrics._average_and_variance(values,sample_weight=None)
sklearn.metrics.metrics._average_binary_score(binary_metric,y_true,y_score,average,sample_weight=None)
sklearn.metrics.metrics._binary_clf_curve(y_true,y_score,pos_label=None,sample_weight=None)
sklearn.metrics.metrics._check_clf_targets(y_true,y_pred)
sklearn.metrics.metrics._check_reg_targets(y_true,y_pred)
sklearn.metrics.metrics._prf_divide(numerator,denominator,metric,modifier,average,warn_for)
sklearn.metrics.metrics.accuracy_score(y_true,y_pred,normalize=True,sample_weight=None)
sklearn.metrics.metrics.auc(x,y,reorder=False)
sklearn.metrics.metrics.auc_score(y_true,y_score)
sklearn.metrics.metrics.average_precision_score(y_true,y_score,average='macro',sample_weight=None)
sklearn.metrics.metrics.classification_report(y_true,y_pred,labels=None,target_names=None,sample_weight=None)
sklearn.metrics.metrics.confusion_matrix(y_true,y_pred,labels=None)
sklearn.metrics.metrics.explained_variance_score(y_true,y_pred,sample_weight=None)
sklearn.metrics.metrics.f1_score(y_true,y_pred,labels=None,pos_label=1,average='weighted',sample_weight=None)
sklearn.metrics.metrics.fbeta_score(y_true,y_pred,beta,labels=None,pos_label=1,average='weighted',sample_weight=None)
sklearn.metrics.metrics.hamming_loss(y_true,y_pred,classes=None)
sklearn.metrics.metrics.hinge_loss(y_true,pred_decision,pos_label=None,neg_label=None)
sklearn.metrics.metrics.jaccard_similarity_score(y_true,y_pred,normalize=True)
sklearn.metrics.metrics.log_loss(y_true,y_pred,eps=1e-15,normalize=True)
sklearn.metrics.metrics.matthews_corrcoef(y_true,y_pred)
sklearn.metrics.metrics.mean_absolute_error(y_true,y_pred,sample_weight=None)
sklearn.metrics.metrics.mean_squared_error(y_true,y_pred,sample_weight=None)
sklearn.metrics.metrics.precision_recall_curve(y_true,probas_pred,pos_label=None,sample_weight=None)
sklearn.metrics.metrics.precision_recall_fscore_support(y_true,y_pred,beta=1.0,labels=None,pos_label=1,average=None,warn_for=('precision','recall','f-score'),sample_weight=None)
sklearn.metrics.metrics.precision_score(y_true,y_pred,labels=None,pos_label=1,average='weighted',sample_weight=None)
sklearn.metrics.metrics.r2_score(y_true,y_pred,sample_weight=None)
sklearn.metrics.metrics.recall_score(y_true,y_pred,labels=None,pos_label=1,average='weighted',sample_weight=None)
sklearn.metrics.metrics.roc_auc_score(y_true,y_score,average='macro',sample_weight=None)
sklearn.metrics.metrics.roc_curve(y_true,y_score,pos_label=None,sample_weight=None)
sklearn.metrics.metrics.zero_one_loss(y_true,y_pred,normalize=True,sample_weight=None)
sklearn.metrics.precision_recall_curve(y_true,probas_pred,pos_label=None,sample_weight=None)
sklearn.metrics.precision_recall_fscore_support(y_true,y_pred,beta=1.0,labels=None,pos_label=1,average=None,warn_for=('precision','recall','f-score'),sample_weight=None)
sklearn.metrics.precision_score(y_true,y_pred,labels=None,pos_label=1,average='weighted',sample_weight=None)
sklearn.metrics.r2_score(y_true,y_pred,sample_weight=None)
sklearn.metrics.recall_score(y_true,y_pred,labels=None,pos_label=1,average='weighted',sample_weight=None)
sklearn.metrics.roc_auc_score(y_true,y_score,average='macro',sample_weight=None)
sklearn.metrics.roc_curve(y_true,y_score,pos_label=None,sample_weight=None)
sklearn.metrics.zero_one_loss(y_true,y_pred,normalize=True,sample_weight=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/metrics/setup.py----------------------------------------
A:sklearn.metrics.setup.config->Configuration('metrics', parent_package, top_path)
A:sklearn.metrics.setup.(cblas_libs, blas_info)->get_blas_info()
sklearn.metrics.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/metrics/pairwise.py----------------------------------------
A:sklearn.metrics.pairwise.XY->safe_asarray(X, dtype=np.float)
A:sklearn.metrics.pairwise.X->csr_matrix(X, copy=False)
A:sklearn.metrics.pairwise.Y->csr_matrix(Y, copy=False)
A:sklearn.metrics.pairwise.(X, Y)->check_pairwise_arrays(X, Y)
A:sklearn.metrics.pairwise.YY->array2d(Y_norm_squared)
A:sklearn.metrics.pairwise.distances->numpy.zeros(len(X))
A:sklearn.metrics.pairwise.indices->numpy.empty(X.shape[0], dtype=np.intp)
A:sklearn.metrics.pairwise.values->numpy.empty(X.shape[0])
A:sklearn.metrics.pairwise.d_chunk->pairwise_distances(X_chunk, Y_chunk, metric=metric, **metric_kwargs)
A:sklearn.metrics.pairwise.min_indices->pairwise_distances(X_chunk, Y_chunk, metric=metric, **metric_kwargs).argmin(axis=1)
A:sklearn.metrics.pairwise.indices[chunk_x]->numpy.where(flags, min_indices + chunk_y.start, indices[chunk_x])
A:sklearn.metrics.pairwise.values[chunk_x]->numpy.where(flags, min_values, values[chunk_x])
A:sklearn.metrics.pairwise.D->numpy.zeros((n_x, n_y), dtype='float')
A:sklearn.metrics.pairwise.this_slice->slice(index, index + increment)
A:sklearn.metrics.pairwise.tmp->numpy.sum(tmp, axis=2)
A:sklearn.metrics.pairwise.S->cosine_similarity(X, Y)
A:sklearn.metrics.pairwise.X_normalized->normalize(X, copy=True)
A:sklearn.metrics.pairwise.distances[i]->metric(X[i], Y[i])
A:sklearn.metrics.pairwise.K->numpy.zeros((n_x, n_y), dtype='float')
A:sklearn.metrics.pairwise.Y_normalized->normalize(Y, copy=True)
A:sklearn.metrics.pairwise.result->numpy.zeros((X.shape[0], Y.shape[0]), dtype=X.dtype)
A:sklearn.metrics.pairwise.n_jobs->max(cpu_count() + 1 + n_jobs, 1)
A:sklearn.metrics.pairwise.ret->Parallel(n_jobs=n_jobs, verbose=0)((delayed(func)(X, Y[s], **kwds) for s in gen_even_slices(Y.shape[0], n_jobs)))
A:sklearn.metrics.pairwise.D[i][j]->metric(X[i], Y[j], **kwds)
A:sklearn.metrics.pairwise.kwds->dict(((k, kwds[k]) for k in kwds if k in KERNEL_PARAMS[metric]))
A:sklearn.metrics.pairwise.K[i][j]->metric(X[i], Y[j], **kwds)
sklearn.metrics.euclidean_distances(X,Y=None,Y_norm_squared=None,squared=False)
sklearn.metrics.pairwise._parallel_pairwise(X,Y,func,n_jobs,**kwds)
sklearn.metrics.pairwise.additive_chi2_kernel(X,Y=None)
sklearn.metrics.pairwise.check_paired_arrays(X,Y)
sklearn.metrics.pairwise.check_pairwise_arrays(X,Y)
sklearn.metrics.pairwise.chi2_kernel(X,Y=None,gamma=1.0)
sklearn.metrics.pairwise.cosine_distances(X,Y=None)
sklearn.metrics.pairwise.cosine_similarity(X,Y=None)
sklearn.metrics.pairwise.distance_metrics()
sklearn.metrics.pairwise.euclidean_distances(X,Y=None,Y_norm_squared=None,squared=False)
sklearn.metrics.pairwise.kernel_metrics()
sklearn.metrics.pairwise.linear_kernel(X,Y=None)
sklearn.metrics.pairwise.manhattan_distances(X,Y=None,sum_over_features=True,size_threshold=500000000.0)
sklearn.metrics.pairwise.paired_cosine_distances(X,Y)
sklearn.metrics.pairwise.paired_distances(X,Y,metric='euclidean',**kwds)
sklearn.metrics.pairwise.paired_euclidean_distances(X,Y)
sklearn.metrics.pairwise.paired_manhattan_distances(X,Y)
sklearn.metrics.pairwise.pairwise_distances(X,Y=None,metric='euclidean',n_jobs=1,**kwds)
sklearn.metrics.pairwise.pairwise_distances_argmin(X,Y,axis=1,metric='euclidean',batch_size=500,metric_kwargs={})
sklearn.metrics.pairwise.pairwise_distances_argmin_min(X,Y,axis=1,metric='euclidean',batch_size=500,metric_kwargs=None)
sklearn.metrics.pairwise.pairwise_kernels(X,Y=None,metric='linear',filter_params=False,n_jobs=1,**kwds)
sklearn.metrics.pairwise.polynomial_kernel(X,Y=None,degree=3,gamma=None,coef0=1)
sklearn.metrics.pairwise.rbf_kernel(X,Y=None,gamma=None)
sklearn.metrics.pairwise.sigmoid_kernel(X,Y=None,gamma=None,coef0=1)
sklearn.metrics.pairwise_distances(X,Y=None,metric='euclidean',n_jobs=1,**kwds)
sklearn.metrics.pairwise_distances_argmin(X,Y,axis=1,metric='euclidean',batch_size=500,metric_kwargs={})
sklearn.metrics.pairwise_distances_argmin_min(X,Y,axis=1,metric='euclidean',batch_size=500,metric_kwargs=None)
sklearn.metrics.pairwise_kernels(X,Y=None,metric='linear',filter_params=False,n_jobs=1,**kwds)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/metrics/scorer.py----------------------------------------
A:sklearn.metrics.scorer.kwargs_string->''.join([', %s=%s' % (str(k), str(v)) for (k, v) in self._kwargs.items()])
A:sklearn.metrics.scorer.y_pred->clf.predict_proba(X)
A:sklearn.metrics.scorer.y_type->type_of_target(y)
A:sklearn.metrics.scorer.scorer->get_scorer(scoring)
A:sklearn.metrics.scorer.r2_scorer->make_scorer(r2_score)
A:sklearn.metrics.scorer.mean_squared_error_scorer->make_scorer(mean_squared_error, greater_is_better=False)
A:sklearn.metrics.scorer.mean_absolute_error_scorer->make_scorer(mean_absolute_error, greater_is_better=False)
A:sklearn.metrics.scorer.accuracy_scorer->make_scorer(accuracy_score)
A:sklearn.metrics.scorer.f1_scorer->make_scorer(f1_score)
A:sklearn.metrics.scorer.roc_auc_scorer->make_scorer(roc_auc_score, greater_is_better=True, needs_threshold=True)
A:sklearn.metrics.scorer.average_precision_scorer->make_scorer(average_precision_score, needs_threshold=True)
A:sklearn.metrics.scorer.precision_scorer->make_scorer(precision_score)
A:sklearn.metrics.scorer.recall_scorer->make_scorer(recall_score)
A:sklearn.metrics.scorer.log_loss_scorer->make_scorer(log_loss, greater_is_better=False, needs_proba=True)
A:sklearn.metrics.scorer.adjusted_rand_scorer->make_scorer(adjusted_rand_score)
A:sklearn.metrics.scorer.SCORERS->dict(r2=r2_scorer, mean_absolute_error=mean_absolute_error_scorer, mean_squared_error=mean_squared_error_scorer, accuracy=accuracy_scorer, f1=f1_scorer, roc_auc=roc_auc_scorer, average_precision=average_precision_scorer, precision=precision_scorer, recall=recall_scorer, log_loss=log_loss_scorer, adjusted_rand_score=adjusted_rand_scorer)
sklearn.metrics.make_scorer(score_func,greater_is_better=True,needs_proba=False,needs_threshold=False,**kwargs)
sklearn.metrics.scorer._BaseScorer(self,score_func,sign,kwargs)
sklearn.metrics.scorer._BaseScorer.__init__(self,score_func,sign,kwargs)
sklearn.metrics.scorer._BaseScorer.__repr__(self)
sklearn.metrics.scorer._BaseScorer._factory_args(self)
sklearn.metrics.scorer._PredictScorer(self,estimator,X,y_true)
sklearn.metrics.scorer._PredictScorer.__call__(self,estimator,X,y_true)
sklearn.metrics.scorer._ProbaScorer(self,clf,X,y)
sklearn.metrics.scorer._ProbaScorer.__call__(self,clf,X,y)
sklearn.metrics.scorer._ProbaScorer._factory_args(self)
sklearn.metrics.scorer._ThresholdScorer(self,clf,X,y)
sklearn.metrics.scorer._ThresholdScorer.__call__(self,clf,X,y)
sklearn.metrics.scorer._ThresholdScorer._factory_args(self)
sklearn.metrics.scorer._passthrough_scorer(estimator,*args,**kwargs)
sklearn.metrics.scorer.check_scoring(estimator,scoring=None,allow_none=False,loss_func=None,score_func=None,score_overrides_loss=False)
sklearn.metrics.scorer.get_scorer(scoring)
sklearn.metrics.scorer.make_scorer(score_func,greater_is_better=True,needs_proba=False,needs_threshold=False,**kwargs)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/metrics/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/metrics/cluster/unsupervised.py----------------------------------------
A:sklearn.metrics.cluster.unsupervised.n_labels->len(np.unique(labels))
A:sklearn.metrics.cluster.unsupervised.random_state->check_random_state(random_state)
A:sklearn.metrics.cluster.unsupervised.distances->pairwise_distances(X, metric=metric, **kwds)
A:sklearn.metrics.cluster.unsupervised.A->numpy.array([_intra_cluster_distance(distances[i], labels, i) for i in range(n)])
A:sklearn.metrics.cluster.unsupervised.B->numpy.array([_nearest_cluster_distance(distances[i], labels, i) for i in range(n)])
A:sklearn.metrics.cluster.unsupervised.a->numpy.mean(distances_row[mask])
A:sklearn.metrics.cluster.unsupervised.b->numpy.min([np.mean(distances_row[labels == cur_label]) for cur_label in set(labels) if not cur_label == label])
sklearn.metrics.cluster.unsupervised._intra_cluster_distance(distances_row,labels,i)
sklearn.metrics.cluster.unsupervised._nearest_cluster_distance(distances_row,labels,i)
sklearn.metrics.cluster.unsupervised.silhouette_samples(X,labels,metric='euclidean',**kwds)
sklearn.metrics.cluster.unsupervised.silhouette_score(X,labels,metric='euclidean',sample_size=None,random_state=None,**kwds)
sklearn.metrics.silhouette_samples(X,labels,metric='euclidean',**kwds)
sklearn.metrics.silhouette_score(X,labels,metric='euclidean',sample_size=None,random_state=None,**kwds)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/metrics/cluster/setup.py----------------------------------------
A:sklearn.metrics.cluster.setup.config->Configuration('metrics/cluster', parent_package, top_path)
sklearn.metrics.cluster.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/metrics/cluster/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/metrics/cluster/supervised.py----------------------------------------
A:sklearn.metrics.cluster.supervised.labels_true->numpy.asarray(labels_true)
A:sklearn.metrics.cluster.supervised.labels_pred->numpy.asarray(labels_pred)
A:sklearn.metrics.cluster.supervised.(classes, class_idx)->numpy.unique(labels_true, return_inverse=True)
A:sklearn.metrics.cluster.supervised.(clusters, cluster_idx)->numpy.unique(labels_pred, return_inverse=True)
A:sklearn.metrics.cluster.supervised.contingency->numpy.array(contingency, dtype='float')
A:sklearn.metrics.cluster.supervised.(labels_true, labels_pred)->check_clusterings(labels_true, labels_pred)
A:sklearn.metrics.cluster.supervised.classes->numpy.unique(labels_true)
A:sklearn.metrics.cluster.supervised.clusters->numpy.unique(labels_pred)
A:sklearn.metrics.cluster.supervised.sum_comb_c->sum((comb2(n_c) for n_c in contingency.sum(axis=1)))
A:sklearn.metrics.cluster.supervised.sum_comb_k->sum((comb2(n_k) for n_k in contingency.sum(axis=0)))
A:sklearn.metrics.cluster.supervised.sum_comb->sum((comb2(n_ij) for n_ij in contingency.flatten()))
A:sklearn.metrics.cluster.supervised.entropy_C->entropy(labels_true)
A:sklearn.metrics.cluster.supervised.entropy_K->entropy(labels_pred)
A:sklearn.metrics.cluster.supervised.MI->mutual_info_score(labels_true, labels_pred)
A:sklearn.metrics.cluster.supervised.contingency_sum->numpy.sum(contingency)
A:sklearn.metrics.cluster.supervised.pi->numpy.bincount(label_idx).astype(np.float)
A:sklearn.metrics.cluster.supervised.pj->numpy.sum(contingency, axis=0)
A:sklearn.metrics.cluster.supervised.outer->numpy.outer(pi, pj)
A:sklearn.metrics.cluster.supervised.log_contingency_nm->numpy.log(contingency_nm)
A:sklearn.metrics.cluster.supervised.mi->mutual_info_score(labels_true, labels_pred, contingency=contingency)
A:sklearn.metrics.cluster.supervised.emi->expected_mutual_information(contingency, n_samples)
A:sklearn.metrics.cluster.supervised.pi_sum->numpy.sum(pi)
sklearn.metrics.adjusted_mutual_info_score(labels_true,labels_pred)
sklearn.metrics.adjusted_rand_score(labels_true,labels_pred)
sklearn.metrics.cluster.contingency_matrix(labels_true,labels_pred,eps=None)
sklearn.metrics.cluster.entropy(labels)
sklearn.metrics.cluster.supervised.adjusted_mutual_info_score(labels_true,labels_pred)
sklearn.metrics.cluster.supervised.adjusted_rand_score(labels_true,labels_pred)
sklearn.metrics.cluster.supervised.check_clusterings(labels_true,labels_pred)
sklearn.metrics.cluster.supervised.comb2(n)
sklearn.metrics.cluster.supervised.completeness_score(labels_true,labels_pred)
sklearn.metrics.cluster.supervised.contingency_matrix(labels_true,labels_pred,eps=None)
sklearn.metrics.cluster.supervised.entropy(labels)
sklearn.metrics.cluster.supervised.homogeneity_completeness_v_measure(labels_true,labels_pred)
sklearn.metrics.cluster.supervised.homogeneity_score(labels_true,labels_pred)
sklearn.metrics.cluster.supervised.mutual_info_score(labels_true,labels_pred,contingency=None)
sklearn.metrics.cluster.supervised.normalized_mutual_info_score(labels_true,labels_pred)
sklearn.metrics.cluster.supervised.v_measure_score(labels_true,labels_pred)
sklearn.metrics.completeness_score(labels_true,labels_pred)
sklearn.metrics.homogeneity_completeness_v_measure(labels_true,labels_pred)
sklearn.metrics.homogeneity_score(labels_true,labels_pred)
sklearn.metrics.mutual_info_score(labels_true,labels_pred,contingency=None)
sklearn.metrics.normalized_mutual_info_score(labels_true,labels_pred)
sklearn.metrics.v_measure_score(labels_true,labels_pred)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/metrics/cluster/tests/test_unsupervised.py----------------------------------------
A:sklearn.metrics.cluster.tests.test_unsupervised.dataset->datasets.load_iris()
A:sklearn.metrics.cluster.tests.test_unsupervised.D->numpy.random.RandomState(0).rand(len(labels), len(labels))
A:sklearn.metrics.cluster.tests.test_unsupervised.silhouette->silhouette_score(D, labels, metric='precomputed')
A:sklearn.metrics.cluster.tests.test_unsupervised.silhouette_metric->silhouette_score(X, y, metric='euclidean', sample_size=int(X.shape[0] / 2), random_state=0)
A:sklearn.metrics.cluster.tests.test_unsupervised.X_sparse->csr_matrix(X)
A:sklearn.metrics.cluster.tests.test_unsupervised.labels->numpy.array([1, 0, 1, 1, 1])
A:sklearn.metrics.cluster.tests.test_unsupervised.y->numpy.zeros(X.shape[0])
sklearn.metrics.cluster.tests.test_unsupervised.test_correct_labelsize()
sklearn.metrics.cluster.tests.test_unsupervised.test_no_nan()
sklearn.metrics.cluster.tests.test_unsupervised.test_silhouette()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/metrics/cluster/tests/test_supervised.py----------------------------------------
A:sklearn.metrics.cluster.tests.test_supervised.(h, c, v)->homogeneity_completeness_v_measure([0, 0, 0, 1, 1, 1], [0, 4, 0, 4, 2, 2])
A:sklearn.metrics.cluster.tests.test_supervised.ari_1->adjusted_rand_score([0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 2, 2])
A:sklearn.metrics.cluster.tests.test_supervised.ari_2->adjusted_rand_score([0, 0, 0, 1, 1, 1], [0, 4, 0, 4, 2, 2])
A:sklearn.metrics.cluster.tests.test_supervised.scores->uniform_labelings_scores(adjusted_rand_score, n_samples, n_clusters_range, n_runs)
A:sklearn.metrics.cluster.tests.test_supervised.labels_a->numpy.array([1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3])
A:sklearn.metrics.cluster.tests.test_supervised.labels_b->numpy.array([1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 3, 1, 3, 3, 3, 2, 2])
A:sklearn.metrics.cluster.tests.test_supervised.scores[i, j]->score_func(labels_a, labels_b)
A:sklearn.metrics.cluster.tests.test_supervised.max_abs_scores->numpy.abs(scores).max(axis=1)
A:sklearn.metrics.cluster.tests.test_supervised.mi->mutual_info_score(labels_a, labels_b)
A:sklearn.metrics.cluster.tests.test_supervised.C->contingency_matrix(labels_a, labels_b, eps=0.1)
A:sklearn.metrics.cluster.tests.test_supervised.n_samples->numpy.sum(C)
A:sklearn.metrics.cluster.tests.test_supervised.emi->expected_mutual_information(C, n_samples)
A:sklearn.metrics.cluster.tests.test_supervised.ami->adjusted_mutual_info_score(a110, b110)
A:sklearn.metrics.cluster.tests.test_supervised.a110->numpy.array([list(labels_a) * 110]).flatten()
A:sklearn.metrics.cluster.tests.test_supervised.b110->numpy.array([list(labels_b) * 110]).flatten()
A:sklearn.metrics.cluster.tests.test_supervised.ent->entropy([0, 0, 42.0])
A:sklearn.metrics.cluster.tests.test_supervised.random_state->numpy.random.RandomState(seed)
sklearn.metrics.cluster.tests.test_supervised.test_adjusted_mutual_info_score()
sklearn.metrics.cluster.tests.test_supervised.test_adjustment_for_chance()
sklearn.metrics.cluster.tests.test_supervised.test_complete_but_not_homogeneous_labeling()
sklearn.metrics.cluster.tests.test_supervised.test_contingency_matrix()
sklearn.metrics.cluster.tests.test_supervised.test_entropy()
sklearn.metrics.cluster.tests.test_supervised.test_error_messages_on_wrong_input()
sklearn.metrics.cluster.tests.test_supervised.test_exactly_zero_info_score()
sklearn.metrics.cluster.tests.test_supervised.test_homogeneous_but_not_complete_labeling()
sklearn.metrics.cluster.tests.test_supervised.test_non_consicutive_labels()
sklearn.metrics.cluster.tests.test_supervised.test_not_complete_and_not_homogeneous_labeling()
sklearn.metrics.cluster.tests.test_supervised.test_perfect_matches()
sklearn.metrics.cluster.tests.test_supervised.test_v_measure_and_mutual_information(seed=36)
sklearn.metrics.cluster.tests.test_supervised.uniform_labelings_scores(score_func,n_samples,k_range,n_runs=10,seed=42)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/metrics/cluster/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/metrics/cluster/bicluster/bicluster_metrics.py----------------------------------------
A:sklearn.metrics.cluster.bicluster.bicluster_metrics.(a_rows, a_cols)->check_arrays(*a)
A:sklearn.metrics.cluster.bicluster.bicluster_metrics.(b_rows, b_cols)->check_arrays(*b)
A:sklearn.metrics.cluster.bicluster.bicluster_metrics.(a_rows, a_cols, b_rows, b_cols)->_check_rows_and_columns(a, b)
A:sklearn.metrics.cluster.bicluster.bicluster_metrics.result->numpy.array(list((list((similarity(a_rows[i], a_cols[i], b_rows[j], b_cols[j]) for j in range(n_b))) for i in range(n_a))))
A:sklearn.metrics.cluster.bicluster.bicluster_metrics.matrix->_pairwise_similarity(a, b, similarity)
A:sklearn.metrics.cluster.bicluster.bicluster_metrics.indices->linear_assignment(1.0 - matrix)
A:sklearn.metrics.cluster.bicluster.bicluster_metrics.n_a->len(a[0])
A:sklearn.metrics.cluster.bicluster.bicluster_metrics.n_b->len(b[0])
sklearn.metrics.cluster.bicluster.bicluster_metrics._check_rows_and_columns(a,b)
sklearn.metrics.cluster.bicluster.bicluster_metrics._jaccard(a_rows,a_cols,b_rows,b_cols)
sklearn.metrics.cluster.bicluster.bicluster_metrics._pairwise_similarity(a,b,similarity)
sklearn.metrics.cluster.bicluster.bicluster_metrics.consensus_score(a,b,similarity='jaccard')
sklearn.metrics.consensus_score(a,b,similarity='jaccard')


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/metrics/cluster/bicluster/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/metrics/cluster/bicluster/tests/test_bicluster_metrics.py----------------------------------------
A:sklearn.metrics.cluster.bicluster.tests.test_bicluster_metrics.a1->numpy.array([True, True, False, False])
A:sklearn.metrics.cluster.bicluster.tests.test_bicluster_metrics.a2->numpy.array([True, True, True, True])
A:sklearn.metrics.cluster.bicluster.tests.test_bicluster_metrics.a3->numpy.array([False, True, True, False])
A:sklearn.metrics.cluster.bicluster.tests.test_bicluster_metrics.a4->numpy.array([False, False, True, True])
sklearn.metrics.cluster.bicluster.tests.test_bicluster_metrics.test_consensus_score()
sklearn.metrics.cluster.bicluster.tests.test_bicluster_metrics.test_jaccard()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/metrics/cluster/bicluster/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/metrics/tests/test_score_objects.py----------------------------------------
A:sklearn.metrics.tests.test_score_objects.estimator->EstimatorWithFit()
A:sklearn.metrics.tests.test_score_objects.scorer->make_scorer(fbeta_score, beta=2)
A:sklearn.metrics.tests.test_score_objects.(X, y)->make_blobs(random_state=0)
A:sklearn.metrics.tests.test_score_objects.(X_train, X_test, y_train, y_test)->train_test_split(X, y, random_state=0)
A:sklearn.metrics.tests.test_score_objects.clf->DecisionTreeClassifier()
A:sklearn.metrics.tests.test_score_objects.score1->SCORERS['adjusted_rand_score'](km, X_test, y_test)
A:sklearn.metrics.tests.test_score_objects.score2->adjusted_rand_score(y_test, km.predict(X_test))
A:sklearn.metrics.tests.test_score_objects.unpickled_scorer->pickle.loads(pickle.dumps(scorer))
A:sklearn.metrics.tests.test_score_objects.score3->roc_auc_score(y_test, clf.predict_proba(X_test)[:, 1])
A:sklearn.metrics.tests.test_score_objects.diabetes->load_diabetes()
A:sklearn.metrics.tests.test_score_objects.logscore->SCORERS['log_loss'](clf, X_test, y_test)
A:sklearn.metrics.tests.test_score_objects.logloss->log_loss(y_test, clf.predict_proba(X_test))
A:sklearn.metrics.tests.test_score_objects.y_proba->DecisionTreeClassifier().decision_function(X_test)
A:sklearn.metrics.tests.test_score_objects.km->KMeans(n_clusters=3)
A:sklearn.metrics.tests.test_score_objects.f1_scorer_no_average->make_scorer(f1_score, average=None)
A:sklearn.metrics.tests.test_score_objects.grid_search->GridSearchCV(clf, scoring=f1_scorer_no_average, param_grid={'max_depth': [1, 2]})
sklearn.metrics.tests.test_score_objects.EstimatorWithFit(object)
sklearn.metrics.tests.test_score_objects.EstimatorWithFit.fit(self,X,y)
sklearn.metrics.tests.test_score_objects.EstimatorWithFitAndPredict(object)
sklearn.metrics.tests.test_score_objects.EstimatorWithFitAndPredict.fit(self,X,y)
sklearn.metrics.tests.test_score_objects.EstimatorWithFitAndPredict.predict(self,X)
sklearn.metrics.tests.test_score_objects.EstimatorWithFitAndScore(object)
sklearn.metrics.tests.test_score_objects.EstimatorWithFitAndScore.fit(self,X,y)
sklearn.metrics.tests.test_score_objects.EstimatorWithFitAndScore.score(self,X,y)
sklearn.metrics.tests.test_score_objects.EstimatorWithoutFit(object)
sklearn.metrics.tests.test_score_objects.test_check_scoring()
sklearn.metrics.tests.test_score_objects.test_classification_scores()
sklearn.metrics.tests.test_score_objects.test_make_scorer()
sklearn.metrics.tests.test_score_objects.test_raises_on_score_list()
sklearn.metrics.tests.test_score_objects.test_regression_scorers()
sklearn.metrics.tests.test_score_objects.test_thresholded_scorers()
sklearn.metrics.tests.test_score_objects.test_thresholded_scorers_multilabel_indicator_data()
sklearn.metrics.tests.test_score_objects.test_unsupervised_scorers()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/metrics/tests/test_pairwise.py----------------------------------------
A:sklearn.metrics.tests.test_pairwise.rng->numpy.random.RandomState(0)
A:sklearn.metrics.tests.test_pairwise.X->numpy.random.RandomState(0).random_sample((5, 4))
A:sklearn.metrics.tests.test_pairwise.S->paired_distances(X, Y, metric='manhattan')
A:sklearn.metrics.tests.test_pairwise.S2->paired_distances(X, Y, metric=lambda x, y: np.abs(x - y).sum(axis=0))
A:sklearn.metrics.tests.test_pairwise.Y->numpy.random.RandomState(0).random_sample((3, 4))
A:sklearn.metrics.tests.test_pairwise.X_tuples->tuple([tuple([v for v in row]) for row in X])
A:sklearn.metrics.tests.test_pairwise.Y_tuples->tuple([tuple([v for v in row]) for row in Y])
A:sklearn.metrics.tests.test_pairwise.S3->manhattan_distances(X, Y, size_threshold=10)
A:sklearn.metrics.tests.test_pairwise.X_sparse->csr_matrix(X)
A:sklearn.metrics.tests.test_pairwise.Y_sparse->csr_matrix(Y)
A:sklearn.metrics.tests.test_pairwise.K->rbf_kernel(X, X)
A:sklearn.metrics.tests.test_pairwise.K1->pairwise_kernels(X_, Y=Y_, metric='cosine')
A:sklearn.metrics.tests.test_pairwise.K2->pairwise_kernels(X_, Y=Y_, metric='linear')
A:sklearn.metrics.tests.test_pairwise.distances->numpy.diag(distances)
A:sklearn.metrics.tests.test_pairwise.Xsp->dok_matrix(X)
A:sklearn.metrics.tests.test_pairwise.Ysp->csr_matrix(Y, dtype=np.float32)
A:sklearn.metrics.tests.test_pairwise.(D, E)->pairwise_distances_argmin_min(X, Y, metric='minkowski', metric_kwargs={'p': 2})
A:sklearn.metrics.tests.test_pairwise.D2->pairwise_distances_argmin(Xsp, Ysp, metric='manhattan')
A:sklearn.metrics.tests.test_pairwise.(Dsp, Esp)->pairwise_distances_argmin_min(Xsp, Ysp, metric='euclidean')
A:sklearn.metrics.tests.test_pairwise.dist->pairwise_distances(X, Y, metric='manhattan')
A:sklearn.metrics.tests.test_pairwise.dist_orig_ind->pairwise_distances(X, Y, metric='manhattan').argmin(axis=0)
A:sklearn.metrics.tests.test_pairwise.(dist_chunked_ind, dist_chunked_val)->pairwise_distances_argmin_min(X, Y, axis=0, metric='manhattan', batch_size=50)
A:sklearn.metrics.tests.test_pairwise.D->paired_manhattan_distances(X, Y)
A:sklearn.metrics.tests.test_pairwise.K_add->additive_chi2_kernel(X, Y)
A:sklearn.metrics.tests.test_pairwise.chi2_exp->numpy.exp(gamma * chi2)
A:sklearn.metrics.tests.test_pairwise.Xcsr->csr_matrix(X)
A:sklearn.metrics.tests.test_pairwise.Ycsr->csr_matrix(Y)
A:sklearn.metrics.tests.test_pairwise.X_->normalize(X_)
A:sklearn.metrics.tests.test_pairwise.Y_->normalize(Y_)
A:sklearn.metrics.tests.test_pairwise.XA->numpy.resize(np.arange(40), (5, 8)).astype(np.float32)
A:sklearn.metrics.tests.test_pairwise.(XA_checked, XB_checked)->check_pairwise_arrays(XA, XB.astype(np.float))
A:sklearn.metrics.tests.test_pairwise.XB->numpy.resize(np.arange(40), (5, 8)).astype(np.float32)
A:sklearn.metrics.tests.test_pairwise.XA_sparse->csr_matrix(XA)
A:sklearn.metrics.tests.test_pairwise.XB_sparse->csr_matrix(XB)
A:sklearn.metrics.tests.test_pairwise.(XA_checked, XA_2_checked)->check_pairwise_arrays(XA_sparse, XA_sparse)
A:sklearn.metrics.tests.test_pairwise.XA_tuples->tuplify(XA)
A:sklearn.metrics.tests.test_pairwise.XB_tuples->tuplify(XB)
sklearn.metrics.tests.test_pairwise.test_check_XB_returned()
sklearn.metrics.tests.test_pairwise.test_check_dense_matrices()
sklearn.metrics.tests.test_pairwise.test_check_different_dimensions()
sklearn.metrics.tests.test_pairwise.test_check_invalid_dimensions()
sklearn.metrics.tests.test_pairwise.test_check_preserve_type()
sklearn.metrics.tests.test_pairwise.test_check_sparse_arrays()
sklearn.metrics.tests.test_pairwise.test_check_tuple_input()
sklearn.metrics.tests.test_pairwise.test_chi_square_kernel()
sklearn.metrics.tests.test_pairwise.test_cosine_similarity()
sklearn.metrics.tests.test_pairwise.test_euclidean_distances()
sklearn.metrics.tests.test_pairwise.test_kernel_sparse()
sklearn.metrics.tests.test_pairwise.test_kernel_symmetry()
sklearn.metrics.tests.test_pairwise.test_linear_kernel()
sklearn.metrics.tests.test_pairwise.test_paired_distances()
sklearn.metrics.tests.test_pairwise.test_paired_euclidean_distances()
sklearn.metrics.tests.test_pairwise.test_paired_manhattan_distances()
sklearn.metrics.tests.test_pairwise.test_pairwise_distances()
sklearn.metrics.tests.test_pairwise.test_pairwise_distances_argmin_min()
sklearn.metrics.tests.test_pairwise.test_pairwise_kernels()
sklearn.metrics.tests.test_pairwise.test_pairwise_kernels_filter_param()
sklearn.metrics.tests.test_pairwise.test_pairwise_parallel()
sklearn.metrics.tests.test_pairwise.test_rbf_kernel()
sklearn.metrics.tests.test_pairwise.tuplify(X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/metrics/tests/test_metrics.py----------------------------------------
A:sklearn.metrics.tests.test_metrics.ALL_METRICS->dict()
A:sklearn.metrics.tests.test_metrics.dataset->sklearn.datasets.load_digits()
A:sklearn.metrics.tests.test_metrics.p->numpy.sum(y_true)
A:sklearn.metrics.tests.test_metrics.rng->numpy.random.RandomState(0)
A:sklearn.metrics.tests.test_metrics.half->int(n_samples / 2)
A:sklearn.metrics.tests.test_metrics.clf->sklearn.ensemble.RandomForestClassifier(n_estimators=100, random_state=0)
A:sklearn.metrics.tests.test_metrics.probas_pred->sklearn.ensemble.RandomForestClassifier(n_estimators=100, random_state=0).fit(X[train], y[train]).predict_proba(X[test])
A:sklearn.metrics.tests.test_metrics.y_pred->numpy.ones((20, 3))
A:sklearn.metrics.tests.test_metrics.n_correct->numpy.sum(diff_matrix > 0)
A:sklearn.metrics.tests.test_metrics.n_pos->numpy.sum(y_true == pos_label)
A:sklearn.metrics.tests.test_metrics.(y_true, _, probas_pred)->make_prediction(binary=True)
A:sklearn.metrics.tests.test_metrics.(fpr, tpr, thresholds)->assert_warns(w, roc_curve, [1 - x for x in y_true], y_pred)
A:sklearn.metrics.tests.test_metrics.roc_auc->f(y_true, probas_pred)
A:sklearn.metrics.tests.test_metrics.expected_auc->_auc(y_true, probas_pred)
A:sklearn.metrics.tests.test_metrics.y_true->numpy.ones((20, 3))
A:sklearn.metrics.tests.test_metrics.(fpr, tpr, thr)->roc_curve(y_true, y_pred)
A:sklearn.metrics.tests.test_metrics.tp->numpy.sum((probas_pred >= t) & y_true)
A:sklearn.metrics.tests.test_metrics.y_score->numpy.ones((20, 3))
A:sklearn.metrics.tests.test_metrics.(y_true, pred, probas_pred)->make_prediction(binary=True)
A:sklearn.metrics.tests.test_metrics.trivial_pred->numpy.zeros(y_true.shape)
A:sklearn.metrics.tests.test_metrics.(tpr, fpr, _)->roc_curve(y_true, y_score)
A:sklearn.metrics.tests.test_metrics.(y_true, y_pred, _)->make_prediction(binary=False)
A:sklearn.metrics.tests.test_metrics.(p, r, f, s)->assert_warns(UndefinedMetricWarning, precision_recall_fscore_support, y_true, y_pred, average=average, beta=beta)
A:sklearn.metrics.tests.test_metrics.ps->precision_score(y_true, y_pred, average='weighted')
A:sklearn.metrics.tests.test_metrics.rs->recall_score(y_true, y_pred, average='weighted')
A:sklearn.metrics.tests.test_metrics.fs->f1_score(y_true, y_pred, average='weighted')
A:sklearn.metrics.tests.test_metrics.cm->confusion_matrix(y_true, y_pred, labels=[2, 1])
A:sklearn.metrics.tests.test_metrics.(tp, fp, fn, tn)->confusion_matrix(y_true, y_pred, labels=[2, 1]).flatten()
A:sklearn.metrics.tests.test_metrics.den->numpy.sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn))
A:sklearn.metrics.tests.test_metrics.mcc->matthews_corrcoef(y_true, y_pred)
A:sklearn.metrics.tests.test_metrics.old_error_settings->numpy.seterr(all='raise')
A:sklearn.metrics.tests.test_metrics.iris->sklearn.datasets.load_iris()
A:sklearn.metrics.tests.test_metrics.report->classification_report(y_true, y_pred)
A:sklearn.metrics.tests.test_metrics.labels->numpy.array([u'blue¢', u'green¢', u'red¢'])
A:sklearn.metrics.tests.test_metrics.make_ml->ignore_warnings(make_multilabel_classification)
A:sklearn.metrics.tests.test_metrics.(_, y_true_ll)->make_ml(n_features=1, n_classes=n_classes, random_state=0, n_samples=n_samples)
A:sklearn.metrics.tests.test_metrics.(_, y_pred_ll)->make_ml(n_features=1, n_classes=n_classes, random_state=1, n_samples=n_samples)
A:sklearn.metrics.tests.test_metrics.lb->LabelBinarizer().fit(y_true)
A:sklearn.metrics.tests.test_metrics.y_true_bi->LabelBinarizer().fit(y_true).transform(y_true_ll)
A:sklearn.metrics.tests.test_metrics.y_pred_bi->LabelBinarizer().fit(y_true).transform(y_pred_ll)
A:sklearn.metrics.tests.test_metrics.y_true_copy->numpy.ones((20, 3)).copy()
A:sklearn.metrics.tests.test_metrics.(p, r, t)->precision_recall_curve(labels, predict_probas)
A:sklearn.metrics.tests.test_metrics.(p, r, thresholds)->precision_recall_curve(y_true, np.zeros_like(probas_pred))
A:sklearn.metrics.tests.test_metrics.(p2, r2, thresholds2)->precision_recall_curve(y_true == pos_label, probas_pred[:, pos_label])
A:sklearn.metrics.tests.test_metrics.precision_recall_auc->auc(r, p)
A:sklearn.metrics.tests.test_metrics.(p, r, _)->precision_recall_curve(y_true, y_score)
A:sklearn.metrics.tests.test_metrics.auc_prc->average_precision_score(y_true, y_score)
A:sklearn.metrics.tests.test_metrics.roc_auc_scaled->f(y_true, 100 * probas_pred)
A:sklearn.metrics.tests.test_metrics.roc_auc_shifted->f(y_true, probas_pred - 10)
A:sklearn.metrics.tests.test_metrics.f->ignore_warnings(auc_score)
A:sklearn.metrics.tests.test_metrics.pr_auc->average_precision_score(y_true, probas_pred)
A:sklearn.metrics.tests.test_metrics.pr_auc_scaled->average_precision_score(y_true, 100 * probas_pred)
A:sklearn.metrics.tests.test_metrics.pr_auc_shifted->average_precision_score(y_true, probas_pred - 10)
A:sklearn.metrics.tests.test_metrics.n_classes->numpy.size(unique_labels(y_true))
A:sklearn.metrics.tests.test_metrics.(y_true_shuffle, y_pred_shuffle)->shuffle(y_true, y_pred, random_state=0)
A:sklearn.metrics.tests.test_metrics.random_state->check_random_state(0)
A:sklearn.metrics.tests.test_metrics.(y_true_shuffle, y_pred_shuffle, y_score_shuffle)->shuffle(y_true, y_pred, y_score, random_state=0)
A:sklearn.metrics.tests.test_metrics.(y1, y2, _)->make_prediction()
A:sklearn.metrics.tests.test_metrics.y1_list->list(y1)
A:sklearn.metrics.tests.test_metrics.y2_list->list(y2)
A:sklearn.metrics.tests.test_metrics.y1_column->numpy.reshape(y1_1d, (-1, 1))
A:sklearn.metrics.tests.test_metrics.y2_column->numpy.reshape(y2_1d, (-1, 1))
A:sklearn.metrics.tests.test_metrics.y1_row->numpy.reshape(y1_1d, (1, -1))
A:sklearn.metrics.tests.test_metrics.y2_row->numpy.reshape(y2_1d, (1, -1))
A:sklearn.metrics.tests.test_metrics.measure->metrics(y_true_binary_indicator, y_pred_binary_indicator, normalize=True)
A:sklearn.metrics.tests.test_metrics.measure_with_number->metric(y1, y2)
A:sklearn.metrics.tests.test_metrics.metric_str->partial(metric_str, labels=labels_str)
A:sklearn.metrics.tests.test_metrics.measure_with_str->metric(y1_str, y2)
A:sklearn.metrics.tests.test_metrics.measure_with_strobj->metric(y1_str.astype('O'), y2)
A:sklearn.metrics.tests.test_metrics.pred_decision->numpy.array([-8.5, 0.5, 1.5, -0.3])
A:sklearn.metrics.tests.test_metrics.error->metric(y_true, y_pred)
A:sklearn.metrics.tests.test_metrics.perm->numpy.random.RandomState(0).permutation(n_dims)
A:sklearn.metrics.tests.test_metrics.(_, y1)->make_ml(n_features=1, n_classes=n_classes, random_state=0, n_samples=n_samples)
A:sklearn.metrics.tests.test_metrics.(_, y2)->make_ml(n_features=1, n_classes=n_classes, random_state=1, n_samples=n_samples)
A:sklearn.metrics.tests.test_metrics.y1_binary_indicator->LabelBinarizer().fit(y_true).transform(y1)
A:sklearn.metrics.tests.test_metrics.y2_binary_indicator->LabelBinarizer().fit(y_true).transform(y2)
A:sklearn.metrics.tests.test_metrics.y1_shuffle_binary_indicator->LabelBinarizer().fit(y_true).transform(y1_shuffle)
A:sklearn.metrics.tests.test_metrics.y2_shuffle_binary_indicator->LabelBinarizer().fit(y_true).transform(y2_shuffle)
A:sklearn.metrics.tests.test_metrics.metric->ignore_warnings(metric)
A:sklearn.metrics.tests.test_metrics.y1->numpy.vstack([ya, yb])
A:sklearn.metrics.tests.test_metrics.y2->numpy.vstack([ya, ya])
A:sklearn.metrics.tests.test_metrics.(_, y_true)->make_ml(n_features=1, n_classes=n_classes, random_state=0, n_samples=n_samples)
A:sklearn.metrics.tests.test_metrics.(_, y_pred)->make_ml(n_features=1, n_classes=n_classes, random_state=1, n_samples=n_samples)
A:sklearn.metrics.tests.test_metrics.y_true_binary_indicator->LabelBinarizer().fit(y_true).transform(y_true)
A:sklearn.metrics.tests.test_metrics.y_pred_binary_indicator->LabelBinarizer().fit(y_true).transform(y_pred)
A:sklearn.metrics.tests.test_metrics.f2->fbeta_score(y_true, y_pred, beta=2, average=None)
A:sklearn.metrics.tests.test_metrics.fbeta->assert_warns(UndefinedMetricWarning, fbeta_score, y_true, y_pred, beta=beta, average=average)
A:sklearn.metrics.tests.test_metrics.(merged_type, y1out, y2out)->_check_clf_targets(y1, y2)
A:sklearn.metrics.tests.test_metrics.(y_type, y_check1, y_check2)->_check_reg_targets(y1, y2)
A:sklearn.metrics.tests.test_metrics.loss->log_loss(y_true, y_pred)
A:sklearn.metrics.tests.test_metrics.label_measure->metric(y_true, y_pred, average=None)
A:sklearn.metrics.tests.test_metrics.micro_measure->metric(y_true, y_pred, average='micro')
A:sklearn.metrics.tests.test_metrics.macro_measure->metric(y_true, y_pred, average='macro')
A:sklearn.metrics.tests.test_metrics.weights->numpy.sum(y_true_binarize, axis=0, dtype=int)
A:sklearn.metrics.tests.test_metrics.weighted_measure->metric(y_true, y_pred, average='weighted')
A:sklearn.metrics.tests.test_metrics.sample_measure->metric(y_true, y_pred, average='samples')
A:sklearn.metrics.tests.test_metrics.is_multilabel->type_of_target(y_true).startswith('multilabel')
A:sklearn.metrics.tests.test_metrics.(y_true, y_pred, y_score)->make_prediction(binary=False)
A:sklearn.metrics.tests.test_metrics.y_true_binarize->LabelBinarizer().fit(y_true).transform(y_true)
A:sklearn.metrics.tests.test_metrics.y_pred_binarize->LabelBinarizer().fit(y_true).transform(y_pred)
A:sklearn.metrics.tests.test_metrics.(_, y)->make_multilabel_classification(n_features=1, n_classes=n_classes, random_state=5, n_samples=n_samples, return_indicator=True, allow_unlabeled=False)
A:sklearn.metrics.tests.test_metrics.sample_weight->numpy.random.RandomState(0).randint(1, 10, size=len(y1))
A:sklearn.metrics.tests.test_metrics.unweighted_score->metric(y1, y2, sample_weight=None)
A:sklearn.metrics.tests.test_metrics.weighted_score->metric(y1, y2, sample_weight=sample_weight)
A:sklearn.metrics.tests.test_metrics.weighted_score_list->metric(y1, y2, sample_weight=sample_weight.tolist())
A:sklearn.metrics.tests.test_metrics.repeat_weighted_score->metric(np.repeat(y1, sample_weight, axis=0), np.repeat(y2, sample_weight, axis=0), sample_weight=None)
A:sklearn.metrics.tests.test_metrics.sample_weight_zeroed->numpy.copy(sample_weight)
A:sklearn.metrics.tests.test_metrics.weighted_score_subset->metric(y1_subset, y2_subset, sample_weight=sample_weight_subset)
A:sklearn.metrics.tests.test_metrics.weighted_score_zeroed->metric(y1, y2, sample_weight=sample_weight_zeroed)
A:sklearn.metrics.tests.test_metrics.(_, ya)->make_multilabel_classification(n_features=1, n_classes=6, random_state=0, n_samples=10, return_indicator=True)
A:sklearn.metrics.tests.test_metrics.(_, yb)->make_multilabel_classification(n_features=1, n_classes=6, random_state=1, n_samples=10, return_indicator=True)
sklearn.metrics.tests.test_metrics._auc(y_true,y_score)
sklearn.metrics.tests.test_metrics._average_precision(y_true,y_score)
sklearn.metrics.tests.test_metrics._check_averaging(metric,y_true,y_pred,y_true_binarize,y_pred_binarize,is_multilabel)
sklearn.metrics.tests.test_metrics._test_precision_recall_curve(y_true,probas_pred)
sklearn.metrics.tests.test_metrics.check_averaging(name,y_true,y_true_binarize,y_pred,y_pred_binarize,y_score)
sklearn.metrics.tests.test_metrics.check_sample_weight_invariance(name,metric,y1,y2)
sklearn.metrics.tests.test_metrics.check_single_sample(name)
sklearn.metrics.tests.test_metrics.check_single_sample_multioutput(name)
sklearn.metrics.tests.test_metrics.make_prediction(dataset=None,binary=False)
sklearn.metrics.tests.test_metrics.test__check_clf_targets()
sklearn.metrics.tests.test_metrics.test__check_reg_targets()
sklearn.metrics.tests.test_metrics.test_auc()
sklearn.metrics.tests.test_metrics.test_auc_duplicate_values()
sklearn.metrics.tests.test_metrics.test_auc_errors()
sklearn.metrics.tests.test_metrics.test_auc_score_non_binary_class()
sklearn.metrics.tests.test_metrics.test_average_precision_score_duplicate_values()
sklearn.metrics.tests.test_metrics.test_average_precision_score_score_non_binary_class()
sklearn.metrics.tests.test_metrics.test_average_precision_score_tied_values()
sklearn.metrics.tests.test_metrics.test_averaging_multiclass()
sklearn.metrics.tests.test_metrics.test_averaging_multilabel()
sklearn.metrics.tests.test_metrics.test_averaging_multilabel_all_ones()
sklearn.metrics.tests.test_metrics.test_averaging_multilabel_all_zeroes()
sklearn.metrics.tests.test_metrics.test_classification_report_multiclass()
sklearn.metrics.tests.test_metrics.test_classification_report_multiclass_with_string_label()
sklearn.metrics.tests.test_metrics.test_classification_report_multiclass_with_unicode_label()
sklearn.metrics.tests.test_metrics.test_confusion_matrix_binary()
sklearn.metrics.tests.test_metrics.test_confusion_matrix_multiclass()
sklearn.metrics.tests.test_metrics.test_confusion_matrix_multiclass_subset_labels()
sklearn.metrics.tests.test_metrics.test_format_invariance_with_1d_vectors()
sklearn.metrics.tests.test_metrics.test_fscore_warnings()
sklearn.metrics.tests.test_metrics.test_hinge_loss_binary()
sklearn.metrics.tests.test_metrics.test_invariance_string_vs_numbers_labels()
sklearn.metrics.tests.test_metrics.test_log_loss()
sklearn.metrics.tests.test_metrics.test_losses()
sklearn.metrics.tests.test_metrics.test_losses_at_limits()
sklearn.metrics.tests.test_metrics.test_matthews_corrcoef_nan()
sklearn.metrics.tests.test_metrics.test_multilabel_accuracy_score_subset_accuracy()
sklearn.metrics.tests.test_metrics.test_multilabel_classification_report()
sklearn.metrics.tests.test_metrics.test_multilabel_hamming_loss()
sklearn.metrics.tests.test_metrics.test_multilabel_jaccard_similarity_score()
sklearn.metrics.tests.test_metrics.test_multilabel_representation_invariance()
sklearn.metrics.tests.test_metrics.test_multilabel_zero_one_loss_subset()
sklearn.metrics.tests.test_metrics.test_multioutput_number_of_output_differ()
sklearn.metrics.tests.test_metrics.test_multioutput_regression()
sklearn.metrics.tests.test_metrics.test_multioutput_regression_invariance_to_dimension_shuffling()
sklearn.metrics.tests.test_metrics.test_normalize_option_binary_classification()
sklearn.metrics.tests.test_metrics.test_normalize_option_multiclasss_classification()
sklearn.metrics.tests.test_metrics.test_normalize_option_multilabel_classification()
sklearn.metrics.tests.test_metrics.test_precision_recall_curve()
sklearn.metrics.tests.test_metrics.test_precision_recall_curve_errors()
sklearn.metrics.tests.test_metrics.test_precision_recall_curve_pos_label()
sklearn.metrics.tests.test_metrics.test_precision_recall_curve_toydata()
sklearn.metrics.tests.test_metrics.test_precision_recall_f1_no_labels()
sklearn.metrics.tests.test_metrics.test_precision_recall_f1_score_binary()
sklearn.metrics.tests.test_metrics.test_precision_recall_f1_score_multiclass()
sklearn.metrics.tests.test_metrics.test_precision_recall_f1_score_multiclass_pos_label_none()
sklearn.metrics.tests.test_metrics.test_precision_recall_f1_score_multilabel_1()
sklearn.metrics.tests.test_metrics.test_precision_recall_f1_score_multilabel_2()
sklearn.metrics.tests.test_metrics.test_precision_recall_f1_score_with_an_empty_prediction()
sklearn.metrics.tests.test_metrics.test_precision_recall_f_binary_single_class()
sklearn.metrics.tests.test_metrics.test_precision_recall_fscore_support_errors()
sklearn.metrics.tests.test_metrics.test_precision_warnings()
sklearn.metrics.tests.test_metrics.test_prf_warnings()
sklearn.metrics.tests.test_metrics.test_recall_warnings()
sklearn.metrics.tests.test_metrics.test_roc_curve()
sklearn.metrics.tests.test_metrics.test_roc_curve_confidence()
sklearn.metrics.tests.test_metrics.test_roc_curve_end_points()
sklearn.metrics.tests.test_metrics.test_roc_curve_hard()
sklearn.metrics.tests.test_metrics.test_roc_curve_multi()
sklearn.metrics.tests.test_metrics.test_roc_curve_one_label()
sklearn.metrics.tests.test_metrics.test_roc_curve_toydata()
sklearn.metrics.tests.test_metrics.test_roc_nonrepeating_thresholds()
sklearn.metrics.tests.test_metrics.test_roc_returns_consistency()
sklearn.metrics.tests.test_metrics.test_sample_order_invariance()
sklearn.metrics.tests.test_metrics.test_sample_order_invariance_multilabel_and_multioutput()
sklearn.metrics.tests.test_metrics.test_sample_weight_invariance()
sklearn.metrics.tests.test_metrics.test_score_scale_invariance()
sklearn.metrics.tests.test_metrics.test_single_sample()
sklearn.metrics.tests.test_metrics.test_symmetry()
sklearn.metrics.tests.test_metrics.test_zero_precision_recall()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/metrics/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/__check_build/setup.py----------------------------------------
A:sklearn.__check_build.setup.config->Configuration('__check_build', parent_package, top_path)
sklearn.__check_build.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/__check_build/__init__.py----------------------------------------
A:sklearn.__check_build.__init__.dir_content->list()
sklearn.__check_build.__init__.raise_build_error(e)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tree/export.py----------------------------------------
A:sklearn.tree.export.out_file->open(out_file, 'wb')
sklearn.tree.export.export_graphviz(decision_tree,out_file='tree.dot',feature_names=None,max_depth=None,close=None)
sklearn.tree.export_graphviz(decision_tree,out_file='tree.dot',feature_names=None,max_depth=None,close=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tree/setup.py----------------------------------------
A:sklearn.tree.setup.config->Configuration('tree', parent_package, top_path)
sklearn.tree.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tree/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tree/tree.py----------------------------------------
A:sklearn.tree.tree.random_state->check_random_state(self.random_state)
A:sklearn.tree.tree.(X,)->check_arrays(X, dtype=DTYPE, sparse_format='dense')
A:sklearn.tree.tree.is_classification->isinstance(self, ClassifierMixin)
A:sklearn.tree.tree.y->numpy.ascontiguousarray(y, dtype=DOUBLE)
A:sklearn.tree.tree.(classes_k, y[:, k])->numpy.unique(y[:, k], return_inverse=True)
A:sklearn.tree.tree.self.n_classes_->numpy.array(self.n_classes_, dtype=np.intp)
A:sklearn.tree.tree.max_features->max(1, int(self.max_features * self.n_features_))
A:sklearn.tree.tree.sample_weight->numpy.ascontiguousarray(sample_weight, dtype=DOUBLE)
A:sklearn.tree.tree.min_samples_split->max(self.min_samples_split, 2 * self.min_samples_leaf)
A:sklearn.tree.tree.criterion->CRITERIA_REG[self.criterion](self.n_outputs_)
A:sklearn.tree.tree.splitter->SPLITTERS[self.splitter](criterion, self.max_features_, self.min_samples_leaf, random_state)
A:sklearn.tree.tree.self.tree_->Tree(self.n_features_, self.n_classes_, self.n_outputs_)
A:sklearn.tree.tree.builder->BestFirstTreeBuilder(splitter, min_samples_split, self.min_samples_leaf, max_depth, max_leaf_nodes)
A:sklearn.tree.tree.X->array2d(X, dtype=DTYPE)
A:sklearn.tree.tree.proba->self.predict_proba(X)
A:sklearn.tree.tree.predictions->numpy.zeros((n_samples, self.n_outputs_))
A:sklearn.tree.tree.predictions[:, k]->self.classes_[k].take(np.argmax(proba[:, k], axis=1), axis=0)
A:sklearn.tree.tree.proba[k]->numpy.log(proba[k])
sklearn.tree.DecisionTreeClassifier(self,criterion='gini',splitter='best',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features=None,random_state=None,min_density=None,compute_importances=None,max_leaf_nodes=None)
sklearn.tree.DecisionTreeClassifier.predict_log_proba(self,X)
sklearn.tree.DecisionTreeClassifier.predict_proba(self,X)
sklearn.tree.DecisionTreeRegressor(self,criterion='mse',splitter='best',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features=None,random_state=None,min_density=None,compute_importances=None,max_leaf_nodes=None)
sklearn.tree.ExtraTreeClassifier(self,criterion='gini',splitter='random',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features='auto',random_state=None,min_density=None,compute_importances=None,max_leaf_nodes=None)
sklearn.tree.ExtraTreeRegressor(self,criterion='mse',splitter='random',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features='auto',random_state=None,min_density=None,compute_importances=None,max_leaf_nodes=None)
sklearn.tree.tree.BaseDecisionTree(self,criterion,splitter,max_depth,min_samples_split,min_samples_leaf,max_features,max_leaf_nodes,random_state)
sklearn.tree.tree.BaseDecisionTree.__init__(self,criterion,splitter,max_depth,min_samples_split,min_samples_leaf,max_features,max_leaf_nodes,random_state)
sklearn.tree.tree.BaseDecisionTree.feature_importances_(self)
sklearn.tree.tree.BaseDecisionTree.fit(self,X,y,sample_mask=None,X_argsorted=None,check_input=True,sample_weight=None)
sklearn.tree.tree.BaseDecisionTree.predict(self,X)
sklearn.tree.tree.DecisionTreeClassifier(self,criterion='gini',splitter='best',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features=None,random_state=None,min_density=None,compute_importances=None,max_leaf_nodes=None)
sklearn.tree.tree.DecisionTreeClassifier.__init__(self,criterion='gini',splitter='best',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features=None,random_state=None,min_density=None,compute_importances=None,max_leaf_nodes=None)
sklearn.tree.tree.DecisionTreeClassifier.predict_log_proba(self,X)
sklearn.tree.tree.DecisionTreeClassifier.predict_proba(self,X)
sklearn.tree.tree.DecisionTreeRegressor(self,criterion='mse',splitter='best',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features=None,random_state=None,min_density=None,compute_importances=None,max_leaf_nodes=None)
sklearn.tree.tree.DecisionTreeRegressor.__init__(self,criterion='mse',splitter='best',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features=None,random_state=None,min_density=None,compute_importances=None,max_leaf_nodes=None)
sklearn.tree.tree.ExtraTreeClassifier(self,criterion='gini',splitter='random',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features='auto',random_state=None,min_density=None,compute_importances=None,max_leaf_nodes=None)
sklearn.tree.tree.ExtraTreeClassifier.__init__(self,criterion='gini',splitter='random',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features='auto',random_state=None,min_density=None,compute_importances=None,max_leaf_nodes=None)
sklearn.tree.tree.ExtraTreeRegressor(self,criterion='mse',splitter='random',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features='auto',random_state=None,min_density=None,compute_importances=None,max_leaf_nodes=None)
sklearn.tree.tree.ExtraTreeRegressor.__init__(self,criterion='mse',splitter='random',max_depth=None,min_samples_split=2,min_samples_leaf=1,max_features='auto',random_state=None,min_density=None,compute_importances=None,max_leaf_nodes=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tree/tests/test_tree.py----------------------------------------
A:sklearn.tree.tests.test_tree.ALL_TREES->dict()
A:sklearn.tree.tests.test_tree.iris->sklearn.datasets.load_iris()
A:sklearn.tree.tests.test_tree.rng->numpy.random.RandomState(1)
A:sklearn.tree.tests.test_tree.perm->numpy.random.RandomState(1).permutation(boston.target.size)
A:sklearn.tree.tests.test_tree.boston->sklearn.datasets.load_boston()
A:sklearn.tree.tests.test_tree.clf->DecisionTreeClassifier()
A:sklearn.tree.tests.test_tree.reg->TreeRegressor(random_state=0)
A:sklearn.tree.tests.test_tree.y->numpy.array([0.0, 1.0, 0.0, 1.0])
A:sklearn.tree.tests.test_tree.(gridx, gridy)->numpy.indices(y.shape)
A:sklearn.tree.tests.test_tree.score->TreeRegressor(random_state=0).score(boston.data, boston.target)
A:sklearn.tree.tests.test_tree.prob_predict->DecisionTreeClassifier().predict_proba(iris.data)
A:sklearn.tree.tests.test_tree.X->numpy.repeat(10 ** 40.0, 4).astype(np.float64).reshape(-1, 1)
A:sklearn.tree.tests.test_tree.(X, y)->sklearn.datasets.make_hastie_10_2(n_samples=100, random_state=1)
A:sklearn.tree.tests.test_tree.n_important->numpy.sum(importances > 0.1)
A:sklearn.tree.tests.test_tree.X_new->DecisionTreeClassifier().transform(X, threshold='mean')
A:sklearn.tree.tests.test_tree.clf2->DecisionTreeClassifier(random_state=1)
A:sklearn.tree.tests.test_tree.est->TreeEstimator(random_state=0, max_features=1)
A:sklearn.tree.tests.test_tree.Xf->numpy.asfortranarray(X)
A:sklearn.tree.tests.test_tree.t->numpy.asarray(T)
A:sklearn.tree.tests.test_tree.out->TreeEstimator(random_state=0, max_features=1).tree_.apply(X)
A:sklearn.tree.tests.test_tree.node_counts->numpy.bincount(out)
A:sklearn.tree.tests.test_tree.serialized_object->pickle.dumps(reg)
A:sklearn.tree.tests.test_tree.score2->pickle.loads(serialized_object).score(boston.data, boston.target)
A:sklearn.tree.tests.test_tree.reg2->pickle.loads(serialized_object)
A:sklearn.tree.tests.test_tree.y_hat->TreeRegressor(random_state=0).fit(X, y).predict(T)
A:sklearn.tree.tests.test_tree.proba->DecisionTreeClassifier().predict_proba(T)
A:sklearn.tree.tests.test_tree.log_proba->DecisionTreeClassifier().predict_log_proba(T)
A:sklearn.tree.tests.test_tree.sample_weight->numpy.ones(99)
A:sklearn.tree.tests.test_tree.duplicates->numpy.random.RandomState(1).randint(0, X.shape[0], 200)
A:sklearn.tree.tests.test_tree.value->getattr(DecisionTreeClassifier().fit([[0]], [0]).tree_, attr)
A:sklearn.tree.tests.test_tree.random_state->check_random_state(0)
sklearn.tree.tests.test_tree.test_arrayrepr()
sklearn.tree.tests.test_tree.test_arrays_persist()
sklearn.tree.tests.test_tree.test_big_input()
sklearn.tree.tests.test_tree.test_boston()
sklearn.tree.tests.test_tree.test_classes_shape()
sklearn.tree.tests.test_tree.test_classification_toy()
sklearn.tree.tests.test_tree.test_error()
sklearn.tree.tests.test_tree.test_importances()
sklearn.tree.tests.test_tree.test_importances_gini_equal_mse()
sklearn.tree.tests.test_tree.test_importances_raises()
sklearn.tree.tests.test_tree.test_iris()
sklearn.tree.tests.test_tree.test_max_features()
sklearn.tree.tests.test_tree.test_max_leaf_nodes()
sklearn.tree.tests.test_tree.test_max_leaf_nodes_max_depth()
sklearn.tree.tests.test_tree.test_memory_layout()
sklearn.tree.tests.test_tree.test_memoryerror()
sklearn.tree.tests.test_tree.test_min_samples_leaf()
sklearn.tree.tests.test_tree.test_multioutput()
sklearn.tree.tests.test_tree.test_numerical_stability()
sklearn.tree.tests.test_tree.test_only_constant_features()
sklearn.tree.tests.test_tree.test_pickle()
sklearn.tree.tests.test_tree.test_probability()
sklearn.tree.tests.test_tree.test_pure_set()
sklearn.tree.tests.test_tree.test_regression_toy()
sklearn.tree.tests.test_tree.test_sample_weight()
sklearn.tree.tests.test_tree.test_sample_weight_invalid()
sklearn.tree.tests.test_tree.test_unbalanced_iris()
sklearn.tree.tests.test_tree.test_weighted_classification_toy()
sklearn.tree.tests.test_tree.test_with_only_one_non_constant_features()
sklearn.tree.tests.test_tree.test_xor()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tree/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/tree/tests/test_export.py----------------------------------------
A:sklearn.tree.tests.test_export.clf->DecisionTreeClassifier(max_depth=3, min_samples_split=1)
A:sklearn.tree.tests.test_export.out->StringIO()
A:sklearn.tree.tests.test_export.contents1->StringIO().getvalue()
sklearn.tree.tests.test_export.test_graphviz_errors()
sklearn.tree.tests.test_export.test_graphviz_toy()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/datasets/lfw.py----------------------------------------
A:sklearn.datasets.lfw.logger->logging.getLogger(__name__)
A:sklearn.datasets.lfw.data_home->get_data_home(data_home=data_home)
A:sklearn.datasets.lfw.lfw_home->join(data_home, 'lfw_home')
A:sklearn.datasets.lfw.archive_path->join(lfw_home, ARCHIVE_NAME)
A:sklearn.datasets.lfw.data_folder_path->join(lfw_home, 'lfw')
A:sklearn.datasets.lfw.target_filepath->join(lfw_home, target_filename)
A:sklearn.datasets.lfw.slice_->tuple((s or ds for (s, ds) in zip(slice_, default_slice)))
A:sklearn.datasets.lfw.resize->float(resize)
A:sklearn.datasets.lfw.h->int(resize * h)
A:sklearn.datasets.lfw.w->int(resize * w)
A:sklearn.datasets.lfw.n_faces->list(pairs.shape).pop(0)
A:sklearn.datasets.lfw.faces->_load_imgs(file_paths, slice_, color, resize)
A:sklearn.datasets.lfw.face->face.mean(axis=2).mean(axis=2)
A:sklearn.datasets.lfw.folder_path->join(data_folder_path, person_name)
A:sklearn.datasets.lfw.n_pictures->len(paths)
A:sklearn.datasets.lfw.person_name->person_name.replace('_', ' ').replace('_', ' ')
A:sklearn.datasets.lfw.target_names->numpy.unique(person_names)
A:sklearn.datasets.lfw.target->numpy.zeros(n_pairs, dtype=np.int)
A:sklearn.datasets.lfw.indices->numpy.arange(n_faces)
A:sklearn.datasets.lfw.(lfw_home, data_folder_path)->check_fetch_lfw(data_home=data_home, funneled=funneled, download_if_missing=download_if_missing)
A:sklearn.datasets.lfw.m->Memory(cachedir=lfw_home, compress=6, verbose=0)
A:sklearn.datasets.lfw.load_func->Memory(cachedir=lfw_home, compress=6, verbose=0).cache(_fetch_lfw_pairs)
A:sklearn.datasets.lfw.(faces, target, target_names)->load_func(data_folder_path, resize=resize, min_faces_per_person=min_faces_per_person, color=color, slice_=slice_)
A:sklearn.datasets.lfw.n_pairs->len(pair_specs)
A:sklearn.datasets.lfw.file_paths->list()
A:sklearn.datasets.lfw.person_folder->join(data_folder_path, str(name, 'UTF-8'))
A:sklearn.datasets.lfw.filenames->list(sorted(listdir(person_folder)))
A:sklearn.datasets.lfw.file_path->join(person_folder, filenames[idx])
A:sklearn.datasets.lfw.pairs->_load_imgs(file_paths, slice_, color, resize)
A:sklearn.datasets.lfw.shape->list(pairs.shape)
A:sklearn.datasets.lfw.index_file_path->join(lfw_home, label_filenames[subset])
A:sklearn.datasets.lfw.(pairs, target, target_names)->load_func(index_file_path, data_folder_path, resize=resize, color=color, slice_=slice_)
sklearn.datasets.fetch_lfw_pairs(subset='train',data_home=None,funneled=True,resize=0.5,color=False,slice_=(slice(70,195),slice(78,172)),download_if_missing=True)
sklearn.datasets.fetch_lfw_people(data_home=None,funneled=True,resize=0.5,min_faces_per_person=0,color=False,slice_=(slice(70,195),slice(78,172)),download_if_missing=True)
sklearn.datasets.lfw._fetch_lfw_pairs(index_file_path,data_folder_path,slice_=None,color=False,resize=None)
sklearn.datasets.lfw._fetch_lfw_people(data_folder_path,slice_=None,color=False,resize=None,min_faces_per_person=0)
sklearn.datasets.lfw._load_imgs(file_paths,slice_,color,resize)
sklearn.datasets.lfw.check_fetch_lfw(data_home=None,funneled=True,download_if_missing=True)
sklearn.datasets.lfw.fetch_lfw_pairs(subset='train',data_home=None,funneled=True,resize=0.5,color=False,slice_=(slice(70,195),slice(78,172)),download_if_missing=True)
sklearn.datasets.lfw.fetch_lfw_people(data_home=None,funneled=True,resize=0.5,min_faces_per_person=0,color=False,slice_=(slice(70,195),slice(78,172)),download_if_missing=True)
sklearn.datasets.lfw.load_lfw_pairs(download_if_missing=False,**kwargs)
sklearn.datasets.lfw.load_lfw_people(download_if_missing=False,**kwargs)
sklearn.datasets.lfw.scale_face(face)
sklearn.datasets.load_lfw_pairs(download_if_missing=False,**kwargs)
sklearn.datasets.load_lfw_people(download_if_missing=False,**kwargs)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/datasets/covtype.py----------------------------------------
A:sklearn.datasets.covtype.logger->logging.getLogger()
A:sklearn.datasets.covtype.data_home->get_data_home(data_home=data_home)
A:sklearn.datasets.covtype.covtype_dir->join(data_home, 'covertype' + dir_suffix)
A:sklearn.datasets.covtype.samples_path->join(covtype_dir, 'samples')
A:sklearn.datasets.covtype.targets_path->join(covtype_dir, 'targets')
A:sklearn.datasets.covtype.available->exists(samples_path)
A:sklearn.datasets.covtype.f->BytesIO(urlopen(URL).read())
A:sklearn.datasets.covtype.Xy->numpy.genfromtxt(GzipFile(fileobj=f), delimiter=',')
A:sklearn.datasets.covtype.y->externals.joblib.load(targets_path)
A:sklearn.datasets.covtype.X->externals.joblib.load(samples_path)
A:sklearn.datasets.covtype.ind->numpy.arange(X.shape[0])
A:sklearn.datasets.covtype.rng->check_random_state(random_state)
sklearn.datasets.covtype._mkdirp(d)
sklearn.datasets.covtype.fetch_covtype(data_home=None,download_if_missing=True,random_state=None,shuffle=False)
sklearn.datasets.fetch_covtype(data_home=None,download_if_missing=True,random_state=None,shuffle=False)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/datasets/california_housing.py----------------------------------------
A:sklearn.datasets.california_housing.data_home->get_data_home(data_home=data_home)
A:sklearn.datasets.california_housing.fhandle->urlopen(DATA_URL)
A:sklearn.datasets.california_housing.buf->BytesIO(fhandle.read())
A:sklearn.datasets.california_housing.zip_file->ZipFile(buf)
A:sklearn.datasets.california_housing.cadata_fd->ZipFile(buf).open('cadata.txt', 'r')
A:sklearn.datasets.california_housing.cadata->BytesIO(cadata_fd.read())
A:sklearn.datasets.california_housing.cal_housing->externals.joblib.load(join(data_home, TARGET_FILENAME))
sklearn.datasets.california_housing.fetch_california_housing(data_home=None,download_if_missing=True)
sklearn.datasets.fetch_california_housing(data_home=None,download_if_missing=True)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/datasets/species_distributions.py----------------------------------------
A:sklearn.datasets.species_distributions.SAMPLES_URL->join(DIRECTORY_URL, 'samples.zip')
A:sklearn.datasets.species_distributions.COVERAGES_URL->join(DIRECTORY_URL, 'coverages.zip')
A:sklearn.datasets.species_distributions.header->dict([make_tuple(line) for line in header])
A:sklearn.datasets.species_distributions.M->numpy.loadtxt(F, dtype=dtype)
A:sklearn.datasets.species_distributions.names->F.readline().decode('ascii').strip().split(',')
A:sklearn.datasets.species_distributions.rec->numpy.loadtxt(F, skiprows=0, delimiter=',', dtype='a22,f4,f4')
A:sklearn.datasets.species_distributions.xgrid->numpy.arange(xmin, xmax, batch.grid_size)
A:sklearn.datasets.species_distributions.ygrid->numpy.arange(ymin, ymax, batch.grid_size)
A:sklearn.datasets.species_distributions.data_home->get_data_home(data_home)
A:sklearn.datasets.species_distributions.extra_params->dict(x_left_lower_corner=-94.8, Nx=1212, y_left_lower_corner=-56.05, Ny=1592, grid_size=0.05)
A:sklearn.datasets.species_distributions.X->numpy.load(BytesIO(urlopen(COVERAGES_URL).read()))
A:sklearn.datasets.species_distributions.fhandle->BytesIO(X[f])
A:sklearn.datasets.species_distributions.train->_load_csv(fhandle)
A:sklearn.datasets.species_distributions.test->_load_csv(fhandle)
A:sklearn.datasets.species_distributions.coverages->numpy.asarray(coverages, dtype=dtype)
A:sklearn.datasets.species_distributions.bunch->sklearn.externals.joblib.load(join(data_home, DATA_ARCHIVE_NAME))
sklearn.datasets.fetch_species_distributions(data_home=None,download_if_missing=True)
sklearn.datasets.species_distributions._load_coverage(F,header_length=6,dtype=np.int16)
sklearn.datasets.species_distributions._load_csv(F)
sklearn.datasets.species_distributions.construct_grids(batch)
sklearn.datasets.species_distributions.fetch_species_distributions(data_home=None,download_if_missing=True)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/datasets/twenty_newsgroups.py----------------------------------------
A:sklearn.datasets.twenty_newsgroups.logger->logging.getLogger(__name__)
A:sklearn.datasets.twenty_newsgroups.archive_path->os.path.join(target_dir, ARCHIVE_NAME)
A:sklearn.datasets.twenty_newsgroups.train_path->os.path.join(target_dir, TRAIN_FOLDER)
A:sklearn.datasets.twenty_newsgroups.test_path->os.path.join(target_dir, TEST_FOLDER)
A:sklearn.datasets.twenty_newsgroups.opener->urlopen(URL)
A:sklearn.datasets.twenty_newsgroups.cache->download_20newsgroups(target_dir=twenty_home, cache_path=cache_path)
A:sklearn.datasets.twenty_newsgroups.compressed_content->f.read()
A:sklearn.datasets.twenty_newsgroups.(_before, _blankline, after)->text.partition('\n\n')
A:sklearn.datasets.twenty_newsgroups._QUOTE_RE->re.compile('(writes in|writes:|wrote:|says:|said:|^In article|^Quoted from|^\\||^>)')
A:sklearn.datasets.twenty_newsgroups.lines->text.strip().split('\n')
A:sklearn.datasets.twenty_newsgroups.data_home->get_data_home(data_home=data_home)
A:sklearn.datasets.twenty_newsgroups.cache_path->os.path.join(data_home, CACHE_NAME)
A:sklearn.datasets.twenty_newsgroups.twenty_home->os.path.join(data_home, '20news_home')
A:sklearn.datasets.twenty_newsgroups.uncompressed_content->codecs.decode(compressed_content, 'zlib_codec')
A:sklearn.datasets.twenty_newsgroups.data_lst->numpy.array(data.data, dtype=object)
A:sklearn.datasets.twenty_newsgroups.target->numpy.concatenate((data_train.target, data_test.target))
A:sklearn.datasets.twenty_newsgroups.filenames->list()
A:sklearn.datasets.twenty_newsgroups.data.target->numpy.searchsorted(labels, data.target)
A:sklearn.datasets.twenty_newsgroups.data.filenames->numpy.array(filenames)
A:sklearn.datasets.twenty_newsgroups.(labels, categories)->zip(*labels)
A:sklearn.datasets.twenty_newsgroups.mask->numpy.in1d(data.target, labels)
A:sklearn.datasets.twenty_newsgroups.data.target_names->list(categories)
A:sklearn.datasets.twenty_newsgroups.data.data->numpy.array(data.data, dtype=object).tolist()
A:sklearn.datasets.twenty_newsgroups.random_state->check_random_state(random_state)
A:sklearn.datasets.twenty_newsgroups.indices->numpy.arange(data.target.shape[0])
A:sklearn.datasets.twenty_newsgroups.target_file->os.path.join(data_home, filebase + '.pk')
A:sklearn.datasets.twenty_newsgroups.data_train->fetch_20newsgroups(data_home=data_home, subset='train', categories=None, shuffle=True, random_state=12, remove=remove)
A:sklearn.datasets.twenty_newsgroups.data_test->fetch_20newsgroups(data_home=data_home, subset='test', categories=None, shuffle=True, random_state=12, remove=remove)
A:sklearn.datasets.twenty_newsgroups.(X_train, X_test)->externals.joblib.load(target_file)
A:sklearn.datasets.twenty_newsgroups.vectorizer->CountVectorizer(dtype=np.int16)
A:sklearn.datasets.twenty_newsgroups.X_train->X_train.astype(np.float64).astype(np.float64)
A:sklearn.datasets.twenty_newsgroups.X_test->X_test.astype(np.float64).astype(np.float64)
A:sklearn.datasets.twenty_newsgroups.data->scipy.sparse.vstack((X_train, X_test)).tocsr()
sklearn.datasets.fetch_20newsgroups(data_home=None,subset='train',categories=None,shuffle=True,random_state=42,remove=(),download_if_missing=True)
sklearn.datasets.fetch_20newsgroups_vectorized(subset='train',remove=(),data_home=None)
sklearn.datasets.twenty_newsgroups.download_20newsgroups(target_dir,cache_path)
sklearn.datasets.twenty_newsgroups.fetch_20newsgroups(data_home=None,subset='train',categories=None,shuffle=True,random_state=42,remove=(),download_if_missing=True)
sklearn.datasets.twenty_newsgroups.fetch_20newsgroups_vectorized(subset='train',remove=(),data_home=None)
sklearn.datasets.twenty_newsgroups.strip_newsgroup_footer(text)
sklearn.datasets.twenty_newsgroups.strip_newsgroup_header(text)
sklearn.datasets.twenty_newsgroups.strip_newsgroup_quoting(text)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/datasets/svmlight_format.py----------------------------------------
A:sklearn.datasets.svmlight_format.(_, ext)->os.path.splitext(f)
A:sklearn.datasets.svmlight_format.(actual_dtype, data, ind, indptr, labels, query)->_load_svmlight_file(f, dtype, multilabel, zero_based, query_id)
A:sklearn.datasets.svmlight_format.labels->_frombuffer(labels, np.float64)
A:sklearn.datasets.svmlight_format.data->numpy.asarray(data, dtype=dtype)
A:sklearn.datasets.svmlight_format.indices->_frombuffer(ind, np.intc)
A:sklearn.datasets.svmlight_format.indptr->numpy.frombuffer(indptr, dtype=np.intc)
A:sklearn.datasets.svmlight_format.query->_frombuffer(query, np.intc)
A:sklearn.datasets.svmlight_format.X->atleast2d_or_csr(X).sorted_indices()
A:sklearn.datasets.svmlight_format.is_sp->int(hasattr(X, 'tocsr'))
A:sklearn.datasets.svmlight_format.value_pattern->u('%d:%.16g')
A:sklearn.datasets.svmlight_format.line_pattern->u('%.16g')
A:sklearn.datasets.svmlight_format.span->slice(X.indptr[i], X.indptr[i + 1])
A:sklearn.datasets.svmlight_format.row->zip(np.where(nz)[0], X[i, nz])
A:sklearn.datasets.svmlight_format.s->' '.join((value_pattern % (j + one_based, x) for (j, x) in row))
A:sklearn.datasets.svmlight_format.comment->comment.encode('utf-8').encode('utf-8')
A:sklearn.datasets.svmlight_format.y->numpy.asarray(y)
A:sklearn.datasets.svmlight_format.Xval->atleast2d_or_csr(X)
A:sklearn.datasets.svmlight_format.query_id->numpy.asarray(query_id)
sklearn.datasets.dump_svmlight_file(X,y,f,zero_based=True,comment=None,query_id=None)
sklearn.datasets.load_svmlight_file(f,n_features=None,dtype=np.float64,multilabel=False,zero_based='auto',query_id=False)
sklearn.datasets.load_svmlight_files(files,n_features=None,dtype=np.float64,multilabel=False,zero_based='auto',query_id=False)
sklearn.datasets.svmlight_format._dump_svmlight(X,y,f,one_based,comment,query_id)
sklearn.datasets.svmlight_format._frombuffer(x,dtype)
sklearn.datasets.svmlight_format._gen_open(f)
sklearn.datasets.svmlight_format._open_and_load(f,dtype,multilabel,zero_based,query_id)
sklearn.datasets.svmlight_format.dump_svmlight_file(X,y,f,zero_based=True,comment=None,query_id=None)
sklearn.datasets.svmlight_format.load_svmlight_file(f,n_features=None,dtype=np.float64,multilabel=False,zero_based='auto',query_id=False)
sklearn.datasets.svmlight_format.load_svmlight_files(files,n_features=None,dtype=np.float64,multilabel=False,zero_based='auto',query_id=False)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/datasets/mldata.py----------------------------------------
A:sklearn.datasets.mldata.dataname->mldata_filename(dataname)
A:sklearn.datasets.mldata.data_home->join(data_home, 'mldata')
A:sklearn.datasets.mldata.filename->join(data_home, matlab_name)
A:sklearn.datasets.mldata.mldata_url->urlopen(urlname)
A:sklearn.datasets.mldata.matlab_dict->scipy.io.loadmat(matlab_file, struct_as_record=True)
A:sklearn.datasets.mldata.dataset['target']->dataset['target'].squeeze().squeeze()
sklearn.datasets.fetch_mldata(dataname,target_name='label',data_name='data',transpose_data=True,data_home=None)
sklearn.datasets.mldata.fetch_mldata(dataname,target_name='label',data_name='data',transpose_data=True,data_home=None)
sklearn.datasets.mldata.mldata_filename(dataname)
sklearn.datasets.mldata.setup_module(module)
sklearn.datasets.mldata.teardown_module(module)
sklearn.datasets.mldata_filename(dataname)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/datasets/mlcomp.py----------------------------------------
A:sklearn.datasets.mlcomp.dataset_path->os.path.join(mlcomp_root, dataset)
A:sklearn.datasets.mlcomp.mlcomp_root->os.path.normpath(mlcomp_root)
A:sklearn.datasets.mlcomp.metadata_file->os.path.join(dataset_path, 'metadata')
A:sklearn.datasets.mlcomp.metadata->dict()
A:sklearn.datasets.mlcomp.(key, value)->line.split(':', 1)
A:sklearn.datasets.mlcomp.metadata[key.strip()]->value.strip()
A:sklearn.datasets.mlcomp.format->dict().get('format', 'unknow')
A:sklearn.datasets.mlcomp.loader->LOADERS.get(format)
sklearn.datasets.load_mlcomp(name_or_id,set_='raw',mlcomp_root=None,**kwargs)
sklearn.datasets.mlcomp._load_document_classification(dataset_path,metadata,set_=None,**kwargs)
sklearn.datasets.mlcomp.load_mlcomp(name_or_id,set_='raw',mlcomp_root=None,**kwargs)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/datasets/samples_generator.py----------------------------------------
A:sklearn.datasets.samples_generator.out->astype(sample_without_replacement(2 ** dimensions, samples, random_state=rng), dtype='>u4', copy=False)
A:sklearn.datasets.samples_generator.generator->check_random_state(random_state)
A:sklearn.datasets.samples_generator.X->check_random_state(random_state).multivariate_normal(mean, cov * np.identity(n_features), (n_samples,))
A:sklearn.datasets.samples_generator.y->numpy.hstack([np.repeat(np.arange(n_classes), step), np.repeat(n_classes - 1, n_samples - step * n_classes)])
A:sklearn.datasets.samples_generator.centroids->_generate_hypercube(n_clusters, n_informative, generator).astype(float)
A:sklearn.datasets.samples_generator.X[:, :n_informative]->check_random_state(random_state).randn(n_samples, n_informative)
A:sklearn.datasets.samples_generator.X_k[...]->numpy.dot(X_k, A)
A:sklearn.datasets.samples_generator.X[:, n_informative:n_informative + n_redundant]->numpy.dot(X[:, :n_informative], B)
A:sklearn.datasets.samples_generator.indices->numpy.arange(n_samples)
A:sklearn.datasets.samples_generator.X[:, -n_useless:]->check_random_state(random_state).randn(n_samples, n_useless)
A:sklearn.datasets.samples_generator.y[flip_mask]->check_random_state(random_state).randint(n_classes, size=flip_mask.sum())
A:sklearn.datasets.samples_generator.(X, y)->util_shuffle(X, y, random_state=generator)
A:sklearn.datasets.samples_generator.p_c->check_random_state(random_state).rand(n_classes)
A:sklearn.datasets.samples_generator.p_w_c->check_random_state(random_state).rand(n_features, n_classes)
A:sklearn.datasets.samples_generator.n->min(n_samples, n_features)
A:sklearn.datasets.samples_generator.c->check_random_state(random_state).multinomial(1, p_c).argmax()
A:sklearn.datasets.samples_generator.k->check_random_state(random_state).poisson(length)
A:sklearn.datasets.samples_generator.x->numpy.sin(t)
A:sklearn.datasets.samples_generator.w->check_random_state(random_state).multinomial(1, p_w_c[:, c]).argmax()
A:sklearn.datasets.samples_generator.(X, Y)->zip(*[sample_example() for i in range(n_samples)])
A:sklearn.datasets.samples_generator.lb->MultiLabelBinarizer()
A:sklearn.datasets.samples_generator.Y->numpy.dot(D, X)
A:sklearn.datasets.samples_generator.rs->check_random_state(random_state)
A:sklearn.datasets.samples_generator.n_informative->min(n_features, n_informative)
A:sklearn.datasets.samples_generator.ground_truth->numpy.zeros((n_features, n_targets))
A:sklearn.datasets.samples_generator.outer_circ_x->numpy.cos(np.linspace(0, np.pi, n_samples_out))
A:sklearn.datasets.samples_generator.outer_circ_y->numpy.sin(np.linspace(0, np.pi, n_samples_out))
A:sklearn.datasets.samples_generator.centers->array2d(centers)
A:sklearn.datasets.samples_generator.(u, _)->scipy.linalg.qr(generator.randn(n_samples, n), mode='economic')
A:sklearn.datasets.samples_generator.(v, _)->scipy.linalg.qr(generator.randn(n_features, n), mode='economic')
A:sklearn.datasets.samples_generator.singular_ind->numpy.arange(n, dtype=np.float64)
A:sklearn.datasets.samples_generator.D->check_random_state(random_state).randn(n_features, n_components)
A:sklearn.datasets.samples_generator.idx->numpy.argsort(np.sum((X - mean[np.newaxis, :]) ** 2, axis=1))
A:sklearn.datasets.samples_generator.X[idx, i]->check_random_state(random_state).randn(n_nonzero_coefs)
A:sklearn.datasets.samples_generator.A->check_random_state(random_state).rand(n_dim, n_dim)
A:sklearn.datasets.samples_generator.(U, s, V)->scipy.linalg.svd(np.dot(A.T, A))
A:sklearn.datasets.samples_generator.random_state->check_random_state(random_state)
A:sklearn.datasets.samples_generator.aux->numpy.tril(aux, k=-1)
A:sklearn.datasets.samples_generator.permutation->check_random_state(random_state).permutation(dim)
A:sklearn.datasets.samples_generator.prec->numpy.dot(chol.T, chol)
A:sklearn.datasets.samples_generator.d->numpy.diag(prec)
A:sklearn.datasets.samples_generator.t->numpy.squeeze(t)
A:sklearn.datasets.samples_generator.mean->numpy.array(mean)
A:sklearn.datasets.samples_generator.row_idx->check_random_state(random_state).permutation(n_rows)
A:sklearn.datasets.samples_generator.col_idx->check_random_state(random_state).permutation(n_cols)
A:sklearn.datasets.samples_generator.consts->check_random_state(random_state).uniform(minval, maxval, n_clusters)
A:sklearn.datasets.samples_generator.row_sizes->check_random_state(random_state).multinomial(n_rows, np.repeat(1.0 / n_row_clusters, n_row_clusters))
A:sklearn.datasets.samples_generator.col_sizes->check_random_state(random_state).multinomial(n_cols, np.repeat(1.0 / n_col_clusters, n_col_clusters))
A:sklearn.datasets.samples_generator.row_labels->numpy.hstack(list((np.repeat(val, rep) for (val, rep) in zip(range(n_row_clusters), row_sizes))))
A:sklearn.datasets.samples_generator.col_labels->numpy.hstack(list((np.repeat(val, rep) for (val, rep) in zip(range(n_col_clusters), col_sizes))))
A:sklearn.datasets.samples_generator.result->numpy.zeros(shape, dtype=np.float64)
A:sklearn.datasets.samples_generator.selector->numpy.outer(row_labels == i, col_labels == j)
A:sklearn.datasets.samples_generator.(result, row_idx, col_idx)->_shuffle(result, random_state)
A:sklearn.datasets.samples_generator.rows->numpy.vstack((row_labels == label for label in range(n_row_clusters) for _ in range(n_col_clusters)))
A:sklearn.datasets.samples_generator.cols->numpy.vstack((col_labels == label for _ in range(n_row_clusters) for label in range(n_col_clusters)))
sklearn.datasets.make_biclusters(shape,n_clusters,noise=0.0,minval=10,maxval=100,shuffle=True,random_state=None)
sklearn.datasets.make_blobs(n_samples=100,n_features=2,centers=3,cluster_std=1.0,center_box=(-10.0,10.0),shuffle=True,random_state=None)
sklearn.datasets.make_checkerboard(shape,n_clusters,noise=0.0,minval=10,maxval=100,shuffle=True,random_state=None)
sklearn.datasets.make_circles(n_samples=100,shuffle=True,noise=None,random_state=None,factor=0.8)
sklearn.datasets.make_classification(n_samples=100,n_features=20,n_informative=2,n_redundant=2,n_repeated=0,n_classes=2,n_clusters_per_class=2,weights=None,flip_y=0.01,class_sep=1.0,hypercube=True,shift=0.0,scale=1.0,shuffle=True,random_state=None)
sklearn.datasets.make_friedman1(n_samples=100,n_features=10,noise=0.0,random_state=None)
sklearn.datasets.make_friedman2(n_samples=100,noise=0.0,random_state=None)
sklearn.datasets.make_friedman3(n_samples=100,noise=0.0,random_state=None)
sklearn.datasets.make_gaussian_quantiles(mean=None,cov=1.0,n_samples=100,n_features=2,n_classes=3,shuffle=True,random_state=None)
sklearn.datasets.make_hastie_10_2(n_samples=12000,random_state=None)
sklearn.datasets.make_low_rank_matrix(n_samples=100,n_features=100,effective_rank=10,tail_strength=0.5,random_state=None)
sklearn.datasets.make_moons(n_samples=100,shuffle=True,noise=None,random_state=None)
sklearn.datasets.make_multilabel_classification(n_samples=100,n_features=20,n_classes=5,n_labels=2,length=50,allow_unlabeled=True,return_indicator=False,random_state=None)
sklearn.datasets.make_regression(n_samples=100,n_features=100,n_informative=10,n_targets=1,bias=0.0,effective_rank=None,tail_strength=0.5,noise=0.0,shuffle=True,coef=False,random_state=None)
sklearn.datasets.make_s_curve(n_samples=100,noise=0.0,random_state=None)
sklearn.datasets.make_sparse_coded_signal(n_samples,n_components,n_features,n_nonzero_coefs,random_state=None)
sklearn.datasets.make_sparse_spd_matrix(dim=1,alpha=0.95,norm_diag=False,smallest_coef=0.1,largest_coef=0.9,random_state=None)
sklearn.datasets.make_sparse_uncorrelated(n_samples=100,n_features=10,random_state=None)
sklearn.datasets.make_spd_matrix(n_dim,random_state=None)
sklearn.datasets.make_swiss_roll(n_samples=100,noise=0.0,random_state=None)
sklearn.datasets.samples_generator._generate_hypercube(samples,dimensions,rng)
sklearn.datasets.samples_generator._shuffle(data,random_state=None)
sklearn.datasets.samples_generator.make_biclusters(shape,n_clusters,noise=0.0,minval=10,maxval=100,shuffle=True,random_state=None)
sklearn.datasets.samples_generator.make_blobs(n_samples=100,n_features=2,centers=3,cluster_std=1.0,center_box=(-10.0,10.0),shuffle=True,random_state=None)
sklearn.datasets.samples_generator.make_checkerboard(shape,n_clusters,noise=0.0,minval=10,maxval=100,shuffle=True,random_state=None)
sklearn.datasets.samples_generator.make_circles(n_samples=100,shuffle=True,noise=None,random_state=None,factor=0.8)
sklearn.datasets.samples_generator.make_classification(n_samples=100,n_features=20,n_informative=2,n_redundant=2,n_repeated=0,n_classes=2,n_clusters_per_class=2,weights=None,flip_y=0.01,class_sep=1.0,hypercube=True,shift=0.0,scale=1.0,shuffle=True,random_state=None)
sklearn.datasets.samples_generator.make_friedman1(n_samples=100,n_features=10,noise=0.0,random_state=None)
sklearn.datasets.samples_generator.make_friedman2(n_samples=100,noise=0.0,random_state=None)
sklearn.datasets.samples_generator.make_friedman3(n_samples=100,noise=0.0,random_state=None)
sklearn.datasets.samples_generator.make_gaussian_quantiles(mean=None,cov=1.0,n_samples=100,n_features=2,n_classes=3,shuffle=True,random_state=None)
sklearn.datasets.samples_generator.make_hastie_10_2(n_samples=12000,random_state=None)
sklearn.datasets.samples_generator.make_low_rank_matrix(n_samples=100,n_features=100,effective_rank=10,tail_strength=0.5,random_state=None)
sklearn.datasets.samples_generator.make_moons(n_samples=100,shuffle=True,noise=None,random_state=None)
sklearn.datasets.samples_generator.make_multilabel_classification(n_samples=100,n_features=20,n_classes=5,n_labels=2,length=50,allow_unlabeled=True,return_indicator=False,random_state=None)
sklearn.datasets.samples_generator.make_regression(n_samples=100,n_features=100,n_informative=10,n_targets=1,bias=0.0,effective_rank=None,tail_strength=0.5,noise=0.0,shuffle=True,coef=False,random_state=None)
sklearn.datasets.samples_generator.make_s_curve(n_samples=100,noise=0.0,random_state=None)
sklearn.datasets.samples_generator.make_sparse_coded_signal(n_samples,n_components,n_features,n_nonzero_coefs,random_state=None)
sklearn.datasets.samples_generator.make_sparse_spd_matrix(dim=1,alpha=0.95,norm_diag=False,smallest_coef=0.1,largest_coef=0.9,random_state=None)
sklearn.datasets.samples_generator.make_sparse_uncorrelated(n_samples=100,n_features=10,random_state=None)
sklearn.datasets.samples_generator.make_spd_matrix(n_dim,random_state=None)
sklearn.datasets.samples_generator.make_swiss_roll(n_samples=100,noise=0.0,random_state=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/datasets/olivetti_faces.py----------------------------------------
A:sklearn.datasets.olivetti_faces.data_home->get_data_home(data_home=data_home)
A:sklearn.datasets.olivetti_faces.fhandle->urlopen(DATA_URL)
A:sklearn.datasets.olivetti_faces.buf->BytesIO(fhandle.read())
A:sklearn.datasets.olivetti_faces.mfile->loadmat(buf)
A:sklearn.datasets.olivetti_faces.faces->faces.reshape((400, 64, 64)).transpose(0, 2, 1).reshape((400, 64, 64)).transpose(0, 2, 1)
A:sklearn.datasets.olivetti_faces.target->numpy.array([i // 10 for i in range(400)])
A:sklearn.datasets.olivetti_faces.random_state->check_random_state(random_state)
A:sklearn.datasets.olivetti_faces.order->check_random_state(random_state).permutation(len(faces))
sklearn.datasets.fetch_olivetti_faces(data_home=None,shuffle=False,random_state=0,download_if_missing=True)
sklearn.datasets.olivetti_faces.fetch_olivetti_faces(data_home=None,shuffle=False,random_state=0,download_if_missing=True)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/datasets/base.py----------------------------------------
A:sklearn.datasets.base.data_home->get_data_home(data_home)
A:sklearn.datasets.base.folder_path->join(container_path, folder)
A:sklearn.datasets.base.filenames->numpy.array(filenames)
A:sklearn.datasets.base.target->numpy.empty((n_samples,))
A:sklearn.datasets.base.random_state->check_random_state(random_state)
A:sklearn.datasets.base.indices->numpy.arange(filenames.shape[0])
A:sklearn.datasets.base.module_path->join(dirname(__file__), 'images')
A:sklearn.datasets.base.data_file->csv.reader(f)
A:sklearn.datasets.base.temp->next(data_file)
A:sklearn.datasets.base.n_samples->int(temp[0])
A:sklearn.datasets.base.n_features->int(temp[1])
A:sklearn.datasets.base.target_names->numpy.array(temp[2:])
A:sklearn.datasets.base.data->numpy.empty((n_samples, n_features))
A:sklearn.datasets.base.data[i]->numpy.asarray(d[:-1], dtype=np.float)
A:sklearn.datasets.base.target[i]->numpy.asarray(d[-1], dtype=np.float)
A:sklearn.datasets.base.fdescr->rst_file.read()
A:sklearn.datasets.base.descr->f.read()
A:sklearn.datasets.base.images->load_sample_images()
A:sklearn.datasets.base.base_dir->join(dirname(__file__), 'data/')
A:sklearn.datasets.base.data_exercise->numpy.loadtxt(base_dir + 'linnerud_exercise.csv', skiprows=1)
A:sklearn.datasets.base.data_physiological->numpy.loadtxt(base_dir + 'linnerud_physiological.csv', skiprows=1)
A:sklearn.datasets.base.header_exercise->f.readline().split()
A:sklearn.datasets.base.header_physiological->f.readline().split()
A:sklearn.datasets.base.fdescr_name->join(module_path, 'descr', 'boston_house_prices.rst')
A:sklearn.datasets.base.descr_text->f.read()
A:sklearn.datasets.base.data_file_name->join(module_path, 'data', 'boston_house_prices.csv')
A:sklearn.datasets.base.feature_names->numpy.array(temp)
sklearn.datasets.base.Bunch(self,**kwargs)
sklearn.datasets.base.Bunch.__init__(self,**kwargs)
sklearn.datasets.base.clear_data_home(data_home=None)
sklearn.datasets.base.get_data_home(data_home=None)
sklearn.datasets.base.load_boston()
sklearn.datasets.base.load_diabetes()
sklearn.datasets.base.load_digits(n_class=10)
sklearn.datasets.base.load_files(container_path,description=None,categories=None,load_content=True,shuffle=True,encoding=None,charset=None,charset_error=None,decode_error='strict',random_state=0)
sklearn.datasets.base.load_iris()
sklearn.datasets.base.load_linnerud()
sklearn.datasets.base.load_sample_image(image_name)
sklearn.datasets.base.load_sample_images()
sklearn.datasets.clear_data_home(data_home=None)
sklearn.datasets.get_data_home(data_home=None)
sklearn.datasets.load_boston()
sklearn.datasets.load_diabetes()
sklearn.datasets.load_digits(n_class=10)
sklearn.datasets.load_files(container_path,description=None,categories=None,load_content=True,shuffle=True,encoding=None,charset=None,charset_error=None,decode_error='strict',random_state=0)
sklearn.datasets.load_iris()
sklearn.datasets.load_linnerud()
sklearn.datasets.load_sample_image(image_name)
sklearn.datasets.load_sample_images()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/datasets/setup.py----------------------------------------
A:sklearn.datasets.setup.config->Configuration('datasets', parent_package, top_path)
sklearn.datasets.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/datasets/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/datasets/tests/test_base.py----------------------------------------
A:sklearn.datasets.tests.test_base.DATA_HOME->tempfile.mkdtemp(prefix='scikit_learn_data_home_test_')
A:sklearn.datasets.tests.test_base.LOAD_FILES_ROOT->tempfile.mkdtemp(prefix='scikit_learn_load_files_test_')
A:sklearn.datasets.tests.test_base.TEST_CATEGORY_DIR1->tempfile.mkdtemp(dir=LOAD_FILES_ROOT)
A:sklearn.datasets.tests.test_base.TEST_CATEGORY_DIR2->tempfile.mkdtemp(dir=LOAD_FILES_ROOT)
A:sklearn.datasets.tests.test_base.sample_file->tempfile.NamedTemporaryFile(dir=TEST_CATEGORY_DIR1, delete=False)
A:sklearn.datasets.tests.test_base.data_home->get_data_home(data_home=DATA_HOME)
A:sklearn.datasets.tests.test_base.res->load_boston()
A:sklearn.datasets.tests.test_base.category->os.path.abspath(TEST_CATEGORY_DIR1).split('/').pop()
A:sklearn.datasets.tests.test_base.digits->load_digits(9)
A:sklearn.datasets.tests.test_base.china->load_sample_image('china.jpg')
sklearn.datasets.tests.test_base._remove_dir(path)
sklearn.datasets.tests.test_base.setup_load_files()
sklearn.datasets.tests.test_base.teardown_load_files()
sklearn.datasets.tests.test_base.teardown_module()
sklearn.datasets.tests.test_base.test_data_home()
sklearn.datasets.tests.test_base.test_default_empty_load_files()
sklearn.datasets.tests.test_base.test_default_load_files()
sklearn.datasets.tests.test_base.test_load_boston()
sklearn.datasets.tests.test_base.test_load_diabetes()
sklearn.datasets.tests.test_base.test_load_digits()
sklearn.datasets.tests.test_base.test_load_digits_n_class_lt_10()
sklearn.datasets.tests.test_base.test_load_files_w_categories_desc_and_encoding()
sklearn.datasets.tests.test_base.test_load_files_wo_load_content()
sklearn.datasets.tests.test_base.test_load_iris()
sklearn.datasets.tests.test_base.test_load_linnerud()
sklearn.datasets.tests.test_base.test_load_missing_sample_image_error()
sklearn.datasets.tests.test_base.test_load_sample_image()
sklearn.datasets.tests.test_base.test_load_sample_images()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/datasets/tests/test_20news.py----------------------------------------
A:sklearn.datasets.tests.test_20news.data->sklearn.datasets.fetch_20newsgroups(subset='all', download_if_missing=False, shuffle=False)
A:sklearn.datasets.tests.test_20news.data2cats->sklearn.datasets.fetch_20newsgroups(subset='all', categories=data.target_names[-1:-3:-1], shuffle=False)
A:sklearn.datasets.tests.test_20news.label->sklearn.datasets.fetch_20newsgroups(subset='all', download_if_missing=False, shuffle=False).target_names.index(category)
A:sklearn.datasets.tests.test_20news.bunch->sklearn.datasets.fetch_20newsgroups_vectorized(subset='all')
sklearn.datasets.tests.test_20news.test_20news()
sklearn.datasets.tests.test_20news.test_20news_vectorized()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/datasets/tests/test_mldata.py----------------------------------------
A:sklearn.datasets.tests.test_mldata.tmpdir->tempfile.mkdtemp()
A:sklearn.datasets.tests.test_mldata.datasets.mldata.urlopen->mock_mldata_urlopen({dataname: ({'y': y, 'x': x, 'z': z}, ['z', 'x', 'y'])})
A:sklearn.datasets.tests.test_mldata.mock->fetch_mldata('mock', data_home=tmpdir)
A:sklearn.datasets.tests.test_mldata.x->scipy.arange(6).reshape(2, 3)
A:sklearn.datasets.tests.test_mldata.dset->fetch_mldata(dataname, target_name='y', data_name='z', data_home=tmpdir)
A:sklearn.datasets.tests.test_mldata.y->scipy.array([1, -1])
A:sklearn.datasets.tests.test_mldata.z->scipy.arange(12).reshape(4, 3)
sklearn.datasets.tests.test_mldata.setup_tmpdata()
sklearn.datasets.tests.test_mldata.teardown_tmpdata()
sklearn.datasets.tests.test_mldata.test_download()
sklearn.datasets.tests.test_mldata.test_fetch_multiple_column()
sklearn.datasets.tests.test_mldata.test_fetch_one_column()
sklearn.datasets.tests.test_mldata.test_mldata_filename()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/datasets/tests/test_samples_generator.py----------------------------------------
A:sklearn.datasets.tests.test_samples_generator.(X, y)->make_sparse_uncorrelated(n_samples=5, n_features=10, random_state=0)
A:sklearn.datasets.tests.test_samples_generator.make->partial(make_classification, class_sep=class_sep, n_redundant=0, n_repeated=0, flip_y=0, shift=0, scale=1, shuffle=False)
A:sklearn.datasets.tests.test_samples_generator.n_classes->len(weights)
A:sklearn.datasets.tests.test_samples_generator.signs->signs.view(dtype='|S{0}'.format(signs.strides[0])).view(dtype='|S{0}'.format(signs.strides[0]))
A:sklearn.datasets.tests.test_samples_generator.(unique_signs, cluster_index)->numpy.unique(signs, return_inverse=True)
A:sklearn.datasets.tests.test_samples_generator.clusters_by_class->defaultdict(set)
A:sklearn.datasets.tests.test_samples_generator.centroid->X[cluster_index == cluster].mean(axis=0)
A:sklearn.datasets.tests.test_samples_generator.(X, Y)->make_multilabel_classification(n_samples=25, n_features=20, n_classes=3, random_state=0, return_indicator=True, allow_unlabeled=allow_unlabeled)
A:sklearn.datasets.tests.test_samples_generator.(X, y, c)->make_regression(n_samples=100, n_features=10, n_informative=3, n_targets=3, coef=True, noise=1.0, random_state=0)
A:sklearn.datasets.tests.test_samples_generator.X->make_spd_matrix(n_dim=5, random_state=0)
A:sklearn.datasets.tests.test_samples_generator.(u, s, v)->svd(X)
A:sklearn.datasets.tests.test_samples_generator.(Y, D, X)->make_sparse_coded_signal(n_samples=5, n_components=8, n_features=10, n_nonzero_coefs=3, random_state=0)
A:sklearn.datasets.tests.test_samples_generator.(eigenvalues, _)->eig(X)
A:sklearn.datasets.tests.test_samples_generator.(X, t)->make_s_curve(n_samples=5, noise=0.0, random_state=0)
A:sklearn.datasets.tests.test_samples_generator.(X, rows, cols)->make_checkerboard(shape=(100, 100), n_clusters=2, shuffle=True, random_state=0)
A:sklearn.datasets.tests.test_samples_generator.(X2, _, _)->make_checkerboard(shape=(100, 100), n_clusters=2, shuffle=True, random_state=0)
A:sklearn.datasets.tests.test_samples_generator.(X1, _, _)->make_checkerboard(shape=(100, 100), n_clusters=2, shuffle=True, random_state=0)
sklearn.datasets.tests.test_samples_generator.test_make_biclusters()
sklearn.datasets.tests.test_samples_generator.test_make_blobs()
sklearn.datasets.tests.test_samples_generator.test_make_checkerboard()
sklearn.datasets.tests.test_samples_generator.test_make_classification()
sklearn.datasets.tests.test_samples_generator.test_make_classification_informative_features()
sklearn.datasets.tests.test_samples_generator.test_make_friedman1()
sklearn.datasets.tests.test_samples_generator.test_make_friedman2()
sklearn.datasets.tests.test_samples_generator.test_make_friedman3()
sklearn.datasets.tests.test_samples_generator.test_make_hastie_10_2()
sklearn.datasets.tests.test_samples_generator.test_make_low_rank_matrix()
sklearn.datasets.tests.test_samples_generator.test_make_multilabel_classification_return_indicator()
sklearn.datasets.tests.test_samples_generator.test_make_multilabel_classification_return_sequences()
sklearn.datasets.tests.test_samples_generator.test_make_regression()
sklearn.datasets.tests.test_samples_generator.test_make_regression_multitarget()
sklearn.datasets.tests.test_samples_generator.test_make_s_curve()
sklearn.datasets.tests.test_samples_generator.test_make_sparse_coded_signal()
sklearn.datasets.tests.test_samples_generator.test_make_sparse_uncorrelated()
sklearn.datasets.tests.test_samples_generator.test_make_spd_matrix()
sklearn.datasets.tests.test_samples_generator.test_make_swiss_roll()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/datasets/tests/test_lfw.py----------------------------------------
A:sklearn.datasets.tests.test_lfw.SCIKIT_LEARN_DATA->tempfile.mkdtemp(prefix='scikit_learn_lfw_test_')
A:sklearn.datasets.tests.test_lfw.SCIKIT_LEARN_EMPTY_DATA->tempfile.mkdtemp(prefix='scikit_learn_empty_test_')
A:sklearn.datasets.tests.test_lfw.LFW_HOME->os.path.join(SCIKIT_LEARN_DATA, 'lfw_home')
A:sklearn.datasets.tests.test_lfw.random_state->random.Random(42)
A:sklearn.datasets.tests.test_lfw.np_rng->numpy.random.RandomState(42)
A:sklearn.datasets.tests.test_lfw.folder_name->os.path.join(LFW_HOME, 'lfw_funneled', name)
A:sklearn.datasets.tests.test_lfw.n_faces->numpy.random.RandomState(42).randint(1, 5)
A:sklearn.datasets.tests.test_lfw.file_path->os.path.join(folder_name, name + '_%04d.jpg' % i)
A:sklearn.datasets.tests.test_lfw.uniface->numpy.random.RandomState(42).randint(0, 255, size=(250, 250, 3))
A:sklearn.datasets.tests.test_lfw.name->random.Random(42).choice(more_than_two)
A:sklearn.datasets.tests.test_lfw.(first, second)->random.Random(42).sample(range(counts[name]), 2)
A:sklearn.datasets.tests.test_lfw.(first_name, second_name)->random.Random(42).sample(FAKE_NAMES, 2)
A:sklearn.datasets.tests.test_lfw.first_index->random.Random(42).choice(np.arange(counts[first_name]))
A:sklearn.datasets.tests.test_lfw.second_index->random.Random(42).choice(np.arange(counts[second_name]))
A:sklearn.datasets.tests.test_lfw.lfw_people->load_lfw_people(data_home=SCIKIT_LEARN_DATA, resize=None, slice_=None, color=True)
A:sklearn.datasets.tests.test_lfw.lfw_pairs_train->load_lfw_pairs(data_home=SCIKIT_LEARN_DATA, resize=None, slice_=None, color=True)
sklearn.datasets.tests.test_lfw.setup_module()
sklearn.datasets.tests.test_lfw.teardown_module()
sklearn.datasets.tests.test_lfw.test_load_empty_lfw_pairs()
sklearn.datasets.tests.test_lfw.test_load_empty_lfw_people()
sklearn.datasets.tests.test_lfw.test_load_fake_lfw_pairs()
sklearn.datasets.tests.test_lfw.test_load_fake_lfw_people()
sklearn.datasets.tests.test_lfw.test_load_fake_lfw_people_too_restrictive()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/datasets/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/datasets/tests/test_covtype.py----------------------------------------
A:sklearn.datasets.tests.test_covtype.data1->fetch(shuffle=True, random_state=42)
A:sklearn.datasets.tests.test_covtype.data2->fetch(shuffle=True, random_state=37)
sklearn.datasets.tests.test_covtype.fetch(*args,**kwargs)
sklearn.datasets.tests.test_covtype.test_fetch()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/datasets/tests/test_svmlight_format.py----------------------------------------
A:sklearn.datasets.tests.test_svmlight_format.currdir->os.path.dirname(os.path.abspath(__file__))
A:sklearn.datasets.tests.test_svmlight_format.datafile->os.path.join(currdir, 'data', 'svmlight_classification.txt')
A:sklearn.datasets.tests.test_svmlight_format.multifile->os.path.join(currdir, 'data', 'svmlight_multilabel.txt')
A:sklearn.datasets.tests.test_svmlight_format.invalidfile->os.path.join(currdir, 'data', 'svmlight_invalid.txt')
A:sklearn.datasets.tests.test_svmlight_format.invalidfile2->os.path.join(currdir, 'data', 'svmlight_invalid_order.txt')
A:sklearn.datasets.tests.test_svmlight_format.(X, y)->load_svmlight_file(datafile)
A:sklearn.datasets.tests.test_svmlight_format.(X1, y1)->load_svmlight_file(datafile)
A:sklearn.datasets.tests.test_svmlight_format.fd->os.open(datafile, os.O_RDONLY)
A:sklearn.datasets.tests.test_svmlight_format.(X2, y2)->load_svmlight_file(f, zero_based=False)
A:sklearn.datasets.tests.test_svmlight_format.(X_train, y_train, X_test, y_test)->load_svmlight_files([datafile] * 2, dtype=np.float32)
A:sklearn.datasets.tests.test_svmlight_format.(X1, y1, X2, y2, X3, y3)->load_svmlight_files([datafile] * 3, dtype=np.float64)
A:sklearn.datasets.tests.test_svmlight_format.(Xgz, ygz)->load_svmlight_file(tmp.name)
A:sklearn.datasets.tests.test_svmlight_format.(Xbz, ybz)->load_svmlight_file(tmp.name)
A:sklearn.datasets.tests.test_svmlight_format.f->BytesIO()
A:sklearn.datasets.tests.test_svmlight_format.data1->b('-1 1:1 2:2 3:3\n')
A:sklearn.datasets.tests.test_svmlight_format.data2->b('-1 0:0 1:1\n')
A:sklearn.datasets.tests.test_svmlight_format.f1->BytesIO(data1)
A:sklearn.datasets.tests.test_svmlight_format.f2->BytesIO(data2)
A:sklearn.datasets.tests.test_svmlight_format.(X1, y1, X2, y2)->load_svmlight_files([f1, f2], zero_based='auto')
A:sklearn.datasets.tests.test_svmlight_format.data->b('\n    3 qid:1 1:0.53 2:0.12\n    2 qid:1 1:0.13 2:0.1\n    7 qid:2 1:0.87 2:0.12')
A:sklearn.datasets.tests.test_svmlight_format.res1->load_svmlight_files([BytesIO(data)], query_id=True)
A:sklearn.datasets.tests.test_svmlight_format.res2->load_svmlight_file(BytesIO(data), query_id=True)
A:sklearn.datasets.tests.test_svmlight_format.(Xs, y)->load_svmlight_file(datafile)
A:sklearn.datasets.tests.test_svmlight_format.Xd->Xs.toarray()
A:sklearn.datasets.tests.test_svmlight_format.comment->str(comment, 'utf-8')
A:sklearn.datasets.tests.test_svmlight_format.X->X.toarray().toarray()
A:sklearn.datasets.tests.test_svmlight_format.utf8_comment->b('It is true that\nÂ½Â² = Â¼')
A:sklearn.datasets.tests.test_svmlight_format.unicode_comment->b('It is true that\nÂ½Â² = Â¼').decode('utf-8')
A:sklearn.datasets.tests.test_svmlight_format.(X1, y1, query_id1)->load_svmlight_file(f, query_id=True, zero_based=True)
sklearn.datasets.tests.test_svmlight_format.test_dump()
sklearn.datasets.tests.test_svmlight_format.test_dump_comment()
sklearn.datasets.tests.test_svmlight_format.test_dump_concise()
sklearn.datasets.tests.test_svmlight_format.test_dump_invalid()
sklearn.datasets.tests.test_svmlight_format.test_dump_query_id()
sklearn.datasets.tests.test_svmlight_format.test_invalid_filename()
sklearn.datasets.tests.test_svmlight_format.test_load_compressed()
sklearn.datasets.tests.test_svmlight_format.test_load_invalid_file()
sklearn.datasets.tests.test_svmlight_format.test_load_invalid_file2()
sklearn.datasets.tests.test_svmlight_format.test_load_invalid_order_file()
sklearn.datasets.tests.test_svmlight_format.test_load_svmlight_file()
sklearn.datasets.tests.test_svmlight_format.test_load_svmlight_file_fd()
sklearn.datasets.tests.test_svmlight_format.test_load_svmlight_file_multilabel()
sklearn.datasets.tests.test_svmlight_format.test_load_svmlight_file_n_features()
sklearn.datasets.tests.test_svmlight_format.test_load_svmlight_files()
sklearn.datasets.tests.test_svmlight_format.test_load_with_qid()
sklearn.datasets.tests.test_svmlight_format.test_load_zero_based()
sklearn.datasets.tests.test_svmlight_format.test_load_zero_based_auto()
sklearn.datasets.tests.test_svmlight_format.test_not_a_filename()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/semi_supervised/label_propagation.py----------------------------------------
A:sklearn.semi_supervised.label_propagation.self.nn_fit->NearestNeighbors(self.n_neighbors).fit(X)
A:sklearn.semi_supervised.label_propagation.probas->self.predict_proba(X)
A:sklearn.semi_supervised.label_propagation.X_2d->numpy.atleast_2d(X)
A:sklearn.semi_supervised.label_propagation.weight_matrices->self._get_kernel(self.X_, X_2d)
A:sklearn.semi_supervised.label_propagation.ine->numpy.sum(self.label_distributions_[weight_matrix], axis=0)
A:sklearn.semi_supervised.label_propagation.probabilities->numpy.dot(weight_matrices, self.label_distributions_)
A:sklearn.semi_supervised.label_propagation.(X, y)->check_arrays(X, y)
A:sklearn.semi_supervised.label_propagation.graph_matrix->graph_matrix.tocsr().tocsr()
A:sklearn.semi_supervised.label_propagation.classes->numpy.unique(y)
A:sklearn.semi_supervised.label_propagation.y->numpy.asarray(y)
A:sklearn.semi_supervised.label_propagation.clamp_weights->numpy.ones((n_samples, 1))
A:sklearn.semi_supervised.label_propagation.self.label_distributions_->safe_sparse_dot(graph_matrix, self.label_distributions_)
A:sklearn.semi_supervised.label_propagation.y_static->numpy.copy(self.label_distributions_)
A:sklearn.semi_supervised.label_propagation.l_previous->numpy.zeros((self.X_.shape[0], n_classes))
A:sklearn.semi_supervised.label_propagation.self.transduction_->transduction.ravel()
A:sklearn.semi_supervised.label_propagation.affinity_matrix->self._get_kernel(self.X_)
A:sklearn.semi_supervised.label_propagation.normalizer->self._get_kernel(self.X_).sum(axis=0)
A:sklearn.semi_supervised.label_propagation.laplacian->graph_laplacian(affinity_matrix, normed=True)
sklearn.semi_supervised.LabelPropagation(BaseLabelPropagation)
sklearn.semi_supervised.LabelPropagation._build_graph(self)
sklearn.semi_supervised.LabelSpreading(self,kernel='rbf',gamma=20,n_neighbors=7,alpha=0.2,max_iter=30,tol=0.001)
sklearn.semi_supervised.LabelSpreading._build_graph(self)
sklearn.semi_supervised.label_propagation.BaseLabelPropagation(self,kernel='rbf',gamma=20,n_neighbors=7,alpha=1,max_iter=30,tol=0.001)
sklearn.semi_supervised.label_propagation.BaseLabelPropagation.__init__(self,kernel='rbf',gamma=20,n_neighbors=7,alpha=1,max_iter=30,tol=0.001)
sklearn.semi_supervised.label_propagation.BaseLabelPropagation._build_graph(self)
sklearn.semi_supervised.label_propagation.BaseLabelPropagation._get_kernel(self,X,y=None)
sklearn.semi_supervised.label_propagation.BaseLabelPropagation.fit(self,X,y)
sklearn.semi_supervised.label_propagation.BaseLabelPropagation.predict(self,X)
sklearn.semi_supervised.label_propagation.BaseLabelPropagation.predict_proba(self,X)
sklearn.semi_supervised.label_propagation.LabelPropagation(BaseLabelPropagation)
sklearn.semi_supervised.label_propagation.LabelPropagation._build_graph(self)
sklearn.semi_supervised.label_propagation.LabelSpreading(self,kernel='rbf',gamma=20,n_neighbors=7,alpha=0.2,max_iter=30,tol=0.001)
sklearn.semi_supervised.label_propagation.LabelSpreading.__init__(self,kernel='rbf',gamma=20,n_neighbors=7,alpha=0.2,max_iter=30,tol=0.001)
sklearn.semi_supervised.label_propagation.LabelSpreading._build_graph(self)
sklearn.semi_supervised.label_propagation._not_converged(y_truth,y_prediction,tol=0.001)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/semi_supervised/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/six.py----------------------------------------
A:sklearn.externals.six.MAXSIZE->int((1 << 63) - 1)
A:sklearn.externals.six.result->self._resolve()
A:sklearn.externals.six.module->_import_module(self.mod)
A:sklearn.externals.six.movessys.modules[__name__ + '.moves']->_MovedItems(__name__ + '.moves')
A:sklearn.externals.six.sys.modules[__name__ + '.moves.urllib_parse']->Module_six_moves_urllib_parse(__name__ + '.moves.urllib_parse')
A:sklearn.externals.six.sys.modules[__name__ + '.moves.urllib.parse']->Module_six_moves_urllib_parse(__name__ + '.moves.urllib.parse')
A:sklearn.externals.six.sys.modules[__name__ + '.moves.urllib_error']->Module_six_moves_urllib_error(__name__ + '.moves.urllib_error')
A:sklearn.externals.six.sys.modules[__name__ + '.moves.urllib.error']->Module_six_moves_urllib_error(__name__ + '.moves.urllib.error')
A:sklearn.externals.six.sys.modules[__name__ + '.moves.urllib_request']->Module_six_moves_urllib_request(__name__ + '.moves.urllib_request')
A:sklearn.externals.six.sys.modules[__name__ + '.moves.urllib.request']->Module_six_moves_urllib_request(__name__ + '.moves.urllib.request')
A:sklearn.externals.six.sys.modules[__name__ + '.moves.urllib_response']->Module_six_moves_urllib_response(__name__ + '.moves.urllib_response')
A:sklearn.externals.six.sys.modules[__name__ + '.moves.urllib.response']->Module_six_moves_urllib_response(__name__ + '.moves.urllib.response')
A:sklearn.externals.six.sys.modules[__name__ + '.moves.urllib_robotparser']->Module_six_moves_urllib_robotparser(__name__ + '.moves.urllib_robotparser')
A:sklearn.externals.six.sys.modules[__name__ + '.moves.urllib.robotparser']->Module_six_moves_urllib_robotparser(__name__ + '.moves.urllib.robotparser')
A:sklearn.externals.six.sys.modules[__name__ + '.moves.urllib']->Module_six_moves_urllib(__name__ + '.moves.urllib')
A:sklearn.externals.six.get_method_function->operator.attrgetter(_meth_func)
A:sklearn.externals.six.get_method_self->operator.attrgetter(_meth_self)
A:sklearn.externals.six.get_function_closure->operator.attrgetter(_func_closure)
A:sklearn.externals.six.get_function_code->operator.attrgetter(_func_code)
A:sklearn.externals.six.get_function_defaults->operator.attrgetter(_func_defaults)
A:sklearn.externals.six.get_function_globals->operator.attrgetter(_func_globals)
A:sklearn.externals.six.int2byte->operator.methodcaller('to_bytes', 1, 'big')
A:sklearn.externals.six.byte2int->operator.itemgetter(0)
A:sklearn.externals.six.exec_->getattr(builtins, 'exec')
A:sklearn.externals.six.print_->getattr(builtins, 'print')
A:sklearn.externals.six.frame->sys._getframe(1)
A:sklearn.externals.six.fp->kwargs.pop('file', sys.stdout)
A:sklearn.externals.six.data->str(data)
A:sklearn.externals.six.sep->kwargs.pop('sep', None)
A:sklearn.externals.six.end->kwargs.pop('end', None)
A:sklearn.externals.six.newline->unicode('\n')
A:sklearn.externals.six.space->unicode(' ')
A:sklearn.externals.six.orig_vars->cls.__dict__.copy()
sklearn.externals.six.Module_six_moves_urllib(types.ModuleType)
sklearn.externals.six.Module_six_moves_urllib_error(types.ModuleType)
sklearn.externals.six.Module_six_moves_urllib_parse(types.ModuleType)
sklearn.externals.six.Module_six_moves_urllib_request(types.ModuleType)
sklearn.externals.six.Module_six_moves_urllib_response(types.ModuleType)
sklearn.externals.six.Module_six_moves_urllib_robotparser(types.ModuleType)
sklearn.externals.six.MovedAttribute(self,name,old_mod,new_mod,old_attr=None,new_attr=None)
sklearn.externals.six.MovedAttribute.__init__(self,name,old_mod,new_mod,old_attr=None,new_attr=None)
sklearn.externals.six.MovedAttribute._resolve(self)
sklearn.externals.six.MovedModule(self,name,old,new=None)
sklearn.externals.six.MovedModule.__init__(self,name,old,new=None)
sklearn.externals.six.MovedModule._resolve(self)
sklearn.externals.six._LazyDescr(self,name)
sklearn.externals.six._LazyDescr.__get__(self,obj,tp)
sklearn.externals.six._LazyDescr.__init__(self,name)
sklearn.externals.six._MovedItems(types.ModuleType)
sklearn.externals.six._add_doc(func,doc)
sklearn.externals.six._import_module(name)
sklearn.externals.six.add_metaclass(metaclass)
sklearn.externals.six.add_move(move)
sklearn.externals.six.iteritems(d,**kw)
sklearn.externals.six.iterkeys(d,**kw)
sklearn.externals.six.iterlists(d,**kw)
sklearn.externals.six.itervalues(d,**kw)
sklearn.externals.six.remove_move(name)
sklearn.externals.six.with_metaclass(meta,*bases)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/setup.py----------------------------------------
A:sklearn.externals.setup.config->Configuration('externals', parent_package, top_path)
sklearn.externals.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/test_externals_setup.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/func_inspect.py----------------------------------------
A:sklearn.externals.joblib.func_inspect.source_code->''.join(inspect.getsourcelines(func)[0])
A:sklearn.externals.joblib.func_inspect.(source_file, line_no)->re.match('\\<doctest (.*\\.rst)\\[(.*)\\]\\>', source_file).groups()
A:sklearn.externals.joblib.func_inspect.line_no->int(line_no)
A:sklearn.externals.joblib.func_inspect.source_lines->list(islice(source_file_obj, first_line - 1, None))
A:sklearn.externals.joblib.func_inspect.string->string.replace(char, quote(char)).replace(char, quote(char))
A:sklearn.externals.joblib.func_inspect.module->module.split('.').split('.')
A:sklearn.externals.joblib.func_inspect.filename->'-'.join(parts)
A:sklearn.externals.joblib.func_inspect.parts->'-'.join(parts).split(os.sep)
A:sklearn.externals.joblib.func_inspect.name->_clean_win_chars(name)
A:sklearn.externals.joblib.func_inspect.args->list(args)
A:sklearn.externals.joblib.func_inspect.arg_spec->inspect.getargspec(func)
A:sklearn.externals.joblib.func_inspect.(_, name)->get_func_name(func, resolv_alias=False)
A:sklearn.externals.joblib.func_inspect.arg_dict->dict()
A:sklearn.externals.joblib.func_inspect.arg_dict[arg_name]->kwargs.pop(arg_name)
A:sklearn.externals.joblib.func_inspect.varkwargs->dict()
A:sklearn.externals.joblib.func_inspect.(module, name)->get_func_name(func)
A:sklearn.externals.joblib.func_inspect.module_path->'.'.join(module)
A:sklearn.externals.joblib.func_inspect.arg_str->', '.join(arg_str)
A:sklearn.externals.joblib.func_inspect.arg->pformat(arg, indent=2)
A:sklearn.externals.joblib.func_inspect.previous_length->len(arg)
A:sklearn.externals.joblib.func_inspect.(path, signature)->format_signature(func, *args, **kwargs)
sklearn.externals.joblib.func_inspect._clean_win_chars(string)
sklearn.externals.joblib.func_inspect.filter_args(func,ignore_lst,args=(),kwargs=dict())
sklearn.externals.joblib.func_inspect.format_call(func,args,kwargs,object_name='Memory')
sklearn.externals.joblib.func_inspect.format_signature(func,*args,**kwargs)
sklearn.externals.joblib.func_inspect.get_func_code(func)
sklearn.externals.joblib.func_inspect.get_func_name(func,resolv_alias=True,win_characters=True)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/pool.py----------------------------------------
A:sklearn.externals.joblib.pool.b->getattr(a, 'base', None)
A:sklearn.externals.joblib.pool.base->numpy.memmap(filename, dtype=dtype, shape=total_buffer_len, mode=mode, offset=offset, order=order)
A:sklearn.externals.joblib.pool.(a_start, a_end)->numpy.byte_bounds(a)
A:sklearn.externals.joblib.pool.m->_get_backing_memmap(a)
A:sklearn.externals.joblib.pool.self.verbose->int(verbose)
A:sklearn.externals.joblib.pool.marker->hash(a)
A:sklearn.externals.joblib.pool.filename->os.path.join(self._temp_folder, basename)
A:sklearn.externals.joblib.pool.self.dispatch->pickle._Pickler.dispatch.copy()
A:sklearn.externals.joblib.pool.reduced->reduce_func(obj)
A:sklearn.externals.joblib.pool.(self._reader, self._writer)->getattr(self, '_ctx', mp).Pipe(duplex=False)
A:sklearn.externals.joblib.pool.self._rlock->getattr(self, '_ctx', mp).Lock()
A:sklearn.externals.joblib.pool.self._wlock->getattr(self, '_ctx', mp).Lock()
A:sklearn.externals.joblib.pool.buffer->BytesIO()
A:sklearn.externals.joblib.pool.forward_reducers->dict()
A:sklearn.externals.joblib.pool.backward_reducers->dict()
A:sklearn.externals.joblib.pool.poolargs->dict(processes=processes, forward_reducers=forward_reducers, backward_reducers=backward_reducers)
A:sklearn.externals.joblib.pool.context->getattr(self, '_ctx', mp)
A:sklearn.externals.joblib.pool.self._inqueue->CustomizablePicklingQueue(context, self._forward_reducers)
A:sklearn.externals.joblib.pool.self._outqueue->CustomizablePicklingQueue(context, self._backward_reducers)
A:sklearn.externals.joblib.pool.temp_folder->os.path.abspath(os.path.expanduser(temp_folder))
A:sklearn.externals.joblib.pool.pool_folder->os.path.join(temp_folder, pool_folder_name)
A:sklearn.externals.joblib.pool.forward_reduce_ndarray->ArrayMemmapReducer(max_nbytes, pool_folder, mmap_mode, verbose, context_id=context_id, prewarm=prewarm)
A:sklearn.externals.joblib.pool.backward_reduce_ndarray->ArrayMemmapReducer(None, pool_folder, mmap_mode, verbose)
sklearn.externals.joblib.pool.ArrayMemmapReducer(self,max_nbytes,temp_folder,mmap_mode,verbose=0,context_id=None,prewarm=True)
sklearn.externals.joblib.pool.ArrayMemmapReducer.__init__(self,max_nbytes,temp_folder,mmap_mode,verbose=0,context_id=None,prewarm=True)
sklearn.externals.joblib.pool.CustomizablePickler(self,writer,reducers=None,protocol=HIGHEST_PROTOCOL)
sklearn.externals.joblib.pool.CustomizablePickler.__init__(self,writer,reducers=None,protocol=HIGHEST_PROTOCOL)
sklearn.externals.joblib.pool.CustomizablePickler.register(self,type,reduce_func)
sklearn.externals.joblib.pool.CustomizablePicklingQueue(self,context,reducers=None)
sklearn.externals.joblib.pool.CustomizablePicklingQueue.__getstate__(self)
sklearn.externals.joblib.pool.CustomizablePicklingQueue.__init__(self,context,reducers=None)
sklearn.externals.joblib.pool.CustomizablePicklingQueue.__setstate__(self,state)
sklearn.externals.joblib.pool.CustomizablePicklingQueue._make_methods(self)
sklearn.externals.joblib.pool.CustomizablePicklingQueue.empty(self)
sklearn.externals.joblib.pool.MemmapingPool(self,processes=None,temp_folder=None,max_nbytes=1000000.0,mmap_mode='r',forward_reducers=None,backward_reducers=None,verbose=0,context_id=None,prewarm=False,**kwargs)
sklearn.externals.joblib.pool.MemmapingPool.__init__(self,processes=None,temp_folder=None,max_nbytes=1000000.0,mmap_mode='r',forward_reducers=None,backward_reducers=None,verbose=0,context_id=None,prewarm=False,**kwargs)
sklearn.externals.joblib.pool.MemmapingPool.terminate(self)
sklearn.externals.joblib.pool.PicklingPool(self,processes=None,forward_reducers=None,backward_reducers=None,**kwargs)
sklearn.externals.joblib.pool.PicklingPool.__init__(self,processes=None,forward_reducers=None,backward_reducers=None,**kwargs)
sklearn.externals.joblib.pool.PicklingPool._setup_queues(self)
sklearn.externals.joblib.pool._get_backing_memmap(a)
sklearn.externals.joblib.pool._reduce_memmap_backed(a,m)
sklearn.externals.joblib.pool._strided_from_memmap(filename,dtype,mode,offset,order,shape,strides,total_buffer_len)
sklearn.externals.joblib.pool.delete_folder(folder_path)
sklearn.externals.joblib.pool.has_shareable_memory(a)
sklearn.externals.joblib.pool.reduce_memmap(a)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/testing.py----------------------------------------
sklearn.externals.joblib.testing.warnings_to_stdout()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/my_exceptions.py----------------------------------------
A:sklearn.externals.joblib.my_exceptions._exception_mapping->dict()
A:sklearn.externals.joblib.my_exceptions.this_exception->type(this_name, (exception, JoblibException), dict(__repr__=JoblibException.__repr__, __str__=JoblibException.__str__))
A:sklearn.externals.joblib.my_exceptions.namespace->dict()
A:sklearn.externals.joblib.my_exceptions.common_exceptions->dir(_builtin_exceptions)
A:sklearn.externals.joblib.my_exceptions.obj->getattr(_builtin_exceptions, name)
A:sklearn.externals.joblib.my_exceptions.(this_obj, this_name)->_mk_exception(obj, name=name)
sklearn.externals.joblib.my_exceptions.JoblibException(self,*args)
sklearn.externals.joblib.my_exceptions.JoblibException.__init__(self,*args)
sklearn.externals.joblib.my_exceptions.JoblibException.__reduce__(self)
sklearn.externals.joblib.my_exceptions.JoblibException.__repr__(self)
sklearn.externals.joblib.my_exceptions.TransportableException(self,message,etype)
sklearn.externals.joblib.my_exceptions.TransportableException.__init__(self,message,etype)
sklearn.externals.joblib.my_exceptions.TransportableException.__reduce__(self)
sklearn.externals.joblib.my_exceptions._mk_common_exceptions()
sklearn.externals.joblib.my_exceptions._mk_exception(exception,name=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/memory.py----------------------------------------
A:sklearn.externals.joblib.memory.func_code->'\n'.join(func_code[1:])
A:sklearn.externals.joblib.memory.first_line->int(func_code[0][len(FIRST_LINE_TEXT):])
A:sklearn.externals.joblib.memory.(modules, funcname)->get_func_name(func)
A:sklearn.externals.joblib.memory.args->', '.join(['%s=%s' % (name, value) for (name, value) in metadata['input_args'].items()])
A:sklearn.externals.joblib.memory.signature->os.path.basename(func_name)
A:sklearn.externals.joblib.memory.filename->os.path.join(dir, 'output.pkl')
A:sklearn.externals.joblib.memory._FUNCTION_HASHES->weakref.WeakKeyDictionary()
A:sklearn.externals.joblib.memory.self.func->_get_func_fullname(func)
A:sklearn.externals.joblib.memory.self._output_dir->_cache_key_to_dir(cachedir, self.func, argument_hash)
A:sklearn.externals.joblib.memory.self.metadata->json.load(f)
A:sklearn.externals.joblib.memory.self.duration->self.metadata.get('duration', None)
A:sklearn.externals.joblib.memory.timestamp->time.time()
A:sklearn.externals.joblib.memory.doc->re.sub('\x08.', '', doc)
A:sklearn.externals.joblib.memory.(output_dir, argument_hash)->self._get_output_dir(*args, **kwargs)
A:sklearn.externals.joblib.memory.(_, name)->get_func_name(self.func)
A:sklearn.externals.joblib.memory.(out, metadata)->self.call(*args, **kwargs)
A:sklearn.externals.joblib.memory.out->_load_output(output_dir, _get_func_fullname(self.func), timestamp=self.timestamp, metadata=metadata, mmap_mode=self.mmap_mode, verbose=self._verbose)
A:sklearn.externals.joblib.memory.t0->time.time()
A:sklearn.externals.joblib.memory.(_, argument_hash, metadata)->self._cached_call(args, kwargs)
A:sklearn.externals.joblib.memory.argument_hash->self._get_argument_hash(*args, **kwargs)
A:sklearn.externals.joblib.memory.output_dir->os.path.join(self._get_func_dir(self.func), argument_hash)
A:sklearn.externals.joblib.memory.func_dir->self._get_func_dir(mkdir=False)
A:sklearn.externals.joblib.memory.func_code_h->hash(getattr(self.func, '__code__', None))
A:sklearn.externals.joblib.memory.func_hash->self._hash_func()
A:sklearn.externals.joblib.memory.(func_code, source_file, first_line)->get_func_code(self.func)
A:sklearn.externals.joblib.memory.func_code_file->os.path.join(func_dir, 'func_code.py')
A:sklearn.externals.joblib.memory.(old_func_code, old_first_line)->extract_first_line(infile.read())
A:sklearn.externals.joblib.memory.(_, func_name)->get_func_name(self.func, resolv_alias=False)
A:sklearn.externals.joblib.memory.num_lines->len(func_code.split('\n'))
A:sklearn.externals.joblib.memory.on_disk_func_code->''.join(on_disk_func_code)
A:sklearn.externals.joblib.memory.possible_collision->source_file.startswith('<doctest ')
A:sklearn.externals.joblib.memory.(func_code, _, first_line)->get_func_code(self.func)
A:sklearn.externals.joblib.memory.start_time->time.time()
A:sklearn.externals.joblib.memory.(output_dir, _)->self._get_output_dir(*args, **kwargs)
A:sklearn.externals.joblib.memory.output->self.func(*args, **kwargs)
A:sklearn.externals.joblib.memory.metadata->self._persist_input(output_dir, duration, args, kwargs)
A:sklearn.externals.joblib.memory.argument_dict->filter_args(self.func, self.ignore, args, kwargs)
A:sklearn.externals.joblib.memory.input_repr->dict(((k, repr(v)) for (k, v) in argument_dict.items()))
A:sklearn.externals.joblib.memory.self.timestamp->time.time()
A:sklearn.externals.joblib.memory.self.cachedir->os.path.join(cachedir, 'joblib')
sklearn.externals.joblib.MemorizedResult(self,cachedir,func,argument_hash,mmap_mode=None,verbose=0,timestamp=None,metadata=None)
sklearn.externals.joblib.MemorizedResult.__reduce__(self)
sklearn.externals.joblib.MemorizedResult.__repr__(self)
sklearn.externals.joblib.MemorizedResult.clear(self)
sklearn.externals.joblib.MemorizedResult.get(self)
sklearn.externals.joblib.Memory(self,cachedir,mmap_mode=None,compress=False,verbose=1)
sklearn.externals.joblib.Memory.__reduce__(self)
sklearn.externals.joblib.Memory.__repr__(self)
sklearn.externals.joblib.Memory.cache(self,func=None,ignore=None,verbose=None,mmap_mode=False)
sklearn.externals.joblib.Memory.clear(self,warn=True)
sklearn.externals.joblib.Memory.eval(self,func,*args,**kwargs)
sklearn.externals.joblib.memory.JobLibCollisionWarning(UserWarning)
sklearn.externals.joblib.memory.MemorizedFunc(self,func,cachedir,ignore=None,mmap_mode=None,compress=False,verbose=1,timestamp=None)
sklearn.externals.joblib.memory.MemorizedFunc.__init__(self,func,cachedir,ignore=None,mmap_mode=None,compress=False,verbose=1,timestamp=None)
sklearn.externals.joblib.memory.MemorizedFunc.__reduce__(self)
sklearn.externals.joblib.memory.MemorizedFunc.__repr__(self)
sklearn.externals.joblib.memory.MemorizedFunc._cached_call(self,args,kwargs)
sklearn.externals.joblib.memory.MemorizedFunc._check_previous_func_code(self,stacklevel=2)
sklearn.externals.joblib.memory.MemorizedFunc._get_argument_hash(self,*args,**kwargs)
sklearn.externals.joblib.memory.MemorizedFunc._get_func_dir(self,mkdir=True)
sklearn.externals.joblib.memory.MemorizedFunc._get_output_dir(self,*args,**kwargs)
sklearn.externals.joblib.memory.MemorizedFunc._hash_func(self)
sklearn.externals.joblib.memory.MemorizedFunc._persist_input(self,output_dir,duration,args,kwargs,this_duration_limit=0.5)
sklearn.externals.joblib.memory.MemorizedFunc._persist_output(self,output,dir)
sklearn.externals.joblib.memory.MemorizedFunc._write_func_code(self,filename,func_code,first_line)
sklearn.externals.joblib.memory.MemorizedFunc.call(self,*args,**kwargs)
sklearn.externals.joblib.memory.MemorizedFunc.call_and_shelve(self,*args,**kwargs)
sklearn.externals.joblib.memory.MemorizedFunc.clear(self,warn=True)
sklearn.externals.joblib.memory.MemorizedFunc.format_call(self,*args,**kwargs)
sklearn.externals.joblib.memory.MemorizedFunc.format_signature(self,*args,**kwargs)
sklearn.externals.joblib.memory.MemorizedFunc.load_output(self,output_dir)
sklearn.externals.joblib.memory.MemorizedResult(self,cachedir,func,argument_hash,mmap_mode=None,verbose=0,timestamp=None,metadata=None)
sklearn.externals.joblib.memory.MemorizedResult.__init__(self,cachedir,func,argument_hash,mmap_mode=None,verbose=0,timestamp=None,metadata=None)
sklearn.externals.joblib.memory.MemorizedResult.__reduce__(self)
sklearn.externals.joblib.memory.MemorizedResult.__repr__(self)
sklearn.externals.joblib.memory.MemorizedResult.clear(self)
sklearn.externals.joblib.memory.MemorizedResult.get(self)
sklearn.externals.joblib.memory.Memory(self,cachedir,mmap_mode=None,compress=False,verbose=1)
sklearn.externals.joblib.memory.Memory.__init__(self,cachedir,mmap_mode=None,compress=False,verbose=1)
sklearn.externals.joblib.memory.Memory.__reduce__(self)
sklearn.externals.joblib.memory.Memory.__repr__(self)
sklearn.externals.joblib.memory.Memory.cache(self,func=None,ignore=None,verbose=None,mmap_mode=False)
sklearn.externals.joblib.memory.Memory.clear(self,warn=True)
sklearn.externals.joblib.memory.Memory.eval(self,func,*args,**kwargs)
sklearn.externals.joblib.memory.NotMemorizedFunc(self,func)
sklearn.externals.joblib.memory.NotMemorizedFunc.__init__(self,func)
sklearn.externals.joblib.memory.NotMemorizedFunc.__reduce__(self)
sklearn.externals.joblib.memory.NotMemorizedFunc.__repr__(self)
sklearn.externals.joblib.memory.NotMemorizedFunc.call_and_shelve(self,*args,**kwargs)
sklearn.externals.joblib.memory.NotMemorizedFunc.clear(self,warn=True)
sklearn.externals.joblib.memory.NotMemorizedResult(self,value)
sklearn.externals.joblib.memory.NotMemorizedResult.__getstate__(self)
sklearn.externals.joblib.memory.NotMemorizedResult.__init__(self,value)
sklearn.externals.joblib.memory.NotMemorizedResult.__repr__(self)
sklearn.externals.joblib.memory.NotMemorizedResult.__setstate__(self,state)
sklearn.externals.joblib.memory.NotMemorizedResult.clear(self)
sklearn.externals.joblib.memory.NotMemorizedResult.get(self)
sklearn.externals.joblib.memory._cache_key_to_dir(cachedir,func,argument_hash)
sklearn.externals.joblib.memory._get_func_fullname(func)
sklearn.externals.joblib.memory._load_output(output_dir,func_name,timestamp=None,metadata=None,mmap_mode=None,verbose=0)
sklearn.externals.joblib.memory.extract_first_line(func_code)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/parallel.py----------------------------------------
A:sklearn.externals.joblib.parallel.scale->sqrt(index / verbose)
A:sklearn.externals.joblib.parallel.next_scale->sqrt((index + 1) / verbose)
A:sklearn.externals.joblib.parallel.(e_type, e_value, e_tb)->sys.exc_info()
A:sklearn.externals.joblib.parallel.text->format_exc(e_type, e_value, e_tb, context=10, tb_offset=1)
A:sklearn.externals.joblib.parallel.delayed_function->functools.wraps(function)(delayed_function)
A:sklearn.externals.joblib.parallel.self.results->func(*args, **kwargs)
A:sklearn.externals.joblib.parallel.self._lock->threading.Lock()
A:sklearn.externals.joblib.parallel.self._it->iter(it)
A:sklearn.externals.joblib.parallel.self._jobs->list()
A:sklearn.externals.joblib.parallel.job->self._jobs.pop(0)
A:sklearn.externals.joblib.parallel.index->len(self._jobs)
A:sklearn.externals.joblib.parallel.(func, args, kwargs)->next(self._original_iterable)
A:sklearn.externals.joblib.parallel.self._output->list()
A:sklearn.externals.joblib.parallel.this_report->format_outer_frames(context=10, stack_start=1)
A:sklearn.externals.joblib.parallel.n_jobs->max(mp.cpu_count() + 1 + n_jobs, 1)
A:sklearn.externals.joblib.parallel.self._pool->MemmapingPool(n_jobs, **poolargs)
A:sklearn.externals.joblib.parallel.already_forked->int(os.environ.get('__JOBLIB_SPAWNED_PARALLEL__', 0))
A:sklearn.externals.joblib.parallel.poolargs->dict(max_nbytes=self._max_nbytes, mmap_mode=self._mmap_mode, temp_folder=self._temp_folder, verbose=max(0, self.verbose - 50), context_id=0)
A:sklearn.externals.joblib.parallel.iterable->itertools.islice(iterable, pre_dispatch)
A:sklearn.externals.joblib.parallel.pre_dispatch->eval(pre_dispatch)
A:sklearn.externals.joblib.parallel.self._pre_dispatch_amountpre_dispatch->int(pre_dispatch)
A:sklearn.externals.joblib.parallel.self._start_time->time.time()
sklearn.externals.joblib.Parallel(self,n_jobs=1,backend=None,verbose=0,pre_dispatch='all',temp_folder=None,max_nbytes=100000000.0,mmap_mode='r')
sklearn.externals.joblib.Parallel.__repr__(self)
sklearn.externals.joblib.Parallel._print(self,msg,msg_args)
sklearn.externals.joblib.Parallel.dispatch(self,func,args,kwargs)
sklearn.externals.joblib.Parallel.dispatch_next(self)
sklearn.externals.joblib.Parallel.print_progress(self,index)
sklearn.externals.joblib.Parallel.retrieve(self)
sklearn.externals.joblib.cpu_count()
sklearn.externals.joblib.delayed(function,check_pickle=True)
sklearn.externals.joblib.parallel.CallBack(self,index,parallel)
sklearn.externals.joblib.parallel.CallBack.__init__(self,index,parallel)
sklearn.externals.joblib.parallel.ImmediateApply(self,func,args,kwargs)
sklearn.externals.joblib.parallel.ImmediateApply.__init__(self,func,args,kwargs)
sklearn.externals.joblib.parallel.ImmediateApply.get(self)
sklearn.externals.joblib.parallel.LockedIterator(self,it)
sklearn.externals.joblib.parallel.LockedIterator.__init__(self,it)
sklearn.externals.joblib.parallel.LockedIterator.__iter__(self)
sklearn.externals.joblib.parallel.LockedIterator.next(self)
sklearn.externals.joblib.parallel.Parallel(self,n_jobs=1,backend=None,verbose=0,pre_dispatch='all',temp_folder=None,max_nbytes=100000000.0,mmap_mode='r')
sklearn.externals.joblib.parallel.Parallel.__init__(self,n_jobs=1,backend=None,verbose=0,pre_dispatch='all',temp_folder=None,max_nbytes=100000000.0,mmap_mode='r')
sklearn.externals.joblib.parallel.Parallel.__repr__(self)
sklearn.externals.joblib.parallel.Parallel._print(self,msg,msg_args)
sklearn.externals.joblib.parallel.Parallel.dispatch(self,func,args,kwargs)
sklearn.externals.joblib.parallel.Parallel.dispatch_next(self)
sklearn.externals.joblib.parallel.Parallel.print_progress(self,index)
sklearn.externals.joblib.parallel.Parallel.retrieve(self)
sklearn.externals.joblib.parallel.SafeFunction(self,func)
sklearn.externals.joblib.parallel.SafeFunction.__init__(self,func)
sklearn.externals.joblib.parallel.WorkerInterrupt(Exception)
sklearn.externals.joblib.parallel._verbosity_filter(index,verbose)
sklearn.externals.joblib.parallel.cpu_count()
sklearn.externals.joblib.parallel.delayed(function,check_pickle=True)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/hashing.py----------------------------------------
A:sklearn.externals.joblib.hashing.self._sequence->sorted(set_sequence)
A:sklearn.externals.joblib.hashing.self.stream->io.BytesIO()
A:sklearn.externals.joblib.hashing.self._hash->hashlib.new(hash_name)
A:sklearn.externals.joblib.hashing.dumps->self.stream.getvalue()
A:sklearn.externals.joblib.hashing.obj->_MyHash(func_name, inst, cls)
A:sklearn.externals.joblib.hashing.kwargs->dict(name=name, pack=pack)
A:sklearn.externals.joblib.hashing.module->getattr(obj, '__module__', None)
A:sklearn.externals.joblib.hashing.dispatch->Pickler.dispatch.copy()
A:sklearn.externals.joblib.hashing.hasher->Hasher(hash_name=hash_name)
sklearn.externals.joblib.hash(obj,hash_name='md5',coerce_mmap=False)
sklearn.externals.joblib.hashing.Hasher(self,hash_name='md5')
sklearn.externals.joblib.hashing.Hasher.__init__(self,hash_name='md5')
sklearn.externals.joblib.hashing.Hasher._batch_setitems(self,items)
sklearn.externals.joblib.hashing.Hasher.hash(self,obj,return_digest=True)
sklearn.externals.joblib.hashing.Hasher.save(self,obj)
sklearn.externals.joblib.hashing.Hasher.save_global(self,obj,name=None,pack=struct.pack)
sklearn.externals.joblib.hashing.Hasher.save_set(self,set_items)
sklearn.externals.joblib.hashing.NumpyHasher(self,hash_name='md5',coerce_mmap=False)
sklearn.externals.joblib.hashing.NumpyHasher.__init__(self,hash_name='md5',coerce_mmap=False)
sklearn.externals.joblib.hashing.NumpyHasher.save(self,obj)
sklearn.externals.joblib.hashing._ConsistentSet(self,set_sequence)
sklearn.externals.joblib.hashing._ConsistentSet.__init__(self,set_sequence)
sklearn.externals.joblib.hashing._MyHash(self,*args)
sklearn.externals.joblib.hashing._MyHash.__init__(self,*args)
sklearn.externals.joblib.hashing.hash(obj,hash_name='md5',coerce_mmap=False)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/numpy_pickle.py----------------------------------------
A:sklearn.externals.joblib.numpy_pickle._MAX_LEN->len(hex(2 ** 64))
A:sklearn.externals.joblib.numpy_pickle._ZFILE_PREFIX->asbytes('ZF')
A:sklearn.externals.joblib.numpy_pickle.magic->file_handle.read(len(_ZFILE_PREFIX))
A:sklearn.externals.joblib.numpy_pickle.length->hex(len(data))
A:sklearn.externals.joblib.numpy_pickle.data->read_zfile(f)
A:sklearn.externals.joblib.numpy_pickle.filename->os.path.join(unpickler._dirname, self.filename)
A:sklearn.externals.joblib.numpy_pickle.array->self.stack.pop().read(self)
A:sklearn.externals.joblib.numpy_pickle.new_array->NumpyUnpickler(filename, file_handle=file_handle, mmap_mode=mmap_mode).np.core.multiarray._reconstruct(self.subclass, (0,), 'b')
A:sklearn.externals.joblib.numpy_pickle.self.file->BytesIO()
A:sklearn.externals.joblib.numpy_pickle.container->ZNDArrayWrapper(os.path.basename(filename), init_args, state)
A:sklearn.externals.joblib.numpy_pickle.(_, init_args, state)->self.stack.pop().read(self).__reduce__()
A:sklearn.externals.joblib.numpy_pickle.obj->NumpyUnpickler(filename, file_handle=file_handle, mmap_mode=mmap_mode).load()
A:sklearn.externals.joblib.numpy_pickle.(obj, filename)->self._write_array(obj, filename)
A:sklearn.externals.joblib.numpy_pickle.dispatch->Unpickler.dispatch.copy()
A:sklearn.externals.joblib.numpy_pickle.self._filename->os.path.basename(filename)
A:sklearn.externals.joblib.numpy_pickle.self._dirname->os.path.dirname(filename)
A:sklearn.externals.joblib.numpy_pickle.self.file_handle->self._open_pickle(file_handle)
A:sklearn.externals.joblib.numpy_pickle.nd_array_wrapper->self.stack.pop()
A:sklearn.externals.joblib.numpy_pickle.pickler->NumpyPickler(filename, compress=compress, cache_size=cache_size)
A:sklearn.externals.joblib.numpy_pickle.unpickler->NumpyUnpickler(filename, file_handle=file_handle, mmap_mode=mmap_mode)
sklearn.externals.joblib.dump(value,filename,compress=0,cache_size=100)
sklearn.externals.joblib.load(filename,mmap_mode=None)
sklearn.externals.joblib.numpy_pickle.NDArrayWrapper(self,filename,subclass)
sklearn.externals.joblib.numpy_pickle.NDArrayWrapper.__init__(self,filename,subclass)
sklearn.externals.joblib.numpy_pickle.NDArrayWrapper.read(self,unpickler)
sklearn.externals.joblib.numpy_pickle.NumpyPickler(self,filename,compress=0,cache_size=10)
sklearn.externals.joblib.numpy_pickle.NumpyPickler.__init__(self,filename,compress=0,cache_size=10)
sklearn.externals.joblib.numpy_pickle.NumpyPickler._write_array(self,array,filename)
sklearn.externals.joblib.numpy_pickle.NumpyPickler.close(self)
sklearn.externals.joblib.numpy_pickle.NumpyPickler.save(self,obj)
sklearn.externals.joblib.numpy_pickle.NumpyUnpickler(self,filename,file_handle,mmap_mode=None)
sklearn.externals.joblib.numpy_pickle.NumpyUnpickler.__init__(self,filename,file_handle,mmap_mode=None)
sklearn.externals.joblib.numpy_pickle.NumpyUnpickler._open_pickle(self,file_handle)
sklearn.externals.joblib.numpy_pickle.NumpyUnpickler.load_build(self)
sklearn.externals.joblib.numpy_pickle.ZNDArrayWrapper(self,filename,init_args,state)
sklearn.externals.joblib.numpy_pickle.ZNDArrayWrapper.__init__(self,filename,init_args,state)
sklearn.externals.joblib.numpy_pickle.ZNDArrayWrapper.read(self,unpickler)
sklearn.externals.joblib.numpy_pickle.ZipNumpyUnpickler(self,filename,file_handle)
sklearn.externals.joblib.numpy_pickle.ZipNumpyUnpickler.__init__(self,filename,file_handle)
sklearn.externals.joblib.numpy_pickle.ZipNumpyUnpickler._open_pickle(self,file_handle)
sklearn.externals.joblib.numpy_pickle._read_magic(file_handle)
sklearn.externals.joblib.numpy_pickle.dump(value,filename,compress=0,cache_size=100)
sklearn.externals.joblib.numpy_pickle.load(filename,mmap_mode=None)
sklearn.externals.joblib.numpy_pickle.read_zfile(file_handle)
sklearn.externals.joblib.numpy_pickle.write_zfile(file_handle,data,compress=1)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/logger.py----------------------------------------
A:sklearn.externals.joblib.logger.t->_squeeze_time(t)
A:sklearn.externals.joblib.logger.print_options->numpy.get_printoptions()
A:sklearn.externals.joblib.logger.out->pprint.pformat(obj, depth=depth, indent=indent)
A:sklearn.externals.joblib.logger.self.last_time->time.time()
A:sklearn.externals.joblib.logger.logfile->os.path.join(logdir, 'joblib.log')
sklearn.externals.joblib.Logger(self,depth=3)
sklearn.externals.joblib.Logger.debug(self,msg)
sklearn.externals.joblib.Logger.format(self,obj,indent=0)
sklearn.externals.joblib.Logger.warn(self,msg)
sklearn.externals.joblib.PrintTime(self,logfile=None,logdir=None)
sklearn.externals.joblib.logger.Logger(self,depth=3)
sklearn.externals.joblib.logger.Logger.__init__(self,depth=3)
sklearn.externals.joblib.logger.Logger.debug(self,msg)
sklearn.externals.joblib.logger.Logger.format(self,obj,indent=0)
sklearn.externals.joblib.logger.Logger.warn(self,msg)
sklearn.externals.joblib.logger.PrintTime(self,logfile=None,logdir=None)
sklearn.externals.joblib.logger.PrintTime.__init__(self,logfile=None,logdir=None)
sklearn.externals.joblib.logger._squeeze_time(t)
sklearn.externals.joblib.logger.format_time(t)
sklearn.externals.joblib.logger.pformat(obj,indent=0,depth=3)
sklearn.externals.joblib.logger.short_format_time(t)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/disk.py----------------------------------------
A:sklearn.externals.joblib.disk.stat->os.stat(os.path.join(path, file))
A:sklearn.externals.joblib.disk.units->dict(K=1, M=kilo, G=kilo ** 2)
A:sklearn.externals.joblib.disk.size->int(units[text[-1]] * float(text[:-1]))
A:sklearn.externals.joblib.disk.names->os.listdir(path)
A:sklearn.externals.joblib.disk.fullname->os.path.join(path, name)
sklearn.externals.joblib.disk.disk_used(path)
sklearn.externals.joblib.disk.memstr_to_kbytes(text)
sklearn.externals.joblib.disk.mkdirp(d)
sklearn.externals.joblib.disk.rm_subdirs(path,onerror=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/_multiprocessing_helpers.py----------------------------------------
A:sklearn.externals.joblib._multiprocessing_helpers._sem->multiprocessing.Semaphore()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/_compat.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/format_stack.py----------------------------------------
A:sklearn.externals.joblib.format_stack.name->getattr(value, '__name__', None)
A:sklearn.externals.joblib.format_stack.klass->getattr(value, '__class__', None)
A:sklearn.externals.joblib.format_stack.unique_set->set()
A:sklearn.externals.joblib.format_stack.better_fn->frame.f_globals.get('__file__', None)
A:sklearn.externals.joblib.format_stack.records->inspect.getouterframes(inspect.currentframe())
A:sklearn.externals.joblib.format_stack.aux->traceback.extract_tb(etb)
A:sklearn.externals.joblib.format_stack.start->max(maybeStart, 0)
A:sklearn.externals.joblib.format_stack.buf->list(records[i])
A:sklearn.externals.joblib.format_stack.records[i]->tuple(buf)
A:sklearn.externals.joblib.format_stack.(args, varargs, varkw, locals)->inspect.getargvalues(frame)
A:sklearn.externals.joblib.format_stack.line->getline(file, lnum[0])
A:sklearn.externals.joblib.format_stack.unique_names->uniq_stable(names)
A:sklearn.externals.joblib.format_stack.value->safe_repr(eval(name_full, locals))
A:sklearn.externals.joblib.format_stack.date->time.ctime(time.time())
A:sklearn.externals.joblib.format_stack.(etype_str, evalue_str)->map(str, (etype, evalue))
A:sklearn.externals.joblib.format_stack.frames->format_records(records)
A:sklearn.externals.joblib.format_stack.output->list()
sklearn.externals.joblib.format_stack._fixed_getframes(etb,context=1,tb_offset=0)
sklearn.externals.joblib.format_stack._format_traceback_lines(lnum,index,lines,lvals=None)
sklearn.externals.joblib.format_stack.eq_repr(value,repr=safe_repr)
sklearn.externals.joblib.format_stack.fix_frame_records_filenames(records)
sklearn.externals.joblib.format_stack.format_exc(etype,evalue,etb,context=5,tb_offset=0)
sklearn.externals.joblib.format_stack.format_outer_frames(context=5,stack_start=None,stack_end=None,ignore_ipython=True)
sklearn.externals.joblib.format_stack.format_records(records)
sklearn.externals.joblib.format_stack.safe_repr(value)
sklearn.externals.joblib.format_stack.uniq_stable(elems)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/test/test_memory.py----------------------------------------
A:sklearn.externals.joblib.test.test_memory.env->dict()
A:sklearn.externals.joblib.test.test_memory.cachedir->mkdtemp()
A:sklearn.externals.joblib.test.test_memory.memory->Memory(cachedir=None, verbose=0)
A:sklearn.externals.joblib.test.test_memory.func->MemorizedFunc(f, env['dir'], verbose=5)
A:sklearn.externals.joblib.test.test_memory.accumulator->list()
A:sklearn.externals.joblib.test.test_memory.sys.stderr->io.BytesIO()
A:sklearn.externals.joblib.test.test_memory.sys.stdout->io.BytesIO()
A:sklearn.externals.joblib.test.test_memory.g->Memory(cachedir=None, verbose=0).cache(f)
A:sklearn.externals.joblib.test.test_memory.current_accumulator->len(accumulator)
A:sklearn.externals.joblib.test.test_memory.out->g(1)
A:sklearn.externals.joblib.test.test_memory.mem->Memory(cachedir=env['dir'], verbose=0)
A:sklearn.externals.joblib.test.test_memory.gg->Memory(cachedir=env['dir'], verbose=0).cache(ff)
A:sklearn.externals.joblib.test.test_memory.a->g(1)
A:sklearn.externals.joblib.test.test_memory.b->twice(a)
A:sklearn.externals.joblib.test.test_memory.a1->Memory(cachedir=None, verbose=0).cache(a1)
A:sklearn.externals.joblib.test.test_memory.b1->Memory(cachedir=None, verbose=0).cache(b1)
A:sklearn.externals.joblib.test.test_memory.function->functools.partial(func, 1)
A:sklearn.externals.joblib.test.test_memory.m->eval('lambda x: x')
A:sklearn.externals.joblib.test.test_memory.mm->Memory(cachedir=None, verbose=0).cache(m)
A:sklearn.externals.joblib.test.test_memory.len_x->len(x)
A:sklearn.externals.joblib.test.test_memory.cached_n->Memory(cachedir=None, verbose=0).cache(n)
A:sklearn.externals.joblib.test.test_memory.rnd->common.np.random.RandomState(0)
A:sklearn.externals.joblib.test.test_memory.c->twice(a)
A:sklearn.externals.joblib.test.test_memory.path->os.path.join(env['dir'], 'joblib', *path)
A:sklearn.externals.joblib.test.test_memory.(dir, _)->Memory(cachedir=None, verbose=0).cache(f).get_output_dir(1)
A:sklearn.externals.joblib.test.test_memory.output->g(1)
A:sklearn.externals.joblib.test.test_memory.h->pickle.loads(pickle.dumps(g))
A:sklearn.externals.joblib.test.test_memory.(output_dir, _)->Memory(cachedir=None, verbose=0).cache(f).get_output_dir(1)
A:sklearn.externals.joblib.test.test_memory.memory2->pickle.loads(pickle.dumps(memory))
A:sklearn.externals.joblib.test.test_memory.gp->pickle.loads(pickle.dumps(g))
A:sklearn.externals.joblib.test.test_memory.result->MemorizedFunc(f, env['dir'], verbose=5).call_and_shelve(11)
A:sklearn.externals.joblib.test.test_memory.filename->os.path.join(dir_name, 'tmp_joblib_.py')
A:sklearn.externals.joblib.test.test_memory.result2->MemorizedFunc(f, env['dir']).call_and_shelve(2)
A:sklearn.externals.joblib.test.test_memory.func2->MemorizedFunc(f, env['dir'])
A:sklearn.externals.joblib.test.test_memory.dir_name->os.path.join(env['dir'], 'tmp_import')
A:sklearn.externals.joblib.test.test_memory.f->Memory(cachedir=env['dir'], verbose=0).cache(_function_to_cache)
A:sklearn.externals.joblib.test.test_memory.my_stdout->io.BytesIO()
sklearn.externals.joblib.test.test_memory._function_to_cache(a,b)
sklearn.externals.joblib.test.test_memory._product(a,b)
sklearn.externals.joblib.test.test_memory._rmtree_onerror(func,path,excinfo)
sklearn.externals.joblib.test.test_memory._sum(a,b)
sklearn.externals.joblib.test.test_memory.check_identity_lazy(func,accumulator)
sklearn.externals.joblib.test.test_memory.count_and_append(x=[])
sklearn.externals.joblib.test.test_memory.f(x,y=1)
sklearn.externals.joblib.test.test_memory.setup_module()
sklearn.externals.joblib.test.test_memory.teardown_module()
sklearn.externals.joblib.test.test_memory.test_argument_change()
sklearn.externals.joblib.test.test_memory.test_call_and_shelve()
sklearn.externals.joblib.test.test_memory.test_func_dir()
sklearn.externals.joblib.test.test_memory.test_memorized_pickling()
sklearn.externals.joblib.test.test_memory.test_memorized_repr()
sklearn.externals.joblib.test.test_memory.test_memory_eval()
sklearn.externals.joblib.test.test_memory.test_memory_exception()
sklearn.externals.joblib.test.test_memory.test_memory_file_modification()
sklearn.externals.joblib.test.test_memory.test_memory_ignore()
sklearn.externals.joblib.test.test_memory.test_memory_in_memory_function_code_change()
sklearn.externals.joblib.test.test_memory.test_memory_integration()
sklearn.externals.joblib.test.test_memory.test_memory_kwarg()
sklearn.externals.joblib.test.test_memory.test_memory_lambda()
sklearn.externals.joblib.test.test_memory.test_memory_name_collision()
sklearn.externals.joblib.test.test_memory.test_memory_numpy()
sklearn.externals.joblib.test.test_memory.test_memory_numpy_check_mmap_mode()
sklearn.externals.joblib.test.test_memory.test_memory_partial()
sklearn.externals.joblib.test.test_memory.test_memory_warning_collision_detection()
sklearn.externals.joblib.test.test_memory.test_memory_warning_lambda_collisions()
sklearn.externals.joblib.test.test_memory.test_no_memory()
sklearn.externals.joblib.test.test_memory.test_partial_decoration()
sklearn.externals.joblib.test.test_memory.test_persistence()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/test/test_format_stack.py----------------------------------------
sklearn.externals.joblib.test.test_format_stack.Vicious(object)
sklearn.externals.joblib.test.test_format_stack.Vicious.__repr__(self)
sklearn.externals.joblib.test.test_format_stack.test_safe_repr()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/test/test_func_inspect.py----------------------------------------
A:sklearn.externals.joblib.test.test_func_inspect.temp_folder->tempfile.mkdtemp(prefix='joblib_test_func_inspect_')
A:sklearn.externals.joblib.test.test_func_inspect.mem->Memory(cachedir=temp_folder)
A:sklearn.externals.joblib.test.test_func_inspect.obj->Klass()
A:sklearn.externals.joblib.test.test_func_inspect.ff->functools.partial(f, 1)
A:sklearn.externals.joblib.test.test_func_inspect.a->Klass()
A:sklearn.externals.joblib.test.test_func_inspect.b->Klass()
A:sklearn.externals.joblib.test.test_func_inspect.mangled_string->_clean_win_chars(string)
A:sklearn.externals.joblib.test.test_func_inspect.(path, sgn)->format_signature(g, list(range(10)), y=list(range(10)))
sklearn.externals.joblib.test.test_func_inspect.Klass(object)
sklearn.externals.joblib.test.test_func_inspect.Klass.f(self,x)
sklearn.externals.joblib.test.test_func_inspect.f(x,y=0)
sklearn.externals.joblib.test.test_func_inspect.f2(x)
sklearn.externals.joblib.test.test_func_inspect.g(x)
sklearn.externals.joblib.test.test_func_inspect.g(x,y=1)
sklearn.externals.joblib.test.test_func_inspect.h(x,y=0,*args,**kwargs)
sklearn.externals.joblib.test.test_func_inspect.i(x=1)
sklearn.externals.joblib.test.test_func_inspect.j(x,y,**kwargs)
sklearn.externals.joblib.test.test_func_inspect.k(*args,**kwargs)
sklearn.externals.joblib.test.test_func_inspect.teardown_module()
sklearn.externals.joblib.test.test_func_inspect.test_bound_methods()
sklearn.externals.joblib.test.test_func_inspect.test_clean_win_chars()
sklearn.externals.joblib.test.test_func_inspect.test_filter_args()
sklearn.externals.joblib.test.test_func_inspect.test_filter_args_2()
sklearn.externals.joblib.test.test_func_inspect.test_filter_args_error_msg()
sklearn.externals.joblib.test.test_func_inspect.test_filter_args_method()
sklearn.externals.joblib.test.test_func_inspect.test_filter_kwargs()
sklearn.externals.joblib.test.test_func_inspect.test_filter_varargs()
sklearn.externals.joblib.test.test_func_inspect.test_format_signature()
sklearn.externals.joblib.test.test_func_inspect.test_format_signature_numpy()
sklearn.externals.joblib.test.test_func_inspect.test_func_inspect_errors()
sklearn.externals.joblib.test.test_func_inspect.test_func_name()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/test/test_my_exceptions.py----------------------------------------
A:sklearn.externals.joblib.test.test_my_exceptions.e->my_exceptions._mk_exception(klass)[0]('Some argument')
sklearn.externals.joblib.test.test_my_exceptions.test__mk_exception()
sklearn.externals.joblib.test.test_my_exceptions.test_inheritance()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/test/test_parallel.py----------------------------------------
A:sklearn.externals.joblib.test.test_parallel.X->range(5)
A:sklearn.externals.joblib.test.test_parallel.sys.stderr->io.BytesIO()
A:sklearn.externals.joblib.test.test_parallel.sys.stdout->io.BytesIO()
A:sklearn.externals.joblib.test.test_parallel.lst->range(10)
A:sklearn.externals.joblib.test.test_parallel.ex->JoblibException()
A:sklearn.externals.joblib.test.test_parallel.queue->parallel.mp.Manager().list()
A:sklearn.externals.joblib.test.test_parallel.manager->parallel.mp.Manager()
A:sklearn.externals.joblib.test.test_parallel.joblib_path->'/'.join(joblib_path)
A:sklearn.externals.joblib.test.test_parallel.module->__import__(joblib_path)
A:sklearn.externals.joblib.test.test_parallel.e->JoblibException('foobar')
A:sklearn.externals.joblib.test.test_parallel.safe_division->SafeFunction(division)
sklearn.externals.joblib.test.test_parallel.Counter(self,list1,list2)
sklearn.externals.joblib.test.test_parallel.Counter.__init__(self,list1,list2)
sklearn.externals.joblib.test.test_parallel._reload_joblib()
sklearn.externals.joblib.test.test_parallel.check_dispatch_multiprocessing(backend)
sklearn.externals.joblib.test.test_parallel.check_dispatch_one_job(backend)
sklearn.externals.joblib.test.test_parallel.check_nested_loop(parent_backend,child_backend)
sklearn.externals.joblib.test.test_parallel.check_simple_parallel(backend)
sklearn.externals.joblib.test.test_parallel.consumer(queue,item)
sklearn.externals.joblib.test.test_parallel.division(x,y)
sklearn.externals.joblib.test.test_parallel.exception_raiser(x)
sklearn.externals.joblib.test.test_parallel.f(x,y=0,z=0)
sklearn.externals.joblib.test.test_parallel.increment_input(a)
sklearn.externals.joblib.test.test_parallel.interrupt_raiser(x)
sklearn.externals.joblib.test.test_parallel.nested_loop(backend)
sklearn.externals.joblib.test.test_parallel.square(x)
sklearn.externals.joblib.test.test_parallel.test_cpu_count()
sklearn.externals.joblib.test.test_parallel.test_dispatch_multiprocessing()
sklearn.externals.joblib.test.test_parallel.test_dispatch_one_job()
sklearn.externals.joblib.test.test_parallel.test_error_capture()
sklearn.externals.joblib.test.test_parallel.test_exception_dispatch()
sklearn.externals.joblib.test.test_parallel.test_increment_input_with_threads()
sklearn.externals.joblib.test.test_parallel.test_joblib_exception()
sklearn.externals.joblib.test.test_parallel.test_multiple_spawning()
sklearn.externals.joblib.test.test_parallel.test_nested_loop()
sklearn.externals.joblib.test.test_parallel.test_parallel_kwargs()
sklearn.externals.joblib.test.test_parallel.test_parallel_pickling()
sklearn.externals.joblib.test.test_parallel.test_pre_dispatch_race_condition()
sklearn.externals.joblib.test.test_parallel.test_safe_function()
sklearn.externals.joblib.test.test_parallel.test_simple_parallel()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/test/test_logger.py----------------------------------------
A:sklearn.externals.joblib.test.test_logger.env->dict()
A:sklearn.externals.joblib.test.test_logger.cachedir->mkdtemp()
A:sklearn.externals.joblib.test.test_logger.sys.stderr->io.StringIO()
A:sklearn.externals.joblib.test.test_logger.print_time->PrintTime(logfile=os.path.join(env['dir'], 'test.log'))
A:sklearn.externals.joblib.test.test_logger.printed_text->sys.stderr.getvalue()
sklearn.externals.joblib.test.test_logger.setup()
sklearn.externals.joblib.test.test_logger.teardown()
sklearn.externals.joblib.test.test_logger.test_print_time()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/test/common.py----------------------------------------
A:sklearn.externals.joblib.test.common._KILLER_THREADS->dict()
A:sklearn.externals.joblib.test.common.pid->os.getpid()
A:sklearn.externals.joblib.test.common._KILLER_THREADS[module_name]t->threading.Timer(timeout, autokill)
A:sklearn.externals.joblib.test.common.killer->dict().get(module_name)
sklearn.externals.joblib.test.common.setup_autokill(module_name,timeout=30)
sklearn.externals.joblib.test.common.teardown_autokill(module_name)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/test/test_disk.py----------------------------------------
A:sklearn.externals.joblib.test.test_disk.cachedir->mkdtemp()
A:sklearn.externals.joblib.test.test_disk.a->array.array('i', n * (1,))
A:sklearn.externals.joblib.test.test_disk.n->int(target_size * 1024 / sizeof_i)
A:sklearn.externals.joblib.test.test_disk.tmp->mkdtemp()
sklearn.externals.joblib.test.test_disk.test_disk_used()
sklearn.externals.joblib.test.test_disk.test_memstr_to_kbytes()
sklearn.externals.joblib.test.test_disk.test_mkdirp()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/test/test_pool.py----------------------------------------
A:sklearn.externals.joblib.test.test_pool.with_multiprocessing->with_setup(check_multiprocessing)
A:sklearn.externals.joblib.test.test_pool.TEMP_FOLDER->tempfile.mkdtemp(prefix='joblib_test_pool_')
A:sklearn.externals.joblib.test.test_pool.with_temp_folder->with_setup(setup_temp_folder, teardown_temp_folder)
A:sklearn.externals.joblib.test.test_pool.with_dev_shm->with_setup(setup_if_has_dev_shm)
A:sklearn.externals.joblib.test.test_pool.filename->os.path.join(TEMP_FOLDER, 'test.mmap')
A:sklearn.externals.joblib.test.test_pool.buffer->common.np.memmap(filename, dtype=np.float64, shape=500, mode='w+')
A:sklearn.externals.joblib.test.test_pool.a->common.np.ones(100, dtype=np.float64)
A:sklearn.externals.joblib.test.test_pool.a[:]->common.np.arange(100 * 15 * 15 * 3).reshape(a.shape)
A:sklearn.externals.joblib.test.test_pool.c->common.np.memmap(filename, dtype=np.float32, shape=(10,), mode='r', offset=5 * 4)
A:sklearn.externals.joblib.test.test_pool.reducer->ArrayMemmapReducer(None, TEMP_FOLDER, 'c')
A:sklearn.externals.joblib.test.test_pool.(cons, args)->reduce_memmap(x)
A:sklearn.externals.joblib.test.test_pool.a_reconstructed->reconstruct_memmap(a)
A:sklearn.externals.joblib.test.test_pool.b_reconstructed->reconstruct_memmap(b)
A:sklearn.externals.joblib.test.test_pool.c_reconstructed->reconstruct_memmap(c)
A:sklearn.externals.joblib.test.test_pool.d_reconstructed->reconstruct_memmap(d)
A:sklearn.externals.joblib.test.test_pool.a3_reconstructed->reconstruct_memmap(a3)
A:sklearn.externals.joblib.test.test_pool.b3->common.np.asarray(a3)
A:sklearn.externals.joblib.test.test_pool.b3_reconstructed->reconstruct_array(b3)
A:sklearn.externals.joblib.test.test_pool.res->MemmapingPool(3, max_nbytes=10, temp_folder=TEMP_FOLDER).apply_async(np.ones, args=(1000,))
A:sklearn.externals.joblib.test.test_pool.e_reconstructed->reconstruct_memmap(e)
A:sklearn.externals.joblib.test.test_pool.pool_temp_folder->os.path.join(TEMP_FOLDER, 'pool')
A:sklearn.externals.joblib.test.test_pool.p->MemmapingPool(3, max_nbytes=10, temp_folder=TEMP_FOLDER)
A:sklearn.externals.joblib.test.test_pool.b->MemmapingPool(3, max_nbytes=10, temp_folder=TEMP_FOLDER).apply_async(_worker_multiply, args=(a, 3)).get()
A:sklearn.externals.joblib.test.test_pool.a_view->common.np.asarray(a)
A:sklearn.externals.joblib.test.test_pool.small->common.np.ones(5, dtype=np.float32)
A:sklearn.externals.joblib.test.test_pool.large->MemmapingPool(3, max_nbytes=10, temp_folder=TEMP_FOLDER).apply_async(np.ones, args=(1000,)).get()
A:sklearn.externals.joblib.test.test_pool.dumped_filenames->os.listdir(p._temp_folder)
sklearn.externals.joblib.test.test_pool._worker_multiply(a,n_times)
sklearn.externals.joblib.test.test_pool.check_array(args)
sklearn.externals.joblib.test.test_pool.check_multiprocessing()
sklearn.externals.joblib.test.test_pool.inplace_double(args)
sklearn.externals.joblib.test.test_pool.setup_if_has_dev_shm()
sklearn.externals.joblib.test.test_pool.setup_module()
sklearn.externals.joblib.test.test_pool.setup_temp_folder()
sklearn.externals.joblib.test.test_pool.teardown_module()
sklearn.externals.joblib.test.test_pool.teardown_temp_folder()
sklearn.externals.joblib.test.test_pool.test_high_dimension_memmap_array_reducing()
sklearn.externals.joblib.test.test_pool.test_memmap_based_array_reducing()
sklearn.externals.joblib.test.test_pool.test_memmaping_on_dev_shm()
sklearn.externals.joblib.test.test_pool.test_memmaping_pool_for_large_arrays()
sklearn.externals.joblib.test.test_pool.test_memmaping_pool_for_large_arrays_disabled()
sklearn.externals.joblib.test.test_pool.test_memmaping_pool_for_large_arrays_in_return()
sklearn.externals.joblib.test.test_pool.test_pool_with_memmap()
sklearn.externals.joblib.test.test_pool.test_pool_with_memmap_array_view()
sklearn.externals.joblib.test.test_pool.test_workaround_against_bad_memmap_with_copied_buffers()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/test/test_hashing.py----------------------------------------
A:sklearn.externals.joblib.test.test_hashing.times->list()
A:sklearn.externals.joblib.test.test_hashing.t1->time.time()
A:sklearn.externals.joblib.test.test_hashing.time_func1->time_func(func1, *args)
A:sklearn.externals.joblib.test.test_hashing.time_func2->time_func(func2, *args)
A:sklearn.externals.joblib.test.test_hashing.mem->Memory(cachedir=test_memory_env['dir'])
A:sklearn.externals.joblib.test.test_hashing.self.f->Memory(cachedir=test_memory_env['dir']).cache(self.f)
A:sklearn.externals.joblib.test.test_hashing.a->KlassWithCachedMethod().f(s)
A:sklearn.externals.joblib.test.test_hashing.a1->collections.deque(range(10))
A:sklearn.externals.joblib.test.test_hashing.a2->collections.deque(range(9))
A:sklearn.externals.joblib.test.test_hashing.rnd->common.np.random.RandomState(0)
A:sklearn.externals.joblib.test.test_hashing.arr1->common.np.random.RandomState(0).random_sample((10, 10))
A:sklearn.externals.joblib.test.test_hashing.arr2->common.np.random.RandomState(0).random_sample((10, 10)).copy()
A:sklearn.externals.joblib.test.test_hashing.arr3->common.np.random.RandomState(0).random_sample((10, 10)).copy().copy()
A:sklearn.externals.joblib.test.test_hashing.b->KlassWithCachedMethod().f(a)
A:sklearn.externals.joblib.test.test_hashing.c->common.np.asfortranarray(a)
A:sklearn.externals.joblib.test.test_hashing.filename->tempfile.mktemp(prefix='joblib_test_hash_memmap_')
A:sklearn.externals.joblib.test.test_hashing.m->common.np.memmap(filename, shape=(10, 10), mode='w+')
A:sklearn.externals.joblib.test.test_hashing.relative_diff->relative_time(md5_hash, hash, a)
A:sklearn.externals.joblib.test.test_hashing.time_hash->time_func(hash, (a, a, a))
A:sklearn.externals.joblib.test.test_hashing.k->KlassWithCachedMethod()
A:sklearn.externals.joblib.test.test_hashing.s->set(['#s12069__c_maps.nii.gz', '#s12158__c_maps.nii.gz', '#s12258__c_maps.nii.gz', '#s12277__c_maps.nii.gz', '#s12300__c_maps.nii.gz', '#s12401__c_maps.nii.gz', '#s12430__c_maps.nii.gz', '#s13817__c_maps.nii.gz', '#s13903__c_maps.nii.gz', '#s13916__c_maps.nii.gz', '#s13981__c_maps.nii.gz', '#s13982__c_maps.nii.gz', '#s13983__c_maps.nii.gz'])
sklearn.externals.joblib.test.test_hashing.Klass(object)
sklearn.externals.joblib.test.test_hashing.Klass.f(self,x)
sklearn.externals.joblib.test.test_hashing.KlassWithCachedMethod(self)
sklearn.externals.joblib.test.test_hashing.KlassWithCachedMethod.__init__(self)
sklearn.externals.joblib.test.test_hashing.KlassWithCachedMethod.f(self,x)
sklearn.externals.joblib.test.test_hashing.assert_less(a,b)
sklearn.externals.joblib.test.test_hashing.relative_time(func1,func2,*args)
sklearn.externals.joblib.test.test_hashing.test_bound_cached_methods_hash()
sklearn.externals.joblib.test.test_hashing.test_bound_methods_hash()
sklearn.externals.joblib.test.test_hashing.test_dict_hash()
sklearn.externals.joblib.test.test_hashing.test_hash_memmap()
sklearn.externals.joblib.test.test_hashing.test_hash_methods()
sklearn.externals.joblib.test.test_hashing.test_hash_numpy()
sklearn.externals.joblib.test.test_hashing.test_hash_numpy_noncontiguous()
sklearn.externals.joblib.test.test_hashing.test_hash_numpy_performance()
sklearn.externals.joblib.test.test_hashing.test_hash_object_dtype()
sklearn.externals.joblib.test.test_hashing.test_numpy_scalar()
sklearn.externals.joblib.test.test_hashing.test_set_hash()
sklearn.externals.joblib.test.test_hashing.test_trival_hash()
sklearn.externals.joblib.test.test_hashing.time_func(func,*args)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/test/test_numpy_pickle.py----------------------------------------
A:sklearn.externals.joblib.test.test_numpy_pickle._bool->bool(1)
A:sklearn.externals.joblib.test.test_numpy_pickle._int->int(1)
A:sklearn.externals.joblib.test.test_numpy_pickle._long->long(1)
A:sklearn.externals.joblib.test.test_numpy_pickle._float->float(1)
A:sklearn.externals.joblib.test.test_numpy_pickle._complex->complex(1)
A:sklearn.externals.joblib.test.test_numpy_pickle._string->str(1)
A:sklearn.externals.joblib.test.test_numpy_pickle._unicode->unicode(1)
A:sklearn.externals.joblib.test.test_numpy_pickle._instance->_class()
A:sklearn.externals.joblib.test.test_numpy_pickle._object->_newclass()
A:sklearn.externals.joblib.test.test_numpy_pickle.env->dict()
A:sklearn.externals.joblib.test.test_numpy_pickle.env['dir']->mkdtemp()
A:sklearn.externals.joblib.test.test_numpy_pickle.env['filename']->os.path.join(env['dir'], 'test.pkl')
A:sklearn.externals.joblib.test.test_numpy_pickle._member->numpy_pickle.load(this_filename)
A:sklearn.externals.joblib.test.test_numpy_pickle.rnd->common.np.random.RandomState(0)
A:sklearn.externals.joblib.test.test_numpy_pickle.a->SubArray((10,))
A:sklearn.externals.joblib.test.test_numpy_pickle.filenames->numpy_pickle.dump(obj, this_filename, compress=compress, cache_size=cache_size)
A:sklearn.externals.joblib.test.test_numpy_pickle.obj_->numpy_pickle.load(this_filename)
A:sklearn.externals.joblib.test.test_numpy_pickle.b->numpy_pickle.load(filename, mmap_mode='r')
A:sklearn.externals.joblib.test.test_numpy_pickle.data->numpy_pickle.asbytes('Foo, \n Bar, baz, \n\nfoobar')
A:sklearn.externals.joblib.test.test_numpy_pickle.data_read->numpy_pickle.read_zfile(f)
A:sklearn.externals.joblib.test.test_numpy_pickle.d->SubArray(arr.shape)
A:sklearn.externals.joblib.test.test_numpy_pickle.c->numpy_pickle.load(filename)
sklearn.externals.joblib.test.test_numpy_pickle._class
sklearn.externals.joblib.test.test_numpy_pickle._class._method(self)
sklearn.externals.joblib.test.test_numpy_pickle._function(x)
sklearn.externals.joblib.test.test_numpy_pickle._newclass(object)
sklearn.externals.joblib.test.test_numpy_pickle._newclass._method(self)
sklearn.externals.joblib.test.test_numpy_pickle.setup_module()
sklearn.externals.joblib.test.test_numpy_pickle.teardown_module()
sklearn.externals.joblib.test.test_numpy_pickle.test_masked_array_persistence()
sklearn.externals.joblib.test.test_numpy_pickle.test_memmap_persistence()
sklearn.externals.joblib.test.test_numpy_pickle.test_numpy_persistence()
sklearn.externals.joblib.test.test_numpy_pickle.test_numpy_subclass()
sklearn.externals.joblib.test.test_numpy_pickle.test_standard_types()
sklearn.externals.joblib.test.test_numpy_pickle.test_value_error()
sklearn.externals.joblib.test.test_numpy_pickle.test_z_file()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/externals/joblib/test/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/gaussian_process/correlation_models.py----------------------------------------
A:sklearn.gaussian_process.correlation_models.theta->numpy.asarray(theta, dtype=np.float)
A:sklearn.gaussian_process.correlation_models.d->numpy.asarray(d, dtype=np.float)
A:sklearn.gaussian_process.correlation_models.r->numpy.prod(ss, 1)
sklearn.gaussian_process.correlation_models.absolute_exponential(theta,d)
sklearn.gaussian_process.correlation_models.cubic(theta,d)
sklearn.gaussian_process.correlation_models.generalized_exponential(theta,d)
sklearn.gaussian_process.correlation_models.linear(theta,d)
sklearn.gaussian_process.correlation_models.pure_nugget(theta,d)
sklearn.gaussian_process.correlation_models.squared_exponential(theta,d)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/gaussian_process/gaussian_process.py----------------------------------------
A:sklearn.gaussian_process.gaussian_process.X->array2d(X)
A:sklearn.gaussian_process.gaussian_process.ij->numpy.zeros((n_nonzero_cross_dist, 2), dtype=np.int)
A:sklearn.gaussian_process.gaussian_process.D->numpy.zeros((n_nonzero_cross_dist, n_features))
A:sklearn.gaussian_process.gaussian_process.ij[ll_0:ll_1, 1]->numpy.arange(k + 1, n_samples)
A:sklearn.gaussian_process.gaussian_process.D[ll_0:ll_1]->numpy.abs(X[k] - X[k + 1:n_samples])
A:sklearn.gaussian_process.gaussian_process.self.random_state->check_random_state(self.random_state)
A:sklearn.gaussian_process.gaussian_process.y->numpy.zeros(n_eval)
A:sklearn.gaussian_process.gaussian_process.(X, y)->check_arrays(X, y)
A:sklearn.gaussian_process.gaussian_process.X_mean->numpy.zeros(1)
A:sklearn.gaussian_process.gaussian_process.X_std->numpy.ones(1)
A:sklearn.gaussian_process.gaussian_process.y_mean->numpy.zeros(1)
A:sklearn.gaussian_process.gaussian_process.y_std->numpy.ones(1)
A:sklearn.gaussian_process.gaussian_process.(D, ij)->l1_cross_distances(self.X)
A:sklearn.gaussian_process.gaussian_process.F->self.regr(self.X)
A:sklearn.gaussian_process.gaussian_process.(self.theta_, self.reduced_likelihood_function_value_, par)->self._arg_max_reduced_likelihood_function()
A:sklearn.gaussian_process.gaussian_process.(self.reduced_likelihood_function_value_, par)->self.reduced_likelihood_function()
A:sklearn.gaussian_process.gaussian_process.MSE->MSE.ravel().ravel()
A:sklearn.gaussian_process.gaussian_process.dx->manhattan_distances(X, Y=self.X, sum_over_features=False)
A:sklearn.gaussian_process.gaussian_process.f->self.regr(X)
A:sklearn.gaussian_process.gaussian_process.r->self.corr(theta, D)
A:sklearn.gaussian_process.gaussian_process.(reduced_likelihood_function_value, par)->self.reduced_likelihood_function()
A:sklearn.gaussian_process.gaussian_process.rt->scipy.linalg.solve_triangular(self.C, r.T, lower=True)
A:sklearn.gaussian_process.gaussian_process.u->numpy.zeros((n_targets, n_eval))
A:sklearn.gaussian_process.gaussian_process.batch_to->min([(k + 1) * batch_size + 1, n_eval + 1])
A:sklearn.gaussian_process.gaussian_process.(y[batch_from:batch_to], MSE[batch_from:batch_to])->self.predict(X[batch_from:batch_to], eval_MSE=eval_MSE, batch_size=None)
A:sklearn.gaussian_process.gaussian_process.y[batch_from:batch_to]->self.predict(X[batch_from:batch_to], eval_MSE=eval_MSE, batch_size=None)
A:sklearn.gaussian_process.gaussian_process.C->scipy.linalg.cholesky(R, lower=True)
A:sklearn.gaussian_process.gaussian_process.Ft->scipy.linalg.solve_triangular(C, F, lower=True)
A:sklearn.gaussian_process.gaussian_process.(Q, G)->scipy.linalg.qr(Ft, mode='economic')
A:sklearn.gaussian_process.gaussian_process.sv->scipy.linalg.svd(F, compute_uv=False)
A:sklearn.gaussian_process.gaussian_process.Yt->scipy.linalg.solve_triangular(C, self.y, lower=True)
A:sklearn.gaussian_process.gaussian_process.beta->numpy.array(self.beta0)
A:sklearn.gaussian_process.gaussian_process.detR->(np.diag(C) ** (2.0 / n_samples)).prod()
A:sklearn.gaussian_process.gaussian_process.par['gamma']->scipy.linalg.solve_triangular(C.T, rho)
A:sklearn.gaussian_process.gaussian_process.log10_optimal_theta->scipy.optimize.fmin_cobyla(minus_reduced_likelihood_function, np.log10(theta0), constraints, iprint=0)
A:sklearn.gaussian_process.gaussian_process.(optimal_rlf_value, optimal_par)->self.reduced_likelihood_function(theta=optimal_theta)
A:sklearn.gaussian_process.gaussian_process.self.theta0->array2d(self.theta0)
A:sklearn.gaussian_process.gaussian_process.self.thetaL->array2d(self.thetaL)
A:sklearn.gaussian_process.gaussian_process.self.thetaU->array2d(self.thetaU)
A:sklearn.gaussian_process.gaussian_process.(theta_iso, optimal_rlf_value_iso, par_iso)->self._arg_max_reduced_likelihood_function()
A:sklearn.gaussian_process.gaussian_process.(optimal_theta[0, i], optimal_rlf_value, optimal_par)->self._arg_max_reduced_likelihood_function()
A:sklearn.gaussian_process.gaussian_process.self.beta0->array2d(self.beta0)
A:sklearn.gaussian_process.gaussian_process.self.verbose->bool(self.verbose)
A:sklearn.gaussian_process.gaussian_process.self.normalize->bool(self.normalize)
A:sklearn.gaussian_process.gaussian_process.self.nugget->numpy.asarray(self.nugget)
A:sklearn.gaussian_process.gaussian_process.self.random_start->int(self.random_start)
sklearn.gaussian_process.GaussianProcess(self,regr='constant',corr='squared_exponential',beta0=None,storage_mode='full',verbose=False,theta0=0.1,thetaL=None,thetaU=None,optimizer='fmin_cobyla',random_start=1,normalize=True,nugget=10.0*MACHINE_EPSILON,random_state=None)
sklearn.gaussian_process.GaussianProcess._arg_max_reduced_likelihood_function(self)
sklearn.gaussian_process.GaussianProcess._check_params(self,n_samples=None)
sklearn.gaussian_process.GaussianProcess.fit(self,X,y)
sklearn.gaussian_process.GaussianProcess.predict(self,X,eval_MSE=False,batch_size=None)
sklearn.gaussian_process.GaussianProcess.reduced_likelihood_function(self,theta=None)
sklearn.gaussian_process.gaussian_process.GaussianProcess(self,regr='constant',corr='squared_exponential',beta0=None,storage_mode='full',verbose=False,theta0=0.1,thetaL=None,thetaU=None,optimizer='fmin_cobyla',random_start=1,normalize=True,nugget=10.0*MACHINE_EPSILON,random_state=None)
sklearn.gaussian_process.gaussian_process.GaussianProcess.__init__(self,regr='constant',corr='squared_exponential',beta0=None,storage_mode='full',verbose=False,theta0=0.1,thetaL=None,thetaU=None,optimizer='fmin_cobyla',random_start=1,normalize=True,nugget=10.0*MACHINE_EPSILON,random_state=None)
sklearn.gaussian_process.gaussian_process.GaussianProcess._arg_max_reduced_likelihood_function(self)
sklearn.gaussian_process.gaussian_process.GaussianProcess._check_params(self,n_samples=None)
sklearn.gaussian_process.gaussian_process.GaussianProcess.fit(self,X,y)
sklearn.gaussian_process.gaussian_process.GaussianProcess.predict(self,X,eval_MSE=False,batch_size=None)
sklearn.gaussian_process.gaussian_process.GaussianProcess.reduced_likelihood_function(self,theta=None)
sklearn.gaussian_process.gaussian_process.l1_cross_distances(X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/gaussian_process/regression_models.py----------------------------------------
A:sklearn.gaussian_process.regression_models.x->numpy.asarray(x, dtype=np.float)
A:sklearn.gaussian_process.regression_models.f->numpy.hstack([f, x[:, k, np.newaxis] * x[:, k:]])
sklearn.gaussian_process.regression_models.constant(x)
sklearn.gaussian_process.regression_models.linear(x)
sklearn.gaussian_process.regression_models.quadratic(x)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/gaussian_process/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/gaussian_process/tests/test_gaussian_process.py----------------------------------------
A:sklearn.gaussian_process.tests.test_gaussian_process.y->f(X)
A:sklearn.gaussian_process.tests.test_gaussian_process.gp->GaussianProcess(regr='constant', corr='squared_exponential', theta0=[1.0] * n_features, thetaL=[0.0001] * n_features, thetaU=[10.0] * n_features, random_start=random_start, random_state=0, verbose=False).fit(X, y)
A:sklearn.gaussian_process.tests.test_gaussian_process.(y_pred, MSE)->GaussianProcess(regr='constant', corr='squared_exponential', theta0=[1.0] * n_features, thetaL=[0.0001] * n_features, thetaU=[10.0] * n_features, random_start=random_start, random_state=0, verbose=False).fit(X, y).predict(X, eval_MSE=True)
A:sklearn.gaussian_process.tests.test_gaussian_process.(y2_pred, MSE2)->GaussianProcess(regr='constant', corr='squared_exponential', theta0=[1.0] * n_features, thetaL=[0.0001] * n_features, thetaU=[10.0] * n_features, random_start=random_start, random_state=0, verbose=False).fit(X, y).predict(X2, eval_MSE=True)
A:sklearn.gaussian_process.tests.test_gaussian_process.X->numpy.array([[-4.61611719, -6.00099547], [4.10469096, 5.32782448], [0.0, -0.5], [-6.17289014, -4.6984743], [1.3109306, -6.93271427], [-5.03823144, 3.10584743], [-2.87600388, 6.74310541], [5.21301203, 4.26386883]])
A:sklearn.gaussian_process.tests.test_gaussian_process.y_pred->GaussianProcess(regr='constant', corr='squared_exponential', theta0=[1.0] * n_features, thetaL=[0.0001] * n_features, thetaU=[10.0] * n_features, random_start=random_start, random_state=0, verbose=False).fit(X, y).predict(X)
A:sklearn.gaussian_process.tests.test_gaussian_process.rng->numpy.random.RandomState(0)
sklearn.gaussian_process.tests.test_gaussian_process.test_1d(regr=regression.constant,corr=correlation.squared_exponential,random_start=10,beta0=None)
sklearn.gaussian_process.tests.test_gaussian_process.test_2d(regr=regression.constant,corr=correlation.squared_exponential,random_start=10,beta0=None)
sklearn.gaussian_process.tests.test_gaussian_process.test_2d_2d(regr=regression.constant,corr=correlation.squared_exponential,random_start=10,beta0=None)
sklearn.gaussian_process.tests.test_gaussian_process.test_more_builtin_correlation_models(random_start=1)
sklearn.gaussian_process.tests.test_gaussian_process.test_no_normalize()
sklearn.gaussian_process.tests.test_gaussian_process.test_ordinary_kriging()
sklearn.gaussian_process.tests.test_gaussian_process.test_random_starts()
sklearn.gaussian_process.tests.test_gaussian_process.test_wrong_number_of_outputs()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/gaussian_process/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_selection/from_model.py----------------------------------------
A:sklearn.feature_selection.from_model.X->atleast2d_or_csc(X)
A:sklearn.feature_selection.from_model.importances->numpy.sum(np.abs(self.coef_), axis=0)
A:sklearn.feature_selection.from_model.threshold->float(threshold)
A:sklearn.feature_selection.from_model.(scale, reference)->float(threshold).split('*')
A:sklearn.feature_selection.from_model.scale->float(scale.strip())
A:sklearn.feature_selection.from_model.reference->numpy.mean(importances)
A:sklearn.feature_selection.from_model.mask->safe_mask(X, mask)
sklearn.feature_selection.from_model._LearntSelectorMixin(TransformerMixin)
sklearn.feature_selection.from_model._LearntSelectorMixin.transform(self,X,threshold=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_selection/rfe.py----------------------------------------
A:sklearn.feature_selection.rfe.(X, y)->check_arrays(X, y, sparse_format='csr')
A:sklearn.feature_selection.rfe.step->int(self.step)
A:sklearn.feature_selection.rfe.support_->numpy.ones(n_features, dtype=np.bool)
A:sklearn.feature_selection.rfe.ranking_->numpy.ones(n_features, dtype=np.int)
A:sklearn.feature_selection.rfe.estimator->clone(self.estimator)
A:sklearn.feature_selection.rfe.ranks->numpy.ravel(ranks)
A:sklearn.feature_selection.rfe.threshold->min(step, np.sum(support_) - n_features_to_select)
A:sklearn.feature_selection.rfe.self.estimator_->clone(self.estimator)
A:sklearn.feature_selection.rfe.self.n_features_->numpy.ones(n_features, dtype=np.bool).sum()
A:sklearn.feature_selection.rfe.rfe->RFE(estimator=self.estimator, n_features_to_select=k + 1, step=self.step, estimator_params=self.estimator_params)
A:sklearn.feature_selection.rfe.cv->check_cv(self.cv, X, y, is_classifier(self.estimator))
A:sklearn.feature_selection.rfe.scorer->check_scoring(self.estimator, scoring=self.scoring, loss_func=self.loss_func)
A:sklearn.feature_selection.rfe.scores->numpy.zeros(X.shape[1])
A:sklearn.feature_selection.rfe.(X_train, y_train)->_safe_split(self.estimator, X, y, train)
A:sklearn.feature_selection.rfe.(X_test, y_test)->_safe_split(self.estimator, X, y, test, train)
A:sklearn.feature_selection.rfe.score->_score(estimator, X_test[:, mask], y_test, scorer)
A:sklearn.feature_selection.rfe.k->numpy.argmax(scores)
sklearn.feature_selection.RFE(self,estimator,n_features_to_select=None,step=1,estimator_params={},verbose=0)
sklearn.feature_selection.RFE._get_support_mask(self)
sklearn.feature_selection.RFE.decision_function(self,X)
sklearn.feature_selection.RFE.fit(self,X,y)
sklearn.feature_selection.RFE.predict(self,X)
sklearn.feature_selection.RFE.predict_proba(self,X)
sklearn.feature_selection.RFE.score(self,X,y)
sklearn.feature_selection.RFECV(self,estimator,step=1,cv=None,scoring=None,loss_func=None,estimator_params={},verbose=0)
sklearn.feature_selection.RFECV.fit(self,X,y)
sklearn.feature_selection.rfe.RFE(self,estimator,n_features_to_select=None,step=1,estimator_params={},verbose=0)
sklearn.feature_selection.rfe.RFE.__init__(self,estimator,n_features_to_select=None,step=1,estimator_params={},verbose=0)
sklearn.feature_selection.rfe.RFE._get_support_mask(self)
sklearn.feature_selection.rfe.RFE.decision_function(self,X)
sklearn.feature_selection.rfe.RFE.fit(self,X,y)
sklearn.feature_selection.rfe.RFE.predict(self,X)
sklearn.feature_selection.rfe.RFE.predict_proba(self,X)
sklearn.feature_selection.rfe.RFE.score(self,X,y)
sklearn.feature_selection.rfe.RFECV(self,estimator,step=1,cv=None,scoring=None,loss_func=None,estimator_params={},verbose=0)
sklearn.feature_selection.rfe.RFECV.__init__(self,estimator,step=1,cv=None,scoring=None,loss_func=None,estimator_params={},verbose=0)
sklearn.feature_selection.rfe.RFECV.fit(self,X,y)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_selection/base.py----------------------------------------
A:sklearn.feature_selection.base.mask->self.get_support()
A:sklearn.feature_selection.base.X->array2d(X)
A:sklearn.feature_selection.base.col_nonzeros->self.inverse_transform(np.diff(X.indptr)).ravel()
A:sklearn.feature_selection.base.indptr->numpy.concatenate([[0], np.cumsum(col_nonzeros)])
A:sklearn.feature_selection.base.Xt->numpy.zeros((X.shape[0], support.size), dtype=X.dtype)
A:sklearn.feature_selection.base.support->self.get_support()
sklearn.feature_selection.base.SelectorMixin(six.with_metaclass(ABCMeta,TransformerMixin))
sklearn.feature_selection.base.SelectorMixin._get_support_mask(self)
sklearn.feature_selection.base.SelectorMixin.get_support(self,indices=False)
sklearn.feature_selection.base.SelectorMixin.inverse_transform(self,X)
sklearn.feature_selection.base.SelectorMixin.transform(self,X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_selection/variance_threshold.py----------------------------------------
A:sklearn.feature_selection.variance_threshold.X->atleast2d_or_csr(X, dtype=np.float64)
A:sklearn.feature_selection.variance_threshold.(_, self.variances_)->csr_mean_variance_axis0(X)
A:sklearn.feature_selection.variance_threshold.self.variances_->numpy.var(X, axis=0)
sklearn.feature_selection.VarianceThreshold(self,threshold=0.0)
sklearn.feature_selection.VarianceThreshold._get_support_mask(self)
sklearn.feature_selection.VarianceThreshold.fit(self,X,y=None)
sklearn.feature_selection.variance_threshold.VarianceThreshold(self,threshold=0.0)
sklearn.feature_selection.variance_threshold.VarianceThreshold.__init__(self,threshold=0.0)
sklearn.feature_selection.variance_threshold.VarianceThreshold._get_support_mask(self)
sklearn.feature_selection.variance_threshold.VarianceThreshold.fit(self,X,y=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_selection/selector_mixin.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_selection/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_selection/univariate_selection.py----------------------------------------
A:sklearn.feature_selection.univariate_selection.scores->_clean_nans(self.scores_)
A:sklearn.feature_selection.univariate_selection.n_classes->len(args)
A:sklearn.feature_selection.univariate_selection.n_samples_per_class->numpy.array([a.shape[0] for a in args])
A:sklearn.feature_selection.univariate_selection.n_samples->numpy.sum(n_samples_per_class)
A:sklearn.feature_selection.univariate_selection.ss_alldata->sum((safe_sqr(a).sum(axis=0) for a in args))
A:sklearn.feature_selection.univariate_selection.f->numpy.asarray(f).ravel()
A:sklearn.feature_selection.univariate_selection.prob->scipy.stats.fprob(dfbn, dfwn, f)
A:sklearn.feature_selection.univariate_selection.(X, y)->check_arrays(X, y)
A:sklearn.feature_selection.univariate_selection.f_obs->numpy.asarray(f_obs, dtype=np.float64)
A:sklearn.feature_selection.univariate_selection.k->len(f_obs)
A:sklearn.feature_selection.univariate_selection.chisq->chisq.sum(axis=0).sum(axis=0)
A:sklearn.feature_selection.univariate_selection.X->X.copy('F').copy('F')
A:sklearn.feature_selection.univariate_selection.Y->numpy.append(1 - Y, Y, axis=1)
A:sklearn.feature_selection.univariate_selection.observed->safe_sparse_dot(Y.T, X)
A:sklearn.feature_selection.univariate_selection.feature_count->array2d(X.sum(axis=0))
A:sklearn.feature_selection.univariate_selection.class_prob->array2d(Y.mean(axis=0))
A:sklearn.feature_selection.univariate_selection.expected->numpy.dot(class_prob.T, feature_count)
A:sklearn.feature_selection.univariate_selection.y->y.ravel().ravel()
A:sklearn.feature_selection.univariate_selection.corr->safe_sparse_dot(y, X)
A:sklearn.feature_selection.univariate_selection.pv->scipy.stats.f.sf(F, 1, degrees_of_freedom)
A:sklearn.feature_selection.univariate_selection.(self.scores_, self.pvalues_)->self.score_func(X, y)
A:sklearn.feature_selection.univariate_selection.self.scores_->numpy.asarray(self.scores_)
A:sklearn.feature_selection.univariate_selection.self.pvalues_->numpy.asarray(self.pvalues_)
A:sklearn.feature_selection.univariate_selection.treshold->scipy.stats.scoreatpercentile(scores, 100 - self.percentile)
A:sklearn.feature_selection.univariate_selection.mask->numpy.zeros(scores.shape, dtype=bool)
A:sklearn.feature_selection.univariate_selection.sv->numpy.sort(self.pvalues_)
A:sklearn.feature_selection.univariate_selection.threshold->sv[sv < alpha * np.arange(len(self.pvalues_))].max()
A:sklearn.feature_selection.univariate_selection.selector->self._make_selector()
A:sklearn.feature_selection.univariate_selection.possible_params->self._make_selector()._get_param_names()
sklearn.feature_selection.GenericUnivariateSelect(self,score_func=f_classif,mode='percentile',param=1e-05)
sklearn.feature_selection.GenericUnivariateSelect._check_params(self,X,y)
sklearn.feature_selection.GenericUnivariateSelect._get_support_mask(self)
sklearn.feature_selection.GenericUnivariateSelect._make_selector(self)
sklearn.feature_selection.SelectFdr(self,score_func=f_classif,alpha=0.05)
sklearn.feature_selection.SelectFdr._get_support_mask(self)
sklearn.feature_selection.SelectFpr(self,score_func=f_classif,alpha=0.05)
sklearn.feature_selection.SelectFpr._get_support_mask(self)
sklearn.feature_selection.SelectFwe(self,score_func=f_classif,alpha=0.05)
sklearn.feature_selection.SelectFwe._get_support_mask(self)
sklearn.feature_selection.SelectKBest(self,score_func=f_classif,k=10)
sklearn.feature_selection.SelectKBest._check_params(self,X,y)
sklearn.feature_selection.SelectKBest._get_support_mask(self)
sklearn.feature_selection.SelectPercentile(self,score_func=f_classif,percentile=10)
sklearn.feature_selection.SelectPercentile._check_params(self,X,y)
sklearn.feature_selection.SelectPercentile._get_support_mask(self)
sklearn.feature_selection.chi2(X,y)
sklearn.feature_selection.f_classif(X,y)
sklearn.feature_selection.f_oneway(*args)
sklearn.feature_selection.f_regression(X,y,center=True)
sklearn.feature_selection.univariate_selection.GenericUnivariateSelect(self,score_func=f_classif,mode='percentile',param=1e-05)
sklearn.feature_selection.univariate_selection.GenericUnivariateSelect.__init__(self,score_func=f_classif,mode='percentile',param=1e-05)
sklearn.feature_selection.univariate_selection.GenericUnivariateSelect._check_params(self,X,y)
sklearn.feature_selection.univariate_selection.GenericUnivariateSelect._get_support_mask(self)
sklearn.feature_selection.univariate_selection.GenericUnivariateSelect._make_selector(self)
sklearn.feature_selection.univariate_selection.SelectFdr(self,score_func=f_classif,alpha=0.05)
sklearn.feature_selection.univariate_selection.SelectFdr.__init__(self,score_func=f_classif,alpha=0.05)
sklearn.feature_selection.univariate_selection.SelectFdr._get_support_mask(self)
sklearn.feature_selection.univariate_selection.SelectFpr(self,score_func=f_classif,alpha=0.05)
sklearn.feature_selection.univariate_selection.SelectFpr.__init__(self,score_func=f_classif,alpha=0.05)
sklearn.feature_selection.univariate_selection.SelectFpr._get_support_mask(self)
sklearn.feature_selection.univariate_selection.SelectFwe(self,score_func=f_classif,alpha=0.05)
sklearn.feature_selection.univariate_selection.SelectFwe.__init__(self,score_func=f_classif,alpha=0.05)
sklearn.feature_selection.univariate_selection.SelectFwe._get_support_mask(self)
sklearn.feature_selection.univariate_selection.SelectKBest(self,score_func=f_classif,k=10)
sklearn.feature_selection.univariate_selection.SelectKBest.__init__(self,score_func=f_classif,k=10)
sklearn.feature_selection.univariate_selection.SelectKBest._check_params(self,X,y)
sklearn.feature_selection.univariate_selection.SelectKBest._get_support_mask(self)
sklearn.feature_selection.univariate_selection.SelectPercentile(self,score_func=f_classif,percentile=10)
sklearn.feature_selection.univariate_selection.SelectPercentile.__init__(self,score_func=f_classif,percentile=10)
sklearn.feature_selection.univariate_selection.SelectPercentile._check_params(self,X,y)
sklearn.feature_selection.univariate_selection.SelectPercentile._get_support_mask(self)
sklearn.feature_selection.univariate_selection._BaseFilter(self,score_func)
sklearn.feature_selection.univariate_selection._BaseFilter.__init__(self,score_func)
sklearn.feature_selection.univariate_selection._BaseFilter._check_params(self,X,y)
sklearn.feature_selection.univariate_selection._BaseFilter.fit(self,X,y)
sklearn.feature_selection.univariate_selection._chisquare(f_obs,f_exp)
sklearn.feature_selection.univariate_selection._clean_nans(scores)
sklearn.feature_selection.univariate_selection.chi2(X,y)
sklearn.feature_selection.univariate_selection.f_classif(X,y)
sklearn.feature_selection.univariate_selection.f_oneway(*args)
sklearn.feature_selection.univariate_selection.f_regression(X,y,center=True)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_selection/tests/test_base.py----------------------------------------
A:sklearn.feature_selection.tests.test_base.X->numpy.arange(20).reshape(2, 10)
A:sklearn.feature_selection.tests.test_base.mask->numpy.zeros(self.n_input_feats, dtype=bool)
A:sklearn.feature_selection.tests.test_base.Xt->numpy.arange(0, 20, 2).reshape(2, 5)
A:sklearn.feature_selection.tests.test_base.Xinv->numpy.arange(20).reshape(2, 10).copy()
A:sklearn.feature_selection.tests.test_base.feature_names->list('ABCDEFGHIJ')
A:sklearn.feature_selection.tests.test_base.feature_names_inv->numpy.array(feature_names)
A:sklearn.feature_selection.tests.test_base.sel->StepSelector()
A:sklearn.feature_selection.tests.test_base.Xt_actual->StepSelector().fit(sparse(X)).transform(sparse(X))
A:sklearn.feature_selection.tests.test_base.Xt_actual2->StepSelector().fit_transform(sparse(X))
A:sklearn.feature_selection.tests.test_base.names_t_actual->StepSelector().transform(feature_names)
A:sklearn.feature_selection.tests.test_base.Xinv_actual->StepSelector().fit(sparse(X)).inverse_transform(sparse(Xt))
A:sklearn.feature_selection.tests.test_base.names_inv_actual->StepSelector().inverse_transform(feature_names_t)
sklearn.feature_selection.tests.test_base.StepSelector(self,step=2)
sklearn.feature_selection.tests.test_base.StepSelector.__init__(self,step=2)
sklearn.feature_selection.tests.test_base.StepSelector._get_support_mask(self)
sklearn.feature_selection.tests.test_base.StepSelector.fit(self,X,y=None)
sklearn.feature_selection.tests.test_base.test_get_support()
sklearn.feature_selection.tests.test_base.test_inverse_transform_dense()
sklearn.feature_selection.tests.test_base.test_inverse_transform_sparse()
sklearn.feature_selection.tests.test_base.test_transform_dense()
sklearn.feature_selection.tests.test_base.test_transform_sparse()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_selection/tests/test_rfe.py----------------------------------------
A:sklearn.feature_selection.tests.test_rfe.generator->check_random_state(0)
A:sklearn.feature_selection.tests.test_rfe.iris->load_iris()
A:sklearn.feature_selection.tests.test_rfe.clf->SVC(kernel='linear')
A:sklearn.feature_selection.tests.test_rfe.rfe->RFE(estimator=clf, n_features_to_select=4, step=0.1)
A:sklearn.feature_selection.tests.test_rfe.y_pred->RFE(estimator=clf, n_features_to_select=4, step=0.1).fit(X, y).predict(X)
A:sklearn.feature_selection.tests.test_rfe.y_pred2->RFE(estimator=clf, n_features_to_select=4, step=0.1).fit(X, y).predict(X)
A:sklearn.feature_selection.tests.test_rfe.X_sparse->scipy.sparse.csr_matrix(X)
A:sklearn.feature_selection.tests.test_rfe.X_r->RFECV(estimator=SVC(kernel='linear'), step=1, cv=5, scoring=test_scorer).transform(X)
A:sklearn.feature_selection.tests.test_rfe.clf_sparse->SVC(kernel='linear')
A:sklearn.feature_selection.tests.test_rfe.rfe_sparse->RFE(estimator=clf_sparse, n_features_to_select=4, step=0.1)
A:sklearn.feature_selection.tests.test_rfe.X_r_sparse->RFECV(estimator=SVC(kernel='linear'), step=1, cv=5).transform(X_sparse)
A:sklearn.feature_selection.tests.test_rfe.y->list(iris.target)
A:sklearn.feature_selection.tests.test_rfe.rfecv->RFECV(estimator=SVC(kernel='linear'), step=1, cv=5, scoring=test_scorer)
A:sklearn.feature_selection.tests.test_rfe.rfecv_sparse->RFECV(estimator=SVC(kernel='linear'), step=1, cv=5)
sklearn.feature_selection.tests.test_rfe.test_rfe()
sklearn.feature_selection.tests.test_rfe.test_rfe_set_params()
sklearn.feature_selection.tests.test_rfe.test_rfecv()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_selection/tests/test_variance_threshold.py----------------------------------------
A:sklearn.feature_selection.tests.test_variance_threshold.sel->VarianceThreshold().fit(X)
A:sklearn.feature_selection.tests.test_variance_threshold.X->VarianceThreshold(threshold=0.4).fit_transform(X)
sklearn.feature_selection.tests.test_variance_threshold.test_variance_threshold()
sklearn.feature_selection.tests.test_variance_threshold.test_zero_variance()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_selection/tests/test_from_model.py----------------------------------------
A:sklearn.feature_selection.tests.test_from_model.iris->load_iris()
A:sklearn.feature_selection.tests.test_from_model.X->func(iris.data)
A:sklearn.feature_selection.tests.test_from_model.X_new->SGDClassifier(alpha=0.1, n_iter=10, shuffle=True, random_state=None).transform(X, thresh)
A:sklearn.feature_selection.tests.test_from_model.pred->SGDClassifier(alpha=0.1, n_iter=10, shuffle=True, random_state=None).predict(X_new)
A:sklearn.feature_selection.tests.test_from_model.clf->SGDClassifier(alpha=0.1, n_iter=10, shuffle=True, random_state=None)
sklearn.feature_selection.tests.test_from_model.test_invalid_input()
sklearn.feature_selection.tests.test_from_model.test_transform_linear_model()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_selection/tests/test_chi2.py----------------------------------------
A:sklearn.feature_selection.tests.test_chi2.chi2->mkchi2(k=2).fit(Xsp, y)
A:sklearn.feature_selection.tests.test_chi2.Xsp->csr_matrix(X, dtype=np.float)
A:sklearn.feature_selection.tests.test_chi2.Xtrans->Xtrans.toarray().toarray()
A:sklearn.feature_selection.tests.test_chi2.Xtrans2->mkchi2(k=2).fit_transform(Xsp, y).toarray()
A:sklearn.feature_selection.tests.test_chi2.Xcoo->coo_matrix(X)
A:sklearn.feature_selection.tests.test_chi2.obs->numpy.array([[2.0, 2.0], [1.0, 1.0]])
A:sklearn.feature_selection.tests.test_chi2.exp->numpy.array([[1.5, 1.5], [1.5, 1.5]])
A:sklearn.feature_selection.tests.test_chi2.(chi_scp, p_scp)->scipy.stats.chisquare(obs, exp)
A:sklearn.feature_selection.tests.test_chi2.(chi_our, p_our)->_chisquare(obs, exp)
sklearn.feature_selection.tests.test_chi2.mkchi2(k)
sklearn.feature_selection.tests.test_chi2.test_chi2()
sklearn.feature_selection.tests.test_chi2.test_chi2_coo()
sklearn.feature_selection.tests.test_chi2.test_chi2_negative()
sklearn.feature_selection.tests.test_chi2.test_chisquare()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_selection/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/feature_selection/tests/test_feature_select.py----------------------------------------
A:sklearn.feature_selection.tests.test_feature_select.rng->numpy.random.RandomState(0)
A:sklearn.feature_selection.tests.test_feature_select.X1->ignore_warnings(sel.fit_transform)([X], y)
A:sklearn.feature_selection.tests.test_feature_select.(f, pv)->scipy.stats.f_oneway(X1, X2)
A:sklearn.feature_selection.tests.test_feature_select.(f2, pv2)->f_oneway(X1, X2)
A:sklearn.feature_selection.tests.test_feature_select.X->scipy.sparse.csr_matrix(X)
A:sklearn.feature_selection.tests.test_feature_select.y->numpy.arange(10).astype(np.int)
A:sklearn.feature_selection.tests.test_feature_select.(fint, pint)->f_oneway(X, y)
A:sklearn.feature_selection.tests.test_feature_select.(f, p)->f_oneway(X.astype(np.float), y)
A:sklearn.feature_selection.tests.test_feature_select.(X, y)->make_regression(n_samples=200, n_features=20, n_informative=5, shuffle=False, random_state=0)
A:sklearn.feature_selection.tests.test_feature_select.(F, pv)->f_classif(X, y)
A:sklearn.feature_selection.tests.test_feature_select.(F_sparse, pv_sparse)->f_regression(sparse.csr_matrix(X), y, center=False)
A:sklearn.feature_selection.tests.test_feature_select.(F1, pv1)->f_regression(X, y)
A:sklearn.feature_selection.tests.test_feature_select.(F2, pv2)->f_regression(X, y.astype(np.float))
A:sklearn.feature_selection.tests.test_feature_select.Y->numpy.ones(n_samples)
A:sklearn.feature_selection.tests.test_feature_select.(F1, _)->f_regression(X, Y, center=True)
A:sklearn.feature_selection.tests.test_feature_select.(F2, _)->f_regression(X, Y, center=False)
A:sklearn.feature_selection.tests.test_feature_select.univariate_filter->SelectFwe(f_regression, alpha=0.01)
A:sklearn.feature_selection.tests.test_feature_select.X_r->SelectFwe(f_regression, alpha=0.01).fit(X, y).transform(X)
A:sklearn.feature_selection.tests.test_feature_select.X_r2->GenericUnivariateSelect(f_regression, mode='fwe', param=0.01).fit(X, y).transform(X)
A:sklearn.feature_selection.tests.test_feature_select.support->SelectFwe(f_regression, alpha=0.01).get_support()
A:sklearn.feature_selection.tests.test_feature_select.gtruth->numpy.zeros(20)
A:sklearn.feature_selection.tests.test_feature_select.X_r2inv->SelectFwe(f_regression, alpha=0.01).inverse_transform(X_r2)
A:sklearn.feature_selection.tests.test_feature_select.support_mask->safe_mask(X_r2inv, support)
A:sklearn.feature_selection.tests.test_feature_select.X_2->scipy.sparse.csr_matrix(X).copy()
A:sklearn.feature_selection.tests.test_feature_select.sel->SelectKBest(chi2, k=n_features).fit(X_train, y_train)
A:sklearn.feature_selection.tests.test_feature_select.X2->ignore_warnings(sel.fit_transform)([X], y)
A:sklearn.feature_selection.tests.test_feature_select.X0->numpy.array([[10000, 9999, 9998], [1, 1, 1]])
A:sklearn.feature_selection.tests.test_feature_select.Xt->SelectPercentile(chi2, percentile=67).fit_transform(X, y)
A:sklearn.feature_selection.tests.test_feature_select.X_train->numpy.array([[0, 0, 0], [1, 1, 1]])
A:sklearn.feature_selection.tests.test_feature_select.X_test->SelectKBest(chi2, k=n_features).fit(X_train, y_train).transform([0, 1, 2])
sklearn.feature_selection.tests.test_feature_select.assert_best_scores_kept(score_filter)
sklearn.feature_selection.tests.test_feature_select.test_f_classif()
sklearn.feature_selection.tests.test_feature_select.test_f_classif_multi_class()
sklearn.feature_selection.tests.test_feature_select.test_f_oneway_ints()
sklearn.feature_selection.tests.test_feature_select.test_f_oneway_vs_scipy_stats()
sklearn.feature_selection.tests.test_feature_select.test_f_regression()
sklearn.feature_selection.tests.test_feature_select.test_f_regression_center()
sklearn.feature_selection.tests.test_feature_select.test_f_regression_input_dtype()
sklearn.feature_selection.tests.test_feature_select.test_invalid_k()
sklearn.feature_selection.tests.test_feature_select.test_invalid_percentile()
sklearn.feature_selection.tests.test_feature_select.test_nans()
sklearn.feature_selection.tests.test_feature_select.test_score_func_error()
sklearn.feature_selection.tests.test_feature_select.test_select_fdr_classif()
sklearn.feature_selection.tests.test_feature_select.test_select_fdr_regression()
sklearn.feature_selection.tests.test_feature_select.test_select_fpr_classif()
sklearn.feature_selection.tests.test_feature_select.test_select_fpr_regression()
sklearn.feature_selection.tests.test_feature_select.test_select_fwe_classif()
sklearn.feature_selection.tests.test_feature_select.test_select_fwe_regression()
sklearn.feature_selection.tests.test_feature_select.test_select_kbest_all()
sklearn.feature_selection.tests.test_feature_select.test_select_kbest_classif()
sklearn.feature_selection.tests.test_feature_select.test_select_kbest_regression()
sklearn.feature_selection.tests.test_feature_select.test_select_kbest_zero()
sklearn.feature_selection.tests.test_feature_select.test_select_percentile_classif()
sklearn.feature_selection.tests.test_feature_select.test_select_percentile_classif_sparse()
sklearn.feature_selection.tests.test_feature_select.test_select_percentile_regression()
sklearn.feature_selection.tests.test_feature_select.test_select_percentile_regression_full()
sklearn.feature_selection.tests.test_feature_select.test_selectkbest_tiebreaking()
sklearn.feature_selection.tests.test_feature_select.test_selectpercentile_tiebreaking()
sklearn.feature_selection.tests.test_feature_select.test_tied_pvalues()
sklearn.feature_selection.tests.test_feature_select.test_tied_scores()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/decomposition/sparse_pca.py----------------------------------------
A:sklearn.decomposition.sparse_pca.random_state->check_random_state(self.random_state)
A:sklearn.decomposition.sparse_pca.X->array2d(X)
A:sklearn.decomposition.sparse_pca.(Vt, _, E)->dict_learning(X.T, n_components, self.alpha, tol=self.tol, max_iter=self.max_iter, method=self.method, n_jobs=self.n_jobs, verbose=self.verbose, random_state=random_state, code_init=code_init, dict_init=dict_init)
A:sklearn.decomposition.sparse_pca.U->ridge_regression(self.components_.T, X.T, ridge_alpha, solver='cholesky')
A:sklearn.decomposition.sparse_pca.s->numpy.sqrt((U ** 2).sum(axis=0))
A:sklearn.decomposition.sparse_pca.(Vt, _)->dict_learning_online(X.T, n_components, alpha=self.alpha, n_iter=self.n_iter, return_code=True, dict_init=None, verbose=self.verbose, callback=self.callback, batch_size=self.batch_size, shuffle=self.shuffle, n_jobs=self.n_jobs, method=self.method, random_state=random_state)
sklearn.decomposition.MiniBatchSparsePCA(self,n_components=None,alpha=1,ridge_alpha=0.01,n_iter=100,callback=None,batch_size=3,verbose=False,shuffle=True,n_jobs=1,method='lars',random_state=None)
sklearn.decomposition.MiniBatchSparsePCA.fit(self,X,y=None)
sklearn.decomposition.SparsePCA(self,n_components=None,alpha=1,ridge_alpha=0.01,max_iter=1000,tol=1e-08,method='lars',n_jobs=1,U_init=None,V_init=None,verbose=False,random_state=None)
sklearn.decomposition.SparsePCA.fit(self,X,y=None)
sklearn.decomposition.SparsePCA.transform(self,X,ridge_alpha=None)
sklearn.decomposition.sparse_pca.MiniBatchSparsePCA(self,n_components=None,alpha=1,ridge_alpha=0.01,n_iter=100,callback=None,batch_size=3,verbose=False,shuffle=True,n_jobs=1,method='lars',random_state=None)
sklearn.decomposition.sparse_pca.MiniBatchSparsePCA.__init__(self,n_components=None,alpha=1,ridge_alpha=0.01,n_iter=100,callback=None,batch_size=3,verbose=False,shuffle=True,n_jobs=1,method='lars',random_state=None)
sklearn.decomposition.sparse_pca.MiniBatchSparsePCA.fit(self,X,y=None)
sklearn.decomposition.sparse_pca.SparsePCA(self,n_components=None,alpha=1,ridge_alpha=0.01,max_iter=1000,tol=1e-08,method='lars',n_jobs=1,U_init=None,V_init=None,verbose=False,random_state=None)
sklearn.decomposition.sparse_pca.SparsePCA.__init__(self,n_components=None,alpha=1,ridge_alpha=0.01,max_iter=1000,tol=1e-08,method='lars',n_jobs=1,U_init=None,V_init=None,verbose=False,random_state=None)
sklearn.decomposition.sparse_pca.SparsePCA.fit(self,X,y=None)
sklearn.decomposition.sparse_pca.SparsePCA.transform(self,X,ridge_alpha=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/decomposition/truncated_svd.py----------------------------------------
A:sklearn.decomposition.truncated_svd.X->array2d(X)
A:sklearn.decomposition.truncated_svd.random_state->check_random_state(self.random_state)
A:sklearn.decomposition.truncated_svd.(U, Sigma, VT)->randomized_svd(X, self.n_components, n_iter=self.n_iter, random_state=random_state)
A:sklearn.decomposition.truncated_svd.(U, VT)->svd_flip(U[:, ::-1], VT[::-1])
A:sklearn.decomposition.truncated_svd.X_transformed->numpy.dot(U, np.diag(Sigma))
A:sklearn.decomposition.truncated_svd.self.explained_variance_exp_var->numpy.var(X_transformed, axis=0)
A:sklearn.decomposition.truncated_svd.(_, full_var)->mean_variance_axis0(X)
A:sklearn.decomposition.truncated_svd.full_var->numpy.var(X, axis=0).sum()
sklearn.decomposition.TruncatedSVD(self,n_components=2,algorithm='randomized',n_iter=5,random_state=None,tol=0.0,n_iterations=None)
sklearn.decomposition.TruncatedSVD.fit(self,X,y=None)
sklearn.decomposition.TruncatedSVD.fit_transform(self,X,y=None)
sklearn.decomposition.TruncatedSVD.inverse_transform(self,X)
sklearn.decomposition.TruncatedSVD.n_iterations(self)
sklearn.decomposition.TruncatedSVD.transform(self,X)
sklearn.decomposition.truncated_svd.TruncatedSVD(self,n_components=2,algorithm='randomized',n_iter=5,random_state=None,tol=0.0,n_iterations=None)
sklearn.decomposition.truncated_svd.TruncatedSVD.__init__(self,n_components=2,algorithm='randomized',n_iter=5,random_state=None,tol=0.0,n_iterations=None)
sklearn.decomposition.truncated_svd.TruncatedSVD.fit(self,X,y=None)
sklearn.decomposition.truncated_svd.TruncatedSVD.fit_transform(self,X,y=None)
sklearn.decomposition.truncated_svd.TruncatedSVD.inverse_transform(self,X)
sklearn.decomposition.truncated_svd.TruncatedSVD.n_iterations(self)
sklearn.decomposition.truncated_svd.TruncatedSVD.transform(self,X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/decomposition/factor_analysis.py----------------------------------------
A:sklearn.decomposition.factor_analysis.X->array2d(X)
A:sklearn.decomposition.factor_analysis.self.mean_->numpy.mean(X, axis=0)
A:sklearn.decomposition.factor_analysis.nsqrt->sqrt(n_samples)
A:sklearn.decomposition.factor_analysis.var->numpy.var(X, axis=0)
A:sklearn.decomposition.factor_analysis.psi->numpy.maximum(var - np.sum(W ** 2, axis=0), SMALL)
A:sklearn.decomposition.factor_analysis.(_, s, V)->randomized_svd(X, n_components, random_state=random_state, n_iter=self.iterated_power)
A:sklearn.decomposition.factor_analysis.random_state->check_random_state(self.random_state)
A:sklearn.decomposition.factor_analysis.(s, V, unexp_var)->my_svd(X / (sqrt_psi * nsqrt))
A:sklearn.decomposition.factor_analysis.Ih->numpy.eye(len(self.components_))
A:sklearn.decomposition.factor_analysis.cov_z->scipy.linalg.inv(Ih + np.dot(Wpsi, self.components_.T))
A:sklearn.decomposition.factor_analysis.tmp->fast_dot(X_transformed, Wpsi.T)
A:sklearn.decomposition.factor_analysis.X_transformed->fast_dot(tmp, cov_z)
A:sklearn.decomposition.factor_analysis.cov->numpy.dot(self.components_.T, self.components_)
A:sklearn.decomposition.factor_analysis.precision->self.get_precision()
A:sklearn.decomposition.factor_analysis.log_like->numpy.zeros(X.shape[0])
sklearn.decomposition.FactorAnalysis(self,n_components=None,tol=0.01,copy=True,max_iter=1000,verbose=0,noise_variance_init=None,svd_method='randomized',iterated_power=3,random_state=0)
sklearn.decomposition.FactorAnalysis.fit(self,X,y=None)
sklearn.decomposition.FactorAnalysis.get_covariance(self)
sklearn.decomposition.FactorAnalysis.get_precision(self)
sklearn.decomposition.FactorAnalysis.score(self,X,y=None)
sklearn.decomposition.FactorAnalysis.score_samples(self,X)
sklearn.decomposition.FactorAnalysis.transform(self,X)
sklearn.decomposition.factor_analysis.FactorAnalysis(self,n_components=None,tol=0.01,copy=True,max_iter=1000,verbose=0,noise_variance_init=None,svd_method='randomized',iterated_power=3,random_state=0)
sklearn.decomposition.factor_analysis.FactorAnalysis.__init__(self,n_components=None,tol=0.01,copy=True,max_iter=1000,verbose=0,noise_variance_init=None,svd_method='randomized',iterated_power=3,random_state=0)
sklearn.decomposition.factor_analysis.FactorAnalysis.fit(self,X,y=None)
sklearn.decomposition.factor_analysis.FactorAnalysis.get_covariance(self)
sklearn.decomposition.factor_analysis.FactorAnalysis.get_precision(self)
sklearn.decomposition.factor_analysis.FactorAnalysis.score(self,X,y=None)
sklearn.decomposition.factor_analysis.FactorAnalysis.score_samples(self,X)
sklearn.decomposition.factor_analysis.FactorAnalysis.transform(self,X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/decomposition/pca.py----------------------------------------
A:sklearn.decomposition.pca.pl->numpy.sum(np.log(spectrum[:rank]))
A:sklearn.decomposition.pca.spectrum_->spectrum.copy()
A:sklearn.decomposition.pca.n_spectrum->len(spectrum)
A:sklearn.decomposition.pca.ll->numpy.empty(n_spectrum)
A:sklearn.decomposition.pca.ll[rank]->_assess_dimension_(spectrum, rank, n_samples, n_features)
A:sklearn.decomposition.pca.(U, S, V)->randomized_svd(X, n_components, n_iter=self.iterated_power, random_state=random_state)
A:sklearn.decomposition.pca.X->safe_sparse_dot(X, self.components_.T)
A:sklearn.decomposition.pca.self.mean_->numpy.mean(X, axis=0)
A:sklearn.decomposition.pca.n_components->_infer_dimension_(explained_variance_, n_samples, n_features)
A:sklearn.decomposition.pca.ratio_cumsum->explained_variance_ratio_.cumsum()
A:sklearn.decomposition.pca.self.noise_variance_->explained_variance_[n_components:].mean()
A:sklearn.decomposition.pca.exp_var_diff->numpy.maximum(exp_var - self.noise_variance_, 0.0)
A:sklearn.decomposition.pca.cov->numpy.dot(components_.T * exp_var_diff, components_)
A:sklearn.decomposition.pca.precision->self.get_precision()
A:sklearn.decomposition.pca.X_transformed->fast_dot(X, self.components_.T)
A:sklearn.decomposition.pca.log_like->numpy.zeros(X.shape[0])
A:sklearn.decomposition.pca.explained_variance->self.explained_variance_.copy()
A:sklearn.decomposition.pca.self.covariance_->numpy.dot(self.components_[:n_components].T * explained_variance, self.components_[:n_components])
A:sklearn.decomposition.pca.self.precision_->scipy.linalg.inv(self.covariance_)
A:sklearn.decomposition.pca.random_state->check_random_state(self.random_state)
A:sklearn.decomposition.pca.(_, full_var)->mean_variance_axis0(X)
A:sklearn.decomposition.pca.full_var->numpy.var(X, axis=0).sum()
A:sklearn.decomposition.pca.X_original->safe_sparse_dot(X, self.components_)
sklearn.decomposition.PCA(self,n_components=None,copy=True,whiten=False)
sklearn.decomposition.PCA._fit(self,X)
sklearn.decomposition.PCA.fit(self,X,y=None)
sklearn.decomposition.PCA.fit_transform(self,X,y=None)
sklearn.decomposition.PCA.get_covariance(self)
sklearn.decomposition.PCA.get_precision(self)
sklearn.decomposition.PCA.inverse_transform(self,X)
sklearn.decomposition.PCA.score(self,X,y=None)
sklearn.decomposition.PCA.score_samples(self,X)
sklearn.decomposition.PCA.transform(self,X)
sklearn.decomposition.ProbabilisticPCA(PCA)
sklearn.decomposition.ProbabilisticPCA.fit(self,X,y=None,homoscedastic=True)
sklearn.decomposition.ProbabilisticPCA.score(self,X,y=None)
sklearn.decomposition.RandomizedPCA(self,n_components=None,copy=True,iterated_power=3,whiten=False,random_state=None)
sklearn.decomposition.RandomizedPCA._fit(self,X)
sklearn.decomposition.RandomizedPCA.fit(self,X,y=None)
sklearn.decomposition.RandomizedPCA.fit_transform(self,X,y=None)
sklearn.decomposition.RandomizedPCA.inverse_transform(self,X,y=None)
sklearn.decomposition.RandomizedPCA.transform(self,X,y=None)
sklearn.decomposition.pca.PCA(self,n_components=None,copy=True,whiten=False)
sklearn.decomposition.pca.PCA.__init__(self,n_components=None,copy=True,whiten=False)
sklearn.decomposition.pca.PCA._fit(self,X)
sklearn.decomposition.pca.PCA.fit(self,X,y=None)
sklearn.decomposition.pca.PCA.fit_transform(self,X,y=None)
sklearn.decomposition.pca.PCA.get_covariance(self)
sklearn.decomposition.pca.PCA.get_precision(self)
sklearn.decomposition.pca.PCA.inverse_transform(self,X)
sklearn.decomposition.pca.PCA.score(self,X,y=None)
sklearn.decomposition.pca.PCA.score_samples(self,X)
sklearn.decomposition.pca.PCA.transform(self,X)
sklearn.decomposition.pca.ProbabilisticPCA(PCA)
sklearn.decomposition.pca.ProbabilisticPCA.fit(self,X,y=None,homoscedastic=True)
sklearn.decomposition.pca.ProbabilisticPCA.score(self,X,y=None)
sklearn.decomposition.pca.RandomizedPCA(self,n_components=None,copy=True,iterated_power=3,whiten=False,random_state=None)
sklearn.decomposition.pca.RandomizedPCA.__init__(self,n_components=None,copy=True,iterated_power=3,whiten=False,random_state=None)
sklearn.decomposition.pca.RandomizedPCA._fit(self,X)
sklearn.decomposition.pca.RandomizedPCA.fit(self,X,y=None)
sklearn.decomposition.pca.RandomizedPCA.fit_transform(self,X,y=None)
sklearn.decomposition.pca.RandomizedPCA.inverse_transform(self,X,y=None)
sklearn.decomposition.pca.RandomizedPCA.transform(self,X,y=None)
sklearn.decomposition.pca._assess_dimension_(spectrum,rank,n_samples,n_features)
sklearn.decomposition.pca._infer_dimension_(spectrum,n_samples,n_features)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/decomposition/kernel_pca.py----------------------------------------
A:sklearn.decomposition.kernel_pca.self._centerer->KernelCenterer()
A:sklearn.decomposition.kernel_pca.K->self._get_kernel(X, self.X_transformed_fit_)
A:sklearn.decomposition.kernel_pca.n_components->min(K.shape[0], self.n_components)
A:sklearn.decomposition.kernel_pca.(self.lambdas_, self.alphas_)->eigsh(K, n_components, which='LA', tol=self.tol, maxiter=self.max_iter)
A:sklearn.decomposition.kernel_pca.self.dual_coef_->scipy.linalg.solve(K, X, sym_pos=True, overwrite_a=True)
A:sklearn.decomposition.kernel_pca.sqrt_lambdas->numpy.diag(np.sqrt(self.lambdas_))
A:sklearn.decomposition.kernel_pca.X_transformed->numpy.dot(self.alphas_, sqrt_lambdas)
sklearn.decomposition.KernelPCA(self,n_components=None,kernel='linear',gamma=None,degree=3,coef0=1,kernel_params=None,alpha=1.0,fit_inverse_transform=False,eigen_solver='auto',tol=0,max_iter=None,remove_zero_eig=False)
sklearn.decomposition.KernelPCA._fit_inverse_transform(self,X_transformed,X)
sklearn.decomposition.KernelPCA._fit_transform(self,K)
sklearn.decomposition.KernelPCA._get_kernel(self,X,Y=None)
sklearn.decomposition.KernelPCA._pairwise(self)
sklearn.decomposition.KernelPCA.fit(self,X,y=None)
sklearn.decomposition.KernelPCA.fit_transform(self,X,y=None,**params)
sklearn.decomposition.KernelPCA.inverse_transform(self,X)
sklearn.decomposition.KernelPCA.transform(self,X)
sklearn.decomposition.kernel_pca.KernelPCA(self,n_components=None,kernel='linear',gamma=None,degree=3,coef0=1,kernel_params=None,alpha=1.0,fit_inverse_transform=False,eigen_solver='auto',tol=0,max_iter=None,remove_zero_eig=False)
sklearn.decomposition.kernel_pca.KernelPCA.__init__(self,n_components=None,kernel='linear',gamma=None,degree=3,coef0=1,kernel_params=None,alpha=1.0,fit_inverse_transform=False,eigen_solver='auto',tol=0,max_iter=None,remove_zero_eig=False)
sklearn.decomposition.kernel_pca.KernelPCA._fit_inverse_transform(self,X_transformed,X)
sklearn.decomposition.kernel_pca.KernelPCA._fit_transform(self,K)
sklearn.decomposition.kernel_pca.KernelPCA._get_kernel(self,X,Y=None)
sklearn.decomposition.kernel_pca.KernelPCA._pairwise(self)
sklearn.decomposition.kernel_pca.KernelPCA.fit(self,X,y=None)
sklearn.decomposition.kernel_pca.KernelPCA.fit_transform(self,X,y=None,**params)
sklearn.decomposition.kernel_pca.KernelPCA.inverse_transform(self,X)
sklearn.decomposition.kernel_pca.KernelPCA.transform(self,X)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/decomposition/nmf.py----------------------------------------
A:sklearn.decomposition.nmf.sqrt_n->numpy.sqrt(len(x))
A:sklearn.decomposition.nmf.(U, S, V)->randomized_svd(X, n_components)
A:sklearn.decomposition.nmf.lbd->numpy.sqrt(S[j] * sigma)
A:sklearn.decomposition.nmf.avg->atleast2d_or_csr(X).mean()
A:sklearn.decomposition.nmf.random_state->check_random_state(random_state)
A:sklearn.decomposition.nmf.W[W == 0]->abs(avg * random_state.randn(len(W[W == 0])) / 100)
A:sklearn.decomposition.nmf.H[H == 0]->abs(avg * random_state.randn(len(H[H == 0])) / 100)
A:sklearn.decomposition.nmf.WtV->safe_sparse_dot(W.T, V)
A:sklearn.decomposition.nmf.WtW->numpy.dot(W.T, W)
A:sklearn.decomposition.nmf.gradd->numpy.dot(grad.ravel(), d.ravel())
A:sklearn.decomposition.nmf.dQd->numpy.dot(np.dot(WtW, d).ravel(), d.ravel())
A:sklearn.decomposition.nmf.(W, H)->self._init(X)
A:sklearn.decomposition.nmf.rng->check_random_state(random_state)
A:sklearn.decomposition.nmf.W->check_random_state(random_state).randn(n_samples, self.n_components_)
A:sklearn.decomposition.nmf.H->check_random_state(random_state).randn(self.n_components_, n_features)
A:sklearn.decomposition.nmf.(W, gradW, iterW)->self._update_W(X, H, W, tolW)
A:sklearn.decomposition.nmf.(H, gradH, iterH)->self._update_H(X, H, W, tolH)
A:sklearn.decomposition.nmf.X->atleast2d_or_csr(X)
A:sklearn.decomposition.nmf.init_grad->norm(np.r_[gradW, gradH.T])
A:sklearn.decomposition.nmf.proj_norm->norm(np.r_[gradW[np.logical_or(gradW < 0, W > 0)], gradH[np.logical_or(gradH < 0, H > 0)]])
A:sklearn.decomposition.nmf.error->sqrt(sqnorm_X + norm_WHT - 2.0 * cross_prod)
A:sklearn.decomposition.nmf.sqnorm_X->numpy.dot(X.data, X.data)
A:sklearn.decomposition.nmf.norm_WHT->trace_dot(np.dot(np.dot(W.T, W), H), H)
A:sklearn.decomposition.nmf.cross_prod->trace_dot(X * H.T, W)
A:sklearn.decomposition.nmf.self.comp_sparseness_->_sparseness(H.ravel())
A:sklearn.decomposition.nmf.self.data_sparseness_->_sparseness(W.ravel())
A:sklearn.decomposition.nmf.(X,)->check_arrays(X, sparse_format='csc')
A:sklearn.decomposition.nmf.Wt->numpy.zeros((self.n_components_, X.shape[0]))
A:sklearn.decomposition.nmf.(Wt, _, _)->_nls_subproblem(X.T, self.components_.T, Wt, tol=self.tol, max_iter=self.nls_max_iter)
A:sklearn.decomposition.nmf.(Wt[:, j], _)->nnls(self.components_.T, X[j, :])
sklearn.decomposition.NMF(ProjectedGradientNMF)
sklearn.decomposition.ProjectedGradientNMF(self,n_components=None,init=None,sparseness=None,beta=1,eta=0.1,tol=0.0001,max_iter=200,nls_max_iter=2000,random_state=None)
sklearn.decomposition.ProjectedGradientNMF._init(self,X)
sklearn.decomposition.ProjectedGradientNMF._update_H(self,X,H,W,tolH)
sklearn.decomposition.ProjectedGradientNMF._update_W(self,X,H,W,tolW)
sklearn.decomposition.ProjectedGradientNMF.fit(self,X,y=None,**params)
sklearn.decomposition.ProjectedGradientNMF.fit_transform(self,X,y=None)
sklearn.decomposition.ProjectedGradientNMF.transform(self,X)
sklearn.decomposition.nmf.NMF(ProjectedGradientNMF)
sklearn.decomposition.nmf.ProjectedGradientNMF(self,n_components=None,init=None,sparseness=None,beta=1,eta=0.1,tol=0.0001,max_iter=200,nls_max_iter=2000,random_state=None)
sklearn.decomposition.nmf.ProjectedGradientNMF.__init__(self,n_components=None,init=None,sparseness=None,beta=1,eta=0.1,tol=0.0001,max_iter=200,nls_max_iter=2000,random_state=None)
sklearn.decomposition.nmf.ProjectedGradientNMF._init(self,X)
sklearn.decomposition.nmf.ProjectedGradientNMF._update_H(self,X,H,W,tolH)
sklearn.decomposition.nmf.ProjectedGradientNMF._update_W(self,X,H,W,tolW)
sklearn.decomposition.nmf.ProjectedGradientNMF.fit(self,X,y=None,**params)
sklearn.decomposition.nmf.ProjectedGradientNMF.fit_transform(self,X,y=None)
sklearn.decomposition.nmf.ProjectedGradientNMF.transform(self,X)
sklearn.decomposition.nmf._initialize_nmf(X,n_components,variant=None,eps=1e-06,random_state=None)
sklearn.decomposition.nmf._nls_subproblem(V,W,H,tol,max_iter,sigma=0.01,beta=0.1)
sklearn.decomposition.nmf._sparseness(x)
sklearn.decomposition.nmf.check_non_negative(X,whom)
sklearn.decomposition.nmf.norm(x)
sklearn.decomposition.nmf.safe_vstack(Xs)
sklearn.decomposition.nmf.trace_dot(X,Y)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/decomposition/fastica_.py----------------------------------------
A:sklearn.decomposition.fastica_.(s, u)->scipy.linalg.eigh(np.dot(W, W.T))
A:sklearn.decomposition.fastica_.W->_ica_def(X1, **kwargs)
A:sklearn.decomposition.fastica_.w->w_init[j, :].copy()
A:sklearn.decomposition.fastica_.(gwtx, g_wtx)->g(fast_dot(W, X), fun_args)
A:sklearn.decomposition.fastica_.lim->max(abs(abs(np.diag(fast_dot(W1, W.T))) - 1))
A:sklearn.decomposition.fastica_.p_->float(X.shape[1])
A:sklearn.decomposition.fastica_.W1->_sym_decorrelation(fast_dot(gwtx, X.T) / p_ - g_wtx[:, np.newaxis] * W)
A:sklearn.decomposition.fastica_.alpha->fun_args.get('alpha', 1.0)
A:sklearn.decomposition.fastica_.gx->numpy.tanh(x, x)
A:sklearn.decomposition.fastica_.g_x->numpy.empty(x.shape[0])
A:sklearn.decomposition.fastica_.g_x[i]->(alpha * (1 - gx_i ** 2)).mean()
A:sklearn.decomposition.fastica_.exp->numpy.exp(-x ** 2 / 2)
A:sklearn.decomposition.fastica_.random_state->check_random_state(random_state)
A:sklearn.decomposition.fastica_.n_components->min(n, p)
A:sklearn.decomposition.fastica_.X_mean->fast_dot(X, self.mixing_.T).mean(axis=-1)
A:sklearn.decomposition.fastica_.(u, d, _)->scipy.linalg.svd(X, full_matrices=False)
A:sklearn.decomposition.fastica_.X1->as_float_array(X, copy=False)
A:sklearn.decomposition.fastica_.w_init->numpy.asarray(w_init)
A:sklearn.decomposition.fastica_.(whitening, unmixing, sources, X_mean)->fastica(X=X, n_components=self.n_components, algorithm=self.algorithm, whiten=self.whiten, fun=self.fun, fun_args=fun_args, max_iter=self.max_iter, tol=self.tol, w_init=self.w_init, random_state=self.random_state, return_X_mean=True, compute_sources=compute_sources)
A:sklearn.decomposition.fastica_.self.components_->numpy.dot(unmixing, whitening)
A:sklearn.decomposition.fastica_.self.mixing_->scipy.linalg.pinv(self.components_)
A:sklearn.decomposition.fastica_.X->fast_dot(X, self.mixing_.T)
sklearn.decomposition.FastICA(self,n_components=None,algorithm='parallel',whiten=True,fun='logcosh',fun_args=None,max_iter=200,tol=0.0001,w_init=None,random_state=None)
sklearn.decomposition.FastICA._fit(self,X,compute_sources=False)
sklearn.decomposition.FastICA.fit(self,X,y=None)
sklearn.decomposition.FastICA.fit_transform(self,X,y=None)
sklearn.decomposition.FastICA.get_mixing_matrix(self)
sklearn.decomposition.FastICA.inverse_transform(self,X,copy=True)
sklearn.decomposition.FastICA.sources_(self)
sklearn.decomposition.FastICA.transform(self,X,y=None,copy=True)
sklearn.decomposition.fastica(X,n_components=None,algorithm='parallel',whiten=True,fun='logcosh',fun_args=None,max_iter=200,tol=0.0001,w_init=None,random_state=None,return_X_mean=False,compute_sources=True)
sklearn.decomposition.fastica_.FastICA(self,n_components=None,algorithm='parallel',whiten=True,fun='logcosh',fun_args=None,max_iter=200,tol=0.0001,w_init=None,random_state=None)
sklearn.decomposition.fastica_.FastICA.__init__(self,n_components=None,algorithm='parallel',whiten=True,fun='logcosh',fun_args=None,max_iter=200,tol=0.0001,w_init=None,random_state=None)
sklearn.decomposition.fastica_.FastICA._fit(self,X,compute_sources=False)
sklearn.decomposition.fastica_.FastICA.fit(self,X,y=None)
sklearn.decomposition.fastica_.FastICA.fit_transform(self,X,y=None)
sklearn.decomposition.fastica_.FastICA.get_mixing_matrix(self)
sklearn.decomposition.fastica_.FastICA.inverse_transform(self,X,copy=True)
sklearn.decomposition.fastica_.FastICA.sources_(self)
sklearn.decomposition.fastica_.FastICA.transform(self,X,y=None,copy=True)
sklearn.decomposition.fastica_._cube(x,fun_args)
sklearn.decomposition.fastica_._exp(x,fun_args)
sklearn.decomposition.fastica_._gs_decorrelation(w,W,j)
sklearn.decomposition.fastica_._ica_def(X,tol,g,fun_args,max_iter,w_init)
sklearn.decomposition.fastica_._ica_par(X,tol,g,fun_args,max_iter,w_init)
sklearn.decomposition.fastica_._logcosh(x,fun_args=None)
sklearn.decomposition.fastica_._sym_decorrelation(W)
sklearn.decomposition.fastica_.fastica(X,n_components=None,algorithm='parallel',whiten=True,fun='logcosh',fun_args=None,max_iter=200,tol=0.0001,w_init=None,random_state=None,return_X_mean=False,compute_sources=True)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/decomposition/dict_learning.py----------------------------------------
A:sklearn.decomposition.dict_learning.cov->numpy.dot(dictionary, X.T)
A:sklearn.decomposition.dict_learning.err_mgt->numpy.seterr(all='ignore')
A:sklearn.decomposition.dict_learning.lasso_lars->LassoLars(alpha=alpha, fit_intercept=False, verbose=False, normalize=False, precompute=gram, fit_path=False)
A:sklearn.decomposition.dict_learning.clf->Lasso(alpha=alpha, fit_intercept=False, precompute=gram, max_iter=max_iter, warm_start=True)
A:sklearn.decomposition.dict_learning.lars->Lars(fit_intercept=False, verbose=False, normalize=False, precompute=gram, n_nonzero_coefs=int(regularization), fit_path=False)
A:sklearn.decomposition.dict_learning.dictionary->_update_dict(dictionary, B, A, verbose=verbose, random_state=random_state)
A:sklearn.decomposition.dict_learning.X->array2d(X)
A:sklearn.decomposition.dict_learning.gram->numpy.dot(dictionary, dictionary.T)
A:sklearn.decomposition.dict_learning.regularization->min(max(n_features / 10, 1), n_components)
A:sklearn.decomposition.dict_learning.code->sparse_encode(X, self.components_, algorithm=self.transform_algorithm, n_nonzero_coefs=self.transform_n_nonzero_coefs, alpha=self.transform_alpha, n_jobs=self.n_jobs)
A:sklearn.decomposition.dict_learning.slices->list(gen_even_slices(n_samples, n_jobs))
A:sklearn.decomposition.dict_learning.code_views->Parallel(n_jobs=n_jobs)((delayed(_sparse_encode)(X[this_slice], dictionary, gram, cov[:, this_slice], algorithm, regularization=regularization, copy_cov=copy_cov, init=init[this_slice] if init is not None else None, max_iter=max_iter) for this_slice in slices))
A:sklearn.decomposition.dict_learning.n_components->len(code)
A:sklearn.decomposition.dict_learning.random_state->check_random_state(self.random_state)
A:sklearn.decomposition.dict_learning.R->numpy.sum(R)
A:sklearn.decomposition.dict_learning.(ger,)->scipy.linalg.get_blas_funcs(('ger',), (dictionary, code))
A:sklearn.decomposition.dict_learning.dictionary[:, k]->check_random_state(self.random_state).randn(n_samples)
A:sklearn.decomposition.dict_learning.atom_norm_square->numpy.dot(dictionary[:, k], dictionary[:, k])
A:sklearn.decomposition.dict_learning.t0->time.time()
A:sklearn.decomposition.dict_learning.alpha->float(alpha)
A:sklearn.decomposition.dict_learning.n_jobs->cpu_count()
A:sklearn.decomposition.dict_learning.(code, S, dictionary)->scipy.linalg.svd(X, full_matrices=False)
A:sklearn.decomposition.dict_learning.r->len(dictionary)
A:sklearn.decomposition.dict_learning.(dictionary, residuals)->_update_dict(dictionary.T, X.T, code.T, verbose=verbose, return_r2=True, random_state=random_state)
A:sklearn.decomposition.dict_learning.(_, S, dictionary)->randomized_svd(X, n_components)
A:sklearn.decomposition.dict_learning.n_batches->floor(float(len(X)) / batch_size)
A:sklearn.decomposition.dict_learning.X_train->array2d(X).copy()
A:sklearn.decomposition.dict_learning.batches->itertools.cycle(batches)
A:sklearn.decomposition.dict_learning.A->inner_stats[0].copy()
A:sklearn.decomposition.dict_learning.B->inner_stats[1].copy()
A:sklearn.decomposition.dict_learning.theta->float(batch_size ** 2 + ii + 1 - batch_size)
A:sklearn.decomposition.dict_learning.split_code->numpy.empty((n_samples, 2 * n_features))
A:sklearn.decomposition.dict_learning.split_code[:, :n_features]->numpy.maximum(code, 0)
A:sklearn.decomposition.dict_learning.(V, U, E)->dict_learning(X, n_components, self.alpha, tol=self.tol, max_iter=self.max_iter, method=self.fit_algorithm, n_jobs=self.n_jobs, code_init=self.code_init, dict_init=self.dict_init, verbose=self.verbose, random_state=random_state)
A:sklearn.decomposition.dict_learning.(U, (A, B))->dict_learning_online(X, self.n_components, self.alpha, n_iter=self.n_iter, method=self.fit_algorithm, n_jobs=self.n_jobs, dict_init=dict_init, batch_size=len(X), shuffle=False, verbose=self.verbose, return_code=False, iter_offset=iter_offset, random_state=self.random_state_, return_inner_stats=True, inner_stats=inner_stats)
A:sklearn.decomposition.dict_learning.self.random_state_->check_random_state(self.random_state)
A:sklearn.decomposition.dict_learning.inner_stats->getattr(self, 'inner_stats_', None)
A:sklearn.decomposition.dict_learning.iter_offset->getattr(self, 'iter_offset_', 0)
sklearn.decomposition.DictionaryLearning(self,n_components=None,alpha=1,max_iter=1000,tol=1e-08,fit_algorithm='lars',transform_algorithm='omp',transform_n_nonzero_coefs=None,transform_alpha=None,n_jobs=1,code_init=None,dict_init=None,verbose=False,split_sign=False,random_state=None)
sklearn.decomposition.DictionaryLearning.fit(self,X,y=None)
sklearn.decomposition.MiniBatchDictionaryLearning(self,n_components=None,alpha=1,n_iter=1000,fit_algorithm='lars',n_jobs=1,batch_size=3,shuffle=True,dict_init=None,transform_algorithm='omp',transform_n_nonzero_coefs=None,transform_alpha=None,verbose=False,split_sign=False,random_state=None)
sklearn.decomposition.MiniBatchDictionaryLearning.fit(self,X,y=None)
sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit(self,X,y=None,iter_offset=None)
sklearn.decomposition.SparseCoder(self,dictionary,transform_algorithm='omp',transform_n_nonzero_coefs=None,transform_alpha=None,split_sign=False,n_jobs=1)
sklearn.decomposition.SparseCoder.fit(self,X,y=None)
sklearn.decomposition.dict_learning(X,n_components,alpha,max_iter=100,tol=1e-08,method='lars',n_jobs=1,dict_init=None,code_init=None,callback=None,verbose=False,random_state=None)
sklearn.decomposition.dict_learning.DictionaryLearning(self,n_components=None,alpha=1,max_iter=1000,tol=1e-08,fit_algorithm='lars',transform_algorithm='omp',transform_n_nonzero_coefs=None,transform_alpha=None,n_jobs=1,code_init=None,dict_init=None,verbose=False,split_sign=False,random_state=None)
sklearn.decomposition.dict_learning.DictionaryLearning.__init__(self,n_components=None,alpha=1,max_iter=1000,tol=1e-08,fit_algorithm='lars',transform_algorithm='omp',transform_n_nonzero_coefs=None,transform_alpha=None,n_jobs=1,code_init=None,dict_init=None,verbose=False,split_sign=False,random_state=None)
sklearn.decomposition.dict_learning.DictionaryLearning.fit(self,X,y=None)
sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning(self,n_components=None,alpha=1,n_iter=1000,fit_algorithm='lars',n_jobs=1,batch_size=3,shuffle=True,dict_init=None,transform_algorithm='omp',transform_n_nonzero_coefs=None,transform_alpha=None,verbose=False,split_sign=False,random_state=None)
sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning.__init__(self,n_components=None,alpha=1,n_iter=1000,fit_algorithm='lars',n_jobs=1,batch_size=3,shuffle=True,dict_init=None,transform_algorithm='omp',transform_n_nonzero_coefs=None,transform_alpha=None,verbose=False,split_sign=False,random_state=None)
sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning.fit(self,X,y=None)
sklearn.decomposition.dict_learning.MiniBatchDictionaryLearning.partial_fit(self,X,y=None,iter_offset=None)
sklearn.decomposition.dict_learning.SparseCoder(self,dictionary,transform_algorithm='omp',transform_n_nonzero_coefs=None,transform_alpha=None,split_sign=False,n_jobs=1)
sklearn.decomposition.dict_learning.SparseCoder.__init__(self,dictionary,transform_algorithm='omp',transform_n_nonzero_coefs=None,transform_alpha=None,split_sign=False,n_jobs=1)
sklearn.decomposition.dict_learning.SparseCoder.fit(self,X,y=None)
sklearn.decomposition.dict_learning.SparseCodingMixin(TransformerMixin)
sklearn.decomposition.dict_learning.SparseCodingMixin._set_sparse_coding_params(self,n_components,transform_algorithm='omp',transform_n_nonzero_coefs=None,transform_alpha=None,split_sign=False,n_jobs=1)
sklearn.decomposition.dict_learning.SparseCodingMixin.transform(self,X,y=None)
sklearn.decomposition.dict_learning._sparse_encode(X,dictionary,gram,cov=None,algorithm='lasso_lars',regularization=None,copy_cov=True,init=None,max_iter=1000)
sklearn.decomposition.dict_learning._update_dict(dictionary,Y,code,verbose=False,return_r2=False,random_state=None)
sklearn.decomposition.dict_learning.dict_learning(X,n_components,alpha,max_iter=100,tol=1e-08,method='lars',n_jobs=1,dict_init=None,code_init=None,callback=None,verbose=False,random_state=None)
sklearn.decomposition.dict_learning.dict_learning_online(X,n_components=2,alpha=1,n_iter=100,return_code=True,dict_init=None,callback=None,batch_size=3,verbose=False,shuffle=True,n_jobs=1,method='lars',iter_offset=0,random_state=None,return_inner_stats=False,inner_stats=None)
sklearn.decomposition.dict_learning.sparse_encode(X,dictionary,gram=None,cov=None,algorithm='lasso_lars',n_nonzero_coefs=None,alpha=None,copy_cov=True,init=None,max_iter=1000,n_jobs=1)
sklearn.decomposition.dict_learning_online(X,n_components=2,alpha=1,n_iter=100,return_code=True,dict_init=None,callback=None,batch_size=3,verbose=False,shuffle=True,n_jobs=1,method='lars',iter_offset=0,random_state=None,return_inner_stats=False,inner_stats=None)
sklearn.decomposition.sparse_encode(X,dictionary,gram=None,cov=None,algorithm='lasso_lars',n_nonzero_coefs=None,alpha=None,copy_cov=True,init=None,max_iter=1000,n_jobs=1)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/decomposition/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/decomposition/tests/test_factor_analysis.py----------------------------------------
A:sklearn.decomposition.tests.test_factor_analysis.rng->numpy.random.RandomState(0)
A:sklearn.decomposition.tests.test_factor_analysis.W->numpy.random.RandomState(0).randn(n_components, n_features)
A:sklearn.decomposition.tests.test_factor_analysis.h->numpy.random.RandomState(0).randn(n_samples, n_components)
A:sklearn.decomposition.tests.test_factor_analysis.fa_fail->FactorAnalysis()
A:sklearn.decomposition.tests.test_factor_analysis.fa->FactorAnalysis(n_components=n_components, noise_variance_init=np.ones(n_features))
A:sklearn.decomposition.tests.test_factor_analysis.X_t->FactorAnalysis(n_components=n_components, noise_variance_init=np.ones(n_features)).transform(X)
A:sklearn.decomposition.tests.test_factor_analysis.diff->numpy.all(np.diff(fa.loglike_))
A:sklearn.decomposition.tests.test_factor_analysis.scov->numpy.cov(X, rowvar=0.0, bias=1.0)
A:sklearn.decomposition.tests.test_factor_analysis.mcov->FactorAnalysis(n_components=n_components, noise_variance_init=np.ones(n_features)).get_covariance()
A:sklearn.decomposition.tests.test_factor_analysis.cov->FactorAnalysis(n_components=n_components, noise_variance_init=np.ones(n_features)).get_covariance()
A:sklearn.decomposition.tests.test_factor_analysis.precision->FactorAnalysis(n_components=n_components, noise_variance_init=np.ones(n_features)).get_precision()
sklearn.decomposition.tests.test_factor_analysis.test_factor_analysis()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/decomposition/tests/test_kernel_pca.py----------------------------------------
A:sklearn.decomposition.tests.test_kernel_pca.rng->numpy.random.RandomState(0)
A:sklearn.decomposition.tests.test_kernel_pca.X_fit->numpy.random.RandomState(0).random_sample((2, 4))
A:sklearn.decomposition.tests.test_kernel_pca.X_pred->numpy.random.RandomState(0).random_sample((2, 4))
A:sklearn.decomposition.tests.test_kernel_pca.kpca->KernelPCA(kernel='rbf', n_components=2, fit_inverse_transform=True, gamma=2.0)
A:sklearn.decomposition.tests.test_kernel_pca.X_fit_transformed->KernelPCA(kernel='rbf', n_components=2, fit_inverse_transform=True, gamma=2.0).fit_transform(X_fit)
A:sklearn.decomposition.tests.test_kernel_pca.X_fit_transformed2->KernelPCA(kernel='rbf', n_components=2, fit_inverse_transform=True, gamma=2.0).fit(X_fit).transform(X_fit)
A:sklearn.decomposition.tests.test_kernel_pca.X_pred_transformed->KernelPCA(kernel='rbf', n_components=2, fit_inverse_transform=True, gamma=2.0).transform(X_pred)
A:sklearn.decomposition.tests.test_kernel_pca.X_pred2->KernelPCA(kernel='rbf', n_components=2, fit_inverse_transform=True, gamma=2.0).inverse_transform(X_pred_transformed)
A:sklearn.decomposition.tests.test_kernel_pca.X->numpy.array([[1 - 1e-30, 1], [1, 1], [1, 1 - 1e-20]])
A:sklearn.decomposition.tests.test_kernel_pca.Xt->KernelPCA(kernel='rbf', n_components=2, fit_inverse_transform=True, gamma=2.0).fit_transform(X)
A:sklearn.decomposition.tests.test_kernel_pca.X_kpca->KernelPCA(kernel='rbf', n_components=2, fit_inverse_transform=True, gamma=2.0).fit_transform(X)
A:sklearn.decomposition.tests.test_kernel_pca.X_kpca2->KernelPCA(4, eigen_solver=eigen_solver, kernel='precomputed').fit(np.dot(X_fit, X_fit.T)).transform(np.dot(X_pred, X_fit.T))
A:sklearn.decomposition.tests.test_kernel_pca.X_kpca_train->KernelPCA(4, eigen_solver=eigen_solver, kernel='precomputed').fit_transform(np.dot(X_fit, X_fit.T))
A:sklearn.decomposition.tests.test_kernel_pca.X_kpca_train2->KernelPCA(4, eigen_solver=eigen_solver, kernel='precomputed').fit(np.dot(X_fit, X_fit.T)).transform(np.dot(X_fit, X_fit.T))
A:sklearn.decomposition.tests.test_kernel_pca.(X, y)->make_circles(n_samples=400, factor=0.3, noise=0.05, random_state=0)
A:sklearn.decomposition.tests.test_kernel_pca.pipeline->Pipeline([('kernel_pca', kpca), ('Perceptron', Perceptron())])
A:sklearn.decomposition.tests.test_kernel_pca.param_grid->dict(Perceptron__n_iter=np.arange(1, 5))
A:sklearn.decomposition.tests.test_kernel_pca.grid_search->GridSearchCV(pipeline, cv=3, param_grid=param_grid)
A:sklearn.decomposition.tests.test_kernel_pca.X_kernel->rbf_kernel(X, gamma=2.0)
A:sklearn.decomposition.tests.test_kernel_pca.train_score->Perceptron().fit(X_kpca, y).score(X_kpca, y)
sklearn.decomposition.tests.test_kernel_pca.test_gridsearch_pipeline()
sklearn.decomposition.tests.test_kernel_pca.test_gridsearch_pipeline_precomputed()
sklearn.decomposition.tests.test_kernel_pca.test_invalid_parameters()
sklearn.decomposition.tests.test_kernel_pca.test_kernel_pca()
sklearn.decomposition.tests.test_kernel_pca.test_kernel_pca_invalid_kernel()
sklearn.decomposition.tests.test_kernel_pca.test_kernel_pca_linear_kernel()
sklearn.decomposition.tests.test_kernel_pca.test_kernel_pca_n_components()
sklearn.decomposition.tests.test_kernel_pca.test_kernel_pca_precomputed()
sklearn.decomposition.tests.test_kernel_pca.test_kernel_pca_sparse()
sklearn.decomposition.tests.test_kernel_pca.test_nested_circles()
sklearn.decomposition.tests.test_kernel_pca.test_remove_zero_eig()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/decomposition/tests/test_sparse_pca.py----------------------------------------
A:sklearn.decomposition.tests.test_sparse_pca.rng->numpy.random.RandomState(0)
A:sklearn.decomposition.tests.test_sparse_pca.U->MiniBatchSparsePCA(n_components=13, random_state=rng).fit_transform(X)
A:sklearn.decomposition.tests.test_sparse_pca.V->numpy.random.RandomState(0).randn(n_components, n_features)
A:sklearn.decomposition.tests.test_sparse_pca.img->numpy.zeros(image_size)
A:sklearn.decomposition.tests.test_sparse_pca.V[k, :]->numpy.zeros(image_size).ravel()
A:sklearn.decomposition.tests.test_sparse_pca.Y->numpy.dot(U, V)
A:sklearn.decomposition.tests.test_sparse_pca.X->numpy.random.RandomState(0).randn(12, 10)
A:sklearn.decomposition.tests.test_sparse_pca.spca->SparsePCA(n_components=3, n_jobs=2, method='lars', alpha=alpha, random_state=0).fit(Y)
A:sklearn.decomposition.tests.test_sparse_pca.(Y, _, _)->generate_toy_data(3, 10, (8, 8), random_state=rng)
A:sklearn.decomposition.tests.test_sparse_pca.spca_lars->MiniBatchSparsePCA(n_components=3, random_state=0, alpha=alpha).fit(Y)
A:sklearn.decomposition.tests.test_sparse_pca.spca_lasso->MiniBatchSparsePCA(n_components=3, method='cd', alpha=alpha, random_state=0).fit(Y)
A:sklearn.decomposition.tests.test_sparse_pca.U1->MiniBatchSparsePCA(n_components=3, random_state=0, alpha=alpha).fit(Y).transform(Y)
A:sklearn.decomposition.tests.test_sparse_pca.U2->MiniBatchSparsePCA(n_components=3, n_jobs=2, alpha=alpha, random_state=0).fit(Y).transform(Y)
A:sklearn.decomposition.tests.test_sparse_pca.estimator->SparsePCA(n_components=8)
A:sklearn.decomposition.tests.test_sparse_pca.U_init->numpy.random.RandomState(0).randn(5, 3)
A:sklearn.decomposition.tests.test_sparse_pca.V_init->numpy.random.RandomState(0).randn(3, 4)
A:sklearn.decomposition.tests.test_sparse_pca.model->SparsePCA(n_components=3, U_init=U_init, V_init=V_init, max_iter=0, random_state=rng)
A:sklearn.decomposition.tests.test_sparse_pca.pca->MiniBatchSparsePCA(n_components=13, random_state=rng)
sklearn.decomposition.tests.test_sparse_pca.generate_toy_data(n_components,n_samples,image_size,random_state=None)
sklearn.decomposition.tests.test_sparse_pca.test_correct_shapes()
sklearn.decomposition.tests.test_sparse_pca.test_fit_transform()
sklearn.decomposition.tests.test_sparse_pca.test_fit_transform_parallel()
sklearn.decomposition.tests.test_sparse_pca.test_fit_transform_tall()
sklearn.decomposition.tests.test_sparse_pca.test_initialization()
sklearn.decomposition.tests.test_sparse_pca.test_mini_batch_correct_shapes()
sklearn.decomposition.tests.test_sparse_pca.test_mini_batch_fit_transform()
sklearn.decomposition.tests.test_sparse_pca.test_transform_nan()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/decomposition/tests/test_fastica.py----------------------------------------
A:sklearn.decomposition.tests.test_fastica.x->numpy.rollaxis(x, axis)
A:sklearn.decomposition.tests.test_fastica.rng->numpy.random.RandomState(0)
A:sklearn.decomposition.tests.test_fastica.(W, _, _)->numpy.linalg.svd(rng.randn(10, 10))
A:sklearn.decomposition.tests.test_fastica.w->numpy.random.RandomState(0).randn(10)
A:sklearn.decomposition.tests.test_fastica.u->_gs_decorrelation(w, W, 5)
A:sklearn.decomposition.tests.test_fastica.tmp->numpy.dot(u, W.T)
A:sklearn.decomposition.tests.test_fastica.s2->numpy.ceil(np.sin(np.pi * t))
A:sklearn.decomposition.tests.test_fastica.mixing->numpy.random.RandomState(0).randn(6, 2)
A:sklearn.decomposition.tests.test_fastica.m->numpy.dot(mixing, s)
A:sklearn.decomposition.tests.test_fastica.(k_, mixing_, s_)->fastica(m.T, n_components=2, random_state=rng)
A:sklearn.decomposition.tests.test_fastica.X->numpy.random.RandomState(0).random_sample((n_samples, n_features))
A:sklearn.decomposition.tests.test_fastica.(_, _, sources_fun)->fastica(m.T, fun=nl, algorithm=algo, random_state=0)
A:sklearn.decomposition.tests.test_fastica.ica->FastICA(n_components=n_components, random_state=rng, whiten=whiten)
A:sklearn.decomposition.tests.test_fastica.sources->FastICA(n_components=n_components, random_state=rng, whiten=whiten).fit_transform(m.T)
A:sklearn.decomposition.tests.test_fastica.t->numpy.linspace(0, 100, n_samples)
A:sklearn.decomposition.tests.test_fastica.s1->numpy.sin(t)
A:sklearn.decomposition.tests.test_fastica.Xt->FastICA(n_components=n_components, random_state=rng, whiten=whiten).fit_transform(X)
A:sklearn.decomposition.tests.test_fastica.Xt2->FastICA(n_components=n_components, random_state=rng, whiten=whiten).transform(X)
A:sklearn.decomposition.tests.test_fastica.X2->FastICA(n_components=n_components, random_state=rng, whiten=whiten).inverse_transform(Xt)
sklearn.decomposition.tests.test_fastica.center_and_norm(x,axis=-1)
sklearn.decomposition.tests.test_fastica.test_fastica_nowhiten()
sklearn.decomposition.tests.test_fastica.test_fastica_simple(add_noise=False)
sklearn.decomposition.tests.test_fastica.test_fit_transform()
sklearn.decomposition.tests.test_fastica.test_gs()
sklearn.decomposition.tests.test_fastica.test_inverse_transform()
sklearn.decomposition.tests.test_fastica.test_non_square_fastica(add_noise=False)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/decomposition/tests/test_pca.py----------------------------------------
A:sklearn.decomposition.tests.test_pca.iris->sklearn.datasets.load_iris()
A:sklearn.decomposition.tests.test_pca.pca->PCA(n_components=2).fit(X)
A:sklearn.decomposition.tests.test_pca.X_r->PCA(n_components=2).fit(X).transform(X)
A:sklearn.decomposition.tests.test_pca.X_r2->PCA(n_components=2).fit(X).fit_transform(X)
A:sklearn.decomposition.tests.test_pca.cov->PCA(n_components=2).fit(X).get_covariance()
A:sklearn.decomposition.tests.test_pca.precision->PCA(n_components=2).fit(X).get_precision()
A:sklearn.decomposition.tests.test_pca.rng->numpy.random.RandomState(0)
A:sklearn.decomposition.tests.test_pca.X->numpy.random.RandomState(0).rand(5, 20)
A:sklearn.decomposition.tests.test_pca.X_->numpy.random.RandomState(0).rand(5, 20).copy()
A:sklearn.decomposition.tests.test_pca.X_whitened->PCA(n_components=2).fit(X).fit_transform(X_.copy())
A:sklearn.decomposition.tests.test_pca.X_whitened2->PCA(n_components=2).fit(X).transform(X_)
A:sklearn.decomposition.tests.test_pca.X_unwhitened->PCA(n_components=2).fit(X).transform(X_)
A:sklearn.decomposition.tests.test_pca.rpca->assert_warns(DeprecationWarning, rpca.fit, X)
A:sklearn.decomposition.tests.test_pca.X_pca->PCA(n_components=2).fit(X).transform(X)
A:sklearn.decomposition.tests.test_pca.X_rpca->assert_warns(DeprecationWarning, rpca.fit, X).transform(X)
A:sklearn.decomposition.tests.test_pca.Yt->assert_warns(DeprecationWarning, pca.fit, X).transform(Xt)
A:sklearn.decomposition.tests.test_pca.Y->PCA(n_components=2).fit(X).transform(X)
A:sklearn.decomposition.tests.test_pca.Y_inverse->PCA(n_components=2).fit(X).inverse_transform(Y)
A:sklearn.decomposition.tests.test_pca.relative_max_delta->(np.abs(X.toarray() - Y_inverse) / np.abs(X.toarray()).mean()).max()
A:sklearn.decomposition.tests.test_pca.X_transformed->RandomizedPCA(n_components=1, random_state=0).fit(X).transform(X)
A:sklearn.decomposition.tests.test_pca.Xt->csr_matrix(Xt)
A:sklearn.decomposition.tests.test_pca.ll->numpy.zeros(p)
A:sklearn.decomposition.tests.test_pca.ll1->assert_warns(DeprecationWarning, ProbabilisticPCA, n_components=2).fit(X).score(X)
A:sklearn.decomposition.tests.test_pca.ll2->assert_warns(DeprecationWarning, ProbabilisticPCA, n_components=2).fit(X).score(rng.randn(n, p) * 0.2 + np.array([3, 4, 5]))
A:sklearn.decomposition.tests.test_pca.ll[k]->assert_warns(DeprecationWarning, ProbabilisticPCA, n_components=2).fit(X).score(Xt).mean()
A:sklearn.decomposition.tests.test_pca.ppca->assert_warns(DeprecationWarning, ProbabilisticPCA, n_components=2).fit(X)
sklearn.decomposition.tests.test_pca.test_explained_variance()
sklearn.decomposition.tests.test_pca.test_infer_dim_1()
sklearn.decomposition.tests.test_pca.test_infer_dim_2()
sklearn.decomposition.tests.test_pca.test_infer_dim_3()
sklearn.decomposition.tests.test_pca.test_infer_dim_by_explained_variance()
sklearn.decomposition.tests.test_pca.test_pca()
sklearn.decomposition.tests.test_pca.test_pca_check_projection()
sklearn.decomposition.tests.test_pca.test_pca_dim()
sklearn.decomposition.tests.test_pca.test_pca_inverse()
sklearn.decomposition.tests.test_pca.test_pca_score()
sklearn.decomposition.tests.test_pca.test_pca_score2()
sklearn.decomposition.tests.test_pca.test_pca_score3()
sklearn.decomposition.tests.test_pca.test_pca_validation()
sklearn.decomposition.tests.test_pca.test_probabilistic_pca_1()
sklearn.decomposition.tests.test_pca.test_probabilistic_pca_2()
sklearn.decomposition.tests.test_pca.test_probabilistic_pca_3()
sklearn.decomposition.tests.test_pca.test_probabilistic_pca_4()
sklearn.decomposition.tests.test_pca.test_probabilistic_pca_vs_pca()
sklearn.decomposition.tests.test_pca.test_randomized_pca_check_list()
sklearn.decomposition.tests.test_pca.test_randomized_pca_check_projection()
sklearn.decomposition.tests.test_pca.test_randomized_pca_inverse()
sklearn.decomposition.tests.test_pca.test_sparse_randomized_pca_check_projection()
sklearn.decomposition.tests.test_pca.test_sparse_randomized_pca_inverse()
sklearn.decomposition.tests.test_pca.test_whitening()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/decomposition/tests/test_truncated_svd.py----------------------------------------
A:sklearn.decomposition.tests.test_truncated_svd.rng->check_random_state(42)
A:sklearn.decomposition.tests.test_truncated_svd.X->scipy.sparse.csr_matrix(np.maximum(X, 0), dtype=np.float64)
A:sklearn.decomposition.tests.test_truncated_svd.svd_a->TruncatedSVD(30, algorithm='arpack')
A:sklearn.decomposition.tests.test_truncated_svd.svd_r->TruncatedSVD(30, algorithm='randomized', random_state=42)
A:sklearn.decomposition.tests.test_truncated_svd.comp_a->numpy.abs(svd_a.components_)
A:sklearn.decomposition.tests.test_truncated_svd.comp_r->numpy.abs(svd_r.components_)
A:sklearn.decomposition.tests.test_truncated_svd.tsvd->TruncatedSVD(n_components=6)
A:sklearn.decomposition.tests.test_truncated_svd.Xtrans->TruncatedSVD(n_components=6).fit_transform(Xint)
A:sklearn.decomposition.tests.test_truncated_svd.Xt->TruncatedSVD(n_components=6).fit_transform(X)
A:sklearn.decomposition.tests.test_truncated_svd.Xinv->TruncatedSVD(n_components=6).inverse_transform(Xt)
A:sklearn.decomposition.tests.test_truncated_svd.Xint->scipy.sparse.csr_matrix(np.maximum(X, 0), dtype=np.float64).astype(np.int64)
A:sklearn.decomposition.tests.test_truncated_svd.svd_a_10_sp->TruncatedSVD(10, algorithm='arpack')
A:sklearn.decomposition.tests.test_truncated_svd.svd_r_10_sp->TruncatedSVD(10, algorithm='randomized', random_state=42)
A:sklearn.decomposition.tests.test_truncated_svd.svd_a_20_sp->TruncatedSVD(20, algorithm='arpack')
A:sklearn.decomposition.tests.test_truncated_svd.svd_r_20_sp->TruncatedSVD(20, algorithm='randomized', random_state=42)
A:sklearn.decomposition.tests.test_truncated_svd.X_trans_a_10_sp->TruncatedSVD(10, algorithm='arpack').fit_transform(X)
A:sklearn.decomposition.tests.test_truncated_svd.X_trans_r_10_sp->TruncatedSVD(10, algorithm='randomized', random_state=42).fit_transform(X)
A:sklearn.decomposition.tests.test_truncated_svd.X_trans_a_20_sp->TruncatedSVD(20, algorithm='arpack').fit_transform(X)
A:sklearn.decomposition.tests.test_truncated_svd.X_trans_r_20_sp->TruncatedSVD(20, algorithm='randomized', random_state=42).fit_transform(X)
A:sklearn.decomposition.tests.test_truncated_svd.svd_a_10_de->TruncatedSVD(10, algorithm='arpack')
A:sklearn.decomposition.tests.test_truncated_svd.svd_r_10_de->TruncatedSVD(10, algorithm='randomized', random_state=42)
A:sklearn.decomposition.tests.test_truncated_svd.svd_a_20_de->TruncatedSVD(20, algorithm='arpack')
A:sklearn.decomposition.tests.test_truncated_svd.svd_r_20_de->TruncatedSVD(20, algorithm='randomized', random_state=42)
A:sklearn.decomposition.tests.test_truncated_svd.X_trans_a_10_de->TruncatedSVD(10, algorithm='arpack').fit_transform(X.toarray())
A:sklearn.decomposition.tests.test_truncated_svd.X_trans_r_10_de->TruncatedSVD(10, algorithm='randomized', random_state=42).fit_transform(X.toarray())
A:sklearn.decomposition.tests.test_truncated_svd.X_trans_a_20_de->TruncatedSVD(20, algorithm='arpack').fit_transform(X.toarray())
A:sklearn.decomposition.tests.test_truncated_svd.X_trans_r_20_de->TruncatedSVD(20, algorithm='randomized', random_state=42).fit_transform(X.toarray())
A:sklearn.decomposition.tests.test_truncated_svd.total_variance->numpy.var(X.toarray(), axis=0).sum()
A:sklearn.decomposition.tests.test_truncated_svd.variances->numpy.var(transformed, axis=0)
sklearn.decomposition.tests.test_truncated_svd.test_algorithms()
sklearn.decomposition.tests.test_truncated_svd.test_attributes()
sklearn.decomposition.tests.test_truncated_svd.test_explained_variance()
sklearn.decomposition.tests.test_truncated_svd.test_integers()
sklearn.decomposition.tests.test_truncated_svd.test_inverse_transform()
sklearn.decomposition.tests.test_truncated_svd.test_sparse_formats()
sklearn.decomposition.tests.test_truncated_svd.test_too_many_components()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/decomposition/tests/test_nmf.py----------------------------------------
A:sklearn.decomposition.tests.test_nmf.random_state->numpy.random.mtrand.RandomState(0)
A:sklearn.decomposition.tests.test_nmf.data->numpy.abs(random_state.randn(10, 10))
A:sklearn.decomposition.tests.test_nmf.(W, H)->sklearn.decomposition.nmf._initialize_nmf(A, 10)
A:sklearn.decomposition.tests.test_nmf.A->csc_matrix(A)
A:sklearn.decomposition.tests.test_nmf.error->scipy.linalg.norm(np.dot(W, H) - A)
A:sklearn.decomposition.tests.test_nmf.sdev->scipy.linalg.norm(A - A.mean())
A:sklearn.decomposition.tests.test_nmf.(W0, H0)->sklearn.decomposition.nmf._initialize_nmf(data, 10, variant=None)
A:sklearn.decomposition.tests.test_nmf.(Wa, Ha)->sklearn.decomposition.nmf._initialize_nmf(data, 10, variant='a')
A:sklearn.decomposition.tests.test_nmf.(War, Har)->sklearn.decomposition.nmf._initialize_nmf(data, 10, variant='ar', random_state=0)
A:sklearn.decomposition.tests.test_nmf.m->sklearn.decomposition.nmf.ProjectedGradientNMF(n_components=5, random_state=0).fit(A)
A:sklearn.decomposition.tests.test_nmf.model->sklearn.decomposition.nmf.NMF()
A:sklearn.decomposition.tests.test_nmf.transf->sklearn.decomposition.nmf.ProjectedGradientNMF(n_components=5, random_state=0).fit(A).fit_transform(A)
A:sklearn.decomposition.tests.test_nmf.pnmf->sklearn.decomposition.nmf.ProjectedGradientNMF(5, init='nndsvda', random_state=0)
A:sklearn.decomposition.tests.test_nmf.X->numpy.abs(random_state.randn(6, 5))
A:sklearn.decomposition.tests.test_nmf.(Ap, _, _)->sklearn.decomposition.nmf._nls_subproblem(np.dot(A.T, A), A.T, np.zeros_like(A), 0.001, 100)
A:sklearn.decomposition.tests.test_nmf.T1->sklearn.decomposition.nmf.ProjectedGradientNMF(n_components=5, init='random', sparseness='data', random_state=999).fit_transform(A)
A:sklearn.decomposition.tests.test_nmf.A_sparse->csc_matrix(A)
A:sklearn.decomposition.tests.test_nmf.pg_nmf->sklearn.decomposition.nmf.ProjectedGradientNMF(n_components=5, init='random', random_state=999)
A:sklearn.decomposition.tests.test_nmf.T2->sklearn.decomposition.nmf.ProjectedGradientNMF(n_components=5, init='random', sparseness='data', random_state=999).fit_transform(A_sparse)
A:sklearn.decomposition.tests.test_nmf.A_fit_tr->sklearn.decomposition.nmf.NMF().fit_transform(A)
A:sklearn.decomposition.tests.test_nmf.A_tr->sklearn.decomposition.nmf.NMF().transform(A)
sklearn.decomposition.tests.test_nmf.test_initialize_close()
sklearn.decomposition.tests.test_nmf.test_initialize_nn_input()
sklearn.decomposition.tests.test_nmf.test_initialize_nn_output()
sklearn.decomposition.tests.test_nmf.test_initialize_variants()
sklearn.decomposition.tests.test_nmf.test_n_components_greater_n_features()
sklearn.decomposition.tests.test_nmf.test_nls_close()
sklearn.decomposition.tests.test_nmf.test_nls_nn_output()
sklearn.decomposition.tests.test_nmf.test_projgrad_nmf_fit_close()
sklearn.decomposition.tests.test_nmf.test_projgrad_nmf_fit_nn_input()
sklearn.decomposition.tests.test_nmf.test_projgrad_nmf_fit_nn_output()
sklearn.decomposition.tests.test_nmf.test_projgrad_nmf_sparseness()
sklearn.decomposition.tests.test_nmf.test_projgrad_nmf_transform()
sklearn.decomposition.tests.test_nmf.test_sparse_input()
sklearn.decomposition.tests.test_nmf.test_sparse_transform()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/decomposition/tests/test_dict_learning.py----------------------------------------
A:sklearn.decomposition.tests.test_dict_learning.rng_global->numpy.random.RandomState(0)
A:sklearn.decomposition.tests.test_dict_learning.X->numpy.random.RandomState(0).randn(100, 64)
A:sklearn.decomposition.tests.test_dict_learning.dico->MiniBatchDictionaryLearning(n_components, n_iter=0, dict_init=V, random_state=0).fit(X)
A:sklearn.decomposition.tests.test_dict_learning.code->SparseCoder(dictionary=V, transform_algorithm='lasso_lars', transform_alpha=0.001).transform(X)
A:sklearn.decomposition.tests.test_dict_learning.split_code->MiniBatchDictionaryLearning(n_components, n_iter=0, dict_init=V, random_state=0).fit(X).transform(X)
A:sklearn.decomposition.tests.test_dict_learning.rng->numpy.random.RandomState(0)
A:sklearn.decomposition.tests.test_dict_learning.(code, dictionary)->dict_learning_online(X, n_components=n_components, alpha=1, random_state=rng)
A:sklearn.decomposition.tests.test_dict_learning.sys.stdout->StringIO()
A:sklearn.decomposition.tests.test_dict_learning.V->numpy.random.RandomState(0).randn(n_components, n_features)
A:sklearn.decomposition.tests.test_dict_learning.dict1->MiniBatchDictionaryLearning(n_components, n_iter=10 * len(X), batch_size=1, alpha=1, shuffle=False, dict_init=V, random_state=0).fit(X)
A:sklearn.decomposition.tests.test_dict_learning.dict2->MiniBatchDictionaryLearning(n_components, alpha=1, n_iter=1, dict_init=V, random_state=0)
A:sklearn.decomposition.tests.test_dict_learning.D->numpy.random.RandomState(0).randn(2, 64)
sklearn.decomposition.tests.test_dict_learning.test_dict_learning_nonzero_coefs()
sklearn.decomposition.tests.test_dict_learning.test_dict_learning_online_estimator_shapes()
sklearn.decomposition.tests.test_dict_learning.test_dict_learning_online_initialization()
sklearn.decomposition.tests.test_dict_learning.test_dict_learning_online_overcomplete()
sklearn.decomposition.tests.test_dict_learning.test_dict_learning_online_partial_fit()
sklearn.decomposition.tests.test_dict_learning.test_dict_learning_online_shapes()
sklearn.decomposition.tests.test_dict_learning.test_dict_learning_online_verbosity()
sklearn.decomposition.tests.test_dict_learning.test_dict_learning_overcomplete()
sklearn.decomposition.tests.test_dict_learning.test_dict_learning_reconstruction()
sklearn.decomposition.tests.test_dict_learning.test_dict_learning_shapes()
sklearn.decomposition.tests.test_dict_learning.test_dict_learning_split()
sklearn.decomposition.tests.test_dict_learning.test_dict_learning_unknown_fit_algorithm()
sklearn.decomposition.tests.test_dict_learning.test_sparse_coder_estimator()
sklearn.decomposition.tests.test_dict_learning.test_sparse_encode_error()
sklearn.decomposition.tests.test_dict_learning.test_sparse_encode_error_default_sparsity()
sklearn.decomposition.tests.test_dict_learning.test_sparse_encode_shapes()
sklearn.decomposition.tests.test_dict_learning.test_unknown_method()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/decomposition/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cross_decomposition/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cross_decomposition/cca_.py----------------------------------------
sklearn.cross_decomposition.CCA(self,n_components=2,scale=True,max_iter=500,tol=1e-06,copy=True)
sklearn.cross_decomposition.cca_.CCA(self,n_components=2,scale=True,max_iter=500,tol=1e-06,copy=True)
sklearn.cross_decomposition.cca_.CCA.__init__(self,n_components=2,scale=True,max_iter=500,tol=1e-06,copy=True)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/cross_decomposition/pls_.py----------------------------------------
A:sklearn.cross_decomposition.pls_.X_pinv->scipy.linalg.pinv(X)
A:sklearn.cross_decomposition.pls_.x_weights->numpy.dot(X_pinv, y_score)
A:sklearn.cross_decomposition.pls_.x_score->numpy.dot(X, x_weights)
A:sklearn.cross_decomposition.pls_.Y_pinv->scipy.linalg.pinv(Y)
A:sklearn.cross_decomposition.pls_.y_weights->numpy.dot(Y_pinv, x_score)
A:sklearn.cross_decomposition.pls_.C->numpy.dot(X.T, Y)
A:sklearn.cross_decomposition.pls_.(U, s, Vh)->scipy.linalg.svd(C, full_matrices=False)
A:sklearn.cross_decomposition.pls_.x_mean->numpy.asarray(X).mean(axis=0)
A:sklearn.cross_decomposition.pls_.y_mean->numpy.asarray(Y).mean(axis=0)
A:sklearn.cross_decomposition.pls_.x_std->numpy.ones(X.shape[1])
A:sklearn.cross_decomposition.pls_.y_std->numpy.ones(Y.shape[1])
A:sklearn.cross_decomposition.pls_.(X, Y)->check_arrays(X, Y, dtype=np.float, copy=self.copy, sparse_format='dense')
A:sklearn.cross_decomposition.pls_.Y->numpy.asarray(Y)
A:sklearn.cross_decomposition.pls_.(X, Y, self.x_mean_, self.y_mean_, self.x_std_, self.y_std_)->_center_scale_xy(X, Y, self.scale)
A:sklearn.cross_decomposition.pls_.self.x_scores_->numpy.dot(X, U)
A:sklearn.cross_decomposition.pls_.self.y_scores_->numpy.dot(Y, V)
A:sklearn.cross_decomposition.pls_.self.x_weights_->numpy.zeros((p, self.n_components))
A:sklearn.cross_decomposition.pls_.self.y_weights_->numpy.zeros((q, self.n_components))
A:sklearn.cross_decomposition.pls_.self.x_loadings_->numpy.zeros((p, self.n_components))
A:sklearn.cross_decomposition.pls_.self.y_loadings_->numpy.zeros((q, self.n_components))
A:sklearn.cross_decomposition.pls_.(x_weights, y_weights)->_svd_cross_product(X=Xk, Y=Yk)
A:sklearn.cross_decomposition.pls_.x_scores->numpy.dot(Xr, self.x_weights_)
A:sklearn.cross_decomposition.pls_.y_ss->numpy.dot(y_weights.T, y_weights)
A:sklearn.cross_decomposition.pls_.self.x_scores_[:, k]->numpy.dot(Xr, self.x_weights_).ravel()
A:sklearn.cross_decomposition.pls_.self.y_scores_[:, k]->numpy.dot(Yr, self.y_weights_).ravel()
A:sklearn.cross_decomposition.pls_.self.x_weights_[:, k]->numpy.dot(X_pinv, y_score).ravel()
A:sklearn.cross_decomposition.pls_.self.y_weights_[:, k]->numpy.dot(Y_pinv, x_score).ravel()
A:sklearn.cross_decomposition.pls_.self.x_loadings_[:, k]->x_loadings.ravel()
A:sklearn.cross_decomposition.pls_.self.y_loadings_[:, k]->y_loadings.ravel()
A:sklearn.cross_decomposition.pls_.self.x_rotations_->numpy.dot(self.x_weights_, linalg.inv(np.dot(self.x_loadings_.T, self.x_weights_)))
A:sklearn.cross_decomposition.pls_.self.y_rotations_->numpy.ones(1)
A:sklearn.cross_decomposition.pls_.self.coefs->numpy.dot(self.x_rotations_, self.y_loadings_.T)
A:sklearn.cross_decomposition.pls_.X->numpy.asarray(X)
A:sklearn.cross_decomposition.pls_.y_scores->numpy.dot(Yr, self.y_weights_)
A:sklearn.cross_decomposition.pls_.Ypred->numpy.dot(Xc, self.coefs)
A:sklearn.cross_decomposition.pls_.(U, s, V)->utils.arpack.svds(C, k=self.n_components)
sklearn.cross_decomposition.PLSCanonical(self,n_components=2,scale=True,algorithm='nipals',max_iter=500,tol=1e-06,copy=True)
sklearn.cross_decomposition.PLSRegression(self,n_components=2,scale=True,max_iter=500,tol=1e-06,copy=True)
sklearn.cross_decomposition.PLSSVD(self,n_components=2,scale=True,copy=True)
sklearn.cross_decomposition.PLSSVD.fit(self,X,Y)
sklearn.cross_decomposition.PLSSVD.fit_transform(self,X,y=None,**fit_params)
sklearn.cross_decomposition.PLSSVD.transform(self,X,Y=None)
sklearn.cross_decomposition._PLS(self,n_components=2,scale=True,deflation_mode='regression',mode='A',algorithm='nipals',norm_y_weights=False,max_iter=500,tol=1e-06,copy=True)
sklearn.cross_decomposition._PLS.fit(self,X,Y)
sklearn.cross_decomposition._PLS.fit_transform(self,X,y=None,**fit_params)
sklearn.cross_decomposition._PLS.predict(self,X,copy=True)
sklearn.cross_decomposition._PLS.transform(self,X,Y=None,copy=True)
sklearn.cross_decomposition._center_scale_xy(X,Y,scale=True)
sklearn.cross_decomposition._nipals_twoblocks_inner_loop(X,Y,mode='A',max_iter=500,tol=1e-06,norm_y_weights=False)
sklearn.cross_decomposition._svd_cross_product(X,Y)
sklearn.cross_decomposition.pls_.PLSCanonical(self,n_components=2,scale=True,algorithm='nipals',max_iter=500,tol=1e-06,copy=True)
sklearn.cross_decomposition.pls_.PLSCanonical.__init__(self,n_components=2,scale=True,algorithm='nipals',max_iter=500,tol=1e-06,copy=True)
sklearn.cross_decomposition.pls_.PLSRegression(self,n_components=2,scale=True,max_iter=500,tol=1e-06,copy=True)
sklearn.cross_decomposition.pls_.PLSRegression.__init__(self,n_components=2,scale=True,max_iter=500,tol=1e-06,copy=True)
sklearn.cross_decomposition.pls_.PLSSVD(self,n_components=2,scale=True,copy=True)
sklearn.cross_decomposition.pls_.PLSSVD.__init__(self,n_components=2,scale=True,copy=True)
sklearn.cross_decomposition.pls_.PLSSVD.fit(self,X,Y)
sklearn.cross_decomposition.pls_.PLSSVD.fit_transform(self,X,y=None,**fit_params)
sklearn.cross_decomposition.pls_.PLSSVD.transform(self,X,Y=None)
sklearn.cross_decomposition.pls_._PLS(self,n_components=2,scale=True,deflation_mode='regression',mode='A',algorithm='nipals',norm_y_weights=False,max_iter=500,tol=1e-06,copy=True)
sklearn.cross_decomposition.pls_._PLS.__init__(self,n_components=2,scale=True,deflation_mode='regression',mode='A',algorithm='nipals',norm_y_weights=False,max_iter=500,tol=1e-06,copy=True)
sklearn.cross_decomposition.pls_._PLS.fit(self,X,Y)
sklearn.cross_decomposition.pls_._PLS.fit_transform(self,X,y=None,**fit_params)
sklearn.cross_decomposition.pls_._PLS.predict(self,X,copy=True)
sklearn.cross_decomposition.pls_._PLS.transform(self,X,Y=None,copy=True)
sklearn.cross_decomposition.pls_._center_scale_xy(X,Y,scale=True)
sklearn.cross_decomposition.pls_._nipals_twoblocks_inner_loop(X,Y,mode='A',max_iter=500,tol=1e-06,norm_y_weights=False)
sklearn.cross_decomposition.pls_._svd_cross_product(X,Y)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/svm/bounds.py----------------------------------------
A:sklearn.svm.bounds.y->y.reshape((1, -1)).reshape((1, -1))
A:sklearn.svm.bounds.X->hstack((X, bias))
A:sklearn.svm.bounds.classes->numpy.unique(y)
A:sklearn.svm.bounds.n_classes->numpy.size(classes)
A:sklearn.svm.bounds._y->numpy.empty((n_classes, np.size(y)))
A:sklearn.svm.bounds.den->numpy.max(np.abs(dot(_y, X)))
sklearn.svm.bounds.l1_min_c(X,y,loss='l2',fit_intercept=True,intercept_scaling=1.0)
sklearn.svm.l1_min_c(X,y,loss='l2',fit_intercept=True,intercept_scaling=1.0)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/svm/base.py----------------------------------------
A:sklearn.svm.base.sv_locs->numpy.cumsum(np.hstack([[0], n_support]))
A:sklearn.svm.base.rnd->check_random_state(self.random_state)
A:sklearn.svm.base.sparse->scipy.sparse.isspmatrix(X)
A:sklearn.svm.base.X->atleast2d_or_csr(X, dtype=np.float64, order='C')
A:sklearn.svm.base.y->super(BaseSVC, self).predict(X)
A:sklearn.svm.base.sample_weight->numpy.asarray([] if sample_weight is None else sample_weight, dtype=np.float64)
A:sklearn.svm.base.solver_type->LIBSVM_IMPL.index(self._impl)
A:sklearn.svm.base.seed->check_random_state(self.random_state).randint(np.iinfo('i').max)
A:sklearn.svm.base.self._intercept_->self.intercept_.copy()
A:sklearn.svm.base.self.class_weight_->compute_class_weight(self.class_weight, self.classes_, y)
A:sklearn.svm.base.(self.support_, self.support_vectors_, self.n_support_, self.dual_coef_, self.intercept_, self.probA_, self.probB_, self.fit_status_)->libsvm.fit(X, y, svm_type=solver_type, sample_weight=sample_weight, class_weight=self.class_weight_, kernel=kernel, C=self.C, nu=self.nu, probability=self.probability, degree=self.degree, shrinking=self.shrinking, tol=self.tol, cache_size=self.cache_size, coef0=self.coef0, gamma=self._gamma, epsilon=self.epsilon, max_iter=self.max_iter, random_seed=random_seed)
A:sklearn.svm.base.X.data->numpy.asarray(X.data, dtype=np.float64, order='C')
A:sklearn.svm.base.kernel_type->self._sparse_kernels.index(kernel)
A:sklearn.svm.base.(self.support_, self.support_vectors_, dual_coef_data, self.intercept_, self.n_support_, self.probA_, self.probB_, self.fit_status_)->libsvm_sparse.libsvm_sparse_train(X.shape[1], X.data, X.indices, X.indptr, y, solver_type, kernel_type, self.degree, self._gamma, self.coef0, self.tol, self.C, self.class_weight_, sample_weight, self.nu, self.cache_size, self.epsilon, int(self.shrinking), int(self.probability), self.max_iter, random_seed)
A:sklearn.svm.base.dual_coef_indices->numpy.tile(np.arange(n_SV), n_class)
A:sklearn.svm.base.dual_coef_indptr->numpy.arange(0, dual_coef_indices.size + 1, dual_coef_indices.size / n_class)
A:sklearn.svm.base.self.dual_coef_->scipy.sparse.csr_matrix((dual_coef_data, dual_coef_indices, dual_coef_indptr), (n_class, n_SV))
A:sklearn.svm.base.svm_type->LIBSVM_IMPL.index(self._impl)
A:sklearn.svm.base.kernel->kernel.toarray().toarray()
A:sklearn.svm.base.dec_func->libsvm.decision_function(X, self.support_, self.support_vectors_, self.n_support_, self.dual_coef_, self._intercept_, self.probA_, self.probB_, svm_type=LIBSVM_IMPL.index(self._impl), kernel=kernel, degree=self.degree, cache_size=self.cache_size, coef0=self.coef0, gamma=self._gamma)
A:sklearn.svm.base.coef->numpy.vstack(coef)
A:sklearn.svm.base.y_->column_or_1d(y, warn=True)
A:sklearn.svm.base.(cls, y)->numpy.unique(y_, return_inverse=True)
A:sklearn.svm.base.pprob->libsvm.predict_proba(X, self.support_, self.support_vectors_, self.n_support_, self.dual_coef_, self._intercept_, self.probA_, self.probB_, svm_type=svm_type, kernel=kernel, degree=self.degree, cache_size=self.cache_size, coef0=self.coef0, gamma=self._gamma)
A:sklearn.svm.base.self._enc->LabelEncoder()
A:sklearn.svm.base.y_ind->numpy.asarray(y_ind, dtype=np.float64).ravel()
A:sklearn.svm.base.self.raw_coef_->liblinear.train_wrap(X, y_ind, sp.isspmatrix(X), self._get_solver_type(), self.tol, self._get_bias(), self.C, self.class_weight_, rnd.randint(np.iinfo('i').max))
A:sklearn.svm.base.self.coef_->(self.coef_[1] - self.coef_[0]).reshape(1, -1)
A:sklearn.svm.base.self.intercept_->numpy.array([intercept])
sklearn.svm.base.BaseLibLinear(self,penalty='l2',loss='l2',dual=True,tol=0.0001,C=1.0,multi_class='ovr',fit_intercept=True,intercept_scaling=1,class_weight=None,verbose=0,random_state=None)
sklearn.svm.base.BaseLibLinear.__init__(self,penalty='l2',loss='l2',dual=True,tol=0.0001,C=1.0,multi_class='ovr',fit_intercept=True,intercept_scaling=1,class_weight=None,verbose=0,random_state=None)
sklearn.svm.base.BaseLibLinear._get_bias(self)
sklearn.svm.base.BaseLibLinear._get_solver_type(self)
sklearn.svm.base.BaseLibLinear.classes_(self)
sklearn.svm.base.BaseLibLinear.fit(self,X,y)
sklearn.svm.base.BaseLibSVM(self,impl,kernel,degree,gamma,coef0,tol,C,nu,epsilon,shrinking,probability,cache_size,class_weight,verbose,max_iter,random_state)
sklearn.svm.base.BaseLibSVM.__init__(self,impl,kernel,degree,gamma,coef0,tol,C,nu,epsilon,shrinking,probability,cache_size,class_weight,verbose,max_iter,random_state)
sklearn.svm.base.BaseLibSVM._compute_kernel(self,X)
sklearn.svm.base.BaseLibSVM._dense_fit(self,X,y,sample_weight,solver_type,kernel,random_seed)
sklearn.svm.base.BaseLibSVM._dense_predict(self,X)
sklearn.svm.base.BaseLibSVM._pairwise(self)
sklearn.svm.base.BaseLibSVM._sparse_fit(self,X,y,sample_weight,solver_type,kernel,random_seed)
sklearn.svm.base.BaseLibSVM._sparse_predict(self,X)
sklearn.svm.base.BaseLibSVM._validate_for_predict(self,X)
sklearn.svm.base.BaseLibSVM._validate_targets(self,y)
sklearn.svm.base.BaseLibSVM._warn_from_fit_status(self)
sklearn.svm.base.BaseLibSVM.coef_(self)
sklearn.svm.base.BaseLibSVM.decision_function(self,X)
sklearn.svm.base.BaseLibSVM.fit(self,X,y,sample_weight=None)
sklearn.svm.base.BaseLibSVM.predict(self,X)
sklearn.svm.base.BaseSVC(BaseLibSVM,ClassifierMixin)
sklearn.svm.base.BaseSVC._check_proba(self)
sklearn.svm.base.BaseSVC._dense_predict_proba(self,X)
sklearn.svm.base.BaseSVC._predict_log_proba(self,X)
sklearn.svm.base.BaseSVC._predict_proba(self,X)
sklearn.svm.base.BaseSVC._sparse_predict_proba(self,X)
sklearn.svm.base.BaseSVC._validate_targets(self,y)
sklearn.svm.base.BaseSVC.predict(self,X)
sklearn.svm.base.BaseSVC.predict_log_proba(self)
sklearn.svm.base.BaseSVC.predict_proba(self)
sklearn.svm.base._one_vs_one_coef(dual_coef,n_support,support_vectors)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/svm/setup.py----------------------------------------
A:sklearn.svm.setup.config->Configuration('svm', parent_package, top_path)
A:sklearn.svm.setup.(cblas_libs, blas_info)->get_blas_info()
sklearn.svm.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/svm/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/svm/classes.py----------------------------------------
sklearn.svm.LinearSVC(self,penalty='l2',loss='l2',dual=True,tol=0.0001,C=1.0,multi_class='ovr',fit_intercept=True,intercept_scaling=1,class_weight=None,verbose=0,random_state=None)
sklearn.svm.NuSVC(self,nu=0.5,kernel='rbf',degree=3,gamma=0.0,coef0=0.0,shrinking=True,probability=False,tol=0.001,cache_size=200,verbose=False,max_iter=-1,random_state=None)
sklearn.svm.NuSVR(self,nu=0.5,C=1.0,kernel='rbf',degree=3,gamma=0.0,coef0=0.0,shrinking=True,probability=False,tol=0.001,cache_size=200,verbose=False,max_iter=-1,random_state=None)
sklearn.svm.OneClassSVM(self,kernel='rbf',degree=3,gamma=0.0,coef0=0.0,tol=0.001,nu=0.5,shrinking=True,cache_size=200,verbose=False,max_iter=-1,random_state=None)
sklearn.svm.OneClassSVM.fit(self,X,sample_weight=None,**params)
sklearn.svm.SVC(self,C=1.0,kernel='rbf',degree=3,gamma=0.0,coef0=0.0,shrinking=True,probability=False,tol=0.001,cache_size=200,class_weight=None,verbose=False,max_iter=-1,random_state=None)
sklearn.svm.SVR(self,kernel='rbf',degree=3,gamma=0.0,coef0=0.0,tol=0.001,C=1.0,epsilon=0.1,shrinking=True,probability=False,cache_size=200,verbose=False,max_iter=-1,random_state=None)
sklearn.svm.classes.LinearSVC(self,penalty='l2',loss='l2',dual=True,tol=0.0001,C=1.0,multi_class='ovr',fit_intercept=True,intercept_scaling=1,class_weight=None,verbose=0,random_state=None)
sklearn.svm.classes.LinearSVC.__init__(self,penalty='l2',loss='l2',dual=True,tol=0.0001,C=1.0,multi_class='ovr',fit_intercept=True,intercept_scaling=1,class_weight=None,verbose=0,random_state=None)
sklearn.svm.classes.NuSVC(self,nu=0.5,kernel='rbf',degree=3,gamma=0.0,coef0=0.0,shrinking=True,probability=False,tol=0.001,cache_size=200,verbose=False,max_iter=-1,random_state=None)
sklearn.svm.classes.NuSVC.__init__(self,nu=0.5,kernel='rbf',degree=3,gamma=0.0,coef0=0.0,shrinking=True,probability=False,tol=0.001,cache_size=200,verbose=False,max_iter=-1,random_state=None)
sklearn.svm.classes.NuSVR(self,nu=0.5,C=1.0,kernel='rbf',degree=3,gamma=0.0,coef0=0.0,shrinking=True,probability=False,tol=0.001,cache_size=200,verbose=False,max_iter=-1,random_state=None)
sklearn.svm.classes.NuSVR.__init__(self,nu=0.5,C=1.0,kernel='rbf',degree=3,gamma=0.0,coef0=0.0,shrinking=True,probability=False,tol=0.001,cache_size=200,verbose=False,max_iter=-1,random_state=None)
sklearn.svm.classes.OneClassSVM(self,kernel='rbf',degree=3,gamma=0.0,coef0=0.0,tol=0.001,nu=0.5,shrinking=True,cache_size=200,verbose=False,max_iter=-1,random_state=None)
sklearn.svm.classes.OneClassSVM.__init__(self,kernel='rbf',degree=3,gamma=0.0,coef0=0.0,tol=0.001,nu=0.5,shrinking=True,cache_size=200,verbose=False,max_iter=-1,random_state=None)
sklearn.svm.classes.OneClassSVM.fit(self,X,sample_weight=None,**params)
sklearn.svm.classes.SVC(self,C=1.0,kernel='rbf',degree=3,gamma=0.0,coef0=0.0,shrinking=True,probability=False,tol=0.001,cache_size=200,class_weight=None,verbose=False,max_iter=-1,random_state=None)
sklearn.svm.classes.SVC.__init__(self,C=1.0,kernel='rbf',degree=3,gamma=0.0,coef0=0.0,shrinking=True,probability=False,tol=0.001,cache_size=200,class_weight=None,verbose=False,max_iter=-1,random_state=None)
sklearn.svm.classes.SVR(self,kernel='rbf',degree=3,gamma=0.0,coef0=0.0,tol=0.001,C=1.0,epsilon=0.1,shrinking=True,probability=False,cache_size=200,verbose=False,max_iter=-1,random_state=None)
sklearn.svm.classes.SVR.__init__(self,kernel='rbf',degree=3,gamma=0.0,coef0=0.0,tol=0.001,C=1.0,epsilon=0.1,shrinking=True,probability=False,cache_size=200,verbose=False,max_iter=-1,random_state=None)


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/svm/tests/test_sparse.py----------------------------------------
A:sklearn.svm.tests.test_sparse.X->scipy.sparse.csr_matrix((data, indices, indptr))
A:sklearn.svm.tests.test_sparse.X_sp->scipy.sparse.lil_matrix(X)
A:sklearn.svm.tests.test_sparse.T->numpy.array([[-1, -1], [2, 2], [3, 2]])
A:sklearn.svm.tests.test_sparse.X2->numpy.array([[0, 0, 0], [1, 1, 1], [2, 0, 0], [0, 0, 2], [3, 3, 3]])
A:sklearn.svm.tests.test_sparse.X2_sp->scipy.sparse.dok_matrix(X2)
A:sklearn.svm.tests.test_sparse.T2->numpy.array([[-1, -1, -1], [1, 1, 1], [2, 2, 2]])
A:sklearn.svm.tests.test_sparse.iris->sklearn.datasets.load_iris()
A:sklearn.svm.tests.test_sparse.rng->numpy.random.RandomState(0)
A:sklearn.svm.tests.test_sparse.perm->numpy.random.RandomState(0).permutation(iris.target.size)
A:sklearn.svm.tests.test_sparse.iris.data->scipy.sparse.csr_matrix(iris.data)
A:sklearn.svm.tests.test_sparse.clf->sklearn.svm.SVC(kernel='linear').fit(X.toarray(), y)
A:sklearn.svm.tests.test_sparse.sp_clf->sklearn.svm.SVC(kernel='linear').fit(sparse.coo_matrix(X), y)
A:sklearn.svm.tests.test_sparse.digits->load_digits()
A:sklearn.svm.tests.test_sparse.X_test->scipy.sparse.csr_matrix(digits.data[50:100])
A:sklearn.svm.tests.test_sparse.X_sparse->scipy.sparse.csr_matrix(X)
A:sklearn.svm.tests.test_sparse.sparse_svc->sklearn.svm.SVC(kernel='linear', probability=True, random_state=0).fit(X_sparse, y)
A:sklearn.svm.tests.test_sparse.unsorted_svc->sklearn.svm.SVC(kernel='linear', probability=True, random_state=0).fit(X_sparse_unsorted, y)
A:sklearn.svm.tests.test_sparse.clf_lin->sklearn.svm.SVC(kernel='linear').fit(X_sp, Y)
A:sklearn.svm.tests.test_sparse.clf_mylin->sklearn.svm.SVC(kernel=kfunc).fit(X_sp, Y)
A:sklearn.svm.tests.test_sparse.pred->sklearn.base.clone(a).predict(X_sp)
A:sklearn.svm.tests.test_sparse.(X_, y_)->make_classification(n_samples=200, n_features=100, weights=[0.833, 0.167], random_state=0)
A:sklearn.svm.tests.test_sparse.X_->scipy.sparse.csr_matrix(X_)
A:sklearn.svm.tests.test_sparse.y_pred->sklearn.svm.SVC(kernel='linear').fit(X.toarray(), y).predict(X_[180:])
A:sklearn.svm.tests.test_sparse.data->numpy.array([0.03771744, 0.1003567, 0.01174647, 0.027069])
A:sklearn.svm.tests.test_sparse.indices->numpy.array([6, 5, 35, 31])
A:sklearn.svm.tests.test_sparse.indptr->numpy.array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4])
A:sklearn.svm.tests.test_sparse.y->numpy.array([1.0, 0.0, 2.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 0.0, 1.0, 2.0, 2.0, 0.0, 2.0, 0.0, 3.0, 0.0, 3.0, 0.0, 1.0, 1.0, 3.0, 2.0, 3.0, 2.0, 0.0, 3.0, 1.0, 0.0, 2.0, 1.0, 2.0, 0.0, 1.0, 0.0, 2.0, 3.0, 1.0, 3.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 1.0, 2.0, 2.0, 2.0, 3.0, 2.0, 0.0, 3.0, 2.0, 1.0, 2.0, 3.0, 2.0, 2.0, 0.0, 1.0, 0.0, 1.0, 2.0, 3.0, 0.0, 0.0, 2.0, 2.0, 1.0, 3.0, 1.0, 1.0, 0.0, 1.0, 2.0, 1.0, 1.0, 3.0])
A:sklearn.svm.tests.test_sparse.a->sklearn.svm.SVC(probability=True, max_iter=1, random_state=0)
A:sklearn.svm.tests.test_sparse.b->sklearn.base.clone(a)
A:sklearn.svm.tests.test_sparse.dense_svm->sklearn.svm.SVC(C=1, kernel=lambda x, y: np.dot(x, y.T), probability=True, random_state=0)
A:sklearn.svm.tests.test_sparse.pred_dense->sklearn.svm.SVC(C=1, kernel=lambda x, y: np.dot(x, y.T), probability=True, random_state=0).fit(X, Y).predict(X)
A:sklearn.svm.tests.test_sparse.sp->sklearn.svm.SVC(C=1, kernel=lambda x, y: x * y.T, probability=True, random_state=0, max_iter=1)
A:sklearn.svm.tests.test_sparse.proba_1->sklearn.svm.SVC(probability=True, max_iter=1, random_state=0).fit(X, Y).predict_proba(X)
A:sklearn.svm.tests.test_sparse.proba_2->sklearn.svm.SVC(probability=True, max_iter=1, random_state=0).fit(X, Y).predict_proba(X)
sklearn.svm.tests.test_sparse.test_consistent_proba()
sklearn.svm.tests.test_sparse.test_error()
sklearn.svm.tests.test_sparse.test_linearsvc()
sklearn.svm.tests.test_sparse.test_linearsvc_iris()
sklearn.svm.tests.test_sparse.test_sample_weights()
sklearn.svm.tests.test_sparse.test_sparse_liblinear_intercept_handling()
sklearn.svm.tests.test_sparse.test_sparse_realdata()
sklearn.svm.tests.test_sparse.test_sparse_svc_clone_with_callable_kernel()
sklearn.svm.tests.test_sparse.test_svc()
sklearn.svm.tests.test_sparse.test_svc_iris()
sklearn.svm.tests.test_sparse.test_svc_with_custom_kernel()
sklearn.svm.tests.test_sparse.test_timeout()
sklearn.svm.tests.test_sparse.test_unsorted_indices()
sklearn.svm.tests.test_sparse.test_weight()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/svm/tests/test_svm.py----------------------------------------
A:sklearn.svm.tests.test_svm.iris->sklearn.datasets.load_iris()
A:sklearn.svm.tests.test_svm.rng->check_random_state(42)
A:sklearn.svm.tests.test_svm.perm->check_random_state(42).permutation(iris.target.size)
A:sklearn.svm.tests.test_svm.clf->sklearn.svm.LinearSVC(verbose=1)
A:sklearn.svm.tests.test_svm.model->sklearn.svm.libsvm.fit(iris.data, iris.target.astype(np.float64), kernel='linear')
A:sklearn.svm.tests.test_svm.pred->sklearn.svm.LinearSVC(verbose=1).predict(T)
A:sklearn.svm.tests.test_svm.K->numpy.zeros_like(K)
A:sklearn.svm.tests.test_svm.KT->numpy.zeros_like(KT)
A:sklearn.svm.tests.test_svm.KT[i, j]->numpy.dot(T[i], X[j])
A:sklearn.svm.tests.test_svm.clf2->sklearn.svm.SVC(kernel='linear')
A:sklearn.svm.tests.test_svm.K[i, j]->numpy.dot(iris.data[i], iris.data[j])
A:sklearn.svm.tests.test_svm.diabetes->sklearn.datasets.load_diabetes()
A:sklearn.svm.tests.test_svm.rnd->check_random_state(2)
A:sklearn.svm.tests.test_svm.X_outliers->check_random_state(2).uniform(low=-4, high=4, size=(20, 2))
A:sklearn.svm.tests.test_svm.y_pred_test->sklearn.svm.LinearSVC(verbose=1).predict(X_test)
A:sklearn.svm.tests.test_svm.y_pred_outliers->sklearn.svm.LinearSVC(verbose=1).predict(X_outliers)
A:sklearn.svm.tests.test_svm.dec_func_test->sklearn.svm.LinearSVC(verbose=1).decision_function(X_test)
A:sklearn.svm.tests.test_svm.dec_func_outliers->sklearn.svm.LinearSVC(verbose=1).decision_function(X_outliers)
A:sklearn.svm.tests.test_svm.clf.dual_coef_->numpy.array([[0.0, 1.0]])
A:sklearn.svm.tests.test_svm.prob_predict->sklearn.svm.LinearSVC(verbose=1).predict_proba(iris.data)
A:sklearn.svm.tests.test_svm.prediction->sklearn.svm.LinearSVC(verbose=1).predict(X)
A:sklearn.svm.tests.test_svm.expected->numpy.array([[-1.0], [-0.66], [-1.0], [0.66], [1.0], [1.0]])
A:sklearn.svm.tests.test_svm.(X_, y_)->make_classification(n_samples=200, n_features=10, weights=[0.833, 0.167], random_state=2)
A:sklearn.svm.tests.test_svm.y_pred->sklearn.svm.LinearSVC(verbose=1).fit(X[unbalanced], y[unbalanced]).predict(X)
A:sklearn.svm.tests.test_svm.unbalanced->numpy.delete(np.arange(y.size), np.where(y > 2)[0][::2])
A:sklearn.svm.tests.test_svm.classes->numpy.unique(y[unbalanced])
A:sklearn.svm.tests.test_svm.class_weights->compute_class_weight('auto', classes, y[unbalanced])
A:sklearn.svm.tests.test_svm.y_pred_balanced->sklearn.svm.LinearSVC(verbose=1).fit(X[unbalanced], y[unbalanced]).predict(X)
A:sklearn.svm.tests.test_svm.Xf->numpy.asfortranarray(X)
A:sklearn.svm.tests.test_svm.yf->numpy.ascontiguousarray(np.tile(Y, (2, 1)).T)
A:sklearn.svm.tests.test_svm.sparse_gram->scipy.sparse.csr_matrix([[1, 0], [0, 1]])
A:sklearn.svm.tests.test_svm.dec->sklearn.svm.LinearSVC(verbose=1).decision_function(iris.data)
A:sklearn.svm.tests.test_svm.ovr_clf->sklearn.svm.LinearSVC(random_state=0).fit(iris.data, iris.target)
A:sklearn.svm.tests.test_svm.cs_clf->sklearn.svm.LinearSVC(multi_class='crammer_singer', random_state=0)
A:sklearn.svm.tests.test_svm.(X, y)->make_classification(n_classes=2, random_state=0)
A:sklearn.svm.tests.test_svm.acc->sklearn.svm.LinearSVC(fit_intercept=fit_intercept, multi_class='crammer_singer', random_state=0).fit(X, y).score(X, y)
A:sklearn.svm.tests.test_svm.values->sklearn.svm.LinearSVC(verbose=1).decision_function(X)
A:sklearn.svm.tests.test_svm.clf.coef_->sklearn.svm.LinearSVC(verbose=1).coef_.copy()
A:sklearn.svm.tests.test_svm.clf.intercept_->sklearn.svm.LinearSVC(verbose=1).intercept_.copy()
A:sklearn.svm.tests.test_svm.values2->sklearn.svm.LinearSVC(verbose=1).decision_function(X)
A:sklearn.svm.tests.test_svm.stdout->os.dup(1)
A:sklearn.svm.tests.test_svm.svm_callable->sklearn.svm.SVC(kernel=lambda x, y: np.dot(x, y.T), probability=True, random_state=0)
A:sklearn.svm.tests.test_svm.svm_cloned->sklearn.base.clone(svm_callable)
A:sklearn.svm.tests.test_svm.svm_builtin->sklearn.svm.SVC(kernel='linear', probability=True, random_state=0)
A:sklearn.svm.tests.test_svm.svc->sklearn.svm.SVC(kernel=lambda x, y: x)
A:sklearn.svm.tests.test_svm.a->sklearn.svm.SVC(probability=True, max_iter=1, random_state=0)
A:sklearn.svm.tests.test_svm.proba_1->sklearn.svm.SVC(probability=True, max_iter=1, random_state=0).fit(X, Y).predict_proba(X)
A:sklearn.svm.tests.test_svm.proba_2->sklearn.svm.SVC(probability=True, max_iter=1, random_state=0).fit(X, Y).predict_proba(X)
sklearn.svm.tests.test_svm.test_auto_weight()
sklearn.svm.tests.test_svm.test_bad_input()
sklearn.svm.tests.test_svm.test_consistent_proba()
sklearn.svm.tests.test_svm.test_crammer_singer_binary()
sklearn.svm.tests.test_svm.test_decision_function()
sklearn.svm.tests.test_svm.test_dense_liblinear_intercept_handling(classifier=svm.LinearSVC)
sklearn.svm.tests.test_svm.test_immutable_coef_property()
sklearn.svm.tests.test_svm.test_inheritance()
sklearn.svm.tests.test_svm.test_liblinear_set_coef()
sklearn.svm.tests.test_svm.test_libsvm_iris()
sklearn.svm.tests.test_svm.test_libsvm_parameters()
sklearn.svm.tests.test_svm.test_linearsvc()
sklearn.svm.tests.test_svm.test_linearsvc_crammer_singer()
sklearn.svm.tests.test_svm.test_linearsvc_iris()
sklearn.svm.tests.test_svm.test_linearsvc_parameters()
sklearn.svm.tests.test_svm.test_linearsvc_verbose()
sklearn.svm.tests.test_svm.test_oneclass()
sklearn.svm.tests.test_svm.test_oneclass_decision_function()
sklearn.svm.tests.test_svm.test_precomputed()
sklearn.svm.tests.test_svm.test_probability()
sklearn.svm.tests.test_svm.test_sample_weights()
sklearn.svm.tests.test_svm.test_single_sample_1d()
sklearn.svm.tests.test_svm.test_sparse_precomputed()
sklearn.svm.tests.test_svm.test_svc_bad_kernel()
sklearn.svm.tests.test_svm.test_svc_clone_with_callable_kernel()
sklearn.svm.tests.test_svm.test_svr()
sklearn.svm.tests.test_svm.test_svr_errors()
sklearn.svm.tests.test_svm.test_timeout()
sklearn.svm.tests.test_svm.test_tweak_params()
sklearn.svm.tests.test_svm.test_weight()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/svm/tests/test_bounds.py----------------------------------------
A:sklearn.svm.tests.test_bounds.sparse_X->scipy.sparse.csr_matrix(dense_X)
A:sklearn.svm.tests.test_bounds.min_c->l1_min_c(X, y, loss, fit_intercept, intercept_scaling)
sklearn.svm.tests.test_bounds.check_l1_min_c(X,y,loss,fit_intercept=True,intercept_scaling=None)
sklearn.svm.tests.test_bounds.test_ill_posed_min_c()
sklearn.svm.tests.test_bounds.test_l1_min_c()
sklearn.svm.tests.test_bounds.test_unsupported_loss()


----------------------------------------/home/zhang/Packages/sklearn/sklearn0.15.2/svm/tests/__init__.py----------------------------------------

