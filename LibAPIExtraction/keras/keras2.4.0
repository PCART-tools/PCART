
----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/losses.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/metrics.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/optimizers.py----------------------------------------
A:keras.optimizers.then_expression->tensorflow.scalar_mul(c / n, g)
A:keras.optimizers.g_shape->copy.copy(then_expression.dense_shape)
A:keras.optimizers.condition->tensorflow.cast(condition, 'bool')
A:keras.optimizers.g->K.switch(K.greater_equal(n, c), g * c / n, g)
A:keras.optimizers.grads->self.optimizer.compute_gradients(loss, var_list=params)
A:keras.optimizers.norm->K.sqrt(sum([K.sum(K.square(g)) for g in grads]))
A:keras.optimizers.param_values->K.batch_get_value(params)
A:keras.optimizers.learning_rate->kwargs.pop('lr', learning_rate)
A:keras.optimizers.self.initial_decay->kwargs.pop('decay', 0.0)
A:keras.optimizers.self.iterations->K.variable(0, dtype='int64', name='iterations')
A:keras.optimizers.self.learning_rate->K.variable(learning_rate, name='learning_rate')
A:keras.optimizers.self.momentum->K.variable(momentum, name='momentum')
A:keras.optimizers.self.decay->K.variable(self.initial_decay, name='decay')
A:keras.optimizers.new_p->p.constraint(new_p)
A:keras.optimizers.base_config->super(Nadam, self).get_config()
A:keras.optimizers.self.epsilon->kwargs.pop('epsilon', K.epsilon())
A:keras.optimizers.self.rho->K.variable(rho, name='rho')
A:keras.optimizers.self.beta_1->K.variable(beta_1, name='beta_1')
A:keras.optimizers.self.beta_2->K.variable(beta_2, name='beta_2')
A:keras.optimizers.vhat_t->K.maximum(vhat, v_t)
A:keras.optimizers.u_t->K.maximum(self.beta_2 * u, K.abs(g))
A:keras.optimizers.self.schedule_decay->kwargs.pop('schedule_decay', 0.004)
A:keras.optimizers.self.m_schedule->K.variable(1.0, name='m_schedule')
A:keras.optimizers.opt_update->self.optimizer.apply_gradients(grads, global_step=self.iterations)
A:keras.optimizers.config['class_name']->config['class_name'].lower().lower()
keras.optimizers.Adadelta(self,learning_rate=1.0,rho=0.95,**kwargs)
keras.optimizers.Adadelta.__init__(self,learning_rate=1.0,rho=0.95,**kwargs)
keras.optimizers.Adadelta.get_config(self)
keras.optimizers.Adadelta.get_updates(self,loss,params)
keras.optimizers.Adadelta.set_weights(self,weights)
keras.optimizers.Adagrad(self,learning_rate=0.01,**kwargs)
keras.optimizers.Adagrad.__init__(self,learning_rate=0.01,**kwargs)
keras.optimizers.Adagrad.get_config(self)
keras.optimizers.Adagrad.get_updates(self,loss,params)
keras.optimizers.Adagrad.set_weights(self,weights)
keras.optimizers.Adam(self,learning_rate=0.001,beta_1=0.9,beta_2=0.999,amsgrad=False,**kwargs)
keras.optimizers.Adam.__init__(self,learning_rate=0.001,beta_1=0.9,beta_2=0.999,amsgrad=False,**kwargs)
keras.optimizers.Adam.get_config(self)
keras.optimizers.Adam.get_updates(self,loss,params)
keras.optimizers.Adamax(self,learning_rate=0.002,beta_1=0.9,beta_2=0.999,**kwargs)
keras.optimizers.Adamax.__init__(self,learning_rate=0.002,beta_1=0.9,beta_2=0.999,**kwargs)
keras.optimizers.Adamax.get_config(self)
keras.optimizers.Adamax.get_updates(self,loss,params)
keras.optimizers.Nadam(self,learning_rate=0.002,beta_1=0.9,beta_2=0.999,**kwargs)
keras.optimizers.Nadam.__init__(self,learning_rate=0.002,beta_1=0.9,beta_2=0.999,**kwargs)
keras.optimizers.Nadam.get_config(self)
keras.optimizers.Nadam.get_updates(self,loss,params)
keras.optimizers.Nadam.set_weights(self,weights)
keras.optimizers.Optimizer(self,**kwargs)
keras.optimizers.Optimizer.__init__(self,**kwargs)
keras.optimizers.Optimizer.from_config(cls,config)
keras.optimizers.Optimizer.get_config(self)
keras.optimizers.Optimizer.get_gradients(self,loss,params)
keras.optimizers.Optimizer.get_updates(self,loss,params)
keras.optimizers.Optimizer.get_weights(self)
keras.optimizers.Optimizer.lr(self)
keras.optimizers.Optimizer.set_weights(self,weights)
keras.optimizers.RMSprop(self,learning_rate=0.001,rho=0.9,**kwargs)
keras.optimizers.RMSprop.__init__(self,learning_rate=0.001,rho=0.9,**kwargs)
keras.optimizers.RMSprop.get_config(self)
keras.optimizers.RMSprop.get_updates(self,loss,params)
keras.optimizers.RMSprop.set_weights(self,weights)
keras.optimizers.SGD(self,learning_rate=0.01,momentum=0.0,nesterov=False,**kwargs)
keras.optimizers.SGD.__init__(self,learning_rate=0.01,momentum=0.0,nesterov=False,**kwargs)
keras.optimizers.SGD.get_config(self)
keras.optimizers.SGD.get_updates(self,loss,params)
keras.optimizers.TFOptimizer(self,optimizer)
keras.optimizers.TFOptimizer.__init__(self,optimizer)
keras.optimizers.TFOptimizer.from_config(cls,config)
keras.optimizers.TFOptimizer.get_config(self)
keras.optimizers.TFOptimizer.get_updates(self,loss,params)
keras.optimizers.TFOptimizer.weights(self)
keras.optimizers.clip_norm(g,c,n)
keras.optimizers.deserialize(config,custom_objects=None)
keras.optimizers.get(identifier)
keras.optimizers.serialize(optimizer)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/regularizers.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/models.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/backend.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/callbacks.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/initializers.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/activations.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/objectives.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/constraints.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/preprocessing/image.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/preprocessing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/preprocessing/text.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/preprocessing/sequence.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/datasets/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/datasets/cifar.py----------------------------------------
A:keras.datasets.cifar.d->six.moves.cPickle.load(f, encoding='bytes')
A:keras.datasets.cifar.data->data.reshape(data.shape[0], 3, 32, 32).reshape(data.shape[0], 3, 32, 32)
keras.datasets.cifar.load_batch(fpath,label_key='labels')


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/datasets/reuters.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/datasets/fashion_mnist.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/datasets/cifar100.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/datasets/mnist.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/datasets/boston_housing.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/datasets/imdb.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/datasets/cifar10.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/engine/input_layer.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/engine/sequential.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/engine/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/engine/training_generator.py----------------------------------------
A:keras.engine.training_generator.do_validation->bool(validation_data)
A:keras.engine.training_generator.use_sequence_api->is_sequence(generator)
A:keras.engine.training_generator.steps_per_epoch->len(generator)
A:keras.engine.training_generator.val_use_sequence_api->is_sequence(validation_data)
A:keras.engine.training_generator.model.history->cbks.History()
A:keras.engine.training_generator.callbacks->cbks.CallbackList(callbacks)
A:keras.engine.training_generator.callback_model->model._get_callback_model()
A:keras.engine.training_generator.val_enqueuer->GeneratorEnqueuer(val_data, use_multiprocessing=use_multiprocessing)
A:keras.engine.training_generator.val_enqueuer_gen->iter_sequence_infinite(val_data)
A:keras.engine.training_generator.(val_x, val_y, val_sample_weights)->model._standardize_user_data(val_x, val_y, val_sample_weight)
A:keras.engine.training_generator.enqueuer->GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing)
A:keras.engine.training_generator.output_generator->iter_sequence_infinite(generator)
A:keras.engine.training_generator.generator_output->next(output_generator)
A:keras.engine.training_generator.outs->to_list(outs)
A:keras.engine.training_generator.val_outs->to_list(val_outs)
A:keras.engine.training_generator.steps->len(generator)
A:keras.engine.training_generator.callback_metrics->list(model.metrics_names)
A:keras.engine.training_generator.progbar->Progbar(target=steps)
keras.engine.training_generator.evaluate_generator(model,generator,steps=None,callbacks=None,max_queue_size=10,workers=1,use_multiprocessing=False,verbose=0)
keras.engine.training_generator.fit_generator(model,generator,steps_per_epoch=None,epochs=1,verbose=1,callbacks=None,validation_data=None,validation_steps=None,validation_freq=1,class_weight=None,max_queue_size=10,workers=1,use_multiprocessing=False,shuffle=True,initial_epoch=0)
keras.engine.training_generator.predict_generator(model,generator,steps=None,callbacks=None,max_queue_size=10,workers=1,use_multiprocessing=False,verbose=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/engine/training.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/engine/training_arrays.py----------------------------------------
A:keras.engine.training_arrays.num_train_samples->check_num_samples(fit_inputs, batch_size=batch_size, steps=steps_per_epoch, steps_name='steps_per_epoch')
A:keras.engine.training_arrays.index_array->numpy.arange(num_samples)
A:keras.engine.training_arrays.model.history->cbks.History()
A:keras.engine.training_arrays.callbacks->cbks.CallbackList(callbacks)
A:keras.engine.training_arrays.callback_model->model._get_callback_model()
A:keras.engine.training_arrays.callback_metrics->list(model.metrics_names)
A:keras.engine.training_arrays.outs->to_list(outs)
A:keras.engine.training_arrays.val_outs->to_list(val_outs)
A:keras.engine.training_arrays.batches->make_batches(num_samples, batch_size)
A:keras.engine.training_arrays.ins_batch->slice_arrays(ins, batch_ids)
A:keras.engine.training_arrays.ins_batch[i]->ins_batch[i].toarray().toarray()
A:keras.engine.training_arrays.num_samples->check_num_samples(ins, batch_size=batch_size, steps=steps, steps_name='steps')
A:keras.engine.training_arrays.progbar->Progbar(target=num_samples)
A:keras.engine.training_arrays.batch_outs->f(ins_batch)
A:keras.engine.training_arrays.outs[i]->float(batch_out)
A:keras.engine.training_arrays.batch_logs[l]->float(o)
keras.engine.training_arrays.fit_loop(model,fit_function,fit_inputs,out_labels=None,batch_size=None,epochs=100,verbose=1,callbacks=None,val_function=None,val_inputs=None,shuffle=True,initial_epoch=0,steps_per_epoch=None,validation_steps=None,validation_freq=1)
keras.engine.training_arrays.predict_loop(model,f,ins,batch_size=32,verbose=0,steps=None,callbacks=None)
keras.engine.training_arrays.test_loop(model,f,ins,batch_size=None,verbose=0,steps=None,callbacks=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/engine/training_utils.py----------------------------------------
A:keras.engine.training_utils.shape->K.int_shape(x)
A:keras.engine.training_utils.x->numpy.expand_dims(x, 1)
A:keras.engine.training_utils.set_x->set_of_lengths(inputs)
A:keras.engine.training_utils.set_y->set_of_lengths(targets)
A:keras.engine.training_utils.set_w->set_of_lengths(weights)
A:keras.engine.training_utils.is_loss_wrapper->isinstance(loss, losses.LossFunctionWrapper)
A:keras.engine.training_utils.batch_count->int(len(index_array) / batch_size)
A:keras.engine.training_utils.index_array->index_array.flatten().flatten()
A:keras.engine.training_utils.score_array->K.mean(score_array, axis=list(range(weight_ndim, ndim)))
A:keras.engine.training_utils.mask->K.cast(mask, y_pred.dtype)
A:keras.engine.training_utils.ndim->K.ndim(score_array)
A:keras.engine.training_utils.weight_ndim->K.ndim(weights)
A:keras.engine.training_utils.y_classes->numpy.reshape(y, y.shape[0])
A:keras.engine.training_utils.class_sample_weight->numpy.asarray([class_weight[cls] for cls in y_classes if cls in class_weight])
A:keras.engine.training_utils.existing_classes->set(y_classes)
A:keras.engine.training_utils.existing_class_weight->set(class_weight.keys())
A:keras.engine.training_utils.(batch_input_shape, _)->get_input_shape_and_dtype(layer)
A:keras.engine.training_utils.loss->losses.get(loss)
A:keras.engine.training_utils.loss_fn->losses.get(loss)
A:keras.engine.training_utils.weight->K.placeholder(shape=shape, name=output_name + '_sample_weights')
A:keras.engine.training_utils.(weight, mode)->get_output_sample_weight_and_mode(skip_target_weighing_indices, sample_weight_mode, name, i)
A:keras.engine.training_utils.any_sub_list->any((isinstance(m, list) for m in metrics))
A:keras.engine.training_utils.output_metrics->utils.generic_utils.to_list(metrics.get(name, []))
A:keras.engine.training_utils.metrics_dict->OrderedDict()
A:keras.engine.training_utils.metric_name->get_metric_name(metric, is_weighted)
A:keras.engine.training_utils.metric_fn->metrics_module.MeanMetricWrapper(metric_fn, name=metric_name)
A:keras.engine.training_utils.metric->metrics_module.get(metric)
A:keras.engine.training_utils.(mask, _, weights)->utils.losses_utils.squeeze_or_expand_dimensions(mask, sample_weight=weights)
A:keras.engine.training_utils.update_ops->metrics_module.MeanMetricWrapper(metric_fn, name=metric_name).update_state(y_true, sample_weight=weights)
keras.engine.training_utils.batch_shuffle(index_array,batch_size)
keras.engine.training_utils.call_metric_function(metric_fn,y_true,y_pred=None,weights=None,mask=None)
keras.engine.training_utils.check_array_length_consistency(inputs,targets,weights=None)
keras.engine.training_utils.check_generator_arguments(y=None,sample_weight=None,validation_split=None)
keras.engine.training_utils.check_loss_and_target_compatibility(targets,loss_fns,output_shapes)
keras.engine.training_utils.check_num_samples(ins,batch_size=None,steps=None,steps_name='steps')
keras.engine.training_utils.collect_per_output_metric_info(metrics,output_names,output_shapes,loss_fns,is_weighted=False)
keras.engine.training_utils.get_input_shape_and_dtype(layer)
keras.engine.training_utils.get_loss_function(loss)
keras.engine.training_utils.get_metric_function(metric,output_shape=None,loss_fn=None)
keras.engine.training_utils.get_metric_name(metric,weighted=False)
keras.engine.training_utils.get_output_sample_weight_and_mode(skip_target_weighing_indices,sample_weight_mode,output_name,output_index)
keras.engine.training_utils.get_static_batch_size(layer)
keras.engine.training_utils.is_generator_or_sequence(x)
keras.engine.training_utils.is_sequence(seq)
keras.engine.training_utils.iter_sequence_infinite(seq)
keras.engine.training_utils.make_batches(size,batch_size)
keras.engine.training_utils.prepare_loss_functions(loss,output_names)
keras.engine.training_utils.prepare_loss_weights(output_names,loss_weights=None)
keras.engine.training_utils.prepare_sample_weights(output_names,sample_weight_mode,skip_target_weighing_indices)
keras.engine.training_utils.should_run_validation(validation_freq,epoch)
keras.engine.training_utils.standardize_class_weights(class_weight,output_names)
keras.engine.training_utils.standardize_input_data(data,names,shapes=None,check_batch_axis=True,exception_prefix='')
keras.engine.training_utils.standardize_sample_or_class_weights(x_weight,output_names,weight_type)
keras.engine.training_utils.standardize_sample_weights(sample_weight,output_names)
keras.engine.training_utils.standardize_single_array(x)
keras.engine.training_utils.standardize_weights(y,sample_weight=None,class_weight=None,sample_weight_mode=None)
keras.engine.training_utils.weighted_masked_objective(fn)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/engine/topology.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/engine/network.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/engine/saving.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/engine/base_layer.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/applications/inception_resnet_v2.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/applications/nasnet.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/applications/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/applications/vgg16.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/applications/resnet.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/applications/imagenet_utils.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/applications/mobilenet.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/applications/densenet.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/applications/resnet_v2.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/applications/mobilenet_v2.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/applications/xception.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/applications/resnet50.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/applications/vgg19.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/applications/inception_v3.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/backend/cntk_backend.py----------------------------------------
A:keras.backend.cntk_backend.dev->cntk.device.use_default_device()
A:keras.backend.cntk_backend._LEARNING_PHASE_PLACEHOLDER->cntk.constant(shape=(), dtype=np.float32, value=1.0, name='_keras_learning_phase')
A:keras.backend.cntk_backend._UID_PREFIXES->defaultdict(int)
A:keras.backend.cntk_backend._LEARNING_PHASE_PLACEHOLDER.value->numpy.asarray(value)
A:keras.backend.cntk_backend.training->learning_phase()
A:keras.backend.cntk_backend.x->cntk.swapaxes(x, -1, axis)
A:keras.backend.cntk_backend.alt->alt()
A:keras.backend.cntk_backend.result->arguments.data().as_shape((num_batch,) + self.target_shape)
A:keras.backend.cntk_backend.dtype->floatx()
A:keras.backend.cntk_backend.value->numpy.asarray(value)
A:keras.backend.cntk_backend.v->self.metrics_func.eval(input_dict, as_numpy=False).asarray()
A:keras.backend.cntk_backend.data_format->normalize_data_format(data_format)
A:keras.backend.cntk_backend.dims->len(shape)
A:keras.backend.cntk_backend.bias_dims->len(bias.shape)
A:keras.backend.cntk_backend.shape->int_shape(inputs)
A:keras.backend.cntk_backend.cntk_shape->tuple(cntk_shape)
A:keras.backend.cntk_backend.num_dynamic->get_num_dynamic_axis(placeholder)
A:keras.backend.cntk_backend.prefix->'_'.join(NAME_SCOPE_STACK)
A:keras.backend.cntk_backend.const->cntk.constant(np_value, dtype=dtype, name=_prepare_name(name, 'constant'))
A:keras.backend.cntk_backend.seed->numpy.random.randint(1, 10000000.0)
A:keras.backend.cntk_backend.p->cntk.parameter(shape=shape, init=C.initializer.normal(scale=scale, seed=seed), dtype=dtype, name=name)
A:keras.backend.cntk_backend.ctype->_convert_string_dtype(dtype)
A:keras.backend.cntk_backend.y_shape->int_shape(y)
A:keras.backend.cntk_backend.y->concatenate([ones(sliced_shape, dtype=x.dtype), repeat_elements(_x, rep=shape[axis] - 1 - rep, axis=axis)], axis=axis)
A:keras.backend.cntk_backend.x_shape->int_shape(x)
A:keras.backend.cntk_backend.x_ndim->len(x_shape)
A:keras.backend.cntk_backend.y_ndim->len(y_shape)
A:keras.backend.cntk_backend.axes->list(axes)
A:keras.backend.cntk_backend.permute_pattern->list(range(y_ndim))
A:keras.backend.cntk_backend.xi->squeeze(xi, 0)
A:keras.backend.cntk_backend.yi->squeeze(yi, 0)
A:keras.backend.cntk_backend.one_hot_matrix->cntk.ops.one_hot(indices, num_classes)
A:keras.backend.cntk_backend.nones->_get_dynamic_axis_num(inputs)
A:keras.backend.cntk_backend.axis->_normalize_axis(axis, x)
A:keras.backend.cntk_backend.output->permute_dimensions(output, (0, 2, 3, 1))
A:keras.backend.cntk_backend.m->mean(x, axis, keepdims=True)
A:keras.backend.cntk_backend.devs_squared->cntk.square(x - m)
A:keras.backend.cntk_backend.new_shape->tuple(new_shape)
A:keras.backend.cntk_backend.n->tuple(n)
A:keras.backend.cntk_backend.num_dynamic_axis->_get_dynamic_axis_num(x)
A:keras.backend.cntk_backend.ndim->len(shape)
A:keras.backend.cntk_backend._axis->cntk.Axis.all_axes()
A:keras.backend.cntk_backend.reduce_result->prod(x, axis, keepdims=keepdims)
A:keras.backend.cntk_backend.any_matrix->cntk.element_select(reduce_result, ones_like(reduce_result), zeros_like(reduce_result))
A:keras.backend.cntk_backend.all_matrix->cntk.element_select(reduce_result, ones_like(reduce_result), zeros_like(reduce_result))
A:keras.backend.cntk_backend.g->cntk.constant(0, shape=v.shape, name='keras_grad_placeholder')
A:keras.backend.cntk_backend.gamma->_reshape_dummy_dim(gamma, [0])
A:keras.backend.cntk_backend.beta->_reshape_dummy_dim(beta, [0])
A:keras.backend.cntk_backend.(mean, variant)->_moments(x, _normalize_axis(reduction_axes, x))
A:keras.backend.cntk_backend.normalized->batch_normalization(x, broadcast_mean, broadcast_var, broadcast_beta, broadcast_gamma, epsilon)
A:keras.backend.cntk_backend.broadcast_mean->cntk.reshape(mean, target_shape)
A:keras.backend.cntk_backend.broadcast_var->cntk.reshape(variant, target_shape)
A:keras.backend.cntk_backend.broadcast_gamma->cntk.reshape(gamma, target_shape)
A:keras.backend.cntk_backend.broadcast_beta->cntk.reshape(beta, target_shape)
A:keras.backend.cntk_backend._axes->tuple(axes)
A:keras.backend.cntk_backend.shift->cntk.stop_gradient(shift)
A:keras.backend.cntk_backend.shifted_mean->cntk.reduce_mean(shifted_mean, axis=axis)
A:keras.backend.cntk_backend.variance_mean->cntk.reduce_mean(variance_mean, axis=axis)
A:keras.backend.cntk_backend.variance->squeeze(variance, _axes)
A:keras.backend.cntk_backend.mean->_reshape_dummy_dim(mean, [0])
A:keras.backend.cntk_backend.var->_reshape_dummy_dim(var, [0])
A:keras.backend.cntk_backend.current_layout->tuple([i for i in range(dims)])
A:keras.backend.cntk_backend.tmp->cntk.ops.slice(x, axis, i, i + 1)
A:keras.backend.cntk_backend.mask_shape->int_shape(mask)
A:keras.backend.cntk_backend.mask->cntk.to_sequence_like(mask, rnn_inputs)
A:keras.backend.cntk_backend.states->tuple(initial)
A:keras.backend.cntk_backend.current->squeeze(current, 1)
A:keras.backend.cntk_backend.(output, new_states)->step_function(current, tuple(states) + tuple(constants))
A:keras.backend.cntk_backend.mask_slice->squeeze(mask_slice, 1)
A:keras.backend.cntk_backend.prev_output->zeros_like(output)
A:keras.backend.cntk_backend.final_output->_reshape_sequence(final_output, num_time_step)
A:keras.backend.cntk_backend.output_slice->expand_dims(outputs[i], 1)
A:keras.backend.cntk_backend.rnn_inputs->cntk.to_sequence(rnn_inputs)
A:keras.backend.cntk_backend.(new_output, new_states)->step_function(x, tuple(past_values) + tuple(rnn_constants))
A:keras.backend.cntk_backend.(final_output, final_states)->_recurrence(rnn_inputs, states, mask)
A:keras.backend.cntk_backend.last_output->cntk.sequence.last(final_output)
A:keras.backend.cntk_backend.norm->cntk.sqrt(C.reduce_sum(C.square(x), axis=axis[0]))
A:keras.backend.cntk_backend.kernel->cntk.transpose(kernel, (4, 3, 0, 1, 2))
A:keras.backend.cntk_backend.padding->_preprocess_border_mode(padding)
A:keras.backend.cntk_backend.depthwise_kernel->cntk.reshape(C.transpose(depthwise_kernel, (1, 0, 2, 3)), (-1, 1) + depthwise_kernel.shape[2:])
A:keras.backend.cntk_backend.pointwise_kernel->_preprocess_conv2d_kernel(pointwise_kernel, data_format)
A:keras.backend.cntk_backend.output_shape->transpose_shape(output_shape, 'channels_first', spatial_axes=(0, 1))
A:keras.backend.cntk_backend.negative_part->cntk.relu(-x)
A:keras.backend.cntk_backend.dim->numpy.prod(x.shape)
A:keras.backend.cntk_backend.output_dimensions->list(range(len(output.shape)))
A:keras.backend.cntk_backend.target->cntk.reshape(target, output.shape)
A:keras.backend.cntk_backend.u->cntk.assign(update[0], update[1])
A:keras.backend.cntk_backend.update_func->cntk.combine([u.output for u in u_ops])
A:keras.backend.cntk_backend.grads->cntk.combine([u.output for u in u_ops]).find_all_with_name('keras_grad_placeholder')
A:keras.backend.cntk_backend.learner->cntk.cntk_py.universal_learner(p_list, u_list, update_func)
A:keras.backend.cntk_backend.self.trainer->cntk.trainer.Trainer(outputs[0], criterion, [learner])
A:keras.backend.cntk_backend.self.trainer_output->tuple([f.output for f in criterion])
A:keras.backend.cntk_backend.self.unrelated_updates->cntk.combine([_.output for _ in unrelated_updates])
A:keras.backend.cntk_backend.self.metrics_func->cntk.combine(self.metrics_outputs)
A:keras.backend.cntk_backend.(_, output_values)->self.metrics_func.forward(input_dict, self.metrics_func.outputs, (self.metrics_func.outputs[0],), as_numpy=False)
A:keras.backend.cntk_backend.output_values->self.metrics_func.eval(input_dict, as_numpy=False)
A:keras.backend.cntk_backend.prefix_shape->tuple(prefix_shape)
A:keras.backend.cntk_backend.postfix_shape->tuple(postfix_shape)
A:keras.backend.cntk_backend.then_expression->then_expression()
A:keras.backend.cntk_backend.else_expression->else_expression()
A:keras.backend.cntk_backend.ndim_cond->ndim(condition)
A:keras.backend.cntk_backend.ndim_expr->ndim(then_expression)
A:keras.backend.cntk_backend.shape_expr->int_shape(then_expression)
A:keras.backend.cntk_backend.condition->tile(condition, shape_expr[ndim_cond + i])
A:keras.backend.cntk_backend.res->cntk.elu(x)
A:keras.backend.cntk_backend._targets->cntk.one_hot(targets, predictions.shape[-1])
A:keras.backend.cntk_backend.tmp_shape->list(int_shape(x))
A:keras.backend.cntk_backend.kernel_shape->int_shape(kernel)
A:keras.backend.cntk_backend.slice_length->py_slice(i * stride, i * stride + kernel_size[0])
A:keras.backend.cntk_backend.x_aggregate->concatenate(xs, axis=1)
A:keras.backend.cntk_backend.weight->permute_dimensions(kernel, (2, 0, 1))
A:keras.backend.cntk_backend.slice_row->py_slice(i * stride_row, i * stride_row + kernel_size[0])
A:keras.backend.cntk_backend.slice_col->py_slice(j * stride_col, j * stride_col + kernel_size[1])
A:keras.backend.cntk_backend.cntk_axes->_normalize_axis(axes, x)
A:keras.backend.cntk_backend.out._keras_shape->tuple(size)
A:keras.backend.cntk_backend.const_a->cntk.reshape(const_a, shape)
A:keras.backend.cntk_backend.batch_axis->cntk.Axis.default_batch_axis()
A:keras.backend.cntk_backend.num_static_element->numpy.prod(np.asarray(self.from_shape))
A:keras.backend.cntk_backend.num_batch->int(num_element / num_static_element)
A:keras.backend.cntk_backend.grad_array_view->root_gradients.data()
A:keras.backend.cntk_backend.num_old_batch->int(num_element / num_static_element)
A:keras.backend.cntk_backend.U->cntk.constant(np.triu(np.ones((dim, dim))).astype(x.dtype))
A:keras.backend.cntk_backend.out->cntk.element_times(out, y)
A:keras.backend.cntk_backend.sliced_shape->list(shape)
A:keras.backend.cntk_backend.accumulator->fn(accumulator, elems[-i])
A:keras.backend.cntk_backend.accumulator.name->str(name)
keras.backend.cntk_backend.ConvertToBatch(self,input,name='convert_to_batch')
keras.backend.cntk_backend.ConvertToBatch.__init__(self,input,name='convert_to_batch')
keras.backend.cntk_backend.ConvertToBatch.backward(self,state,root_gradients)
keras.backend.cntk_backend.ConvertToBatch.forward(self,arguments,device=None,outputs_to_retain=None)
keras.backend.cntk_backend.ConvertToBatch.infer_outputs(self)
keras.backend.cntk_backend.ConvertToStatic(self,input,batch_size,name='convert_to_static')
keras.backend.cntk_backend.ConvertToStatic.__init__(self,input,batch_size,name='convert_to_static')
keras.backend.cntk_backend.ConvertToStatic.backward(self,state,root_gradients)
keras.backend.cntk_backend.ConvertToStatic.forward(self,arguments,device=None,outputs_to_retain=None)
keras.backend.cntk_backend.ConvertToStatic.infer_outputs(self)
keras.backend.cntk_backend.Function(self,inputs,outputs,updates=[],**kwargs)
keras.backend.cntk_backend.Function.__init__(self,inputs,outputs,updates=[],**kwargs)
keras.backend.cntk_backend.Function._is_input_shape_compatible(input,placeholder)
keras.backend.cntk_backend.LambdaFunc(self,arg,when=lambdaarg:True,execute=lambdaarg:print(arg),name='')
keras.backend.cntk_backend.LambdaFunc.__init__(self,arg,when=lambdaarg:True,execute=lambdaarg:print(arg),name='')
keras.backend.cntk_backend.LambdaFunc.backward(self,state,root_gradients)
keras.backend.cntk_backend.LambdaFunc.forward(self,argument,device=None,outputs_to_retain=None)
keras.backend.cntk_backend.LambdaFunc.infer_outputs(self)
keras.backend.cntk_backend.ReshapeBatch(self,input,shape,name='reshape_with_batch')
keras.backend.cntk_backend.ReshapeBatch.__init__(self,input,shape,name='reshape_with_batch')
keras.backend.cntk_backend.ReshapeBatch.backward(self,state,root_gradients)
keras.backend.cntk_backend.ReshapeBatch.forward(self,arguments,device=None,outputs_to_retain=None)
keras.backend.cntk_backend.ReshapeBatch.infer_outputs(self)
keras.backend.cntk_backend._contain_seqence_axis(x)
keras.backend.cntk_backend._convert_dtype_string(dtype)
keras.backend.cntk_backend._convert_string_dtype(dtype)
keras.backend.cntk_backend._get_cntk_version()
keras.backend.cntk_backend._get_dynamic_axis_num(x)
keras.backend.cntk_backend._moments(x,axes=None,shift=None,keep_dims=False)
keras.backend.cntk_backend._normalize_axis(axis,x)
keras.backend.cntk_backend._padding(x,pattern,axis)
keras.backend.cntk_backend._postprocess_conv2d_output(x,data_format)
keras.backend.cntk_backend._postprocess_conv3d_output(x,dim_ordering)
keras.backend.cntk_backend._prepare_name(name,default)
keras.backend.cntk_backend._preprocess_border_mode(padding)
keras.backend.cntk_backend._preprocess_conv2d_input(x,data_format)
keras.backend.cntk_backend._preprocess_conv2d_kernel(kernel,data_format)
keras.backend.cntk_backend._preprocess_conv3d_input(x,data_format)
keras.backend.cntk_backend._preprocess_conv3d_kernel(kernel,dim_ordering)
keras.backend.cntk_backend._reduce_on_axis(x,axis,reduce_fun_name)
keras.backend.cntk_backend._remove_dims(x,axis,keepdims=False)
keras.backend.cntk_backend._reshape_batch(x,shape)
keras.backend.cntk_backend._reshape_dummy_dim(x,axis)
keras.backend.cntk_backend._reshape_sequence(x,time_step)
keras.backend.cntk_backend._static_rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None)
keras.backend.cntk_backend.abs(x)
keras.backend.cntk_backend.all(x,axis=None,keepdims=False)
keras.backend.cntk_backend.any(x,axis=None,keepdims=False)
keras.backend.cntk_backend.arange(start,stop=None,step=1,dtype='int32')
keras.backend.cntk_backend.argmax(x,axis=-1)
keras.backend.cntk_backend.argmin(x,axis=-1)
keras.backend.cntk_backend.batch_dot(x,y,axes=None)
keras.backend.cntk_backend.batch_flatten(x)
keras.backend.cntk_backend.batch_get_value(xs)
keras.backend.cntk_backend.batch_normalization(x,mean,var,beta,gamma,axis=-1,epsilon=0.001)
keras.backend.cntk_backend.batch_set_value(tuples)
keras.backend.cntk_backend.bias_add(x,bias,data_format=None)
keras.backend.cntk_backend.binary_crossentropy(target,output,from_logits=False)
keras.backend.cntk_backend.cast(x,dtype)
keras.backend.cntk_backend.categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.backend.cntk_backend.classification_error(target,output,axis=-1)
keras.backend.cntk_backend.clear_session()
keras.backend.cntk_backend.clip(x,min_value,max_value)
keras.backend.cntk_backend.concatenate(tensors,axis=-1)
keras.backend.cntk_backend.constant(value,dtype=None,shape=None,name=None)
keras.backend.cntk_backend.control_dependencies(control_inputs)
keras.backend.cntk_backend.conv1d(x,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.cntk_backend.conv2d(x,kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.cntk_backend.conv2d_transpose(x,kernel,output_shape,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.cntk_backend.conv3d(x,kernel,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1))
keras.backend.cntk_backend.conv3d_transpose(x,kernel,output_shape,strides=(1,1,1),padding='valid',data_format=None)
keras.backend.cntk_backend.cos(x)
keras.backend.cntk_backend.count_params(x)
keras.backend.cntk_backend.ctc_batch_cost(y_true,y_pred,input_length,label_length)
keras.backend.cntk_backend.ctc_decode(y_pred,input_length,greedy=True,beam_width=100,top_paths=1,merge_repeated=False)
keras.backend.cntk_backend.ctc_label_dense_to_sparse(labels,label_lengths)
keras.backend.cntk_backend.cumprod(x,axis=0)
keras.backend.cntk_backend.cumsum(x,axis=0)
keras.backend.cntk_backend.depthwise_conv2d(x,depthwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.cntk_backend.dot(x,y)
keras.backend.cntk_backend.dropout(x,level,noise_shape=None,seed=None)
keras.backend.cntk_backend.dtype(x)
keras.backend.cntk_backend.elu(x,alpha=1.0)
keras.backend.cntk_backend.equal(x,y)
keras.backend.cntk_backend.eval(x)
keras.backend.cntk_backend.exp(x)
keras.backend.cntk_backend.expand_dims(x,axis=-1)
keras.backend.cntk_backend.eye(size,dtype=None,name=None)
keras.backend.cntk_backend.flatten(x)
keras.backend.cntk_backend.foldl(fn,elems,initializer=None,name=None)
keras.backend.cntk_backend.foldr(fn,elems,initializer=None,name=None)
keras.backend.cntk_backend.function(inputs,outputs,updates=[],**kwargs)
keras.backend.cntk_backend.gather(reference,indices)
keras.backend.cntk_backend.get_num_dynamic_axis(x)
keras.backend.cntk_backend.get_uid(prefix='')
keras.backend.cntk_backend.get_value(x)
keras.backend.cntk_backend.get_variable_shape(x)
keras.backend.cntk_backend.gradients(loss,variables)
keras.backend.cntk_backend.greater(x,y)
keras.backend.cntk_backend.greater_equal(x,y)
keras.backend.cntk_backend.hard_sigmoid(x)
keras.backend.cntk_backend.has_seq_axis(x)
keras.backend.cntk_backend.identity(x,name=None)
keras.backend.cntk_backend.in_test_phase(x,alt,training=None)
keras.backend.cntk_backend.in_top_k(predictions,targets,k)
keras.backend.cntk_backend.in_train_phase(x,alt,training=None)
keras.backend.cntk_backend.int_shape(x)
keras.backend.cntk_backend.is_keras_tensor(x)
keras.backend.cntk_backend.is_placeholder(x)
keras.backend.cntk_backend.is_sparse(tensor)
keras.backend.cntk_backend.is_tensor(x)
keras.backend.cntk_backend.is_variable(x)
keras.backend.cntk_backend.l2_normalize(x,axis=None)
keras.backend.cntk_backend.learning_phase()
keras.backend.cntk_backend.less(x,y)
keras.backend.cntk_backend.less_equal(x,y)
keras.backend.cntk_backend.local_conv1d(inputs,kernel,kernel_size,strides,data_format=None)
keras.backend.cntk_backend.local_conv2d(inputs,kernel,kernel_size,strides,output_shape,data_format=None)
keras.backend.cntk_backend.log(x)
keras.backend.cntk_backend.logsumexp(x,axis=None,keepdims=False)
keras.backend.cntk_backend.map_fn(fn,elems,name=None,dtype=None)
keras.backend.cntk_backend.max(x,axis=None,keepdims=False)
keras.backend.cntk_backend.maximum(x,y)
keras.backend.cntk_backend.mean(x,axis=None,keepdims=False)
keras.backend.cntk_backend.min(x,axis=None,keepdims=False)
keras.backend.cntk_backend.minimum(x,y)
keras.backend.cntk_backend.moving_average_update(variable,value,momentum)
keras.backend.cntk_backend.name_scope(name)
keras.backend.cntk_backend.ndim(x)
keras.backend.cntk_backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.cntk_backend.not_equal(x,y)
keras.backend.cntk_backend.one_hot(indices,num_classes)
keras.backend.cntk_backend.ones(shape,dtype=None,name=None)
keras.backend.cntk_backend.ones_like(x,dtype=None,name=None)
keras.backend.cntk_backend.pad(x,pad_info,data_format,num_dynamic_axis)
keras.backend.cntk_backend.permute_dimensions(x,pattern)
keras.backend.cntk_backend.placeholder(shape=None,ndim=None,dtype=None,sparse=False,name=None,dynamic_axis_num=1)
keras.backend.cntk_backend.pool2d(x,pool_size,strides=(1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.cntk_backend.pool3d(x,pool_size,strides=(1,1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.cntk_backend.pow(x,a)
keras.backend.cntk_backend.print_tensor(x,message='')
keras.backend.cntk_backend.prod(x,axis=None,keepdims=False)
keras.backend.cntk_backend.random_binomial(shape,p=0.0,dtype=None,seed=None)
keras.backend.cntk_backend.random_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.cntk_backend.random_normal_variable(shape,mean,scale,dtype=None,name=None,seed=None)
keras.backend.cntk_backend.random_uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)
keras.backend.cntk_backend.random_uniform_variable(shape,low,high,dtype=None,name=None,seed=None)
keras.backend.cntk_backend.relu(x,alpha=0.0,max_value=None,threshold=0.0)
keras.backend.cntk_backend.repeat(x,n)
keras.backend.cntk_backend.repeat_elements(x,rep,axis)
keras.backend.cntk_backend.reset_uids()
keras.backend.cntk_backend.reshape(x,shape)
keras.backend.cntk_backend.resize_images(x,height_factor,width_factor,data_format,interpolation='nearest')
keras.backend.cntk_backend.resize_volumes(x,depth_factor,height_factor,width_factor,data_format)
keras.backend.cntk_backend.reverse(x,axes)
keras.backend.cntk_backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None)
keras.backend.cntk_backend.round(x)
keras.backend.cntk_backend.separable_conv1d(x,depthwise_kernel,pointwise_kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.cntk_backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.cntk_backend.set_learning_phase(value)
keras.backend.cntk_backend.set_value(x,value)
keras.backend.cntk_backend.shape(x)
keras.backend.cntk_backend.sigmoid(x)
keras.backend.cntk_backend.sign(x)
keras.backend.cntk_backend.sin(x)
keras.backend.cntk_backend.size(x,name=None)
keras.backend.cntk_backend.slice(x,start,size)
keras.backend.cntk_backend.softmax(x,axis=-1)
keras.backend.cntk_backend.softplus(x)
keras.backend.cntk_backend.softsign(x)
keras.backend.cntk_backend.sparse_categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.backend.cntk_backend.spatial_2d_padding(x,padding=((1,1),(1,1)),data_format=None)
keras.backend.cntk_backend.spatial_3d_padding(x,padding=((1,1),(1,1),(1,1)),data_format=None)
keras.backend.cntk_backend.sqrt(x)
keras.backend.cntk_backend.square(x)
keras.backend.cntk_backend.squeeze(x,axis)
keras.backend.cntk_backend.stack(x,axis=0)
keras.backend.cntk_backend.std(x,axis=None,keepdims=False)
keras.backend.cntk_backend.stop_gradient(variables)
keras.backend.cntk_backend.sum(x,axis=None,keepdims=False)
keras.backend.cntk_backend.switch(condition,then_expression,else_expression)
keras.backend.cntk_backend.tanh(x)
keras.backend.cntk_backend.temporal_padding(x,padding=(1,1))
keras.backend.cntk_backend.tile(x,n)
keras.backend.cntk_backend.to_dense(tensor)
keras.backend.cntk_backend.transpose(x)
keras.backend.cntk_backend.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.cntk_backend.update(x,new_x)
keras.backend.cntk_backend.update_add(x,increment)
keras.backend.cntk_backend.update_sub(x,decrement)
keras.backend.cntk_backend.var(x,axis=None,keepdims=False)
keras.backend.cntk_backend.variable(value,dtype=None,name=None,constraint=None)
keras.backend.cntk_backend.zeros(shape,dtype=None,name=None)
keras.backend.cntk_backend.zeros_like(x,dtype=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/backend/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py----------------------------------------
A:keras.backend.tensorflow_backend._SYMBOLIC_SCOPE->threading.local()
A:keras.backend.tensorflow_backend.out->tensorflow.matmul(x, y)
A:keras.backend.tensorflow_backend.value->tensorflow.random_normal_initializer(mean, scale, seed=seed)(shape, dtype=dtype)
A:keras.backend.tensorflow_backend.data_format->normalize_data_format(data_format)
A:keras.backend.tensorflow_backend.lp->tensorflow.python.keras.backend.learning_phase()
A:keras.backend.tensorflow_backend.int_lp->tensorflow.cast(lp, 'int32', name='learning_phase')
A:keras.backend.tensorflow_backend.session->get_session()
A:keras.backend.tensorflow_backend.variables->tensorflow.global_variables()
A:keras.backend.tensorflow_backend.is_initialized->get_session().run([tf.is_variable_initialized(v) for v in candidate_vars])
A:keras.backend.tensorflow_backend.self.device->tensorflow.python.framework.device.DeviceSpec.from_string(device_str)
A:keras.backend.tensorflow_backend.g->get_graph()
A:keras.backend.tensorflow_backend.op->tensorflow.print(message, x, output_stream=sys.stdout)
A:keras.backend.tensorflow_backend.device_type->device_type.lower().lower()
A:keras.backend.tensorflow_backend.device->_get_current_tf_device()
A:keras.backend.tensorflow_backend.devices->get_session().list_devices()
A:keras.backend.tensorflow_backend._LOCAL_DEVICES->tensorflow.config.experimental_list_devices()
A:keras.backend.tensorflow_backend.explicitly_on_cpu->_is_current_explicit_device('cpu')
A:keras.backend.tensorflow_backend.v->tensorflow.ones(shape=shape, dtype=dtype, name=name)
A:keras.backend.tensorflow_backend.v._keras_shape->int_shape(value)
A:keras.backend.tensorflow_backend.dtype->floatx()
A:keras.backend.tensorflow_backend.x->tensorflow.nn.bias_add(x, bias)
A:keras.backend.tensorflow_backend.shape->int_shape(x)
A:keras.backend.tensorflow_backend.eval_fn->function([], [x])
A:keras.backend.tensorflow_backend.seed->numpy.random.randint(10000000.0)
A:keras.backend.tensorflow_backend.decay->tensorflow.python.ops.math_ops.cast(decay, x.dtype.base_dtype)
A:keras.backend.tensorflow_backend.x_shape->int_shape(x)
A:keras.backend.tensorflow_backend.y_shape->shape(y)
A:keras.backend.tensorflow_backend.y_permute_dim->list(range(ndim(y)))
A:keras.backend.tensorflow_backend.xt->tensorflow.reshape(x, [-1, x_shape[-1]])
A:keras.backend.tensorflow_backend.yt->tensorflow.reshape(tf.transpose(y, perm=y_permute_dim), [y_shape[-2], -1])
A:keras.backend.tensorflow_backend.x_ndim->len(x_shape)
A:keras.backend.tensorflow_backend.y_ndim->len(y_shape)
A:keras.backend.tensorflow_backend.axes->list(axes)
A:keras.backend.tensorflow_backend.y->tensorflow.reshape(y, y_squashed_shape)
A:keras.backend.tensorflow_backend.pattern->transpose_shape(pattern, data_format, spatial_axes=(1, 2, 3))
A:keras.backend.tensorflow_backend.x_squashed_dim->tensorflow.reduce_prod(x_mid_dims)
A:keras.backend.tensorflow_backend.x_squashed_shape->tensorflow.stack([x_shape[0], x_squashed_dim, x_shape[-1]])
A:keras.backend.tensorflow_backend.y_squashed_dim->tensorflow.reduce_prod(y_trail_dims)
A:keras.backend.tensorflow_backend.y_squashed_shape->tensorflow.stack([y_shape[0], y_shape[1], y_squashed_dim])
A:keras.backend.tensorflow_backend.result->cast(result, dtype)
A:keras.backend.tensorflow_backend.output_shape->tensorflow.stack(list(output_shape))
A:keras.backend.tensorflow_backend.m->tensorflow.reduce_mean(x, axis, True)
A:keras.backend.tensorflow_backend.devs_squared->tensorflow.square(x - m)
A:keras.backend.tensorflow_backend.zero->_to_tensor(0.0, x.dtype.base_dtype)
A:keras.backend.tensorflow_backend.inf->_to_tensor(np.inf, x.dtype.base_dtype)
A:keras.backend.tensorflow_backend.(mean, var)->tensorflow.nn.moments(x, reduction_axes, None, None, False)
A:keras.backend.tensorflow_backend.normed->tensorflow.nn.batch_normalization(x, broadcast_mean, broadcast_var, broadcast_beta, broadcast_gamma, epsilon)
A:keras.backend.tensorflow_backend.target_shape->tensorflow.stack(target_shape)
A:keras.backend.tensorflow_backend.broadcast_mean->tensorflow.reshape(mean, target_shape)
A:keras.backend.tensorflow_backend.broadcast_var->tensorflow.reshape(var, target_shape)
A:keras.backend.tensorflow_backend.broadcast_gamma->tensorflow.reshape(gamma, target_shape)
A:keras.backend.tensorflow_backend.broadcast_beta->tensorflow.reshape(beta, target_shape)
A:keras.backend.tensorflow_backend.gamma->tensorflow.cast(gamma, tf.float32)
A:keras.backend.tensorflow_backend.beta->tensorflow.cast(beta, tf.float32)
A:keras.backend.tensorflow_backend.mean->tensorflow.cast(mean, tf.float32)
A:keras.backend.tensorflow_backend.var->tensorflow.cast(var, tf.float32)
A:keras.backend.tensorflow_backend.(y, _, _)->fused_batch_norm(x, gamma, beta, epsilon=epsilon, mean=mean, variance=var, data_format=tf_data_format, is_training=False)
A:keras.backend.tensorflow_backend.rank->ndim(tensors[0])
A:keras.backend.tensorflow_backend.original_shape->int_shape(x)
A:keras.backend.tensorflow_backend.output->permute_dimensions(output, (2, 0, 1, 3))
A:keras.backend.tensorflow_backend.splits->tensorflow.split(value=x, num_or_size_splits=x_shape[axis], axis=axis)
A:keras.backend.tensorflow_backend.x_rep->tensorflow.reshape(x_rep, x_shape)
A:keras.backend.tensorflow_backend.reps->tensorflow.constant(reps, dtype='int32')
A:keras.backend.tensorflow_backend.x_rep._keras_shape->tuple(x_shape)
A:keras.backend.tensorflow_backend.start->tensorflow.cond(start < 0, true_fn=lambda : tf.constant(0, dtype=start.dtype), false_fn=lambda : start)
A:keras.backend.tensorflow_backend.n->tuple(n)
A:keras.backend.tensorflow_backend.(last_output, outputs, new_states)->tensorflow.python.keras.backend.rnn(step_function, inputs, initial_states, go_backwards=go_backwards, mask=mask, constants=constants, unroll=unroll, input_length=input_length)
A:keras.backend.tensorflow_backend.reachable->tensorflow.python.keras.utils.tf_utils.get_reachable_from_inputs([learning_phase()], targets=[last_output])
A:keras.backend.tensorflow_backend.condition->tensorflow.tile(condition, tile_shape)
A:keras.backend.tensorflow_backend.cond_ndim->ndim(condition)
A:keras.backend.tensorflow_backend.then_expression->then_expression()
A:keras.backend.tensorflow_backend.else_expression->else_expression()
A:keras.backend.tensorflow_backend.expr_ndim->ndim(then_expression)
A:keras.backend.tensorflow_backend.cond_shape->tensorflow.concat([tf.shape(condition), [1] * ndim_diff], axis=0)
A:keras.backend.tensorflow_backend.expr_shape->tensorflow.shape(then_expression)
A:keras.backend.tensorflow_backend.zero_expr_shape->tensorflow.ones_like(expr_shape)
A:keras.backend.tensorflow_backend.tile_shape->tensorflow.where(shape_diff > 0, expr_shape, zero_expr_shape)
A:keras.backend.tensorflow_backend.training->learning_phase()
A:keras.backend.tensorflow_backend.negative_part->tensorflow.nn.relu(-x)
A:keras.backend.tensorflow_backend.max_value->_to_tensor(max_value, x.dtype.base_dtype)
A:keras.backend.tensorflow_backend.alpha->_to_tensor(alpha, x.dtype.base_dtype)
A:keras.backend.tensorflow_backend.res->tensorflow.nn.elu(x)
A:keras.backend.tensorflow_backend.kernel_shape->int_shape(kernel)
A:keras.backend.tensorflow_backend.padding->_preprocess_padding(padding)
A:keras.backend.tensorflow_backend.(x, tf_data_format)->_preprocess_conv3d_input(x, data_format)
A:keras.backend.tensorflow_backend.depthwise_kernel->tensorflow.expand_dims(depthwise_kernel, 0)
A:keras.backend.tensorflow_backend.pointwise_kernel->tensorflow.expand_dims(pointwise_kernel, 0)
A:keras.backend.tensorflow_backend.slice_length->py_slice(i * stride, i * stride + kernel_size[0])
A:keras.backend.tensorflow_backend.x_aggregate->concatenate(xs, axis=0)
A:keras.backend.tensorflow_backend.slice_row->py_slice(i * stride_row, i * stride_row + kernel_size[0])
A:keras.backend.tensorflow_backend.slice_col->py_slice(j * stride_col, j * stride_col + kernel_size[1])
A:keras.backend.tensorflow_backend.bias_shape->int_shape(bias)
A:keras.backend.tensorflow_backend.new_shape->transpose_shape(new_shape, data_format, spatial_axes=(1,))
A:keras.backend.tensorflow_backend.label_shape->tensorflow.cast(label_shape, tf.int64)
A:keras.backend.tensorflow_backend.num_batches_tns->tensorflow.stack([label_shape[0]])
A:keras.backend.tensorflow_backend.max_num_labels_tns->tensorflow.stack([label_shape[1]])
A:keras.backend.tensorflow_backend.init->tensorflow.cast(tf.fill([1, label_shape[1]], 0), tf.bool)
A:keras.backend.tensorflow_backend.dense_mask->tensorflow.python.ops.functional_ops.scan(range_less_than, label_lengths, initializer=init, parallel_iterations=1)
A:keras.backend.tensorflow_backend.label_array->tensorflow.reshape(tf.tile(tf.range(label_shape[1]), num_batches_tns), label_shape)
A:keras.backend.tensorflow_backend.label_ind->tensorflow.boolean_mask(label_array, dense_mask)
A:keras.backend.tensorflow_backend.tmp->tensorflow.tile(tf.range(label_shape[0]), max_num_labels_tns)
A:keras.backend.tensorflow_backend.batch_array->tensorflow.transpose(tf.reshape(tmp, reverse(label_shape, 0)))
A:keras.backend.tensorflow_backend.batch_ind->tensorflow.boolean_mask(batch_array, dense_mask)
A:keras.backend.tensorflow_backend.indices->tensorflow.cast(indices, tf.int64)
A:keras.backend.tensorflow_backend.vals_sparse->tensorflow.gather_nd(labels, indices)
A:keras.backend.tensorflow_backend.label_length->tensorflow.cast(tf.squeeze(label_length, axis=-1), tf.int32)
A:keras.backend.tensorflow_backend.input_length->tensorflow.cast(input_length, tf.int32)
A:keras.backend.tensorflow_backend.sparse_labels->tensorflow.cast(ctc_label_dense_to_sparse(y_true, label_length), tf.int32)
A:keras.backend.tensorflow_backend.y_pred->tensorflow.python.ops.math_ops.log(tf.transpose(y_pred, perm=[1, 0, 2]) + epsilon())
A:keras.backend.tensorflow_backend.(decoded, log_prob)->tensorflow.python.ops.ctc_ops.ctc_beam_search_decoder(inputs=y_pred, sequence_length=input_length, beam_width=beam_width, top_paths=top_paths, merge_repeated=merge_repeated)
A:keras.backend.tensorflow_backend.dense_tensor->tensorflow.sparse.to_dense(st, default_value=-1)
keras.backend.tensorflow_backend._TfDeviceCaptureOp(self)
keras.backend.tensorflow_backend._TfDeviceCaptureOp.__init__(self)
keras.backend.tensorflow_backend._TfDeviceCaptureOp._set_device(self,device)
keras.backend.tensorflow_backend._TfDeviceCaptureOp._set_device_from_string(self,device_str)
keras.backend.tensorflow_backend._broadcast_normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.tensorflow_backend._fused_normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.tensorflow_backend._get_available_gpus()
keras.backend.tensorflow_backend._get_current_tf_device()
keras.backend.tensorflow_backend._has_compat_v1()
keras.backend.tensorflow_backend._has_nchw_support()
keras.backend.tensorflow_backend._is_current_explicit_device(device_type)
keras.backend.tensorflow_backend._is_tf_1()
keras.backend.tensorflow_backend._preprocess_conv1d_input(x,data_format)
keras.backend.tensorflow_backend._preprocess_conv2d_input(x,data_format,force_transpose=False)
keras.backend.tensorflow_backend._preprocess_conv3d_input(x,data_format)
keras.backend.tensorflow_backend._preprocess_padding(padding)
keras.backend.tensorflow_backend._regular_normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.tensorflow_backend._to_tensor(x,dtype)
keras.backend.tensorflow_backend.abs(x)
keras.backend.tensorflow_backend.all(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.any(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.arange(start,stop=None,step=1,dtype='int32')
keras.backend.tensorflow_backend.argmax(x,axis=-1)
keras.backend.tensorflow_backend.argmin(x,axis=-1)
keras.backend.tensorflow_backend.batch_dot(x,y,axes=None)
keras.backend.tensorflow_backend.batch_flatten(x)
keras.backend.tensorflow_backend.batch_get_value(ops)
keras.backend.tensorflow_backend.batch_normalization(x,mean,var,beta,gamma,axis=-1,epsilon=0.001)
keras.backend.tensorflow_backend.batch_set_value(tuples)
keras.backend.tensorflow_backend.bias_add(x,bias,data_format=None)
keras.backend.tensorflow_backend.binary_crossentropy(target,output,from_logits=False)
keras.backend.tensorflow_backend.cast(x,dtype)
keras.backend.tensorflow_backend.cast_to_floatx(x)
keras.backend.tensorflow_backend.categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.backend.tensorflow_backend.clear_session()
keras.backend.tensorflow_backend.clip(x,min_value,max_value)
keras.backend.tensorflow_backend.concatenate(tensors,axis=-1)
keras.backend.tensorflow_backend.constant(value,dtype=None,shape=None,name=None)
keras.backend.tensorflow_backend.control_dependencies(control_inputs)
keras.backend.tensorflow_backend.conv1d(x,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.tensorflow_backend.conv2d(x,kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.tensorflow_backend.conv2d_transpose(x,kernel,output_shape,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.tensorflow_backend.conv3d(x,kernel,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1))
keras.backend.tensorflow_backend.conv3d_transpose(x,kernel,output_shape,strides=(1,1,1),padding='valid',data_format=None)
keras.backend.tensorflow_backend.cos(x)
keras.backend.tensorflow_backend.count_params(x)
keras.backend.tensorflow_backend.ctc_batch_cost(y_true,y_pred,input_length,label_length)
keras.backend.tensorflow_backend.ctc_decode(y_pred,input_length,greedy=True,beam_width=100,top_paths=1,merge_repeated=False)
keras.backend.tensorflow_backend.ctc_label_dense_to_sparse(labels,label_lengths)
keras.backend.tensorflow_backend.cumprod(x,axis=0)
keras.backend.tensorflow_backend.cumsum(x,axis=0)
keras.backend.tensorflow_backend.depthwise_conv2d(x,depthwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.tensorflow_backend.dot(x,y)
keras.backend.tensorflow_backend.dropout(x,level,noise_shape=None,seed=None)
keras.backend.tensorflow_backend.dtype(x)
keras.backend.tensorflow_backend.eager(func)
keras.backend.tensorflow_backend.elu(x,alpha=1.0)
keras.backend.tensorflow_backend.epsilon()
keras.backend.tensorflow_backend.equal(x,y)
keras.backend.tensorflow_backend.eval(x)
keras.backend.tensorflow_backend.exp(x)
keras.backend.tensorflow_backend.expand_dims(x,axis=-1)
keras.backend.tensorflow_backend.eye(size,dtype=None,name=None)
keras.backend.tensorflow_backend.flatten(x)
keras.backend.tensorflow_backend.floatx()
keras.backend.tensorflow_backend.foldl(fn,elems,initializer=None,name=None)
keras.backend.tensorflow_backend.foldr(fn,elems,initializer=None,name=None)
keras.backend.tensorflow_backend.function(inputs,outputs,updates=None,**kwargs)
keras.backend.tensorflow_backend.gather(reference,indices)
keras.backend.tensorflow_backend.get_session()
keras.backend.tensorflow_backend.get_uid(prefix='')
keras.backend.tensorflow_backend.get_value(x)
keras.backend.tensorflow_backend.get_variable_shape(x)
keras.backend.tensorflow_backend.gradients(loss,variables)
keras.backend.tensorflow_backend.greater(x,y)
keras.backend.tensorflow_backend.greater_equal(x,y)
keras.backend.tensorflow_backend.hard_sigmoid(x)
keras.backend.tensorflow_backend.identity(x,name=None)
keras.backend.tensorflow_backend.image_data_format()
keras.backend.tensorflow_backend.in_test_phase(x,alt,training=None)
keras.backend.tensorflow_backend.in_top_k(predictions,targets,k)
keras.backend.tensorflow_backend.in_train_phase(x,alt,training=None)
keras.backend.tensorflow_backend.int_shape(x)
keras.backend.tensorflow_backend.is_keras_tensor(x)
keras.backend.tensorflow_backend.is_placeholder(x)
keras.backend.tensorflow_backend.is_sparse(tensor)
keras.backend.tensorflow_backend.is_symbolic(x)
keras.backend.tensorflow_backend.is_tensor(x)
keras.backend.tensorflow_backend.is_variable(x)
keras.backend.tensorflow_backend.l2_normalize(x,axis=None)
keras.backend.tensorflow_backend.learning_phase()
keras.backend.tensorflow_backend.less(x,y)
keras.backend.tensorflow_backend.less_equal(x,y)
keras.backend.tensorflow_backend.local_conv1d(inputs,kernel,kernel_size,strides,data_format=None)
keras.backend.tensorflow_backend.local_conv2d(inputs,kernel,kernel_size,strides,output_shape,data_format=None)
keras.backend.tensorflow_backend.log(x)
keras.backend.tensorflow_backend.logsumexp(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.manual_variable_initialization(value)
keras.backend.tensorflow_backend.map_fn(fn,elems,name=None,dtype=None)
keras.backend.tensorflow_backend.max(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.maximum(x,y)
keras.backend.tensorflow_backend.mean(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.min(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.minimum(x,y)
keras.backend.tensorflow_backend.moving_average_update(x,value,momentum)
keras.backend.tensorflow_backend.ndim(x)
keras.backend.tensorflow_backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.tensorflow_backend.normalize_data_format(value)
keras.backend.tensorflow_backend.not_equal(x,y)
keras.backend.tensorflow_backend.one_hot(indices,num_classes)
keras.backend.tensorflow_backend.ones(shape,dtype=None,name=None)
keras.backend.tensorflow_backend.ones_like(x,dtype=None,name=None)
keras.backend.tensorflow_backend.permute_dimensions(x,pattern)
keras.backend.tensorflow_backend.placeholder(shape=None,ndim=None,dtype=None,sparse=False,name=None)
keras.backend.tensorflow_backend.pool2d(x,pool_size,strides=(1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.tensorflow_backend.pool3d(x,pool_size,strides=(1,1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.tensorflow_backend.pow(x,a)
keras.backend.tensorflow_backend.print_tensor(x,message='')
keras.backend.tensorflow_backend.prod(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.random_binomial(shape,p=0.0,dtype=None,seed=None)
keras.backend.tensorflow_backend.random_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.tensorflow_backend.random_normal_variable(shape,mean,scale,dtype=None,name=None,seed=None)
keras.backend.tensorflow_backend.random_uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)
keras.backend.tensorflow_backend.random_uniform_variable(shape,low,high,dtype=None,name=None,seed=None)
keras.backend.tensorflow_backend.relu(x,alpha=0.0,max_value=None,threshold=0.0)
keras.backend.tensorflow_backend.repeat(x,n)
keras.backend.tensorflow_backend.repeat_elements(x,rep,axis)
keras.backend.tensorflow_backend.reset_uids()
keras.backend.tensorflow_backend.reshape(x,shape)
keras.backend.tensorflow_backend.resize_images(x,height_factor,width_factor,data_format,interpolation='nearest')
keras.backend.tensorflow_backend.resize_volumes(x,depth_factor,height_factor,width_factor,data_format)
keras.backend.tensorflow_backend.reverse(x,axes)
keras.backend.tensorflow_backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None)
keras.backend.tensorflow_backend.round(x)
keras.backend.tensorflow_backend.separable_conv1d(x,depthwise_kernel,pointwise_kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.tensorflow_backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.tensorflow_backend.set_epsilon(e)
keras.backend.tensorflow_backend.set_floatx(floatx)
keras.backend.tensorflow_backend.set_image_data_format(data_format)
keras.backend.tensorflow_backend.set_learning_phase(value)
keras.backend.tensorflow_backend.set_session(session)
keras.backend.tensorflow_backend.set_value(x,value)
keras.backend.tensorflow_backend.shape(x)
keras.backend.tensorflow_backend.sigmoid(x)
keras.backend.tensorflow_backend.sign(x)
keras.backend.tensorflow_backend.sin(x)
keras.backend.tensorflow_backend.size(x,name=None)
keras.backend.tensorflow_backend.slice(x,start,size)
keras.backend.tensorflow_backend.softmax(x,axis=-1)
keras.backend.tensorflow_backend.softplus(x)
keras.backend.tensorflow_backend.softsign(x)
keras.backend.tensorflow_backend.sparse_categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.backend.tensorflow_backend.spatial_2d_padding(x,padding=((1,1),(1,1)),data_format=None)
keras.backend.tensorflow_backend.spatial_3d_padding(x,padding=((1,1),(1,1),(1,1)),data_format=None)
keras.backend.tensorflow_backend.sqrt(x)
keras.backend.tensorflow_backend.square(x)
keras.backend.tensorflow_backend.squeeze(x,axis)
keras.backend.tensorflow_backend.stack(x,axis=0)
keras.backend.tensorflow_backend.std(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.stop_gradient(variables)
keras.backend.tensorflow_backend.sum(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.switch(condition,then_expression,else_expression)
keras.backend.tensorflow_backend.symbolic(func)
keras.backend.tensorflow_backend.tanh(x)
keras.backend.tensorflow_backend.temporal_padding(x,padding=(1,1))
keras.backend.tensorflow_backend.tile(x,n)
keras.backend.tensorflow_backend.to_dense(tensor)
keras.backend.tensorflow_backend.transpose(x)
keras.backend.tensorflow_backend.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.tensorflow_backend.update(x,new_x)
keras.backend.tensorflow_backend.update_add(x,increment)
keras.backend.tensorflow_backend.update_sub(x,decrement)
keras.backend.tensorflow_backend.v1_variable_initialization()
keras.backend.tensorflow_backend.var(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.variable(value,dtype=None,name=None,constraint=None)
keras.backend.tensorflow_backend.zeros(shape,dtype=None,name=None)
keras.backend.tensorflow_backend.zeros_like(x,dtype=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/backend/common.py----------------------------------------
A:keras.backend.common._EPSILON->float(e)
A:keras.backend.common._FLOATX->str(floatx)
A:keras.backend.common._IMAGE_DATA_FORMAT->str(data_format)
A:keras.backend.common.value->image_data_format()
A:keras.backend.common.data_format->image_data_format().lower()
keras.backend.common.cast_to_floatx(x)
keras.backend.common.eager(func)
keras.backend.common.epsilon()
keras.backend.common.floatx()
keras.backend.common.image_data_format()
keras.backend.common.image_dim_ordering()
keras.backend.common.normalize_data_format(value)
keras.backend.common.set_epsilon(e)
keras.backend.common.set_floatx(floatx)
keras.backend.common.set_image_data_format(data_format)
keras.backend.common.set_image_dim_ordering(dim_ordering)
keras.backend.common.symbolic(func)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/backend/numpy_backend.py----------------------------------------
A:keras.backend.numpy_backend.w->numpy.insert(w, 2 * j + 1, 0, axis=i)
A:keras.backend.numpy_backend.x->repeat_elements(x, width_factor, axis=3)
A:keras.backend.numpy_backend.dilation_rate->kwargs.pop('dilation_rate', 1)
A:keras.backend.numpy_backend.y->numpy.repeat(y, n, axis=1)
A:keras.backend.numpy_backend.x2->depthwise_conv(x, w1, padding=padding, data_format=data_format)
A:keras.backend.numpy_backend.(output_sample, _)->step_function(inputs[:, 0], initial_states + constants)
A:keras.backend.numpy_backend.mask->mask.astype(np.bool).astype(np.bool)
A:keras.backend.numpy_backend.mask_->numpy.expand_dims(mask_, axis=-1)
A:keras.backend.numpy_backend.output_mask->expand_mask(mask, output_sample)
A:keras.backend.numpy_backend.time_index->range(input_length)
A:keras.backend.numpy_backend.output_tm1->numpy.zeros(output_sample.shape)
A:keras.backend.numpy_backend.(output_t, states_t)->step_function(inputs[:, t], states_tm1 + constants)
A:keras.backend.numpy_backend.output_t->numpy.where(output_mask[:, t], output_t, output_tm1)
A:keras.backend.numpy_backend.training->learning_phase()
A:keras.backend.numpy_backend.above_threshold->numpy.clip(above_threshold, 0.0, max_value)
A:keras.backend.numpy_backend.cond_float->condition.astype(floatx())
A:keras.backend.numpy_backend.targets->targets.reshape(-1, 1).reshape(-1, 1)
A:keras.backend.numpy_backend.output->numpy.clip(output, 1e-07, 1 - 1e-07)
A:keras.backend.numpy_backend.axis->tuple(axis)
A:keras.backend.numpy_backend.all_dims_padding->transpose_shape(all_dims_padding, data_format, spatial_axes=(1, 2, 3))
A:keras.backend.numpy_backend.dtype->floatx()
A:keras.backend.numpy_backend.axes->tuple(axes)
A:keras.backend.numpy_backend.result->numpy.expand_dims(result, -1)
A:keras.backend.numpy_backend.noise->numpy.random.choice([0, 1], noise_shape, replace=True, p=[level, 1 - level])
A:keras.backend.numpy_backend.log_prob->numpy.zeros((num_samples, 1))
A:keras.backend.numpy_backend.decoded_length->numpy.zeros((num_samples,), dtype=np.int)
A:keras.backend.numpy_backend.decoded->_remove_blanks(decoded, num_classes)
A:keras.backend.numpy_backend.decoded_length[i]->len(decoded)
A:keras.backend.numpy_backend.is_not_repeat->numpy.insert(np.diff(inds).astype(np.bool), 0, True)
keras.backend.numpy_backend._remove_blanks(inds,num_classes)
keras.backend.numpy_backend._remove_repeats(inds)
keras.backend.numpy_backend.all(x,axis=None,keepdims=False)
keras.backend.numpy_backend.any(x,axis=None,keepdims=False)
keras.backend.numpy_backend.arange(start,stop=None,step=1,dtype='int32')
keras.backend.numpy_backend.argmax(x,axis=-1)
keras.backend.numpy_backend.argmin(x,axis=-1)
keras.backend.numpy_backend.batch_dot(x,y,axes=None)
keras.backend.numpy_backend.batch_flatten(x)
keras.backend.numpy_backend.batch_normalization(x,mean,var,beta,gamma,axis=-1,epsilon=0.001)
keras.backend.numpy_backend.bias_add(x,y,data_format)
keras.backend.numpy_backend.binary_crossentropy(target,output,from_logits=False)
keras.backend.numpy_backend.categorical_crossentropy(target,output,from_logits=False)
keras.backend.numpy_backend.clip(x,min_value,max_value)
keras.backend.numpy_backend.concatenate(tensors,axis=-1)
keras.backend.numpy_backend.constant(value,dtype=None,shape=None,name=None)
keras.backend.numpy_backend.conv(x,w,padding,data_format)
keras.backend.numpy_backend.conv_transpose(x,w,output_shape,padding,data_format,dilation_rate=1)
keras.backend.numpy_backend.count_params(x)
keras.backend.numpy_backend.ctc_decode(y_pred,input_length,greedy=True,beam_width=100,top_paths=1,merge_repeated=False)
keras.backend.numpy_backend.cumprod(x,axis=0)
keras.backend.numpy_backend.cumsum(x,axis=0)
keras.backend.numpy_backend.depthwise_conv(x,w,padding,data_format)
keras.backend.numpy_backend.dot(x,y)
keras.backend.numpy_backend.dropout(x,level,noise_shape=None,seed=None)
keras.backend.numpy_backend.dtype(x)
keras.backend.numpy_backend.elu(x,alpha=1.0)
keras.backend.numpy_backend.equal(x,y)
keras.backend.numpy_backend.eval(x)
keras.backend.numpy_backend.eye(size,dtype=None,name=None)
keras.backend.numpy_backend.flatten(x)
keras.backend.numpy_backend.gather(reference,indices)
keras.backend.numpy_backend.get_value(x)
keras.backend.numpy_backend.get_variable_shape(x)
keras.backend.numpy_backend.greater(x,y)
keras.backend.numpy_backend.greater_equal(x,y)
keras.backend.numpy_backend.hard_sigmoid(x)
keras.backend.numpy_backend.in_test_phase(x,alt,training=None)
keras.backend.numpy_backend.in_top_k(predictions,targets,k)
keras.backend.numpy_backend.in_train_phase(x,alt,training=None)
keras.backend.numpy_backend.int_shape(x)
keras.backend.numpy_backend.l2_normalize(x,axis=-1)
keras.backend.numpy_backend.learning_phase()
keras.backend.numpy_backend.less(x,y)
keras.backend.numpy_backend.less_equal(x,y)
keras.backend.numpy_backend.logsumexp(x,axis=None,keepdims=False)
keras.backend.numpy_backend.max(x,axis=None,keepdims=False)
keras.backend.numpy_backend.maximum(x,y)
keras.backend.numpy_backend.mean(x,axis=None,keepdims=False)
keras.backend.numpy_backend.min(x,axis=None,keepdims=False)
keras.backend.numpy_backend.minimum(x,y)
keras.backend.numpy_backend.ndim(x)
keras.backend.numpy_backend.normalize_conv(func)
keras.backend.numpy_backend.not_equal(x,y)
keras.backend.numpy_backend.one_hot(indices,num_classes)
keras.backend.numpy_backend.ones(shape,dtype=floatx(),name=None)
keras.backend.numpy_backend.ones_like(x,dtype=floatx(),name=None)
keras.backend.numpy_backend.permute_dimensions(x,pattern)
keras.backend.numpy_backend.pool(x,pool_size,strides,padding,data_format,pool_mode)
keras.backend.numpy_backend.pow(x,a=1.0)
keras.backend.numpy_backend.print_tensor(x,message='')
keras.backend.numpy_backend.prod(x,axis=None,keepdims=False)
keras.backend.numpy_backend.random_normal_variable(shape,mean,scale,dtype=None,name=None,seed=None)
keras.backend.numpy_backend.random_uniform_variable(shape,low,high,dtype=None,name=None,seed=None)
keras.backend.numpy_backend.relu(x,alpha=0.0,max_value=None,threshold=0.0)
keras.backend.numpy_backend.repeat(x,n)
keras.backend.numpy_backend.repeat_elements(x,rep,axis)
keras.backend.numpy_backend.reshape(x,shape)
keras.backend.numpy_backend.resize_images(x,height_factor,width_factor,data_format)
keras.backend.numpy_backend.resize_volumes(x,depth_factor,height_factor,width_factor,data_format)
keras.backend.numpy_backend.reverse(x,axes)
keras.backend.numpy_backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None)
keras.backend.numpy_backend.separable_conv(x,w1,w2,padding,data_format)
keras.backend.numpy_backend.set_learning_phase(value)
keras.backend.numpy_backend.sigmoid(x)
keras.backend.numpy_backend.slice(x,start,size)
keras.backend.numpy_backend.softmax(x,axis=-1)
keras.backend.numpy_backend.softplus(x)
keras.backend.numpy_backend.softsign(x)
keras.backend.numpy_backend.spatial_2d_padding(x,padding=((1,1),(1,1)),data_format=None)
keras.backend.numpy_backend.spatial_3d_padding(x,padding=((1,1),(1,1),(1,1)),data_format=None)
keras.backend.numpy_backend.sqrt(x)
keras.backend.numpy_backend.stack(x,axis=0)
keras.backend.numpy_backend.std(x,axis=None,keepdims=False)
keras.backend.numpy_backend.sum(x,axis=None,keepdims=False)
keras.backend.numpy_backend.switch(condition,then_expression,else_expression)
keras.backend.numpy_backend.tanh(x)
keras.backend.numpy_backend.temporal_padding(x,padding=(1,1))
keras.backend.numpy_backend.tile(x,n)
keras.backend.numpy_backend.transpose(x)
keras.backend.numpy_backend.var(x,axis=None,keepdims=False)
keras.backend.numpy_backend.variable(value,dtype=None,name=None,constraint=None)
keras.backend.numpy_backend.zeros(shape,dtype=floatx(),name=None)
keras.backend.numpy_backend.zeros_like(x,dtype=floatx(),name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/backend/load_backend.py----------------------------------------
A:keras.backend.load_backend._keras_dir->os.path.join(_keras_base_dir, '.keras')
A:keras.backend.load_backend._keras_base_dir->os.path.expanduser('~')
A:keras.backend.load_backend._config_path->os.path.expanduser(os.path.join(_keras_dir, 'keras.json'))
A:keras.backend.load_backend._config->json.load(f)
A:keras.backend.load_backend._floatx->json.load(f).get('floatx', floatx())
A:keras.backend.load_backend._epsilon->json.load(f).get('epsilon', epsilon())
A:keras.backend.load_backend._backend->json.load(f).get('backend', _BACKEND)
A:keras.backend.load_backend._image_data_format->json.load(f).get('image_data_format', image_data_format())
A:keras.backend.load_backend.backend_module->importlib.import_module(_BACKEND)
A:keras.backend.load_backend.namespace->globals()
keras.backend.backend()
keras.backend.load_backend.backend()


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/backend/theano_backend.py----------------------------------------
A:keras.backend.theano_backend.theano.config.floatX->floatx()
A:keras.backend.theano_backend._LEARNING_PHASE->theano.tensor.scalar(dtype='uint8', name='keras_learning_phase')
A:keras.backend.theano_backend._UID_PREFIXES->defaultdict(int)
A:keras.backend.theano_backend.prefix->'/'.join(NAME_SCOPE_STACK)
A:keras.backend.theano_backend.dtype->floatx()
A:keras.backend.theano_backend.variable->theano.shared(value=value, name=_prepare_name(name, 'variable'), strict=False)
A:keras.backend.theano_backend.value->numpy.reshape(value, shape)
A:keras.backend.theano_backend.const->theano.tensor.constant(value, dtype=dtype, name=_prepare_name(name, 'constant'))
A:keras.backend.theano_backend.ndim->len(shape)
A:keras.backend.theano_backend.shape->int_shape(x)
A:keras.backend.theano_backend.name->_prepare_name(name, 'placeholder')
A:keras.backend.theano_backend.x->x.dimshuffle((0, 4, 1, 2, 3)).dimshuffle((0, 4, 1, 2, 3))
A:keras.backend.theano_backend.f->theano.function([], x.shape, profile=False)
A:keras.backend.theano_backend.out->expand_dims(out, 1)
A:keras.backend.theano_backend.x_shape->list(x._keras_shape)
A:keras.backend.theano_backend.y_shape->list(y._keras_shape)
A:keras.backend.theano_backend.out._keras_shape->tuple(size)
A:keras.backend.theano_backend.axes->list(axes)
A:keras.backend.theano_backend.y->theano.tensor.set_subtensor(output[indices], x)
A:keras.backend.theano_backend.y._keras_shape->tuple(kshape)
A:keras.backend.theano_backend.axis_list->list(set((int(a) for a in axis)))
A:keras.backend.theano_backend.keras_shape_list->list(x._keras_shape)
A:keras.backend.theano_backend.z->theano.tensor.neq(x, y)
A:keras.backend.theano_backend.gamma->gamma.dimshuffle(shuffle_pattern).dimshuffle(shuffle_pattern)
A:keras.backend.theano_backend.beta->beta.dimshuffle(shuffle_pattern).dimshuffle(shuffle_pattern)
A:keras.backend.theano_backend.(normed, mean, stdinv)->theano.tensor.nnet.bn.batch_normalization_train(x, gamma, beta, reduction_axes, epsilon)
A:keras.backend.theano_backend.reduction_axes->list(range(x.ndim - 1))
A:keras.backend.theano_backend.broadcast_beta->theano.tensor.reshape(beta, target_shape)
A:keras.backend.theano_backend.broadcast_gamma->theano.tensor.reshape(gamma, target_shape)
A:keras.backend.theano_backend.trained->theano.sandbox.cuda.dnn.dnn_batch_normalization_train(x, broadcast_gamma, broadcast_beta, 'spatial', epsilon)
A:keras.backend.theano_backend.normed->batch_normalization(x, broadcast_mean, broadcast_var, broadcast_beta, broadcast_gamma, epsilon)
A:keras.backend.theano_backend.mean->mean.dimshuffle(shuffle_pattern).dimshuffle(shuffle_pattern)
A:keras.backend.theano_backend.stdinv->theano.tensor.as_tensor_variable(stdinv)
A:keras.backend.theano_backend.var->var.dimshuffle(shuffle_pattern).dimshuffle(shuffle_pattern)
A:keras.backend.theano_backend.target_shape->theano.tensor.stack(*target_shape)
A:keras.backend.theano_backend.broadcast_mean->theano.tensor.reshape(mean, target_shape)
A:keras.backend.theano_backend.broadcast_var->theano.tensor.reshape(var, target_shape)
A:keras.backend.theano_backend.axis->mean.dimshuffle(shuffle_pattern).dimshuffle(shuffle_pattern).broadcastable.index(False)
A:keras.backend.theano_backend.shuffle_pattern->list(range(ndim))
A:keras.backend.theano_backend.result->theano.tensor.set_subtensor(output[:, padding[0]:x.shape[1] + padding[0], :], x)
A:keras.backend.theano_backend.output->permute_dimensions(output, (2, 0, 1, 3))
A:keras.backend.theano_backend.output_shape->list(input_shapes[0])
A:keras.backend.theano_backend.output._keras_shape->tuple(output._keras_shape)
A:keras.backend.theano_backend.pattern->tuple(pattern)
A:keras.backend.theano_backend.n->tuple(n)
A:keras.backend.theano_backend.kshape->list(x._keras_shape)
A:keras.backend.theano_backend.data_format->normalize_data_format(data_format)
A:keras.backend.theano_backend.input_shape->tuple((indices.shape[i] for i in range(indices.ndim)))
A:keras.backend.theano_backend.indices->list(range(input_length))
A:keras.backend.theano_backend.oh->theano.tensor.reshape(oh, input_shape + (num_classes,))
A:keras.backend.theano_backend.p_op->Print(message)
A:keras.backend.theano_backend.updates->unique_variables_to_update.items()
A:keras.backend.theano_backend.self.function->theano.function(inputs, outputs, updates=updates, allow_input_downcast=True, on_unused_input='ignore', name=name, **kwargs)
A:keras.backend.theano_backend.self._metrics_function->theano.function([], self._metrics, name=name + '_metrics' if name else None)
A:keras.backend.theano_backend.outputs->outputs.dimshuffle(axes).dimshuffle(axes)
A:keras.backend.theano_backend.metrics->self._metrics_function()
A:keras.backend.theano_backend.inputs->inputs.dimshuffle(axes).dimshuffle(axes)
A:keras.backend.theano_backend.mask->mask.dimshuffle([1, 0]).dimshuffle([1, 0])
A:keras.backend.theano_backend.mask_t->expand_dims(mask_t)
A:keras.backend.theano_backend.reps->theano.tensor.concatenate([[1], add_shape], 0)
A:keras.backend.theano_backend.(output, new_states)->step_function(inputs[i], states + constants)
A:keras.backend.theano_backend.prev_output->zeros_like(output)
A:keras.backend.theano_backend.output_mask->get_matching_mask(mask, outputs)
A:keras.backend.theano_backend.state_mask->get_matching_mask(mask, state)
A:keras.backend.theano_backend.initial_output->theano.tensor.unbroadcast(initial_output, 0, 1)
A:keras.backend.theano_backend.initial_states[0]->theano.tensor.unbroadcast(initial_states[0], 0, 1)
A:keras.backend.theano_backend.(outputs, new_states)->step_function(inputs, states)
A:keras.backend.theano_backend.(results, _)->theano.scan(_step, sequences=inputs, outputs_info=[None] + initial_states, non_sequences=constants, go_backwards=go_backwards)
A:keras.backend.theano_backend.(outputs, states)->step_function(inputs[i], states + constants)
A:keras.backend.theano_backend.then_expression->then_expression()
A:keras.backend.theano_backend.else_expression->else_expression()
A:keras.backend.theano_backend.cond_ndim->ndim(condition)
A:keras.backend.theano_backend.expr_ndim->ndim(then_expression)
A:keras.backend.theano_backend.condition->expand_dims(condition)
A:keras.backend.theano_backend.training->learning_phase()
A:keras.backend.theano_backend.alt->alt()
A:keras.backend.theano_backend.negative_part->theano.tensor.nnet.relu(-x)
A:keras.backend.theano_backend.xm->x.dimshuffle((0, 4, 1, 2, 3)).dimshuffle((0, 4, 1, 2, 3)).max(axis=axis, keepdims=True)
A:keras.backend.theano_backend.output_dimensions->list(range(len(int_shape(output))))
A:keras.backend.theano_backend.target->reshape(target, shape(output))
A:keras.backend.theano_backend.seed->numpy.random.randint(1, 10000000.0)
A:keras.backend.theano_backend.noise_shape->tuple(noise_shape)
A:keras.backend.theano_backend.rng->RandomStreams(seed=seed)
A:keras.backend.theano_backend.random_tensor->theano.tensor.patternbroadcast(random_tensor, [dim == 1 for dim in noise_shape])
A:keras.backend.theano_backend.square_sum->theano.tensor.sum(T.square(x), axis=axis, keepdims=True)
A:keras.backend.theano_backend.norm->theano.tensor.sqrt(T.maximum(square_sum, epsilon()))
A:keras.backend.theano_backend.kernel->_preprocess_conv3d_kernel(kernel, data_format)
A:keras.backend.theano_backend.image_shape->_preprocess_conv2d_image_shape(int_shape(x), data_format)
A:keras.backend.theano_backend.volume_shape->_preprocess_conv3d_volume_shape(int_shape(x), data_format)
A:keras.backend.theano_backend.filter_shape->tuple((int_or_none(v) for v in filter_shape))
A:keras.backend.theano_backend.conv_out->_postprocess_conv3d_output(conv_out, x, padding, kernel_shape, strides, data_format)
A:keras.backend.theano_backend.kernel_shape->int_shape(kernel)
A:keras.backend.theano_backend.th_padding->_preprocess_padding(padding)
A:keras.backend.theano_backend.op->theano.tensor.nnet.abstract_conv.AbstractConv3d_gradInputs(imshp=None, kshp=kernel_shape, subsample=strides, border_mode=th_padding, filter_flip=not flip_filters)
A:keras.backend.theano_backend.depthwise_kernel->_preprocess_conv2d_depthwise_kernel(depthwise_kernel, depthwise_kernel_shape, data_format)
A:keras.backend.theano_backend.pointwise_kernel->_preprocess_conv2d_kernel(pointwise_kernel, data_format)
A:keras.backend.theano_backend.depthwise_kernel_shape->_preprocess_conv2d_depthwise_filter_shape(depthwise_kernel_shape, data_format)
A:keras.backend.theano_backend.pointwise_kernel_shape->_preprocess_conv2d_filter_shape(pointwise_kernel_shape, data_format)
A:keras.backend.theano_backend.pool_out->pool_out.dimshuffle((0, 2, 3, 4, 1)).dimshuffle((0, 2, 3, 4, 1))
A:keras.backend.theano_backend.bias_shape->tuple(bias.shape)
A:keras.backend.theano_backend.normal_t->RandomStreams(seed=seed).normal(size=shape, avg=mean, std=stddev, dtype=dtype)
A:keras.backend.theano_backend.Y_->theano.tensor.set_subtensor(Y_[T.arange(Y.shape[0]) * 2 + 1], Y)
A:keras.backend.theano_backend.non_repeats->theano.tensor.neq(Y[skip_idxs], Y[skip_idxs + 2])
A:keras.backend.theano_backend.active_next->theano.tensor.cast(T.minimum(T.maximum(active + 1, T.max(T.concatenate([active_skip_idxs, [-1]])) + 2 + 1), log_p_curr.shape[0]), 'int32')
A:keras.backend.theano_backend.common_factor->theano.tensor.max(log_probs)
A:keras.backend.theano_backend.p_prev->theano.tensor.exp(log_p_prev[:active] - common_factor)
A:keras.backend.theano_backend._p_prev->theano.tensor.inc_subtensor(_p_prev[active_skip_idxs + 2], p_prev[active_skip_idxs])
A:keras.backend.theano_backend.log_p_next->theano.tensor.set_subtensor(zeros[:active_next], log_p_curr[:active_next] + updated_log_p_prev)
A:keras.backend.theano_backend.L->theano.tensor.log(smoothed)
A:keras.backend.theano_backend.zeros->theano.tensor.zeros_like(L[0])
A:keras.backend.theano_backend.f_skip_idxs->ctc_create_skip_idxs(Y)
A:keras.backend.theano_backend.b_skip_idxs->ctc_create_skip_idxs(Y[::-1])
A:keras.backend.theano_backend.(f_active_next, log_f_next)->ctc_update_log_p(f_skip_idxs, zeros, f_active, log_f_curr, log_f_prev)
A:keras.backend.theano_backend.(b_active_next, log_b_next)->ctc_update_log_p(b_skip_idxs, zeros, b_active, log_b_curr, log_b_prev)
A:keras.backend.theano_backend.([f_active, log_f_probs, b_active, log_b_probs], _)->theano.scan(step, sequences=[L, L[::-1, ::-1]], outputs_info=[np.int32(1), log_first, np.int32(1), log_first])
A:keras.backend.theano_backend.idxs->theano.tensor.arange(L.shape[1]).dimshuffle('x', 0)
A:keras.backend.theano_backend.(log_probs, mask)->ctc_path_probs(predict, ctc_interleave_blanks(Y))
A:keras.backend.theano_backend.total_log_prob->theano.tensor.log(T.sum(T.exp(log_probs - common_factor)[mask.nonzero()]))
A:keras.backend.theano_backend.(ret, _)->theano.scan(fn=ctc_step, outputs_info=None, sequences=[y_true, y_pred, input_length, label_length])
A:keras.backend.theano_backend.ret->ret.dimshuffle('x', 0).dimshuffle('x', 0)
A:keras.backend.theano_backend.slice_length->py_slice(i * stride, i * stride + kernel_size[0])
A:keras.backend.theano_backend.x_aggregate->concatenate(xs, axis=0)
A:keras.backend.theano_backend.slice_row->py_slice(i * stride_row, i * stride_row + kernel_size[0])
A:keras.backend.theano_backend.slice_col->py_slice(j * stride_col, j * stride_col + kernel_size[1])
A:keras.backend.theano_backend.x_flatten->reshape(inputs[:, :, slice_row, slice_col], (1, -1, feature_dim))
keras.backend.theano_backend.Function(self,inputs,outputs,updates=[],name=None,**kwargs)
keras.backend.theano_backend.Function.__init__(self,inputs,outputs,updates=[],name=None,**kwargs)
keras.backend.theano_backend._assert_has_capability(module,func)
keras.backend.theano_backend._assert_sparse_module()
keras.backend.theano_backend._old_batch_normalization(x,mean,var,beta,gamma,epsilon=0.001)
keras.backend.theano_backend._old_normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.theano_backend._postprocess_conv2d_output(conv_out,x,padding,kernel_shape,strides,data_format)
keras.backend.theano_backend._postprocess_conv3d_output(conv_out,x,padding,kernel_shape,strides,data_format)
keras.backend.theano_backend._prepare_name(name,default)
keras.backend.theano_backend._preprocess_conv2d_depthwise_filter_shape(filter_shape,data_format)
keras.backend.theano_backend._preprocess_conv2d_depthwise_kernel(kernel,kernel_shape,data_format)
keras.backend.theano_backend._preprocess_conv2d_filter_shape(filter_shape,data_format)
keras.backend.theano_backend._preprocess_conv2d_image_shape(image_shape,data_format)
keras.backend.theano_backend._preprocess_conv2d_input(x,data_format)
keras.backend.theano_backend._preprocess_conv2d_kernel(kernel,data_format)
keras.backend.theano_backend._preprocess_conv3d_filter_shape(filter_shape,data_format)
keras.backend.theano_backend._preprocess_conv3d_input(x,data_format)
keras.backend.theano_backend._preprocess_conv3d_kernel(kernel,data_format)
keras.backend.theano_backend._preprocess_conv3d_volume_shape(volume_shape,data_format)
keras.backend.theano_backend._preprocess_padding(padding)
keras.backend.theano_backend._raise_invalid_arg(key)
keras.backend.theano_backend._set_keras_shape_for_reduction(x,y,axis,keepdims)
keras.backend.theano_backend.abs(x)
keras.backend.theano_backend.all(x,axis=None,keepdims=False)
keras.backend.theano_backend.any(x,axis=None,keepdims=False)
keras.backend.theano_backend.arange(start,stop=None,step=1,dtype='int32')
keras.backend.theano_backend.argmax(x,axis=-1)
keras.backend.theano_backend.argmin(x,axis=-1)
keras.backend.theano_backend.batch_dot(x,y,axes=None)
keras.backend.theano_backend.batch_flatten(x)
keras.backend.theano_backend.batch_get_value(xs)
keras.backend.theano_backend.batch_normalization(x,mean,var,beta,gamma,axis=-1,epsilon=0.001)
keras.backend.theano_backend.batch_set_value(tuples)
keras.backend.theano_backend.bias_add(x,bias,data_format=None)
keras.backend.theano_backend.binary_crossentropy(target,output,from_logits=False)
keras.backend.theano_backend.cast(x,dtype)
keras.backend.theano_backend.categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.backend.theano_backend.clip(x,min_value,max_value)
keras.backend.theano_backend.concatenate(tensors,axis=-1)
keras.backend.theano_backend.constant(value,dtype=None,shape=None,name=None)
keras.backend.theano_backend.control_dependencies(control_inputs)
keras.backend.theano_backend.conv1d(x,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.theano_backend.conv2d(x,kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.theano_backend.conv2d_transpose(x,kernel,output_shape,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.theano_backend.conv3d(x,kernel,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1))
keras.backend.theano_backend.conv3d_transpose(x,kernel,output_shape,strides=(1,1,1),padding='valid',data_format=None)
keras.backend.theano_backend.cos(x)
keras.backend.theano_backend.count_params(x)
keras.backend.theano_backend.ctc_batch_cost(y_true,y_pred,input_length,label_length)
keras.backend.theano_backend.ctc_cost(predict,Y)
keras.backend.theano_backend.ctc_create_skip_idxs(Y)
keras.backend.theano_backend.ctc_decode(y_pred,input_length,greedy=True,beam_width=100,top_paths=1,merge_repeated=False)
keras.backend.theano_backend.ctc_interleave_blanks(Y)
keras.backend.theano_backend.ctc_label_dense_to_sparse(labels,label_lengths)
keras.backend.theano_backend.ctc_path_probs(predict,Y,alpha=0.0001)
keras.backend.theano_backend.ctc_update_log_p(skip_idxs,zeros,active,log_p_curr,log_p_prev)
keras.backend.theano_backend.cumprod(x,axis=0)
keras.backend.theano_backend.cumsum(x,axis=0)
keras.backend.theano_backend.depthwise_conv2d(x,depthwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.theano_backend.dot(x,y)
keras.backend.theano_backend.dropout(x,level,noise_shape=None,seed=None)
keras.backend.theano_backend.dtype(x)
keras.backend.theano_backend.elu(x,alpha=1.0)
keras.backend.theano_backend.equal(x,y)
keras.backend.theano_backend.eval(x)
keras.backend.theano_backend.exp(x)
keras.backend.theano_backend.expand_dims(x,axis=-1)
keras.backend.theano_backend.eye(size,dtype=None,name=None)
keras.backend.theano_backend.flatten(x)
keras.backend.theano_backend.foldl(fn,elems,initializer=None,name=None)
keras.backend.theano_backend.foldr(fn,elems,initializer=None,name=None)
keras.backend.theano_backend.function(inputs,outputs,updates=[],**kwargs)
keras.backend.theano_backend.gather(reference,indices)
keras.backend.theano_backend.get_uid(prefix='')
keras.backend.theano_backend.get_value(x)
keras.backend.theano_backend.get_variable_shape(x)
keras.backend.theano_backend.gradients(loss,variables)
keras.backend.theano_backend.greater(x,y)
keras.backend.theano_backend.greater_equal(x,y)
keras.backend.theano_backend.hard_sigmoid(x)
keras.backend.theano_backend.identity(x,name=None)
keras.backend.theano_backend.in_test_phase(x,alt,training=None)
keras.backend.theano_backend.in_top_k(predictions,targets,k)
keras.backend.theano_backend.in_train_phase(x,alt,training=None)
keras.backend.theano_backend.int_shape(x)
keras.backend.theano_backend.is_keras_tensor(x)
keras.backend.theano_backend.is_placeholder(x)
keras.backend.theano_backend.is_sparse(tensor)
keras.backend.theano_backend.is_tensor(x)
keras.backend.theano_backend.is_variable(x)
keras.backend.theano_backend.l2_normalize(x,axis=None)
keras.backend.theano_backend.learning_phase()
keras.backend.theano_backend.less(x,y)
keras.backend.theano_backend.less_equal(x,y)
keras.backend.theano_backend.local_conv1d(inputs,kernel,kernel_size,strides,data_format=None)
keras.backend.theano_backend.local_conv2d(inputs,kernel,kernel_size,strides,output_shape,data_format=None)
keras.backend.theano_backend.log(x)
keras.backend.theano_backend.logsumexp(x,axis=None,keepdims=False)
keras.backend.theano_backend.map_fn(fn,elems,name=None,dtype=None)
keras.backend.theano_backend.max(x,axis=None,keepdims=False)
keras.backend.theano_backend.maximum(x,y)
keras.backend.theano_backend.mean(x,axis=None,keepdims=False)
keras.backend.theano_backend.min(x,axis=None,keepdims=False)
keras.backend.theano_backend.minimum(x,y)
keras.backend.theano_backend.moving_average_update(variable,value,momentum)
keras.backend.theano_backend.name_scope(name)
keras.backend.theano_backend.ndim(x)
keras.backend.theano_backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.theano_backend.not_equal(x,y)
keras.backend.theano_backend.one_hot(indices,num_classes)
keras.backend.theano_backend.ones(shape,dtype=None,name=None)
keras.backend.theano_backend.ones_like(x,dtype=None,name=None)
keras.backend.theano_backend.pattern_broadcast(x,broadcastable)
keras.backend.theano_backend.permute_dimensions(x,pattern)
keras.backend.theano_backend.placeholder(shape=None,ndim=None,dtype=None,sparse=False,name=None)
keras.backend.theano_backend.pool2d(x,pool_size,strides=(1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.theano_backend.pool3d(x,pool_size,strides=(1,1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.theano_backend.pow(x,a)
keras.backend.theano_backend.print_tensor(x,message='')
keras.backend.theano_backend.prod(x,axis=None,keepdims=False)
keras.backend.theano_backend.random_binomial(shape,p=0.0,dtype=None,seed=None)
keras.backend.theano_backend.random_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.theano_backend.random_normal_variable(shape,mean,scale,dtype=None,name=None)
keras.backend.theano_backend.random_uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)
keras.backend.theano_backend.random_uniform_variable(shape,low,high,dtype=None,name=None)
keras.backend.theano_backend.relu(x,alpha=0.0,max_value=None,threshold=0.0)
keras.backend.theano_backend.repeat(x,n)
keras.backend.theano_backend.repeat_elements(x,rep,axis)
keras.backend.theano_backend.reset_uids()
keras.backend.theano_backend.reshape(x,shape)
keras.backend.theano_backend.resize_images(x,height_factor,width_factor,data_format,interpolation='nearest')
keras.backend.theano_backend.resize_volumes(x,depth_factor,height_factor,width_factor,data_format)
keras.backend.theano_backend.reverse(x,axes)
keras.backend.theano_backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None)
keras.backend.theano_backend.round(x)
keras.backend.theano_backend.separable_conv1d(x,depthwise_kernel,pointwise_kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.theano_backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.theano_backend.set_learning_phase(value)
keras.backend.theano_backend.set_value(x,value)
keras.backend.theano_backend.shape(x)
keras.backend.theano_backend.sigmoid(x)
keras.backend.theano_backend.sign(x)
keras.backend.theano_backend.sin(x)
keras.backend.theano_backend.size(x,name=None)
keras.backend.theano_backend.slice(x,start,size)
keras.backend.theano_backend.softmax(x,axis=-1)
keras.backend.theano_backend.softplus(x)
keras.backend.theano_backend.softsign(x)
keras.backend.theano_backend.sparse_categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.backend.theano_backend.spatial_2d_padding(x,padding=((1,1),(1,1)),data_format=None)
keras.backend.theano_backend.spatial_3d_padding(x,padding=((1,1),(1,1),(1,1)),data_format=None)
keras.backend.theano_backend.sqrt(x)
keras.backend.theano_backend.square(x)
keras.backend.theano_backend.squeeze(x,axis)
keras.backend.theano_backend.stack(x,axis=0)
keras.backend.theano_backend.std(x,axis=None,keepdims=False)
keras.backend.theano_backend.stop_gradient(variables)
keras.backend.theano_backend.sum(x,axis=None,keepdims=False)
keras.backend.theano_backend.switch(condition,then_expression,else_expression)
keras.backend.theano_backend.tanh(x)
keras.backend.theano_backend.temporal_padding(x,padding=(1,1))
keras.backend.theano_backend.tile(x,n)
keras.backend.theano_backend.to_dense(tensor)
keras.backend.theano_backend.transpose(x)
keras.backend.theano_backend.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.theano_backend.update(x,new_x)
keras.backend.theano_backend.update_add(x,increment)
keras.backend.theano_backend.update_sub(x,decrement)
keras.backend.theano_backend.var(x,axis=None,keepdims=False)
keras.backend.theano_backend.variable(value,dtype=None,name=None,constraint=None)
keras.backend.theano_backend.zeros(shape,dtype=None,name=None)
keras.backend.theano_backend.zeros_like(x,dtype=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/wrappers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/wrappers/scikit_learn.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/optimizers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/optimizers/schedules/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/legacy/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/legacy/layers.py----------------------------------------
A:keras.legacy.layers.self.init->initializers.get(init)
A:keras.legacy.layers.self.W_regularizer->regularizers.get(W_regularizer)
A:keras.legacy.layers.self.b_regularizer->regularizers.get(b_regularizer)
A:keras.legacy.layers.self.activity_regularizer->regularizers.get(activity_regularizer)
A:keras.legacy.layers.self.W_constraint->constraints.get(W_constraint)
A:keras.legacy.layers.self.b_constraint->constraints.get(b_constraint)
A:keras.legacy.layers.self.input_spec->InputSpec(dtype=K.floatx(), shape=(None, input_dim))
A:keras.legacy.layers.self.W->self.add_weight(shape=(input_dim, input_dim), initializer=self.init, name='W', regularizer=self.W_regularizer, constraint=self.W_constraint)
A:keras.legacy.layers.self.b->self.add_weight(shape=(input_dim,), initializer='zero', name='b', regularizer=self.b_regularizer, constraint=self.b_constraint)
A:keras.legacy.layers.output->super(Recurrent, self).__call__(inputs, **kwargs)
A:keras.legacy.layers.base_config->super(ConvRecurrent2D, self).get_config()
A:keras.legacy.layers.self.activation->activations.get(activation)
A:keras.legacy.layers.self.W_carry->self.add_weight(shape=(input_dim, input_dim), initializer=self.init, name='W_carry')
A:keras.legacy.layers.self.b_carry->self.add_weight(shape=(input_dim,), initializer='one', name='b_carry')
A:keras.legacy.layers.y->K.dot(x, self.W)
A:keras.legacy.layers.transform_weight->activations.sigmoid(y)
A:keras.legacy.layers.act->self.activation(y)
A:keras.legacy.layers.rate->kwargs.pop('atrous_rate')
A:keras.legacy.layers.initial_state->self.get_initial_state(inputs)
A:keras.legacy.layers.is_keras_tensor->hasattr(initial_state[0], '_keras_history')
A:keras.legacy.layers.input_spec->to_list(input_spec)
A:keras.legacy.layers.state_spec->to_list(state_spec)
A:keras.legacy.layers.input_shape->K.int_shape(inputs)
A:keras.legacy.layers.constants->self.get_constants(inputs, training=None)
A:keras.legacy.layers.preprocessed_input->self.preprocess_input(inputs, training=None)
A:keras.legacy.layers.(last_output, outputs, states)->K.rnn(self.step, preprocessed_input, initial_state, go_backwards=self.go_backwards, mask=mask, constants=constants, unroll=self.unroll, input_length=timesteps)
A:keras.legacy.layers.states->to_list(states, allow_tuple=True)
A:keras.legacy.layers.self.kernel_size->utils.conv_utils.normalize_tuple(kernel_size, 2, 'kernel_size')
A:keras.legacy.layers.self.strides->utils.conv_utils.normalize_tuple(strides, 2, 'strides')
A:keras.legacy.layers.self.padding->utils.conv_utils.normalize_padding(padding)
A:keras.legacy.layers.self.data_format->K.normalize_data_format(data_format)
A:keras.legacy.layers.self.dilation_rate->utils.conv_utils.normalize_tuple(dilation_rate, 2, 'dilation_rate')
A:keras.legacy.layers.rows->utils.conv_utils.conv_output_length(rows, self.kernel_size[0], padding=self.padding, stride=self.strides[0], dilation=self.dilation_rate[0])
A:keras.legacy.layers.cols->utils.conv_utils.conv_output_length(cols, self.kernel_size[1], padding=self.padding, stride=self.strides[1], dilation=self.dilation_rate[1])
keras.legacy.layers.AtrousConvolution1D(*args,**kwargs)
keras.legacy.layers.AtrousConvolution2D(*args,**kwargs)
keras.legacy.layers.ConvRecurrent2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),return_sequences=False,go_backwards=False,stateful=False,**kwargs)
keras.legacy.layers.ConvRecurrent2D.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),return_sequences=False,go_backwards=False,stateful=False,**kwargs)
keras.legacy.layers.ConvRecurrent2D.compute_output_shape(self,input_shape)
keras.legacy.layers.ConvRecurrent2D.get_config(self)
keras.legacy.layers.Highway(self,init='glorot_uniform',activation=None,weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,**kwargs)
keras.legacy.layers.Highway.__init__(self,init='glorot_uniform',activation=None,weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,**kwargs)
keras.legacy.layers.Highway.build(self,input_shape)
keras.legacy.layers.Highway.call(self,x)
keras.legacy.layers.Highway.get_config(self)
keras.legacy.layers.MaxoutDense(self,output_dim,nb_feature=4,init='glorot_uniform',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,**kwargs)
keras.legacy.layers.MaxoutDense.__init__(self,output_dim,nb_feature=4,init='glorot_uniform',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,**kwargs)
keras.legacy.layers.MaxoutDense.build(self,input_shape)
keras.legacy.layers.MaxoutDense.call(self,x)
keras.legacy.layers.MaxoutDense.compute_output_shape(self,input_shape)
keras.legacy.layers.MaxoutDense.get_config(self)
keras.legacy.layers.Recurrent(self,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,implementation=0,**kwargs)
keras.legacy.layers.Recurrent.__init__(self,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,implementation=0,**kwargs)
keras.legacy.layers.Recurrent.call(self,inputs,mask=None,training=None,initial_state=None)
keras.legacy.layers.Recurrent.compute_mask(self,inputs,mask)
keras.legacy.layers.Recurrent.compute_output_shape(self,input_shape)
keras.legacy.layers.Recurrent.get_config(self)
keras.legacy.layers.Recurrent.get_constants(self,inputs,training=None)
keras.legacy.layers.Recurrent.get_initial_state(self,inputs)
keras.legacy.layers.Recurrent.preprocess_input(self,inputs,training=None)
keras.legacy.layers.Recurrent.reset_states(self,states=None)
keras.legacy.layers.Recurrent.step(self,inputs,states)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/legacy/interfaces.py----------------------------------------
A:keras.legacy.interfaces.(args, kwargs, converted)->preprocessor(args, kwargs)
A:keras.legacy.interfaces.value->kwargs.pop('forget_bias_init')
A:keras.legacy.interfaces.str_val->str(value)
A:keras.legacy.interfaces.generate_legacy_method_interface->functools.partial(generate_legacy_interface, object_type='method')
A:keras.legacy.interfaces.legacy_dense_support->generate_legacy_interface(allowed_positional_args=['units'], conversions=[('output_dim', 'units'), ('init', 'kernel_initializer'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('W_constraint', 'kernel_constraint'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')])
A:keras.legacy.interfaces.legacy_dropout_support->generate_legacy_interface(allowed_positional_args=['rate', 'noise_shape', 'seed'], conversions=[('p', 'rate')])
A:keras.legacy.interfaces.legacy_embedding_support->generate_legacy_interface(allowed_positional_args=['input_dim', 'output_dim'], conversions=[('init', 'embeddings_initializer'), ('W_regularizer', 'embeddings_regularizer'), ('W_constraint', 'embeddings_constraint')], preprocessor=embedding_kwargs_preprocessor)
A:keras.legacy.interfaces.legacy_pooling1d_support->generate_legacy_interface(allowed_positional_args=['pool_size', 'strides', 'padding'], conversions=[('pool_length', 'pool_size'), ('stride', 'strides'), ('border_mode', 'padding')])
A:keras.legacy.interfaces.legacy_prelu_support->generate_legacy_interface(allowed_positional_args=['alpha_initializer'], conversions=[('init', 'alpha_initializer')])
A:keras.legacy.interfaces.legacy_gaussiannoise_support->generate_legacy_interface(allowed_positional_args=['stddev'], conversions=[('sigma', 'stddev')])
A:keras.legacy.interfaces.input_length->kwargs.pop('input_length', None)
A:keras.legacy.interfaces.input_dim->kwargs.pop('input_dim')
A:keras.legacy.interfaces.legacy_recurrent_support->generate_legacy_interface(allowed_positional_args=['units'], conversions=[('output_dim', 'units'), ('init', 'kernel_initializer'), ('inner_init', 'recurrent_initializer'), ('inner_activation', 'recurrent_activation'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('U_regularizer', 'recurrent_regularizer'), ('dropout_W', 'dropout'), ('dropout_U', 'recurrent_dropout'), ('consume_less', 'implementation')], value_conversions={'consume_less': {'cpu': 0, 'mem': 1, 'gpu': 2}}, preprocessor=recurrent_args_preprocessor)
A:keras.legacy.interfaces.legacy_gaussiandropout_support->generate_legacy_interface(allowed_positional_args=['rate'], conversions=[('p', 'rate')])
A:keras.legacy.interfaces.legacy_pooling2d_support->generate_legacy_interface(allowed_positional_args=['pool_size', 'strides', 'padding'], conversions=[('border_mode', 'padding'), ('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_pooling3d_support->generate_legacy_interface(allowed_positional_args=['pool_size', 'strides', 'padding'], conversions=[('border_mode', 'padding'), ('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_global_pooling_support->generate_legacy_interface(conversions=[('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_upsampling1d_support->generate_legacy_interface(allowed_positional_args=['size'], conversions=[('length', 'size')])
A:keras.legacy.interfaces.legacy_upsampling2d_support->generate_legacy_interface(allowed_positional_args=['size'], conversions=[('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_upsampling3d_support->generate_legacy_interface(allowed_positional_args=['size'], conversions=[('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.length->kwargs.pop('input_length')
A:keras.legacy.interfaces.legacy_conv1d_support->generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('filter_length', 'kernel_size'), ('subsample_length', 'strides'), ('border_mode', 'padding'), ('init', 'kernel_initializer'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('W_constraint', 'kernel_constraint'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')], preprocessor=conv1d_args_preprocessor)
A:keras.legacy.interfaces.legacy_conv2d_support->generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('subsample', 'strides'), ('border_mode', 'padding'), ('dim_ordering', 'data_format'), ('init', 'kernel_initializer'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('W_constraint', 'kernel_constraint'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}}, preprocessor=conv2d_args_preprocessor)
A:keras.legacy.interfaces.init->kwargs.pop('init')
A:keras.legacy.interfaces.(args, kwargs, _converted)->conv2d_args_preprocessor(args, kwargs)
A:keras.legacy.interfaces.legacy_separable_conv2d_support->generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('subsample', 'strides'), ('border_mode', 'padding'), ('dim_ordering', 'data_format'), ('b_regularizer', 'bias_regularizer'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}}, preprocessor=separable_conv2d_args_preprocessor)
A:keras.legacy.interfaces.legacy_deconv2d_support->generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('subsample', 'strides'), ('border_mode', 'padding'), ('dim_ordering', 'data_format'), ('init', 'kernel_initializer'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('W_constraint', 'kernel_constraint'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}}, preprocessor=deconv2d_args_preprocessor)
A:keras.legacy.interfaces.legacy_conv3d_support->generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('subsample', 'strides'), ('border_mode', 'padding'), ('dim_ordering', 'data_format'), ('init', 'kernel_initializer'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('W_constraint', 'kernel_constraint'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}}, preprocessor=conv3d_args_preprocessor)
A:keras.legacy.interfaces.legacy_convlstm2d_support->generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('subsample', 'strides'), ('border_mode', 'padding'), ('dim_ordering', 'data_format'), ('init', 'kernel_initializer'), ('inner_init', 'recurrent_initializer'), ('W_regularizer', 'kernel_regularizer'), ('U_regularizer', 'recurrent_regularizer'), ('b_regularizer', 'bias_regularizer'), ('inner_activation', 'recurrent_activation'), ('dropout_W', 'dropout'), ('dropout_U', 'recurrent_dropout'), ('bias', 'use_bias')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}}, preprocessor=convlstm2d_args_preprocessor)
A:keras.legacy.interfaces.legacy_batchnorm_support->generate_legacy_interface(allowed_positional_args=[], conversions=[('beta_init', 'beta_initializer'), ('gamma_init', 'gamma_initializer')], preprocessor=batchnorm_args_preprocessor)
A:keras.legacy.interfaces.top_pad->args[1].get('top_pad', 0)
A:keras.legacy.interfaces.bottom_pad->args[1].get('bottom_pad', 0)
A:keras.legacy.interfaces.left_pad->args[1].get('left_pad', 0)
A:keras.legacy.interfaces.right_pad->args[1].get('right_pad', 0)
A:keras.legacy.interfaces.legacy_zeropadding2d_support->generate_legacy_interface(allowed_positional_args=['padding'], conversions=[('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}}, preprocessor=zeropadding2d_args_preprocessor)
A:keras.legacy.interfaces.legacy_zeropadding3d_support->generate_legacy_interface(allowed_positional_args=['padding'], conversions=[('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_cropping2d_support->generate_legacy_interface(allowed_positional_args=['cropping'], conversions=[('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_cropping3d_support->generate_legacy_interface(allowed_positional_args=['cropping'], conversions=[('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_spatialdropout1d_support->generate_legacy_interface(allowed_positional_args=['rate'], conversions=[('p', 'rate')])
A:keras.legacy.interfaces.legacy_spatialdropoutNd_support->generate_legacy_interface(allowed_positional_args=['rate'], conversions=[('p', 'rate'), ('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_lambda_support->generate_legacy_interface(allowed_positional_args=['function', 'output_shape'])
A:keras.legacy.interfaces.samples_per_epoch->kwargs.pop('samples_per_epoch')
A:keras.legacy.interfaces.legacy_generator_methods_support->generate_legacy_method_interface(allowed_positional_args=['generator', 'steps_per_epoch', 'epochs'], conversions=[('samples_per_epoch', 'steps_per_epoch'), ('val_samples', 'steps'), ('nb_epoch', 'epochs'), ('nb_val_samples', 'validation_steps'), ('nb_worker', 'workers'), ('pickle_safe', 'use_multiprocessing'), ('max_q_size', 'max_queue_size')], preprocessor=generator_methods_args_preprocessor)
A:keras.legacy.interfaces.legacy_model_constructor_support->generate_legacy_interface(allowed_positional_args=None, conversions=[('input', 'inputs'), ('output', 'outputs')])
A:keras.legacy.interfaces.legacy_input_support->generate_legacy_interface(allowed_positional_args=None, conversions=[('input_dtype', 'dtype')])
A:keras.legacy.interfaces.legacy_add_weight_support->generate_legacy_interface(allowed_positional_args=['name', 'shape'], preprocessor=add_weight_args_preprocessing)
A:keras.legacy.interfaces.legacy_get_updates_support->generate_legacy_interface(allowed_positional_args=None, conversions=[], preprocessor=get_updates_arg_preprocessing)
keras.legacy.interfaces.add_weight_args_preprocessing(args,kwargs)
keras.legacy.interfaces.batchnorm_args_preprocessor(args,kwargs)
keras.legacy.interfaces.conv1d_args_preprocessor(args,kwargs)
keras.legacy.interfaces.conv2d_args_preprocessor(args,kwargs)
keras.legacy.interfaces.conv3d_args_preprocessor(args,kwargs)
keras.legacy.interfaces.convlstm2d_args_preprocessor(args,kwargs)
keras.legacy.interfaces.deconv2d_args_preprocessor(args,kwargs)
keras.legacy.interfaces.embedding_kwargs_preprocessor(args,kwargs)
keras.legacy.interfaces.generate_legacy_interface(allowed_positional_args=None,conversions=None,preprocessor=None,value_conversions=None,object_type='class')
keras.legacy.interfaces.generator_methods_args_preprocessor(args,kwargs)
keras.legacy.interfaces.get_updates_arg_preprocessing(args,kwargs)
keras.legacy.interfaces.raise_duplicate_arg_error(old_arg,new_arg)
keras.legacy.interfaces.recurrent_args_preprocessor(args,kwargs)
keras.legacy.interfaces.separable_conv2d_args_preprocessor(args,kwargs)
keras.legacy.interfaces.zeropadding2d_args_preprocessor(args,kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/callbacks/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/callbacks/tensorboard_v2.py----------------------------------------
keras.callbacks.TensorBoard(self,log_dir='./logs',histogram_freq=0,batch_size=None,write_graph=True,write_grads=False,write_images=False,embeddings_freq=0,embeddings_layer_names=None,embeddings_metadata=None,embeddings_data=None,update_freq='epoch',**kwargs)
keras.callbacks.TensorBoard.set_model(self,model)
keras.callbacks.tensorboard_v2.TensorBoard(self,log_dir='./logs',histogram_freq=0,batch_size=None,write_graph=True,write_grads=False,write_images=False,embeddings_freq=0,embeddings_layer_names=None,embeddings_metadata=None,embeddings_data=None,update_freq='epoch',**kwargs)
keras.callbacks.tensorboard_v2.TensorBoard.__init__(self,log_dir='./logs',histogram_freq=0,batch_size=None,write_graph=True,write_grads=False,write_images=False,embeddings_freq=0,embeddings_layer_names=None,embeddings_metadata=None,embeddings_data=None,update_freq='epoch',**kwargs)
keras.callbacks.tensorboard_v2.TensorBoard.set_model(self,model)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/callbacks/callbacks.py----------------------------------------
A:keras.callbacks.callbacks.self._delta_ts->defaultdict(lambda : deque([], maxlen=self.queue_length))
A:keras.callbacks.callbacks.hook_name->'on_{mode}_batch_{hook}'.format(mode=mode, hook=hook)
A:keras.callbacks.callbacks.self._t_enter_batch->time.time()
A:keras.callbacks.callbacks.t_before_callbacks->time.time()
A:keras.callbacks.callbacks.batch_hook->getattr(callback, hook_name)
A:keras.callbacks.callbacks.delta_t_median->numpy.median(self._delta_ts[hook_name])
A:keras.callbacks.callbacks.self.stateful_metrics->set()
A:keras.callbacks.callbacks.batch_size->dict([(k, logs[k] if k in logs else 'NA') for k in self.keys]).get('size', 0)
A:keras.callbacks.callbacks.loss->dict([(k, logs[k] if k in logs else 'NA') for k in self.keys]).get('loss')
A:keras.callbacks.callbacks.self.progbar->Progbar(target=self.target, verbose=self.verbose, stateful_metrics=self.stateful_metrics)
A:keras.callbacks.callbacks.filepath->self.filepath.format(epoch=epoch + 1, **logs)
A:keras.callbacks.callbacks.current->dict([(k, logs[k] if k in logs else 'NA') for k in self.keys]).get(self.monitor)
A:keras.callbacks.callbacks.self.best_weights->self.model.get_weights()
A:keras.callbacks.callbacks.monitor_value->dict([(k, logs[k] if k in logs else 'NA') for k in self.keys]).get(self.monitor)
A:keras.callbacks.callbacks.send[k]->v.item()
A:keras.callbacks.callbacks.lr->self.schedule(epoch)
A:keras.callbacks.callbacks.logs['lr']->K.get_value(self.model.optimizer.lr)
A:keras.callbacks.callbacks.min_delta->kwargs.pop('epsilon')
A:keras.callbacks.callbacks.old_lr->float(K.get_value(self.model.optimizer.lr))
A:keras.callbacks.callbacks.new_lr->max(new_lr, self.min_lr)
A:keras.callbacks.callbacks.self.csv_file->io.open(self.filename, mode + self.file_flags, **self._open_args)
A:keras.callbacks.callbacks.self.keys->sorted(logs.keys())
A:keras.callbacks.callbacks.logs->dict([(k, logs[k] if k in logs else 'NA') for k in self.keys])
A:keras.callbacks.callbacks.self.writer->csv.DictWriter(self.csv_file, fieldnames=fieldnames, dialect=CustomDialect)
A:keras.callbacks.callbacks.row_dict->OrderedDict({'epoch': epoch})
keras.callbacks.BaseLogger(self,stateful_metrics=None)
keras.callbacks.BaseLogger.on_batch_end(self,batch,logs=None)
keras.callbacks.BaseLogger.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.BaseLogger.on_epoch_end(self,epoch,logs=None)
keras.callbacks.CSVLogger(self,filename,separator=',',append=False)
keras.callbacks.CSVLogger.__del__(self)
keras.callbacks.CSVLogger.on_epoch_end(self,epoch,logs=None)
keras.callbacks.CSVLogger.on_train_begin(self,logs=None)
keras.callbacks.CSVLogger.on_train_end(self,logs=None)
keras.callbacks.Callback(self)
keras.callbacks.Callback.on_batch_begin(self,batch,logs=None)
keras.callbacks.Callback.on_batch_end(self,batch,logs=None)
keras.callbacks.Callback.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.Callback.on_epoch_end(self,epoch,logs=None)
keras.callbacks.Callback.on_predict_batch_begin(self,batch,logs=None)
keras.callbacks.Callback.on_predict_batch_end(self,batch,logs=None)
keras.callbacks.Callback.on_predict_begin(self,logs=None)
keras.callbacks.Callback.on_predict_end(self,logs=None)
keras.callbacks.Callback.on_test_batch_begin(self,batch,logs=None)
keras.callbacks.Callback.on_test_batch_end(self,batch,logs=None)
keras.callbacks.Callback.on_test_begin(self,logs=None)
keras.callbacks.Callback.on_test_end(self,logs=None)
keras.callbacks.Callback.on_train_batch_begin(self,batch,logs=None)
keras.callbacks.Callback.on_train_batch_end(self,batch,logs=None)
keras.callbacks.Callback.on_train_begin(self,logs=None)
keras.callbacks.Callback.on_train_end(self,logs=None)
keras.callbacks.Callback.set_model(self,model)
keras.callbacks.Callback.set_params(self,params)
keras.callbacks.CallbackList(self,callbacks=None,queue_length=10)
keras.callbacks.CallbackList.__iter__(self)
keras.callbacks.CallbackList._call_batch_hook(self,mode,hook,batch,logs=None)
keras.callbacks.CallbackList._call_begin_hook(self,mode)
keras.callbacks.CallbackList._call_end_hook(self,mode)
keras.callbacks.CallbackList._reset_batch_timing(self)
keras.callbacks.CallbackList.append(self,callback)
keras.callbacks.CallbackList.on_batch_begin(self,batch,logs=None)
keras.callbacks.CallbackList.on_batch_end(self,batch,logs=None)
keras.callbacks.CallbackList.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.CallbackList.on_epoch_end(self,epoch,logs=None)
keras.callbacks.CallbackList.on_predict_batch_begin(self,batch,logs=None)
keras.callbacks.CallbackList.on_predict_batch_end(self,batch,logs=None)
keras.callbacks.CallbackList.on_predict_begin(self,logs=None)
keras.callbacks.CallbackList.on_predict_end(self,logs=None)
keras.callbacks.CallbackList.on_test_batch_begin(self,batch,logs=None)
keras.callbacks.CallbackList.on_test_batch_end(self,batch,logs=None)
keras.callbacks.CallbackList.on_test_begin(self,logs=None)
keras.callbacks.CallbackList.on_test_end(self,logs=None)
keras.callbacks.CallbackList.on_train_batch_begin(self,batch,logs=None)
keras.callbacks.CallbackList.on_train_batch_end(self,batch,logs=None)
keras.callbacks.CallbackList.on_train_begin(self,logs=None)
keras.callbacks.CallbackList.on_train_end(self,logs=None)
keras.callbacks.CallbackList.set_model(self,model)
keras.callbacks.CallbackList.set_params(self,params)
keras.callbacks.EarlyStopping(self,monitor='val_loss',min_delta=0,patience=0,verbose=0,mode='auto',baseline=None,restore_best_weights=False)
keras.callbacks.EarlyStopping.get_monitor_value(self,logs)
keras.callbacks.EarlyStopping.on_epoch_end(self,epoch,logs=None)
keras.callbacks.EarlyStopping.on_train_begin(self,logs=None)
keras.callbacks.EarlyStopping.on_train_end(self,logs=None)
keras.callbacks.History(Callback)
keras.callbacks.History.on_epoch_end(self,epoch,logs=None)
keras.callbacks.History.on_train_begin(self,logs=None)
keras.callbacks.LambdaCallback(self,on_epoch_begin=None,on_epoch_end=None,on_batch_begin=None,on_batch_end=None,on_train_begin=None,on_train_end=None,**kwargs)
keras.callbacks.LearningRateScheduler(self,schedule,verbose=0)
keras.callbacks.LearningRateScheduler.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.LearningRateScheduler.on_epoch_end(self,epoch,logs=None)
keras.callbacks.ModelCheckpoint(self,filepath,monitor='val_loss',verbose=0,save_best_only=False,save_weights_only=False,mode='auto',period=1)
keras.callbacks.ModelCheckpoint.on_epoch_end(self,epoch,logs=None)
keras.callbacks.ProgbarLogger(self,count_mode='samples',stateful_metrics=None)
keras.callbacks.ProgbarLogger.on_batch_begin(self,batch,logs=None)
keras.callbacks.ProgbarLogger.on_batch_end(self,batch,logs=None)
keras.callbacks.ProgbarLogger.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.ProgbarLogger.on_epoch_end(self,epoch,logs=None)
keras.callbacks.ProgbarLogger.on_train_begin(self,logs=None)
keras.callbacks.ReduceLROnPlateau(self,monitor='val_loss',factor=0.1,patience=10,verbose=0,mode='auto',min_delta=0.0001,cooldown=0,min_lr=0,**kwargs)
keras.callbacks.ReduceLROnPlateau._reset(self)
keras.callbacks.ReduceLROnPlateau.in_cooldown(self)
keras.callbacks.ReduceLROnPlateau.on_epoch_end(self,epoch,logs=None)
keras.callbacks.ReduceLROnPlateau.on_train_begin(self,logs=None)
keras.callbacks.RemoteMonitor(self,root='http://localhost:9000',path='/publish/epoch/end/',field='data',headers=None,send_as_json=False)
keras.callbacks.RemoteMonitor.on_epoch_end(self,epoch,logs=None)
keras.callbacks.TerminateOnNaN(Callback)
keras.callbacks.TerminateOnNaN.on_batch_end(self,batch,logs=None)
keras.callbacks.callbacks.BaseLogger(self,stateful_metrics=None)
keras.callbacks.callbacks.BaseLogger.__init__(self,stateful_metrics=None)
keras.callbacks.callbacks.BaseLogger.on_batch_end(self,batch,logs=None)
keras.callbacks.callbacks.BaseLogger.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.callbacks.BaseLogger.on_epoch_end(self,epoch,logs=None)
keras.callbacks.callbacks.CSVLogger(self,filename,separator=',',append=False)
keras.callbacks.callbacks.CSVLogger.__del__(self)
keras.callbacks.callbacks.CSVLogger.__init__(self,filename,separator=',',append=False)
keras.callbacks.callbacks.CSVLogger.on_epoch_end(self,epoch,logs=None)
keras.callbacks.callbacks.CSVLogger.on_train_begin(self,logs=None)
keras.callbacks.callbacks.CSVLogger.on_train_end(self,logs=None)
keras.callbacks.callbacks.Callback(self)
keras.callbacks.callbacks.Callback.__init__(self)
keras.callbacks.callbacks.Callback.on_batch_begin(self,batch,logs=None)
keras.callbacks.callbacks.Callback.on_batch_end(self,batch,logs=None)
keras.callbacks.callbacks.Callback.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.callbacks.Callback.on_epoch_end(self,epoch,logs=None)
keras.callbacks.callbacks.Callback.on_predict_batch_begin(self,batch,logs=None)
keras.callbacks.callbacks.Callback.on_predict_batch_end(self,batch,logs=None)
keras.callbacks.callbacks.Callback.on_predict_begin(self,logs=None)
keras.callbacks.callbacks.Callback.on_predict_end(self,logs=None)
keras.callbacks.callbacks.Callback.on_test_batch_begin(self,batch,logs=None)
keras.callbacks.callbacks.Callback.on_test_batch_end(self,batch,logs=None)
keras.callbacks.callbacks.Callback.on_test_begin(self,logs=None)
keras.callbacks.callbacks.Callback.on_test_end(self,logs=None)
keras.callbacks.callbacks.Callback.on_train_batch_begin(self,batch,logs=None)
keras.callbacks.callbacks.Callback.on_train_batch_end(self,batch,logs=None)
keras.callbacks.callbacks.Callback.on_train_begin(self,logs=None)
keras.callbacks.callbacks.Callback.on_train_end(self,logs=None)
keras.callbacks.callbacks.Callback.set_model(self,model)
keras.callbacks.callbacks.Callback.set_params(self,params)
keras.callbacks.callbacks.CallbackList(self,callbacks=None,queue_length=10)
keras.callbacks.callbacks.CallbackList.__init__(self,callbacks=None,queue_length=10)
keras.callbacks.callbacks.CallbackList.__iter__(self)
keras.callbacks.callbacks.CallbackList._call_batch_hook(self,mode,hook,batch,logs=None)
keras.callbacks.callbacks.CallbackList._call_begin_hook(self,mode)
keras.callbacks.callbacks.CallbackList._call_end_hook(self,mode)
keras.callbacks.callbacks.CallbackList._reset_batch_timing(self)
keras.callbacks.callbacks.CallbackList.append(self,callback)
keras.callbacks.callbacks.CallbackList.on_batch_begin(self,batch,logs=None)
keras.callbacks.callbacks.CallbackList.on_batch_end(self,batch,logs=None)
keras.callbacks.callbacks.CallbackList.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.callbacks.CallbackList.on_epoch_end(self,epoch,logs=None)
keras.callbacks.callbacks.CallbackList.on_predict_batch_begin(self,batch,logs=None)
keras.callbacks.callbacks.CallbackList.on_predict_batch_end(self,batch,logs=None)
keras.callbacks.callbacks.CallbackList.on_predict_begin(self,logs=None)
keras.callbacks.callbacks.CallbackList.on_predict_end(self,logs=None)
keras.callbacks.callbacks.CallbackList.on_test_batch_begin(self,batch,logs=None)
keras.callbacks.callbacks.CallbackList.on_test_batch_end(self,batch,logs=None)
keras.callbacks.callbacks.CallbackList.on_test_begin(self,logs=None)
keras.callbacks.callbacks.CallbackList.on_test_end(self,logs=None)
keras.callbacks.callbacks.CallbackList.on_train_batch_begin(self,batch,logs=None)
keras.callbacks.callbacks.CallbackList.on_train_batch_end(self,batch,logs=None)
keras.callbacks.callbacks.CallbackList.on_train_begin(self,logs=None)
keras.callbacks.callbacks.CallbackList.on_train_end(self,logs=None)
keras.callbacks.callbacks.CallbackList.set_model(self,model)
keras.callbacks.callbacks.CallbackList.set_params(self,params)
keras.callbacks.callbacks.EarlyStopping(self,monitor='val_loss',min_delta=0,patience=0,verbose=0,mode='auto',baseline=None,restore_best_weights=False)
keras.callbacks.callbacks.EarlyStopping.__init__(self,monitor='val_loss',min_delta=0,patience=0,verbose=0,mode='auto',baseline=None,restore_best_weights=False)
keras.callbacks.callbacks.EarlyStopping.get_monitor_value(self,logs)
keras.callbacks.callbacks.EarlyStopping.on_epoch_end(self,epoch,logs=None)
keras.callbacks.callbacks.EarlyStopping.on_train_begin(self,logs=None)
keras.callbacks.callbacks.EarlyStopping.on_train_end(self,logs=None)
keras.callbacks.callbacks.History(Callback)
keras.callbacks.callbacks.History.on_epoch_end(self,epoch,logs=None)
keras.callbacks.callbacks.History.on_train_begin(self,logs=None)
keras.callbacks.callbacks.LambdaCallback(self,on_epoch_begin=None,on_epoch_end=None,on_batch_begin=None,on_batch_end=None,on_train_begin=None,on_train_end=None,**kwargs)
keras.callbacks.callbacks.LambdaCallback.__init__(self,on_epoch_begin=None,on_epoch_end=None,on_batch_begin=None,on_batch_end=None,on_train_begin=None,on_train_end=None,**kwargs)
keras.callbacks.callbacks.LearningRateScheduler(self,schedule,verbose=0)
keras.callbacks.callbacks.LearningRateScheduler.__init__(self,schedule,verbose=0)
keras.callbacks.callbacks.LearningRateScheduler.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.callbacks.LearningRateScheduler.on_epoch_end(self,epoch,logs=None)
keras.callbacks.callbacks.ModelCheckpoint(self,filepath,monitor='val_loss',verbose=0,save_best_only=False,save_weights_only=False,mode='auto',period=1)
keras.callbacks.callbacks.ModelCheckpoint.__init__(self,filepath,monitor='val_loss',verbose=0,save_best_only=False,save_weights_only=False,mode='auto',period=1)
keras.callbacks.callbacks.ModelCheckpoint.on_epoch_end(self,epoch,logs=None)
keras.callbacks.callbacks.ProgbarLogger(self,count_mode='samples',stateful_metrics=None)
keras.callbacks.callbacks.ProgbarLogger.__init__(self,count_mode='samples',stateful_metrics=None)
keras.callbacks.callbacks.ProgbarLogger.on_batch_begin(self,batch,logs=None)
keras.callbacks.callbacks.ProgbarLogger.on_batch_end(self,batch,logs=None)
keras.callbacks.callbacks.ProgbarLogger.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.callbacks.ProgbarLogger.on_epoch_end(self,epoch,logs=None)
keras.callbacks.callbacks.ProgbarLogger.on_train_begin(self,logs=None)
keras.callbacks.callbacks.ReduceLROnPlateau(self,monitor='val_loss',factor=0.1,patience=10,verbose=0,mode='auto',min_delta=0.0001,cooldown=0,min_lr=0,**kwargs)
keras.callbacks.callbacks.ReduceLROnPlateau.__init__(self,monitor='val_loss',factor=0.1,patience=10,verbose=0,mode='auto',min_delta=0.0001,cooldown=0,min_lr=0,**kwargs)
keras.callbacks.callbacks.ReduceLROnPlateau._reset(self)
keras.callbacks.callbacks.ReduceLROnPlateau.in_cooldown(self)
keras.callbacks.callbacks.ReduceLROnPlateau.on_epoch_end(self,epoch,logs=None)
keras.callbacks.callbacks.ReduceLROnPlateau.on_train_begin(self,logs=None)
keras.callbacks.callbacks.RemoteMonitor(self,root='http://localhost:9000',path='/publish/epoch/end/',field='data',headers=None,send_as_json=False)
keras.callbacks.callbacks.RemoteMonitor.__init__(self,root='http://localhost:9000',path='/publish/epoch/end/',field='data',headers=None,send_as_json=False)
keras.callbacks.callbacks.RemoteMonitor.on_epoch_end(self,epoch,logs=None)
keras.callbacks.callbacks.TerminateOnNaN(Callback)
keras.callbacks.callbacks.TerminateOnNaN.on_batch_end(self,batch,logs=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/callbacks/tensorboard_v1.py----------------------------------------
A:keras.callbacks.tensorboard_v1.self.sess->K.get_session()
A:keras.callbacks.tensorboard_v1.mapped_weight_name->weight.name.replace(':', '_')
A:keras.callbacks.tensorboard_v1.grads->model.optimizer.get_gradients(model.total_loss, weight)
A:keras.callbacks.tensorboard_v1.w_img->tensorflow.reshape(w_img, [1, shape[0], 1, 1])
A:keras.callbacks.tensorboard_v1.shape->K.int_shape(w_img)
A:keras.callbacks.tensorboard_v1.self.merged->tensorflow.summary.merge_all()
A:keras.callbacks.tensorboard_v1.self.writer->tensorflow.summary.FileWriter(self.log_dir)
A:keras.callbacks.tensorboard_v1.self.embeddings_data->standardize_input_data(self.embeddings_data, model.input_names)
A:keras.callbacks.tensorboard_v1.self.batch_idbatch_id->tensorflow.placeholder(tf.int32)
A:keras.callbacks.tensorboard_v1.self.stepstep->tensorflow.placeholder(tf.int32)
A:keras.callbacks.tensorboard_v1.embedding_size->numpy.prod(embedding_input.shape[1:])
A:keras.callbacks.tensorboard_v1.embedding_input->tensorflow.reshape(embedding_input, (step, int(embedding_size)))
A:keras.callbacks.tensorboard_v1.embedding->tensorflow.contrib.tensorboard.plugins.projector.ProjectorConfig().embeddings.add()
A:keras.callbacks.tensorboard_v1.batch->slice(i, i + step)
A:keras.callbacks.tensorboard_v1.self.saver->tensorflow.train.Saver(list(embeddings_vars.values()))
A:keras.callbacks.tensorboard_v1.config->tensorflow.contrib.tensorboard.plugins.projector.ProjectorConfig()
A:keras.callbacks.tensorboard_v1.step->min(self.batch_size, n_samples - i)
A:keras.callbacks.tensorboard_v1.feed_dict->dict(zip(tensors, batch_val))
A:keras.callbacks.tensorboard_v1.result->self.sess.run([self.merged], feed_dict=feed_dict)
A:keras.callbacks.tensorboard_v1.summary->tensorflow.Summary()
A:keras.callbacks.tensorboard_v1.summary_value->tensorflow.Summary().value.add()
A:keras.callbacks.tensorboard_v1.summary_value.simple_value->value.item()
keras.callbacks.TensorBoard(self,log_dir='./logs',histogram_freq=0,batch_size=32,write_graph=True,write_grads=False,write_images=False,embeddings_freq=0,embeddings_layer_names=None,embeddings_metadata=None,embeddings_data=None,update_freq='epoch')
keras.callbacks.TensorBoard._write_logs(self,logs,index)
keras.callbacks.TensorBoard.on_batch_end(self,batch,logs=None)
keras.callbacks.TensorBoard.on_epoch_end(self,epoch,logs=None)
keras.callbacks.TensorBoard.on_train_end(self,_)
keras.callbacks.TensorBoard.set_model(self,model)
keras.callbacks.tensorboard_v1.TensorBoard(self,log_dir='./logs',histogram_freq=0,batch_size=32,write_graph=True,write_grads=False,write_images=False,embeddings_freq=0,embeddings_layer_names=None,embeddings_metadata=None,embeddings_data=None,update_freq='epoch')
keras.callbacks.tensorboard_v1.TensorBoard.__init__(self,log_dir='./logs',histogram_freq=0,batch_size=32,write_graph=True,write_grads=False,write_images=False,embeddings_freq=0,embeddings_layer_names=None,embeddings_metadata=None,embeddings_data=None,update_freq='epoch')
keras.callbacks.tensorboard_v1.TensorBoard._write_logs(self,logs,index)
keras.callbacks.tensorboard_v1.TensorBoard.on_batch_end(self,batch,logs=None)
keras.callbacks.tensorboard_v1.TensorBoard.on_epoch_end(self,epoch,logs=None)
keras.callbacks.tensorboard_v1.TensorBoard.on_train_end(self,_)
keras.callbacks.tensorboard_v1.TensorBoard.set_model(self,model)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/utils/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/utils/vis_utils.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/utils/generic_utils.py----------------------------------------
A:keras.utils.generic_utils.object_list->to_list(object_list)
A:keras.utils.generic_utils.iterable->to_list(iterable_or_element, allow_tuple=True)
A:keras.utils.generic_utils.start->start.tolist().tolist()
A:keras.utils.generic_utils.unknown->set(input_dict.keys()).difference(expected_values)
A:keras.utils.generic_utils.arg_spec->inspect.getfullargspec(fn)
A:keras.utils.generic_utils.signature->inspect.signature(fn)
A:keras.utils.generic_utils.parameter->inspect.signature(fn).parameters.get(name)
keras.utils.generic_utils.check_for_unexpected_keys(name,input_dict,expected_values)
keras.utils.generic_utils.has_arg(fn,name,accept_all=False)
keras.utils.generic_utils.is_all_none(iterable_or_element)
keras.utils.generic_utils.object_list_uid(object_list)
keras.utils.generic_utils.slice_arrays(arrays,start=None,stop=None)
keras.utils.generic_utils.to_list(x,allow_tuple=False)
keras.utils.generic_utils.transpose_shape(shape,target_format,spatial_axes)
keras.utils.generic_utils.unpack_singleton(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/utils/io_utils.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/utils/layer_utils.py----------------------------------------
A:keras.utils.layer_utils.weight_ids->set()
A:keras.utils.layer_utils.original_kernel->K.get_value(layer.kernel)
A:keras.utils.layer_utils.converted_kernel->convert_kernel(original_kernel)
A:keras.utils.layer_utils.(kernel, bias)->dense.get_weights()
A:keras.utils.layer_utils.ki->numpy.transpose(ki, (1, 2, 0))
A:keras.utils.layer_utils.kernel[:, i]->numpy.reshape(ki, (np.prod(previous_feature_map_shape),))
keras.utils.layer_utils.convert_all_kernels_in_model(model)
keras.utils.layer_utils.convert_dense_weights_data_format(dense,previous_feature_map_shape,target_data_format='channels_first')
keras.utils.layer_utils.count_params(weights)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/utils/data_utils.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/utils/metrics_utils.py----------------------------------------
A:keras.utils.metrics_utils.update_op->update_state_fn(*args, **kwargs)
A:keras.utils.metrics_utils.result_t->K.identity(result_fn(*args, **kwargs))
A:keras.utils.metrics_utils.(_, top_k_idx)->tensorflow.nn.top_k(x, k, sorted=False)
A:keras.utils.metrics_utils.top_k_mask->K.sum(K.one_hot(top_k_idx, x.shape[-1]), axis=-2)
A:keras.utils.metrics_utils.thresholds->to_list(thresholds)
A:keras.utils.metrics_utils.label->K.expand_dims(label, 0)
A:keras.utils.metrics_utils.pred->K.expand_dims(pred, 0)
A:keras.utils.metrics_utils.are_different->K.concatenate([label, pred], axis=0)
A:keras.utils.metrics_utils.label_and_pred->K.cast(label_and_pred, dtype=K.floatx())
A:keras.utils.metrics_utils.y_true->K.cast(y_true, dtype=K.floatx())
A:keras.utils.metrics_utils.y_pred->filter_top_k(y_pred, top_k)
A:keras.utils.metrics_utils.sample_weight->K.cast(sample_weight, dtype=K.floatx())
A:keras.utils.metrics_utils.(y_pred, y_true)->losses_utils.squeeze_or_expand_dimensions(y_pred, y_true=y_true)
A:keras.utils.metrics_utils.(y_pred, y_true, sample_weight)->losses_utils.squeeze_or_expand_dimensions(y_pred, y_true=y_true, sample_weight=sample_weight)
A:keras.utils.metrics_utils.num_thresholds->len(thresholds)
A:keras.utils.metrics_utils.num_predictions->K.size(y_pred)
A:keras.utils.metrics_utils.predictions_2d->K.reshape(y_pred, [1, -1])
A:keras.utils.metrics_utils.labels_2d->K.reshape(K.cast(y_true, dtype='bool'), [1, -1])
A:keras.utils.metrics_utils.thresh_tiled->K.tile(K.expand_dims(K.constant(thresholds), 1), K.cast(K.stack([1, num_predictions]), dtype='int32'))
A:keras.utils.metrics_utils.preds_tiled->K.tile(predictions_2d, [num_thresholds, 1])
A:keras.utils.metrics_utils.pred_is_pos->K.greater(preds_tiled, thresh_tiled)
A:keras.utils.metrics_utils.label_is_pos->K.tile(labels_2d, [num_thresholds, 1])
A:keras.utils.metrics_utils.weights->losses_utils.broadcast_weights(y_pred, K.cast(sample_weight, dtype=K.floatx()))
A:keras.utils.metrics_utils.weights_tiled->K.tile(K.reshape(weights, [1, -1]), [num_thresholds, 1])
A:keras.utils.metrics_utils.pred_is_neg->K.equal(pred_is_pos, K.zeros_like(pred_is_pos, dtype=pred_is_pos.dtype))
A:keras.utils.metrics_utils.label_is_neg->K.equal(label_is_pos, K.zeros_like(label_is_pos, dtype=label_is_pos.dtype))
keras.utils.metrics_utils.AUCCurve(Enum)
keras.utils.metrics_utils.AUCCurve.from_str(key)
keras.utils.metrics_utils.AUCSummationMethod(Enum)
keras.utils.metrics_utils.AUCSummationMethod.from_str(key)
keras.utils.metrics_utils.ConfusionMatrix(Enum)
keras.utils.metrics_utils.Reduction(object)
keras.utils.metrics_utils.assert_thresholds_range(thresholds)
keras.utils.metrics_utils.filter_top_k(x,k)
keras.utils.metrics_utils.parse_init_thresholds(thresholds,default_threshold=0.5)
keras.utils.metrics_utils.result_wrapper(result_fn)
keras.utils.metrics_utils.to_list(x)
keras.utils.metrics_utils.update_confusion_matrix_variables(variables_to_update,y_true,y_pred,thresholds=0.5,top_k=None,class_id=None,sample_weight=None)
keras.utils.metrics_utils.update_state_wrapper(update_state_fn)
keras.utils.metrics_utils.weighted_assign_add(label,pred,weights,var)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/utils/conv_utils.py----------------------------------------
A:keras.utils.conv_utils.value_tuple->tuple(value)
A:keras.utils.conv_utils.padding->value.lower()
A:keras.utils.conv_utils.kernel->numpy.asarray(kernel)
keras.utils.conv_utils.conv_input_length(output_length,filter_size,padding,stride)
keras.utils.conv_utils.conv_output_length(input_length,filter_size,padding,stride,dilation=1)
keras.utils.conv_utils.convert_kernel(kernel)
keras.utils.conv_utils.deconv_length(dim_size,stride_size,kernel_size,padding,output_padding,dilation=1)
keras.utils.conv_utils.normalize_padding(value)
keras.utils.conv_utils.normalize_tuple(value,n,name)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/utils/multi_gpu_utils.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/utils/losses_utils.py----------------------------------------
A:keras.utils.losses_utils.y_pred_rank->K.ndim(y_pred)
A:keras.utils.losses_utils.y_pred_shape->K.int_shape(y_pred)
A:keras.utils.losses_utils.y_true_rank->K.ndim(y_true)
A:keras.utils.losses_utils.y_true_shape->K.int_shape(y_true)
A:keras.utils.losses_utils.y_pred->K.expand_dims(y_pred, -1)
A:keras.utils.losses_utils.y_true->K.squeeze(y_true, -1)
A:keras.utils.losses_utils.weights_rank->K.ndim(sample_weight)
A:keras.utils.losses_utils.sample_weight->broadcast_weights(losses, sample_weight)
A:keras.utils.losses_utils.loss->K.cast(loss, input_dtype)
A:keras.utils.losses_utils.weights_shape->K.int_shape(sample_weight)
A:keras.utils.losses_utils.values_shape->K.int_shape(values)
A:keras.utils.losses_utils.values_rank->K.ndim(values)
A:keras.utils.losses_utils.input_dtype->K.dtype(losses)
A:keras.utils.losses_utils.losses->K.cast(losses, K.floatx())
A:keras.utils.losses_utils.(losses, _, sample_weight)->squeeze_or_expand_dimensions(losses, None, sample_weight)
keras.utils.losses_utils.Reduction(object)
keras.utils.losses_utils.Reduction.all(cls)
keras.utils.losses_utils.Reduction.validate(cls,key)
keras.utils.losses_utils._num_elements(losses)
keras.utils.losses_utils.broadcast_weights(values,sample_weight)
keras.utils.losses_utils.compute_weighted_loss(losses,sample_weight=None,reduction=Reduction.SUM_OVER_BATCH_SIZE,name=None)
keras.utils.losses_utils.reduce_weighted_loss(weighted_losses,reduction=Reduction.SUM_OVER_BATCH_SIZE)
keras.utils.losses_utils.squeeze_or_expand_dimensions(y_pred,y_true=None,sample_weight=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/utils/np_utils.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/utils/test_utils.py----------------------------------------
A:keras.utils.test_utils.y->layer(x)
A:keras.utils.test_utils.X->numpy.zeros((samples,) + input_shape, dtype=np.float32)
A:keras.utils.test_utils.X[i]->numpy.random.normal(loc=y_loc[i], scale=0.7, size=input_shape)
A:keras.utils.test_utils.y_loc->numpy.random.random((samples,))
A:keras.utils.test_utils.y[i]->numpy.random.normal(loc=y_loc[i], scale=0.7, size=output_shape)
A:keras.utils.test_utils.input_dtype->K.floatx()
A:keras.utils.test_utils.input_data_shape->list(input_shape)
A:keras.utils.test_utils.input_data_shape[i]->numpy.random.randint(1, 4)
A:keras.utils.test_utils.input_data->input_data.astype(input_dtype).astype(input_dtype)
A:keras.utils.test_utils.layer->layer.__class__.from_config(layer_config).__class__.from_config(layer_config)
A:keras.utils.test_utils.weights->Model(x, y).get_weights()
A:keras.utils.test_utils.expected_output_shape->layer.__class__.from_config(layer_config).__class__.from_config(layer_config).compute_output_shape(input_shape)
A:keras.utils.test_utils.x->Input(shape=input_shape[1:], dtype=input_dtype)
A:keras.utils.test_utils.model->Model(x, y)
A:keras.utils.test_utils.actual_output->Model(x, y).predict(input_data)
A:keras.utils.test_utils.model_config->Model(x, y).get_config()
A:keras.utils.test_utils.recovered_model->Model(x, y).__class__.from_config(model_config)
A:keras.utils.test_utils._output->Model(x, y).__class__.from_config(model_config).predict(input_data)
A:keras.utils.test_utils.layer_config->layer.__class__.from_config(layer_config).__class__.from_config(layer_config).get_config()
keras.utils.test_utils.get_test_data(num_train=1000,num_test=500,input_shape=(10,),output_shape=(2,),classification=True,num_classes=2)
keras.utils.test_utils.layer_test(layer_cls,kwargs={},input_shape=None,input_dtype=None,input_data=None,expected_output=None,expected_output_dtype=None,fixed_batch_size=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/layers/convolutional_recurrent.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/layers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/layers/local.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/layers/noise.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/layers/core.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/layers/pooling.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/layers/embeddings.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/layers/convolutional.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/layers/cudnn_recurrent.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/layers/normalization.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/layers/recurrent.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/layers/advanced_activations.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/layers/wrappers.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/layers/merge.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/layers/experimental/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.4.0/lib/python3.6/site-packages/keras/layers/experimental/preprocessing/__init__.py----------------------------------------

