
----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/optimizers.py----------------------------------------
A:keras.optimizers.g->K.switch(n >= c, g * c / n, g)
A:keras.optimizers.grads->self.get_gradients(loss, params)
A:keras.optimizers.norm->K.sqrt(sum([K.sum(K.square(g)) for g in grads]))
A:keras.optimizers.self.iterations->K.variable(0)
A:keras.optimizers.self.lr->K.variable(lr)
A:keras.optimizers.self.momentum->K.variable(momentum)
A:keras.optimizers.self.decay->K.variable(decay)
A:keras.optimizers.m->K.variable(np.zeros(K.get_value(p).shape))
A:keras.optimizers.self.rho->K.variable(rho)
A:keras.optimizers.self.beta_1->K.variable(beta_1)
A:keras.optimizers.self.beta_2->K.variable(beta_2)
A:keras.optimizers.v->K.variable(np.zeros(K.get_value(p).shape))
A:keras.optimizers.u->K.variable(np.zeros(K.get_value(p).shape))
A:keras.optimizers.u_t->K.maximum(self.beta_2 * u, K.abs(g))
keras.optimizers.Adadelta(self,lr=1.0,rho=0.95,epsilon=1e-06,*args,**kwargs)
keras.optimizers.Adadelta.__init__(self,lr=1.0,rho=0.95,epsilon=1e-06,*args,**kwargs)
keras.optimizers.Adadelta.get_config(self)
keras.optimizers.Adadelta.get_updates(self,params,constraints,loss)
keras.optimizers.Adagrad(self,lr=0.01,epsilon=1e-06,*args,**kwargs)
keras.optimizers.Adagrad.__init__(self,lr=0.01,epsilon=1e-06,*args,**kwargs)
keras.optimizers.Adagrad.get_config(self)
keras.optimizers.Adagrad.get_updates(self,params,constraints,loss)
keras.optimizers.Adam(self,lr=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-08,*args,**kwargs)
keras.optimizers.Adam.__init__(self,lr=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-08,*args,**kwargs)
keras.optimizers.Adam.get_config(self)
keras.optimizers.Adam.get_updates(self,params,constraints,loss)
keras.optimizers.Adamax(self,lr=0.002,beta_1=0.9,beta_2=0.999,epsilon=1e-08,*args,**kwargs)
keras.optimizers.Adamax.__init__(self,lr=0.002,beta_1=0.9,beta_2=0.999,epsilon=1e-08,*args,**kwargs)
keras.optimizers.Adamax.get_config(self)
keras.optimizers.Adamax.get_updates(self,params,constraints,loss)
keras.optimizers.Optimizer(self,**kwargs)
keras.optimizers.Optimizer.__init__(self,**kwargs)
keras.optimizers.Optimizer.get_config(self)
keras.optimizers.Optimizer.get_gradients(self,loss,params)
keras.optimizers.Optimizer.get_state(self)
keras.optimizers.Optimizer.get_updates(self,params,constraints,loss)
keras.optimizers.Optimizer.set_state(self,value_list)
keras.optimizers.RMSprop(self,lr=0.001,rho=0.9,epsilon=1e-06,*args,**kwargs)
keras.optimizers.RMSprop.__init__(self,lr=0.001,rho=0.9,epsilon=1e-06,*args,**kwargs)
keras.optimizers.RMSprop.get_config(self)
keras.optimizers.RMSprop.get_updates(self,params,constraints,loss)
keras.optimizers.SGD(self,lr=0.01,momentum=0.0,decay=0.0,nesterov=False,*args,**kwargs)
keras.optimizers.SGD.__init__(self,lr=0.01,momentum=0.0,decay=0.0,nesterov=False,*args,**kwargs)
keras.optimizers.SGD.get_config(self)
keras.optimizers.SGD.get_updates(self,params,constraints,loss)
keras.optimizers.clip_norm(g,c,n)
keras.optimizers.get(identifier,kwargs=None)
keras.optimizers.kl_divergence(p,p_hat)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/regularizers.py----------------------------------------
A:keras.regularizers.output->self.layer.get_output(True)
keras.regularizers.ActivityRegularizer(self,l1=0.0,l2=0.0)
keras.regularizers.ActivityRegularizer.__init__(self,l1=0.0,l2=0.0)
keras.regularizers.ActivityRegularizer.get_config(self)
keras.regularizers.ActivityRegularizer.set_layer(self,layer)
keras.regularizers.Regularizer(self,loss)
keras.regularizers.Regularizer.__call__(self,loss)
keras.regularizers.Regularizer.get_config(self)
keras.regularizers.Regularizer.set_layer(self,layer)
keras.regularizers.Regularizer.set_param(self,p)
keras.regularizers.WeightRegularizer(self,l1=0.0,l2=0.0)
keras.regularizers.WeightRegularizer.__init__(self,l1=0.0,l2=0.0)
keras.regularizers.WeightRegularizer.get_config(self)
keras.regularizers.WeightRegularizer.set_param(self,p)
keras.regularizers.activity_l1(l=0.01)
keras.regularizers.activity_l1l2(l1=0.01,l2=0.01)
keras.regularizers.activity_l2(l=0.01)
keras.regularizers.get(identifier,kwargs=None)
keras.regularizers.l1(l=0.01)
keras.regularizers.l1l2(l1=0.01,l2=0.01)
keras.regularizers.l2(l=0.01)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/models.py----------------------------------------
A:keras.models.y->K.placeholder(ndim=K.ndim(y_train))
A:keras.models.batch_count->int(len(index_array) / batch_size)
A:keras.models.index_array->numpy.arange(nb_sample)
A:keras.models.nb_batch->int(np.ceil(size / float(batch_size)))
A:keras.models.start->start.tolist().tolist()
A:keras.models.score_array->K.mean(score_array, axis=-1)
A:keras.models.ndim->K.ndim(score_array)
A:keras.models.y_classes->numpy.reshape(y, y.shape[0])
A:keras.models.weights->self.get_weights()
A:keras.models.config->self.get_config()
A:keras.models.model_name->self.get_config().get('name')
A:keras.models.model->container_from_config(config, custom_objects=custom_objects)
A:keras.models.loss->self.get_config().get('loss')
A:keras.models.class_mode->self.get_config().get('class_mode')
A:keras.models.optimizer_params->dict([(k, v) for (k, v) in config.get('optimizer').items()])
A:keras.models.optimizer_name->dict([(k, v) for (k, v) in config.get('optimizer').items()]).pop('name')
A:keras.models.optimizer->optimizers.get(optimizer_name, optimizer_params)
A:keras.models.nb_train_sample->len(ins[0])
A:keras.models.history->cbks.History()
A:keras.models.callbacks->cbks.CallbackList(callbacks)
A:keras.models.batches->make_batches(nb_sample, batch_size)
A:keras.models.ins_batch->slice_X(ins, batch_ids)
A:keras.models.batch_logs['size']->len(batch_ids)
A:keras.models.outs->self.train_on_batch(data, sample_weight=sample_weight, class_weight=class_weight)
A:keras.models.val_outs->self.evaluate(data, sample_weight=sample_weight, verbose=0)
A:keras.models.nb_sample->len(ins[0])
A:keras.models.progbar->Progbar(target=nb_sample)
A:keras.models.batch_outs->f(ins_batch)
A:keras.models.config[p]->getattr(self, p)
A:keras.models.config['optimizer']->self.optimizer.get_config()
A:keras.models.config['loss']->get_function_name(self.loss)
A:keras.models.pp->pprint.PrettyPrinter(indent=4)
A:keras.models.self.optimizer->optimizers.get(optimizer)
A:keras.models.self.loss->objectives.get(loss)
A:keras.models.weighted_loss->weighted_objective(objectives.get(loss_fn))
A:keras.models.self.X_train->self.get_input(train=True)
A:keras.models.self.X_test->self.get_input(train=False)
A:keras.models.self.y_train->self.get_output(train=True)
A:keras.models.self.y_test->self.get_output(train=False)
A:keras.models.self.y->K.placeholder(ndim=K.ndim(self.y_train))
A:keras.models.self.weights->K.placeholder(ndim=1)
A:keras.models.mask->output.get_output_mask()
A:keras.models.train_loss->r(train_loss)
A:keras.models.test_loss->weighted_loss(self.y, self.y_test, self.weights, mask)
A:keras.models.train_accuracy->K.mean(K.equal(self.y, K.round(self.y_train)))
A:keras.models.test_accuracy->K.mean(K.equal(self.y, K.round(self.y_test)))
A:keras.models.updates->self.optimizer.get_updates(self.params, self.constraints, train_loss)
A:keras.models.self._train->K.function(train_ins, [train_loss], updates=updates)
A:keras.models.self._train_with_acc->K.function(train_ins, [train_loss, train_accuracy], updates=updates)
A:keras.models.self._predict->K.function(inputs=ins, outputs=ys_test, updates=self.state_updates)
A:keras.models.self._test->K.function(test_ins, [test_loss])
A:keras.models.self._test_with_acc->K.function(test_ins, [test_loss, test_accuracy])
A:keras.models.X->standardize_X(X)
A:keras.models.X_val->standardize_X(X_val)
A:keras.models.y_val->standardize_y(y_val)
A:keras.models.sample_weight_val->standardize_weights(y_val)
A:keras.models.split_at->int(len(X[0]) * (1 - validation_split))
A:keras.models.sample_weight->standardize_weights(y, sample_weight=sample_weight)
A:keras.models.preds->self.predict(X, batch_size, verbose)
A:keras.models.proba->self.predict(X, batch_size=batch_size, verbose=verbose)
A:keras.models.ins->standardize_X(X)
A:keras.models.overwrite->get_input('Enter "y" (overwrite) or "n" (cancel).')
A:keras.models.f->h5py.File(filepath)
A:keras.models.f.attrs['nb_layers']->len(self.layers)
A:keras.models.g->h5py.File(filepath).create_group('graph')
A:keras.models.g.attrs['nb_params']->len(weights)
A:keras.models.param_name->'param_{}'.format(n)
A:keras.models.param_dset->h5py.File(filepath).create_group('graph').create_dataset(param_name, param.shape, dtype=param.dtype)
A:keras.models.do_validation->bool(validation_data)
A:keras.models.generator_queue->Queue.Queue()
A:keras.models._stop->threading.Event()
A:keras.models.generator_output->Queue.Queue().get()
A:keras.models.(X, y, sample_weight)->input_validation(validation_data)
A:keras.models.batch_size->len(data[list(data.keys())[0]])
A:keras.models.y_train->output.get_output(True)
A:keras.models.y_test->output.get_output(False)
A:keras.models.weight->K.placeholder(ndim=1)
A:keras.models.(data, sample_weight)->input_validation(validation_data)
keras.models.Graph(Model,containers.Graph)
keras.models.Graph.compile(self,optimizer,loss)
keras.models.Graph.evaluate(self,data,batch_size=128,verbose=0,sample_weight={})
keras.models.Graph.fit(self,data,batch_size=128,nb_epoch=100,verbose=1,callbacks=[],validation_split=0.0,validation_data=None,shuffle=True,class_weight={},sample_weight={})
keras.models.Graph.fit_generator(self,generator,samples_per_epoch,nb_epoch,verbose=1,callbacks=[],validation_data=None,class_weight={},nb_worker=1)
keras.models.Graph.load_weights(self,filepath)
keras.models.Graph.predict(self,data,batch_size=128,verbose=0)
keras.models.Graph.predict_on_batch(self,data)
keras.models.Graph.save_weights(self,filepath,overwrite=False)
keras.models.Graph.test_on_batch(self,data,sample_weight={})
keras.models.Graph.train_on_batch(self,data,class_weight={},sample_weight={})
keras.models.Model(object)
keras.models.Model._fit(self,f,ins,out_labels=[],batch_size=128,nb_epoch=100,verbose=1,callbacks=[],val_f=None,val_ins=None,shuffle=True,metrics=[])
keras.models.Model._predict_loop(self,f,ins,batch_size=128,verbose=0)
keras.models.Model._test_loop(self,f,ins,batch_size=128,verbose=0)
keras.models.Model.get_config(self,verbose=0)
keras.models.Model.summary(self)
keras.models.Model.to_json(self,**kwargs)
keras.models.Model.to_yaml(self,**kwargs)
keras.models.Sequential(Model,containers.Sequential)
keras.models.Sequential.compile(self,optimizer,loss,class_mode='categorical')
keras.models.Sequential.evaluate(self,X,y,batch_size=128,show_accuracy=False,verbose=1,sample_weight=None)
keras.models.Sequential.fit(self,X,y,batch_size=128,nb_epoch=100,verbose=1,callbacks=[],validation_split=0.0,validation_data=None,shuffle=True,show_accuracy=False,class_weight=None,sample_weight=None)
keras.models.Sequential.fit_generator(self,generator,samples_per_epoch,nb_epoch,verbose=1,show_accuracy=False,callbacks=[],validation_data=None,class_weight=None,nb_worker=1)
keras.models.Sequential.load_weights(self,filepath)
keras.models.Sequential.predict(self,X,batch_size=128,verbose=0)
keras.models.Sequential.predict_classes(self,X,batch_size=128,verbose=1)
keras.models.Sequential.predict_on_batch(self,X)
keras.models.Sequential.predict_proba(self,X,batch_size=128,verbose=1)
keras.models.Sequential.save_weights(self,filepath,overwrite=False)
keras.models.Sequential.test_on_batch(self,X,y,accuracy=False,sample_weight=None)
keras.models.Sequential.train_on_batch(self,X,y,accuracy=False,class_weight=None,sample_weight=None)
keras.models.batch_shuffle(index_array,batch_size)
keras.models.get_function_name(o)
keras.models.make_batches(size,batch_size)
keras.models.model_from_config(config,custom_objects={})
keras.models.model_from_json(json_string,custom_objects={})
keras.models.model_from_yaml(yaml_string,custom_objects={})
keras.models.slice_X(X,start=None,stop=None)
keras.models.standardize_X(X)
keras.models.standardize_weights(y,sample_weight=None,class_weight=None)
keras.models.standardize_y(y)
keras.models.weighted_objective(fn)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/callbacks.py----------------------------------------
A:keras.callbacks.self._delta_ts_batch_begin->deque([], maxlen=self.queue_length)
A:keras.callbacks.self._delta_ts_batch_end->deque([], maxlen=self.queue_length)
A:keras.callbacks.t_before_callbacks->time.time()
A:keras.callbacks.delta_t_median->numpy.median(self._delta_ts_batch_end)
A:keras.callbacks.self._t_enter_batch->time.time()
A:keras.callbacks.self.progbar->Progbar(target=self.params['nb_sample'], verbose=self.verbose)
A:keras.callbacks.batch_size->logs.get('size', 0)
A:keras.callbacks.filepath->self.filepath.format(epoch=epoch, **logs)
A:keras.callbacks.current->logs.get(self.monitor)
A:keras.callbacks.lr->self.schedule(epoch)
A:keras.callbacks.self.sess->keras.backend.tensorflow_backend._get_session()
A:keras.callbacks.self.merged->tensorflow.merge_all_summaries()
A:keras.callbacks.self.writer->tensorflow.train.SummaryWriter(self.log_dir, self.sess.graph_def)
A:keras.callbacks.feed_dict->dict(zip(names, self.model.validation_data))
A:keras.callbacks.result->self.sess.run([self.merged], feed_dict=feed_dict)
A:keras.callbacks.summary->tensorflow.Summary()
A:keras.callbacks.summary_value->tensorflow.Summary().value.add()
keras.callbacks.BaseLogger(Callback)
keras.callbacks.BaseLogger.on_batch_begin(self,batch,logs={})
keras.callbacks.BaseLogger.on_batch_end(self,batch,logs={})
keras.callbacks.BaseLogger.on_epoch_begin(self,epoch,logs={})
keras.callbacks.BaseLogger.on_epoch_end(self,epoch,logs={})
keras.callbacks.BaseLogger.on_train_begin(self,logs={})
keras.callbacks.Callback(self)
keras.callbacks.Callback.__init__(self)
keras.callbacks.Callback._set_model(self,model)
keras.callbacks.Callback._set_params(self,params)
keras.callbacks.Callback.on_batch_begin(self,batch,logs={})
keras.callbacks.Callback.on_batch_end(self,batch,logs={})
keras.callbacks.Callback.on_epoch_begin(self,epoch,logs={})
keras.callbacks.Callback.on_epoch_end(self,epoch,logs={})
keras.callbacks.Callback.on_train_begin(self,logs={})
keras.callbacks.Callback.on_train_end(self,logs={})
keras.callbacks.CallbackList(self,callbacks=[],queue_length=10)
keras.callbacks.CallbackList.__init__(self,callbacks=[],queue_length=10)
keras.callbacks.CallbackList._set_model(self,model)
keras.callbacks.CallbackList._set_params(self,params)
keras.callbacks.CallbackList.append(self,callback)
keras.callbacks.CallbackList.on_batch_begin(self,batch,logs={})
keras.callbacks.CallbackList.on_batch_end(self,batch,logs={})
keras.callbacks.CallbackList.on_epoch_begin(self,epoch,logs={})
keras.callbacks.CallbackList.on_epoch_end(self,epoch,logs={})
keras.callbacks.CallbackList.on_train_begin(self,logs={})
keras.callbacks.CallbackList.on_train_end(self,logs={})
keras.callbacks.EarlyStopping(self,monitor='val_loss',patience=0,verbose=0,mode='auto')
keras.callbacks.EarlyStopping.__init__(self,monitor='val_loss',patience=0,verbose=0,mode='auto')
keras.callbacks.EarlyStopping.on_epoch_end(self,epoch,logs={})
keras.callbacks.History(Callback)
keras.callbacks.History.on_batch_end(self,batch,logs={})
keras.callbacks.History.on_epoch_begin(self,epoch,logs={})
keras.callbacks.History.on_epoch_end(self,epoch,logs={})
keras.callbacks.History.on_train_begin(self,logs={})
keras.callbacks.LearningRateScheduler(self,schedule)
keras.callbacks.LearningRateScheduler.__init__(self,schedule)
keras.callbacks.LearningRateScheduler.on_epoch_begin(self,epoch,logs={})
keras.callbacks.ModelCheckpoint(self,filepath,monitor='val_loss',verbose=0,save_best_only=False,mode='auto')
keras.callbacks.ModelCheckpoint.__init__(self,filepath,monitor='val_loss',verbose=0,save_best_only=False,mode='auto')
keras.callbacks.ModelCheckpoint.on_epoch_end(self,epoch,logs={})
keras.callbacks.RemoteMonitor(self,root='http://localhost:9000')
keras.callbacks.RemoteMonitor.__init__(self,root='http://localhost:9000')
keras.callbacks.RemoteMonitor.on_batch_end(self,batch,logs={})
keras.callbacks.RemoteMonitor.on_epoch_begin(self,epoch,logs={})
keras.callbacks.RemoteMonitor.on_epoch_end(self,epoch,logs={})
keras.callbacks.TensorBoard(self,log_dir='./logs',histogram_freq=0)
keras.callbacks.TensorBoard.__init__(self,log_dir='./logs',histogram_freq=0)
keras.callbacks.TensorBoard._set_model(self,model)
keras.callbacks.TensorBoard.on_batch_end(self,batch,logs={})
keras.callbacks.TensorBoard.on_epoch_begin(self,epoch,logs={})
keras.callbacks.TensorBoard.on_epoch_end(self,epoch,logs={})


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/activations.py----------------------------------------
A:keras.activations.ndim->K.ndim(x)
A:keras.activations.(last_output, outputs, states)->K.rnn(step, x, [], masking=False)
keras.activations.get(identifier)
keras.activations.hard_sigmoid(x)
keras.activations.linear(x)
keras.activations.relu(x,alpha=0.0,max_value=None)
keras.activations.sigmoid(x)
keras.activations.softmax(x)
keras.activations.softplus(x)
keras.activations.tanh(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/objectives.py----------------------------------------
A:keras.objectives.diff->K.abs((y_true - y_pred) / K.clip(K.abs(y_true), K.epsilon(), np.inf))
A:keras.objectives.first_log->K.log(K.clip(y_pred, K.epsilon(), np.inf) + 1.0)
A:keras.objectives.second_log->K.log(K.clip(y_true, K.epsilon(), np.inf) + 1.0)
keras.objectives.binary_crossentropy(y_true,y_pred)
keras.objectives.categorical_crossentropy(y_true,y_pred)
keras.objectives.get(identifier)
keras.objectives.hinge(y_true,y_pred)
keras.objectives.mean_absolute_error(y_true,y_pred)
keras.objectives.mean_absolute_percentage_error(y_true,y_pred)
keras.objectives.mean_squared_error(y_true,y_pred)
keras.objectives.mean_squared_logarithmic_error(y_true,y_pred)
keras.objectives.poisson_loss(y_true,y_pred)
keras.objectives.root_mean_squared_error(y_true,y_pred)
keras.objectives.squared_hinge(y_true,y_pred)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/initializations.py----------------------------------------
A:keras.initializations.(fan_in, fan_out)->get_fans(shape)
A:keras.initializations.scale->numpy.sqrt(3.0 / fan_in)
A:keras.initializations.s->numpy.sqrt(6.0 / fan_in)
A:keras.initializations.a->numpy.random.normal(0.0, 1.0, flat_shape)
A:keras.initializations.(u, _, v)->numpy.linalg.svd(a, full_matrices=False)
A:keras.initializations.q->q.reshape(shape).reshape(shape)
keras.initializations.get(identifier)
keras.initializations.get_fans(shape)
keras.initializations.glorot_normal(shape)
keras.initializations.glorot_uniform(shape)
keras.initializations.he_normal(shape)
keras.initializations.he_uniform(shape)
keras.initializations.identity(shape,scale=1)
keras.initializations.lecun_uniform(shape)
keras.initializations.normal(shape,scale=0.05)
keras.initializations.one(shape)
keras.initializations.orthogonal(shape,scale=1.1)
keras.initializations.uniform(shape,scale=0.05)
keras.initializations.zero(shape)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/constraints.py----------------------------------------
A:keras.constraints.norms->K.sqrt(K.sum(K.square(p), axis=0))
A:keras.constraints.desired->K.clip(norms, 0, self.m)
keras.constraints.Constraint(self,p)
keras.constraints.Constraint.__call__(self,p)
keras.constraints.Constraint.get_config(self)
keras.constraints.MaxNorm(self,m=2)
keras.constraints.MaxNorm.__init__(self,m=2)
keras.constraints.MaxNorm.get_config(self)
keras.constraints.NonNeg(self,p)
keras.constraints.NonNeg.__call__(self,p)
keras.constraints.UnitNorm(self,p)
keras.constraints.UnitNorm.__call__(self,p)
keras.constraints.get(identifier,kwargs=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/preprocessing/image.py----------------------------------------
A:keras.preprocessing.image.angle->random.uniform(-rg, rg)
A:keras.preprocessing.image.x->vertical_flip(x)
A:keras.preprocessing.image.crop->random.uniform(0.0, hrg)
A:keras.preprocessing.image.split->random.uniform(0, 1)
A:keras.preprocessing.image.crop_left_pixels->int(split * crop * x.shape[1])
A:keras.preprocessing.image.crop_right_pixels->int((1 - split) * crop * x.shape[1])
A:keras.preprocessing.image.crop_top_pixels->int(split * crop * x.shape[2])
A:keras.preprocessing.image.crop_bottom_pixels->int((1 - split) * crop * x.shape[2])
A:keras.preprocessing.image.x[i]->numpy.flipud(x[i])
A:keras.preprocessing.image.zoom_w->random.uniform(1.0 - rg, 1.0)
A:keras.preprocessing.image.zoom_h->random.uniform(1.0 - rg, 1.0)
A:keras.preprocessing.image.img->self.random_transform(img)
A:keras.preprocessing.image.seed->random.randint(1, 10000000.0)
A:keras.preprocessing.image.nb_batch->int(math.ceil(float(X.shape[0]) / batch_size))
A:keras.preprocessing.image.bX->numpy.zeros(tuple([nb_samples] + list(X.shape)[1:]))
A:keras.preprocessing.image.flatx->numpy.reshape(x, x.shape[0] * x.shape[1] * x.shape[2])
A:keras.preprocessing.image.whitex->numpy.dot(flatx, self.principal_components)
A:keras.preprocessing.image.X->numpy.copy(X)
A:keras.preprocessing.image.aX->numpy.zeros(tuple([rounds * X.shape[0]] + list(X.shape)[1:]))
A:keras.preprocessing.image.aX[i + r * X.shape[0]]->img_to_array(img)
A:keras.preprocessing.image.self.mean->numpy.mean(X, axis=0)
A:keras.preprocessing.image.self.std->numpy.std(X, axis=0)
A:keras.preprocessing.image.flatX->numpy.reshape(X, (X.shape[0], X.shape[1] * X.shape[2] * X.shape[3]))
A:keras.preprocessing.image.(U, S, V)->scipy.linalg.svd(sigma)
A:keras.preprocessing.image.self.principal_components->numpy.dot(np.dot(U, np.diag(1.0 / np.sqrt(S + fudge))), U.T)
keras.preprocessing.image.ImageDataGenerator(self,featurewise_center=True,samplewise_center=False,featurewise_std_normalization=True,samplewise_std_normalization=False,zca_whitening=False,rotation_range=0.0,width_shift_range=0.0,height_shift_range=0.0,horizontal_flip=False,vertical_flip=False)
keras.preprocessing.image.ImageDataGenerator.__init__(self,featurewise_center=True,samplewise_center=False,featurewise_std_normalization=True,samplewise_std_normalization=False,zca_whitening=False,rotation_range=0.0,width_shift_range=0.0,height_shift_range=0.0,horizontal_flip=False,vertical_flip=False)
keras.preprocessing.image.ImageDataGenerator.fit(self,X,augment=False,rounds=1,seed=None)
keras.preprocessing.image.ImageDataGenerator.flow(self,X,y,batch_size=32,shuffle=False,seed=None,save_to_dir=None,save_prefix='',save_format='jpeg')
keras.preprocessing.image.ImageDataGenerator.random_transform(self,x)
keras.preprocessing.image.ImageDataGenerator.standardize(self,x)
keras.preprocessing.image.array_to_img(x,scale=True)
keras.preprocessing.image.horizontal_flip(x)
keras.preprocessing.image.img_to_array(img)
keras.preprocessing.image.list_pictures(directory,ext='jpg|jpeg|bmp|png')
keras.preprocessing.image.load_img(path,grayscale=False)
keras.preprocessing.image.random_barrel_transform(x,intensity)
keras.preprocessing.image.random_channel_shift(x,rg)
keras.preprocessing.image.random_rotation(x,rg,fill_mode='nearest',cval=0.0)
keras.preprocessing.image.random_shear(x,intensity)
keras.preprocessing.image.random_shift(x,wrg,hrg,fill_mode='nearest',cval=0.0)
keras.preprocessing.image.random_zoom(x,rg,fill_mode='nearest',cval=0.0)
keras.preprocessing.image.vertical_flip(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/preprocessing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/preprocessing/text.py----------------------------------------
A:keras.preprocessing.text.f->f.replace("'", '').replace("'", '')
A:keras.preprocessing.text.text->text.translate(maketrans(filters, split * len(filters))).translate(maketrans(filters, split * len(filters)))
A:keras.preprocessing.text.seq->text_to_word_sequence(text, self.filters, self.lower, self.split)
A:keras.preprocessing.text.wcounts->list(self.word_counts.items())
A:keras.preprocessing.text.self.word_index->dict(list(zip(sorted_voc, list(range(1, len(sorted_voc) + 1)))))
A:keras.preprocessing.text.self.document_count->len(sequences)
A:keras.preprocessing.text.i->self.word_index.get(w)
A:keras.preprocessing.text.sequences->self.texts_to_sequences(texts)
A:keras.preprocessing.text.X->numpy.zeros((len(sequences), nb_words))
A:keras.preprocessing.text.tf->numpy.log(c / len(seq))
keras.preprocessing.text.Tokenizer(self,nb_words=None,filters=base_filter(),lower=True,split='')
keras.preprocessing.text.Tokenizer.__init__(self,nb_words=None,filters=base_filter(),lower=True,split='')
keras.preprocessing.text.Tokenizer.fit_on_sequences(self,sequences)
keras.preprocessing.text.Tokenizer.fit_on_texts(self,texts)
keras.preprocessing.text.Tokenizer.sequences_to_matrix(self,sequences,mode='binary')
keras.preprocessing.text.Tokenizer.texts_to_matrix(self,texts,mode='binary')
keras.preprocessing.text.Tokenizer.texts_to_sequences(self,texts)
keras.preprocessing.text.Tokenizer.texts_to_sequences_generator(self,texts)
keras.preprocessing.text.base_filter()
keras.preprocessing.text.one_hot(text,n,filters=base_filter(),lower=True,split='')
keras.preprocessing.text.text_to_word_sequence(text,filters=base_filter(),lower=True,split='')


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/preprocessing/sequence.py----------------------------------------
A:keras.preprocessing.sequence.nb_samples->len(sequences)
A:keras.preprocessing.sequence.maxlen->numpy.max(lengths)
A:keras.preprocessing.sequence.x->(np.ones((nb_samples, maxlen)) * value).astype(dtype)
A:keras.preprocessing.sequence.rank->numpy.array(list(range(size)))
A:keras.preprocessing.sequence.window_start->max(0, i - window_size)
A:keras.preprocessing.sequence.window_end->min(len(sequence), i + window_size + 1)
A:keras.preprocessing.sequence.nb_negative_samples->int(len(labels) * negative_samples)
A:keras.preprocessing.sequence.seed->random.randint(0, 10000000.0)
keras.preprocessing.sequence.make_sampling_table(size,sampling_factor=1e-05)
keras.preprocessing.sequence.pad_sequences(sequences,maxlen=None,dtype='int32',padding='pre',truncating='pre',value=0.0)
keras.preprocessing.sequence.skipgrams(sequence,vocabulary_size,window_size=4,negative_samples=1.0,shuffle=True,categorical=False,sampling_table=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/datasets/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/datasets/cifar.py----------------------------------------
A:keras.datasets.cifar.f->open(fpath, 'rb')
A:keras.datasets.cifar.d->six.moves.cPickle.load(f, encoding='bytes')
A:keras.datasets.cifar.data->data.reshape(data.shape[0], 3, 32, 32).reshape(data.shape[0], 3, 32, 32)
keras.datasets.cifar.load_batch(fpath,label_key='labels')


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/datasets/reuters.py----------------------------------------
A:keras.datasets.reuters.path->get_file(path, origin='https://s3.amazonaws.com/text-datasets/reuters_word_index.pkl')
A:keras.datasets.reuters.f->open(path, 'rb')
A:keras.datasets.reuters.(X, labels)->six.moves.cPickle.load(f)
A:keras.datasets.reuters.nb_words->max([max(x) for x in X])
keras.datasets.reuters.get_word_index(path='reuters_word_index.pkl')
keras.datasets.reuters.load_data(path='reuters.pkl',nb_words=None,skip_top=0,maxlen=None,test_split=0.2,seed=113,start_char=1,oov_char=2,index_from=3)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/datasets/data_utils.py----------------------------------------
A:keras.datasets.data_utils.datadir_base->os.path.join('/tmp', '.keras')
A:keras.datasets.data_utils.datadir->os.path.join(datadir_base, 'datasets')
A:keras.datasets.data_utils.untar_fpath->os.path.join(datadir, fname)
A:keras.datasets.data_utils.fpath->os.path.join(datadir, fname)
A:keras.datasets.data_utils.progbar->Progbar(total_size)
A:keras.datasets.data_utils.tfile->tarfile.open(fpath, 'r:gz')
keras.datasets.data_utils.ParanoidURLopener(FancyURLopener)
keras.datasets.data_utils.ParanoidURLopener.http_error_default(self,url,fp,errcode,errmsg,headers)
keras.datasets.data_utils.get_file(fname,origin,untar=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/datasets/cifar100.py----------------------------------------
A:keras.datasets.cifar100.path->get_file(dirname, origin=origin, untar=True)
A:keras.datasets.cifar100.fpath->os.path.join(path, 'test')
A:keras.datasets.cifar100.(X_train, y_train)->load_batch(fpath, label_key=label_mode + '_labels')
A:keras.datasets.cifar100.(X_test, y_test)->load_batch(fpath, label_key=label_mode + '_labels')
A:keras.datasets.cifar100.y_train->numpy.reshape(y_train, (len(y_train), 1))
A:keras.datasets.cifar100.y_test->numpy.reshape(y_test, (len(y_test), 1))
keras.datasets.cifar100.load_data(label_mode='fine')


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/datasets/mnist.py----------------------------------------
A:keras.datasets.mnist.path->get_file(path, origin='https://s3.amazonaws.com/img-datasets/mnist.pkl.gz')
A:keras.datasets.mnist.f->open(path, 'rb')
A:keras.datasets.mnist.data->six.moves.cPickle.load(f, encoding='bytes')
keras.datasets.mnist.load_data(path='mnist.pkl.gz')


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/datasets/imdb.py----------------------------------------
A:keras.datasets.imdb.path->get_file(path, origin='https://s3.amazonaws.com/text-datasets/imdb.pkl')
A:keras.datasets.imdb.f->open(path, 'rb')
A:keras.datasets.imdb.(X, labels)->six.moves.cPickle.load(f)
A:keras.datasets.imdb.nb_words->max([max(x) for x in X])
keras.datasets.imdb.load_data(path='imdb.pkl',nb_words=None,skip_top=0,maxlen=None,test_split=0.2,seed=113,start_char=1,oov_char=2,index_from=3)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/datasets/cifar10.py----------------------------------------
A:keras.datasets.cifar10.path->get_file(dirname, origin=origin, untar=True)
A:keras.datasets.cifar10.X_train->numpy.zeros((nb_train_samples, 3, 32, 32), dtype='uint8')
A:keras.datasets.cifar10.y_train->numpy.reshape(y_train, (len(y_train), 1))
A:keras.datasets.cifar10.fpath->os.path.join(path, 'test_batch')
A:keras.datasets.cifar10.(data, labels)->load_batch(fpath)
A:keras.datasets.cifar10.(X_test, y_test)->load_batch(fpath)
A:keras.datasets.cifar10.y_test->numpy.reshape(y_test, (len(y_test), 1))
keras.datasets.cifar10.load_data()


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/backend/__init__.py----------------------------------------
A:keras.backend.__init__._keras_base_dir->os.path.expanduser('~')
A:keras.backend.__init__._keras_dir->os.path.join(_keras_base_dir, '.keras')
A:keras.backend.__init__._config_path->os.path.expanduser(os.path.join(_keras_dir, 'keras.json'))
A:keras.backend.__init__._config->json.load(open(_config_path))
A:keras.backend.__init__._floatx->json.load(open(_config_path)).get('floatx', floatx())
A:keras.backend.__init__._epsilon->json.load(open(_config_path)).get('epsilon', epsilon())
A:keras.backend.__init__._backend->json.load(open(_config_path)).get('backend', _BACKEND)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py----------------------------------------
A:keras.backend.tensorflow_backend._SESSION->tensorflow.Session('')
A:keras.backend.tensorflow_backend.v->tensorflow.Variable(np.asarray(value, dtype=dtype), name=name)
A:keras.backend.tensorflow_backend.shape->tensorflow.cast(x, 'float64').get_shape()
A:keras.backend.tensorflow_backend.x->tensorflow.cast(x, 'float64')
A:keras.backend.tensorflow_backend.m->tensorflow.reduce_mean(x, reduction_indices=axis, keep_dims=keepdims)
A:keras.backend.tensorflow_backend.devs_squared->tensorflow.square(x - m)
A:keras.backend.tensorflow_backend.x_shape->tensorflow.cast(x, 'float64').get_shape().as_list()
A:keras.backend.tensorflow_backend.splits->tensorflow.split(axis, x_shape[axis], x)
A:keras.backend.tensorflow_backend.stacked->tensorflow.pack(tensors)
A:keras.backend.tensorflow_backend.self.inputs->list(inputs)
A:keras.backend.tensorflow_backend.self.outputs->list(outputs)
A:keras.backend.tensorflow_backend.feed_dict->dict(zip(names, inputs))
A:keras.backend.tensorflow_backend.session->_get_session()
A:keras.backend.tensorflow_backend.updated->_get_session().run(self.outputs + self.updates, feed_dict=feed_dict)
A:keras.backend.tensorflow_backend.inputs->tensorflow.transpose(inputs, (1, 0, 2))
A:keras.backend.tensorflow_backend.input_list->tensorflow.unpack(inputs)
A:keras.backend.tensorflow_backend.(output, new_states)->step_function(input, states)
A:keras.backend.tensorflow_backend.switch->tensorflow.reduce_any(input)
A:keras.backend.tensorflow_backend.output->tensorflow.log(output / (1 - output))
A:keras.backend.tensorflow_backend.outputs->tensorflow.transpose(outputs, (1, 0, 2))
A:keras.backend.tensorflow_backend.negative_part->tensorflow.nn.relu(-x)
A:keras.backend.tensorflow_backend.seed->numpy.random.randint(10000000.0)
A:keras.backend.tensorflow_backend.kernel->tensorflow.transpose(kernel, (2, 3, 1, 0))
keras.backend.Function(self,inputs,outputs,updates=[])
keras.backend._get_session()
keras.backend._set_session(session)
keras.backend.abs(x)
keras.backend.any(x,axis=None,keepdims=False)
keras.backend.argmax(x,axis=-1)
keras.backend.argmin(x,axis=-1)
keras.backend.binary_crossentropy(output,target,from_logits=False)
keras.backend.cast(x,dtype)
keras.backend.categorical_crossentropy(output,target,from_logits=False)
keras.backend.clip(x,min_value,max_value)
keras.backend.concatenate(tensors,axis=-1)
keras.backend.conv2d(x,kernel,strides=(1,1),border_mode='valid',dim_ordering='th',image_shape=None,filter_shape=None)
keras.backend.count_params(x)
keras.backend.dot(x,y)
keras.backend.dropout(x,level,seed=None)
keras.backend.equal(x,y)
keras.backend.eval(x)
keras.backend.exp(x)
keras.backend.expand_dims(x,dim=-1)
keras.backend.flatten(x)
keras.backend.function(inputs,outputs,updates=[])
keras.backend.gather(reference,indices)
keras.backend.get_value(x)
keras.backend.gradients(loss,variables)
keras.backend.hard_sigmoid(x)
keras.backend.log(x)
keras.backend.max(x,axis=None,keepdims=False)
keras.backend.maximum(x,y)
keras.backend.mean(x,axis=None,keepdims=False)
keras.backend.min(x,axis=None,keepdims=False)
keras.backend.minimum(x,y)
keras.backend.ndim(x)
keras.backend.ones(shape,dtype=_FLOATX,name=None)
keras.backend.ones_like(x,name=None)
keras.backend.permute_dimensions(x,pattern)
keras.backend.placeholder(shape=None,ndim=None,dtype=_FLOATX,name=None)
keras.backend.pool2d(x,pool_size,strides=(1,1),border_mode='valid',dim_ordering='th',pool_mode='max')
keras.backend.pow(x,a)
keras.backend.prod(x,axis=None,keepdims=False)
keras.backend.random_normal(shape,mean=0.0,std=1.0,dtype=_FLOATX,seed=None)
keras.backend.random_uniform(shape,low=0.0,high=1.0,dtype=_FLOATX,seed=None)
keras.backend.relu(x,alpha=0.0,max_value=None)
keras.backend.repeat(x,n)
keras.backend.repeat_elements(x,rep,axis)
keras.backend.reshape(x,shape)
keras.backend.rnn(step_function,inputs,initial_states,go_backwards=False,masking=True)
keras.backend.round(x)
keras.backend.set_value(x,value)
keras.backend.shape(x)
keras.backend.sigmoid(x)
keras.backend.softmax(x)
keras.backend.softplus(x)
keras.backend.spatial_2d_padding(x,padding=(1,1),dim_ordering='th')
keras.backend.sqrt(x)
keras.backend.square(x)
keras.backend.squeeze(x,axis)
keras.backend.std(x,axis=None,keepdims=False)
keras.backend.sum(x,axis=None,keepdims=False)
keras.backend.switch(condition,then_expression,else_expression)
keras.backend.tanh(x)
keras.backend.temporal_padding(x,padding=1)
keras.backend.tensorflow_backend.Function(self,inputs,outputs,updates=[])
keras.backend.tensorflow_backend.Function.__init__(self,inputs,outputs,updates=[])
keras.backend.tensorflow_backend._get_session()
keras.backend.tensorflow_backend._set_session(session)
keras.backend.tensorflow_backend.abs(x)
keras.backend.tensorflow_backend.any(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.argmax(x,axis=-1)
keras.backend.tensorflow_backend.argmin(x,axis=-1)
keras.backend.tensorflow_backend.binary_crossentropy(output,target,from_logits=False)
keras.backend.tensorflow_backend.cast(x,dtype)
keras.backend.tensorflow_backend.categorical_crossentropy(output,target,from_logits=False)
keras.backend.tensorflow_backend.clip(x,min_value,max_value)
keras.backend.tensorflow_backend.concatenate(tensors,axis=-1)
keras.backend.tensorflow_backend.conv2d(x,kernel,strides=(1,1),border_mode='valid',dim_ordering='th',image_shape=None,filter_shape=None)
keras.backend.tensorflow_backend.count_params(x)
keras.backend.tensorflow_backend.dot(x,y)
keras.backend.tensorflow_backend.dropout(x,level,seed=None)
keras.backend.tensorflow_backend.equal(x,y)
keras.backend.tensorflow_backend.eval(x)
keras.backend.tensorflow_backend.exp(x)
keras.backend.tensorflow_backend.expand_dims(x,dim=-1)
keras.backend.tensorflow_backend.flatten(x)
keras.backend.tensorflow_backend.function(inputs,outputs,updates=[])
keras.backend.tensorflow_backend.gather(reference,indices)
keras.backend.tensorflow_backend.get_value(x)
keras.backend.tensorflow_backend.gradients(loss,variables)
keras.backend.tensorflow_backend.hard_sigmoid(x)
keras.backend.tensorflow_backend.log(x)
keras.backend.tensorflow_backend.max(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.maximum(x,y)
keras.backend.tensorflow_backend.mean(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.min(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.minimum(x,y)
keras.backend.tensorflow_backend.ndim(x)
keras.backend.tensorflow_backend.ones(shape,dtype=_FLOATX,name=None)
keras.backend.tensorflow_backend.ones_like(x,name=None)
keras.backend.tensorflow_backend.permute_dimensions(x,pattern)
keras.backend.tensorflow_backend.placeholder(shape=None,ndim=None,dtype=_FLOATX,name=None)
keras.backend.tensorflow_backend.pool2d(x,pool_size,strides=(1,1),border_mode='valid',dim_ordering='th',pool_mode='max')
keras.backend.tensorflow_backend.pow(x,a)
keras.backend.tensorflow_backend.prod(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.random_normal(shape,mean=0.0,std=1.0,dtype=_FLOATX,seed=None)
keras.backend.tensorflow_backend.random_uniform(shape,low=0.0,high=1.0,dtype=_FLOATX,seed=None)
keras.backend.tensorflow_backend.relu(x,alpha=0.0,max_value=None)
keras.backend.tensorflow_backend.repeat(x,n)
keras.backend.tensorflow_backend.repeat_elements(x,rep,axis)
keras.backend.tensorflow_backend.reshape(x,shape)
keras.backend.tensorflow_backend.rnn(step_function,inputs,initial_states,go_backwards=False,masking=True)
keras.backend.tensorflow_backend.round(x)
keras.backend.tensorflow_backend.set_value(x,value)
keras.backend.tensorflow_backend.shape(x)
keras.backend.tensorflow_backend.sigmoid(x)
keras.backend.tensorflow_backend.softmax(x)
keras.backend.tensorflow_backend.softplus(x)
keras.backend.tensorflow_backend.spatial_2d_padding(x,padding=(1,1),dim_ordering='th')
keras.backend.tensorflow_backend.sqrt(x)
keras.backend.tensorflow_backend.square(x)
keras.backend.tensorflow_backend.squeeze(x,axis)
keras.backend.tensorflow_backend.std(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.sum(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.switch(condition,then_expression,else_expression)
keras.backend.tensorflow_backend.tanh(x)
keras.backend.tensorflow_backend.temporal_padding(x,padding=1)
keras.backend.tensorflow_backend.tile(x,n)
keras.backend.tensorflow_backend.transpose(x)
keras.backend.tensorflow_backend.variable(value,dtype=_FLOATX,name=None)
keras.backend.tensorflow_backend.zeros(shape,dtype=_FLOATX,name=None)
keras.backend.tensorflow_backend.zeros_like(x,name=None)
keras.backend.tile(x,n)
keras.backend.transpose(x)
keras.backend.variable(value,dtype=_FLOATX,name=None)
keras.backend.zeros(shape,dtype=_FLOATX,name=None)
keras.backend.zeros_like(x,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/backend/common.py----------------------------------------
A:keras.backend.common.floatx->str(floatx)
keras.backend.common.cast_to_floatx(x)
keras.backend.common.epsilon()
keras.backend.common.floatx()
keras.backend.common.set_epsilon(e)
keras.backend.common.set_floatx(floatx)
keras.backend.epsilon()
keras.backend.floatx()
keras.backend.set_epsilon(e)
keras.backend.set_floatx(floatx)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/backend/theano_backend.py----------------------------------------
A:keras.backend.theano_backend.value->numpy.asarray(value, dtype=dtype)
A:keras.backend.theano_backend.ndim->len(shape)
A:keras.backend.theano_backend.x->x.dimshuffle((0, 3, 1, 2)).dimshuffle((0, 3, 1, 2))
A:keras.backend.theano_backend.pattern->tuple(pattern)
A:keras.backend.theano_backend.stacked->theano.tensor.stack(*tensors)
A:keras.backend.theano_backend.output->theano.tensor.clip(output, _EPSILON, 1.0 - _EPSILON)
A:keras.backend.theano_backend.self.function->theano.function(inputs, outputs, updates=updates, allow_input_downcast=True, **kwargs)
A:keras.backend.theano_backend.inputs->inputs.dimshuffle((1, 0, 2)).dimshuffle((1, 0, 2))
A:keras.backend.theano_backend.(output, new_states)->step_function(input, states)
A:keras.backend.theano_backend.switch->theano.tensor.any(input, axis=-1, keepdims=True)
A:keras.backend.theano_backend.(results, _)->theano.scan(_step, sequences=inputs, outputs_info=[None] + initial_states, go_backwards=go_backwards)
A:keras.backend.theano_backend.outputs->outputs.dimshuffle((1, 0, 2)).dimshuffle((1, 0, 2))
A:keras.backend.theano_backend.seed->numpy.random.randint(10000000.0)
A:keras.backend.theano_backend.rng->RandomStreams(seed=seed)
A:keras.backend.theano_backend.kernel->kernel.dimshuffle((3, 2, 0, 1)).dimshuffle((3, 2, 0, 1))
A:keras.backend.theano_backend.conv_out->conv_out.dimshuffle((0, 2, 3, 1)).dimshuffle((0, 2, 3, 1))
A:keras.backend.theano_backend.pool_out->pool_out.dimshuffle((0, 2, 3, 1)).dimshuffle((0, 2, 3, 1))
keras.backend.Function(self,inputs,outputs,updates=[],**kwargs)
keras.backend._on_gpu()
keras.backend.abs(x)
keras.backend.any(x,axis=None,keepdims=False)
keras.backend.argmax(x,axis=-1)
keras.backend.argmin(x,axis=-1)
keras.backend.binary_crossentropy(output,target,from_logits=False)
keras.backend.cast(x,dtype)
keras.backend.categorical_crossentropy(output,target,from_logits=False)
keras.backend.clip(x,min_value,max_value)
keras.backend.concatenate(tensors,axis=-1)
keras.backend.conv2d(x,kernel,strides=(1,1),border_mode='valid',dim_ordering='th',image_shape=None,filter_shape=None)
keras.backend.count_params(x)
keras.backend.dot(x,y)
keras.backend.dropout(x,level,seed=None)
keras.backend.equal(x,y)
keras.backend.eval(x)
keras.backend.exp(x)
keras.backend.expand_dims(x,dim=-1)
keras.backend.flatten(x)
keras.backend.function(inputs,outputs,updates=[])
keras.backend.gather(reference,indices)
keras.backend.get_value(x)
keras.backend.gradients(loss,variables)
keras.backend.hard_sigmoid(x)
keras.backend.log(x)
keras.backend.max(x,axis=None,keepdims=False)
keras.backend.maximum(x,y)
keras.backend.mean(x,axis=None,keepdims=False)
keras.backend.min(x,axis=None,keepdims=False)
keras.backend.minimum(x,y)
keras.backend.ndim(x)
keras.backend.ones(shape,dtype=_FLOATX,name=None)
keras.backend.ones_like(x)
keras.backend.permute_dimensions(x,pattern)
keras.backend.placeholder(shape=None,ndim=None,dtype=_FLOATX,name=None)
keras.backend.pool2d(x,pool_size,strides=(1,1),border_mode='valid',dim_ordering='th',pool_mode='max')
keras.backend.pow(x,a)
keras.backend.prod(x,axis=None,keepdims=False)
keras.backend.random_normal(shape,mean=0.0,std=1.0,dtype=_FLOATX,seed=None)
keras.backend.random_uniform(shape,low=0.0,high=1.0,dtype=_FLOATX,seed=None)
keras.backend.relu(x,alpha=0.0,max_value=None)
keras.backend.repeat(x,n)
keras.backend.repeat_elements(x,rep,axis)
keras.backend.reshape(x,shape)
keras.backend.rnn(step_function,inputs,initial_states,go_backwards=False,masking=True)
keras.backend.round(x)
keras.backend.set_value(x,value)
keras.backend.shape(x)
keras.backend.sigmoid(x)
keras.backend.softmax(x)
keras.backend.softplus(x)
keras.backend.spatial_2d_padding(x,padding=(1,1),dim_ordering='th')
keras.backend.sqrt(x)
keras.backend.square(x)
keras.backend.squeeze(x,axis)
keras.backend.std(x,axis=None,keepdims=False)
keras.backend.sum(x,axis=None,keepdims=False)
keras.backend.switch(condition,then_expression,else_expression)
keras.backend.tanh(x)
keras.backend.temporal_padding(x,padding=1)
keras.backend.theano_backend.Function(self,inputs,outputs,updates=[],**kwargs)
keras.backend.theano_backend.Function.__init__(self,inputs,outputs,updates=[],**kwargs)
keras.backend.theano_backend._on_gpu()
keras.backend.theano_backend.abs(x)
keras.backend.theano_backend.any(x,axis=None,keepdims=False)
keras.backend.theano_backend.argmax(x,axis=-1)
keras.backend.theano_backend.argmin(x,axis=-1)
keras.backend.theano_backend.binary_crossentropy(output,target,from_logits=False)
keras.backend.theano_backend.cast(x,dtype)
keras.backend.theano_backend.categorical_crossentropy(output,target,from_logits=False)
keras.backend.theano_backend.clip(x,min_value,max_value)
keras.backend.theano_backend.concatenate(tensors,axis=-1)
keras.backend.theano_backend.conv2d(x,kernel,strides=(1,1),border_mode='valid',dim_ordering='th',image_shape=None,filter_shape=None)
keras.backend.theano_backend.count_params(x)
keras.backend.theano_backend.dot(x,y)
keras.backend.theano_backend.dropout(x,level,seed=None)
keras.backend.theano_backend.equal(x,y)
keras.backend.theano_backend.eval(x)
keras.backend.theano_backend.exp(x)
keras.backend.theano_backend.expand_dims(x,dim=-1)
keras.backend.theano_backend.flatten(x)
keras.backend.theano_backend.function(inputs,outputs,updates=[])
keras.backend.theano_backend.gather(reference,indices)
keras.backend.theano_backend.get_value(x)
keras.backend.theano_backend.gradients(loss,variables)
keras.backend.theano_backend.hard_sigmoid(x)
keras.backend.theano_backend.log(x)
keras.backend.theano_backend.max(x,axis=None,keepdims=False)
keras.backend.theano_backend.maximum(x,y)
keras.backend.theano_backend.mean(x,axis=None,keepdims=False)
keras.backend.theano_backend.min(x,axis=None,keepdims=False)
keras.backend.theano_backend.minimum(x,y)
keras.backend.theano_backend.ndim(x)
keras.backend.theano_backend.ones(shape,dtype=_FLOATX,name=None)
keras.backend.theano_backend.ones_like(x)
keras.backend.theano_backend.permute_dimensions(x,pattern)
keras.backend.theano_backend.placeholder(shape=None,ndim=None,dtype=_FLOATX,name=None)
keras.backend.theano_backend.pool2d(x,pool_size,strides=(1,1),border_mode='valid',dim_ordering='th',pool_mode='max')
keras.backend.theano_backend.pow(x,a)
keras.backend.theano_backend.prod(x,axis=None,keepdims=False)
keras.backend.theano_backend.random_normal(shape,mean=0.0,std=1.0,dtype=_FLOATX,seed=None)
keras.backend.theano_backend.random_uniform(shape,low=0.0,high=1.0,dtype=_FLOATX,seed=None)
keras.backend.theano_backend.relu(x,alpha=0.0,max_value=None)
keras.backend.theano_backend.repeat(x,n)
keras.backend.theano_backend.repeat_elements(x,rep,axis)
keras.backend.theano_backend.reshape(x,shape)
keras.backend.theano_backend.rnn(step_function,inputs,initial_states,go_backwards=False,masking=True)
keras.backend.theano_backend.round(x)
keras.backend.theano_backend.set_value(x,value)
keras.backend.theano_backend.shape(x)
keras.backend.theano_backend.sigmoid(x)
keras.backend.theano_backend.softmax(x)
keras.backend.theano_backend.softplus(x)
keras.backend.theano_backend.spatial_2d_padding(x,padding=(1,1),dim_ordering='th')
keras.backend.theano_backend.sqrt(x)
keras.backend.theano_backend.square(x)
keras.backend.theano_backend.squeeze(x,axis)
keras.backend.theano_backend.std(x,axis=None,keepdims=False)
keras.backend.theano_backend.sum(x,axis=None,keepdims=False)
keras.backend.theano_backend.switch(condition,then_expression,else_expression)
keras.backend.theano_backend.tanh(x)
keras.backend.theano_backend.temporal_padding(x,padding=1)
keras.backend.theano_backend.tile(x,n)
keras.backend.theano_backend.transpose(x)
keras.backend.theano_backend.variable(value,dtype=_FLOATX,name=None)
keras.backend.theano_backend.zeros(shape,dtype=_FLOATX,name=None)
keras.backend.theano_backend.zeros_like(x)
keras.backend.tile(x,n)
keras.backend.transpose(x)
keras.backend.variable(value,dtype=_FLOATX,name=None)
keras.backend.zeros(shape,dtype=_FLOATX,name=None)
keras.backend.zeros_like(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/wrappers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/wrappers/scikit_learn.py----------------------------------------
A:keras.wrappers.scikit_learn.self.classes_->numpy.arange(0, y.shape[1])
A:keras.wrappers.scikit_learn.y->to_categorical(y)
A:keras.wrappers.scikit_learn.self.compiled_model_->copy.deepcopy(self.model)
A:keras.wrappers.scikit_learn.history->self.compiled_model_.fit(X, y, batch_size=self.train_batch_size, nb_epoch=self.nb_epoch, verbose=self.verbose, shuffle=self.shuffle, show_accuracy=self.show_accuracy, validation_split=self.validation_split, validation_data=self.validation_data, callbacks=self.callbacks)
A:keras.wrappers.scikit_learn.self.config_->self.model.get_config()
A:keras.wrappers.scikit_learn.self.weights_->self.model.get_weights()
A:keras.wrappers.scikit_learn.(loss, accuracy)->self.compiled_model_.evaluate(X, y, batch_size=self.test_batch_size, show_accuracy=True, verbose=self.verbose)
A:keras.wrappers.scikit_learn.loss->self.compiled_model_.evaluate(X, y, batch_size=self.test_batch_size, show_accuracy=False, verbose=self.verbose)
keras.wrappers.scikit_learn.BaseWrapper(self,model,optimizer,loss,train_batch_size=128,test_batch_size=128,nb_epoch=100,shuffle=True,show_accuracy=False,validation_split=0,validation_data=None,callbacks=None,verbose=0)
keras.wrappers.scikit_learn.BaseWrapper.__init__(self,model,optimizer,loss,train_batch_size=128,test_batch_size=128,nb_epoch=100,shuffle=True,show_accuracy=False,validation_split=0,validation_data=None,callbacks=None,verbose=0)
keras.wrappers.scikit_learn.BaseWrapper.fit(self,X,y)
keras.wrappers.scikit_learn.BaseWrapper.get_params(self,deep=True)
keras.wrappers.scikit_learn.BaseWrapper.set_params(self,**params)
keras.wrappers.scikit_learn.KerasClassifier(self,model,optimizer='adam',loss='categorical_crossentropy',**kwargs)
keras.wrappers.scikit_learn.KerasClassifier.__init__(self,model,optimizer='adam',loss='categorical_crossentropy',**kwargs)
keras.wrappers.scikit_learn.KerasClassifier.predict(self,X)
keras.wrappers.scikit_learn.KerasClassifier.predict_proba(self,X)
keras.wrappers.scikit_learn.KerasClassifier.score(self,X,y)
keras.wrappers.scikit_learn.KerasRegressor(self,model,optimizer='adam',loss='mean_squared_error',**kwargs)
keras.wrappers.scikit_learn.KerasRegressor.__init__(self,model,optimizer='adam',loss='mean_squared_error',**kwargs)
keras.wrappers.scikit_learn.KerasRegressor.predict(self,X)
keras.wrappers.scikit_learn.KerasRegressor.score(self,X,y)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/utils/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/utils/generic_utils.py----------------------------------------
A:keras.utils.generic_utils.res->module_params.get(identifier)
A:keras.utils.generic_utils.self.start->time.time()
A:keras.utils.generic_utils.now->time.time()
A:keras.utils.generic_utils.prog_width->int(self.width * prog)
A:keras.utils.generic_utils.self.total_width->len(bar)
keras.utils.generic_utils.Progbar(self,target,width=30,verbose=1)
keras.utils.generic_utils.Progbar.__init__(self,target,width=30,verbose=1)
keras.utils.generic_utils.Progbar.add(self,n,values=[])
keras.utils.generic_utils.Progbar.update(self,current,values=[])
keras.utils.generic_utils.get_from_module(identifier,module_params,module_name,instantiate=False,kwargs=None)
keras.utils.generic_utils.make_tuple(*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/utils/io_utils.py----------------------------------------
A:keras.utils.io_utils.refs->defaultdict(int)
A:keras.utils.io_utils.f->tables.open_file(name)
A:keras.utils.io_utils.idx->(self.start + key).tolist()
A:keras.utils.io_utils.atom->tables.Atom.from_dtype(array.dtype)
A:keras.utils.io_utils.ds->tables.open_file(name).createCArray(f.root, 'data', atom, array.shape)
A:keras.utils.io_utils.a->numpy.empty(shape=array.shape, dtype=array.dtype)
keras.utils.io_utils.HDF5Matrix(self,datapath,dataset,start,end,normalizer=None)
keras.utils.io_utils.HDF5Matrix.__getitem__(self,key)
keras.utils.io_utils.HDF5Matrix.__init__(self,datapath,dataset,start,end,normalizer=None)
keras.utils.io_utils.HDF5Matrix.__len__(self)
keras.utils.io_utils.HDF5Matrix.shape(self)
keras.utils.io_utils.load_array(name)
keras.utils.io_utils.save_array(array,name)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/utils/layer_utils.py----------------------------------------
A:keras.utils.layer_utils.layer_dict->copy.deepcopy(original_layer_dict)
A:keras.utils.layer_utils.name->getattr(layer, 'name', 'Unnamed')
A:keras.utils.layer_utils.mode->copy.deepcopy(original_layer_dict).get('mode')
A:keras.utils.layer_utils.concat_axis->copy.deepcopy(original_layer_dict).get('concat_axis')
A:keras.utils.layer_utils.dot_axes->copy.deepcopy(original_layer_dict).get('dot_axes')
A:keras.utils.layer_utils.layers->copy.deepcopy(original_layer_dict).get('layers')
A:keras.utils.layer_utils.init_layer->container_from_config(layer)
A:keras.utils.layer_utils.merge_layer->Merge(layer_list, mode, concat_axis, dot_axes)
A:keras.utils.layer_utils.seq_layer->layers.containers.Sequential(layer_list)
A:keras.utils.layer_utils.graph_layer->layers.containers.Graph()
A:keras.utils.layer_utils.inputs->copy.deepcopy(original_layer_dict).get('input_config')
A:keras.utils.layer_utils.nodes->copy.deepcopy(original_layer_dict).get('node_config')
A:keras.utils.layer_utils.layer->container_from_config(layer_dict['nodes'].get(node['name']))
A:keras.utils.layer_utils.outputs->copy.deepcopy(original_layer_dict).get('output_config')
A:keras.utils.layer_utils.vname->v.pop('name')
A:keras.utils.layer_utils.layer_dict[k]->regularizers.get(vname, v)
A:keras.utils.layer_utils.base_layer->get_layer(name, layer_dict)
A:keras.utils.layer_utils.params->container_from_config(layer_dict['nodes'].get(node['name'])).count_params()
keras.utils.layer_utils.container_from_config(original_layer_dict,custom_objects={})
keras.utils.layer_utils.get_layer(identifier,kwargs=None)
keras.utils.layer_utils.model_summary(model)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/utils/visualize_util.py----------------------------------------
A:keras.utils.visualize_util.node_to_name->itertools.chain(model.nodes.items(), model.inputs.items(), model.outputs.items())
A:keras.utils.visualize_util.outputlabels->str(layer.output_shape)
A:keras.utils.visualize_util.inputlabels->', '.join([str(ishape) for ishape in layer.input_shapes])
A:keras.utils.visualize_util.node->pydot.Node(layer_id, label=label)
A:keras.utils.visualize_util.is_graph->isinstance(layer, Graph)
A:keras.utils.visualize_util.is_seq->isinstance(layer, Sequential)
A:keras.utils.visualize_util.child_layers->layer.outputs.values()
A:keras.utils.visualize_util.label->layer_to_name.get(layer, '')
A:keras.utils.visualize_util.layer_node->self._pydot_node_for_layer(layer, label=label)
A:keras.utils.visualize_util.self.g->pydot.Dot()
A:keras.utils.visualize_util.graph->to_graph(model)
keras.utils.visualize_util.ModelToDot(self,model,recursive=True,show_shape=False,connect_to=None)
keras.utils.visualize_util.ModelToDot.__call__(self,model,recursive=True,show_shape=False,connect_to=None)
keras.utils.visualize_util.ModelToDot._process_layer(self,layer,layer_to_name=None,connect_to=None)
keras.utils.visualize_util.ModelToDot._pydot_node_for_layer(self,layer,label)
keras.utils.visualize_util.get_layer_to_name(model)
keras.utils.visualize_util.layer_typename(layer)
keras.utils.visualize_util.plot(model,to_file='model.png')
keras.utils.visualize_util.to_graph(model,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/utils/np_utils.py----------------------------------------
A:keras.utils.np_utils.y->numpy.asarray(y, dtype='int32')
A:keras.utils.np_utils.Y->numpy.zeros((len(y), nb_classes))
A:keras.utils.np_utils.l2->numpy.atleast_1d(np.linalg.norm(a, order, axis))
A:keras.utils.np_utils.p->scipy.minimum(1 - epsilon, p)
A:keras.utils.np_utils.res->sum(y * sp.log(p) + sp.subtract(1, y) * sp.log(sp.subtract(1, p)))
keras.utils.np_utils.accuracy(p,y)
keras.utils.np_utils.binary_logloss(p,y)
keras.utils.np_utils.categorical_probas_to_classes(p)
keras.utils.np_utils.multiclass_logloss(P,Y)
keras.utils.np_utils.normalize(a,axis=-1,order=2)
keras.utils.np_utils.probas_to_classes(y_pred)
keras.utils.np_utils.to_categorical(y,nb_classes=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/utils/test_utils.py----------------------------------------
A:keras.utils.test_utils.y->numpy.zeros((nb_sample,) + output_shape)
A:keras.utils.test_utils.X->numpy.zeros((nb_sample,) + input_shape)
A:keras.utils.test_utils.X[i]->numpy.random.normal(loc=y_loc[i], scale=0.7, size=input_shape)
A:keras.utils.test_utils.y_loc->numpy.random.random((nb_sample,))
A:keras.utils.test_utils.y[i]->numpy.random.normal(loc=y_loc[i], scale=0.7, size=output_shape)
keras.utils.test_utils.get_test_data(nb_train=1000,nb_test=500,input_shape=(10,),output_shape=(2,),classification=True,nb_class=2)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/layers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/layers/noise.py----------------------------------------
A:keras.layers.noise.X->self.get_input(train)
A:keras.layers.noise.base_config->super(GaussianDropout, self).get_config()
keras.layers.noise.GaussianDropout(self,p,**kwargs)
keras.layers.noise.GaussianDropout.__init__(self,p,**kwargs)
keras.layers.noise.GaussianDropout.get_config(self)
keras.layers.noise.GaussianDropout.get_output(self,train)
keras.layers.noise.GaussianNoise(self,sigma,**kwargs)
keras.layers.noise.GaussianNoise.__init__(self,sigma,**kwargs)
keras.layers.noise.GaussianNoise.get_config(self)
keras.layers.noise.GaussianNoise.get_output(self,train=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/layers/core.py----------------------------------------
A:keras.layers.core.Y->self.layer(X, mask)
A:keras.layers.core.input_shape->list(self.input_shape)
A:keras.layers.core.self.input->K.placeholder(ndim=2)
A:keras.layers.core.previous_output->self.previous.get_output(train=train)
A:keras.layers.core.X->self.get_input(train)
A:keras.layers.core.base_config->super(Highway, self).get_config()
A:keras.layers.core.s->Siamese(layer, input_layers, merge_mode=None)
A:keras.layers.core.input_shapes->set()
A:keras.layers.core.n1->len(shape1)
A:keras.layers.core.n2->len(shape2)
A:keras.layers.core.oshape->tuple(oshape)
A:keras.layers.core.(params, regs, consts, updates)->l.get_params()
A:keras.layers.core.output_shape->list(input_shapes[0])
A:keras.layers.core.shape1->list(input_shapes[0])
A:keras.layers.core.shape2->list(input_shapes[1])
A:keras.layers.core.tensordot_output->numpy.tensordot(np.zeros(tuple(shape1[1:])), np.zeros(tuple(shape2[1:])), axes=dot_axes)
A:keras.layers.core.inputs->OrderedDict()
A:keras.layers.core.l1->self.get_output_at(0, train)
A:keras.layers.core.l2->self.get_output_at(1, train)
A:keras.layers.core.output->output.dimshuffle((0, 'x')).dimshuffle((0, 'x'))
A:keras.layers.core.o->self.inputs[i].get_input(train)
A:keras.layers.core.nb_param->len(self.inputs[i].params)
A:keras.layers.core.self.activation->activations.get(activation)
A:keras.layers.core.self.dims->tuple(dims)
A:keras.layers.core.original->numpy.prod(input_shape, dtype=int)
A:keras.layers.core.self.init->initializations.get(init)
A:keras.layers.core.self.W_regularizer->regularizers.get(W_regularizer)
A:keras.layers.core.self.b_regularizer->regularizers.get(b_regularizer)
A:keras.layers.core.self.activity_regularizer->regularizers.get(activity_regularizer)
A:keras.layers.core.self.W_constraint->constraints.get(W_constraint)
A:keras.layers.core.self.b_constraint->constraints.get(b_constraint)
A:keras.layers.core.self.W->self.init((input_dim, input_dim))
A:keras.layers.core.self.b->K.zeros((input_dim,))
A:keras.layers.core.activity_regularizer->ActivityRegularizer(l1=l1, l2=l2)
A:keras.layers.core.(last_output, outputs, states)->K.rnn(step, X, [], masking=False)
A:keras.layers.core.outputs->self.activation(outputs)
A:keras.layers.core.(params, regularizers, constraints, updates)->layer.get_params()
A:keras.layers.core.self.function->marshal.dumps(function.func_code)
A:keras.layers.core.self._output_shape->marshal.dumps(output_shape.func_code)
A:keras.layers.core.output_shape_func->types.FunctionType(output_shape_func, globals())
A:keras.layers.core.shape->output_shape_func(input_shapes)
A:keras.layers.core.func->types.FunctionType(func, globals())
A:keras.layers.core.mask->self.inputs[head].get_output_mask(train)
A:keras.layers.core.n->len(self.inputs)
A:keras.layers.core.weights->self.layer.get_weights()
A:keras.layers.core.sh->SiameseHead(i)
A:keras.layers.core.self.W_carry->self.init((input_dim, input_dim))
A:keras.layers.core.self.b_carry->K.variable(np.ones((input_dim,)) * self.transform_bias)
A:keras.layers.core.transform_weight->activations.sigmoid(K.dot(X, self.W_carry) + self.b_carry)
A:keras.layers.core.act->self.activation(K.dot(X, self.W) + self.b)
keras.layers.core.Activation(self,activation,**kwargs)
keras.layers.core.Activation.__init__(self,activation,**kwargs)
keras.layers.core.Activation.get_config(self)
keras.layers.core.Activation.get_output(self,train=False)
keras.layers.core.ActivityRegularization(self,l1=0.0,l2=0.0,**kwargs)
keras.layers.core.ActivityRegularization.__init__(self,l1=0.0,l2=0.0,**kwargs)
keras.layers.core.ActivityRegularization.get_config(self)
keras.layers.core.ActivityRegularization.get_output(self,train=False)
keras.layers.core.AutoEncoder(self,encoder,decoder,output_reconstruction=True,weights=None,**kwargs)
keras.layers.core.AutoEncoder.__init__(self,encoder,decoder,output_reconstruction=True,weights=None,**kwargs)
keras.layers.core.AutoEncoder._get_hidden(self,train=False)
keras.layers.core.AutoEncoder.build(self)
keras.layers.core.AutoEncoder.get_config(self)
keras.layers.core.AutoEncoder.get_input(self,train=False)
keras.layers.core.AutoEncoder.get_output(self,train=False)
keras.layers.core.AutoEncoder.get_weights(self)
keras.layers.core.AutoEncoder.input(self)
keras.layers.core.AutoEncoder.input_shape(self)
keras.layers.core.AutoEncoder.output_shape(self)
keras.layers.core.AutoEncoder.set_previous(self,node,connection_map={})
keras.layers.core.AutoEncoder.set_weights(self,weights)
keras.layers.core.Dense(self,output_dim,init='glorot_uniform',activation='linear',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,input_dim=None,**kwargs)
keras.layers.core.Dense.__init__(self,output_dim,init='glorot_uniform',activation='linear',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,input_dim=None,**kwargs)
keras.layers.core.Dense.build(self)
keras.layers.core.Dense.get_config(self)
keras.layers.core.Dense.get_output(self,train=False)
keras.layers.core.Dense.output_shape(self)
keras.layers.core.Dropout(self,p,**kwargs)
keras.layers.core.Dropout.__init__(self,p,**kwargs)
keras.layers.core.Dropout.get_config(self)
keras.layers.core.Dropout.get_output(self,train=False)
keras.layers.core.Flatten(self,**kwargs)
keras.layers.core.Flatten.__init__(self,**kwargs)
keras.layers.core.Flatten.get_output(self,train=False)
keras.layers.core.Flatten.output_shape(self)
keras.layers.core.Highway(self,init='glorot_uniform',transform_bias=-2,activation='linear',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,input_dim=None,**kwargs)
keras.layers.core.Highway.__init__(self,init='glorot_uniform',transform_bias=-2,activation='linear',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,input_dim=None,**kwargs)
keras.layers.core.Highway.build(self)
keras.layers.core.Highway.get_config(self)
keras.layers.core.Highway.get_output(self,train=False)
keras.layers.core.Highway.output_shape(self)
keras.layers.core.Lambda(self,function,output_shape=None,**kwargs)
keras.layers.core.Lambda.__init__(self,function,output_shape=None,**kwargs)
keras.layers.core.Lambda.get_output(self,train=False)
keras.layers.core.Lambda.output_shape(self)
keras.layers.core.LambdaMerge(self,layers,function,output_shape=None)
keras.layers.core.LambdaMerge.__init__(self,layers,function,output_shape=None)
keras.layers.core.LambdaMerge.get_config(self)
keras.layers.core.LambdaMerge.get_input(self,train=False)
keras.layers.core.LambdaMerge.get_output(self,train=False)
keras.layers.core.LambdaMerge.get_output_mask(self,train=None)
keras.layers.core.LambdaMerge.get_params(self)
keras.layers.core.LambdaMerge.get_weights(self)
keras.layers.core.LambdaMerge.input(self)
keras.layers.core.LambdaMerge.output_shape(self)
keras.layers.core.LambdaMerge.set_weights(self,weights)
keras.layers.core.LambdaMerge.supports_masked_input(self)
keras.layers.core.Layer(self,**kwargs)
keras.layers.core.Layer.__init__(self,**kwargs)
keras.layers.core.Layer.build(self)
keras.layers.core.Layer.cache_enabled(self)
keras.layers.core.Layer.cache_enabled(self,value)
keras.layers.core.Layer.count_params(self)
keras.layers.core.Layer.get_config(self)
keras.layers.core.Layer.get_input(self,train=False)
keras.layers.core.Layer.get_output(self,train=False)
keras.layers.core.Layer.get_output_mask(self,train=None)
keras.layers.core.Layer.get_params(self)
keras.layers.core.Layer.get_weights(self)
keras.layers.core.Layer.input_shape(self)
keras.layers.core.Layer.nb_input(self)
keras.layers.core.Layer.nb_output(self)
keras.layers.core.Layer.output_shape(self)
keras.layers.core.Layer.set_input_shape(self,input_shape)
keras.layers.core.Layer.set_previous(self,layer,connection_map={})
keras.layers.core.Layer.set_weights(self,weights)
keras.layers.core.Layer.supports_masked_input(self)
keras.layers.core.Layer.trainable(self)
keras.layers.core.Layer.trainable(self,value)
keras.layers.core.MaskedLambda(MaskedLayer,Lambda)
keras.layers.core.MaskedLayer(Layer)
keras.layers.core.MaskedLayer.get_input_mask(self,train=False)
keras.layers.core.MaskedLayer.get_output_mask(self,train=False)
keras.layers.core.MaskedLayer.supports_masked_input(self)
keras.layers.core.Masking(self,mask_value=0.0,**kwargs)
keras.layers.core.Masking.__init__(self,mask_value=0.0,**kwargs)
keras.layers.core.Masking.get_config(self)
keras.layers.core.Masking.get_output(self,train=False)
keras.layers.core.Masking.get_output_mask(self,train=False)
keras.layers.core.MaxoutDense(self,output_dim,nb_feature=4,init='glorot_uniform',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,input_dim=None,**kwargs)
keras.layers.core.MaxoutDense.__init__(self,output_dim,nb_feature=4,init='glorot_uniform',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,input_dim=None,**kwargs)
keras.layers.core.MaxoutDense.build(self)
keras.layers.core.MaxoutDense.get_config(self)
keras.layers.core.MaxoutDense.get_output(self,train=False)
keras.layers.core.MaxoutDense.output_shape(self)
keras.layers.core.Merge(self,layers,mode='sum',concat_axis=-1,dot_axes=-1)
keras.layers.core.Merge.__init__(self,layers,mode='sum',concat_axis=-1,dot_axes=-1)
keras.layers.core.Merge.get_config(self)
keras.layers.core.Merge.get_input(self,train=False)
keras.layers.core.Merge.get_output(self,train=False)
keras.layers.core.Merge.get_output_mask(self,train=None)
keras.layers.core.Merge.get_params(self)
keras.layers.core.Merge.get_weights(self)
keras.layers.core.Merge.input(self)
keras.layers.core.Merge.output_shape(self)
keras.layers.core.Merge.set_weights(self,weights)
keras.layers.core.Merge.supports_masked_input(self)
keras.layers.core.Permute(self,dims,**kwargs)
keras.layers.core.Permute.__init__(self,dims,**kwargs)
keras.layers.core.Permute.get_config(self)
keras.layers.core.Permute.get_output(self,train=False)
keras.layers.core.Permute.output_shape(self)
keras.layers.core.RepeatVector(self,n,**kwargs)
keras.layers.core.RepeatVector.__init__(self,n,**kwargs)
keras.layers.core.RepeatVector.get_config(self)
keras.layers.core.RepeatVector.get_output(self,train=False)
keras.layers.core.RepeatVector.output_shape(self)
keras.layers.core.Reshape(self,dims,**kwargs)
keras.layers.core.Reshape.__init__(self,dims,**kwargs)
keras.layers.core.Reshape._fix_unknown_dimension(self,input_shape,output_shape)
keras.layers.core.Reshape.get_config(self)
keras.layers.core.Reshape.get_output(self,train=False)
keras.layers.core.Reshape.output_shape(self)
keras.layers.core.Siamese(self,layer,inputs,merge_mode='concat',concat_axis=1,dot_axes=-1,is_graph=False)
keras.layers.core.Siamese.__init__(self,layer,inputs,merge_mode='concat',concat_axis=1,dot_axes=-1,is_graph=False)
keras.layers.core.Siamese.get_config(self)
keras.layers.core.Siamese.get_input(self,train=False)
keras.layers.core.Siamese.get_output(self,train=False)
keras.layers.core.Siamese.get_output_at(self,head,train=False)
keras.layers.core.Siamese.get_output_ave(self,train=False)
keras.layers.core.Siamese.get_output_concat(self,train=False)
keras.layers.core.Siamese.get_output_cos(self,train=False)
keras.layers.core.Siamese.get_output_dot(self,train=False)
keras.layers.core.Siamese.get_output_join(self,train=False)
keras.layers.core.Siamese.get_output_mask(self,train=None)
keras.layers.core.Siamese.get_output_mul(self,train=False)
keras.layers.core.Siamese.get_output_shape(self,head,train=False)
keras.layers.core.Siamese.get_output_sum(self,train=False)
keras.layers.core.Siamese.get_params(self)
keras.layers.core.Siamese.get_weights(self)
keras.layers.core.Siamese.input(self)
keras.layers.core.Siamese.output_shape(self)
keras.layers.core.Siamese.set_layer_input(self,head)
keras.layers.core.Siamese.set_weights(self,weights)
keras.layers.core.Siamese.supports_masked_input(self)
keras.layers.core.SiameseHead(self,head)
keras.layers.core.SiameseHead.__init__(self,head)
keras.layers.core.SiameseHead.get_config(self)
keras.layers.core.SiameseHead.get_input(self,train=False)
keras.layers.core.SiameseHead.get_output(self,train=False)
keras.layers.core.SiameseHead.input_shape(self)
keras.layers.core.SiameseHead.set_previous(self,layer)
keras.layers.core.TimeDistributedDense(self,output_dim,init='glorot_uniform',activation='linear',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,input_dim=None,input_length=None,**kwargs)
keras.layers.core.TimeDistributedDense.__init__(self,output_dim,init='glorot_uniform',activation='linear',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,input_dim=None,input_length=None,**kwargs)
keras.layers.core.TimeDistributedDense.build(self)
keras.layers.core.TimeDistributedDense.get_config(self)
keras.layers.core.TimeDistributedDense.get_output(self,train=False)
keras.layers.core.TimeDistributedDense.output_shape(self)
keras.layers.core.TimeDistributedMerge(self,mode='sum',**kwargs)
keras.layers.core.TimeDistributedMerge.__init__(self,mode='sum',**kwargs)
keras.layers.core.TimeDistributedMerge.get_config(self)
keras.layers.core.TimeDistributedMerge.get_output(self,train=False)
keras.layers.core.TimeDistributedMerge.output_shape(self)
keras.layers.core.add_shared_layer(layer,inputs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/layers/embeddings.py----------------------------------------
A:keras.layers.embeddings.self.init->initializations.get(init)
A:keras.layers.embeddings.self.W_constraint->constraints.get(W_constraint)
A:keras.layers.embeddings.self.W_regularizer->regularizers.get(W_regularizer)
A:keras.layers.embeddings.self.activity_regularizer->regularizers.get(activity_regularizer)
A:keras.layers.embeddings.self.input->K.placeholder(shape=(self.input_shape[0], self.input_length), dtype='int32')
A:keras.layers.embeddings.self.W->self.init((self.input_dim, self.output_dim))
A:keras.layers.embeddings.X->self.get_input(train)
A:keras.layers.embeddings.out->K.gather(self.W, X)
A:keras.layers.embeddings.base_config->super(Embedding, self).get_config()
keras.layers.embeddings.Embedding(self,input_dim,output_dim,init='uniform',input_length=None,W_regularizer=None,activity_regularizer=None,W_constraint=None,mask_zero=False,weights=None,**kwargs)
keras.layers.embeddings.Embedding.__init__(self,input_dim,output_dim,init='uniform',input_length=None,W_regularizer=None,activity_regularizer=None,W_constraint=None,mask_zero=False,weights=None,**kwargs)
keras.layers.embeddings.Embedding.build(self)
keras.layers.embeddings.Embedding.get_config(self)
keras.layers.embeddings.Embedding.get_output(self,train=False)
keras.layers.embeddings.Embedding.get_output_mask(self,train=None)
keras.layers.embeddings.Embedding.output_shape(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/layers/containers.py----------------------------------------
A:keras.layers.containers.Y->self.get_output(train=train)
A:keras.layers.containers.ndim->K.ndim(l.input)
A:keras.layers.containers.self.layers[0].input->K.placeholder(ndim=ndim)
A:keras.layers.containers.nb_param->len(layer.get_weights())
A:keras.layers.containers.self.namespace->set()
A:keras.layers.containers.self.nodes->OrderedDict()
A:keras.layers.containers.layer->Layer()
A:keras.layers.containers.layer.input->K.placeholder(shape=layer.input_shape, dtype='int32', name=name)
A:keras.layers.containers.merge->Merge(to_merge, mode=merge_mode, concat_axis=concat_axis, dot_axes=dot_axes)
A:keras.layers.containers.sh->SiameseHead(i)
A:keras.layers.containers.s->Siamese(layer, layers, merge_mode, concat_axis=concat_axis, dot_axes=dot_axes, is_graph=True)
keras.layers.containers.Graph(self)
keras.layers.containers.Graph.__init__(self)
keras.layers.containers.Graph.add_input(self,name,input_shape=None,batch_input_shape=None,dtype='float')
keras.layers.containers.Graph.add_node(self,layer,name,input=None,inputs=[],merge_mode='concat',concat_axis=-1,dot_axes=-1,create_output=False)
keras.layers.containers.Graph.add_output(self,name,input=None,inputs=[],merge_mode='concat',concat_axis=-1,dot_axes=-1)
keras.layers.containers.Graph.add_shared_node(self,layer,name,inputs=[],merge_mode=None,concat_axis=-1,dot_axes=-1,outputs=[],create_output=False)
keras.layers.containers.Graph.constraints(self)
keras.layers.containers.Graph.count_params(self)
keras.layers.containers.Graph.get_config(self)
keras.layers.containers.Graph.get_input(self,train=False)
keras.layers.containers.Graph.get_output(self,train=False)
keras.layers.containers.Graph.get_weights(self)
keras.layers.containers.Graph.input(self)
keras.layers.containers.Graph.nb_input(self)
keras.layers.containers.Graph.nb_output(self)
keras.layers.containers.Graph.output_shape(self)
keras.layers.containers.Graph.params(self)
keras.layers.containers.Graph.regularizers(self)
keras.layers.containers.Graph.reset_states(self)
keras.layers.containers.Graph.set_previous(self,layer,connection_map={})
keras.layers.containers.Graph.set_weights(self,weights)
keras.layers.containers.Graph.state_updates(self)
keras.layers.containers.Graph.updates(self)
keras.layers.containers.Sequential(self,layers=[])
keras.layers.containers.Sequential.__init__(self,layers=[])
keras.layers.containers.Sequential.add(self,layer)
keras.layers.containers.Sequential.cache_enabled(self)
keras.layers.containers.Sequential.cache_enabled(self,value)
keras.layers.containers.Sequential.constraints(self)
keras.layers.containers.Sequential.count_params(self)
keras.layers.containers.Sequential.get_config(self)
keras.layers.containers.Sequential.get_input(self,train=False)
keras.layers.containers.Sequential.get_output(self,train=False)
keras.layers.containers.Sequential.get_weights(self)
keras.layers.containers.Sequential.input(self)
keras.layers.containers.Sequential.input_shape(self)
keras.layers.containers.Sequential.output_shape(self)
keras.layers.containers.Sequential.params(self)
keras.layers.containers.Sequential.regularizers(self)
keras.layers.containers.Sequential.reset_states(self)
keras.layers.containers.Sequential.set_input(self)
keras.layers.containers.Sequential.set_previous(self,layer)
keras.layers.containers.Sequential.set_weights(self,weights)
keras.layers.containers.Sequential.state_updates(self)
keras.layers.containers.Sequential.updates(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/layers/convolutional.py----------------------------------------
A:keras.layers.convolutional.self.init->initializations.get(init)
A:keras.layers.convolutional.self.activation->activations.get(activation)
A:keras.layers.convolutional.self.W_regularizer->regularizers.get(W_regularizer)
A:keras.layers.convolutional.self.b_regularizer->regularizers.get(b_regularizer)
A:keras.layers.convolutional.self.activity_regularizer->regularizers.get(activity_regularizer)
A:keras.layers.convolutional.self.W_constraint->constraints.get(W_constraint)
A:keras.layers.convolutional.self.b_constraint->constraints.get(b_constraint)
A:keras.layers.convolutional.self.input->K.placeholder(ndim=4)
A:keras.layers.convolutional.self.W->self.init(self.W_shape)
A:keras.layers.convolutional.self.b->K.zeros((self.nb_filter,))
A:keras.layers.convolutional.length->conv_output_length(input_shape[1], self.pool_length, self.border_mode, self.stride)
A:keras.layers.convolutional.X->self.get_input(train)
A:keras.layers.convolutional.conv_out->K.conv2d(X, self.W, strides=self.subsample, border_mode=self.border_mode, dim_ordering=self.dim_ordering, image_shape=self.input_shape, filter_shape=self.W_shape)
A:keras.layers.convolutional.output->K.repeat_elements(output, self.size[1], axis=2)
A:keras.layers.convolutional.base_config->super(ZeroPadding2D, self).get_config()
A:keras.layers.convolutional.self.subsample->tuple(subsample)
A:keras.layers.convolutional.rows->conv_output_length(rows, self.pool_size[0], self.border_mode, self.strides[0])
A:keras.layers.convolutional.cols->conv_output_length(cols, self.pool_size[1], self.border_mode, self.strides[1])
A:keras.layers.convolutional.self.pool_size->tuple(pool_size)
A:keras.layers.convolutional.self.strides->tuple(strides)
A:keras.layers.convolutional.self.size->tuple(size)
A:keras.layers.convolutional.self.padding->tuple(padding)
keras.layers.convolutional.AveragePooling1D(self,pool_length=2,stride=None,border_mode='valid',**kwargs)
keras.layers.convolutional.AveragePooling1D.__init__(self,pool_length=2,stride=None,border_mode='valid',**kwargs)
keras.layers.convolutional.AveragePooling1D._pooling_function(self,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers.convolutional.AveragePooling2D(self,pool_size=(2,2),strides=None,border_mode='valid',dim_ordering='th',**kwargs)
keras.layers.convolutional.AveragePooling2D.__init__(self,pool_size=(2,2),strides=None,border_mode='valid',dim_ordering='th',**kwargs)
keras.layers.convolutional.AveragePooling2D._pooling_function(self,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers.convolutional.Convolution1D(self,nb_filter,filter_length,init='uniform',activation='linear',weights=None,border_mode='valid',subsample_length=1,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,input_dim=None,input_length=None,**kwargs)
keras.layers.convolutional.Convolution1D.__init__(self,nb_filter,filter_length,init='uniform',activation='linear',weights=None,border_mode='valid',subsample_length=1,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,input_dim=None,input_length=None,**kwargs)
keras.layers.convolutional.Convolution1D.build(self)
keras.layers.convolutional.Convolution1D.get_config(self)
keras.layers.convolutional.Convolution1D.get_output(self,train=False)
keras.layers.convolutional.Convolution1D.output_shape(self)
keras.layers.convolutional.Convolution2D(self,nb_filter,nb_row,nb_col,init='glorot_uniform',activation='linear',weights=None,border_mode='valid',subsample=(1,1),dim_ordering='th',W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,**kwargs)
keras.layers.convolutional.Convolution2D.__init__(self,nb_filter,nb_row,nb_col,init='glorot_uniform',activation='linear',weights=None,border_mode='valid',subsample=(1,1),dim_ordering='th',W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,**kwargs)
keras.layers.convolutional.Convolution2D.build(self)
keras.layers.convolutional.Convolution2D.get_config(self)
keras.layers.convolutional.Convolution2D.get_output(self,train=False)
keras.layers.convolutional.Convolution2D.output_shape(self)
keras.layers.convolutional.MaxPooling1D(self,pool_length=2,stride=None,border_mode='valid',**kwargs)
keras.layers.convolutional.MaxPooling1D.__init__(self,pool_length=2,stride=None,border_mode='valid',**kwargs)
keras.layers.convolutional.MaxPooling1D._pooling_function(self,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers.convolutional.MaxPooling2D(self,pool_size=(2,2),strides=None,border_mode='valid',dim_ordering='th',**kwargs)
keras.layers.convolutional.MaxPooling2D.__init__(self,pool_size=(2,2),strides=None,border_mode='valid',dim_ordering='th',**kwargs)
keras.layers.convolutional.MaxPooling2D._pooling_function(self,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers.convolutional.UpSampling1D(self,length=2,**kwargs)
keras.layers.convolutional.UpSampling1D.__init__(self,length=2,**kwargs)
keras.layers.convolutional.UpSampling1D.get_config(self)
keras.layers.convolutional.UpSampling1D.get_output(self,train=False)
keras.layers.convolutional.UpSampling1D.output_shape(self)
keras.layers.convolutional.UpSampling2D(self,size=(2,2),dim_ordering='th',**kwargs)
keras.layers.convolutional.UpSampling2D.__init__(self,size=(2,2),dim_ordering='th',**kwargs)
keras.layers.convolutional.UpSampling2D.get_config(self)
keras.layers.convolutional.UpSampling2D.get_output(self,train=False)
keras.layers.convolutional.UpSampling2D.output_shape(self)
keras.layers.convolutional.ZeroPadding1D(self,padding=1,**kwargs)
keras.layers.convolutional.ZeroPadding1D.__init__(self,padding=1,**kwargs)
keras.layers.convolutional.ZeroPadding1D.get_config(self)
keras.layers.convolutional.ZeroPadding1D.get_output(self,train=False)
keras.layers.convolutional.ZeroPadding1D.output_shape(self)
keras.layers.convolutional.ZeroPadding2D(self,padding=(1,1),dim_ordering='th',**kwargs)
keras.layers.convolutional.ZeroPadding2D.__init__(self,padding=(1,1),dim_ordering='th',**kwargs)
keras.layers.convolutional.ZeroPadding2D.get_config(self)
keras.layers.convolutional.ZeroPadding2D.get_output(self,train=False)
keras.layers.convolutional.ZeroPadding2D.output_shape(self)
keras.layers.convolutional._Pooling1D(self,pool_length=2,stride=None,border_mode='valid',**kwargs)
keras.layers.convolutional._Pooling1D.__init__(self,pool_length=2,stride=None,border_mode='valid',**kwargs)
keras.layers.convolutional._Pooling1D._pooling_function(self,back_end,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers.convolutional._Pooling1D.get_config(self)
keras.layers.convolutional._Pooling1D.get_output(self,train=False)
keras.layers.convolutional._Pooling1D.output_shape(self)
keras.layers.convolutional._Pooling2D(self,pool_size=(2,2),strides=None,border_mode='valid',dim_ordering='th',**kwargs)
keras.layers.convolutional._Pooling2D.__init__(self,pool_size=(2,2),strides=None,border_mode='valid',dim_ordering='th',**kwargs)
keras.layers.convolutional._Pooling2D._pooling_function(self,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers.convolutional._Pooling2D.get_config(self)
keras.layers.convolutional._Pooling2D.get_output(self,train=False)
keras.layers.convolutional._Pooling2D.output_shape(self)
keras.layers.convolutional.conv_output_length(input_length,filter_size,border_mode,stride)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/layers/normalization.py----------------------------------------
A:keras.layers.normalization.self.init->initializations.get('uniform')
A:keras.layers.normalization.self.gamma->self.init(input_shape)
A:keras.layers.normalization.self.beta->K.zeros(input_shape)
A:keras.layers.normalization.self.running_mean->K.zeros(input_shape)
A:keras.layers.normalization.self.running_std->K.ones(input_shape)
A:keras.layers.normalization.super_weights->super(BatchNormalization, self).get_weights()
A:keras.layers.normalization.X->self.get_input(train)
A:keras.layers.normalization.m->K.mean(X, axis=-1, keepdims=True)
A:keras.layers.normalization.std->K.std(X, axis=-1, keepdims=True)
A:keras.layers.normalization.base_config->super(BatchNormalization, self).get_config()
keras.layers.normalization.BatchNormalization(self,epsilon=1e-06,mode=0,momentum=0.9,weights=None,**kwargs)
keras.layers.normalization.BatchNormalization.__init__(self,epsilon=1e-06,mode=0,momentum=0.9,weights=None,**kwargs)
keras.layers.normalization.BatchNormalization.build(self)
keras.layers.normalization.BatchNormalization.get_config(self)
keras.layers.normalization.BatchNormalization.get_output(self,train)
keras.layers.normalization.BatchNormalization.get_weights(self)
keras.layers.normalization.BatchNormalization.set_weights(self,weights)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/layers/recurrent.py----------------------------------------
A:keras.layers.recurrent.initial_state->K.dot(initial_state, reducer)
A:keras.layers.recurrent.reducer->K.zeros((self.input_dim, self.output_dim))
A:keras.layers.recurrent.X->self.get_input(train)
A:keras.layers.recurrent.mask->self.get_output_mask(train)
A:keras.layers.recurrent.initial_states->self.get_initial_states(X)
A:keras.layers.recurrent.(last_output, outputs, states)->K.rnn(self.step, X, initial_states, go_backwards=self.go_backwards, masking=masking)
A:keras.layers.recurrent.base_config->super(LSTM, self).get_config()
A:keras.layers.recurrent.self.init->initializations.get(init)
A:keras.layers.recurrent.self.inner_init->initializations.get(inner_init)
A:keras.layers.recurrent.self.activation->activations.get(activation)
A:keras.layers.recurrent.self.W->self.init((input_dim, self.output_dim))
A:keras.layers.recurrent.self.U->self.inner_init((self.output_dim, self.output_dim))
A:keras.layers.recurrent.self.b->K.zeros((self.output_dim,))
A:keras.layers.recurrent.output->self.activation(h + K.dot(prev_output, self.U))
A:keras.layers.recurrent.self.inner_activation->activations.get(inner_activation)
A:keras.layers.recurrent.self.input->K.placeholder(input_shape)
A:keras.layers.recurrent.self.W_z->self.init((input_dim, self.output_dim))
A:keras.layers.recurrent.self.U_z->self.inner_init((self.output_dim, self.output_dim))
A:keras.layers.recurrent.self.b_z->K.zeros((self.output_dim,))
A:keras.layers.recurrent.self.W_r->self.init((input_dim, self.output_dim))
A:keras.layers.recurrent.self.U_r->self.inner_init((self.output_dim, self.output_dim))
A:keras.layers.recurrent.self.b_r->K.zeros((self.output_dim,))
A:keras.layers.recurrent.self.W_h->self.init((input_dim, self.output_dim))
A:keras.layers.recurrent.self.U_h->self.inner_init((self.output_dim, self.output_dim))
A:keras.layers.recurrent.self.b_h->K.zeros((self.output_dim,))
A:keras.layers.recurrent.z->self.inner_activation(x_z + K.dot(h_tm1, self.U_z))
A:keras.layers.recurrent.r->self.inner_activation(x_r + K.dot(h_tm1, self.U_r))
A:keras.layers.recurrent.hh->self.activation(x_h + K.dot(r * h_tm1, self.U_h))
A:keras.layers.recurrent.self.forget_bias_init->initializations.get(forget_bias_init)
A:keras.layers.recurrent.self.W_i->self.init((input_dim, self.output_dim))
A:keras.layers.recurrent.self.U_i->self.inner_init((self.output_dim, self.output_dim))
A:keras.layers.recurrent.self.b_i->K.zeros((self.output_dim,))
A:keras.layers.recurrent.self.W_f->self.init((input_dim, self.output_dim))
A:keras.layers.recurrent.self.U_f->self.inner_init((self.output_dim, self.output_dim))
A:keras.layers.recurrent.self.b_f->self.forget_bias_init((self.output_dim,))
A:keras.layers.recurrent.self.W_c->self.init((input_dim, self.output_dim))
A:keras.layers.recurrent.self.U_c->self.inner_init((self.output_dim, self.output_dim))
A:keras.layers.recurrent.self.b_c->K.zeros((self.output_dim,))
A:keras.layers.recurrent.self.W_o->self.init((input_dim, self.output_dim))
A:keras.layers.recurrent.self.U_o->self.inner_init((self.output_dim, self.output_dim))
A:keras.layers.recurrent.self.b_o->K.zeros((self.output_dim,))
A:keras.layers.recurrent.i->self.inner_activation(x_i + K.dot(h_tm1, self.U_i))
A:keras.layers.recurrent.f->self.inner_activation(x_f + K.dot(h_tm1, self.U_f))
A:keras.layers.recurrent.o->self.inner_activation(x_o + K.dot(h_tm1, self.U_o))
keras.layers.recurrent.GRU(self,output_dim,init='glorot_uniform',inner_init='orthogonal',activation='sigmoid',inner_activation='hard_sigmoid',**kwargs)
keras.layers.recurrent.GRU.__init__(self,output_dim,init='glorot_uniform',inner_init='orthogonal',activation='sigmoid',inner_activation='hard_sigmoid',**kwargs)
keras.layers.recurrent.GRU.build(self)
keras.layers.recurrent.GRU.get_config(self)
keras.layers.recurrent.GRU.reset_states(self)
keras.layers.recurrent.GRU.step(self,x,states)
keras.layers.recurrent.LSTM(self,output_dim,init='glorot_uniform',inner_init='orthogonal',forget_bias_init='one',activation='tanh',inner_activation='hard_sigmoid',**kwargs)
keras.layers.recurrent.LSTM.__init__(self,output_dim,init='glorot_uniform',inner_init='orthogonal',forget_bias_init='one',activation='tanh',inner_activation='hard_sigmoid',**kwargs)
keras.layers.recurrent.LSTM.build(self)
keras.layers.recurrent.LSTM.get_config(self)
keras.layers.recurrent.LSTM.reset_states(self)
keras.layers.recurrent.LSTM.step(self,x,states)
keras.layers.recurrent.Recurrent(self,weights=None,return_sequences=False,go_backwards=False,stateful=False,input_dim=None,input_length=None,**kwargs)
keras.layers.recurrent.Recurrent.__init__(self,weights=None,return_sequences=False,go_backwards=False,stateful=False,input_dim=None,input_length=None,**kwargs)
keras.layers.recurrent.Recurrent.get_config(self)
keras.layers.recurrent.Recurrent.get_initial_states(self,X)
keras.layers.recurrent.Recurrent.get_output(self,train=False)
keras.layers.recurrent.Recurrent.get_output_mask(self,train=False)
keras.layers.recurrent.Recurrent.output_shape(self)
keras.layers.recurrent.Recurrent.step(self,x,states)
keras.layers.recurrent.SimpleRNN(self,output_dim,init='glorot_uniform',inner_init='orthogonal',activation='sigmoid',**kwargs)
keras.layers.recurrent.SimpleRNN.__init__(self,output_dim,init='glorot_uniform',inner_init='orthogonal',activation='sigmoid',**kwargs)
keras.layers.recurrent.SimpleRNN.build(self)
keras.layers.recurrent.SimpleRNN.get_config(self)
keras.layers.recurrent.SimpleRNN.reset_states(self)
keras.layers.recurrent.SimpleRNN.step(self,x,states)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras0.3.1/lib/python3.6/site-packages/keras/layers/advanced_activations.py----------------------------------------
A:keras.layers.advanced_activations.X->self.get_input(train)
A:keras.layers.advanced_activations.base_config->super(ThresholdedReLU, self).get_config()
A:keras.layers.advanced_activations.self.init->initializations.get(init)
A:keras.layers.advanced_activations.self.alphas->K.variable(self.alpha_init * np.ones(input_shape))
A:keras.layers.advanced_activations.pos->K.relu(X)
A:keras.layers.advanced_activations.self.betas->K.variable(self.beta_init * np.ones(input_shape))
keras.layers.advanced_activations.ELU(self,alpha=1.0,**kwargs)
keras.layers.advanced_activations.ELU.__init__(self,alpha=1.0,**kwargs)
keras.layers.advanced_activations.ELU.get_config(self)
keras.layers.advanced_activations.ELU.get_output(self,train)
keras.layers.advanced_activations.LeakyReLU(self,alpha=0.3,**kwargs)
keras.layers.advanced_activations.LeakyReLU.__init__(self,alpha=0.3,**kwargs)
keras.layers.advanced_activations.LeakyReLU.get_config(self)
keras.layers.advanced_activations.LeakyReLU.get_output(self,train)
keras.layers.advanced_activations.PReLU(self,init='zero',weights=None,**kwargs)
keras.layers.advanced_activations.PReLU.__init__(self,init='zero',weights=None,**kwargs)
keras.layers.advanced_activations.PReLU.build(self)
keras.layers.advanced_activations.PReLU.get_config(self)
keras.layers.advanced_activations.PReLU.get_output(self,train)
keras.layers.advanced_activations.ParametricSoftplus(self,alpha_init=0.2,beta_init=5.0,weights=None,**kwargs)
keras.layers.advanced_activations.ParametricSoftplus.__init__(self,alpha_init=0.2,beta_init=5.0,weights=None,**kwargs)
keras.layers.advanced_activations.ParametricSoftplus.build(self)
keras.layers.advanced_activations.ParametricSoftplus.get_config(self)
keras.layers.advanced_activations.ParametricSoftplus.get_output(self,train)
keras.layers.advanced_activations.ThresholdedLinear(self,theta=1.0,**kwargs)
keras.layers.advanced_activations.ThresholdedLinear.__init__(self,theta=1.0,**kwargs)
keras.layers.advanced_activations.ThresholdedLinear.get_config(self)
keras.layers.advanced_activations.ThresholdedLinear.get_output(self,train)
keras.layers.advanced_activations.ThresholdedReLU(self,theta=1.0,**kwargs)
keras.layers.advanced_activations.ThresholdedReLU.__init__(self,theta=1.0,**kwargs)
keras.layers.advanced_activations.ThresholdedReLU.get_config(self)
keras.layers.advanced_activations.ThresholdedReLU.get_output(self,train)

