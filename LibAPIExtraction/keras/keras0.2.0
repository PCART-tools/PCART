
----------------------------------------/home/zhang/Packages/keras/keras0.2.0/objectives.py----------------------------------------
A:keras.objectives.y_pred->theano.tensor.clip(y_pred, epsilon, 1.0 - epsilon)
A:keras.objectives.cce->theano.tensor.nnet.categorical_crossentropy(y_pred, y_true)
A:keras.objectives.bce->theano.tensor.nnet.binary_crossentropy(y_pred, y_true).mean(axis=-1)
keras.objectives.binary_crossentropy(y_true,y_pred)
keras.objectives.categorical_crossentropy(y_true,y_pred)
keras.objectives.get(identifier)
keras.objectives.hinge(y_true,y_pred)
keras.objectives.mean_absolute_error(y_true,y_pred)
keras.objectives.mean_absolute_percentage_error(y_true,y_pred)
keras.objectives.mean_squared_error(y_true,y_pred)
keras.objectives.mean_squared_logarithmic_error(y_true,y_pred)
keras.objectives.poisson_loss(y_true,y_pred)
keras.objectives.squared_hinge(y_true,y_pred)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/regularizers.py----------------------------------------
keras.regularizers.ActivityRegularizer(self,l1=0.0,l2=0.0)
keras.regularizers.ActivityRegularizer.__init__(self,l1=0.0,l2=0.0)
keras.regularizers.ActivityRegularizer.get_config(self)
keras.regularizers.ActivityRegularizer.set_layer(self,layer)
keras.regularizers.Regularizer(self,loss)
keras.regularizers.Regularizer.__call__(self,loss)
keras.regularizers.Regularizer.get_config(self)
keras.regularizers.Regularizer.set_layer(self,layer)
keras.regularizers.Regularizer.set_param(self,p)
keras.regularizers.WeightRegularizer(self,l1=0.0,l2=0.0)
keras.regularizers.WeightRegularizer.__init__(self,l1=0.0,l2=0.0)
keras.regularizers.WeightRegularizer.get_config(self)
keras.regularizers.WeightRegularizer.set_param(self,p)
keras.regularizers.activity_l1(l=0.01)
keras.regularizers.activity_l1l2(l1=0.01,l2=0.01)
keras.regularizers.activity_l2(l=0.01)
keras.regularizers.get(identifier,kwargs=None)
keras.regularizers.l1(l=0.01)
keras.regularizers.l1l2(l1=0.01,l2=0.01)
keras.regularizers.l2(l=0.01)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/activations.py----------------------------------------
keras.activations.get(identifier)
keras.activations.hard_sigmoid(x)
keras.activations.linear(x)
keras.activations.relu(x)
keras.activations.sigmoid(x)
keras.activations.softmax(x)
keras.activations.softplus(x)
keras.activations.tanh(x)
keras.activations.time_distributed_softmax(x)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/optimizers.py----------------------------------------
A:keras.optimizers.g->theano.tensor.switch(T.ge(n, c), g * c / n, g)
A:keras.optimizers.grads->self.get_gradients(loss, params)
A:keras.optimizers.norm->theano.tensor.sqrt(sum([T.sum(g ** 2) for g in grads]))
A:keras.optimizers.self.iterations->shared_scalar(0)
A:keras.optimizers.self.lr->shared_scalar(lr)
A:keras.optimizers.self.momentum->shared_scalar(momentum)
A:keras.optimizers.self.decay->shared_scalar(decay)
A:keras.optimizers.m->theano.shared(p.get_value() * 0.0)
A:keras.optimizers.self.rho->shared_scalar(rho)
A:keras.optimizers.v->theano.shared(p.get_value() * 0.0)
keras.optimizers.Adadelta(self,lr=1.0,rho=0.95,epsilon=1e-06,*args,**kwargs)
keras.optimizers.Adadelta.__init__(self,lr=1.0,rho=0.95,epsilon=1e-06,*args,**kwargs)
keras.optimizers.Adadelta.get_config(self)
keras.optimizers.Adadelta.get_updates(self,params,constraints,loss)
keras.optimizers.Adagrad(self,lr=0.01,epsilon=1e-06,*args,**kwargs)
keras.optimizers.Adagrad.__init__(self,lr=0.01,epsilon=1e-06,*args,**kwargs)
keras.optimizers.Adagrad.get_config(self)
keras.optimizers.Adagrad.get_updates(self,params,constraints,loss)
keras.optimizers.Adam(self,lr=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-08,*args,**kwargs)
keras.optimizers.Adam.__init__(self,lr=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-08,*args,**kwargs)
keras.optimizers.Adam.get_config(self)
keras.optimizers.Adam.get_updates(self,params,constraints,loss)
keras.optimizers.Optimizer(self,**kwargs)
keras.optimizers.Optimizer.__init__(self,**kwargs)
keras.optimizers.Optimizer.get_config(self)
keras.optimizers.Optimizer.get_gradients(self,loss,params)
keras.optimizers.Optimizer.get_state(self)
keras.optimizers.Optimizer.get_updates(self,params,constraints,loss)
keras.optimizers.Optimizer.set_state(self,value_list)
keras.optimizers.RMSprop(self,lr=0.001,rho=0.9,epsilon=1e-06,*args,**kwargs)
keras.optimizers.RMSprop.__init__(self,lr=0.001,rho=0.9,epsilon=1e-06,*args,**kwargs)
keras.optimizers.RMSprop.get_config(self)
keras.optimizers.RMSprop.get_updates(self,params,constraints,loss)
keras.optimizers.SGD(self,lr=0.01,momentum=0.0,decay=0.0,nesterov=False,*args,**kwargs)
keras.optimizers.SGD.__init__(self,lr=0.01,momentum=0.0,decay=0.0,nesterov=False,*args,**kwargs)
keras.optimizers.SGD.get_config(self)
keras.optimizers.SGD.get_updates(self,params,constraints,loss)
keras.optimizers.clip_norm(g,c,n)
keras.optimizers.get(identifier,kwargs=None)
keras.optimizers.kl_divergence(p,p_hat)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/callbacks.py----------------------------------------
A:keras.callbacks.self._delta_ts_batch_begin->deque([], maxlen=self.queue_length)
A:keras.callbacks.self._delta_ts_batch_end->deque([], maxlen=self.queue_length)
A:keras.callbacks.t_before_callbacks->time.time()
A:keras.callbacks.delta_t_median->numpy.median(self._delta_ts_batch_end)
A:keras.callbacks.self._t_enter_batch->time.time()
A:keras.callbacks.self.progbar->Progbar(target=self.params['nb_sample'], verbose=self.verbose)
A:keras.callbacks.batch_size->logs.get('size', 0)
A:keras.callbacks.filepath->self.filepath.format(epoch=epoch, **logs)
A:keras.callbacks.current->logs.get(self.monitor)
A:keras.callbacks.r->requests.post(self.root + '/publish/epoch/end/', {'data': json.dumps(send)})
keras.callbacks.BaseLogger(Callback)
keras.callbacks.BaseLogger.on_batch_begin(self,batch,logs={})
keras.callbacks.BaseLogger.on_batch_end(self,batch,logs={})
keras.callbacks.BaseLogger.on_epoch_begin(self,epoch,logs={})
keras.callbacks.BaseLogger.on_epoch_end(self,epoch,logs={})
keras.callbacks.BaseLogger.on_train_begin(self,logs={})
keras.callbacks.Callback(self)
keras.callbacks.Callback.__init__(self)
keras.callbacks.Callback._set_model(self,model)
keras.callbacks.Callback._set_params(self,params)
keras.callbacks.Callback.on_batch_begin(self,batch,logs={})
keras.callbacks.Callback.on_batch_end(self,batch,logs={})
keras.callbacks.Callback.on_epoch_begin(self,epoch,logs={})
keras.callbacks.Callback.on_epoch_end(self,epoch,logs={})
keras.callbacks.Callback.on_train_begin(self,logs={})
keras.callbacks.Callback.on_train_end(self,logs={})
keras.callbacks.CallbackList(self,callbacks=[],queue_length=10)
keras.callbacks.CallbackList.__init__(self,callbacks=[],queue_length=10)
keras.callbacks.CallbackList._set_model(self,model)
keras.callbacks.CallbackList._set_params(self,params)
keras.callbacks.CallbackList.append(self,callback)
keras.callbacks.CallbackList.on_batch_begin(self,batch,logs={})
keras.callbacks.CallbackList.on_batch_end(self,batch,logs={})
keras.callbacks.CallbackList.on_epoch_begin(self,epoch,logs={})
keras.callbacks.CallbackList.on_epoch_end(self,epoch,logs={})
keras.callbacks.CallbackList.on_train_begin(self,logs={})
keras.callbacks.CallbackList.on_train_end(self,logs={})
keras.callbacks.EarlyStopping(self,monitor='val_loss',patience=0,verbose=0)
keras.callbacks.EarlyStopping.__init__(self,monitor='val_loss',patience=0,verbose=0)
keras.callbacks.EarlyStopping.on_epoch_end(self,epoch,logs={})
keras.callbacks.History(Callback)
keras.callbacks.History.on_batch_end(self,batch,logs={})
keras.callbacks.History.on_epoch_begin(self,epoch,logs={})
keras.callbacks.History.on_epoch_end(self,epoch,logs={})
keras.callbacks.History.on_train_begin(self,logs={})
keras.callbacks.LearningRateScheduler(self,schedule)
keras.callbacks.LearningRateScheduler.__init__(self,schedule)
keras.callbacks.LearningRateScheduler.on_epoch_begin(self,epoch,logs={})
keras.callbacks.ModelCheckpoint(self,filepath,monitor='val_loss',verbose=0,save_best_only=False)
keras.callbacks.ModelCheckpoint.__init__(self,filepath,monitor='val_loss',verbose=0,save_best_only=False)
keras.callbacks.ModelCheckpoint.on_epoch_end(self,epoch,logs={})
keras.callbacks.RemoteMonitor(self,root='http://localhost:9000')
keras.callbacks.RemoteMonitor.__init__(self,root='http://localhost:9000')
keras.callbacks.RemoteMonitor.on_batch_end(self,batch,logs={})
keras.callbacks.RemoteMonitor.on_epoch_begin(self,epoch,logs={})
keras.callbacks.RemoteMonitor.on_epoch_end(self,epoch,logs={})


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/models.py----------------------------------------
A:keras.models.y->theano.tensor.zeros_like(y_test)
A:keras.models.batch_count->int(len(index_array) / batch_size)
A:keras.models.index_array->numpy.arange(nb_sample)
A:keras.models.nb_batch->int(np.ceil(size / float(batch_size)))
A:keras.models.obj_output->fn(filtered_y_true, filtered_y_pred)
A:keras.models.y_classes->numpy.reshape(y, y.shape[0])
A:keras.models.class_weights->numpy.asarray([class_weight[cls] for cls in y_classes])
A:keras.models.config->self.get_config()
A:keras.models.model_name->self.get_config().get('name')
A:keras.models.model->container_from_config(config, custom_layers=custom_layers)
A:keras.models.loss->self.get_config().get('loss')
A:keras.models.class_mode->self.get_config().get('class_mode')
A:keras.models.theano_mode->self.get_config().get('theano_mode')
A:keras.models.optimizer_params->dict([(k, v) for (k, v) in config.get('optimizer').items()])
A:keras.models.optimizer_name->dict([(k, v) for (k, v) in config.get('optimizer').items()]).pop('name')
A:keras.models.optimizer->optimizers.get(optimizer_name, optimizer_params)
A:keras.models.nb_train_sample->len(ins[0])
A:keras.models.history->self._fit(f, ins, out_labels=out_labels, batch_size=batch_size, nb_epoch=nb_epoch, verbose=verbose, callbacks=callbacks, val_f=val_f, val_ins=val_ins, shuffle=shuffle, metrics=metrics)
A:keras.models.callbacks->cbks.CallbackList(callbacks)
A:keras.models.batches->make_batches(nb_sample, batch_size)
A:keras.models.ins_batch->slice_X(ins, batch_ids)
A:keras.models.batch_logs['size']->len(batch_ids)
A:keras.models.outs->self._predict_loop(self._predict, ins, batch_size, verbose)
A:keras.models.val_outs->self._test_loop(val_f, val_ins, batch_size=batch_size, verbose=0)
A:keras.models.nb_sample->len(ins[0])
A:keras.models.progbar->Progbar(target=nb_sample)
A:keras.models.batch_outs->f(*ins_batch)
A:keras.models.config[p]->getattr(self, p)
A:keras.models.config['optimizer']->self.optimizer.get_config()
A:keras.models.config['loss']->get_function_name(self.loss)
A:keras.models.pp->pprint.PrettyPrinter(indent=4)
A:keras.models.self.optimizer->optimizers.get(optimizer)
A:keras.models.self.loss->objectives.get(loss)
A:keras.models.weighted_loss->weighted_objective(objectives.get(loss_fn))
A:keras.models.self.X_train->self.get_input(train=True)
A:keras.models.self.X_test->self.get_input(train=False)
A:keras.models.self.y_train->self.get_output(train=True)
A:keras.models.self.y_test->self.get_output(train=False)
A:keras.models.self.y->theano.tensor.zeros_like(self.y_train)
A:keras.models.self.weights->theano.tensor.ones_like(self.y_train)
A:keras.models.mask->output.get_output_mask()
A:keras.models.train_loss->r(train_loss)
A:keras.models.test_loss->weighted_loss(self.y, self.y_test, self.weights, mask)
A:keras.models.train_accuracy->theano.tensor.mean(T.eq(self.y, T.round(self.y_train)))
A:keras.models.test_accuracy->theano.tensor.mean(T.eq(self.y, T.round(self.y_test)))
A:keras.models.updates->self.optimizer.get_updates(self.params, self.constraints, train_loss)
A:keras.models.self._train->theano.function(train_ins, train_loss, updates=updates, allow_input_downcast=True, mode=theano_mode)
A:keras.models.self._train_with_acc->theano.function(train_ins, [train_loss, train_accuracy], updates=updates, allow_input_downcast=True, mode=theano_mode)
A:keras.models.self._predict->theano.function(inputs=ins, outputs=ys_test, allow_input_downcast=True, mode=theano_mode)
A:keras.models.self._test->theano.function(test_ins, test_loss, allow_input_downcast=True, mode=theano_mode)
A:keras.models.self._test_with_acc->theano.function(test_ins, [test_loss, test_accuracy], allow_input_downcast=True, mode=theano_mode)
A:keras.models.X->standardize_X(X)
A:keras.models.sample_weight->standardize_weights(y, sample_weight=sample_weight)
A:keras.models.ins->standardize_X(X)
A:keras.models.X_val->standardize_X(X_val)
A:keras.models.y_val->standardize_y(y_val)
A:keras.models.sample_weight_val->numpy.ones(y_val.shape[:-1] + (1,))
A:keras.models.split_at->int(len(X[0]) * (1 - validation_split))
A:keras.models.preds->self.predict(X, batch_size, verbose)
A:keras.models.proba->self.predict(X, batch_size=batch_size, verbose=verbose)
A:keras.models.overwrite->get_input('Enter "y" (overwrite) or "n" (cancel).')
A:keras.models.f->h5py.File(filepath)
A:keras.models.f.attrs['nb_layers']->len(self.layers)
A:keras.models.g->h5py.File(filepath).create_group('graph')
A:keras.models.weights->self.get_weights()
A:keras.models.g.attrs['nb_params']->len(weights)
A:keras.models.param_name->'param_{}'.format(n)
A:keras.models.param_dset->h5py.File(filepath).create_group('graph').create_dataset(param_name, param.shape, dtype=param.dtype)
A:keras.models.y_train->output.get_output(True)
A:keras.models.y_test->output.get_output(False)
A:keras.models.weight->theano.tensor.ones_like(y_test)
keras.models.Graph(Model,containers.Graph)
keras.models.Graph.compile(self,optimizer,loss,theano_mode=None)
keras.models.Graph.evaluate(self,data,batch_size=128,verbose=0,sample_weight={})
keras.models.Graph.fit(self,data,batch_size=128,nb_epoch=100,verbose=1,callbacks=[],validation_split=0.0,validation_data=None,shuffle=True,class_weight={},sample_weight={})
keras.models.Graph.load_weights(self,filepath)
keras.models.Graph.predict(self,data,batch_size=128,verbose=0)
keras.models.Graph.predict_on_batch(self,data)
keras.models.Graph.save_weights(self,filepath,overwrite=False)
keras.models.Graph.test_on_batch(self,data,sample_weight={})
keras.models.Graph.train_on_batch(self,data,class_weight={},sample_weight={})
keras.models.Model(object)
keras.models.Model._fit(self,f,ins,out_labels=[],batch_size=128,nb_epoch=100,verbose=1,callbacks=[],val_f=None,val_ins=None,shuffle=True,metrics=[])
keras.models.Model._predict_loop(self,f,ins,batch_size=128,verbose=0)
keras.models.Model._test_loop(self,f,ins,batch_size=128,verbose=0)
keras.models.Model.get_config(self,verbose=0)
keras.models.Model.to_json(self,**kwargs)
keras.models.Model.to_yaml(self,**kwargs)
keras.models.Sequential(Model,containers.Sequential)
keras.models.Sequential.compile(self,optimizer,loss,class_mode='categorical',theano_mode=None)
keras.models.Sequential.evaluate(self,X,y,batch_size=128,show_accuracy=False,verbose=1,sample_weight=None)
keras.models.Sequential.fit(self,X,y,batch_size=128,nb_epoch=100,verbose=1,callbacks=[],validation_split=0.0,validation_data=None,shuffle=True,show_accuracy=False,class_weight=None,sample_weight=None)
keras.models.Sequential.load_weights(self,filepath)
keras.models.Sequential.predict(self,X,batch_size=128,verbose=0)
keras.models.Sequential.predict_classes(self,X,batch_size=128,verbose=1)
keras.models.Sequential.predict_on_batch(self,X)
keras.models.Sequential.predict_proba(self,X,batch_size=128,verbose=1)
keras.models.Sequential.save_weights(self,filepath,overwrite=False)
keras.models.Sequential.test_on_batch(self,X,y,accuracy=False,sample_weight=None)
keras.models.Sequential.train_on_batch(self,X,y,accuracy=False,class_weight=None,sample_weight=None)
keras.models.batch_shuffle(index_array,batch_size)
keras.models.get_function_name(o)
keras.models.make_batches(size,batch_size)
keras.models.model_from_config(config,custom_layers={})
keras.models.model_from_json(json_string,custom_layers={})
keras.models.model_from_yaml(yaml_string,custom_layers={})
keras.models.slice_X(X,start=None,stop=None)
keras.models.standardize_X(X)
keras.models.standardize_weights(y,sample_weight=None,class_weight=None)
keras.models.standardize_y(y)
keras.models.weighted_objective(fn)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/initializations.py----------------------------------------
A:keras.initializations.(fan_in, fan_out)->get_fans(shape)
A:keras.initializations.scale->numpy.sqrt(3.0 / fan_in)
A:keras.initializations.s->numpy.sqrt(6.0 / fan_in)
A:keras.initializations.a->numpy.random.normal(0.0, 1.0, flat_shape)
A:keras.initializations.(u, _, v)->numpy.linalg.svd(a, full_matrices=False)
A:keras.initializations.q->q.reshape(shape).reshape(shape)
keras.initializations.get(identifier)
keras.initializations.get_fans(shape)
keras.initializations.glorot_normal(shape)
keras.initializations.glorot_uniform(shape)
keras.initializations.he_normal(shape)
keras.initializations.he_uniform(shape)
keras.initializations.identity(shape,scale=1)
keras.initializations.lecun_uniform(shape)
keras.initializations.normal(shape,scale=0.05)
keras.initializations.one(shape)
keras.initializations.orthogonal(shape,scale=1.1)
keras.initializations.uniform(shape,scale=0.05)
keras.initializations.zero(shape)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/constraints.py----------------------------------------
A:keras.constraints.norms->theano.tensor.sqrt(T.sum(T.sqr(p), axis=0))
A:keras.constraints.desired->theano.tensor.clip(norms, 0, self.m)
A:keras.constraints.p->theano.shared(p)
keras.constraints.Constraint(self,p)
keras.constraints.Constraint.__call__(self,p)
keras.constraints.Constraint.get_config(self)
keras.constraints.MaxNorm(self,m=2)
keras.constraints.MaxNorm.__init__(self,m=2)
keras.constraints.MaxNorm.get_config(self)
keras.constraints.NonNeg(self,p)
keras.constraints.NonNeg.__call__(self,p)
keras.constraints.UnitNorm(self,p)
keras.constraints.UnitNorm.__call__(self,p)
keras.constraints.get(identifier,kwargs=None)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/utils/theano_utils.py----------------------------------------
keras.utils.theano_utils.alloc_zeros_matrix(*dims)
keras.utils.theano_utils.floatX(X)
keras.utils.theano_utils.ndim_tensor(ndim)
keras.utils.theano_utils.on_gpu()
keras.utils.theano_utils.sharedX(X,dtype=theano.config.floatX,name=None)
keras.utils.theano_utils.shared_ones(shape,dtype=theano.config.floatX,name=None)
keras.utils.theano_utils.shared_scalar(val=0.0,dtype=theano.config.floatX,name=None)
keras.utils.theano_utils.shared_zeros(shape,dtype=theano.config.floatX,name=None)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/utils/visualize_util.py----------------------------------------
A:keras.utils.visualize_util.graph->pydot.Dot(graph_type='digraph')
A:keras.utils.visualize_util.current_node->pydot.Node(node['name'] + str(n))
keras.utils.visualize_util.plot(model,to_file='model.png')


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/utils/io_utils.py----------------------------------------
A:keras.utils.io_utils.refs->defaultdict(int)
A:keras.utils.io_utils.f->tables.open_file(name)
A:keras.utils.io_utils.idx->(self.start + key).tolist()
A:keras.utils.io_utils.atom->tables.Atom.from_dtype(array.dtype)
A:keras.utils.io_utils.ds->tables.open_file(name).createCArray(f.root, 'data', atom, array.shape)
A:keras.utils.io_utils.a->numpy.empty(shape=array.shape, dtype=array.dtype)
keras.utils.io_utils.HDF5Matrix(self,datapath,dataset,start,end,normalizer=None)
keras.utils.io_utils.HDF5Matrix.__getitem__(self,key)
keras.utils.io_utils.HDF5Matrix.__init__(self,datapath,dataset,start,end,normalizer=None)
keras.utils.io_utils.HDF5Matrix.__len__(self)
keras.utils.io_utils.HDF5Matrix.shape(self)
keras.utils.io_utils.load_array(name)
keras.utils.io_utils.save_array(array,name)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/utils/test_utils.py----------------------------------------
A:keras.utils.test_utils.y->numpy.zeros((nb_sample,) + output_shape)
A:keras.utils.test_utils.X->numpy.zeros((nb_sample,) + input_shape)
A:keras.utils.test_utils.X[i]->numpy.random.normal(loc=y_loc[i], scale=1.0, size=input_shape)
A:keras.utils.test_utils.y_loc->numpy.random.random((nb_sample,))
A:keras.utils.test_utils.y[i]->numpy.random.normal(loc=y_loc[i], scale=1.0, size=output_shape)
keras.utils.test_utils.get_test_data(nb_train=1000,nb_test=500,input_shape=(10,),output_shape=(2,),classification=True,nb_class=2)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/utils/generic_utils.py----------------------------------------
A:keras.utils.generic_utils.res->module_params.get(identifier)
A:keras.utils.generic_utils.self.start->time.time()
A:keras.utils.generic_utils.now->time.time()
A:keras.utils.generic_utils.prog_width->int(self.width * prog)
A:keras.utils.generic_utils.self.total_width->len(bar)
keras.utils.generic_utils.Progbar(self,target,width=30,verbose=1)
keras.utils.generic_utils.Progbar.__init__(self,target,width=30,verbose=1)
keras.utils.generic_utils.Progbar.add(self,n,values=[])
keras.utils.generic_utils.Progbar.update(self,current,values=[])
keras.utils.generic_utils.get_from_module(identifier,module_params,module_name,instantiate=False,kwargs=None)
keras.utils.generic_utils.make_tuple(*args)
keras.utils.generic_utils.printv(v,prefix='')


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/utils/layer_utils.py----------------------------------------
A:keras.utils.layer_utils.layer_dict->copy.deepcopy(original_layer_dict)
A:keras.utils.layer_utils.name->copy.deepcopy(original_layer_dict).get('name')
A:keras.utils.layer_utils.mode->copy.deepcopy(original_layer_dict).get('mode')
A:keras.utils.layer_utils.layers->copy.deepcopy(original_layer_dict).get('layers')
A:keras.utils.layer_utils.init_layer->container_from_config(layer, custom_layers=custom_layers)
A:keras.utils.layer_utils.merge_layer->Merge(layer_list, mode)
A:keras.utils.layer_utils.seq_layer->layers.containers.Sequential(layer_list)
A:keras.utils.layer_utils.graph_layer->layers.containers.Graph()
A:keras.utils.layer_utils.inputs->model.get_input(train=False)
A:keras.utils.layer_utils.nodes->copy.deepcopy(original_layer_dict).get('node_config')
A:keras.utils.layer_utils.layer->container_from_config(layer_dict['nodes'].get(node['name']), custom_layers=custom_layers)
A:keras.utils.layer_utils.outputs->copy.deepcopy(original_layer_dict).get('output_config')
A:keras.utils.layer_utils.vname->v.get('name')
A:keras.utils.layer_utils.layer_dict[k]->regularizers.get(vname, v)
A:keras.utils.layer_utils.base_layer->get_layer(name, layer_dict, custom_layers=custom_layers)
A:keras.utils.layer_utils.shape_f->theano.function(inputs, l.get_output(train=False).shape, on_unused_input='ignore')
A:keras.utils.layer_utils.out_shape->tuple(shape_f(*input_dummy))
A:keras.utils.layer_utils.config->l.get_config()
keras.utils.layer_utils.container_from_config(original_layer_dict,custom_layers={})
keras.utils.layer_utils.get_layer(identifier,kwargs=None,custom_layers={})
keras.utils.layer_utils.print_layer_shapes(model,input_shapes)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/utils/np_utils.py----------------------------------------
A:keras.utils.np_utils.y->numpy.asarray(y, dtype='int32')
A:keras.utils.np_utils.Y->numpy.zeros((len(y), nb_classes))
A:keras.utils.np_utils.l2->numpy.atleast_1d(np.linalg.norm(a, order, axis))
A:keras.utils.np_utils.p->scipy.minimum(1 - epsilon, p)
A:keras.utils.np_utils.res->sum(y * sp.log(p) + sp.subtract(1, y) * sp.log(sp.subtract(1, p)))
keras.utils.np_utils.accuracy(p,y)
keras.utils.np_utils.binary_logloss(p,y)
keras.utils.np_utils.categorical_probas_to_classes(p)
keras.utils.np_utils.multiclass_logloss(P,Y)
keras.utils.np_utils.normalize(a,axis=-1,order=2)
keras.utils.np_utils.probas_to_classes(y_pred)
keras.utils.np_utils.to_categorical(y,nb_classes=None)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/utils/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/preprocessing/text.py----------------------------------------
A:keras.preprocessing.text.f->f.replace("'", '').replace("'", '')
A:keras.preprocessing.text.text->text.translate(maketrans(filters, split * len(filters))).translate(maketrans(filters, split * len(filters)))
A:keras.preprocessing.text.seq->text_to_word_sequence(text, self.filters, self.lower, self.split)
A:keras.preprocessing.text.wcounts->list(self.word_counts.items())
A:keras.preprocessing.text.self.word_index->dict(list(zip(sorted_voc, list(range(1, len(sorted_voc) + 1)))))
A:keras.preprocessing.text.self.document_count->len(sequences)
A:keras.preprocessing.text.i->self.word_index.get(w)
A:keras.preprocessing.text.sequences->self.texts_to_sequences(texts)
A:keras.preprocessing.text.X->numpy.zeros((len(sequences), nb_words))
A:keras.preprocessing.text.tf->numpy.log(c / len(seq))
keras.preprocessing.text.Tokenizer(self,nb_words=None,filters=base_filter(),lower=True,split='')
keras.preprocessing.text.Tokenizer.__init__(self,nb_words=None,filters=base_filter(),lower=True,split='')
keras.preprocessing.text.Tokenizer.fit_on_sequences(self,sequences)
keras.preprocessing.text.Tokenizer.fit_on_texts(self,texts)
keras.preprocessing.text.Tokenizer.sequences_to_matrix(self,sequences,mode='binary')
keras.preprocessing.text.Tokenizer.texts_to_matrix(self,texts,mode='binary')
keras.preprocessing.text.Tokenizer.texts_to_sequences(self,texts)
keras.preprocessing.text.Tokenizer.texts_to_sequences_generator(self,texts)
keras.preprocessing.text.base_filter()
keras.preprocessing.text.one_hot(text,n,filters=base_filter(),lower=True,split='')
keras.preprocessing.text.text_to_word_sequence(text,filters=base_filter(),lower=True,split='')


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/preprocessing/sequence.py----------------------------------------
A:keras.preprocessing.sequence.nb_samples->len(sequences)
A:keras.preprocessing.sequence.maxlen->numpy.max(lengths)
A:keras.preprocessing.sequence.x->(np.ones((nb_samples, maxlen)) * value).astype(dtype)
A:keras.preprocessing.sequence.rank->numpy.array(list(range(size)))
A:keras.preprocessing.sequence.window_start->max(0, i - window_size)
A:keras.preprocessing.sequence.window_end->min(len(sequence), i + window_size + 1)
A:keras.preprocessing.sequence.nb_negative_samples->int(len(labels) * negative_samples)
A:keras.preprocessing.sequence.seed->random.randint(0, 10000000.0)
keras.preprocessing.sequence.make_sampling_table(size,sampling_factor=1e-05)
keras.preprocessing.sequence.pad_sequences(sequences,maxlen=None,dtype='int32',padding='pre',truncating='pre',value=0.0)
keras.preprocessing.sequence.skipgrams(sequence,vocabulary_size,window_size=4,negative_samples=1.0,shuffle=True,categorical=False,sampling_table=None)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/preprocessing/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/preprocessing/image.py----------------------------------------
A:keras.preprocessing.image.angle->random.uniform(-rg, rg)
A:keras.preprocessing.image.x->vertical_flip(x)
A:keras.preprocessing.image.crop->random.uniform(0.0, hrg)
A:keras.preprocessing.image.split->random.uniform(0, 1)
A:keras.preprocessing.image.crop_left_pixels->int(split * crop * x.shape[1])
A:keras.preprocessing.image.crop_right_pixels->int((1 - split) * crop * x.shape[1])
A:keras.preprocessing.image.crop_top_pixels->int(split * crop * x.shape[2])
A:keras.preprocessing.image.crop_bottom_pixels->int((1 - split) * crop * x.shape[2])
A:keras.preprocessing.image.x[i]->numpy.flipud(x[i])
A:keras.preprocessing.image.zoom_w->random.uniform(1.0 - rg, 1.0)
A:keras.preprocessing.image.zoom_h->random.uniform(1.0 - rg, 1.0)
A:keras.preprocessing.image.img->self.random_transform(img)
A:keras.preprocessing.image.seed->random.randint(1, 10000000.0)
A:keras.preprocessing.image.nb_batch->int(math.ceil(float(X.shape[0]) / batch_size))
A:keras.preprocessing.image.bX->numpy.zeros(tuple([nb_samples] + list(X.shape)[1:]))
A:keras.preprocessing.image.flatx->numpy.reshape(x, x.shape[0] * x.shape[1] * x.shape[2])
A:keras.preprocessing.image.whitex->numpy.dot(flatx, self.principal_components)
A:keras.preprocessing.image.X->numpy.copy(X)
A:keras.preprocessing.image.aX->numpy.zeros(tuple([rounds * X.shape[0]] + list(X.shape)[1:]))
A:keras.preprocessing.image.aX[i + r * X.shape[0]]->img_to_array(img)
A:keras.preprocessing.image.self.mean->numpy.mean(X, axis=0)
A:keras.preprocessing.image.self.std->numpy.std(X, axis=0)
A:keras.preprocessing.image.flatX->numpy.reshape(X, (X.shape[0], X.shape[1] * X.shape[2] * X.shape[3]))
A:keras.preprocessing.image.(U, S, V)->scipy.linalg.svd(sigma)
A:keras.preprocessing.image.self.principal_components->numpy.dot(np.dot(U, np.diag(1.0 / np.sqrt(S + fudge))), U.T)
keras.preprocessing.image.ImageDataGenerator(self,featurewise_center=True,samplewise_center=False,featurewise_std_normalization=True,samplewise_std_normalization=False,zca_whitening=False,rotation_range=0.0,width_shift_range=0.0,height_shift_range=0.0,horizontal_flip=False,vertical_flip=False)
keras.preprocessing.image.ImageDataGenerator.__init__(self,featurewise_center=True,samplewise_center=False,featurewise_std_normalization=True,samplewise_std_normalization=False,zca_whitening=False,rotation_range=0.0,width_shift_range=0.0,height_shift_range=0.0,horizontal_flip=False,vertical_flip=False)
keras.preprocessing.image.ImageDataGenerator.fit(self,X,augment=False,rounds=1,seed=None)
keras.preprocessing.image.ImageDataGenerator.flow(self,X,y,batch_size=32,shuffle=False,seed=None,save_to_dir=None,save_prefix='',save_format='jpeg')
keras.preprocessing.image.ImageDataGenerator.random_transform(self,x)
keras.preprocessing.image.ImageDataGenerator.standardize(self,x)
keras.preprocessing.image.array_to_img(x,scale=True)
keras.preprocessing.image.horizontal_flip(x)
keras.preprocessing.image.img_to_array(img)
keras.preprocessing.image.list_pictures(directory,ext='jpg|jpeg|bmp|png')
keras.preprocessing.image.load_img(path,grayscale=False)
keras.preprocessing.image.random_barrel_transform(x,intensity)
keras.preprocessing.image.random_channel_shift(x,rg)
keras.preprocessing.image.random_rotation(x,rg,fill_mode='nearest',cval=0.0)
keras.preprocessing.image.random_shear(x,intensity)
keras.preprocessing.image.random_shift(x,wrg,hrg,fill_mode='nearest',cval=0.0)
keras.preprocessing.image.random_zoom(x,rg,fill_mode='nearest',cval=0.0)
keras.preprocessing.image.vertical_flip(x)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/datasets/data_utils.py----------------------------------------
A:keras.datasets.data_utils.datadir->os.path.expanduser(os.path.join('~', '.keras', 'datasets'))
A:keras.datasets.data_utils.untar_fpath->os.path.join(datadir, fname)
A:keras.datasets.data_utils.fpath->os.path.join(datadir, fname)
A:keras.datasets.data_utils.f->open(fpath)
A:keras.datasets.data_utils.progbar->Progbar(total_size)
A:keras.datasets.data_utils.tfile->tarfile.open(fpath, 'r:gz')
keras.datasets.data_utils.ParanoidURLopener(FancyURLopener)
keras.datasets.data_utils.ParanoidURLopener.http_error_default(self,url,fp,errcode,errmsg,headers)
keras.datasets.data_utils.get_file(fname,origin,untar=False)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/datasets/imdb.py----------------------------------------
A:keras.datasets.imdb.path->get_file(path, origin='https://s3.amazonaws.com/text-datasets/imdb.pkl')
A:keras.datasets.imdb.f->open(path, 'rb')
A:keras.datasets.imdb.(X, labels)->six.moves.cPickle.load(f)
A:keras.datasets.imdb.nb_words->max([max(x) for x in X])
keras.datasets.imdb.load_data(path='imdb.pkl',nb_words=None,skip_top=0,maxlen=None,test_split=0.2,seed=113,start_char=1,oov_char=2,index_from=3)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/datasets/cifar100.py----------------------------------------
A:keras.datasets.cifar100.path->get_file(dirname, origin=origin, untar=True)
A:keras.datasets.cifar100.fpath->os.path.join(path, 'test')
A:keras.datasets.cifar100.(X_train, y_train)->load_batch(fpath, label_key=label_mode + '_labels')
A:keras.datasets.cifar100.(X_test, y_test)->load_batch(fpath, label_key=label_mode + '_labels')
A:keras.datasets.cifar100.y_train->numpy.reshape(y_train, (len(y_train), 1))
A:keras.datasets.cifar100.y_test->numpy.reshape(y_test, (len(y_test), 1))
keras.datasets.cifar100.load_data(label_mode='fine')


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/datasets/cifar.py----------------------------------------
A:keras.datasets.cifar.f->open(fpath, 'rb')
A:keras.datasets.cifar.d->six.moves.cPickle.load(f, encoding='bytes')
A:keras.datasets.cifar.data->data.reshape(data.shape[0], 3, 32, 32).reshape(data.shape[0], 3, 32, 32)
keras.datasets.cifar.load_batch(fpath,label_key='labels')


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/datasets/cifar10.py----------------------------------------
A:keras.datasets.cifar10.path->get_file(dirname, origin=origin, untar=True)
A:keras.datasets.cifar10.X_train->numpy.zeros((nb_train_samples, 3, 32, 32), dtype='uint8')
A:keras.datasets.cifar10.y_train->numpy.reshape(y_train, (len(y_train), 1))
A:keras.datasets.cifar10.fpath->os.path.join(path, 'test_batch')
A:keras.datasets.cifar10.(data, labels)->load_batch(fpath)
A:keras.datasets.cifar10.(X_test, y_test)->load_batch(fpath)
A:keras.datasets.cifar10.y_test->numpy.reshape(y_test, (len(y_test), 1))
keras.datasets.cifar10.load_data()


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/datasets/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/datasets/mnist.py----------------------------------------
A:keras.datasets.mnist.path->get_file(path, origin='https://s3.amazonaws.com/img-datasets/mnist.pkl.gz')
A:keras.datasets.mnist.f->open(path, 'rb')
A:keras.datasets.mnist.data->six.moves.cPickle.load(f, encoding='bytes')
keras.datasets.mnist.load_data(path='mnist.pkl.gz')


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/datasets/reuters.py----------------------------------------
A:keras.datasets.reuters.s->open(os.path.join(path, fname)).read()
A:keras.datasets.reuters.topic->topics.replace('<D>', '').replace('</D>', '')
A:keras.datasets.reuters.items->list(topic_counts.items())
A:keras.datasets.reuters.kept_topics->set()
A:keras.datasets.reuters.topic_index->len(topic_indexes)
A:keras.datasets.reuters.tokenizer->Tokenizer()
A:keras.datasets.reuters.X->Tokenizer().texts_to_sequences(kept_wires)
A:keras.datasets.reuters.reverse_word_index->dict([(v, k) for (k, v) in tokenizer.word_index.items()])
A:keras.datasets.reuters.path->get_file(path, origin='https://s3.amazonaws.com/text-datasets/reuters_word_index.pkl')
A:keras.datasets.reuters.f->open(path, 'rb')
A:keras.datasets.reuters.(X, labels)->six.moves.cPickle.load(f)
A:keras.datasets.reuters.nb_words->max([max(x) for x in X])
A:keras.datasets.reuters.((X_train, y_train), (X_test, y_test))->load_data()
keras.datasets.reuters.get_word_index(path='reuters_word_index.pkl')
keras.datasets.reuters.load_data(path='reuters.pkl',nb_words=None,skip_top=0,maxlen=None,test_split=0.2,seed=113,start_char=1,oov_char=2,index_from=3)
keras.datasets.reuters.make_reuters_dataset(path=os.path.join('datasets','temp','reuters21578'),min_samples_per_topic=15)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/wrappers/scikit_learn.py----------------------------------------
A:keras.wrappers.scikit_learn.self.classes_->numpy.arange(0, y.shape[1])
A:keras.wrappers.scikit_learn.y->to_categorical(y)
A:keras.wrappers.scikit_learn.self.compiled_model_->copy.deepcopy(self.model)
A:keras.wrappers.scikit_learn.history->self.compiled_model_.fit(X, y, batch_size=self.train_batch_size, nb_epoch=self.nb_epoch, verbose=self.verbose, shuffle=self.shuffle, show_accuracy=self.show_accuracy, validation_split=self.validation_split, validation_data=self.validation_data, callbacks=self.callbacks)
A:keras.wrappers.scikit_learn.self.config_->self.model.get_config()
A:keras.wrappers.scikit_learn.self.weights_->self.model.get_weights()
A:keras.wrappers.scikit_learn.(loss, accuracy)->self.compiled_model_.evaluate(X, y, batch_size=self.test_batch_size, show_accuracy=True, verbose=self.verbose)
A:keras.wrappers.scikit_learn.loss->self.compiled_model_.evaluate(X, y, batch_size=self.test_batch_size, show_accuracy=False, verbose=self.verbose)
keras.wrappers.scikit_learn.BaseWrapper(self,model,optimizer,loss,train_batch_size=128,test_batch_size=128,nb_epoch=100,shuffle=True,show_accuracy=False,validation_split=0,validation_data=None,callbacks=None,verbose=0)
keras.wrappers.scikit_learn.BaseWrapper.__init__(self,model,optimizer,loss,train_batch_size=128,test_batch_size=128,nb_epoch=100,shuffle=True,show_accuracy=False,validation_split=0,validation_data=None,callbacks=None,verbose=0)
keras.wrappers.scikit_learn.BaseWrapper.fit(self,X,y)
keras.wrappers.scikit_learn.BaseWrapper.get_params(self,deep=True)
keras.wrappers.scikit_learn.BaseWrapper.set_params(self,**params)
keras.wrappers.scikit_learn.KerasClassifier(self,model,optimizer='adam',loss='categorical_crossentropy',**kwargs)
keras.wrappers.scikit_learn.KerasClassifier.__init__(self,model,optimizer='adam',loss='categorical_crossentropy',**kwargs)
keras.wrappers.scikit_learn.KerasClassifier.predict(self,X)
keras.wrappers.scikit_learn.KerasClassifier.predict_proba(self,X)
keras.wrappers.scikit_learn.KerasClassifier.score(self,X,y)
keras.wrappers.scikit_learn.KerasRegressor(self,model,optimizer='adam',loss='mean_squared_error',**kwargs)
keras.wrappers.scikit_learn.KerasRegressor.__init__(self,model,optimizer='adam',loss='mean_squared_error',**kwargs)
keras.wrappers.scikit_learn.KerasRegressor.predict(self,X)
keras.wrappers.scikit_learn.KerasRegressor.score(self,X,y)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/wrappers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/layers/advanced_activations.py----------------------------------------
A:keras.layers.advanced_activations.X->self.get_input(train)
A:keras.layers.advanced_activations.base_config->super(ThresholdedReLU, self).get_config()
A:keras.layers.advanced_activations.self.init->initializations.get(init)
A:keras.layers.advanced_activations.self.alphas->sharedX(self.alpha_init * np.ones(input_shape))
A:keras.layers.advanced_activations.pos->theano.tensor.nnet.relu(X)
A:keras.layers.advanced_activations.self.betas->sharedX(self.beta_init * np.ones(input_shape))
keras.layers.advanced_activations.LeakyReLU(self,alpha=0.3,**kwargs)
keras.layers.advanced_activations.LeakyReLU.__init__(self,alpha=0.3,**kwargs)
keras.layers.advanced_activations.LeakyReLU.get_config(self)
keras.layers.advanced_activations.LeakyReLU.get_output(self,train)
keras.layers.advanced_activations.PReLU(self,init='zero',weights=None,**kwargs)
keras.layers.advanced_activations.PReLU.__init__(self,init='zero',weights=None,**kwargs)
keras.layers.advanced_activations.PReLU.build(self)
keras.layers.advanced_activations.PReLU.get_config(self)
keras.layers.advanced_activations.PReLU.get_output(self,train)
keras.layers.advanced_activations.ParametricSoftplus(self,alpha_init=0.2,beta_init=5.0,weights=None,**kwargs)
keras.layers.advanced_activations.ParametricSoftplus.__init__(self,alpha_init=0.2,beta_init=5.0,weights=None,**kwargs)
keras.layers.advanced_activations.ParametricSoftplus.build(self)
keras.layers.advanced_activations.ParametricSoftplus.get_config(self)
keras.layers.advanced_activations.ParametricSoftplus.get_output(self,train)
keras.layers.advanced_activations.ThresholdedLinear(self,theta=1.0,**kwargs)
keras.layers.advanced_activations.ThresholdedLinear.__init__(self,theta=1.0,**kwargs)
keras.layers.advanced_activations.ThresholdedLinear.get_config(self)
keras.layers.advanced_activations.ThresholdedLinear.get_output(self,train)
keras.layers.advanced_activations.ThresholdedReLU(self,theta=1.0,**kwargs)
keras.layers.advanced_activations.ThresholdedReLU.__init__(self,theta=1.0,**kwargs)
keras.layers.advanced_activations.ThresholdedReLU.get_config(self)
keras.layers.advanced_activations.ThresholdedReLU.get_output(self,train)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/layers/containers.py----------------------------------------
A:keras.layers.containers.(params, regularizers, constraints, updates)->Layer().get_params()
A:keras.layers.containers.self.layers[0].input->ndim_tensor(ndim)
A:keras.layers.containers.nb_param->len(self.layers[i].params)
A:keras.layers.containers.self.namespace->set()
A:keras.layers.containers.layer->Layer()
A:keras.layers.containers.layer.input->theano.tensor.imatrix()
A:keras.layers.containers.merge->Merge(to_merge, mode=merge_mode, concat_axis=concat_axis)
keras.layers.containers.Graph(self)
keras.layers.containers.Graph.__init__(self)
keras.layers.containers.Graph.add_input(self,name,input_shape,dtype='float')
keras.layers.containers.Graph.add_node(self,layer,name,input=None,inputs=[],merge_mode='concat',concat_axis=-1,create_output=False)
keras.layers.containers.Graph.add_output(self,name,input=None,inputs=[],merge_mode='concat',concat_axis=-1)
keras.layers.containers.Graph.count_params(self)
keras.layers.containers.Graph.get_config(self)
keras.layers.containers.Graph.get_input(self,train=False)
keras.layers.containers.Graph.get_output(self,train=False)
keras.layers.containers.Graph.input(self)
keras.layers.containers.Graph.nb_input(self)
keras.layers.containers.Graph.nb_output(self)
keras.layers.containers.Graph.output_shape(self)
keras.layers.containers.Graph.set_previous(self,layer,connection_map={})
keras.layers.containers.Sequential(self,layers=[])
keras.layers.containers.Sequential.__init__(self,layers=[])
keras.layers.containers.Sequential.add(self,layer)
keras.layers.containers.Sequential.count_params(self)
keras.layers.containers.Sequential.get_config(self)
keras.layers.containers.Sequential.get_input(self,train=False)
keras.layers.containers.Sequential.get_output(self,train=False)
keras.layers.containers.Sequential.get_weights(self)
keras.layers.containers.Sequential.input(self)
keras.layers.containers.Sequential.output_shape(self)
keras.layers.containers.Sequential.set_input(self)
keras.layers.containers.Sequential.set_previous(self,layer)
keras.layers.containers.Sequential.set_weights(self,weights)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/layers/convolutional.py----------------------------------------
A:keras.layers.convolutional.output_length->min(input_length, stride - stride % 2)
A:keras.layers.convolutional.self.init->initializations.get(init)
A:keras.layers.convolutional.self.activation->activations.get(activation)
A:keras.layers.convolutional.self.W_regularizer->regularizers.get(W_regularizer)
A:keras.layers.convolutional.self.b_regularizer->regularizers.get(b_regularizer)
A:keras.layers.convolutional.self.activity_regularizer->regularizers.get(activity_regularizer)
A:keras.layers.convolutional.self.W_constraint->constraints.get(W_constraint)
A:keras.layers.convolutional.self.b_constraint->constraints.get(b_constraint)
A:keras.layers.convolutional.self.input->theano.tensor.tensor4()
A:keras.layers.convolutional.self.W->self.init(self.W_shape)
A:keras.layers.convolutional.self.b->shared_zeros((self.nb_filter,))
A:keras.layers.convolutional.length->pool_output_length(input_shape[1], self.pool_length, self.ignore_border, self.stride)
A:keras.layers.convolutional.X->self.get_input(train)
A:keras.layers.convolutional.conv_out->theano.tensor.nnet.conv.conv2d(X, self.W, border_mode=border_mode, subsample=self.subsample, image_shape=self.input_shape, filter_shape=self.W_shape)
A:keras.layers.convolutional.output->theano.tensor.zeros(output_shape)
A:keras.layers.convolutional.base_config->super(ZeroPadding2D, self).get_config()
A:keras.layers.convolutional.self.subsample->tuple(subsample)
A:keras.layers.convolutional.rows->pool_output_length(input_shape[2], self.pool_size[0], self.ignore_border, self.stride[0])
A:keras.layers.convolutional.cols->pool_output_length(input_shape[3], self.pool_size[1], self.ignore_border, self.stride[1])
A:keras.layers.convolutional.self.pool_size->tuple(pool_size)
A:keras.layers.convolutional.self.stride->tuple(stride)
A:keras.layers.convolutional.self.size->tuple(size)
A:keras.layers.convolutional.Y->theano.tensor.extra_ops.repeat(X, self.size[0], axis=2)
A:keras.layers.convolutional.self.padding->tuple(padding)
keras.layers.convolutional.Convolution1D(self,nb_filter,filter_length,init='uniform',activation='linear',weights=None,border_mode='valid',subsample_length=1,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,input_dim=None,input_length=None,**kwargs)
keras.layers.convolutional.Convolution1D.__init__(self,nb_filter,filter_length,init='uniform',activation='linear',weights=None,border_mode='valid',subsample_length=1,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,input_dim=None,input_length=None,**kwargs)
keras.layers.convolutional.Convolution1D.build(self)
keras.layers.convolutional.Convolution1D.get_config(self)
keras.layers.convolutional.Convolution1D.get_output(self,train=False)
keras.layers.convolutional.Convolution1D.output_shape(self)
keras.layers.convolutional.Convolution2D(self,nb_filter,nb_row,nb_col,init='glorot_uniform',activation='linear',weights=None,border_mode='valid',subsample=(1,1),W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,**kwargs)
keras.layers.convolutional.Convolution2D.__init__(self,nb_filter,nb_row,nb_col,init='glorot_uniform',activation='linear',weights=None,border_mode='valid',subsample=(1,1),W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,**kwargs)
keras.layers.convolutional.Convolution2D.build(self)
keras.layers.convolutional.Convolution2D.get_config(self)
keras.layers.convolutional.Convolution2D.get_output(self,train=False)
keras.layers.convolutional.Convolution2D.output_shape(self)
keras.layers.convolutional.MaxPooling1D(self,pool_length=2,stride=None,ignore_border=True,**kwargs)
keras.layers.convolutional.MaxPooling1D.__init__(self,pool_length=2,stride=None,ignore_border=True,**kwargs)
keras.layers.convolutional.MaxPooling1D.get_config(self)
keras.layers.convolutional.MaxPooling1D.get_output(self,train=False)
keras.layers.convolutional.MaxPooling1D.output_shape(self)
keras.layers.convolutional.MaxPooling2D(self,pool_size=(2,2),stride=None,ignore_border=True,**kwargs)
keras.layers.convolutional.MaxPooling2D.__init__(self,pool_size=(2,2),stride=None,ignore_border=True,**kwargs)
keras.layers.convolutional.MaxPooling2D.get_config(self)
keras.layers.convolutional.MaxPooling2D.get_output(self,train=False)
keras.layers.convolutional.MaxPooling2D.output_shape(self)
keras.layers.convolutional.UpSample1D(self,length=2,**kwargs)
keras.layers.convolutional.UpSample1D.__init__(self,length=2,**kwargs)
keras.layers.convolutional.UpSample1D.get_config(self)
keras.layers.convolutional.UpSample1D.get_output(self,train=False)
keras.layers.convolutional.UpSample1D.output_shape(self)
keras.layers.convolutional.UpSample2D(self,size=(2,2),**kwargs)
keras.layers.convolutional.UpSample2D.__init__(self,size=(2,2),**kwargs)
keras.layers.convolutional.UpSample2D.get_config(self)
keras.layers.convolutional.UpSample2D.get_output(self,train=False)
keras.layers.convolutional.UpSample2D.output_shape(self)
keras.layers.convolutional.ZeroPadding1D(self,padding=1,**kwargs)
keras.layers.convolutional.ZeroPadding1D.__init__(self,padding=1,**kwargs)
keras.layers.convolutional.ZeroPadding1D.get_config(self)
keras.layers.convolutional.ZeroPadding1D.get_output(self,train=False)
keras.layers.convolutional.ZeroPadding1D.output_shape(self)
keras.layers.convolutional.ZeroPadding2D(self,padding=(1,1),**kwargs)
keras.layers.convolutional.ZeroPadding2D.__init__(self,padding=(1,1),**kwargs)
keras.layers.convolutional.ZeroPadding2D.get_config(self)
keras.layers.convolutional.ZeroPadding2D.get_output(self,train=False)
keras.layers.convolutional.ZeroPadding2D.output_shape(self)
keras.layers.convolutional.conv_output_length(input_length,filter_size,border_mode,stride)
keras.layers.convolutional.pool_output_length(input_length,pool_size,ignore_border,stride)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/layers/core.py----------------------------------------
A:keras.layers.core.self.input->theano.tensor.matrix()
A:keras.layers.core.X->self.get_input(train)
A:keras.layers.core.base_config->super(MaxoutDense, self).get_config()
A:keras.layers.core.s->self.layers[0].get_output(train)
A:keras.layers.core.(params, regs, consts, updates)->l.get_params()
A:keras.layers.core.output_shape->copy.copy(input_shape)
A:keras.layers.core.inputs->OrderedDict()
A:keras.layers.core.inputs[X.name]->self.layers[i].get_output(train)
A:keras.layers.core.o->self.layers[i].get_input(train)
A:keras.layers.core.nb_param->len(self.encoder.params)
A:keras.layers.core.self.srng->RandomStreams(seed=np.random.randint(10000000.0))
A:keras.layers.core.self.activation->activations.get(activation)
A:keras.layers.core.self.dims->tuple(dims)
A:keras.layers.core.input_shape->list(self.input_shape)
A:keras.layers.core.stacked->theano.tensor.stack(*tensors)
A:keras.layers.core.self.init->initializations.get(init)
A:keras.layers.core.self.W_regularizer->regularizers.get(W_regularizer)
A:keras.layers.core.self.b_regularizer->regularizers.get(b_regularizer)
A:keras.layers.core.self.activity_regularizer->regularizers.get(activity_regularizer)
A:keras.layers.core.self.W_constraint->constraints.get(W_constraint)
A:keras.layers.core.self.b_constraint->constraints.get(b_constraint)
A:keras.layers.core.self.W->self.init((self.nb_feature, input_dim, self.output_dim))
A:keras.layers.core.self.b->shared_zeros((self.nb_feature, self.output_dim))
A:keras.layers.core.output->theano.tensor.max(T.dot(X, self.W) + self.b, axis=1)
A:keras.layers.core.activity_regularizer->ActivityRegularizer(l1=l1, l2=l2)
A:keras.layers.core.(params, regularizers, constraints, updates)->layer.get_params()
keras.layers.core.Activation(self,activation,target=0,beta=0.1,**kwargs)
keras.layers.core.Activation.__init__(self,activation,target=0,beta=0.1,**kwargs)
keras.layers.core.Activation.get_config(self)
keras.layers.core.Activation.get_output(self,train=False)
keras.layers.core.ActivityRegularization(self,l1=0.0,l2=0.0,**kwargs)
keras.layers.core.ActivityRegularization.__init__(self,l1=0.0,l2=0.0,**kwargs)
keras.layers.core.ActivityRegularization.get_config(self)
keras.layers.core.ActivityRegularization.get_output(self,train=False)
keras.layers.core.AutoEncoder(self,encoder,decoder,output_reconstruction=True,weights=None,**kwargs)
keras.layers.core.AutoEncoder.__init__(self,encoder,decoder,output_reconstruction=True,weights=None,**kwargs)
keras.layers.core.AutoEncoder._get_hidden(self,train=False)
keras.layers.core.AutoEncoder.get_config(self)
keras.layers.core.AutoEncoder.get_input(self,train=False)
keras.layers.core.AutoEncoder.get_output(self,train=False)
keras.layers.core.AutoEncoder.get_weights(self)
keras.layers.core.AutoEncoder.input(self)
keras.layers.core.AutoEncoder.input_shape(self)
keras.layers.core.AutoEncoder.output_shape(self)
keras.layers.core.AutoEncoder.set_previous(self,node)
keras.layers.core.AutoEncoder.set_weights(self,weights)
keras.layers.core.Dense(self,output_dim,init='glorot_uniform',activation='linear',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,input_dim=None,**kwargs)
keras.layers.core.Dense.__init__(self,output_dim,init='glorot_uniform',activation='linear',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,input_dim=None,**kwargs)
keras.layers.core.Dense.build(self)
keras.layers.core.Dense.get_config(self)
keras.layers.core.Dense.get_output(self,train=False)
keras.layers.core.Dense.output_shape(self)
keras.layers.core.Dropout(self,p,**kwargs)
keras.layers.core.Dropout.__init__(self,p,**kwargs)
keras.layers.core.Dropout.get_config(self)
keras.layers.core.Dropout.get_output(self,train=False)
keras.layers.core.Flatten(self,**kwargs)
keras.layers.core.Flatten.__init__(self,**kwargs)
keras.layers.core.Flatten.get_output(self,train=False)
keras.layers.core.Flatten.output_shape(self)
keras.layers.core.Layer(self,**kwargs)
keras.layers.core.Layer.__init__(self,**kwargs)
keras.layers.core.Layer.build(self)
keras.layers.core.Layer.count_params(self)
keras.layers.core.Layer.get_config(self)
keras.layers.core.Layer.get_input(self,train=False)
keras.layers.core.Layer.get_output(self,train=False)
keras.layers.core.Layer.get_output_mask(self,train=None)
keras.layers.core.Layer.get_params(self)
keras.layers.core.Layer.get_weights(self)
keras.layers.core.Layer.input_shape(self)
keras.layers.core.Layer.nb_input(self)
keras.layers.core.Layer.nb_output(self)
keras.layers.core.Layer.output_shape(self)
keras.layers.core.Layer.set_input_shape(self,input_shape)
keras.layers.core.Layer.set_name(self,name)
keras.layers.core.Layer.set_previous(self,layer,connection_map={})
keras.layers.core.Layer.set_weights(self,weights)
keras.layers.core.Layer.supports_masked_input(self)
keras.layers.core.MaskedLayer(Layer)
keras.layers.core.MaskedLayer.get_input_mask(self,train=False)
keras.layers.core.MaskedLayer.get_output_mask(self,train=False)
keras.layers.core.MaskedLayer.supports_masked_input(self)
keras.layers.core.Masking(self,mask_value=0.0,**kwargs)
keras.layers.core.Masking.__init__(self,mask_value=0.0,**kwargs)
keras.layers.core.Masking.get_config(self)
keras.layers.core.Masking.get_output(self,train=False)
keras.layers.core.Masking.get_output_mask(self,train=False)
keras.layers.core.MaxoutDense(self,output_dim,nb_feature=4,init='glorot_uniform',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,input_dim=None,**kwargs)
keras.layers.core.MaxoutDense.__init__(self,output_dim,nb_feature=4,init='glorot_uniform',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,input_dim=None,**kwargs)
keras.layers.core.MaxoutDense.build(self)
keras.layers.core.MaxoutDense.get_config(self)
keras.layers.core.MaxoutDense.get_output(self,train=False)
keras.layers.core.MaxoutDense.output_shape(self)
keras.layers.core.Merge(self,layers,mode='sum',concat_axis=-1)
keras.layers.core.Merge.__init__(self,layers,mode='sum',concat_axis=-1)
keras.layers.core.Merge.get_config(self)
keras.layers.core.Merge.get_input(self,train=False)
keras.layers.core.Merge.get_output(self,train=False)
keras.layers.core.Merge.get_output_mask(self,train=None)
keras.layers.core.Merge.get_params(self)
keras.layers.core.Merge.get_weights(self)
keras.layers.core.Merge.input(self)
keras.layers.core.Merge.output_shape(self)
keras.layers.core.Merge.set_weights(self,weights)
keras.layers.core.Merge.supports_masked_input(self)
keras.layers.core.Permute(self,dims,**kwargs)
keras.layers.core.Permute.__init__(self,dims,**kwargs)
keras.layers.core.Permute.get_config(self)
keras.layers.core.Permute.get_output(self,train=False)
keras.layers.core.Permute.output_shape(self)
keras.layers.core.RepeatVector(self,n,**kwargs)
keras.layers.core.RepeatVector.__init__(self,n,**kwargs)
keras.layers.core.RepeatVector.get_config(self)
keras.layers.core.RepeatVector.get_output(self,train=False)
keras.layers.core.RepeatVector.output_shape(self)
keras.layers.core.Reshape(self,dims,**kwargs)
keras.layers.core.Reshape.__init__(self,dims,**kwargs)
keras.layers.core.Reshape.get_config(self)
keras.layers.core.Reshape.get_output(self,train=False)
keras.layers.core.Reshape.output_shape(self)
keras.layers.core.TimeDistributedDense(self,output_dim,init='glorot_uniform',activation='linear',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,input_dim=None,input_length=None,**kwargs)
keras.layers.core.TimeDistributedDense.__init__(self,output_dim,init='glorot_uniform',activation='linear',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,input_dim=None,input_length=None,**kwargs)
keras.layers.core.TimeDistributedDense.build(self)
keras.layers.core.TimeDistributedDense.get_config(self)
keras.layers.core.TimeDistributedDense.get_output(self,train=False)
keras.layers.core.TimeDistributedDense.output_shape(self)
keras.layers.core.TimeDistributedMerge(self,mode='sum',**kwargs)
keras.layers.core.TimeDistributedMerge.__init__(self,mode='sum',**kwargs)
keras.layers.core.TimeDistributedMerge.get_config(self)
keras.layers.core.TimeDistributedMerge.get_output(self,train=False)
keras.layers.core.TimeDistributedMerge.output_shape(self)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/layers/recurrent.py----------------------------------------
A:keras.layers.recurrent.mask->theano.tensor.concatenate([padding, mask], axis=0)
A:keras.layers.recurrent.padding->alloc_zeros_matrix(pad, mask.shape[1], 1)
A:keras.layers.recurrent.self.init->initializations.get(init)
A:keras.layers.recurrent.self.inner_init->initializations.get(inner_init)
A:keras.layers.recurrent.self.activation->activations.get(activation)
A:keras.layers.recurrent.self.input->theano.tensor.tensor3()
A:keras.layers.recurrent.self.W->self.init((input_dim, self.output_dim))
A:keras.layers.recurrent.self.U->self.inner_init((self.output_dim, self.output_dim))
A:keras.layers.recurrent.self.b->shared_zeros(self.output_dim)
A:keras.layers.recurrent.X->X.dimshuffle((1, 0, 2)).dimshuffle((1, 0, 2))
A:keras.layers.recurrent.padded_mask->self.get_padded_shuffled_mask(train, X, pad=1)
A:keras.layers.recurrent.(outputs, updates)->theano.scan(self._step, sequences=[x_z, x_r, x_h, padded_mask], outputs_info=T.unbroadcast(alloc_zeros_matrix(X.shape[1], self.output_dim), 1), non_sequences=[self.U_z, self.U_r, self.U_h], truncate_gradient=self.truncate_gradient)
A:keras.layers.recurrent.base_config->super(JZS3, self).get_config()
A:keras.layers.recurrent.self.inner_activation->activations.get(inner_activation)
A:keras.layers.recurrent.initial->theano.tensor.unbroadcast(T.unbroadcast(alloc_zeros_matrix(self.depth, X.shape[1], self.output_dim), 0), 2)
A:keras.layers.recurrent.self.W_z->self.init((input_dim, self.output_dim))
A:keras.layers.recurrent.self.U_z->self.inner_init((self.output_dim, self.output_dim))
A:keras.layers.recurrent.self.b_z->shared_zeros(self.output_dim)
A:keras.layers.recurrent.self.W_r->self.init((input_dim, self.output_dim))
A:keras.layers.recurrent.self.U_r->self.inner_init((self.output_dim, self.output_dim))
A:keras.layers.recurrent.self.b_r->shared_zeros(self.output_dim)
A:keras.layers.recurrent.self.W_h->self.init((input_dim, self.output_dim))
A:keras.layers.recurrent.self.U_h->self.inner_init((self.output_dim, self.output_dim))
A:keras.layers.recurrent.self.b_h->shared_zeros(self.output_dim)
A:keras.layers.recurrent.z->self.inner_activation(xz_t + T.dot(T.tanh(h_mask_tm1), u_z))
A:keras.layers.recurrent.r->self.inner_activation(xr_t + T.dot(h_mask_tm1, u_r))
A:keras.layers.recurrent.hh_t->self.activation(xh_t + T.dot(r * h_mask_tm1, u_h))
A:keras.layers.recurrent.self.forget_bias_init->initializations.get(forget_bias_init)
A:keras.layers.recurrent.self.W_i->self.init((input_dim, self.output_dim))
A:keras.layers.recurrent.self.U_i->self.inner_init((self.output_dim, self.output_dim))
A:keras.layers.recurrent.self.b_i->shared_zeros(self.output_dim)
A:keras.layers.recurrent.self.W_f->self.init((input_dim, self.output_dim))
A:keras.layers.recurrent.self.U_f->self.inner_init((self.output_dim, self.output_dim))
A:keras.layers.recurrent.self.b_f->self.forget_bias_init(self.output_dim)
A:keras.layers.recurrent.self.W_c->self.init((input_dim, self.output_dim))
A:keras.layers.recurrent.self.U_c->self.inner_init((self.output_dim, self.output_dim))
A:keras.layers.recurrent.self.b_c->shared_zeros(self.output_dim)
A:keras.layers.recurrent.self.W_o->self.init((input_dim, self.output_dim))
A:keras.layers.recurrent.self.U_o->self.inner_init((self.output_dim, self.output_dim))
A:keras.layers.recurrent.self.b_o->shared_zeros(self.output_dim)
A:keras.layers.recurrent.i_t->self.inner_activation(xi_t + T.dot(h_mask_tm1, u_i))
A:keras.layers.recurrent.f_t->self.inner_activation(xf_t + T.dot(h_mask_tm1, u_f))
A:keras.layers.recurrent.o_t->self.inner_activation(xo_t + T.dot(h_mask_tm1, u_o))
A:keras.layers.recurrent.([outputs, memories], updates)->theano.scan(self._step, sequences=[xi, xf, xo, xc, padded_mask], outputs_info=[T.unbroadcast(alloc_zeros_matrix(X.shape[1], self.output_dim), 1), T.unbroadcast(alloc_zeros_matrix(X.shape[1], self.output_dim), 1)], non_sequences=[self.U_i, self.U_f, self.U_o, self.U_c], truncate_gradient=self.truncate_gradient)
A:keras.layers.recurrent.self.Pmat->theano.shared(P, name=None)
keras.layers.recurrent.GRU(self,output_dim,init='glorot_uniform',inner_init='orthogonal',activation='sigmoid',inner_activation='hard_sigmoid',weights=None,truncate_gradient=-1,return_sequences=False,input_dim=None,input_length=None,**kwargs)
keras.layers.recurrent.GRU.__init__(self,output_dim,init='glorot_uniform',inner_init='orthogonal',activation='sigmoid',inner_activation='hard_sigmoid',weights=None,truncate_gradient=-1,return_sequences=False,input_dim=None,input_length=None,**kwargs)
keras.layers.recurrent.GRU._step(self,xz_t,xr_t,xh_t,mask_tm1,h_tm1,u_z,u_r,u_h)
keras.layers.recurrent.GRU.build(self)
keras.layers.recurrent.GRU.get_config(self)
keras.layers.recurrent.GRU.get_output(self,train=False)
keras.layers.recurrent.JZS1(self,output_dim,init='glorot_uniform',inner_init='orthogonal',activation='tanh',inner_activation='sigmoid',weights=None,truncate_gradient=-1,return_sequences=False,input_dim=None,input_length=None,**kwargs)
keras.layers.recurrent.JZS1.__init__(self,output_dim,init='glorot_uniform',inner_init='orthogonal',activation='tanh',inner_activation='sigmoid',weights=None,truncate_gradient=-1,return_sequences=False,input_dim=None,input_length=None,**kwargs)
keras.layers.recurrent.JZS1._step(self,xz_t,xr_t,xh_t,mask_tm1,h_tm1,u_r,u_h)
keras.layers.recurrent.JZS1.build(self)
keras.layers.recurrent.JZS1.get_config(self)
keras.layers.recurrent.JZS1.get_output(self,train=False)
keras.layers.recurrent.JZS2(self,output_dim,init='glorot_uniform',inner_init='orthogonal',activation='tanh',inner_activation='sigmoid',weights=None,truncate_gradient=-1,return_sequences=False,input_dim=None,input_length=None,**kwargs)
keras.layers.recurrent.JZS2.__init__(self,output_dim,init='glorot_uniform',inner_init='orthogonal',activation='tanh',inner_activation='sigmoid',weights=None,truncate_gradient=-1,return_sequences=False,input_dim=None,input_length=None,**kwargs)
keras.layers.recurrent.JZS2._step(self,xz_t,xr_t,xh_t,mask_tm1,h_tm1,u_z,u_r,u_h)
keras.layers.recurrent.JZS2.build(self)
keras.layers.recurrent.JZS2.get_config(self)
keras.layers.recurrent.JZS2.get_output(self,train=False)
keras.layers.recurrent.JZS3(self,output_dim,init='glorot_uniform',inner_init='orthogonal',activation='tanh',inner_activation='sigmoid',weights=None,truncate_gradient=-1,return_sequences=False,input_dim=None,input_length=None,**kwargs)
keras.layers.recurrent.JZS3.__init__(self,output_dim,init='glorot_uniform',inner_init='orthogonal',activation='tanh',inner_activation='sigmoid',weights=None,truncate_gradient=-1,return_sequences=False,input_dim=None,input_length=None,**kwargs)
keras.layers.recurrent.JZS3._step(self,xz_t,xr_t,xh_t,mask_tm1,h_tm1,u_z,u_r,u_h)
keras.layers.recurrent.JZS3.build(self)
keras.layers.recurrent.JZS3.get_config(self)
keras.layers.recurrent.JZS3.get_output(self,train=False)
keras.layers.recurrent.LSTM(self,output_dim,init='glorot_uniform',inner_init='orthogonal',forget_bias_init='one',activation='tanh',inner_activation='hard_sigmoid',weights=None,truncate_gradient=-1,return_sequences=False,input_dim=None,input_length=None,**kwargs)
keras.layers.recurrent.LSTM.__init__(self,output_dim,init='glorot_uniform',inner_init='orthogonal',forget_bias_init='one',activation='tanh',inner_activation='hard_sigmoid',weights=None,truncate_gradient=-1,return_sequences=False,input_dim=None,input_length=None,**kwargs)
keras.layers.recurrent.LSTM._step(self,xi_t,xf_t,xo_t,xc_t,mask_tm1,h_tm1,c_tm1,u_i,u_f,u_o,u_c)
keras.layers.recurrent.LSTM.build(self)
keras.layers.recurrent.LSTM.get_config(self)
keras.layers.recurrent.LSTM.get_output(self,train=False)
keras.layers.recurrent.Recurrent(MaskedLayer)
keras.layers.recurrent.Recurrent.get_output_mask(self,train=None)
keras.layers.recurrent.Recurrent.get_padded_shuffled_mask(self,train,X,pad=0)
keras.layers.recurrent.Recurrent.output_shape(self)
keras.layers.recurrent.SimpleDeepRNN(self,output_dim,depth=3,init='glorot_uniform',inner_init='orthogonal',activation='sigmoid',inner_activation='hard_sigmoid',weights=None,truncate_gradient=-1,return_sequences=False,input_dim=None,input_length=None,**kwargs)
keras.layers.recurrent.SimpleDeepRNN.__init__(self,output_dim,depth=3,init='glorot_uniform',inner_init='orthogonal',activation='sigmoid',inner_activation='hard_sigmoid',weights=None,truncate_gradient=-1,return_sequences=False,input_dim=None,input_length=None,**kwargs)
keras.layers.recurrent.SimpleDeepRNN._step(self,x_t,*args)
keras.layers.recurrent.SimpleDeepRNN.build(self)
keras.layers.recurrent.SimpleDeepRNN.get_config(self)
keras.layers.recurrent.SimpleDeepRNN.get_output(self,train=False)
keras.layers.recurrent.SimpleRNN(self,output_dim,init='glorot_uniform',inner_init='orthogonal',activation='sigmoid',weights=None,truncate_gradient=-1,return_sequences=False,input_dim=None,input_length=None,**kwargs)
keras.layers.recurrent.SimpleRNN.__init__(self,output_dim,init='glorot_uniform',inner_init='orthogonal',activation='sigmoid',weights=None,truncate_gradient=-1,return_sequences=False,input_dim=None,input_length=None,**kwargs)
keras.layers.recurrent.SimpleRNN._step(self,x_t,mask_tm1,h_tm1,u)
keras.layers.recurrent.SimpleRNN.build(self)
keras.layers.recurrent.SimpleRNN.get_config(self)
keras.layers.recurrent.SimpleRNN.get_output(self,train=False)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/layers/embeddings.py----------------------------------------
A:keras.layers.embeddings.self.init->initializations.get(init)
A:keras.layers.embeddings.self.W_constraint->constraints.get(W_constraint)
A:keras.layers.embeddings.self.W_regularizer->regularizers.get(W_regularizer)
A:keras.layers.embeddings.self.activity_regularizer->regularizers.get(activity_regularizer)
A:keras.layers.embeddings.self.input->theano.tensor.imatrix()
A:keras.layers.embeddings.self.W->self.init((self.input_dim, self.output_dim))
A:keras.layers.embeddings.X->self.get_input(train)
A:keras.layers.embeddings.base_config->super(WordContextProduct, self).get_config()
A:keras.layers.embeddings.self.activation->activations.get(activation)
A:keras.layers.embeddings.self.W_w->self.init((input_dim, proj_dim))
A:keras.layers.embeddings.self.W_c->self.init((input_dim, proj_dim))
A:keras.layers.embeddings.dot->theano.tensor.reshape(dot, (X.shape[0], 1))
keras.layers.embeddings.Embedding(self,input_dim,output_dim,init='uniform',input_length=None,W_regularizer=None,activity_regularizer=None,W_constraint=None,mask_zero=False,weights=None,**kwargs)
keras.layers.embeddings.Embedding.__init__(self,input_dim,output_dim,init='uniform',input_length=None,W_regularizer=None,activity_regularizer=None,W_constraint=None,mask_zero=False,weights=None,**kwargs)
keras.layers.embeddings.Embedding.build(self)
keras.layers.embeddings.Embedding.get_config(self)
keras.layers.embeddings.Embedding.get_output(self,train=False)
keras.layers.embeddings.Embedding.get_output_mask(self,train=None)
keras.layers.embeddings.Embedding.output_shape(self)
keras.layers.embeddings.WordContextProduct(self,input_dim,proj_dim=128,init='uniform',activation='sigmoid',weights=None,**kwargs)
keras.layers.embeddings.WordContextProduct.__init__(self,input_dim,proj_dim=128,init='uniform',activation='sigmoid',weights=None,**kwargs)
keras.layers.embeddings.WordContextProduct.get_config(self)
keras.layers.embeddings.WordContextProduct.get_output(self,train=False)
keras.layers.embeddings.WordContextProduct.output_shape(self)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/layers/noise.py----------------------------------------
A:keras.layers.noise.self.srng->RandomStreams(seed=np.random.randint(10000000.0))
A:keras.layers.noise.X->self.get_input(train)
A:keras.layers.noise.base_config->super(GaussianDropout, self).get_config()
keras.layers.noise.GaussianDropout(self,p,**kwargs)
keras.layers.noise.GaussianDropout.__init__(self,p,**kwargs)
keras.layers.noise.GaussianDropout.get_config(self)
keras.layers.noise.GaussianDropout.get_output(self,train)
keras.layers.noise.GaussianNoise(self,sigma,**kwargs)
keras.layers.noise.GaussianNoise.__init__(self,sigma,**kwargs)
keras.layers.noise.GaussianNoise.get_config(self)
keras.layers.noise.GaussianNoise.get_output(self,train=False)


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/layers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras0.2.0/layers/normalization.py----------------------------------------
A:keras.layers.normalization.self.init->initializations.get('uniform')
A:keras.layers.normalization.self.input->ndim_tensor(len(input_shape) + 1)
A:keras.layers.normalization.self.gamma->self.init(input_shape)
A:keras.layers.normalization.self.beta->shared_zeros(input_shape)
A:keras.layers.normalization.self.running_mean->shared_zeros(input_shape)
A:keras.layers.normalization.self.running_std->shared_ones(input_shape)
A:keras.layers.normalization.X->self.get_input(train)
A:keras.layers.normalization.m->self.get_input(train).mean(axis=-1, keepdims=True)
A:keras.layers.normalization.std->self.get_input(train).std(axis=-1, keepdims=True)
A:keras.layers.normalization.base_config->super(LRN2D, self).get_config()
A:keras.layers.normalization.input_sqr->theano.tensor.set_subtensor(extra_channels[:, half_n:half_n + ch, :, :], input_sqr)
A:keras.layers.normalization.extra_channels->theano.tensor.alloc(0.0, b, ch + 2 * half_n, r, c)
keras.layers.normalization.BatchNormalization(self,epsilon=1e-06,mode=0,momentum=0.9,weights=None,**kwargs)
keras.layers.normalization.BatchNormalization.__init__(self,epsilon=1e-06,mode=0,momentum=0.9,weights=None,**kwargs)
keras.layers.normalization.BatchNormalization.build(self)
keras.layers.normalization.BatchNormalization.get_config(self)
keras.layers.normalization.BatchNormalization.get_output(self,train)
keras.layers.normalization.BatchNormalization.get_weights(self)
keras.layers.normalization.BatchNormalization.set_weights(self,weights)
keras.layers.normalization.LRN2D(self,alpha=0.0001,k=2,beta=0.75,n=5,**kwargs)
keras.layers.normalization.LRN2D.__init__(self,alpha=0.0001,k=2,beta=0.75,n=5,**kwargs)
keras.layers.normalization.LRN2D.get_config(self)
keras.layers.normalization.LRN2D.get_output(self,train)

