
----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/version.py----------------------------------------
keras.src.version.version()
keras.version()


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/api_export.py----------------------------------------
keras.src.api_export.get_name_from_symbol(symbol)
keras.src.api_export.get_symbol_from_name(name)
keras.src.api_export.register_internal_serializable(path,symbol)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/trainers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/trainers/epoch_iterator.py----------------------------------------
A:keras.src.trainers.epoch_iterator.self.data_adapter->keras.src.trainers.data_adapters.get_data_adapter(x=x, y=y, sample_weight=sample_weight, batch_size=batch_size, steps_per_epoch=steps_per_epoch, shuffle=shuffle, class_weight=class_weight)
A:keras.src.trainers.epoch_iterator.self._current_iterator->iter(self._get_iterator())
A:keras.src.trainers.epoch_iterator.data->next(self._current_iterator)
keras.src.trainers.epoch_iterator.EpochIterator(self,x,y=None,sample_weight=None,batch_size=None,steps_per_epoch=None,shuffle=False,class_weight=None,steps_per_execution=1)
keras.src.trainers.epoch_iterator.EpochIterator.__init__(self,x,y=None,sample_weight=None,batch_size=None,steps_per_epoch=None,shuffle=False,class_weight=None,steps_per_execution=1)
keras.src.trainers.epoch_iterator.EpochIterator._get_iterator(self)
keras.src.trainers.epoch_iterator.EpochIterator.enumerate_epoch(self)
keras.src.trainers.epoch_iterator.EpochIterator.num_batches(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/trainers/trainer.py----------------------------------------
A:keras.src.trainers.trainer.self.optimizer->LossScaleOptimizer(self.optimizer, name='loss_scale_optimizer')
A:keras.src.trainers.trainer.self._compile_loss->CompileLoss(loss, loss_weights, output_names=output_names)
A:keras.src.trainers.trainer.self._compile_metrics->CompileMetrics(metrics, weighted_metrics, output_names=output_names)
A:keras.src.trainers.trainer.jit_compile->self._resolve_auto_jit_compile()
A:keras.src.trainers.trainer.self._loss_tracker->keras.src.metrics.Mean(name='loss')
A:keras.src.trainers.trainer.self._compile_config->keras.src.saving.serialization_lib.SerializableDict(optimizer=optimizer, loss=loss, loss_weights=loss_weights, metrics=metrics, weighted_metrics=weighted_metrics, run_eagerly=run_eagerly, steps_per_execution=steps_per_execution, jit_compile=jit_compile)
A:keras.src.trainers.trainer.self._jit_compile->self._resolve_auto_jit_compile()
A:keras.src.trainers.trainer.devices->keras.src.utils.module_utils.tensorflow.config.list_physical_devices()
A:keras.src.trainers.trainer.loss->self._compile_loss(y, y_pred, sample_weight)
A:keras.src.trainers.trainer.total_loss->keras.src.ops.sum(losses)
A:keras.src.trainers.trainer.result->metric.result()
A:keras.src.trainers.trainer.config->keras.src.saving.serialization_lib.deserialize_keras_object(config)
A:keras.src.trainers.trainer.value->float(value)
A:keras.src.trainers.trainer.data_batch->keras.src.utils.tree.map_structure(to_symbolic_input, data_batch)
A:keras.src.trainers.trainer.(x, y, sample_weight)->keras.src.trainers.data_adapters.data_adapter_utils.unpack_x_y_sample_weight(data_batch)
A:keras.src.trainers.trainer.y_pred->keras.src.backend.compute_output_spec(self, x)
keras.src.trainers.trainer.Trainer(self)
keras.src.trainers.trainer.Trainer.__init__(self)
keras.src.trainers.trainer.Trainer._assert_compile_called(self,method_name=None)
keras.src.trainers.trainer.Trainer._flatten_metrics_in_order(self,logs)
keras.src.trainers.trainer.Trainer._pythonify_logs(self,logs)
keras.src.trainers.trainer.Trainer._resolve_auto_jit_compile(self)
keras.src.trainers.trainer.Trainer._should_eval(self,epoch,validation_freq)
keras.src.trainers.trainer.Trainer._symbolic_build(self,iterator=None,data_batch=None)
keras.src.trainers.trainer.Trainer.compile(self,optimizer='rmsprop',loss=None,loss_weights=None,metrics=None,weighted_metrics=None,run_eagerly=False,steps_per_execution=1,jit_compile='auto',auto_scale_loss=True)
keras.src.trainers.trainer.Trainer.compile_from_config(self,config)
keras.src.trainers.trainer.Trainer.compute_loss(self,x=None,y=None,y_pred=None,sample_weight=None,allow_empty=False)
keras.src.trainers.trainer.Trainer.compute_metrics(self,x,y,y_pred,sample_weight=None)
keras.src.trainers.trainer.Trainer.evaluate(self,x=None,y=None,batch_size=None,verbose='auto',sample_weight=None,steps=None,callbacks=None,return_dict=False,**kwargs)
keras.src.trainers.trainer.Trainer.fit(self,x=None,y=None,batch_size=None,epochs=1,verbose='auto',callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None,validation_batch_size=None,validation_freq=1)
keras.src.trainers.trainer.Trainer.get_compile_config(self)
keras.src.trainers.trainer.Trainer.get_metrics_result(self)
keras.src.trainers.trainer.Trainer.jit_compile(self)
keras.src.trainers.trainer.Trainer.jit_compile(self,value)
keras.src.trainers.trainer.Trainer.metrics(self)
keras.src.trainers.trainer.Trainer.metrics_names(self)
keras.src.trainers.trainer.Trainer.metrics_variables(self)
keras.src.trainers.trainer.Trainer.predict(self,x,batch_size=None,verbose='auto',steps=None,callbacks=None)
keras.src.trainers.trainer.Trainer.predict_on_batch(self,x)
keras.src.trainers.trainer.Trainer.reset_metrics(self)
keras.src.trainers.trainer.Trainer.run_eagerly(self)
keras.src.trainers.trainer.Trainer.run_eagerly(self,value)
keras.src.trainers.trainer.Trainer.test_on_batch(self,x,y=None,sample_weight=None,return_dict=False)
keras.src.trainers.trainer.Trainer.train_on_batch(self,x,y=None,sample_weight=None,class_weight=None,return_dict=False)
keras.src.trainers.trainer.model_supports_jit(model)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/trainers/compile_utils.py----------------------------------------
A:keras.src.trainers.compile_utils.y_t_rank->len(y_true.shape)
A:keras.src.trainers.compile_utils.y_p_rank->len(y_pred.shape)
A:keras.src.trainers.compile_utils.metric_obj->keras.src.metrics.MeanMetricWrapper(metric_obj)
A:keras.src.trainers.compile_utils.(is_binary, is_sparse_categorical)->is_binary_or_sparse_categorical(y_true, y_pred)
A:keras.src.trainers.compile_utils.metric_name->get_object_name(metric_obj)
A:keras.src.trainers.compile_utils.loss_obj->keras.src.losses.LossFunctionWrapper(loss_obj, name=loss_name)
A:keras.src.trainers.compile_utils.loss_name->get_object_name(loss_obj)
A:keras.src.trainers.compile_utils.output_names->sorted(list(y_pred.keys()))
A:keras.src.trainers.compile_utils.num_outputs->len(output_names)
A:keras.src.trainers.compile_utils.y_pred->self._flatten_y(y_pred)
A:keras.src.trainers.compile_utils.y_true->self._flatten_y(y_true)
A:keras.src.trainers.compile_utils.self._flat_metrics->self._build_metrics_set(metrics, num_outputs, output_names, y_true, y_pred, argument_name='metrics')
A:keras.src.trainers.compile_utils.self._flat_weighted_metrics->self._build_metrics_set(weighted_metrics, num_outputs, output_names, y_true, y_pred, argument_name='weighted_metrics')
A:keras.src.trainers.compile_utils.metrics->keras.src.utils.tree.flatten(metrics)
A:keras.src.trainers.compile_utils.sample_weight->self._flatten_y(sample_weight)
A:keras.src.trainers.compile_utils.results[name]->m.result()
A:keras.src.trainers.compile_utils.loss->keras.src.utils.tree.flatten(loss)
A:keras.src.trainers.compile_utils.flat_loss_weights->list(loss_weights)
A:keras.src.trainers.compile_utils.total_loss->sum(loss_values)
keras.src.trainers.compile_utils.CompileLoss(self,loss,loss_weights=None,reduction='sum_over_batch_size',output_names=None)
keras.src.trainers.compile_utils.CompileLoss.__init__(self,loss,loss_weights=None,reduction='sum_over_batch_size',output_names=None)
keras.src.trainers.compile_utils.CompileLoss._flatten_y(self,y)
keras.src.trainers.compile_utils.CompileLoss.build(self,y_true,y_pred)
keras.src.trainers.compile_utils.CompileLoss.call(self,y_true,y_pred,sample_weight=None)
keras.src.trainers.compile_utils.CompileLoss.from_config(cls,config)
keras.src.trainers.compile_utils.CompileLoss.get_config(self)
keras.src.trainers.compile_utils.CompileMetrics(self,metrics,weighted_metrics,name='compile_metric',output_names=None)
keras.src.trainers.compile_utils.CompileMetrics.__init__(self,metrics,weighted_metrics,name='compile_metric',output_names=None)
keras.src.trainers.compile_utils.CompileMetrics._build_metrics_set(self,metrics,num_outputs,output_names,y_true,y_pred,argument_name)
keras.src.trainers.compile_utils.CompileMetrics._flatten_y(self,y)
keras.src.trainers.compile_utils.CompileMetrics.build(self,y_true,y_pred)
keras.src.trainers.compile_utils.CompileMetrics.from_config(cls,config)
keras.src.trainers.compile_utils.CompileMetrics.get_config(self)
keras.src.trainers.compile_utils.CompileMetrics.metrics(self)
keras.src.trainers.compile_utils.CompileMetrics.reset_state(self)
keras.src.trainers.compile_utils.CompileMetrics.result(self)
keras.src.trainers.compile_utils.CompileMetrics.update_state(self,y_true,y_pred,sample_weight=None)
keras.src.trainers.compile_utils.CompileMetrics.variables(self)
keras.src.trainers.compile_utils.MetricsList(self,metrics,name='metrics_list',output_name=None)
keras.src.trainers.compile_utils.MetricsList.__init__(self,metrics,name='metrics_list',output_name=None)
keras.src.trainers.compile_utils.MetricsList.from_config(cls,config)
keras.src.trainers.compile_utils.MetricsList.get_config(self)
keras.src.trainers.compile_utils.MetricsList.get_result(self)
keras.src.trainers.compile_utils.MetricsList.reset_state(self)
keras.src.trainers.compile_utils.MetricsList.update_state(self,y_true,y_pred,sample_weight=None)
keras.src.trainers.compile_utils.get_loss(identifier,y_true,y_pred)
keras.src.trainers.compile_utils.get_metric(identifier,y_true,y_pred)
keras.src.trainers.compile_utils.is_binary_or_sparse_categorical(y_true,y_pred)
keras.src.trainers.compile_utils.is_function_like(value)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/trainers/data_adapters/__init__.py----------------------------------------
A:keras.src.trainers.data_adapters.__init__.distribution->keras.src.distribution.distribution_lib.distribution()
keras.src.trainers.data_adapters.__init__.get_data_adapter(x,y=None,sample_weight=None,batch_size=None,steps_per_epoch=None,shuffle=False,class_weight=None)
keras.src.trainers.data_adapters.__init__.is_tf_dataset(x)
keras.src.trainers.data_adapters.__init__.is_torch_dataloader(x)
keras.src.trainers.data_adapters.__init__.raise_unsupported_arg(arg_name,arg_description,input_type)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/trainers/data_adapters/array_slicing.py----------------------------------------
A:keras.src.trainers.data_adapters.array_slicing.TensorflowSparseWrapper->collections.namedtuple('TensorflowSparseWrapper', ['sparse', 'ragged_indices', 'ragged_values'])
A:keras.src.trainers.data_adapters.array_slicing.row_splits->keras.src.utils.module_utils.tensorflow.experimental.RowPartition.from_value_rowids(row_ids).row_splits()
A:keras.src.trainers.data_adapters.array_slicing.ragged_indices->keras.src.utils.module_utils.tensorflow.cast(tf.RaggedTensor.from_row_splits(sparse.indices, row_splits), tf.int64)
A:keras.src.trainers.data_adapters.array_slicing.ragged_values->keras.src.utils.module_utils.tensorflow.RaggedTensor.from_row_splits(sparse.values, row_splits)
A:keras.src.trainers.data_adapters.array_slicing.sparse_indices->keras.src.utils.module_utils.tensorflow.concat([tf.expand_dims(row_ids, -1), sparse_indices], axis=1)
A:keras.src.trainers.data_adapters.array_slicing.sparse_values->keras.src.utils.module_utils.tensorflow.gather(sparse_wrapper.ragged_values, indices)
A:keras.src.trainers.data_adapters.array_slicing.batch_dim->int(first_non_none.shape[0])
A:keras.src.trainers.data_adapters.array_slicing.row_ids->keras.src.utils.module_utils.tensorflow.concat([tf.expand_dims(row_ids, -1), sparse_indices], axis=1).value_rowids()
A:keras.src.trainers.data_adapters.array_slicing.x->numpy.asarray(x)
A:keras.src.trainers.data_adapters.array_slicing.cast_dtype->keras.src.backend.floatx()
A:keras.src.trainers.data_adapters.array_slicing.flat_arrays->keras.src.utils.tree.flatten(arrays)
A:keras.src.trainers.data_adapters.array_slicing.split_at->int(math.floor(batch_dim * (1.0 - validation_split)))
A:keras.src.trainers.data_adapters.array_slicing.sliceables->convert_to_sliceable(arrays)
A:keras.src.trainers.data_adapters.array_slicing.train_arrays->keras.src.utils.tree.map_structure(lambda x: _split(x, start=0, end=split_at), sliceables)
A:keras.src.trainers.data_adapters.array_slicing.val_arrays->keras.src.utils.tree.map_structure(lambda x: _split(x, start=split_at, end=batch_dim), sliceables)
keras.src.trainers.data_adapters.array_slicing.JaxSliceable(Sliceable)
keras.src.trainers.data_adapters.array_slicing.JaxSliceable.__getitem__(self,indices)
keras.src.trainers.data_adapters.array_slicing.JaxSliceable.convert_to_numpy(cls,x)
keras.src.trainers.data_adapters.array_slicing.JaxSparseSliceable(JaxSliceable)
keras.src.trainers.data_adapters.array_slicing.JaxSparseSliceable.convert_to_tf_dataset_compatible(cls,array)
keras.src.trainers.data_adapters.array_slicing.JaxSparseSliceable.convert_to_torch_compatible(cls,x)
keras.src.trainers.data_adapters.array_slicing.NumpySliceable(Sliceable)
keras.src.trainers.data_adapters.array_slicing.PandasDataFrameSliceable(PandasSliceable)
keras.src.trainers.data_adapters.array_slicing.PandasSeriesSliceable(PandasSliceable)
keras.src.trainers.data_adapters.array_slicing.PandasSeriesSliceable.convert_to_numpy(cls,x)
keras.src.trainers.data_adapters.array_slicing.PandasSliceable(Sliceable)
keras.src.trainers.data_adapters.array_slicing.PandasSliceable.__getitem__(self,indices)
keras.src.trainers.data_adapters.array_slicing.PandasSliceable.convert_to_jax_compatible(cls,x)
keras.src.trainers.data_adapters.array_slicing.PandasSliceable.convert_to_numpy(cls,x)
keras.src.trainers.data_adapters.array_slicing.PandasSliceable.convert_to_tf_dataset_compatible(cls,x)
keras.src.trainers.data_adapters.array_slicing.PandasSliceable.convert_to_torch_compatible(cls,x)
keras.src.trainers.data_adapters.array_slicing.ScipySparseSliceable(self,array)
keras.src.trainers.data_adapters.array_slicing.ScipySparseSliceable.__init__(self,array)
keras.src.trainers.data_adapters.array_slicing.ScipySparseSliceable.convert_to_jax_compatible(cls,x)
keras.src.trainers.data_adapters.array_slicing.ScipySparseSliceable.convert_to_numpy(cls,x)
keras.src.trainers.data_adapters.array_slicing.ScipySparseSliceable.convert_to_tf_dataset_compatible(cls,x)
keras.src.trainers.data_adapters.array_slicing.ScipySparseSliceable.convert_to_torch_compatible(cls,x)
keras.src.trainers.data_adapters.array_slicing.Sliceable(self,array)
keras.src.trainers.data_adapters.array_slicing.Sliceable.__getitem__(self,indices)
keras.src.trainers.data_adapters.array_slicing.Sliceable.__init__(self,array)
keras.src.trainers.data_adapters.array_slicing.Sliceable.cast(cls,x,dtype)
keras.src.trainers.data_adapters.array_slicing.Sliceable.convert_to_jax_compatible(cls,x)
keras.src.trainers.data_adapters.array_slicing.Sliceable.convert_to_numpy(cls,x)
keras.src.trainers.data_adapters.array_slicing.Sliceable.convert_to_tf_dataset_compatible(cls,x)
keras.src.trainers.data_adapters.array_slicing.Sliceable.convert_to_torch_compatible(cls,x)
keras.src.trainers.data_adapters.array_slicing.TensorflowRaggedSliceable(TensorflowSliceable)
keras.src.trainers.data_adapters.array_slicing.TensorflowRaggedSliceable.convert_to_jax_compatible(cls,x)
keras.src.trainers.data_adapters.array_slicing.TensorflowRaggedSliceable.convert_to_torch_compatible(cls,x)
keras.src.trainers.data_adapters.array_slicing.TensorflowSliceable(Sliceable)
keras.src.trainers.data_adapters.array_slicing.TensorflowSliceable.__getitem__(self,indices)
keras.src.trainers.data_adapters.array_slicing.TensorflowSliceable.cast(cls,x,dtype)
keras.src.trainers.data_adapters.array_slicing.TensorflowSliceable.convert_to_numpy(cls,x)
keras.src.trainers.data_adapters.array_slicing.TensorflowSparseSliceable(self,array)
keras.src.trainers.data_adapters.array_slicing.TensorflowSparseSliceable.__getitem__(self,indices)
keras.src.trainers.data_adapters.array_slicing.TensorflowSparseSliceable.__init__(self,array)
keras.src.trainers.data_adapters.array_slicing.TensorflowSparseSliceable.convert_to_jax_compatible(cls,x)
keras.src.trainers.data_adapters.array_slicing.TensorflowSparseSliceable.convert_to_tf_dataset_compatible(cls,x)
keras.src.trainers.data_adapters.array_slicing.TensorflowSparseSliceable.convert_to_torch_compatible(cls,x)
keras.src.trainers.data_adapters.array_slicing.TensorflowSparseSliceable.shape(self)
keras.src.trainers.data_adapters.array_slicing.TorchSliceable(Sliceable)
keras.src.trainers.data_adapters.array_slicing.TorchSliceable.cast(cls,x,dtype)
keras.src.trainers.data_adapters.array_slicing.TorchSliceable.convert_to_numpy(cls,x)
keras.src.trainers.data_adapters.array_slicing.can_slice_array(x)
keras.src.trainers.data_adapters.array_slicing.convert_to_sliceable(arrays,target_backend=None)
keras.src.trainers.data_adapters.array_slicing.slice_tensorflow_sparse_wrapper(sparse_wrapper,indices)
keras.src.trainers.data_adapters.array_slicing.to_tensorflow_sparse_wrapper(sparse)
keras.src.trainers.data_adapters.array_slicing.train_validation_split(arrays,validation_split)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/trainers/data_adapters/data_adapter_utils.py----------------------------------------
A:keras.src.trainers.data_adapters.data_adapter_utils.data->tuple(data)
A:keras.src.trainers.data_adapters.data_adapter_utils.num_samples->set((int(i.shape[0]) for i in tree.flatten(data)))
A:keras.src.trainers.data_adapters.data_adapter_utils.sizes->', '.join((str(i.shape[0]) for i in tree.flatten(single_data)))
A:keras.src.trainers.data_adapters.data_adapter_utils.sample_weight->numpy.ones(shape=(y.shape[0],), dtype=backend.floatx())
A:keras.src.trainers.data_adapters.data_adapter_utils.y->numpy.round(y).astype('int32')
A:keras.src.trainers.data_adapters.data_adapter_utils.sample_weight[i]->class_weight.get(int(y[i]), 1.0)
A:keras.src.trainers.data_adapters.data_adapter_utils.rank->len(x.shape)
A:keras.src.trainers.data_adapters.data_adapter_utils.dims_set->set(dims)
A:keras.src.trainers.data_adapters.data_adapter_utils.dtype->keras.src.backend.standardize_dtype(x.dtype)
A:keras.src.trainers.data_adapters.data_adapter_utils.x->numpy.asarray(x)
A:keras.src.trainers.data_adapters.data_adapter_utils.dataset->ConverterIterableDataset(iterable)
A:keras.src.trainers.data_adapters.data_adapter_utils.coo->numpy.asarray(x).tocoo()
A:keras.src.trainers.data_adapters.data_adapter_utils.indices->numpy.asarray(x.indices)
A:keras.src.trainers.data_adapters.data_adapter_utils.values->numpy.asarray(x.values)
keras.src.trainers.data_adapters.data_adapter_utils.check_data_cardinality(data)
keras.src.trainers.data_adapters.data_adapter_utils.class_weight_to_sample_weights(y,class_weight)
keras.src.trainers.data_adapters.data_adapter_utils.get_jax_iterator(iterable)
keras.src.trainers.data_adapters.data_adapter_utils.get_numpy_iterator(iterable)
keras.src.trainers.data_adapters.data_adapter_utils.get_tensor_spec(batches)
keras.src.trainers.data_adapters.data_adapter_utils.get_torch_dataloader(iterable)
keras.src.trainers.data_adapters.data_adapter_utils.is_jax_array(value)
keras.src.trainers.data_adapters.data_adapter_utils.is_jax_sparse(value)
keras.src.trainers.data_adapters.data_adapter_utils.is_scipy_sparse(x)
keras.src.trainers.data_adapters.data_adapter_utils.is_tensorflow_ragged(value)
keras.src.trainers.data_adapters.data_adapter_utils.is_tensorflow_sparse(value)
keras.src.trainers.data_adapters.data_adapter_utils.is_tensorflow_tensor(value)
keras.src.trainers.data_adapters.data_adapter_utils.is_torch_tensor(value)
keras.src.trainers.data_adapters.data_adapter_utils.jax_sparse_to_tf_sparse(x)
keras.src.trainers.data_adapters.data_adapter_utils.list_to_tuple(maybe_list)
keras.src.trainers.data_adapters.data_adapter_utils.pack_x_y_sample_weight(x,y=None,sample_weight=None)
keras.src.trainers.data_adapters.data_adapter_utils.scipy_sparse_to_jax_sparse(x)
keras.src.trainers.data_adapters.data_adapter_utils.scipy_sparse_to_tf_sparse(x)
keras.src.trainers.data_adapters.data_adapter_utils.tf_sparse_to_jax_sparse(x)
keras.src.trainers.data_adapters.data_adapter_utils.unpack_x_y_sample_weight(data)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/trainers/data_adapters/data_adapter.py----------------------------------------
keras.src.trainers.data_adapters.data_adapter.DataAdapter(object)
keras.src.trainers.data_adapters.data_adapter.DataAdapter.batch_size(self)
keras.src.trainers.data_adapters.data_adapter.DataAdapter.get_jax_iterator(self)
keras.src.trainers.data_adapters.data_adapter.DataAdapter.get_numpy_iterator(self)
keras.src.trainers.data_adapters.data_adapter.DataAdapter.get_tf_dataset(self)
keras.src.trainers.data_adapters.data_adapter.DataAdapter.get_torch_dataloader(self)
keras.src.trainers.data_adapters.data_adapter.DataAdapter.has_partial_batch(self)
keras.src.trainers.data_adapters.data_adapter.DataAdapter.num_batches(self)
keras.src.trainers.data_adapters.data_adapter.DataAdapter.on_epoch_end(self)
keras.src.trainers.data_adapters.data_adapter.DataAdapter.partial_batch_size(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/trainers/data_adapters/generator_data_adapter.py----------------------------------------
A:keras.src.trainers.data_adapters.generator_data_adapter.(first_batches, generator)->peek_and_restore(generator)
A:keras.src.trainers.data_adapters.generator_data_adapter.x->keras.src.trainers.data_adapters.data_adapter_utils.jax_sparse_to_tf_sparse(x)
A:keras.src.trainers.data_adapters.generator_data_adapter.batch->keras.src.utils.tree.map_structure(convert_to_tf, batch)
A:keras.src.trainers.data_adapters.generator_data_adapter.self._output_signature->keras.src.trainers.data_adapters.data_adapter_utils.get_tensor_spec(self._first_batches)
A:keras.src.trainers.data_adapters.generator_data_adapter.ds->ds.prefetch(tf.data.AUTOTUNE).prefetch(tf.data.AUTOTUNE)
A:keras.src.trainers.data_adapters.generator_data_adapter.batches->list(itertools.islice(generator, data_adapter_utils.NUM_BATCHES_FOR_TENSOR_SPEC))
keras.src.trainers.data_adapters.GeneratorDataAdapter(self,generator)
keras.src.trainers.data_adapters.GeneratorDataAdapter.batch_size(self)
keras.src.trainers.data_adapters.GeneratorDataAdapter.get_jax_iterator(self)
keras.src.trainers.data_adapters.GeneratorDataAdapter.get_numpy_iterator(self)
keras.src.trainers.data_adapters.GeneratorDataAdapter.get_tf_dataset(self)
keras.src.trainers.data_adapters.GeneratorDataAdapter.get_torch_dataloader(self)
keras.src.trainers.data_adapters.GeneratorDataAdapter.num_batches(self)
keras.src.trainers.data_adapters.generator_data_adapter.GeneratorDataAdapter(self,generator)
keras.src.trainers.data_adapters.generator_data_adapter.GeneratorDataAdapter.__init__(self,generator)
keras.src.trainers.data_adapters.generator_data_adapter.GeneratorDataAdapter.batch_size(self)
keras.src.trainers.data_adapters.generator_data_adapter.GeneratorDataAdapter.get_jax_iterator(self)
keras.src.trainers.data_adapters.generator_data_adapter.GeneratorDataAdapter.get_numpy_iterator(self)
keras.src.trainers.data_adapters.generator_data_adapter.GeneratorDataAdapter.get_tf_dataset(self)
keras.src.trainers.data_adapters.generator_data_adapter.GeneratorDataAdapter.get_torch_dataloader(self)
keras.src.trainers.data_adapters.generator_data_adapter.GeneratorDataAdapter.num_batches(self)
keras.src.trainers.data_adapters.generator_data_adapter.peek_and_restore(generator)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py----------------------------------------
A:keras.src.trainers.data_adapters.py_dataset_adapter.batch->self._standardize_batch(batch)
A:keras.src.trainers.data_adapters.py_dataset_adapter.sw->keras.src.trainers.data_adapters.data_adapter_utils.class_weight_to_sample_weights(batch[1], self.class_weight)
A:keras.src.trainers.data_adapters.py_dataset_adapter.self.enqueuer->OrderedEnqueuer(self.py_dataset, use_multiprocessing=use_multiprocessing, shuffle=self.shuffle)
A:keras.src.trainers.data_adapters.py_dataset_adapter.order->list(order)
A:keras.src.trainers.data_adapters.py_dataset_adapter.gen_fn->self._make_multiprocessed_generator_fn()
A:keras.src.trainers.data_adapters.py_dataset_adapter.num_samples->min(data_adapter_utils.NUM_BATCHES_FOR_TENSOR_SPEC, len(self.py_dataset))
A:keras.src.trainers.data_adapters.py_dataset_adapter.self._output_signature->keras.src.trainers.data_adapters.data_adapter_utils.get_tensor_spec(batches)
A:keras.src.trainers.data_adapters.py_dataset_adapter.ds->ds.prefetch(tf.data.AUTOTUNE).prefetch(tf.data.AUTOTUNE)
A:keras.src.trainers.data_adapters.py_dataset_adapter._DATA_POOLS->weakref.WeakSet()
A:keras.src.trainers.data_adapters.py_dataset_adapter._WORKER_ID_QUEUE->multiprocessing.Queue()
A:keras.src.trainers.data_adapters.py_dataset_adapter._SEQUENCE_COUNTER->multiprocessing.Value('i', 0)
A:keras.src.trainers.data_adapters.py_dataset_adapter.self.executor_fn->self._get_executor_init(workers)
A:keras.src.trainers.data_adapters.py_dataset_adapter.self.queue->queue.Queue(max_queue_size)
A:keras.src.trainers.data_adapters.py_dataset_adapter.self.stop_signal->threading.Event()
A:keras.src.trainers.data_adapters.py_dataset_adapter.self.run_thread->threading.Thread(target=self._run)
A:keras.src.trainers.data_adapters.py_dataset_adapter.pool->get_pool_class(True)(workers, initializer=init_pool_generator, initargs=(seqs, None, get_worker_id_queue()))
A:keras.src.trainers.data_adapters.py_dataset_adapter.indices->list(range(len(self.py_dataset)))
A:keras.src.trainers.data_adapters.py_dataset_adapter.inputs->self.queue.get(block=True, timeout=5).get()
A:keras.src.trainers.data_adapters.py_dataset_adapter.worker_proc->multiprocessing.current_process()
keras.src.trainers.data_adapters.PyDatasetAdapter(self,x,class_weight=None,shuffle=False)
keras.src.trainers.data_adapters.PyDatasetAdapter._get_iterator(self)
keras.src.trainers.data_adapters.PyDatasetAdapter._make_multiprocessed_generator_fn(self)
keras.src.trainers.data_adapters.PyDatasetAdapter._standardize_batch(self,batch)
keras.src.trainers.data_adapters.PyDatasetAdapter.batch_size(self)
keras.src.trainers.data_adapters.PyDatasetAdapter.get_jax_iterator(self)
keras.src.trainers.data_adapters.PyDatasetAdapter.get_numpy_iterator(self)
keras.src.trainers.data_adapters.PyDatasetAdapter.get_tf_dataset(self)
keras.src.trainers.data_adapters.PyDatasetAdapter.get_torch_dataloader(self)
keras.src.trainers.data_adapters.PyDatasetAdapter.num_batches(self)
keras.src.trainers.data_adapters.PyDatasetAdapter.on_epoch_end(self)
keras.src.trainers.data_adapters.py_dataset_adapter.OrderedEnqueuer(self,py_dataset,use_multiprocessing=False,shuffle=False)
keras.src.trainers.data_adapters.py_dataset_adapter.OrderedEnqueuer.__init__(self,py_dataset,use_multiprocessing=False,shuffle=False)
keras.src.trainers.data_adapters.py_dataset_adapter.OrderedEnqueuer._get_executor_init(self,workers)
keras.src.trainers.data_adapters.py_dataset_adapter.OrderedEnqueuer._run(self)
keras.src.trainers.data_adapters.py_dataset_adapter.OrderedEnqueuer._wait_queue(self)
keras.src.trainers.data_adapters.py_dataset_adapter.OrderedEnqueuer.get(self)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDataset(self,workers=1,use_multiprocessing=False,max_queue_size=10)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDataset.__getitem__(self,index)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDataset.__init__(self,workers=1,use_multiprocessing=False,max_queue_size=10)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDataset.__iter__(self)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDataset.__len__(self)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDataset._warn_if_super_not_called(self)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDataset.max_queue_size(self)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDataset.max_queue_size(self,value)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDataset.on_epoch_end(self)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDataset.use_multiprocessing(self)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDataset.use_multiprocessing(self,value)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDataset.workers(self)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDataset.workers(self,value)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDatasetAdapter(self,x,class_weight=None,shuffle=False)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDatasetAdapter.__init__(self,x,class_weight=None,shuffle=False)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDatasetAdapter._get_iterator(self)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDatasetAdapter._make_multiprocessed_generator_fn(self)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDatasetAdapter._standardize_batch(self,batch)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDatasetAdapter.batch_size(self)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDatasetAdapter.get_jax_iterator(self)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDatasetAdapter.get_numpy_iterator(self)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDatasetAdapter.get_tf_dataset(self)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDatasetAdapter.get_torch_dataloader(self)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDatasetAdapter.num_batches(self)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDatasetAdapter.on_epoch_end(self)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDatasetEnqueuer(self,py_dataset,use_multiprocessing=False)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDatasetEnqueuer.__del__(self)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDatasetEnqueuer.__init__(self,py_dataset,use_multiprocessing=False)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDatasetEnqueuer._get_executor_init(self,workers)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDatasetEnqueuer._run(self)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDatasetEnqueuer._send_py_dataset(self)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDatasetEnqueuer.get(self)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDatasetEnqueuer.is_running(self)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDatasetEnqueuer.start(self,workers=1,max_queue_size=10)
keras.src.trainers.data_adapters.py_dataset_adapter.PyDatasetEnqueuer.stop(self,timeout=None)
keras.src.trainers.data_adapters.py_dataset_adapter.get_index(uid,i)
keras.src.trainers.data_adapters.py_dataset_adapter.get_pool_class(use_multiprocessing)
keras.src.trainers.data_adapters.py_dataset_adapter.get_worker_id_queue()
keras.src.trainers.data_adapters.py_dataset_adapter.init_pool(seqs)
keras.src.trainers.data_adapters.py_dataset_adapter.init_pool_generator(gens,random_seed=None,id_queue=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/trainers/data_adapters/torch_data_loader_adapter.py----------------------------------------
A:keras.src.trainers.data_adapters.torch_data_loader_adapter.self._num_batches->len(dataloader)
A:keras.src.trainers.data_adapters.torch_data_loader_adapter.batches->list(itertools.islice(self._dataloader, data_adapter_utils.NUM_BATCHES_FOR_TENSOR_SPEC))
A:keras.src.trainers.data_adapters.torch_data_loader_adapter.self._output_signature->tuple(data_adapter_utils.get_tensor_spec(batches))
keras.src.trainers.data_adapters.TorchDataLoaderAdapter(self,dataloader)
keras.src.trainers.data_adapters.TorchDataLoaderAdapter.batch_size(self)
keras.src.trainers.data_adapters.TorchDataLoaderAdapter.get_jax_iterator(self)
keras.src.trainers.data_adapters.TorchDataLoaderAdapter.get_numpy_iterator(self)
keras.src.trainers.data_adapters.TorchDataLoaderAdapter.get_tf_dataset(self)
keras.src.trainers.data_adapters.TorchDataLoaderAdapter.get_torch_dataloader(self)
keras.src.trainers.data_adapters.TorchDataLoaderAdapter.has_partial_batch(self)
keras.src.trainers.data_adapters.TorchDataLoaderAdapter.num_batches(self)
keras.src.trainers.data_adapters.TorchDataLoaderAdapter.partial_batch_size(self)
keras.src.trainers.data_adapters.torch_data_loader_adapter.TorchDataLoaderAdapter(self,dataloader)
keras.src.trainers.data_adapters.torch_data_loader_adapter.TorchDataLoaderAdapter.__init__(self,dataloader)
keras.src.trainers.data_adapters.torch_data_loader_adapter.TorchDataLoaderAdapter.batch_size(self)
keras.src.trainers.data_adapters.torch_data_loader_adapter.TorchDataLoaderAdapter.get_jax_iterator(self)
keras.src.trainers.data_adapters.torch_data_loader_adapter.TorchDataLoaderAdapter.get_numpy_iterator(self)
keras.src.trainers.data_adapters.torch_data_loader_adapter.TorchDataLoaderAdapter.get_tf_dataset(self)
keras.src.trainers.data_adapters.torch_data_loader_adapter.TorchDataLoaderAdapter.get_torch_dataloader(self)
keras.src.trainers.data_adapters.torch_data_loader_adapter.TorchDataLoaderAdapter.has_partial_batch(self)
keras.src.trainers.data_adapters.torch_data_loader_adapter.TorchDataLoaderAdapter.num_batches(self)
keras.src.trainers.data_adapters.torch_data_loader_adapter.TorchDataLoaderAdapter.partial_batch_size(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/trainers/data_adapters/array_data_adapter.py----------------------------------------
A:keras.src.trainers.data_adapters.array_data_adapter.sample_weight->keras.src.trainers.data_adapters.data_adapter_utils.class_weight_to_sample_weights(y, class_weight)
A:keras.src.trainers.data_adapters.array_data_adapter.inputs->keras.src.trainers.data_adapters.array_slicing.convert_to_sliceable(self._inputs, target_backend='torch')
A:keras.src.trainers.data_adapters.array_data_adapter.num_samples->set((i.shape[0] for i in tree.flatten(inputs))).pop()
A:keras.src.trainers.data_adapters.array_data_adapter.self._size->int(math.ceil(num_samples / batch_size))
A:keras.src.trainers.data_adapters.array_data_adapter.x->convert_to_tensor(x)
A:keras.src.trainers.data_adapters.array_data_adapter.num_full_batches->int(self._num_samples // batch_size)
A:keras.src.trainers.data_adapters.array_data_adapter.indices_dataset->indices_dataset.map(tf.random.shuffle).map(tf.random.shuffle)
A:keras.src.trainers.data_adapters.array_data_adapter.indices->slice(start, stop)
A:keras.src.trainers.data_adapters.array_data_adapter.first_k_indices->keras.src.utils.module_utils.tensorflow.reshape(first_k_indices, [num_full_batches, batch_size])
A:keras.src.trainers.data_adapters.array_data_adapter.flat_dataset->flat_dataset.concatenate(index_remainder).concatenate(index_remainder)
A:keras.src.trainers.data_adapters.array_data_adapter.index_remainder->keras.src.utils.module_utils.tensorflow.data.Dataset.from_tensors(tf.slice(indices, [num_in_full_batch], [self._partial_batch_size]))
A:keras.src.trainers.data_adapters.array_data_adapter.dataset->ArrayDataset(inputs)
A:keras.src.trainers.data_adapters.array_data_adapter.options->keras.src.utils.module_utils.tensorflow.data.Options()
A:keras.src.trainers.data_adapters.array_data_adapter.batch_sampler->torch.utils.data.BatchSampler(torch.utils.data.SequentialSampler(range(self._num_samples)), batch_size=self._batch_size, drop_last=False)
A:keras.src.trainers.data_adapters.array_data_adapter.global_permutation->numpy.random.permutation(self._num_samples)
A:keras.src.trainers.data_adapters.array_data_adapter.stop->min((i + 1) * self._batch_size, self._num_samples)
A:keras.src.trainers.data_adapters.array_data_adapter.slice_indices_and_convert_fn->functools.partial(slice_and_convert_fn, indices=indices)
keras.src.trainers.data_adapters.ArrayDataAdapter(self,x,y=None,sample_weight=None,batch_size=None,steps=None,shuffle=False,class_weight=None)
keras.src.trainers.data_adapters.ArrayDataAdapter._get_iterator(self,slice_and_convert_fn,inputs)
keras.src.trainers.data_adapters.ArrayDataAdapter.batch_size(self)
keras.src.trainers.data_adapters.ArrayDataAdapter.get_jax_iterator(self)
keras.src.trainers.data_adapters.ArrayDataAdapter.get_numpy_iterator(self)
keras.src.trainers.data_adapters.ArrayDataAdapter.get_tf_dataset(self)
keras.src.trainers.data_adapters.ArrayDataAdapter.get_torch_dataloader(self)
keras.src.trainers.data_adapters.ArrayDataAdapter.has_partial_batch(self)
keras.src.trainers.data_adapters.ArrayDataAdapter.num_batches(self)
keras.src.trainers.data_adapters.ArrayDataAdapter.partial_batch_size(self)
keras.src.trainers.data_adapters.array_data_adapter.ArrayDataAdapter(self,x,y=None,sample_weight=None,batch_size=None,steps=None,shuffle=False,class_weight=None)
keras.src.trainers.data_adapters.array_data_adapter.ArrayDataAdapter.__init__(self,x,y=None,sample_weight=None,batch_size=None,steps=None,shuffle=False,class_weight=None)
keras.src.trainers.data_adapters.array_data_adapter.ArrayDataAdapter._get_iterator(self,slice_and_convert_fn,inputs)
keras.src.trainers.data_adapters.array_data_adapter.ArrayDataAdapter.batch_size(self)
keras.src.trainers.data_adapters.array_data_adapter.ArrayDataAdapter.get_jax_iterator(self)
keras.src.trainers.data_adapters.array_data_adapter.ArrayDataAdapter.get_numpy_iterator(self)
keras.src.trainers.data_adapters.array_data_adapter.ArrayDataAdapter.get_tf_dataset(self)
keras.src.trainers.data_adapters.array_data_adapter.ArrayDataAdapter.get_torch_dataloader(self)
keras.src.trainers.data_adapters.array_data_adapter.ArrayDataAdapter.has_partial_batch(self)
keras.src.trainers.data_adapters.array_data_adapter.ArrayDataAdapter.num_batches(self)
keras.src.trainers.data_adapters.array_data_adapter.ArrayDataAdapter.partial_batch_size(self)
keras.src.trainers.data_adapters.array_data_adapter.can_convert_arrays(arrays)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/trainers/data_adapters/tf_dataset_adapter.py----------------------------------------
A:keras.src.trainers.data_adapters.tf_dataset_adapter.dataset->distribution.distribute_dataset(dataset)
A:keras.src.trainers.data_adapters.tf_dataset_adapter.values->convert_to_numpy(x.values)
A:keras.src.trainers.data_adapters.tf_dataset_adapter.indices->convert_to_numpy(x.indices)
A:keras.src.trainers.data_adapters.tf_dataset_adapter.cardinality->int(cardinality)
A:keras.src.trainers.data_adapters.tf_dataset_adapter.class_weight_tensor->keras.src.utils.module_utils.tensorflow.convert_to_tensor([class_weight.get(int(c), 1.0) for c in range(max(class_weight.keys()) + 1)])
A:keras.src.trainers.data_adapters.tf_dataset_adapter.(x, y, sw)->keras.src.trainers.data_adapters.data_adapter_utils.unpack_x_y_sample_weight(data)
A:keras.src.trainers.data_adapters.tf_dataset_adapter.y_classes->keras.src.utils.module_utils.tensorflow.cast(tf.round(y), tf.int32)
A:keras.src.trainers.data_adapters.tf_dataset_adapter.cw->keras.src.utils.module_utils.tensorflow.gather(class_weight_tensor, y_classes)
keras.src.trainers.data_adapters.TFDatasetAdapter(self,dataset,class_weight=None,distribution=None)
keras.src.trainers.data_adapters.TFDatasetAdapter.batch_size(self)
keras.src.trainers.data_adapters.TFDatasetAdapter.get_jax_iterator(self)
keras.src.trainers.data_adapters.TFDatasetAdapter.get_numpy_iterator(self)
keras.src.trainers.data_adapters.TFDatasetAdapter.get_tf_dataset(self)
keras.src.trainers.data_adapters.TFDatasetAdapter.get_torch_dataloader(self)
keras.src.trainers.data_adapters.TFDatasetAdapter.has_partial_batch(self)
keras.src.trainers.data_adapters.TFDatasetAdapter.num_batches(self)
keras.src.trainers.data_adapters.TFDatasetAdapter.partial_batch_size(self)
keras.src.trainers.data_adapters.tf_dataset_adapter.TFDatasetAdapter(self,dataset,class_weight=None,distribution=None)
keras.src.trainers.data_adapters.tf_dataset_adapter.TFDatasetAdapter.__init__(self,dataset,class_weight=None,distribution=None)
keras.src.trainers.data_adapters.tf_dataset_adapter.TFDatasetAdapter.batch_size(self)
keras.src.trainers.data_adapters.tf_dataset_adapter.TFDatasetAdapter.get_jax_iterator(self)
keras.src.trainers.data_adapters.tf_dataset_adapter.TFDatasetAdapter.get_numpy_iterator(self)
keras.src.trainers.data_adapters.tf_dataset_adapter.TFDatasetAdapter.get_tf_dataset(self)
keras.src.trainers.data_adapters.tf_dataset_adapter.TFDatasetAdapter.get_torch_dataloader(self)
keras.src.trainers.data_adapters.tf_dataset_adapter.TFDatasetAdapter.has_partial_batch(self)
keras.src.trainers.data_adapters.tf_dataset_adapter.TFDatasetAdapter.num_batches(self)
keras.src.trainers.data_adapters.tf_dataset_adapter.TFDatasetAdapter.partial_batch_size(self)
keras.src.trainers.data_adapters.tf_dataset_adapter.make_class_weight_map_fn(class_weight)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/dtype_policies/__init__.py----------------------------------------
keras.src.dtype_policies.__init__.get(identifier)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/dtype_policies/dtype_policy.py----------------------------------------
A:keras.src.dtype_policies.dtype_policy.self._compute_dtype->keras.src.backend.floatx()
A:keras.src.dtype_policies.dtype_policy.self._variable_dtype->keras.src.backend.floatx()
A:keras.src.dtype_policies.dtype_policy.dtype->keras.src.backend.standardize_dtype(from_name)
A:keras.src.dtype_policies.dtype_policy.x->keras.src.backend.cast(x, dtype=dtype)
A:keras.src.dtype_policies.dtype_policy.(self._compute_dtype, self._variable_dtype)->self._parse_name(name)
A:keras.src.dtype_policies.dtype_policy.(self._quantization_mode, self._compute_dtype, self._variable_dtype)->self._parse_name(name)
A:keras.src.dtype_policies.dtype_policy.split_name->name.split('_from_')
A:keras.src.dtype_policies.dtype_policy.policy->FloatDTypePolicy(backend.floatx())
keras.DTypePolicy(self,name)
keras.DTypePolicy._parse_name(self,name)
keras.DTypePolicy.compute_dtype(self)
keras.DTypePolicy.convert_input(self,x,autocast,dtype)
keras.DTypePolicy.from_config(cls,config)
keras.DTypePolicy.get_config(self)
keras.DTypePolicy.name(self)
keras.DTypePolicy.variable_dtype(self)
keras.src.dtype_policies.FloatDTypePolicy(self,name)
keras.src.dtype_policies.FloatDTypePolicy.__repr__(self)
keras.src.dtype_policies.FloatDTypePolicy._parse_name(self,name)
keras.src.dtype_policies.QuantizedDTypePolicy(self,name)
keras.src.dtype_policies.QuantizedDTypePolicy.__repr__(self)
keras.src.dtype_policies.QuantizedDTypePolicy._parse_name(self,name)
keras.src.dtype_policies.QuantizedDTypePolicy.quantization_mode(self)
keras.src.dtype_policies.dtype_policy.DTypePolicy(self,name)
keras.src.dtype_policies.dtype_policy.DTypePolicy.__init__(self,name)
keras.src.dtype_policies.dtype_policy.DTypePolicy._parse_name(self,name)
keras.src.dtype_policies.dtype_policy.DTypePolicy.compute_dtype(self)
keras.src.dtype_policies.dtype_policy.DTypePolicy.convert_input(self,x,autocast,dtype)
keras.src.dtype_policies.dtype_policy.DTypePolicy.from_config(cls,config)
keras.src.dtype_policies.dtype_policy.DTypePolicy.get_config(self)
keras.src.dtype_policies.dtype_policy.DTypePolicy.name(self)
keras.src.dtype_policies.dtype_policy.DTypePolicy.variable_dtype(self)
keras.src.dtype_policies.dtype_policy.FloatDTypePolicy(self,name)
keras.src.dtype_policies.dtype_policy.FloatDTypePolicy.__init__(self,name)
keras.src.dtype_policies.dtype_policy.FloatDTypePolicy.__repr__(self)
keras.src.dtype_policies.dtype_policy.FloatDTypePolicy._parse_name(self,name)
keras.src.dtype_policies.dtype_policy.QuantizedDTypePolicy(self,name)
keras.src.dtype_policies.dtype_policy.QuantizedDTypePolicy.__init__(self,name)
keras.src.dtype_policies.dtype_policy.QuantizedDTypePolicy.__repr__(self)
keras.src.dtype_policies.dtype_policy.QuantizedDTypePolicy._parse_name(self,name)
keras.src.dtype_policies.dtype_policy.QuantizedDTypePolicy.quantization_mode(self)
keras.src.dtype_policies.dtype_policy.dtype_policy()
keras.src.dtype_policies.dtype_policy.set_dtype_policy(policy)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/saving/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/saving/object_registration.py----------------------------------------
A:keras.src.saving.object_registration.self.backup->keras.src.backend.common.global_state.get_global_attribute('custom_objects_scope_dict', {}).copy()
A:keras.src.saving.object_registration.custom_objects_scope_dict->keras.src.backend.common.global_state.get_global_attribute('custom_objects_scope_dict', {})
keras.src.saving.CustomObjectScope(self,custom_objects)
keras.src.saving.CustomObjectScope.__enter__(self)
keras.src.saving.CustomObjectScope.__exit__(self,*args,**kwargs)
keras.src.saving.get_custom_objects()
keras.src.saving.get_registered_name(obj)
keras.src.saving.get_registered_object(name,custom_objects=None,module_objects=None)
keras.src.saving.object_registration.CustomObjectScope(self,custom_objects)
keras.src.saving.object_registration.CustomObjectScope.__enter__(self)
keras.src.saving.object_registration.CustomObjectScope.__exit__(self,*args,**kwargs)
keras.src.saving.object_registration.CustomObjectScope.__init__(self,custom_objects)
keras.src.saving.object_registration.get_custom_objects()
keras.src.saving.object_registration.get_registered_name(obj)
keras.src.saving.object_registration.get_registered_object(name,custom_objects=None,module_objects=None)
keras.src.saving.object_registration.register_keras_serializable(package='Custom',name=None)
keras.src.saving.register_keras_serializable(package='Custom',name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/saving/serialization_lib.py----------------------------------------
A:keras.src.saving.serialization_lib.self.original_value->in_safe_mode()
A:keras.src.saving.serialization_lib.id_to_obj_map->keras.src.backend.common.global_state.get_global_attribute('shared_objects/id_to_obj_map')
A:keras.src.saving.serialization_lib.id_to_config_map->keras.src.backend.common.global_state.get_global_attribute('shared_objects/id_to_config_map')
A:keras.src.saving.serialization_lib.obj_id->int(id(obj))
A:keras.src.saving.serialization_lib.history->list(history)
A:keras.src.saving.serialization_lib.ts_config->list(map(lambda x: x.as_list() if isinstance(x, tf.TensorShape) else x.name if isinstance(x, tf.DType) else x, ts_config))
A:keras.src.saving.serialization_lib.inner_config->map(lambda x: tf.TensorShape(x) if isinstance(x, list) else getattr(tf, x) if hasattr(tf.dtypes, str(x)) else x, inner_config)
A:keras.src.saving.serialization_lib.config_with_public_class->serialize_with_public_class(obj.__class__, inner_config)
A:keras.src.saving.serialization_lib.registered_name->obj.get_config().get('registered_name', class_name)
A:keras.src.saving.serialization_lib.build_config->obj.get_config().get('build_config', None)
A:keras.src.saving.serialization_lib.config['build_config']->serialize_dict(build_config)
A:keras.src.saving.serialization_lib.compile_config->obj.get_config().get('compile_config', None)
A:keras.src.saving.serialization_lib.config['compile_config']->serialize_dict(compile_config)
A:keras.src.saving.serialization_lib.keras_api_name->keras.src.api_export.get_name_from_symbol(fn)
A:keras.src.saving.serialization_lib.parts->keras.src.api_export.get_name_from_symbol(fn).split('.')
A:keras.src.saving.serialization_lib.config->vars(mod).get(registered_name, None).get_config()
A:keras.src.saving.serialization_lib.safe_scope_arg->in_safe_mode()
A:keras.src.saving.serialization_lib.module_objects->kwargs.pop('module_objects', None)
A:keras.src.saving.serialization_lib.tlco->keras.src.backend.common.global_state.get_global_attribute('custom_objects_scope_dict', {})
A:keras.src.saving.serialization_lib.obj->vars(mod).get(registered_name, None)
A:keras.src.saving.serialization_lib.module->vars(mod).get(registered_name, None).get_config().get('module', None)
A:keras.src.saving.serialization_lib.cls->_retrieve_class_or_fn(class_name, registered_name, module, obj_type='class', full_config=config, custom_objects=custom_objects)
A:keras.src.saving.serialization_lib.custom_obj_scope->keras.src.saving.object_registration.CustomObjectScope(custom_objects)
A:keras.src.saving.serialization_lib.safe_mode_scope->SafeModeScope(safe_mode)
A:keras.src.saving.serialization_lib.instance->_retrieve_class_or_fn(class_name, registered_name, module, obj_type='class', full_config=config, custom_objects=custom_objects).from_config(inner_config)
A:keras.src.saving.serialization_lib.custom_obj->keras.src.saving.object_registration.get_registered_object(registered_name, custom_objects=custom_objects)
A:keras.src.saving.serialization_lib.mod->importlib.import_module(module)
keras.src.saving.deserialize_keras_object(config,custom_objects=None,safe_mode=True,**kwargs)
keras.src.saving.serialization_lib.ObjectSharingScope
keras.src.saving.serialization_lib.ObjectSharingScope.__enter__(self)
keras.src.saving.serialization_lib.ObjectSharingScope.__exit__(self,*args,**kwargs)
keras.src.saving.serialization_lib.SafeModeScope(self,safe_mode=True)
keras.src.saving.serialization_lib.SafeModeScope.__enter__(self)
keras.src.saving.serialization_lib.SafeModeScope.__exit__(self,*args,**kwargs)
keras.src.saving.serialization_lib.SafeModeScope.__init__(self,safe_mode=True)
keras.src.saving.serialization_lib.SerializableDict(self,**config)
keras.src.saving.serialization_lib.SerializableDict.__init__(self,**config)
keras.src.saving.serialization_lib.SerializableDict.serialize(self)
keras.src.saving.serialization_lib._get_class_or_fn_config(obj)
keras.src.saving.serialization_lib._retrieve_class_or_fn(name,registered_name,module,obj_type,full_config,custom_objects=None)
keras.src.saving.serialization_lib.deserialize_keras_object(config,custom_objects=None,safe_mode=True,**kwargs)
keras.src.saving.serialization_lib.enable_unsafe_deserialization()
keras.src.saving.serialization_lib.get_build_and_compile_config(obj,config)
keras.src.saving.serialization_lib.get_shared_object(obj_id)
keras.src.saving.serialization_lib.in_safe_mode()
keras.src.saving.serialization_lib.record_object_after_deserialization(obj,obj_id)
keras.src.saving.serialization_lib.record_object_after_serialization(obj,config)
keras.src.saving.serialization_lib.serialize_dict(obj)
keras.src.saving.serialization_lib.serialize_keras_object(obj)
keras.src.saving.serialization_lib.serialize_with_public_class(cls,inner_config=None)
keras.src.saving.serialization_lib.serialize_with_public_fn(fn,config,fn_module_name=None)
keras.src.saving.serialize_keras_object(obj)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/saving/saving_api.py----------------------------------------
A:keras.src.saving.saving_api.include_optimizer->kwargs.pop('include_optimizer', True)
A:keras.src.saving.saving_api.save_format->kwargs.pop('save_format', False)
A:keras.src.saving.saving_api.exists->os.path.exists(filepath)
A:keras.src.saving.saving_api.proceed->keras.src.utils.io_utils.ask_to_proceed_with_overwrite(filepath)
A:keras.src.saving.saving_api.local_path->os.path.join(saving_lib.get_temp_dir(), os.path.basename(filepath))
A:keras.src.saving.saving_api.by_name->kwargs.pop('by_name', False)
keras.src.saving.load_model(filepath,custom_objects=None,compile=True,safe_mode=True)
keras.src.saving.saving_api.load_model(filepath,custom_objects=None,compile=True,safe_mode=True)
keras.src.saving.saving_api.load_weights(model,filepath,skip_mismatch=False,**kwargs)
keras.src.saving.saving_api.save_model(model,filepath,overwrite=True,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/saving/saving_lib.py----------------------------------------
A:keras.src.saving.saving_lib.filepath->str(filepath)
A:keras.src.saving.saving_lib.serialized_model_dict->serialize_keras_object(model)
A:keras.src.saving.saving_lib.config_json->f.read()
A:keras.src.saving.saving_lib.metadata_json->json.dumps({'keras_version': keras_version, 'date_saved': datetime.datetime.now().strftime('%Y-%m-%d@%H:%M:%S')})
A:keras.src.saving.saving_lib.zip_filepath->io.BytesIO()
A:keras.src.saving.saving_lib.weights_store->H5IOStore(_VARS_FNAME + '.h5', archive=archive, mode='r')
A:keras.src.saving.saving_lib.asset_store->DiskIOStore(_ASSETS_DIRNAME, archive=zf, mode='r')
A:keras.src.saving.saving_lib.config_dict->json.loads(config_json)
A:keras.src.saving.saving_lib.model->deserialize_keras_object(config_dict, custom_objects, safe_mode=safe_mode)
A:keras.src.saving.saving_lib.all_filenames->zf.namelist()
A:keras.src.saving.saving_lib.failed_trackables->set()
A:keras.src.saving.saving_lib.archive->zipfile.ZipFile(filepath, 'r')
A:keras.src.saving.saving_lib.system_file_path->keras.src.utils.file_utils.join(system_path, file_name).replace('\\', '/')
A:keras.src.saving.saving_lib.zip_file_path->keras.src.utils.file_utils.join(zip_path, file_name).replace('\\', '/')
A:keras.src.saving.saving_lib.attr_skiplist->get_attr_skiplist(obj_type)
A:keras.src.saving.saving_lib.child_obj->getattr(trackable, child_attr)
A:keras.src.saving.saving_lib.currently_failed->len(failed_trackables)
A:keras.src.saving.saving_lib.container->list(container.values())
A:keras.src.saving.saving_lib.name->keras.src.utils.naming.to_snake_case(trackable.__class__.__name__)
A:keras.src.saving.saving_lib.self.tmp_dir->get_temp_dir()
A:keras.src.saving.saving_lib.self.working_dir->keras.src.utils.file_utils.join(self.tmp_dir, self.root_path).replace('\\', '/')
A:keras.src.saving.saving_lib.path->path.replace('layers', '_layer_checkpoint_dependencies').replace('layers', '_layer_checkpoint_dependencies')
A:keras.src.saving.saving_lib.self.io_file->self.archive.open(self.root_path, 'r')
A:keras.src.saving.saving_lib.self.h5_file->h5py.File(root_path, mode=self.mode)
A:keras.src.saving.saving_lib.self.group->self.h5_file.create_group(self.path).create_group('vars')
A:keras.src.saving.saving_lib.value->numpy.array(value, dtype=ml_dtypes.bfloat16)
A:keras.src.saving.saving_lib.ds->self.group.create_dataset(key, data=value)
A:keras.src.saving.saving_lib.self.f->open(self.root_path, mode='wb')
A:keras.src.saving.saving_lib.self.contents->numpy.load(self.f, allow_pickle=True)
A:keras.src.saving.saving_lib.temp_dir->tempfile.mkdtemp()
A:keras.src.saving.saving_lib.testfile->tempfile.TemporaryFile(dir=temp_dir)
A:keras.src.saving.saving_lib.skiplist->keras.src.backend.common.global_state.get_global_attribute(f'saving_attr_skiplist_{obj_type}', None)
A:keras.src.saving.saving_lib.ref_obj->Loss()
A:keras.src.saving.saving_lib.ref_obj_a->Metric()
A:keras.src.saving.saving_lib.ref_obj_b->CompileMetrics([], [])
keras.src.saving.saving_lib.DiskIOStore(self,root_path,archive=None,mode=None)
keras.src.saving.saving_lib.DiskIOStore.__init__(self,root_path,archive=None,mode=None)
keras.src.saving.saving_lib.DiskIOStore.close(self)
keras.src.saving.saving_lib.DiskIOStore.get(self,path)
keras.src.saving.saving_lib.DiskIOStore.make(self,path)
keras.src.saving.saving_lib.H5Entry(self,h5_file,path,mode)
keras.src.saving.saving_lib.H5Entry.__getitem__(self,name)
keras.src.saving.saving_lib.H5Entry.__init__(self,h5_file,path,mode)
keras.src.saving.saving_lib.H5Entry.__len__(self)
keras.src.saving.saving_lib.H5Entry.__setitem__(self,key,value)
keras.src.saving.saving_lib.H5Entry.items(self)
keras.src.saving.saving_lib.H5Entry.keys(self)
keras.src.saving.saving_lib.H5Entry.values(self)
keras.src.saving.saving_lib.H5IOStore(self,root_path,archive=None,mode='r')
keras.src.saving.saving_lib.H5IOStore.__init__(self,root_path,archive=None,mode='r')
keras.src.saving.saving_lib.H5IOStore.close(self)
keras.src.saving.saving_lib.H5IOStore.get(self,path)
keras.src.saving.saving_lib.H5IOStore.make(self,path)
keras.src.saving.saving_lib.NpzIOStore(self,root_path,archive=None,mode='r')
keras.src.saving.saving_lib.NpzIOStore.__init__(self,root_path,archive=None,mode='r')
keras.src.saving.saving_lib.NpzIOStore.close(self)
keras.src.saving.saving_lib.NpzIOStore.get(self,path)
keras.src.saving.saving_lib.NpzIOStore.make(self,path)
keras.src.saving.saving_lib._is_keras_trackable(obj)
keras.src.saving.saving_lib._load_container_state(container,weights_store,assets_store,inner_path,skip_mismatch,visited_trackables,failed_trackables,error_msgs)
keras.src.saving.saving_lib._load_state(trackable,weights_store,assets_store,inner_path,skip_mismatch=False,visited_trackables=None,failed_trackables=None,error_msgs=None)
keras.src.saving.saving_lib._name_key(name)
keras.src.saving.saving_lib._raise_loading_failure(error_msgs,warn_only=False)
keras.src.saving.saving_lib._save_container_state(container,weights_store,assets_store,inner_path,visited_trackables)
keras.src.saving.saving_lib._save_state(trackable,weights_store,assets_store,inner_path,visited_trackables)
keras.src.saving.saving_lib._walk_trackable(trackable)
keras.src.saving.saving_lib._write_to_zip_recursively(zipfile_to_save,system_path,zip_path)
keras.src.saving.saving_lib.get_attr_skiplist(obj_type)
keras.src.saving.saving_lib.get_temp_dir()
keras.src.saving.saving_lib.load_model(filepath,custom_objects=None,compile=True,safe_mode=True)
keras.src.saving.saving_lib.load_weights_only(model,filepath,skip_mismatch=False)
keras.src.saving.saving_lib.save_model(model,filepath,weights_format='h5')
keras.src.saving.saving_lib.save_weights_only(model,filepath)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/datasets/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/datasets/cifar.py----------------------------------------
A:keras.src.datasets.cifar.d->_pickle.load(f, encoding='bytes')
A:keras.src.datasets.cifar.data->data.reshape(data.shape[0], 3, 32, 32).reshape(data.shape[0], 3, 32, 32)
keras.src.datasets.cifar.load_batch(fpath,label_key='labels')


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/datasets/reuters.py----------------------------------------
A:keras.src.datasets.reuters.path->get_file(path, origin=origin_folder + 'reuters_word_index.json', file_hash='4d44cc38712099c9e383dc6e5f11a921')
A:keras.src.datasets.reuters.rng->numpy.random.RandomState(seed)
A:keras.src.datasets.reuters.indices->numpy.arange(len(xs))
A:keras.src.datasets.reuters.(xs, labels)->remove_long_seq(maxlen, xs, labels)
A:keras.src.datasets.reuters.num_words->max((max(x) for x in xs))
A:keras.src.datasets.reuters.idx->int(len(xs) * (1 - test_split))
keras.src.datasets.reuters.get_label_names()
keras.src.datasets.reuters.get_word_index(path='reuters_word_index.json')
keras.src.datasets.reuters.load_data(path='reuters.npz',num_words=None,skip_top=0,maxlen=None,test_split=0.2,seed=113,start_char=1,oov_char=2,index_from=3)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/datasets/fashion_mnist.py----------------------------------------
A:keras.src.datasets.fashion_mnist.dirname->os.path.join('datasets', 'fashion-mnist')
A:keras.src.datasets.fashion_mnist.y_train->numpy.frombuffer(lbpath.read(), np.uint8, offset=8)
A:keras.src.datasets.fashion_mnist.x_train->numpy.frombuffer(imgpath.read(), np.uint8, offset=16).reshape(len(y_train), 28, 28)
A:keras.src.datasets.fashion_mnist.y_test->numpy.frombuffer(lbpath.read(), np.uint8, offset=8)
A:keras.src.datasets.fashion_mnist.x_test->numpy.frombuffer(imgpath.read(), np.uint8, offset=16).reshape(len(y_test), 28, 28)
keras.src.datasets.fashion_mnist.load_data()


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/datasets/california_housing.py----------------------------------------
A:keras.src.datasets.california_housing.path->get_file(path, origin=origin_folder + 'california_housing.npz', file_hash='1a2e3a52e0398de6463aebe6f4a8da34fb21fbb6b934cf88c3425e766f2a1a6f')
A:keras.src.datasets.california_housing.rng->numpy.random.RandomState(seed)
A:keras.src.datasets.california_housing.indices->numpy.arange(len(x))
A:keras.src.datasets.california_housing.x_train->numpy.array(x[:int(len(x) * (1 - test_split))])
A:keras.src.datasets.california_housing.y_train->numpy.array(y[:int(len(x) * (1 - test_split))])
A:keras.src.datasets.california_housing.x_test->numpy.array(x[int(len(x) * (1 - test_split)):])
A:keras.src.datasets.california_housing.y_test->numpy.array(y[int(len(x) * (1 - test_split)):])
keras.src.datasets.california_housing.load_data(version='large',path='california_housing.npz',test_split=0.2,seed=113)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/datasets/cifar100.py----------------------------------------
A:keras.src.datasets.cifar100.path->get_file(fname=dirname, origin=origin, untar=True, file_hash='85cd44d02ba6437773c5bbd22e183051d648de2e7d6b014e1ef29b855ba677a7')
A:keras.src.datasets.cifar100.fpath->os.path.join(path, 'test')
A:keras.src.datasets.cifar100.(x_train, y_train)->load_batch(fpath, label_key=label_mode + '_labels')
A:keras.src.datasets.cifar100.(x_test, y_test)->load_batch(fpath, label_key=label_mode + '_labels')
A:keras.src.datasets.cifar100.y_train->numpy.reshape(y_train, (len(y_train), 1))
A:keras.src.datasets.cifar100.y_test->numpy.reshape(y_test, (len(y_test), 1))
A:keras.src.datasets.cifar100.x_train->x_train.transpose(0, 2, 3, 1).transpose(0, 2, 3, 1)
A:keras.src.datasets.cifar100.x_test->x_test.transpose(0, 2, 3, 1).transpose(0, 2, 3, 1)
keras.src.datasets.cifar100.load_data(label_mode='fine')


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/datasets/mnist.py----------------------------------------
A:keras.src.datasets.mnist.path->get_file(fname=path, origin=origin_folder + 'mnist.npz', file_hash='731c5ac602752760c8e48fbffcf8c3b850d9dc2a2aedcf2cc48468fc17b673d1')
keras.src.datasets.mnist.load_data(path='mnist.npz')


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/datasets/boston_housing.py----------------------------------------
A:keras.src.datasets.boston_housing.path->get_file(path, origin=origin_folder + 'boston_housing.npz', file_hash='f553886a1f8d56431e820c5b82552d9d95cfcb96d1e678153f8839538947dff5')
A:keras.src.datasets.boston_housing.rng->numpy.random.RandomState(seed)
A:keras.src.datasets.boston_housing.indices->numpy.arange(len(x))
A:keras.src.datasets.boston_housing.x_train->numpy.array(x[:int(len(x) * (1 - test_split))])
A:keras.src.datasets.boston_housing.y_train->numpy.array(y[:int(len(x) * (1 - test_split))])
A:keras.src.datasets.boston_housing.x_test->numpy.array(x[int(len(x) * (1 - test_split)):])
A:keras.src.datasets.boston_housing.y_test->numpy.array(y[int(len(x) * (1 - test_split)):])
keras.src.datasets.boston_housing.load_data(path='boston_housing.npz',test_split=0.2,seed=113)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/datasets/imdb.py----------------------------------------
A:keras.src.datasets.imdb.path->get_file(fname=path, origin=origin_folder + 'imdb_word_index.json', file_hash='bfafd718b763782e994055a2d397834f')
A:keras.src.datasets.imdb.rng->numpy.random.RandomState(seed)
A:keras.src.datasets.imdb.indices->numpy.arange(len(x_test))
A:keras.src.datasets.imdb.(x_train, labels_train)->remove_long_seq(maxlen, x_train, labels_train)
A:keras.src.datasets.imdb.(x_test, labels_test)->remove_long_seq(maxlen, x_test, labels_test)
A:keras.src.datasets.imdb.labels->numpy.concatenate([labels_train, labels_test])
A:keras.src.datasets.imdb.num_words->max((max(x) for x in xs))
A:keras.src.datasets.imdb.idx->len(x_train)
keras.src.datasets.imdb.get_word_index(path='imdb_word_index.json')
keras.src.datasets.imdb.load_data(path='imdb.npz',num_words=None,skip_top=0,maxlen=None,seed=113,start_char=1,oov_char=2,index_from=3,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/datasets/cifar10.py----------------------------------------
A:keras.src.datasets.cifar10.path->get_file(fname=dirname, origin=origin, untar=True, file_hash='6d958be074577803d12ecdefd02955f39262c83c16fe9348329d7fe0b5c001ce')
A:keras.src.datasets.cifar10.x_train->x_train.transpose(0, 2, 3, 1).transpose(0, 2, 3, 1)
A:keras.src.datasets.cifar10.y_train->numpy.reshape(y_train, (len(y_train), 1))
A:keras.src.datasets.cifar10.fpath->os.path.join(path, 'test_batch')
A:keras.src.datasets.cifar10.(x_train[(i - 1) * 10000:i * 10000, :, :, :], y_train[(i - 1) * 10000:i * 10000])->load_batch(fpath)
A:keras.src.datasets.cifar10.(x_test, y_test)->load_batch(fpath)
A:keras.src.datasets.cifar10.y_test->y_test.astype(y_train.dtype).astype(y_train.dtype)
A:keras.src.datasets.cifar10.x_test->x_test.astype(x_train.dtype).astype(x_train.dtype)
keras.src.datasets.cifar10.load_data()


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/metrics/f_score_metrics.py----------------------------------------
A:keras.src.metrics.f_score_metrics.self.true_positives->_add_zeros_variable('true_positives')
A:keras.src.metrics.f_score_metrics.self.false_positives->_add_zeros_variable('false_positives')
A:keras.src.metrics.f_score_metrics.self.false_negatives->_add_zeros_variable('false_negatives')
A:keras.src.metrics.f_score_metrics.self.intermediate_weights->_add_zeros_variable('intermediate_weights')
A:keras.src.metrics.f_score_metrics.y_true->keras.src.ops.cast(y_true, dtype=self.dtype)
A:keras.src.metrics.f_score_metrics.y_pred->keras.src.ops.cast(y_pred, dtype=self.dtype)
A:keras.src.metrics.f_score_metrics.threshold->keras.src.ops.max(y_pred, axis=-1, keepdims=True)
A:keras.src.metrics.f_score_metrics.sample_weight->keras.src.ops.convert_to_tensor(sample_weight, dtype=self.dtype)
A:keras.src.metrics.f_score_metrics.val->keras.src.ops.multiply(val, ops.expand_dims(sample_weight, 1))
A:keras.src.metrics.f_score_metrics.precision->keras.src.ops.convert_to_tensor(precision, dtype=self.dtype)
A:keras.src.metrics.f_score_metrics.recall->keras.src.ops.convert_to_tensor(recall, dtype=self.dtype)
A:keras.src.metrics.f_score_metrics.mean->keras.src.ops.divide(mul_value, add_value + backend.epsilon())
A:keras.src.metrics.f_score_metrics.weights->keras.src.ops.divide(self.intermediate_weights, ops.sum(self.intermediate_weights) + backend.epsilon())
A:keras.src.metrics.f_score_metrics.f1_score->keras.src.ops.mean(f1_score)
A:keras.src.metrics.f_score_metrics.base_config->super().get_config()
keras.src.metrics.F1Score(self,average=None,threshold=None,name='f1_score',dtype=None)
keras.src.metrics.F1Score.get_config(self)
keras.src.metrics.FBetaScore(self,average=None,beta=1.0,threshold=None,name='fbeta_score',dtype=None)
keras.src.metrics.FBetaScore._build(self,y_true_shape,y_pred_shape)
keras.src.metrics.FBetaScore.get_config(self)
keras.src.metrics.FBetaScore.reset_state(self)
keras.src.metrics.FBetaScore.result(self)
keras.src.metrics.FBetaScore.update_state(self,y_true,y_pred,sample_weight=None)
keras.src.metrics.f_score_metrics.F1Score(self,average=None,threshold=None,name='f1_score',dtype=None)
keras.src.metrics.f_score_metrics.F1Score.__init__(self,average=None,threshold=None,name='f1_score',dtype=None)
keras.src.metrics.f_score_metrics.F1Score.get_config(self)
keras.src.metrics.f_score_metrics.FBetaScore(self,average=None,beta=1.0,threshold=None,name='fbeta_score',dtype=None)
keras.src.metrics.f_score_metrics.FBetaScore.__init__(self,average=None,beta=1.0,threshold=None,name='fbeta_score',dtype=None)
keras.src.metrics.f_score_metrics.FBetaScore._build(self,y_true_shape,y_pred_shape)
keras.src.metrics.f_score_metrics.FBetaScore.get_config(self)
keras.src.metrics.f_score_metrics.FBetaScore.reset_state(self)
keras.src.metrics.f_score_metrics.FBetaScore.result(self)
keras.src.metrics.f_score_metrics.FBetaScore.update_state(self,y_true,y_pred,sample_weight=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/metrics/__init__.py----------------------------------------
A:keras.src.metrics.__init__.obj->obj()
keras.src.metrics.__init__.deserialize(config,custom_objects=None)
keras.src.metrics.__init__.get(identifier)
keras.src.metrics.__init__.serialize(metric)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/metrics/iou_metrics.py----------------------------------------
A:keras.src.metrics.iou_metrics.self.total_cm->self.add_variable(name='total_confusion_matrix', shape=(num_classes, num_classes), initializer=initializers.Zeros())
A:keras.src.metrics.iou_metrics.y_true->keras.src.ops.convert_to_tensor(y_true, dtype=self.dtype)
A:keras.src.metrics.iou_metrics.y_pred->keras.src.ops.cast(y_pred >= self.threshold, self.dtype)
A:keras.src.metrics.iou_metrics.sample_weight->keras.src.ops.cast(sample_weight, dtype=self.dtype)
A:keras.src.metrics.iou_metrics.ignore_class->keras.src.ops.convert_to_tensor(self.ignore_class, y_true.dtype)
A:keras.src.metrics.iou_metrics.valid_mask->keras.src.ops.not_equal(y_true, ignore_class)
A:keras.src.metrics.iou_metrics.current_cm->confusion_matrix(y_true, y_pred, self.num_classes, weights=sample_weight, dtype='float32')
A:keras.src.metrics.iou_metrics.self.target_class_ids->list(target_class_ids)
A:keras.src.metrics.iou_metrics.sum_over_row->keras.src.ops.cast(ops.sum(self.total_cm, axis=0), dtype=self.dtype)
A:keras.src.metrics.iou_metrics.sum_over_col->keras.src.ops.cast(ops.sum(self.total_cm, axis=1), dtype=self.dtype)
A:keras.src.metrics.iou_metrics.true_positives->keras.src.ops.take_along_axis(true_positives, target_class_ids, axis=-1)
A:keras.src.metrics.iou_metrics.target_class_ids->list(range(num_classes))
A:keras.src.metrics.iou_metrics.denominator->keras.src.ops.take_along_axis(denominator, target_class_ids, axis=-1)
A:keras.src.metrics.iou_metrics.num_valid_entries->keras.src.ops.sum(ops.cast(ops.greater(denominator, 1e-09), dtype=self.dtype))
A:keras.src.metrics.iou_metrics.iou->keras.src.ops.divide(true_positives, denominator + backend.epsilon())
A:keras.src.metrics.iou_metrics.base_config->super().get_config()
keras.src.metrics.BinaryIoU(self,target_class_ids=(0,1),threshold=0.5,name=None,dtype=None)
keras.src.metrics.BinaryIoU.get_config(self)
keras.src.metrics.BinaryIoU.update_state(self,y_true,y_pred,sample_weight=None)
keras.src.metrics.IoU(self,num_classes,target_class_ids,name=None,dtype=None,ignore_class=None,sparse_y_true=True,sparse_y_pred=True,axis=-1)
keras.src.metrics.IoU.get_config(self)
keras.src.metrics.IoU.result(self)
keras.src.metrics.MeanIoU(self,num_classes,name=None,dtype=None,ignore_class=None,sparse_y_true=True,sparse_y_pred=True,axis=-1)
keras.src.metrics.MeanIoU.get_config(self)
keras.src.metrics.OneHotIoU(self,num_classes,target_class_ids,name=None,dtype=None,ignore_class=None,sparse_y_pred=False,axis=-1)
keras.src.metrics.OneHotIoU.get_config(self)
keras.src.metrics.OneHotMeanIoU(self,num_classes,name=None,dtype=None,ignore_class=None,sparse_y_pred=False,axis=-1)
keras.src.metrics.OneHotMeanIoU.get_config(self)
keras.src.metrics.iou_metrics.BinaryIoU(self,target_class_ids=(0,1),threshold=0.5,name=None,dtype=None)
keras.src.metrics.iou_metrics.BinaryIoU.__init__(self,target_class_ids=(0,1),threshold=0.5,name=None,dtype=None)
keras.src.metrics.iou_metrics.BinaryIoU.get_config(self)
keras.src.metrics.iou_metrics.BinaryIoU.update_state(self,y_true,y_pred,sample_weight=None)
keras.src.metrics.iou_metrics.IoU(self,num_classes,target_class_ids,name=None,dtype=None,ignore_class=None,sparse_y_true=True,sparse_y_pred=True,axis=-1)
keras.src.metrics.iou_metrics.IoU.__init__(self,num_classes,target_class_ids,name=None,dtype=None,ignore_class=None,sparse_y_true=True,sparse_y_pred=True,axis=-1)
keras.src.metrics.iou_metrics.IoU.get_config(self)
keras.src.metrics.iou_metrics.IoU.result(self)
keras.src.metrics.iou_metrics.MeanIoU(self,num_classes,name=None,dtype=None,ignore_class=None,sparse_y_true=True,sparse_y_pred=True,axis=-1)
keras.src.metrics.iou_metrics.MeanIoU.__init__(self,num_classes,name=None,dtype=None,ignore_class=None,sparse_y_true=True,sparse_y_pred=True,axis=-1)
keras.src.metrics.iou_metrics.MeanIoU.get_config(self)
keras.src.metrics.iou_metrics.OneHotIoU(self,num_classes,target_class_ids,name=None,dtype=None,ignore_class=None,sparse_y_pred=False,axis=-1)
keras.src.metrics.iou_metrics.OneHotIoU.__init__(self,num_classes,target_class_ids,name=None,dtype=None,ignore_class=None,sparse_y_pred=False,axis=-1)
keras.src.metrics.iou_metrics.OneHotIoU.get_config(self)
keras.src.metrics.iou_metrics.OneHotMeanIoU(self,num_classes,name=None,dtype=None,ignore_class=None,sparse_y_pred=False,axis=-1)
keras.src.metrics.iou_metrics.OneHotMeanIoU.__init__(self,num_classes,name=None,dtype=None,ignore_class=None,sparse_y_pred=False,axis=-1)
keras.src.metrics.iou_metrics.OneHotMeanIoU.get_config(self)
keras.src.metrics.iou_metrics._IoUBase(self,num_classes,name=None,dtype=None,ignore_class=None,sparse_y_true=True,sparse_y_pred=True,axis=-1)
keras.src.metrics.iou_metrics._IoUBase.__init__(self,num_classes,name=None,dtype=None,ignore_class=None,sparse_y_true=True,sparse_y_pred=True,axis=-1)
keras.src.metrics.iou_metrics._IoUBase.reset_state(self)
keras.src.metrics.iou_metrics._IoUBase.update_state(self,y_true,y_pred,sample_weight=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/metrics/regression_metrics.py----------------------------------------
A:keras.src.metrics.regression_metrics.y_true->normalize(y_true, axis=axis)
A:keras.src.metrics.regression_metrics.y_pred->normalize(y_pred, axis=axis)
A:keras.src.metrics.regression_metrics.(y_true, y_pred)->squeeze_or_expand_to_same_rank(y_true, y_pred)
A:keras.src.metrics.regression_metrics.error_sq->keras.src.ops.square(y_pred - y_true)
A:keras.src.metrics.regression_metrics.self.num_samples->self.add_variable(shape=(), initializer=initializers.Zeros(), name='num_samples')
A:keras.src.metrics.regression_metrics.self.squared_sum->self.add_variable(name='squared_sum', shape=[num_classes], initializer=initializers.Zeros())
A:keras.src.metrics.regression_metrics.self.sum->self.add_variable(name='sum', shape=[num_classes], initializer=initializers.Zeros())
A:keras.src.metrics.regression_metrics.self.total_mse->self.add_variable(name='residual', shape=[num_classes], initializer=initializers.Zeros())
A:keras.src.metrics.regression_metrics.self.count->self.add_variable(name='count', shape=[num_classes], initializer=initializers.Zeros())
A:keras.src.metrics.regression_metrics.sample_weight->keras.src.ops.broadcast_to(sample_weight, ops.shape(y_true))
A:keras.src.metrics.regression_metrics.raw_scores->keras.src.ops.where(ops.isinf(raw_scores), 0.0, raw_scores)
A:keras.src.metrics.regression_metrics.r2_score->keras.src.ops.subtract(1.0, ops.divide(num, den))
A:keras.src.metrics.regression_metrics.weighted_sum->keras.src.ops.sum(total * raw_scores)
A:keras.src.metrics.regression_metrics.sum_of_weights->keras.src.ops.sum(total)
A:keras.src.metrics.regression_metrics.n->keras.src.ops.convert_to_tensor(self.num_samples, dtype='float32')
A:keras.src.metrics.regression_metrics.p->keras.src.ops.convert_to_tensor(self.num_regressors, dtype='float32')
A:keras.src.metrics.regression_metrics.num->keras.src.ops.multiply(ops.subtract(1.0, r2_score), ops.subtract(n, 1.0))
A:keras.src.metrics.regression_metrics.den->keras.src.ops.subtract(ops.subtract(n, p), 1.0)
A:keras.src.metrics.regression_metrics.base_config->super().get_config()
keras.src.metrics.CosineSimilarity(self,name='cosine_similarity',dtype=None,axis=-1)
keras.src.metrics.CosineSimilarity.get_config(self)
keras.src.metrics.LogCoshError(self,name='logcosh',dtype=None)
keras.src.metrics.LogCoshError.get_config(self)
keras.src.metrics.MeanAbsoluteError(self,name='mean_absolute_error',dtype=None)
keras.src.metrics.MeanAbsoluteError.get_config(self)
keras.src.metrics.MeanAbsolutePercentageError(self,name='mean_absolute_percentage_error',dtype=None)
keras.src.metrics.MeanAbsolutePercentageError.get_config(self)
keras.src.metrics.MeanSquaredError(self,name='mean_squared_error',dtype=None)
keras.src.metrics.MeanSquaredError.get_config(self)
keras.src.metrics.MeanSquaredLogarithmicError(self,name='mean_squared_logarithmic_error',dtype=None)
keras.src.metrics.MeanSquaredLogarithmicError.get_config(self)
keras.src.metrics.R2Score(self,class_aggregation='uniform_average',num_regressors=0,name='r2_score',dtype=None)
keras.src.metrics.R2Score._build(self,y_true_shape,y_pred_shape)
keras.src.metrics.R2Score.get_config(self)
keras.src.metrics.R2Score.reset_state(self)
keras.src.metrics.R2Score.result(self)
keras.src.metrics.R2Score.update_state(self,y_true,y_pred,sample_weight=None)
keras.src.metrics.RootMeanSquaredError(self,name='root_mean_squared_error',dtype=None)
keras.src.metrics.RootMeanSquaredError.result(self)
keras.src.metrics.RootMeanSquaredError.update_state(self,y_true,y_pred,sample_weight=None)
keras.src.metrics.regression_metrics.CosineSimilarity(self,name='cosine_similarity',dtype=None,axis=-1)
keras.src.metrics.regression_metrics.CosineSimilarity.__init__(self,name='cosine_similarity',dtype=None,axis=-1)
keras.src.metrics.regression_metrics.CosineSimilarity.get_config(self)
keras.src.metrics.regression_metrics.LogCoshError(self,name='logcosh',dtype=None)
keras.src.metrics.regression_metrics.LogCoshError.__init__(self,name='logcosh',dtype=None)
keras.src.metrics.regression_metrics.LogCoshError.get_config(self)
keras.src.metrics.regression_metrics.MeanAbsoluteError(self,name='mean_absolute_error',dtype=None)
keras.src.metrics.regression_metrics.MeanAbsoluteError.__init__(self,name='mean_absolute_error',dtype=None)
keras.src.metrics.regression_metrics.MeanAbsoluteError.get_config(self)
keras.src.metrics.regression_metrics.MeanAbsolutePercentageError(self,name='mean_absolute_percentage_error',dtype=None)
keras.src.metrics.regression_metrics.MeanAbsolutePercentageError.__init__(self,name='mean_absolute_percentage_error',dtype=None)
keras.src.metrics.regression_metrics.MeanAbsolutePercentageError.get_config(self)
keras.src.metrics.regression_metrics.MeanSquaredError(self,name='mean_squared_error',dtype=None)
keras.src.metrics.regression_metrics.MeanSquaredError.__init__(self,name='mean_squared_error',dtype=None)
keras.src.metrics.regression_metrics.MeanSquaredError.get_config(self)
keras.src.metrics.regression_metrics.MeanSquaredLogarithmicError(self,name='mean_squared_logarithmic_error',dtype=None)
keras.src.metrics.regression_metrics.MeanSquaredLogarithmicError.__init__(self,name='mean_squared_logarithmic_error',dtype=None)
keras.src.metrics.regression_metrics.MeanSquaredLogarithmicError.get_config(self)
keras.src.metrics.regression_metrics.R2Score(self,class_aggregation='uniform_average',num_regressors=0,name='r2_score',dtype=None)
keras.src.metrics.regression_metrics.R2Score.__init__(self,class_aggregation='uniform_average',num_regressors=0,name='r2_score',dtype=None)
keras.src.metrics.regression_metrics.R2Score._build(self,y_true_shape,y_pred_shape)
keras.src.metrics.regression_metrics.R2Score.get_config(self)
keras.src.metrics.regression_metrics.R2Score.reset_state(self)
keras.src.metrics.regression_metrics.R2Score.result(self)
keras.src.metrics.regression_metrics.R2Score.update_state(self,y_true,y_pred,sample_weight=None)
keras.src.metrics.regression_metrics.RootMeanSquaredError(self,name='root_mean_squared_error',dtype=None)
keras.src.metrics.regression_metrics.RootMeanSquaredError.__init__(self,name='root_mean_squared_error',dtype=None)
keras.src.metrics.regression_metrics.RootMeanSquaredError.result(self)
keras.src.metrics.regression_metrics.RootMeanSquaredError.update_state(self,y_true,y_pred,sample_weight=None)
keras.src.metrics.regression_metrics.cosine_similarity(y_true,y_pred,axis=-1)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/metrics/reduction_metrics.py----------------------------------------
A:keras.src.metrics.reduction_metrics.mask->getattr(y_pred, '_keras_mask', None)
A:keras.src.metrics.reduction_metrics.values->self._fn(y_true, y_pred, **self._fn_kwargs)
A:keras.src.metrics.reduction_metrics.sample_weight->keras.src.losses.loss.apply_mask(sample_weight, mask, dtype=self.dtype, reduction='sum')
A:keras.src.metrics.reduction_metrics.(values, sample_weight)->reduce_to_samplewise_values(values, sample_weight, reduce_fn=ops.mean, dtype=self.dtype)
A:keras.src.metrics.reduction_metrics.weight_ndim->len(sample_weight.shape)
A:keras.src.metrics.reduction_metrics.values_ndim->len(values.shape)
A:keras.src.metrics.reduction_metrics.self.total->self.add_variable(shape=(), initializer=initializers.Zeros(), dtype=self.dtype, name='total')
A:keras.src.metrics.reduction_metrics.(values, _)->reduce_to_samplewise_values(values, sample_weight, reduce_fn=ops.sum, dtype=self.dtype)
A:keras.src.metrics.reduction_metrics.self.count->self.add_variable(shape=(), initializer=initializers.Zeros(), dtype=self.dtype, name='count')
A:keras.src.metrics.reduction_metrics.num_samples->keras.src.ops.sum(sample_weight)
A:keras.src.metrics.reduction_metrics.base_config->super().get_config()
A:keras.src.metrics.reduction_metrics.config->keras.src.saving.serialization_lib.deserialize_keras_object(config)
keras.src.metrics.Mean(self,name='mean',dtype=None)
keras.src.metrics.Mean.reset_state(self)
keras.src.metrics.Mean.result(self)
keras.src.metrics.Mean.update_state(self,values,sample_weight=None)
keras.src.metrics.MeanMetricWrapper(self,fn,name=None,dtype=None,**kwargs)
keras.src.metrics.MeanMetricWrapper.from_config(cls,config)
keras.src.metrics.MeanMetricWrapper.get_config(self)
keras.src.metrics.MeanMetricWrapper.update_state(self,y_true,y_pred,sample_weight=None)
keras.src.metrics.Sum(self,name='sum',dtype=None)
keras.src.metrics.Sum.reset_state(self)
keras.src.metrics.Sum.result(self)
keras.src.metrics.Sum.update_state(self,values,sample_weight=None)
keras.src.metrics.reduction_metrics.Mean(self,name='mean',dtype=None)
keras.src.metrics.reduction_metrics.Mean.__init__(self,name='mean',dtype=None)
keras.src.metrics.reduction_metrics.Mean.reset_state(self)
keras.src.metrics.reduction_metrics.Mean.result(self)
keras.src.metrics.reduction_metrics.Mean.update_state(self,values,sample_weight=None)
keras.src.metrics.reduction_metrics.MeanMetricWrapper(self,fn,name=None,dtype=None,**kwargs)
keras.src.metrics.reduction_metrics.MeanMetricWrapper.__init__(self,fn,name=None,dtype=None,**kwargs)
keras.src.metrics.reduction_metrics.MeanMetricWrapper.from_config(cls,config)
keras.src.metrics.reduction_metrics.MeanMetricWrapper.get_config(self)
keras.src.metrics.reduction_metrics.MeanMetricWrapper.update_state(self,y_true,y_pred,sample_weight=None)
keras.src.metrics.reduction_metrics.Sum(self,name='sum',dtype=None)
keras.src.metrics.reduction_metrics.Sum.__init__(self,name='sum',dtype=None)
keras.src.metrics.reduction_metrics.Sum.reset_state(self)
keras.src.metrics.reduction_metrics.Sum.result(self)
keras.src.metrics.reduction_metrics.Sum.update_state(self,values,sample_weight=None)
keras.src.metrics.reduction_metrics.reduce_to_samplewise_values(values,sample_weight,reduce_fn,dtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/metrics/metrics_utils.py----------------------------------------
A:keras.src.metrics.metrics_utils.thresholds->keras.src.ops.convert_to_tensor(thresholds, dtype=variable_dtype)
A:keras.src.metrics.metrics_utils.sample_weights->keras.src.ops.reshape(sample_weights, [-1])
A:keras.src.metrics.metrics_utils.label_weights->keras.src.ops.broadcast_to(label_weights, ops.shape(y_pred))
A:keras.src.metrics.metrics_utils.weights->keras.src.ops.convert_to_tensor(weights, dtype)
A:keras.src.metrics.metrics_utils.y_pred->_filter_top_k(y_pred, top_k)
A:keras.src.metrics.metrics_utils.y_true->keras.src.ops.cast(y_true, dtype=variable_dtype)
A:keras.src.metrics.metrics_utils.true_labels->keras.src.ops.transpose(true_labels)
A:keras.src.metrics.metrics_utils.false_labels->keras.src.ops.transpose(false_labels)
A:keras.src.metrics.metrics_utils.bucket_indices->keras.src.ops.transpose(bucket_indices)
A:keras.src.metrics.metrics_utils.tp_bucket_v->keras.src.ops.segment_sum(data=true_labels, segment_ids=bucket_indices, num_segments=num_thresholds)
A:keras.src.metrics.metrics_utils.fp_bucket_v->keras.src.ops.segment_sum(data=false_labels, segment_ids=bucket_indices, num_segments=num_thresholds)
A:keras.src.metrics.metrics_utils.tp->keras.src.ops.flip(ops.cumsum(ops.flip(tp_bucket_v)))
A:keras.src.metrics.metrics_utils.fp->keras.src.ops.flip(ops.cumsum(ops.flip(fp_bucket_v)))
A:keras.src.metrics.metrics_utils.total_true_labels->keras.src.ops.sum(true_labels)
A:keras.src.metrics.metrics_utils.total_false_labels->keras.src.ops.sum(false_labels)
A:keras.src.metrics.metrics_utils.num_thresholds->len(thresholds)
A:keras.src.metrics.metrics_utils.one_thresh->numpy.array(True, dtype='bool')
A:keras.src.metrics.metrics_utils.(y_pred, y_true)->squeeze_or_expand_to_same_rank(y_pred, y_true)
A:keras.src.metrics.metrics_utils.sample_weight->keras.src.ops.broadcast_to(ops.cast(sample_weight, dtype=y_pred.dtype), ops.shape(y_pred))
A:keras.src.metrics.metrics_utils.(_, sample_weight)->squeeze_or_expand_to_same_rank(y_true, sample_weight, expand_rank_1=False)
A:keras.src.metrics.metrics_utils.pred_shape->keras.src.ops.shape(y_pred)
A:keras.src.metrics.metrics_utils.num_labels->numpy.prod(pred_shape[1:], axis=0).astype('int32')
A:keras.src.metrics.metrics_utils.thresh_label_tile->numpy.where(one_thresh, num_labels, 1)
A:keras.src.metrics.metrics_utils.predictions_extra_dim->keras.src.ops.reshape(y_pred, [1, -1])
A:keras.src.metrics.metrics_utils.labels_extra_dim->keras.src.ops.reshape(ops.cast(y_true, dtype='bool'), [1, -1])
A:keras.src.metrics.metrics_utils.thresh_tiled->keras.src.ops.tile(ops.reshape(thresholds, thresh_pretile_shape), thresh_tiles)
A:keras.src.metrics.metrics_utils.preds_tiled->keras.src.ops.tile(predictions_extra_dim, data_tiles)
A:keras.src.metrics.metrics_utils.pred_is_pos->keras.src.ops.greater(preds_tiled, thresh_tiled)
A:keras.src.metrics.metrics_utils.label_is_pos->keras.src.ops.tile(labels_extra_dim, data_tiles)
A:keras.src.metrics.metrics_utils.weights_tiled->keras.src.ops.multiply(weights_tiled, label_weights_tiled)
A:keras.src.metrics.metrics_utils.label_weights_tiled->keras.src.ops.tile(ops.reshape(label_weights, thresh_tiles), data_tiles)
A:keras.src.metrics.metrics_utils.label_and_pred->keras.src.ops.cast(ops.logical_and(label, pred), dtype=var.dtype)
A:keras.src.metrics.metrics_utils.pred_is_neg->keras.src.ops.logical_not(pred_is_pos)
A:keras.src.metrics.metrics_utils.label_is_neg->keras.src.ops.logical_not(label_is_pos)
A:keras.src.metrics.metrics_utils.(_, top_k_idx)->keras.src.ops.top_k(x, k)
A:keras.src.metrics.metrics_utils.top_k_mask->keras.src.ops.sum(ops.one_hot(top_k_idx, ops.shape(x)[-1], axis=-1), axis=-2)
A:keras.src.metrics.metrics_utils.labels->keras.src.ops.cast(labels, dtype)
A:keras.src.metrics.metrics_utils.predictions->keras.src.ops.cast(predictions, dtype)
A:keras.src.metrics.metrics_utils.(labels, predictions)->squeeze_or_expand_to_same_rank(labels, predictions)
A:keras.src.metrics.metrics_utils.indices->keras.src.ops.cast(indices, dtype='int64')
A:keras.src.metrics.metrics_utils.values->keras.src.ops.cast(values, dtype=dtype)
A:keras.src.metrics.metrics_utils.num_classes->int(num_classes)
A:keras.src.metrics.metrics_utils.confusion_matrix->keras.src.ops.scatter(indices, values, (num_classes, num_classes))
keras.src.metrics.metrics_utils.AUCCurve(Enum)
keras.src.metrics.metrics_utils.AUCCurve.from_str(key)
keras.src.metrics.metrics_utils.AUCSummationMethod(Enum)
keras.src.metrics.metrics_utils.AUCSummationMethod.from_str(key)
keras.src.metrics.metrics_utils.ConfusionMatrix(Enum)
keras.src.metrics.metrics_utils._filter_top_k(x,k)
keras.src.metrics.metrics_utils._update_confusion_matrix_variables_optimized(variables_to_update,y_true,y_pred,thresholds,multi_label=False,sample_weights=None,label_weights=None,thresholds_with_epsilon=False)
keras.src.metrics.metrics_utils.assert_thresholds_range(thresholds)
keras.src.metrics.metrics_utils.confusion_matrix(labels,predictions,num_classes,weights=None,dtype='int32')
keras.src.metrics.metrics_utils.is_evenly_distributed_thresholds(thresholds)
keras.src.metrics.metrics_utils.parse_init_thresholds(thresholds,default_threshold=0.5)
keras.src.metrics.metrics_utils.update_confusion_matrix_variables(variables_to_update,y_true,y_pred,thresholds,top_k=None,class_id=None,sample_weight=None,multi_label=False,label_weights=None,thresholds_distributed_evenly=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/metrics/probabilistic_metrics.py----------------------------------------
keras.src.metrics.BinaryCrossentropy(self,name='binary_crossentropy',dtype=None,from_logits=False,label_smoothing=0)
keras.src.metrics.BinaryCrossentropy.get_config(self)
keras.src.metrics.CategoricalCrossentropy(self,name='categorical_crossentropy',dtype=None,from_logits=False,label_smoothing=0,axis=-1)
keras.src.metrics.CategoricalCrossentropy.get_config(self)
keras.src.metrics.KLDivergence(self,name='kl_divergence',dtype=None)
keras.src.metrics.KLDivergence.get_config(self)
keras.src.metrics.Poisson(self,name='poisson',dtype=None)
keras.src.metrics.Poisson.get_config(self)
keras.src.metrics.SparseCategoricalCrossentropy(self,name='sparse_categorical_crossentropy',dtype=None,from_logits=False,axis=-1)
keras.src.metrics.SparseCategoricalCrossentropy.get_config(self)
keras.src.metrics.probabilistic_metrics.BinaryCrossentropy(self,name='binary_crossentropy',dtype=None,from_logits=False,label_smoothing=0)
keras.src.metrics.probabilistic_metrics.BinaryCrossentropy.__init__(self,name='binary_crossentropy',dtype=None,from_logits=False,label_smoothing=0)
keras.src.metrics.probabilistic_metrics.BinaryCrossentropy.get_config(self)
keras.src.metrics.probabilistic_metrics.CategoricalCrossentropy(self,name='categorical_crossentropy',dtype=None,from_logits=False,label_smoothing=0,axis=-1)
keras.src.metrics.probabilistic_metrics.CategoricalCrossentropy.__init__(self,name='categorical_crossentropy',dtype=None,from_logits=False,label_smoothing=0,axis=-1)
keras.src.metrics.probabilistic_metrics.CategoricalCrossentropy.get_config(self)
keras.src.metrics.probabilistic_metrics.KLDivergence(self,name='kl_divergence',dtype=None)
keras.src.metrics.probabilistic_metrics.KLDivergence.__init__(self,name='kl_divergence',dtype=None)
keras.src.metrics.probabilistic_metrics.KLDivergence.get_config(self)
keras.src.metrics.probabilistic_metrics.Poisson(self,name='poisson',dtype=None)
keras.src.metrics.probabilistic_metrics.Poisson.__init__(self,name='poisson',dtype=None)
keras.src.metrics.probabilistic_metrics.Poisson.get_config(self)
keras.src.metrics.probabilistic_metrics.SparseCategoricalCrossentropy(self,name='sparse_categorical_crossentropy',dtype=None,from_logits=False,axis=-1)
keras.src.metrics.probabilistic_metrics.SparseCategoricalCrossentropy.__init__(self,name='sparse_categorical_crossentropy',dtype=None,from_logits=False,axis=-1)
keras.src.metrics.probabilistic_metrics.SparseCategoricalCrossentropy.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/metrics/hinge_metrics.py----------------------------------------
keras.src.metrics.CategoricalHinge(self,name='categorical_hinge',dtype=None)
keras.src.metrics.CategoricalHinge.get_config(self)
keras.src.metrics.Hinge(self,name='hinge',dtype=None)
keras.src.metrics.Hinge.get_config(self)
keras.src.metrics.SquaredHinge(self,name='squared_hinge',dtype=None)
keras.src.metrics.SquaredHinge.get_config(self)
keras.src.metrics.hinge_metrics.CategoricalHinge(self,name='categorical_hinge',dtype=None)
keras.src.metrics.hinge_metrics.CategoricalHinge.__init__(self,name='categorical_hinge',dtype=None)
keras.src.metrics.hinge_metrics.CategoricalHinge.get_config(self)
keras.src.metrics.hinge_metrics.Hinge(self,name='hinge',dtype=None)
keras.src.metrics.hinge_metrics.Hinge.__init__(self,name='hinge',dtype=None)
keras.src.metrics.hinge_metrics.Hinge.get_config(self)
keras.src.metrics.hinge_metrics.SquaredHinge(self,name='squared_hinge',dtype=None)
keras.src.metrics.hinge_metrics.SquaredHinge.__init__(self,name='squared_hinge',dtype=None)
keras.src.metrics.hinge_metrics.SquaredHinge.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/metrics/metric.py----------------------------------------
A:keras.src.metrics.metric.self._tracker->Tracker({'variables': (lambda x: isinstance(x, backend.Variable), self._variables), 'metrics': (lambda x: isinstance(x, Metric), self._metrics)})
A:keras.src.metrics.metric.mapping->list(zip(self.variables, metric_variables))
A:keras.src.metrics.metric.new_v->scope.get_current_value(v)
A:keras.src.metrics.metric.res->self.result()
A:keras.src.metrics.metric.initializer->keras.src.initializers.get(initializer)
A:keras.src.metrics.metric.variable->keras.src.backend.Variable(initializer=initializer, shape=shape, dtype=dtype, trainable=False, name=name)
A:keras.src.metrics.metric.value->self._tracker.track(value)
keras.src.metrics.Metric(self,dtype=None,name=None)
keras.src.metrics.Metric.__repr__(self)
keras.src.metrics.Metric.__setattr__(self,name,value)
keras.src.metrics.Metric.__str__(self)
keras.src.metrics.Metric._check_super_called(self)
keras.src.metrics.Metric.add_variable(self,shape,initializer,dtype=None,name=None)
keras.src.metrics.Metric.add_weight(self,shape=(),initializer=None,dtype=None,name=None)
keras.src.metrics.Metric.dtype(self)
keras.src.metrics.Metric.from_config(cls,config)
keras.src.metrics.Metric.get_config(self)
keras.src.metrics.Metric.reset_state(self)
keras.src.metrics.Metric.result(self)
keras.src.metrics.Metric.stateless_reset_state(self)
keras.src.metrics.Metric.stateless_result(self,metric_variables)
keras.src.metrics.Metric.stateless_update_state(self,metric_variables,*args,**kwargs)
keras.src.metrics.Metric.update_state(self,*args,**kwargs)
keras.src.metrics.Metric.variables(self)
keras.src.metrics.metric.Metric(self,dtype=None,name=None)
keras.src.metrics.metric.Metric.__init__(self,dtype=None,name=None)
keras.src.metrics.metric.Metric.__repr__(self)
keras.src.metrics.metric.Metric.__setattr__(self,name,value)
keras.src.metrics.metric.Metric.__str__(self)
keras.src.metrics.metric.Metric._check_super_called(self)
keras.src.metrics.metric.Metric.add_variable(self,shape,initializer,dtype=None,name=None)
keras.src.metrics.metric.Metric.add_weight(self,shape=(),initializer=None,dtype=None,name=None)
keras.src.metrics.metric.Metric.dtype(self)
keras.src.metrics.metric.Metric.from_config(cls,config)
keras.src.metrics.metric.Metric.get_config(self)
keras.src.metrics.metric.Metric.reset_state(self)
keras.src.metrics.metric.Metric.result(self)
keras.src.metrics.metric.Metric.stateless_reset_state(self)
keras.src.metrics.metric.Metric.stateless_result(self,metric_variables)
keras.src.metrics.metric.Metric.stateless_update_state(self,metric_variables,*args,**kwargs)
keras.src.metrics.metric.Metric.update_state(self,*args,**kwargs)
keras.src.metrics.metric.Metric.variables(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/metrics/accuracy_metrics.py----------------------------------------
A:keras.src.metrics.accuracy_metrics.y_pred->keras.src.ops.reshape(y_pred, [-1, y_pred.shape[-1]])
A:keras.src.metrics.accuracy_metrics.y_true->keras.src.ops.reshape(y_true, [-1])
A:keras.src.metrics.accuracy_metrics.(y_true, y_pred)->squeeze_or_expand_to_same_rank(y_true, y_pred)
A:keras.src.metrics.accuracy_metrics.threshold->keras.src.ops.cast(threshold, y_pred.dtype)
A:keras.src.metrics.accuracy_metrics.y_true_org_shape->keras.src.ops.shape(y_true)
A:keras.src.metrics.accuracy_metrics.y_pred_rank->len(y_pred.shape)
A:keras.src.metrics.accuracy_metrics.y_true_rank->len(y_true.shape)
A:keras.src.metrics.accuracy_metrics.matches->keras.src.ops.reshape(matches, y_true_org_shape)
keras.src.metrics.Accuracy(self,name='accuracy',dtype=None)
keras.src.metrics.Accuracy.get_config(self)
keras.src.metrics.BinaryAccuracy(self,name='binary_accuracy',dtype=None,threshold=0.5)
keras.src.metrics.BinaryAccuracy.get_config(self)
keras.src.metrics.CategoricalAccuracy(self,name='categorical_accuracy',dtype=None)
keras.src.metrics.CategoricalAccuracy.get_config(self)
keras.src.metrics.SparseCategoricalAccuracy(self,name='sparse_categorical_accuracy',dtype=None)
keras.src.metrics.SparseCategoricalAccuracy.get_config(self)
keras.src.metrics.SparseTopKCategoricalAccuracy(self,k=5,name='sparse_top_k_categorical_accuracy',dtype=None)
keras.src.metrics.SparseTopKCategoricalAccuracy.get_config(self)
keras.src.metrics.TopKCategoricalAccuracy(self,k=5,name='top_k_categorical_accuracy',dtype=None)
keras.src.metrics.TopKCategoricalAccuracy.get_config(self)
keras.src.metrics.accuracy_metrics.Accuracy(self,name='accuracy',dtype=None)
keras.src.metrics.accuracy_metrics.Accuracy.__init__(self,name='accuracy',dtype=None)
keras.src.metrics.accuracy_metrics.Accuracy.get_config(self)
keras.src.metrics.accuracy_metrics.BinaryAccuracy(self,name='binary_accuracy',dtype=None,threshold=0.5)
keras.src.metrics.accuracy_metrics.BinaryAccuracy.__init__(self,name='binary_accuracy',dtype=None,threshold=0.5)
keras.src.metrics.accuracy_metrics.BinaryAccuracy.get_config(self)
keras.src.metrics.accuracy_metrics.CategoricalAccuracy(self,name='categorical_accuracy',dtype=None)
keras.src.metrics.accuracy_metrics.CategoricalAccuracy.__init__(self,name='categorical_accuracy',dtype=None)
keras.src.metrics.accuracy_metrics.CategoricalAccuracy.get_config(self)
keras.src.metrics.accuracy_metrics.SparseCategoricalAccuracy(self,name='sparse_categorical_accuracy',dtype=None)
keras.src.metrics.accuracy_metrics.SparseCategoricalAccuracy.__init__(self,name='sparse_categorical_accuracy',dtype=None)
keras.src.metrics.accuracy_metrics.SparseCategoricalAccuracy.get_config(self)
keras.src.metrics.accuracy_metrics.SparseTopKCategoricalAccuracy(self,k=5,name='sparse_top_k_categorical_accuracy',dtype=None)
keras.src.metrics.accuracy_metrics.SparseTopKCategoricalAccuracy.__init__(self,k=5,name='sparse_top_k_categorical_accuracy',dtype=None)
keras.src.metrics.accuracy_metrics.SparseTopKCategoricalAccuracy.get_config(self)
keras.src.metrics.accuracy_metrics.TopKCategoricalAccuracy(self,k=5,name='top_k_categorical_accuracy',dtype=None)
keras.src.metrics.accuracy_metrics.TopKCategoricalAccuracy.__init__(self,k=5,name='top_k_categorical_accuracy',dtype=None)
keras.src.metrics.accuracy_metrics.TopKCategoricalAccuracy.get_config(self)
keras.src.metrics.accuracy_metrics.accuracy(y_true,y_pred)
keras.src.metrics.accuracy_metrics.binary_accuracy(y_true,y_pred,threshold=0.5)
keras.src.metrics.accuracy_metrics.categorical_accuracy(y_true,y_pred)
keras.src.metrics.accuracy_metrics.sparse_categorical_accuracy(y_true,y_pred)
keras.src.metrics.accuracy_metrics.sparse_top_k_categorical_accuracy(y_true,y_pred,k=5)
keras.src.metrics.accuracy_metrics.top_k_categorical_accuracy(y_true,y_pred,k=5)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/metrics/confusion_metrics.py----------------------------------------
A:keras.src.metrics.confusion_metrics.self.thresholds->keras.src.metrics.metrics_utils.parse_init_thresholds(thresholds, default_threshold=default_threshold)
A:keras.src.metrics.confusion_metrics.self._thresholds_distributed_evenly->keras.src.metrics.metrics_utils.is_evenly_distributed_thresholds(np.array([0.0] + thresholds + [1.0]))
A:keras.src.metrics.confusion_metrics.self.accumulator->self.add_variable(shape=(len(self.thresholds),), initializer=initializers.Zeros(), name='accumulator')
A:keras.src.metrics.confusion_metrics.base_config->super().get_config()
A:keras.src.metrics.confusion_metrics.self.true_positives->self.add_variable(shape=variable_shape, initializer=initializers.Zeros(), name='true_positives')
A:keras.src.metrics.confusion_metrics.self.false_positives->self.add_variable(shape=variable_shape, initializer=initializers.Zeros(), name='false_positives')
A:keras.src.metrics.confusion_metrics.result->keras.src.ops.divide_no_nan(self.true_positives, ops.add(self.true_positives, self.false_negatives))
A:keras.src.metrics.confusion_metrics.num_thresholds->len(self.thresholds)
A:keras.src.metrics.confusion_metrics.self.false_negatives->self.add_variable(shape=variable_shape, initializer=initializers.Zeros(), name='false_negatives')
A:keras.src.metrics.confusion_metrics.self.true_negatives->self.add_variable(shape=variable_shape, initializer=initializers.Zeros(), name='true_negatives')
A:keras.src.metrics.confusion_metrics.feasible->keras.src.backend.convert_to_numpy(ops.nonzero(predicate(constrained, self.value)))
A:keras.src.metrics.confusion_metrics.feasible_exists->keras.src.ops.greater(ops.size(feasible), 0)
A:keras.src.metrics.confusion_metrics.max_dependent->keras.src.ops.max(ops.take(dependent, feasible), initial=0)
A:keras.src.metrics.confusion_metrics.sensitivities->keras.src.ops.divide_no_nan(self.true_positives, ops.add(self.true_positives, self.false_negatives))
A:keras.src.metrics.confusion_metrics.specificities->keras.src.ops.divide_no_nan(self.true_negatives, ops.add(self.true_negatives, self.false_positives))
A:keras.src.metrics.confusion_metrics.recalls->keras.src.ops.divide_no_nan(self.true_positives, ops.add(self.true_positives, self.false_negatives))
A:keras.src.metrics.confusion_metrics.precisions->keras.src.ops.divide_no_nan(self.true_positives, ops.add(self.true_positives, self.false_positives))
A:keras.src.metrics.confusion_metrics.thresholds->sorted(thresholds)
A:keras.src.metrics.confusion_metrics.self._thresholds->numpy.array([0.0 - backend.epsilon()] + thresholds + [1.0 + backend.epsilon()])
A:keras.src.metrics.confusion_metrics.self.curve->keras.src.metrics.metrics_utils.AUCCurve.from_str(curve)
A:keras.src.metrics.confusion_metrics.self.summation_method->keras.src.metrics.metrics_utils.AUCSummationMethod.from_str(summation_method)
A:keras.src.metrics.confusion_metrics.label_weights->keras.src.ops.array(label_weights, dtype=self.dtype)
A:keras.src.metrics.confusion_metrics.y_pred->keras.src.activations.sigmoid(y_pred)
A:keras.src.metrics.confusion_metrics.dtp->keras.src.ops.subtract(self.true_positives[:self.num_thresholds - 1], self.true_positives[1:])
A:keras.src.metrics.confusion_metrics.p->keras.src.ops.add(self.true_positives, self.false_positives)
A:keras.src.metrics.confusion_metrics.dp->keras.src.ops.subtract(p[:self.num_thresholds - 1], p[1:])
A:keras.src.metrics.confusion_metrics.prec_slope->keras.src.ops.divide_no_nan(dtp, ops.maximum(dp, 0))
A:keras.src.metrics.confusion_metrics.intercept->keras.src.ops.subtract(self.true_positives[1:], ops.multiply(prec_slope, p[1:]))
A:keras.src.metrics.confusion_metrics.safe_p_ratio->keras.src.ops.where(ops.logical_and(p[:self.num_thresholds - 1] > 0, p[1:] > 0), ops.divide_no_nan(p[:self.num_thresholds - 1], ops.maximum(p[1:], 0)), ops.ones_like(p[1:]))
A:keras.src.metrics.confusion_metrics.pr_auc_increment->keras.src.ops.divide_no_nan(ops.multiply(prec_slope, ops.add(dtp, ops.multiply(intercept, ops.log(safe_p_ratio)))), ops.maximum(ops.add(self.true_positives[1:], self.false_negatives[1:]), 0))
A:keras.src.metrics.confusion_metrics.by_label_auc->keras.src.ops.sum(riemann_terms, axis=0)
A:keras.src.metrics.confusion_metrics.recall->keras.src.ops.divide_no_nan(self.true_positives, ops.add(self.true_positives, self.false_negatives))
A:keras.src.metrics.confusion_metrics.fp_rate->keras.src.ops.divide_no_nan(self.false_positives, ops.add(self.false_positives, self.true_negatives))
A:keras.src.metrics.confusion_metrics.precision->keras.src.ops.divide_no_nan(self.true_positives, ops.add(self.true_positives, self.false_positives))
A:keras.src.metrics.confusion_metrics.heights->keras.src.ops.maximum(y[:self.num_thresholds - 1], y[1:])
A:keras.src.metrics.confusion_metrics.riemann_terms->keras.src.ops.multiply(ops.subtract(x[:self.num_thresholds - 1], x[1:]), heights)
keras.src.metrics.AUC(self,num_thresholds=200,curve='ROC',summation_method='interpolation',name=None,dtype=None,thresholds=None,multi_label=False,num_labels=None,label_weights=None,from_logits=False)
keras.src.metrics.AUC._build(self,shape)
keras.src.metrics.AUC.get_config(self)
keras.src.metrics.AUC.interpolate_pr_auc(self)
keras.src.metrics.AUC.reset_state(self)
keras.src.metrics.AUC.result(self)
keras.src.metrics.AUC.thresholds(self)
keras.src.metrics.AUC.update_state(self,y_true,y_pred,sample_weight=None)
keras.src.metrics.FalseNegatives(self,thresholds=None,name=None,dtype=None)
keras.src.metrics.FalsePositives(self,thresholds=None,name=None,dtype=None)
keras.src.metrics.Precision(self,thresholds=None,top_k=None,class_id=None,name=None,dtype=None)
keras.src.metrics.Precision.get_config(self)
keras.src.metrics.Precision.reset_state(self)
keras.src.metrics.Precision.result(self)
keras.src.metrics.Precision.update_state(self,y_true,y_pred,sample_weight=None)
keras.src.metrics.PrecisionAtRecall(self,recall,num_thresholds=200,class_id=None,name=None,dtype=None)
keras.src.metrics.PrecisionAtRecall.get_config(self)
keras.src.metrics.PrecisionAtRecall.result(self)
keras.src.metrics.Recall(self,thresholds=None,top_k=None,class_id=None,name=None,dtype=None)
keras.src.metrics.Recall.get_config(self)
keras.src.metrics.Recall.reset_state(self)
keras.src.metrics.Recall.result(self)
keras.src.metrics.Recall.update_state(self,y_true,y_pred,sample_weight=None)
keras.src.metrics.RecallAtPrecision(self,precision,num_thresholds=200,class_id=None,name=None,dtype=None)
keras.src.metrics.RecallAtPrecision.get_config(self)
keras.src.metrics.RecallAtPrecision.result(self)
keras.src.metrics.SensitivityAtSpecificity(self,specificity,num_thresholds=200,class_id=None,name=None,dtype=None)
keras.src.metrics.SensitivityAtSpecificity.get_config(self)
keras.src.metrics.SensitivityAtSpecificity.result(self)
keras.src.metrics.SpecificityAtSensitivity(self,sensitivity,num_thresholds=200,class_id=None,name=None,dtype=None)
keras.src.metrics.SpecificityAtSensitivity.get_config(self)
keras.src.metrics.SpecificityAtSensitivity.result(self)
keras.src.metrics.TrueNegatives(self,thresholds=None,name=None,dtype=None)
keras.src.metrics.TruePositives(self,thresholds=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics.AUC(self,num_thresholds=200,curve='ROC',summation_method='interpolation',name=None,dtype=None,thresholds=None,multi_label=False,num_labels=None,label_weights=None,from_logits=False)
keras.src.metrics.confusion_metrics.AUC.__init__(self,num_thresholds=200,curve='ROC',summation_method='interpolation',name=None,dtype=None,thresholds=None,multi_label=False,num_labels=None,label_weights=None,from_logits=False)
keras.src.metrics.confusion_metrics.AUC._build(self,shape)
keras.src.metrics.confusion_metrics.AUC.get_config(self)
keras.src.metrics.confusion_metrics.AUC.interpolate_pr_auc(self)
keras.src.metrics.confusion_metrics.AUC.reset_state(self)
keras.src.metrics.confusion_metrics.AUC.result(self)
keras.src.metrics.confusion_metrics.AUC.thresholds(self)
keras.src.metrics.confusion_metrics.AUC.update_state(self,y_true,y_pred,sample_weight=None)
keras.src.metrics.confusion_metrics.FalseNegatives(self,thresholds=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics.FalseNegatives.__init__(self,thresholds=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics.FalsePositives(self,thresholds=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics.FalsePositives.__init__(self,thresholds=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics.Precision(self,thresholds=None,top_k=None,class_id=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics.Precision.__init__(self,thresholds=None,top_k=None,class_id=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics.Precision.get_config(self)
keras.src.metrics.confusion_metrics.Precision.reset_state(self)
keras.src.metrics.confusion_metrics.Precision.result(self)
keras.src.metrics.confusion_metrics.Precision.update_state(self,y_true,y_pred,sample_weight=None)
keras.src.metrics.confusion_metrics.PrecisionAtRecall(self,recall,num_thresholds=200,class_id=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics.PrecisionAtRecall.__init__(self,recall,num_thresholds=200,class_id=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics.PrecisionAtRecall.get_config(self)
keras.src.metrics.confusion_metrics.PrecisionAtRecall.result(self)
keras.src.metrics.confusion_metrics.Recall(self,thresholds=None,top_k=None,class_id=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics.Recall.__init__(self,thresholds=None,top_k=None,class_id=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics.Recall.get_config(self)
keras.src.metrics.confusion_metrics.Recall.reset_state(self)
keras.src.metrics.confusion_metrics.Recall.result(self)
keras.src.metrics.confusion_metrics.Recall.update_state(self,y_true,y_pred,sample_weight=None)
keras.src.metrics.confusion_metrics.RecallAtPrecision(self,precision,num_thresholds=200,class_id=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics.RecallAtPrecision.__init__(self,precision,num_thresholds=200,class_id=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics.RecallAtPrecision.get_config(self)
keras.src.metrics.confusion_metrics.RecallAtPrecision.result(self)
keras.src.metrics.confusion_metrics.SensitivityAtSpecificity(self,specificity,num_thresholds=200,class_id=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics.SensitivityAtSpecificity.__init__(self,specificity,num_thresholds=200,class_id=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics.SensitivityAtSpecificity.get_config(self)
keras.src.metrics.confusion_metrics.SensitivityAtSpecificity.result(self)
keras.src.metrics.confusion_metrics.SensitivitySpecificityBase(self,value,num_thresholds=200,class_id=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics.SensitivitySpecificityBase.__init__(self,value,num_thresholds=200,class_id=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics.SensitivitySpecificityBase._find_max_under_constraint(self,constrained,dependent,predicate)
keras.src.metrics.confusion_metrics.SensitivitySpecificityBase.get_config(self)
keras.src.metrics.confusion_metrics.SensitivitySpecificityBase.reset_state(self)
keras.src.metrics.confusion_metrics.SensitivitySpecificityBase.update_state(self,y_true,y_pred,sample_weight=None)
keras.src.metrics.confusion_metrics.SpecificityAtSensitivity(self,sensitivity,num_thresholds=200,class_id=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics.SpecificityAtSensitivity.__init__(self,sensitivity,num_thresholds=200,class_id=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics.SpecificityAtSensitivity.get_config(self)
keras.src.metrics.confusion_metrics.SpecificityAtSensitivity.result(self)
keras.src.metrics.confusion_metrics.TrueNegatives(self,thresholds=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics.TrueNegatives.__init__(self,thresholds=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics.TruePositives(self,thresholds=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics.TruePositives.__init__(self,thresholds=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics._ConfusionMatrixConditionCount(self,confusion_matrix_cond,thresholds=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics._ConfusionMatrixConditionCount.__init__(self,confusion_matrix_cond,thresholds=None,name=None,dtype=None)
keras.src.metrics.confusion_metrics._ConfusionMatrixConditionCount.get_config(self)
keras.src.metrics.confusion_metrics._ConfusionMatrixConditionCount.result(self)
keras.src.metrics.confusion_metrics._ConfusionMatrixConditionCount.update_state(self,y_true,y_pred,sample_weight=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/quantizers/quantizers.py----------------------------------------
A:keras.src.quantizers.quantizers.scale->keras.src.ops.divide(value_range[1], ops.add(ops.max(ops.abs(inputs), axis=axis, keepdims=True), epsilon))
A:keras.src.quantizers.quantizers.outputs->keras.src.ops.cast(outputs, dtype)
A:keras.src.quantizers.quantizers.self.axis->tuple(axis)
A:keras.src.quantizers.quantizers.(quantized_x, scale)->abs_max_quantize(x, self.axis, self.value_range, self.output_dtype, self.epsilon)
keras.src.quantizers.AbsMaxQuantizer(self,axis,value_range=(-127,127),epsilon=backend.epsilon(),output_dtype='int8')
keras.src.quantizers.AbsMaxQuantizer.get_config(self)
keras.src.quantizers.Quantizer(self,output_dtype='int8')
keras.src.quantizers.Quantizer.from_config(cls,config)
keras.src.quantizers.Quantizer.get_config(self)
keras.src.quantizers.abs_max_quantize(inputs,axis,value_range=(-127,127),dtype='int8',epsilon=backend.epsilon())
keras.src.quantizers.quantizers.AbsMaxQuantizer(self,axis,value_range=(-127,127),epsilon=backend.epsilon(),output_dtype='int8')
keras.src.quantizers.quantizers.AbsMaxQuantizer.__init__(self,axis,value_range=(-127,127),epsilon=backend.epsilon(),output_dtype='int8')
keras.src.quantizers.quantizers.AbsMaxQuantizer.get_config(self)
keras.src.quantizers.quantizers.Quantizer(self,output_dtype='int8')
keras.src.quantizers.quantizers.Quantizer.__init__(self,output_dtype='int8')
keras.src.quantizers.quantizers.Quantizer.from_config(cls,config)
keras.src.quantizers.quantizers.Quantizer.get_config(self)
keras.src.quantizers.quantizers.abs_max_quantize(inputs,axis,value_range=(-127,127),dtype='int8',epsilon=backend.epsilon())


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/quantizers/__init__.py----------------------------------------
A:keras.src.quantizers.__init__.obj->obj(kwargs)
keras.src.quantizers.__init__.deserialize(config,custom_objects=None)
keras.src.quantizers.__init__.get(identifier,**kwargs)
keras.src.quantizers.__init__.serialize(initializer)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/applications/inception_resnet_v2.py----------------------------------------
A:keras.src.applications.inception_resnet_v2.input_shape->keras.src.applications.imagenet_utils.obtain_input_shape(input_shape, default_size=299, min_size=75, data_format=backend.image_data_format(), require_flatten=include_top, weights=weights)
A:keras.src.applications.inception_resnet_v2.img_input->keras.src.layers.Input(tensor=input_tensor, shape=input_shape)
A:keras.src.applications.inception_resnet_v2.x->keras.src.layers.Activation(activation, name=block_name + '_ac')(x)
A:keras.src.applications.inception_resnet_v2.branch_0->conv2d_bn(x, 192, 1)
A:keras.src.applications.inception_resnet_v2.branch_1->conv2d_bn(branch_1, 256, [3, 1])
A:keras.src.applications.inception_resnet_v2.branch_2->conv2d_bn(branch_2, 64, 3)
A:keras.src.applications.inception_resnet_v2.branch_pool->keras.src.layers.MaxPooling2D(3, strides=2, padding='valid')(x)
A:keras.src.applications.inception_resnet_v2.inputs->keras.src.ops.operation_utils.get_source_inputs(input_tensor)
A:keras.src.applications.inception_resnet_v2.model->Functional(inputs, x, name='inception_resnet_v2')
A:keras.src.applications.inception_resnet_v2.weights_path->keras.src.utils.file_utils.get_file(fname, BASE_WEIGHT_URL + fname, cache_subdir='models', file_hash='d19885ff4a710c122648d3b5c3b684e4')
A:keras.src.applications.inception_resnet_v2.config->super().get_config()
A:keras.src.applications.inception_resnet_v2.mixed->keras.src.layers.Concatenate(axis=channel_axis, name=block_name + '_mixed')(branches)
A:keras.src.applications.inception_resnet_v2.up->conv2d_bn(mixed, x.shape[channel_axis], 1, activation=None, use_bias=True, name=block_name + '_conv')
A:keras.src.applications.inception_resnet_v2.preprocess_input.__doc__->keras.src.applications.imagenet_utils.PREPROCESS_INPUT_DOC.format(mode='', ret=imagenet_utils.PREPROCESS_INPUT_RET_DOC_TF, error=imagenet_utils.PREPROCESS_INPUT_ERROR_DOC)
keras.src.applications.inception_resnet_v2.CustomScaleLayer(self,scale,**kwargs)
keras.src.applications.inception_resnet_v2.CustomScaleLayer.__init__(self,scale,**kwargs)
keras.src.applications.inception_resnet_v2.CustomScaleLayer.call(self,inputs)
keras.src.applications.inception_resnet_v2.CustomScaleLayer.get_config(self)
keras.src.applications.inception_resnet_v2.InceptionResNetV2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.inception_resnet_v2.conv2d_bn(x,filters,kernel_size,strides=1,padding='same',activation='relu',use_bias=False,name=None)
keras.src.applications.inception_resnet_v2.decode_predictions(preds,top=5)
keras.src.applications.inception_resnet_v2.inception_resnet_block(x,scale,block_type,block_idx,activation='relu')
keras.src.applications.inception_resnet_v2.preprocess_input(x,data_format=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/applications/nasnet.py----------------------------------------
A:keras.src.applications.nasnet.input_shape->keras.src.applications.imagenet_utils.obtain_input_shape(input_shape, default_size=default_size, min_size=32, data_format=backend.image_data_format(), require_flatten=include_top, weights=weights)
A:keras.src.applications.nasnet.img_input->keras.src.layers.Input(tensor=input_tensor, shape=input_shape)
A:keras.src.applications.nasnet.x->keras.src.layers.concatenate([x2, x3, x4, x5], axis=channel_dim, name=f'reduction_concat_{block_id}')
A:keras.src.applications.nasnet.(x, p)->_normal_a_cell(x, p, filters * filter_multiplier ** 2, block_id='%d' % (2 * num_blocks + i + 1))
A:keras.src.applications.nasnet.(x, p0)->_reduction_a_cell(x, p, filters * filter_multiplier ** 2, block_id='reduce_%d' % (2 * num_blocks))
A:keras.src.applications.nasnet.inputs->keras.src.ops.operation_utils.get_source_inputs(input_tensor)
A:keras.src.applications.nasnet.model->Functional(inputs, x, name='NASNet')
A:keras.src.applications.nasnet.weights_path->keras.src.utils.file_utils.get_file('nasnet_large_no_top.h5', NASNET_LARGE_WEIGHT_PATH_NO_TOP, cache_subdir='models', file_hash='d81d89dc07e6e56530c4e77faddd61b5')
A:keras.src.applications.nasnet.p->_adjust_block(p, ip, filters, block_id)
A:keras.src.applications.nasnet.p1->keras.src.layers.Conv2D(filters // 2, (1, 1), padding='same', use_bias=False, name=f'adjust_conv_1_{block_id}', kernel_initializer='he_normal')(p1)
A:keras.src.applications.nasnet.p2->keras.src.layers.Conv2D(filters // 2, (1, 1), padding='same', use_bias=False, name=f'adjust_conv_2_{block_id}', kernel_initializer='he_normal')(p2)
A:keras.src.applications.nasnet.h->keras.src.layers.BatchNormalization(axis=channel_dim, momentum=0.9997, epsilon=0.001, name=f'reduction_bn_1_{block_id}')(h)
A:keras.src.applications.nasnet.x1_1->_separable_conv_block(h, filters, (5, 5), strides=(2, 2), block_id=f'reduction_left1_{block_id}')
A:keras.src.applications.nasnet.x1_2->_separable_conv_block(p, filters, (7, 7), strides=(2, 2), block_id=f'reduction_right1_{block_id}')
A:keras.src.applications.nasnet.x1->keras.src.layers.add([x1_1, x1_2], name=f'reduction_add_1_{block_id}')
A:keras.src.applications.nasnet.x2_1->keras.src.layers.MaxPooling2D((3, 3), strides=(2, 2), padding='valid', name=f'reduction_left2_{block_id}')(h3)
A:keras.src.applications.nasnet.x2_2->_separable_conv_block(p, filters, (7, 7), strides=(2, 2), block_id=f'reduction_right2_{block_id}')
A:keras.src.applications.nasnet.x2->keras.src.layers.add([x2_1, x2_2], name=f'reduction_add_2_{block_id}')
A:keras.src.applications.nasnet.x3->keras.src.layers.add([x3_1, x3_2], name=f'reduction_add3_{block_id}')
A:keras.src.applications.nasnet.x4_1->keras.src.layers.AveragePooling2D((3, 3), strides=(1, 1), padding='same', name=f'normal_left4_{block_id}')(p)
A:keras.src.applications.nasnet.x4_2->keras.src.layers.AveragePooling2D((3, 3), strides=(1, 1), padding='same', name=f'normal_right4_{block_id}')(p)
A:keras.src.applications.nasnet.x4->keras.src.layers.add([x2, x4])
A:keras.src.applications.nasnet.x5->keras.src.layers.add([x5_1, x5_2], name=f'reduction_add4_{block_id}')
A:keras.src.applications.nasnet.h3->keras.src.layers.ZeroPadding2D(padding=imagenet_utils.correct_pad(h, 3), name=f'reduction_pad_1_{block_id}')(h)
A:keras.src.applications.nasnet.x3_1->keras.src.layers.AveragePooling2D((3, 3), strides=(2, 2), padding='valid', name=f'reduction_left3_{block_id}')(h3)
A:keras.src.applications.nasnet.x3_2->_separable_conv_block(p, filters, (5, 5), strides=(2, 2), block_id=f'reduction_right3_{block_id}')
A:keras.src.applications.nasnet.x5_1->_separable_conv_block(x1, filters, (3, 3), block_id=f'reduction_left4_{block_id}')
A:keras.src.applications.nasnet.x5_2->keras.src.layers.MaxPooling2D((3, 3), strides=(2, 2), padding='valid', name=f'reduction_right5_{block_id}')(h3)
A:keras.src.applications.nasnet.preprocess_input.__doc__->keras.src.applications.imagenet_utils.PREPROCESS_INPUT_DOC.format(mode='', ret=imagenet_utils.PREPROCESS_INPUT_RET_DOC_TF, error=imagenet_utils.PREPROCESS_INPUT_ERROR_DOC)
keras.src.applications.nasnet.NASNet(input_shape=None,penultimate_filters=4032,num_blocks=6,stem_block_filters=96,skip_reduction=True,filter_multiplier=2,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000,default_size=None,classifier_activation='softmax')
keras.src.applications.nasnet.NASNetLarge(input_shape=None,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.nasnet.NASNetMobile(input_shape=None,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.nasnet._adjust_block(p,ip,filters,block_id=None)
keras.src.applications.nasnet._normal_a_cell(ip,p,filters,block_id=None)
keras.src.applications.nasnet._reduction_a_cell(ip,p,filters,block_id=None)
keras.src.applications.nasnet._separable_conv_block(ip,filters,kernel_size=(3,3),strides=(1,1),block_id=None)
keras.src.applications.nasnet.decode_predictions(preds,top=5)
keras.src.applications.nasnet.preprocess_input(x,data_format=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/applications/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/applications/convnext.py----------------------------------------
A:keras.src.applications.convnext.random_tensor->keras.src.ops.floor(random_tensor)
A:keras.src.applications.convnext.config->super().get_config()
A:keras.src.applications.convnext.self.gamma->self.add_weight(shape=(self.projection_dim,), initializer=initializers.Constant(self.init_values), trainable=True)
A:keras.src.applications.convnext.x->keras.src.layers.LayerNormalization(epsilon=1e-06)(x)
A:keras.src.applications.convnext.layer->keras.src.layers.Activation('linear', name=name + '_identity')
A:keras.src.applications.convnext.name->str(backend.get_uid('head'))
A:keras.src.applications.convnext.input_shape->keras.src.applications.imagenet_utils.obtain_input_shape(input_shape, default_size=default_size, min_size=32, data_format=backend.image_data_format(), require_flatten=include_top, weights=weights)
A:keras.src.applications.convnext.img_input->keras.src.layers.Input(tensor=input_tensor, shape=input_shape)
A:keras.src.applications.convnext.stem->Sequential([layers.Conv2D(projection_dims[0], kernel_size=4, strides=4, name=model_name + '_stem_conv'), layers.LayerNormalization(epsilon=1e-06, name=model_name + '_stem_layernorm')], name=model_name + '_stem')
A:keras.src.applications.convnext.downsample_layer->Sequential([layers.LayerNormalization(epsilon=1e-06, name=model_name + '_downsampling_layernorm_' + str(i)), layers.Conv2D(projection_dims[i + 1], kernel_size=2, strides=2, name=model_name + '_downsampling_conv_' + str(i))], name=model_name + '_downsampling_block_' + str(i))
A:keras.src.applications.convnext.model->Functional(inputs=inputs, outputs=x, name=model_name)
A:keras.src.applications.convnext.weights_path->keras.src.utils.file_utils.get_file(file_name, BASE_WEIGHTS_PATH + file_name, cache_subdir='models', file_hash=file_hash)
A:keras.src.applications.convnext.ConvNeXtTiny.__doc__->BASE_DOCSTRING.format(name='ConvNeXtTiny')
A:keras.src.applications.convnext.ConvNeXtSmall.__doc__->BASE_DOCSTRING.format(name='ConvNeXtSmall')
A:keras.src.applications.convnext.ConvNeXtBase.__doc__->BASE_DOCSTRING.format(name='ConvNeXtBase')
A:keras.src.applications.convnext.ConvNeXtLarge.__doc__->BASE_DOCSTRING.format(name='ConvNeXtLarge')
A:keras.src.applications.convnext.ConvNeXtXLarge.__doc__->BASE_DOCSTRING.format(name='ConvNeXtXLarge')
keras.src.applications.convnext.ConvNeXt(depths,projection_dims,drop_path_rate=0.0,layer_scale_init_value=1e-06,default_size=224,model_name='convnext',include_preprocessing=True,include_top=True,weights=None,input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.convnext.ConvNeXtBase(model_name='convnext_base',include_top=True,include_preprocessing=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.convnext.ConvNeXtBlock(projection_dim,drop_path_rate=0.0,layer_scale_init_value=1e-06,name=None)
keras.src.applications.convnext.ConvNeXtLarge(model_name='convnext_large',include_top=True,include_preprocessing=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.convnext.ConvNeXtSmall(model_name='convnext_small',include_top=True,include_preprocessing=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.convnext.ConvNeXtTiny(model_name='convnext_tiny',include_top=True,include_preprocessing=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.convnext.ConvNeXtXLarge(model_name='convnext_xlarge',include_top=True,include_preprocessing=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.convnext.Head(num_classes=1000,classifier_activation=None,name=None)
keras.src.applications.convnext.LayerScale(self,init_values,projection_dim,**kwargs)
keras.src.applications.convnext.LayerScale.__init__(self,init_values,projection_dim,**kwargs)
keras.src.applications.convnext.LayerScale.build(self,_)
keras.src.applications.convnext.LayerScale.call(self,x)
keras.src.applications.convnext.LayerScale.get_config(self)
keras.src.applications.convnext.PreStem(name=None)
keras.src.applications.convnext.StochasticDepth(self,drop_path_rate,**kwargs)
keras.src.applications.convnext.StochasticDepth.__init__(self,drop_path_rate,**kwargs)
keras.src.applications.convnext.StochasticDepth.call(self,x,training=None)
keras.src.applications.convnext.StochasticDepth.get_config(self)
keras.src.applications.convnext.decode_predictions(preds,top=5)
keras.src.applications.convnext.preprocess_input(x,data_format=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/applications/mobilenet_v3.py----------------------------------------
A:keras.src.applications.mobilenet_v3.is_input_t_tensor->keras.src.backend.is_keras_tensor(operation_utils.get_source_inputs(input_tensor))
A:keras.src.applications.mobilenet_v3.img_input->keras.src.layers.Input(tensor=input_tensor, shape=input_shape)
A:keras.src.applications.mobilenet_v3.x->keras.src.layers.Add(name=prefix + 'add')([shortcut, x])
A:keras.src.applications.mobilenet_v3.last_conv_ch->_depth(x.shape[channel_axis] * 6)
A:keras.src.applications.mobilenet_v3.last_point_ch->_depth(last_point_ch * alpha)
A:keras.src.applications.mobilenet_v3.inputs->keras.src.ops.operation_utils.get_source_inputs(input_tensor)
A:keras.src.applications.mobilenet_v3.model->Functional(inputs, x, name='MobilenetV3' + model_type)
A:keras.src.applications.mobilenet_v3.model_name->'{}{}_224_{}_float'.format(model_type, '_minimalistic' if minimalistic else '', str(alpha))
A:keras.src.applications.mobilenet_v3.weights_path->keras.src.utils.file_utils.get_file(file_name, BASE_WEIGHT_PATH + file_name, cache_subdir='models', file_hash=file_hash)
A:keras.src.applications.mobilenet_v3.MobileNetV3Small.__doc__->BASE_DOCSTRING.format(name='MobileNetV3Small')
A:keras.src.applications.mobilenet_v3.MobileNetV3Large.__doc__->BASE_DOCSTRING.format(name='MobileNetV3Large')
A:keras.src.applications.mobilenet_v3.new_v->max(min_value, int(v + divisor / 2) // divisor * divisor)
keras.src.applications.mobilenet_v3.MobileNetV3(stack_fn,last_point_ch,input_shape=None,alpha=1.0,model_type='large',minimalistic=False,include_top=True,weights='imagenet',input_tensor=None,classes=1000,pooling=None,dropout_rate=0.2,classifier_activation='softmax',include_preprocessing=True)
keras.src.applications.mobilenet_v3.MobileNetV3Large(input_shape=None,alpha=1.0,minimalistic=False,include_top=True,weights='imagenet',input_tensor=None,classes=1000,pooling=None,dropout_rate=0.2,classifier_activation='softmax',include_preprocessing=True)
keras.src.applications.mobilenet_v3.MobileNetV3Small(input_shape=None,alpha=1.0,minimalistic=False,include_top=True,weights='imagenet',input_tensor=None,classes=1000,pooling=None,dropout_rate=0.2,classifier_activation='softmax',include_preprocessing=True)
keras.src.applications.mobilenet_v3._depth(v,divisor=8,min_value=None)
keras.src.applications.mobilenet_v3._inverted_res_block(x,expansion,filters,kernel_size,stride,se_ratio,activation,block_id)
keras.src.applications.mobilenet_v3._se_block(inputs,filters,se_ratio,prefix)
keras.src.applications.mobilenet_v3.decode_predictions(preds,top=5)
keras.src.applications.mobilenet_v3.hard_sigmoid(x)
keras.src.applications.mobilenet_v3.hard_swish(x)
keras.src.applications.mobilenet_v3.preprocess_input(x,data_format=None)
keras.src.applications.mobilenet_v3.relu(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/applications/vgg16.py----------------------------------------
A:keras.src.applications.vgg16.input_shape->keras.src.applications.imagenet_utils.obtain_input_shape(input_shape, default_size=224, min_size=32, data_format=backend.image_data_format(), require_flatten=include_top, weights=weights)
A:keras.src.applications.vgg16.img_input->keras.src.layers.Input(tensor=input_tensor, shape=input_shape)
A:keras.src.applications.vgg16.x->keras.src.layers.GlobalMaxPooling2D()(x)
A:keras.src.applications.vgg16.inputs->keras.src.ops.operation_utils.get_source_inputs(input_tensor)
A:keras.src.applications.vgg16.model->Functional(inputs, x, name='vgg16')
A:keras.src.applications.vgg16.weights_path->keras.src.utils.file_utils.get_file('vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5', WEIGHTS_PATH_NO_TOP, cache_subdir='models', file_hash='6d6bbae143d832006294945121d1f1fc')
A:keras.src.applications.vgg16.preprocess_input.__doc__->keras.src.applications.imagenet_utils.PREPROCESS_INPUT_DOC.format(mode='', ret=imagenet_utils.PREPROCESS_INPUT_RET_DOC_CAFFE, error=imagenet_utils.PREPROCESS_INPUT_ERROR_DOC)
keras.src.applications.vgg16.VGG16(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.vgg16.decode_predictions(preds,top=5)
keras.src.applications.vgg16.preprocess_input(x,data_format=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/applications/efficientnet_v2.py----------------------------------------
A:keras.src.applications.efficientnet_v2.new_filters->max(minimum_depth, int(filters + depth_divisor / 2) // depth_divisor * depth_divisor)
A:keras.src.applications.efficientnet_v2.name->keras.src.backend.get_uid('block0')
A:keras.src.applications.efficientnet_v2.x->keras.src.layers.GlobalMaxPooling2D(name='max_pool')(x)
A:keras.src.applications.efficientnet_v2.filters_se->max(1, int(input_filters * se_ratio))
A:keras.src.applications.efficientnet_v2.se->keras.src.layers.Conv2D(filters, 1, padding='same', activation='sigmoid', kernel_initializer=CONV_KERNEL_INITIALIZER, name=name + 'se_expand')(se)
A:keras.src.applications.efficientnet_v2.input_shape->keras.src.applications.imagenet_utils.obtain_input_shape(input_shape, default_size=default_size, min_size=32, data_format=backend.image_data_format(), require_flatten=include_top, weights=weights)
A:keras.src.applications.efficientnet_v2.img_input->keras.src.layers.Input(tensor=input_tensor, shape=input_shape)
A:keras.src.applications.efficientnet_v2.stem_filters->round_filters(filters=blocks_args[0]['input_filters'], width_coefficient=width_coefficient, min_depth=min_depth, depth_divisor=depth_divisor)
A:keras.src.applications.efficientnet_v2.blocks_args->copy.deepcopy(blocks_args)
A:keras.src.applications.efficientnet_v2.blocks->float(sum((args['num_repeat'] for args in blocks_args)))
A:keras.src.applications.efficientnet_v2.args['input_filters']->round_filters(filters=args['input_filters'], width_coefficient=width_coefficient, min_depth=min_depth, depth_divisor=depth_divisor)
A:keras.src.applications.efficientnet_v2.args['output_filters']->round_filters(filters=args['output_filters'], width_coefficient=width_coefficient, min_depth=min_depth, depth_divisor=depth_divisor)
A:keras.src.applications.efficientnet_v2.repeats->round_repeats(repeats=args.pop('num_repeat'), depth_coefficient=depth_coefficient)
A:keras.src.applications.efficientnet_v2.top_filters->round_filters(filters=1280, width_coefficient=width_coefficient, min_depth=min_depth, depth_divisor=depth_divisor)
A:keras.src.applications.efficientnet_v2.inputs->keras.src.ops.operation_utils.get_source_inputs(input_tensor)
A:keras.src.applications.efficientnet_v2.model->Functional(inputs, x, name=model_name)
A:keras.src.applications.efficientnet_v2.weights_path->keras.src.utils.file_utils.get_file(file_name, BASE_WEIGHTS_PATH + file_name, cache_subdir='models', file_hash=file_hash)
A:keras.src.applications.efficientnet_v2.EfficientNetV2B0.__doc__->BASE_DOCSTRING.format(name='EfficientNetV2B0')
A:keras.src.applications.efficientnet_v2.EfficientNetV2B1.__doc__->BASE_DOCSTRING.format(name='EfficientNetV2B1')
A:keras.src.applications.efficientnet_v2.EfficientNetV2B2.__doc__->BASE_DOCSTRING.format(name='EfficientNetV2B2')
A:keras.src.applications.efficientnet_v2.EfficientNetV2B3.__doc__->BASE_DOCSTRING.format(name='EfficientNetV2B3')
A:keras.src.applications.efficientnet_v2.EfficientNetV2S.__doc__->BASE_DOCSTRING.format(name='EfficientNetV2S')
A:keras.src.applications.efficientnet_v2.EfficientNetV2M.__doc__->BASE_DOCSTRING.format(name='EfficientNetV2M')
A:keras.src.applications.efficientnet_v2.EfficientNetV2L.__doc__->BASE_DOCSTRING.format(name='EfficientNetV2L')
keras.src.applications.efficientnet_v2.EfficientNetV2(width_coefficient,depth_coefficient,default_size,dropout_rate=0.2,drop_connect_rate=0.2,depth_divisor=8,min_depth=8,bn_momentum=0.9,activation='swish',blocks_args='default',model_name='efficientnetv2',include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',include_preprocessing=True)
keras.src.applications.efficientnet_v2.EfficientNetV2B0(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',include_preprocessing=True)
keras.src.applications.efficientnet_v2.EfficientNetV2B1(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',include_preprocessing=True)
keras.src.applications.efficientnet_v2.EfficientNetV2B2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',include_preprocessing=True)
keras.src.applications.efficientnet_v2.EfficientNetV2B3(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',include_preprocessing=True)
keras.src.applications.efficientnet_v2.EfficientNetV2L(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',include_preprocessing=True)
keras.src.applications.efficientnet_v2.EfficientNetV2M(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',include_preprocessing=True)
keras.src.applications.efficientnet_v2.EfficientNetV2S(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',include_preprocessing=True)
keras.src.applications.efficientnet_v2.FusedMBConvBlock(input_filters,output_filters,expand_ratio=1,kernel_size=3,strides=1,se_ratio=0.0,bn_momentum=0.9,activation='swish',survival_probability=0.8,name=None)
keras.src.applications.efficientnet_v2.MBConvBlock(input_filters,output_filters,expand_ratio=1,kernel_size=3,strides=1,se_ratio=0.0,bn_momentum=0.9,activation='swish',survival_probability=0.8,name=None)
keras.src.applications.efficientnet_v2.decode_predictions(preds,top=5)
keras.src.applications.efficientnet_v2.preprocess_input(x,data_format=None)
keras.src.applications.efficientnet_v2.round_filters(filters,width_coefficient,min_depth,depth_divisor)
keras.src.applications.efficientnet_v2.round_repeats(repeats,depth_coefficient)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/applications/resnet.py----------------------------------------
A:keras.src.applications.resnet.input_shape->keras.src.applications.imagenet_utils.obtain_input_shape(input_shape, default_size=224, min_size=32, data_format=backend.image_data_format(), require_flatten=include_top, weights=weights)
A:keras.src.applications.resnet.img_input->keras.src.layers.Input(tensor=input_tensor, shape=input_shape)
A:keras.src.applications.resnet.x->stack_residual_blocks_v1(x, 256, 36, name='conv4')
A:keras.src.applications.resnet.inputs->keras.src.ops.operation_utils.get_source_inputs(input_tensor)
A:keras.src.applications.resnet.model->Functional(inputs, x, name=model_name)
A:keras.src.applications.resnet.weights_path->keras.src.utils.file_utils.get_file(file_name, BASE_WEIGHTS_PATH + file_name, cache_subdir='models', file_hash=file_hash)
A:keras.src.applications.resnet.shortcut->keras.src.layers.Conv2D(4 * filters, 1, strides=stride, name=name + '_0_conv')(preact)
A:keras.src.applications.resnet.preact->keras.src.layers.Activation('relu', name=name + '_preact_relu')(preact)
A:keras.src.applications.resnet.preprocess_input.__doc__->keras.src.applications.imagenet_utils.PREPROCESS_INPUT_DOC.format(mode='', ret=imagenet_utils.PREPROCESS_INPUT_RET_DOC_CAFFE, error=imagenet_utils.PREPROCESS_INPUT_ERROR_DOC)
keras.src.applications.resnet.ResNet(stack_fn,preact,use_bias,model_name='resnet',include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.resnet.ResNet101(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.resnet.ResNet152(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.resnet.ResNet50(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.resnet.decode_predictions(preds,top=5)
keras.src.applications.resnet.preprocess_input(x,data_format=None)
keras.src.applications.resnet.residual_block_v1(x,filters,kernel_size=3,stride=1,conv_shortcut=True,name=None)
keras.src.applications.resnet.residual_block_v2(x,filters,kernel_size=3,stride=1,conv_shortcut=False,name=None)
keras.src.applications.resnet.stack_residual_blocks_v1(x,filters,blocks,stride1=2,name=None)
keras.src.applications.resnet.stack_residual_blocks_v2(x,filters,blocks,stride1=2,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/applications/imagenet_utils.py----------------------------------------
A:keras.src.applications.imagenet_utils.data_format->keras.src.backend.image_data_format()
A:keras.src.applications.imagenet_utils.preprocess_input.__doc__->PREPROCESS_INPUT_DOC.format(mode=PREPROCESS_INPUT_MODE_DOC, ret='', error=PREPROCESS_INPUT_DEFAULT_ERROR_DOC)
A:keras.src.applications.imagenet_utils.fpath->keras.src.utils.file_utils.get_file('imagenet_class_index.json', CLASS_INDEX_PATH, cache_subdir='models', file_hash='c2c37ea517e94d9795004a39431a14cb')
A:keras.src.applications.imagenet_utils.CLASS_INDEX->json.load(f)
A:keras.src.applications.imagenet_utils.preds->keras.src.ops.convert_to_numpy(preds)
A:keras.src.applications.imagenet_utils.x->keras.src.ops.stack([x[..., i] for i in (2, 1, 0)], axis=-1)
A:keras.src.applications.imagenet_utils.ndim->len(x.shape)
A:keras.src.applications.imagenet_utils.mean_tensor->keras.src.ops.reshape(mean_tensor, (1,) * (ndim - 1) + (3,))
A:keras.src.applications.imagenet_utils.std_tensor->keras.src.ops.reshape(std_tensor, (-1, 1, 1))
A:keras.src.applications.imagenet_utils.classifier_activation->keras.src.activations.get(classifier_activation)
keras.src.applications.imagenet_utils._preprocess_numpy_input(x,data_format,mode)
keras.src.applications.imagenet_utils._preprocess_tensor_input(x,data_format,mode)
keras.src.applications.imagenet_utils.correct_pad(inputs,kernel_size)
keras.src.applications.imagenet_utils.decode_predictions(preds,top=5)
keras.src.applications.imagenet_utils.obtain_input_shape(input_shape,default_size,min_size,data_format,require_flatten,weights=None)
keras.src.applications.imagenet_utils.preprocess_input(x,data_format=None,mode='caffe')
keras.src.applications.imagenet_utils.validate_activation(classifier_activation,weights)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/applications/mobilenet.py----------------------------------------
A:keras.src.applications.mobilenet.input_shape->keras.src.applications.imagenet_utils.obtain_input_shape(input_shape, default_size=default_size, min_size=32, data_format=backend.image_data_format(), require_flatten=include_top, weights=weights)
A:keras.src.applications.mobilenet.img_input->keras.src.layers.Input(tensor=input_tensor, shape=input_shape)
A:keras.src.applications.mobilenet.x->keras.src.layers.BatchNormalization(axis=channel_axis, name='conv_pw_%d_bn' % block_id)(x)
A:keras.src.applications.mobilenet.inputs->keras.src.ops.operation_utils.get_source_inputs(input_tensor)
A:keras.src.applications.mobilenet.model->Functional(inputs, x, name=f'mobilenet_{alpha:0.2f}_{rows}')
A:keras.src.applications.mobilenet.weights_path->keras.src.utils.file_utils.get_file(model_name, weight_path, cache_subdir='models')
A:keras.src.applications.mobilenet.filters->int(filters * alpha)
A:keras.src.applications.mobilenet.pointwise_conv_filters->int(pointwise_conv_filters * alpha)
A:keras.src.applications.mobilenet.preprocess_input.__doc__->keras.src.applications.imagenet_utils.PREPROCESS_INPUT_DOC.format(mode='', ret=imagenet_utils.PREPROCESS_INPUT_RET_DOC_TF, error=imagenet_utils.PREPROCESS_INPUT_ERROR_DOC)
keras.src.applications.mobilenet.MobileNet(input_shape=None,alpha=1.0,depth_multiplier=1,dropout=0.001,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.mobilenet._conv_block(inputs,filters,alpha,kernel=(3,3),strides=(1,1))
keras.src.applications.mobilenet._depthwise_conv_block(inputs,pointwise_conv_filters,alpha,depth_multiplier=1,strides=(1,1),block_id=1)
keras.src.applications.mobilenet.decode_predictions(preds,top=5)
keras.src.applications.mobilenet.preprocess_input(x,data_format=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/applications/densenet.py----------------------------------------
A:keras.src.applications.densenet.x->keras.src.layers.GlobalMaxPooling2D(name='max_pool')(x)
A:keras.src.applications.densenet.x1->keras.src.layers.Conv2D(growth_rate, 3, padding='same', use_bias=False, name=name + '_2_conv')(x1)
A:keras.src.applications.densenet.input_shape->keras.src.applications.imagenet_utils.obtain_input_shape(input_shape, default_size=224, min_size=32, data_format=backend.image_data_format(), require_flatten=include_top, weights=weights)
A:keras.src.applications.densenet.img_input->keras.src.layers.Input(tensor=input_tensor, shape=input_shape)
A:keras.src.applications.densenet.inputs->keras.src.ops.operation_utils.get_source_inputs(input_tensor)
A:keras.src.applications.densenet.model->Functional(inputs, x, name='densenet')
A:keras.src.applications.densenet.weights_path->keras.src.utils.file_utils.get_file('densenet201_weights_tf_dim_ordering_tf_kernels_notop.h5', DENSENET201_WEIGHT_PATH_NO_TOP, cache_subdir='models', file_hash='c13680b51ded0fb44dff2d8f86ac8bb1')
A:keras.src.applications.densenet.preprocess_input.__doc__->keras.src.applications.imagenet_utils.PREPROCESS_INPUT_DOC.format(mode='', ret=imagenet_utils.PREPROCESS_INPUT_RET_DOC_TORCH, error=imagenet_utils.PREPROCESS_INPUT_ERROR_DOC)
keras.src.applications.densenet.DenseNet(blocks,include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.densenet.DenseNet121(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.densenet.DenseNet169(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.densenet.DenseNet201(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.densenet.conv_block(x,growth_rate,name)
keras.src.applications.densenet.decode_predictions(preds,top=5)
keras.src.applications.densenet.dense_block(x,blocks,name)
keras.src.applications.densenet.preprocess_input(x,data_format=None)
keras.src.applications.densenet.transition_block(x,reduction,name)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/applications/efficientnet.py----------------------------------------
A:keras.src.applications.efficientnet.input_shape->keras.src.applications.imagenet_utils.obtain_input_shape(input_shape, default_size=default_size, min_size=32, data_format=backend.image_data_format(), require_flatten=include_top, weights=weights)
A:keras.src.applications.efficientnet.img_input->keras.src.layers.Input(tensor=input_tensor, shape=input_shape)
A:keras.src.applications.efficientnet.new_filters->max(divisor, int(filters + divisor / 2) // divisor * divisor)
A:keras.src.applications.efficientnet.x->keras.src.layers.add([x, inputs], name=name + 'add')
A:keras.src.applications.efficientnet.blocks_args->copy.deepcopy(blocks_args)
A:keras.src.applications.efficientnet.blocks->float(sum((round_repeats(args['repeats']) for args in blocks_args)))
A:keras.src.applications.efficientnet.args['filters_in']->round_filters(args['filters_in'])
A:keras.src.applications.efficientnet.args['filters_out']->round_filters(args['filters_out'])
A:keras.src.applications.efficientnet.inputs->keras.src.ops.operation_utils.get_source_inputs(input_tensor)
A:keras.src.applications.efficientnet.model->Functional(inputs, x, name=model_name)
A:keras.src.applications.efficientnet.weights_path->keras.src.utils.file_utils.get_file(file_name, BASE_WEIGHTS_PATH + file_name, cache_subdir='models', file_hash=file_hash)
A:keras.src.applications.efficientnet.filters_se->max(1, int(filters_in * se_ratio))
A:keras.src.applications.efficientnet.se->keras.src.layers.Conv2D(filters, 1, padding='same', activation='sigmoid', kernel_initializer=CONV_KERNEL_INITIALIZER, name=name + 'se_expand')(se)
A:keras.src.applications.efficientnet.EfficientNetB0.__doc__->BASE_DOCSTRING.format(name='EfficientNetB0')
A:keras.src.applications.efficientnet.EfficientNetB1.__doc__->BASE_DOCSTRING.format(name='EfficientNetB1')
A:keras.src.applications.efficientnet.EfficientNetB2.__doc__->BASE_DOCSTRING.format(name='EfficientNetB2')
A:keras.src.applications.efficientnet.EfficientNetB3.__doc__->BASE_DOCSTRING.format(name='EfficientNetB3')
A:keras.src.applications.efficientnet.EfficientNetB4.__doc__->BASE_DOCSTRING.format(name='EfficientNetB4')
A:keras.src.applications.efficientnet.EfficientNetB5.__doc__->BASE_DOCSTRING.format(name='EfficientNetB5')
A:keras.src.applications.efficientnet.EfficientNetB6.__doc__->BASE_DOCSTRING.format(name='EfficientNetB6')
A:keras.src.applications.efficientnet.EfficientNetB7.__doc__->BASE_DOCSTRING.format(name='EfficientNetB7')
keras.src.applications.efficientnet.EfficientNet(width_coefficient,depth_coefficient,default_size,dropout_rate=0.2,drop_connect_rate=0.2,depth_divisor=8,activation='swish',blocks_args='default',model_name='efficientnet',include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.efficientnet.EfficientNetB0(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
keras.src.applications.efficientnet.EfficientNetB1(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
keras.src.applications.efficientnet.EfficientNetB2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
keras.src.applications.efficientnet.EfficientNetB3(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
keras.src.applications.efficientnet.EfficientNetB4(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
keras.src.applications.efficientnet.EfficientNetB5(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
keras.src.applications.efficientnet.EfficientNetB6(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
keras.src.applications.efficientnet.EfficientNetB7(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
keras.src.applications.efficientnet.block(inputs,activation='swish',drop_rate=0.0,name='',filters_in=32,filters_out=16,kernel_size=3,strides=1,expand_ratio=1,se_ratio=0.0,id_skip=True)
keras.src.applications.efficientnet.decode_predictions(preds,top=5)
keras.src.applications.efficientnet.preprocess_input(x,data_format=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/applications/resnet_v2.py----------------------------------------
A:keras.src.applications.resnet_v2.x->keras.src.applications.resnet.stack_residual_blocks_v2(x, 256, 36, name='conv4')
A:keras.src.applications.resnet_v2.preprocess_input.__doc__->keras.src.applications.imagenet_utils.PREPROCESS_INPUT_DOC.format(mode='', ret=imagenet_utils.PREPROCESS_INPUT_RET_DOC_TF, error=imagenet_utils.PREPROCESS_INPUT_ERROR_DOC)
keras.src.applications.resnet_v2.ResNet101V2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.resnet_v2.ResNet152V2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.resnet_v2.ResNet50V2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.resnet_v2.decode_predictions(preds,top=5)
keras.src.applications.resnet_v2.preprocess_input(x,data_format=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/applications/mobilenet_v2.py----------------------------------------
A:keras.src.applications.mobilenet_v2.is_input_t_tensor->keras.src.backend.is_keras_tensor(operation_utils.get_source_inputs(input_tensor))
A:keras.src.applications.mobilenet_v2.input_shape->keras.src.applications.imagenet_utils.obtain_input_shape(input_shape, default_size=default_size, min_size=32, data_format=backend.image_data_format(), require_flatten=include_top, weights=weights)
A:keras.src.applications.mobilenet_v2.img_input->keras.src.layers.Input(tensor=input_tensor, shape=input_shape)
A:keras.src.applications.mobilenet_v2.first_block_filters->_make_divisible(32 * alpha, 8)
A:keras.src.applications.mobilenet_v2.x->keras.src.layers.BatchNormalization(axis=channel_axis, epsilon=0.001, momentum=0.999, name=prefix + 'project_BN')(x)
A:keras.src.applications.mobilenet_v2.last_block_filters->_make_divisible(1280 * alpha, 8)
A:keras.src.applications.mobilenet_v2.inputs->keras.src.ops.operation_utils.get_source_inputs(input_tensor)
A:keras.src.applications.mobilenet_v2.model->Functional(inputs, x, name=f'mobilenetv2_{alpha:0.2f}_{rows}')
A:keras.src.applications.mobilenet_v2.weights_path->keras.src.utils.file_utils.get_file(model_name, weight_path, cache_subdir='models')
A:keras.src.applications.mobilenet_v2.pointwise_conv_filters->int(filters * alpha)
A:keras.src.applications.mobilenet_v2.pointwise_filters->_make_divisible(pointwise_conv_filters, 8)
A:keras.src.applications.mobilenet_v2.new_v->max(min_value, int(v + divisor / 2) // divisor * divisor)
A:keras.src.applications.mobilenet_v2.preprocess_input.__doc__->keras.src.applications.imagenet_utils.PREPROCESS_INPUT_DOC.format(mode='', ret=imagenet_utils.PREPROCESS_INPUT_RET_DOC_TF, error=imagenet_utils.PREPROCESS_INPUT_ERROR_DOC)
keras.src.applications.mobilenet_v2.MobileNetV2(input_shape=None,alpha=1.0,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.mobilenet_v2._inverted_res_block(inputs,expansion,stride,alpha,filters,block_id)
keras.src.applications.mobilenet_v2._make_divisible(v,divisor,min_value=None)
keras.src.applications.mobilenet_v2.decode_predictions(preds,top=5)
keras.src.applications.mobilenet_v2.preprocess_input(x,data_format=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/applications/xception.py----------------------------------------
A:keras.src.applications.xception.input_shape->keras.src.applications.imagenet_utils.obtain_input_shape(input_shape, default_size=299, min_size=71, data_format=backend.image_data_format(), require_flatten=include_top, weights=weights)
A:keras.src.applications.xception.img_input->keras.src.layers.Input(tensor=input_tensor, shape=input_shape)
A:keras.src.applications.xception.x->keras.src.layers.GlobalMaxPooling2D()(x)
A:keras.src.applications.xception.residual->keras.src.layers.BatchNormalization(axis=channel_axis)(residual)
A:keras.src.applications.xception.inputs->keras.src.ops.operation_utils.get_source_inputs(input_tensor)
A:keras.src.applications.xception.model->Functional(inputs, x, name='xception')
A:keras.src.applications.xception.weights_path->keras.src.utils.file_utils.get_file('xception_weights_tf_dim_ordering_tf_kernels_notop.h5', WEIGHTS_PATH_NO_TOP, cache_subdir='models', file_hash='b0042744bf5b25fce3cb969f33bebb97')
A:keras.src.applications.xception.preprocess_input.__doc__->keras.src.applications.imagenet_utils.PREPROCESS_INPUT_DOC.format(mode='', ret=imagenet_utils.PREPROCESS_INPUT_RET_DOC_TF, error=imagenet_utils.PREPROCESS_INPUT_ERROR_DOC)
keras.src.applications.xception.Xception(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.xception.decode_predictions(preds,top=5)
keras.src.applications.xception.preprocess_input(x,data_format=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/applications/vgg19.py----------------------------------------
A:keras.src.applications.vgg19.input_shape->keras.src.applications.imagenet_utils.obtain_input_shape(input_shape, default_size=224, min_size=32, data_format=backend.image_data_format(), require_flatten=include_top, weights=weights)
A:keras.src.applications.vgg19.img_input->keras.src.layers.Input(tensor=input_tensor, shape=input_shape)
A:keras.src.applications.vgg19.x->keras.src.layers.GlobalMaxPooling2D()(x)
A:keras.src.applications.vgg19.inputs->keras.src.ops.operation_utils.get_source_inputs(input_tensor)
A:keras.src.applications.vgg19.model->Functional(inputs, x, name='vgg19')
A:keras.src.applications.vgg19.weights_path->keras.src.utils.file_utils.get_file('vgg19_weights_tf_dim_ordering_tf_kernels_notop.h5', WEIGHTS_PATH_NO_TOP, cache_subdir='models', file_hash='253f8cb515780f3b799900260a226db6')
A:keras.src.applications.vgg19.preprocess_input.__doc__->keras.src.applications.imagenet_utils.PREPROCESS_INPUT_DOC.format(mode='', ret=imagenet_utils.PREPROCESS_INPUT_RET_DOC_CAFFE, error=imagenet_utils.PREPROCESS_INPUT_ERROR_DOC)
keras.src.applications.vgg19.VGG19(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.vgg19.decode_predictions(preds,top=5)
keras.src.applications.vgg19.preprocess_input(x,data_format=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/applications/inception_v3.py----------------------------------------
A:keras.src.applications.inception_v3.input_shape->keras.src.applications.imagenet_utils.obtain_input_shape(input_shape, default_size=299, min_size=75, data_format=backend.image_data_format(), require_flatten=include_top, weights=weights)
A:keras.src.applications.inception_v3.img_input->keras.src.layers.Input(tensor=input_tensor, shape=input_shape)
A:keras.src.applications.inception_v3.x->keras.src.layers.Activation('relu', name=name)(x)
A:keras.src.applications.inception_v3.branch1x1->conv2d_bn(x, 320, 1, 1)
A:keras.src.applications.inception_v3.branch5x5->conv2d_bn(branch5x5, 64, 5, 5)
A:keras.src.applications.inception_v3.branch3x3dbl->keras.src.layers.concatenate([branch3x3dbl_1, branch3x3dbl_2], axis=channel_axis)
A:keras.src.applications.inception_v3.branch_pool->conv2d_bn(branch_pool, 192, 1, 1)
A:keras.src.applications.inception_v3.branch3x3->keras.src.layers.concatenate([branch3x3_1, branch3x3_2], axis=channel_axis, name='mixed9_' + str(i))
A:keras.src.applications.inception_v3.branch7x7->conv2d_bn(branch7x7, 192, 7, 1)
A:keras.src.applications.inception_v3.branch7x7dbl->conv2d_bn(branch7x7dbl, 192, 1, 7)
A:keras.src.applications.inception_v3.branch7x7x3->conv2d_bn(branch7x7x3, 192, 3, 3, strides=(2, 2), padding='valid')
A:keras.src.applications.inception_v3.branch3x3_1->conv2d_bn(branch3x3, 384, 1, 3)
A:keras.src.applications.inception_v3.branch3x3_2->conv2d_bn(branch3x3, 384, 3, 1)
A:keras.src.applications.inception_v3.branch3x3dbl_1->conv2d_bn(branch3x3dbl, 384, 1, 3)
A:keras.src.applications.inception_v3.branch3x3dbl_2->conv2d_bn(branch3x3dbl, 384, 3, 1)
A:keras.src.applications.inception_v3.inputs->keras.src.ops.operation_utils.get_source_inputs(input_tensor)
A:keras.src.applications.inception_v3.model->Functional(inputs, x, name='inception_v3')
A:keras.src.applications.inception_v3.weights_path->keras.src.utils.file_utils.get_file('inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5', WEIGHTS_PATH_NO_TOP, cache_subdir='models', file_hash='bcbd6486424b2319ff4ef7d526e38f63')
A:keras.src.applications.inception_v3.preprocess_input.__doc__->keras.src.applications.imagenet_utils.PREPROCESS_INPUT_DOC.format(mode='', ret=imagenet_utils.PREPROCESS_INPUT_RET_DOC_TF, error=imagenet_utils.PREPROCESS_INPUT_ERROR_DOC)
keras.src.applications.inception_v3.InceptionV3(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.src.applications.inception_v3.conv2d_bn(x,filters,num_row,num_col,padding='same',strides=(1,1),name=None)
keras.src.applications.inception_v3.decode_predictions(preds,top=5)
keras.src.applications.inception_v3.preprocess_input(x,data_format=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/activations/__init__.py----------------------------------------
A:keras.src.activations.__init__.fn_config->keras.src.saving.serialization_lib.serialize_keras_object(activation)
A:keras.src.activations.__init__.fn_config['config']->keras.src.saving.object_registration.get_registered_name(activation)
A:keras.src.activations.__init__.obj->ALL_OBJECTS_DICT.get(identifier, None)
keras.src.activations.__init__.deserialize(config,custom_objects=None)
keras.src.activations.__init__.get(identifier)
keras.src.activations.__init__.serialize(activation)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/activations/activations.py----------------------------------------
A:keras.src.activations.activations.x->keras.src.backend.convert_to_tensor(x)
A:keras.src.activations.activations.negative_part->keras.src.backend.nn.relu(-x)
A:keras.src.activations.activations.threshold->keras.src.ops.cast(threshold, dtype=x.dtype)
A:keras.src.activations.activations.min_value->keras.src.ops.cast(0.0, dtype=x.dtype)
A:keras.src.activations.activations.max_value->keras.src.ops.cast(max_value, dtype=x.dtype)
A:keras.src.activations.activations.output->keras.src.ops.sigmoid(x)
keras.src.activations.activations.Mish(ops.Operation)
keras.src.activations.activations.Mish.call(self,x)
keras.src.activations.activations.Mish.compute_output_spec(self,x)
keras.src.activations.activations.Mish.static_call(x)
keras.src.activations.activations.ReLU(self,negative_slope=0.0,max_value=None,threshold=0.0,name=None)
keras.src.activations.activations.ReLU.__init__(self,negative_slope=0.0,max_value=None,threshold=0.0,name=None)
keras.src.activations.activations.ReLU.call(self,x)
keras.src.activations.activations.ReLU.compute_output_spec(self,x)
keras.src.activations.activations.ReLU.static_call(x,negative_slope=0.0,max_value=None,threshold=0.0)
keras.src.activations.activations.elu(x,alpha=1.0)
keras.src.activations.activations.exponential(x)
keras.src.activations.activations.gelu(x,approximate=False)
keras.src.activations.activations.hard_sigmoid(x)
keras.src.activations.activations.hard_silu(x)
keras.src.activations.activations.leaky_relu(x,negative_slope=0.2)
keras.src.activations.activations.linear(x)
keras.src.activations.activations.log_softmax(x,axis=-1)
keras.src.activations.activations.mish(x)
keras.src.activations.activations.relu(x,negative_slope=0.0,max_value=None,threshold=0.0)
keras.src.activations.activations.relu6(x)
keras.src.activations.activations.selu(x)
keras.src.activations.activations.sigmoid(x)
keras.src.activations.activations.silu(x)
keras.src.activations.activations.softmax(x,axis=-1)
keras.src.activations.activations.softplus(x)
keras.src.activations.activations.softsign(x)
keras.src.activations.activations.tanh(x)
keras.src.activations.elu(x,alpha=1.0)
keras.src.activations.exponential(x)
keras.src.activations.gelu(x,approximate=False)
keras.src.activations.hard_sigmoid(x)
keras.src.activations.hard_silu(x)
keras.src.activations.leaky_relu(x,negative_slope=0.2)
keras.src.activations.linear(x)
keras.src.activations.log_softmax(x,axis=-1)
keras.src.activations.mish(x)
keras.src.activations.relu(x,negative_slope=0.0,max_value=None,threshold=0.0)
keras.src.activations.relu6(x)
keras.src.activations.selu(x)
keras.src.activations.sigmoid(x)
keras.src.activations.silu(x)
keras.src.activations.softmax(x,axis=-1)
keras.src.activations.softplus(x)
keras.src.activations.softsign(x)
keras.src.activations.tanh(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/exports.py----------------------------------------
keras.Variable(BackendVariable)
keras.device(device_name)
keras.name_scope(backend_name_scope)
keras.src.backend.exports.Variable(BackendVariable)
keras.src.backend.exports.device(device_name)
keras.src.backend.exports.name_scope(backend_name_scope)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/config.py----------------------------------------
A:keras.src.backend.config._FLOATX->str(value)
A:keras.src.backend.config.data_format->str(data_format).lower()
A:keras.src.backend.config._KERAS_DIR->os.path.join(_keras_base_dir, '.keras')
A:keras.src.backend.config._keras_base_dir->os.path.expanduser('~')
A:keras.src.backend.config._config_path->os.path.expanduser(os.path.join(_KERAS_DIR, 'keras.json'))
A:keras.src.backend.config._config->json.load(f)
A:keras.src.backend.config._floatx->json.load(f).get('floatx', floatx())
A:keras.src.backend.config._epsilon->json.load(f).get('epsilon', epsilon())
A:keras.src.backend.config._backend->json.load(f).get('backend', _BACKEND)
A:keras.src.backend.config._image_data_format->json.load(f).get('image_data_format', image_data_format())
keras.src.backend.backend()
keras.src.backend.config.backend()
keras.src.backend.config.epsilon()
keras.src.backend.config.floatx()
keras.src.backend.config.image_data_format()
keras.src.backend.config.keras_home()
keras.src.backend.config.set_epsilon(value)
keras.src.backend.config.set_floatx(value)
keras.src.backend.config.set_image_data_format(data_format)
keras.src.backend.config.standardize_data_format(data_format)
keras.src.backend.epsilon()
keras.src.backend.floatx()
keras.src.backend.image_data_format()
keras.src.backend.set_epsilon(value)
keras.src.backend.set_floatx(value)
keras.src.backend.set_image_data_format(data_format)
keras.src.backend.standardize_data_format(data_format)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/math.py----------------------------------------
A:keras.src.backend.torch.math.data->convert_to_tensor(data)
A:keras.src.backend.torch.math.segment_ids->torch.where(segment_ids < num_segments, segment_ids, num_segments)
A:keras.src.backend.torch.math.num_repeats->torch.prod(torch.tensor(data.shape[1:], device=get_device())).long()
A:keras.src.backend.torch.math.result->torch.zeros(*shape, device=get_device()).scatter_reduce(0, segment_ids, data.float(), 'amax')
A:keras.src.backend.torch.math.x->cast(x, dtype)
A:keras.src.backend.torch.math.targets->convert_to_tensor(targets).type(torch.int64)
A:keras.src.backend.torch.math.predictions->convert_to_tensor(predictions)
A:keras.src.backend.torch.math.targets_values->torch.take_along_dim(predictions, targets, dim=-1)
A:keras.src.backend.torch.math.max_x->torch.amax(x, dim=axis, keepdim=True)
A:keras.src.backend.torch.math.flat_batchsize->math.prod(batch_shape)
A:keras.src.backend.torch.math.real->convert_to_tensor(real)
A:keras.src.backend.torch.math.imag->convert_to_tensor(imag)
A:keras.src.backend.torch.math.complex_input->torch.swapaxes(complex_input, -2, -1)
A:keras.src.backend.torch.math.complex_output->torch.fft.rfft(x, n=fft_length, dim=-1, norm='backward')
A:keras.src.backend.torch.math.win->torch.divide(win, denom[:_sequence_length])
A:keras.src.backend.torch.math.denom->torch.reshape(denom, [overlaps * sequence_stride])
A:keras.src.backend.torch.math.a->convert_to_tensor(a)
A:keras.src.backend.torch.math.b->convert_to_tensor(b)
A:keras.src.backend.torch.math.dtype->keras.src.backend.common.dtypes.result_type(x.dtype, float)
keras.src.backend.math._get_complex_tensor_from_tuple(x)
keras.src.backend.math._overlap_sequences(x,sequence_stride)
keras.src.backend.math.erf(x)
keras.src.backend.math.erfinv(x)
keras.src.backend.math.extract_sequences(x,sequence_length,sequence_stride)
keras.src.backend.math.fft(x)
keras.src.backend.math.fft2(x)
keras.src.backend.math.in_top_k(targets,predictions,k)
keras.src.backend.math.irfft(x,fft_length=None)
keras.src.backend.math.istft(x,sequence_length,sequence_stride,fft_length,length=None,window='hann',center=True)
keras.src.backend.math.logsumexp(x,axis=None,keepdims=False)
keras.src.backend.math.norm(x,ord=None,axis=None,keepdims=False)
keras.src.backend.math.qr(x,mode='reduced')
keras.src.backend.math.rfft(x,fft_length=None)
keras.src.backend.math.rsqrt(x)
keras.src.backend.math.segment_max(data,segment_ids,num_segments=None,**kwargs)
keras.src.backend.math.segment_sum(data,segment_ids,num_segments=None,**kwargs)
keras.src.backend.math.solve(a,b)
keras.src.backend.math.stft(x,sequence_length,sequence_stride,fft_length,window='hann',center=True)
keras.src.backend.math.top_k(x,k,sorted=True)
keras.src.backend.torch.math._get_complex_tensor_from_tuple(x)
keras.src.backend.torch.math._overlap_sequences(x,sequence_stride)
keras.src.backend.torch.math.erf(x)
keras.src.backend.torch.math.erfinv(x)
keras.src.backend.torch.math.extract_sequences(x,sequence_length,sequence_stride)
keras.src.backend.torch.math.fft(x)
keras.src.backend.torch.math.fft2(x)
keras.src.backend.torch.math.in_top_k(targets,predictions,k)
keras.src.backend.torch.math.irfft(x,fft_length=None)
keras.src.backend.torch.math.istft(x,sequence_length,sequence_stride,fft_length,length=None,window='hann',center=True)
keras.src.backend.torch.math.logsumexp(x,axis=None,keepdims=False)
keras.src.backend.torch.math.norm(x,ord=None,axis=None,keepdims=False)
keras.src.backend.torch.math.qr(x,mode='reduced')
keras.src.backend.torch.math.rfft(x,fft_length=None)
keras.src.backend.torch.math.rsqrt(x)
keras.src.backend.torch.math.segment_max(data,segment_ids,num_segments=None,**kwargs)
keras.src.backend.torch.math.segment_sum(data,segment_ids,num_segments=None,**kwargs)
keras.src.backend.torch.math.solve(a,b)
keras.src.backend.torch.math.stft(x,sequence_length,sequence_stride,fft_length,window='hann',center=True)
keras.src.backend.torch.math.top_k(x,k,sorted=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/rnn.py----------------------------------------
A:keras.src.backend.torch.rnn.axes->list(range(len(input_t.shape)))
A:keras.src.backend.torch.rnn.inputs->keras.src.utils.tree.map_structure(swap_batch_timestep, inputs)
A:keras.src.backend.torch.rnn.flattened_inputs->keras.src.utils.tree.flatten(inputs)
A:keras.src.backend.torch.rnn.mask->torch.flip(mask, [0])
A:keras.src.backend.torch.rnn.mask_t->masking_fn(time)
A:keras.src.backend.torch.rnn.states->tuple(initial_states)
A:keras.src.backend.torch.rnn.input_t->torch.unbind(input_t)
A:keras.src.backend.torch.rnn.processed_input->keras.src.utils.tree.map_structure(_process_single_input_t, inputs)
A:keras.src.backend.torch.rnn.mask_list->torch.flip(mask_list, dims=mask_list.shape)
A:keras.src.backend.torch.rnn.inp->_get_input_tensor(i)
A:keras.src.backend.torch.rnn.(output, new_states)->step_function(current_input, tuple(states) + tuple(constants))
A:keras.src.backend.torch.rnn.tiled_mask_t->tuple((_expand_mask(mask_t, o, fixed_dim=len(mask_t.shape)) for o in flat_out))
A:keras.src.backend.torch.rnn.prev_output->torch.zeros_like(output)
A:keras.src.backend.torch.rnn.output->torch.where(tiled_mask_t, output, prev_output)
A:keras.src.backend.torch.rnn.flat_states->keras.src.utils.tree.flatten(states)
A:keras.src.backend.torch.rnn.flat_new_states->keras.src.utils.tree.flatten(new_states)
A:keras.src.backend.torch.rnn.flat_final_states->tuple((torch.where(m, s, ps) for (m, s, ps) in zip(tiled_mask_t, flat_new_states, flat_states)))
A:keras.src.backend.torch.rnn.outputs->keras.src.utils.tree.map_structure(swap_batch_timestep, outputs)
A:keras.src.backend.torch.rnn.last_output->keras.src.utils.tree.pack_sequence_as(output_time_zero, last_output)
A:keras.src.backend.torch.rnn.(output, states)->step_function(inp, tuple(states) + tuple(constants))
A:keras.src.backend.torch.rnn.input_ta->tuple((list(torch.unbind(input_)) if not go_backwards else list(torch.unbind(torch.flip(input_, [0]))) for input_ in flattened_inputs))
A:keras.src.backend.torch.rnn.input_time_zero->keras.src.utils.tree.pack_sequence_as(inputs, [inp[0] for inp in flattened_inputs])
A:keras.src.backend.torch.rnn.(output_time_zero, _)->step_function(input_time_zero, tuple(initial_states) + tuple(constants))
A:keras.src.backend.torch.rnn.out_list->list(out)
A:keras.src.backend.torch.rnn.time->torch.tensor(0, dtype=torch.int32)
A:keras.src.backend.torch.rnn.input_length->convert_to_tensor(input_length)
A:keras.src.backend.torch.rnn.max_iterations->torch.max(input_length)
A:keras.src.backend.torch.rnn.mask_ta->list(torch.unbind(mask))
A:keras.src.backend.torch.rnn.max_len->torch.max(input_length, dim=0)
A:keras.src.backend.torch.rnn.rev_input_length->torch.subtract(max_len - 1, input_length)
A:keras.src.backend.torch.rnn.flat_zero_output->tuple((torch.zeros_like(o) for o in tree.flatten(output_time_zero)))
A:keras.src.backend.torch.rnn.current_input->keras.src.utils.tree.pack_sequence_as(inputs, current_input)
A:keras.src.backend.torch.rnn.flat_output->keras.src.utils.tree.flatten(output)
A:keras.src.backend.torch.rnn.flat_new_output->compute_masked_output(mask_t, flat_output, flat_mask_output)
A:keras.src.backend.torch.rnn.flat_state->keras.src.utils.tree.flatten(states)
A:keras.src.backend.torch.rnn.flat_new_state->keras.src.utils.tree.flatten(new_states)
A:keras.src.backend.torch.rnn.flat_final_state->compute_masked_output(mask_t, flat_new_state, flat_state)
A:keras.src.backend.torch.rnn.new_states->keras.src.utils.tree.pack_sequence_as(initial_states, flat_new_state)
A:keras.src.backend.torch.rnn.final_outputs->_step(time, output_ta_t, *new_states)
A:keras.src.backend.torch.rnn.max_ndims->max([t.ndim for t in tensor_list])
keras.src.backend.cudnn_ok(*args,**kwargs)
keras.src.backend.gru(*args,**kwargs)
keras.src.backend.lstm(*args,**kwargs)
keras.src.backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None,time_major=False,zero_output_for_mask=False,return_all_outputs=True)
keras.src.backend.torch.rnn.cudnn_ok(*args,**kwargs)
keras.src.backend.torch.rnn.gru(*args,**kwargs)
keras.src.backend.torch.rnn.lstm(*args,**kwargs)
keras.src.backend.torch.rnn.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None,time_major=False,zero_output_for_mask=False,return_all_outputs=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/image.py----------------------------------------
A:keras.src.backend.torch.image.size->tuple(size)
A:keras.src.backend.torch.image.image->image.permute((0, 2, 3, 1)).permute((0, 2, 3, 1))
A:keras.src.backend.torch.image.resized->resized.permute((1, 2, 0)).permute((1, 2, 0))
A:keras.src.backend.torch.image.transform->torch.reshape(transform, (batch_size, 3, 3))
A:keras.src.backend.torch.image.meshgrid->torch.meshgrid(*[torch.arange(size, dtype=transform.dtype, device=transform.device) for size in image.shape[1:]], indexing='ij')
A:keras.src.backend.torch.image.indices->torch.tile(indices, (batch_size, 1, 1, 1, 1))
A:keras.src.backend.torch.image.a0->transform[:, 0].clone()
A:keras.src.backend.torch.image.a2->transform[:, 2].clone()
A:keras.src.backend.torch.image.b1->transform[:, 4].clone()
A:keras.src.backend.torch.image.b2->transform[:, 5].clone()
A:keras.src.backend.torch.image.offset->torch.nn.functional.pad(offset, pad=[0, 1, 0, 0])
A:keras.src.backend.torch.image.coordinates->torch.moveaxis(coordinates, source=-1, destination=1)
A:keras.src.backend.torch.image.affined->affined.squeeze(dim=0).squeeze(dim=0)
A:keras.src.backend.torch.image.index->torch.floor(coordinate).to(torch.int32)
A:keras.src.backend.torch.image.lower->torch.floor(coordinate)
A:keras.src.backend.torch.image.input_arr->convert_to_tensor(input)
A:keras.src.backend.torch.image.fill_value->int(fill_value)
A:keras.src.backend.torch.image.index_fixer->_INDEX_FIXERS.get(fill_mode)
A:keras.src.backend.torch.image.interp_nodes->interp_fun(coordinate)
A:keras.src.backend.torch.image.fixed_index->index_fixer(index, size)
A:keras.src.backend.torch.image.valid->is_valid(index, size)
A:keras.src.backend.torch.image.(indices, validities, weights)->zip(*items)
A:keras.src.backend.torch.image.all_valid->functools.reduce(operator.and_, validities)
A:keras.src.backend.torch.image.contribution->torch.where(all_valid, input_arr[indices], fill_value)
A:keras.src.backend.torch.image.result->functools.reduce(operator.add, outputs)
keras.src.backend.image._is_integer(a)
keras.src.backend.image._linear_indices_and_weights(coordinate)
keras.src.backend.image._mirror_index_fixer(index,size)
keras.src.backend.image._nearest_indices_and_weights(coordinate)
keras.src.backend.image._reflect_index_fixer(index,size)
keras.src.backend.image.affine_transform(image,transform,interpolation='bilinear',fill_mode='constant',fill_value=0,data_format='channels_last')
keras.src.backend.image.map_coordinates(input,coordinates,order,fill_mode='constant',fill_value=0.0)
keras.src.backend.image.resize(image,size,interpolation='bilinear',antialias=False,data_format='channels_last')
keras.src.backend.torch.image._is_integer(a)
keras.src.backend.torch.image._linear_indices_and_weights(coordinate)
keras.src.backend.torch.image._mirror_index_fixer(index,size)
keras.src.backend.torch.image._nearest_indices_and_weights(coordinate)
keras.src.backend.torch.image._reflect_index_fixer(index,size)
keras.src.backend.torch.image.affine_transform(image,transform,interpolation='bilinear',fill_mode='constant',fill_value=0,data_format='channels_last')
keras.src.backend.torch.image.map_coordinates(input,coordinates,order,fill_mode='constant',fill_value=0.0)
keras.src.backend.torch.image.resize(image,size,interpolation='bilinear',antialias=False,data_format='channels_last')


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/nn.py----------------------------------------
A:keras.src.backend.torch.nn.x->convert_to_tensor(x)
A:keras.src.backend.torch.nn.dtype->standardize_dtype(x.dtype)
A:keras.src.backend.torch.nn.output->torch.transpose(output, 1, 0)
A:keras.src.backend.torch.nn.num_spatial_dims->len(spatial_shape)
A:keras.src.backend.torch.nn.padding_size->_compute_padding_length(spatial_shape[i], pool_size[i], strides[i])
A:keras.src.backend.torch.nn.dilation_rate->standardize_tuple(dilation_rate, num_spatial_dims, 'dilation_rate')
A:keras.src.backend.torch.nn.flattened_padding->tuple((value for left_and_right in padding for value in left_and_right))
A:keras.src.backend.torch.nn.inputs->_transpose_spatial_inputs(inputs)
A:keras.src.backend.torch.nn.outputs->torch.amax(one_hot(cast(x, 'int32'), num_classes, axis=axis, dtype=dtype), dim=reduction_axis)
A:keras.src.backend.torch.nn.kernel->_transpose_conv_kernel(kernel)
A:keras.src.backend.torch.nn.pool_size->standardize_tuple(pool_size, num_spatial_dims, 'pool_size')
A:keras.src.backend.torch.nn.strides->standardize_tuple(strides, num_spatial_dims, 'strides')
A:keras.src.backend.torch.nn.data_format->standardize_data_format(data_format)
A:keras.src.backend.torch.nn.(inputs, padding)->_apply_same_padding(inputs, kernel.shape[2:], strides, operation_type='conv', dilation_rate=dilation_rate)
A:keras.src.backend.torch.nn.device->get_device()
A:keras.src.backend.torch.nn.depthwise_conv_output->depthwise_conv(inputs, depthwise_kernel, strides, padding, data_format, dilation_rate)
A:keras.src.backend.torch.nn.(torch_padding, torch_output_padding)->compute_conv_transpose_padding_args_for_torch(input_shape=inputs.shape, kernel_shape=kernel.shape, strides=strides, padding=padding, output_padding=output_padding, dilation_rate=dilation_rate)
A:keras.src.backend.torch.nn.dims->torch.transpose(output, 1, 0).dim()
A:keras.src.backend.torch.nn.new_axes_order->list(range(dims))
A:keras.src.backend.torch.nn.target->convert_to_tensor(target)
A:keras.src.backend.torch.nn.log_prob->torch.log(output)
A:keras.src.backend.torch.nn.ori_dtype->standardize_dtype(x.dtype)
A:keras.src.backend.torch.nn.mean->torch.reshape(mean, shape)
A:keras.src.backend.torch.nn.variance->torch.reshape(variance, shape)
A:keras.src.backend.torch.nn.offset->torch.zeros_like(mean)
A:keras.src.backend.torch.nn.scale->torch.ones_like(variance)
A:keras.src.backend.torch.nn.target_length->convert_to_tensor(target_length)
A:keras.src.backend.torch.nn.output_length->convert_to_tensor(output_length)
A:keras.src.backend.torch.nn.logits->torch.nn.functional.log_softmax(output, dim=-1)
keras.src.backend.nn._apply_same_padding(inputs,kernel_size,strides,operation_type,dilation_rate=1)
keras.src.backend.nn._compute_padding_length(input_length,kernel_length,stride,dilation_rate=1)
keras.src.backend.nn._transpose_conv_kernel(kernel)
keras.src.backend.nn._transpose_spatial_inputs(inputs)
keras.src.backend.nn._transpose_spatial_outputs(outputs)
keras.src.backend.nn.average_pool(inputs,pool_size,strides=None,padding='valid',data_format=None)
keras.src.backend.nn.batch_normalization(x,mean,variance,axis,offset=None,scale=None,epsilon=0.001)
keras.src.backend.nn.binary_crossentropy(target,output,from_logits=False)
keras.src.backend.nn.categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.src.backend.nn.conv(inputs,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.nn.conv_transpose(inputs,kernel,strides=1,padding='valid',output_padding=None,data_format=None,dilation_rate=1)
keras.src.backend.nn.ctc_loss(target,output,target_length,output_length,mask_index=0)
keras.src.backend.nn.depthwise_conv(inputs,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.nn.elu(x,alpha=1.0)
keras.src.backend.nn.gelu(x,approximate=True)
keras.src.backend.nn.hard_sigmoid(x)
keras.src.backend.nn.hard_silu(x)
keras.src.backend.nn.leaky_relu(x,negative_slope=0.2)
keras.src.backend.nn.log_sigmoid(x)
keras.src.backend.nn.log_softmax(x,axis=-1)
keras.src.backend.nn.max_pool(inputs,pool_size,strides=None,padding='valid',data_format=None)
keras.src.backend.nn.moments(x,axes,keepdims=False,synchronized=False)
keras.src.backend.nn.multi_hot(x,num_classes,axis=-1,dtype='float32')
keras.src.backend.nn.one_hot(x,num_classes,axis=-1,dtype='float32')
keras.src.backend.nn.relu(x)
keras.src.backend.nn.relu6(x)
keras.src.backend.nn.selu(x)
keras.src.backend.nn.separable_conv(inputs,depthwise_kernel,pointwise_kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.nn.sigmoid(x)
keras.src.backend.nn.silu(x,beta=1.0)
keras.src.backend.nn.softmax(x,axis=-1)
keras.src.backend.nn.softplus(x)
keras.src.backend.nn.softsign(x)
keras.src.backend.nn.sparse_categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.src.backend.nn.tanh(x)
keras.src.backend.torch.nn._apply_same_padding(inputs,kernel_size,strides,operation_type,dilation_rate=1)
keras.src.backend.torch.nn._compute_padding_length(input_length,kernel_length,stride,dilation_rate=1)
keras.src.backend.torch.nn._transpose_conv_kernel(kernel)
keras.src.backend.torch.nn._transpose_spatial_inputs(inputs)
keras.src.backend.torch.nn._transpose_spatial_outputs(outputs)
keras.src.backend.torch.nn.average_pool(inputs,pool_size,strides=None,padding='valid',data_format=None)
keras.src.backend.torch.nn.batch_normalization(x,mean,variance,axis,offset=None,scale=None,epsilon=0.001)
keras.src.backend.torch.nn.binary_crossentropy(target,output,from_logits=False)
keras.src.backend.torch.nn.categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.src.backend.torch.nn.conv(inputs,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.torch.nn.conv_transpose(inputs,kernel,strides=1,padding='valid',output_padding=None,data_format=None,dilation_rate=1)
keras.src.backend.torch.nn.ctc_loss(target,output,target_length,output_length,mask_index=0)
keras.src.backend.torch.nn.depthwise_conv(inputs,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.torch.nn.elu(x,alpha=1.0)
keras.src.backend.torch.nn.gelu(x,approximate=True)
keras.src.backend.torch.nn.hard_sigmoid(x)
keras.src.backend.torch.nn.hard_silu(x)
keras.src.backend.torch.nn.leaky_relu(x,negative_slope=0.2)
keras.src.backend.torch.nn.log_sigmoid(x)
keras.src.backend.torch.nn.log_softmax(x,axis=-1)
keras.src.backend.torch.nn.max_pool(inputs,pool_size,strides=None,padding='valid',data_format=None)
keras.src.backend.torch.nn.moments(x,axes,keepdims=False,synchronized=False)
keras.src.backend.torch.nn.multi_hot(x,num_classes,axis=-1,dtype='float32')
keras.src.backend.torch.nn.one_hot(x,num_classes,axis=-1,dtype='float32')
keras.src.backend.torch.nn.relu(x)
keras.src.backend.torch.nn.relu6(x)
keras.src.backend.torch.nn.selu(x)
keras.src.backend.torch.nn.separable_conv(inputs,depthwise_kernel,pointwise_kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.torch.nn.sigmoid(x)
keras.src.backend.torch.nn.silu(x,beta=1.0)
keras.src.backend.torch.nn.softmax(x,axis=-1)
keras.src.backend.torch.nn.softplus(x)
keras.src.backend.torch.nn.softsign(x)
keras.src.backend.torch.nn.sparse_categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.src.backend.torch.nn.tanh(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/core.py----------------------------------------
A:keras.src.backend.torch.core.previous_device->keras.src.backend.common.global_state.get_global_attribute('torch_device', None)
A:keras.src.backend.torch.core.current_device->_parse_device_input(device_name)
A:keras.src.backend.torch.core.device->get_device()
A:keras.src.backend.torch.core.device_name->device_name.replace('gpu', 'cuda').replace('gpu', 'cuda')
A:keras.src.backend.torch.core.standardized_dtype->TORCH_DTYPES.get(standardize_dtype(dtype), None)
A:keras.src.backend.torch.core.self._value->torch.nn.Parameter(convert_to_tensor(value, dtype=self._dtype), requires_grad=self.trainable).to(get_device())
A:keras.src.backend.torch.core.value->convert_to_numpy(self.value)
A:keras.src.backend.torch.core.x->x.cpu().cpu()
A:keras.src.backend.torch.core.dtype->to_torch_dtype(dtype)
A:keras.src.backend.torch.core.shape->convert_to_tensor(shape).to(shape_dtype)
A:keras.src.backend.torch.core.(meta_args, meta_kwargs)->keras.src.utils.tree.map_structure(lambda x: convert_keras_tensor_to_torch(x, fill_value), (args, kwargs))
A:keras.src.backend.torch.core.(eager_args, eager_kwargs)->keras.src.utils.tree.map_structure(lambda x: convert_keras_tensor_to_torch(x, fill_value), (args, kwargs))
A:keras.src.backend.torch.core.outputs->torch.clone(inputs)
A:keras.src.backend.torch.core.none_in_shape->any(map(has_none_shape, tree.flatten((args, kwargs))))
A:keras.src.backend.torch.core.outputs_2->symbolic_call(fn, args, kwargs, fill_value=89)
A:keras.src.backend.torch.core.flat_out_1->keras.src.utils.tree.flatten(outputs_1)
A:keras.src.backend.torch.core.flat_out_2->keras.src.utils.tree.flatten(outputs_2)
A:keras.src.backend.torch.core.output_spec->keras.src.utils.tree.map_structure(convert_torch_to_keras_tensor, outputs)
A:keras.src.backend.torch.core.indices->torch.transpose(indices, 0, 1)
A:keras.src.backend.torch.core.values->torch.reshape(values, [-1] + list(value_shape))
A:keras.src.backend.torch.core.zeros->torch.zeros(shape, dtype=values.dtype, device=get_device())
A:keras.src.backend.torch.core.inputs->convert_to_tensor(inputs)
A:keras.src.backend.torch.core.updates->convert_to_tensor(updates)
A:keras.src.backend.torch.core.shape_dtype->to_torch_dtype('int64')
A:keras.src.backend.torch.core.start_indices->convert_to_tensor(start_indices).to(shape_dtype)
A:keras.src.backend.torch.core.is_tuple->isinstance(loop_vars, (tuple, list))
A:keras.src.backend.torch.core.loop_vars->tuple(loop_vars)
A:keras.src.backend.torch.core.val->body_fun(i, val)
keras.src.backend.Variable(KerasVariable)
keras.src.backend.Variable.__array__(self,dtype=None)
keras.src.backend.Variable.__eq__(self,other)
keras.src.backend.Variable.__torch_function__(cls,func,types,args=(),kwargs=None)
keras.src.backend.Variable._convert_to_tensor(self,value,dtype=None)
keras.src.backend.Variable._direct_assign(self,value)
keras.src.backend.Variable._initialize(self,value)
keras.src.backend.Variable.trainable(self)
keras.src.backend.Variable.trainable(self,value)
keras.src.backend.Variable.value(self)
keras.src.backend.cast(x,dtype)
keras.src.backend.compute_output_spec(fn,*args,**kwargs)
keras.src.backend.cond(pred,true_fn,false_fn)
keras.src.backend.convert_to_numpy(x)
keras.src.backend.convert_to_tensor(x,dtype=None,sparse=None)
keras.src.backend.core._parse_device_input(device_name)
keras.src.backend.core.custom_gradient(fun)
keras.src.backend.core.fori_loop(lower,upper,body_fun,init_val)
keras.src.backend.core.get_device()
keras.src.backend.core.slice(inputs,start_indices,shape)
keras.src.backend.core.slice_update(inputs,start_indices,updates)
keras.src.backend.core.unstack(x,num=None,axis=0)
keras.src.backend.core.while_loop(cond,body,loop_vars,maximum_iterations=None)
keras.src.backend.device_scope(device_name)
keras.src.backend.is_tensor(x)
keras.src.backend.scatter(indices,values,shape)
keras.src.backend.scatter_update(inputs,indices,updates)
keras.src.backend.shape(x)
keras.src.backend.stop_gradient(variable)
keras.src.backend.to_torch_dtype(dtype)
keras.src.backend.torch.core.Variable(KerasVariable)
keras.src.backend.torch.core.Variable.__array__(self,dtype=None)
keras.src.backend.torch.core.Variable.__eq__(self,other)
keras.src.backend.torch.core.Variable.__torch_function__(cls,func,types,args=(),kwargs=None)
keras.src.backend.torch.core.Variable._convert_to_tensor(self,value,dtype=None)
keras.src.backend.torch.core.Variable._direct_assign(self,value)
keras.src.backend.torch.core.Variable._initialize(self,value)
keras.src.backend.torch.core.Variable.trainable(self)
keras.src.backend.torch.core.Variable.trainable(self,value)
keras.src.backend.torch.core.Variable.value(self)
keras.src.backend.torch.core._parse_device_input(device_name)
keras.src.backend.torch.core.cast(x,dtype)
keras.src.backend.torch.core.compute_output_spec(fn,*args,**kwargs)
keras.src.backend.torch.core.cond(pred,true_fn,false_fn)
keras.src.backend.torch.core.convert_to_numpy(x)
keras.src.backend.torch.core.convert_to_tensor(x,dtype=None,sparse=None)
keras.src.backend.torch.core.custom_gradient(fun)
keras.src.backend.torch.core.device_scope(device_name)
keras.src.backend.torch.core.fori_loop(lower,upper,body_fun,init_val)
keras.src.backend.torch.core.get_device()
keras.src.backend.torch.core.is_tensor(x)
keras.src.backend.torch.core.scatter(indices,values,shape)
keras.src.backend.torch.core.scatter_update(inputs,indices,updates)
keras.src.backend.torch.core.shape(x)
keras.src.backend.torch.core.slice(inputs,start_indices,shape)
keras.src.backend.torch.core.slice_update(inputs,start_indices,updates)
keras.src.backend.torch.core.stop_gradient(variable)
keras.src.backend.torch.core.to_torch_dtype(dtype)
keras.src.backend.torch.core.unstack(x,num=None,axis=0)
keras.src.backend.torch.core.vectorized_map(function,elements)
keras.src.backend.torch.core.while_loop(cond,body,loop_vars,maximum_iterations=None)
keras.src.backend.vectorized_map(function,elements)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/numpy.py----------------------------------------
A:keras.src.backend.torch.numpy.x1->convert_to_tensor(x1)
A:keras.src.backend.torch.numpy.x2->convert_to_tensor(x2)
A:keras.src.backend.torch.numpy.dtypes_to_resolve->list(set((standardize_dtype(x.dtype) for x in operands)))
A:keras.src.backend.torch.numpy.compute_dtype->keras.src.backend.common.dtypes.result_type(x.dtype, 'float32')
A:keras.src.backend.torch.numpy.x1_dtype->standardize_dtype(x1.dtype)
A:keras.src.backend.torch.numpy.x2_dtype->standardize_dtype(x2.dtype)
A:keras.src.backend.torch.numpy.result_dtype->keras.src.backend.common.dtypes.result_type(x.dtype, float)
A:keras.src.backend.torch.numpy.x->convert_to_tensor(x)
A:keras.src.backend.torch.numpy.axis->canonicalize_axis(axis, x.ndim)
A:keras.src.backend.torch.numpy.ori_dtype->standardize_dtype(x.dtype)
A:keras.src.backend.torch.numpy.result->amin(x, axis=axis, keepdims=keepdims)
A:keras.src.backend.torch.numpy.initial->convert_to_tensor(initial)
A:keras.src.backend.torch.numpy.dtype->keras.src.backend.common.dtypes.result_type(getattr(x1, 'dtype', type(x1)), getattr(x2, 'dtype', type(x2)))
A:keras.src.backend.torch.numpy.weights->convert_to_tensor(weights)
A:keras.src.backend.torch.numpy.bincounts->list(map(bincount_fn, zip(x, weights)))
A:keras.src.backend.torch.numpy.x_min->convert_to_tensor(x_min)
A:keras.src.backend.torch.numpy.x_max->convert_to_tensor(x_max)
A:keras.src.backend.torch.numpy.a->convert_to_tensor(a)
A:keras.src.backend.torch.numpy.bins->convert_to_tensor(bins)
A:keras.src.backend.torch.numpy.y->expand_dims(y, axis=i)
A:keras.src.backend.torch.numpy.fill_value->convert_to_tensor(fill_value, dtype=dtype)
A:keras.src.backend.torch.numpy.start->convert_to_tensor(start, dtype=dtype)
A:keras.src.backend.torch.numpy.stop->convert_to_tensor(stop, dtype=dtype)
A:keras.src.backend.torch.numpy.steps->steps.unsqueeze(-1).unsqueeze(-1)
A:keras.src.backend.torch.numpy.linspace->torch.linspace(start=start, end=stop, steps=num, dtype=dtype, device=get_device())
A:keras.src.backend.torch.numpy.logspace->cast(torch.logspace(start=start, end=stop, steps=num, base=base, dtype=compute_dtype, device=get_device()), dtype)
A:keras.src.backend.torch.numpy.other_dims->sorted(set(range(x.ndim)).difference(axis))
A:keras.src.backend.torch.numpy.x_permed->torch.permute(x, dims=perm)
A:keras.src.backend.torch.numpy.x_shape->convert_to_tensor(tuple(x.shape))
A:keras.src.backend.torch.numpy.q->cast(q, x.dtype)
A:keras.src.backend.torch.numpy.outputs->repeat(x, repeats, axis=axis)
A:keras.src.backend.torch.numpy.repeats->tuple(repeats.int().numpy())
A:keras.src.backend.torch.numpy.indices_or_sections->convert_to_tensor(indices_or_sections)
A:keras.src.backend.torch.numpy.chunk_sizes->chunk_sizes.tolist().tolist()
A:keras.src.backend.torch.numpy.out->torch.index_select(x, dim=axis, index=indices).squeeze(axis)
A:keras.src.backend.torch.numpy.indices->convert_to_tensor(indices).long()
A:keras.src.backend.torch.numpy.condition->convert_to_tensor(condition, dtype=bool)
A:keras.src.backend.torch.numpy.diag_length->builtins.max(N, M)
A:keras.src.backend.torch.numpy.diag->torch.ones(diag_length, dtype=dtype, device=get_device())
keras.src.backend.torch.abs(x)
keras.src.backend.torch.absolute(x)
keras.src.backend.torch.add(x1,x2)
keras.src.backend.torch.all(x,axis=None,keepdims=False)
keras.src.backend.torch.amax(x,axis=None,keepdims=False)
keras.src.backend.torch.amin(x,axis=None,keepdims=False)
keras.src.backend.torch.any(x,axis=None,keepdims=False)
keras.src.backend.torch.append(x1,x2,axis=None)
keras.src.backend.torch.arange(start,stop=None,step=1,dtype=None)
keras.src.backend.torch.arccos(x)
keras.src.backend.torch.arccosh(x)
keras.src.backend.torch.arcsin(x)
keras.src.backend.torch.arcsinh(x)
keras.src.backend.torch.arctan(x)
keras.src.backend.torch.arctan2(x1,x2)
keras.src.backend.torch.arctanh(x)
keras.src.backend.torch.argmax(x,axis=None)
keras.src.backend.torch.argmin(x,axis=None)
keras.src.backend.torch.argsort(x,axis=-1)
keras.src.backend.torch.array(x,dtype=None)
keras.src.backend.torch.average(x,axis=None,weights=None)
keras.src.backend.torch.bincount(x,weights=None,minlength=0)
keras.src.backend.torch.broadcast_to(x,shape)
keras.src.backend.torch.ceil(x)
keras.src.backend.torch.clip(x,x_min,x_max)
keras.src.backend.torch.concatenate(xs,axis=0)
keras.src.backend.torch.conj(x)
keras.src.backend.torch.conjugate(x)
keras.src.backend.torch.copy(x)
keras.src.backend.torch.cos(x)
keras.src.backend.torch.cosh(x)
keras.src.backend.torch.count_nonzero(x,axis=None)
keras.src.backend.torch.cross(x1,x2,axisa=-1,axisb=-1,axisc=-1,axis=-1)
keras.src.backend.torch.cumprod(x,axis=None,dtype=None)
keras.src.backend.torch.cumsum(x,axis=None,dtype=None)
keras.src.backend.torch.diag(x,k=0)
keras.src.backend.torch.diagonal(x,offset=0,axis1=0,axis2=1)
keras.src.backend.torch.diff(a,n=1,axis=-1)
keras.src.backend.torch.digitize(x,bins)
keras.src.backend.torch.divide(x1,x2)
keras.src.backend.torch.divide_no_nan(x1,x2)
keras.src.backend.torch.dot(x,y)
keras.src.backend.torch.einsum(subscripts,*operands,**kwargs)
keras.src.backend.torch.empty(shape,dtype=None)
keras.src.backend.torch.equal(x1,x2)
keras.src.backend.torch.exp(x)
keras.src.backend.torch.expand_dims(x,axis)
keras.src.backend.torch.expm1(x)
keras.src.backend.torch.eye(N,M=None,k=None,dtype=None)
keras.src.backend.torch.flip(x,axis=None)
keras.src.backend.torch.floor(x)
keras.src.backend.torch.floor_divide(x1,x2)
keras.src.backend.torch.full(shape,fill_value,dtype=None)
keras.src.backend.torch.full_like(x,fill_value,dtype=None)
keras.src.backend.torch.greater(x1,x2)
keras.src.backend.torch.greater_equal(x1,x2)
keras.src.backend.torch.hstack(xs)
keras.src.backend.torch.identity(n,dtype=None)
keras.src.backend.torch.imag(x)
keras.src.backend.torch.isclose(x1,x2)
keras.src.backend.torch.isfinite(x)
keras.src.backend.torch.isinf(x)
keras.src.backend.torch.isnan(x)
keras.src.backend.torch.less(x1,x2)
keras.src.backend.torch.less_equal(x1,x2)
keras.src.backend.torch.linspace(start,stop,num=50,endpoint=True,retstep=False,dtype=None,axis=0)
keras.src.backend.torch.log(x)
keras.src.backend.torch.log10(x)
keras.src.backend.torch.log1p(x)
keras.src.backend.torch.log2(x)
keras.src.backend.torch.logaddexp(x1,x2)
keras.src.backend.torch.logical_and(x1,x2)
keras.src.backend.torch.logical_not(x)
keras.src.backend.torch.logical_or(x1,x2)
keras.src.backend.torch.logical_xor(x1,x2)
keras.src.backend.torch.logspace(start,stop,num=50,endpoint=True,base=10,dtype=None,axis=0)
keras.src.backend.torch.matmul(x1,x2)
keras.src.backend.torch.max(x,axis=None,keepdims=False,initial=None)
keras.src.backend.torch.maximum(x1,x2)
keras.src.backend.torch.mean(x,axis=None,keepdims=False)
keras.src.backend.torch.median(x,axis=None,keepdims=False)
keras.src.backend.torch.meshgrid(*x,indexing='xy')
keras.src.backend.torch.min(x,axis=None,keepdims=False,initial=None)
keras.src.backend.torch.minimum(x1,x2)
keras.src.backend.torch.mod(x1,x2)
keras.src.backend.torch.moveaxis(x,source,destination)
keras.src.backend.torch.multiply(x1,x2)
keras.src.backend.torch.nan_to_num(x)
keras.src.backend.torch.ndim(x)
keras.src.backend.torch.negative(x)
keras.src.backend.torch.nonzero(x)
keras.src.backend.torch.not_equal(x1,x2)
keras.src.backend.torch.numpy.abs(x)
keras.src.backend.torch.numpy.absolute(x)
keras.src.backend.torch.numpy.add(x1,x2)
keras.src.backend.torch.numpy.all(x,axis=None,keepdims=False)
keras.src.backend.torch.numpy.amax(x,axis=None,keepdims=False)
keras.src.backend.torch.numpy.amin(x,axis=None,keepdims=False)
keras.src.backend.torch.numpy.any(x,axis=None,keepdims=False)
keras.src.backend.torch.numpy.append(x1,x2,axis=None)
keras.src.backend.torch.numpy.arange(start,stop=None,step=1,dtype=None)
keras.src.backend.torch.numpy.arccos(x)
keras.src.backend.torch.numpy.arccosh(x)
keras.src.backend.torch.numpy.arcsin(x)
keras.src.backend.torch.numpy.arcsinh(x)
keras.src.backend.torch.numpy.arctan(x)
keras.src.backend.torch.numpy.arctan2(x1,x2)
keras.src.backend.torch.numpy.arctanh(x)
keras.src.backend.torch.numpy.argmax(x,axis=None)
keras.src.backend.torch.numpy.argmin(x,axis=None)
keras.src.backend.torch.numpy.argsort(x,axis=-1)
keras.src.backend.torch.numpy.array(x,dtype=None)
keras.src.backend.torch.numpy.average(x,axis=None,weights=None)
keras.src.backend.torch.numpy.bincount(x,weights=None,minlength=0)
keras.src.backend.torch.numpy.broadcast_to(x,shape)
keras.src.backend.torch.numpy.ceil(x)
keras.src.backend.torch.numpy.clip(x,x_min,x_max)
keras.src.backend.torch.numpy.concatenate(xs,axis=0)
keras.src.backend.torch.numpy.conj(x)
keras.src.backend.torch.numpy.conjugate(x)
keras.src.backend.torch.numpy.copy(x)
keras.src.backend.torch.numpy.cos(x)
keras.src.backend.torch.numpy.cosh(x)
keras.src.backend.torch.numpy.count_nonzero(x,axis=None)
keras.src.backend.torch.numpy.cross(x1,x2,axisa=-1,axisb=-1,axisc=-1,axis=-1)
keras.src.backend.torch.numpy.cumprod(x,axis=None,dtype=None)
keras.src.backend.torch.numpy.cumsum(x,axis=None,dtype=None)
keras.src.backend.torch.numpy.diag(x,k=0)
keras.src.backend.torch.numpy.diagonal(x,offset=0,axis1=0,axis2=1)
keras.src.backend.torch.numpy.diff(a,n=1,axis=-1)
keras.src.backend.torch.numpy.digitize(x,bins)
keras.src.backend.torch.numpy.divide(x1,x2)
keras.src.backend.torch.numpy.divide_no_nan(x1,x2)
keras.src.backend.torch.numpy.dot(x,y)
keras.src.backend.torch.numpy.einsum(subscripts,*operands,**kwargs)
keras.src.backend.torch.numpy.empty(shape,dtype=None)
keras.src.backend.torch.numpy.equal(x1,x2)
keras.src.backend.torch.numpy.exp(x)
keras.src.backend.torch.numpy.expand_dims(x,axis)
keras.src.backend.torch.numpy.expm1(x)
keras.src.backend.torch.numpy.eye(N,M=None,k=None,dtype=None)
keras.src.backend.torch.numpy.flip(x,axis=None)
keras.src.backend.torch.numpy.floor(x)
keras.src.backend.torch.numpy.floor_divide(x1,x2)
keras.src.backend.torch.numpy.full(shape,fill_value,dtype=None)
keras.src.backend.torch.numpy.full_like(x,fill_value,dtype=None)
keras.src.backend.torch.numpy.greater(x1,x2)
keras.src.backend.torch.numpy.greater_equal(x1,x2)
keras.src.backend.torch.numpy.hstack(xs)
keras.src.backend.torch.numpy.identity(n,dtype=None)
keras.src.backend.torch.numpy.imag(x)
keras.src.backend.torch.numpy.isclose(x1,x2)
keras.src.backend.torch.numpy.isfinite(x)
keras.src.backend.torch.numpy.isinf(x)
keras.src.backend.torch.numpy.isnan(x)
keras.src.backend.torch.numpy.less(x1,x2)
keras.src.backend.torch.numpy.less_equal(x1,x2)
keras.src.backend.torch.numpy.linspace(start,stop,num=50,endpoint=True,retstep=False,dtype=None,axis=0)
keras.src.backend.torch.numpy.log(x)
keras.src.backend.torch.numpy.log10(x)
keras.src.backend.torch.numpy.log1p(x)
keras.src.backend.torch.numpy.log2(x)
keras.src.backend.torch.numpy.logaddexp(x1,x2)
keras.src.backend.torch.numpy.logical_and(x1,x2)
keras.src.backend.torch.numpy.logical_not(x)
keras.src.backend.torch.numpy.logical_or(x1,x2)
keras.src.backend.torch.numpy.logical_xor(x1,x2)
keras.src.backend.torch.numpy.logspace(start,stop,num=50,endpoint=True,base=10,dtype=None,axis=0)
keras.src.backend.torch.numpy.matmul(x1,x2)
keras.src.backend.torch.numpy.max(x,axis=None,keepdims=False,initial=None)
keras.src.backend.torch.numpy.maximum(x1,x2)
keras.src.backend.torch.numpy.mean(x,axis=None,keepdims=False)
keras.src.backend.torch.numpy.median(x,axis=None,keepdims=False)
keras.src.backend.torch.numpy.meshgrid(*x,indexing='xy')
keras.src.backend.torch.numpy.min(x,axis=None,keepdims=False,initial=None)
keras.src.backend.torch.numpy.minimum(x1,x2)
keras.src.backend.torch.numpy.mod(x1,x2)
keras.src.backend.torch.numpy.moveaxis(x,source,destination)
keras.src.backend.torch.numpy.multiply(x1,x2)
keras.src.backend.torch.numpy.nan_to_num(x)
keras.src.backend.torch.numpy.ndim(x)
keras.src.backend.torch.numpy.negative(x)
keras.src.backend.torch.numpy.nonzero(x)
keras.src.backend.torch.numpy.not_equal(x1,x2)
keras.src.backend.torch.numpy.ones(shape,dtype=None)
keras.src.backend.torch.numpy.ones_like(x,dtype=None)
keras.src.backend.torch.numpy.outer(x1,x2)
keras.src.backend.torch.numpy.pad(x,pad_width,mode='constant',constant_values=None)
keras.src.backend.torch.numpy.power(x1,x2)
keras.src.backend.torch.numpy.prod(x,axis=None,keepdims=False,dtype=None)
keras.src.backend.torch.numpy.quantile(x,q,axis=None,method='linear',keepdims=False)
keras.src.backend.torch.numpy.ravel(x)
keras.src.backend.torch.numpy.real(x)
keras.src.backend.torch.numpy.reciprocal(x)
keras.src.backend.torch.numpy.repeat(x,repeats,axis=None)
keras.src.backend.torch.numpy.reshape(x,newshape)
keras.src.backend.torch.numpy.roll(x,shift,axis=None)
keras.src.backend.torch.numpy.round(x,decimals=0)
keras.src.backend.torch.numpy.sign(x)
keras.src.backend.torch.numpy.sin(x)
keras.src.backend.torch.numpy.sinh(x)
keras.src.backend.torch.numpy.size(x)
keras.src.backend.torch.numpy.sort(x,axis=-1)
keras.src.backend.torch.numpy.split(x,indices_or_sections,axis=0)
keras.src.backend.torch.numpy.sqrt(x)
keras.src.backend.torch.numpy.square(x)
keras.src.backend.torch.numpy.squeeze(x,axis=None)
keras.src.backend.torch.numpy.stack(x,axis=0)
keras.src.backend.torch.numpy.std(x,axis=None,keepdims=False)
keras.src.backend.torch.numpy.subtract(x1,x2)
keras.src.backend.torch.numpy.sum(x,axis=None,keepdims=False)
keras.src.backend.torch.numpy.swapaxes(x,axis1,axis2)
keras.src.backend.torch.numpy.take(x,indices,axis=None)
keras.src.backend.torch.numpy.take_along_axis(x,indices,axis=None)
keras.src.backend.torch.numpy.tan(x)
keras.src.backend.torch.numpy.tanh(x)
keras.src.backend.torch.numpy.tensordot(x1,x2,axes=2)
keras.src.backend.torch.numpy.tile(x,repeats)
keras.src.backend.torch.numpy.trace(x,offset=None,axis1=None,axis2=None)
keras.src.backend.torch.numpy.transpose(x,axes=None)
keras.src.backend.torch.numpy.tri(N,M=None,k=0,dtype=None)
keras.src.backend.torch.numpy.tril(x,k=0)
keras.src.backend.torch.numpy.triu(x,k=0)
keras.src.backend.torch.numpy.true_divide(x1,x2)
keras.src.backend.torch.numpy.var(x,axis=None,keepdims=False)
keras.src.backend.torch.numpy.vdot(x1,x2)
keras.src.backend.torch.numpy.vstack(xs)
keras.src.backend.torch.numpy.where(condition,x1,x2)
keras.src.backend.torch.numpy.zeros(shape,dtype=None)
keras.src.backend.torch.numpy.zeros_like(x,dtype=None)
keras.src.backend.torch.ones(shape,dtype=None)
keras.src.backend.torch.ones_like(x,dtype=None)
keras.src.backend.torch.outer(x1,x2)
keras.src.backend.torch.pad(x,pad_width,mode='constant',constant_values=None)
keras.src.backend.torch.power(x1,x2)
keras.src.backend.torch.prod(x,axis=None,keepdims=False,dtype=None)
keras.src.backend.torch.quantile(x,q,axis=None,method='linear',keepdims=False)
keras.src.backend.torch.ravel(x)
keras.src.backend.torch.real(x)
keras.src.backend.torch.reciprocal(x)
keras.src.backend.torch.repeat(x,repeats,axis=None)
keras.src.backend.torch.reshape(x,newshape)
keras.src.backend.torch.roll(x,shift,axis=None)
keras.src.backend.torch.round(x,decimals=0)
keras.src.backend.torch.sign(x)
keras.src.backend.torch.sin(x)
keras.src.backend.torch.sinh(x)
keras.src.backend.torch.size(x)
keras.src.backend.torch.sort(x,axis=-1)
keras.src.backend.torch.split(x,indices_or_sections,axis=0)
keras.src.backend.torch.sqrt(x)
keras.src.backend.torch.square(x)
keras.src.backend.torch.squeeze(x,axis=None)
keras.src.backend.torch.stack(x,axis=0)
keras.src.backend.torch.std(x,axis=None,keepdims=False)
keras.src.backend.torch.subtract(x1,x2)
keras.src.backend.torch.sum(x,axis=None,keepdims=False)
keras.src.backend.torch.swapaxes(x,axis1,axis2)
keras.src.backend.torch.take(x,indices,axis=None)
keras.src.backend.torch.take_along_axis(x,indices,axis=None)
keras.src.backend.torch.tan(x)
keras.src.backend.torch.tanh(x)
keras.src.backend.torch.tensordot(x1,x2,axes=2)
keras.src.backend.torch.tile(x,repeats)
keras.src.backend.torch.trace(x,offset=None,axis1=None,axis2=None)
keras.src.backend.torch.transpose(x,axes=None)
keras.src.backend.torch.tri(N,M=None,k=0,dtype=None)
keras.src.backend.torch.tril(x,k=0)
keras.src.backend.torch.triu(x,k=0)
keras.src.backend.torch.true_divide(x1,x2)
keras.src.backend.torch.var(x,axis=None,keepdims=False)
keras.src.backend.torch.vdot(x1,x2)
keras.src.backend.torch.vstack(xs)
keras.src.backend.torch.where(condition,x1,x2)
keras.src.backend.torch.zeros(shape,dtype=None)
keras.src.backend.torch.zeros_like(x,dtype=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/trainer.py----------------------------------------
A:keras.src.backend.torch.trainer.(x, y, sample_weight)->keras.src.trainers.data_adapters.data_adapter_utils.unpack_x_y_sample_weight(data)
A:keras.src.backend.torch.trainer.y_pred->self(x)
A:keras.src.backend.torch.trainer.loss->self.compute_loss(x=x, y=y, y_pred=y_pred, sample_weight=sample_weight)
A:keras.src.backend.torch.trainer.(x, _, _)->keras.src.trainers.data_adapters.data_adapter_utils.unpack_x_y_sample_weight(data)
A:keras.src.backend.torch.trainer.self.train_function->torch.compile(one_step_on_data)
A:keras.src.backend.torch.trainer.self.test_function->torch.compile(one_step_on_data)
A:keras.src.backend.torch.trainer.self.predict_function->torch.compile(one_step_on_data)
A:keras.src.backend.torch.trainer.((x, y, sample_weight), validation_data)->keras.src.trainers.data_adapters.array_slicing.train_validation_split((x, y, sample_weight), validation_split=validation_split)
A:keras.src.backend.torch.trainer.(val_x, val_y, val_sample_weight)->keras.src.trainers.data_adapters.data_adapter_utils.unpack_x_y_sample_weight(validation_data)
A:keras.src.backend.torch.trainer.epoch_iterator->TorchEpochIterator(x=x, batch_size=batch_size, steps_per_epoch=steps, shuffle=False, steps_per_execution=self.steps_per_execution)
A:keras.src.backend.torch.trainer.callbacks->keras.src.callbacks.CallbackList(callbacks, add_history=True, add_progbar=verbose != 0, verbose=verbose, epochs=1, steps=epoch_iterator.num_batches, model=self)
A:keras.src.backend.torch.trainer.logs->keras.src.utils.tree.map_structure(lambda x: np.array(x), logs)
A:keras.src.backend.torch.trainer.epoch_logs->self.get_metrics_result()
A:keras.src.backend.torch.trainer.self._eval_epoch_iterator->TorchEpochIterator(x=val_x, y=val_y, sample_weight=val_sample_weight, batch_size=validation_batch_size or batch_size, steps_per_execution=self.steps_per_execution, steps_per_epoch=validation_steps, shuffle=False)
A:keras.src.backend.torch.trainer.val_logs->self.evaluate(x=val_x, y=val_y, sample_weight=val_sample_weight, batch_size=validation_batch_size or batch_size, steps=validation_steps, callbacks=callbacks, return_dict=True, _use_cached_eval_dataset=True)
A:keras.src.backend.torch.trainer.use_cached_eval_dataset->kwargs.pop('_use_cached_eval_dataset', False)
A:keras.src.backend.torch.trainer.outputs->keras.src.utils.tree.map_structure(backend.convert_to_numpy, outputs)
A:keras.src.backend.torch.trainer.batch_outputs->keras.src.utils.tree.map_structure(backend.convert_to_numpy, batch_outputs)
A:keras.src.backend.torch.trainer.sample_weight->keras.src.trainers.data_adapters.data_adapter_utils.class_weight_to_sample_weights(y, class_weight)
keras.src.backend.torch.trainer.TorchEpochIterator(EpochIterator)
keras.src.backend.torch.trainer.TorchEpochIterator._get_iterator(self)
keras.src.backend.torch.trainer.TorchTrainer(self)
keras.src.backend.torch.trainer.TorchTrainer.__init__(self)
keras.src.backend.torch.trainer.TorchTrainer._should_torch_compile(self)
keras.src.backend.torch.trainer.TorchTrainer.evaluate(self,x=None,y=None,batch_size=None,verbose='auto',sample_weight=None,steps=None,callbacks=None,return_dict=False,**kwargs)
keras.src.backend.torch.trainer.TorchTrainer.fit(self,x=None,y=None,batch_size=None,epochs=1,verbose='auto',callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None,validation_batch_size=None,validation_freq=1)
keras.src.backend.torch.trainer.TorchTrainer.make_predict_function(self,force=False)
keras.src.backend.torch.trainer.TorchTrainer.make_test_function(self,force=False)
keras.src.backend.torch.trainer.TorchTrainer.make_train_function(self,force=False)
keras.src.backend.torch.trainer.TorchTrainer.predict(self,x,batch_size=None,verbose='auto',steps=None,callbacks=None)
keras.src.backend.torch.trainer.TorchTrainer.predict_on_batch(self,x)
keras.src.backend.torch.trainer.TorchTrainer.predict_step(self,data)
keras.src.backend.torch.trainer.TorchTrainer.test_on_batch(self,x,y=None,sample_weight=None,return_dict=False)
keras.src.backend.torch.trainer.TorchTrainer.test_step(self,data)
keras.src.backend.torch.trainer.TorchTrainer.train_on_batch(self,x,y=None,sample_weight=None,class_weight=None,return_dict=False)
keras.src.backend.torch.trainer.TorchTrainer.train_step(self,data)
keras.src.backend.trainer.TorchEpochIterator(EpochIterator)
keras.src.backend.trainer.TorchEpochIterator._get_iterator(self)
keras.src.backend.trainer.TorchTrainer(self)
keras.src.backend.trainer.TorchTrainer._should_torch_compile(self)
keras.src.backend.trainer.TorchTrainer.evaluate(self,x=None,y=None,batch_size=None,verbose='auto',sample_weight=None,steps=None,callbacks=None,return_dict=False,**kwargs)
keras.src.backend.trainer.TorchTrainer.fit(self,x=None,y=None,batch_size=None,epochs=1,verbose='auto',callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None,validation_batch_size=None,validation_freq=1)
keras.src.backend.trainer.TorchTrainer.make_predict_function(self,force=False)
keras.src.backend.trainer.TorchTrainer.make_test_function(self,force=False)
keras.src.backend.trainer.TorchTrainer.make_train_function(self,force=False)
keras.src.backend.trainer.TorchTrainer.predict(self,x,batch_size=None,verbose='auto',steps=None,callbacks=None)
keras.src.backend.trainer.TorchTrainer.predict_on_batch(self,x)
keras.src.backend.trainer.TorchTrainer.predict_step(self,data)
keras.src.backend.trainer.TorchTrainer.test_on_batch(self,x,y=None,sample_weight=None,return_dict=False)
keras.src.backend.trainer.TorchTrainer.test_step(self,data)
keras.src.backend.trainer.TorchTrainer.train_on_batch(self,x,y=None,sample_weight=None,class_weight=None,return_dict=False)
keras.src.backend.trainer.TorchTrainer.train_step(self,data)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/linalg.py----------------------------------------
A:keras.src.backend.torch.linalg.(LU, pivots)->torch.linalg.lu_factor(x)
A:keras.src.backend.torch.linalg.x->cast(x, dtype)
A:keras.src.backend.torch.linalg.dtype->keras.src.backend.common.dtypes.result_type(x.dtype, float)
A:keras.src.backend.torch.linalg.b->torch.unsqueeze(b, axis=-1)
keras.src.backend.linalg.cholesky(x)
keras.src.backend.linalg.det(x)
keras.src.backend.linalg.eig(x)
keras.src.backend.linalg.inv(x)
keras.src.backend.linalg.lu_factor(x)
keras.src.backend.linalg.norm(x,ord=None,axis=None,keepdims=False)
keras.src.backend.linalg.qr(x,mode='reduced')
keras.src.backend.linalg.solve(a,b)
keras.src.backend.linalg.solve_triangular(a,b,lower=False)
keras.src.backend.linalg.svd(x,full_matrices=True,compute_uv=True)
keras.src.backend.torch.linalg.cholesky(x)
keras.src.backend.torch.linalg.det(x)
keras.src.backend.torch.linalg.eig(x)
keras.src.backend.torch.linalg.inv(x)
keras.src.backend.torch.linalg.lu_factor(x)
keras.src.backend.torch.linalg.norm(x,ord=None,axis=None,keepdims=False)
keras.src.backend.torch.linalg.qr(x,mode='reduced')
keras.src.backend.torch.linalg.solve(a,b)
keras.src.backend.torch.linalg.solve_triangular(a,b,lower=False)
keras.src.backend.torch.linalg.svd(x,full_matrices=True,compute_uv=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/random.py----------------------------------------
A:keras.src.backend.torch.random.(first_seed, second_seed)->draw_seed(seed)
A:keras.src.backend.torch.random.device->get_device()
A:keras.src.backend.torch.random.generator->torch_seed_generator(seed)
A:keras.src.backend.torch.random.dtype->to_torch_dtype(dtype)
A:keras.src.backend.torch.random.logits->convert_to_tensor(logits)
A:keras.src.backend.torch.random.probs->torch.softmax(logits, dim=-1)
A:keras.src.backend.torch.random.rand_tensor->torch.rand(size=shape, generator=generator, dtype=dtype, device=get_device())
A:keras.src.backend.torch.random.x->convert_to_tensor(x)
A:keras.src.backend.torch.random.trunc_x->torch.empty(shape, device=get_device())
A:keras.src.backend.torch.random.noise_shape->_get_concrete_noise_shape(inputs, noise_shape)
A:keras.src.backend.torch.random.keep_prob_matrix->torch.full(noise_shape, keep_prob, device=get_device())
A:keras.src.backend.torch.random.mask->torch.broadcast_to(mask, inputs.shape)
A:keras.src.backend.torch.random.row_perm->row_perm.repeat(*[1 for _ in range(axis + 1)], *x.shape[axis + 1:]).repeat(*[1 for _ in range(axis + 1)], *x.shape[axis + 1:])
A:keras.src.backend.torch.random.alpha->torch.broadcast_to(convert_to_tensor(alpha), shape)
A:keras.src.backend.torch.random.beta->torch.broadcast_to(convert_to_tensor(beta), shape)
A:keras.src.backend.torch.random.prev_rng_state->torch.random.get_rng_state()
A:keras.src.backend.torch.random.gamma_distribution->torch.distributions.gamma.Gamma(alpha, beta)
A:keras.src.backend.torch.random.sample->torch.distributions.beta.Beta(concentration1=alpha, concentration0=beta).sample().type(dtype)
A:keras.src.backend.torch.random.counts->torch.broadcast_to(convert_to_tensor(counts), shape)
A:keras.src.backend.torch.random.probabilities->torch.broadcast_to(convert_to_tensor(probabilities), shape)
A:keras.src.backend.torch.random.binomial_distribution->torch.distributions.binomial.Binomial(total_count=counts, probs=probabilities)
A:keras.src.backend.torch.random.beta_distribution->torch.distributions.beta.Beta(concentration1=alpha, concentration0=beta)
keras.src.backend.random._get_concrete_noise_shape(inputs,noise_shape)
keras.src.backend.random.beta(shape,alpha,beta,dtype=None,seed=None)
keras.src.backend.random.binomial(shape,counts,probabilities,dtype=None,seed=None)
keras.src.backend.random.categorical(logits,num_samples,dtype='int32',seed=None)
keras.src.backend.random.dropout(inputs,rate,noise_shape=None,seed=None)
keras.src.backend.random.gamma(shape,alpha,dtype=None,seed=None)
keras.src.backend.random.normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.src.backend.random.randint(shape,minval,maxval,dtype='int32',seed=None)
keras.src.backend.random.shuffle(x,axis=0,seed=None)
keras.src.backend.random.torch_seed_generator(seed)
keras.src.backend.random.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.src.backend.random.uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)
keras.src.backend.torch.random._get_concrete_noise_shape(inputs,noise_shape)
keras.src.backend.torch.random.beta(shape,alpha,beta,dtype=None,seed=None)
keras.src.backend.torch.random.binomial(shape,counts,probabilities,dtype=None,seed=None)
keras.src.backend.torch.random.categorical(logits,num_samples,dtype='int32',seed=None)
keras.src.backend.torch.random.dropout(inputs,rate,noise_shape=None,seed=None)
keras.src.backend.torch.random.gamma(shape,alpha,dtype=None,seed=None)
keras.src.backend.torch.random.normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.src.backend.torch.random.randint(shape,minval,maxval,dtype='int32',seed=None)
keras.src.backend.torch.random.shuffle(x,axis=0,seed=None)
keras.src.backend.torch.random.torch_seed_generator(seed)
keras.src.backend.torch.random.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.src.backend.torch.random.uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/layer.py----------------------------------------
A:keras.src.backend.torch.layer.self.torch_params->torch.nn.ParameterList([variable.value for variable in self.variables])
A:keras.src.backend.torch.layer.value->TorchModuleWrapper(value)
keras.src.backend.layer.TorchLayer(torch.nn.Module)
keras.src.backend.layer.TorchLayer._post_build(self)
keras.src.backend.layer.TorchLayer._setattr_hook(self,name,value)
keras.src.backend.layer.TorchLayer._track_variables(self)
keras.src.backend.layer.TorchLayer.forward(self,*args,**kwargs)
keras.src.backend.layer.TorchLayer.parameters(self,recurse=True)
keras.src.backend.torch.layer.TorchLayer(torch.nn.Module)
keras.src.backend.torch.layer.TorchLayer._post_build(self)
keras.src.backend.torch.layer.TorchLayer._setattr_hook(self,name,value)
keras.src.backend.torch.layer.TorchLayer._track_variables(self)
keras.src.backend.torch.layer.TorchLayer.forward(self,*args,**kwargs)
keras.src.backend.torch.layer.TorchLayer.parameters(self,recurse=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/optimizers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/optimizers/torch_adamw.py----------------------------------------
keras.src.backend.optimizers.torch_adamw.AdamW(torch_adam.Adam,optimizers.AdamW)
keras.src.backend.torch.optimizers.torch_adamw.AdamW(torch_adam.Adam,optimizers.AdamW)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/optimizers/torch_nadam.py----------------------------------------
A:keras.src.backend.torch.optimizers.torch_nadam.lr->keras.src.ops.cast(learning_rate, dtype)
A:keras.src.backend.torch.optimizers.torch_nadam.local_step->keras.src.ops.cast(self.iterations + 1, dtype)
A:keras.src.backend.torch.optimizers.torch_nadam.next_step->keras.src.ops.cast(self.iterations + 2, dtype)
A:keras.src.backend.torch.optimizers.torch_nadam.decay->keras.src.ops.cast(0.96, dtype)
A:keras.src.backend.torch.optimizers.torch_nadam.beta_1->keras.src.ops.cast(self.beta_1, dtype)
A:keras.src.backend.torch.optimizers.torch_nadam.beta_2->keras.src.ops.cast(self.beta_2, dtype)
A:keras.src.backend.torch.optimizers.torch_nadam.beta_2_power->keras.src.ops.power(beta_2, local_step)
A:keras.src.backend.torch.optimizers.torch_nadam.m_hat_list->torch._foreach_add(torch._foreach_div(torch._foreach_mul(m_list, u_t_1), 1 - core.convert_to_numpy(u_product_t_1)), torch._foreach_div(torch._foreach_mul(grads, 1 - u_t), 1 - core.convert_to_numpy(u_product_t)))
A:keras.src.backend.torch.optimizers.torch_nadam.v_hat_list->torch._foreach_div(v_list, 1 - beta_2_power)
keras.src.backend.optimizers.torch_nadam.Nadam(torch_parallel_optimizer.TorchParallelOptimizer,optimizers.Nadam)
keras.src.backend.optimizers.torch_nadam.Nadam._parallel_update_step(self,grads,variables,learning_rate)
keras.src.backend.torch.optimizers.torch_nadam.Nadam(torch_parallel_optimizer.TorchParallelOptimizer,optimizers.Nadam)
keras.src.backend.torch.optimizers.torch_nadam.Nadam._parallel_update_step(self,grads,variables,learning_rate)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/optimizers/torch_lion.py----------------------------------------
A:keras.src.backend.torch.optimizers.torch_lion.lr->keras.src.ops.cast(learning_rate, dtype)
A:keras.src.backend.torch.optimizers.torch_lion.c_t->torch._foreach_mul(m_list, self.beta_1)
keras.src.backend.optimizers.torch_lion.Lion(torch_parallel_optimizer.TorchParallelOptimizer,optimizers.Lion)
keras.src.backend.optimizers.torch_lion.Lion._parallel_update_step(self,grads,variables,learning_rate)
keras.src.backend.torch.optimizers.torch_lion.Lion(torch_parallel_optimizer.TorchParallelOptimizer,optimizers.Lion)
keras.src.backend.torch.optimizers.torch_lion.Lion._parallel_update_step(self,grads,variables,learning_rate)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/optimizers/torch_adam.py----------------------------------------
A:keras.src.backend.torch.optimizers.torch_adam.lr->keras.src.ops.cast(learning_rate, dtype)
A:keras.src.backend.torch.optimizers.torch_adam.local_step->keras.src.ops.cast(self.iterations + 1, dtype)
A:keras.src.backend.torch.optimizers.torch_adam.beta_1_power->keras.src.ops.power(ops.cast(self.beta_1, dtype), local_step)
A:keras.src.backend.torch.optimizers.torch_adam.beta_2_power->keras.src.ops.power(ops.cast(self.beta_2, dtype), local_step)
keras.src.backend.optimizers.torch_adam.Adam(torch_parallel_optimizer.TorchParallelOptimizer,optimizers.Adam)
keras.src.backend.optimizers.torch_adam.Adam._parallel_update_step(self,grads,variables,learning_rate)
keras.src.backend.torch.optimizers.torch_adam.Adam(torch_parallel_optimizer.TorchParallelOptimizer,optimizers.Adam)
keras.src.backend.torch.optimizers.torch_adam.Adam._parallel_update_step(self,grads,variables,learning_rate)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/optimizers/torch_adagrad.py----------------------------------------
A:keras.src.backend.torch.optimizers.torch_adagrad.lr->keras.src.ops.cast(learning_rate, dtype)
keras.src.backend.optimizers.torch_adagrad.Adagrad(torch_parallel_optimizer.TorchParallelOptimizer,optimizers.Adagrad)
keras.src.backend.optimizers.torch_adagrad.Adagrad._parallel_update_step(self,grads,variables,learning_rate)
keras.src.backend.torch.optimizers.torch_adagrad.Adagrad(torch_parallel_optimizer.TorchParallelOptimizer,optimizers.Adagrad)
keras.src.backend.torch.optimizers.torch_adagrad.Adagrad._parallel_update_step(self,grads,variables,learning_rate)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/optimizers/torch_sgd.py----------------------------------------
A:keras.src.backend.torch.optimizers.torch_sgd.bufs[i]->torch.clone(grads[i]).detach()
keras.src.backend.optimizers.torch_sgd.SGD(torch_parallel_optimizer.TorchParallelOptimizer,optimizers.SGD)
keras.src.backend.optimizers.torch_sgd.SGD._parallel_update_step(self,grads,variables,learning_rate)
keras.src.backend.torch.optimizers.torch_sgd.SGD(torch_parallel_optimizer.TorchParallelOptimizer,optimizers.SGD)
keras.src.backend.torch.optimizers.torch_sgd.SGD._parallel_update_step(self,grads,variables,learning_rate)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/optimizers/torch_rmsprop.py----------------------------------------
A:keras.src.backend.torch.optimizers.torch_rmsprop.lr->keras.src.ops.cast(learning_rate, dtype)
A:keras.src.backend.torch.optimizers.torch_rmsprop.denominators->torch._foreach_add(velocities, self.epsilon)
A:keras.src.backend.torch.optimizers.torch_rmsprop.increments->torch._foreach_div(torch._foreach_mul(grads, lr), denominators)
keras.src.backend.optimizers.torch_rmsprop.RMSprop(torch_parallel_optimizer.TorchParallelOptimizer,optimizers.RMSprop)
keras.src.backend.optimizers.torch_rmsprop.RMSprop._parallel_update_step(self,grads,variables,learning_rate)
keras.src.backend.torch.optimizers.torch_rmsprop.RMSprop(torch_parallel_optimizer.TorchParallelOptimizer,optimizers.RMSprop)
keras.src.backend.torch.optimizers.torch_rmsprop.RMSprop._parallel_update_step(self,grads,variables,learning_rate)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/optimizers/torch_adamax.py----------------------------------------
A:keras.src.backend.torch.optimizers.torch_adamax.lr->keras.src.ops.cast(learning_rate, dtype)
A:keras.src.backend.torch.optimizers.torch_adamax.local_step->keras.src.ops.cast(self.iterations + 1, dtype)
A:keras.src.backend.torch.optimizers.torch_adamax.beta_1_power->keras.src.ops.power(ops.cast(self.beta_1, dtype), local_step)
keras.src.backend.optimizers.torch_adamax.Adamax(torch_parallel_optimizer.TorchParallelOptimizer,optimizers.Adamax)
keras.src.backend.optimizers.torch_adamax.Adamax._parallel_update_step(self,grads,variables,learning_rate)
keras.src.backend.torch.optimizers.torch_adamax.Adamax(torch_parallel_optimizer.TorchParallelOptimizer,optimizers.Adamax)
keras.src.backend.torch.optimizers.torch_adamax.Adamax._parallel_update_step(self,grads,variables,learning_rate)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/optimizers/torch_parallel_optimizer.py----------------------------------------
keras.src.backend.optimizers.torch_parallel_optimizer.TorchParallelOptimizer(BaseOptimizer)
keras.src.backend.optimizers.torch_parallel_optimizer.TorchParallelOptimizer._backend_increment_gradient_accumulators(self,grads)
keras.src.backend.optimizers.torch_parallel_optimizer.TorchParallelOptimizer._backend_reset_gradient_accumulators(self)
keras.src.backend.optimizers.torch_parallel_optimizer.TorchParallelOptimizer._backend_update_step(self,grads,trainable_variables,learning_rate)
keras.src.backend.torch.optimizers.torch_parallel_optimizer.TorchParallelOptimizer(BaseOptimizer)
keras.src.backend.torch.optimizers.torch_parallel_optimizer.TorchParallelOptimizer._backend_increment_gradient_accumulators(self,grads)
keras.src.backend.torch.optimizers.torch_parallel_optimizer.TorchParallelOptimizer._backend_reset_gradient_accumulators(self)
keras.src.backend.torch.optimizers.torch_parallel_optimizer.TorchParallelOptimizer._backend_update_step(self,grads,trainable_variables,learning_rate)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/optimizers/torch_adadelta.py----------------------------------------
A:keras.src.backend.torch.optimizers.torch_adadelta.lr->keras.src.ops.cast(learning_rate, dtype)
A:keras.src.backend.torch.optimizers.torch_adadelta.delta_vars->torch._foreach_mul(torch._foreach_div(torch._foreach_mul(rms(accumulated_delta_vars), grads), rms(accumulated_grads)), -1)
keras.src.backend.optimizers.torch_adadelta.Adadelta(torch_parallel_optimizer.TorchParallelOptimizer,optimizers.Adadelta)
keras.src.backend.optimizers.torch_adadelta.Adadelta._parallel_update_step(self,grads,variables,learning_rate)
keras.src.backend.torch.optimizers.torch_adadelta.Adadelta(torch_parallel_optimizer.TorchParallelOptimizer,optimizers.Adadelta)
keras.src.backend.torch.optimizers.torch_adadelta.Adadelta._parallel_update_step(self,grads,variables,learning_rate)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/torch/optimizers/torch_optimizer.py----------------------------------------
keras.src.backend.optimizers.TorchOptimizer(cls,*args,**kwargs)
keras.src.backend.optimizers.TorchOptimizer._apply_weight_decay(self,variables)
keras.src.backend.torch.optimizers.torch_optimizer.TorchOptimizer(cls,*args,**kwargs)
keras.src.backend.torch.optimizers.torch_optimizer.TorchOptimizer.__new__(cls,*args,**kwargs)
keras.src.backend.torch.optimizers.torch_optimizer.TorchOptimizer._apply_weight_decay(self,variables)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/tensorflow/math.py----------------------------------------
A:keras.src.backend.tensorflow.math.(unique_segment_ids, _)->tensorflow.unique(segment_ids)
A:keras.src.backend.tensorflow.math.real->convert_to_tensor(real)
A:keras.src.backend.tensorflow.math.imag->convert_to_tensor(imag)
A:keras.src.backend.tensorflow.math.complex_input->_get_complex_tensor_from_tuple(x)
A:keras.src.backend.tensorflow.math.complex_output->tensorflow.signal.rfft(x, fft_length=fft_length)
A:keras.src.backend.tensorflow.math.x->tensorflow.expand_dims(x, axis[1])
A:keras.src.backend.tensorflow.math.win_array->tensorflow.pad(win_array, [[l_pad, r_pad]])
A:keras.src.backend.tensorflow.math.result->tensorflow.signal.stft(x, frame_length=sequence_length + l_pad + r_pad, frame_step=sequence_stride, fft_length=fft_length, window_fn=win)
A:keras.src.backend.tensorflow.math.win->tensorflow.signal.inverse_stft_window_fn(sequence_stride, lambda frame_step, dtype: win_array)
A:keras.src.backend.tensorflow.math.a->convert_to_tensor(a)
A:keras.src.backend.tensorflow.math.b->convert_to_tensor(b)
A:keras.src.backend.tensorflow.math.axis->tuple(range(ndim))
A:keras.src.backend.tensorflow.math.dtype->keras.src.backend.common.dtypes.result_type(x.dtype, float)
A:keras.src.backend.tensorflow.math.ord->convert_to_tensor(ord, dtype=x.dtype)
A:keras.src.backend.tensorflow.math.out->tensorflow.math.reduce_sum(tf.pow(tf.math.abs(x), ord), axis=axis, keepdims=keepdims)
keras.src.backend.math._get_complex_tensor_from_tuple(x)
keras.src.backend.math.erf(x)
keras.src.backend.math.erfinv(x)
keras.src.backend.math.extract_sequences(x,sequence_length,sequence_stride)
keras.src.backend.math.fft(x)
keras.src.backend.math.fft2(x)
keras.src.backend.math.in_top_k(targets,predictions,k)
keras.src.backend.math.irfft(x,fft_length=None)
keras.src.backend.math.istft(x,sequence_length,sequence_stride,fft_length,length=None,window='hann',center=True)
keras.src.backend.math.logsumexp(x,axis=None,keepdims=False)
keras.src.backend.math.norm(x,ord=None,axis=None,keepdims=False)
keras.src.backend.math.qr(x,mode='reduced')
keras.src.backend.math.rfft(x,fft_length=None)
keras.src.backend.math.rsqrt(x)
keras.src.backend.math.segment_max(data,segment_ids,num_segments=None,sorted=False)
keras.src.backend.math.segment_sum(data,segment_ids,num_segments=None,sorted=False)
keras.src.backend.math.solve(a,b)
keras.src.backend.math.stft(x,sequence_length,sequence_stride,fft_length,window='hann',center=True)
keras.src.backend.math.top_k(x,k,sorted=True)
keras.src.backend.tensorflow.math._get_complex_tensor_from_tuple(x)
keras.src.backend.tensorflow.math.erf(x)
keras.src.backend.tensorflow.math.erfinv(x)
keras.src.backend.tensorflow.math.extract_sequences(x,sequence_length,sequence_stride)
keras.src.backend.tensorflow.math.fft(x)
keras.src.backend.tensorflow.math.fft2(x)
keras.src.backend.tensorflow.math.in_top_k(targets,predictions,k)
keras.src.backend.tensorflow.math.irfft(x,fft_length=None)
keras.src.backend.tensorflow.math.istft(x,sequence_length,sequence_stride,fft_length,length=None,window='hann',center=True)
keras.src.backend.tensorflow.math.logsumexp(x,axis=None,keepdims=False)
keras.src.backend.tensorflow.math.norm(x,ord=None,axis=None,keepdims=False)
keras.src.backend.tensorflow.math.qr(x,mode='reduced')
keras.src.backend.tensorflow.math.rfft(x,fft_length=None)
keras.src.backend.tensorflow.math.rsqrt(x)
keras.src.backend.tensorflow.math.segment_max(data,segment_ids,num_segments=None,sorted=False)
keras.src.backend.tensorflow.math.segment_sum(data,segment_ids,num_segments=None,sorted=False)
keras.src.backend.tensorflow.math.solve(a,b)
keras.src.backend.tensorflow.math.stft(x,sequence_length,sequence_stride,fft_length,window='hann',center=True)
keras.src.backend.tensorflow.math.top_k(x,k,sorted=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/tensorflow/rnn.py----------------------------------------
A:keras.src.backend.tensorflow.rnn.axes->list(range(len(input_t.shape)))
A:keras.src.backend.tensorflow.rnn.inputs->tensorflow.reverse(inputs, axis=[0])
A:keras.src.backend.tensorflow.rnn.flattened_inputs->keras.src.utils.tree.flatten(inputs)
A:keras.src.backend.tensorflow.rnn.mask->tensorflow.reverse(mask, [0])
A:keras.src.backend.tensorflow.rnn.mask_t->masking_fn(time)
A:keras.src.backend.tensorflow.rnn.states->tuple(initial_states)
A:keras.src.backend.tensorflow.rnn.input_t->tensorflow.unstack(input_t)
A:keras.src.backend.tensorflow.rnn.processed_input->keras.src.utils.tree.map_structure(_process_single_input_t, inputs)
A:keras.src.backend.tensorflow.rnn.mask_list->tensorflow.unstack(mask)
A:keras.src.backend.tensorflow.rnn.inp->_get_input_tensor(i)
A:keras.src.backend.tensorflow.rnn.(output, new_states)->step_function(current_input, tuple(states) + tuple(constants))
A:keras.src.backend.tensorflow.rnn.tiled_mask_t->tuple((_expand_mask(mask_t, o, fixed_dim=len(mask_t.shape)) for o in flat_out))
A:keras.src.backend.tensorflow.rnn.prev_output->tensorflow.zeros_like(output)
A:keras.src.backend.tensorflow.rnn.output->tensorflow.where(tiled_mask_t, output, prev_output)
A:keras.src.backend.tensorflow.rnn.flat_states->keras.src.utils.tree.flatten(states)
A:keras.src.backend.tensorflow.rnn.flat_new_states->keras.src.utils.tree.flatten(new_states)
A:keras.src.backend.tensorflow.rnn.flat_final_states->tuple((tf.where(m, s, ps) for (m, s, ps) in zip(tiled_mask_t, flat_new_states, flat_states)))
A:keras.src.backend.tensorflow.rnn.outputs->tensorflow.expand_dims(last_output, axis=0 if time_major else 1)
A:keras.src.backend.tensorflow.rnn.last_output->keras.src.utils.tree.pack_sequence_as(output_time_zero, last_output)
A:keras.src.backend.tensorflow.rnn.(output, states)->step_function(inp, tuple(states) + tuple(constants))
A:keras.src.backend.tensorflow.rnn.input_ta->tuple((ta.unstack(input_) if not go_backwards else ta.unstack(tf.reverse(input_, [0])) for (ta, input_) in zip(input_ta, flattened_inputs)))
A:keras.src.backend.tensorflow.rnn.input_time_zero->keras.src.utils.tree.pack_sequence_as(inputs, [inp[0] for inp in flattened_inputs])
A:keras.src.backend.tensorflow.rnn.(output_time_zero, _)->step_function(input_time_zero, tuple(initial_states) + tuple(constants))
A:keras.src.backend.tensorflow.rnn.output_ta->tuple((tf.TensorArray(dtype=out.dtype, size=output_ta_size, element_shape=out.shape, tensor_array_name=f'output_ta_{i}') for (i, out) in enumerate(tree.flatten(output_time_zero))))
A:keras.src.backend.tensorflow.rnn.time->tensorflow.constant(0, dtype='int32', name='time')
A:keras.src.backend.tensorflow.rnn.max_iterations->tensorflow.reduce_max(input_length)
A:keras.src.backend.tensorflow.rnn.mask_ta->mask_ta.unstack(mask).unstack(mask)
A:keras.src.backend.tensorflow.rnn.max_len->tensorflow.reduce_max(input_length, axis=0)
A:keras.src.backend.tensorflow.rnn.rev_input_length->tensorflow.subtract(max_len - 1, input_length)
A:keras.src.backend.tensorflow.rnn.flat_zero_output->tuple((tf.zeros_like(o) for o in tree.flatten(output_time_zero)))
A:keras.src.backend.tensorflow.rnn.current_input->keras.src.utils.tree.pack_sequence_as(inputs, current_input)
A:keras.src.backend.tensorflow.rnn.flat_output->keras.src.utils.tree.flatten(output)
A:keras.src.backend.tensorflow.rnn.flat_new_output->compute_masked_output(mask_t, flat_output, flat_mask_output)
A:keras.src.backend.tensorflow.rnn.flat_state->keras.src.utils.tree.flatten(states)
A:keras.src.backend.tensorflow.rnn.flat_new_state->keras.src.utils.tree.flatten(new_states)
A:keras.src.backend.tensorflow.rnn.flat_final_state->compute_masked_output(mask_t, flat_new_state, flat_state)
A:keras.src.backend.tensorflow.rnn.new_states->keras.src.utils.tree.pack_sequence_as(initial_states, flat_new_state)
A:keras.src.backend.tensorflow.rnn.output_ta_t->tuple((ta.write(ta_index_to_write, out) for (ta, out) in zip(output_ta_t, flat_output)))
A:keras.src.backend.tensorflow.rnn.final_outputs->tensorflow.while_loop(body=_step, loop_vars=(time, output_ta) + states, **while_loop_kwargs)
A:keras.src.backend.tensorflow.rnn.cudnn_supported->cudnn_ok(activation, recurrent_activation, unroll, use_bias=bias is not None)
A:keras.src.backend.tensorflow.rnn.count_of_true->tensorflow.reduce_sum(tf.cast(mask, tf.int32), axis=1)
A:keras.src.backend.tensorflow.rnn.right_padded_mask->tensorflow.sequence_mask(count_of_true, maxlen=max_seq_length)
A:keras.src.backend.tensorflow.rnn.sequence_lengths->_compute_sequence_length_from_mask(mask, time_major)
A:keras.src.backend.tensorflow.rnn.init_h->tensorflow.expand_dims(initial_state_h, axis=seq_axis)
A:keras.src.backend.tensorflow.rnn.weights->tensorflow.split(kernel, 4, axis=1)
A:keras.src.backend.tensorflow.rnn.bias->tensorflow.split(tf.reshape(bias, [-1]), 6)
A:keras.src.backend.tensorflow.rnn.params->_standardize_cudnn_weights(weights=weights, biases=tf.split(full_bias, 8), shape=tf.constant([-1]), transpose_weights=True)
A:keras.src.backend.tensorflow.rnn.(outputs, h, _, _, _)->tensorflow.raw_ops.CudnnRNNV3(input=inputs, input_h=init_h, input_c=0, params=params, is_training=True, rnn_mode='gru', sequence_lengths=sequence_lengths, time_major=time_major)
A:keras.src.backend.tensorflow.rnn.(outputs, h, _, _)->tensorflow.raw_ops.CudnnRNN(input=inputs, input_h=init_h, input_c=0, params=params, is_training=True, rnn_mode='gru')
A:keras.src.backend.tensorflow.rnn.state->tensorflow.squeeze(h, axis=seq_axis)
A:keras.src.backend.tensorflow.rnn.args_supported->_do_gru_arguments_support_cudnn(activation=activation, recurrent_activation=recurrent_activation, unroll=unroll, use_bias=use_bias, reset_after=reset_after)
A:keras.src.backend.tensorflow.rnn.init_c->tensorflow.expand_dims(initial_state_c, axis=seq_axis)
A:keras.src.backend.tensorflow.rnn.full_bias->tensorflow.split(full_bias, 8, axis=0)
A:keras.src.backend.tensorflow.rnn.(outputs, h, c, _, _)->tensorflow.raw_ops.CudnnRNNV3(input=inputs, input_h=init_h, input_c=init_c, params=params, is_training=True, rnn_mode='lstm', sequence_lengths=sequence_lengths, time_major=time_major)
A:keras.src.backend.tensorflow.rnn.(outputs, h, c, _)->tensorflow.raw_ops.CudnnRNN(input=inputs, input_h=init_h, input_c=init_c, params=params, is_training=True, rnn_mode='lstm')
A:keras.src.backend.tensorflow.rnn.h->tensorflow.squeeze(h, axis=seq_axis)
A:keras.src.backend.tensorflow.rnn.c->tensorflow.squeeze(c, axis=seq_axis)
keras.src.backend.cudnn_ok(activation,recurrent_activation,unroll,use_bias,reset_after=None)
keras.src.backend.gru(inputs,initial_state,mask,kernel,recurrent_kernel,bias,activation,recurrent_activation,return_sequences=False,go_backwards=False,unroll=False,time_major=False,reset_after=True)
keras.src.backend.lstm(inputs,initial_state_h,initial_state_c,mask,kernel,recurrent_kernel,bias,activation,recurrent_activation,return_sequences=False,go_backwards=False,unroll=False,time_major=False)
keras.src.backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None,time_major=False,zero_output_for_mask=False,return_all_outputs=True)
keras.src.backend.rnn._compute_sequence_length_from_mask(mask,time_major)
keras.src.backend.rnn._cudnn_gru(inputs,initial_state,kernel,recurrent_kernel,bias,mask,time_major,go_backwards,return_sequences)
keras.src.backend.rnn._cudnn_lstm(inputs,initial_state_h,initial_state_c,kernel,recurrent_kernel,bias,mask,time_major,go_backwards,return_sequences)
keras.src.backend.rnn._do_gru_arguments_support_cudnn(activation,recurrent_activation,unroll,use_bias,reset_after)
keras.src.backend.rnn._do_lstm_arguments_support_cudnn(activation,recurrent_activation,unroll,use_bias)
keras.src.backend.rnn._has_fully_masked_sequence(mask)
keras.src.backend.rnn._is_gpu_available()
keras.src.backend.rnn._is_sequence_right_padded(mask)
keras.src.backend.rnn._standardize_cudnn_weights(weights,biases,shape,transpose_weights=False)
keras.src.backend.tensorflow.rnn._compute_sequence_length_from_mask(mask,time_major)
keras.src.backend.tensorflow.rnn._cudnn_gru(inputs,initial_state,kernel,recurrent_kernel,bias,mask,time_major,go_backwards,return_sequences)
keras.src.backend.tensorflow.rnn._cudnn_lstm(inputs,initial_state_h,initial_state_c,kernel,recurrent_kernel,bias,mask,time_major,go_backwards,return_sequences)
keras.src.backend.tensorflow.rnn._do_gru_arguments_support_cudnn(activation,recurrent_activation,unroll,use_bias,reset_after)
keras.src.backend.tensorflow.rnn._do_lstm_arguments_support_cudnn(activation,recurrent_activation,unroll,use_bias)
keras.src.backend.tensorflow.rnn._has_fully_masked_sequence(mask)
keras.src.backend.tensorflow.rnn._is_gpu_available()
keras.src.backend.tensorflow.rnn._is_sequence_right_padded(mask)
keras.src.backend.tensorflow.rnn._standardize_cudnn_weights(weights,biases,shape,transpose_weights=False)
keras.src.backend.tensorflow.rnn.cudnn_ok(activation,recurrent_activation,unroll,use_bias,reset_after=None)
keras.src.backend.tensorflow.rnn.gru(inputs,initial_state,mask,kernel,recurrent_kernel,bias,activation,recurrent_activation,return_sequences=False,go_backwards=False,unroll=False,time_major=False,reset_after=True)
keras.src.backend.tensorflow.rnn.lstm(inputs,initial_state_h,initial_state_c,mask,kernel,recurrent_kernel,bias,activation,recurrent_activation,return_sequences=False,go_backwards=False,unroll=False,time_major=False)
keras.src.backend.tensorflow.rnn.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None,time_major=False,zero_output_for_mask=False,return_all_outputs=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/tensorflow/image.py----------------------------------------
A:keras.src.backend.tensorflow.image.size->tuple(size)
A:keras.src.backend.tensorflow.image.image->tensorflow.transpose(image, (0, 2, 3, 1))
A:keras.src.backend.tensorflow.image.resized->tensorflow.transpose(resized, (2, 0, 1))
A:keras.src.backend.tensorflow.image.transform->tensorflow.expand_dims(transform, axis=0)
A:keras.src.backend.tensorflow.image.affined->tensorflow.squeeze(affined, axis=0)
A:keras.src.backend.tensorflow.image.index->tensorflow.cast(lower, tf.int32)
A:keras.src.backend.tensorflow.image.weight->tensorflow.constant(1, coordinate.dtype)
A:keras.src.backend.tensorflow.image.lower->tensorflow.floor(coordinate)
A:keras.src.backend.tensorflow.image.input_arr->convert_to_tensor(input)
A:keras.src.backend.tensorflow.image.coordinate_arrs->tensorflow.unstack(coordinate_arrs, axis=0)
A:keras.src.backend.tensorflow.image.fill_value->convert_to_tensor(tf.cast(fill_value, input_arr.dtype))
A:keras.src.backend.tensorflow.image.index_fixer->_INDEX_FIXERS.get(fill_mode)
A:keras.src.backend.tensorflow.image.interp_nodes->interp_fun(coordinate)
A:keras.src.backend.tensorflow.image.fixed_index->index_fixer(index, size)
A:keras.src.backend.tensorflow.image.valid->is_valid(index, size)
A:keras.src.backend.tensorflow.image.(indices, validities, weights)->zip(*items)
A:keras.src.backend.tensorflow.image.indices->tensorflow.transpose(tf.stack(indices))
A:keras.src.backend.tensorflow.image.all_valid->functools.reduce(operator.and_, validities)
A:keras.src.backend.tensorflow.image.contribution->tensorflow.cond(tf.reduce_all(validities), fast_path, slow_path)
A:keras.src.backend.tensorflow.image.result->functools.reduce(operator.add, outputs)
keras.src.backend.image._linear_indices_and_weights(coordinate)
keras.src.backend.image._mirror_index_fixer(index,size)
keras.src.backend.image._nearest_indices_and_weights(coordinate)
keras.src.backend.image._reflect_index_fixer(index,size)
keras.src.backend.image.affine_transform(image,transform,interpolation='bilinear',fill_mode='constant',fill_value=0,data_format='channels_last')
keras.src.backend.image.map_coordinates(input,coordinates,order,fill_mode='constant',fill_value=0.0)
keras.src.backend.image.resize(image,size,interpolation='bilinear',antialias=False,data_format='channels_last')
keras.src.backend.tensorflow.image._linear_indices_and_weights(coordinate)
keras.src.backend.tensorflow.image._mirror_index_fixer(index,size)
keras.src.backend.tensorflow.image._nearest_indices_and_weights(coordinate)
keras.src.backend.tensorflow.image._reflect_index_fixer(index,size)
keras.src.backend.tensorflow.image.affine_transform(image,transform,interpolation='bilinear',fill_mode='constant',fill_value=0,data_format='channels_last')
keras.src.backend.tensorflow.image.map_coordinates(input,coordinates,order,fill_mode='constant',fill_value=0.0)
keras.src.backend.tensorflow.image.resize(image,size,interpolation='bilinear',antialias=False,data_format='channels_last')


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/tensorflow/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/tensorflow/optimizer.py----------------------------------------
A:keras.src.backend.tensorflow.optimizer.self._distribution_strategy->tensorflow.distribute.get_strategy()
A:keras.src.backend.tensorflow.optimizer.value->tensorflow.cast(value, variable.dtype)
A:keras.src.backend.tensorflow.optimizer.variable->variable.handle._distributed_container().handle._distributed_container()
A:keras.src.backend.tensorflow.optimizer.lr->tensorflow.cast(self.learning_rate, variable.dtype)
A:keras.src.backend.tensorflow.optimizer.wd->tensorflow.cast(self.weight_decay, variable.dtype)
keras.src.backend.optimizer.TFOptimizer(self,*args,**kwargs)
keras.src.backend.optimizer.TFOptimizer._apply_weight_decay(self,variables)
keras.src.backend.optimizer.TFOptimizer._backend_increment_gradient_accumulators(self,grads)
keras.src.backend.optimizer.TFOptimizer._backend_update_step(self,grads,trainable_variables,learning_rate)
keras.src.backend.optimizer.TFOptimizer._clip_by_norm(self,values,axes=None)
keras.src.backend.optimizer.TFOptimizer._distributed_tf_update_step(self,distribution,grads_and_vars,learning_rate)
keras.src.backend.optimizer.TFOptimizer._overwrite_model_variables_with_average_value(self,trainable_variables)
keras.src.backend.optimizer.TFOptimizer._var_key(self,variable)
keras.src.backend.optimizer.TFOptimizer.add_variable_from_reference(self,reference_variable,name=None,initializer='zeros')
keras.src.backend.optimizer.TFOptimizer.assign(self,variable,value)
keras.src.backend.optimizer.TFOptimizer.assign_add(self,variable,value)
keras.src.backend.optimizer.TFOptimizer.assign_sub(self,variable,value)
keras.src.backend.optimizer.TFOptimizer.stateless_apply(self,optimizer_variables,grads,trainable_variables)
keras.src.backend.tensorflow.optimizer.TFOptimizer(self,*args,**kwargs)
keras.src.backend.tensorflow.optimizer.TFOptimizer.__init__(self,*args,**kwargs)
keras.src.backend.tensorflow.optimizer.TFOptimizer._apply_weight_decay(self,variables)
keras.src.backend.tensorflow.optimizer.TFOptimizer._backend_increment_gradient_accumulators(self,grads)
keras.src.backend.tensorflow.optimizer.TFOptimizer._backend_update_step(self,grads,trainable_variables,learning_rate)
keras.src.backend.tensorflow.optimizer.TFOptimizer._clip_by_norm(self,values,axes=None)
keras.src.backend.tensorflow.optimizer.TFOptimizer._distributed_tf_update_step(self,distribution,grads_and_vars,learning_rate)
keras.src.backend.tensorflow.optimizer.TFOptimizer._overwrite_model_variables_with_average_value(self,trainable_variables)
keras.src.backend.tensorflow.optimizer.TFOptimizer._var_key(self,variable)
keras.src.backend.tensorflow.optimizer.TFOptimizer.add_variable_from_reference(self,reference_variable,name=None,initializer='zeros')
keras.src.backend.tensorflow.optimizer.TFOptimizer.assign(self,variable,value)
keras.src.backend.tensorflow.optimizer.TFOptimizer.assign_add(self,variable,value)
keras.src.backend.tensorflow.optimizer.TFOptimizer.assign_sub(self,variable,value)
keras.src.backend.tensorflow.optimizer.TFOptimizer.stateless_apply(self,optimizer_variables,grads,trainable_variables)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/tensorflow/sparse.py----------------------------------------
A:keras.src.backend.tensorflow.sparse.ones_bool->functools.partial(tf.ones, dtype=tf.bool)
A:keras.src.backend.tensorflow.sparse.ones_int8->functools.partial(tf.ones, dtype=tf.int8)
A:keras.src.backend.tensorflow.sparse.zeros_int8->functools.partial(tf.zeros, dtype=tf.int8)
A:keras.src.backend.tensorflow.sparse.ones_like_int8->functools.partial(tf.ones_like, dtype=tf.int8)
A:keras.src.backend.tensorflow.sparse.zeros_like_int8->functools.partial(tf.zeros_like, dtype=tf.int8)
A:keras.src.backend.tensorflow.sparse.x->tensorflow.SparseTensor(x.indices, values, x.dense_shape)
A:keras.src.backend.tensorflow.sparse.output->tensorflow.SparseTensor(union_indices, func(x1_values_for_union, tf.gather_nd(x2, union_indices)), x1.dense_shape)
A:keras.src.backend.tensorflow.sparse.zeros2->tensorflow.sparse.map_values(zeros_like_int8, x2)
A:keras.src.backend.tensorflow.sparse.x1_for_union->tensorflow.sparse.add(x1, zeros2)
A:keras.src.backend.tensorflow.sparse.x2->tensorflow.convert_to_tensor(x2)
A:keras.src.backend.tensorflow.sparse.zeros1->tensorflow.sparse.map_values(zeros_like_int8, x1)
A:keras.src.backend.tensorflow.sparse.x2_for_union->tensorflow.sparse.add(x2, zeros1)
A:keras.src.backend.tensorflow.sparse.x1_indices_expanded->tensorflow.expand_dims(x1.indices, axis=1)
A:keras.src.backend.tensorflow.sparse.x2_indices_expanded->tensorflow.expand_dims(x2.indices, axis=1)
A:keras.src.backend.tensorflow.sparse.x1_indices_one_hot->tensorflow.scatter_nd(x1_indices_expanded, ones_bool((x1_indices_count,)), (dim_0,))
A:keras.src.backend.tensorflow.sparse.x2_indices_one_hot->tensorflow.scatter_nd(x2_indices_expanded, ones_bool((x2_indices_count,)), (dim_0,))
A:keras.src.backend.tensorflow.sparse.union_indices->tensorflow.squeeze(tf.where(tf.math.logical_or(x1_indices_one_hot, x2_indices_one_hot)), axis=-1)
A:keras.src.backend.tensorflow.sparse.indices_indices->tensorflow.scatter_nd(indices_expanded, tf.range(indices_count), (dim_0,))
A:keras.src.backend.tensorflow.sparse.to_union_indices->tensorflow.gather(indices_indices, union_indices)
A:keras.src.backend.tensorflow.sparse.values_with_leading_zeros->tensorflow.concat([tf.zeros((1,) + values.shape[1:], values.dtype), values], axis=0)
A:keras.src.backend.tensorflow.sparse.x1_values_for_union_indices->tensorflow.cond(tf.equal(x1_indices_count, union_indices_count), lambda : x1.values, lambda : values_for_union(x1_indices_expanded, x1_indices_count, x1.values))
A:keras.src.backend.tensorflow.sparse.x2_values_for_union_indices->tensorflow.cond(tf.equal(x2_indices_count, union_indices_count), lambda : x2_values, lambda : values_for_union(x2_indices_expanded, x2_indices_count, x2_values))
A:keras.src.backend.tensorflow.sparse.ones1->tensorflow.sparse.map_values(ones_like_int8, x1)
A:keras.src.backend.tensorflow.sparse.ones2->tensorflow.sparse.map_values(ones_like_int8, x2)
A:keras.src.backend.tensorflow.sparse.intersection_extra_dim->tensorflow.sets.intersection(tf.sparse.expand_dims(ones1, axis=-1), tf.sparse.expand_dims(ones2, axis=-1))
A:keras.src.backend.tensorflow.sparse.intersection->tensorflow.sparse.reshape(intersection_extra_dim, x1.dense_shape)
A:keras.src.backend.tensorflow.sparse.mask1->tensorflow.sparse.add(zeros1, intersection)
A:keras.src.backend.tensorflow.sparse.mask2->tensorflow.sparse.add(zeros2, intersection)
A:keras.src.backend.tensorflow.sparse.intersection_indices->tensorflow.squeeze(tf.where(tf.math.logical_and(x1_indices_one_hot, x2_indices_one_hot)), axis=-1)
A:keras.src.backend.tensorflow.sparse.to_intersection_indices->tensorflow.gather(indices_indices, intersection_indices)
A:keras.src.backend.tensorflow.sparse.x1_values_for_intersection->tensorflow.cond(tf.equal(x1_indices_count, intersection_indices_count), lambda : x1.values, lambda : values_for_intersection(x1_indices_expanded, x1_indices_count, x1.values))
A:keras.src.backend.tensorflow.sparse.x2_values_for_intersection->tensorflow.cond(tf.equal(x2_indices_count, intersection_indices_count), lambda : x2.values, lambda : values_for_intersection(x2_indices_expanded, x2_indices_count, x2.values))
A:keras.src.backend.tensorflow.sparse.sparse_output->sparse_with_values(x, func(x.values, *args, **kwargs))
A:keras.src.backend.tensorflow.sparse.sparse_output_values->func(x.values, *args, **kwargs)
A:keras.src.backend.tensorflow.sparse.x1->tensorflow.convert_to_tensor(x1)
A:keras.src.backend.tensorflow.sparse.(union_indices, x1_values_for_union, x2_values_for_union)->indexed_slices_union_indices_and_values(x1, x2.indices, x2.values)
A:keras.src.backend.tensorflow.sparse.(intersection_indices, x1_values_for_intersection, x2_values_for_intersection)->indexed_slices_intersection_indices_and_values(x1, x2)
A:keras.src.backend.tensorflow.sparse.x2_zeros_and_nans->tensorflow.reduce_any(x2_zeros_and_nans, axis=tuple(range(1, x2.shape.rank)))
A:keras.src.backend.tensorflow.sparse.x2_zeros_and_nan_indices->tensorflow.squeeze(tf.where(x2_zeros_and_nans), axis=-1)
A:keras.src.backend.tensorflow.sparse.(union_indices, x1_values_for_union, _)->indexed_slices_union_indices_and_values(x1, x2_zeros_and_nan_indices)
keras.src.backend.sparse.broadcast_scalar_to_sparse_shape(scalar,sparse)
keras.src.backend.sparse.densifying_unary(default_value)
keras.src.backend.sparse.elementwise_binary_intersection(func)
keras.src.backend.sparse.elementwise_binary_union(sparse_op,densify_mixed=False)
keras.src.backend.sparse.elementwise_division(func)
keras.src.backend.sparse.elementwise_unary(func)
keras.src.backend.sparse.empty_tensor(shape,dtype)
keras.src.backend.sparse.indexed_slices_intersection_indices_and_values(x1,x2)
keras.src.backend.sparse.indexed_slices_union_indices_and_values(x1,x2_indices,x2_values=None)
keras.src.backend.sparse.sparse_intersection_indices_and_values(x1,x2)
keras.src.backend.sparse.sparse_subtract(x1,x2)
keras.src.backend.sparse.sparse_to_dense(x,default_value=None)
keras.src.backend.sparse.sparse_union_indices_and_values(x1,x2_indices,x2_values=None)
keras.src.backend.sparse.sparse_with_values(x,values)
keras.src.backend.tensorflow.sparse.broadcast_scalar_to_sparse_shape(scalar,sparse)
keras.src.backend.tensorflow.sparse.densifying_unary(default_value)
keras.src.backend.tensorflow.sparse.elementwise_binary_intersection(func)
keras.src.backend.tensorflow.sparse.elementwise_binary_union(sparse_op,densify_mixed=False)
keras.src.backend.tensorflow.sparse.elementwise_division(func)
keras.src.backend.tensorflow.sparse.elementwise_unary(func)
keras.src.backend.tensorflow.sparse.empty_tensor(shape,dtype)
keras.src.backend.tensorflow.sparse.indexed_slices_intersection_indices_and_values(x1,x2)
keras.src.backend.tensorflow.sparse.indexed_slices_union_indices_and_values(x1,x2_indices,x2_values=None)
keras.src.backend.tensorflow.sparse.sparse_intersection_indices_and_values(x1,x2)
keras.src.backend.tensorflow.sparse.sparse_subtract(x1,x2)
keras.src.backend.tensorflow.sparse.sparse_to_dense(x,default_value=None)
keras.src.backend.tensorflow.sparse.sparse_union_indices_and_values(x1,x2_indices,x2_values=None)
keras.src.backend.tensorflow.sparse.sparse_with_values(x,values)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/tensorflow/nn.py----------------------------------------
A:keras.src.backend.tensorflow.nn.output->tensorflow.cast(output, dtype='float32')
A:keras.src.backend.tensorflow.nn.x->cast(x, 'float32')
A:keras.src.backend.tensorflow.nn.res->tensorflow.nn.elu(x)
A:keras.src.backend.tensorflow.nn.coeff->tensorflow.constant(0.044715, x.dtype)
A:keras.src.backend.tensorflow.nn.inputs->tensorflow.expand_dims(inputs, spatial_start_dim)
A:keras.src.backend.tensorflow.nn.outputs->tensorflow.reduce_max(one_hot(cast(x, 'int32'), num_classes, axis=axis, dtype=dtype), axis=reduction_axis)
A:keras.src.backend.tensorflow.nn.data_format->standardize_data_format(data_format)
A:keras.src.backend.tensorflow.nn.padding->padding.upper().upper()
A:keras.src.backend.tensorflow.nn.tf_data_format->_convert_data_format(data_format, len(inputs.shape))
A:keras.src.backend.tensorflow.nn.kernel->tensorflow.expand_dims(kernel, axis=0)
A:keras.src.backend.tensorflow.nn.depthwise_kernel->tensorflow.expand_dims(depthwise_kernel, axis=0)
A:keras.src.backend.tensorflow.nn.pointwise_kernel->tensorflow.expand_dims(pointwise_kernel, axis=0)
A:keras.src.backend.tensorflow.nn.input_shape->list(inputs.shape)
A:keras.src.backend.tensorflow.nn.symbolic_shape->tensorflow.shape(inputs)
A:keras.src.backend.tensorflow.nn.output_shape->compute_conv_transpose_output_shape(input_shape, kernel_size, filters, strides, padding, output_padding, data_format, dilation_rate)
A:keras.src.backend.tensorflow.nn.has_keras_logits->hasattr(output, '_keras_logits')
A:keras.src.backend.tensorflow.nn.target->tensorflow.cast(target, dtype='int32')
A:keras.src.backend.tensorflow.nn.(output, from_logits)->_get_logits(output, from_logits, 'Sigmoid', 'binary_crossentropy')
A:keras.src.backend.tensorflow.nn.result->tensorflow.nn.sparse_softmax_cross_entropy_with_logits(labels=target, logits=output)
A:keras.src.backend.tensorflow.nn.ori_dtype->standardize_dtype(x.dtype)
A:keras.src.backend.tensorflow.nn.(mean, variance)->_compute_moments(x, axes, keepdims)
A:keras.src.backend.tensorflow.nn.mean->tensorflow.reshape(mean, shape)
A:keras.src.backend.tensorflow.nn.variance->tensorflow.reshape(variance, shape)
A:keras.src.backend.tensorflow.nn.replica_ctx->tensorflow.distribute.get_replica_context()
A:keras.src.backend.tensorflow.nn.local_count->tensorflow.reduce_sum(local_count, axis=axes, keepdims=True)
A:keras.src.backend.tensorflow.nn.local_sum->tensorflow.reduce_sum(x, axis=axes, keepdims=True)
A:keras.src.backend.tensorflow.nn.local_squared_sum->tensorflow.reduce_sum(tf.square(x), axis=axes, keepdims=True)
A:keras.src.backend.tensorflow.nn.y_sum->tensorflow.distribute.get_replica_context().all_reduce(tf.distribute.ReduceOp.SUM, local_sum)
A:keras.src.backend.tensorflow.nn.y_squared_sum->tensorflow.distribute.get_replica_context().all_reduce(tf.distribute.ReduceOp.SUM, local_squared_sum)
A:keras.src.backend.tensorflow.nn.count_sum->tensorflow.distribute.get_replica_context().all_reduce(tf.distribute.ReduceOp.SUM, local_count)
A:keras.src.backend.tensorflow.nn.y_squared_mean->tensorflow.math.divide_no_nan(y_squared_sum, count_sum)
A:keras.src.backend.tensorflow.nn.offset->tensorflow.reshape(offset, shape)
A:keras.src.backend.tensorflow.nn.scale->tensorflow.reshape(scale, shape)
keras.src.backend.nn._compute_moments(x,axes,keepdims)
keras.src.backend.nn._compute_moments_sync(x,axes,keepdims)
keras.src.backend.nn._convert_data_format(data_format,ndim)
keras.src.backend.nn._get_logits(output,from_logits,op_type,fn_name)
keras.src.backend.nn._transpose_spatial_inputs(inputs)
keras.src.backend.nn._transpose_spatial_outputs(outputs)
keras.src.backend.nn.average_pool(inputs,pool_size,strides=None,padding='valid',data_format=None)
keras.src.backend.nn.batch_normalization(x,mean,variance,axis,offset=None,scale=None,epsilon=0.001)
keras.src.backend.nn.binary_crossentropy(target,output,from_logits=False)
keras.src.backend.nn.categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.src.backend.nn.conv(inputs,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.nn.conv_transpose(inputs,kernel,strides=1,padding='valid',output_padding=None,data_format=None,dilation_rate=1)
keras.src.backend.nn.ctc_loss(target,output,target_length,output_length,mask_index=0)
keras.src.backend.nn.depthwise_conv(inputs,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.nn.elu(x,alpha=1.0)
keras.src.backend.nn.gelu(x,approximate=True)
keras.src.backend.nn.hard_sigmoid(x)
keras.src.backend.nn.hard_silu(x)
keras.src.backend.nn.leaky_relu(x,negative_slope=0.2)
keras.src.backend.nn.log_sigmoid(x)
keras.src.backend.nn.log_softmax(x,axis=-1)
keras.src.backend.nn.max_pool(inputs,pool_size,strides=None,padding='valid',data_format=None)
keras.src.backend.nn.moments(x,axes,keepdims=False,synchronized=False)
keras.src.backend.nn.multi_hot(x,num_classes,axis=-1,dtype='float32')
keras.src.backend.nn.one_hot(x,num_classes,axis=-1,dtype='float32')
keras.src.backend.nn.relu(x)
keras.src.backend.nn.relu6(x)
keras.src.backend.nn.selu(x)
keras.src.backend.nn.separable_conv(inputs,depthwise_kernel,pointwise_kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.nn.sigmoid(x)
keras.src.backend.nn.silu(x,beta=1.0)
keras.src.backend.nn.softmax(x,axis=-1)
keras.src.backend.nn.softplus(x)
keras.src.backend.nn.softsign(x)
keras.src.backend.nn.sparse_categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.src.backend.nn.tanh(x)
keras.src.backend.tensorflow.nn._compute_moments(x,axes,keepdims)
keras.src.backend.tensorflow.nn._compute_moments_sync(x,axes,keepdims)
keras.src.backend.tensorflow.nn._convert_data_format(data_format,ndim)
keras.src.backend.tensorflow.nn._get_logits(output,from_logits,op_type,fn_name)
keras.src.backend.tensorflow.nn._transpose_spatial_inputs(inputs)
keras.src.backend.tensorflow.nn._transpose_spatial_outputs(outputs)
keras.src.backend.tensorflow.nn.average_pool(inputs,pool_size,strides=None,padding='valid',data_format=None)
keras.src.backend.tensorflow.nn.batch_normalization(x,mean,variance,axis,offset=None,scale=None,epsilon=0.001)
keras.src.backend.tensorflow.nn.binary_crossentropy(target,output,from_logits=False)
keras.src.backend.tensorflow.nn.categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.src.backend.tensorflow.nn.conv(inputs,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.tensorflow.nn.conv_transpose(inputs,kernel,strides=1,padding='valid',output_padding=None,data_format=None,dilation_rate=1)
keras.src.backend.tensorflow.nn.ctc_loss(target,output,target_length,output_length,mask_index=0)
keras.src.backend.tensorflow.nn.depthwise_conv(inputs,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.tensorflow.nn.elu(x,alpha=1.0)
keras.src.backend.tensorflow.nn.gelu(x,approximate=True)
keras.src.backend.tensorflow.nn.hard_sigmoid(x)
keras.src.backend.tensorflow.nn.hard_silu(x)
keras.src.backend.tensorflow.nn.leaky_relu(x,negative_slope=0.2)
keras.src.backend.tensorflow.nn.log_sigmoid(x)
keras.src.backend.tensorflow.nn.log_softmax(x,axis=-1)
keras.src.backend.tensorflow.nn.max_pool(inputs,pool_size,strides=None,padding='valid',data_format=None)
keras.src.backend.tensorflow.nn.moments(x,axes,keepdims=False,synchronized=False)
keras.src.backend.tensorflow.nn.multi_hot(x,num_classes,axis=-1,dtype='float32')
keras.src.backend.tensorflow.nn.one_hot(x,num_classes,axis=-1,dtype='float32')
keras.src.backend.tensorflow.nn.relu(x)
keras.src.backend.tensorflow.nn.relu6(x)
keras.src.backend.tensorflow.nn.selu(x)
keras.src.backend.tensorflow.nn.separable_conv(inputs,depthwise_kernel,pointwise_kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.tensorflow.nn.sigmoid(x)
keras.src.backend.tensorflow.nn.silu(x,beta=1.0)
keras.src.backend.tensorflow.nn.softmax(x,axis=-1)
keras.src.backend.tensorflow.nn.softplus(x)
keras.src.backend.tensorflow.nn.softsign(x)
keras.src.backend.tensorflow.nn.sparse_categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.src.backend.tensorflow.nn.tanh(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/tensorflow/core.py----------------------------------------
A:keras.src.backend.tensorflow.core.self._value->tensorflow.Variable(value, dtype=self._dtype, trainable=self.trainable, name=self.name)
A:keras.src.backend.tensorflow.core.value->self._initializer(self._shape, dtype=self._dtype)
A:keras.src.backend.tensorflow.core.object_map[self]->tensorflow.Variable(object_map[self.value])
A:keras.src.backend.tensorflow.core.resource_list->self.value._export_to_saved_model_graph(object_map, tensor_map, options, **kwargs)
A:keras.src.backend.tensorflow.core.x->tensorflow.cast(x, dtype)
A:keras.src.backend.tensorflow.core.dtype->standardize_dtype(dtype)
A:keras.src.backend.tensorflow.core.dynamic->tensorflow.shape(x)
A:keras.src.backend.tensorflow.core.static->tensorflow.cast(x, dtype).shape.as_list()
A:keras.src.backend.tensorflow.core.graph_name->auto_name('scratch_graph')
A:keras.src.backend.tensorflow.core.(args, kwargs)->keras.src.utils.tree.map_structure(convert_keras_tensor_to_tf, (args, kwargs))
A:keras.src.backend.tensorflow.core.tf_out->fn(*args, **kwargs)
A:keras.src.backend.tensorflow.core.output_spec->keras.src.utils.tree.map_structure(convert_tf_to_keras_tensor, tf_out)
A:keras.src.backend.tensorflow.core.is_tuple->isinstance(loop_vars, (tuple, list))
A:keras.src.backend.tensorflow.core.outputs->tensorflow.while_loop(cond, _body, loop_vars, maximum_iterations=maximum_iterations)
A:keras.src.backend.tensorflow.core.self._tf_name_scope->tensorflow.name_scope(name)
A:keras.src.backend.tensorflow.core.name_scope_stack->keras.src.backend.common.global_state.get_global_attribute('name_scope_stack', default=[], set_to_default=True)
keras.src.backend.Variable(KerasVariable,tf.__internal__.types.Tensor,tf.__internal__.tracking.Trackable)
keras.src.backend.Variable.__tf_tensor__(self,dtype=None,name=None)
keras.src.backend.Variable._convert_to_tensor(self,value,dtype=None)
keras.src.backend.Variable._copy_trackable_to_cpu(self,object_map)
keras.src.backend.Variable._deferred_initialize(self)
keras.src.backend.Variable._direct_assign(self,value)
keras.src.backend.Variable._export_to_saved_model_graph(self,object_map,tensor_map,options,**kwargs)
keras.src.backend.Variable._initialize(self,value)
keras.src.backend.Variable._restore_from_tensors(self,restored_tensors)
keras.src.backend.Variable._serialize_to_tensors(self)
keras.src.backend.Variable._shared_name(self)
keras.src.backend.Variable._write_object_proto(self,proto,options)
keras.src.backend.Variable.handle(self)
keras.src.backend.Variable.numpy(self)
keras.src.backend.Variable.shape(self)
keras.src.backend.cast(x,dtype)
keras.src.backend.compute_output_spec(fn,*args,**kwargs)
keras.src.backend.cond(pred,true_fn,false_fn)
keras.src.backend.convert_to_numpy(x)
keras.src.backend.convert_to_tensor(x,dtype=None,sparse=None)
keras.src.backend.core.custom_gradient(fun)
keras.src.backend.core.fori_loop(lower,upper,body_fun,init_val)
keras.src.backend.core.slice(inputs,start_indices,shape)
keras.src.backend.core.slice_update(inputs,start_indices,updates)
keras.src.backend.core.unstack(x,num=None,axis=0)
keras.src.backend.core.while_loop(cond,body,loop_vars,maximum_iterations=None)
keras.src.backend.device_scope(device_name)
keras.src.backend.is_tensor(x)
keras.src.backend.name_scope(self,name,**kwargs)
keras.src.backend.name_scope.__enter__(self)
keras.src.backend.name_scope.__exit__(self,*args,**kwargs)
keras.src.backend.scatter(indices,values,shape)
keras.src.backend.scatter_update(inputs,indices,updates)
keras.src.backend.shape(x)
keras.src.backend.stop_gradient(variable)
keras.src.backend.tensorflow.core.Variable(KerasVariable,tf.__internal__.types.Tensor,tf.__internal__.tracking.Trackable)
keras.src.backend.tensorflow.core.Variable.__tf_tensor__(self,dtype=None,name=None)
keras.src.backend.tensorflow.core.Variable._convert_to_tensor(self,value,dtype=None)
keras.src.backend.tensorflow.core.Variable._copy_trackable_to_cpu(self,object_map)
keras.src.backend.tensorflow.core.Variable._deferred_initialize(self)
keras.src.backend.tensorflow.core.Variable._direct_assign(self,value)
keras.src.backend.tensorflow.core.Variable._export_to_saved_model_graph(self,object_map,tensor_map,options,**kwargs)
keras.src.backend.tensorflow.core.Variable._initialize(self,value)
keras.src.backend.tensorflow.core.Variable._restore_from_tensors(self,restored_tensors)
keras.src.backend.tensorflow.core.Variable._serialize_to_tensors(self)
keras.src.backend.tensorflow.core.Variable._shared_name(self)
keras.src.backend.tensorflow.core.Variable._write_object_proto(self,proto,options)
keras.src.backend.tensorflow.core.Variable.handle(self)
keras.src.backend.tensorflow.core.Variable.numpy(self)
keras.src.backend.tensorflow.core.Variable.shape(self)
keras.src.backend.tensorflow.core.cast(x,dtype)
keras.src.backend.tensorflow.core.compute_output_spec(fn,*args,**kwargs)
keras.src.backend.tensorflow.core.cond(pred,true_fn,false_fn)
keras.src.backend.tensorflow.core.convert_to_numpy(x)
keras.src.backend.tensorflow.core.convert_to_tensor(x,dtype=None,sparse=None)
keras.src.backend.tensorflow.core.custom_gradient(fun)
keras.src.backend.tensorflow.core.device_scope(device_name)
keras.src.backend.tensorflow.core.fori_loop(lower,upper,body_fun,init_val)
keras.src.backend.tensorflow.core.is_tensor(x)
keras.src.backend.tensorflow.core.name_scope(self,name,**kwargs)
keras.src.backend.tensorflow.core.name_scope.__enter__(self)
keras.src.backend.tensorflow.core.name_scope.__exit__(self,*args,**kwargs)
keras.src.backend.tensorflow.core.name_scope.__init__(self,name,**kwargs)
keras.src.backend.tensorflow.core.scatter(indices,values,shape)
keras.src.backend.tensorflow.core.scatter_update(inputs,indices,updates)
keras.src.backend.tensorflow.core.shape(x)
keras.src.backend.tensorflow.core.slice(inputs,start_indices,shape)
keras.src.backend.tensorflow.core.slice_update(inputs,start_indices,updates)
keras.src.backend.tensorflow.core.stop_gradient(variable)
keras.src.backend.tensorflow.core.unstack(x,num=None,axis=0)
keras.src.backend.tensorflow.core.vectorized_map(function,elements)
keras.src.backend.tensorflow.core.while_loop(cond,body,loop_vars,maximum_iterations=None)
keras.src.backend.vectorized_map(function,elements)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/tensorflow/numpy.py----------------------------------------
A:keras.src.backend.tensorflow.numpy.x1->tensorflow.cast(x1, 'bool')
A:keras.src.backend.tensorflow.numpy.x2->tensorflow.cast(x2, 'bool')
A:keras.src.backend.tensorflow.numpy.dtype->keras.src.backend.common.dtypes.result_type(getattr(x1, 'dtype', type(x1)), getattr(x2, 'dtype', type(x2)))
A:keras.src.backend.tensorflow.numpy.x->tensorflow.cast(x, dtype)
A:keras.src.backend.tensorflow.numpy.weights->tensorflow.cast(weights, compute_dtype)
A:keras.src.backend.tensorflow.numpy.output->tensorflow.sparse.transpose(x, perm=axes)
A:keras.src.backend.tensorflow.numpy.operands->keras.src.utils.tree.map_structure(lambda x: tf.cast(x, compute_dtype), operands)
A:keras.src.backend.tensorflow.numpy.subscripts->_normalize_einsum_subscripts(subscripts)
A:keras.src.backend.tensorflow.numpy.y->tensorflow.reshape(x_permed, shape=full_shape)
A:keras.src.backend.tensorflow.numpy.result->tensorflow.unstack(tf.where(tf.cast(x, 'bool')), x.shape.rank, axis=1)
A:keras.src.backend.tensorflow.numpy.dtypes_to_resolve->list(set((standardize_dtype(x.dtype) for x in operands)))
A:keras.src.backend.tensorflow.numpy.result_dtype->keras.src.backend.common.dtypes.result_type(x.dtype, float)
A:keras.src.backend.tensorflow.numpy.compute_dtype->keras.src.backend.common.dtypes.result_type(x.dtype, 'float32')
A:keras.src.backend.tensorflow.numpy.x1_sparse->isinstance(x1, tf.SparseTensor)
A:keras.src.backend.tensorflow.numpy.x2_sparse->isinstance(x2, tf.SparseTensor)
A:keras.src.backend.tensorflow.numpy.x1_dtype->standardize_dtype(x1.dtype)
A:keras.src.backend.tensorflow.numpy.x2_dtype->standardize_dtype(x2.dtype)
A:keras.src.backend.tensorflow.numpy.a_sparse->isinstance(a, tf.SparseTensor)
A:keras.src.backend.tensorflow.numpy.b_sparse->isinstance(b, tf.SparseTensor)
A:keras.src.backend.tensorflow.numpy.batch_size->math.prod(batch_shape)
A:keras.src.backend.tensorflow.numpy.result_3d->fn_3d(a_3d, b_3d)
A:keras.src.backend.tensorflow.numpy.a_csr->tensorflow.python.ops.linalg.sparse.sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(a.indices, a.values, a.dense_shape)
A:keras.src.backend.tensorflow.numpy.b_csr->tensorflow.python.ops.linalg.sparse.sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(b.indices, b.values, b.dense_shape)
A:keras.src.backend.tensorflow.numpy.result_csr->tensorflow.python.ops.linalg.sparse.sparse_csr_matrix_ops.sparse_matrix_sparse_mat_mul(a_csr, b_csr, dtype)
A:keras.src.backend.tensorflow.numpy.res->tensorflow.python.ops.linalg.sparse.sparse_csr_matrix_ops.csr_sparse_matrix_to_sparse_tensor(result_csr, dtype)
A:keras.src.backend.tensorflow.numpy.(a, _)->tensorflow.sparse.fill_empty_rows(a, 0)
A:keras.src.backend.tensorflow.numpy.ids->tensorflow.SparseTensor(indices=a.indices, values=a.indices[:, 1], dense_shape=a.dense_shape)
A:keras.src.backend.tensorflow.numpy.output_shape->compute_reshape_output_shape(x.shape, newshape, 'newshape')
A:keras.src.backend.tensorflow.numpy.sum->tensorflow.reduce_sum(x.values, axis=0, keepdims=True)
A:keras.src.backend.tensorflow.numpy.axis->sorted([canonicalize_axis(a, len(static_shape)) for a in axis])
A:keras.src.backend.tensorflow.numpy.dense_shape->tensorflow.convert_to_tensor(x.dense_shape)
A:keras.src.backend.tensorflow.numpy.new_values->tensorflow.reduce_mean(x.values, axis=axis, keepdims=True)
A:keras.src.backend.tensorflow.numpy.new_dense_shape->tensorflow.concat([dense_shape[0:1], new_values.shape[1:]], axis=0)
A:keras.src.backend.tensorflow.numpy.ori_dtype->standardize_dtype(x.dtype)
A:keras.src.backend.tensorflow.numpy.size_x->size(x)
A:keras.src.backend.tensorflow.numpy.out->tensorflow.cast(out, dtype)
A:keras.src.backend.tensorflow.numpy.sparse_count->builtins.sum((isinstance(x, tf.SparseTensor) for x in xs))
A:keras.src.backend.tensorflow.numpy.xs->keras.src.utils.tree.map_structure(lambda x: convert_to_tensor(x, dtype), xs)
A:keras.src.backend.tensorflow.numpy.dtype_set->set([getattr(x, 'dtype', type(x)) for x in xs])
A:keras.src.backend.tensorflow.numpy.bins->keras.src.utils.tree.map_structure(lambda x: float(x), bins)
A:keras.src.backend.tensorflow.numpy.fill_value->convert_to_tensor(fill_value, dtype)
A:keras.src.backend.tensorflow.numpy.rank->tensorflow.rank(xs[0])
A:keras.src.backend.tensorflow.numpy.dtype_as_dtype->tensorflow.as_dtype(dtype)
A:keras.src.backend.tensorflow.numpy.start->tensorflow.cast(start, dtype)
A:keras.src.backend.tensorflow.numpy.stop->tensorflow.cast(stop, dtype)
A:keras.src.backend.tensorflow.numpy.pad_width->convert_to_tensor(pad_width, 'int32')
A:keras.src.backend.tensorflow.numpy.q->convert_to_tensor(q)
A:keras.src.backend.tensorflow.numpy.x_ndims->len(x.shape)
A:keras.src.backend.tensorflow.numpy.other_dims->sorted(set(range(x_ndims)).difference(axis))
A:keras.src.backend.tensorflow.numpy.x_permed->tensorflow.transpose(a=x, perm=perm)
A:keras.src.backend.tensorflow.numpy.x_shape->tensorflow.pad(tf.shape(x), [[tf.maximum(repeats_size - x.shape.rank, 0), 0]], constant_values=1)
A:keras.src.backend.tensorflow.numpy.other_shape->tensorflow.gather(tf.shape(x), tf.cast(other_dims, tf.int64))
A:keras.src.backend.tensorflow.numpy.full_shape->tensorflow.concat([other_shape, [-1]], axis=0)
A:keras.src.backend.tensorflow.numpy.sorted_y->tensorflow.sort(y, axis=-1, direction='ASCENDING')
A:keras.src.backend.tensorflow.numpy.d->tensorflow.cast(tf.shape(y)[-1], 'float64')
A:keras.src.backend.tensorflow.numpy.indices->tensorflow.round((d - 1) * q)
A:keras.src.backend.tensorflow.numpy.gathered_y->tensorflow.expand_dims(gathered_y, axis=i)
A:keras.src.backend.tensorflow.numpy.larger_y_idx->tensorflow.minimum(smaller_y_idx + 1, tf.shape(y)[-1] - 1)
A:keras.src.backend.tensorflow.numpy.smaller_y_idx->tensorflow.maximum(larger_y_idx - 1, 0)
A:keras.src.backend.tensorflow.numpy.fraction->tensorflow.cast(fraction, y.dtype)
A:keras.src.backend.tensorflow.numpy.nan_batch_members->tensorflow.reshape(nan_batch_members, shape=right_rank_matched_shape)
A:keras.src.backend.tensorflow.numpy.right_rank_matched_shape->tensorflow.pad(tf.shape(nan_batch_members), paddings=[[0, tf.rank(q)]], constant_values=1)
A:keras.src.backend.tensorflow.numpy.ones_vec->tensorflow.ones(shape=[tf.rank(x) + tf.rank(q)], dtype='int32')
A:keras.src.backend.tensorflow.numpy.shift_value_static->int(math.copysign(1, shift_value_static) * (builtins.abs(shift_value_static) % ndims))
A:keras.src.backend.tensorflow.numpy.perm->collections.deque(range(ndims))
A:keras.src.backend.tensorflow.numpy.indices_or_sections->convert_to_tensor(indices_or_sections)
A:keras.src.backend.tensorflow.numpy.num_or_size_splits->tensorflow.concat([start_size, tfnp.diff(indices_or_sections), end_size], axis=0)
A:keras.src.backend.tensorflow.numpy.factor->tensorflow.cast(math.pow(10, decimals), x.dtype)
A:keras.src.backend.tensorflow.numpy.repeats->tensorflow.pad(repeats, [[tf.maximum(x.shape.rank - repeats_size, 0), 0]], constant_values=1)
A:keras.src.backend.tensorflow.numpy.repeats_size->tensorflow.size(repeats)
A:keras.src.backend.tensorflow.numpy.shape->tensorflow.shape(x)
A:keras.src.backend.tensorflow.numpy.(i, j)->tensorflow.meshgrid(tf.range(rows), tf.range(cols), indexing='ij')
A:keras.src.backend.tensorflow.numpy.condition->tensorflow.cast(condition, 'bool')
A:keras.src.backend.tensorflow.numpy.static_shape->tensorflow.cast(x, dtype).shape.as_list()
A:keras.src.backend.tensorflow.numpy.dynamic_shape->tensorflow.shape(x)
A:keras.src.backend.tensorflow.numpy.new_indices->tensorflow.gather(x.indices, gather_indices, axis=1)
keras.src.backend.tensorflow._normalize_einsum_subscripts(subscripts)
keras.src.backend.tensorflow._quantile(x,q,axis=None,method='linear',keepdims=False)
keras.src.backend.tensorflow.abs(x)
keras.src.backend.tensorflow.absolute(x)
keras.src.backend.tensorflow.add(x1,x2)
keras.src.backend.tensorflow.all(x,axis=None,keepdims=False)
keras.src.backend.tensorflow.amax(x,axis=None,keepdims=False)
keras.src.backend.tensorflow.amin(x,axis=None,keepdims=False)
keras.src.backend.tensorflow.any(x,axis=None,keepdims=False)
keras.src.backend.tensorflow.append(x1,x2,axis=None)
keras.src.backend.tensorflow.arange(start,stop=None,step=1,dtype=None)
keras.src.backend.tensorflow.arccos(x)
keras.src.backend.tensorflow.arccosh(x)
keras.src.backend.tensorflow.arcsin(x)
keras.src.backend.tensorflow.arcsinh(x)
keras.src.backend.tensorflow.arctan(x)
keras.src.backend.tensorflow.arctan2(x1,x2)
keras.src.backend.tensorflow.arctanh(x)
keras.src.backend.tensorflow.argmax(x,axis=None)
keras.src.backend.tensorflow.argmin(x,axis=None)
keras.src.backend.tensorflow.argsort(x,axis=-1)
keras.src.backend.tensorflow.array(x,dtype=None)
keras.src.backend.tensorflow.average(x,axis=None,weights=None)
keras.src.backend.tensorflow.bincount(x,weights=None,minlength=0)
keras.src.backend.tensorflow.broadcast_to(x,shape)
keras.src.backend.tensorflow.ceil(x)
keras.src.backend.tensorflow.clip(x,x_min,x_max)
keras.src.backend.tensorflow.concatenate(xs,axis=0)
keras.src.backend.tensorflow.conj(x)
keras.src.backend.tensorflow.conjugate(x)
keras.src.backend.tensorflow.copy(x)
keras.src.backend.tensorflow.cos(x)
keras.src.backend.tensorflow.cosh(x)
keras.src.backend.tensorflow.count_nonzero(x,axis=None)
keras.src.backend.tensorflow.cross(x1,x2,axisa=-1,axisb=-1,axisc=-1,axis=None)
keras.src.backend.tensorflow.cumprod(x,axis=None,dtype=None)
keras.src.backend.tensorflow.cumsum(x,axis=None,dtype=None)
keras.src.backend.tensorflow.diag(x,k=0)
keras.src.backend.tensorflow.diagonal(x,offset=0,axis1=0,axis2=1)
keras.src.backend.tensorflow.diff(a,n=1,axis=-1)
keras.src.backend.tensorflow.digitize(x,bins)
keras.src.backend.tensorflow.divide(x1,x2)
keras.src.backend.tensorflow.divide_no_nan(x1,x2)
keras.src.backend.tensorflow.dot(x,y)
keras.src.backend.tensorflow.einsum(subscripts,*operands,**kwargs)
keras.src.backend.tensorflow.empty(shape,dtype=None)
keras.src.backend.tensorflow.equal(x1,x2)
keras.src.backend.tensorflow.exp(x)
keras.src.backend.tensorflow.expand_dims(x,axis)
keras.src.backend.tensorflow.expm1(x)
keras.src.backend.tensorflow.eye(N,M=None,k=0,dtype=None)
keras.src.backend.tensorflow.flip(x,axis=None)
keras.src.backend.tensorflow.floor(x)
keras.src.backend.tensorflow.floor_divide(x1,x2)
keras.src.backend.tensorflow.full(shape,fill_value,dtype=None)
keras.src.backend.tensorflow.full_like(x,fill_value,dtype=None)
keras.src.backend.tensorflow.greater(x1,x2)
keras.src.backend.tensorflow.greater_equal(x1,x2)
keras.src.backend.tensorflow.hstack(xs)
keras.src.backend.tensorflow.identity(n,dtype=None)
keras.src.backend.tensorflow.imag(x)
keras.src.backend.tensorflow.isclose(x1,x2)
keras.src.backend.tensorflow.isfinite(x)
keras.src.backend.tensorflow.isinf(x)
keras.src.backend.tensorflow.isnan(x)
keras.src.backend.tensorflow.less(x1,x2)
keras.src.backend.tensorflow.less_equal(x1,x2)
keras.src.backend.tensorflow.linspace(start,stop,num=50,endpoint=True,retstep=False,dtype=None,axis=0)
keras.src.backend.tensorflow.log(x)
keras.src.backend.tensorflow.log10(x)
keras.src.backend.tensorflow.log1p(x)
keras.src.backend.tensorflow.log2(x)
keras.src.backend.tensorflow.logaddexp(x1,x2)
keras.src.backend.tensorflow.logical_and(x1,x2)
keras.src.backend.tensorflow.logical_not(x)
keras.src.backend.tensorflow.logical_or(x1,x2)
keras.src.backend.tensorflow.logical_xor(x1,x2)
keras.src.backend.tensorflow.logspace(start,stop,num=50,endpoint=True,base=10,dtype=None,axis=0)
keras.src.backend.tensorflow.matmul(x1,x2)
keras.src.backend.tensorflow.max(x,axis=None,keepdims=False,initial=None)
keras.src.backend.tensorflow.maximum(x1,x2)
keras.src.backend.tensorflow.mean(x,axis=None,keepdims=False)
keras.src.backend.tensorflow.median(x,axis=None,keepdims=False)
keras.src.backend.tensorflow.meshgrid(*x,indexing='xy')
keras.src.backend.tensorflow.min(x,axis=None,keepdims=False,initial=None)
keras.src.backend.tensorflow.minimum(x1,x2)
keras.src.backend.tensorflow.mod(x1,x2)
keras.src.backend.tensorflow.moveaxis(x,source,destination)
keras.src.backend.tensorflow.multiply(x1,x2)
keras.src.backend.tensorflow.nan_to_num(x)
keras.src.backend.tensorflow.ndim(x)
keras.src.backend.tensorflow.negative(x)
keras.src.backend.tensorflow.nonzero(x)
keras.src.backend.tensorflow.not_equal(x1,x2)
keras.src.backend.tensorflow.numpy._normalize_einsum_subscripts(subscripts)
keras.src.backend.tensorflow.numpy._quantile(x,q,axis=None,method='linear',keepdims=False)
keras.src.backend.tensorflow.numpy.abs(x)
keras.src.backend.tensorflow.numpy.absolute(x)
keras.src.backend.tensorflow.numpy.add(x1,x2)
keras.src.backend.tensorflow.numpy.all(x,axis=None,keepdims=False)
keras.src.backend.tensorflow.numpy.amax(x,axis=None,keepdims=False)
keras.src.backend.tensorflow.numpy.amin(x,axis=None,keepdims=False)
keras.src.backend.tensorflow.numpy.any(x,axis=None,keepdims=False)
keras.src.backend.tensorflow.numpy.append(x1,x2,axis=None)
keras.src.backend.tensorflow.numpy.arange(start,stop=None,step=1,dtype=None)
keras.src.backend.tensorflow.numpy.arccos(x)
keras.src.backend.tensorflow.numpy.arccosh(x)
keras.src.backend.tensorflow.numpy.arcsin(x)
keras.src.backend.tensorflow.numpy.arcsinh(x)
keras.src.backend.tensorflow.numpy.arctan(x)
keras.src.backend.tensorflow.numpy.arctan2(x1,x2)
keras.src.backend.tensorflow.numpy.arctanh(x)
keras.src.backend.tensorflow.numpy.argmax(x,axis=None)
keras.src.backend.tensorflow.numpy.argmin(x,axis=None)
keras.src.backend.tensorflow.numpy.argsort(x,axis=-1)
keras.src.backend.tensorflow.numpy.array(x,dtype=None)
keras.src.backend.tensorflow.numpy.average(x,axis=None,weights=None)
keras.src.backend.tensorflow.numpy.bincount(x,weights=None,minlength=0)
keras.src.backend.tensorflow.numpy.broadcast_to(x,shape)
keras.src.backend.tensorflow.numpy.ceil(x)
keras.src.backend.tensorflow.numpy.clip(x,x_min,x_max)
keras.src.backend.tensorflow.numpy.concatenate(xs,axis=0)
keras.src.backend.tensorflow.numpy.conj(x)
keras.src.backend.tensorflow.numpy.conjugate(x)
keras.src.backend.tensorflow.numpy.copy(x)
keras.src.backend.tensorflow.numpy.cos(x)
keras.src.backend.tensorflow.numpy.cosh(x)
keras.src.backend.tensorflow.numpy.count_nonzero(x,axis=None)
keras.src.backend.tensorflow.numpy.cross(x1,x2,axisa=-1,axisb=-1,axisc=-1,axis=None)
keras.src.backend.tensorflow.numpy.cumprod(x,axis=None,dtype=None)
keras.src.backend.tensorflow.numpy.cumsum(x,axis=None,dtype=None)
keras.src.backend.tensorflow.numpy.diag(x,k=0)
keras.src.backend.tensorflow.numpy.diagonal(x,offset=0,axis1=0,axis2=1)
keras.src.backend.tensorflow.numpy.diff(a,n=1,axis=-1)
keras.src.backend.tensorflow.numpy.digitize(x,bins)
keras.src.backend.tensorflow.numpy.divide(x1,x2)
keras.src.backend.tensorflow.numpy.divide_no_nan(x1,x2)
keras.src.backend.tensorflow.numpy.dot(x,y)
keras.src.backend.tensorflow.numpy.einsum(subscripts,*operands,**kwargs)
keras.src.backend.tensorflow.numpy.empty(shape,dtype=None)
keras.src.backend.tensorflow.numpy.equal(x1,x2)
keras.src.backend.tensorflow.numpy.exp(x)
keras.src.backend.tensorflow.numpy.expand_dims(x,axis)
keras.src.backend.tensorflow.numpy.expm1(x)
keras.src.backend.tensorflow.numpy.eye(N,M=None,k=0,dtype=None)
keras.src.backend.tensorflow.numpy.flip(x,axis=None)
keras.src.backend.tensorflow.numpy.floor(x)
keras.src.backend.tensorflow.numpy.floor_divide(x1,x2)
keras.src.backend.tensorflow.numpy.full(shape,fill_value,dtype=None)
keras.src.backend.tensorflow.numpy.full_like(x,fill_value,dtype=None)
keras.src.backend.tensorflow.numpy.greater(x1,x2)
keras.src.backend.tensorflow.numpy.greater_equal(x1,x2)
keras.src.backend.tensorflow.numpy.hstack(xs)
keras.src.backend.tensorflow.numpy.identity(n,dtype=None)
keras.src.backend.tensorflow.numpy.imag(x)
keras.src.backend.tensorflow.numpy.isclose(x1,x2)
keras.src.backend.tensorflow.numpy.isfinite(x)
keras.src.backend.tensorflow.numpy.isinf(x)
keras.src.backend.tensorflow.numpy.isnan(x)
keras.src.backend.tensorflow.numpy.less(x1,x2)
keras.src.backend.tensorflow.numpy.less_equal(x1,x2)
keras.src.backend.tensorflow.numpy.linspace(start,stop,num=50,endpoint=True,retstep=False,dtype=None,axis=0)
keras.src.backend.tensorflow.numpy.log(x)
keras.src.backend.tensorflow.numpy.log10(x)
keras.src.backend.tensorflow.numpy.log1p(x)
keras.src.backend.tensorflow.numpy.log2(x)
keras.src.backend.tensorflow.numpy.logaddexp(x1,x2)
keras.src.backend.tensorflow.numpy.logical_and(x1,x2)
keras.src.backend.tensorflow.numpy.logical_not(x)
keras.src.backend.tensorflow.numpy.logical_or(x1,x2)
keras.src.backend.tensorflow.numpy.logical_xor(x1,x2)
keras.src.backend.tensorflow.numpy.logspace(start,stop,num=50,endpoint=True,base=10,dtype=None,axis=0)
keras.src.backend.tensorflow.numpy.matmul(x1,x2)
keras.src.backend.tensorflow.numpy.max(x,axis=None,keepdims=False,initial=None)
keras.src.backend.tensorflow.numpy.maximum(x1,x2)
keras.src.backend.tensorflow.numpy.mean(x,axis=None,keepdims=False)
keras.src.backend.tensorflow.numpy.median(x,axis=None,keepdims=False)
keras.src.backend.tensorflow.numpy.meshgrid(*x,indexing='xy')
keras.src.backend.tensorflow.numpy.min(x,axis=None,keepdims=False,initial=None)
keras.src.backend.tensorflow.numpy.minimum(x1,x2)
keras.src.backend.tensorflow.numpy.mod(x1,x2)
keras.src.backend.tensorflow.numpy.moveaxis(x,source,destination)
keras.src.backend.tensorflow.numpy.multiply(x1,x2)
keras.src.backend.tensorflow.numpy.nan_to_num(x)
keras.src.backend.tensorflow.numpy.ndim(x)
keras.src.backend.tensorflow.numpy.negative(x)
keras.src.backend.tensorflow.numpy.nonzero(x)
keras.src.backend.tensorflow.numpy.not_equal(x1,x2)
keras.src.backend.tensorflow.numpy.ones(shape,dtype=None)
keras.src.backend.tensorflow.numpy.ones_like(x,dtype=None)
keras.src.backend.tensorflow.numpy.outer(x1,x2)
keras.src.backend.tensorflow.numpy.pad(x,pad_width,mode='constant',constant_values=None)
keras.src.backend.tensorflow.numpy.power(x1,x2)
keras.src.backend.tensorflow.numpy.prod(x,axis=None,keepdims=False,dtype=None)
keras.src.backend.tensorflow.numpy.quantile(x,q,axis=None,method='linear',keepdims=False)
keras.src.backend.tensorflow.numpy.ravel(x)
keras.src.backend.tensorflow.numpy.real(x)
keras.src.backend.tensorflow.numpy.reciprocal(x)
keras.src.backend.tensorflow.numpy.repeat(x,repeats,axis=None)
keras.src.backend.tensorflow.numpy.reshape(x,newshape)
keras.src.backend.tensorflow.numpy.roll(x,shift,axis=None)
keras.src.backend.tensorflow.numpy.round(x,decimals=0)
keras.src.backend.tensorflow.numpy.sign(x)
keras.src.backend.tensorflow.numpy.sin(x)
keras.src.backend.tensorflow.numpy.sinh(x)
keras.src.backend.tensorflow.numpy.size(x)
keras.src.backend.tensorflow.numpy.sort(x,axis=-1)
keras.src.backend.tensorflow.numpy.split(x,indices_or_sections,axis=0)
keras.src.backend.tensorflow.numpy.sqrt(x)
keras.src.backend.tensorflow.numpy.square(x)
keras.src.backend.tensorflow.numpy.squeeze(x,axis=None)
keras.src.backend.tensorflow.numpy.stack(x,axis=0)
keras.src.backend.tensorflow.numpy.std(x,axis=None,keepdims=False)
keras.src.backend.tensorflow.numpy.subtract(x1,x2)
keras.src.backend.tensorflow.numpy.sum(x,axis=None,keepdims=False)
keras.src.backend.tensorflow.numpy.swapaxes(x,axis1,axis2)
keras.src.backend.tensorflow.numpy.take(x,indices,axis=None)
keras.src.backend.tensorflow.numpy.take_along_axis(x,indices,axis=None)
keras.src.backend.tensorflow.numpy.tan(x)
keras.src.backend.tensorflow.numpy.tanh(x)
keras.src.backend.tensorflow.numpy.tensordot(x1,x2,axes=2)
keras.src.backend.tensorflow.numpy.tile(x,repeats)
keras.src.backend.tensorflow.numpy.trace(x,offset=0,axis1=0,axis2=1)
keras.src.backend.tensorflow.numpy.transpose(x,axes=None)
keras.src.backend.tensorflow.numpy.tri(N,M=None,k=0,dtype=None)
keras.src.backend.tensorflow.numpy.tril(x,k=0)
keras.src.backend.tensorflow.numpy.triu(x,k=0)
keras.src.backend.tensorflow.numpy.true_divide(x1,x2)
keras.src.backend.tensorflow.numpy.var(x,axis=None,keepdims=False)
keras.src.backend.tensorflow.numpy.vdot(x1,x2)
keras.src.backend.tensorflow.numpy.vstack(xs)
keras.src.backend.tensorflow.numpy.where(condition,x1,x2)
keras.src.backend.tensorflow.numpy.zeros(shape,dtype=None)
keras.src.backend.tensorflow.numpy.zeros_like(x,dtype=None)
keras.src.backend.tensorflow.ones(shape,dtype=None)
keras.src.backend.tensorflow.ones_like(x,dtype=None)
keras.src.backend.tensorflow.outer(x1,x2)
keras.src.backend.tensorflow.pad(x,pad_width,mode='constant',constant_values=None)
keras.src.backend.tensorflow.power(x1,x2)
keras.src.backend.tensorflow.prod(x,axis=None,keepdims=False,dtype=None)
keras.src.backend.tensorflow.quantile(x,q,axis=None,method='linear',keepdims=False)
keras.src.backend.tensorflow.ravel(x)
keras.src.backend.tensorflow.real(x)
keras.src.backend.tensorflow.reciprocal(x)
keras.src.backend.tensorflow.repeat(x,repeats,axis=None)
keras.src.backend.tensorflow.reshape(x,newshape)
keras.src.backend.tensorflow.roll(x,shift,axis=None)
keras.src.backend.tensorflow.round(x,decimals=0)
keras.src.backend.tensorflow.sign(x)
keras.src.backend.tensorflow.sin(x)
keras.src.backend.tensorflow.sinh(x)
keras.src.backend.tensorflow.size(x)
keras.src.backend.tensorflow.sort(x,axis=-1)
keras.src.backend.tensorflow.split(x,indices_or_sections,axis=0)
keras.src.backend.tensorflow.sqrt(x)
keras.src.backend.tensorflow.square(x)
keras.src.backend.tensorflow.squeeze(x,axis=None)
keras.src.backend.tensorflow.stack(x,axis=0)
keras.src.backend.tensorflow.std(x,axis=None,keepdims=False)
keras.src.backend.tensorflow.subtract(x1,x2)
keras.src.backend.tensorflow.sum(x,axis=None,keepdims=False)
keras.src.backend.tensorflow.swapaxes(x,axis1,axis2)
keras.src.backend.tensorflow.take(x,indices,axis=None)
keras.src.backend.tensorflow.take_along_axis(x,indices,axis=None)
keras.src.backend.tensorflow.tan(x)
keras.src.backend.tensorflow.tanh(x)
keras.src.backend.tensorflow.tensordot(x1,x2,axes=2)
keras.src.backend.tensorflow.tile(x,repeats)
keras.src.backend.tensorflow.trace(x,offset=0,axis1=0,axis2=1)
keras.src.backend.tensorflow.transpose(x,axes=None)
keras.src.backend.tensorflow.tri(N,M=None,k=0,dtype=None)
keras.src.backend.tensorflow.tril(x,k=0)
keras.src.backend.tensorflow.triu(x,k=0)
keras.src.backend.tensorflow.true_divide(x1,x2)
keras.src.backend.tensorflow.var(x,axis=None,keepdims=False)
keras.src.backend.tensorflow.vdot(x1,x2)
keras.src.backend.tensorflow.vstack(xs)
keras.src.backend.tensorflow.where(condition,x1,x2)
keras.src.backend.tensorflow.zeros(shape,dtype=None)
keras.src.backend.tensorflow.zeros_like(x,dtype=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/tensorflow/trainer.py----------------------------------------
A:keras.src.backend.tensorflow.trainer.self._distribute_strategy->tensorflow.distribute.get_strategy()
A:keras.src.backend.tensorflow.trainer.(x, y, sample_weight)->keras.src.trainers.data_adapters.data_adapter_utils.unpack_x_y_sample_weight(data)
A:keras.src.backend.tensorflow.trainer.y_pred->self(x)
A:keras.src.backend.tensorflow.trainer.loss->self.compute_loss(x=x, y=y, y_pred=y_pred, sample_weight=sample_weight)
A:keras.src.backend.tensorflow.trainer.gradients->tape.gradient(loss, trainable_weights)
A:keras.src.backend.tensorflow.trainer.(x, _, _)->keras.src.trainers.data_adapters.data_adapter_utils.unpack_x_y_sample_weight(data)
A:keras.src.backend.tensorflow.trainer.one_step_on_data->tensorflow.function(one_step_on_data, **kwargs)
A:keras.src.backend.tensorflow.trainer.data->get_data(iterator)
A:keras.src.backend.tensorflow.trainer.outputs->keras.src.utils.tree.map_structure_up_to(batch_outputs, potentially_ragged_concat, outputs)
A:keras.src.backend.tensorflow.trainer.train_function->tensorflow.function(train_function, **kwargs)
A:keras.src.backend.tensorflow.trainer.test_function->tensorflow.function(test_function, **kwargs)
A:keras.src.backend.tensorflow.trainer.step_outputs->one_step_on_data_distributed([single_step_data])
A:keras.src.backend.tensorflow.trainer.predict_function->tensorflow.function(predict_function, **kwargs)
A:keras.src.backend.tensorflow.trainer.((x, y, sample_weight), validation_data)->keras.src.trainers.data_adapters.array_slicing.train_validation_split((x, y, sample_weight), validation_split=validation_split)
A:keras.src.backend.tensorflow.trainer.(val_x, val_y, val_sample_weight)->keras.src.trainers.data_adapters.data_adapter_utils.unpack_x_y_sample_weight(validation_data)
A:keras.src.backend.tensorflow.trainer.epoch_iterator->TFEpochIterator(x=x, batch_size=batch_size, steps_per_epoch=steps, shuffle=False, distribute_strategy=self.distribute_strategy, steps_per_execution=self.steps_per_execution)
A:keras.src.backend.tensorflow.trainer.callbacks->keras.src.callbacks.CallbackList(callbacks, add_history=True, add_progbar=verbose != 0, verbose=verbose, epochs=1, steps=epoch_iterator.num_batches, model=self)
A:keras.src.backend.tensorflow.trainer.logs->keras.src.utils.tree.map_structure(lambda x: np.array(x), logs)
A:keras.src.backend.tensorflow.trainer.epoch_logs->self.get_metrics_result()
A:keras.src.backend.tensorflow.trainer.self._eval_epoch_iterator->TFEpochIterator(x=val_x, y=val_y, sample_weight=val_sample_weight, batch_size=validation_batch_size or batch_size, distribute_strategy=self.distribute_strategy, steps_per_execution=self.steps_per_execution, steps_per_epoch=validation_steps, shuffle=False)
A:keras.src.backend.tensorflow.trainer.val_logs->self.evaluate(x=val_x, y=val_y, sample_weight=val_sample_weight, batch_size=validation_batch_size or batch_size, steps=validation_steps, callbacks=callbacks, return_dict=True, _use_cached_eval_dataset=True)
A:keras.src.backend.tensorflow.trainer.use_cached_eval_dataset->kwargs.pop('_use_cached_eval_dataset', False)
A:keras.src.backend.tensorflow.trainer.single_step_data->next(iterator)
A:keras.src.backend.tensorflow.trainer.batch_outputs->keras.src.utils.tree.map_structure(convert_to_np_if_not_ragged, batch_outputs)
A:keras.src.backend.tensorflow.trainer.sample_weight->keras.src.trainers.data_adapters.data_adapter_utils.class_weight_to_sample_weights(y, class_weight)
A:keras.src.backend.tensorflow.trainer.dataset->self._distribute_strategy.experimental_distribute_dataset(dataset)
A:keras.src.backend.tensorflow.trainer.self._current_iterator->iter(self._distributed_dataset)
A:keras.src.backend.tensorflow.trainer.iterator->iter(self._distributed_dataset)
A:keras.src.backend.tensorflow.trainer.replicas->strategy.experimental_local_results(v)
A:keras.src.backend.tensorflow.trainer.shapes->tensorflow.concat([tf.expand_dims(tf.shape(single_value)[0], axis=0) for single_value in v.values], axis=0)
A:keras.src.backend.tensorflow.trainer.all_shapes->strategy.gather(tf.expand_dims(tf.shape(v)[0], axis=0), axis=0)
A:keras.src.backend.tensorflow.trainer.num_replicas_per_worker->len(strategy.extended.worker_devices)
A:keras.src.backend.tensorflow.trainer.non_batch_shapes->tensorflow.stack([tf.shape(tensor)[1:] for tensor in tensors])
A:keras.src.backend.tensorflow.trainer.constant_dims->tensorflow.math.reduce_all(non_batch_shapes == non_batch_shapes[:1], axis=0)
A:keras.src.backend.tensorflow.trainer.constant_inner_dimensions->tensorflow.math.reduce_all(non_batch_shapes == non_batch_shapes[:1], axis=0).numpy().tolist()[::-1].index(False)
keras.src.backend.tensorflow.trainer.TFEpochIterator(self,distribute_strategy=None,*args,**kwargs)
keras.src.backend.tensorflow.trainer.TFEpochIterator.__init__(self,distribute_strategy=None,*args,**kwargs)
keras.src.backend.tensorflow.trainer.TFEpochIterator._get_iterator(self)
keras.src.backend.tensorflow.trainer.TFEpochIterator.catch_stop_iteration(self)
keras.src.backend.tensorflow.trainer.TFEpochIterator.enumerate_epoch(self)
keras.src.backend.tensorflow.trainer.TFEpochIterator.tf_sync(self)
keras.src.backend.tensorflow.trainer.TensorFlowTrainer(self)
keras.src.backend.tensorflow.trainer.TensorFlowTrainer.__init__(self)
keras.src.backend.tensorflow.trainer.TensorFlowTrainer._compiled_metrics_update_state(self,y,y_pred,sample_weight=None)
keras.src.backend.tensorflow.trainer.TensorFlowTrainer.compiled_loss(self,y,y_pred,sample_weight=None,regularization_losses=None)
keras.src.backend.tensorflow.trainer.TensorFlowTrainer.compiled_metrics(self)
keras.src.backend.tensorflow.trainer.TensorFlowTrainer.distribute_reduction_method(self)
keras.src.backend.tensorflow.trainer.TensorFlowTrainer.distribute_reduction_method(self,value)
keras.src.backend.tensorflow.trainer.TensorFlowTrainer.distribute_strategy(self)
keras.src.backend.tensorflow.trainer.TensorFlowTrainer.evaluate(self,x=None,y=None,batch_size=None,verbose='auto',sample_weight=None,steps=None,callbacks=None,return_dict=False,**kwargs)
keras.src.backend.tensorflow.trainer.TensorFlowTrainer.fit(self,x=None,y=None,batch_size=None,epochs=1,verbose='auto',callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None,validation_batch_size=None,validation_freq=1)
keras.src.backend.tensorflow.trainer.TensorFlowTrainer.loss(self,y,y_pred,sample_weight=None)
keras.src.backend.tensorflow.trainer.TensorFlowTrainer.make_predict_function(self,force=False)
keras.src.backend.tensorflow.trainer.TensorFlowTrainer.make_test_function(self,force=False)
keras.src.backend.tensorflow.trainer.TensorFlowTrainer.make_train_function(self,force=False)
keras.src.backend.tensorflow.trainer.TensorFlowTrainer.predict(self,x,batch_size=None,verbose='auto',steps=None,callbacks=None)
keras.src.backend.tensorflow.trainer.TensorFlowTrainer.predict_on_batch(self,x)
keras.src.backend.tensorflow.trainer.TensorFlowTrainer.predict_step(self,data)
keras.src.backend.tensorflow.trainer.TensorFlowTrainer.test_on_batch(self,x,y=None,sample_weight=None,return_dict=False)
keras.src.backend.tensorflow.trainer.TensorFlowTrainer.test_step(self,data)
keras.src.backend.tensorflow.trainer.TensorFlowTrainer.train_on_batch(self,x,y=None,sample_weight=None,class_weight=None,return_dict=False)
keras.src.backend.tensorflow.trainer.TensorFlowTrainer.train_step(self,data)
keras.src.backend.tensorflow.trainer._collective_all_reduce_multi_worker(strategy)
keras.src.backend.tensorflow.trainer._is_per_replica_instance(obj)
keras.src.backend.tensorflow.trainer._is_scalar(x)
keras.src.backend.tensorflow.trainer._is_tpu_multi_host(strategy)
keras.src.backend.tensorflow.trainer._is_tpu_strategy(strategy)
keras.src.backend.tensorflow.trainer._is_tpu_strategy_class(clz)
keras.src.backend.tensorflow.trainer._multi_worker_concat(v,strategy)
keras.src.backend.tensorflow.trainer._tpu_multi_host_concat(v,strategy)
keras.src.backend.tensorflow.trainer.concat(tensors,axis=0)
keras.src.backend.tensorflow.trainer.convert_to_np_if_not_ragged(x)
keras.src.backend.tensorflow.trainer.potentially_ragged_concat(tensors)
keras.src.backend.tensorflow.trainer.reduce_per_replica(values,strategy,reduction)
keras.src.backend.trainer.TFEpochIterator(self,distribute_strategy=None,*args,**kwargs)
keras.src.backend.trainer.TFEpochIterator._get_iterator(self)
keras.src.backend.trainer.TFEpochIterator.catch_stop_iteration(self)
keras.src.backend.trainer.TFEpochIterator.enumerate_epoch(self)
keras.src.backend.trainer.TFEpochIterator.tf_sync(self)
keras.src.backend.trainer.TensorFlowTrainer(self)
keras.src.backend.trainer.TensorFlowTrainer._compiled_metrics_update_state(self,y,y_pred,sample_weight=None)
keras.src.backend.trainer.TensorFlowTrainer.compiled_loss(self,y,y_pred,sample_weight=None,regularization_losses=None)
keras.src.backend.trainer.TensorFlowTrainer.compiled_metrics(self)
keras.src.backend.trainer.TensorFlowTrainer.distribute_reduction_method(self)
keras.src.backend.trainer.TensorFlowTrainer.distribute_reduction_method(self,value)
keras.src.backend.trainer.TensorFlowTrainer.distribute_strategy(self)
keras.src.backend.trainer.TensorFlowTrainer.evaluate(self,x=None,y=None,batch_size=None,verbose='auto',sample_weight=None,steps=None,callbacks=None,return_dict=False,**kwargs)
keras.src.backend.trainer.TensorFlowTrainer.fit(self,x=None,y=None,batch_size=None,epochs=1,verbose='auto',callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None,validation_batch_size=None,validation_freq=1)
keras.src.backend.trainer.TensorFlowTrainer.loss(self,y,y_pred,sample_weight=None)
keras.src.backend.trainer.TensorFlowTrainer.make_predict_function(self,force=False)
keras.src.backend.trainer.TensorFlowTrainer.make_test_function(self,force=False)
keras.src.backend.trainer.TensorFlowTrainer.make_train_function(self,force=False)
keras.src.backend.trainer.TensorFlowTrainer.predict(self,x,batch_size=None,verbose='auto',steps=None,callbacks=None)
keras.src.backend.trainer.TensorFlowTrainer.predict_on_batch(self,x)
keras.src.backend.trainer.TensorFlowTrainer.predict_step(self,data)
keras.src.backend.trainer.TensorFlowTrainer.test_on_batch(self,x,y=None,sample_weight=None,return_dict=False)
keras.src.backend.trainer.TensorFlowTrainer.test_step(self,data)
keras.src.backend.trainer.TensorFlowTrainer.train_on_batch(self,x,y=None,sample_weight=None,class_weight=None,return_dict=False)
keras.src.backend.trainer.TensorFlowTrainer.train_step(self,data)
keras.src.backend.trainer._collective_all_reduce_multi_worker(strategy)
keras.src.backend.trainer._is_per_replica_instance(obj)
keras.src.backend.trainer._is_scalar(x)
keras.src.backend.trainer._is_tpu_multi_host(strategy)
keras.src.backend.trainer._is_tpu_strategy(strategy)
keras.src.backend.trainer._is_tpu_strategy_class(clz)
keras.src.backend.trainer._multi_worker_concat(v,strategy)
keras.src.backend.trainer._tpu_multi_host_concat(v,strategy)
keras.src.backend.trainer.concat(tensors,axis=0)
keras.src.backend.trainer.convert_to_np_if_not_ragged(x)
keras.src.backend.trainer.potentially_ragged_concat(tensors)
keras.src.backend.trainer.reduce_per_replica(values,strategy,reduction)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/tensorflow/linalg.py----------------------------------------
A:keras.src.backend.tensorflow.linalg.out->tensorflow.math.reduce_sum(tf.pow(tf.math.abs(x), ord), axis=axis, keepdims=keepdims)
A:keras.src.backend.tensorflow.linalg.(lu, p)->tensorflow.linalg.lu(a)
A:keras.src.backend.tensorflow.linalg.x->tensorflow.expand_dims(x, axis[1])
A:keras.src.backend.tensorflow.linalg.axis->tuple(range(ndim))
A:keras.src.backend.tensorflow.linalg.dtype->keras.src.backend.common.dtypes.result_type(x.dtype, float)
A:keras.src.backend.tensorflow.linalg.ord->convert_to_tensor(ord, dtype=x.dtype)
A:keras.src.backend.tensorflow.linalg.b->tensorflow.expand_dims(b, axis=-1)
A:keras.src.backend.tensorflow.linalg.(s, u, v)->tensorflow.linalg.svd(x, full_matrices=full_matrices, compute_uv=compute_uv)
keras.src.backend.linalg.cholesky(a)
keras.src.backend.linalg.det(a)
keras.src.backend.linalg.eig(a)
keras.src.backend.linalg.inv(a)
keras.src.backend.linalg.lu_factor(a)
keras.src.backend.linalg.norm(x,ord=None,axis=None,keepdims=False)
keras.src.backend.linalg.qr(x,mode='reduced')
keras.src.backend.linalg.solve(a,b)
keras.src.backend.linalg.solve_triangular(a,b,lower=False)
keras.src.backend.linalg.svd(x,full_matrices=True,compute_uv=True)
keras.src.backend.tensorflow.linalg.cholesky(a)
keras.src.backend.tensorflow.linalg.det(a)
keras.src.backend.tensorflow.linalg.eig(a)
keras.src.backend.tensorflow.linalg.inv(a)
keras.src.backend.tensorflow.linalg.lu_factor(a)
keras.src.backend.tensorflow.linalg.norm(x,ord=None,axis=None,keepdims=False)
keras.src.backend.tensorflow.linalg.qr(x,mode='reduced')
keras.src.backend.tensorflow.linalg.solve(a,b)
keras.src.backend.tensorflow.linalg.solve_triangular(a,b,lower=False)
keras.src.backend.tensorflow.linalg.svd(x,full_matrices=True,compute_uv=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/tensorflow/trackable.py----------------------------------------
A:keras.src.backend.tensorflow.trackable.value->sticky_attribute_assignment(trackable=self, value=value, name=name)
keras.src.backend.tensorflow.trackable.KerasAutoTrackable(tf.__internal__.tracking.AutoTrackable)
keras.src.backend.tensorflow.trackable.KerasAutoTrackable.__setattr__(self,name,value)
keras.src.backend.tensorflow.trackable.sticky_attribute_assignment(trackable,name,value)
keras.src.backend.trackable.KerasAutoTrackable(tf.__internal__.tracking.AutoTrackable)
keras.src.backend.trackable.KerasAutoTrackable.__setattr__(self,name,value)
keras.src.backend.trackable.sticky_attribute_assignment(trackable,name,value)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/tensorflow/random.py----------------------------------------
A:keras.src.backend.tensorflow.random.seed->tf_draw_seed(seed)
A:keras.src.backend.tensorflow.random.output->tensorflow.random.stateless_uniform(shape=shape, minval=minval, maxval=maxval, dtype=intemediate_dtype, seed=seed)
A:keras.src.backend.tensorflow.random.concrete_inputs_shape->tensorflow.shape(inputs)
A:keras.src.backend.tensorflow.random.noise_shape->_get_concrete_noise_shape(inputs, noise_shape)
A:keras.src.backend.tensorflow.random.x->tensorflow.experimental.numpy.swapaxes(x, axis1=0, axis2=axis)
A:keras.src.backend.tensorflow.random.sample->tensorflow.random.stateless_binomial(shape=shape, seed=seed, counts=counts, probs=probabilities, output_dtype=dtype)
A:keras.src.backend.tensorflow.random.seed_1->tf_draw_seed(seed)
A:keras.src.backend.tensorflow.random.alpha->tensorflow.broadcast_to(alpha, shape)
A:keras.src.backend.tensorflow.random.beta->tensorflow.broadcast_to(beta, shape)
A:keras.src.backend.tensorflow.random.gamma_a->tensorflow.random.stateless_gamma(shape=shape, seed=seed_1, alpha=alpha, dtype=dtype)
A:keras.src.backend.tensorflow.random.gamma_b->tensorflow.random.stateless_gamma(shape=shape, seed=seed_2, alpha=beta, dtype=dtype)
keras.src.backend.random._get_concrete_noise_shape(inputs,noise_shape)
keras.src.backend.random.beta(shape,alpha,beta,dtype=None,seed=None)
keras.src.backend.random.binomial(shape,counts,probabilities,dtype=None,seed=None)
keras.src.backend.random.categorical(logits,num_samples,dtype='int64',seed=None)
keras.src.backend.random.dropout(inputs,rate,noise_shape=None,seed=None)
keras.src.backend.random.gamma(shape,alpha,dtype=None,seed=None)
keras.src.backend.random.normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.src.backend.random.randint(shape,minval,maxval,dtype='int32',seed=None)
keras.src.backend.random.shuffle(x,axis=0,seed=None)
keras.src.backend.random.tf_draw_seed(seed)
keras.src.backend.random.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.src.backend.random.uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)
keras.src.backend.tensorflow.random._get_concrete_noise_shape(inputs,noise_shape)
keras.src.backend.tensorflow.random.beta(shape,alpha,beta,dtype=None,seed=None)
keras.src.backend.tensorflow.random.binomial(shape,counts,probabilities,dtype=None,seed=None)
keras.src.backend.tensorflow.random.categorical(logits,num_samples,dtype='int64',seed=None)
keras.src.backend.tensorflow.random.dropout(inputs,rate,noise_shape=None,seed=None)
keras.src.backend.tensorflow.random.gamma(shape,alpha,dtype=None,seed=None)
keras.src.backend.tensorflow.random.normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.src.backend.tensorflow.random.randint(shape,minval,maxval,dtype='int32',seed=None)
keras.src.backend.tensorflow.random.shuffle(x,axis=0,seed=None)
keras.src.backend.tensorflow.random.tf_draw_seed(seed)
keras.src.backend.tensorflow.random.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.src.backend.tensorflow.random.uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/tensorflow/tensorboard.py----------------------------------------
keras.src.backend.tensorboard.start_trace(logdir)
keras.src.backend.tensorboard.stop_trace(save)
keras.src.backend.tensorflow.tensorboard.start_trace(logdir)
keras.src.backend.tensorflow.tensorboard.stop_trace(save)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/tensorflow/layer.py----------------------------------------
A:keras.src.backend.tensorflow.layer.inputs_spec->keras.src.utils.tree.map_structure(tf_utils.get_tensor_spec, inputs)
A:keras.src.backend.tensorflow.layer.args_spec->keras.src.utils.tree.map_structure(tf_utils.get_tensor_spec, args or [])
A:keras.src.backend.tensorflow.layer.flat_kwarg->keras.src.utils.tree.flatten(kwarg)
A:keras.src.backend.tensorflow.layer.kwargs_spec[key]->keras.src.utils.tree.pack_sequence_as(kwarg, flat_specs)
A:keras.src.backend.tensorflow.layer.train_function->getattr(self, 'train_function', None)
A:keras.src.backend.tensorflow.layer.test_function->getattr(self, 'test_function', None)
A:keras.src.backend.tensorflow.layer.predict_function->getattr(self, 'predict_function', None)
A:keras.src.backend.tensorflow.layer.children->super()._trackable_children(save_type, **kwargs)
A:keras.src.backend.tensorflow.layer.tracked_item->getattr(self, tracked_attr)
A:keras.src.backend.tensorflow.layer.children[tracked_attr]->list(tracked_item)
keras.src.backend.layer.TFLayer(self,*args,**kwargs)
keras.src.backend.layer.TFLayer._default_save_signature(self)
keras.src.backend.layer.TFLayer._set_save_spec(self,inputs,args=None,kwargs=None)
keras.src.backend.layer.TFLayer._trackable_children(self,save_type='checkpoint',**kwargs)
keras.src.backend.tensorflow.layer.TFLayer(self,*args,**kwargs)
keras.src.backend.tensorflow.layer.TFLayer.__init__(self,*args,**kwargs)
keras.src.backend.tensorflow.layer.TFLayer._default_save_signature(self)
keras.src.backend.tensorflow.layer.TFLayer._set_save_spec(self,inputs,args=None,kwargs=None)
keras.src.backend.tensorflow.layer.TFLayer._trackable_children(self,save_type='checkpoint',**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/tensorflow/distribution_lib.py----------------------------------------
A:keras.src.backend.tensorflow.distribution_lib.tf_devices->tensorflow.config.list_logical_devices(device_type=device_type)
A:keras.src.backend.tensorflow.distribution_lib.mesh_dims->list(zip(device_mesh.axis_names, device_mesh.shape))
A:keras.src.backend.tensorflow.distribution_lib.dtensor_mesh->_to_dtensor_mesh(tensor_layout.device_mesh)
keras.src.backend.distribution_lib._to_dtensor_layout(tensor_layout)
keras.src.backend.distribution_lib._to_dtensor_mesh(device_mesh)
keras.src.backend.distribution_lib.distribute_value(value,tensor_layout)
keras.src.backend.distribution_lib.list_devices(device_type=None)
keras.src.backend.tensorflow.distribution_lib._to_dtensor_layout(tensor_layout)
keras.src.backend.tensorflow.distribution_lib._to_dtensor_mesh(device_mesh)
keras.src.backend.tensorflow.distribution_lib.distribute_value(value,tensor_layout)
keras.src.backend.tensorflow.distribution_lib.list_devices(device_type=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/numpy/math.py----------------------------------------
A:keras.src.backend.numpy.math.data_shape->list(valid_data.shape)
A:keras.src.backend.numpy.math.result->numpy.zeros(data_shape, dtype=valid_data.dtype)
A:keras.src.backend.numpy.math.sort_indices->numpy.argsort(valid_segment_ids)
A:keras.src.backend.numpy.math.idx->numpy.argsort(-top_k_values, axis=-1)
A:keras.src.backend.numpy.math.top_k_values->numpy.take_along_axis(top_k_values, idx, axis=-1)
A:keras.src.backend.numpy.math.top_k_indices->numpy.take_along_axis(top_k_indices, idx, axis=-1)
A:keras.src.backend.numpy.math.targets_values->numpy.take_along_axis(predictions, targets, axis=-1)
A:keras.src.backend.numpy.math.max_x->numpy.max(x, axis=axis, keepdims=True)
A:keras.src.backend.numpy.math.batch_shape->list(batch_shape)
A:keras.src.backend.numpy.math.x->convert_to_tensor(x)
A:keras.src.backend.numpy.math.(real, imag)->jax_fft2(x)
A:keras.src.backend.numpy.math.complex_output->numpy.fft.rfft(x, n=fft_length, axis=-1, norm='backward')
A:keras.src.backend.numpy.math.complex_input->_get_complex_tensor_from_tuple(x)
A:keras.src.backend.numpy.math.win->numpy.ones(sequence_length + l_pad + r_pad, dtype=dtype)
A:keras.src.backend.numpy.math.a->convert_to_tensor(a)
A:keras.src.backend.numpy.math.b->convert_to_tensor(b)
A:keras.src.backend.numpy.math.dtype->keras.src.backend.common.dtypes.result_type(x.dtype, 'float32')
keras.src.backend.math._get_complex_tensor_from_tuple(x)
keras.src.backend.math.erf(x)
keras.src.backend.math.erfinv(x)
keras.src.backend.math.extract_sequences(x,sequence_length,sequence_stride)
keras.src.backend.math.fft(x)
keras.src.backend.math.fft2(x)
keras.src.backend.math.in_top_k(targets,predictions,k)
keras.src.backend.math.irfft(x,fft_length=None)
keras.src.backend.math.istft(x,sequence_length,sequence_stride,fft_length,length=None,window='hann',center=True)
keras.src.backend.math.logsumexp(x,axis=None,keepdims=False)
keras.src.backend.math.norm(x,ord=None,axis=None,keepdims=False)
keras.src.backend.math.qr(x,mode='reduced')
keras.src.backend.math.rfft(x,fft_length=None)
keras.src.backend.math.rsqrt(x)
keras.src.backend.math.segment_max(data,segment_ids,num_segments=None,sorted=False)
keras.src.backend.math.segment_sum(data,segment_ids,num_segments=None,sorted=False)
keras.src.backend.math.solve(a,b)
keras.src.backend.math.stft(x,sequence_length,sequence_stride,fft_length,window='hann',center=True)
keras.src.backend.math.top_k(x,k,sorted=False)
keras.src.backend.numpy.math._get_complex_tensor_from_tuple(x)
keras.src.backend.numpy.math.erf(x)
keras.src.backend.numpy.math.erfinv(x)
keras.src.backend.numpy.math.extract_sequences(x,sequence_length,sequence_stride)
keras.src.backend.numpy.math.fft(x)
keras.src.backend.numpy.math.fft2(x)
keras.src.backend.numpy.math.in_top_k(targets,predictions,k)
keras.src.backend.numpy.math.irfft(x,fft_length=None)
keras.src.backend.numpy.math.istft(x,sequence_length,sequence_stride,fft_length,length=None,window='hann',center=True)
keras.src.backend.numpy.math.logsumexp(x,axis=None,keepdims=False)
keras.src.backend.numpy.math.norm(x,ord=None,axis=None,keepdims=False)
keras.src.backend.numpy.math.qr(x,mode='reduced')
keras.src.backend.numpy.math.rfft(x,fft_length=None)
keras.src.backend.numpy.math.rsqrt(x)
keras.src.backend.numpy.math.segment_max(data,segment_ids,num_segments=None,sorted=False)
keras.src.backend.numpy.math.segment_sum(data,segment_ids,num_segments=None,sorted=False)
keras.src.backend.numpy.math.solve(a,b)
keras.src.backend.numpy.math.stft(x,sequence_length,sequence_stride,fft_length,window='hann',center=True)
keras.src.backend.numpy.math.top_k(x,k,sorted=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/numpy/rnn.py----------------------------------------
A:keras.src.backend.numpy.rnn.axes->list(range(len(input_t.shape)))
A:keras.src.backend.numpy.rnn.inputs->keras.src.utils.tree.map_structure(swap_batch_timestep, inputs)
A:keras.src.backend.numpy.rnn.flattened_inputs->keras.src.utils.tree.flatten(inputs)
A:keras.src.backend.numpy.rnn.mask->swap_batch_timestep(mask)
A:keras.src.backend.numpy.rnn.mask_t->numpy.expand_dims(mask_t, -1)
A:keras.src.backend.numpy.rnn.states->keras.src.utils.tree.pack_sequence_as(states, flat_final_states)
A:keras.src.backend.numpy.rnn.input_t->unstack(input_t)
A:keras.src.backend.numpy.rnn.processed_input->keras.src.utils.tree.map_structure(_process_single_input_t, inputs)
A:keras.src.backend.numpy.rnn.mask_list->unstack(mask)
A:keras.src.backend.numpy.rnn.inp->_get_input_tensor(i)
A:keras.src.backend.numpy.rnn.(output, new_states)->step_function(inp, tuple(states) + tuple(constants))
A:keras.src.backend.numpy.rnn.tiled_mask_t->tuple((_expand_mask(mask_t, s) for s in flat_states))
A:keras.src.backend.numpy.rnn.prev_output->numpy.zeros_like(output)
A:keras.src.backend.numpy.rnn.output->numpy.where(tiled_mask_t, output, prev_output)
A:keras.src.backend.numpy.rnn.flat_states->keras.src.utils.tree.flatten(states)
A:keras.src.backend.numpy.rnn.flat_new_states->keras.src.utils.tree.flatten(new_states)
A:keras.src.backend.numpy.rnn.flat_final_states->tuple((np.where(m, s, ps) for (m, s, ps) in zip(tiled_mask_t, flat_new_states, flat_states)))
A:keras.src.backend.numpy.rnn.outputs->numpy.flip(outputs, axis=0)
A:keras.src.backend.numpy.rnn.(output, states)->step_function(inp, tuple(states) + tuple(constants))
A:keras.src.backend.numpy.rnn.is_masked->numpy.all(np.logical_not(current_mask), axis=-1, keepdims=True)
A:keras.src.backend.numpy.rnn.(output_t, new_states)->step_function(current_input, states)
A:keras.src.backend.numpy.rnn.masked_outs->numpy.where(is_masked, output_tm1, output_t)
A:keras.src.backend.numpy.rnn.(new_states, outputs)->numpy_scan(f=_step, init=initial_states, xs=scan_xs, reverse=go_backwards, mask=mask)
A:keras.src.backend.numpy.rnn.(states, output)->f(states, x)
keras.src.backend.cudnn_ok(*args,**kwargs)
keras.src.backend.gru(*args,**kwargs)
keras.src.backend.lstm(*args,**kwargs)
keras.src.backend.numpy.rnn.cudnn_ok(*args,**kwargs)
keras.src.backend.numpy.rnn.gru(*args,**kwargs)
keras.src.backend.numpy.rnn.lstm(*args,**kwargs)
keras.src.backend.numpy.rnn.numpy_scan(f,init,xs,reverse=False,mask=None)
keras.src.backend.numpy.rnn.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None,time_major=False,zero_output_for_mask=False,return_all_outputs=True)
keras.src.backend.numpy.rnn.unstack(x,axis=0)
keras.src.backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None,time_major=False,zero_output_for_mask=False,return_all_outputs=True)
keras.src.backend.rnn.numpy_scan(f,init,xs,reverse=False,mask=None)
keras.src.backend.rnn.unstack(x,axis=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/numpy/image.py----------------------------------------
A:keras.src.backend.numpy.image.size->tuple(size)
A:keras.src.backend.numpy.image.transform->numpy.reshape(transform, (batch_size, 3, 3))
A:keras.src.backend.numpy.image.image->numpy.transpose(image, (0, 2, 3, 1))
A:keras.src.backend.numpy.image.meshgrid->numpy.meshgrid(*[np.arange(size) for size in image.shape[1:]], indexing='ij')
A:keras.src.backend.numpy.image.indices->numpy.tile(indices, (batch_size, 1, 1, 1, 1))
A:keras.src.backend.numpy.image.a0->transform[:, 0].copy()
A:keras.src.backend.numpy.image.a2->transform[:, 2].copy()
A:keras.src.backend.numpy.image.b1->transform[:, 4].copy()
A:keras.src.backend.numpy.image.b2->transform[:, 5].copy()
A:keras.src.backend.numpy.image.offset->numpy.pad(offset, pad_width=[[0, 0], [0, 1]])
A:keras.src.backend.numpy.image.coordinates->numpy.moveaxis(coordinates, source=-1, destination=1)
A:keras.src.backend.numpy.image.affined->affined.astype(input_dtype).astype(input_dtype)
A:keras.src.backend.numpy.image.pad_mode->{'nearest': 'edge', 'mirror': 'reflect', 'reflect': 'symmetric'}.get(fill_mode, fill_mode)
A:keras.src.backend.numpy.image.padded->numpy.pad(input, padding, mode=pad_mode)
A:keras.src.backend.numpy.image.result->keras.src.utils.module_utils.scipy.ndimage.map_coordinates(padded, shifted_coords, order=order, mode=fill_mode, cval=fill_value)
keras.src.backend.image.affine_transform(image,transform,interpolation='bilinear',fill_mode='constant',fill_value=0,data_format='channels_last')
keras.src.backend.image.map_coordinates(input,coordinates,order,fill_mode='constant',fill_value=0.0)
keras.src.backend.image.resize(image,size,interpolation='bilinear',antialias=False,data_format='channels_last')
keras.src.backend.numpy.image.affine_transform(image,transform,interpolation='bilinear',fill_mode='constant',fill_value=0,data_format='channels_last')
keras.src.backend.numpy.image.map_coordinates(input,coordinates,order,fill_mode='constant',fill_value=0.0)
keras.src.backend.numpy.image.resize(image,size,interpolation='bilinear',antialias=False,data_format='channels_last')


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/numpy/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/numpy/nn.py----------------------------------------
A:keras.src.backend.numpy.nn.x->cast(x, 'float32')
A:keras.src.backend.numpy.nn.sqrt_2_over_pi->numpy.sqrt(2 / np.pi).astype(x.dtype)
A:keras.src.backend.numpy.nn.sqrt_2->numpy.sqrt(2).astype(x.dtype)
A:keras.src.backend.numpy.nn.exp_x->numpy.exp(x - np.max(x, axis=axis, keepdims=True))
A:keras.src.backend.numpy.nn.max_x->numpy.max(x, axis=axis, keepdims=True)
A:keras.src.backend.numpy.nn.logsumexp->numpy.log(np.exp(x - max_x).sum(axis=axis, keepdims=True))
A:keras.src.backend.numpy.nn.padding->padding.upper().upper()
A:keras.src.backend.numpy.nn.data_format->standardize_data_format(data_format)
A:keras.src.backend.numpy.nn.pool_size->_convert_to_spatial_operand(pool_size, num_spatial_dims, data_format)
A:keras.src.backend.numpy.nn.strides->_convert_to_spatial_operand(strides, num_spatial_dims, data_format, include_batch_and_channels=False)
A:keras.src.backend.numpy.nn.pooled->_pool(inputs, 0.0, lax.add, pool_size, strides, padding)
A:keras.src.backend.numpy.nn.window_counts->_pool(jnp.ones(shape, inputs.dtype), 0.0, lax.add, pool_size, strides, padding)
A:keras.src.backend.numpy.nn.spatial_dims->tuple(range(2, num_dims))
A:keras.src.backend.numpy.nn.dimension_numbers->_convert_to_lax_conv_dimension_numbers(num_spatial_dims, data_format, transpose=False)
A:keras.src.backend.numpy.nn.dilation_rate->_convert_to_spatial_operand(dilation_rate, num_spatial_dims, data_format, include_batch_and_channels=False)
A:keras.src.backend.numpy.nn.kernel->jax.numpy.reshape(kernel if is_tensor(kernel) else kernel.numpy(), kernel.shape[:-2] + (1, feature_group_count * kernel.shape[-1]))
A:keras.src.backend.numpy.nn.depthwise_conv_output->depthwise_conv(inputs, depthwise_kernel, strides, padding, data_format, dilation_rate)
A:keras.src.backend.numpy.nn.padding_values->compute_conv_transpose_padding_args_for_jax(input_shape=inputs.shape, kernel_shape=kernel.shape, strides=strides, padding=padding, output_padding=output_padding, dilation_rate=dilation_rate)
A:keras.src.backend.numpy.nn.input_shape->tuple(input_shape[:-1])
A:keras.src.backend.numpy.nn.categorical->numpy.moveaxis(categorical, -1, axis)
A:keras.src.backend.numpy.nn.outputs->numpy.max(one_hot(cast(x, 'int32'), num_classes, axis=axis, dtype=dtype), axis=reduction_axis)
A:keras.src.backend.numpy.nn.target->numpy.array(target)
A:keras.src.backend.numpy.nn.output->numpy.clip(output, epsilon(), 1.0 - epsilon())
A:keras.src.backend.numpy.nn.log_prob->numpy.log(output)
A:keras.src.backend.numpy.nn.ori_dtype->standardize_dtype(x.dtype)
A:keras.src.backend.numpy.nn.mean->numpy.reshape(mean, shape)
A:keras.src.backend.numpy.nn.variance->numpy.reshape(variance, shape)
A:keras.src.backend.numpy.nn.scale->numpy.reshape(scale, shape)
A:keras.src.backend.numpy.nn.offset->numpy.reshape(offset, shape)
keras.src.backend.nn._convert_to_lax_conv_dimension_numbers(num_spatial_dims,data_format='channels_last',transpose=False)
keras.src.backend.nn._convert_to_spatial_operand(x,num_spatial_dims,data_format='channels_last',include_batch_and_channels=True)
keras.src.backend.nn._pool(inputs,initial_value,reduce_fn,pool_size,strides=None,padding='valid')
keras.src.backend.nn.average_pool(inputs,pool_size,strides,padding,data_format=None)
keras.src.backend.nn.batch_normalization(x,mean,variance,axis,offset=None,scale=None,epsilon=0.001)
keras.src.backend.nn.binary_crossentropy(target,output,from_logits=False)
keras.src.backend.nn.categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.src.backend.nn.conv(inputs,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.nn.conv_transpose(inputs,kernel,strides=1,padding='valid',output_padding=None,data_format=None,dilation_rate=1)
keras.src.backend.nn.depthwise_conv(inputs,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.nn.elu(x,alpha=1.0)
keras.src.backend.nn.gelu(x,approximate=True)
keras.src.backend.nn.hard_sigmoid(x)
keras.src.backend.nn.hard_silu(x)
keras.src.backend.nn.leaky_relu(x,negative_slope=0.2)
keras.src.backend.nn.log_sigmoid(x)
keras.src.backend.nn.log_softmax(x,axis=None)
keras.src.backend.nn.max_pool(inputs,pool_size,strides=None,padding='valid',data_format=None)
keras.src.backend.nn.moments(x,axes,keepdims=False,synchronized=False)
keras.src.backend.nn.multi_hot(x,num_classes,axis=-1,dtype='float32')
keras.src.backend.nn.one_hot(x,num_classes,axis=-1,dtype='float32')
keras.src.backend.nn.relu(x)
keras.src.backend.nn.relu6(x)
keras.src.backend.nn.selu(x,alpha=1.6732632423543772,scale=1.0507009873554805)
keras.src.backend.nn.separable_conv(inputs,depthwise_kernel,pointwise_kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.nn.sigmoid(x)
keras.src.backend.nn.silu(x)
keras.src.backend.nn.softmax(x,axis=None)
keras.src.backend.nn.softplus(x)
keras.src.backend.nn.softsign(x)
keras.src.backend.nn.sparse_categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.src.backend.nn.tanh(x)
keras.src.backend.numpy.nn._convert_to_lax_conv_dimension_numbers(num_spatial_dims,data_format='channels_last',transpose=False)
keras.src.backend.numpy.nn._convert_to_spatial_operand(x,num_spatial_dims,data_format='channels_last',include_batch_and_channels=True)
keras.src.backend.numpy.nn._pool(inputs,initial_value,reduce_fn,pool_size,strides=None,padding='valid')
keras.src.backend.numpy.nn.average_pool(inputs,pool_size,strides,padding,data_format=None)
keras.src.backend.numpy.nn.batch_normalization(x,mean,variance,axis,offset=None,scale=None,epsilon=0.001)
keras.src.backend.numpy.nn.binary_crossentropy(target,output,from_logits=False)
keras.src.backend.numpy.nn.categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.src.backend.numpy.nn.conv(inputs,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.numpy.nn.conv_transpose(inputs,kernel,strides=1,padding='valid',output_padding=None,data_format=None,dilation_rate=1)
keras.src.backend.numpy.nn.depthwise_conv(inputs,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.numpy.nn.elu(x,alpha=1.0)
keras.src.backend.numpy.nn.gelu(x,approximate=True)
keras.src.backend.numpy.nn.hard_sigmoid(x)
keras.src.backend.numpy.nn.hard_silu(x)
keras.src.backend.numpy.nn.leaky_relu(x,negative_slope=0.2)
keras.src.backend.numpy.nn.log_sigmoid(x)
keras.src.backend.numpy.nn.log_softmax(x,axis=None)
keras.src.backend.numpy.nn.max_pool(inputs,pool_size,strides=None,padding='valid',data_format=None)
keras.src.backend.numpy.nn.moments(x,axes,keepdims=False,synchronized=False)
keras.src.backend.numpy.nn.multi_hot(x,num_classes,axis=-1,dtype='float32')
keras.src.backend.numpy.nn.one_hot(x,num_classes,axis=-1,dtype='float32')
keras.src.backend.numpy.nn.relu(x)
keras.src.backend.numpy.nn.relu6(x)
keras.src.backend.numpy.nn.selu(x,alpha=1.6732632423543772,scale=1.0507009873554805)
keras.src.backend.numpy.nn.separable_conv(inputs,depthwise_kernel,pointwise_kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.numpy.nn.sigmoid(x)
keras.src.backend.numpy.nn.silu(x)
keras.src.backend.numpy.nn.softmax(x,axis=None)
keras.src.backend.numpy.nn.softplus(x)
keras.src.backend.numpy.nn.softsign(x)
keras.src.backend.numpy.nn.sparse_categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.src.backend.numpy.nn.tanh(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/numpy/core.py----------------------------------------
A:keras.src.backend.numpy.core.self._value->numpy.array(value, dtype=self._dtype)
A:keras.src.backend.numpy.core.dtype->result_type(*[getattr(item, 'dtype', type(item)) for item in tree.flatten(x)])
A:keras.src.backend.numpy.core.none_in_shape->any(map(has_none_shape, tree.flatten((args, kwargs))))
A:keras.src.backend.numpy.core.shape->list(x1.shape)
A:keras.src.backend.numpy.core.(args_1, kwargs_1)->keras.src.utils.tree.map_structure(lambda x: convert_keras_tensor_to_numpy(x, fill_value=83), (args, kwargs))
A:keras.src.backend.numpy.core.outputs_1->fn(*args_1, **kwargs_1)
A:keras.src.backend.numpy.core.(args_2, kwargs_2)->keras.src.utils.tree.map_structure(lambda x: convert_keras_tensor_to_numpy(x, fill_value=89), (args, kwargs))
A:keras.src.backend.numpy.core.outputs_2->fn(*args_2, **kwargs_2)
A:keras.src.backend.numpy.core.flat_out_1->keras.src.utils.tree.flatten(outputs_1)
A:keras.src.backend.numpy.core.flat_out_2->keras.src.utils.tree.flatten(outputs_2)
A:keras.src.backend.numpy.core.outputs->keras.src.utils.tree.pack_sequence_as(outputs_1, flat_out)
A:keras.src.backend.numpy.core.output_spec->keras.src.utils.tree.map_structure(convert_numpy_to_keras_tensor, outputs)
A:keras.src.backend.numpy.core.indices->numpy.transpose(indices)
A:keras.src.backend.numpy.core.values->numpy.reshape(values, [-1] + list(value_shape))
A:keras.src.backend.numpy.core.zeros->numpy.zeros(shape, dtype=values.dtype)
A:keras.src.backend.numpy.core.mesh->numpy.ix_(*indices)
A:keras.src.backend.numpy.core.is_tuple->isinstance(loop_vars, (tuple, list))
A:keras.src.backend.numpy.core.loop_vars->tuple(loop_vars)
A:keras.src.backend.numpy.core.val->body_fun(i, val)
A:keras.src.backend.numpy.core.x->numpy.moveaxis(x, axis, 0)
keras.src.backend.Variable(KerasVariable)
keras.src.backend.Variable.__array__(self)
keras.src.backend.Variable._convert_to_tensor(self,value,dtype=None)
keras.src.backend.Variable._direct_assign(self,value)
keras.src.backend.Variable._initialize(self,value)
keras.src.backend.cast(x,dtype)
keras.src.backend.compute_output_spec(fn,*args,**kwargs)
keras.src.backend.cond(pred,true_fn,false_fn)
keras.src.backend.convert_to_numpy(x)
keras.src.backend.convert_to_tensor(x,dtype=None,sparse=None)
keras.src.backend.core.custom_gradient(fun)
keras.src.backend.core.fori_loop(lower,upper,body_fun,init_val)
keras.src.backend.core.scatter(indices,values,shape)
keras.src.backend.core.scatter_update(inputs,indices,updates)
keras.src.backend.core.slice(inputs,start_indices,lengths)
keras.src.backend.core.slice_update(inputs,start_indices,updates)
keras.src.backend.core.stop_gradient(x)
keras.src.backend.core.unstack(x,num=None,axis=0)
keras.src.backend.core.while_loop(cond,body,loop_vars,maximum_iterations=None)
keras.src.backend.is_tensor(x)
keras.src.backend.numpy.core.Variable(KerasVariable)
keras.src.backend.numpy.core.Variable.__array__(self)
keras.src.backend.numpy.core.Variable._convert_to_tensor(self,value,dtype=None)
keras.src.backend.numpy.core.Variable._direct_assign(self,value)
keras.src.backend.numpy.core.Variable._initialize(self,value)
keras.src.backend.numpy.core.cast(x,dtype)
keras.src.backend.numpy.core.compute_output_spec(fn,*args,**kwargs)
keras.src.backend.numpy.core.cond(pred,true_fn,false_fn)
keras.src.backend.numpy.core.convert_to_numpy(x)
keras.src.backend.numpy.core.convert_to_tensor(x,dtype=None,sparse=None)
keras.src.backend.numpy.core.custom_gradient(fun)
keras.src.backend.numpy.core.fori_loop(lower,upper,body_fun,init_val)
keras.src.backend.numpy.core.is_tensor(x)
keras.src.backend.numpy.core.scatter(indices,values,shape)
keras.src.backend.numpy.core.scatter_update(inputs,indices,updates)
keras.src.backend.numpy.core.shape(x)
keras.src.backend.numpy.core.slice(inputs,start_indices,lengths)
keras.src.backend.numpy.core.slice_update(inputs,start_indices,updates)
keras.src.backend.numpy.core.stop_gradient(x)
keras.src.backend.numpy.core.unstack(x,num=None,axis=0)
keras.src.backend.numpy.core.vectorized_map(function,elements)
keras.src.backend.numpy.core.while_loop(cond,body,loop_vars,maximum_iterations=None)
keras.src.backend.shape(x)
keras.src.backend.vectorized_map(function,elements)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/numpy/numpy.py----------------------------------------
A:keras.src.backend.numpy.numpy.x1->convert_to_tensor(x1, dtype)
A:keras.src.backend.numpy.numpy.x2->convert_to_tensor(x2, dtype)
A:keras.src.backend.numpy.numpy.dtype->keras.src.backend.common.dtypes.result_type(getattr(x1, 'dtype', type(x1)), getattr(x2, 'dtype', type(x2)))
A:keras.src.backend.numpy.numpy.operands->keras.src.utils.tree.map_structure(lambda x: x.astype(compute_dtype), operands)
A:keras.src.backend.numpy.numpy.dtypes_to_resolve->list(set((standardize_dtype(x.dtype) for x in operands)))
A:keras.src.backend.numpy.numpy.result_dtype->keras.src.backend.common.dtypes.result_type(x.dtype, float)
A:keras.src.backend.numpy.numpy.x1_dtype->standardize_dtype(x1.dtype)
A:keras.src.backend.numpy.numpy.x2_dtype->standardize_dtype(x2.dtype)
A:keras.src.backend.numpy.numpy.axis->standardize_axis_for_numpy(axis)
A:keras.src.backend.numpy.numpy.x->convert_to_tensor(x)
A:keras.src.backend.numpy.numpy.ori_dtype->standardize_dtype(x.dtype)
A:keras.src.backend.numpy.numpy.weights->convert_to_tensor(weights)
A:keras.src.backend.numpy.numpy.bincounts->list(map(bincount_fn, zip(x, weights)))
A:keras.src.backend.numpy.numpy.dtype_set->set([getattr(x, 'dtype', type(x)) for x in xs])
A:keras.src.backend.numpy.numpy.xs->keras.src.utils.tree.map_structure(lambda x: convert_to_tensor(x).astype(dtype), xs)
A:keras.src.backend.numpy.numpy.axis1->standardize_axis_for_numpy(axis1)
A:keras.src.backend.numpy.numpy.axis2->standardize_axis_for_numpy(axis2)
A:keras.src.backend.numpy.numpy.y->y.astype(dtype).astype(dtype)
A:keras.src.backend.numpy.numpy.compute_dtype->keras.src.backend.common.dtypes.result_type(x.dtype, 'float32')
keras.src.backend.abs(x)
keras.src.backend.absolute(x)
keras.src.backend.add(x1,x2)
keras.src.backend.all(x,axis=None,keepdims=False)
keras.src.backend.amax(x,axis=None,keepdims=False)
keras.src.backend.amin(x,axis=None,keepdims=False)
keras.src.backend.any(x,axis=None,keepdims=False)
keras.src.backend.append(x1,x2,axis=None)
keras.src.backend.arange(start,stop=None,step=None,dtype=None)
keras.src.backend.arccos(x)
keras.src.backend.arccosh(x)
keras.src.backend.arcsin(x)
keras.src.backend.arcsinh(x)
keras.src.backend.arctan(x)
keras.src.backend.arctan2(x1,x2)
keras.src.backend.arctanh(x)
keras.src.backend.argmax(x,axis=None)
keras.src.backend.argmin(x,axis=None)
keras.src.backend.argsort(x,axis=-1)
keras.src.backend.array(x,dtype=None)
keras.src.backend.average(x,axis=None,weights=None)
keras.src.backend.bincount(x,weights=None,minlength=0)
keras.src.backend.broadcast_to(x,shape)
keras.src.backend.ceil(x)
keras.src.backend.clip(x,x_min,x_max)
keras.src.backend.concatenate(xs,axis=0)
keras.src.backend.conj(x)
keras.src.backend.conjugate(x)
keras.src.backend.copy(x)
keras.src.backend.cos(x)
keras.src.backend.cosh(x)
keras.src.backend.count_nonzero(x,axis=None)
keras.src.backend.cross(x1,x2,axisa=-1,axisb=-1,axisc=-1,axis=None)
keras.src.backend.cumprod(x,axis=None,dtype=None)
keras.src.backend.cumsum(x,axis=None,dtype=None)
keras.src.backend.diag(x,k=0)
keras.src.backend.diagonal(x,offset=0,axis1=0,axis2=1)
keras.src.backend.diff(a,n=1,axis=-1)
keras.src.backend.digitize(x,bins)
keras.src.backend.divide(x1,x2)
keras.src.backend.divide_no_nan(x1,x2)
keras.src.backend.dot(x,y)
keras.src.backend.einsum(subscripts,*operands,**kwargs)
keras.src.backend.empty(shape,dtype=None)
keras.src.backend.equal(x1,x2)
keras.src.backend.exp(x)
keras.src.backend.expand_dims(x,axis)
keras.src.backend.expm1(x)
keras.src.backend.eye(N,M=None,k=0,dtype=None)
keras.src.backend.flip(x,axis=None)
keras.src.backend.floor(x)
keras.src.backend.floor_divide(x1,x2)
keras.src.backend.full(shape,fill_value,dtype=None)
keras.src.backend.full_like(x,fill_value,dtype=None)
keras.src.backend.greater(x1,x2)
keras.src.backend.greater_equal(x1,x2)
keras.src.backend.hstack(xs)
keras.src.backend.identity(n,dtype=None)
keras.src.backend.imag(x)
keras.src.backend.isclose(x1,x2)
keras.src.backend.isfinite(x)
keras.src.backend.isinf(x)
keras.src.backend.isnan(x)
keras.src.backend.less(x1,x2)
keras.src.backend.less_equal(x1,x2)
keras.src.backend.linspace(start,stop,num=50,endpoint=True,retstep=False,dtype=None,axis=0)
keras.src.backend.log(x)
keras.src.backend.log10(x)
keras.src.backend.log1p(x)
keras.src.backend.log2(x)
keras.src.backend.logaddexp(x1,x2)
keras.src.backend.logical_and(x1,x2)
keras.src.backend.logical_not(x)
keras.src.backend.logical_or(x1,x2)
keras.src.backend.logical_xor(x1,x2)
keras.src.backend.logspace(start,stop,num=50,endpoint=True,base=10,dtype=None,axis=0)
keras.src.backend.matmul(x1,x2)
keras.src.backend.max(x,axis=None,keepdims=False,initial=None)
keras.src.backend.maximum(x1,x2)
keras.src.backend.mean(x,axis=None,keepdims=False)
keras.src.backend.median(x,axis=None,keepdims=False)
keras.src.backend.meshgrid(*x,indexing='xy')
keras.src.backend.min(x,axis=None,keepdims=False,initial=None)
keras.src.backend.minimum(x1,x2)
keras.src.backend.mod(x1,x2)
keras.src.backend.moveaxis(x,source,destination)
keras.src.backend.multiply(x1,x2)
keras.src.backend.nan_to_num(x)
keras.src.backend.ndim(x)
keras.src.backend.negative(x)
keras.src.backend.nonzero(x)
keras.src.backend.not_equal(x1,x2)
keras.src.backend.numpy.numpy.abs(x)
keras.src.backend.numpy.numpy.absolute(x)
keras.src.backend.numpy.numpy.add(x1,x2)
keras.src.backend.numpy.numpy.all(x,axis=None,keepdims=False)
keras.src.backend.numpy.numpy.amax(x,axis=None,keepdims=False)
keras.src.backend.numpy.numpy.amin(x,axis=None,keepdims=False)
keras.src.backend.numpy.numpy.any(x,axis=None,keepdims=False)
keras.src.backend.numpy.numpy.append(x1,x2,axis=None)
keras.src.backend.numpy.numpy.arange(start,stop=None,step=None,dtype=None)
keras.src.backend.numpy.numpy.arccos(x)
keras.src.backend.numpy.numpy.arccosh(x)
keras.src.backend.numpy.numpy.arcsin(x)
keras.src.backend.numpy.numpy.arcsinh(x)
keras.src.backend.numpy.numpy.arctan(x)
keras.src.backend.numpy.numpy.arctan2(x1,x2)
keras.src.backend.numpy.numpy.arctanh(x)
keras.src.backend.numpy.numpy.argmax(x,axis=None)
keras.src.backend.numpy.numpy.argmin(x,axis=None)
keras.src.backend.numpy.numpy.argsort(x,axis=-1)
keras.src.backend.numpy.numpy.array(x,dtype=None)
keras.src.backend.numpy.numpy.average(x,axis=None,weights=None)
keras.src.backend.numpy.numpy.bincount(x,weights=None,minlength=0)
keras.src.backend.numpy.numpy.broadcast_to(x,shape)
keras.src.backend.numpy.numpy.ceil(x)
keras.src.backend.numpy.numpy.clip(x,x_min,x_max)
keras.src.backend.numpy.numpy.concatenate(xs,axis=0)
keras.src.backend.numpy.numpy.conj(x)
keras.src.backend.numpy.numpy.conjugate(x)
keras.src.backend.numpy.numpy.copy(x)
keras.src.backend.numpy.numpy.cos(x)
keras.src.backend.numpy.numpy.cosh(x)
keras.src.backend.numpy.numpy.count_nonzero(x,axis=None)
keras.src.backend.numpy.numpy.cross(x1,x2,axisa=-1,axisb=-1,axisc=-1,axis=None)
keras.src.backend.numpy.numpy.cumprod(x,axis=None,dtype=None)
keras.src.backend.numpy.numpy.cumsum(x,axis=None,dtype=None)
keras.src.backend.numpy.numpy.diag(x,k=0)
keras.src.backend.numpy.numpy.diagonal(x,offset=0,axis1=0,axis2=1)
keras.src.backend.numpy.numpy.diff(a,n=1,axis=-1)
keras.src.backend.numpy.numpy.digitize(x,bins)
keras.src.backend.numpy.numpy.divide(x1,x2)
keras.src.backend.numpy.numpy.divide_no_nan(x1,x2)
keras.src.backend.numpy.numpy.dot(x,y)
keras.src.backend.numpy.numpy.einsum(subscripts,*operands,**kwargs)
keras.src.backend.numpy.numpy.empty(shape,dtype=None)
keras.src.backend.numpy.numpy.equal(x1,x2)
keras.src.backend.numpy.numpy.exp(x)
keras.src.backend.numpy.numpy.expand_dims(x,axis)
keras.src.backend.numpy.numpy.expm1(x)
keras.src.backend.numpy.numpy.eye(N,M=None,k=0,dtype=None)
keras.src.backend.numpy.numpy.flip(x,axis=None)
keras.src.backend.numpy.numpy.floor(x)
keras.src.backend.numpy.numpy.floor_divide(x1,x2)
keras.src.backend.numpy.numpy.full(shape,fill_value,dtype=None)
keras.src.backend.numpy.numpy.full_like(x,fill_value,dtype=None)
keras.src.backend.numpy.numpy.greater(x1,x2)
keras.src.backend.numpy.numpy.greater_equal(x1,x2)
keras.src.backend.numpy.numpy.hstack(xs)
keras.src.backend.numpy.numpy.identity(n,dtype=None)
keras.src.backend.numpy.numpy.imag(x)
keras.src.backend.numpy.numpy.isclose(x1,x2)
keras.src.backend.numpy.numpy.isfinite(x)
keras.src.backend.numpy.numpy.isinf(x)
keras.src.backend.numpy.numpy.isnan(x)
keras.src.backend.numpy.numpy.less(x1,x2)
keras.src.backend.numpy.numpy.less_equal(x1,x2)
keras.src.backend.numpy.numpy.linspace(start,stop,num=50,endpoint=True,retstep=False,dtype=None,axis=0)
keras.src.backend.numpy.numpy.log(x)
keras.src.backend.numpy.numpy.log10(x)
keras.src.backend.numpy.numpy.log1p(x)
keras.src.backend.numpy.numpy.log2(x)
keras.src.backend.numpy.numpy.logaddexp(x1,x2)
keras.src.backend.numpy.numpy.logical_and(x1,x2)
keras.src.backend.numpy.numpy.logical_not(x)
keras.src.backend.numpy.numpy.logical_or(x1,x2)
keras.src.backend.numpy.numpy.logical_xor(x1,x2)
keras.src.backend.numpy.numpy.logspace(start,stop,num=50,endpoint=True,base=10,dtype=None,axis=0)
keras.src.backend.numpy.numpy.matmul(x1,x2)
keras.src.backend.numpy.numpy.max(x,axis=None,keepdims=False,initial=None)
keras.src.backend.numpy.numpy.maximum(x1,x2)
keras.src.backend.numpy.numpy.mean(x,axis=None,keepdims=False)
keras.src.backend.numpy.numpy.median(x,axis=None,keepdims=False)
keras.src.backend.numpy.numpy.meshgrid(*x,indexing='xy')
keras.src.backend.numpy.numpy.min(x,axis=None,keepdims=False,initial=None)
keras.src.backend.numpy.numpy.minimum(x1,x2)
keras.src.backend.numpy.numpy.mod(x1,x2)
keras.src.backend.numpy.numpy.moveaxis(x,source,destination)
keras.src.backend.numpy.numpy.multiply(x1,x2)
keras.src.backend.numpy.numpy.nan_to_num(x)
keras.src.backend.numpy.numpy.ndim(x)
keras.src.backend.numpy.numpy.negative(x)
keras.src.backend.numpy.numpy.nonzero(x)
keras.src.backend.numpy.numpy.not_equal(x1,x2)
keras.src.backend.numpy.numpy.ones(shape,dtype=None)
keras.src.backend.numpy.numpy.ones_like(x,dtype=None)
keras.src.backend.numpy.numpy.outer(x1,x2)
keras.src.backend.numpy.numpy.pad(x,pad_width,mode='constant',constant_values=None)
keras.src.backend.numpy.numpy.power(x1,x2)
keras.src.backend.numpy.numpy.prod(x,axis=None,keepdims=False,dtype=None)
keras.src.backend.numpy.numpy.quantile(x,q,axis=None,method='linear',keepdims=False)
keras.src.backend.numpy.numpy.ravel(x)
keras.src.backend.numpy.numpy.real(x)
keras.src.backend.numpy.numpy.reciprocal(x)
keras.src.backend.numpy.numpy.repeat(x,repeats,axis=None)
keras.src.backend.numpy.numpy.reshape(x,newshape)
keras.src.backend.numpy.numpy.roll(x,shift,axis=None)
keras.src.backend.numpy.numpy.round(x,decimals=0)
keras.src.backend.numpy.numpy.sign(x)
keras.src.backend.numpy.numpy.sin(x)
keras.src.backend.numpy.numpy.sinh(x)
keras.src.backend.numpy.numpy.size(x)
keras.src.backend.numpy.numpy.sort(x,axis=-1)
keras.src.backend.numpy.numpy.split(x,indices_or_sections,axis=0)
keras.src.backend.numpy.numpy.sqrt(x)
keras.src.backend.numpy.numpy.square(x)
keras.src.backend.numpy.numpy.squeeze(x,axis=None)
keras.src.backend.numpy.numpy.stack(x,axis=0)
keras.src.backend.numpy.numpy.std(x,axis=None,keepdims=False)
keras.src.backend.numpy.numpy.subtract(x1,x2)
keras.src.backend.numpy.numpy.sum(x,axis=None,keepdims=False)
keras.src.backend.numpy.numpy.swapaxes(x,axis1,axis2)
keras.src.backend.numpy.numpy.take(x,indices,axis=None)
keras.src.backend.numpy.numpy.take_along_axis(x,indices,axis=None)
keras.src.backend.numpy.numpy.tan(x)
keras.src.backend.numpy.numpy.tanh(x)
keras.src.backend.numpy.numpy.tensordot(x1,x2,axes=2)
keras.src.backend.numpy.numpy.tile(x,repeats)
keras.src.backend.numpy.numpy.trace(x,offset=0,axis1=0,axis2=1)
keras.src.backend.numpy.numpy.transpose(x,axes=None)
keras.src.backend.numpy.numpy.tri(N,M=None,k=0,dtype=None)
keras.src.backend.numpy.numpy.tril(x,k=0)
keras.src.backend.numpy.numpy.triu(x,k=0)
keras.src.backend.numpy.numpy.true_divide(x1,x2)
keras.src.backend.numpy.numpy.var(x,axis=None,keepdims=False)
keras.src.backend.numpy.numpy.vdot(x1,x2)
keras.src.backend.numpy.numpy.vstack(xs)
keras.src.backend.numpy.numpy.where(condition,x1,x2)
keras.src.backend.numpy.numpy.zeros(shape,dtype=None)
keras.src.backend.numpy.numpy.zeros_like(x,dtype=None)
keras.src.backend.ones(shape,dtype=None)
keras.src.backend.ones_like(x,dtype=None)
keras.src.backend.outer(x1,x2)
keras.src.backend.pad(x,pad_width,mode='constant',constant_values=None)
keras.src.backend.power(x1,x2)
keras.src.backend.prod(x,axis=None,keepdims=False,dtype=None)
keras.src.backend.quantile(x,q,axis=None,method='linear',keepdims=False)
keras.src.backend.ravel(x)
keras.src.backend.real(x)
keras.src.backend.reciprocal(x)
keras.src.backend.repeat(x,repeats,axis=None)
keras.src.backend.reshape(x,newshape)
keras.src.backend.roll(x,shift,axis=None)
keras.src.backend.round(x,decimals=0)
keras.src.backend.sign(x)
keras.src.backend.sin(x)
keras.src.backend.sinh(x)
keras.src.backend.size(x)
keras.src.backend.sort(x,axis=-1)
keras.src.backend.split(x,indices_or_sections,axis=0)
keras.src.backend.sqrt(x)
keras.src.backend.square(x)
keras.src.backend.squeeze(x,axis=None)
keras.src.backend.stack(x,axis=0)
keras.src.backend.std(x,axis=None,keepdims=False)
keras.src.backend.subtract(x1,x2)
keras.src.backend.sum(x,axis=None,keepdims=False)
keras.src.backend.swapaxes(x,axis1,axis2)
keras.src.backend.take(x,indices,axis=None)
keras.src.backend.take_along_axis(x,indices,axis=None)
keras.src.backend.tan(x)
keras.src.backend.tanh(x)
keras.src.backend.tensordot(x1,x2,axes=2)
keras.src.backend.tile(x,repeats)
keras.src.backend.trace(x,offset=0,axis1=0,axis2=1)
keras.src.backend.transpose(x,axes=None)
keras.src.backend.tri(N,M=None,k=0,dtype=None)
keras.src.backend.tril(x,k=0)
keras.src.backend.triu(x,k=0)
keras.src.backend.true_divide(x1,x2)
keras.src.backend.var(x,axis=None,keepdims=False)
keras.src.backend.vdot(x1,x2)
keras.src.backend.vstack(xs)
keras.src.backend.where(condition,x1,x2)
keras.src.backend.zeros(shape,dtype=None)
keras.src.backend.zeros_like(x,dtype=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/numpy/trainer.py----------------------------------------
A:keras.src.backend.numpy.trainer.(x, y, sample_weight)->keras.src.trainers.data_adapters.data_adapter_utils.unpack_x_y_sample_weight(data_batch)
A:keras.src.backend.numpy.trainer.y_pred->keras.src.backend.compute_output_spec(self, x)
A:keras.src.backend.numpy.trainer.loss->self.compute_loss(x=x, y=y, y_pred=y_pred, sample_weight=sample_weight)
A:keras.src.backend.numpy.trainer.(x, _, _)->keras.src.trainers.data_adapters.data_adapter_utils.unpack_x_y_sample_weight(data)
A:keras.src.backend.numpy.trainer.logs->keras.src.utils.tree.map_structure(lambda x: np.array(x), logs)
A:keras.src.backend.numpy.trainer.outputs->append_to_outputs(batch_outputs, outputs)
A:keras.src.backend.numpy.trainer.step_outputs->one_predict_step([single_step_data])
A:keras.src.backend.numpy.trainer.data_batch->keras.src.utils.tree.map_structure(to_symbolic_input, data_batch)
A:keras.src.backend.numpy.trainer.epoch_iterator->EpochIterator(x=x, y=y, sample_weight=sample_weight, batch_size=batch_size, steps_per_epoch=steps, shuffle=False, steps_per_execution=self.steps_per_execution)
A:keras.src.backend.numpy.trainer.callbacks->keras.src.callbacks.CallbackList(callbacks, add_history=True, add_progbar=verbose != 0, verbose=verbose, epochs=1, steps=epoch_iterator.num_batches, model=self)
A:keras.src.backend.numpy.trainer.batch_outputs->keras.src.utils.tree.map_structure(backend.convert_to_numpy, batch_outputs)
A:keras.src.backend.numpy.trainer.use_cached_eval_dataset->kwargs.pop('_use_cached_eval_dataset', False)
keras.src.backend.numpy.trainer.NumpyTrainer(self)
keras.src.backend.numpy.trainer.NumpyTrainer.__init__(self)
keras.src.backend.numpy.trainer.NumpyTrainer._symbolic_build(self,data_batch)
keras.src.backend.numpy.trainer.NumpyTrainer.evaluate(self,x=None,y=None,batch_size=None,verbose='auto',sample_weight=None,steps=None,callbacks=None,return_dict=False,**kwargs)
keras.src.backend.numpy.trainer.NumpyTrainer.fit(self,x=None,y=None,batch_size=None,epochs=1,verbose='auto',callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None,validation_batch_size=None,validation_freq=1)
keras.src.backend.numpy.trainer.NumpyTrainer.make_predict_function(self,force=False)
keras.src.backend.numpy.trainer.NumpyTrainer.make_test_function(self,force=False)
keras.src.backend.numpy.trainer.NumpyTrainer.predict(self,x,batch_size=None,verbose='auto',steps=None,callbacks=None)
keras.src.backend.numpy.trainer.NumpyTrainer.predict_on_batch(self,x)
keras.src.backend.numpy.trainer.NumpyTrainer.predict_step(self,data)
keras.src.backend.numpy.trainer.NumpyTrainer.test_on_batch(self,x,y=None,sample_weight=None,return_dict=False)
keras.src.backend.numpy.trainer.NumpyTrainer.test_step(self,data)
keras.src.backend.numpy.trainer.NumpyTrainer.train_on_batch(self,x,y=None,sample_weight=None,class_weight=None,return_dict=False)
keras.src.backend.trainer.NumpyTrainer(self)
keras.src.backend.trainer.NumpyTrainer._symbolic_build(self,data_batch)
keras.src.backend.trainer.NumpyTrainer.evaluate(self,x=None,y=None,batch_size=None,verbose='auto',sample_weight=None,steps=None,callbacks=None,return_dict=False,**kwargs)
keras.src.backend.trainer.NumpyTrainer.fit(self,x=None,y=None,batch_size=None,epochs=1,verbose='auto',callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None,validation_batch_size=None,validation_freq=1)
keras.src.backend.trainer.NumpyTrainer.make_predict_function(self,force=False)
keras.src.backend.trainer.NumpyTrainer.make_test_function(self,force=False)
keras.src.backend.trainer.NumpyTrainer.predict(self,x,batch_size=None,verbose='auto',steps=None,callbacks=None)
keras.src.backend.trainer.NumpyTrainer.predict_on_batch(self,x)
keras.src.backend.trainer.NumpyTrainer.predict_step(self,data)
keras.src.backend.trainer.NumpyTrainer.test_on_batch(self,x,y=None,sample_weight=None,return_dict=False)
keras.src.backend.trainer.NumpyTrainer.test_step(self,data)
keras.src.backend.trainer.NumpyTrainer.train_on_batch(self,x,y=None,sample_weight=None,class_weight=None,return_dict=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/numpy/linalg.py----------------------------------------
A:keras.src.backend.numpy.linalg._lu_factor_gufunc->numpy.vectorize(sl.lu_factor, signature=signature)
A:keras.src.backend.numpy.linalg.x->convert_to_tensor(x)
A:keras.src.backend.numpy.linalg.dtype->keras.src.backend.common.dtypes.result_type(x.dtype, 'float32')
A:keras.src.backend.numpy.linalg._vectorized_solve_triangular->numpy.vectorize(lambda a, b: sl.solve_triangular(a, b, lower=lower), signature='(n,n),(n,m)->(n,m)')
A:keras.src.backend.numpy.linalg.b->numpy.expand_dims(b, axis=-1)
keras.src.backend.linalg.cholesky(a)
keras.src.backend.linalg.det(a)
keras.src.backend.linalg.eig(a)
keras.src.backend.linalg.inv(a)
keras.src.backend.linalg.lu_factor(a)
keras.src.backend.linalg.norm(x,ord=None,axis=None,keepdims=False)
keras.src.backend.linalg.qr(x,mode='reduced')
keras.src.backend.linalg.solve(a,b)
keras.src.backend.linalg.solve_triangular(a,b,lower=False)
keras.src.backend.linalg.svd(x,full_matrices=True,compute_uv=True)
keras.src.backend.numpy.linalg.cholesky(a)
keras.src.backend.numpy.linalg.det(a)
keras.src.backend.numpy.linalg.eig(a)
keras.src.backend.numpy.linalg.inv(a)
keras.src.backend.numpy.linalg.lu_factor(a)
keras.src.backend.numpy.linalg.norm(x,ord=None,axis=None,keepdims=False)
keras.src.backend.numpy.linalg.qr(x,mode='reduced')
keras.src.backend.numpy.linalg.solve(a,b)
keras.src.backend.numpy.linalg.solve_triangular(a,b,lower=False)
keras.src.backend.numpy.linalg.svd(x,full_matrices=True,compute_uv=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/numpy/random.py----------------------------------------
A:keras.src.backend.numpy.random.seed->draw_seed(seed)
A:keras.src.backend.numpy.random.rng->numpy.random.default_rng(seed)
A:keras.src.backend.numpy.random.probabilities->softmax(logits_instance)
A:keras.src.backend.numpy.random.classes->numpy.arange(logits_instance.shape[-1])
A:keras.src.backend.numpy.random.samples->numpy.random.default_rng(seed).choice(classes, size=num_samples, p=probabilities)
A:keras.src.backend.numpy.random.output->numpy.random.default_rng(seed).integers(low=minval, high=maxval, size=shape, dtype=dtype)
A:keras.src.backend.numpy.random.flat_shape->numpy.prod(shape)
A:keras.src.backend.numpy.random.random_numbers->numpy.append(random_numbers, valid)
A:keras.src.backend.numpy.random.batch->numpy.random.default_rng(seed).normal(loc=mean, scale=stddev, size=flat_shape)
A:keras.src.backend.numpy.random.mask->numpy.broadcast_to(mask, inputs.shape)
A:keras.src.backend.numpy.random.sample->numpy.random.default_rng(seed).beta(a=alpha, b=beta, size=shape).astype(dtype)
keras.src.backend.numpy.random.beta(shape,alpha,beta,dtype=None,seed=None)
keras.src.backend.numpy.random.binomial(shape,counts,probabilities,dtype=None,seed=None)
keras.src.backend.numpy.random.categorical(logits,num_samples,dtype='int64',seed=None)
keras.src.backend.numpy.random.dropout(inputs,rate,noise_shape=None,seed=None)
keras.src.backend.numpy.random.gamma(shape,alpha,dtype=None,seed=None)
keras.src.backend.numpy.random.normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.src.backend.numpy.random.randint(shape,minval,maxval,dtype='int32',seed=None)
keras.src.backend.numpy.random.shuffle(x,axis=0,seed=None)
keras.src.backend.numpy.random.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.src.backend.numpy.random.uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)
keras.src.backend.random.beta(shape,alpha,beta,dtype=None,seed=None)
keras.src.backend.random.binomial(shape,counts,probabilities,dtype=None,seed=None)
keras.src.backend.random.categorical(logits,num_samples,dtype='int64',seed=None)
keras.src.backend.random.dropout(inputs,rate,noise_shape=None,seed=None)
keras.src.backend.random.gamma(shape,alpha,dtype=None,seed=None)
keras.src.backend.random.normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.src.backend.random.randint(shape,minval,maxval,dtype='int32',seed=None)
keras.src.backend.random.shuffle(x,axis=0,seed=None)
keras.src.backend.random.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.src.backend.random.uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/numpy/layer.py----------------------------------------
keras.src.backend.layer.NumpyLayer
keras.src.backend.numpy.layer.NumpyLayer


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/jax/math.py----------------------------------------
A:keras.src.backend.jax.math.targets_values->jax.numpy.take_along_axis(predictions, targets, axis=-1)
A:keras.src.backend.jax.math.max_x->jax.numpy.max(x, axis=axis, keepdims=True)
A:keras.src.backend.jax.math.batch_shape->list(batch_shape)
A:keras.src.backend.jax.math.x->cast(x, dtype)
A:keras.src.backend.jax.math.complex_input->_get_complex_tensor_from_tuple(x)
A:keras.src.backend.jax.math.complex_output->jax.numpy.fft.rfft(x, n=fft_length, axis=-1, norm='backward')
A:keras.src.backend.jax.math.win->jax.numpy.ones(sequence_length + l_pad + r_pad, dtype=dtype)
A:keras.src.backend.jax.math.scale->jax.numpy.sqrt(1.0 / win.sum() ** 2)
A:keras.src.backend.jax.math.result->jax.numpy.swapaxes(result, -2, -1)
A:keras.src.backend.jax.math.a->convert_to_tensor(a)
A:keras.src.backend.jax.math.b->convert_to_tensor(b)
A:keras.src.backend.jax.math.dtype->keras.src.backend.common.dtypes.result_type(x.dtype, float)
keras.src.backend.jax.math._get_complex_tensor_from_tuple(x)
keras.src.backend.jax.math.erf(x)
keras.src.backend.jax.math.erfinv(x)
keras.src.backend.jax.math.extract_sequences(x,sequence_length,sequence_stride)
keras.src.backend.jax.math.fft(x)
keras.src.backend.jax.math.fft2(x)
keras.src.backend.jax.math.in_top_k(targets,predictions,k)
keras.src.backend.jax.math.irfft(x,fft_length=None)
keras.src.backend.jax.math.istft(x,sequence_length,sequence_stride,fft_length,length=None,window='hann',center=True)
keras.src.backend.jax.math.logsumexp(x,axis=None,keepdims=False)
keras.src.backend.jax.math.norm(x,ord=None,axis=None,keepdims=False)
keras.src.backend.jax.math.qr(x,mode='reduced')
keras.src.backend.jax.math.rfft(x,fft_length=None)
keras.src.backend.jax.math.rsqrt(x)
keras.src.backend.jax.math.segment_max(data,segment_ids,num_segments=None,sorted=False)
keras.src.backend.jax.math.segment_sum(data,segment_ids,num_segments=None,sorted=False)
keras.src.backend.jax.math.solve(a,b)
keras.src.backend.jax.math.stft(x,sequence_length,sequence_stride,fft_length,window='hann',center=True)
keras.src.backend.jax.math.top_k(x,k,sorted=True)
keras.src.backend.math._get_complex_tensor_from_tuple(x)
keras.src.backend.math.erf(x)
keras.src.backend.math.erfinv(x)
keras.src.backend.math.extract_sequences(x,sequence_length,sequence_stride)
keras.src.backend.math.fft(x)
keras.src.backend.math.fft2(x)
keras.src.backend.math.in_top_k(targets,predictions,k)
keras.src.backend.math.irfft(x,fft_length=None)
keras.src.backend.math.istft(x,sequence_length,sequence_stride,fft_length,length=None,window='hann',center=True)
keras.src.backend.math.logsumexp(x,axis=None,keepdims=False)
keras.src.backend.math.norm(x,ord=None,axis=None,keepdims=False)
keras.src.backend.math.qr(x,mode='reduced')
keras.src.backend.math.rfft(x,fft_length=None)
keras.src.backend.math.rsqrt(x)
keras.src.backend.math.segment_max(data,segment_ids,num_segments=None,sorted=False)
keras.src.backend.math.segment_sum(data,segment_ids,num_segments=None,sorted=False)
keras.src.backend.math.solve(a,b)
keras.src.backend.math.stft(x,sequence_length,sequence_stride,fft_length,window='hann',center=True)
keras.src.backend.math.top_k(x,k,sorted=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/jax/rnn.py----------------------------------------
A:keras.src.backend.jax.rnn.axes->list(range(len(input_t.shape)))
A:keras.src.backend.jax.rnn.inputs->keras.src.utils.tree.map_structure(swap_batch_timestep, inputs)
A:keras.src.backend.jax.rnn.flattened_inputs->keras.src.utils.tree.flatten(inputs)
A:keras.src.backend.jax.rnn.mask->swap_batch_timestep(mask)
A:keras.src.backend.jax.rnn.mask_t->jax.numpy.expand_dims(mask_t, -1)
A:keras.src.backend.jax.rnn.states->keras.src.utils.tree.pack_sequence_as(states, flat_final_states)
A:keras.src.backend.jax.rnn.input_t->unstack(input_t)
A:keras.src.backend.jax.rnn.processed_input->keras.src.utils.tree.map_structure(_process_single_input_t, inputs)
A:keras.src.backend.jax.rnn.mask_list->unstack(mask)
A:keras.src.backend.jax.rnn.inp->_get_input_tensor(i)
A:keras.src.backend.jax.rnn.(output, new_states)->step_function(inp, tuple(states) + tuple(constants))
A:keras.src.backend.jax.rnn.tiled_mask_t->tuple((_expand_mask(mask_t, s) for s in flat_states))
A:keras.src.backend.jax.rnn.prev_output->jax.numpy.zeros_like(output)
A:keras.src.backend.jax.rnn.output->jax.numpy.where(tiled_mask_t, output, prev_output)
A:keras.src.backend.jax.rnn.flat_states->keras.src.utils.tree.flatten(states)
A:keras.src.backend.jax.rnn.flat_new_states->keras.src.utils.tree.flatten(new_states)
A:keras.src.backend.jax.rnn.flat_final_states->tuple((jnp.where(m, s, ps) for (m, s, ps) in zip(tiled_mask_t, flat_new_states, flat_states)))
A:keras.src.backend.jax.rnn.outputs->keras.src.utils.tree.map_structure(swap_batch_timestep, outputs)
A:keras.src.backend.jax.rnn.(output, states)->step_function(inp, tuple(states) + tuple(constants))
A:keras.src.backend.jax.rnn.is_masked->jax.numpy.all(jnp.logical_not(current_mask), axis=-1, keepdims=True)
A:keras.src.backend.jax.rnn.(output_t, new_states)->step_function(current_input, states)
A:keras.src.backend.jax.rnn.masked_outs->jax.numpy.where(is_masked, output_tm1, output_t)
A:keras.src.backend.jax.rnn.scope->keras.src.backend.common.stateless_scope.StatelessScope()
A:keras.src.backend.jax.rnn.(new_states, outputs)->jax.lax.scan(f=_step, init=initial_states, xs=scan_xs, reverse=go_backwards)
keras.src.backend.cudnn_ok(*args,**kwargs)
keras.src.backend.gru(*args,**kwargs)
keras.src.backend.jax.rnn.cudnn_ok(*args,**kwargs)
keras.src.backend.jax.rnn.gru(*args,**kwargs)
keras.src.backend.jax.rnn.lstm(*args,**kwargs)
keras.src.backend.jax.rnn.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None,time_major=False,zero_output_for_mask=False,return_all_outputs=True)
keras.src.backend.jax.rnn.unstack(x,axis=0)
keras.src.backend.lstm(*args,**kwargs)
keras.src.backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None,time_major=False,zero_output_for_mask=False,return_all_outputs=True)
keras.src.backend.rnn.unstack(x,axis=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/jax/image.py----------------------------------------
A:keras.src.backend.jax.image.size->tuple(size)
A:keras.src.backend.jax.image.transform->transform.at[:, 0:2, 2].set(0).at[:, 0:2, 2].set(0)
A:keras.src.backend.jax.image.image->jax.numpy.transpose(image, (0, 2, 3, 1))
A:keras.src.backend.jax.image.meshgrid->jax.numpy.meshgrid(*[jnp.arange(size) for size in image.shape[1:]], indexing='ij')
A:keras.src.backend.jax.image.indices->jax.numpy.tile(indices, (batch_size, 1, 1, 1, 1))
A:keras.src.backend.jax.image.offset->jax.numpy.pad(offset, pad_width=[[0, 0], [0, 1]])
A:keras.src.backend.jax.image.coordinates->jax.numpy.moveaxis(coordinates, source=-1, destination=1)
A:keras.src.backend.jax.image._map_coordinates->functools.partial(jax.scipy.ndimage.map_coordinates, order=AFFINE_TRANSFORM_INTERPOLATIONS[interpolation], mode=fill_mode, cval=fill_value)
A:keras.src.backend.jax.image.affined->jax.numpy.squeeze(affined, axis=0)
keras.src.backend.image.affine_transform(image,transform,interpolation='bilinear',fill_mode='constant',fill_value=0,data_format='channels_last')
keras.src.backend.image.map_coordinates(input,coordinates,order,fill_mode='constant',fill_value=0.0)
keras.src.backend.image.resize(image,size,interpolation='bilinear',antialias=False,data_format='channels_last')
keras.src.backend.jax.image.affine_transform(image,transform,interpolation='bilinear',fill_mode='constant',fill_value=0,data_format='channels_last')
keras.src.backend.jax.image.map_coordinates(input,coordinates,order,fill_mode='constant',fill_value=0.0)
keras.src.backend.jax.image.resize(image,size,interpolation='bilinear',antialias=False,data_format='channels_last')


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/jax/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/jax/optimizer.py----------------------------------------
A:keras.src.backend.jax.optimizer.new_g_accs->jax.lax.cond(is_update_step, lambda : [jnp.zeros(x.shape, dtype=x.dtype) for x in self._accumulated_gradients], lambda : [grads[i] + self._accumulated_gradients[i] for i in range(len(grads))])
A:keras.src.backend.jax.optimizer.grads->jax.lax.cond(is_update_step, lambda : [(grads[i] + self._accumulated_gradients[i]) / steps for i in range(len(grads))], lambda : list(grads))
A:keras.src.backend.jax.optimizer.new_trainable_vars->jax.lax.cond(is_update_step, lambda : [v.value for v in trainable_variables], lambda : current_trainable_vars_value)
A:keras.src.backend.jax.optimizer.new_opt_vars->jax.lax.cond(is_update_step, lambda : [v.value for v in self.variables], lambda : current_optimizer_vars_value)
A:keras.src.backend.jax.optimizer.should_overwrite_model_vars_int->should_overwrite_model_vars.astype('int32')
A:keras.src.backend.jax.optimizer.should_not_overwrite_model_vars_int->jax.numpy.logical_not(should_overwrite_model_vars).astype('int32')
keras.src.backend.jax.optimizer.JaxOptimizer(base_optimizer.BaseOptimizer)
keras.src.backend.jax.optimizer.JaxOptimizer._backend_apply_gradients(self,grads,trainable_variables)
keras.src.backend.optimizer.JaxOptimizer(base_optimizer.BaseOptimizer)
keras.src.backend.optimizer.JaxOptimizer._backend_apply_gradients(self,grads,trainable_variables)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/jax/sparse.py----------------------------------------
A:keras.src.backend.jax.sparse.result_dims->len(input_shape)
A:keras.src.backend.jax.sparse.canonical_axis->sorted(canonical_axis)
A:keras.src.backend.jax.sparse.output_shape->list(input_shape)
A:keras.src.backend.jax.sparse.x2_zeros->jax.numpy.zeros(x2.data.shape, x1.data.dtype)
A:keras.src.backend.jax.sparse.output_indices->jax.numpy.concatenate([x1.indices, x2.indices], axis=concat_axis)
A:keras.src.backend.jax.sparse.output_data->jax.numpy.concatenate([x1.data, x2_zeros], axis=concat_axis)
A:keras.src.backend.jax.sparse.output->jax.experimental.sparse.bcoo_sum_duplicates(output)
A:keras.src.backend.jax.sparse.x->jax.experimental.sparse.bcoo_sum_duplicates(x)
A:keras.src.backend.jax.sparse.x1->bcoo_add_indices(x1, x2_zeros_and_nans, sum_duplicates=True)
A:keras.src.backend.jax.sparse.x2->x2.todense().todense()
A:keras.src.backend.jax.sparse.sparse_func->jax.experimental.sparse.sparsify(func)
A:keras.src.backend.jax.sparse.x2_zeros_and_nans->jax.experimental.sparse.bcoo_fromdense(x2_zeros_and_nans, n_batch=x1.n_batch, n_dense=x1.n_dense, index_dtype=x1.indices.dtype)
keras.src.backend.jax.sparse.axis_shape_dims_for_broadcast_in_dim(axis,input_shape,insert_dims)
keras.src.backend.jax.sparse.bcoo_add_indices(x1,x2,sum_duplicates)
keras.src.backend.jax.sparse.densifying_unary(func)
keras.src.backend.jax.sparse.elementwise_binary_union(linear,use_sparsify)
keras.src.backend.jax.sparse.elementwise_division(func)
keras.src.backend.jax.sparse.elementwise_unary(linear)
keras.src.backend.sparse.axis_shape_dims_for_broadcast_in_dim(axis,input_shape,insert_dims)
keras.src.backend.sparse.bcoo_add_indices(x1,x2,sum_duplicates)
keras.src.backend.sparse.densifying_unary(func)
keras.src.backend.sparse.elementwise_binary_union(linear,use_sparsify)
keras.src.backend.sparse.elementwise_division(func)
keras.src.backend.sparse.elementwise_unary(linear)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/jax/nn.py----------------------------------------
A:keras.src.backend.jax.nn.x->cast(x, 'float32')
A:keras.src.backend.jax.nn.padding->padding.upper().upper()
A:keras.src.backend.jax.nn.data_format->standardize_data_format(data_format)
A:keras.src.backend.jax.nn.pool_size->_convert_to_spatial_operand(pool_size, num_spatial_dims, data_format)
A:keras.src.backend.jax.nn.strides->_convert_to_spatial_operand(strides, num_spatial_dims, data_format, include_batch_and_channels=False)
A:keras.src.backend.jax.nn.pooled->_pool(inputs, 0.0, lax.add, pool_size, strides, padding)
A:keras.src.backend.jax.nn.window_counts->_pool(jnp.ones(shape, inputs.dtype), 0.0, lax.add, pool_size, strides, padding)
A:keras.src.backend.jax.nn.spatial_dims->tuple(range(2, num_dims))
A:keras.src.backend.jax.nn.dimension_numbers->_convert_to_lax_conv_dimension_numbers(num_spatial_dims, data_format, transpose=False)
A:keras.src.backend.jax.nn.dilation_rate->_convert_to_spatial_operand(dilation_rate, num_spatial_dims, data_format, include_batch_and_channels=False)
A:keras.src.backend.jax.nn.kernel->jax.numpy.reshape(kernel, kernel.shape[:-2] + (1, feature_group_count * kernel.shape[-1]))
A:keras.src.backend.jax.nn.depthwise_conv_output->depthwise_conv(inputs, depthwise_kernel, strides, padding, data_format, dilation_rate)
A:keras.src.backend.jax.nn.padding_values->compute_conv_transpose_padding_args_for_jax(input_shape=inputs.shape, kernel_shape=kernel.shape, strides=strides, padding=padding, output_padding=output_padding, dilation_rate=dilation_rate)
A:keras.src.backend.jax.nn.outputs->jax.numpy.max(one_hot(cast(x, 'int32'), num_classes, axis=axis, dtype=dtype), axis=reduction_axis)
A:keras.src.backend.jax.nn.target->target.transpose((1, 0)).astype('int32').transpose((1, 0)).astype('int32')
A:keras.src.backend.jax.nn.output->output.transpose((1, 0, 2)).transpose((1, 0, 2))
A:keras.src.backend.jax.nn.log_prob->jax.numpy.log(output)
A:keras.src.backend.jax.nn.log_logits->jax.nn.log_sigmoid(output)
A:keras.src.backend.jax.nn.log_neg_logits->jax.nn.log_sigmoid(-output)
A:keras.src.backend.jax.nn.ori_dtype->standardize_dtype(x.dtype)
A:keras.src.backend.jax.nn.mean->jax.numpy.reshape(mean, shape)
A:keras.src.backend.jax.nn.variance->jax.numpy.reshape(variance, shape)
A:keras.src.backend.jax.nn.inv->jax.lax.rsqrt(variance + epsilon)
A:keras.src.backend.jax.nn.scale->jax.numpy.reshape(scale, shape)
A:keras.src.backend.jax.nn.offset->jax.numpy.reshape(offset, shape)
A:keras.src.backend.jax.nn.logits->jax.nn.log_softmax(output)
A:keras.src.backend.jax.nn.(mgrid_t, mgrid_b)->jax.numpy.meshgrid(jnp.arange(max_target_length), jnp.arange(batch_size))
A:keras.src.backend.jax.nn.logit_paddings->jax.numpy.array(jnp.arange(max_target_length) < output_length[:, None], dtype=jnp.float32)
A:keras.src.backend.jax.nn.repeat->jax.numpy.pad(repeat, ((0, 1), (0, 0))).transpose((1, 0))
A:keras.src.backend.jax.nn.prev_mask->prev_mask.at[:, 1:].set(jnp.logaddexp(prev_mask[:, 1:], prev_emit + _logepsilon * repeat)).at[:, 1:].set(jnp.logaddexp(prev_mask[:, 1:], prev_emit + _logepsilon * repeat))
A:keras.src.backend.jax.nn.emit->jax.numpy.logaddexp(prev_mask[:, :-1] + logprob_emit, prev_emit + logprob_emit)
A:keras.src.backend.jax.nn.mask->mask.at[:, 1:].set(jnp.logaddexp(mask[:, 1:], prev_emit + logprob_mask[:, None] + _logepsilon * (1 - repeat))).at[:, 1:].set(jnp.logaddexp(mask[:, 1:], prev_emit + logprob_mask[:, None] + _logepsilon * (1 - repeat)))
A:keras.src.backend.jax.nn.mask_init->mask_init.at[:, 0].set(0.0).at[:, 0].set(0.0)
A:keras.src.backend.jax.nn.emit_init->jax.numpy.full((batch_size, max_target_length), _logepsilon)
A:keras.src.backend.jax.nn.(_, (alphas_mask, alphas_emit))->jax.lax.scan(_iterate, (mask_init, emit_init), (logprobs_mask, logprobs_emit, logit_paddings.transpose()))
A:keras.src.backend.jax.nn.last_alpha_mask->alphas_mask[-1].at[:, 1:].set(jnp.logaddexp(alphas_mask[-1, :, 1:], alphas_emit[-1]))
keras.src.backend.jax.nn._convert_to_lax_conv_dimension_numbers(num_spatial_dims,data_format='channels_last',transpose=False)
keras.src.backend.jax.nn._convert_to_spatial_operand(x,num_spatial_dims,data_format='channels_last',include_batch_and_channels=True)
keras.src.backend.jax.nn._pool(inputs,initial_value,reduce_fn,pool_size,strides=None,padding='valid')
keras.src.backend.jax.nn.average_pool(inputs,pool_size,strides,padding,data_format=None)
keras.src.backend.jax.nn.batch_normalization(x,mean,variance,axis,offset=None,scale=None,epsilon=0.001)
keras.src.backend.jax.nn.binary_crossentropy(target,output,from_logits=False)
keras.src.backend.jax.nn.categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.src.backend.jax.nn.conv(inputs,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.jax.nn.conv_transpose(inputs,kernel,strides=1,padding='valid',output_padding=None,data_format=None,dilation_rate=1)
keras.src.backend.jax.nn.ctc_loss(target,output,target_length,output_length,mask_index=0)
keras.src.backend.jax.nn.depthwise_conv(inputs,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.jax.nn.elu(x,alpha=1.0)
keras.src.backend.jax.nn.gelu(x,approximate=True)
keras.src.backend.jax.nn.hard_sigmoid(x)
keras.src.backend.jax.nn.hard_silu(x)
keras.src.backend.jax.nn.leaky_relu(x,negative_slope=0.2)
keras.src.backend.jax.nn.log_sigmoid(x)
keras.src.backend.jax.nn.log_softmax(x,axis=-1)
keras.src.backend.jax.nn.max_pool(inputs,pool_size,strides=None,padding='valid',data_format=None)
keras.src.backend.jax.nn.moments(x,axes,keepdims=False,synchronized=False)
keras.src.backend.jax.nn.multi_hot(x,num_classes,axis=-1,dtype='float32')
keras.src.backend.jax.nn.one_hot(x,num_classes,axis=-1,dtype='float32')
keras.src.backend.jax.nn.relu(x)
keras.src.backend.jax.nn.relu6(x)
keras.src.backend.jax.nn.selu(x)
keras.src.backend.jax.nn.separable_conv(inputs,depthwise_kernel,pointwise_kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.jax.nn.sigmoid(x)
keras.src.backend.jax.nn.silu(x)
keras.src.backend.jax.nn.softmax(x,axis=-1)
keras.src.backend.jax.nn.softplus(x)
keras.src.backend.jax.nn.softsign(x)
keras.src.backend.jax.nn.sparse_categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.src.backend.jax.nn.tanh(x)
keras.src.backend.nn._convert_to_lax_conv_dimension_numbers(num_spatial_dims,data_format='channels_last',transpose=False)
keras.src.backend.nn._convert_to_spatial_operand(x,num_spatial_dims,data_format='channels_last',include_batch_and_channels=True)
keras.src.backend.nn._pool(inputs,initial_value,reduce_fn,pool_size,strides=None,padding='valid')
keras.src.backend.nn.average_pool(inputs,pool_size,strides,padding,data_format=None)
keras.src.backend.nn.batch_normalization(x,mean,variance,axis,offset=None,scale=None,epsilon=0.001)
keras.src.backend.nn.binary_crossentropy(target,output,from_logits=False)
keras.src.backend.nn.categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.src.backend.nn.conv(inputs,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.nn.conv_transpose(inputs,kernel,strides=1,padding='valid',output_padding=None,data_format=None,dilation_rate=1)
keras.src.backend.nn.ctc_loss(target,output,target_length,output_length,mask_index=0)
keras.src.backend.nn.depthwise_conv(inputs,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.nn.elu(x,alpha=1.0)
keras.src.backend.nn.gelu(x,approximate=True)
keras.src.backend.nn.hard_sigmoid(x)
keras.src.backend.nn.hard_silu(x)
keras.src.backend.nn.leaky_relu(x,negative_slope=0.2)
keras.src.backend.nn.log_sigmoid(x)
keras.src.backend.nn.log_softmax(x,axis=-1)
keras.src.backend.nn.max_pool(inputs,pool_size,strides=None,padding='valid',data_format=None)
keras.src.backend.nn.moments(x,axes,keepdims=False,synchronized=False)
keras.src.backend.nn.multi_hot(x,num_classes,axis=-1,dtype='float32')
keras.src.backend.nn.one_hot(x,num_classes,axis=-1,dtype='float32')
keras.src.backend.nn.relu(x)
keras.src.backend.nn.relu6(x)
keras.src.backend.nn.selu(x)
keras.src.backend.nn.separable_conv(inputs,depthwise_kernel,pointwise_kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.backend.nn.sigmoid(x)
keras.src.backend.nn.silu(x)
keras.src.backend.nn.softmax(x,axis=-1)
keras.src.backend.nn.softplus(x)
keras.src.backend.nn.softsign(x)
keras.src.backend.nn.sparse_categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.src.backend.nn.tanh(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/jax/core.py----------------------------------------
A:keras.src.backend.jax.core.value->keras.src.backend.jax.distribution_lib.distribute_variable(value, self._layout)
A:keras.src.backend.jax.core.self._shape->tuple(value.shape)
A:keras.src.backend.jax.core.distribution->keras.src.backend.common.global_state.get_global_attribute('distribution')
A:keras.src.backend.jax.core.self._layout->keras.src.backend.jax.distribution_lib._to_jax_layout(distribution.get_variable_layout(self))
A:keras.src.backend.jax.core.dtype->standardize_dtype(dtype)
A:keras.src.backend.jax.core.x->x.todense().todense()
A:keras.src.backend.jax.core.maybe_symbolic_args->tuple(maybe_symbolic_args)
A:keras.src.backend.jax.core.shape->list(x.shape)
A:keras.src.backend.jax.core.jax_tensor->jax.ShapeDtypeStruct(shape, dtype=x.dtype)
A:keras.src.backend.jax.core.(args, kwargs)->keras.src.utils.tree.map_structure(to_bcoo_if_sparse, (args, kwargs), (maybe_symbolic_args, maybe_symbolic_kwargs))
A:keras.src.backend.jax.core.(ms_args_1, ms_kwargs_1)->keras.src.utils.tree.map_structure(lambda x: convert_keras_tensor_to_jax(x, fill_value=83), (maybe_symbolic_args, maybe_symbolic_kwargs))
A:keras.src.backend.jax.core.(_, jax_out_1)->jax.make_jaxpr(wrapped_fn, return_shape=True)(*ms_args_1, **ms_kwargs_1)
A:keras.src.backend.jax.core.(ms_args_2, ms_kwargs_2)->keras.src.utils.tree.map_structure(lambda x: convert_keras_tensor_to_jax(x, fill_value=89), (maybe_symbolic_args, maybe_symbolic_kwargs))
A:keras.src.backend.jax.core.(_, jax_out_2)->jax.make_jaxpr(wrapped_fn, return_shape=True)(*ms_args_2, **ms_kwargs_2)
A:keras.src.backend.jax.core.output_spec->keras.src.utils.tree.map_structure(convert_jax_spec_to_keras_tensor, jax_out)
A:keras.src.backend.jax.core.(maybe_symbolic_args, maybe_symbolic_kwargs)->keras.src.utils.tree.map_structure(convert_keras_tensor_to_jax, (maybe_symbolic_args, maybe_symbolic_kwargs))
A:keras.src.backend.jax.core.(_, jax_out)->jax.make_jaxpr(wrapped_fn, return_shape=True)(*maybe_symbolic_args, **maybe_symbolic_kwargs)
A:keras.src.backend.jax.core.zeros->jax.numpy.zeros(shape, values.dtype)
A:keras.src.backend.jax.core.key->tuple(jnp.moveaxis(indices, -1, 0))
A:keras.src.backend.jax.core.inputs->inputs.at[tuple(indices)].set(updates).at[tuple(indices)].set(updates)
A:keras.src.backend.jax.core.indices->jax.numpy.transpose(indices)
A:keras.src.backend.jax.core.is_tuple->isinstance(loop_vars, (tuple, list))
A:keras.src.backend.jax.core.outputs->jax.lax.while_loop(_cond, _body, loop_vars)
A:keras.src.backend.jax.core.device_name->device_name.lower().lower()
A:keras.src.backend.jax.core.jax_device->keras.src.backend.jax.distribution_lib._to_jax_device(device_name)
keras.src.backend.Variable(KerasVariable)
keras.src.backend.Variable.__jax_array__(self)
keras.src.backend.Variable._convert_to_tensor(self,value,dtype=None)
keras.src.backend.Variable._direct_assign(self,value)
keras.src.backend.Variable._initialize(self,value)
keras.src.backend.cast(x,dtype)
keras.src.backend.compute_output_spec(fn,*args,**kwargs)
keras.src.backend.cond(pred,true_fn,false_fn)
keras.src.backend.convert_to_numpy(x)
keras.src.backend.convert_to_tensor(x,dtype=None,sparse=True)
keras.src.backend.core.custom_gradient(fun)
keras.src.backend.core.fori_loop(lower,upper,body_fun,init_val)
keras.src.backend.core.slice(inputs,start_indices,shape)
keras.src.backend.core.slice_update(inputs,start_indices,updates)
keras.src.backend.core.unstack(x,num=None,axis=0)
keras.src.backend.core.while_loop(cond,body,loop_vars,maximum_iterations=None)
keras.src.backend.device_scope(device_name)
keras.src.backend.is_tensor(x)
keras.src.backend.jax.core.Variable(KerasVariable)
keras.src.backend.jax.core.Variable.__jax_array__(self)
keras.src.backend.jax.core.Variable._convert_to_tensor(self,value,dtype=None)
keras.src.backend.jax.core.Variable._direct_assign(self,value)
keras.src.backend.jax.core.Variable._initialize(self,value)
keras.src.backend.jax.core.cast(x,dtype)
keras.src.backend.jax.core.compute_output_spec(fn,*args,**kwargs)
keras.src.backend.jax.core.cond(pred,true_fn,false_fn)
keras.src.backend.jax.core.convert_to_numpy(x)
keras.src.backend.jax.core.convert_to_tensor(x,dtype=None,sparse=True)
keras.src.backend.jax.core.custom_gradient(fun)
keras.src.backend.jax.core.device_scope(device_name)
keras.src.backend.jax.core.fori_loop(lower,upper,body_fun,init_val)
keras.src.backend.jax.core.is_tensor(x)
keras.src.backend.jax.core.scatter(indices,values,shape)
keras.src.backend.jax.core.scatter_update(inputs,indices,updates)
keras.src.backend.jax.core.shape(x)
keras.src.backend.jax.core.slice(inputs,start_indices,shape)
keras.src.backend.jax.core.slice_update(inputs,start_indices,updates)
keras.src.backend.jax.core.stop_gradient(variable)
keras.src.backend.jax.core.unstack(x,num=None,axis=0)
keras.src.backend.jax.core.vectorized_map(function,elements)
keras.src.backend.jax.core.while_loop(cond,body,loop_vars,maximum_iterations=None)
keras.src.backend.scatter(indices,values,shape)
keras.src.backend.scatter_update(inputs,indices,updates)
keras.src.backend.shape(x)
keras.src.backend.stop_gradient(variable)
keras.src.backend.vectorized_map(function,elements)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/jax/numpy.py----------------------------------------
A:keras.src.backend.jax.numpy.x1->convert_to_tensor(x1)
A:keras.src.backend.jax.numpy.x2->convert_to_tensor(x2)
A:keras.src.backend.jax.numpy.bincounts->list(map(bincount_fn, zip(x, weights)))
A:keras.src.backend.jax.numpy.dtypes->list(set((standardize_dtype(x.dtype) for x in operands)))
A:keras.src.backend.jax.numpy.x1_dtype->standardize_dtype(x1.dtype)
A:keras.src.backend.jax.numpy.x2_dtype->standardize_dtype(x2.dtype)
A:keras.src.backend.jax.numpy.matmul.sparse_matmul->jax.experimental.sparse.sparsify(jnp.matmul)
A:keras.src.backend.jax.numpy.out_data->jax.experimental.sparse.bcoo_multiply_dense(x2, x1)
A:keras.src.backend.jax.numpy.x->convert_to_tensor(x)
A:keras.src.backend.jax.numpy.ori_dtype->standardize_dtype(x.dtype)
A:keras.src.backend.jax.numpy.compute_dtype->list(set((standardize_dtype(x.dtype) for x in operands))).result_type(x.dtype, 'float32')
A:keras.src.backend.jax.numpy.axis->to_tuple_or_list(axis)
A:keras.src.backend.jax.numpy.(canonical_axis, keep_dims_shape, broadcast_dimensions)->keras.src.backend.jax.sparse.axis_shape_dims_for_broadcast_in_dim(axis, x.shape, insert_dims=False)
A:keras.src.backend.jax.numpy.divisor->math.prod((x.shape[i] for i in canonical_axis))
A:keras.src.backend.jax.numpy.output->jax.numpy.mean(x, axis=axis, keepdims=keepdims, dtype=compute_dtype)
A:keras.src.backend.jax.numpy.dtype->list(set((standardize_dtype(x.dtype) for x in operands))).result_type(x.dtype, float)
A:keras.src.backend.jax.numpy.weights->cast(weights, dtype)
A:keras.src.backend.jax.numpy.bcoo_count->builtins.sum((isinstance(x, jax_sparse.BCOO) for x in xs))
A:keras.src.backend.jax.numpy.a->canonicalize_axis(a, num_dims)
A:keras.src.backend.jax.numpy.bins->convert_to_tensor(bins)
A:keras.src.backend.jax.numpy.y->convert_to_tensor(y)
A:keras.src.backend.jax.numpy.(_, result_shape, broadcast_dimensions)->keras.src.backend.jax.sparse.axis_shape_dims_for_broadcast_in_dim(axis, x.shape, insert_dims=True)
A:keras.src.backend.jax.numpy.result->jax.numpy.expand_dims(result, axis=-1)
A:keras.src.backend.jax.numpy.q->convert_to_tensor(q)
A:keras.src.backend.jax.numpy.output_shape->keras.src.ops.operation_utils.compute_reshape_output_shape(x.shape, newshape, 'new_shape')
A:keras.src.backend.jax.numpy.indices->convert_to_tensor(indices, sparse=False)
A:keras.src.backend.jax.numpy.num_dims->len(x.shape)
A:keras.src.backend.jax.numpy.permutation->tuple(range(num_dims)[::-1])
A:keras.src.backend.jax.numpy.result_dtype->list(set((standardize_dtype(x.dtype) for x in operands))).result_type(x.dtype, float)
keras.src.backend.jax.abs(x)
keras.src.backend.jax.absolute(x)
keras.src.backend.jax.add(x1,x2)
keras.src.backend.jax.all(x,axis=None,keepdims=False)
keras.src.backend.jax.amax(x,axis=None,keepdims=False)
keras.src.backend.jax.amin(x,axis=None,keepdims=False)
keras.src.backend.jax.any(x,axis=None,keepdims=False)
keras.src.backend.jax.append(x1,x2,axis=None)
keras.src.backend.jax.arange(start,stop=None,step=1,dtype=None)
keras.src.backend.jax.arccos(x)
keras.src.backend.jax.arccosh(x)
keras.src.backend.jax.arcsin(x)
keras.src.backend.jax.arcsinh(x)
keras.src.backend.jax.arctan(x)
keras.src.backend.jax.arctan2(x1,x2)
keras.src.backend.jax.arctanh(x)
keras.src.backend.jax.argmax(x,axis=None)
keras.src.backend.jax.argmin(x,axis=None)
keras.src.backend.jax.argsort(x,axis=-1)
keras.src.backend.jax.array(x,dtype=None)
keras.src.backend.jax.average(x,axis=None,weights=None)
keras.src.backend.jax.bincount(x,weights=None,minlength=0)
keras.src.backend.jax.broadcast_to(x,shape)
keras.src.backend.jax.ceil(x)
keras.src.backend.jax.clip(x,x_min,x_max)
keras.src.backend.jax.concatenate(xs,axis=0)
keras.src.backend.jax.conj(x)
keras.src.backend.jax.conjugate(x)
keras.src.backend.jax.copy(x)
keras.src.backend.jax.cos(x)
keras.src.backend.jax.cosh(x)
keras.src.backend.jax.count_nonzero(x,axis=None)
keras.src.backend.jax.cross(x1,x2,axisa=-1,axisb=-1,axisc=-1,axis=None)
keras.src.backend.jax.cumprod(x,axis=None,dtype=None)
keras.src.backend.jax.cumsum(x,axis=None,dtype=None)
keras.src.backend.jax.diag(x,k=0)
keras.src.backend.jax.diagonal(x,offset=0,axis1=0,axis2=1)
keras.src.backend.jax.diff(a,n=1,axis=-1)
keras.src.backend.jax.digitize(x,bins)
keras.src.backend.jax.divide(x1,x2)
keras.src.backend.jax.divide_no_nan(x1,x2)
keras.src.backend.jax.dot(x,y)
keras.src.backend.jax.einsum(subscripts,*operands,**kwargs)
keras.src.backend.jax.empty(shape,dtype=None)
keras.src.backend.jax.equal(x1,x2)
keras.src.backend.jax.exp(x)
keras.src.backend.jax.expand_dims(x,axis)
keras.src.backend.jax.expm1(x)
keras.src.backend.jax.eye(N,M=None,k=0,dtype=None)
keras.src.backend.jax.flip(x,axis=None)
keras.src.backend.jax.floor(x)
keras.src.backend.jax.floor_divide(x1,x2)
keras.src.backend.jax.full(shape,fill_value,dtype=None)
keras.src.backend.jax.full_like(x,fill_value,dtype=None)
keras.src.backend.jax.greater(x1,x2)
keras.src.backend.jax.greater_equal(x1,x2)
keras.src.backend.jax.hstack(xs)
keras.src.backend.jax.identity(n,dtype=None)
keras.src.backend.jax.imag(x)
keras.src.backend.jax.isclose(x1,x2)
keras.src.backend.jax.isfinite(x)
keras.src.backend.jax.isinf(x)
keras.src.backend.jax.isnan(x)
keras.src.backend.jax.less(x1,x2)
keras.src.backend.jax.less_equal(x1,x2)
keras.src.backend.jax.linspace(start,stop,num=50,endpoint=True,retstep=False,dtype=None,axis=0)
keras.src.backend.jax.log(x)
keras.src.backend.jax.log10(x)
keras.src.backend.jax.log1p(x)
keras.src.backend.jax.log2(x)
keras.src.backend.jax.logaddexp(x1,x2)
keras.src.backend.jax.logical_and(x1,x2)
keras.src.backend.jax.logical_not(x)
keras.src.backend.jax.logical_or(x1,x2)
keras.src.backend.jax.logical_xor(x1,x2)
keras.src.backend.jax.logspace(start,stop,num=50,endpoint=True,base=10,dtype=None,axis=0)
keras.src.backend.jax.matmul(x1,x2)
keras.src.backend.jax.max(x,axis=None,keepdims=False,initial=None)
keras.src.backend.jax.maximum(x1,x2)
keras.src.backend.jax.mean(x,axis=None,keepdims=False)
keras.src.backend.jax.median(x,axis=None,keepdims=False)
keras.src.backend.jax.meshgrid(*x,indexing='xy')
keras.src.backend.jax.min(x,axis=None,keepdims=False,initial=None)
keras.src.backend.jax.minimum(x1,x2)
keras.src.backend.jax.mod(x1,x2)
keras.src.backend.jax.moveaxis(x,source,destination)
keras.src.backend.jax.multiply(x1,x2)
keras.src.backend.jax.nan_to_num(x)
keras.src.backend.jax.ndim(x)
keras.src.backend.jax.negative(x)
keras.src.backend.jax.nonzero(x)
keras.src.backend.jax.not_equal(x1,x2)
keras.src.backend.jax.numpy.abs(x)
keras.src.backend.jax.numpy.absolute(x)
keras.src.backend.jax.numpy.add(x1,x2)
keras.src.backend.jax.numpy.all(x,axis=None,keepdims=False)
keras.src.backend.jax.numpy.amax(x,axis=None,keepdims=False)
keras.src.backend.jax.numpy.amin(x,axis=None,keepdims=False)
keras.src.backend.jax.numpy.any(x,axis=None,keepdims=False)
keras.src.backend.jax.numpy.append(x1,x2,axis=None)
keras.src.backend.jax.numpy.arange(start,stop=None,step=1,dtype=None)
keras.src.backend.jax.numpy.arccos(x)
keras.src.backend.jax.numpy.arccosh(x)
keras.src.backend.jax.numpy.arcsin(x)
keras.src.backend.jax.numpy.arcsinh(x)
keras.src.backend.jax.numpy.arctan(x)
keras.src.backend.jax.numpy.arctan2(x1,x2)
keras.src.backend.jax.numpy.arctanh(x)
keras.src.backend.jax.numpy.argmax(x,axis=None)
keras.src.backend.jax.numpy.argmin(x,axis=None)
keras.src.backend.jax.numpy.argsort(x,axis=-1)
keras.src.backend.jax.numpy.array(x,dtype=None)
keras.src.backend.jax.numpy.average(x,axis=None,weights=None)
keras.src.backend.jax.numpy.bincount(x,weights=None,minlength=0)
keras.src.backend.jax.numpy.broadcast_to(x,shape)
keras.src.backend.jax.numpy.ceil(x)
keras.src.backend.jax.numpy.clip(x,x_min,x_max)
keras.src.backend.jax.numpy.concatenate(xs,axis=0)
keras.src.backend.jax.numpy.conj(x)
keras.src.backend.jax.numpy.conjugate(x)
keras.src.backend.jax.numpy.copy(x)
keras.src.backend.jax.numpy.cos(x)
keras.src.backend.jax.numpy.cosh(x)
keras.src.backend.jax.numpy.count_nonzero(x,axis=None)
keras.src.backend.jax.numpy.cross(x1,x2,axisa=-1,axisb=-1,axisc=-1,axis=None)
keras.src.backend.jax.numpy.cumprod(x,axis=None,dtype=None)
keras.src.backend.jax.numpy.cumsum(x,axis=None,dtype=None)
keras.src.backend.jax.numpy.diag(x,k=0)
keras.src.backend.jax.numpy.diagonal(x,offset=0,axis1=0,axis2=1)
keras.src.backend.jax.numpy.diff(a,n=1,axis=-1)
keras.src.backend.jax.numpy.digitize(x,bins)
keras.src.backend.jax.numpy.divide(x1,x2)
keras.src.backend.jax.numpy.divide_no_nan(x1,x2)
keras.src.backend.jax.numpy.dot(x,y)
keras.src.backend.jax.numpy.einsum(subscripts,*operands,**kwargs)
keras.src.backend.jax.numpy.empty(shape,dtype=None)
keras.src.backend.jax.numpy.equal(x1,x2)
keras.src.backend.jax.numpy.exp(x)
keras.src.backend.jax.numpy.expand_dims(x,axis)
keras.src.backend.jax.numpy.expm1(x)
keras.src.backend.jax.numpy.eye(N,M=None,k=0,dtype=None)
keras.src.backend.jax.numpy.flip(x,axis=None)
keras.src.backend.jax.numpy.floor(x)
keras.src.backend.jax.numpy.floor_divide(x1,x2)
keras.src.backend.jax.numpy.full(shape,fill_value,dtype=None)
keras.src.backend.jax.numpy.full_like(x,fill_value,dtype=None)
keras.src.backend.jax.numpy.greater(x1,x2)
keras.src.backend.jax.numpy.greater_equal(x1,x2)
keras.src.backend.jax.numpy.hstack(xs)
keras.src.backend.jax.numpy.identity(n,dtype=None)
keras.src.backend.jax.numpy.imag(x)
keras.src.backend.jax.numpy.isclose(x1,x2)
keras.src.backend.jax.numpy.isfinite(x)
keras.src.backend.jax.numpy.isinf(x)
keras.src.backend.jax.numpy.isnan(x)
keras.src.backend.jax.numpy.less(x1,x2)
keras.src.backend.jax.numpy.less_equal(x1,x2)
keras.src.backend.jax.numpy.linspace(start,stop,num=50,endpoint=True,retstep=False,dtype=None,axis=0)
keras.src.backend.jax.numpy.log(x)
keras.src.backend.jax.numpy.log10(x)
keras.src.backend.jax.numpy.log1p(x)
keras.src.backend.jax.numpy.log2(x)
keras.src.backend.jax.numpy.logaddexp(x1,x2)
keras.src.backend.jax.numpy.logical_and(x1,x2)
keras.src.backend.jax.numpy.logical_not(x)
keras.src.backend.jax.numpy.logical_or(x1,x2)
keras.src.backend.jax.numpy.logical_xor(x1,x2)
keras.src.backend.jax.numpy.logspace(start,stop,num=50,endpoint=True,base=10,dtype=None,axis=0)
keras.src.backend.jax.numpy.matmul(x1,x2)
keras.src.backend.jax.numpy.max(x,axis=None,keepdims=False,initial=None)
keras.src.backend.jax.numpy.maximum(x1,x2)
keras.src.backend.jax.numpy.mean(x,axis=None,keepdims=False)
keras.src.backend.jax.numpy.median(x,axis=None,keepdims=False)
keras.src.backend.jax.numpy.meshgrid(*x,indexing='xy')
keras.src.backend.jax.numpy.min(x,axis=None,keepdims=False,initial=None)
keras.src.backend.jax.numpy.minimum(x1,x2)
keras.src.backend.jax.numpy.mod(x1,x2)
keras.src.backend.jax.numpy.moveaxis(x,source,destination)
keras.src.backend.jax.numpy.multiply(x1,x2)
keras.src.backend.jax.numpy.nan_to_num(x)
keras.src.backend.jax.numpy.ndim(x)
keras.src.backend.jax.numpy.negative(x)
keras.src.backend.jax.numpy.nonzero(x)
keras.src.backend.jax.numpy.not_equal(x1,x2)
keras.src.backend.jax.numpy.ones(shape,dtype=None)
keras.src.backend.jax.numpy.ones_like(x,dtype=None)
keras.src.backend.jax.numpy.outer(x1,x2)
keras.src.backend.jax.numpy.pad(x,pad_width,mode='constant',constant_values=None)
keras.src.backend.jax.numpy.power(x1,x2)
keras.src.backend.jax.numpy.prod(x,axis=None,keepdims=False,dtype=None)
keras.src.backend.jax.numpy.quantile(x,q,axis=None,method='linear',keepdims=False)
keras.src.backend.jax.numpy.ravel(x)
keras.src.backend.jax.numpy.real(x)
keras.src.backend.jax.numpy.reciprocal(x)
keras.src.backend.jax.numpy.repeat(x,repeats,axis=None)
keras.src.backend.jax.numpy.reshape(x,newshape)
keras.src.backend.jax.numpy.roll(x,shift,axis=None)
keras.src.backend.jax.numpy.round(x,decimals=0)
keras.src.backend.jax.numpy.sign(x)
keras.src.backend.jax.numpy.sin(x)
keras.src.backend.jax.numpy.sinh(x)
keras.src.backend.jax.numpy.size(x)
keras.src.backend.jax.numpy.sort(x,axis=-1)
keras.src.backend.jax.numpy.split(x,indices_or_sections,axis=0)
keras.src.backend.jax.numpy.sqrt(x)
keras.src.backend.jax.numpy.square(x)
keras.src.backend.jax.numpy.squeeze(x,axis=None)
keras.src.backend.jax.numpy.stack(x,axis=0)
keras.src.backend.jax.numpy.std(x,axis=None,keepdims=False)
keras.src.backend.jax.numpy.subtract(x1,x2)
keras.src.backend.jax.numpy.sum(x,axis=None,keepdims=False)
keras.src.backend.jax.numpy.swapaxes(x,axis1,axis2)
keras.src.backend.jax.numpy.take(x,indices,axis=None)
keras.src.backend.jax.numpy.take_along_axis(x,indices,axis=None)
keras.src.backend.jax.numpy.tan(x)
keras.src.backend.jax.numpy.tanh(x)
keras.src.backend.jax.numpy.tensordot(x1,x2,axes=2)
keras.src.backend.jax.numpy.tile(x,repeats)
keras.src.backend.jax.numpy.trace(x,offset=0,axis1=0,axis2=1)
keras.src.backend.jax.numpy.transpose(x,axes=None)
keras.src.backend.jax.numpy.tri(N,M=None,k=0,dtype=None)
keras.src.backend.jax.numpy.tril(x,k=0)
keras.src.backend.jax.numpy.triu(x,k=0)
keras.src.backend.jax.numpy.true_divide(x1,x2)
keras.src.backend.jax.numpy.var(x,axis=None,keepdims=False)
keras.src.backend.jax.numpy.vdot(x1,x2)
keras.src.backend.jax.numpy.vstack(xs)
keras.src.backend.jax.numpy.where(condition,x1,x2)
keras.src.backend.jax.numpy.zeros(shape,dtype=None)
keras.src.backend.jax.numpy.zeros_like(x,dtype=None)
keras.src.backend.jax.ones(shape,dtype=None)
keras.src.backend.jax.ones_like(x,dtype=None)
keras.src.backend.jax.outer(x1,x2)
keras.src.backend.jax.pad(x,pad_width,mode='constant',constant_values=None)
keras.src.backend.jax.power(x1,x2)
keras.src.backend.jax.prod(x,axis=None,keepdims=False,dtype=None)
keras.src.backend.jax.quantile(x,q,axis=None,method='linear',keepdims=False)
keras.src.backend.jax.ravel(x)
keras.src.backend.jax.real(x)
keras.src.backend.jax.reciprocal(x)
keras.src.backend.jax.repeat(x,repeats,axis=None)
keras.src.backend.jax.reshape(x,newshape)
keras.src.backend.jax.roll(x,shift,axis=None)
keras.src.backend.jax.round(x,decimals=0)
keras.src.backend.jax.sign(x)
keras.src.backend.jax.sin(x)
keras.src.backend.jax.sinh(x)
keras.src.backend.jax.size(x)
keras.src.backend.jax.sort(x,axis=-1)
keras.src.backend.jax.split(x,indices_or_sections,axis=0)
keras.src.backend.jax.sqrt(x)
keras.src.backend.jax.square(x)
keras.src.backend.jax.squeeze(x,axis=None)
keras.src.backend.jax.stack(x,axis=0)
keras.src.backend.jax.std(x,axis=None,keepdims=False)
keras.src.backend.jax.subtract(x1,x2)
keras.src.backend.jax.sum(x,axis=None,keepdims=False)
keras.src.backend.jax.swapaxes(x,axis1,axis2)
keras.src.backend.jax.take(x,indices,axis=None)
keras.src.backend.jax.take_along_axis(x,indices,axis=None)
keras.src.backend.jax.tan(x)
keras.src.backend.jax.tanh(x)
keras.src.backend.jax.tensordot(x1,x2,axes=2)
keras.src.backend.jax.tile(x,repeats)
keras.src.backend.jax.trace(x,offset=0,axis1=0,axis2=1)
keras.src.backend.jax.transpose(x,axes=None)
keras.src.backend.jax.tri(N,M=None,k=0,dtype=None)
keras.src.backend.jax.tril(x,k=0)
keras.src.backend.jax.triu(x,k=0)
keras.src.backend.jax.true_divide(x1,x2)
keras.src.backend.jax.var(x,axis=None,keepdims=False)
keras.src.backend.jax.vdot(x1,x2)
keras.src.backend.jax.vstack(xs)
keras.src.backend.jax.where(condition,x1,x2)
keras.src.backend.jax.zeros(shape,dtype=None)
keras.src.backend.jax.zeros_like(x,dtype=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/jax/trainer.py----------------------------------------
A:keras.src.backend.jax.trainer.(y_pred, non_trainable_variables, losses)->self.stateless_call(trainable_variables, non_trainable_variables, x, return_losses=True, **kwargs)
A:keras.src.backend.jax.trainer.var_mapping->list(zip(self.trainable_variables, trainable_variables))
A:keras.src.backend.jax.trainer.loss->self.optimizer.scale_loss(loss)
A:keras.src.backend.jax.trainer.mapping->list(zip(self.optimizer.variables, optimizer_variables))
A:keras.src.backend.jax.trainer.(x, y, sample_weight)->keras.src.trainers.data_adapters.data_adapter_utils.unpack_x_y_sample_weight(data)
A:keras.src.backend.jax.trainer.grad_fn->jax.value_and_grad(self.compute_loss_and_updates, has_aux=True)
A:keras.src.backend.jax.trainer.((loss, aux), grads)->grad_fn(trainable_variables, non_trainable_variables, x, y, sample_weight, training=True, optimizer_variables=optimizer_variables)
A:keras.src.backend.jax.trainer.(trainable_variables, optimizer_variables)->self.optimizer.stateless_apply(optimizer_variables, grads, trainable_variables)
A:keras.src.backend.jax.trainer.logs->keras.src.utils.tree.map_structure(lambda x: np.array(x), logs)
A:keras.src.backend.jax.trainer.new_v->scope.get_current_value(ref_v)
A:keras.src.backend.jax.trainer.state->self._get_jax_state(trainable_variables=True, non_trainable_variables=True, metrics_variables=False, purge_model_variables=False)
A:keras.src.backend.jax.trainer.(loss, aux)->self.compute_loss_and_updates(trainable_variables, non_trainable_variables, x, y, sample_weight, training=False)
A:keras.src.backend.jax.trainer.(trainable_variables, non_trainable_variables, _, metrics_variables)->self._enforce_jax_state_sharding(trainable_variables=trainable_variables, non_trainable_variables=non_trainable_variables, optimizer_variables=None, metrics_variables=metrics_variables)
A:keras.src.backend.jax.trainer.(x, _, _)->keras.src.trainers.data_adapters.data_adapter_utils.unpack_x_y_sample_weight(data[0])
A:keras.src.backend.jax.trainer.(outputs, non_trainable_variables)->self.stateless_call(trainable_variables, non_trainable_variables, x, **kwargs)
A:keras.src.backend.jax.trainer.(_, non_trainable_variables, _, _)->self._enforce_jax_state_sharding(trainable_variables=None, non_trainable_variables=non_trainable_variables, optimizer_variables=None, metrics_variables=None)
A:keras.src.backend.jax.trainer.(logs, state)->self.test_function(state, [data])
A:keras.src.backend.jax.trainer.(outputs, trainable_variables)->one_predict_step(state, data[:1])
A:keras.src.backend.jax.trainer.(step_outputs, trainable_variables)->one_predict_step(state, [single_step_data])
A:keras.src.backend.jax.trainer.outputs->append_to_outputs(batch_outputs, outputs)
A:keras.src.backend.jax.trainer.((x, y, sample_weight), validation_data)->keras.src.trainers.data_adapters.array_slicing.train_validation_split((x, y, sample_weight), validation_split=validation_split)
A:keras.src.backend.jax.trainer.(val_x, val_y, val_sample_weight)->keras.src.trainers.data_adapters.data_adapter_utils.unpack_x_y_sample_weight(validation_data)
A:keras.src.backend.jax.trainer.epoch_iterator->JAXEpochIterator(x=x, batch_size=batch_size, steps_per_epoch=steps, shuffle=False, steps_per_execution=self.steps_per_execution)
A:keras.src.backend.jax.trainer.callbacks->keras.src.callbacks.CallbackList(callbacks, add_history=True, add_progbar=verbose != 0, verbose=verbose, epochs=1, steps=epoch_iterator.num_batches, model=self)
A:keras.src.backend.jax.trainer.epoch_logs->self.get_metrics_result()
A:keras.src.backend.jax.trainer.self._eval_epoch_iterator->JAXEpochIterator(x=val_x, y=val_y, sample_weight=val_sample_weight, batch_size=validation_batch_size or batch_size, steps_per_execution=self.steps_per_execution, steps_per_epoch=validation_steps, shuffle=False)
A:keras.src.backend.jax.trainer.val_logs->self.evaluate(x=val_x, y=val_y, sample_weight=val_sample_weight, batch_size=validation_batch_size or batch_size, steps=validation_steps, callbacks=callbacks, return_dict=True, _use_cached_eval_dataset=True)
A:keras.src.backend.jax.trainer.use_cached_eval_dataset->kwargs.pop('_use_cached_eval_dataset', False)
A:keras.src.backend.jax.trainer.(batch_outputs, non_trainable_variables)->self.predict_function(state, [(x,)])
A:keras.src.backend.jax.trainer.sample_weight->keras.src.trainers.data_adapters.data_adapter_utils.class_weight_to_sample_weights(y, class_weight)
A:keras.src.backend.jax.trainer.data->_distribute_data(data)
A:keras.src.backend.jax.trainer.batch_outputs->keras.src.utils.tree.map_structure(lambda x: np.array(x), batch_outputs)
A:keras.src.backend.jax.trainer.trainable_variables->self._jax_state.get('trainable_variables', None)
A:keras.src.backend.jax.trainer.non_trainable_variables->self._jax_state.get('non_trainable_variables', None)
A:keras.src.backend.jax.trainer.optimizer_variables->self._jax_state.get('optimizer_variables', None)
A:keras.src.backend.jax.trainer.metrics_variables->self._jax_state.get('metrics_variables', None)
A:keras.src.backend.jax.trainer.trainable_variables[i]->jax.lax.with_sharding_constraint(trainable_variables[i], self._trainable_variable_shardings[i])
A:keras.src.backend.jax.trainer.non_trainable_variables[i]->jax.lax.with_sharding_constraint(non_trainable_variables[i], self._non_trainable_variable_shardings[i])
A:keras.src.backend.jax.trainer.optimizer_variables[i]->jax.lax.with_sharding_constraint(optimizer_variables[i], self._optimizer_variable_shardings[i])
A:keras.src.backend.jax.trainer.metrics_variables[i]->jax.lax.with_sharding_constraint(metrics_variables[i], self._metrics_variable_shardings[i])
A:keras.src.backend.jax.trainer.distribution->keras.src.distribution.distribution_lib.distribution()
A:keras.src.backend.jax.trainer.layout->keras.src.distribution.distribution_lib.distribution().get_data_layout(d.shape)
A:keras.src.backend.jax.trainer.queue->collections.deque()
keras.src.backend.jax.trainer.JAXEpochIterator(EpochIterator)
keras.src.backend.jax.trainer.JAXEpochIterator._get_iterator(self)
keras.src.backend.jax.trainer.JAXEpochIterator._prefetch_numpy_iterator(self,numpy_iterator)
keras.src.backend.jax.trainer.JAXTrainer(self)
keras.src.backend.jax.trainer.JAXTrainer.__init__(self)
keras.src.backend.jax.trainer.JAXTrainer._enforce_jax_state_sharding(self,trainable_variables=None,non_trainable_variables=None,optimizer_variables=None,metrics_variables=None)
keras.src.backend.jax.trainer.JAXTrainer._get_jax_state(self,trainable_variables=False,non_trainable_variables=False,optimizer_variables=False,metrics_variables=False,purge_model_variables=False)
keras.src.backend.jax.trainer.JAXTrainer._purge_model_variables(self,trainable_variables=False,non_trainable_variables=False,optimizer_variables=False,metrics_variables=False)
keras.src.backend.jax.trainer.JAXTrainer._record_training_state_sharding_spec(self)
keras.src.backend.jax.trainer.JAXTrainer.compute_loss_and_updates(self,trainable_variables,non_trainable_variables,x,y,sample_weight,training=False,optimizer_variables=None)
keras.src.backend.jax.trainer.JAXTrainer.evaluate(self,x=None,y=None,batch_size=None,verbose='auto',sample_weight=None,steps=None,callbacks=None,return_dict=False,**kwargs)
keras.src.backend.jax.trainer.JAXTrainer.fit(self,x=None,y=None,batch_size=None,epochs=1,verbose='auto',callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None,validation_batch_size=None,validation_freq=1)
keras.src.backend.jax.trainer.JAXTrainer.jax_state_sync(self)
keras.src.backend.jax.trainer.JAXTrainer.make_predict_function(self,force=False)
keras.src.backend.jax.trainer.JAXTrainer.make_test_function(self,force=False)
keras.src.backend.jax.trainer.JAXTrainer.make_train_function(self,force=False)
keras.src.backend.jax.trainer.JAXTrainer.predict(self,x,batch_size=None,verbose='auto',steps=None,callbacks=None)
keras.src.backend.jax.trainer.JAXTrainer.predict_on_batch(self,x)
keras.src.backend.jax.trainer.JAXTrainer.predict_step(self,state,data)
keras.src.backend.jax.trainer.JAXTrainer.test_on_batch(self,x,y=None,sample_weight=None,return_dict=False)
keras.src.backend.jax.trainer.JAXTrainer.test_step(self,state,data)
keras.src.backend.jax.trainer.JAXTrainer.train_on_batch(self,x,y=None,sample_weight=None,class_weight=None,return_dict=False)
keras.src.backend.jax.trainer.JAXTrainer.train_step(self,state,data)
keras.src.backend.jax.trainer._distribute_data(data)
keras.src.backend.trainer.JAXEpochIterator(EpochIterator)
keras.src.backend.trainer.JAXEpochIterator._get_iterator(self)
keras.src.backend.trainer.JAXEpochIterator._prefetch_numpy_iterator(self,numpy_iterator)
keras.src.backend.trainer.JAXTrainer(self)
keras.src.backend.trainer.JAXTrainer._enforce_jax_state_sharding(self,trainable_variables=None,non_trainable_variables=None,optimizer_variables=None,metrics_variables=None)
keras.src.backend.trainer.JAXTrainer._get_jax_state(self,trainable_variables=False,non_trainable_variables=False,optimizer_variables=False,metrics_variables=False,purge_model_variables=False)
keras.src.backend.trainer.JAXTrainer._purge_model_variables(self,trainable_variables=False,non_trainable_variables=False,optimizer_variables=False,metrics_variables=False)
keras.src.backend.trainer.JAXTrainer._record_training_state_sharding_spec(self)
keras.src.backend.trainer.JAXTrainer.compute_loss_and_updates(self,trainable_variables,non_trainable_variables,x,y,sample_weight,training=False,optimizer_variables=None)
keras.src.backend.trainer.JAXTrainer.evaluate(self,x=None,y=None,batch_size=None,verbose='auto',sample_weight=None,steps=None,callbacks=None,return_dict=False,**kwargs)
keras.src.backend.trainer.JAXTrainer.fit(self,x=None,y=None,batch_size=None,epochs=1,verbose='auto',callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None,validation_batch_size=None,validation_freq=1)
keras.src.backend.trainer.JAXTrainer.jax_state_sync(self)
keras.src.backend.trainer.JAXTrainer.make_predict_function(self,force=False)
keras.src.backend.trainer.JAXTrainer.make_test_function(self,force=False)
keras.src.backend.trainer.JAXTrainer.make_train_function(self,force=False)
keras.src.backend.trainer.JAXTrainer.predict(self,x,batch_size=None,verbose='auto',steps=None,callbacks=None)
keras.src.backend.trainer.JAXTrainer.predict_on_batch(self,x)
keras.src.backend.trainer.JAXTrainer.predict_step(self,state,data)
keras.src.backend.trainer.JAXTrainer.test_on_batch(self,x,y=None,sample_weight=None,return_dict=False)
keras.src.backend.trainer.JAXTrainer.test_step(self,state,data)
keras.src.backend.trainer.JAXTrainer.train_on_batch(self,x,y=None,sample_weight=None,class_weight=None,return_dict=False)
keras.src.backend.trainer.JAXTrainer.train_step(self,state,data)
keras.src.backend.trainer._distribute_data(data)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/jax/linalg.py----------------------------------------
A:keras.src.backend.jax.linalg.out->jax.numpy.linalg.cholesky(a)
A:keras.src.backend.jax.linalg.lu_factor_fn->jax.vmap(lu_factor_fn)
A:keras.src.backend.jax.linalg.x->cast(x, dtype)
A:keras.src.backend.jax.linalg.dtype->keras.src.backend.common.dtypes.result_type(x.dtype, float)
keras.src.backend.jax.linalg.cholesky(a)
keras.src.backend.jax.linalg.det(a)
keras.src.backend.jax.linalg.eig(x)
keras.src.backend.jax.linalg.inv(a)
keras.src.backend.jax.linalg.lu_factor(x)
keras.src.backend.jax.linalg.norm(x,ord=None,axis=None,keepdims=False)
keras.src.backend.jax.linalg.qr(x,mode='reduced')
keras.src.backend.jax.linalg.solve(a,b)
keras.src.backend.jax.linalg.solve_triangular(a,b,lower=False)
keras.src.backend.jax.linalg.svd(x,full_matrices=True,compute_uv=True)
keras.src.backend.linalg.cholesky(a)
keras.src.backend.linalg.det(a)
keras.src.backend.linalg.eig(x)
keras.src.backend.linalg.inv(a)
keras.src.backend.linalg.lu_factor(x)
keras.src.backend.linalg.norm(x,ord=None,axis=None,keepdims=False)
keras.src.backend.linalg.qr(x,mode='reduced')
keras.src.backend.linalg.solve(a,b)
keras.src.backend.linalg.solve_triangular(a,b,lower=False)
keras.src.backend.linalg.svd(x,full_matrices=True,compute_uv=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/jax/random.py----------------------------------------
A:keras.src.backend.jax.random.seed->jax_draw_seed(seed)
A:keras.src.backend.jax.random.sample->jax.random.beta(key=seed, a=alpha, b=beta, shape=shape, dtype=dtype)
A:keras.src.backend.jax.random.output_shape->tuple(output_shape)
A:keras.src.backend.jax.random.output->jax.random.categorical(seed, logits[..., None], shape=output_shape, axis=1)
A:keras.src.backend.jax.random.noise_shape->_get_concrete_noise_shape(inputs, noise_shape)
A:keras.src.backend.jax.random.mask->jax.numpy.broadcast_to(mask, inputs.shape)
A:keras.src.backend.jax.random.counts->jax.numpy.array(counts)
A:keras.src.backend.jax.random.probabilities->jax.numpy.array(probabilities)
A:keras.src.backend.jax.random.alpha->jax.numpy.array(alpha)
A:keras.src.backend.jax.random.beta->jax.numpy.array(beta)
keras.src.backend.jax.random._get_concrete_noise_shape(inputs,noise_shape)
keras.src.backend.jax.random.beta(shape,alpha,beta,dtype=None,seed=None)
keras.src.backend.jax.random.binomial(shape,counts,probabilities,dtype=None,seed=None)
keras.src.backend.jax.random.categorical(logits,num_samples,dtype='int32',seed=None)
keras.src.backend.jax.random.dropout(inputs,rate,noise_shape=None,seed=None)
keras.src.backend.jax.random.gamma(shape,alpha,dtype=None,seed=None)
keras.src.backend.jax.random.jax_draw_seed(seed)
keras.src.backend.jax.random.normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.src.backend.jax.random.randint(shape,minval,maxval,dtype='int32',seed=None)
keras.src.backend.jax.random.shuffle(x,axis=0,seed=None)
keras.src.backend.jax.random.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.src.backend.jax.random.uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)
keras.src.backend.random._get_concrete_noise_shape(inputs,noise_shape)
keras.src.backend.random.beta(shape,alpha,beta,dtype=None,seed=None)
keras.src.backend.random.binomial(shape,counts,probabilities,dtype=None,seed=None)
keras.src.backend.random.categorical(logits,num_samples,dtype='int32',seed=None)
keras.src.backend.random.dropout(inputs,rate,noise_shape=None,seed=None)
keras.src.backend.random.gamma(shape,alpha,dtype=None,seed=None)
keras.src.backend.random.jax_draw_seed(seed)
keras.src.backend.random.normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.src.backend.random.randint(shape,minval,maxval,dtype='int32',seed=None)
keras.src.backend.random.shuffle(x,axis=0,seed=None)
keras.src.backend.random.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.src.backend.random.uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/jax/layer.py----------------------------------------
keras.src.backend.jax.layer.JaxLayer
keras.src.backend.layer.JaxLayer


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/jax/distribution_lib.py----------------------------------------
A:keras.src.backend.jax.distribution_lib.jax_devices->jax.devices(backend=device_type)
A:keras.src.backend.jax.distribution_lib.layout->_to_jax_layout(layout)
A:keras.src.backend.jax.distribution_lib.mapping->_to_jax_layout(layout).addressable_devices_indices_map(tensor.shape)
A:keras.src.backend.jax.distribution_lib.local_values->jax.device_put([tensor[i] for i in mapping.values()], list(mapping.keys()))
A:keras.src.backend.jax.distribution_lib.global_value->jax.make_array_from_single_device_arrays(tensor.shape, layout, local_values)
A:keras.src.backend.jax.distribution_lib.mesh_rank->len(jax_mesh.shape)
A:keras.src.backend.jax.distribution_lib.num_split->jax.local_device_count()
A:keras.src.backend.jax.distribution_lib.per_replica_batches->jax.numpy.split(inputs, local_device_count, axis=0)
A:keras.src.backend.jax.distribution_lib.local_device_count->jax.local_device_count()
A:keras.src.backend.jax.distribution_lib.global_batch_array->jax.make_array_from_single_device_arrays(global_shape, layout, arrays=[jax.device_put(batch, device) for (batch, device) in zip(per_replica_batches, layout.addressable_devices)])
A:keras.src.backend.jax.distribution_lib.job_addresses->job_addresses.split(',').split(',')
A:keras.src.backend.jax.distribution_lib.(device_type, index)->device_id.split(':')
A:keras.src.backend.jax.distribution_lib.index->int(index)
A:keras.src.backend.jax.distribution_lib.devices->numpy.array(devices).reshape(shape)
A:keras.src.backend.jax.distribution_lib.partition_spec->jax.sharding.PartitionSpec(*tensor_layout.axes)
A:keras.src.backend.jax.distribution_lib.jax_mesh->_to_jax_mesh(tensor_layout.device_mesh)
keras.src.backend.distribution_lib._to_jax_device(device_id)
keras.src.backend.distribution_lib._to_jax_layout(tensor_layout)
keras.src.backend.distribution_lib._to_jax_mesh(device_mesh)
keras.src.backend.distribution_lib.distribute_data_input(inputs,layout)
keras.src.backend.distribution_lib.distribute_tensor(tensor,layout)
keras.src.backend.distribution_lib.distribute_variable(value,layout)
keras.src.backend.distribution_lib.initialize(job_addresses,num_processes,process_id)
keras.src.backend.distribution_lib.list_devices(device_type=None)
keras.src.backend.distribution_lib.num_processes()
keras.src.backend.distribution_lib.process_id()
keras.src.backend.jax.distribution_lib._to_jax_device(device_id)
keras.src.backend.jax.distribution_lib._to_jax_layout(tensor_layout)
keras.src.backend.jax.distribution_lib._to_jax_mesh(device_mesh)
keras.src.backend.jax.distribution_lib.distribute_data_input(inputs,layout)
keras.src.backend.jax.distribution_lib.distribute_tensor(tensor,layout)
keras.src.backend.jax.distribution_lib.distribute_variable(value,layout)
keras.src.backend.jax.distribution_lib.initialize(job_addresses,num_processes,process_id)
keras.src.backend.jax.distribution_lib.list_devices(device_type=None)
keras.src.backend.jax.distribution_lib.num_processes()
keras.src.backend.jax.distribution_lib.process_id()


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/common/variables.py----------------------------------------
A:keras.src.backend.common.variables.parent_path->current_path()
A:keras.src.backend.common.variables.dtype->standardize_dtype(dtype)
A:keras.src.backend.common.variables.initializer->keras.src.initializers.get(initializer)
A:keras.src.backend.common.variables.self._shape->tuple(self._value.shape)
A:keras.src.backend.common.variables.shape->tuple(map(lambda x: int(x) if x is not None else None, shape))
A:keras.src.backend.common.variables.value->self._convert_to_tensor(value, dtype=self.dtype)
A:keras.src.backend.common.variables.self._ndim->len(self._shape)
A:keras.src.backend.common.variables.autocast_scope->get_autocast_scope()
A:keras.src.backend.common.variables.scope->get_stateless_scope()
A:keras.src.backend.common.variables.uninitialized_variables->keras.src.backend.common.global_state.get_global_attribute('uninitialized_variables', [], set_to_default=True)
A:keras.src.backend.common.variables.collection->keras.src.backend.common.global_state.get_global_attribute('uninitialized_variables')
A:keras.src.backend.common.variables.self.original_scope->get_autocast_scope()
keras.src.backend.common.AutocastScope(self,dtype)
keras.src.backend.common.AutocastScope.__enter__(self)
keras.src.backend.common.AutocastScope.__exit__(self,*args,**kwargs)
keras.src.backend.common.AutocastScope.maybe_cast(self,value)
keras.src.backend.common.KerasVariable(self,initializer,shape=None,dtype=None,trainable=True,name=None)
keras.src.backend.common.KerasVariable.__abs__(self)
keras.src.backend.common.KerasVariable.__add__(self,other)
keras.src.backend.common.KerasVariable.__and__(self,other)
keras.src.backend.common.KerasVariable.__array__(self,dtype=None)
keras.src.backend.common.KerasVariable.__bool__(self)
keras.src.backend.common.KerasVariable.__eq__(self,other)
keras.src.backend.common.KerasVariable.__floordiv__(self,other)
keras.src.backend.common.KerasVariable.__ge__(self,other)
keras.src.backend.common.KerasVariable.__getitem__(self,idx)
keras.src.backend.common.KerasVariable.__gt__(self,other)
keras.src.backend.common.KerasVariable.__invert__(self)
keras.src.backend.common.KerasVariable.__le__(self,other)
keras.src.backend.common.KerasVariable.__lt__(self,other)
keras.src.backend.common.KerasVariable.__matmul__(self,other)
keras.src.backend.common.KerasVariable.__mod__(self,other)
keras.src.backend.common.KerasVariable.__mul__(self,other)
keras.src.backend.common.KerasVariable.__ne__(self,other)
keras.src.backend.common.KerasVariable.__neg__(self)
keras.src.backend.common.KerasVariable.__or__(self,other)
keras.src.backend.common.KerasVariable.__pos__(self)
keras.src.backend.common.KerasVariable.__pow__(self,other)
keras.src.backend.common.KerasVariable.__radd__(self,other)
keras.src.backend.common.KerasVariable.__rand__(self,other)
keras.src.backend.common.KerasVariable.__repr__(self)
keras.src.backend.common.KerasVariable.__rfloordiv__(self,other)
keras.src.backend.common.KerasVariable.__rmatmul__(self,other)
keras.src.backend.common.KerasVariable.__rmod__(self,other)
keras.src.backend.common.KerasVariable.__rmul__(self,other)
keras.src.backend.common.KerasVariable.__ror__(self,other)
keras.src.backend.common.KerasVariable.__rpow__(self,other)
keras.src.backend.common.KerasVariable.__rsub__(self,other)
keras.src.backend.common.KerasVariable.__rtruediv__(self,other)
keras.src.backend.common.KerasVariable.__rxor__(self,other)
keras.src.backend.common.KerasVariable.__sub__(self,other)
keras.src.backend.common.KerasVariable.__truediv__(self,other)
keras.src.backend.common.KerasVariable.__xor__(self,other)
keras.src.backend.common.KerasVariable._convert_to_tensor(self,value,dtype=None)
keras.src.backend.common.KerasVariable._deferred_initialize(self)
keras.src.backend.common.KerasVariable._initialize(self,value)
keras.src.backend.common.KerasVariable._maybe_autocast(self,value)
keras.src.backend.common.KerasVariable._validate_shape(self,shape)
keras.src.backend.common.KerasVariable.assign(self,value)
keras.src.backend.common.KerasVariable.assign_add(self,value)
keras.src.backend.common.KerasVariable.assign_sub(self,value)
keras.src.backend.common.KerasVariable.constraint(self)
keras.src.backend.common.KerasVariable.constraint(self,value)
keras.src.backend.common.KerasVariable.dtype(self)
keras.src.backend.common.KerasVariable.ndim(self)
keras.src.backend.common.KerasVariable.numpy(self)
keras.src.backend.common.KerasVariable.regularizer(self)
keras.src.backend.common.KerasVariable.regularizer(self,value)
keras.src.backend.common.KerasVariable.shape(self)
keras.src.backend.common.KerasVariable.trainable(self)
keras.src.backend.common.KerasVariable.trainable(self,value)
keras.src.backend.common.KerasVariable.value(self)
keras.src.backend.common.get_autocast_scope()
keras.src.backend.common.is_float_dtype(dtype)
keras.src.backend.common.is_int_dtype(dtype)
keras.src.backend.common.standardize_dtype(dtype)
keras.src.backend.common.standardize_shape(shape)
keras.src.backend.common.variables.AutocastScope(self,dtype)
keras.src.backend.common.variables.AutocastScope.__enter__(self)
keras.src.backend.common.variables.AutocastScope.__exit__(self,*args,**kwargs)
keras.src.backend.common.variables.AutocastScope.__init__(self,dtype)
keras.src.backend.common.variables.AutocastScope.maybe_cast(self,value)
keras.src.backend.common.variables.KerasVariable(self,initializer,shape=None,dtype=None,trainable=True,name=None)
keras.src.backend.common.variables.KerasVariable.__abs__(self)
keras.src.backend.common.variables.KerasVariable.__add__(self,other)
keras.src.backend.common.variables.KerasVariable.__and__(self,other)
keras.src.backend.common.variables.KerasVariable.__array__(self,dtype=None)
keras.src.backend.common.variables.KerasVariable.__bool__(self)
keras.src.backend.common.variables.KerasVariable.__eq__(self,other)
keras.src.backend.common.variables.KerasVariable.__floordiv__(self,other)
keras.src.backend.common.variables.KerasVariable.__ge__(self,other)
keras.src.backend.common.variables.KerasVariable.__getitem__(self,idx)
keras.src.backend.common.variables.KerasVariable.__gt__(self,other)
keras.src.backend.common.variables.KerasVariable.__init__(self,initializer,shape=None,dtype=None,trainable=True,name=None)
keras.src.backend.common.variables.KerasVariable.__invert__(self)
keras.src.backend.common.variables.KerasVariable.__le__(self,other)
keras.src.backend.common.variables.KerasVariable.__lt__(self,other)
keras.src.backend.common.variables.KerasVariable.__matmul__(self,other)
keras.src.backend.common.variables.KerasVariable.__mod__(self,other)
keras.src.backend.common.variables.KerasVariable.__mul__(self,other)
keras.src.backend.common.variables.KerasVariable.__ne__(self,other)
keras.src.backend.common.variables.KerasVariable.__neg__(self)
keras.src.backend.common.variables.KerasVariable.__or__(self,other)
keras.src.backend.common.variables.KerasVariable.__pos__(self)
keras.src.backend.common.variables.KerasVariable.__pow__(self,other)
keras.src.backend.common.variables.KerasVariable.__radd__(self,other)
keras.src.backend.common.variables.KerasVariable.__rand__(self,other)
keras.src.backend.common.variables.KerasVariable.__repr__(self)
keras.src.backend.common.variables.KerasVariable.__rfloordiv__(self,other)
keras.src.backend.common.variables.KerasVariable.__rmatmul__(self,other)
keras.src.backend.common.variables.KerasVariable.__rmod__(self,other)
keras.src.backend.common.variables.KerasVariable.__rmul__(self,other)
keras.src.backend.common.variables.KerasVariable.__ror__(self,other)
keras.src.backend.common.variables.KerasVariable.__rpow__(self,other)
keras.src.backend.common.variables.KerasVariable.__rsub__(self,other)
keras.src.backend.common.variables.KerasVariable.__rtruediv__(self,other)
keras.src.backend.common.variables.KerasVariable.__rxor__(self,other)
keras.src.backend.common.variables.KerasVariable.__sub__(self,other)
keras.src.backend.common.variables.KerasVariable.__truediv__(self,other)
keras.src.backend.common.variables.KerasVariable.__xor__(self,other)
keras.src.backend.common.variables.KerasVariable._convert_to_tensor(self,value,dtype=None)
keras.src.backend.common.variables.KerasVariable._deferred_initialize(self)
keras.src.backend.common.variables.KerasVariable._initialize(self,value)
keras.src.backend.common.variables.KerasVariable._maybe_autocast(self,value)
keras.src.backend.common.variables.KerasVariable._validate_shape(self,shape)
keras.src.backend.common.variables.KerasVariable.assign(self,value)
keras.src.backend.common.variables.KerasVariable.assign_add(self,value)
keras.src.backend.common.variables.KerasVariable.assign_sub(self,value)
keras.src.backend.common.variables.KerasVariable.constraint(self)
keras.src.backend.common.variables.KerasVariable.constraint(self,value)
keras.src.backend.common.variables.KerasVariable.dtype(self)
keras.src.backend.common.variables.KerasVariable.ndim(self)
keras.src.backend.common.variables.KerasVariable.numpy(self)
keras.src.backend.common.variables.KerasVariable.regularizer(self)
keras.src.backend.common.variables.KerasVariable.regularizer(self,value)
keras.src.backend.common.variables.KerasVariable.shape(self)
keras.src.backend.common.variables.KerasVariable.trainable(self)
keras.src.backend.common.variables.KerasVariable.trainable(self,value)
keras.src.backend.common.variables.KerasVariable.value(self)
keras.src.backend.common.variables.get_autocast_scope()
keras.src.backend.common.variables.initialize_all_variables()
keras.src.backend.common.variables.is_float_dtype(dtype)
keras.src.backend.common.variables.is_int_dtype(dtype)
keras.src.backend.common.variables.register_uninitialized_variable(variable)
keras.src.backend.common.variables.shape_equal(a_shape,b_shape)
keras.src.backend.common.variables.standardize_dtype(dtype)
keras.src.backend.common.variables.standardize_shape(shape)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/common/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/common/backend_utils.py----------------------------------------
A:keras.src.backend.common.backend_utils.left_pad->min(pad_len // 2 + pad_len % 2, kernel_size - 1)
A:keras.src.backend.common.backend_utils.torch_padding->max(-((kernel_size % 2 - kernel_size + output_padding) // 2), 0)
A:keras.src.backend.common.backend_utils.(pad_left, pad_right)->_convert_conv_tranpose_padding_args_from_keras_to_jax(kernel_size=kernel_spatial_shape[i], stride=strides_i, dilation_rate=dilation_rate_i, padding=padding, output_padding=output_padding_i)
A:keras.src.backend.common.backend_utils.(torch_padding, torch_output_padding)->_convert_conv_tranpose_padding_args_from_keras_to_torch(kernel_size=kernel_spatial_shape[i], stride=strides_i, dilation_rate=dilation_rate_i, padding=padding, output_padding=output_padding_i)
A:keras.src.backend.common.backend_utils.shape_i->_get_output_shape_given_tf_padding(input_size=input_spatial_shape[i], kernel_size=kernel_spatial_shape[i], strides=strides[i], padding=padding, output_padding=current_output_padding, dilation_rate=dilation_rate[i])
A:keras.src.backend.common.backend_utils.axis->operator.index(axis)
keras.src.backend.common.backend_utils._convert_conv_tranpose_padding_args_from_keras_to_jax(kernel_size,stride,dilation_rate,padding,output_padding)
keras.src.backend.common.backend_utils._convert_conv_tranpose_padding_args_from_keras_to_torch(kernel_size,stride,dilation_rate,padding,output_padding)
keras.src.backend.common.backend_utils._get_output_shape_given_tf_padding(input_size,kernel_size,strides,padding,output_padding,dilation_rate)
keras.src.backend.common.backend_utils.canonicalize_axis(axis,num_dims)
keras.src.backend.common.backend_utils.compute_conv_transpose_output_shape(input_shape,kernel_size,filters,strides,padding,output_padding=None,data_format='channels_last',dilation_rate=1)
keras.src.backend.common.backend_utils.compute_conv_transpose_padding_args_for_jax(input_shape,kernel_shape,strides,padding,output_padding,dilation_rate)
keras.src.backend.common.backend_utils.compute_conv_transpose_padding_args_for_torch(input_shape,kernel_shape,strides,padding,output_padding,dilation_rate)
keras.src.backend.common.backend_utils.standardize_axis_for_numpy(axis)
keras.src.backend.common.backend_utils.to_tuple_or_list(value)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/common/dtypes.py----------------------------------------
A:keras.src.backend.common.dtypes.lattice->_type_promotion_lattice()
A:keras.src.backend.common.dtypes.new_upper_bounds->set().union(*(lattice[b] for b in upper_bounds[n]))
A:keras.src.backend.common.dtypes.LATTICE_UPPER_BOUNDS->_make_lattice_upper_bounds()
A:keras.src.backend.common.dtypes.N->set(nodes)
A:keras.src.backend.common.dtypes.dtype->next((n for n in N if n not in UB))
A:keras.src.backend.common.dtypes.CUB->set.intersection(*bounds)
A:keras.src.backend.common.dtypes.extended_allowed_dtypes->keras.src.backend.common.variables.ALLOWED_DTYPES.union(WEAK_TYPES)
A:keras.src.backend.common.dtypes.(dtypes, weak_types)->zip(*(_dtype_and_weaktype(arg) for arg in args))
A:keras.src.backend.common.dtypes.out_dtype->_resolve_weak_type(out_dtype, precision=precision)
A:keras.src.backend.common.dtypes.out_weak_type->any((out_dtype is t for t in WEAK_TYPES))
keras.src.backend.common.dtypes._dtype_and_weaktype(value)
keras.src.backend.common.dtypes._lattice_result_type(*args)
keras.src.backend.common.dtypes._least_upper_bound(*nodes)
keras.src.backend.common.dtypes._make_lattice_upper_bounds()
keras.src.backend.common.dtypes._resolve_weak_type(dtype,precision='32')
keras.src.backend.common.dtypes._respect_weak_type(dtype,weak_type)
keras.src.backend.common.dtypes._type_promotion_lattice()
keras.src.backend.common.dtypes.result_type(*dtypes)
keras.src.backend.common.result_type(*dtypes)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/common/name_scope.py----------------------------------------
A:keras.src.backend.common.name_scope.name_scope_stack->keras.src.backend.common.global_state.get_global_attribute('name_scope_stack')
keras.src.backend.common.name_scope.current_path()
keras.src.backend.common.name_scope.name_scope(self,name,caller=None,deduplicate=True)
keras.src.backend.common.name_scope.name_scope.__enter__(self)
keras.src.backend.common.name_scope.name_scope.__exit__(self,*args,**kwargs)
keras.src.backend.common.name_scope.name_scope.__init__(self,name,caller=None,deduplicate=True)
keras.src.backend.name_scope(self,name,caller=None,deduplicate=True)
keras.src.backend.name_scope.__enter__(self)
keras.src.backend.name_scope.__exit__(self,*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/common/stateless_scope.py----------------------------------------
A:keras.src.backend.common.stateless_scope.v->keras.src.backend.convert_to_tensor(v, dtype=k.dtype)
A:keras.src.backend.common.stateless_scope.self.original_scope->get_stateless_scope()
keras.src.backend.StatelessScope(self,state_mapping=None,collect_losses=False,initialize_variables=True)
keras.src.backend.StatelessScope.__enter__(self)
keras.src.backend.StatelessScope.__exit__(self,*args,**kwargs)
keras.src.backend.StatelessScope.add_loss(self,loss)
keras.src.backend.StatelessScope.add_update(self,update)
keras.src.backend.StatelessScope.get_current_value(self,variable)
keras.src.backend.common.stateless_scope.StatelessScope(self,state_mapping=None,collect_losses=False,initialize_variables=True)
keras.src.backend.common.stateless_scope.StatelessScope.__enter__(self)
keras.src.backend.common.stateless_scope.StatelessScope.__exit__(self,*args,**kwargs)
keras.src.backend.common.stateless_scope.StatelessScope.__init__(self,state_mapping=None,collect_losses=False,initialize_variables=True)
keras.src.backend.common.stateless_scope.StatelessScope.add_loss(self,loss)
keras.src.backend.common.stateless_scope.StatelessScope.add_update(self,update)
keras.src.backend.common.stateless_scope.StatelessScope.get_current_value(self,variable)
keras.src.backend.common.stateless_scope.get_stateless_scope()
keras.src.backend.common.stateless_scope.in_stateless_scope()
keras.src.backend.get_stateless_scope()
keras.src.backend.in_stateless_scope()


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/common/global_state.py----------------------------------------
A:keras.src.backend.common.global_state.GLOBAL_STATE_TRACKER->threading.local()
A:keras.src.backend.common.global_state.GLOBAL_SETTINGS_TRACKER->threading.local()
A:keras.src.backend.common.global_state.attr->getattr(GLOBAL_STATE_TRACKER, name, None)
keras.src.backend.common.global_state.clear_session()
keras.src.backend.common.global_state.get_global_attribute(name,default=None,set_to_default=False)
keras.src.backend.common.global_state.set_global_attribute(name,value)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/backend/common/keras_tensor.py----------------------------------------
A:keras.src.backend.common.keras_tensor.self.shape->keras.src.backend.standardize_shape(shape)
A:keras.src.backend.common.keras_tensor.self.dtype->keras.src.backend.standardize_dtype(dtype)
keras.src.KerasTensor(self,shape,dtype='float32',sparse=False,record_history=True,name=None)
keras.src.KerasTensor.__abs__(self)
keras.src.KerasTensor.__add__(self,other)
keras.src.KerasTensor.__and__(self,other)
keras.src.KerasTensor.__array__(self)
keras.src.KerasTensor.__bool__(self)
keras.src.KerasTensor.__div__(self,other)
keras.src.KerasTensor.__floordiv__(self,other)
keras.src.KerasTensor.__ge__(self,other)
keras.src.KerasTensor.__getitem__(self,key)
keras.src.KerasTensor.__gt__(self,other)
keras.src.KerasTensor.__invert__(self)
keras.src.KerasTensor.__iter__(self)
keras.src.KerasTensor.__jax_array__(self)
keras.src.KerasTensor.__le__(self,other)
keras.src.KerasTensor.__lt__(self,other)
keras.src.KerasTensor.__matmul__(self,other)
keras.src.KerasTensor.__mod__(self,other)
keras.src.KerasTensor.__mul__(self,other)
keras.src.KerasTensor.__ne__(self,other)
keras.src.KerasTensor.__neg__(self)
keras.src.KerasTensor.__or__(self,other)
keras.src.KerasTensor.__pow__(self,other)
keras.src.KerasTensor.__radd__(self,other)
keras.src.KerasTensor.__rand__(self,other)
keras.src.KerasTensor.__rdiv__(self,other)
keras.src.KerasTensor.__repr__(self)
keras.src.KerasTensor.__rfloordiv__(self,other)
keras.src.KerasTensor.__rmatmul__(self,other)
keras.src.KerasTensor.__rmod__(self,other)
keras.src.KerasTensor.__rmul__(self,other)
keras.src.KerasTensor.__ror__(self,other)
keras.src.KerasTensor.__rpow__(self,other)
keras.src.KerasTensor.__rsub__(self,other)
keras.src.KerasTensor.__rtruediv__(self,other)
keras.src.KerasTensor.__rxor__(self,other)
keras.src.KerasTensor.__sub__(self,other)
keras.src.KerasTensor.__tf_tensor__(self,dtype=None,name=None)
keras.src.KerasTensor.__truediv__(self,other)
keras.src.KerasTensor.__xor__(self,other)
keras.src.KerasTensor.ndim(self)
keras.src.KerasTensor.reshape(self,newshape)
keras.src.KerasTensor.squeeze(self,axis=None)
keras.src.backend.any_symbolic_tensors(args=None,kwargs=None)
keras.src.backend.common.keras_tensor.KerasTensor(self,shape,dtype='float32',sparse=False,record_history=True,name=None)
keras.src.backend.common.keras_tensor.KerasTensor.__abs__(self)
keras.src.backend.common.keras_tensor.KerasTensor.__add__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__and__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__array__(self)
keras.src.backend.common.keras_tensor.KerasTensor.__bool__(self)
keras.src.backend.common.keras_tensor.KerasTensor.__div__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__floordiv__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__ge__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__getitem__(self,key)
keras.src.backend.common.keras_tensor.KerasTensor.__gt__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__init__(self,shape,dtype='float32',sparse=False,record_history=True,name=None)
keras.src.backend.common.keras_tensor.KerasTensor.__invert__(self)
keras.src.backend.common.keras_tensor.KerasTensor.__iter__(self)
keras.src.backend.common.keras_tensor.KerasTensor.__jax_array__(self)
keras.src.backend.common.keras_tensor.KerasTensor.__le__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__lt__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__matmul__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__mod__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__mul__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__ne__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__neg__(self)
keras.src.backend.common.keras_tensor.KerasTensor.__or__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__pow__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__radd__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__rand__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__rdiv__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__repr__(self)
keras.src.backend.common.keras_tensor.KerasTensor.__rfloordiv__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__rmatmul__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__rmod__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__rmul__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__ror__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__rpow__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__rsub__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__rtruediv__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__rxor__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__sub__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__tf_tensor__(self,dtype=None,name=None)
keras.src.backend.common.keras_tensor.KerasTensor.__truediv__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.__xor__(self,other)
keras.src.backend.common.keras_tensor.KerasTensor.ndim(self)
keras.src.backend.common.keras_tensor.KerasTensor.reshape(self,newshape)
keras.src.backend.common.keras_tensor.KerasTensor.squeeze(self,axis=None)
keras.src.backend.common.keras_tensor.any_symbolic_tensors(args=None,kwargs=None)
keras.src.backend.common.keras_tensor.is_keras_tensor(x)
keras.src.backend.is_keras_tensor(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/initializers/__init__.py----------------------------------------
A:keras.src.initializers.__init__.obj->obj()
keras.src.initializers.__init__.deserialize(config,custom_objects=None)
keras.src.initializers.__init__.get(identifier)
keras.src.initializers.__init__.serialize(initializer)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/initializers/random_initializers.py----------------------------------------
A:keras.src.initializers.random_initializers.seed_config->keras.src.saving.serialization_lib.serialize_keras_object(self._init_seed)
A:keras.src.initializers.random_initializers.distribution->distribution.lower().lower()
A:keras.src.initializers.random_initializers.(fan_in, fan_out)->compute_fans(shape)
A:keras.src.initializers.random_initializers.stddev->math.sqrt(scale)
A:keras.src.initializers.random_initializers.limit->math.sqrt(3.0 * scale)
A:keras.src.initializers.random_initializers.shape->tuple(shape)
A:keras.src.initializers.random_initializers.a->keras.src.backend.random.normal(flat_shape, seed=self.seed, dtype=dtype)
A:keras.src.initializers.random_initializers.(q, r)->keras.src.ops.qr(a)
A:keras.src.initializers.random_initializers.d->keras.src.ops.diag(r)
A:keras.src.initializers.random_initializers.q->keras.src.ops.transpose(q)
keras.src.initializers.GlorotNormal(self,seed=None)
keras.src.initializers.GlorotNormal.get_config(self)
keras.src.initializers.GlorotUniform(self,seed=None)
keras.src.initializers.GlorotUniform.get_config(self)
keras.src.initializers.HeNormal(self,seed=None)
keras.src.initializers.HeNormal.get_config(self)
keras.src.initializers.HeUniform(self,seed=None)
keras.src.initializers.HeUniform.get_config(self)
keras.src.initializers.LecunNormal(self,seed=None)
keras.src.initializers.LecunNormal.get_config(self)
keras.src.initializers.LecunUniform(self,seed=None)
keras.src.initializers.LecunUniform.get_config(self)
keras.src.initializers.OrthogonalInitializer(self,gain=1.0,seed=None)
keras.src.initializers.OrthogonalInitializer.get_config(self)
keras.src.initializers.RandomNormal(self,mean=0.0,stddev=0.05,seed=None)
keras.src.initializers.RandomNormal.get_config(self)
keras.src.initializers.RandomUniform(self,minval=-0.05,maxval=0.05,seed=None)
keras.src.initializers.RandomUniform.get_config(self)
keras.src.initializers.TruncatedNormal(self,mean=0.0,stddev=0.05,seed=None)
keras.src.initializers.TruncatedNormal.get_config(self)
keras.src.initializers.VarianceScaling(self,scale=1.0,mode='fan_in',distribution='truncated_normal',seed=None)
keras.src.initializers.VarianceScaling.get_config(self)
keras.src.initializers.random_initializers.GlorotNormal(self,seed=None)
keras.src.initializers.random_initializers.GlorotNormal.__init__(self,seed=None)
keras.src.initializers.random_initializers.GlorotNormal.get_config(self)
keras.src.initializers.random_initializers.GlorotUniform(self,seed=None)
keras.src.initializers.random_initializers.GlorotUniform.__init__(self,seed=None)
keras.src.initializers.random_initializers.GlorotUniform.get_config(self)
keras.src.initializers.random_initializers.HeNormal(self,seed=None)
keras.src.initializers.random_initializers.HeNormal.__init__(self,seed=None)
keras.src.initializers.random_initializers.HeNormal.get_config(self)
keras.src.initializers.random_initializers.HeUniform(self,seed=None)
keras.src.initializers.random_initializers.HeUniform.__init__(self,seed=None)
keras.src.initializers.random_initializers.HeUniform.get_config(self)
keras.src.initializers.random_initializers.LecunNormal(self,seed=None)
keras.src.initializers.random_initializers.LecunNormal.__init__(self,seed=None)
keras.src.initializers.random_initializers.LecunNormal.get_config(self)
keras.src.initializers.random_initializers.LecunUniform(self,seed=None)
keras.src.initializers.random_initializers.LecunUniform.__init__(self,seed=None)
keras.src.initializers.random_initializers.LecunUniform.get_config(self)
keras.src.initializers.random_initializers.OrthogonalInitializer(self,gain=1.0,seed=None)
keras.src.initializers.random_initializers.OrthogonalInitializer.__init__(self,gain=1.0,seed=None)
keras.src.initializers.random_initializers.OrthogonalInitializer.get_config(self)
keras.src.initializers.random_initializers.RandomNormal(self,mean=0.0,stddev=0.05,seed=None)
keras.src.initializers.random_initializers.RandomNormal.__init__(self,mean=0.0,stddev=0.05,seed=None)
keras.src.initializers.random_initializers.RandomNormal.get_config(self)
keras.src.initializers.random_initializers.RandomUniform(self,minval=-0.05,maxval=0.05,seed=None)
keras.src.initializers.random_initializers.RandomUniform.__init__(self,minval=-0.05,maxval=0.05,seed=None)
keras.src.initializers.random_initializers.RandomUniform.get_config(self)
keras.src.initializers.random_initializers.TruncatedNormal(self,mean=0.0,stddev=0.05,seed=None)
keras.src.initializers.random_initializers.TruncatedNormal.__init__(self,mean=0.0,stddev=0.05,seed=None)
keras.src.initializers.random_initializers.TruncatedNormal.get_config(self)
keras.src.initializers.random_initializers.VarianceScaling(self,scale=1.0,mode='fan_in',distribution='truncated_normal',seed=None)
keras.src.initializers.random_initializers.VarianceScaling.__init__(self,scale=1.0,mode='fan_in',distribution='truncated_normal',seed=None)
keras.src.initializers.random_initializers.VarianceScaling.get_config(self)
keras.src.initializers.random_initializers.compute_fans(shape)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/initializers/constant_initializers.py----------------------------------------
A:keras.src.initializers.constant_initializers.dtype->standardize_dtype(dtype)
A:keras.src.initializers.constant_initializers.value->keras.src.saving.serialization_lib.deserialize_keras_object(config['value'])
keras.src.initializers.Constant(self,value=0.0)
keras.src.initializers.Constant.from_config(cls,config)
keras.src.initializers.Constant.get_config(self)
keras.src.initializers.Identity(self,gain=1.0)
keras.src.initializers.Ones(self,shape,dtype=None)
keras.src.initializers.Zeros(self,shape,dtype=None)
keras.src.initializers.constant_initializers.Constant(self,value=0.0)
keras.src.initializers.constant_initializers.Constant.__init__(self,value=0.0)
keras.src.initializers.constant_initializers.Constant.from_config(cls,config)
keras.src.initializers.constant_initializers.Constant.get_config(self)
keras.src.initializers.constant_initializers.Identity(self,gain=1.0)
keras.src.initializers.constant_initializers.Identity.__init__(self,gain=1.0)
keras.src.initializers.constant_initializers.Ones(self,shape,dtype=None)
keras.src.initializers.constant_initializers.Ones.__call__(self,shape,dtype=None)
keras.src.initializers.constant_initializers.Zeros(self,shape,dtype=None)
keras.src.initializers.constant_initializers.Zeros.__call__(self,shape,dtype=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/initializers/initializer.py----------------------------------------
keras.src.initializers.Initializer(self,shape,dtype=None)
keras.src.initializers.Initializer.clone(self)
keras.src.initializers.Initializer.from_config(cls,config)
keras.src.initializers.Initializer.get_config(self)
keras.src.initializers.initializer.Initializer(self,shape,dtype=None)
keras.src.initializers.initializer.Initializer.__call__(self,shape,dtype=None)
keras.src.initializers.initializer.Initializer.clone(self)
keras.src.initializers.initializer.Initializer.from_config(cls,config)
keras.src.initializers.initializer.Initializer.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/random/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/random/seed_generator.py----------------------------------------
A:keras.src.random.seed_generator.custom_backend->kwargs.pop('backend', None)
A:keras.src.random.seed_generator.seed->make_default_seed()
A:keras.src.random.seed_generator.dtype->kwargs.get('dtype', None)
A:keras.src.random.seed_generator.self.state->self.backend.Variable(seed_initializer, shape=(2,), dtype='uint32', trainable=False, name='seed_generator_state')
A:keras.src.random.seed_generator.increment->self.backend.convert_to_tensor(np.array([0, 1]), dtype='uint32')
A:keras.src.random.seed_generator.gen->SeedGenerator()
keras.src.random.SeedGenerator(self,seed=None,**kwargs)
keras.src.random.SeedGenerator.from_config(cls,config)
keras.src.random.SeedGenerator.get_config(self)
keras.src.random.SeedGenerator.next(self,ordered=True)
keras.src.random.seed_generator.SeedGenerator(self,seed=None,**kwargs)
keras.src.random.seed_generator.SeedGenerator.__init__(self,seed=None,**kwargs)
keras.src.random.seed_generator.SeedGenerator.from_config(cls,config)
keras.src.random.seed_generator.SeedGenerator.get_config(self)
keras.src.random.seed_generator.SeedGenerator.next(self,ordered=True)
keras.src.random.seed_generator.draw_seed(seed)
keras.src.random.seed_generator.global_seed_generator()
keras.src.random.seed_generator.make_default_seed()


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/random/random.py----------------------------------------
A:keras.src.random.random.logits_shape->list(backend.convert_to_tensor(logits).shape)
keras.src.random.categorical(logits,num_samples,dtype='int32',seed=None)
keras.src.random.dropout(inputs,rate,noise_shape=None,seed=None)
keras.src.random.gamma(shape,alpha,dtype=None,seed=None)
keras.src.random.normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.src.random.randint(shape,minval,maxval,dtype='int32',seed=None)
keras.src.random.random.beta(shape,alpha,beta,dtype=None,seed=None)
keras.src.random.random.binomial(shape,counts,probabilities,dtype=None,seed=None)
keras.src.random.random.categorical(logits,num_samples,dtype='int32',seed=None)
keras.src.random.random.dropout(inputs,rate,noise_shape=None,seed=None)
keras.src.random.random.gamma(shape,alpha,dtype=None,seed=None)
keras.src.random.random.normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.src.random.random.randint(shape,minval,maxval,dtype='int32',seed=None)
keras.src.random.random.shuffle(x,axis=0,seed=None)
keras.src.random.random.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.src.random.random.uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)
keras.src.random.shuffle(x,axis=0,seed=None)
keras.src.random.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.src.random.uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/optimizers/__init__.py----------------------------------------
A:keras.src.optimizers.__init__.config['class_name']->config['class_name'].lower().lower()
A:keras.src.optimizers.__init__.obj->deserialize(config)
keras.src.optimizers.__init__.LegacyOptimizerWarning(self,*args,**kwargs)
keras.src.optimizers.__init__.LegacyOptimizerWarning.__init__(self,*args,**kwargs)
keras.src.optimizers.__init__.deserialize(config,custom_objects=None)
keras.src.optimizers.__init__.get(identifier)
keras.src.optimizers.__init__.serialize(optimizer)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/optimizers/optimizer.py----------------------------------------
keras.src.optimizers.Optimizer(BackendOptimizer)
keras.src.optimizers.optimizer.Optimizer(BackendOptimizer)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/optimizers/ftrl.py----------------------------------------
A:keras.src.optimizers.ftrl.lr->keras.src.ops.cast(learning_rate, variable.dtype)
A:keras.src.optimizers.ftrl.gradient->keras.src.ops.cast(gradient, variable.dtype)
A:keras.src.optimizers.ftrl.grad_to_use->keras.src.ops.add(gradient, ops.multiply(2 * self.l2_shrinkage_regularization_strength, variable))
A:keras.src.optimizers.ftrl.new_accum->keras.src.ops.add(accum, ops.square(gradient))
A:keras.src.optimizers.ftrl.quadratic->keras.src.ops.add(ops.divide(ops.power(new_accum, -lr_power), lr), 2 * l2_reg)
A:keras.src.optimizers.ftrl.linear_clipped->keras.src.ops.clip(linear, -self.l1_regularization_strength, self.l1_regularization_strength)
A:keras.src.optimizers.ftrl.config->super().get_config()
A:keras.src.optimizers.ftrl.Ftrl.__doc__->Ftrl.__doc__.replace('{{base_optimizer_keyword_args}}', optimizer.base_optimizer_keyword_args)
keras.src.optimizers.Ftrl(self,learning_rate=0.001,learning_rate_power=-0.5,initial_accumulator_value=0.1,l1_regularization_strength=0.0,l2_regularization_strength=0.0,l2_shrinkage_regularization_strength=0.0,beta=0.0,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='ftrl',**kwargs)
keras.src.optimizers.Ftrl.build(self,var_list)
keras.src.optimizers.Ftrl.get_config(self)
keras.src.optimizers.Ftrl.update_step(self,gradient,variable,learning_rate)
keras.src.optimizers.ftrl.Ftrl(self,learning_rate=0.001,learning_rate_power=-0.5,initial_accumulator_value=0.1,l1_regularization_strength=0.0,l2_regularization_strength=0.0,l2_shrinkage_regularization_strength=0.0,beta=0.0,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='ftrl',**kwargs)
keras.src.optimizers.ftrl.Ftrl.__init__(self,learning_rate=0.001,learning_rate_power=-0.5,initial_accumulator_value=0.1,l1_regularization_strength=0.0,l2_regularization_strength=0.0,l2_shrinkage_regularization_strength=0.0,beta=0.0,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='ftrl',**kwargs)
keras.src.optimizers.ftrl.Ftrl.build(self,var_list)
keras.src.optimizers.ftrl.Ftrl.get_config(self)
keras.src.optimizers.ftrl.Ftrl.update_step(self,gradient,variable,learning_rate)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/optimizers/loss_scale_optimizer.py----------------------------------------
A:keras.src.optimizers.loss_scale_optimizer.self.step_counter->self.add_variable(shape=(), dtype='int', initializer=initializers.Zeros(), name='step_counter')
A:keras.src.optimizers.loss_scale_optimizer.self.dynamic_scale->self.add_variable(shape=(), dtype='float32', initializer=initializers.Constant(self.initial_scale), name='dynamic_scale')
A:keras.src.optimizers.loss_scale_optimizer.finite->self.check_finite(grads)
A:keras.src.optimizers.loss_scale_optimizer.mapping->list(zip(self.variables, optimizer_variables))
A:keras.src.optimizers.loss_scale_optimizer.own_variables->keras.src.ops.cond(ops.equal(self.step_counter, self.dynamic_growth_steps - 1), upscale, increment)
A:keras.src.optimizers.loss_scale_optimizer.(new_trainable_variables, new_inner_variables)->self.inner_optimizer.stateless_apply(self.inner_optimizer.variables, unscaled_grads, trainable_variables)
A:keras.src.optimizers.loss_scale_optimizer.finite_per_replica->distribution.extended.call_for_each_replica(self.check_finite, args=(grads,))
A:keras.src.optimizers.loss_scale_optimizer.config->super().get_config()
A:keras.src.optimizers.loss_scale_optimizer.inner_optimizer_config->keras.src.saving.serialization_lib.serialize_keras_object(self.inner_optimizer)
A:keras.src.optimizers.loss_scale_optimizer.inner_optimizer->keras.src.saving.serialization_lib.deserialize_keras_object(config.pop('inner_optimizer'), custom_objects=custom_objects)
A:keras.src.optimizers.loss_scale_optimizer.LossScaleOptimizer.__doc__->LossScaleOptimizer.__doc__.replace('{{base_optimizer_keyword_args}}', optimizer.base_optimizer_keyword_args)
keras.src.optimizers.LossScaleOptimizer(self,inner_optimizer,initial_scale=2.0**15,dynamic_growth_steps=2000,**kwargs)
keras.src.optimizers.LossScaleOptimizer._common_apply(self,grads,trainable_variables=None)
keras.src.optimizers.LossScaleOptimizer._stateful_handle_finite_grads(self,grads,trainable_variables)
keras.src.optimizers.LossScaleOptimizer._stateful_handle_non_finite_grads(self)
keras.src.optimizers.LossScaleOptimizer._stateless_handle_finite_grads(self,optimizer_variables,grads,trainable_variables)
keras.src.optimizers.LossScaleOptimizer._stateless_handle_non_finite_grads(self,optimizer_variables,trainable_variables)
keras.src.optimizers.LossScaleOptimizer._tf_apply(self,grads,trainable_variables=None)
keras.src.optimizers.LossScaleOptimizer.apply(self,grads,trainable_variables=None)
keras.src.optimizers.LossScaleOptimizer.build(self,var_list)
keras.src.optimizers.LossScaleOptimizer.check_finite(self,grads)
keras.src.optimizers.LossScaleOptimizer.finalize_variable_values(self,var_list)
keras.src.optimizers.LossScaleOptimizer.from_config(cls,config,custom_objects=None)
keras.src.optimizers.LossScaleOptimizer.get_config(self)
keras.src.optimizers.LossScaleOptimizer.learning_rate(self)
keras.src.optimizers.LossScaleOptimizer.learning_rate(self,learning_rate)
keras.src.optimizers.LossScaleOptimizer.scale_loss(self,loss)
keras.src.optimizers.LossScaleOptimizer.stateless_apply(self,optimizer_variables,grads,trainable_variables)
keras.src.optimizers.LossScaleOptimizer.variables(self)
keras.src.optimizers.loss_scale_optimizer.LossScaleOptimizer(self,inner_optimizer,initial_scale=2.0**15,dynamic_growth_steps=2000,**kwargs)
keras.src.optimizers.loss_scale_optimizer.LossScaleOptimizer.__init__(self,inner_optimizer,initial_scale=2.0**15,dynamic_growth_steps=2000,**kwargs)
keras.src.optimizers.loss_scale_optimizer.LossScaleOptimizer._common_apply(self,grads,trainable_variables=None)
keras.src.optimizers.loss_scale_optimizer.LossScaleOptimizer._stateful_handle_finite_grads(self,grads,trainable_variables)
keras.src.optimizers.loss_scale_optimizer.LossScaleOptimizer._stateful_handle_non_finite_grads(self)
keras.src.optimizers.loss_scale_optimizer.LossScaleOptimizer._stateless_handle_finite_grads(self,optimizer_variables,grads,trainable_variables)
keras.src.optimizers.loss_scale_optimizer.LossScaleOptimizer._stateless_handle_non_finite_grads(self,optimizer_variables,trainable_variables)
keras.src.optimizers.loss_scale_optimizer.LossScaleOptimizer._tf_apply(self,grads,trainable_variables=None)
keras.src.optimizers.loss_scale_optimizer.LossScaleOptimizer.apply(self,grads,trainable_variables=None)
keras.src.optimizers.loss_scale_optimizer.LossScaleOptimizer.build(self,var_list)
keras.src.optimizers.loss_scale_optimizer.LossScaleOptimizer.check_finite(self,grads)
keras.src.optimizers.loss_scale_optimizer.LossScaleOptimizer.finalize_variable_values(self,var_list)
keras.src.optimizers.loss_scale_optimizer.LossScaleOptimizer.from_config(cls,config,custom_objects=None)
keras.src.optimizers.loss_scale_optimizer.LossScaleOptimizer.get_config(self)
keras.src.optimizers.loss_scale_optimizer.LossScaleOptimizer.learning_rate(self)
keras.src.optimizers.loss_scale_optimizer.LossScaleOptimizer.learning_rate(self,learning_rate)
keras.src.optimizers.loss_scale_optimizer.LossScaleOptimizer.scale_loss(self,loss)
keras.src.optimizers.loss_scale_optimizer.LossScaleOptimizer.stateless_apply(self,optimizer_variables,grads,trainable_variables)
keras.src.optimizers.loss_scale_optimizer.LossScaleOptimizer.variables(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/optimizers/adagrad.py----------------------------------------
A:keras.src.optimizers.adagrad.initializer->keras.src.initializers.Constant(self.initial_accumulator_value)
A:keras.src.optimizers.adagrad.lr->keras.src.ops.cast(learning_rate, variable.dtype)
A:keras.src.optimizers.adagrad.gradient->keras.src.ops.cast(gradient, variable.dtype)
A:keras.src.optimizers.adagrad.config->super().get_config()
A:keras.src.optimizers.adagrad.Adagrad.__doc__->Adagrad.__doc__.replace('{{base_optimizer_keyword_args}}', optimizer.base_optimizer_keyword_args)
keras.src.optimizers.Adagrad(self,learning_rate=0.001,initial_accumulator_value=0.1,epsilon=1e-07,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='adagrad',**kwargs)
keras.src.optimizers.Adagrad.build(self,var_list)
keras.src.optimizers.Adagrad.get_config(self)
keras.src.optimizers.Adagrad.update_step(self,gradient,variable,learning_rate)
keras.src.optimizers.adagrad.Adagrad(self,learning_rate=0.001,initial_accumulator_value=0.1,epsilon=1e-07,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='adagrad',**kwargs)
keras.src.optimizers.adagrad.Adagrad.__init__(self,learning_rate=0.001,initial_accumulator_value=0.1,epsilon=1e-07,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='adagrad',**kwargs)
keras.src.optimizers.adagrad.Adagrad.build(self,var_list)
keras.src.optimizers.adagrad.Adagrad.get_config(self)
keras.src.optimizers.adagrad.Adagrad.update_step(self,gradient,variable,learning_rate)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/optimizers/sgd.py----------------------------------------
A:keras.src.optimizers.sgd.learning_rate->keras.src.ops.cast(learning_rate, variable.dtype)
A:keras.src.optimizers.sgd.gradient->keras.src.ops.cast(gradient, variable.dtype)
A:keras.src.optimizers.sgd.momentum->keras.src.ops.cast(self.momentum, variable.dtype)
A:keras.src.optimizers.sgd.config->super().get_config()
A:keras.src.optimizers.sgd.SGD.__doc__->SGD.__doc__.replace('{{base_optimizer_keyword_args}}', optimizer.base_optimizer_keyword_args)
keras.src.optimizers.SGD(self,learning_rate=0.01,momentum=0.0,nesterov=False,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='SGD',**kwargs)
keras.src.optimizers.SGD.build(self,variables)
keras.src.optimizers.SGD.get_config(self)
keras.src.optimizers.SGD.update_step(self,gradient,variable,learning_rate)
keras.src.optimizers.sgd.SGD(self,learning_rate=0.01,momentum=0.0,nesterov=False,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='SGD',**kwargs)
keras.src.optimizers.sgd.SGD.__init__(self,learning_rate=0.01,momentum=0.0,nesterov=False,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='SGD',**kwargs)
keras.src.optimizers.sgd.SGD.build(self,variables)
keras.src.optimizers.sgd.SGD.get_config(self)
keras.src.optimizers.sgd.SGD.update_step(self,gradient,variable,learning_rate)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/optimizers/adafactor.py----------------------------------------
A:keras.src.optimizers.adafactor.lr->keras.src.ops.minimum(lr, 1 / ops.sqrt(local_step))
A:keras.src.optimizers.adafactor.gradient->keras.src.ops.cast(gradient, variable.dtype)
A:keras.src.optimizers.adafactor.epsilon_2->keras.src.ops.cast(self.epsilon_2, variable.dtype)
A:keras.src.optimizers.adafactor.one->keras.src.ops.cast(1.0, variable.dtype)
A:keras.src.optimizers.adafactor.local_step->keras.src.ops.cast(self.iterations + 1, variable.dtype)
A:keras.src.optimizers.adafactor.rho_t->keras.src.ops.minimum(lr, 1 / ops.sqrt(local_step))
A:keras.src.optimizers.adafactor.regulated_grad_square->keras.src.ops.add(ops.square(gradient), self.epsilon_1)
A:keras.src.optimizers.adafactor.u_t->keras.src.ops.divide(gradient, ops.sqrt(v))
A:keras.src.optimizers.adafactor.u_t_hat->keras.src.ops.divide(u_t, ops.maximum(one, ops.divide(self._rms(u_t), self.clip_threshold)))
A:keras.src.optimizers.adafactor.config->super().get_config()
A:keras.src.optimizers.adafactor.Adafactor.__doc__->Adafactor.__doc__.replace('{{base_optimizer_keyword_args}}', optimizer.base_optimizer_keyword_args)
keras.src.optimizers.Adafactor(self,learning_rate=0.001,beta_2_decay=-0.8,epsilon_1=1e-30,epsilon_2=0.001,clip_threshold=1.0,relative_step=True,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='adafactor',**kwargs)
keras.src.optimizers.Adafactor._rms(self,x)
keras.src.optimizers.Adafactor.build(self,var_list)
keras.src.optimizers.Adafactor.get_config(self)
keras.src.optimizers.Adafactor.update_step(self,gradient,variable,learning_rate)
keras.src.optimizers.adafactor.Adafactor(self,learning_rate=0.001,beta_2_decay=-0.8,epsilon_1=1e-30,epsilon_2=0.001,clip_threshold=1.0,relative_step=True,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='adafactor',**kwargs)
keras.src.optimizers.adafactor.Adafactor.__init__(self,learning_rate=0.001,beta_2_decay=-0.8,epsilon_1=1e-30,epsilon_2=0.001,clip_threshold=1.0,relative_step=True,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='adafactor',**kwargs)
keras.src.optimizers.adafactor.Adafactor._rms(self,x)
keras.src.optimizers.adafactor.Adafactor.build(self,var_list)
keras.src.optimizers.adafactor.Adafactor.get_config(self)
keras.src.optimizers.adafactor.Adafactor.update_step(self,gradient,variable,learning_rate)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/optimizers/base_optimizer.py----------------------------------------
A:keras.src.optimizers.base_optimizer.name->auto_name(self.__class__.__name__)
A:keras.src.optimizers.base_optimizer.self._tracker->keras.src.utils.tracking.Tracker({'variables': (lambda x: isinstance(x, backend.Variable), self._variables)})
A:keras.src.optimizers.base_optimizer.iterations->keras.src.backend.Variable(0, name='iteration', dtype='int', trainable=False)
A:keras.src.optimizers.base_optimizer.learning_rate->keras.src.saving.serialization_lib.serialize_keras_object(self._learning_rate)
A:keras.src.optimizers.base_optimizer.initializer->keras.src.initializers.get(initializer)
A:keras.src.optimizers.base_optimizer.variable->keras.src.backend.Variable(initializer=initializer, shape=shape, dtype=dtype, trainable=False, name=name)
A:keras.src.optimizers.base_optimizer.(grads, trainable_variables)->self._filter_empty_gradients(grads, trainable_variables)
A:keras.src.optimizers.base_optimizer.trainable_variables->list(trainable_variables)
A:keras.src.optimizers.base_optimizer.grads->self._clip_gradients(grads)
A:keras.src.optimizers.base_optimizer.new_v->scope.get_current_value(v)
A:keras.src.optimizers.base_optimizer.store[str(i)]->keras.src.backend.Variable(initializer=initializer, shape=shape, dtype=dtype, trainable=False, name=name).numpy()
A:keras.src.optimizers.base_optimizer.exclude_from_weight_decay->getattr(self, '_exclude_from_weight_decay', [])
A:keras.src.optimizers.base_optimizer.exclude_from_weight_decay_names->getattr(self, '_exclude_from_weight_decay_names', [])
A:keras.src.optimizers.base_optimizer.variable_id->self._var_key(variable)
A:keras.src.optimizers.base_optimizer.lr->keras.src.ops.cast(self.learning_rate, variable.dtype)
A:keras.src.optimizers.base_optimizer.wd->keras.src.ops.cast(self.weight_decay, variable.dtype)
A:keras.src.optimizers.base_optimizer.not_first_step->keras.src.ops.not_equal(self.iterations, 0)
A:keras.src.optimizers.base_optimizer.config['learning_rate']->keras.src.saving.serialization_lib.deserialize_keras_object(config['learning_rate'], custom_objects=custom_objects)
A:keras.src.optimizers.base_optimizer.value->self._tracker.track(value)
A:keras.src.optimizers.base_optimizer.l2sum->keras.src.ops.sum(ops.square(values), axes, keepdims=True)
A:keras.src.optimizers.base_optimizer.l2sum_safe->keras.src.ops.where(pred, l2sum, ops.ones_like(l2sum))
A:keras.src.optimizers.base_optimizer.l2norm->keras.src.ops.where(pred, ops.sqrt(l2sum_safe), l2sum)
A:keras.src.optimizers.base_optimizer.intermediate->keras.src.ops.multiply(values, self.clipnorm)
A:keras.src.optimizers.base_optimizer.squared_norm->keras.src.ops.sum(ops.stack(squared_norms))
A:keras.src.optimizers.base_optimizer.use_norm->global_norm(value_list)
keras.src.optimizers.base_optimizer.BaseOptimizer(self,learning_rate,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,loss_scale_factor=None,gradient_accumulation_steps=None,name=None,**kwargs)
keras.src.optimizers.base_optimizer.BaseOptimizer.__init__(self,learning_rate,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,loss_scale_factor=None,gradient_accumulation_steps=None,name=None,**kwargs)
keras.src.optimizers.base_optimizer.BaseOptimizer.__setattr__(self,name,value)
keras.src.optimizers.base_optimizer.BaseOptimizer._apply_weight_decay(self,variables)
keras.src.optimizers.base_optimizer.BaseOptimizer._backend_apply_gradients(self,grads,trainable_variables)
keras.src.optimizers.base_optimizer.BaseOptimizer._backend_increment_gradient_accumulators(self,grads)
keras.src.optimizers.base_optimizer.BaseOptimizer._backend_reset_gradient_accumulators(self)
keras.src.optimizers.base_optimizer.BaseOptimizer._backend_update_step(self,grads,trainable_variables,learning_rate)
keras.src.optimizers.base_optimizer.BaseOptimizer._check_super_called(self)
keras.src.optimizers.base_optimizer.BaseOptimizer._check_variables_are_known(self,variables)
keras.src.optimizers.base_optimizer.BaseOptimizer._clip_by_norm(self,values,axes=None)
keras.src.optimizers.base_optimizer.BaseOptimizer._clip_gradients(self,grads)
keras.src.optimizers.base_optimizer.BaseOptimizer._filter_empty_gradients(self,grads,vars)
keras.src.optimizers.base_optimizer.BaseOptimizer._get_current_learning_rate(self)
keras.src.optimizers.base_optimizer.BaseOptimizer._get_variable_index(self,variable)
keras.src.optimizers.base_optimizer.BaseOptimizer._overwrite_model_variables_with_average_value(self,trainable_variables)
keras.src.optimizers.base_optimizer.BaseOptimizer._track_variable(self,variable)
keras.src.optimizers.base_optimizer.BaseOptimizer._update_model_variables_moving_average(self,trainable_variables)
keras.src.optimizers.base_optimizer.BaseOptimizer._use_weight_decay(self,variable)
keras.src.optimizers.base_optimizer.BaseOptimizer._var_key(self,variable)
keras.src.optimizers.base_optimizer.BaseOptimizer.add_variable(self,shape,initializer='zeros',dtype=None,name=None)
keras.src.optimizers.base_optimizer.BaseOptimizer.add_variable_from_reference(self,reference_variable,name=None,initializer='zeros')
keras.src.optimizers.base_optimizer.BaseOptimizer.apply(self,grads,trainable_variables=None)
keras.src.optimizers.base_optimizer.BaseOptimizer.apply_gradients(self,grads_and_vars)
keras.src.optimizers.base_optimizer.BaseOptimizer.assign(self,variable,value)
keras.src.optimizers.base_optimizer.BaseOptimizer.assign_add(self,variable,value)
keras.src.optimizers.base_optimizer.BaseOptimizer.assign_sub(self,variable,value)
keras.src.optimizers.base_optimizer.BaseOptimizer.build(self,variables)
keras.src.optimizers.base_optimizer.BaseOptimizer.exclude_from_weight_decay(self,var_list=None,var_names=None)
keras.src.optimizers.base_optimizer.BaseOptimizer.finalize_variable_values(self,var_list)
keras.src.optimizers.base_optimizer.BaseOptimizer.from_config(cls,config,custom_objects=None)
keras.src.optimizers.base_optimizer.BaseOptimizer.get_config(self)
keras.src.optimizers.base_optimizer.BaseOptimizer.learning_rate(self)
keras.src.optimizers.base_optimizer.BaseOptimizer.learning_rate(self,learning_rate)
keras.src.optimizers.base_optimizer.BaseOptimizer.load_own_variables(self,store)
keras.src.optimizers.base_optimizer.BaseOptimizer.save_own_variables(self,store)
keras.src.optimizers.base_optimizer.BaseOptimizer.scale_loss(self,loss)
keras.src.optimizers.base_optimizer.BaseOptimizer.set_weights(self,weights)
keras.src.optimizers.base_optimizer.BaseOptimizer.stateless_apply(self,optimizer_variables,grads,trainable_variables)
keras.src.optimizers.base_optimizer.BaseOptimizer.update_step(self,gradient,variable,learning_rate)
keras.src.optimizers.base_optimizer.BaseOptimizer.variables(self)
keras.src.optimizers.base_optimizer.clip_by_global_norm(value_list,clip_norm)
keras.src.optimizers.base_optimizer.global_norm(value_list)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/optimizers/adamax.py----------------------------------------
A:keras.src.optimizers.adamax.lr->keras.src.ops.cast(learning_rate, variable.dtype)
A:keras.src.optimizers.adamax.gradient->keras.src.ops.cast(gradient, variable.dtype)
A:keras.src.optimizers.adamax.local_step->keras.src.ops.cast(self.iterations + 1, variable.dtype)
A:keras.src.optimizers.adamax.beta_1_power->keras.src.ops.power(ops.cast(self.beta_1, variable.dtype), local_step)
A:keras.src.optimizers.adamax.config->super().get_config()
A:keras.src.optimizers.adamax.Adamax.__doc__->Adamax.__doc__.replace('{{base_optimizer_keyword_args}}', optimizer.base_optimizer_keyword_args)
keras.src.optimizers.Adamax(self,learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='adamax',**kwargs)
keras.src.optimizers.Adamax.build(self,var_list)
keras.src.optimizers.Adamax.get_config(self)
keras.src.optimizers.Adamax.update_step(self,gradient,variable,learning_rate)
keras.src.optimizers.adamax.Adamax(self,learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='adamax',**kwargs)
keras.src.optimizers.adamax.Adamax.__init__(self,learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='adamax',**kwargs)
keras.src.optimizers.adamax.Adamax.build(self,var_list)
keras.src.optimizers.adamax.Adamax.get_config(self)
keras.src.optimizers.adamax.Adamax.update_step(self,gradient,variable,learning_rate)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/optimizers/adamw.py----------------------------------------
A:keras.src.optimizers.adamw.AdamW.__doc__->AdamW.__doc__.replace('{{base_optimizer_keyword_args}}', optimizer.base_optimizer_keyword_args)
keras.src.optimizers.AdamW(self,learning_rate=0.001,weight_decay=0.004,beta_1=0.9,beta_2=0.999,epsilon=1e-07,amsgrad=False,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='adamw',**kwargs)
keras.src.optimizers.adamw.AdamW(self,learning_rate=0.001,weight_decay=0.004,beta_1=0.9,beta_2=0.999,epsilon=1e-07,amsgrad=False,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='adamw',**kwargs)
keras.src.optimizers.adamw.AdamW.__init__(self,learning_rate=0.001,weight_decay=0.004,beta_1=0.9,beta_2=0.999,epsilon=1e-07,amsgrad=False,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='adamw',**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/optimizers/lion.py----------------------------------------
A:keras.src.optimizers.lion.lr->keras.src.ops.cast(learning_rate, variable.dtype)
A:keras.src.optimizers.lion.gradient->keras.src.ops.cast(gradient, variable.dtype)
A:keras.src.optimizers.lion.beta_1->keras.src.ops.cast(self.beta_1, variable.dtype)
A:keras.src.optimizers.lion.beta_2->keras.src.ops.cast(self.beta_2, variable.dtype)
A:keras.src.optimizers.lion.config->super().get_config()
A:keras.src.optimizers.lion.Lion.__doc__->Lion.__doc__.replace('{{base_optimizer_keyword_args}}', optimizer.base_optimizer_keyword_args)
keras.src.optimizers.Lion(self,learning_rate=0.001,beta_1=0.9,beta_2=0.99,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='lion',**kwargs)
keras.src.optimizers.Lion.build(self,var_list)
keras.src.optimizers.Lion.get_config(self)
keras.src.optimizers.Lion.update_step(self,gradient,variable,learning_rate)
keras.src.optimizers.lion.Lion(self,learning_rate=0.001,beta_1=0.9,beta_2=0.99,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='lion',**kwargs)
keras.src.optimizers.lion.Lion.__init__(self,learning_rate=0.001,beta_1=0.9,beta_2=0.99,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='lion',**kwargs)
keras.src.optimizers.lion.Lion.build(self,var_list)
keras.src.optimizers.lion.Lion.get_config(self)
keras.src.optimizers.lion.Lion.update_step(self,gradient,variable,learning_rate)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/optimizers/rmsprop.py----------------------------------------
A:keras.src.optimizers.rmsprop.lr->keras.src.ops.cast(learning_rate, variable.dtype)
A:keras.src.optimizers.rmsprop.gradient->keras.src.ops.cast(gradient, variable.dtype)
A:keras.src.optimizers.rmsprop.denominator->keras.src.ops.add(velocity, self.epsilon)
A:keras.src.optimizers.rmsprop.increment->keras.src.ops.divide(ops.multiply(lr, gradient), ops.sqrt(denominator))
A:keras.src.optimizers.rmsprop.config->super().get_config()
A:keras.src.optimizers.rmsprop.RMSprop.__doc__->RMSprop.__doc__.replace('{{base_optimizer_keyword_args}}', optimizer.base_optimizer_keyword_args)
keras.src.optimizers.RMSprop(self,learning_rate=0.001,rho=0.9,momentum=0.0,epsilon=1e-07,centered=False,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=100,name='rmsprop',**kwargs)
keras.src.optimizers.RMSprop.build(self,var_list)
keras.src.optimizers.RMSprop.get_config(self)
keras.src.optimizers.RMSprop.update_step(self,gradient,variable,learning_rate)
keras.src.optimizers.rmsprop.RMSprop(self,learning_rate=0.001,rho=0.9,momentum=0.0,epsilon=1e-07,centered=False,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=100,name='rmsprop',**kwargs)
keras.src.optimizers.rmsprop.RMSprop.__init__(self,learning_rate=0.001,rho=0.9,momentum=0.0,epsilon=1e-07,centered=False,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=100,name='rmsprop',**kwargs)
keras.src.optimizers.rmsprop.RMSprop.build(self,var_list)
keras.src.optimizers.rmsprop.RMSprop.get_config(self)
keras.src.optimizers.rmsprop.RMSprop.update_step(self,gradient,variable,learning_rate)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/optimizers/adadelta.py----------------------------------------
A:keras.src.optimizers.adadelta.lr->keras.src.ops.cast(learning_rate, variable.dtype)
A:keras.src.optimizers.adadelta.grad->keras.src.ops.cast(grad, variable.dtype)
A:keras.src.optimizers.adadelta.delta_var->keras.src.ops.negative(ops.divide(ops.multiply(rms(accumulated_delta_var), grad), rms(accumulated_grad)))
A:keras.src.optimizers.adadelta.config->super().get_config()
A:keras.src.optimizers.adadelta.Adadelta.__doc__->Adadelta.__doc__.replace('{{base_optimizer_keyword_args}}', optimizer.base_optimizer_keyword_args)
keras.src.optimizers.Adadelta(self,learning_rate=0.001,rho=0.95,epsilon=1e-07,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='adadelta',**kwargs)
keras.src.optimizers.Adadelta.build(self,var_list)
keras.src.optimizers.Adadelta.get_config(self)
keras.src.optimizers.Adadelta.update_step(self,grad,variable,learning_rate)
keras.src.optimizers.adadelta.Adadelta(self,learning_rate=0.001,rho=0.95,epsilon=1e-07,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='adadelta',**kwargs)
keras.src.optimizers.adadelta.Adadelta.__init__(self,learning_rate=0.001,rho=0.95,epsilon=1e-07,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='adadelta',**kwargs)
keras.src.optimizers.adadelta.Adadelta.build(self,var_list)
keras.src.optimizers.adadelta.Adadelta.get_config(self)
keras.src.optimizers.adadelta.Adadelta.update_step(self,grad,variable,learning_rate)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/optimizers/adam.py----------------------------------------
A:keras.src.optimizers.adam.lr->keras.src.ops.cast(learning_rate, variable.dtype)
A:keras.src.optimizers.adam.gradient->keras.src.ops.cast(gradient, variable.dtype)
A:keras.src.optimizers.adam.local_step->keras.src.ops.cast(self.iterations + 1, variable.dtype)
A:keras.src.optimizers.adam.beta_1_power->keras.src.ops.power(ops.cast(self.beta_1, variable.dtype), local_step)
A:keras.src.optimizers.adam.beta_2_power->keras.src.ops.power(ops.cast(self.beta_2, variable.dtype), local_step)
A:keras.src.optimizers.adam.config->super().get_config()
A:keras.src.optimizers.adam.Adam.__doc__->Adam.__doc__.replace('{{base_optimizer_keyword_args}}', optimizer.base_optimizer_keyword_args)
keras.src.optimizers.Adam(self,learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,amsgrad=False,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='adam',**kwargs)
keras.src.optimizers.Adam.build(self,var_list)
keras.src.optimizers.Adam.get_config(self)
keras.src.optimizers.Adam.update_step(self,gradient,variable,learning_rate)
keras.src.optimizers.adam.Adam(self,learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,amsgrad=False,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='adam',**kwargs)
keras.src.optimizers.adam.Adam.__init__(self,learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,amsgrad=False,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='adam',**kwargs)
keras.src.optimizers.adam.Adam.build(self,var_list)
keras.src.optimizers.adam.Adam.get_config(self)
keras.src.optimizers.adam.Adam.update_step(self,gradient,variable,learning_rate)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/optimizers/nadam.py----------------------------------------
A:keras.src.optimizers.nadam.dtype->keras.src.backend.floatx()
A:keras.src.optimizers.nadam.self._u_product->keras.src.backend.Variable(1.0, dtype=dtype)
A:keras.src.optimizers.nadam.lr->keras.src.ops.cast(learning_rate, var_dtype)
A:keras.src.optimizers.nadam.gradient->keras.src.ops.cast(gradient, var_dtype)
A:keras.src.optimizers.nadam.local_step->keras.src.ops.cast(self.iterations + 1, var_dtype)
A:keras.src.optimizers.nadam.next_step->keras.src.ops.cast(self.iterations + 2, var_dtype)
A:keras.src.optimizers.nadam.decay->keras.src.ops.cast(0.96, var_dtype)
A:keras.src.optimizers.nadam.beta_1->keras.src.ops.cast(self.beta_1, var_dtype)
A:keras.src.optimizers.nadam.beta_2->keras.src.ops.cast(self.beta_2, var_dtype)
A:keras.src.optimizers.nadam.u_product_t->keras.src.ops.cast(self._u_product, var_dtype)
A:keras.src.optimizers.nadam.beta_2_power->keras.src.ops.power(beta_2, local_step)
A:keras.src.optimizers.nadam.m_hat->keras.src.ops.add(ops.divide(ops.multiply(u_t_1, m), 1 - u_product_t_1), ops.divide(ops.multiply(1 - u_t, gradient), 1 - u_product_t))
A:keras.src.optimizers.nadam.v_hat->keras.src.ops.divide(v, 1 - beta_2_power)
A:keras.src.optimizers.nadam.config->super().get_config()
A:keras.src.optimizers.nadam.Nadam.__doc__->Nadam.__doc__.replace('{{base_optimizer_keyword_args}}', optimizer.base_optimizer_keyword_args)
keras.src.optimizers.Nadam(self,learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='nadam',**kwargs)
keras.src.optimizers.Nadam._backend_update_step(self,grads,trainable_variables,learning_rate)
keras.src.optimizers.Nadam.build(self,var_list)
keras.src.optimizers.Nadam.get_config(self)
keras.src.optimizers.Nadam.update_step(self,gradient,variable,learning_rate)
keras.src.optimizers.nadam.Nadam(self,learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='nadam',**kwargs)
keras.src.optimizers.nadam.Nadam.__init__(self,learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,weight_decay=None,clipnorm=None,clipvalue=None,global_clipnorm=None,use_ema=False,ema_momentum=0.99,ema_overwrite_frequency=None,name='nadam',**kwargs)
keras.src.optimizers.nadam.Nadam._backend_update_step(self,grads,trainable_variables,learning_rate)
keras.src.optimizers.nadam.Nadam.build(self,var_list)
keras.src.optimizers.nadam.Nadam.get_config(self)
keras.src.optimizers.nadam.Nadam.update_step(self,gradient,variable,learning_rate)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/optimizers/schedules/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/optimizers/schedules/learning_rate_schedule.py----------------------------------------
A:keras.src.optimizers.schedules.learning_rate_schedule.initial_learning_rate->keras.src.ops.convert_to_tensor(self.initial_learning_rate)
A:keras.src.optimizers.schedules.learning_rate_schedule.decay_steps->keras.src.ops.cast(self.decay_steps, dtype)
A:keras.src.optimizers.schedules.learning_rate_schedule.decay_rate->keras.src.ops.cast(self.decay_rate, dtype)
A:keras.src.optimizers.schedules.learning_rate_schedule.global_step_recomp->keras.src.ops.cast(step, dtype)
A:keras.src.optimizers.schedules.learning_rate_schedule.p->keras.src.ops.floor(p)
A:keras.src.optimizers.schedules.learning_rate_schedule.step->keras.src.ops.convert_to_tensor(step)
A:keras.src.optimizers.schedules.learning_rate_schedule.b->keras.src.ops.cast(b, step.dtype)
A:keras.src.optimizers.schedules.learning_rate_schedule.result_value->keras.src.ops.array(0, dtype=result_dtype)
A:keras.src.optimizers.schedules.learning_rate_schedule.step_less_than_first_boundary->keras.src.ops.cast(step <= boundaries[0], result_dtype)
A:keras.src.optimizers.schedules.learning_rate_schedule.step_greater_than_last_boundary->keras.src.ops.cast(step > boundaries[-1], result_dtype)
A:keras.src.optimizers.schedules.learning_rate_schedule.step_in_range->keras.src.ops.cast((step > low) & (step <= high), result_dtype)
A:keras.src.optimizers.schedules.learning_rate_schedule.end_learning_rate->keras.src.ops.cast(self.end_learning_rate, dtype)
A:keras.src.optimizers.schedules.learning_rate_schedule.power->keras.src.ops.cast(self.power, dtype)
A:keras.src.optimizers.schedules.learning_rate_schedule.decay_steps_recomp->keras.src.ops.multiply(decay_steps_recomp, multiplier)
A:keras.src.optimizers.schedules.learning_rate_schedule.multiplier->keras.src.ops.where(ops.equal(global_step_recomp, 0), 1.0, ops.ceil(global_step_recomp / self.decay_steps))
A:keras.src.optimizers.schedules.learning_rate_schedule.const->keras.src.ops.cast(ops.array(1), dtype)
A:keras.src.optimizers.schedules.learning_rate_schedule.denom->keras.src.ops.add(const, ops.multiply(decay_rate, p))
A:keras.src.optimizers.schedules.learning_rate_schedule.pi->keras.src.ops.array(math.pi, dtype=dtype)
A:keras.src.optimizers.schedules.learning_rate_schedule.warmup_target->keras.src.ops.cast(self.warmup_target, dtype)
A:keras.src.optimizers.schedules.learning_rate_schedule.warmup_steps->keras.src.ops.cast(self.warmup_steps, dtype)
A:keras.src.optimizers.schedules.learning_rate_schedule.first_decay_steps->keras.src.ops.cast(self.first_decay_steps, dtype)
A:keras.src.optimizers.schedules.learning_rate_schedule.alpha->keras.src.ops.cast(self.alpha, dtype)
A:keras.src.optimizers.schedules.learning_rate_schedule.t_mul->keras.src.ops.cast(self._t_mul, dtype)
A:keras.src.optimizers.schedules.learning_rate_schedule.m_mul->keras.src.ops.cast(self._m_mul, dtype)
A:keras.src.optimizers.schedules.learning_rate_schedule.i_restart->keras.src.ops.floor(completed_fraction)
A:keras.src.optimizers.schedules.learning_rate_schedule.(i_restart, completed_fraction)->keras.src.ops.cond(ops.equal(t_mul, 1.0), lambda : compute_step(completed_fraction, geometric=False), lambda : compute_step(completed_fraction, geometric=True))
keras.src.optimizers.schedules.CosineDecay(self,initial_learning_rate,decay_steps,alpha=0.0,name='CosineDecay',warmup_target=None,warmup_steps=0)
keras.src.optimizers.schedules.CosineDecay._decay_function(self,step,decay_steps,decay_from_lr,dtype)
keras.src.optimizers.schedules.CosineDecay._warmup_function(self,step,warmup_steps,warmup_target,initial_learning_rate)
keras.src.optimizers.schedules.CosineDecay.get_config(self)
keras.src.optimizers.schedules.CosineDecayRestarts(self,initial_learning_rate,first_decay_steps,t_mul=2.0,m_mul=1.0,alpha=0.0,name='SGDRDecay')
keras.src.optimizers.schedules.CosineDecayRestarts.get_config(self)
keras.src.optimizers.schedules.ExponentialDecay(self,initial_learning_rate,decay_steps,decay_rate,staircase=False,name='ExponentialDecay')
keras.src.optimizers.schedules.ExponentialDecay.get_config(self)
keras.src.optimizers.schedules.InverseTimeDecay(self,initial_learning_rate,decay_steps,decay_rate,staircase=False,name='InverseTimeDecay')
keras.src.optimizers.schedules.InverseTimeDecay.get_config(self)
keras.src.optimizers.schedules.PiecewiseConstantDecay(self,boundaries,values,name='PiecewiseConstant')
keras.src.optimizers.schedules.PiecewiseConstantDecay.get_config(self)
keras.src.optimizers.schedules.PolynomialDecay(self,initial_learning_rate,decay_steps,end_learning_rate=0.0001,power=1.0,cycle=False,name='PolynomialDecay')
keras.src.optimizers.schedules.PolynomialDecay.get_config(self)
keras.src.optimizers.schedules.learning_rate_schedule.CosineDecay(self,initial_learning_rate,decay_steps,alpha=0.0,name='CosineDecay',warmup_target=None,warmup_steps=0)
keras.src.optimizers.schedules.learning_rate_schedule.CosineDecay.__init__(self,initial_learning_rate,decay_steps,alpha=0.0,name='CosineDecay',warmup_target=None,warmup_steps=0)
keras.src.optimizers.schedules.learning_rate_schedule.CosineDecay._decay_function(self,step,decay_steps,decay_from_lr,dtype)
keras.src.optimizers.schedules.learning_rate_schedule.CosineDecay._warmup_function(self,step,warmup_steps,warmup_target,initial_learning_rate)
keras.src.optimizers.schedules.learning_rate_schedule.CosineDecay.get_config(self)
keras.src.optimizers.schedules.learning_rate_schedule.CosineDecayRestarts(self,initial_learning_rate,first_decay_steps,t_mul=2.0,m_mul=1.0,alpha=0.0,name='SGDRDecay')
keras.src.optimizers.schedules.learning_rate_schedule.CosineDecayRestarts.__init__(self,initial_learning_rate,first_decay_steps,t_mul=2.0,m_mul=1.0,alpha=0.0,name='SGDRDecay')
keras.src.optimizers.schedules.learning_rate_schedule.CosineDecayRestarts.get_config(self)
keras.src.optimizers.schedules.learning_rate_schedule.ExponentialDecay(self,initial_learning_rate,decay_steps,decay_rate,staircase=False,name='ExponentialDecay')
keras.src.optimizers.schedules.learning_rate_schedule.ExponentialDecay.__init__(self,initial_learning_rate,decay_steps,decay_rate,staircase=False,name='ExponentialDecay')
keras.src.optimizers.schedules.learning_rate_schedule.ExponentialDecay.get_config(self)
keras.src.optimizers.schedules.learning_rate_schedule.InverseTimeDecay(self,initial_learning_rate,decay_steps,decay_rate,staircase=False,name='InverseTimeDecay')
keras.src.optimizers.schedules.learning_rate_schedule.InverseTimeDecay.__init__(self,initial_learning_rate,decay_steps,decay_rate,staircase=False,name='InverseTimeDecay')
keras.src.optimizers.schedules.learning_rate_schedule.InverseTimeDecay.get_config(self)
keras.src.optimizers.schedules.learning_rate_schedule.LearningRateSchedule(self,step)
keras.src.optimizers.schedules.learning_rate_schedule.LearningRateSchedule.__call__(self,step)
keras.src.optimizers.schedules.learning_rate_schedule.LearningRateSchedule.from_config(cls,config)
keras.src.optimizers.schedules.learning_rate_schedule.LearningRateSchedule.get_config(self)
keras.src.optimizers.schedules.learning_rate_schedule.PiecewiseConstantDecay(self,boundaries,values,name='PiecewiseConstant')
keras.src.optimizers.schedules.learning_rate_schedule.PiecewiseConstantDecay.__init__(self,boundaries,values,name='PiecewiseConstant')
keras.src.optimizers.schedules.learning_rate_schedule.PiecewiseConstantDecay.get_config(self)
keras.src.optimizers.schedules.learning_rate_schedule.PolynomialDecay(self,initial_learning_rate,decay_steps,end_learning_rate=0.0001,power=1.0,cycle=False,name='PolynomialDecay')
keras.src.optimizers.schedules.learning_rate_schedule.PolynomialDecay.__init__(self,initial_learning_rate,decay_steps,end_learning_rate=0.0001,power=1.0,cycle=False,name='PolynomialDecay')
keras.src.optimizers.schedules.learning_rate_schedule.PolynomialDecay.get_config(self)
keras.src.optimizers.schedules.learning_rate_schedule.deserialize(config,custom_objects=None)
keras.src.optimizers.schedules.learning_rate_schedule.serialize(learning_rate_schedule)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/testing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/testing/test_case.py----------------------------------------
A:keras.src.testing.test_case.temp_dir->tempfile.mkdtemp()
A:keras.src.testing.test_case.x1->keras.src.backend.convert_to_numpy(x1)
A:keras.src.testing.test_case.x2->keras.src.backend.convert_to_numpy(x2)
A:keras.src.testing.test_case.e1->keras.src.backend.convert_to_numpy(e1)
A:keras.src.testing.test_case.e2->keras.src.backend.convert_to_numpy(e2)
A:keras.src.testing.test_case.config->instance.get_config()
A:keras.src.testing.test_case.config_json->json.dumps(config, sort_keys=True, indent=4)
A:keras.src.testing.test_case.revived_instance->deserialize_keras_object(json.loads(serialized_json))
A:keras.src.testing.test_case.revived_config->deserialize_keras_object(json.loads(serialized_json)).get_config()
A:keras.src.testing.test_case.revived_config_json->json.dumps(revived_config, sort_keys=True, indent=4)
A:keras.src.testing.test_case.serialized->serialize_keras_object(instance)
A:keras.src.testing.test_case.serialized_json->json.dumps(serialized, sort_keys=True, indent=4)
A:keras.src.testing.test_case.layer->layer_cls(**{**init_kwargs, 'dtype': 'mixed_float16'})
A:keras.src.testing.test_case.output_shape->tuple((v.shape for v in output))
A:keras.src.testing.test_case.output_dtype->tuple((backend.standardize_dtype(v.dtype) for v in output))
A:keras.src.testing.test_case.model->TestModel(layer)
A:keras.src.testing.test_case.data->keras.src.utils.tree.map_structure(backend.convert_to_numpy, data)
A:keras.src.testing.test_case.build_shape->keras.src.utils.tree.map_structure(lambda x: ops.shape(x), input_data)
A:keras.src.testing.test_case.keras_tensor_inputs->create_keras_tensors(input_shape, input_dtype, input_sparse)
A:keras.src.testing.test_case.keras_tensor_outputs->layer(keras_tensor_inputs, **call_kwargs)
A:keras.src.testing.test_case.output_mask->layer_cls(**{**init_kwargs, 'dtype': 'mixed_float16'}).compute_mask(keras_tensor_inputs)
A:keras.src.testing.test_case.input_data->create_eager_tensors(input_shape, input_dtype, input_sparse)
A:keras.src.testing.test_case.output_data->layer(input_data, **call_kwargs)
A:keras.src.testing.test_case.run_mixed_precision_check->torch.cuda.is_available()
A:keras.src.testing.test_case.input_spec->keras.src.utils.tree.map_structure(lambda spec: KerasTensor(spec.shape, dtype=layer.compute_dtype if layer.autocast and backend.is_float_dtype(spec.dtype) else spec.dtype), keras_tensor_inputs)
A:keras.src.testing.test_case.output_spec->layer_cls(**{**init_kwargs, 'dtype': 'mixed_float16'}).compute_output_spec(input_spec)
A:keras.src.testing.test_case.dtype->standardize_dtype(weight.dtype)
A:keras.src.testing.test_case.rng->numpy.random.default_rng(0)
A:keras.src.testing.test_case.x->numpy.multiply(x, rng.random(shape) < 0.7)
keras.src.testing.TestCase(self,*args,**kwargs)
keras.src.testing.TestCase.assertAllClose(self,x1,x2,atol=1e-06,rtol=1e-06,msg=None)
keras.src.testing.TestCase.assertAllEqual(self,x1,x2,msg=None)
keras.src.testing.TestCase.assertAlmostEqual(self,x1,x2,decimal=3,msg=None)
keras.src.testing.TestCase.assertLen(self,iterable,expected_len,msg=None)
keras.src.testing.TestCase.assertNotAllClose(self,x1,x2,atol=1e-06,rtol=1e-06,msg=None)
keras.src.testing.TestCase.get_temp_dir(self)
keras.src.testing.TestCase.run_class_serialization_test(self,instance,custom_objects=None)
keras.src.testing.TestCase.run_layer_test(self,layer_cls,init_kwargs,input_shape=None,input_dtype=None,input_sparse=False,input_data=None,call_kwargs=None,expected_output_shape=None,expected_output_dtype=None,expected_output_sparse=False,expected_output=None,expected_num_trainable_weights=None,expected_num_non_trainable_weights=None,expected_num_non_trainable_variables=None,expected_num_seed_generators=None,expected_num_losses=None,supports_masking=None,expected_mask_shape=None,custom_objects=None,run_training_check=True,run_mixed_precision_check=True)
keras.src.testing.TestCase.setUp(self)
keras.src.testing.test_case.TestCase(self,*args,**kwargs)
keras.src.testing.test_case.TestCase.__init__(self,*args,**kwargs)
keras.src.testing.test_case.TestCase.assertAllClose(self,x1,x2,atol=1e-06,rtol=1e-06,msg=None)
keras.src.testing.test_case.TestCase.assertAllEqual(self,x1,x2,msg=None)
keras.src.testing.test_case.TestCase.assertAlmostEqual(self,x1,x2,decimal=3,msg=None)
keras.src.testing.test_case.TestCase.assertLen(self,iterable,expected_len,msg=None)
keras.src.testing.test_case.TestCase.assertNotAllClose(self,x1,x2,atol=1e-06,rtol=1e-06,msg=None)
keras.src.testing.test_case.TestCase.get_temp_dir(self)
keras.src.testing.test_case.TestCase.run_class_serialization_test(self,instance,custom_objects=None)
keras.src.testing.test_case.TestCase.run_layer_test(self,layer_cls,init_kwargs,input_shape=None,input_dtype=None,input_sparse=False,input_data=None,call_kwargs=None,expected_output_shape=None,expected_output_dtype=None,expected_output_sparse=False,expected_output=None,expected_num_trainable_weights=None,expected_num_non_trainable_weights=None,expected_num_non_trainable_variables=None,expected_num_seed_generators=None,expected_num_losses=None,supports_masking=None,expected_mask_shape=None,custom_objects=None,run_training_check=True,run_mixed_precision_check=True)
keras.src.testing.test_case.TestCase.setUp(self)
keras.src.testing.test_case.create_eager_tensors(input_shape,dtype,sparse)
keras.src.testing.test_case.create_keras_tensors(input_shape,dtype,sparse)
keras.src.testing.test_case.map_shape_dtype_structure(fn,shape,dtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/testing/test_utils.py----------------------------------------
A:keras.src.testing.test_utils.y->numpy.concatenate([y, y_extra])
A:keras.src.testing.test_utils.y_extra->numpy.array([i % num_classes for i in range(extra_samples)], dtype=np.int64)
A:keras.src.testing.test_utils.x->numpy.zeros((total_samples,) + input_shape, dtype=np.float32)
A:keras.src.testing.test_utils.indices->numpy.arange(total_samples)
A:keras.src.testing.test_utils.train_count->int(train_samples / num_classes)
A:keras.src.testing.test_utils.train_indices->numpy.arange(len(x_train))
A:keras.src.testing.test_utils.test_indices->numpy.arange(len(x_test))
A:keras.src.testing.test_utils.testcase_name->test.get('testcase_name', '')
A:keras.src.testing.test_utils.new_test->test.copy()
keras.src.testing.test_utils.get_test_data(train_samples,test_samples,input_shape,num_classes,random_seed=None)
keras.src.testing.test_utils.named_product(*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/legacy/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/legacy/losses.py----------------------------------------
keras.src.legacy.losses.Reduction
keras.src.legacy.losses.Reduction.all(cls)
keras.src.legacy.losses.Reduction.validate(cls,key)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/legacy/layers.py----------------------------------------
A:keras.src.legacy.layers.self.seed_generator->keras.src.backend.random.SeedGenerator(seed)
A:keras.src.legacy.layers.noise_shape->keras.src.utils.module_utils.tensorflow.shape(inputs)
A:keras.src.legacy.layers.kept_idx->keras.src.utils.module_utils.tensorflow.cast(kept_idx, inputs.dtype)
A:keras.src.legacy.layers.base_config->super().get_config()
A:keras.src.legacy.layers.inputs->keras.src.utils.module_utils.tensorflow.convert_to_tensor(inputs, dtype=self.compute_dtype)
A:keras.src.legacy.layers.inputs_shape->keras.src.utils.module_utils.tensorflow.shape(inputs)
A:keras.src.legacy.layers.img_hd->keras.src.utils.module_utils.tensorflow.cast(inputs_shape[-3], tf.float32)
A:keras.src.legacy.layers.height_factor->keras.src.backend.random.uniform(shape=[], minval=1.0 + self.height_lower, maxval=1.0 + self.height_upper, seed=self.seed_generator)
A:keras.src.legacy.layers.adjusted_height->keras.src.utils.module_utils.tensorflow.cast(height_factor * img_hd, tf.int32)
A:keras.src.legacy.layers.adjusted_size->keras.src.utils.module_utils.tensorflow.stack([img_hd, adjusted_width])
A:keras.src.legacy.layers.output->keras.src.utils.module_utils.tensorflow.cast(output, self.compute_dtype)
A:keras.src.legacy.layers.output_shape->keras.src.utils.module_utils.tensorflow.convert_to_tensor(inputs, dtype=self.compute_dtype).shape.as_list()
A:keras.src.legacy.layers.input_shape->list(input_shape)
A:keras.src.legacy.layers.img_wd->keras.src.utils.module_utils.tensorflow.cast(inputs_shape[-2], tf.float32)
A:keras.src.legacy.layers.width_factor->keras.src.backend.random.uniform(shape=[], minval=1.0 + self.width_lower, maxval=1.0 + self.width_upper, seed=self.seed_generator)
A:keras.src.legacy.layers.adjusted_width->keras.src.utils.module_utils.tensorflow.cast(width_factor * img_wd, tf.int32)
A:keras.src.legacy.layers.self.theta->keras.src.utils.module_utils.tensorflow.convert_to_tensor(theta, dtype=self.compute_dtype)
keras.src.legacy.layers.AlphaDropout(self,rate,noise_shape=None,seed=None,**kwargs)
keras.src.legacy.layers.AlphaDropout.__init__(self,rate,noise_shape=None,seed=None,**kwargs)
keras.src.legacy.layers.AlphaDropout.call(self,inputs,training=False)
keras.src.legacy.layers.AlphaDropout.compute_output_shape(self,input_shape)
keras.src.legacy.layers.AlphaDropout.get_config(self)
keras.src.legacy.layers.RandomHeight(self,factor,interpolation='bilinear',seed=None,**kwargs)
keras.src.legacy.layers.RandomHeight.__init__(self,factor,interpolation='bilinear',seed=None,**kwargs)
keras.src.legacy.layers.RandomHeight.call(self,inputs,training=True)
keras.src.legacy.layers.RandomHeight.compute_output_shape(self,input_shape)
keras.src.legacy.layers.RandomHeight.get_config(self)
keras.src.legacy.layers.RandomWidth(self,factor,interpolation='bilinear',seed=None,**kwargs)
keras.src.legacy.layers.RandomWidth.__init__(self,factor,interpolation='bilinear',seed=None,**kwargs)
keras.src.legacy.layers.RandomWidth.call(self,inputs,training=True)
keras.src.legacy.layers.RandomWidth.compute_output_shape(self,input_shape)
keras.src.legacy.layers.RandomWidth.get_config(self)
keras.src.legacy.layers.ThresholdedReLU(self,theta=1.0,**kwargs)
keras.src.legacy.layers.ThresholdedReLU.__init__(self,theta=1.0,**kwargs)
keras.src.legacy.layers.ThresholdedReLU.call(self,inputs)
keras.src.legacy.layers.ThresholdedReLU.compute_output_shape(self,input_shape)
keras.src.legacy.layers.ThresholdedReLU.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/legacy/backend.py----------------------------------------
A:keras.src.legacy.backend.x->keras.src.utils.module_utils.tensorflow.cast(x, backend.floatx())
A:keras.src.legacy.backend.result->keras.src.utils.module_utils.tensorflow.squeeze(result, -1)
A:keras.src.legacy.backend.x_ndim->len(x_shape)
A:keras.src.legacy.backend.y_ndim->len(y_shape)
A:keras.src.legacy.backend.axes->list(range(len(input_t.shape)))
A:keras.src.legacy.backend.y->keras.src.utils.module_utils.tensorflow.reshape(y, y_squashed_shape)
A:keras.src.legacy.backend.pattern->keras.src.utils.module_utils.tensorflow.stack([1, n, 1])
A:keras.src.legacy.backend.x_shape->keras.src.utils.module_utils.tensorflow.cast(x, backend.floatx()).shape.as_list()
A:keras.src.legacy.backend.x_squashed_shape->keras.src.utils.module_utils.tensorflow.stack([x_shape[0], -1, x_shape[-1]])
A:keras.src.legacy.backend.y_shape->tuple(y_shape)
A:keras.src.legacy.backend.y_squashed_shape->keras.src.utils.module_utils.tensorflow.stack([y_shape[0], y_shape[1], -1])
A:keras.src.legacy.backend.output_shape->keras.src.utils.module_utils.tensorflow.shape(output)
A:keras.src.legacy.backend.value->numpy.asarray(value, dtype=x.dtype.name)
A:keras.src.legacy.backend.data_format->keras.src.backend.image_data_format()
A:keras.src.legacy.backend.target->flatten(target)
A:keras.src.legacy.backend.output->keras.src.utils.module_utils.tensorflow.reshape(output, [-1, output_shape[-1]])
A:keras.src.legacy.backend.epsilon_->keras.src.utils.module_utils.tensorflow.convert_to_tensor(backend.epsilon(), output.dtype)
A:keras.src.legacy.backend.focal_factor->keras.src.utils.module_utils.tensorflow.pow(1.0 - p_t, gamma)
A:keras.src.legacy.backend.bce->binary_crossentropy(target=target, output=output, from_logits=from_logits)
A:keras.src.legacy.backend.modulating_factor->keras.src.utils.module_utils.tensorflow.pow(1.0 - output, gamma)
A:keras.src.legacy.backend.weighting_factor->keras.src.utils.module_utils.tensorflow.multiply(modulating_factor, alpha)
A:keras.src.legacy.backend.focal_cce->keras.src.utils.module_utils.tensorflow.reduce_sum(focal_cce, axis=axis)
A:keras.src.legacy.backend.rank->ndim(tensors[0])
A:keras.src.legacy.backend.dtype->keras.src.backend.floatx()
A:keras.src.legacy.backend.kernel_shape->kernel.shape.as_list()
A:keras.src.legacy.backend.padding->_preprocess_padding(padding)
A:keras.src.legacy.backend.(x, tf_data_format)->_preprocess_conv2d_input(x, data_format)
A:keras.src.legacy.backend.label_length->keras.src.utils.module_utils.tensorflow.cast(tf.squeeze(label_length, axis=-1), tf.int32)
A:keras.src.legacy.backend.input_length->keras.src.utils.module_utils.tensorflow.cast(input_length, tf.int32)
A:keras.src.legacy.backend.sparse_labels->keras.src.utils.module_utils.tensorflow.cast(ctc_label_dense_to_sparse(y_true, label_length), tf.int32)
A:keras.src.legacy.backend.y_pred->keras.src.utils.module_utils.tensorflow.math.log(tf.transpose(y_pred, perm=[1, 0, 2]) + backend.epsilon())
A:keras.src.legacy.backend.label_shape->keras.src.utils.module_utils.tensorflow.shape(labels)
A:keras.src.legacy.backend.num_batches_tns->keras.src.utils.module_utils.tensorflow.stack([label_shape[0]])
A:keras.src.legacy.backend.max_num_labels_tns->keras.src.utils.module_utils.tensorflow.stack([label_shape[1]])
A:keras.src.legacy.backend.init->keras.src.utils.module_utils.tensorflow.cast(tf.fill([1, label_shape[1]], 0), tf.bool)
A:keras.src.legacy.backend.dense_mask->keras.src.utils.module_utils.tensorflow.compat.v1.scan(range_less_than, label_lengths, initializer=init, parallel_iterations=1)
A:keras.src.legacy.backend.label_array->keras.src.utils.module_utils.tensorflow.reshape(tf.tile(tf.range(0, label_shape[1]), num_batches_tns), label_shape)
A:keras.src.legacy.backend.label_ind->keras.src.utils.module_utils.tensorflow.compat.v1.boolean_mask(label_array, dense_mask)
A:keras.src.legacy.backend.batch_array->keras.src.utils.module_utils.tensorflow.transpose(tf.reshape(tf.tile(tf.range(0, label_shape[0]), max_num_labels_tns), reverse(label_shape, 0)))
A:keras.src.legacy.backend.batch_ind->keras.src.utils.module_utils.tensorflow.compat.v1.boolean_mask(batch_array, dense_mask)
A:keras.src.legacy.backend.indices->numpy.concatenate((np.expand_dims(sparse_coo.row, 1), np.expand_dims(sparse_coo.col, 1)), 1)
A:keras.src.legacy.backend.vals_sparse->keras.src.utils.module_utils.tensorflow.compat.v1.gather_nd(labels, indices)
A:keras.src.legacy.backend.input_shape->keras.src.utils.module_utils.tensorflow.shape(y_pred)
A:keras.src.legacy.backend.(decoded, log_prob)->keras.src.utils.module_utils.tensorflow.compat.v1.nn.ctc_beam_search_decoder(inputs=y_pred, sequence_length=input_length, beam_width=beam_width, top_paths=top_paths)
A:keras.src.legacy.backend.st->keras.src.utils.module_utils.tensorflow.SparseTensor(st.indices, st.values, (num_samples, num_steps))
A:keras.src.legacy.backend.y_permute_dim->list(range(ndim(y)))
A:keras.src.legacy.backend.xt->keras.src.utils.module_utils.tensorflow.reshape(x, [-1, x_shape[-1]])
A:keras.src.legacy.backend.yt->keras.src.utils.module_utils.tensorflow.reshape(tf.transpose(y, perm=y_permute_dim), [y_shape[-2], -1])
A:keras.src.legacy.backend.out->keras.src.utils.module_utils.tensorflow.matmul(x, y)
A:keras.src.legacy.backend.seed->numpy.random.randint(10000000.0)
A:keras.src.legacy.backend.res->keras.src.utils.module_utils.tensorflow.reshape(res, output_shape[:-1])
A:keras.src.legacy.backend.tf_dtype->keras.src.utils.module_utils.tensorflow.as_dtype(dtype)
A:keras.src.legacy.backend.point_two->keras.src.utils.module_utils.tensorflow.convert_to_tensor(0.2, dtype=x.dtype)
A:keras.src.legacy.backend.point_five->keras.src.utils.module_utils.tensorflow.convert_to_tensor(0.5, dtype=x.dtype)
A:keras.src.legacy.backend.shape->output_.shape.as_list()
A:keras.src.legacy.backend.spec->getattr(tensor, '_type_spec', None)
A:keras.src.legacy.backend.momentum->keras.src.utils.module_utils.tensorflow.cast(momentum, x.dtype)
A:keras.src.legacy.backend.v->keras.src.utils.module_utils.tensorflow.zeros(shape=shape, dtype=tf_dtype, name=name)
A:keras.src.legacy.backend.negative_part->keras.src.utils.module_utils.tensorflow.nn.relu(-x)
A:keras.src.legacy.backend.max_value->keras.src.utils.module_utils.tensorflow.convert_to_tensor(max_value, dtype=x.dtype)
A:keras.src.legacy.backend.zero->keras.src.utils.module_utils.tensorflow.convert_to_tensor(0.0, x.dtype)
A:keras.src.legacy.backend.alpha->keras.src.utils.module_utils.tensorflow.convert_to_tensor(alpha, dtype=x.dtype)
A:keras.src.legacy.backend.splits->keras.src.utils.module_utils.tensorflow.split(value=x, num_or_size_splits=x_shape[axis], axis=axis)
A:keras.src.legacy.backend.x_rep->keras.src.utils.module_utils.tensorflow.reshape(x_rep, x_shape)
A:keras.src.legacy.backend.reps->keras.src.utils.module_utils.tensorflow.constant(reps, dtype='int32')
A:keras.src.legacy.backend.new_shape->keras.src.utils.module_utils.tensorflow.constant(new_shape.as_list(), dtype='int32')
A:keras.src.legacy.backend.inputs->keras.src.utils.module_utils.tensorflow.nest.map_structure(swap_batch_timestep, inputs)
A:keras.src.legacy.backend.flatted_inputs->keras.src.utils.module_utils.tensorflow.nest.flatten(inputs)
A:keras.src.legacy.backend.mask->reverse(mask, 0)
A:keras.src.legacy.backend.mask_t->masking_fn(time)
A:keras.src.legacy.backend.states->tuple(initial_states)
A:keras.src.legacy.backend.input_t->keras.src.utils.module_utils.tensorflow.unstack(input_t)
A:keras.src.legacy.backend.processed_input->keras.src.utils.module_utils.tensorflow.nest.map_structure(_process_single_input_t, inputs)
A:keras.src.legacy.backend.mask_list->keras.src.utils.module_utils.tensorflow.unstack(mask)
A:keras.src.legacy.backend.inp->_get_input_tensor(i)
A:keras.src.legacy.backend.(output, new_states)->step_function(current_input, tuple(states) + tuple(constants))
A:keras.src.legacy.backend.tiled_mask_t->tuple((_expand_mask(mask_t, o, fixed_dim=len(mask_t.shape)) for o in flat_out))
A:keras.src.legacy.backend.prev_output->zeros_like(output)
A:keras.src.legacy.backend.flat_states->keras.src.utils.module_utils.tensorflow.nest.flatten(states)
A:keras.src.legacy.backend.flat_new_states->keras.src.utils.module_utils.tensorflow.nest.flatten(new_states)
A:keras.src.legacy.backend.flat_final_states->tuple((tf.where(m, s, ps) for (m, s, ps) in zip(tiled_mask_t, flat_new_states, flat_states)))
A:keras.src.legacy.backend.outputs->keras.src.utils.module_utils.tensorflow.nest.map_structure(swap_batch_timestep, outputs)
A:keras.src.legacy.backend.last_output->keras.src.utils.module_utils.tensorflow.nest.pack_sequence_as(output_time_zero, last_output)
A:keras.src.legacy.backend.(output, states)->step_function(inp, tuple(states) + tuple(constants))
A:keras.src.legacy.backend.input_ta->tuple((ta.unstack(input_) if not go_backwards else ta.unstack(reverse(input_, 0)) for (ta, input_) in zip(input_ta, flatted_inputs)))
A:keras.src.legacy.backend.input_time_zero->keras.src.utils.module_utils.tensorflow.nest.pack_sequence_as(inputs, [inp[0] for inp in flatted_inputs])
A:keras.src.legacy.backend.(output_time_zero, _)->step_function(input_time_zero, tuple(initial_states) + tuple(constants))
A:keras.src.legacy.backend.output_ta->tuple((tf.TensorArray(dtype=out.dtype, size=output_ta_size, element_shape=out.shape, tensor_array_name=f'output_ta_{i}') for (i, out) in enumerate(tf.nest.flatten(output_time_zero))))
A:keras.src.legacy.backend.time->keras.src.utils.module_utils.tensorflow.constant(0, dtype='int32', name='time')
A:keras.src.legacy.backend.max_iterations->keras.src.utils.module_utils.tensorflow.reduce_max(input_length)
A:keras.src.legacy.backend.mask_ta->mask_ta.unstack(mask).unstack(mask)
A:keras.src.legacy.backend.max_len->keras.src.utils.module_utils.tensorflow.reduce_max(input_length, axis=0)
A:keras.src.legacy.backend.rev_input_length->keras.src.utils.module_utils.tensorflow.subtract(max_len - 1, input_length)
A:keras.src.legacy.backend.flat_zero_output->tuple((tf.zeros_like(o) for o in tf.nest.flatten(output_time_zero)))
A:keras.src.legacy.backend.current_input->keras.src.utils.module_utils.tensorflow.nest.pack_sequence_as(inputs, current_input)
A:keras.src.legacy.backend.flat_output->keras.src.utils.module_utils.tensorflow.nest.flatten(output)
A:keras.src.legacy.backend.flat_new_output->compute_masked_output(mask_t, flat_output, flat_mask_output)
A:keras.src.legacy.backend.flat_state->keras.src.utils.module_utils.tensorflow.nest.flatten(states)
A:keras.src.legacy.backend.flat_new_state->keras.src.utils.module_utils.tensorflow.nest.flatten(new_states)
A:keras.src.legacy.backend.flat_final_state->compute_masked_output(mask_t, flat_new_state, flat_state)
A:keras.src.legacy.backend.new_states->keras.src.utils.module_utils.tensorflow.nest.pack_sequence_as(initial_states, flat_new_state)
A:keras.src.legacy.backend.output_ta_t->tuple((ta.write(ta_index_to_write, out) for (ta, out) in zip(output_ta_t, flat_output)))
A:keras.src.legacy.backend.final_outputs->keras.src.utils.module_utils.tensorflow.compat.v1.while_loop(body=_step, loop_vars=(time, output_ta) + states, **while_loop_kwargs)
A:keras.src.legacy.backend.strides->tuple(strides)
A:keras.src.legacy.backend.numerator->keras.src.utils.module_utils.tensorflow.exp(x - tf.reduce_max(x, axis=axis, keepdims=True))
A:keras.src.legacy.backend.denominator->keras.src.utils.module_utils.tensorflow.reduce_sum(numerator, axis=axis, keepdims=True)
A:keras.src.legacy.backend.output_rank->len(output.shape)
A:keras.src.legacy.backend.permutation->list(itertools.chain(range(axis), range(axis + 1, output_rank), [axis]))
A:keras.src.legacy.backend.valid_mask->keras.src.utils.module_utils.tensorflow.reshape(valid_mask, res_shape)
A:keras.src.legacy.backend.res_shape->cast(output_shape[:-1], 'int64')
A:keras.src.legacy.backend.condition->keras.src.utils.module_utils.tensorflow.tile(condition, tile_shape)
A:keras.src.legacy.backend.cond_ndim->ndim(condition)
A:keras.src.legacy.backend.then_expression->then_expression()
A:keras.src.legacy.backend.else_expression->else_expression()
A:keras.src.legacy.backend.expr_ndim->ndim(then_expression)
A:keras.src.legacy.backend.cond_shape->keras.src.utils.module_utils.tensorflow.concat([tf.shape(condition), [1] * ndim_diff], axis=0)
A:keras.src.legacy.backend.expr_shape->keras.src.utils.module_utils.tensorflow.shape(then_expression)
A:keras.src.legacy.backend.tile_shape->keras.src.utils.module_utils.tensorflow.where(shape_diff > 0, expr_shape, tf.ones_like(expr_shape))
A:keras.src.legacy.backend.sparse_coo->numpy.asarray(value, dtype=x.dtype.name).tocoo()
keras.src.legacy.backend._preprocess_conv1d_input(x,data_format)
keras.src.legacy.backend._preprocess_conv2d_input(x,data_format,force_transpose=False)
keras.src.legacy.backend._preprocess_conv3d_input(x,data_format)
keras.src.legacy.backend._preprocess_padding(padding)
keras.src.legacy.backend.abs(x)
keras.src.legacy.backend.all(x,axis=None,keepdims=False)
keras.src.legacy.backend.any(x,axis=None,keepdims=False)
keras.src.legacy.backend.arange(start,stop=None,step=1,dtype='int32')
keras.src.legacy.backend.argmax(x,axis=-1)
keras.src.legacy.backend.argmin(x,axis=-1)
keras.src.legacy.backend.batch_dot(x,y,axes=None)
keras.src.legacy.backend.batch_flatten(x)
keras.src.legacy.backend.batch_get_value(tensors)
keras.src.legacy.backend.batch_normalization(x,mean,var,beta,gamma,axis=-1,epsilon=0.001)
keras.src.legacy.backend.batch_set_value(tuples)
keras.src.legacy.backend.bias_add(x,bias,data_format=None)
keras.src.legacy.backend.binary_crossentropy(target,output,from_logits=False)
keras.src.legacy.backend.binary_focal_crossentropy(target,output,apply_class_balancing=False,alpha=0.25,gamma=2.0,from_logits=False)
keras.src.legacy.backend.cast(x,dtype)
keras.src.legacy.backend.cast_to_floatx(x)
keras.src.legacy.backend.categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.src.legacy.backend.categorical_focal_crossentropy(target,output,alpha=0.25,gamma=2.0,from_logits=False,axis=-1)
keras.src.legacy.backend.clip(x,min_value,max_value)
keras.src.legacy.backend.concatenate(tensors,axis=-1)
keras.src.legacy.backend.constant(value,dtype=None,shape=None,name=None)
keras.src.legacy.backend.conv1d(x,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.legacy.backend.conv2d(x,kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.src.legacy.backend.conv2d_transpose(x,kernel,output_shape,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.src.legacy.backend.conv3d(x,kernel,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1))
keras.src.legacy.backend.cos(x)
keras.src.legacy.backend.count_params(x)
keras.src.legacy.backend.ctc_batch_cost(y_true,y_pred,input_length,label_length)
keras.src.legacy.backend.ctc_decode(y_pred,input_length,greedy=True,beam_width=100,top_paths=1)
keras.src.legacy.backend.ctc_label_dense_to_sparse(labels,label_lengths)
keras.src.legacy.backend.cumprod(x,axis=0)
keras.src.legacy.backend.cumsum(x,axis=0)
keras.src.legacy.backend.depthwise_conv2d(x,depthwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.src.legacy.backend.dot(x,y)
keras.src.legacy.backend.dropout(x,level,noise_shape=None,seed=None)
keras.src.legacy.backend.dtype(x)
keras.src.legacy.backend.elu(x,alpha=1.0)
keras.src.legacy.backend.equal(x,y)
keras.src.legacy.backend.eval(x)
keras.src.legacy.backend.exp(x)
keras.src.legacy.backend.expand_dims(x,axis=-1)
keras.src.legacy.backend.eye(size,dtype=None,name=None)
keras.src.legacy.backend.flatten(x)
keras.src.legacy.backend.foldl(fn,elems,initializer=None,name=None)
keras.src.legacy.backend.foldr(fn,elems,initializer=None,name=None)
keras.src.legacy.backend.gather(reference,indices)
keras.src.legacy.backend.get_value(x)
keras.src.legacy.backend.gradients(loss,variables)
keras.src.legacy.backend.greater(x,y)
keras.src.legacy.backend.greater_equal(x,y)
keras.src.legacy.backend.hard_sigmoid(x)
keras.src.legacy.backend.in_top_k(predictions,targets,k)
keras.src.legacy.backend.int_shape(x)
keras.src.legacy.backend.is_sparse(tensor)
keras.src.legacy.backend.l2_normalize(x,axis=None)
keras.src.legacy.backend.less(x,y)
keras.src.legacy.backend.less_equal(x,y)
keras.src.legacy.backend.log(x)
keras.src.legacy.backend.map_fn(fn,elems,name=None,dtype=None)
keras.src.legacy.backend.max(x,axis=None,keepdims=False)
keras.src.legacy.backend.maximum(x,y)
keras.src.legacy.backend.mean(x,axis=None,keepdims=False)
keras.src.legacy.backend.min(x,axis=None,keepdims=False)
keras.src.legacy.backend.minimum(x,y)
keras.src.legacy.backend.moving_average_update(x,value,momentum)
keras.src.legacy.backend.name_scope(name)
keras.src.legacy.backend.ndim(x)
keras.src.legacy.backend.not_equal(x,y)
keras.src.legacy.backend.one_hot(indices,num_classes)
keras.src.legacy.backend.ones(shape,dtype=None,name=None)
keras.src.legacy.backend.ones_like(x,dtype=None,name=None)
keras.src.legacy.backend.permute_dimensions(x,pattern)
keras.src.legacy.backend.pool2d(x,pool_size,strides=(1,1),padding='valid',data_format=None,pool_mode='max')
keras.src.legacy.backend.pool3d(x,pool_size,strides=(1,1,1),padding='valid',data_format=None,pool_mode='max')
keras.src.legacy.backend.pow(x,a)
keras.src.legacy.backend.prod(x,axis=None,keepdims=False)
keras.src.legacy.backend.random_bernoulli(shape,p=0.0,dtype=None,seed=None)
keras.src.legacy.backend.random_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.src.legacy.backend.random_normal_variable(shape,mean,scale,dtype=None,name=None,seed=None)
keras.src.legacy.backend.random_uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)
keras.src.legacy.backend.random_uniform_variable(shape,low,high,dtype=None,name=None,seed=None)
keras.src.legacy.backend.relu(x,alpha=0.0,max_value=None,threshold=0.0)
keras.src.legacy.backend.repeat(x,n)
keras.src.legacy.backend.repeat_elements(x,rep,axis)
keras.src.legacy.backend.reshape(x,shape)
keras.src.legacy.backend.resize_images(x,height_factor,width_factor,data_format,interpolation='nearest')
keras.src.legacy.backend.resize_volumes(x,depth_factor,height_factor,width_factor,data_format)
keras.src.legacy.backend.reverse(x,axes)
keras.src.legacy.backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None,time_major=False,zero_output_for_mask=False,return_all_outputs=True)
keras.src.legacy.backend.round(x)
keras.src.legacy.backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.src.legacy.backend.set_value(x,value)
keras.src.legacy.backend.shape(x)
keras.src.legacy.backend.sigmoid(x)
keras.src.legacy.backend.sign(x)
keras.src.legacy.backend.sin(x)
keras.src.legacy.backend.softmax(x,axis=-1)
keras.src.legacy.backend.softplus(x)
keras.src.legacy.backend.softsign(x)
keras.src.legacy.backend.sparse_categorical_crossentropy(target,output,from_logits=False,axis=-1,ignore_class=None)
keras.src.legacy.backend.spatial_2d_padding(x,padding=((1,1),(1,1)),data_format=None)
keras.src.legacy.backend.spatial_3d_padding(x,padding=((1,1),(1,1),(1,1)),data_format=None)
keras.src.legacy.backend.sqrt(x)
keras.src.legacy.backend.square(x)
keras.src.legacy.backend.squeeze(x,axis)
keras.src.legacy.backend.stack(x,axis=0)
keras.src.legacy.backend.std(x,axis=None,keepdims=False)
keras.src.legacy.backend.stop_gradient(variables)
keras.src.legacy.backend.sum(x,axis=None,keepdims=False)
keras.src.legacy.backend.switch(condition,then_expression,else_expression)
keras.src.legacy.backend.tanh(x)
keras.src.legacy.backend.temporal_padding(x,padding=(1,1))
keras.src.legacy.backend.tile(x,n)
keras.src.legacy.backend.to_dense(tensor)
keras.src.legacy.backend.transpose(x)
keras.src.legacy.backend.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.src.legacy.backend.update(x,new_x)
keras.src.legacy.backend.update_add(x,increment)
keras.src.legacy.backend.update_sub(x,decrement)
keras.src.legacy.backend.var(x,axis=None,keepdims=False)
keras.src.legacy.backend.variable(value,dtype=None,name=None,constraint=None)
keras.src.legacy.backend.zeros(shape,dtype=None,name=None)
keras.src.legacy.backend.zeros_like(x,dtype=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/legacy/preprocessing/image.py----------------------------------------
A:keras.src.legacy.preprocessing.image.self.lock->threading.Lock()
A:keras.src.legacy.preprocessing.image.self.index_generator->self._flow_index()
A:keras.src.legacy.preprocessing.image.self.index_array->numpy.random.permutation(self.n)
A:keras.src.legacy.preprocessing.image.index_array->next(self.index_generator)
A:keras.src.legacy.preprocessing.image.dirname->os.path.basename(directory)
A:keras.src.legacy.preprocessing.image.all_files->list(_iter_valid_files(directory, white_list_formats, follow_links))
A:keras.src.legacy.preprocessing.image.num_files->len(df)
A:keras.src.legacy.preprocessing.image.valid_files->_iter_valid_files(directory, white_list_formats, follow_links)
A:keras.src.legacy.preprocessing.image.absolute_path->os.path.join(root, fname)
A:keras.src.legacy.preprocessing.image.relative_path->os.path.join(dirname, os.path.relpath(absolute_path, directory))
A:keras.src.legacy.preprocessing.image.self.target_size->tuple(target_size)
A:keras.src.legacy.preprocessing.image.batch_x->numpy.zeros(tuple([len(index_array)] + list(self.x.shape)[1:]), dtype=self.dtype)
A:keras.src.legacy.preprocessing.image.img->keras.src.utils.image_utils.array_to_img(batch_x[i], self.data_format, scale=True)
A:keras.src.legacy.preprocessing.image.x->numpy.rollaxis(x, 0, channel_axis + 1)
A:keras.src.legacy.preprocessing.image.params->self.get_random_transform(x.shape, seed)
A:keras.src.legacy.preprocessing.image.fname->'{prefix}_{index}_{hash}.{format}'.format(prefix=self.save_prefix, index=j, hash=np.random.randint(10000.0), format=self.save_format)
A:keras.src.legacy.preprocessing.image.batch_y->numpy.zeros((len(batch_x), len(self.class_indices)), dtype=self.dtype)
A:keras.src.legacy.preprocessing.image.data_format->keras.src.backend.image_data_format()
A:keras.src.legacy.preprocessing.image.dtype->keras.src.backend.floatx()
A:keras.src.legacy.preprocessing.image.self.num_classes->len(classes)
A:keras.src.legacy.preprocessing.image.self.class_indices->dict(zip(classes, range(len(classes))))
A:keras.src.legacy.preprocessing.image.pool->multiprocessing.pool.ThreadPool()
A:keras.src.legacy.preprocessing.image.(classes, filenames)->res.get()
A:keras.src.legacy.preprocessing.image.self.samples->len(self.filenames)
A:keras.src.legacy.preprocessing.image.self.classes->self.get_classes(df, y_col)
A:keras.src.legacy.preprocessing.image.split_idx->int(len(x) * image_data_generator._validation_split)
A:keras.src.legacy.preprocessing.image.self.x->numpy.asarray(x, dtype=self.dtype)
A:keras.src.legacy.preprocessing.image.self.y->numpy.asarray(y)
A:keras.src.legacy.preprocessing.image.self.sample_weight->numpy.asarray(sample_weight)
A:keras.src.legacy.preprocessing.image.df->df.copy().copy()
A:keras.src.legacy.preprocessing.image.(df, classes)->self._filter_classes(df, y_col, classes)
A:keras.src.legacy.preprocessing.image.num_classes->len(classes)
A:keras.src.legacy.preprocessing.image.start->int(self.split[0] * num_files)
A:keras.src.legacy.preprocessing.image.stop->int(self.split[1] * num_files)
A:keras.src.legacy.preprocessing.image.self.filenames->df[x_col].tolist()
A:keras.src.legacy.preprocessing.image.classes->sorted(classes)
A:keras.src.legacy.preprocessing.image.df[y_col]->df[y_col].apply(lambda x: remove_classes(x, classes)).apply(lambda x: remove_classes(x, classes))
A:keras.src.legacy.preprocessing.image.filepaths->df[x_col].map(lambda fname: os.path.join(self.directory, fname))
A:keras.src.legacy.preprocessing.image.mask->df[x_col].map(lambda fname: os.path.join(self.directory, fname)).apply(validate_filename, args=(self.white_list_formats,))
A:keras.src.legacy.preprocessing.image.n_invalid->(~mask).sum()
A:keras.src.legacy.preprocessing.image.flat_x->numpy.reshape(x, (n, -1))
A:keras.src.legacy.preprocessing.image.theta->numpy.deg2rad(theta)
A:keras.src.legacy.preprocessing.image.tx->numpy.random.uniform(-self.height_shift_range, self.height_shift_range)
A:keras.src.legacy.preprocessing.image.ty->numpy.random.uniform(-self.width_shift_range, self.width_shift_range)
A:keras.src.legacy.preprocessing.image.shear->numpy.deg2rad(shear)
A:keras.src.legacy.preprocessing.image.(zx, zy)->numpy.random.uniform(zoom_range[0], zoom_range[1], 2)
A:keras.src.legacy.preprocessing.image.channel_shift_intensity->numpy.random.uniform(-self.channel_shift_range, self.channel_shift_range)
A:keras.src.legacy.preprocessing.image.brightness->numpy.random.uniform(self.brightness_range[0], self.brightness_range[1])
A:keras.src.legacy.preprocessing.image.ax->numpy.zeros(tuple([rounds * x.shape[0]] + list(x.shape)[1:]), dtype=self.dtype)
A:keras.src.legacy.preprocessing.image.ax[i + r * x.shape[0]]->self.random_transform(x[i])
A:keras.src.legacy.preprocessing.image.self.mean->numpy.reshape(self.mean, broadcast_shape)
A:keras.src.legacy.preprocessing.image.self.std->numpy.reshape(self.std, broadcast_shape)
A:keras.src.legacy.preprocessing.image.n->len(x)
A:keras.src.legacy.preprocessing.image.(u, s, _)->numpy.linalg.svd(flat_x.T, full_matrices=False)
A:keras.src.legacy.preprocessing.image.self.zca_whitening_matrix->(u * s_inv).dot(u.T)
A:keras.src.legacy.preprocessing.image.intensity->numpy.random.uniform(-intensity_range, intensity_range)
A:keras.src.legacy.preprocessing.image.ximgenhancer_Brightness->PIL.ImageEnhance.Brightness(x)
A:keras.src.legacy.preprocessing.image.u->numpy.random.uniform(brightness_range[0], brightness_range[1])
A:keras.src.legacy.preprocessing.image.offset_matrix->numpy.array([[1, 0, o_x], [0, 1, o_y], [0, 0, 1]])
A:keras.src.legacy.preprocessing.image.reset_matrix->numpy.array([[1, 0, -o_x], [0, 1, -o_y], [0, 0, 1]])
A:keras.src.legacy.preprocessing.image.transform_matrix->transform_matrix_offset_center(transform_matrix, h, w)
A:keras.src.legacy.preprocessing.image.valid_indices->set([0, 1, 2])
A:keras.src.legacy.preprocessing.image.actual_indices->set([row_axis, col_axis, channel_axis])
A:keras.src.legacy.preprocessing.image.rotation_matrix->numpy.array([[np.cos(theta), -np.sin(theta), 0], [np.sin(theta), np.cos(theta), 0], [0, 0, 1]])
A:keras.src.legacy.preprocessing.image.shift_matrix->numpy.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])
A:keras.src.legacy.preprocessing.image.shear_matrix->numpy.array([[1, -np.sin(shear), 0], [0, np.cos(shear), 0], [0, 0, 1]])
A:keras.src.legacy.preprocessing.image.zoom_matrix->numpy.array([[zx, 0, 0], [0, zy, 0], [0, 0, 1]])
keras.src.legacy.preprocessing.image.BatchFromFilesMixin
keras.src.legacy.preprocessing.image.BatchFromFilesMixin._get_batches_of_transformed_samples(self,index_array)
keras.src.legacy.preprocessing.image.BatchFromFilesMixin.filepaths(self)
keras.src.legacy.preprocessing.image.BatchFromFilesMixin.labels(self)
keras.src.legacy.preprocessing.image.BatchFromFilesMixin.sample_weight(self)
keras.src.legacy.preprocessing.image.BatchFromFilesMixin.set_processing_attrs(self,image_data_generator,target_size,color_mode,data_format,save_to_dir,save_prefix,save_format,subset,interpolation,keep_aspect_ratio)
keras.src.legacy.preprocessing.image.DataFrameIterator(self,dataframe,directory=None,image_data_generator=None,x_col='filename',y_col='class',weight_col=None,target_size=(256,256),color_mode='rgb',classes=None,class_mode='categorical',batch_size=32,shuffle=True,seed=None,data_format='channels_last',save_to_dir=None,save_prefix='',save_format='png',subset=None,interpolation='nearest',keep_aspect_ratio=False,dtype='float32',validate_filenames=True)
keras.src.legacy.preprocessing.image.DataFrameIterator.__init__(self,dataframe,directory=None,image_data_generator=None,x_col='filename',y_col='class',weight_col=None,target_size=(256,256),color_mode='rgb',classes=None,class_mode='categorical',batch_size=32,shuffle=True,seed=None,data_format='channels_last',save_to_dir=None,save_prefix='',save_format='png',subset=None,interpolation='nearest',keep_aspect_ratio=False,dtype='float32',validate_filenames=True)
keras.src.legacy.preprocessing.image.DataFrameIterator._check_params(self,df,x_col,y_col,weight_col,classes)
keras.src.legacy.preprocessing.image.DataFrameIterator._filter_classes(df,y_col,classes)
keras.src.legacy.preprocessing.image.DataFrameIterator._filter_valid_filepaths(self,df,x_col)
keras.src.legacy.preprocessing.image.DataFrameIterator.filepaths(self)
keras.src.legacy.preprocessing.image.DataFrameIterator.get_classes(self,df,y_col)
keras.src.legacy.preprocessing.image.DataFrameIterator.labels(self)
keras.src.legacy.preprocessing.image.DataFrameIterator.sample_weight(self)
keras.src.legacy.preprocessing.image.DirectoryIterator(self,directory,image_data_generator,target_size=(256,256),color_mode='rgb',classes=None,class_mode='categorical',batch_size=32,shuffle=True,seed=None,data_format=None,save_to_dir=None,save_prefix='',save_format='png',follow_links=False,subset=None,interpolation='nearest',keep_aspect_ratio=False,dtype=None)
keras.src.legacy.preprocessing.image.DirectoryIterator.__init__(self,directory,image_data_generator,target_size=(256,256),color_mode='rgb',classes=None,class_mode='categorical',batch_size=32,shuffle=True,seed=None,data_format=None,save_to_dir=None,save_prefix='',save_format='png',follow_links=False,subset=None,interpolation='nearest',keep_aspect_ratio=False,dtype=None)
keras.src.legacy.preprocessing.image.DirectoryIterator.filepaths(self)
keras.src.legacy.preprocessing.image.DirectoryIterator.labels(self)
keras.src.legacy.preprocessing.image.DirectoryIterator.sample_weight(self)
keras.src.legacy.preprocessing.image.ImageDataGenerator(self,featurewise_center=False,samplewise_center=False,featurewise_std_normalization=False,samplewise_std_normalization=False,zca_whitening=False,zca_epsilon=1e-06,rotation_range=0,width_shift_range=0.0,height_shift_range=0.0,brightness_range=None,shear_range=0.0,zoom_range=0.0,channel_shift_range=0.0,fill_mode='nearest',cval=0.0,horizontal_flip=False,vertical_flip=False,rescale=None,preprocessing_function=None,data_format=None,validation_split=0.0,interpolation_order=1,dtype=None)
keras.src.legacy.preprocessing.image.ImageDataGenerator.__init__(self,featurewise_center=False,samplewise_center=False,featurewise_std_normalization=False,samplewise_std_normalization=False,zca_whitening=False,zca_epsilon=1e-06,rotation_range=0,width_shift_range=0.0,height_shift_range=0.0,brightness_range=None,shear_range=0.0,zoom_range=0.0,channel_shift_range=0.0,fill_mode='nearest',cval=0.0,horizontal_flip=False,vertical_flip=False,rescale=None,preprocessing_function=None,data_format=None,validation_split=0.0,interpolation_order=1,dtype=None)
keras.src.legacy.preprocessing.image.ImageDataGenerator.apply_transform(self,x,transform_parameters)
keras.src.legacy.preprocessing.image.ImageDataGenerator.fit(self,x,augment=False,rounds=1,seed=None)
keras.src.legacy.preprocessing.image.ImageDataGenerator.flow(self,x,y=None,batch_size=32,shuffle=True,sample_weight=None,seed=None,save_to_dir=None,save_prefix='',save_format='png',ignore_class_split=False,subset=None)
keras.src.legacy.preprocessing.image.ImageDataGenerator.flow_from_dataframe(self,dataframe,directory=None,x_col='filename',y_col='class',weight_col=None,target_size=(256,256),color_mode='rgb',classes=None,class_mode='categorical',batch_size=32,shuffle=True,seed=None,save_to_dir=None,save_prefix='',save_format='png',subset=None,interpolation='nearest',validate_filenames=True,**kwargs)
keras.src.legacy.preprocessing.image.ImageDataGenerator.flow_from_directory(self,directory,target_size=(256,256),color_mode='rgb',classes=None,class_mode='categorical',batch_size=32,shuffle=True,seed=None,save_to_dir=None,save_prefix='',save_format='png',follow_links=False,subset=None,interpolation='nearest',keep_aspect_ratio=False)
keras.src.legacy.preprocessing.image.ImageDataGenerator.get_random_transform(self,img_shape,seed=None)
keras.src.legacy.preprocessing.image.ImageDataGenerator.random_transform(self,x,seed=None)
keras.src.legacy.preprocessing.image.ImageDataGenerator.standardize(self,x)
keras.src.legacy.preprocessing.image.Iterator(self,n,batch_size,shuffle,seed)
keras.src.legacy.preprocessing.image.Iterator.__getitem__(self,idx)
keras.src.legacy.preprocessing.image.Iterator.__init__(self,n,batch_size,shuffle,seed)
keras.src.legacy.preprocessing.image.Iterator.__iter__(self)
keras.src.legacy.preprocessing.image.Iterator.__len__(self)
keras.src.legacy.preprocessing.image.Iterator.__next__(self)
keras.src.legacy.preprocessing.image.Iterator._flow_index(self)
keras.src.legacy.preprocessing.image.Iterator._get_batches_of_transformed_samples(self,index_array)
keras.src.legacy.preprocessing.image.Iterator._set_index_array(self)
keras.src.legacy.preprocessing.image.Iterator.on_epoch_end(self)
keras.src.legacy.preprocessing.image.Iterator.reset(self)
keras.src.legacy.preprocessing.image.NumpyArrayIterator(self,x,y,image_data_generator,batch_size=32,shuffle=False,sample_weight=None,seed=None,data_format=None,save_to_dir=None,save_prefix='',save_format='png',subset=None,ignore_class_split=False,dtype=None)
keras.src.legacy.preprocessing.image.NumpyArrayIterator.__init__(self,x,y,image_data_generator,batch_size=32,shuffle=False,sample_weight=None,seed=None,data_format=None,save_to_dir=None,save_prefix='',save_format='png',subset=None,ignore_class_split=False,dtype=None)
keras.src.legacy.preprocessing.image.NumpyArrayIterator._get_batches_of_transformed_samples(self,index_array)
keras.src.legacy.preprocessing.image._iter_valid_files(directory,white_list_formats,follow_links)
keras.src.legacy.preprocessing.image._list_valid_filenames_in_directory(directory,white_list_formats,split,class_indices,follow_links)
keras.src.legacy.preprocessing.image.apply_affine_transform(x,theta=0,tx=0,ty=0,shear=0,zx=1,zy=1,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,order=1)
keras.src.legacy.preprocessing.image.apply_brightness_shift(x,brightness,scale=True)
keras.src.legacy.preprocessing.image.apply_channel_shift(x,intensity,channel_axis=0)
keras.src.legacy.preprocessing.image.flip_axis(x,axis)
keras.src.legacy.preprocessing.image.random_brightness(x,brightness_range,scale=True)
keras.src.legacy.preprocessing.image.random_channel_shift(x,intensity_range,channel_axis=0)
keras.src.legacy.preprocessing.image.random_rotation(x,rg,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)
keras.src.legacy.preprocessing.image.random_shear(x,intensity,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)
keras.src.legacy.preprocessing.image.random_shift(x,wrg,hrg,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)
keras.src.legacy.preprocessing.image.random_zoom(x,zoom_range,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)
keras.src.legacy.preprocessing.image.transform_matrix_offset_center(matrix,x,y)
keras.src.legacy.preprocessing.image.validate_filename(filename,white_list_formats)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/legacy/preprocessing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/legacy/preprocessing/text.py----------------------------------------
A:keras.src.legacy.preprocessing.text.input_text->input_text.translate(translate_map).translate(translate_map)
A:keras.src.legacy.preprocessing.text.translate_map->str.maketrans(translate_dict)
A:keras.src.legacy.preprocessing.text.seq->self.analyzer(text)
A:keras.src.legacy.preprocessing.text.num_words->kwargs.pop('nb_words')
A:keras.src.legacy.preprocessing.text.document_count->kwargs.pop('document_count', 0)
A:keras.src.legacy.preprocessing.text.self.word_counts->collections.OrderedDict()
A:keras.src.legacy.preprocessing.text.self.word_docs->collections.defaultdict(int)
A:keras.src.legacy.preprocessing.text.self.index_docs->collections.defaultdict(int)
A:keras.src.legacy.preprocessing.text.text->text.lower().lower()
A:keras.src.legacy.preprocessing.text.wcounts->list(self.word_counts.items())
A:keras.src.legacy.preprocessing.text.self.word_index->dict(zip(sorted_voc, list(range(1, len(sorted_voc) + 1))))
A:keras.src.legacy.preprocessing.text.oov_token_index->self.word_index.get(self.oov_token)
A:keras.src.legacy.preprocessing.text.i->self.word_index.get(w)
A:keras.src.legacy.preprocessing.text.word->self.index_word.get(num)
A:keras.src.legacy.preprocessing.text.vect->' '.join(vect)
A:keras.src.legacy.preprocessing.text.sequences->self.texts_to_sequences(texts)
A:keras.src.legacy.preprocessing.text.x->numpy.zeros((len(sequences), num_words))
A:keras.src.legacy.preprocessing.text.counts->collections.defaultdict(int)
A:keras.src.legacy.preprocessing.text.idf->numpy.log(1 + self.document_count / (1 + self.index_docs.get(j, 0)))
A:keras.src.legacy.preprocessing.text.json_word_counts->json.dumps(self.word_counts)
A:keras.src.legacy.preprocessing.text.json_word_docs->json.dumps(self.word_docs)
A:keras.src.legacy.preprocessing.text.json_index_docs->json.dumps(self.index_docs)
A:keras.src.legacy.preprocessing.text.json_word_index->json.dumps(self.word_index)
A:keras.src.legacy.preprocessing.text.json_index_word->json.dumps(self.index_word)
A:keras.src.legacy.preprocessing.text.config->json.loads(json_string).get('config')
A:keras.src.legacy.preprocessing.text.tokenizer_config->json.loads(json_string)
A:keras.src.legacy.preprocessing.text.word_counts->json.loads(config.pop('word_counts'))
A:keras.src.legacy.preprocessing.text.word_docs->json.loads(config.pop('word_docs'))
A:keras.src.legacy.preprocessing.text.index_docs->json.loads(config.pop('index_docs'))
A:keras.src.legacy.preprocessing.text.index_word->json.loads(config.pop('index_word'))
A:keras.src.legacy.preprocessing.text.word_index->json.loads(config.pop('word_index'))
A:keras.src.legacy.preprocessing.text.tokenizer->Tokenizer(**config)
keras.src.legacy.preprocessing.text.Tokenizer(self,num_words=None,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='',char_level=False,oov_token=None,analyzer=None,**kwargs)
keras.src.legacy.preprocessing.text.Tokenizer.__init__(self,num_words=None,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='',char_level=False,oov_token=None,analyzer=None,**kwargs)
keras.src.legacy.preprocessing.text.Tokenizer.fit_on_sequences(self,sequences)
keras.src.legacy.preprocessing.text.Tokenizer.fit_on_texts(self,texts)
keras.src.legacy.preprocessing.text.Tokenizer.get_config(self)
keras.src.legacy.preprocessing.text.Tokenizer.sequences_to_matrix(self,sequences,mode='binary')
keras.src.legacy.preprocessing.text.Tokenizer.sequences_to_texts(self,sequences)
keras.src.legacy.preprocessing.text.Tokenizer.sequences_to_texts_generator(self,sequences)
keras.src.legacy.preprocessing.text.Tokenizer.texts_to_matrix(self,texts,mode='binary')
keras.src.legacy.preprocessing.text.Tokenizer.texts_to_sequences(self,texts)
keras.src.legacy.preprocessing.text.Tokenizer.texts_to_sequences_generator(self,texts)
keras.src.legacy.preprocessing.text.Tokenizer.to_json(self,**kwargs)
keras.src.legacy.preprocessing.text.hashing_trick(text,n,hash_function=None,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='',analyzer=None)
keras.src.legacy.preprocessing.text.one_hot(input_text,n,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='',analyzer=None)
keras.src.legacy.preprocessing.text.text_to_word_sequence(input_text,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='')
keras.src.legacy.preprocessing.text.tokenizer_from_json(json_string)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/legacy/preprocessing/sequence.py----------------------------------------
A:keras.src.legacy.preprocessing.sequence.rows->numpy.arange(i, min(i + self.batch_size * self.stride, self.end_index + 1), self.stride)
A:keras.src.legacy.preprocessing.sequence.samples->numpy.array([self.data[row - self.length:row:self.sampling_rate] for row in rows])
A:keras.src.legacy.preprocessing.sequence.targets->self.targets.tolist()
A:keras.src.legacy.preprocessing.sequence.data->self.data.tolist()
A:keras.src.legacy.preprocessing.sequence.json_data->json.dumps(data)
A:keras.src.legacy.preprocessing.sequence.json_targets->json.dumps(targets)
A:keras.src.legacy.preprocessing.sequence.config->self.get_config()
A:keras.src.legacy.preprocessing.sequence.rank->numpy.arange(size)
A:keras.src.legacy.preprocessing.sequence.window_start->max(0, i - window_size)
A:keras.src.legacy.preprocessing.sequence.window_end->min(len(sequence), i + window_size + 1)
A:keras.src.legacy.preprocessing.sequence.num_negative_samples->int(len(labels) * negative_samples)
A:keras.src.legacy.preprocessing.sequence.seed->random.randint(0, 10000000.0)
keras.src.legacy.preprocessing.sequence.TimeseriesGenerator(self,data,targets,length,sampling_rate=1,stride=1,start_index=0,end_index=None,shuffle=False,reverse=False,batch_size=128)
keras.src.legacy.preprocessing.sequence.TimeseriesGenerator.__getitem__(self,index)
keras.src.legacy.preprocessing.sequence.TimeseriesGenerator.__init__(self,data,targets,length,sampling_rate=1,stride=1,start_index=0,end_index=None,shuffle=False,reverse=False,batch_size=128)
keras.src.legacy.preprocessing.sequence.TimeseriesGenerator.__len__(self)
keras.src.legacy.preprocessing.sequence.TimeseriesGenerator.get_config(self)
keras.src.legacy.preprocessing.sequence.TimeseriesGenerator.to_json(self,**kwargs)
keras.src.legacy.preprocessing.sequence.make_sampling_table(size,sampling_factor=1e-05)
keras.src.legacy.preprocessing.sequence.skipgrams(sequence,vocabulary_size,window_size=4,negative_samples=1.0,shuffle=True,categorical=False,sampling_table=None,seed=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/legacy/saving/saving_options.py----------------------------------------
A:keras.src.legacy.saving.saving_options.use_legacy_config_prev_value->keras.src.backend.common.global_state.get_global_attribute('use_legacy_config', None)
keras.src.legacy.saving.saving_options.keras_option_scope(use_legacy_config=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/legacy/saving/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/legacy/saving/saving_utils.py----------------------------------------
A:keras.src.legacy.saving.saving_utils.MODULE_OBJECTS->threading.local()
A:keras.src.legacy.saving.saving_utils.batch_input_shape->config['config'].pop('batch_input_shape', None)
A:keras.src.legacy.saving.saving_utils.axis->config['config'].pop('axis', None)
A:keras.src.legacy.saving.saving_utils.config['config']['axis']->int(axis[0])
A:keras.src.legacy.saving.saving_utils._->config['config'].pop(dep_arg, None)
A:keras.src.legacy.saving.saving_utils.config->json.loads(dict_str)
A:keras.src.legacy.saving.saving_utils.model_config['config']->model.get_config()
A:keras.src.legacy.saving.saving_utils.metadata->dict(keras_version=str(keras_version), backend=backend.backend(), model_config=model_config)
A:keras.src.legacy.saving.saving_utils.metadata['training_config']->_serialize_nested_config(training_config)
A:keras.src.legacy.saving.saving_utils.optimizer->_resolve_compile_arguments_compat(optimizer, optimizer_config, optimizers)
A:keras.src.legacy.saving.saving_utils.loss_config->training_config.get('loss', None)
A:keras.src.legacy.saving.saving_utils.loss->_resolve_compile_arguments_compat(loss, loss_config, losses)
A:keras.src.legacy.saving.saving_utils.metrics_config->training_config.get('metrics', None)
A:keras.src.legacy.saving.saving_utils.metrics->_resolve_compile_arguments_compat(metrics, metrics_config, metrics_module)
A:keras.src.legacy.saving.saving_utils.weighted_metrics_config->training_config.get('weighted_metrics', None)
A:keras.src.legacy.saving.saving_utils.weighted_metrics->_deserialize_nested_config(_deserialize_metric, weighted_metrics_config)
A:keras.src.legacy.saving.saving_utils.dict_str->dict_str.replace(find, replace).replace(find, replace)
A:keras.src.legacy.saving.saving_utils.obj->module.get(obj_config['config']['name'])
keras.src.legacy.saving.saving_utils._deserialize_metric(metric_config)
keras.src.legacy.saving.saving_utils._deserialize_nested_config(deserialize_fn,config)
keras.src.legacy.saving.saving_utils._find_replace_nested_dict(config,find,replace)
keras.src.legacy.saving.saving_utils._resolve_compile_arguments_compat(obj,obj_config,module)
keras.src.legacy.saving.saving_utils._serialize_nested_config(config)
keras.src.legacy.saving.saving_utils.compile_args_from_training_config(training_config,custom_objects=None)
keras.src.legacy.saving.saving_utils.model_from_config(config,custom_objects=None)
keras.src.legacy.saving.saving_utils.model_metadata(model,include_optimizer=True,require_config=True)
keras.src.legacy.saving.saving_utils.try_build_compiled_arguments(model)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/legacy/saving/serialization.py----------------------------------------
A:keras.src.legacy.saving.serialization.SHARED_OBJECT_DISABLED->threading.local()
A:keras.src.legacy.saving.serialization.SHARED_OBJECT_LOADING->threading.local()
A:keras.src.legacy.saving.serialization.SHARED_OBJECT_SAVING->threading.local()
A:keras.src.legacy.saving.serialization.self._orig_loading_scope->_shared_object_loading_scope()
A:keras.src.legacy.saving.serialization.self._orig_saving_scope->_shared_object_saving_scope()
A:keras.src.legacy.saving.serialization.SHARED_OBJECT_LOADING.scope->NoopLoadingScope()
A:keras.src.legacy.saving.serialization.self._shared_objects_config->weakref.WeakKeyDictionary()
A:keras.src.legacy.saving.serialization.shared_object_config->_shared_object_saving_scope().get_config(obj)
A:keras.src.legacy.saving.serialization.instance->inspect.unwrap(instance)
A:keras.src.legacy.saving.serialization.name->keras.src.saving.object_registration.get_registered_name(instance.__class__)
A:keras.src.legacy.saving.serialization.config->json.loads(dict_str)
A:keras.src.legacy.saving.serialization.serialized_item->serialize_keras_object(item)
A:keras.src.legacy.saving.serialization.cls->keras.src.saving.object_registration.get_registered_object(class_name, custom_objects, module_objects)
A:keras.src.legacy.saving.serialization.deserialized_objects[key]->keras.src.saving.object_registration.get_registered_object(item, custom_objects)
A:keras.src.legacy.saving.serialization.(cls, cls_config)->class_and_config_for_serialized_keras_object(config, module_objects, custom_objects, printable_module_name)
A:keras.src.legacy.saving.serialization.shared_object_id->json.loads(dict_str).get(SHARED_OBJECT_KEY)
A:keras.src.legacy.saving.serialization.shared_object->_shared_object_loading_scope().get(shared_object_id)
A:keras.src.legacy.saving.serialization.arg_spec->inspect.getfullargspec(cls.from_config)
A:keras.src.legacy.saving.serialization.cls_config->_find_replace_nested_dict(cls_config, 'keras.', 'keras.')
A:keras.src.legacy.saving.serialization.deserialized_obj->cls(**cls_config)
A:keras.src.legacy.saving.serialization.obj->module_objects.get(object_name)
A:keras.src.legacy.saving.serialization.dict_str->dict_str.replace(find, replace).replace(find, replace)
keras.src.legacy.saving.serialization.DisableSharedObjectScope
keras.src.legacy.saving.serialization.DisableSharedObjectScope.__enter__(self)
keras.src.legacy.saving.serialization.DisableSharedObjectScope.__exit__(self,*args,**kwargs)
keras.src.legacy.saving.serialization.NoopLoadingScope
keras.src.legacy.saving.serialization.NoopLoadingScope.get(self,unused_object_id)
keras.src.legacy.saving.serialization.NoopLoadingScope.set(self,object_id,obj)
keras.src.legacy.saving.serialization.SharedObjectConfig(self,base_config,object_id,**kwargs)
keras.src.legacy.saving.serialization.SharedObjectConfig.__init__(self,base_config,object_id,**kwargs)
keras.src.legacy.saving.serialization.SharedObjectConfig.increment_ref_count(self)
keras.src.legacy.saving.serialization.SharedObjectLoadingScope
keras.src.legacy.saving.serialization.SharedObjectLoadingScope.__enter__(self)
keras.src.legacy.saving.serialization.SharedObjectLoadingScope.__exit__(self,*args,**kwargs)
keras.src.legacy.saving.serialization.SharedObjectLoadingScope.get(self,object_id)
keras.src.legacy.saving.serialization.SharedObjectLoadingScope.set(self,object_id,obj)
keras.src.legacy.saving.serialization.SharedObjectSavingScope
keras.src.legacy.saving.serialization.SharedObjectSavingScope.__enter__(self)
keras.src.legacy.saving.serialization.SharedObjectSavingScope.__exit__(self,*args,**kwargs)
keras.src.legacy.saving.serialization.SharedObjectSavingScope.create_config(self,base_config,obj)
keras.src.legacy.saving.serialization.SharedObjectSavingScope.get_config(self,obj)
keras.src.legacy.saving.serialization._find_replace_nested_dict(config,find,replace)
keras.src.legacy.saving.serialization._shared_object_disabled()
keras.src.legacy.saving.serialization._shared_object_loading_scope()
keras.src.legacy.saving.serialization._shared_object_saving_scope()
keras.src.legacy.saving.serialization.class_and_config_for_serialized_keras_object(config,module_objects=None,custom_objects=None,printable_module_name='object')
keras.src.legacy.saving.serialization.deserialize_keras_object(identifier,module_objects=None,custom_objects=None,printable_module_name='object')
keras.src.legacy.saving.serialization.is_default(method)
keras.src.legacy.saving.serialization.serialize_keras_class_and_config(cls_name,cls_config,obj=None,shared_object_id=None)
keras.src.legacy.saving.serialization.serialize_keras_object(instance)
keras.src.legacy.saving.serialization.skip_failed_serialization()
keras.src.legacy.saving.serialization.validate_config(config)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/legacy/saving/json_utils.py----------------------------------------
A:keras.src.legacy.saving.json_utils.serialized->keras.src.legacy.saving.serialization.serialize_keras_object(obj)
A:keras.src.legacy.saving.json_utils.type_spec_name->tensorflow.python.framework.type_spec_registry.get_name(type(obj))
A:keras.src.legacy.saving.json_utils.spec->keras.src.utils.module_utils.tensorflow.type_spec_from_value(obj)
keras.src.legacy.saving.json_utils.Encoder(json.JSONEncoder)
keras.src.legacy.saving.json_utils.Encoder.default(self,obj)
keras.src.legacy.saving.json_utils.Encoder.encode(self,obj)
keras.src.legacy.saving.json_utils._decode_helper(obj,deserialize=False,module_objects=None,custom_objects=None)
keras.src.legacy.saving.json_utils._encode_tuple(x)
keras.src.legacy.saving.json_utils.decode(json_string)
keras.src.legacy.saving.json_utils.decode_and_deserialize(json_string,module_objects=None,custom_objects=None)
keras.src.legacy.saving.json_utils.get_json_type(obj)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/legacy/saving/legacy_h5_format.py----------------------------------------
A:keras.src.legacy.saving.legacy_h5_format.proceed->keras.src.utils.io_utils.ask_to_proceed_with_overwrite(filepath)
A:keras.src.legacy.saving.legacy_h5_format.dirpath->os.path.dirname(filepath)
A:keras.src.legacy.saving.legacy_h5_format.f->h5py.File(filepath, mode='r')
A:keras.src.legacy.saving.legacy_h5_format.model_metadata->keras.src.legacy.saving.saving_utils.model_metadata(model, include_optimizer)
A:keras.src.legacy.saving.legacy_h5_format.f.attrs[k]->json.dumps(v, default=json_utils.get_json_type).encode('utf8')
A:keras.src.legacy.saving.legacy_h5_format.model_weights_group->h5py.File(filepath, mode='r').create_group('model_weights')
A:keras.src.legacy.saving.legacy_h5_format.tlco->keras.src.backend.common.global_state.get_global_attribute('custom_objects_scope_dict', {})
A:keras.src.legacy.saving.legacy_h5_format.model_config->keras.src.legacy.saving.json_utils.decode(model_config)
A:keras.src.legacy.saving.legacy_h5_format.model->keras.src.legacy.saving.saving_utils.model_from_config(model_config, custom_objects=custom_objects)
A:keras.src.legacy.saving.legacy_h5_format.training_config->keras.src.legacy.saving.json_utils.decode(training_config)
A:keras.src.legacy.saving.legacy_h5_format.optimizer_weight_values->load_optimizer_weights_from_hdf5_group(f)
A:keras.src.legacy.saving.legacy_h5_format.f.attrs['backend']->keras.src.backend.backend().encode('utf8')
A:keras.src.legacy.saving.legacy_h5_format.f.attrs['keras_version']->str(keras_version).encode('utf8')
A:keras.src.legacy.saving.legacy_h5_format.g->h5py.File(filepath, mode='r').create_group('top_level_model_weights')
A:keras.src.legacy.saving.legacy_h5_format.weights->_legacy_weights(layer)
A:keras.src.legacy.saving.legacy_h5_format.param_dset->hdf5_group.create_group('optimizer_weights').create_dataset(name, val.shape, dtype=val.dtype)
A:keras.src.legacy.saving.legacy_h5_format.symbolic_weights->_legacy_weights(layer)
A:keras.src.legacy.saving.legacy_h5_format.weights_group->hdf5_group.create_group('optimizer_weights')
A:keras.src.legacy.saving.legacy_h5_format.data_npy->numpy.asarray(data)
A:keras.src.legacy.saving.legacy_h5_format.chunked_data->numpy.array_split(data_npy, num_chunks)
A:keras.src.legacy.saving.legacy_h5_format.original_keras_version->original_keras_version.decode('utf8').decode('utf8')
A:keras.src.legacy.saving.legacy_h5_format.original_backend->original_backend.decode('utf8').decode('utf8')
A:keras.src.legacy.saving.legacy_h5_format.layer_names->load_attributes_from_hdf5_group(f, 'layer_names')
A:keras.src.legacy.saving.legacy_h5_format.weight_names->load_attributes_from_hdf5_group(f, 'weight_names')
A:keras.src.legacy.saving.legacy_h5_format.weight_values->load_subset_weights_from_hdf5_group(f['top_level_model_weights'])
A:keras.src.legacy.saving.legacy_h5_format.optimizer_weight_names->load_attributes_from_hdf5_group(weights_group, 'weight_names')
keras.src.legacy.saving.legacy_h5_format._legacy_weights(layer)
keras.src.legacy.saving.legacy_h5_format.load_attributes_from_hdf5_group(group,name)
keras.src.legacy.saving.legacy_h5_format.load_model_from_hdf5(filepath,custom_objects=None,compile=True)
keras.src.legacy.saving.legacy_h5_format.load_optimizer_weights_from_hdf5_group(hdf5_group)
keras.src.legacy.saving.legacy_h5_format.load_subset_weights_from_hdf5_group(f)
keras.src.legacy.saving.legacy_h5_format.load_weights_from_hdf5_group(f,model)
keras.src.legacy.saving.legacy_h5_format.load_weights_from_hdf5_group_by_name(f,model,skip_mismatch=False)
keras.src.legacy.saving.legacy_h5_format.save_attributes_to_hdf5_group(group,name,data)
keras.src.legacy.saving.legacy_h5_format.save_model_to_hdf5(model,filepath,overwrite=True,include_optimizer=True)
keras.src.legacy.saving.legacy_h5_format.save_optimizer_weights_to_hdf5_group(hdf5_group,optimizer)
keras.src.legacy.saving.legacy_h5_format.save_subset_weights_to_hdf5_group(f,weights)
keras.src.legacy.saving.legacy_h5_format.save_weights_to_hdf5_group(f,model)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/callbacks/learning_rate_scheduler.py----------------------------------------
A:keras.src.callbacks.learning_rate_scheduler.learning_rate->self.schedule(epoch)
A:keras.src.callbacks.learning_rate_scheduler.logs['learning_rate']->float(backend.convert_to_numpy(self.model.optimizer.learning_rate))
keras.src.callbacks.LearningRateScheduler(self,schedule,verbose=0)
keras.src.callbacks.LearningRateScheduler.on_epoch_begin(self,epoch,logs=None)
keras.src.callbacks.LearningRateScheduler.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.learning_rate_scheduler.LearningRateScheduler(self,schedule,verbose=0)
keras.src.callbacks.learning_rate_scheduler.LearningRateScheduler.__init__(self,schedule,verbose=0)
keras.src.callbacks.learning_rate_scheduler.LearningRateScheduler.on_epoch_begin(self,epoch,logs=None)
keras.src.callbacks.learning_rate_scheduler.LearningRateScheduler.on_epoch_end(self,epoch,logs=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/callbacks/early_stopping.py----------------------------------------
A:keras.src.callbacks.early_stopping.self.min_delta->abs(min_delta)
A:keras.src.callbacks.early_stopping.metric_name->self.monitor.removeprefix('val_')
A:keras.src.callbacks.early_stopping.current->self.get_monitor_value(logs)
A:keras.src.callbacks.early_stopping.self.best_weights->self.model.get_weights()
A:keras.src.callbacks.early_stopping.monitor_value->logs.get(self.monitor)
keras.src.callbacks.EarlyStopping(self,monitor='val_loss',min_delta=0,patience=0,verbose=0,mode='auto',baseline=None,restore_best_weights=False,start_from_epoch=0)
keras.src.callbacks.EarlyStopping._is_improvement(self,monitor_value,reference_value)
keras.src.callbacks.EarlyStopping._set_monitor_op(self)
keras.src.callbacks.EarlyStopping.get_monitor_value(self,logs)
keras.src.callbacks.EarlyStopping.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.EarlyStopping.on_train_begin(self,logs=None)
keras.src.callbacks.EarlyStopping.on_train_end(self,logs=None)
keras.src.callbacks.early_stopping.EarlyStopping(self,monitor='val_loss',min_delta=0,patience=0,verbose=0,mode='auto',baseline=None,restore_best_weights=False,start_from_epoch=0)
keras.src.callbacks.early_stopping.EarlyStopping.__init__(self,monitor='val_loss',min_delta=0,patience=0,verbose=0,mode='auto',baseline=None,restore_best_weights=False,start_from_epoch=0)
keras.src.callbacks.early_stopping.EarlyStopping._is_improvement(self,monitor_value,reference_value)
keras.src.callbacks.early_stopping.EarlyStopping._set_monitor_op(self)
keras.src.callbacks.early_stopping.EarlyStopping.get_monitor_value(self,logs)
keras.src.callbacks.early_stopping.EarlyStopping.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.early_stopping.EarlyStopping.on_train_begin(self,logs=None)
keras.src.callbacks.early_stopping.EarlyStopping.on_train_end(self,logs=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/callbacks/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/callbacks/model_checkpoint.py----------------------------------------
A:keras.src.callbacks.model_checkpoint.self.filepath->keras.src.utils.file_utils.path_to_string(filepath)
A:keras.src.callbacks.model_checkpoint.filepath->self._get_file_path(epoch, batch, logs)
A:keras.src.callbacks.model_checkpoint.dirname->os.path.dirname(filepath)
A:keras.src.callbacks.model_checkpoint.current->logs.get(self.monitor)
A:keras.src.callbacks.model_checkpoint.file_path->os.path.join(dir_name, file_name)
A:keras.src.callbacks.model_checkpoint.dir_name->os.path.dirname(pattern)
A:keras.src.callbacks.model_checkpoint.base_name->os.path.basename(pattern)
A:keras.src.callbacks.model_checkpoint.mod_time->os.path.getmtime(file_path)
keras.src.callbacks.ModelCheckpoint(self,filepath,monitor='val_loss',verbose=0,save_best_only=False,save_weights_only=False,mode='auto',save_freq='epoch',initial_value_threshold=None)
keras.src.callbacks.ModelCheckpoint._checkpoint_exists(self,filepath)
keras.src.callbacks.ModelCheckpoint._get_file_path(self,epoch,batch,logs)
keras.src.callbacks.ModelCheckpoint._get_most_recently_modified_file_matching_pattern(self,pattern)
keras.src.callbacks.ModelCheckpoint._save_model(self,epoch,batch,logs)
keras.src.callbacks.ModelCheckpoint._should_save_on_batch(self,batch)
keras.src.callbacks.ModelCheckpoint.on_epoch_begin(self,epoch,logs=None)
keras.src.callbacks.ModelCheckpoint.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.ModelCheckpoint.on_train_batch_end(self,batch,logs=None)
keras.src.callbacks.model_checkpoint.ModelCheckpoint(self,filepath,monitor='val_loss',verbose=0,save_best_only=False,save_weights_only=False,mode='auto',save_freq='epoch',initial_value_threshold=None)
keras.src.callbacks.model_checkpoint.ModelCheckpoint.__init__(self,filepath,monitor='val_loss',verbose=0,save_best_only=False,save_weights_only=False,mode='auto',save_freq='epoch',initial_value_threshold=None)
keras.src.callbacks.model_checkpoint.ModelCheckpoint._checkpoint_exists(self,filepath)
keras.src.callbacks.model_checkpoint.ModelCheckpoint._get_file_path(self,epoch,batch,logs)
keras.src.callbacks.model_checkpoint.ModelCheckpoint._get_most_recently_modified_file_matching_pattern(self,pattern)
keras.src.callbacks.model_checkpoint.ModelCheckpoint._save_model(self,epoch,batch,logs)
keras.src.callbacks.model_checkpoint.ModelCheckpoint._should_save_on_batch(self,batch)
keras.src.callbacks.model_checkpoint.ModelCheckpoint.on_epoch_begin(self,epoch,logs=None)
keras.src.callbacks.model_checkpoint.ModelCheckpoint.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.model_checkpoint.ModelCheckpoint.on_train_batch_end(self,batch,logs=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/callbacks/csv_logger.py----------------------------------------
A:keras.src.callbacks.csv_logger.self.filename->keras.src.utils.file_utils.path_to_string(filename)
A:keras.src.callbacks.csv_logger.self.csv_file->keras.src.utils.file_utils.File(self.filename, mode)
A:keras.src.callbacks.csv_logger.self.keys->sorted(logs.keys())
A:keras.src.callbacks.csv_logger.self.writer->csv.DictWriter(self.csv_file, fieldnames=fieldnames, dialect=CustomDialect)
A:keras.src.callbacks.csv_logger.row_dict->collections.OrderedDict({'epoch': epoch})
keras.src.callbacks.CSVLogger(self,filename,separator=',',append=False)
keras.src.callbacks.CSVLogger.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.CSVLogger.on_train_begin(self,logs=None)
keras.src.callbacks.CSVLogger.on_train_end(self,logs=None)
keras.src.callbacks.csv_logger.CSVLogger(self,filename,separator=',',append=False)
keras.src.callbacks.csv_logger.CSVLogger.__init__(self,filename,separator=',',append=False)
keras.src.callbacks.csv_logger.CSVLogger.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.csv_logger.CSVLogger.on_train_begin(self,logs=None)
keras.src.callbacks.csv_logger.CSVLogger.on_train_end(self,logs=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/callbacks/callback_list.py----------------------------------------
A:keras.src.callbacks.callback_list.self._history->History()
A:keras.src.callbacks.callback_list.self._progbar->ProgbarLogger()
keras.src.callbacks.CallbackList(self,callbacks=None,add_history=False,add_progbar=False,model=None,**params)
keras.src.callbacks.CallbackList._add_default_callbacks(self,add_history,add_progbar)
keras.src.callbacks.CallbackList.append(self,callback)
keras.src.callbacks.CallbackList.on_batch_begin(self,batch,logs=None)
keras.src.callbacks.CallbackList.on_batch_end(self,batch,logs=None)
keras.src.callbacks.CallbackList.on_epoch_begin(self,epoch,logs=None)
keras.src.callbacks.CallbackList.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.CallbackList.on_predict_batch_begin(self,batch,logs=None)
keras.src.callbacks.CallbackList.on_predict_batch_end(self,batch,logs=None)
keras.src.callbacks.CallbackList.on_predict_begin(self,logs=None)
keras.src.callbacks.CallbackList.on_predict_end(self,logs=None)
keras.src.callbacks.CallbackList.on_test_batch_begin(self,batch,logs=None)
keras.src.callbacks.CallbackList.on_test_batch_end(self,batch,logs=None)
keras.src.callbacks.CallbackList.on_test_begin(self,logs=None)
keras.src.callbacks.CallbackList.on_test_end(self,logs=None)
keras.src.callbacks.CallbackList.on_train_batch_begin(self,batch,logs=None)
keras.src.callbacks.CallbackList.on_train_batch_end(self,batch,logs=None)
keras.src.callbacks.CallbackList.on_train_begin(self,logs=None)
keras.src.callbacks.CallbackList.on_train_end(self,logs=None)
keras.src.callbacks.CallbackList.set_model(self,model)
keras.src.callbacks.CallbackList.set_params(self,params)
keras.src.callbacks.callback_list.CallbackList(self,callbacks=None,add_history=False,add_progbar=False,model=None,**params)
keras.src.callbacks.callback_list.CallbackList.__init__(self,callbacks=None,add_history=False,add_progbar=False,model=None,**params)
keras.src.callbacks.callback_list.CallbackList._add_default_callbacks(self,add_history,add_progbar)
keras.src.callbacks.callback_list.CallbackList.append(self,callback)
keras.src.callbacks.callback_list.CallbackList.on_batch_begin(self,batch,logs=None)
keras.src.callbacks.callback_list.CallbackList.on_batch_end(self,batch,logs=None)
keras.src.callbacks.callback_list.CallbackList.on_epoch_begin(self,epoch,logs=None)
keras.src.callbacks.callback_list.CallbackList.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.callback_list.CallbackList.on_predict_batch_begin(self,batch,logs=None)
keras.src.callbacks.callback_list.CallbackList.on_predict_batch_end(self,batch,logs=None)
keras.src.callbacks.callback_list.CallbackList.on_predict_begin(self,logs=None)
keras.src.callbacks.callback_list.CallbackList.on_predict_end(self,logs=None)
keras.src.callbacks.callback_list.CallbackList.on_test_batch_begin(self,batch,logs=None)
keras.src.callbacks.callback_list.CallbackList.on_test_batch_end(self,batch,logs=None)
keras.src.callbacks.callback_list.CallbackList.on_test_begin(self,logs=None)
keras.src.callbacks.callback_list.CallbackList.on_test_end(self,logs=None)
keras.src.callbacks.callback_list.CallbackList.on_train_batch_begin(self,batch,logs=None)
keras.src.callbacks.callback_list.CallbackList.on_train_batch_end(self,batch,logs=None)
keras.src.callbacks.callback_list.CallbackList.on_train_begin(self,logs=None)
keras.src.callbacks.callback_list.CallbackList.on_train_end(self,logs=None)
keras.src.callbacks.callback_list.CallbackList.set_model(self,model)
keras.src.callbacks.callback_list.CallbackList.set_params(self,params)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/callbacks/reduce_lr_on_plateau.py----------------------------------------
A:keras.src.callbacks.reduce_lr_on_plateau.logs['learning_rate']->float(backend.convert_to_numpy(self.model.optimizer.learning_rate))
A:keras.src.callbacks.reduce_lr_on_plateau.current->logs.get(self.monitor)
A:keras.src.callbacks.reduce_lr_on_plateau.old_lr->float(backend.convert_to_numpy(self.model.optimizer.learning_rate))
A:keras.src.callbacks.reduce_lr_on_plateau.new_lr->max(new_lr, self.min_lr)
keras.src.callbacks.ReduceLROnPlateau(self,monitor='val_loss',factor=0.1,patience=10,verbose=0,mode='auto',min_delta=0.0001,cooldown=0,min_lr=0.0,**kwargs)
keras.src.callbacks.ReduceLROnPlateau._reset(self)
keras.src.callbacks.ReduceLROnPlateau.in_cooldown(self)
keras.src.callbacks.ReduceLROnPlateau.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.ReduceLROnPlateau.on_train_begin(self,logs=None)
keras.src.callbacks.reduce_lr_on_plateau.ReduceLROnPlateau(self,monitor='val_loss',factor=0.1,patience=10,verbose=0,mode='auto',min_delta=0.0001,cooldown=0,min_lr=0.0,**kwargs)
keras.src.callbacks.reduce_lr_on_plateau.ReduceLROnPlateau.__init__(self,monitor='val_loss',factor=0.1,patience=10,verbose=0,mode='auto',min_delta=0.0001,cooldown=0,min_lr=0.0,**kwargs)
keras.src.callbacks.reduce_lr_on_plateau.ReduceLROnPlateau._reset(self)
keras.src.callbacks.reduce_lr_on_plateau.ReduceLROnPlateau.in_cooldown(self)
keras.src.callbacks.reduce_lr_on_plateau.ReduceLROnPlateau.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.reduce_lr_on_plateau.ReduceLROnPlateau.on_train_begin(self,logs=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/callbacks/lambda_callback.py----------------------------------------
keras.src.callbacks.LambdaCallback(self,on_epoch_begin=None,on_epoch_end=None,on_train_begin=None,on_train_end=None,on_train_batch_begin=None,on_train_batch_end=None,**kwargs)
keras.src.callbacks.lambda_callback.LambdaCallback(self,on_epoch_begin=None,on_epoch_end=None,on_train_begin=None,on_train_end=None,on_train_batch_begin=None,on_train_batch_end=None,**kwargs)
keras.src.callbacks.lambda_callback.LambdaCallback.__init__(self,on_epoch_begin=None,on_epoch_end=None,on_train_begin=None,on_train_end=None,on_train_batch_begin=None,on_train_batch_end=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/callbacks/remote_monitor.py----------------------------------------
A:keras.src.callbacks.remote_monitor.send[k]->v.item()
keras.src.callbacks.RemoteMonitor(self,root='http://localhost:9000',path='/publish/epoch/end/',field='data',headers=None,send_as_json=False)
keras.src.callbacks.RemoteMonitor.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.remote_monitor.RemoteMonitor(self,root='http://localhost:9000',path='/publish/epoch/end/',field='data',headers=None,send_as_json=False)
keras.src.callbacks.remote_monitor.RemoteMonitor.__init__(self,root='http://localhost:9000',path='/publish/epoch/end/',field='data',headers=None,send_as_json=False)
keras.src.callbacks.remote_monitor.RemoteMonitor.on_epoch_end(self,epoch,logs=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/callbacks/history.py----------------------------------------
keras.src.callbacks.History(self)
keras.src.callbacks.History.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.History.on_train_begin(self,logs=None)
keras.src.callbacks.history.History(self)
keras.src.callbacks.history.History.__init__(self)
keras.src.callbacks.history.History.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.history.History.on_train_begin(self,logs=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/callbacks/backup_and_restore.py----------------------------------------
A:keras.src.callbacks.backup_and_restore.self._weights_path->keras.src.utils.file_utils.join(backup_dir, 'latest.weights.h5')
A:keras.src.callbacks.backup_and_restore.self._training_metadata_path->keras.src.utils.file_utils.join(backup_dir, 'training_metadata.json')
A:keras.src.callbacks.backup_and_restore.training_metadata->json.loads(f.read())
keras.src.callbacks.BackupAndRestore(self,backup_dir,save_freq='epoch',delete_checkpoint=True)
keras.src.callbacks.BackupAndRestore._save_model(self)
keras.src.callbacks.BackupAndRestore._should_save_on_batch(self,batch)
keras.src.callbacks.BackupAndRestore.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.BackupAndRestore.on_train_batch_end(self,batch,logs=None)
keras.src.callbacks.BackupAndRestore.on_train_begin(self,logs=None)
keras.src.callbacks.BackupAndRestore.on_train_end(self,logs=None)
keras.src.callbacks.backup_and_restore.BackupAndRestore(self,backup_dir,save_freq='epoch',delete_checkpoint=True)
keras.src.callbacks.backup_and_restore.BackupAndRestore.__init__(self,backup_dir,save_freq='epoch',delete_checkpoint=True)
keras.src.callbacks.backup_and_restore.BackupAndRestore._save_model(self)
keras.src.callbacks.backup_and_restore.BackupAndRestore._should_save_on_batch(self,batch)
keras.src.callbacks.backup_and_restore.BackupAndRestore.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.backup_and_restore.BackupAndRestore.on_train_batch_end(self,batch,logs=None)
keras.src.callbacks.backup_and_restore.BackupAndRestore.on_train_begin(self,logs=None)
keras.src.callbacks.backup_and_restore.BackupAndRestore.on_train_end(self,logs=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/callbacks/progbar_logger.py----------------------------------------
A:keras.src.callbacks.progbar_logger.self.progbar->Progbar(target=self.target, verbose=self.verbose, unit_name='step')
keras.src.callbacks.ProgbarLogger(self)
keras.src.callbacks.ProgbarLogger._finalize_progbar(self,logs)
keras.src.callbacks.ProgbarLogger._maybe_init_progbar(self)
keras.src.callbacks.ProgbarLogger._reset_progbar(self)
keras.src.callbacks.ProgbarLogger._update_progbar(self,batch,logs=None)
keras.src.callbacks.ProgbarLogger.on_epoch_begin(self,epoch,logs=None)
keras.src.callbacks.ProgbarLogger.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.ProgbarLogger.on_predict_batch_end(self,batch,logs=None)
keras.src.callbacks.ProgbarLogger.on_predict_begin(self,logs=None)
keras.src.callbacks.ProgbarLogger.on_predict_end(self,logs=None)
keras.src.callbacks.ProgbarLogger.on_test_batch_end(self,batch,logs=None)
keras.src.callbacks.ProgbarLogger.on_test_begin(self,logs=None)
keras.src.callbacks.ProgbarLogger.on_test_end(self,logs=None)
keras.src.callbacks.ProgbarLogger.on_train_batch_end(self,batch,logs=None)
keras.src.callbacks.ProgbarLogger.on_train_begin(self,logs=None)
keras.src.callbacks.ProgbarLogger.set_params(self,params)
keras.src.callbacks.progbar_logger.ProgbarLogger(self)
keras.src.callbacks.progbar_logger.ProgbarLogger.__init__(self)
keras.src.callbacks.progbar_logger.ProgbarLogger._finalize_progbar(self,logs)
keras.src.callbacks.progbar_logger.ProgbarLogger._maybe_init_progbar(self)
keras.src.callbacks.progbar_logger.ProgbarLogger._reset_progbar(self)
keras.src.callbacks.progbar_logger.ProgbarLogger._update_progbar(self,batch,logs=None)
keras.src.callbacks.progbar_logger.ProgbarLogger.on_epoch_begin(self,epoch,logs=None)
keras.src.callbacks.progbar_logger.ProgbarLogger.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.progbar_logger.ProgbarLogger.on_predict_batch_end(self,batch,logs=None)
keras.src.callbacks.progbar_logger.ProgbarLogger.on_predict_begin(self,logs=None)
keras.src.callbacks.progbar_logger.ProgbarLogger.on_predict_end(self,logs=None)
keras.src.callbacks.progbar_logger.ProgbarLogger.on_test_batch_end(self,batch,logs=None)
keras.src.callbacks.progbar_logger.ProgbarLogger.on_test_begin(self,logs=None)
keras.src.callbacks.progbar_logger.ProgbarLogger.on_test_end(self,logs=None)
keras.src.callbacks.progbar_logger.ProgbarLogger.on_train_batch_end(self,batch,logs=None)
keras.src.callbacks.progbar_logger.ProgbarLogger.on_train_begin(self,logs=None)
keras.src.callbacks.progbar_logger.ProgbarLogger.set_params(self,params)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/callbacks/swap_ema_weights.py----------------------------------------
A:keras.src.callbacks.swap_ema_weights.temporary_variable->keras.src.ops.convert_to_numpy(var)
keras.src.callbacks.SwapEMAWeights(self,swap_on_epoch=False)
keras.src.callbacks.SwapEMAWeights._backend_finalize_ema_values(self,optimizer)
keras.src.callbacks.SwapEMAWeights._backend_swap_variables(self,optimizer)
keras.src.callbacks.SwapEMAWeights._finalize_ema_values(self)
keras.src.callbacks.SwapEMAWeights._swap_variables(self)
keras.src.callbacks.SwapEMAWeights._tf_finalize_ema_values(self,optimizer)
keras.src.callbacks.SwapEMAWeights._tf_swap_variables(self,optimizer)
keras.src.callbacks.SwapEMAWeights.on_epoch_begin(self,epoch,logs=None)
keras.src.callbacks.SwapEMAWeights.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.SwapEMAWeights.on_predict_begin(self,logs=None)
keras.src.callbacks.SwapEMAWeights.on_predict_end(self,logs=None)
keras.src.callbacks.SwapEMAWeights.on_test_begin(self,logs=None)
keras.src.callbacks.SwapEMAWeights.on_test_end(self,logs=None)
keras.src.callbacks.swap_ema_weights.SwapEMAWeights(self,swap_on_epoch=False)
keras.src.callbacks.swap_ema_weights.SwapEMAWeights.__init__(self,swap_on_epoch=False)
keras.src.callbacks.swap_ema_weights.SwapEMAWeights._backend_finalize_ema_values(self,optimizer)
keras.src.callbacks.swap_ema_weights.SwapEMAWeights._backend_swap_variables(self,optimizer)
keras.src.callbacks.swap_ema_weights.SwapEMAWeights._finalize_ema_values(self)
keras.src.callbacks.swap_ema_weights.SwapEMAWeights._swap_variables(self)
keras.src.callbacks.swap_ema_weights.SwapEMAWeights._tf_finalize_ema_values(self,optimizer)
keras.src.callbacks.swap_ema_weights.SwapEMAWeights._tf_swap_variables(self,optimizer)
keras.src.callbacks.swap_ema_weights.SwapEMAWeights.on_epoch_begin(self,epoch,logs=None)
keras.src.callbacks.swap_ema_weights.SwapEMAWeights.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.swap_ema_weights.SwapEMAWeights.on_predict_begin(self,logs=None)
keras.src.callbacks.swap_ema_weights.SwapEMAWeights.on_predict_end(self,logs=None)
keras.src.callbacks.swap_ema_weights.SwapEMAWeights.on_test_begin(self,logs=None)
keras.src.callbacks.swap_ema_weights.SwapEMAWeights.on_test_end(self,logs=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/callbacks/tensorboard.py----------------------------------------
A:keras.src.callbacks.tensorboard.self.log_dir->str(log_dir)
A:keras.src.callbacks.tensorboard.self._train_dir->os.path.join(self._log_write_dir, 'train')
A:keras.src.callbacks.tensorboard.self._val_dir->os.path.join(self._log_write_dir, 'validation')
A:keras.src.callbacks.tensorboard.self._writers['train']->self.summary.create_file_writer(self._train_dir)
A:keras.src.callbacks.tensorboard.self._writers['val']->self.summary.create_file_writer(self._val_dir)
A:keras.src.callbacks.tensorboard.config->tensorboard.plugins.projector.ProjectorConfig()
A:keras.src.callbacks.tensorboard.embedding->tensorboard.plugins.projector.ProjectorConfig().embeddings.add()
A:keras.src.callbacks.tensorboard.embedding.metadata_path->self.embeddings_metadata.pop(layer.name)
A:keras.src.callbacks.tensorboard.config_pbtxt->google.protobuf.text_format.MessageToString(config)
A:keras.src.callbacks.tensorboard.path->os.path.join(self._log_write_dir, 'projector_config.pbtxt')
A:keras.src.callbacks.tensorboard.previous_context->self._prev_summary_state.pop()
A:keras.src.callbacks.tensorboard.profile_batch->keras.src.utils.tree.map_structure(int, profile_batch)
A:keras.src.callbacks.tensorboard.self._batch_start_time->time.time()
A:keras.src.callbacks.tensorboard.self._epoch_start_time->time.time()
A:keras.src.callbacks.tensorboard.logs['learning_rate']->float(ops.convert_to_numpy(self.model.optimizer.learning_rate))
A:keras.src.callbacks.tensorboard.current_iteration->keras.src.ops.convert_to_tensor(current_iteration, 'float32')
A:keras.src.callbacks.tensorboard.self._previous_epoch_iterations->keras.src.ops.convert_to_tensor(self._previous_epoch_iterations, 'float32')
A:keras.src.callbacks.tensorboard.time_since_epoch_begin->keras.src.ops.convert_to_tensor(time_since_epoch_begin, 'float32')
A:keras.src.callbacks.tensorboard.train_logs->self._collect_learning_rate(train_logs)
A:keras.src.callbacks.tensorboard.train_logs['steps_per_second']->self._compute_steps_per_second()
A:keras.src.callbacks.tensorboard.weight_name->weight.name.replace(':', '_')
A:keras.src.callbacks.tensorboard.w_img->keras.src.backend.convert_to_numpy(w_img)
A:keras.src.callbacks.tensorboard.embeddings_ckpt->os.path.join(self._log_write_dir, 'train', f'keras_embedding.ckpt-{epoch}.weights.h5')
A:keras.src.callbacks.tensorboard.summary_metadata->SummaryMetadata()
A:keras.src.callbacks.tensorboard.json_string->data.to_json()
keras.src.callbacks.TensorBoard(self,log_dir='logs',histogram_freq=0,write_graph=True,write_images=False,write_steps_per_second=False,update_freq='epoch',profile_batch=0,embeddings_freq=0,embeddings_metadata=None)
keras.src.callbacks.TensorBoard._close_writers(self)
keras.src.callbacks.TensorBoard._collect_learning_rate(self,logs)
keras.src.callbacks.TensorBoard._compute_steps_per_second(self)
keras.src.callbacks.TensorBoard._configure_embeddings(self)
keras.src.callbacks.TensorBoard._implements_train_batch_hooks(self)
keras.src.callbacks.TensorBoard._init_profile_batch(self,profile_batch)
keras.src.callbacks.TensorBoard._log_embeddings(self,epoch)
keras.src.callbacks.TensorBoard._log_epoch_metrics(self,epoch,logs)
keras.src.callbacks.TensorBoard._log_weight_as_image(self,weight,weight_name,epoch)
keras.src.callbacks.TensorBoard._log_weights(self,epoch)
keras.src.callbacks.TensorBoard._pop_writer(self)
keras.src.callbacks.TensorBoard._push_writer(self,writer,step)
keras.src.callbacks.TensorBoard._start_profiler(self,logdir)
keras.src.callbacks.TensorBoard._start_trace(self)
keras.src.callbacks.TensorBoard._stop_profiler(self,save=True)
keras.src.callbacks.TensorBoard._stop_trace(self,batch=None)
keras.src.callbacks.TensorBoard._train_writer(self)
keras.src.callbacks.TensorBoard._val_writer(self)
keras.src.callbacks.TensorBoard._write_keras_model_summary(self)
keras.src.callbacks.TensorBoard._write_keras_model_train_graph(self)
keras.src.callbacks.TensorBoard.on_epoch_begin(self,epoch,logs=None)
keras.src.callbacks.TensorBoard.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.TensorBoard.on_test_begin(self,logs=None)
keras.src.callbacks.TensorBoard.on_test_end(self,logs=None)
keras.src.callbacks.TensorBoard.on_train_batch_begin(self,batch,logs=None)
keras.src.callbacks.TensorBoard.on_train_batch_end(self,batch,logs=None)
keras.src.callbacks.TensorBoard.on_train_begin(self,logs=None)
keras.src.callbacks.TensorBoard.on_train_end(self,logs=None)
keras.src.callbacks.TensorBoard.set_model(self,model)
keras.src.callbacks.TensorBoard.summary(self)
keras.src.callbacks.tensorboard.TensorBoard(self,log_dir='logs',histogram_freq=0,write_graph=True,write_images=False,write_steps_per_second=False,update_freq='epoch',profile_batch=0,embeddings_freq=0,embeddings_metadata=None)
keras.src.callbacks.tensorboard.TensorBoard.__init__(self,log_dir='logs',histogram_freq=0,write_graph=True,write_images=False,write_steps_per_second=False,update_freq='epoch',profile_batch=0,embeddings_freq=0,embeddings_metadata=None)
keras.src.callbacks.tensorboard.TensorBoard._close_writers(self)
keras.src.callbacks.tensorboard.TensorBoard._collect_learning_rate(self,logs)
keras.src.callbacks.tensorboard.TensorBoard._compute_steps_per_second(self)
keras.src.callbacks.tensorboard.TensorBoard._configure_embeddings(self)
keras.src.callbacks.tensorboard.TensorBoard._implements_train_batch_hooks(self)
keras.src.callbacks.tensorboard.TensorBoard._init_profile_batch(self,profile_batch)
keras.src.callbacks.tensorboard.TensorBoard._log_embeddings(self,epoch)
keras.src.callbacks.tensorboard.TensorBoard._log_epoch_metrics(self,epoch,logs)
keras.src.callbacks.tensorboard.TensorBoard._log_weight_as_image(self,weight,weight_name,epoch)
keras.src.callbacks.tensorboard.TensorBoard._log_weights(self,epoch)
keras.src.callbacks.tensorboard.TensorBoard._pop_writer(self)
keras.src.callbacks.tensorboard.TensorBoard._push_writer(self,writer,step)
keras.src.callbacks.tensorboard.TensorBoard._start_profiler(self,logdir)
keras.src.callbacks.tensorboard.TensorBoard._start_trace(self)
keras.src.callbacks.tensorboard.TensorBoard._stop_profiler(self,save=True)
keras.src.callbacks.tensorboard.TensorBoard._stop_trace(self,batch=None)
keras.src.callbacks.tensorboard.TensorBoard._train_writer(self)
keras.src.callbacks.tensorboard.TensorBoard._val_writer(self)
keras.src.callbacks.tensorboard.TensorBoard._write_keras_model_summary(self)
keras.src.callbacks.tensorboard.TensorBoard._write_keras_model_train_graph(self)
keras.src.callbacks.tensorboard.TensorBoard.on_epoch_begin(self,epoch,logs=None)
keras.src.callbacks.tensorboard.TensorBoard.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.tensorboard.TensorBoard.on_test_begin(self,logs=None)
keras.src.callbacks.tensorboard.TensorBoard.on_test_end(self,logs=None)
keras.src.callbacks.tensorboard.TensorBoard.on_train_batch_begin(self,batch,logs=None)
keras.src.callbacks.tensorboard.TensorBoard.on_train_batch_end(self,batch,logs=None)
keras.src.callbacks.tensorboard.TensorBoard.on_train_begin(self,logs=None)
keras.src.callbacks.tensorboard.TensorBoard.on_train_end(self,logs=None)
keras.src.callbacks.tensorboard.TensorBoard.set_model(self,model)
keras.src.callbacks.tensorboard.TensorBoard.summary(self)
keras.src.callbacks.tensorboard.keras_model_summary(name,data,step=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/callbacks/callback.py----------------------------------------
keras.src.callbacks.Callback(self)
keras.src.callbacks.Callback.model(self)
keras.src.callbacks.Callback.on_batch_begin(self,batch,logs=None)
keras.src.callbacks.Callback.on_batch_end(self,batch,logs=None)
keras.src.callbacks.Callback.on_epoch_begin(self,epoch,logs=None)
keras.src.callbacks.Callback.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.Callback.on_predict_batch_begin(self,batch,logs=None)
keras.src.callbacks.Callback.on_predict_batch_end(self,batch,logs=None)
keras.src.callbacks.Callback.on_predict_begin(self,logs=None)
keras.src.callbacks.Callback.on_predict_end(self,logs=None)
keras.src.callbacks.Callback.on_test_batch_begin(self,batch,logs=None)
keras.src.callbacks.Callback.on_test_batch_end(self,batch,logs=None)
keras.src.callbacks.Callback.on_test_begin(self,logs=None)
keras.src.callbacks.Callback.on_test_end(self,logs=None)
keras.src.callbacks.Callback.on_train_batch_begin(self,batch,logs=None)
keras.src.callbacks.Callback.on_train_batch_end(self,batch,logs=None)
keras.src.callbacks.Callback.on_train_begin(self,logs=None)
keras.src.callbacks.Callback.on_train_end(self,logs=None)
keras.src.callbacks.Callback.set_model(self,model)
keras.src.callbacks.Callback.set_params(self,params)
keras.src.callbacks.callback.Callback(self)
keras.src.callbacks.callback.Callback.__init__(self)
keras.src.callbacks.callback.Callback.model(self)
keras.src.callbacks.callback.Callback.on_batch_begin(self,batch,logs=None)
keras.src.callbacks.callback.Callback.on_batch_end(self,batch,logs=None)
keras.src.callbacks.callback.Callback.on_epoch_begin(self,epoch,logs=None)
keras.src.callbacks.callback.Callback.on_epoch_end(self,epoch,logs=None)
keras.src.callbacks.callback.Callback.on_predict_batch_begin(self,batch,logs=None)
keras.src.callbacks.callback.Callback.on_predict_batch_end(self,batch,logs=None)
keras.src.callbacks.callback.Callback.on_predict_begin(self,logs=None)
keras.src.callbacks.callback.Callback.on_predict_end(self,logs=None)
keras.src.callbacks.callback.Callback.on_test_batch_begin(self,batch,logs=None)
keras.src.callbacks.callback.Callback.on_test_batch_end(self,batch,logs=None)
keras.src.callbacks.callback.Callback.on_test_begin(self,logs=None)
keras.src.callbacks.callback.Callback.on_test_end(self,logs=None)
keras.src.callbacks.callback.Callback.on_train_batch_begin(self,batch,logs=None)
keras.src.callbacks.callback.Callback.on_train_batch_end(self,batch,logs=None)
keras.src.callbacks.callback.Callback.on_train_begin(self,logs=None)
keras.src.callbacks.callback.Callback.on_train_end(self,logs=None)
keras.src.callbacks.callback.Callback.set_model(self,model)
keras.src.callbacks.callback.Callback.set_params(self,params)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/callbacks/terminate_on_nan.py----------------------------------------
A:keras.src.callbacks.terminate_on_nan.loss->logs.get('loss')
keras.src.callbacks.TerminateOnNaN(Callback)
keras.src.callbacks.TerminateOnNaN.on_batch_end(self,batch,logs=None)
keras.src.callbacks.terminate_on_nan.TerminateOnNaN(Callback)
keras.src.callbacks.terminate_on_nan.TerminateOnNaN.on_batch_end(self,batch,logs=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/losses/__init__.py----------------------------------------
A:keras.src.losses.__init__.obj->ALL_OBJECTS_DICT.get(identifier, None)
keras.src.losses.__init__.deserialize(name,custom_objects=None)
keras.src.losses.__init__.get(identifier)
keras.src.losses.__init__.serialize(loss)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/losses/loss.py----------------------------------------
A:keras.src.losses.loss.self.reduction->standardize_reduction(reduction)
A:keras.src.losses.loss.in_mask->getattr(y_pred, '_keras_mask', None)
A:keras.src.losses.loss.y_pred->keras.src.utils.tree.map_structure(lambda x: ops.convert_to_tensor(x, dtype=self.dtype), y_pred)
A:keras.src.losses.loss.y_true->keras.src.utils.tree.map_structure(lambda x: ops.convert_to_tensor(x, dtype=self.dtype), y_true)
A:keras.src.losses.loss.losses->self.call(y_true, y_pred)
A:keras.src.losses.loss.out_mask->getattr(losses, '_keras_mask', None)
A:keras.src.losses.loss.x1_rank->len(x1.shape)
A:keras.src.losses.loss.x2_rank->len(x2.shape)
A:keras.src.losses.loss.x2->keras.src.ops.squeeze(x2, axis=-1)
A:keras.src.losses.loss.x1->keras.src.ops.expand_dims(x1, axis=-1)
A:keras.src.losses.loss.loss->reduce_values(values, reduction)
A:keras.src.losses.loss.reduction->standardize_reduction(reduction)
A:keras.src.losses.loss.values->keras.src.ops.convert_to_tensor(values, dtype=dtype)
A:keras.src.losses.loss.sample_weight->keras.src.ops.cast(sample_weight, dtype=dtype)
A:keras.src.losses.loss.mask->keras.src.ops.cast(mask, dtype=dtype)
A:keras.src.losses.loss.(values, sample_weight)->squeeze_or_expand_to_same_rank(values, sample_weight)
A:keras.src.losses.loss.total->keras.src.ops.cast(ops.prod(ops.convert_to_tensor(ops.shape(mask), dtype='int32')), dtype)
A:keras.src.losses.loss.valid->keras.src.ops.sum(mask)
A:keras.src.losses.loss.(mask, sample_weight)->squeeze_or_expand_to_same_rank(mask, sample_weight)
keras.src.losses.Loss(self,name=None,reduction='sum_over_batch_size',dtype=None)
keras.src.losses.Loss.call(self,y_true,y_pred)
keras.src.losses.Loss.from_config(cls,config)
keras.src.losses.Loss.get_config(self)
keras.src.losses.loss.Loss(self,name=None,reduction='sum_over_batch_size',dtype=None)
keras.src.losses.loss.Loss.__init__(self,name=None,reduction='sum_over_batch_size',dtype=None)
keras.src.losses.loss.Loss.call(self,y_true,y_pred)
keras.src.losses.loss.Loss.from_config(cls,config)
keras.src.losses.loss.Loss.get_config(self)
keras.src.losses.loss.apply_mask(sample_weight,mask,dtype,reduction)
keras.src.losses.loss.reduce_values(values,reduction='sum_over_batch_size')
keras.src.losses.loss.reduce_weighted_values(values,sample_weight=None,mask=None,reduction='sum_over_batch_size',dtype=None)
keras.src.losses.loss.squeeze_or_expand_to_same_rank(x1,x2,expand_rank_1=True)
keras.src.losses.loss.standardize_reduction(reduction)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/losses/losses.py----------------------------------------
A:keras.src.losses.losses.(y_true, y_pred)->squeeze_or_expand_to_same_rank(y_true, y_pred)
A:keras.src.losses.losses.base_config->super().get_config()
A:keras.src.losses.losses.config->keras.src.saving.serialization_lib.deserialize_keras_object(config)
A:keras.src.losses.losses.are_zeros->keras.src.ops.equal(y_true, 0)
A:keras.src.losses.losses.are_ones->keras.src.ops.equal(y_true, 1)
A:keras.src.losses.losses.is_binary->keras.src.ops.all(ops.logical_or(are_zeros, are_ones))
A:keras.src.losses.losses.updated_y_true->keras.src.ops.cond(is_binary, _convert_binary_labels, _return_labels_unconverted)
A:keras.src.losses.losses.y_pred->keras.src.ops.sigmoid(y_pred)
A:keras.src.losses.losses.y_true->keras.src.ops.cast(y_true, y_pred.dtype)
A:keras.src.losses.losses.pos->keras.src.ops.sum(y_true * y_pred, axis=-1)
A:keras.src.losses.losses.neg->keras.src.ops.max((1.0 - y_true) * y_pred, axis=-1)
A:keras.src.losses.losses.zero->keras.src.ops.cast(0.0, y_pred.dtype)
A:keras.src.losses.losses.epsilon->keras.src.ops.convert_to_tensor(backend.epsilon())
A:keras.src.losses.losses.diff->keras.src.ops.abs((y_true - y_pred) / ops.maximum(ops.abs(y_true), epsilon))
A:keras.src.losses.losses.first_log->keras.src.ops.log(ops.maximum(y_pred, epsilon) + 1.0)
A:keras.src.losses.losses.second_log->keras.src.ops.log(ops.maximum(y_true, epsilon) + 1.0)
A:keras.src.losses.losses.delta->keras.src.ops.convert_to_tensor(delta)
A:keras.src.losses.losses.error->keras.src.ops.subtract(y_pred, y_true)
A:keras.src.losses.losses.abs_error->keras.src.ops.abs(error)
A:keras.src.losses.losses.half->keras.src.ops.convert_to_tensor(0.5, dtype=abs_error.dtype)
A:keras.src.losses.losses.log2->keras.src.ops.convert_to_tensor(ops.log(2.0), dtype=y_pred.dtype)
A:keras.src.losses.losses.num_classes->keras.src.ops.cast(ops.shape(y_true)[-1], y_pred.dtype)
A:keras.src.losses.losses.output->keras.src.ops.clip(output, backend.epsilon(), 1.0 - backend.epsilon())
A:keras.src.losses.losses.modulating_factor->keras.src.ops.power(1.0 - output, gamma)
A:keras.src.losses.losses.weighting_factor->keras.src.ops.multiply(modulating_factor, alpha)
A:keras.src.losses.losses.focal_cce->keras.src.ops.sum(focal_cce, axis=axis)
A:keras.src.losses.losses.valid_mask->keras.src.ops.reshape(valid_mask, res_shape)
A:keras.src.losses.losses.res->keras.src.ops.where(valid_mask, res, 0.0)
A:keras.src.losses.losses.bce->keras.src.ops.binary_crossentropy(target=y_true, output=y_pred, from_logits=False)
A:keras.src.losses.losses.focal_factor->keras.src.ops.power(1.0 - p_t, gamma)
A:keras.src.losses.losses.batch_length->keras.src.ops.cast(ops.shape(y_true)[0], dtype='int32')
A:keras.src.losses.losses.input_length->keras.src.ops.cast(ops.shape(y_pred)[1], dtype='int32')
A:keras.src.losses.losses.label_length->keras.src.ops.cast(ops.shape(y_true)[1], dtype='int32')
keras.src.losses.BinaryCrossentropy(self,from_logits=False,label_smoothing=0.0,axis=-1,reduction='sum_over_batch_size',name='binary_crossentropy')
keras.src.losses.BinaryCrossentropy.get_config(self)
keras.src.losses.CategoricalCrossentropy(self,from_logits=False,label_smoothing=0.0,axis=-1,reduction='sum_over_batch_size',name='categorical_crossentropy')
keras.src.losses.CategoricalCrossentropy.get_config(self)
keras.src.losses.CategoricalHinge(self,reduction='sum_over_batch_size',name='categorical_hinge')
keras.src.losses.CategoricalHinge.get_config(self)
keras.src.losses.CosineSimilarity(self,axis=-1,reduction='sum_over_batch_size',name='cosine_similarity')
keras.src.losses.CosineSimilarity.get_config(self)
keras.src.losses.Hinge(self,reduction='sum_over_batch_size',name='hinge')
keras.src.losses.Hinge.get_config(self)
keras.src.losses.Huber(self,delta=1.0,reduction='sum_over_batch_size',name='huber_loss')
keras.src.losses.Huber.get_config(self)
keras.src.losses.KLDivergence(self,reduction='sum_over_batch_size',name='kl_divergence')
keras.src.losses.KLDivergence.get_config(self)
keras.src.losses.LogCosh(self,reduction='sum_over_batch_size',name='log_cosh')
keras.src.losses.LogCosh.get_config(self)
keras.src.losses.LossFunctionWrapper(self,fn,reduction='sum_over_batch_size',name=None,**kwargs)
keras.src.losses.LossFunctionWrapper.call(self,y_true,y_pred)
keras.src.losses.LossFunctionWrapper.from_config(cls,config)
keras.src.losses.LossFunctionWrapper.get_config(self)
keras.src.losses.MeanAbsoluteError(self,reduction='sum_over_batch_size',name='mean_absolute_error')
keras.src.losses.MeanAbsoluteError.get_config(self)
keras.src.losses.MeanAbsolutePercentageError(self,reduction='sum_over_batch_size',name='mean_absolute_percentage_error')
keras.src.losses.MeanAbsolutePercentageError.get_config(self)
keras.src.losses.MeanSquaredError(self,reduction='sum_over_batch_size',name='mean_squared_error')
keras.src.losses.MeanSquaredError.get_config(self)
keras.src.losses.MeanSquaredLogarithmicError(self,reduction='sum_over_batch_size',name='mean_squared_logarithmic_error')
keras.src.losses.MeanSquaredLogarithmicError.get_config(self)
keras.src.losses.Poisson(self,reduction='sum_over_batch_size',name='poisson')
keras.src.losses.Poisson.get_config(self)
keras.src.losses.SparseCategoricalCrossentropy(self,from_logits=False,ignore_class=None,reduction='sum_over_batch_size',name='sparse_categorical_crossentropy')
keras.src.losses.SparseCategoricalCrossentropy.get_config(self)
keras.src.losses.SquaredHinge(self,reduction='sum_over_batch_size',name='squared_hinge')
keras.src.losses.SquaredHinge.get_config(self)
keras.src.losses.binary_crossentropy(y_true,y_pred,from_logits=False,label_smoothing=0.0,axis=-1)
keras.src.losses.categorical_crossentropy(y_true,y_pred,from_logits=False,label_smoothing=0.0,axis=-1)
keras.src.losses.categorical_hinge(y_true,y_pred)
keras.src.losses.cosine_similarity(y_true,y_pred,axis=-1)
keras.src.losses.ctc(y_true,y_pred)
keras.src.losses.hinge(y_true,y_pred)
keras.src.losses.huber(y_true,y_pred,delta=1.0)
keras.src.losses.kl_divergence(y_true,y_pred)
keras.src.losses.log_cosh(y_true,y_pred)
keras.src.losses.losses.BinaryCrossentropy(self,from_logits=False,label_smoothing=0.0,axis=-1,reduction='sum_over_batch_size',name='binary_crossentropy')
keras.src.losses.losses.BinaryCrossentropy.__init__(self,from_logits=False,label_smoothing=0.0,axis=-1,reduction='sum_over_batch_size',name='binary_crossentropy')
keras.src.losses.losses.BinaryCrossentropy.get_config(self)
keras.src.losses.losses.BinaryFocalCrossentropy(self,apply_class_balancing=False,alpha=0.25,gamma=2.0,from_logits=False,label_smoothing=0.0,axis=-1,reduction='sum_over_batch_size',name='binary_focal_crossentropy')
keras.src.losses.losses.BinaryFocalCrossentropy.__init__(self,apply_class_balancing=False,alpha=0.25,gamma=2.0,from_logits=False,label_smoothing=0.0,axis=-1,reduction='sum_over_batch_size',name='binary_focal_crossentropy')
keras.src.losses.losses.BinaryFocalCrossentropy.get_config(self)
keras.src.losses.losses.CTC(self,reduction='sum_over_batch_size',name='sparse_categorical_crossentropy')
keras.src.losses.losses.CTC.__init__(self,reduction='sum_over_batch_size',name='sparse_categorical_crossentropy')
keras.src.losses.losses.CTC.get_config(self)
keras.src.losses.losses.CategoricalCrossentropy(self,from_logits=False,label_smoothing=0.0,axis=-1,reduction='sum_over_batch_size',name='categorical_crossentropy')
keras.src.losses.losses.CategoricalCrossentropy.__init__(self,from_logits=False,label_smoothing=0.0,axis=-1,reduction='sum_over_batch_size',name='categorical_crossentropy')
keras.src.losses.losses.CategoricalCrossentropy.get_config(self)
keras.src.losses.losses.CategoricalFocalCrossentropy(self,alpha=0.25,gamma=2.0,from_logits=False,label_smoothing=0.0,axis=-1,reduction='sum_over_batch_size',name='categorical_focal_crossentropy')
keras.src.losses.losses.CategoricalFocalCrossentropy.__init__(self,alpha=0.25,gamma=2.0,from_logits=False,label_smoothing=0.0,axis=-1,reduction='sum_over_batch_size',name='categorical_focal_crossentropy')
keras.src.losses.losses.CategoricalFocalCrossentropy.get_config(self)
keras.src.losses.losses.CategoricalHinge(self,reduction='sum_over_batch_size',name='categorical_hinge')
keras.src.losses.losses.CategoricalHinge.__init__(self,reduction='sum_over_batch_size',name='categorical_hinge')
keras.src.losses.losses.CategoricalHinge.get_config(self)
keras.src.losses.losses.CosineSimilarity(self,axis=-1,reduction='sum_over_batch_size',name='cosine_similarity')
keras.src.losses.losses.CosineSimilarity.__init__(self,axis=-1,reduction='sum_over_batch_size',name='cosine_similarity')
keras.src.losses.losses.CosineSimilarity.get_config(self)
keras.src.losses.losses.Hinge(self,reduction='sum_over_batch_size',name='hinge')
keras.src.losses.losses.Hinge.__init__(self,reduction='sum_over_batch_size',name='hinge')
keras.src.losses.losses.Hinge.get_config(self)
keras.src.losses.losses.Huber(self,delta=1.0,reduction='sum_over_batch_size',name='huber_loss')
keras.src.losses.losses.Huber.__init__(self,delta=1.0,reduction='sum_over_batch_size',name='huber_loss')
keras.src.losses.losses.Huber.get_config(self)
keras.src.losses.losses.KLDivergence(self,reduction='sum_over_batch_size',name='kl_divergence')
keras.src.losses.losses.KLDivergence.__init__(self,reduction='sum_over_batch_size',name='kl_divergence')
keras.src.losses.losses.KLDivergence.get_config(self)
keras.src.losses.losses.LogCosh(self,reduction='sum_over_batch_size',name='log_cosh')
keras.src.losses.losses.LogCosh.__init__(self,reduction='sum_over_batch_size',name='log_cosh')
keras.src.losses.losses.LogCosh.get_config(self)
keras.src.losses.losses.LossFunctionWrapper(self,fn,reduction='sum_over_batch_size',name=None,**kwargs)
keras.src.losses.losses.LossFunctionWrapper.__init__(self,fn,reduction='sum_over_batch_size',name=None,**kwargs)
keras.src.losses.losses.LossFunctionWrapper.call(self,y_true,y_pred)
keras.src.losses.losses.LossFunctionWrapper.from_config(cls,config)
keras.src.losses.losses.LossFunctionWrapper.get_config(self)
keras.src.losses.losses.MeanAbsoluteError(self,reduction='sum_over_batch_size',name='mean_absolute_error')
keras.src.losses.losses.MeanAbsoluteError.__init__(self,reduction='sum_over_batch_size',name='mean_absolute_error')
keras.src.losses.losses.MeanAbsoluteError.get_config(self)
keras.src.losses.losses.MeanAbsolutePercentageError(self,reduction='sum_over_batch_size',name='mean_absolute_percentage_error')
keras.src.losses.losses.MeanAbsolutePercentageError.__init__(self,reduction='sum_over_batch_size',name='mean_absolute_percentage_error')
keras.src.losses.losses.MeanAbsolutePercentageError.get_config(self)
keras.src.losses.losses.MeanSquaredError(self,reduction='sum_over_batch_size',name='mean_squared_error')
keras.src.losses.losses.MeanSquaredError.__init__(self,reduction='sum_over_batch_size',name='mean_squared_error')
keras.src.losses.losses.MeanSquaredError.get_config(self)
keras.src.losses.losses.MeanSquaredLogarithmicError(self,reduction='sum_over_batch_size',name='mean_squared_logarithmic_error')
keras.src.losses.losses.MeanSquaredLogarithmicError.__init__(self,reduction='sum_over_batch_size',name='mean_squared_logarithmic_error')
keras.src.losses.losses.MeanSquaredLogarithmicError.get_config(self)
keras.src.losses.losses.Poisson(self,reduction='sum_over_batch_size',name='poisson')
keras.src.losses.losses.Poisson.__init__(self,reduction='sum_over_batch_size',name='poisson')
keras.src.losses.losses.Poisson.get_config(self)
keras.src.losses.losses.SparseCategoricalCrossentropy(self,from_logits=False,ignore_class=None,reduction='sum_over_batch_size',name='sparse_categorical_crossentropy')
keras.src.losses.losses.SparseCategoricalCrossentropy.__init__(self,from_logits=False,ignore_class=None,reduction='sum_over_batch_size',name='sparse_categorical_crossentropy')
keras.src.losses.losses.SparseCategoricalCrossentropy.get_config(self)
keras.src.losses.losses.SquaredHinge(self,reduction='sum_over_batch_size',name='squared_hinge')
keras.src.losses.losses.SquaredHinge.__init__(self,reduction='sum_over_batch_size',name='squared_hinge')
keras.src.losses.losses.SquaredHinge.get_config(self)
keras.src.losses.losses.binary_crossentropy(y_true,y_pred,from_logits=False,label_smoothing=0.0,axis=-1)
keras.src.losses.losses.binary_focal_crossentropy(y_true,y_pred,apply_class_balancing=False,alpha=0.25,gamma=2.0,from_logits=False,label_smoothing=0.0,axis=-1)
keras.src.losses.losses.categorical_crossentropy(y_true,y_pred,from_logits=False,label_smoothing=0.0,axis=-1)
keras.src.losses.losses.categorical_focal_crossentropy(y_true,y_pred,alpha=0.25,gamma=2.0,from_logits=False,label_smoothing=0.0,axis=-1)
keras.src.losses.losses.categorical_hinge(y_true,y_pred)
keras.src.losses.losses.convert_binary_labels_to_hinge(y_true)
keras.src.losses.losses.cosine_similarity(y_true,y_pred,axis=-1)
keras.src.losses.losses.ctc(y_true,y_pred)
keras.src.losses.losses.hinge(y_true,y_pred)
keras.src.losses.losses.huber(y_true,y_pred,delta=1.0)
keras.src.losses.losses.kl_divergence(y_true,y_pred)
keras.src.losses.losses.log_cosh(y_true,y_pred)
keras.src.losses.losses.mean_absolute_error(y_true,y_pred)
keras.src.losses.losses.mean_absolute_percentage_error(y_true,y_pred)
keras.src.losses.losses.mean_squared_error(y_true,y_pred)
keras.src.losses.losses.mean_squared_logarithmic_error(y_true,y_pred)
keras.src.losses.losses.poisson(y_true,y_pred)
keras.src.losses.losses.sparse_categorical_crossentropy(y_true,y_pred,from_logits=False,ignore_class=None,axis=-1)
keras.src.losses.losses.squared_hinge(y_true,y_pred)
keras.src.losses.mean_absolute_error(y_true,y_pred)
keras.src.losses.mean_absolute_percentage_error(y_true,y_pred)
keras.src.losses.mean_squared_error(y_true,y_pred)
keras.src.losses.mean_squared_logarithmic_error(y_true,y_pred)
keras.src.losses.poisson(y_true,y_pred)
keras.src.losses.sparse_categorical_crossentropy(y_true,y_pred,from_logits=False,ignore_class=None,axis=-1)
keras.src.losses.squared_hinge(y_true,y_pred)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/export/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/export/export_lib.py----------------------------------------
A:keras.src.export.export_lib.self._tf_trackable->keras.src.utils.module_utils.tensorflow.__internal__.tracking.AutoTrackable()
A:keras.src.export.export_lib.decorated_fn->keras.src.utils.module_utils.tensorflow.function(fn, input_signature=input_signature, autograph=False)
A:keras.src.export.export_lib.fn->self._convert_jax2tf_function(fn, input_signature)
A:keras.src.export.export_lib.variables->keras.src.utils.tree.flatten(tree.map_structure(tf.Variable, variables))
A:keras.src.export.export_lib.signatures[name]->self._get_concrete_fn(name)
A:keras.src.export.export_lib.signatures['serving_default']->self._get_concrete_fn(self._endpoint_names[0])
A:keras.src.export.export_lib.endpoints->'\n\n'.join((_print_signature(getattr(self._tf_trackable, name), name) for name in self._endpoint_names))
A:keras.src.export.export_lib.traces->getattr(self._tf_trackable, endpoint)._trackable_children('saved_model')
A:keras.src.export.export_lib.(tvs, ntvs)->_list_variables_used_by_fns(all_fns)
A:keras.src.export.export_lib.self._tf_trackable._all_variables->list(tvs + ntvs)
A:keras.src.export.export_lib.descendants->keras.src.utils.module_utils.tensorflow.train.TrackableView(root).descendants()
A:keras.src.export.export_lib.native_serialization->self._check_device_compatible()
A:keras.src.export.export_lib.spec_shape->str(spec_shape).replace('None', 'b')
A:keras.src.export.export_lib.export_archive->ExportArchive()
A:keras.src.export.export_lib.input_signature->keras.src.utils.tree.map_structure(_make_tensor_spec, model.inputs)
A:keras.src.export.export_lib.save_spec->_get_save_spec(model)
A:keras.src.export.export_lib.shapes_dict->getattr(model, '_build_shapes_dict', None)
A:keras.src.export.export_lib.key->key.rstrip('_shape').rstrip('_shape')
A:keras.src.export.export_lib.specs[key]->keras.src.utils.module_utils.tensorflow.TensorSpec(shape=value, dtype=model.input_dtype)
A:keras.src.export.export_lib.self._reloaded_obj->keras.src.utils.module_utils.tensorflow.saved_model.load(filepath)
A:keras.src.export.export_lib.self.call_endpoint_fn->getattr(self._reloaded_obj, call_endpoint)
A:keras.src.export.export_lib.self.call_training_endpoint_fn->getattr(self._reloaded_obj, call_training_endpoint)
A:keras.src.export.export_lib.base_config->super().get_config()
A:keras.src.export.export_lib.pprinted_signature->concrete_fn.pretty_printed_signature(verbose=True)
A:keras.src.export.export_lib.lines->concrete_fn.pretty_printed_signature(verbose=True).split('\n')
A:keras.src.export.export_lib.endpoint->'\n'.join(lines)
A:keras.src.export.export_lib.trainable_variables_ids->set()
A:keras.src.export.export_lib.non_trainable_variables_ids->set()
keras.src.export.ExportArchive(self)
keras.src.export.ExportArchive._check_device_compatible(self)
keras.src.export.ExportArchive._convert_jax2tf_function(self,fn,input_signature)
keras.src.export.ExportArchive._filter_and_track_resources(self)
keras.src.export.ExportArchive._get_concrete_fn(self,endpoint)
keras.src.export.ExportArchive._get_variables_used_by_endpoints(self)
keras.src.export.ExportArchive._spec_to_poly_shape(self,spec)
keras.src.export.ExportArchive.add_endpoint(self,name,fn,input_signature=None)
keras.src.export.ExportArchive.add_variable_collection(self,name,variables)
keras.src.export.ExportArchive.non_trainable_variables(self)
keras.src.export.ExportArchive.track(self,resource)
keras.src.export.ExportArchive.trainable_variables(self)
keras.src.export.ExportArchive.variables(self)
keras.src.export.ExportArchive.write_out(self,filepath,options=None)
keras.src.export.export_lib.ExportArchive(self)
keras.src.export.export_lib.ExportArchive.__init__(self)
keras.src.export.export_lib.ExportArchive._check_device_compatible(self)
keras.src.export.export_lib.ExportArchive._convert_jax2tf_function(self,fn,input_signature)
keras.src.export.export_lib.ExportArchive._filter_and_track_resources(self)
keras.src.export.export_lib.ExportArchive._get_concrete_fn(self,endpoint)
keras.src.export.export_lib.ExportArchive._get_variables_used_by_endpoints(self)
keras.src.export.export_lib.ExportArchive._spec_to_poly_shape(self,spec)
keras.src.export.export_lib.ExportArchive.add_endpoint(self,name,fn,input_signature=None)
keras.src.export.export_lib.ExportArchive.add_variable_collection(self,name,variables)
keras.src.export.export_lib.ExportArchive.non_trainable_variables(self)
keras.src.export.export_lib.ExportArchive.track(self,resource)
keras.src.export.export_lib.ExportArchive.trainable_variables(self)
keras.src.export.export_lib.ExportArchive.variables(self)
keras.src.export.export_lib.ExportArchive.write_out(self,filepath,options=None)
keras.src.export.export_lib.TFSMLayer(self,filepath,call_endpoint='serve',call_training_endpoint=None,trainable=True,name=None,dtype=None)
keras.src.export.export_lib.TFSMLayer.__init__(self,filepath,call_endpoint='serve',call_training_endpoint=None,trainable=True,name=None,dtype=None)
keras.src.export.export_lib.TFSMLayer._add_existing_weight(self,weight)
keras.src.export.export_lib.TFSMLayer.call(self,inputs,training=False,**kwargs)
keras.src.export.export_lib.TFSMLayer.get_config(self)
keras.src.export.export_lib._get_save_spec(model)
keras.src.export.export_lib._list_variables_used_by_fns(fns)
keras.src.export.export_lib._make_tensor_spec(x)
keras.src.export.export_lib._print_signature(fn,name)
keras.src.export.export_lib.export_model(model,filepath)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/constraints/__init__.py----------------------------------------
A:keras.src.constraints.__init__.obj->obj()
keras.src.constraints.__init__.deserialize(config,custom_objects=None)
keras.src.constraints.__init__.get(identifier)
keras.src.constraints.__init__.serialize(constraint)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/constraints/constraints.py----------------------------------------
A:keras.src.constraints.constraints.w->keras.src.backend.convert_to_tensor(w)
A:keras.src.constraints.constraints.norms->keras.src.ops.sqrt(ops.sum(ops.square(w), axis=self.axis, keepdims=True))
A:keras.src.constraints.constraints.desired->keras.src.ops.clip(norms, 0, self.max_value)
keras.src.constraints.Constraint(self,w)
keras.src.constraints.Constraint.from_config(cls,config)
keras.src.constraints.Constraint.get_config(self)
keras.src.constraints.MaxNorm(self,max_value=2,axis=0)
keras.src.constraints.MaxNorm.get_config(self)
keras.src.constraints.MinMaxNorm(self,min_value=0.0,max_value=1.0,rate=1.0,axis=0)
keras.src.constraints.MinMaxNorm.get_config(self)
keras.src.constraints.NonNeg(self,w)
keras.src.constraints.UnitNorm(self,axis=0)
keras.src.constraints.UnitNorm.get_config(self)
keras.src.constraints.constraints.Constraint(self,w)
keras.src.constraints.constraints.Constraint.__call__(self,w)
keras.src.constraints.constraints.Constraint.from_config(cls,config)
keras.src.constraints.constraints.Constraint.get_config(self)
keras.src.constraints.constraints.MaxNorm(self,max_value=2,axis=0)
keras.src.constraints.constraints.MaxNorm.__init__(self,max_value=2,axis=0)
keras.src.constraints.constraints.MaxNorm.get_config(self)
keras.src.constraints.constraints.MinMaxNorm(self,min_value=0.0,max_value=1.0,rate=1.0,axis=0)
keras.src.constraints.constraints.MinMaxNorm.__init__(self,min_value=0.0,max_value=1.0,rate=1.0,axis=0)
keras.src.constraints.constraints.MinMaxNorm.get_config(self)
keras.src.constraints.constraints.NonNeg(self,w)
keras.src.constraints.constraints.NonNeg.__call__(self,w)
keras.src.constraints.constraints.UnitNorm(self,axis=0)
keras.src.constraints.constraints.UnitNorm.__init__(self,axis=0)
keras.src.constraints.constraints.UnitNorm.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/distribution/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/distribution/distribution_lib.py----------------------------------------
A:keras.src.distribution.distribution_lib.num_processes->int(os.environ['KERAS_DISTRIBUTION_NUM_PROCESSES'])
A:keras.src.distribution.distribution_lib.process_id->int(os.environ['KERAS_DISTRIBUTION_PROCESS_ID'])
A:keras.src.distribution.distribution_lib.devices->numpy.array(list_devices())
A:keras.src.distribution.distribution_lib.self._devices->numpy.reshape(devices, shape)
A:keras.src.distribution.distribution_lib.self._axes->tuple(axes)
A:keras.src.distribution.distribution_lib.valid_axis_names->set(self._device_mesh.axis_names)
A:keras.src.distribution.distribution_lib.original_scope->distribution()
A:keras.src.distribution.distribution_lib.self._num_process->keras.src.backend.distribution_lib.num_processes()
A:keras.src.distribution.distribution_lib.self._process_id->keras.src.backend.distribution_lib.process_id()
A:keras.src.distribution.distribution_lib.device_mesh->DeviceMesh(shape=devices.shape, axis_names=[DEFAULT_BATCH_DIM_NAME], devices=devices)
A:keras.src.distribution.distribution_lib.batch_size->tensorflow.python.data.experimental.ops.distribute.compute_batch_size(dataset)
A:keras.src.distribution.distribution_lib.per_worker_batch_size->tensorflow.python.data.experimental.ops.distribute.batch_sizes_for_worker(global_batch_size=batch_size, num_workers=self._num_process, num_replicas_per_worker=1, worker_index=self._process_id)
A:keras.src.distribution.distribution_lib.distributed_dataset->tensorflow.python.data.experimental.ops.distribute._AutoShardDataset(distributed_dataset, num_workers=num_shards, index=self._process_id % num_shards, num_replicas=num_shards)
A:keras.src.distribution.distribution_lib.global_batch_size->tensorflow.python.data.experimental.ops.distribute.compute_batch_size(dataset)
A:keras.src.distribution.distribution_lib.mesh_batch_dim_index->self.device_mesh.axis_names.index(self._batch_dim_name)
A:keras.src.distribution.distribution_lib.self._layout_map->collections.OrderedDict()
A:keras.src.distribution.distribution_lib.layout->TensorLayout(axes=layout, device_mesh=None)
keras.src.distribution.distribution_lib.DataParallel(self,device_mesh=None,devices=None)
keras.src.distribution.distribution_lib.DataParallel.__init__(self,device_mesh=None,devices=None)
keras.src.distribution.distribution_lib.DataParallel._initialize_mesh_from_devices(self,devices)
keras.src.distribution.distribution_lib.DataParallel._initialize_mesh_from_list_devices(self)
keras.src.distribution.distribution_lib.DataParallel._initialize_with_device_mesh(self,device_mesh)
keras.src.distribution.distribution_lib.DataParallel.distribute_dataset(self,dataset)
keras.src.distribution.distribution_lib.DataParallel.get_data_layout(self,data_shape)
keras.src.distribution.distribution_lib.DataParallel.get_tensor_layout(self,path)
keras.src.distribution.distribution_lib.DataParallel.get_variable_layout(self,variable)
keras.src.distribution.distribution_lib.DeviceMesh(self,shape,axis_names,devices=None)
keras.src.distribution.distribution_lib.DeviceMesh.__init__(self,shape,axis_names,devices=None)
keras.src.distribution.distribution_lib.DeviceMesh.__repr__(self)
keras.src.distribution.distribution_lib.DeviceMesh.__str__(self)
keras.src.distribution.distribution_lib.DeviceMesh.axis_names(self)
keras.src.distribution.distribution_lib.DeviceMesh.devices(self)
keras.src.distribution.distribution_lib.DeviceMesh.shape(self)
keras.src.distribution.distribution_lib.Distribution(self,device_mesh)
keras.src.distribution.distribution_lib.Distribution.__init__(self,device_mesh)
keras.src.distribution.distribution_lib.Distribution.__repr__(self)
keras.src.distribution.distribution_lib.Distribution.__str__(self)
keras.src.distribution.distribution_lib.Distribution.device_mesh(self)
keras.src.distribution.distribution_lib.Distribution.distribute_dataset(self,dataset)
keras.src.distribution.distribution_lib.Distribution.get_data_layout(self,data_shape)
keras.src.distribution.distribution_lib.Distribution.get_tensor_layout(self,path)
keras.src.distribution.distribution_lib.Distribution.get_variable_layout(self,variable)
keras.src.distribution.distribution_lib.Distribution.scope(self)
keras.src.distribution.distribution_lib.LayoutMap(self,device_mesh=None)
keras.src.distribution.distribution_lib.LayoutMap.__delitem__(self,key)
keras.src.distribution.distribution_lib.LayoutMap.__getitem__(self,key)
keras.src.distribution.distribution_lib.LayoutMap.__init__(self,device_mesh=None)
keras.src.distribution.distribution_lib.LayoutMap.__iter__(self)
keras.src.distribution.distribution_lib.LayoutMap.__len__(self)
keras.src.distribution.distribution_lib.LayoutMap.__setitem__(self,key,layout)
keras.src.distribution.distribution_lib.LayoutMap._maybe_populate_device_mesh(self,layout)
keras.src.distribution.distribution_lib.LayoutMap.device_mesh(self)
keras.src.distribution.distribution_lib.ModelParallel(self,device_mesh,layout_map,batch_dim_name=None)
keras.src.distribution.distribution_lib.ModelParallel.__init__(self,device_mesh,layout_map,batch_dim_name=None)
keras.src.distribution.distribution_lib.ModelParallel.distribute_dataset(self,dataset)
keras.src.distribution.distribution_lib.ModelParallel.get_data_layout(self,data_shape)
keras.src.distribution.distribution_lib.ModelParallel.get_tensor_layout(self,path)
keras.src.distribution.distribution_lib.ModelParallel.get_variable_layout(self,variable)
keras.src.distribution.distribution_lib.TensorLayout(self,axes,device_mesh=None)
keras.src.distribution.distribution_lib.TensorLayout.__init__(self,axes,device_mesh=None)
keras.src.distribution.distribution_lib.TensorLayout.__repr__(self)
keras.src.distribution.distribution_lib.TensorLayout.__str__(self)
keras.src.distribution.distribution_lib.TensorLayout._validate_axes(self)
keras.src.distribution.distribution_lib.TensorLayout.axes(self)
keras.src.distribution.distribution_lib.TensorLayout.device_mesh(self)
keras.src.distribution.distribution_lib.TensorLayout.device_mesh(self,device_mesh)
keras.src.distribution.distribution_lib.distribute_tensor(tensor,layout)
keras.src.distribution.distribution_lib.distribution()
keras.src.distribution.distribution_lib.initialize(job_addresses=None,num_processes=None,process_id=None)
keras.src.distribution.distribution_lib.list_devices(device_type=None)
keras.src.distribution.distribution_lib.set_distribution(value)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/ops/math.py----------------------------------------
A:keras.src.ops.math.output_shape->reduce_shape(x.shape, self.axis, self.keepdims)
A:keras.src.ops.math.x->keras.src.backend.convert_to_tensor(x)
keras.src.ops.Erf(Operation)
keras.src.ops.Erf.call(self,x)
keras.src.ops.Erf.compute_output_spec(self,x)
keras.src.ops.Erfinv(Operation)
keras.src.ops.Erfinv.call(self,x)
keras.src.ops.Erfinv.compute_output_spec(self,x)
keras.src.ops.ExtractSequences(self,sequence_length,sequence_stride)
keras.src.ops.ExtractSequences.call(self,x)
keras.src.ops.ExtractSequences.compute_output_spec(self,x)
keras.src.ops.FFT(self,axis=-1)
keras.src.ops.FFT.call(self,x)
keras.src.ops.FFT.compute_output_spec(self,x)
keras.src.ops.FFT2(self)
keras.src.ops.FFT2.call(self,x)
keras.src.ops.FFT2.compute_output_spec(self,x)
keras.src.ops.IRFFT(self,fft_length=None)
keras.src.ops.IRFFT.call(self,x)
keras.src.ops.IRFFT.compute_output_spec(self,x)
keras.src.ops.ISTFT(self,sequence_length,sequence_stride,fft_length,length=None,window='hann',center=True)
keras.src.ops.ISTFT.call(self,x)
keras.src.ops.ISTFT.compute_output_spec(self,x)
keras.src.ops.InTopK(self,k)
keras.src.ops.InTopK.call(self,targets,predictions)
keras.src.ops.InTopK.compute_output_spec(self,targets,predictions)
keras.src.ops.Logsumexp(self,axis=None,keepdims=False)
keras.src.ops.Logsumexp.call(self,x)
keras.src.ops.Logsumexp.compute_output_spec(self,x)
keras.src.ops.RFFT(self,fft_length=None)
keras.src.ops.RFFT.call(self,x)
keras.src.ops.RFFT.compute_output_spec(self,x)
keras.src.ops.Rsqrt(Operation)
keras.src.ops.Rsqrt.call(self,x)
keras.src.ops.Rsqrt.compute_output_spec(self,x)
keras.src.ops.STFT(self,sequence_length,sequence_stride,fft_length,window='hann',center=True)
keras.src.ops.STFT.call(self,x)
keras.src.ops.STFT.compute_output_spec(self,x)
keras.src.ops.SegmentMax(self,num_segments=None,sorted=False)
keras.src.ops.SegmentMax.call(self,data,segment_ids)
keras.src.ops.SegmentMax.compute_output_spec(self,data,segment_ids)
keras.src.ops.SegmentSum(self,num_segments=None,sorted=False)
keras.src.ops.SegmentSum.call(self,data,segment_ids)
keras.src.ops.SegmentSum.compute_output_spec(self,data,segment_ids)
keras.src.ops.TopK(self,k,sorted=False)
keras.src.ops.TopK.call(self,x)
keras.src.ops.TopK.compute_output_spec(self,x)
keras.src.ops.erf(x)
keras.src.ops.erfinv(x)
keras.src.ops.extract_sequences(x,sequence_length,sequence_stride)
keras.src.ops.fft(x)
keras.src.ops.fft2(x)
keras.src.ops.in_top_k(targets,predictions,k)
keras.src.ops.irfft(x,fft_length=None)
keras.src.ops.istft(x,sequence_length,sequence_stride,fft_length,length=None,window='hann',center=True)
keras.src.ops.logsumexp(x,axis=None,keepdims=False)
keras.src.ops.math.Erf(Operation)
keras.src.ops.math.Erf.call(self,x)
keras.src.ops.math.Erf.compute_output_spec(self,x)
keras.src.ops.math.Erfinv(Operation)
keras.src.ops.math.Erfinv.call(self,x)
keras.src.ops.math.Erfinv.compute_output_spec(self,x)
keras.src.ops.math.ExtractSequences(self,sequence_length,sequence_stride)
keras.src.ops.math.ExtractSequences.__init__(self,sequence_length,sequence_stride)
keras.src.ops.math.ExtractSequences.call(self,x)
keras.src.ops.math.ExtractSequences.compute_output_spec(self,x)
keras.src.ops.math.FFT(self,axis=-1)
keras.src.ops.math.FFT.__init__(self,axis=-1)
keras.src.ops.math.FFT.call(self,x)
keras.src.ops.math.FFT.compute_output_spec(self,x)
keras.src.ops.math.FFT2(self)
keras.src.ops.math.FFT2.__init__(self)
keras.src.ops.math.FFT2.call(self,x)
keras.src.ops.math.FFT2.compute_output_spec(self,x)
keras.src.ops.math.IRFFT(self,fft_length=None)
keras.src.ops.math.IRFFT.__init__(self,fft_length=None)
keras.src.ops.math.IRFFT.call(self,x)
keras.src.ops.math.IRFFT.compute_output_spec(self,x)
keras.src.ops.math.ISTFT(self,sequence_length,sequence_stride,fft_length,length=None,window='hann',center=True)
keras.src.ops.math.ISTFT.__init__(self,sequence_length,sequence_stride,fft_length,length=None,window='hann',center=True)
keras.src.ops.math.ISTFT.call(self,x)
keras.src.ops.math.ISTFT.compute_output_spec(self,x)
keras.src.ops.math.InTopK(self,k)
keras.src.ops.math.InTopK.__init__(self,k)
keras.src.ops.math.InTopK.call(self,targets,predictions)
keras.src.ops.math.InTopK.compute_output_spec(self,targets,predictions)
keras.src.ops.math.Logsumexp(self,axis=None,keepdims=False)
keras.src.ops.math.Logsumexp.__init__(self,axis=None,keepdims=False)
keras.src.ops.math.Logsumexp.call(self,x)
keras.src.ops.math.Logsumexp.compute_output_spec(self,x)
keras.src.ops.math.RFFT(self,fft_length=None)
keras.src.ops.math.RFFT.__init__(self,fft_length=None)
keras.src.ops.math.RFFT.call(self,x)
keras.src.ops.math.RFFT.compute_output_spec(self,x)
keras.src.ops.math.Rsqrt(Operation)
keras.src.ops.math.Rsqrt.call(self,x)
keras.src.ops.math.Rsqrt.compute_output_spec(self,x)
keras.src.ops.math.STFT(self,sequence_length,sequence_stride,fft_length,window='hann',center=True)
keras.src.ops.math.STFT.__init__(self,sequence_length,sequence_stride,fft_length,window='hann',center=True)
keras.src.ops.math.STFT.call(self,x)
keras.src.ops.math.STFT.compute_output_spec(self,x)
keras.src.ops.math.SegmentMax(self,num_segments=None,sorted=False)
keras.src.ops.math.SegmentMax.__init__(self,num_segments=None,sorted=False)
keras.src.ops.math.SegmentMax.call(self,data,segment_ids)
keras.src.ops.math.SegmentMax.compute_output_spec(self,data,segment_ids)
keras.src.ops.math.SegmentSum(self,num_segments=None,sorted=False)
keras.src.ops.math.SegmentSum.__init__(self,num_segments=None,sorted=False)
keras.src.ops.math.SegmentSum.call(self,data,segment_ids)
keras.src.ops.math.SegmentSum.compute_output_spec(self,data,segment_ids)
keras.src.ops.math.TopK(self,k,sorted=False)
keras.src.ops.math.TopK.__init__(self,k,sorted=False)
keras.src.ops.math.TopK.call(self,x)
keras.src.ops.math.TopK.compute_output_spec(self,x)
keras.src.ops.math.erf(x)
keras.src.ops.math.erfinv(x)
keras.src.ops.math.extract_sequences(x,sequence_length,sequence_stride)
keras.src.ops.math.fft(x)
keras.src.ops.math.fft2(x)
keras.src.ops.math.in_top_k(targets,predictions,k)
keras.src.ops.math.irfft(x,fft_length=None)
keras.src.ops.math.istft(x,sequence_length,sequence_stride,fft_length,length=None,window='hann',center=True)
keras.src.ops.math.logsumexp(x,axis=None,keepdims=False)
keras.src.ops.math.rfft(x,fft_length=None)
keras.src.ops.math.rsqrt(x)
keras.src.ops.math.segment_max(data,segment_ids,num_segments=None,sorted=False)
keras.src.ops.math.segment_sum(data,segment_ids,num_segments=None,sorted=False)
keras.src.ops.math.stft(x,sequence_length,sequence_stride,fft_length,window='hann',center=True)
keras.src.ops.math.top_k(x,k,sorted=True)
keras.src.ops.rfft(x,fft_length=None)
keras.src.ops.rsqrt(x)
keras.src.ops.segment_max(data,segment_ids,num_segments=None,sorted=False)
keras.src.ops.segment_sum(data,segment_ids,num_segments=None,sorted=False)
keras.src.ops.stft(x,sequence_length,sequence_stride,fft_length,window='hann',center=True)
keras.src.ops.top_k(x,k,sorted=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/ops/image.py----------------------------------------
A:keras.src.ops.image.self.size->tuple(size)
A:keras.src.ops.image.out_shape->compute_conv_output_shape(image_shape, filters, kernel_size, strides=strides, padding=self.padding, data_format=self.data_format, dilation_rate=self.dilation_rate)
A:keras.src.ops.image.kernel->keras.src.backend.numpy.reshape(kernel, (patch_h, patch_w, channels_in, out_dim))
A:keras.src.ops.image.image->keras.src.backend.numpy.expand_dims(image, axis=0)
A:keras.src.ops.image.patches->keras.src.backend.numpy.squeeze(patches, axis=0)
A:keras.src.ops.image.images_shape->keras.src.ops.shape(images)
A:keras.src.ops.image.images->keras.src.backend.numpy.expand_dims(images, 0)
A:keras.src.ops.image.(batch, height, width, depth)->keras.src.ops.shape(images)
A:keras.src.ops.image.paddings->keras.src.backend.numpy.reshape(backend.numpy.stack([0, 0, top_padding, bottom_padding, left_padding, right_padding, 0, 0]), [4, 2])
A:keras.src.ops.image.padded->keras.src.backend.numpy.squeeze(padded, axis=[0])
A:keras.src.ops.image.cropped->keras.src.backend.numpy.squeeze(cropped, axis=[0])
keras.src.ops.image.AffineTransform(self,interpolation='bilinear',fill_mode='constant',fill_value=0,data_format='channels_last')
keras.src.ops.image.AffineTransform.__init__(self,interpolation='bilinear',fill_mode='constant',fill_value=0,data_format='channels_last')
keras.src.ops.image.AffineTransform.call(self,image,transform)
keras.src.ops.image.AffineTransform.compute_output_spec(self,image,transform)
keras.src.ops.image.CropImages(self,top_cropping,bottom_cropping,left_cropping,right_cropping,target_height,target_width)
keras.src.ops.image.CropImages.__init__(self,top_cropping,bottom_cropping,left_cropping,right_cropping,target_height,target_width)
keras.src.ops.image.CropImages.call(self,images)
keras.src.ops.image.CropImages.compute_output_spec(self,images)
keras.src.ops.image.ExtractPatches(self,size,strides=None,dilation_rate=1,padding='valid',data_format='channels_last')
keras.src.ops.image.ExtractPatches.__init__(self,size,strides=None,dilation_rate=1,padding='valid',data_format='channels_last')
keras.src.ops.image.ExtractPatches.call(self,image)
keras.src.ops.image.ExtractPatches.compute_output_spec(self,image)
keras.src.ops.image.MapCoordinates(self,order,fill_mode='constant',fill_value=0)
keras.src.ops.image.MapCoordinates.__init__(self,order,fill_mode='constant',fill_value=0)
keras.src.ops.image.MapCoordinates.call(self,image,coordinates)
keras.src.ops.image.MapCoordinates.compute_output_spec(self,image,coordinates)
keras.src.ops.image.PadImages(self,top_padding,bottom_padding,left_padding,right_padding,target_height,target_width)
keras.src.ops.image.PadImages.__init__(self,top_padding,bottom_padding,left_padding,right_padding,target_height,target_width)
keras.src.ops.image.PadImages.call(self,images)
keras.src.ops.image.PadImages.compute_output_spec(self,images)
keras.src.ops.image.Resize(self,size,interpolation='bilinear',antialias=False,data_format='channels_last')
keras.src.ops.image.Resize.__init__(self,size,interpolation='bilinear',antialias=False,data_format='channels_last')
keras.src.ops.image.Resize.call(self,image)
keras.src.ops.image.Resize.compute_output_spec(self,image)
keras.src.ops.image._crop_images(images,top_cropping,bottom_cropping,left_cropping,right_cropping,target_height,target_width)
keras.src.ops.image._extract_patches(image,size,strides=None,dilation_rate=1,padding='valid',data_format='channels_last')
keras.src.ops.image._pad_images(images,top_padding,bottom_padding,left_padding,right_padding,target_height,target_width)
keras.src.ops.image.affine_transform(image,transform,interpolation='bilinear',fill_mode='constant',fill_value=0,data_format='channels_last')
keras.src.ops.image.crop_images(images,top_cropping=None,left_cropping=None,target_height=None,target_width=None,bottom_cropping=None,right_cropping=None)
keras.src.ops.image.extract_patches(image,size,strides=None,dilation_rate=1,padding='valid',data_format='channels_last')
keras.src.ops.image.map_coordinates(input,coordinates,order,fill_mode='constant',fill_value=0)
keras.src.ops.image.pad_images(images,top_padding=None,left_padding=None,target_height=None,target_width=None,bottom_padding=None,right_padding=None)
keras.src.ops.image.resize(image,size,interpolation='bilinear',antialias=False,data_format='channels_last')


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/ops/operation.py----------------------------------------
A:keras.src.ops.operation.name->auto_name(self.__class__.__name__)
A:keras.src.ops.operation.self.dtype_policy->keras.src.dtype_policies.get(dtype)
A:keras.src.ops.operation.call_fn->keras.src.utils.traceback_utils.inject_argument_info_in_traceback(call_fn, object_name=f'{self.__class__.__name__}.call()')
A:keras.src.ops.operation.outputs->self.compute_output_spec(*args, **kwargs)
A:keras.src.ops.operation.new_e->RuntimeError(f"Could not automatically infer the output shape / dtype of '{self.name}' (of type {self.__class__.__name__}). Either the `{self.__class__.__name__}.call()` method is incorrect, or you need to implement the `{self.__class__.__name__}.compute_output_spec() / compute_output_shape()` method. Error encountered:\n\n{e}")
A:keras.src.ops.operation.instance->super(Operation, cls).__new__(cls)
A:keras.src.ops.operation.flat_arg_values->keras.src.utils.tree.flatten(kwargs)
A:keras.src.ops.operation.instance._auto_config->keras.src.saving.serialization_lib.SerializableDict(**kwargs)
A:keras.src.ops.operation.xtra_args->set(config.keys())
A:keras.src.ops.operation.argspec->inspect.getfullargspec(self.__init__)
A:keras.src.ops.operation.values->getattr(self._inbound_nodes[node_index], attr)
keras.Operation(self,dtype=None,name=None)
keras.Operation.__repr__(self)
keras.Operation._get_node_attribute_at_index(self,node_index,attr,attr_name)
keras.Operation._post_build(self)
keras.Operation._setattr_hook(self,name,value)
keras.Operation.call(self,*args,**kwargs)
keras.Operation.compute_output_spec(self,*args,**kwargs)
keras.Operation.from_config(cls,config)
keras.Operation.get_config(self)
keras.Operation.input(self)
keras.Operation.output(self)
keras.Operation.quantized_call(self,*args,**kwargs)
keras.Operation.symbolic_call(self,*args,**kwargs)
keras.src.ops.operation.Operation(self,dtype=None,name=None)
keras.src.ops.operation.Operation.__init__(self,dtype=None,name=None)
keras.src.ops.operation.Operation.__repr__(self)
keras.src.ops.operation.Operation._get_node_attribute_at_index(self,node_index,attr,attr_name)
keras.src.ops.operation.Operation._post_build(self)
keras.src.ops.operation.Operation._setattr_hook(self,name,value)
keras.src.ops.operation.Operation.call(self,*args,**kwargs)
keras.src.ops.operation.Operation.compute_output_spec(self,*args,**kwargs)
keras.src.ops.operation.Operation.from_config(cls,config)
keras.src.ops.operation.Operation.get_config(self)
keras.src.ops.operation.Operation.input(self)
keras.src.ops.operation.Operation.output(self)
keras.src.ops.operation.Operation.quantized_call(self,*args,**kwargs)
keras.src.ops.operation.Operation.symbolic_call(self,*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/ops/nn.py----------------------------------------
A:keras.src.ops.nn.skip_dims->set(axis)
A:keras.src.ops.nn.x->keras.src.backend.numpy.expand_dims(x, axis=0)
A:keras.src.ops.nn.self.padding->padding.lower().lower()
A:keras.src.ops.nn.output_shape->compute_conv_transpose_output_shape(inputs.shape, kernel_size, filters, self.strides, self.padding, self.output_padding, self.data_format, self.dilation_rate)
A:keras.src.ops.nn.data_format->standardize_data_format(data_format)
A:keras.src.ops.nn.padding->padding.lower().lower()
A:keras.src.ops.nn.x_shape->list(getattr(inputs, 'shape', []))
A:keras.src.ops.nn.num_classes->kwargs.pop('num_tokens')
A:keras.src.ops.nn.epsilon->keras.src.backend.epsilon()
A:keras.src.ops.nn.norm->keras.src.backend.linalg.norm(x, ord=order, axis=axis, keepdims=True)
A:keras.src.ops.nn.denom->keras.src.backend.numpy.maximum(norm, epsilon)
keras.src.ops.AveragePool(self,pool_size,strides=None,padding='valid',data_format=None)
keras.src.ops.AveragePool.call(self,inputs)
keras.src.ops.AveragePool.compute_output_spec(self,inputs)
keras.src.ops.BatchNorm(self,axis,epsilon,name=None)
keras.src.ops.BatchNorm._check_shape(self,name,shape,expected_shape)
keras.src.ops.BatchNorm.compute_output_spec(self,x,mean,variance,offset,scale)
keras.src.ops.BinaryCrossentropy(self,from_logits=False)
keras.src.ops.BinaryCrossentropy.call(self,target,output)
keras.src.ops.BinaryCrossentropy.compute_output_spec(self,target,output)
keras.src.ops.CategoricalCrossentropy(self,from_logits=False,axis=-1)
keras.src.ops.CategoricalCrossentropy.call(self,target,output)
keras.src.ops.CategoricalCrossentropy.compute_output_spec(self,target,output)
keras.src.ops.Conv(self,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.ops.Conv.call(self,inputs,kernel)
keras.src.ops.Conv.compute_output_spec(self,inputs,kernel)
keras.src.ops.ConvTranspose(self,strides,padding='valid',output_padding=None,data_format=None,dilation_rate=1)
keras.src.ops.ConvTranspose.call(self,inputs,kernel)
keras.src.ops.ConvTranspose.compute_output_spec(self,inputs,kernel)
keras.src.ops.CtcLoss(self,mask_index)
keras.src.ops.CtcLoss._check_shape_first_dim(self,name1,shape1,name2,shape2)
keras.src.ops.CtcLoss.call(self,target,output,target_length,output_length)
keras.src.ops.CtcLoss.compute_output_spec(self,target,output,target_length,output_length)
keras.src.ops.DepthwiseConv(self,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.ops.DepthwiseConv.call(self,inputs,kernel)
keras.src.ops.DepthwiseConv.compute_output_spec(self,inputs,kernel)
keras.src.ops.Elu(self,alpha=1.0)
keras.src.ops.Elu.call(self,x)
keras.src.ops.Elu.compute_output_spec(self,x)
keras.src.ops.Gelu(self,approximate=True)
keras.src.ops.Gelu.call(self,x)
keras.src.ops.Gelu.compute_output_spec(self,x)
keras.src.ops.HardSigmoid(Operation)
keras.src.ops.HardSigmoid.call(self,x)
keras.src.ops.HardSigmoid.compute_output_spec(self,x)
keras.src.ops.HardSilu(Operation)
keras.src.ops.HardSilu.call(self,x)
keras.src.ops.HardSilu.compute_output_spec(self,x)
keras.src.ops.LeakyRelu(self,negative_slope=0.2)
keras.src.ops.LeakyRelu.call(self,x)
keras.src.ops.LeakyRelu.compute_output_spec(self,x)
keras.src.ops.LogSigmoid(Operation)
keras.src.ops.LogSigmoid.call(self,x)
keras.src.ops.LogSigmoid.compute_output_spec(self,x)
keras.src.ops.LogSoftmax(self,axis=-1)
keras.src.ops.LogSoftmax.call(self,x)
keras.src.ops.LogSoftmax.compute_output_spec(self,x)
keras.src.ops.MaxPool(self,pool_size,strides=None,padding='valid',data_format=None)
keras.src.ops.MaxPool.call(self,inputs)
keras.src.ops.MaxPool.compute_output_spec(self,inputs)
keras.src.ops.Moments(self,axes,keepdims=False,synchronized=False,name=None)
keras.src.ops.Moments.call(self,x)
keras.src.ops.Moments.compute_output_spec(self,x)
keras.src.ops.MultiHot(self,num_classes=None,axis=-1,dtype=None,name=None,**kwargs)
keras.src.ops.MultiHot.call(self,inputs)
keras.src.ops.MultiHot.compute_output_spec(self,inputs)
keras.src.ops.Normalize(self,axis=-1,order=2)
keras.src.ops.Normalize.call(self,x)
keras.src.ops.Normalize.compute_output_spec(self,x)
keras.src.ops.OneHot(self,num_classes,axis=-1,dtype=None)
keras.src.ops.OneHot.call(self,x)
keras.src.ops.OneHot.compute_output_spec(self,x)
keras.src.ops.Relu(Operation)
keras.src.ops.Relu.call(self,x)
keras.src.ops.Relu.compute_output_spec(self,x)
keras.src.ops.Relu6(Operation)
keras.src.ops.Relu6.call(self,x)
keras.src.ops.Relu6.compute_output_spec(self,x)
keras.src.ops.Selu(Operation)
keras.src.ops.Selu.call(self,x)
keras.src.ops.Selu.compute_output_spec(self,x)
keras.src.ops.SeparableConv(self,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.ops.SeparableConv.call(self,inputs,depthwise_kernel,pointwise_kernel)
keras.src.ops.SeparableConv.compute_output_spec(self,inputs,depthwise_kernel,pointwise_kernel)
keras.src.ops.Sigmoid(Operation)
keras.src.ops.Sigmoid.call(self,x)
keras.src.ops.Sigmoid.compute_output_spec(self,x)
keras.src.ops.Silu(Operation)
keras.src.ops.Silu.call(self,x)
keras.src.ops.Silu.compute_output_spec(self,x)
keras.src.ops.Softmax(self,axis=-1)
keras.src.ops.Softmax.call(self,x)
keras.src.ops.Softmax.compute_output_spec(self,x)
keras.src.ops.Softplus(Operation)
keras.src.ops.Softplus.call(self,x)
keras.src.ops.Softplus.compute_output_spec(self,x)
keras.src.ops.Softsign(Operation)
keras.src.ops.Softsign.call(self,x)
keras.src.ops.Softsign.compute_output_spec(self,x)
keras.src.ops.SparseCategoricalCrossentropy(self,from_logits=False,axis=-1)
keras.src.ops.SparseCategoricalCrossentropy.call(self,target,output)
keras.src.ops.SparseCategoricalCrossentropy.compute_output_spec(self,target,output)
keras.src.ops._normalize(x,axis=-1,order=2)
keras.src.ops.average_pool(inputs,pool_size,strides=None,padding='valid',data_format=None)
keras.src.ops.batch_normalization(x,mean,variance,axis,offset=None,scale=None,epsilon=0.001)
keras.src.ops.binary_crossentropy(target,output,from_logits=False)
keras.src.ops.categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.src.ops.conv(inputs,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.ops.conv_transpose(inputs,kernel,strides,padding='valid',output_padding=None,data_format=None,dilation_rate=1)
keras.src.ops.ctc_loss(target,output,target_length,output_length,mask_index=0)
keras.src.ops.depthwise_conv(inputs,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.ops.elu(x,alpha=1.0)
keras.src.ops.gelu(x,approximate=True)
keras.src.ops.hard_sigmoid(x)
keras.src.ops.hard_silu(x)
keras.src.ops.leaky_relu(x,negative_slope=0.2)
keras.src.ops.log_sigmoid(x)
keras.src.ops.log_softmax(x,axis=-1)
keras.src.ops.max_pool(inputs,pool_size,strides=None,padding='valid',data_format=None)
keras.src.ops.moments(x,axes,keepdims=False,synchronized=False)
keras.src.ops.multi_hot(inputs,num_classes=None,axis=-1,dtype=None,**kwargs)
keras.src.ops.nn.AveragePool(self,pool_size,strides=None,padding='valid',data_format=None)
keras.src.ops.nn.AveragePool.__init__(self,pool_size,strides=None,padding='valid',data_format=None)
keras.src.ops.nn.AveragePool.call(self,inputs)
keras.src.ops.nn.AveragePool.compute_output_spec(self,inputs)
keras.src.ops.nn.BatchNorm(self,axis,epsilon,name=None)
keras.src.ops.nn.BatchNorm.__init__(self,axis,epsilon,name=None)
keras.src.ops.nn.BatchNorm._check_shape(self,name,shape,expected_shape)
keras.src.ops.nn.BatchNorm.compute_output_spec(self,x,mean,variance,offset,scale)
keras.src.ops.nn.BinaryCrossentropy(self,from_logits=False)
keras.src.ops.nn.BinaryCrossentropy.__init__(self,from_logits=False)
keras.src.ops.nn.BinaryCrossentropy.call(self,target,output)
keras.src.ops.nn.BinaryCrossentropy.compute_output_spec(self,target,output)
keras.src.ops.nn.CategoricalCrossentropy(self,from_logits=False,axis=-1)
keras.src.ops.nn.CategoricalCrossentropy.__init__(self,from_logits=False,axis=-1)
keras.src.ops.nn.CategoricalCrossentropy.call(self,target,output)
keras.src.ops.nn.CategoricalCrossentropy.compute_output_spec(self,target,output)
keras.src.ops.nn.Conv(self,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.ops.nn.Conv.__init__(self,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.ops.nn.Conv.call(self,inputs,kernel)
keras.src.ops.nn.Conv.compute_output_spec(self,inputs,kernel)
keras.src.ops.nn.ConvTranspose(self,strides,padding='valid',output_padding=None,data_format=None,dilation_rate=1)
keras.src.ops.nn.ConvTranspose.__init__(self,strides,padding='valid',output_padding=None,data_format=None,dilation_rate=1)
keras.src.ops.nn.ConvTranspose.call(self,inputs,kernel)
keras.src.ops.nn.ConvTranspose.compute_output_spec(self,inputs,kernel)
keras.src.ops.nn.CtcLoss(self,mask_index)
keras.src.ops.nn.CtcLoss.__init__(self,mask_index)
keras.src.ops.nn.CtcLoss._check_shape_first_dim(self,name1,shape1,name2,shape2)
keras.src.ops.nn.CtcLoss.call(self,target,output,target_length,output_length)
keras.src.ops.nn.CtcLoss.compute_output_spec(self,target,output,target_length,output_length)
keras.src.ops.nn.DepthwiseConv(self,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.ops.nn.DepthwiseConv.__init__(self,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.ops.nn.DepthwiseConv.call(self,inputs,kernel)
keras.src.ops.nn.DepthwiseConv.compute_output_spec(self,inputs,kernel)
keras.src.ops.nn.Elu(self,alpha=1.0)
keras.src.ops.nn.Elu.__init__(self,alpha=1.0)
keras.src.ops.nn.Elu.call(self,x)
keras.src.ops.nn.Elu.compute_output_spec(self,x)
keras.src.ops.nn.Gelu(self,approximate=True)
keras.src.ops.nn.Gelu.__init__(self,approximate=True)
keras.src.ops.nn.Gelu.call(self,x)
keras.src.ops.nn.Gelu.compute_output_spec(self,x)
keras.src.ops.nn.HardSigmoid(Operation)
keras.src.ops.nn.HardSigmoid.call(self,x)
keras.src.ops.nn.HardSigmoid.compute_output_spec(self,x)
keras.src.ops.nn.HardSilu(Operation)
keras.src.ops.nn.HardSilu.call(self,x)
keras.src.ops.nn.HardSilu.compute_output_spec(self,x)
keras.src.ops.nn.LeakyRelu(self,negative_slope=0.2)
keras.src.ops.nn.LeakyRelu.__init__(self,negative_slope=0.2)
keras.src.ops.nn.LeakyRelu.call(self,x)
keras.src.ops.nn.LeakyRelu.compute_output_spec(self,x)
keras.src.ops.nn.LogSigmoid(Operation)
keras.src.ops.nn.LogSigmoid.call(self,x)
keras.src.ops.nn.LogSigmoid.compute_output_spec(self,x)
keras.src.ops.nn.LogSoftmax(self,axis=-1)
keras.src.ops.nn.LogSoftmax.__init__(self,axis=-1)
keras.src.ops.nn.LogSoftmax.call(self,x)
keras.src.ops.nn.LogSoftmax.compute_output_spec(self,x)
keras.src.ops.nn.MaxPool(self,pool_size,strides=None,padding='valid',data_format=None)
keras.src.ops.nn.MaxPool.__init__(self,pool_size,strides=None,padding='valid',data_format=None)
keras.src.ops.nn.MaxPool.call(self,inputs)
keras.src.ops.nn.MaxPool.compute_output_spec(self,inputs)
keras.src.ops.nn.Moments(self,axes,keepdims=False,synchronized=False,name=None)
keras.src.ops.nn.Moments.__init__(self,axes,keepdims=False,synchronized=False,name=None)
keras.src.ops.nn.Moments.call(self,x)
keras.src.ops.nn.Moments.compute_output_spec(self,x)
keras.src.ops.nn.MultiHot(self,num_classes=None,axis=-1,dtype=None,name=None,**kwargs)
keras.src.ops.nn.MultiHot.__init__(self,num_classes=None,axis=-1,dtype=None,name=None,**kwargs)
keras.src.ops.nn.MultiHot.call(self,inputs)
keras.src.ops.nn.MultiHot.compute_output_spec(self,inputs)
keras.src.ops.nn.Normalize(self,axis=-1,order=2)
keras.src.ops.nn.Normalize.__init__(self,axis=-1,order=2)
keras.src.ops.nn.Normalize.call(self,x)
keras.src.ops.nn.Normalize.compute_output_spec(self,x)
keras.src.ops.nn.OneHot(self,num_classes,axis=-1,dtype=None)
keras.src.ops.nn.OneHot.__init__(self,num_classes,axis=-1,dtype=None)
keras.src.ops.nn.OneHot.call(self,x)
keras.src.ops.nn.OneHot.compute_output_spec(self,x)
keras.src.ops.nn.Relu(Operation)
keras.src.ops.nn.Relu.call(self,x)
keras.src.ops.nn.Relu.compute_output_spec(self,x)
keras.src.ops.nn.Relu6(Operation)
keras.src.ops.nn.Relu6.call(self,x)
keras.src.ops.nn.Relu6.compute_output_spec(self,x)
keras.src.ops.nn.Selu(Operation)
keras.src.ops.nn.Selu.call(self,x)
keras.src.ops.nn.Selu.compute_output_spec(self,x)
keras.src.ops.nn.SeparableConv(self,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.ops.nn.SeparableConv.__init__(self,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.ops.nn.SeparableConv.call(self,inputs,depthwise_kernel,pointwise_kernel)
keras.src.ops.nn.SeparableConv.compute_output_spec(self,inputs,depthwise_kernel,pointwise_kernel)
keras.src.ops.nn.Sigmoid(Operation)
keras.src.ops.nn.Sigmoid.call(self,x)
keras.src.ops.nn.Sigmoid.compute_output_spec(self,x)
keras.src.ops.nn.Silu(Operation)
keras.src.ops.nn.Silu.call(self,x)
keras.src.ops.nn.Silu.compute_output_spec(self,x)
keras.src.ops.nn.Softmax(self,axis=-1)
keras.src.ops.nn.Softmax.__init__(self,axis=-1)
keras.src.ops.nn.Softmax.call(self,x)
keras.src.ops.nn.Softmax.compute_output_spec(self,x)
keras.src.ops.nn.Softplus(Operation)
keras.src.ops.nn.Softplus.call(self,x)
keras.src.ops.nn.Softplus.compute_output_spec(self,x)
keras.src.ops.nn.Softsign(Operation)
keras.src.ops.nn.Softsign.call(self,x)
keras.src.ops.nn.Softsign.compute_output_spec(self,x)
keras.src.ops.nn.SparseCategoricalCrossentropy(self,from_logits=False,axis=-1)
keras.src.ops.nn.SparseCategoricalCrossentropy.__init__(self,from_logits=False,axis=-1)
keras.src.ops.nn.SparseCategoricalCrossentropy.call(self,target,output)
keras.src.ops.nn.SparseCategoricalCrossentropy.compute_output_spec(self,target,output)
keras.src.ops.nn._normalize(x,axis=-1,order=2)
keras.src.ops.nn.average_pool(inputs,pool_size,strides=None,padding='valid',data_format=None)
keras.src.ops.nn.batch_normalization(x,mean,variance,axis,offset=None,scale=None,epsilon=0.001)
keras.src.ops.nn.binary_crossentropy(target,output,from_logits=False)
keras.src.ops.nn.categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.src.ops.nn.conv(inputs,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.ops.nn.conv_transpose(inputs,kernel,strides,padding='valid',output_padding=None,data_format=None,dilation_rate=1)
keras.src.ops.nn.ctc_loss(target,output,target_length,output_length,mask_index=0)
keras.src.ops.nn.depthwise_conv(inputs,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.ops.nn.elu(x,alpha=1.0)
keras.src.ops.nn.gelu(x,approximate=True)
keras.src.ops.nn.hard_sigmoid(x)
keras.src.ops.nn.hard_silu(x)
keras.src.ops.nn.leaky_relu(x,negative_slope=0.2)
keras.src.ops.nn.log_sigmoid(x)
keras.src.ops.nn.log_softmax(x,axis=-1)
keras.src.ops.nn.max_pool(inputs,pool_size,strides=None,padding='valid',data_format=None)
keras.src.ops.nn.moments(x,axes,keepdims=False,synchronized=False)
keras.src.ops.nn.multi_hot(inputs,num_classes=None,axis=-1,dtype=None,**kwargs)
keras.src.ops.nn.normalize(x,axis=-1,order=2)
keras.src.ops.nn.one_hot(x,num_classes,axis=-1,dtype=None)
keras.src.ops.nn.relu(x)
keras.src.ops.nn.relu6(x)
keras.src.ops.nn.selu(x)
keras.src.ops.nn.separable_conv(inputs,depthwise_kernel,pointwise_kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.ops.nn.sigmoid(x)
keras.src.ops.nn.silu(x)
keras.src.ops.nn.softmax(x,axis=-1)
keras.src.ops.nn.softplus(x)
keras.src.ops.nn.softsign(x)
keras.src.ops.nn.sparse_categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.src.ops.normalize(x,axis=-1,order=2)
keras.src.ops.one_hot(x,num_classes,axis=-1,dtype=None)
keras.src.ops.relu(x)
keras.src.ops.relu6(x)
keras.src.ops.selu(x)
keras.src.ops.separable_conv(inputs,depthwise_kernel,pointwise_kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.src.ops.sigmoid(x)
keras.src.ops.silu(x)
keras.src.ops.softmax(x,axis=-1)
keras.src.ops.softplus(x)
keras.src.ops.softsign(x)
keras.src.ops.sparse_categorical_crossentropy(target,output,from_logits=False,axis=-1)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/ops/core.py----------------------------------------
A:keras.src.ops.core.self.dtype->keras.src.backend.standardize_dtype(dtype)
A:keras.src.ops.core.dtype->keras.src.backend.standardize_dtype(dtype)
A:keras.src.ops.core.call_fn->keras.src.utils.traceback_utils.inject_argument_info_in_traceback(call_fn, object_name=f'{self.__class__.__name__}.call()')
A:keras.src.ops.core.true_fn_spec->keras.src.backend.compute_output_spec(true_fn)
A:keras.src.ops.core.false_fn_spec->keras.src.backend.compute_output_spec(false_fn)
A:keras.src.ops.core.same->keras.src.utils.tree.map_structure(check_leaf, true_fn_spec, false_fn_spec)
keras.src.ops.Cast(self,dtype)
keras.src.ops.Cast.call(self,x)
keras.src.ops.Cast.compute_output_spec(self,x)
keras.src.ops.Cond(self,*args,**kwargs)
keras.src.ops.Cond._check_output_spec(self,true_fn_spec,false_fn_spec)
keras.src.ops.Cond.call(self,pred,true_fn,false_fn)
keras.src.ops.Cond.compute_output_spec(self,pred,true_fn,false_fn)
keras.src.ops.ForiLoop(self,lower,upper,body_fun)
keras.src.ops.ForiLoop.call(self,init_val)
keras.src.ops.ForiLoop.compute_output_spec(self,init_val)
keras.src.ops.Scatter(Operation)
keras.src.ops.Scatter.call(self,indices,values,shape)
keras.src.ops.Scatter.compute_output_spec(self,indices,values,shape)
keras.src.ops.ScatterUpdate(Operation)
keras.src.ops.ScatterUpdate.call(self,inputs,indices,updates)
keras.src.ops.ScatterUpdate.compute_output_spec(self,inputs,indices,updates)
keras.src.ops.Slice(Operation)
keras.src.ops.Slice.call(self,inputs,start_indices,shape)
keras.src.ops.Slice.compute_output_spec(self,inputs,start_indices,shape)
keras.src.ops.SliceUpdate(Operation)
keras.src.ops.SliceUpdate.call(self,inputs,start_indices,updates)
keras.src.ops.SliceUpdate.compute_output_spec(self,inputs,start_indices,updates)
keras.src.ops.StopGradient(self)
keras.src.ops.StopGradient.call(self,variable)
keras.src.ops.StopGradient.compute_output_spec(self,variable)
keras.src.ops.Unstack(self,num=None,axis=0)
keras.src.ops.Unstack.call(self,x)
keras.src.ops.Unstack.compute_output_spec(self,x)
keras.src.ops.WhileLoop(self,cond,body,maximum_iterations)
keras.src.ops.WhileLoop.call(self,loop_vars)
keras.src.ops.WhileLoop.compute_output_spec(self,loop_vars)
keras.src.ops.cast(x,dtype)
keras.src.ops.cond(pred,true_fn,false_fn)
keras.src.ops.convert_to_numpy(x)
keras.src.ops.convert_to_tensor(x,dtype=None,sparse=None)
keras.src.ops.core.Cast(self,dtype)
keras.src.ops.core.Cast.__init__(self,dtype)
keras.src.ops.core.Cast.call(self,x)
keras.src.ops.core.Cast.compute_output_spec(self,x)
keras.src.ops.core.Cond(self,*args,**kwargs)
keras.src.ops.core.Cond.__call__(self,*args,**kwargs)
keras.src.ops.core.Cond._check_output_spec(self,true_fn_spec,false_fn_spec)
keras.src.ops.core.Cond.call(self,pred,true_fn,false_fn)
keras.src.ops.core.Cond.compute_output_spec(self,pred,true_fn,false_fn)
keras.src.ops.core.ForiLoop(self,lower,upper,body_fun)
keras.src.ops.core.ForiLoop.__init__(self,lower,upper,body_fun)
keras.src.ops.core.ForiLoop.call(self,init_val)
keras.src.ops.core.ForiLoop.compute_output_spec(self,init_val)
keras.src.ops.core.Scatter(Operation)
keras.src.ops.core.Scatter.call(self,indices,values,shape)
keras.src.ops.core.Scatter.compute_output_spec(self,indices,values,shape)
keras.src.ops.core.ScatterUpdate(Operation)
keras.src.ops.core.ScatterUpdate.call(self,inputs,indices,updates)
keras.src.ops.core.ScatterUpdate.compute_output_spec(self,inputs,indices,updates)
keras.src.ops.core.Slice(Operation)
keras.src.ops.core.Slice.call(self,inputs,start_indices,shape)
keras.src.ops.core.Slice.compute_output_spec(self,inputs,start_indices,shape)
keras.src.ops.core.SliceUpdate(Operation)
keras.src.ops.core.SliceUpdate.call(self,inputs,start_indices,updates)
keras.src.ops.core.SliceUpdate.compute_output_spec(self,inputs,start_indices,updates)
keras.src.ops.core.StopGradient(self)
keras.src.ops.core.StopGradient.__init__(self)
keras.src.ops.core.StopGradient.call(self,variable)
keras.src.ops.core.StopGradient.compute_output_spec(self,variable)
keras.src.ops.core.Unstack(self,num=None,axis=0)
keras.src.ops.core.Unstack.__init__(self,num=None,axis=0)
keras.src.ops.core.Unstack.call(self,x)
keras.src.ops.core.Unstack.compute_output_spec(self,x)
keras.src.ops.core.WhileLoop(self,cond,body,maximum_iterations)
keras.src.ops.core.WhileLoop.__init__(self,cond,body,maximum_iterations)
keras.src.ops.core.WhileLoop.call(self,loop_vars)
keras.src.ops.core.WhileLoop.compute_output_spec(self,loop_vars)
keras.src.ops.core.cast(x,dtype)
keras.src.ops.core.cond(pred,true_fn,false_fn)
keras.src.ops.core.convert_to_numpy(x)
keras.src.ops.core.convert_to_tensor(x,dtype=None,sparse=None)
keras.src.ops.core.custom_gradient(f)
keras.src.ops.core.fori_loop(lower,upper,body_fun,init_val)
keras.src.ops.core.is_tensor(x)
keras.src.ops.core.scatter(indices,values,shape)
keras.src.ops.core.scatter_update(inputs,indices,updates)
keras.src.ops.core.shape(x)
keras.src.ops.core.slice(inputs,start_indices,shape)
keras.src.ops.core.slice_update(inputs,start_indices,updates)
keras.src.ops.core.stop_gradient(variable)
keras.src.ops.core.unstack(x,num=None,axis=0)
keras.src.ops.core.vectorized_map(function,elements)
keras.src.ops.core.while_loop(cond,body,loop_vars,maximum_iterations=None)
keras.src.ops.custom_gradient(f)
keras.src.ops.fori_loop(lower,upper,body_fun,init_val)
keras.src.ops.is_tensor(x)
keras.src.ops.scatter(indices,values,shape)
keras.src.ops.scatter_update(inputs,indices,updates)
keras.src.ops.shape(x)
keras.src.ops.slice(inputs,start_indices,shape)
keras.src.ops.slice_update(inputs,start_indices,updates)
keras.src.ops.stop_gradient(variable)
keras.src.ops.unstack(x,num=None,axis=0)
keras.src.ops.vectorized_map(function,elements)
keras.src.ops.while_loop(cond,body,loop_vars,maximum_iterations=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/ops/numpy.py----------------------------------------
A:keras.src.ops.numpy.shape1->list(shape1)
A:keras.src.ops.numpy.shape2->list(shape2)
A:keras.src.ops.numpy.sparse->getattr(x, 'sparse', False)
A:keras.src.ops.numpy.x1_shape->getattr(x1, 'shape', [])
A:keras.src.ops.numpy.x2_shape->getattr(x2, 'shape', [])
A:keras.src.ops.numpy.output_shape->broadcast_shapes(x1_shape, x2_shape)
A:keras.src.ops.numpy.output_dtype->keras.src.backend.common.dtypes.result_type(getattr(x1, 'dtype', type(x1)), getattr(x2, 'dtype', type(x2)))
A:keras.src.ops.numpy.x1_sparse->getattr(x1, 'sparse', False)
A:keras.src.ops.numpy.x2_sparse->getattr(x2, 'sparse', False)
A:keras.src.ops.numpy.dtype->keras.src.backend.common.dtypes.result_type(getattr(x, 'dtype', backend.floatx()))
A:keras.src.ops.numpy.outputs_shape->broadcast_shapes(x1_shape, x2_shape)
A:keras.src.ops.numpy.x1_dtype->keras.src.backend.standardize_dtype(getattr(x1, 'dtype', type(x1)))
A:keras.src.ops.numpy.x2_dtype->keras.src.backend.standardize_dtype(getattr(x2, 'dtype', type(x2)))
A:keras.src.ops.numpy.shape_match->shape_equal(x.shape, weights.shape, allow_none=True)
A:keras.src.ops.numpy.shape_match_on_axis->shape_equal([x.shape[self.axis]], weights.shape, allow_none=True)
A:keras.src.ops.numpy.weights->keras.src.backend.convert_to_tensor(self.weights)
A:keras.src.ops.numpy.shorter_side->numpy.minimum(shape_2d[0], shape_2d[1])
A:keras.src.ops.numpy.x_shape->list(x.shape)
A:keras.src.ops.numpy.shape->list(a.shape)
A:keras.src.ops.numpy.shape[self.axis]->builtins.max(size - self.n, 0)
A:keras.src.ops.numpy.split_subscripts->self.subscripts.split('->')
A:keras.src.ops.numpy.input_specs->subscripts.split(',')
A:keras.src.ops.numpy.reduced_dims->sorted(reduced_dims)
A:keras.src.ops.numpy.kept_dims->sorted(kept_dims)
A:keras.src.ops.numpy.kept_dims_copy->sorted(kept_dims).copy()
A:keras.src.ops.numpy.reduced_dims_copy->sorted(reduced_dims).copy()
A:keras.src.ops.numpy.split_spec->spec.split('...')
A:keras.src.ops.numpy.expanded_shape->expanded_shape.split().split()
A:keras.src.ops.numpy.wildcard_shape_start_index->len(split_spec[0])
A:keras.src.ops.numpy.dtypes_to_resolve->list(set((backend.standardize_dtype(getattr(x, 'dtype', type(x))) for x in operands)))
A:keras.src.ops.numpy.key->tuple(key)
A:keras.src.ops.numpy.remaining_shape->list(x.shape)
A:keras.src.ops.numpy.remaining_key->list(key)
A:keras.src.ops.numpy.num_ellipses->list(key).count(Ellipsis)
A:keras.src.ops.numpy.subkey->list(key).pop(0)
A:keras.src.ops.numpy.length->list(x.shape).pop(0)
A:keras.src.ops.numpy.new_length->len(range(*subkey.indices(length)))
A:keras.src.ops.numpy.start_shape->getattr(start, 'shape', [])
A:keras.src.ops.numpy.stop_shape->getattr(stop, 'shape', [])
A:keras.src.ops.numpy.size->int(np.prod(xi.shape))
A:keras.src.ops.numpy.x1_flatten_shape->int(np.prod(x1_shape))
A:keras.src.ops.numpy.x2_flatten_shape->int(np.prod(x2_shape))
A:keras.src.ops.numpy.self.pad_width->self._process_pad_width(pad_width)
A:keras.src.ops.numpy.first_len->len(pad_width[0])
A:keras.src.ops.numpy.x_flatten_size->int(np.prod(x_shape))
A:keras.src.ops.numpy.output_shape[self.axis]->int(output_size[i])
A:keras.src.ops.numpy.indices_or_sections->tuple(indices_or_sections)
A:keras.src.ops.numpy.output_size->numpy.diff(indices_or_sections)
A:keras.src.ops.numpy.size_on_axis->len(xs)
A:keras.src.ops.numpy.indices_shape->list(indices.shape)
A:keras.src.ops.numpy.condition_shape->getattr(condition, 'shape', [])
A:keras.src.ops.numpy.x->keras.src.backend.convert_to_tensor(x)
A:keras.src.ops.numpy.input_shape->list(x.shape)
A:keras.src.ops.numpy.axis->to_tuple_or_list(self.axis)
A:keras.src.ops.numpy.ori_dtype->keras.src.backend.standardize_dtype(x.dtype)
A:keras.src.ops.numpy.compute_dtype->keras.src.backend.common.dtypes.result_type(x.dtype, 'float32')
keras.src.ops.Abs(Absolute)
keras.src.ops.Absolute(Operation)
keras.src.ops.Absolute.call(self,x)
keras.src.ops.Absolute.compute_output_spec(self,x)
keras.src.ops.Add(Operation)
keras.src.ops.Add.call(self,x1,x2)
keras.src.ops.Add.compute_output_spec(self,x1,x2)
keras.src.ops.All(self,axis=None,keepdims=False)
keras.src.ops.All.call(self,x)
keras.src.ops.All.compute_output_spec(self,x)
keras.src.ops.Amax(self,axis=None,keepdims=False)
keras.src.ops.Amax.call(self,x)
keras.src.ops.Amax.compute_output_spec(self,x)
keras.src.ops.Amin(self,axis=None,keepdims=False)
keras.src.ops.Amin.call(self,x)
keras.src.ops.Amin.compute_output_spec(self,x)
keras.src.ops.Any(self,axis=None,keepdims=False)
keras.src.ops.Any.call(self,x)
keras.src.ops.Any.compute_output_spec(self,x)
keras.src.ops.Append(self,axis=None)
keras.src.ops.Append.call(self,x1,x2)
keras.src.ops.Append.compute_output_spec(self,x1,x2)
keras.src.ops.Arange(Operation)
keras.src.ops.Arange.call(self,start,stop=None,step=1,dtype=None)
keras.src.ops.Arange.compute_output_spec(self,start,stop=None,step=1,dtype=None)
keras.src.ops.Arccos(Operation)
keras.src.ops.Arccos.call(self,x)
keras.src.ops.Arccos.compute_output_spec(self,x)
keras.src.ops.Arccosh(Operation)
keras.src.ops.Arccosh.call(self,x)
keras.src.ops.Arccosh.compute_output_spec(self,x)
keras.src.ops.Arcsin(Operation)
keras.src.ops.Arcsin.call(self,x)
keras.src.ops.Arcsin.compute_output_spec(self,x)
keras.src.ops.Arcsinh(Operation)
keras.src.ops.Arcsinh.call(self,x)
keras.src.ops.Arcsinh.compute_output_spec(self,x)
keras.src.ops.Arctan(Operation)
keras.src.ops.Arctan.call(self,x)
keras.src.ops.Arctan.compute_output_spec(self,x)
keras.src.ops.Arctan2(Operation)
keras.src.ops.Arctan2.call(self,x1,x2)
keras.src.ops.Arctan2.compute_output_spec(self,x1,x2)
keras.src.ops.Arctanh(Operation)
keras.src.ops.Arctanh.call(self,x)
keras.src.ops.Arctanh.compute_output_spec(self,x)
keras.src.ops.Argmax(self,axis=None)
keras.src.ops.Argmax.call(self,x)
keras.src.ops.Argmax.compute_output_spec(self,x)
keras.src.ops.Argmin(self,axis=None)
keras.src.ops.Argmin.call(self,x)
keras.src.ops.Argmin.compute_output_spec(self,x)
keras.src.ops.Argsort(self,axis=-1)
keras.src.ops.Argsort.call(self,x)
keras.src.ops.Argsort.compute_output_spec(self,x)
keras.src.ops.Array(Operation)
keras.src.ops.Array.call(self,x,dtype=None)
keras.src.ops.Array.compute_output_spec(self,x,dtype=None)
keras.src.ops.Average(self,axis=None)
keras.src.ops.Average.call(self,x,weights=None)
keras.src.ops.Average.compute_output_spec(self,x,weights=None)
keras.src.ops.Bincount(self,weights=None,minlength=0)
keras.src.ops.Bincount.call(self,x)
keras.src.ops.Bincount.compute_output_spec(self,x)
keras.src.ops.BroadcastTo(self,shape)
keras.src.ops.BroadcastTo.call(self,x)
keras.src.ops.BroadcastTo.compute_output_spec(self,x)
keras.src.ops.Ceil(Operation)
keras.src.ops.Ceil.call(self,x)
keras.src.ops.Ceil.compute_output_spec(self,x)
keras.src.ops.Clip(self,x_min,x_max)
keras.src.ops.Clip.call(self,x)
keras.src.ops.Clip.compute_output_spec(self,x)
keras.src.ops.Concatenate(self,axis=0)
keras.src.ops.Concatenate.call(self,xs)
keras.src.ops.Concatenate.compute_output_spec(self,xs)
keras.src.ops.Conj(Conjugate)
keras.src.ops.Conjugate(Operation)
keras.src.ops.Conjugate.call(self,x)
keras.src.ops.Conjugate.compute_output_spec(self,x)
keras.src.ops.Copy(Operation)
keras.src.ops.Copy.call(self,x)
keras.src.ops.Copy.compute_output_spec(self,x)
keras.src.ops.Cos(Operation)
keras.src.ops.Cos.call(self,x)
keras.src.ops.Cos.compute_output_spec(self,x)
keras.src.ops.Cosh(Operation)
keras.src.ops.Cosh.call(self,x)
keras.src.ops.Cosh.compute_output_spec(self,x)
keras.src.ops.CountNonzero(self,axis=None)
keras.src.ops.CountNonzero.call(self,x)
keras.src.ops.CountNonzero.compute_output_spec(self,x)
keras.src.ops.Cross(self,axisa=-1,axisb=-1,axisc=-1,axis=None)
keras.src.ops.Cross.call(self,x1,x2)
keras.src.ops.Cross.compute_output_spec(self,x1,x2)
keras.src.ops.Cumprod(self,axis=None,dtype=None)
keras.src.ops.Cumprod.call(self,x)
keras.src.ops.Cumprod.compute_output_spec(self,x)
keras.src.ops.Cumsum(self,axis=None,dtype=None)
keras.src.ops.Cumsum.call(self,x)
keras.src.ops.Cumsum.compute_output_spec(self,x)
keras.src.ops.Diag(self,k=0)
keras.src.ops.Diag.call(self,x)
keras.src.ops.Diag.compute_output_spec(self,x)
keras.src.ops.Diagonal(self,offset=0,axis1=0,axis2=1)
keras.src.ops.Diagonal.call(self,x)
keras.src.ops.Diagonal.compute_output_spec(self,x)
keras.src.ops.Diff(self,n=1,axis=-1)
keras.src.ops.Diff.call(self,a)
keras.src.ops.Diff.compute_output_spec(self,a)
keras.src.ops.Digitize(Operation)
keras.src.ops.Digitize.call(self,x,bins)
keras.src.ops.Digitize.compute_output_spec(self,x,bins)
keras.src.ops.Divide(Operation)
keras.src.ops.Divide.call(self,x1,x2)
keras.src.ops.Divide.compute_output_spec(self,x1,x2)
keras.src.ops.DivideNoNan(Operation)
keras.src.ops.DivideNoNan.call(self,x1,x2)
keras.src.ops.DivideNoNan.compute_output_spec(self,x1,x2)
keras.src.ops.Dot(Operation)
keras.src.ops.Dot.call(self,x1,x2)
keras.src.ops.Dot.compute_output_spec(self,x1,x2)
keras.src.ops.Einsum(self,subscripts)
keras.src.ops.Einsum.call(self,*operands)
keras.src.ops.Einsum.compute_output_spec(self,*operands)
keras.src.ops.Empty(Operation)
keras.src.ops.Empty.call(self,shape,dtype=None)
keras.src.ops.Empty.compute_output_spec(self,shape,dtype=None)
keras.src.ops.Equal(Operation)
keras.src.ops.Equal.call(self,x1,x2)
keras.src.ops.Equal.compute_output_spec(self,x1,x2)
keras.src.ops.Exp(Operation)
keras.src.ops.Exp.call(self,x)
keras.src.ops.Exp.compute_output_spec(self,x)
keras.src.ops.ExpandDims(self,axis)
keras.src.ops.ExpandDims.call(self,x)
keras.src.ops.ExpandDims.compute_output_spec(self,x)
keras.src.ops.Expm1(Operation)
keras.src.ops.Expm1.call(self,x)
keras.src.ops.Expm1.compute_output_spec(self,x)
keras.src.ops.Eye(Operation)
keras.src.ops.Eye.call(self,N,M=None,k=0,dtype=None)
keras.src.ops.Eye.compute_output_spec(self,N,M=None,k=0,dtype=None)
keras.src.ops.Flip(self,axis=None)
keras.src.ops.Flip.call(self,x)
keras.src.ops.Flip.compute_output_spec(self,x)
keras.src.ops.Floor(Operation)
keras.src.ops.Floor.call(self,x)
keras.src.ops.Floor.compute_output_spec(self,x)
keras.src.ops.FloorDivide(Operation)
keras.src.ops.FloorDivide.call(self,x1,x2)
keras.src.ops.FloorDivide.compute_output_spec(self,x1,x2)
keras.src.ops.Full(Operation)
keras.src.ops.Full.call(self,shape,fill_value,dtype=None)
keras.src.ops.Full.compute_output_spec(self,shape,fill_value,dtype=None)
keras.src.ops.FullLike(Operation)
keras.src.ops.FullLike.call(self,x,fill_value,dtype=None)
keras.src.ops.FullLike.compute_output_spec(self,x,fill_value,dtype=None)
keras.src.ops.GetItem(Operation)
keras.src.ops.GetItem.call(self,x,key)
keras.src.ops.GetItem.compute_output_spec(self,x,key)
keras.src.ops.Greater(Operation)
keras.src.ops.Greater.call(self,x1,x2)
keras.src.ops.Greater.compute_output_spec(self,x1,x2)
keras.src.ops.GreaterEqual(Operation)
keras.src.ops.GreaterEqual.call(self,x1,x2)
keras.src.ops.GreaterEqual.compute_output_spec(self,x1,x2)
keras.src.ops.Hstack(Operation)
keras.src.ops.Hstack.call(self,xs)
keras.src.ops.Hstack.compute_output_spec(self,xs)
keras.src.ops.Identity(Operation)
keras.src.ops.Identity.call(self,n,dtype=None)
keras.src.ops.Identity.compute_output_spec(self,n,dtype=None)
keras.src.ops.Imag(Operation)
keras.src.ops.Imag.call(self,x)
keras.src.ops.Imag.compute_output_spec(self,x)
keras.src.ops.Isclose(Operation)
keras.src.ops.Isclose.call(self,x1,x2)
keras.src.ops.Isclose.compute_output_spec(self,x1,x2)
keras.src.ops.Isfinite(Operation)
keras.src.ops.Isfinite.call(self,x)
keras.src.ops.Isfinite.compute_output_spec(self,x)
keras.src.ops.Isinf(Operation)
keras.src.ops.Isinf.call(self,x)
keras.src.ops.Isinf.compute_output_spec(self,x)
keras.src.ops.Isnan(Operation)
keras.src.ops.Isnan.call(self,x)
keras.src.ops.Isnan.compute_output_spec(self,x)
keras.src.ops.Less(Operation)
keras.src.ops.Less.call(self,x1,x2)
keras.src.ops.Less.compute_output_spec(self,x1,x2)
keras.src.ops.LessEqual(Operation)
keras.src.ops.LessEqual.call(self,x1,x2)
keras.src.ops.LessEqual.compute_output_spec(self,x1,x2)
keras.src.ops.Linspace(self,num=50,endpoint=True,retstep=False,dtype=float,axis=0)
keras.src.ops.Linspace.call(self,start,stop)
keras.src.ops.Linspace.compute_output_spec(self,start,stop)
keras.src.ops.Log(Operation)
keras.src.ops.Log.call(self,x)
keras.src.ops.Log.compute_output_spec(self,x)
keras.src.ops.Log10(Operation)
keras.src.ops.Log10.call(self,x)
keras.src.ops.Log10.compute_output_spec(self,x)
keras.src.ops.Log1p(Operation)
keras.src.ops.Log1p.call(self,x)
keras.src.ops.Log1p.compute_output_spec(self,x)
keras.src.ops.Log2(Operation)
keras.src.ops.Log2.call(self,x)
keras.src.ops.Log2.compute_output_spec(self,x)
keras.src.ops.Logaddexp(Operation)
keras.src.ops.Logaddexp.call(self,x1,x2)
keras.src.ops.Logaddexp.compute_output_spec(self,x1,x2)
keras.src.ops.LogicalAnd(Operation)
keras.src.ops.LogicalAnd.call(self,x1,x2)
keras.src.ops.LogicalAnd.compute_output_spec(self,x1,x2)
keras.src.ops.LogicalNot(Operation)
keras.src.ops.LogicalNot.call(self,x)
keras.src.ops.LogicalNot.compute_output_spec(self,x)
keras.src.ops.LogicalOr(Operation)
keras.src.ops.LogicalOr.call(self,x1,x2)
keras.src.ops.LogicalOr.compute_output_spec(self,x1,x2)
keras.src.ops.LogicalXor(Operation)
keras.src.ops.LogicalXor.call(self,x1,x2)
keras.src.ops.LogicalXor.compute_output_spec(self,x1,x2)
keras.src.ops.Logspace(self,num=50,endpoint=True,base=10,dtype=float,axis=0)
keras.src.ops.Logspace.call(self,start,stop)
keras.src.ops.Logspace.compute_output_spec(self,start,stop)
keras.src.ops.Matmul(Operation)
keras.src.ops.Matmul.call(self,x1,x2)
keras.src.ops.Matmul.compute_output_spec(self,x1,x2)
keras.src.ops.Max(self,axis=None,keepdims=False,initial=None)
keras.src.ops.Max.call(self,x)
keras.src.ops.Max.compute_output_spec(self,x)
keras.src.ops.Maximum(Operation)
keras.src.ops.Maximum.call(self,x1,x2)
keras.src.ops.Maximum.compute_output_spec(self,x1,x2)
keras.src.ops.Mean(self,axis=None,keepdims=False)
keras.src.ops.Mean.call(self,x)
keras.src.ops.Mean.compute_output_spec(self,x)
keras.src.ops.Median(self,axis=None,keepdims=False)
keras.src.ops.Median.call(self,x)
keras.src.ops.Median.compute_output_spec(self,x)
keras.src.ops.Meshgrid(self,indexing='xy')
keras.src.ops.Meshgrid.call(self,*x)
keras.src.ops.Meshgrid.compute_output_spec(self,*x)
keras.src.ops.Min(self,axis=None,keepdims=False,initial=None)
keras.src.ops.Min.call(self,x)
keras.src.ops.Min.compute_output_spec(self,x)
keras.src.ops.Minimum(Operation)
keras.src.ops.Minimum.call(self,x1,x2)
keras.src.ops.Minimum.compute_output_spec(self,x1,x2)
keras.src.ops.Mod(Operation)
keras.src.ops.Mod.call(self,x1,x2)
keras.src.ops.Mod.compute_output_spec(self,x1,x2)
keras.src.ops.Moveaxis(self,source,destination)
keras.src.ops.Moveaxis.call(self,x)
keras.src.ops.Moveaxis.compute_output_spec(self,x)
keras.src.ops.Multiply(Operation)
keras.src.ops.Multiply.call(self,x1,x2)
keras.src.ops.Multiply.compute_output_spec(self,x1,x2)
keras.src.ops.NanToNum(Operation)
keras.src.ops.NanToNum.call(self,x)
keras.src.ops.Ndim(Operation)
keras.src.ops.Ndim.call(self,x)
keras.src.ops.Ndim.compute_output_spec(self,x)
keras.src.ops.Negative(Operation)
keras.src.ops.Negative.call(self,x)
keras.src.ops.Negative.compute_output_spec(self,x)
keras.src.ops.Nonzero(Operation)
keras.src.ops.Nonzero.call(self,x)
keras.src.ops.NotEqual(Operation)
keras.src.ops.NotEqual.call(self,x1,x2)
keras.src.ops.NotEqual.compute_output_spec(self,x1,x2)
keras.src.ops.Ones(Operation)
keras.src.ops.Ones.call(self,shape,dtype=None)
keras.src.ops.Ones.compute_output_spec(self,shape,dtype=None)
keras.src.ops.OnesLike(Operation)
keras.src.ops.OnesLike.call(self,x,dtype=None)
keras.src.ops.OnesLike.compute_output_spec(self,x,dtype=None)
keras.src.ops.Outer(Operation)
keras.src.ops.Outer.call(self,x1,x2)
keras.src.ops.Outer.compute_output_spec(self,x1,x2)
keras.src.ops.Pad(self,pad_width,mode='constant')
keras.src.ops.Pad._process_pad_width(self,pad_width)
keras.src.ops.Pad.call(self,x,constant_values=None)
keras.src.ops.Pad.compute_output_spec(self,x,constant_values=None)
keras.src.ops.Power(Operation)
keras.src.ops.Power.call(self,x1,x2)
keras.src.ops.Power.compute_output_spec(self,x1,x2)
keras.src.ops.Prod(self,axis=None,keepdims=False,dtype=None)
keras.src.ops.Prod.call(self,x)
keras.src.ops.Prod.compute_output_spec(self,x)
keras.src.ops.Quantile(self,axis=None,method='linear',keepdims=False)
keras.src.ops.Quantile.call(self,x,q)
keras.src.ops.Quantile.compute_output_spec(self,x,q)
keras.src.ops.Ravel(Operation)
keras.src.ops.Ravel.call(self,x)
keras.src.ops.Ravel.compute_output_spec(self,x)
keras.src.ops.Real(Operation)
keras.src.ops.Real.call(self,x)
keras.src.ops.Real.compute_output_spec(self,x)
keras.src.ops.Reciprocal(Operation)
keras.src.ops.Reciprocal.call(self,x)
keras.src.ops.Reciprocal.compute_output_spec(self,x)
keras.src.ops.Repeat(self,repeats,axis=None)
keras.src.ops.Repeat.call(self,x)
keras.src.ops.Repeat.compute_output_spec(self,x)
keras.src.ops.Reshape(self,newshape)
keras.src.ops.Reshape.call(self,x)
keras.src.ops.Reshape.compute_output_spec(self,x)
keras.src.ops.Roll(self,shift,axis=None)
keras.src.ops.Roll.call(self,x)
keras.src.ops.Roll.compute_output_spec(self,x)
keras.src.ops.Round(self,decimals=0)
keras.src.ops.Round.call(self,x)
keras.src.ops.Round.compute_output_spec(self,x)
keras.src.ops.Sign(Operation)
keras.src.ops.Sign.call(self,x)
keras.src.ops.Sign.compute_output_spec(self,x)
keras.src.ops.Sin(Operation)
keras.src.ops.Sin.call(self,x)
keras.src.ops.Sin.compute_output_spec(self,x)
keras.src.ops.Sinh(Operation)
keras.src.ops.Sinh.call(self,x)
keras.src.ops.Sinh.compute_output_spec(self,x)
keras.src.ops.Size(Operation)
keras.src.ops.Size.call(self,x)
keras.src.ops.Size.compute_output_spec(self,x)
keras.src.ops.Sort(self,axis=-1)
keras.src.ops.Sort.call(self,x)
keras.src.ops.Sort.compute_output_spec(self,x)
keras.src.ops.Split(self,indices_or_sections,axis=0)
keras.src.ops.Split.call(self,x)
keras.src.ops.Split.compute_output_spec(self,x)
keras.src.ops.Sqrt(Operation)
keras.src.ops.Sqrt.call(self,x)
keras.src.ops.Sqrt.compute_output_spec(self,x)
keras.src.ops.Square(Operation)
keras.src.ops.Square.call(self,x)
keras.src.ops.Square.compute_output_spec(self,x)
keras.src.ops.Squeeze(self,axis=None)
keras.src.ops.Squeeze.call(self,x)
keras.src.ops.Squeeze.compute_output_spec(self,x)
keras.src.ops.Stack(self,axis=0)
keras.src.ops.Stack.call(self,xs)
keras.src.ops.Stack.compute_output_spec(self,xs)
keras.src.ops.Std(self,axis=None,keepdims=False)
keras.src.ops.Std.call(self,x)
keras.src.ops.Std.compute_output_spec(self,x)
keras.src.ops.Subtract(Operation)
keras.src.ops.Subtract.call(self,x1,x2)
keras.src.ops.Subtract.compute_output_spec(self,x1,x2)
keras.src.ops.Sum(self,axis=None,keepdims=False)
keras.src.ops.Sum.call(self,x)
keras.src.ops.Sum.compute_output_spec(self,x)
keras.src.ops.Swapaxes(self,axis1,axis2)
keras.src.ops.Swapaxes.call(self,x)
keras.src.ops.Swapaxes.compute_output_spec(self,x)
keras.src.ops.Take(self,axis=None)
keras.src.ops.Take.call(self,x,indices)
keras.src.ops.Take.compute_output_spec(self,x,indices)
keras.src.ops.TakeAlongAxis(self,axis=None)
keras.src.ops.TakeAlongAxis.call(self,x,indices)
keras.src.ops.TakeAlongAxis.compute_output_spec(self,x,indices)
keras.src.ops.Tan(Operation)
keras.src.ops.Tan.call(self,x)
keras.src.ops.Tan.compute_output_spec(self,x)
keras.src.ops.Tanh(Operation)
keras.src.ops.Tanh.call(self,x)
keras.src.ops.Tanh.compute_output_spec(self,x)
keras.src.ops.Tensordot(self,axes=2)
keras.src.ops.Tensordot.call(self,x1,x2)
keras.src.ops.Tensordot.compute_output_spec(self,x1,x2)
keras.src.ops.Tile(self,repeats)
keras.src.ops.Tile.call(self,x)
keras.src.ops.Tile.compute_output_spec(self,x)
keras.src.ops.Trace(self,offset=0,axis1=0,axis2=1)
keras.src.ops.Trace.call(self,x)
keras.src.ops.Trace.compute_output_spec(self,x)
keras.src.ops.Transpose(self,axes=None)
keras.src.ops.Transpose.call(self,x)
keras.src.ops.Transpose.compute_output_spec(self,x)
keras.src.ops.Tri(Operation)
keras.src.ops.Tri.call(self,N,M=None,k=0,dtype=None)
keras.src.ops.Tri.compute_output_spec(self,N,M=None,k=0,dtype=None)
keras.src.ops.Tril(self,k=0)
keras.src.ops.Tril.call(self,x)
keras.src.ops.Tril.compute_output_spec(self,x)
keras.src.ops.Triu(self,k=0)
keras.src.ops.Triu.call(self,x)
keras.src.ops.Triu.compute_output_spec(self,x)
keras.src.ops.TrueDivide(Operation)
keras.src.ops.TrueDivide.call(self,x1,x2)
keras.src.ops.TrueDivide.compute_output_spec(self,x1,x2)
keras.src.ops.Var(self,axis=None,keepdims=False)
keras.src.ops.Var.call(self,x)
keras.src.ops.Var.compute_output_spec(self,x)
keras.src.ops.Vdot(Operation)
keras.src.ops.Vdot.call(self,x1,x2)
keras.src.ops.Vdot.compute_output_spec(self,x1,x2)
keras.src.ops.Vstack(Operation)
keras.src.ops.Vstack.call(self,xs)
keras.src.ops.Vstack.compute_output_spec(self,xs)
keras.src.ops.Where(Operation)
keras.src.ops.Where.call(self,condition,x1=None,x2=None)
keras.src.ops.Where.compute_output_spec(self,condition,x1,x2)
keras.src.ops.Zeros(Operation)
keras.src.ops.Zeros.call(self,shape,dtype=None)
keras.src.ops.Zeros.compute_output_spec(self,shape,dtype=None)
keras.src.ops.ZerosLike(Operation)
keras.src.ops.ZerosLike.call(self,x,dtype=None)
keras.src.ops.ZerosLike.compute_output_spec(self,x,dtype=None)
keras.src.ops.abs(x)
keras.src.ops.absolute(x)
keras.src.ops.add(x1,x2)
keras.src.ops.all(x,axis=None,keepdims=False)
keras.src.ops.amax(x,axis=None,keepdims=False)
keras.src.ops.amin(x,axis=None,keepdims=False)
keras.src.ops.any(x,axis=None,keepdims=False)
keras.src.ops.append(x1,x2,axis=None)
keras.src.ops.arange(start,stop=None,step=1,dtype=None)
keras.src.ops.arccos(x)
keras.src.ops.arccosh(x)
keras.src.ops.arcsin(x)
keras.src.ops.arcsinh(x)
keras.src.ops.arctan(x)
keras.src.ops.arctan2(x1,x2)
keras.src.ops.arctanh(x)
keras.src.ops.argmax(x,axis=None)
keras.src.ops.argmin(x,axis=None)
keras.src.ops.argsort(x,axis=-1)
keras.src.ops.array(x,dtype=None)
keras.src.ops.average(x,axis=None,weights=None)
keras.src.ops.bincount(x,weights=None,minlength=0)
keras.src.ops.broadcast_to(x,shape)
keras.src.ops.ceil(x)
keras.src.ops.clip(x,x_min,x_max)
keras.src.ops.concatenate(xs,axis=0)
keras.src.ops.conj(x)
keras.src.ops.conjugate(x)
keras.src.ops.copy(x)
keras.src.ops.cos(x)
keras.src.ops.cosh(x)
keras.src.ops.count_nonzero(x,axis=None)
keras.src.ops.cross(x1,x2,axisa=-1,axisb=-1,axisc=-1,axis=None)
keras.src.ops.cumprod(x,axis=None,dtype=None)
keras.src.ops.cumsum(x,axis=None,dtype=None)
keras.src.ops.diag(x,k=0)
keras.src.ops.diagonal(x,offset=0,axis1=0,axis2=1)
keras.src.ops.diff(a,n=1,axis=-1)
keras.src.ops.digitize(x,bins)
keras.src.ops.divide(x1,x2)
keras.src.ops.divide_no_nan(x1,x2)
keras.src.ops.dot(x1,x2)
keras.src.ops.einsum(subscripts,*operands)
keras.src.ops.empty(shape,dtype=None)
keras.src.ops.equal(x1,x2)
keras.src.ops.exp(x)
keras.src.ops.expand_dims(x,axis)
keras.src.ops.expm1(x)
keras.src.ops.eye(N,M=None,k=0,dtype=None)
keras.src.ops.flip(x,axis=None)
keras.src.ops.floor(x)
keras.src.ops.floor_divide(x1,x2)
keras.src.ops.full(shape,fill_value,dtype=None)
keras.src.ops.full_like(x,fill_value,dtype=None)
keras.src.ops.get_item(x,key)
keras.src.ops.greater(x1,x2)
keras.src.ops.greater_equal(x1,x2)
keras.src.ops.hstack(xs)
keras.src.ops.identity(n,dtype=None)
keras.src.ops.imag(x)
keras.src.ops.isclose(x1,x2)
keras.src.ops.isfinite(x)
keras.src.ops.isinf(x)
keras.src.ops.isnan(x)
keras.src.ops.less(x1,x2)
keras.src.ops.less_equal(x1,x2)
keras.src.ops.linspace(start,stop,num=50,endpoint=True,retstep=False,dtype=None,axis=0)
keras.src.ops.log(x)
keras.src.ops.log10(x)
keras.src.ops.log1p(x)
keras.src.ops.log2(x)
keras.src.ops.logaddexp(x1,x2)
keras.src.ops.logical_and(x1,x2)
keras.src.ops.logical_not(x)
keras.src.ops.logical_or(x1,x2)
keras.src.ops.logical_xor(x1,x2)
keras.src.ops.logspace(start,stop,num=50,endpoint=True,base=10,dtype=None,axis=0)
keras.src.ops.matmul(x1,x2)
keras.src.ops.max(x,axis=None,keepdims=False,initial=None)
keras.src.ops.maximum(x1,x2)
keras.src.ops.mean(x,axis=None,keepdims=False)
keras.src.ops.median(x,axis=None,keepdims=False)
keras.src.ops.meshgrid(*x,indexing='xy')
keras.src.ops.min(x,axis=None,keepdims=False,initial=None)
keras.src.ops.minimum(x1,x2)
keras.src.ops.mod(x1,x2)
keras.src.ops.moveaxis(x,source,destination)
keras.src.ops.multiply(x1,x2)
keras.src.ops.nan_to_num(x)
keras.src.ops.ndim(x)
keras.src.ops.negative(x)
keras.src.ops.nonzero(x)
keras.src.ops.not_equal(x1,x2)
keras.src.ops.numpy.Abs(Absolute)
keras.src.ops.numpy.Absolute(Operation)
keras.src.ops.numpy.Absolute.call(self,x)
keras.src.ops.numpy.Absolute.compute_output_spec(self,x)
keras.src.ops.numpy.Add(Operation)
keras.src.ops.numpy.Add.call(self,x1,x2)
keras.src.ops.numpy.Add.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.All(self,axis=None,keepdims=False)
keras.src.ops.numpy.All.__init__(self,axis=None,keepdims=False)
keras.src.ops.numpy.All.call(self,x)
keras.src.ops.numpy.All.compute_output_spec(self,x)
keras.src.ops.numpy.Amax(self,axis=None,keepdims=False)
keras.src.ops.numpy.Amax.__init__(self,axis=None,keepdims=False)
keras.src.ops.numpy.Amax.call(self,x)
keras.src.ops.numpy.Amax.compute_output_spec(self,x)
keras.src.ops.numpy.Amin(self,axis=None,keepdims=False)
keras.src.ops.numpy.Amin.__init__(self,axis=None,keepdims=False)
keras.src.ops.numpy.Amin.call(self,x)
keras.src.ops.numpy.Amin.compute_output_spec(self,x)
keras.src.ops.numpy.Any(self,axis=None,keepdims=False)
keras.src.ops.numpy.Any.__init__(self,axis=None,keepdims=False)
keras.src.ops.numpy.Any.call(self,x)
keras.src.ops.numpy.Any.compute_output_spec(self,x)
keras.src.ops.numpy.Append(self,axis=None)
keras.src.ops.numpy.Append.__init__(self,axis=None)
keras.src.ops.numpy.Append.call(self,x1,x2)
keras.src.ops.numpy.Append.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.Arange(Operation)
keras.src.ops.numpy.Arange.call(self,start,stop=None,step=1,dtype=None)
keras.src.ops.numpy.Arange.compute_output_spec(self,start,stop=None,step=1,dtype=None)
keras.src.ops.numpy.Arccos(Operation)
keras.src.ops.numpy.Arccos.call(self,x)
keras.src.ops.numpy.Arccos.compute_output_spec(self,x)
keras.src.ops.numpy.Arccosh(Operation)
keras.src.ops.numpy.Arccosh.call(self,x)
keras.src.ops.numpy.Arccosh.compute_output_spec(self,x)
keras.src.ops.numpy.Arcsin(Operation)
keras.src.ops.numpy.Arcsin.call(self,x)
keras.src.ops.numpy.Arcsin.compute_output_spec(self,x)
keras.src.ops.numpy.Arcsinh(Operation)
keras.src.ops.numpy.Arcsinh.call(self,x)
keras.src.ops.numpy.Arcsinh.compute_output_spec(self,x)
keras.src.ops.numpy.Arctan(Operation)
keras.src.ops.numpy.Arctan.call(self,x)
keras.src.ops.numpy.Arctan.compute_output_spec(self,x)
keras.src.ops.numpy.Arctan2(Operation)
keras.src.ops.numpy.Arctan2.call(self,x1,x2)
keras.src.ops.numpy.Arctan2.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.Arctanh(Operation)
keras.src.ops.numpy.Arctanh.call(self,x)
keras.src.ops.numpy.Arctanh.compute_output_spec(self,x)
keras.src.ops.numpy.Argmax(self,axis=None)
keras.src.ops.numpy.Argmax.__init__(self,axis=None)
keras.src.ops.numpy.Argmax.call(self,x)
keras.src.ops.numpy.Argmax.compute_output_spec(self,x)
keras.src.ops.numpy.Argmin(self,axis=None)
keras.src.ops.numpy.Argmin.__init__(self,axis=None)
keras.src.ops.numpy.Argmin.call(self,x)
keras.src.ops.numpy.Argmin.compute_output_spec(self,x)
keras.src.ops.numpy.Argsort(self,axis=-1)
keras.src.ops.numpy.Argsort.__init__(self,axis=-1)
keras.src.ops.numpy.Argsort.call(self,x)
keras.src.ops.numpy.Argsort.compute_output_spec(self,x)
keras.src.ops.numpy.Array(Operation)
keras.src.ops.numpy.Array.call(self,x,dtype=None)
keras.src.ops.numpy.Array.compute_output_spec(self,x,dtype=None)
keras.src.ops.numpy.Average(self,axis=None)
keras.src.ops.numpy.Average.__init__(self,axis=None)
keras.src.ops.numpy.Average.call(self,x,weights=None)
keras.src.ops.numpy.Average.compute_output_spec(self,x,weights=None)
keras.src.ops.numpy.Bincount(self,weights=None,minlength=0)
keras.src.ops.numpy.Bincount.__init__(self,weights=None,minlength=0)
keras.src.ops.numpy.Bincount.call(self,x)
keras.src.ops.numpy.Bincount.compute_output_spec(self,x)
keras.src.ops.numpy.BroadcastTo(self,shape)
keras.src.ops.numpy.BroadcastTo.__init__(self,shape)
keras.src.ops.numpy.BroadcastTo.call(self,x)
keras.src.ops.numpy.BroadcastTo.compute_output_spec(self,x)
keras.src.ops.numpy.Ceil(Operation)
keras.src.ops.numpy.Ceil.call(self,x)
keras.src.ops.numpy.Ceil.compute_output_spec(self,x)
keras.src.ops.numpy.Clip(self,x_min,x_max)
keras.src.ops.numpy.Clip.__init__(self,x_min,x_max)
keras.src.ops.numpy.Clip.call(self,x)
keras.src.ops.numpy.Clip.compute_output_spec(self,x)
keras.src.ops.numpy.Concatenate(self,axis=0)
keras.src.ops.numpy.Concatenate.__init__(self,axis=0)
keras.src.ops.numpy.Concatenate.call(self,xs)
keras.src.ops.numpy.Concatenate.compute_output_spec(self,xs)
keras.src.ops.numpy.Conj(Conjugate)
keras.src.ops.numpy.Conjugate(Operation)
keras.src.ops.numpy.Conjugate.call(self,x)
keras.src.ops.numpy.Conjugate.compute_output_spec(self,x)
keras.src.ops.numpy.Copy(Operation)
keras.src.ops.numpy.Copy.call(self,x)
keras.src.ops.numpy.Copy.compute_output_spec(self,x)
keras.src.ops.numpy.Cos(Operation)
keras.src.ops.numpy.Cos.call(self,x)
keras.src.ops.numpy.Cos.compute_output_spec(self,x)
keras.src.ops.numpy.Cosh(Operation)
keras.src.ops.numpy.Cosh.call(self,x)
keras.src.ops.numpy.Cosh.compute_output_spec(self,x)
keras.src.ops.numpy.CountNonzero(self,axis=None)
keras.src.ops.numpy.CountNonzero.__init__(self,axis=None)
keras.src.ops.numpy.CountNonzero.call(self,x)
keras.src.ops.numpy.CountNonzero.compute_output_spec(self,x)
keras.src.ops.numpy.Cross(self,axisa=-1,axisb=-1,axisc=-1,axis=None)
keras.src.ops.numpy.Cross.__init__(self,axisa=-1,axisb=-1,axisc=-1,axis=None)
keras.src.ops.numpy.Cross.call(self,x1,x2)
keras.src.ops.numpy.Cross.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.Cumprod(self,axis=None,dtype=None)
keras.src.ops.numpy.Cumprod.__init__(self,axis=None,dtype=None)
keras.src.ops.numpy.Cumprod.call(self,x)
keras.src.ops.numpy.Cumprod.compute_output_spec(self,x)
keras.src.ops.numpy.Cumsum(self,axis=None,dtype=None)
keras.src.ops.numpy.Cumsum.__init__(self,axis=None,dtype=None)
keras.src.ops.numpy.Cumsum.call(self,x)
keras.src.ops.numpy.Cumsum.compute_output_spec(self,x)
keras.src.ops.numpy.Diag(self,k=0)
keras.src.ops.numpy.Diag.__init__(self,k=0)
keras.src.ops.numpy.Diag.call(self,x)
keras.src.ops.numpy.Diag.compute_output_spec(self,x)
keras.src.ops.numpy.Diagonal(self,offset=0,axis1=0,axis2=1)
keras.src.ops.numpy.Diagonal.__init__(self,offset=0,axis1=0,axis2=1)
keras.src.ops.numpy.Diagonal.call(self,x)
keras.src.ops.numpy.Diagonal.compute_output_spec(self,x)
keras.src.ops.numpy.Diff(self,n=1,axis=-1)
keras.src.ops.numpy.Diff.__init__(self,n=1,axis=-1)
keras.src.ops.numpy.Diff.call(self,a)
keras.src.ops.numpy.Diff.compute_output_spec(self,a)
keras.src.ops.numpy.Digitize(Operation)
keras.src.ops.numpy.Digitize.call(self,x,bins)
keras.src.ops.numpy.Digitize.compute_output_spec(self,x,bins)
keras.src.ops.numpy.Divide(Operation)
keras.src.ops.numpy.Divide.call(self,x1,x2)
keras.src.ops.numpy.Divide.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.DivideNoNan(Operation)
keras.src.ops.numpy.DivideNoNan.call(self,x1,x2)
keras.src.ops.numpy.DivideNoNan.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.Dot(Operation)
keras.src.ops.numpy.Dot.call(self,x1,x2)
keras.src.ops.numpy.Dot.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.Einsum(self,subscripts)
keras.src.ops.numpy.Einsum.__init__(self,subscripts)
keras.src.ops.numpy.Einsum.call(self,*operands)
keras.src.ops.numpy.Einsum.compute_output_spec(self,*operands)
keras.src.ops.numpy.Empty(Operation)
keras.src.ops.numpy.Empty.call(self,shape,dtype=None)
keras.src.ops.numpy.Empty.compute_output_spec(self,shape,dtype=None)
keras.src.ops.numpy.Equal(Operation)
keras.src.ops.numpy.Equal.call(self,x1,x2)
keras.src.ops.numpy.Equal.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.Exp(Operation)
keras.src.ops.numpy.Exp.call(self,x)
keras.src.ops.numpy.Exp.compute_output_spec(self,x)
keras.src.ops.numpy.ExpandDims(self,axis)
keras.src.ops.numpy.ExpandDims.__init__(self,axis)
keras.src.ops.numpy.ExpandDims.call(self,x)
keras.src.ops.numpy.ExpandDims.compute_output_spec(self,x)
keras.src.ops.numpy.Expm1(Operation)
keras.src.ops.numpy.Expm1.call(self,x)
keras.src.ops.numpy.Expm1.compute_output_spec(self,x)
keras.src.ops.numpy.Eye(Operation)
keras.src.ops.numpy.Eye.call(self,N,M=None,k=0,dtype=None)
keras.src.ops.numpy.Eye.compute_output_spec(self,N,M=None,k=0,dtype=None)
keras.src.ops.numpy.Flip(self,axis=None)
keras.src.ops.numpy.Flip.__init__(self,axis=None)
keras.src.ops.numpy.Flip.call(self,x)
keras.src.ops.numpy.Flip.compute_output_spec(self,x)
keras.src.ops.numpy.Floor(Operation)
keras.src.ops.numpy.Floor.call(self,x)
keras.src.ops.numpy.Floor.compute_output_spec(self,x)
keras.src.ops.numpy.FloorDivide(Operation)
keras.src.ops.numpy.FloorDivide.call(self,x1,x2)
keras.src.ops.numpy.FloorDivide.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.Full(Operation)
keras.src.ops.numpy.Full.call(self,shape,fill_value,dtype=None)
keras.src.ops.numpy.Full.compute_output_spec(self,shape,fill_value,dtype=None)
keras.src.ops.numpy.FullLike(Operation)
keras.src.ops.numpy.FullLike.call(self,x,fill_value,dtype=None)
keras.src.ops.numpy.FullLike.compute_output_spec(self,x,fill_value,dtype=None)
keras.src.ops.numpy.GetItem(Operation)
keras.src.ops.numpy.GetItem.call(self,x,key)
keras.src.ops.numpy.GetItem.compute_output_spec(self,x,key)
keras.src.ops.numpy.Greater(Operation)
keras.src.ops.numpy.Greater.call(self,x1,x2)
keras.src.ops.numpy.Greater.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.GreaterEqual(Operation)
keras.src.ops.numpy.GreaterEqual.call(self,x1,x2)
keras.src.ops.numpy.GreaterEqual.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.Hstack(Operation)
keras.src.ops.numpy.Hstack.call(self,xs)
keras.src.ops.numpy.Hstack.compute_output_spec(self,xs)
keras.src.ops.numpy.Identity(Operation)
keras.src.ops.numpy.Identity.call(self,n,dtype=None)
keras.src.ops.numpy.Identity.compute_output_spec(self,n,dtype=None)
keras.src.ops.numpy.Imag(Operation)
keras.src.ops.numpy.Imag.call(self,x)
keras.src.ops.numpy.Imag.compute_output_spec(self,x)
keras.src.ops.numpy.Isclose(Operation)
keras.src.ops.numpy.Isclose.call(self,x1,x2)
keras.src.ops.numpy.Isclose.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.Isfinite(Operation)
keras.src.ops.numpy.Isfinite.call(self,x)
keras.src.ops.numpy.Isfinite.compute_output_spec(self,x)
keras.src.ops.numpy.Isinf(Operation)
keras.src.ops.numpy.Isinf.call(self,x)
keras.src.ops.numpy.Isinf.compute_output_spec(self,x)
keras.src.ops.numpy.Isnan(Operation)
keras.src.ops.numpy.Isnan.call(self,x)
keras.src.ops.numpy.Isnan.compute_output_spec(self,x)
keras.src.ops.numpy.Less(Operation)
keras.src.ops.numpy.Less.call(self,x1,x2)
keras.src.ops.numpy.Less.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.LessEqual(Operation)
keras.src.ops.numpy.LessEqual.call(self,x1,x2)
keras.src.ops.numpy.LessEqual.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.Linspace(self,num=50,endpoint=True,retstep=False,dtype=float,axis=0)
keras.src.ops.numpy.Linspace.__init__(self,num=50,endpoint=True,retstep=False,dtype=float,axis=0)
keras.src.ops.numpy.Linspace.call(self,start,stop)
keras.src.ops.numpy.Linspace.compute_output_spec(self,start,stop)
keras.src.ops.numpy.Log(Operation)
keras.src.ops.numpy.Log.call(self,x)
keras.src.ops.numpy.Log.compute_output_spec(self,x)
keras.src.ops.numpy.Log10(Operation)
keras.src.ops.numpy.Log10.call(self,x)
keras.src.ops.numpy.Log10.compute_output_spec(self,x)
keras.src.ops.numpy.Log1p(Operation)
keras.src.ops.numpy.Log1p.call(self,x)
keras.src.ops.numpy.Log1p.compute_output_spec(self,x)
keras.src.ops.numpy.Log2(Operation)
keras.src.ops.numpy.Log2.call(self,x)
keras.src.ops.numpy.Log2.compute_output_spec(self,x)
keras.src.ops.numpy.Logaddexp(Operation)
keras.src.ops.numpy.Logaddexp.call(self,x1,x2)
keras.src.ops.numpy.Logaddexp.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.LogicalAnd(Operation)
keras.src.ops.numpy.LogicalAnd.call(self,x1,x2)
keras.src.ops.numpy.LogicalAnd.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.LogicalNot(Operation)
keras.src.ops.numpy.LogicalNot.call(self,x)
keras.src.ops.numpy.LogicalNot.compute_output_spec(self,x)
keras.src.ops.numpy.LogicalOr(Operation)
keras.src.ops.numpy.LogicalOr.call(self,x1,x2)
keras.src.ops.numpy.LogicalOr.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.LogicalXor(Operation)
keras.src.ops.numpy.LogicalXor.call(self,x1,x2)
keras.src.ops.numpy.LogicalXor.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.Logspace(self,num=50,endpoint=True,base=10,dtype=float,axis=0)
keras.src.ops.numpy.Logspace.__init__(self,num=50,endpoint=True,base=10,dtype=float,axis=0)
keras.src.ops.numpy.Logspace.call(self,start,stop)
keras.src.ops.numpy.Logspace.compute_output_spec(self,start,stop)
keras.src.ops.numpy.Matmul(Operation)
keras.src.ops.numpy.Matmul.call(self,x1,x2)
keras.src.ops.numpy.Matmul.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.Max(self,axis=None,keepdims=False,initial=None)
keras.src.ops.numpy.Max.__init__(self,axis=None,keepdims=False,initial=None)
keras.src.ops.numpy.Max.call(self,x)
keras.src.ops.numpy.Max.compute_output_spec(self,x)
keras.src.ops.numpy.Maximum(Operation)
keras.src.ops.numpy.Maximum.call(self,x1,x2)
keras.src.ops.numpy.Maximum.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.Mean(self,axis=None,keepdims=False)
keras.src.ops.numpy.Mean.__init__(self,axis=None,keepdims=False)
keras.src.ops.numpy.Mean.call(self,x)
keras.src.ops.numpy.Mean.compute_output_spec(self,x)
keras.src.ops.numpy.Median(self,axis=None,keepdims=False)
keras.src.ops.numpy.Median.__init__(self,axis=None,keepdims=False)
keras.src.ops.numpy.Median.call(self,x)
keras.src.ops.numpy.Median.compute_output_spec(self,x)
keras.src.ops.numpy.Meshgrid(self,indexing='xy')
keras.src.ops.numpy.Meshgrid.__init__(self,indexing='xy')
keras.src.ops.numpy.Meshgrid.call(self,*x)
keras.src.ops.numpy.Meshgrid.compute_output_spec(self,*x)
keras.src.ops.numpy.Min(self,axis=None,keepdims=False,initial=None)
keras.src.ops.numpy.Min.__init__(self,axis=None,keepdims=False,initial=None)
keras.src.ops.numpy.Min.call(self,x)
keras.src.ops.numpy.Min.compute_output_spec(self,x)
keras.src.ops.numpy.Minimum(Operation)
keras.src.ops.numpy.Minimum.call(self,x1,x2)
keras.src.ops.numpy.Minimum.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.Mod(Operation)
keras.src.ops.numpy.Mod.call(self,x1,x2)
keras.src.ops.numpy.Mod.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.Moveaxis(self,source,destination)
keras.src.ops.numpy.Moveaxis.__init__(self,source,destination)
keras.src.ops.numpy.Moveaxis.call(self,x)
keras.src.ops.numpy.Moveaxis.compute_output_spec(self,x)
keras.src.ops.numpy.Multiply(Operation)
keras.src.ops.numpy.Multiply.call(self,x1,x2)
keras.src.ops.numpy.Multiply.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.NanToNum(Operation)
keras.src.ops.numpy.NanToNum.call(self,x)
keras.src.ops.numpy.Ndim(Operation)
keras.src.ops.numpy.Ndim.call(self,x)
keras.src.ops.numpy.Ndim.compute_output_spec(self,x)
keras.src.ops.numpy.Negative(Operation)
keras.src.ops.numpy.Negative.call(self,x)
keras.src.ops.numpy.Negative.compute_output_spec(self,x)
keras.src.ops.numpy.Nonzero(Operation)
keras.src.ops.numpy.Nonzero.call(self,x)
keras.src.ops.numpy.NotEqual(Operation)
keras.src.ops.numpy.NotEqual.call(self,x1,x2)
keras.src.ops.numpy.NotEqual.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.Ones(Operation)
keras.src.ops.numpy.Ones.call(self,shape,dtype=None)
keras.src.ops.numpy.Ones.compute_output_spec(self,shape,dtype=None)
keras.src.ops.numpy.OnesLike(Operation)
keras.src.ops.numpy.OnesLike.call(self,x,dtype=None)
keras.src.ops.numpy.OnesLike.compute_output_spec(self,x,dtype=None)
keras.src.ops.numpy.Outer(Operation)
keras.src.ops.numpy.Outer.call(self,x1,x2)
keras.src.ops.numpy.Outer.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.Pad(self,pad_width,mode='constant')
keras.src.ops.numpy.Pad.__init__(self,pad_width,mode='constant')
keras.src.ops.numpy.Pad._process_pad_width(self,pad_width)
keras.src.ops.numpy.Pad.call(self,x,constant_values=None)
keras.src.ops.numpy.Pad.compute_output_spec(self,x,constant_values=None)
keras.src.ops.numpy.Power(Operation)
keras.src.ops.numpy.Power.call(self,x1,x2)
keras.src.ops.numpy.Power.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.Prod(self,axis=None,keepdims=False,dtype=None)
keras.src.ops.numpy.Prod.__init__(self,axis=None,keepdims=False,dtype=None)
keras.src.ops.numpy.Prod.call(self,x)
keras.src.ops.numpy.Prod.compute_output_spec(self,x)
keras.src.ops.numpy.Quantile(self,axis=None,method='linear',keepdims=False)
keras.src.ops.numpy.Quantile.__init__(self,axis=None,method='linear',keepdims=False)
keras.src.ops.numpy.Quantile.call(self,x,q)
keras.src.ops.numpy.Quantile.compute_output_spec(self,x,q)
keras.src.ops.numpy.Ravel(Operation)
keras.src.ops.numpy.Ravel.call(self,x)
keras.src.ops.numpy.Ravel.compute_output_spec(self,x)
keras.src.ops.numpy.Real(Operation)
keras.src.ops.numpy.Real.call(self,x)
keras.src.ops.numpy.Real.compute_output_spec(self,x)
keras.src.ops.numpy.Reciprocal(Operation)
keras.src.ops.numpy.Reciprocal.call(self,x)
keras.src.ops.numpy.Reciprocal.compute_output_spec(self,x)
keras.src.ops.numpy.Repeat(self,repeats,axis=None)
keras.src.ops.numpy.Repeat.__init__(self,repeats,axis=None)
keras.src.ops.numpy.Repeat.call(self,x)
keras.src.ops.numpy.Repeat.compute_output_spec(self,x)
keras.src.ops.numpy.Reshape(self,newshape)
keras.src.ops.numpy.Reshape.__init__(self,newshape)
keras.src.ops.numpy.Reshape.call(self,x)
keras.src.ops.numpy.Reshape.compute_output_spec(self,x)
keras.src.ops.numpy.Roll(self,shift,axis=None)
keras.src.ops.numpy.Roll.__init__(self,shift,axis=None)
keras.src.ops.numpy.Roll.call(self,x)
keras.src.ops.numpy.Roll.compute_output_spec(self,x)
keras.src.ops.numpy.Round(self,decimals=0)
keras.src.ops.numpy.Round.__init__(self,decimals=0)
keras.src.ops.numpy.Round.call(self,x)
keras.src.ops.numpy.Round.compute_output_spec(self,x)
keras.src.ops.numpy.Sign(Operation)
keras.src.ops.numpy.Sign.call(self,x)
keras.src.ops.numpy.Sign.compute_output_spec(self,x)
keras.src.ops.numpy.Sin(Operation)
keras.src.ops.numpy.Sin.call(self,x)
keras.src.ops.numpy.Sin.compute_output_spec(self,x)
keras.src.ops.numpy.Sinh(Operation)
keras.src.ops.numpy.Sinh.call(self,x)
keras.src.ops.numpy.Sinh.compute_output_spec(self,x)
keras.src.ops.numpy.Size(Operation)
keras.src.ops.numpy.Size.call(self,x)
keras.src.ops.numpy.Size.compute_output_spec(self,x)
keras.src.ops.numpy.Sort(self,axis=-1)
keras.src.ops.numpy.Sort.__init__(self,axis=-1)
keras.src.ops.numpy.Sort.call(self,x)
keras.src.ops.numpy.Sort.compute_output_spec(self,x)
keras.src.ops.numpy.Split(self,indices_or_sections,axis=0)
keras.src.ops.numpy.Split.__init__(self,indices_or_sections,axis=0)
keras.src.ops.numpy.Split.call(self,x)
keras.src.ops.numpy.Split.compute_output_spec(self,x)
keras.src.ops.numpy.Sqrt(Operation)
keras.src.ops.numpy.Sqrt.call(self,x)
keras.src.ops.numpy.Sqrt.compute_output_spec(self,x)
keras.src.ops.numpy.Square(Operation)
keras.src.ops.numpy.Square.call(self,x)
keras.src.ops.numpy.Square.compute_output_spec(self,x)
keras.src.ops.numpy.Squeeze(self,axis=None)
keras.src.ops.numpy.Squeeze.__init__(self,axis=None)
keras.src.ops.numpy.Squeeze.call(self,x)
keras.src.ops.numpy.Squeeze.compute_output_spec(self,x)
keras.src.ops.numpy.Stack(self,axis=0)
keras.src.ops.numpy.Stack.__init__(self,axis=0)
keras.src.ops.numpy.Stack.call(self,xs)
keras.src.ops.numpy.Stack.compute_output_spec(self,xs)
keras.src.ops.numpy.Std(self,axis=None,keepdims=False)
keras.src.ops.numpy.Std.__init__(self,axis=None,keepdims=False)
keras.src.ops.numpy.Std.call(self,x)
keras.src.ops.numpy.Std.compute_output_spec(self,x)
keras.src.ops.numpy.Subtract(Operation)
keras.src.ops.numpy.Subtract.call(self,x1,x2)
keras.src.ops.numpy.Subtract.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.Sum(self,axis=None,keepdims=False)
keras.src.ops.numpy.Sum.__init__(self,axis=None,keepdims=False)
keras.src.ops.numpy.Sum.call(self,x)
keras.src.ops.numpy.Sum.compute_output_spec(self,x)
keras.src.ops.numpy.Swapaxes(self,axis1,axis2)
keras.src.ops.numpy.Swapaxes.__init__(self,axis1,axis2)
keras.src.ops.numpy.Swapaxes.call(self,x)
keras.src.ops.numpy.Swapaxes.compute_output_spec(self,x)
keras.src.ops.numpy.Take(self,axis=None)
keras.src.ops.numpy.Take.__init__(self,axis=None)
keras.src.ops.numpy.Take.call(self,x,indices)
keras.src.ops.numpy.Take.compute_output_spec(self,x,indices)
keras.src.ops.numpy.TakeAlongAxis(self,axis=None)
keras.src.ops.numpy.TakeAlongAxis.__init__(self,axis=None)
keras.src.ops.numpy.TakeAlongAxis.call(self,x,indices)
keras.src.ops.numpy.TakeAlongAxis.compute_output_spec(self,x,indices)
keras.src.ops.numpy.Tan(Operation)
keras.src.ops.numpy.Tan.call(self,x)
keras.src.ops.numpy.Tan.compute_output_spec(self,x)
keras.src.ops.numpy.Tanh(Operation)
keras.src.ops.numpy.Tanh.call(self,x)
keras.src.ops.numpy.Tanh.compute_output_spec(self,x)
keras.src.ops.numpy.Tensordot(self,axes=2)
keras.src.ops.numpy.Tensordot.__init__(self,axes=2)
keras.src.ops.numpy.Tensordot.call(self,x1,x2)
keras.src.ops.numpy.Tensordot.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.Tile(self,repeats)
keras.src.ops.numpy.Tile.__init__(self,repeats)
keras.src.ops.numpy.Tile.call(self,x)
keras.src.ops.numpy.Tile.compute_output_spec(self,x)
keras.src.ops.numpy.Trace(self,offset=0,axis1=0,axis2=1)
keras.src.ops.numpy.Trace.__init__(self,offset=0,axis1=0,axis2=1)
keras.src.ops.numpy.Trace.call(self,x)
keras.src.ops.numpy.Trace.compute_output_spec(self,x)
keras.src.ops.numpy.Transpose(self,axes=None)
keras.src.ops.numpy.Transpose.__init__(self,axes=None)
keras.src.ops.numpy.Transpose.call(self,x)
keras.src.ops.numpy.Transpose.compute_output_spec(self,x)
keras.src.ops.numpy.Tri(Operation)
keras.src.ops.numpy.Tri.call(self,N,M=None,k=0,dtype=None)
keras.src.ops.numpy.Tri.compute_output_spec(self,N,M=None,k=0,dtype=None)
keras.src.ops.numpy.Tril(self,k=0)
keras.src.ops.numpy.Tril.__init__(self,k=0)
keras.src.ops.numpy.Tril.call(self,x)
keras.src.ops.numpy.Tril.compute_output_spec(self,x)
keras.src.ops.numpy.Triu(self,k=0)
keras.src.ops.numpy.Triu.__init__(self,k=0)
keras.src.ops.numpy.Triu.call(self,x)
keras.src.ops.numpy.Triu.compute_output_spec(self,x)
keras.src.ops.numpy.TrueDivide(Operation)
keras.src.ops.numpy.TrueDivide.call(self,x1,x2)
keras.src.ops.numpy.TrueDivide.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.Var(self,axis=None,keepdims=False)
keras.src.ops.numpy.Var.__init__(self,axis=None,keepdims=False)
keras.src.ops.numpy.Var.call(self,x)
keras.src.ops.numpy.Var.compute_output_spec(self,x)
keras.src.ops.numpy.Vdot(Operation)
keras.src.ops.numpy.Vdot.call(self,x1,x2)
keras.src.ops.numpy.Vdot.compute_output_spec(self,x1,x2)
keras.src.ops.numpy.Vstack(Operation)
keras.src.ops.numpy.Vstack.call(self,xs)
keras.src.ops.numpy.Vstack.compute_output_spec(self,xs)
keras.src.ops.numpy.Where(Operation)
keras.src.ops.numpy.Where.call(self,condition,x1=None,x2=None)
keras.src.ops.numpy.Where.compute_output_spec(self,condition,x1,x2)
keras.src.ops.numpy.Zeros(Operation)
keras.src.ops.numpy.Zeros.call(self,shape,dtype=None)
keras.src.ops.numpy.Zeros.compute_output_spec(self,shape,dtype=None)
keras.src.ops.numpy.ZerosLike(Operation)
keras.src.ops.numpy.ZerosLike.call(self,x,dtype=None)
keras.src.ops.numpy.ZerosLike.compute_output_spec(self,x,dtype=None)
keras.src.ops.numpy.abs(x)
keras.src.ops.numpy.absolute(x)
keras.src.ops.numpy.add(x1,x2)
keras.src.ops.numpy.all(x,axis=None,keepdims=False)
keras.src.ops.numpy.amax(x,axis=None,keepdims=False)
keras.src.ops.numpy.amin(x,axis=None,keepdims=False)
keras.src.ops.numpy.any(x,axis=None,keepdims=False)
keras.src.ops.numpy.append(x1,x2,axis=None)
keras.src.ops.numpy.arange(start,stop=None,step=1,dtype=None)
keras.src.ops.numpy.arccos(x)
keras.src.ops.numpy.arccosh(x)
keras.src.ops.numpy.arcsin(x)
keras.src.ops.numpy.arcsinh(x)
keras.src.ops.numpy.arctan(x)
keras.src.ops.numpy.arctan2(x1,x2)
keras.src.ops.numpy.arctanh(x)
keras.src.ops.numpy.argmax(x,axis=None)
keras.src.ops.numpy.argmin(x,axis=None)
keras.src.ops.numpy.argsort(x,axis=-1)
keras.src.ops.numpy.array(x,dtype=None)
keras.src.ops.numpy.average(x,axis=None,weights=None)
keras.src.ops.numpy.bincount(x,weights=None,minlength=0)
keras.src.ops.numpy.broadcast_to(x,shape)
keras.src.ops.numpy.ceil(x)
keras.src.ops.numpy.clip(x,x_min,x_max)
keras.src.ops.numpy.concatenate(xs,axis=0)
keras.src.ops.numpy.conj(x)
keras.src.ops.numpy.conjugate(x)
keras.src.ops.numpy.copy(x)
keras.src.ops.numpy.cos(x)
keras.src.ops.numpy.cosh(x)
keras.src.ops.numpy.count_nonzero(x,axis=None)
keras.src.ops.numpy.cross(x1,x2,axisa=-1,axisb=-1,axisc=-1,axis=None)
keras.src.ops.numpy.cumprod(x,axis=None,dtype=None)
keras.src.ops.numpy.cumsum(x,axis=None,dtype=None)
keras.src.ops.numpy.diag(x,k=0)
keras.src.ops.numpy.diagonal(x,offset=0,axis1=0,axis2=1)
keras.src.ops.numpy.diff(a,n=1,axis=-1)
keras.src.ops.numpy.digitize(x,bins)
keras.src.ops.numpy.divide(x1,x2)
keras.src.ops.numpy.divide_no_nan(x1,x2)
keras.src.ops.numpy.dot(x1,x2)
keras.src.ops.numpy.einsum(subscripts,*operands)
keras.src.ops.numpy.empty(shape,dtype=None)
keras.src.ops.numpy.equal(x1,x2)
keras.src.ops.numpy.exp(x)
keras.src.ops.numpy.expand_dims(x,axis)
keras.src.ops.numpy.expm1(x)
keras.src.ops.numpy.eye(N,M=None,k=0,dtype=None)
keras.src.ops.numpy.flip(x,axis=None)
keras.src.ops.numpy.floor(x)
keras.src.ops.numpy.floor_divide(x1,x2)
keras.src.ops.numpy.full(shape,fill_value,dtype=None)
keras.src.ops.numpy.full_like(x,fill_value,dtype=None)
keras.src.ops.numpy.get_item(x,key)
keras.src.ops.numpy.greater(x1,x2)
keras.src.ops.numpy.greater_equal(x1,x2)
keras.src.ops.numpy.hstack(xs)
keras.src.ops.numpy.identity(n,dtype=None)
keras.src.ops.numpy.imag(x)
keras.src.ops.numpy.isclose(x1,x2)
keras.src.ops.numpy.isfinite(x)
keras.src.ops.numpy.isinf(x)
keras.src.ops.numpy.isnan(x)
keras.src.ops.numpy.less(x1,x2)
keras.src.ops.numpy.less_equal(x1,x2)
keras.src.ops.numpy.linspace(start,stop,num=50,endpoint=True,retstep=False,dtype=None,axis=0)
keras.src.ops.numpy.log(x)
keras.src.ops.numpy.log10(x)
keras.src.ops.numpy.log1p(x)
keras.src.ops.numpy.log2(x)
keras.src.ops.numpy.logaddexp(x1,x2)
keras.src.ops.numpy.logical_and(x1,x2)
keras.src.ops.numpy.logical_not(x)
keras.src.ops.numpy.logical_or(x1,x2)
keras.src.ops.numpy.logical_xor(x1,x2)
keras.src.ops.numpy.logspace(start,stop,num=50,endpoint=True,base=10,dtype=None,axis=0)
keras.src.ops.numpy.matmul(x1,x2)
keras.src.ops.numpy.max(x,axis=None,keepdims=False,initial=None)
keras.src.ops.numpy.maximum(x1,x2)
keras.src.ops.numpy.mean(x,axis=None,keepdims=False)
keras.src.ops.numpy.median(x,axis=None,keepdims=False)
keras.src.ops.numpy.meshgrid(*x,indexing='xy')
keras.src.ops.numpy.min(x,axis=None,keepdims=False,initial=None)
keras.src.ops.numpy.minimum(x1,x2)
keras.src.ops.numpy.mod(x1,x2)
keras.src.ops.numpy.moveaxis(x,source,destination)
keras.src.ops.numpy.multiply(x1,x2)
keras.src.ops.numpy.nan_to_num(x)
keras.src.ops.numpy.ndim(x)
keras.src.ops.numpy.negative(x)
keras.src.ops.numpy.nonzero(x)
keras.src.ops.numpy.not_equal(x1,x2)
keras.src.ops.numpy.ones(shape,dtype=None)
keras.src.ops.numpy.ones_like(x,dtype=None)
keras.src.ops.numpy.outer(x1,x2)
keras.src.ops.numpy.pad(x,pad_width,mode='constant',constant_values=None)
keras.src.ops.numpy.power(x1,x2)
keras.src.ops.numpy.prod(x,axis=None,keepdims=False,dtype=None)
keras.src.ops.numpy.quantile(x,q,axis=None,method='linear',keepdims=False)
keras.src.ops.numpy.ravel(x)
keras.src.ops.numpy.real(x)
keras.src.ops.numpy.reciprocal(x)
keras.src.ops.numpy.repeat(x,repeats,axis=None)
keras.src.ops.numpy.reshape(x,newshape)
keras.src.ops.numpy.roll(x,shift,axis=None)
keras.src.ops.numpy.round(x,decimals=0)
keras.src.ops.numpy.shape_equal(shape1,shape2,axis=None,allow_none=True)
keras.src.ops.numpy.sign(x)
keras.src.ops.numpy.sin(x)
keras.src.ops.numpy.sinh(x)
keras.src.ops.numpy.size(x)
keras.src.ops.numpy.sort(x,axis=-1)
keras.src.ops.numpy.split(x,indices_or_sections,axis=0)
keras.src.ops.numpy.sqrt(x)
keras.src.ops.numpy.square(x)
keras.src.ops.numpy.squeeze(x,axis=None)
keras.src.ops.numpy.stack(x,axis=0)
keras.src.ops.numpy.std(x,axis=None,keepdims=False)
keras.src.ops.numpy.subtract(x1,x2)
keras.src.ops.numpy.sum(x,axis=None,keepdims=False)
keras.src.ops.numpy.swapaxes(x,axis1,axis2)
keras.src.ops.numpy.take(x,indices,axis=None)
keras.src.ops.numpy.take_along_axis(x,indices,axis=None)
keras.src.ops.numpy.tan(x)
keras.src.ops.numpy.tanh(x)
keras.src.ops.numpy.tensordot(x1,x2,axes=2)
keras.src.ops.numpy.tile(x,repeats)
keras.src.ops.numpy.trace(x,offset=0,axis1=0,axis2=1)
keras.src.ops.numpy.transpose(x,axes=None)
keras.src.ops.numpy.tri(N,M=None,k=0,dtype=None)
keras.src.ops.numpy.tril(x,k=0)
keras.src.ops.numpy.triu(x,k=0)
keras.src.ops.numpy.true_divide(x1,x2)
keras.src.ops.numpy.var(x,axis=None,keepdims=False)
keras.src.ops.numpy.vdot(x1,x2)
keras.src.ops.numpy.vstack(xs)
keras.src.ops.numpy.where(condition,x1=None,x2=None)
keras.src.ops.numpy.zeros(shape,dtype=None)
keras.src.ops.numpy.zeros_like(x,dtype=None)
keras.src.ops.ones(shape,dtype=None)
keras.src.ops.ones_like(x,dtype=None)
keras.src.ops.outer(x1,x2)
keras.src.ops.pad(x,pad_width,mode='constant',constant_values=None)
keras.src.ops.power(x1,x2)
keras.src.ops.prod(x,axis=None,keepdims=False,dtype=None)
keras.src.ops.quantile(x,q,axis=None,method='linear',keepdims=False)
keras.src.ops.ravel(x)
keras.src.ops.real(x)
keras.src.ops.reciprocal(x)
keras.src.ops.repeat(x,repeats,axis=None)
keras.src.ops.reshape(x,newshape)
keras.src.ops.roll(x,shift,axis=None)
keras.src.ops.round(x,decimals=0)
keras.src.ops.shape_equal(shape1,shape2,axis=None,allow_none=True)
keras.src.ops.sign(x)
keras.src.ops.sin(x)
keras.src.ops.sinh(x)
keras.src.ops.size(x)
keras.src.ops.sort(x,axis=-1)
keras.src.ops.split(x,indices_or_sections,axis=0)
keras.src.ops.sqrt(x)
keras.src.ops.square(x)
keras.src.ops.squeeze(x,axis=None)
keras.src.ops.stack(x,axis=0)
keras.src.ops.std(x,axis=None,keepdims=False)
keras.src.ops.subtract(x1,x2)
keras.src.ops.sum(x,axis=None,keepdims=False)
keras.src.ops.swapaxes(x,axis1,axis2)
keras.src.ops.take(x,indices,axis=None)
keras.src.ops.take_along_axis(x,indices,axis=None)
keras.src.ops.tan(x)
keras.src.ops.tanh(x)
keras.src.ops.tensordot(x1,x2,axes=2)
keras.src.ops.tile(x,repeats)
keras.src.ops.trace(x,offset=0,axis1=0,axis2=1)
keras.src.ops.transpose(x,axes=None)
keras.src.ops.tri(N,M=None,k=0,dtype=None)
keras.src.ops.tril(x,k=0)
keras.src.ops.triu(x,k=0)
keras.src.ops.true_divide(x1,x2)
keras.src.ops.var(x,axis=None,keepdims=False)
keras.src.ops.vdot(x1,x2)
keras.src.ops.vstack(xs)
keras.src.ops.where(condition,x1=None,x2=None)
keras.src.ops.zeros(shape,dtype=None)
keras.src.ops.zeros_like(x,dtype=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/ops/operation_utils.py----------------------------------------
A:keras.src.ops.operation_utils.shape1->list(shape1)
A:keras.src.ops.operation_utils.shape2->list(shape2)
A:keras.src.ops.operation_utils.output_shape->list(newshape)
A:keras.src.ops.operation_utils.input_shape->list(input_shape)
A:keras.src.ops.operation_utils.axis->to_tuple_or_list(axis)
A:keras.src.ops.operation_utils.shape_iter->iter(input_shape)
A:keras.src.ops.operation_utils.input_shape_origin->list(input_shape)
A:keras.src.ops.operation_utils.pool_size->numpy.array(pool_size)
A:keras.src.ops.operation_utils.output_spatial_shape->tuple(output_spatial_shape)
A:keras.src.ops.operation_utils.spatial_shape->numpy.array(spatial_shape)
A:keras.src.ops.operation_utils.kernel_spatial_shape->numpy.array(kernel_shape[:-2])
A:keras.src.ops.operation_utils.dilation_rate->numpy.array(dilation_rate)
A:keras.src.ops.operation_utils.leading_shape->broadcast_shapes(shape1[:-2], shape2[:-2])
A:keras.src.ops.operation_utils.unknown_dim_count->newshape.count(-1)
A:keras.src.ops.operation_utils.input_size->math.prod(input_shape)
A:keras.src.ops.operation_utils.shape->list(shape)
A:keras.src.ops.operation_utils.previous_sources->get_source_inputs(tensor)
keras.src.ops.operation_utils.broadcast_shapes(shape1,shape2)
keras.src.ops.operation_utils.compute_conv_output_shape(input_shape,filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1)
keras.src.ops.operation_utils.compute_expand_dims_output_shape(input_shape,axis)
keras.src.ops.operation_utils.compute_matmul_output_shape(shape1,shape2)
keras.src.ops.operation_utils.compute_pooling_output_shape(input_shape,pool_size,strides,padding='valid',data_format='channels_last')
keras.src.ops.operation_utils.compute_reshape_output_shape(input_shape,newshape,newshape_arg_name)
keras.src.ops.operation_utils.compute_transpose_output_shape(input_shape,axes)
keras.src.ops.operation_utils.get_source_inputs(tensor)
keras.src.ops.operation_utils.reduce_shape(shape,axis=None,keepdims=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/ops/linalg.py----------------------------------------
A:keras.src.ops.linalg.x->keras.src.backend.convert_to_tensor(x)
A:keras.src.ops.linalg.k->min(m, n)
A:keras.src.ops.linalg.output_dtype->keras.src.backend.floatx()
A:keras.src.ops.linalg.axis->tuple(range(len(x.shape)))
A:keras.src.ops.linalg.num_axes->len(axis)
A:keras.src.ops.linalg.base->tuple(x.shape[:-2])
A:keras.src.ops.linalg.a->keras.src.backend.convert_to_tensor(a)
A:keras.src.ops.linalg.b->keras.src.backend.convert_to_tensor(b)
keras.src.ops.Cholesky(self)
keras.src.ops.Cholesky.call(self,x)
keras.src.ops.Cholesky.compute_output_spec(self,x)
keras.src.ops.Det(self)
keras.src.ops.Det.call(self,x)
keras.src.ops.Det.compute_output_spec(self,x)
keras.src.ops.Eig(self)
keras.src.ops.Eig.call(self,x)
keras.src.ops.Eig.compute_output_spec(self,x)
keras.src.ops.Inv(self)
keras.src.ops.Inv.call(self,x)
keras.src.ops.Inv.compute_output_spec(self,x)
keras.src.ops.LuFactor(self)
keras.src.ops.LuFactor.call(self,x)
keras.src.ops.LuFactor.compute_output_spec(self,x)
keras.src.ops.Norm(self,ord=None,axis=None,keepdims=False)
keras.src.ops.Norm.call(self,x)
keras.src.ops.Norm.compute_output_spec(self,x)
keras.src.ops.Qr(self,mode='reduced')
keras.src.ops.Qr.call(self,x)
keras.src.ops.Qr.compute_output_spec(self,x)
keras.src.ops.SVD(self,full_matrices=True,compute_uv=True)
keras.src.ops.SVD.call(self,x)
keras.src.ops.SVD.compute_output_spec(self,x)
keras.src.ops.Solve(self)
keras.src.ops.Solve.call(self,a,b)
keras.src.ops.Solve.compute_output_spec(self,a,b)
keras.src.ops.SolveTriangular(self,lower=False)
keras.src.ops.SolveTriangular.call(self,a,b)
keras.src.ops.SolveTriangular.compute_output_spec(self,a,b)
keras.src.ops._assert_1d(*arrays)
keras.src.ops._assert_2d(*arrays)
keras.src.ops._assert_a_b_compat(a,b)
keras.src.ops._assert_square(*arrays)
keras.src.ops._cholesky(x)
keras.src.ops._det(x)
keras.src.ops._eig(x)
keras.src.ops._inv(x)
keras.src.ops._lu_factor(x)
keras.src.ops._solve(a,b)
keras.src.ops._solve_triangular(a,b,lower=False)
keras.src.ops._svd(x,full_matrices=True,compute_uv=True)
keras.src.ops.cholesky(x)
keras.src.ops.det(x)
keras.src.ops.eig(x)
keras.src.ops.inv(x)
keras.src.ops.linalg.Cholesky(self)
keras.src.ops.linalg.Cholesky.__init__(self)
keras.src.ops.linalg.Cholesky.call(self,x)
keras.src.ops.linalg.Cholesky.compute_output_spec(self,x)
keras.src.ops.linalg.Det(self)
keras.src.ops.linalg.Det.__init__(self)
keras.src.ops.linalg.Det.call(self,x)
keras.src.ops.linalg.Det.compute_output_spec(self,x)
keras.src.ops.linalg.Eig(self)
keras.src.ops.linalg.Eig.__init__(self)
keras.src.ops.linalg.Eig.call(self,x)
keras.src.ops.linalg.Eig.compute_output_spec(self,x)
keras.src.ops.linalg.Inv(self)
keras.src.ops.linalg.Inv.__init__(self)
keras.src.ops.linalg.Inv.call(self,x)
keras.src.ops.linalg.Inv.compute_output_spec(self,x)
keras.src.ops.linalg.LuFactor(self)
keras.src.ops.linalg.LuFactor.__init__(self)
keras.src.ops.linalg.LuFactor.call(self,x)
keras.src.ops.linalg.LuFactor.compute_output_spec(self,x)
keras.src.ops.linalg.Norm(self,ord=None,axis=None,keepdims=False)
keras.src.ops.linalg.Norm.__init__(self,ord=None,axis=None,keepdims=False)
keras.src.ops.linalg.Norm.call(self,x)
keras.src.ops.linalg.Norm.compute_output_spec(self,x)
keras.src.ops.linalg.Qr(self,mode='reduced')
keras.src.ops.linalg.Qr.__init__(self,mode='reduced')
keras.src.ops.linalg.Qr.call(self,x)
keras.src.ops.linalg.Qr.compute_output_spec(self,x)
keras.src.ops.linalg.SVD(self,full_matrices=True,compute_uv=True)
keras.src.ops.linalg.SVD.__init__(self,full_matrices=True,compute_uv=True)
keras.src.ops.linalg.SVD.call(self,x)
keras.src.ops.linalg.SVD.compute_output_spec(self,x)
keras.src.ops.linalg.Solve(self)
keras.src.ops.linalg.Solve.__init__(self)
keras.src.ops.linalg.Solve.call(self,a,b)
keras.src.ops.linalg.Solve.compute_output_spec(self,a,b)
keras.src.ops.linalg.SolveTriangular(self,lower=False)
keras.src.ops.linalg.SolveTriangular.__init__(self,lower=False)
keras.src.ops.linalg.SolveTriangular.call(self,a,b)
keras.src.ops.linalg.SolveTriangular.compute_output_spec(self,a,b)
keras.src.ops.linalg._assert_1d(*arrays)
keras.src.ops.linalg._assert_2d(*arrays)
keras.src.ops.linalg._assert_a_b_compat(a,b)
keras.src.ops.linalg._assert_square(*arrays)
keras.src.ops.linalg._cholesky(x)
keras.src.ops.linalg._det(x)
keras.src.ops.linalg._eig(x)
keras.src.ops.linalg._inv(x)
keras.src.ops.linalg._lu_factor(x)
keras.src.ops.linalg._solve(a,b)
keras.src.ops.linalg._solve_triangular(a,b,lower=False)
keras.src.ops.linalg._svd(x,full_matrices=True,compute_uv=True)
keras.src.ops.linalg.cholesky(x)
keras.src.ops.linalg.det(x)
keras.src.ops.linalg.eig(x)
keras.src.ops.linalg.inv(x)
keras.src.ops.linalg.lu_factor(x)
keras.src.ops.linalg.norm(x,ord=None,axis=None,keepdims=False)
keras.src.ops.linalg.qr(x,mode='reduced')
keras.src.ops.linalg.solve(a,b)
keras.src.ops.linalg.solve_triangular(a,b,lower=False)
keras.src.ops.linalg.svd(x,full_matrices=True,compute_uv=True)
keras.src.ops.lu_factor(x)
keras.src.ops.norm(x,ord=None,axis=None,keepdims=False)
keras.src.ops.qr(x,mode='reduced')
keras.src.ops.solve(a,b)
keras.src.ops.solve_triangular(a,b,lower=False)
keras.src.ops.svd(x,full_matrices=True,compute_uv=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/ops/node.py----------------------------------------
A:keras.src.ops.node.self.arguments->SymbolicArguments(*call_args, **call_kwargs)
A:keras.src.ops.node.zero_history->any((not x.record_history for x in self.arguments.keras_tensors))
A:keras.src.ops.node.tensor._keras_history->KerasHistory(operation=operation, node_index=node_index, tensor_index=i)
keras.src.ops.node.KerasHistory(collections.namedtuple('KerasHistory',['operation','node_index','tensor_index']))
keras.src.ops.node.Node(self,operation,call_args=None,call_kwargs=None,outputs=None)
keras.src.ops.node.Node.__init__(self,operation,call_args=None,call_kwargs=None,outputs=None)
keras.src.ops.node.Node.__repr__(self)
keras.src.ops.node.Node.input_tensors(self)
keras.src.ops.node.Node.output_tensors(self)
keras.src.ops.node.Node.parent_nodes(self)
keras.src.ops.node.is_keras_tensor(obj)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/ops/symbolic_arguments.py----------------------------------------
A:keras.src.ops.symbolic_arguments.self.args->keras.src.utils.tree.map_structure(lambda x: x, args)
A:keras.src.ops.symbolic_arguments.self.kwargs->keras.src.utils.tree.map_structure(lambda x: x, kwargs)
A:keras.src.ops.symbolic_arguments.self._flat_arguments->keras.src.utils.tree.flatten((self.args, self.kwargs))
A:keras.src.ops.symbolic_arguments.args->keras.src.utils.tree.map_structure(conversion_fn, self.args)
A:keras.src.ops.symbolic_arguments.kwargs->keras.src.utils.tree.map_structure(conversion_fn, self.kwargs)
A:keras.src.ops.symbolic_arguments.val->tensor_dict.get(id(x), None)
keras.src.ops.symbolic_arguments.SymbolicArguments(self,*args,**kwargs)
keras.src.ops.symbolic_arguments.SymbolicArguments.__init__(self,*args,**kwargs)
keras.src.ops.symbolic_arguments.SymbolicArguments.convert(self,conversion_fn)
keras.src.ops.symbolic_arguments.SymbolicArguments.fill_in(self,tensor_dict)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/ops/function.py----------------------------------------
A:keras.src.ops.function._self_setattr_tracking->getattr(self, '_self_setattr_tracking', True)
A:keras.src.ops.function.self._inputs_struct->keras.src.utils.tree.map_structure(lambda x: x, inputs)
A:keras.src.ops.function.self._outputs_struct->keras.src.utils.tree.map_structure(lambda x: x, outputs)
A:keras.src.ops.function.self._inputs->keras.src.utils.tree.flatten(inputs)
A:keras.src.ops.function.self._outputs->keras.src.utils.tree.flatten(outputs)
A:keras.src.ops.function.(nodes, nodes_by_depth, operations, operations_by_depth)->map_graph(self._inputs, self._outputs)
A:keras.src.ops.function.inputs->keras.src.utils.tree.flatten(inputs)
A:keras.src.ops.function.depth_keys->list(nodes_by_depth.keys())
A:keras.src.ops.function.(args, kwargs)->node.arguments.fill_in(tensor_dict)
A:keras.src.ops.function.outputs->operation_fn(node.operation)(*args, **kwargs)
A:keras.src.ops.function.(nodes_in_decreasing_depth, operation_indices)->_build_map(inputs, outputs)
A:keras.src.ops.function.depth->max(depth, previous_depth)
A:keras.src.ops.function.previous_depth->nodes_depths.get(node_dep, 0)
A:keras.src.ops.function.nodes_depths[node_dep]->max(depth + 1, previous_depth)
A:keras.src.ops.function.nodes_by_depth->collections.defaultdict(list)
A:keras.src.ops.function.operations_by_depth->collections.defaultdict(list)
A:keras.src.ops.function.computable_tensors->set()
A:keras.src.ops.function.finished_nodes->set()
A:keras.src.ops.function.nodes_in_progress->set()
A:keras.src.ops.function.operation_indices[operation]->len(operation_indices)
keras.Function(self,inputs,outputs,name=None)
keras.Function._assert_input_compatibility(self,inputs)
keras.Function._run_through_graph(self,inputs,operation_fn)
keras.Function.call(self,inputs)
keras.Function.compute_output_spec(self,inputs)
keras.Function.inputs(self)
keras.Function.operations(self)
keras.Function.outputs(self)
keras.src.ops.function.Function(self,inputs,outputs,name=None)
keras.src.ops.function.Function.__init__(self,inputs,outputs,name=None)
keras.src.ops.function.Function._assert_input_compatibility(self,inputs)
keras.src.ops.function.Function._run_through_graph(self,inputs,operation_fn)
keras.src.ops.function.Function.call(self,inputs)
keras.src.ops.function.Function.compute_output_spec(self,inputs)
keras.src.ops.function.Function.inputs(self)
keras.src.ops.function.Function.operations(self)
keras.src.ops.function.Function.outputs(self)
keras.src.ops.function._build_map(inputs,outputs)
keras.src.ops.function._build_map_helper(inputs,tensor,finished_nodes,nodes_in_progress,nodes_in_decreasing_depth,operation_indices)
keras.src.ops.function.make_node_key(op,node_index)
keras.src.ops.function.map_graph(inputs,outputs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/models/functional.py----------------------------------------
A:keras.src.models.functional.trainable->config.get('trainable')
A:keras.src.models.functional.(inputs, outputs)->clone_graph_nodes(inputs, outputs)
A:keras.src.models.functional.inputs->self._standardize_inputs(inputs)
A:keras.src.models.functional.masks->self._flatten_to_reference_inputs(mask)
A:keras.src.models.functional.outputs->self._run_through_graph(inputs, operation_fn=lambda op: operation_fn(op, training=training))
A:keras.src.models.functional.input_shapes->keras.src.utils.tree.map_structure(lambda x: x.shape, self.inputs)
A:keras.src.models.functional.output_shapes->keras.src.utils.tree.map_structure(lambda x: x.shape, self.outputs)
A:keras.src.models.functional.ref_input_names->sorted(ref_inputs.keys())
A:keras.src.models.functional.x_rank->len(x.shape)
A:keras.src.models.functional.ref_rank->len(ref_shape)
A:keras.src.models.functional.flat_inputs->self._convert_inputs_to_tensors(flat_inputs)
A:keras.src.models.functional.x->list(x)
A:keras.src.models.functional.names->sorted(self._inputs_struct.keys())
A:keras.src.models.functional.node_key->make_node_key(operation, node_index)
A:keras.src.models.functional.node_data->serialize_node(node, node_reindexing_map)
A:keras.src.models.functional.layer_config->serialize_obj_fn(operation)
A:keras.src.models.functional.config['input_layers']->map_tensors(self._inputs_struct)
A:keras.src.models.functional.config['output_layers']->map_tensors(self._outputs_struct)
A:keras.src.models.functional.(args, kwargs)->deserialize_node(node_data, created_layers)
A:keras.src.models.functional.layer->created_layers.get(history[0], None)
A:keras.src.models.functional.name->config.get('name')
A:keras.src.models.functional.input_tensors->map_tensors(config['input_layers'])
A:keras.src.models.functional.output_tensors->map_tensors(config['output_layers'])
A:keras.src.models.functional.args->keras.src.utils.tree.map_structure(convert_revived_tensor, args)
A:keras.src.models.functional.kwargs->keras.src.utils.tree.map_structure(convert_revived_tensor, kwargs)
A:keras.src.models.functional.new_x->clone_single_keras_tensor(x)
A:keras.src.models.functional.(nodes, _)->_build_map(inputs, outputs)
A:keras.src.models.functional.nodes_to_clone->find_nodes_by_inputs_and_outputs(inputs, outputs)
A:keras.src.models.functional.cloned_input->Input(batch_shape=kt_input.shape, dtype=kt_input.dtype, sparse=kt_input.sparse, name=kt_input.name + 'CLONE')
A:keras.src.models.functional.cloned_inputs->keras.src.utils.tree.pack_sequence_as(inputs, cloned_inputs)
A:keras.src.models.functional.cpy->clone_single_keras_tensor(kt_output)
A:keras.src.models.functional.cloned_outputs->keras.src.utils.tree.pack_sequence_as(outputs, cloned_outputs)
A:keras.src.models.functional.output_copy->clone_keras_tensors(node.output_tensors, kt_id_mapping)
A:keras.src.models.functional.call_args_copy->clone_keras_tensors(node.arguments.args, kt_id_mapping)
A:keras.src.models.functional.call_kwargs_copy->clone_keras_tensors(node.arguments.kwargs, kt_id_mapping)
keras.src.Functional(self,inputs,outputs,name=None,**kwargs)
keras.src.Functional._adjust_input_rank(self,flat_inputs)
keras.src.Functional._assert_input_compatibility(self,*args)
keras.src.Functional._convert_inputs_to_tensors(self,flat_inputs)
keras.src.Functional._flatten_to_reference_inputs(self,inputs,allow_extra_keys=True)
keras.src.Functional._lock_state(self)
keras.src.Functional._standardize_inputs(self,inputs)
keras.src.Functional.add_loss(self,loss)
keras.src.Functional.build(self,input_shape)
keras.src.Functional.call(self,inputs,training=None,mask=None)
keras.src.Functional.compute_output_spec(self,inputs,training=None,mask=None)
keras.src.Functional.get_config(self)
keras.src.Functional.input(self)
keras.src.Functional.input_shape(self)
keras.src.Functional.input_spec(self)
keras.src.Functional.input_spec(self,value)
keras.src.Functional.layers(self)
keras.src.Functional.output(self)
keras.src.Functional.output_shape(self)
keras.src.models.functional.Functional(self,inputs,outputs,name=None,**kwargs)
keras.src.models.functional.Functional.__init__(self,inputs,outputs,name=None,**kwargs)
keras.src.models.functional.Functional._adjust_input_rank(self,flat_inputs)
keras.src.models.functional.Functional._assert_input_compatibility(self,*args)
keras.src.models.functional.Functional._convert_inputs_to_tensors(self,flat_inputs)
keras.src.models.functional.Functional._flatten_to_reference_inputs(self,inputs,allow_extra_keys=True)
keras.src.models.functional.Functional._lock_state(self)
keras.src.models.functional.Functional._standardize_inputs(self,inputs)
keras.src.models.functional.Functional.add_loss(self,loss)
keras.src.models.functional.Functional.build(self,input_shape)
keras.src.models.functional.Functional.call(self,inputs,training=None,mask=None)
keras.src.models.functional.Functional.compute_output_spec(self,inputs,training=None,mask=None)
keras.src.models.functional.Functional.get_config(self)
keras.src.models.functional.Functional.input(self)
keras.src.models.functional.Functional.input_shape(self)
keras.src.models.functional.Functional.input_spec(self)
keras.src.models.functional.Functional.input_spec(self,value)
keras.src.models.functional.Functional.layers(self)
keras.src.models.functional.Functional.output(self)
keras.src.models.functional.Functional.output_shape(self)
keras.src.models.functional.clone_graph_nodes(inputs,outputs)
keras.src.models.functional.clone_keras_tensors(tensors,kt_id_mapping)
keras.src.models.functional.clone_single_keras_tensor(x)
keras.src.models.functional.deserialize_node(node_data,created_layers)
keras.src.models.functional.find_nodes_by_inputs_and_outputs(inputs,outputs)
keras.src.models.functional.functional_from_config(cls,config,custom_objects=None)
keras.src.models.functional.functional_like_constructor(cls)
keras.src.models.functional.is_input_keras_tensor(x)
keras.src.models.functional.operation_fn(operation,training)
keras.src.models.functional.serialize_node(node,node_reindexing_map)
keras.src.models.functional.unpack_singleton(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/models/variable_mapping.py----------------------------------------
A:keras.src.models.variable_mapping.container->list(container.values())
keras.src.models.variable_mapping.map_container_variables(container,store,visited_trackables)
keras.src.models.variable_mapping.map_trackable_variables(trackable,store,visited_trackables)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/models/sequential.py----------------------------------------
A:keras.src.models.sequential.layer->keras.src.saving.serialization_lib.deserialize_keras_object(layer_config, custom_objects=custom_objects)
A:keras.src.models.sequential.x->layer(x)
A:keras.src.models.sequential.signature->inspect.signature(layer.call)
A:keras.src.models.sequential.self._functional->Functional(inputs=inputs, outputs=outputs)
A:keras.src.models.sequential.outputs->keras.src.saving.serialization_lib.deserialize_keras_object(layer_config, custom_objects=custom_objects).compute_output_spec(inputs, training=training)
A:keras.src.models.sequential.mask->keras.src.utils.tree.map_structure(_get_mask_from_keras_tensor, outputs)
A:keras.src.models.sequential.config->keras.src.models.model.Model.get_config(self)
A:keras.src.models.sequential.config['layers']->copy.deepcopy(layer_configs)
A:keras.src.models.sequential.build_input_shape->keras.src.models.model.Model.get_config(self).get('build_input_shape')
A:keras.src.models.sequential.model->cls(name=name)
keras.src.Sequential(self,layers=None,trainable=True,name=None)
keras.src.Sequential._is_layer_name_unique(self,layer)
keras.src.Sequential._lock_state(self)
keras.src.Sequential._maybe_rebuild(self)
keras.src.Sequential.add(self,layer,rebuild=True)
keras.src.Sequential.build(self,input_shape=None)
keras.src.Sequential.call(self,inputs,training=None,mask=None)
keras.src.Sequential.compute_output_spec(self,inputs,training=None,mask=None)
keras.src.Sequential.from_config(cls,config,custom_objects=None)
keras.src.Sequential.get_config(self)
keras.src.Sequential.input_dtype(self)
keras.src.Sequential.input_shape(self)
keras.src.Sequential.inputs(self)
keras.src.Sequential.layers(self)
keras.src.Sequential.output_shape(self)
keras.src.Sequential.outputs(self)
keras.src.Sequential.pop(self,rebuild=True)
keras.src.models.sequential.Sequential(self,layers=None,trainable=True,name=None)
keras.src.models.sequential.Sequential.__init__(self,layers=None,trainable=True,name=None)
keras.src.models.sequential.Sequential._is_layer_name_unique(self,layer)
keras.src.models.sequential.Sequential._lock_state(self)
keras.src.models.sequential.Sequential._maybe_rebuild(self)
keras.src.models.sequential.Sequential.add(self,layer,rebuild=True)
keras.src.models.sequential.Sequential.build(self,input_shape=None)
keras.src.models.sequential.Sequential.call(self,inputs,training=None,mask=None)
keras.src.models.sequential.Sequential.compute_output_spec(self,inputs,training=None,mask=None)
keras.src.models.sequential.Sequential.from_config(cls,config,custom_objects=None)
keras.src.models.sequential.Sequential.get_config(self)
keras.src.models.sequential.Sequential.input_dtype(self)
keras.src.models.sequential.Sequential.input_shape(self)
keras.src.models.sequential.Sequential.inputs(self)
keras.src.models.sequential.Sequential.layers(self)
keras.src.models.sequential.Sequential.output_shape(self)
keras.src.models.sequential.Sequential.outputs(self)
keras.src.models.sequential.Sequential.pop(self,rebuild=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/models/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/models/cloning.py----------------------------------------
A:keras.src.models.cloning.config->keras.src.saving.serialization_lib.serialize_keras_object(model)
A:keras.src.models.cloning.inputs->Input(tensor=input_tensors, batch_shape=input_batch_shape, dtype=input_dtype, name=input_name)
A:keras.src.models.cloning.new_layer->clone_function(layer)
A:keras.src.models.cloning.input_tensors->keras.src.utils.tree.map_structure(lambda x: Input(batch_shape=x.shape, dtype=x.dtype, name=x.name), model.input)
A:keras.src.models.cloning.output_tensors->model._run_through_graph(input_tensors, operation_fn=operation_fn)
A:keras.src.models.cloning.new_model->Functional(input_tensors, output_tensors, name=model.name)
keras.src.models.cloning._clone_functional_model(model,input_tensors=None,clone_function=None)
keras.src.models.cloning._clone_sequential_model(model,input_tensors=None,clone_function=None)
keras.src.models.cloning.clone_model(model,input_tensors=None,clone_function=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/models/model.py----------------------------------------
A:keras.src.models.model.exists->os.path.exists(filepath)
A:keras.src.models.model.proceed->keras.src.utils.io_utils.ask_to_proceed_with_overwrite(filepath)
A:keras.src.models.model.list_of_sublayers->list(layer._flatten_layers())
A:keras.src.models.model.status->self._build_by_run_for_kwargs(config['shapes_dict'])
A:keras.src.models.model.model_config->json.loads(json_string)
A:keras.src.models.model.is_functional_config->all((key in config for key in functional_config_keys))
A:keras.src.models.model.argspec->inspect.getfullargspec(cls.__init__)
A:keras.src.models.model.cls.__bases__->tuple((inject_functional_model_class(base) for base in cls.__bases__))
keras.src.Model(self,*args,**kwargs)
keras.src.Model._get_variable_map(self)
keras.src.Model.build_from_config(self,config)
keras.src.Model.call(self,*args,**kwargs)
keras.src.Model.export(self,filepath,format='tf_saved_model')
keras.src.Model.from_config(cls,config,custom_objects=None)
keras.src.Model.get_layer(self,name=None,index=None)
keras.src.Model.layers(self)
keras.src.Model.layers(self,_)
keras.src.Model.load_weights(self,filepath,skip_mismatch=False,**kwargs)
keras.src.Model.quantize(self,mode)
keras.src.Model.save(self,filepath,overwrite=True,**kwargs)
keras.src.Model.save_weights(self,filepath,overwrite=True)
keras.src.Model.summary(self,line_length=None,positions=None,print_fn=None,expand_nested=False,show_trainable=False,layer_range=None)
keras.src.Model.to_json(self,**kwargs)
keras.src.models.model.Model(self,*args,**kwargs)
keras.src.models.model.Model.__init__(self,*args,**kwargs)
keras.src.models.model.Model._get_variable_map(self)
keras.src.models.model.Model.build_from_config(self,config)
keras.src.models.model.Model.call(self,*args,**kwargs)
keras.src.models.model.Model.export(self,filepath,format='tf_saved_model')
keras.src.models.model.Model.from_config(cls,config,custom_objects=None)
keras.src.models.model.Model.get_layer(self,name=None,index=None)
keras.src.models.model.Model.layers(self)
keras.src.models.model.Model.layers(self,_)
keras.src.models.model.Model.load_weights(self,filepath,skip_mismatch=False,**kwargs)
keras.src.models.model.Model.quantize(self,mode)
keras.src.models.model.Model.save(self,filepath,overwrite=True,**kwargs)
keras.src.models.model.Model.save_weights(self,filepath,overwrite=True)
keras.src.models.model.Model.summary(self,line_length=None,positions=None,print_fn=None,expand_nested=False,show_trainable=False,layer_range=None)
keras.src.models.model.Model.to_json(self,**kwargs)
keras.src.models.model.functional_init_arguments(args,kwargs)
keras.src.models.model.inject_functional_model_class(cls)
keras.src.models.model.model_from_json(json_string,custom_objects=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/regularizers/__init__.py----------------------------------------
A:keras.src.regularizers.__init__.obj->obj()
keras.src.regularizers.__init__.deserialize(config,custom_objects=None)
keras.src.regularizers.__init__.get(identifier)
keras.src.regularizers.__init__.serialize(initializer)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/regularizers/regularizers.py----------------------------------------
A:keras.src.regularizers.regularizers.regularization->keras.src.ops.convert_to_tensor(0.0, dtype=x.dtype)
A:keras.src.regularizers.regularizers.self.l1->keras.src.ops.convert_to_tensor(l1)
A:keras.src.regularizers.regularizers.self.factor->keras.src.ops.convert_to_tensor(factor)
A:keras.src.regularizers.regularizers.inputs->normalize(inputs, axis=0)
A:keras.src.regularizers.regularizers.product->keras.src.ops.matmul(ops.transpose(inputs), inputs)
keras.src.regularizers.L1(self,l1=0.01)
keras.src.regularizers.L1.get_config(self)
keras.src.regularizers.L1L2(self,l1=0.0,l2=0.0)
keras.src.regularizers.L1L2.get_config(self)
keras.src.regularizers.L2(self,l2=0.01)
keras.src.regularizers.L2.get_config(self)
keras.src.regularizers.OrthogonalRegularizer(self,factor=0.01,mode='rows')
keras.src.regularizers.OrthogonalRegularizer.get_config(self)
keras.src.regularizers.Regularizer(self,x)
keras.src.regularizers.Regularizer.from_config(cls,config)
keras.src.regularizers.Regularizer.get_config(self)
keras.src.regularizers.regularizers.L1(self,l1=0.01)
keras.src.regularizers.regularizers.L1.__init__(self,l1=0.01)
keras.src.regularizers.regularizers.L1.get_config(self)
keras.src.regularizers.regularizers.L1L2(self,l1=0.0,l2=0.0)
keras.src.regularizers.regularizers.L1L2.__init__(self,l1=0.0,l2=0.0)
keras.src.regularizers.regularizers.L1L2.get_config(self)
keras.src.regularizers.regularizers.L2(self,l2=0.01)
keras.src.regularizers.regularizers.L2.__init__(self,l2=0.01)
keras.src.regularizers.regularizers.L2.get_config(self)
keras.src.regularizers.regularizers.OrthogonalRegularizer(self,factor=0.01,mode='rows')
keras.src.regularizers.regularizers.OrthogonalRegularizer.__init__(self,factor=0.01,mode='rows')
keras.src.regularizers.regularizers.OrthogonalRegularizer.get_config(self)
keras.src.regularizers.regularizers.Regularizer(self,x)
keras.src.regularizers.regularizers.Regularizer.__call__(self,x)
keras.src.regularizers.regularizers.Regularizer.from_config(cls,config)
keras.src.regularizers.regularizers.Regularizer.get_config(self)
keras.src.regularizers.regularizers.validate_float_arg(value,name)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/numerical_utils.py----------------------------------------
A:keras.src.utils.numerical_utils.norm->numpy.atleast_1d(np.linalg.norm(x, order, axis))
A:keras.src.utils.numerical_utils.x->x.reshape(-1).reshape(-1)
A:keras.src.utils.numerical_utils.input_shape->tuple(input_shape[:-1])
A:keras.src.utils.numerical_utils.categorical->numpy.reshape(categorical, output_shape)
A:keras.src.utils.numerical_utils.original_shape->backend_module.shape(inputs)
A:keras.src.utils.numerical_utils.rank_of_inputs->len(original_shape)
A:keras.src.utils.numerical_utils.inputs->backend_module.numpy.expand_dims(inputs, -1)
A:keras.src.utils.numerical_utils.bincounts->backend_module.cast(bincounts, dtype)
A:keras.src.utils.numerical_utils.one_hot_input->backend_module.nn.one_hot(inputs, depth)
keras.src.utils.normalize(x,axis=-1,order=2)
keras.src.utils.numerical_utils.encode_categorical_inputs(inputs,output_mode,depth,dtype='float32',backend_module=None)
keras.src.utils.numerical_utils.normalize(x,axis=-1,order=2)
keras.src.utils.numerical_utils.to_categorical(x,num_classes=None)
keras.src.utils.to_categorical(x,num_classes=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/dtype_utils.py----------------------------------------
A:keras.src.utils.dtype_utils.size->DTYPE_TO_SIZE.get(dtype, None)
A:keras.src.utils.dtype_utils.dtype->keras.src.backend.standardize_dtype(x.dtype)
A:keras.src.utils.dtype_utils.highest_float_size->dtype_size(highest_float)
keras.src.utils.dtype_utils.cast_to_common_dtype(tensors)
keras.src.utils.dtype_utils.dtype_size(dtype)
keras.src.utils.dtype_utils.is_float(dtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/rng_utils.py----------------------------------------
keras.src.utils.rng_utils.set_random_seed(seed)
keras.src.utils.set_random_seed(seed)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/progbar.py----------------------------------------
A:keras.src.utils.progbar.self.stateful_metrics->set()
A:keras.src.utils.progbar.self._start->time.time()
A:keras.src.utils.progbar.value_base->max(current - self._seen_so_far, 1)
A:keras.src.utils.progbar.now->time.time()
A:keras.src.utils.progbar.time_per_unit->self._estimate_step_duration(current, now)
A:keras.src.utils.progbar.prog_width->int(self.width * prog)
A:keras.src.utils.progbar.avg->keras.src.backend.convert_to_numpy(backend.numpy.mean(self._values[k][0] / max(1, self._values[k][1])))
keras.src.utils.Progbar(self,target,width=20,verbose=1,interval=0.05,stateful_metrics=None,unit_name='step')
keras.src.utils.Progbar._estimate_step_duration(self,current,now)
keras.src.utils.Progbar._format_time(self,time_per_unit,unit_name)
keras.src.utils.Progbar.add(self,n,values=None)
keras.src.utils.Progbar.update(self,current,values=None,finalize=None)
keras.src.utils.progbar.Progbar(self,target,width=20,verbose=1,interval=0.05,stateful_metrics=None,unit_name='step')
keras.src.utils.progbar.Progbar.__init__(self,target,width=20,verbose=1,interval=0.05,stateful_metrics=None,unit_name='step')
keras.src.utils.progbar.Progbar._estimate_step_duration(self,current,now)
keras.src.utils.progbar.Progbar._format_time(self,time_per_unit,unit_name)
keras.src.utils.progbar.Progbar.add(self,n,values=None)
keras.src.utils.progbar.Progbar.update(self,current,values=None,finalize=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/io_utils.py----------------------------------------
A:keras.src.utils.io_utils.verbosity->valid_levels.get(level)
A:keras.src.utils.io_utils.overwrite->input('Enter "y" (overwrite) or "n" (cancel).').strip().lower()
keras.src.utils.disable_interactive_logging()
keras.src.utils.enable_interactive_logging()
keras.src.utils.io_utils.ask_to_proceed_with_overwrite(filepath)
keras.src.utils.io_utils.disable_interactive_logging()
keras.src.utils.io_utils.enable_interactive_logging()
keras.src.utils.io_utils.is_interactive_logging_enabled()
keras.src.utils.io_utils.print_msg(message,line_break=True)
keras.src.utils.io_utils.set_logging_verbosity(level)
keras.src.utils.is_interactive_logging_enabled()


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/python_utils.py----------------------------------------
A:keras.src.utils.python_utils.raw_code->marshal.loads(raw_code).encode('raw_unicode_escape')
A:keras.src.utils.python_utils.code->marshal.loads(raw_code)
A:keras.src.utils.python_utils.closure->tuple((ensure_value_to_cell(_) for _ in closure))
A:keras.src.utils.python_utils.defaults->tuple(defaults)
A:keras.src.utils.python_utils.globs->globals()
keras.src.utils.default(method)
keras.src.utils.is_default(method)
keras.src.utils.python_utils.default(method)
keras.src.utils.python_utils.func_dump(func)
keras.src.utils.python_utils.func_load(code,defaults=None,closure=None,globs=None)
keras.src.utils.python_utils.is_default(method)
keras.src.utils.python_utils.remove_by_id(lst,value)
keras.src.utils.python_utils.remove_long_seq(maxlen,seq,label)
keras.src.utils.python_utils.removeprefix(x,prefix)
keras.src.utils.python_utils.removesuffix(x,suffix)
keras.src.utils.python_utils.to_list(x)
keras.src.utils.removeprefix(x,prefix)
keras.src.utils.removesuffix(x,suffix)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/backend_utils.py----------------------------------------
A:keras.src.utils.backend_utils.outputs->keras.src.backend.convert_to_tensor(outputs, dtype=dtype)
A:keras.src.utils.backend_utils.self._original_value->keras.src.backend.common.global_state.get_global_attribute('in_tf_graph_scope', False)
A:keras.src.utils.backend_utils.self._backend->keras.src.backend.backend()
A:keras.src.utils.backend_utils.globs->copy.copy(globals())
A:keras.src.utils.backend_utils.module_name->str(value)
A:keras.src.utils.backend_utils.globals()[key]->importlib.import_module(module_name)
keras.src.utils.backend_utils.DynamicBackend(self,backend=None)
keras.src.utils.backend_utils.DynamicBackend.__getattr__(self,name)
keras.src.utils.backend_utils.DynamicBackend.__init__(self,backend=None)
keras.src.utils.backend_utils.DynamicBackend.reset(self)
keras.src.utils.backend_utils.DynamicBackend.set_backend(self,backend)
keras.src.utils.backend_utils.TFGraphScope(self)
keras.src.utils.backend_utils.TFGraphScope.__enter__(self)
keras.src.utils.backend_utils.TFGraphScope.__exit__(self,*args,**kwargs)
keras.src.utils.backend_utils.TFGraphScope.__init__(self)
keras.src.utils.backend_utils.convert_tf_tensor(outputs,dtype=None)
keras.src.utils.backend_utils.in_tf_graph()
keras.src.utils.backend_utils.set_backend(backend)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/image_utils.py----------------------------------------
A:keras.src.utils.image_utils.data_format->keras.src.backend.standardize_data_format(data_format)
A:keras.src.utils.image_utils.dtype->keras.src.backend.floatx()
A:keras.src.utils.image_utils.x->x.reshape((x.shape[0], x.shape[1], 1)).reshape((x.shape[0], x.shape[1], 1))
A:keras.src.utils.image_utils.x_max->numpy.max(x)
A:keras.src.utils.image_utils.img->backend_module.image.resize(img, size=size, interpolation=interpolation, data_format=data_format)
A:keras.src.utils.image_utils.path->str(path.resolve())
A:keras.src.utils.image_utils.crop_height->backend_module.cast(crop_height, 'int32')
A:keras.src.utils.image_utils.crop_width->backend_module.cast(crop_width, 'int32')
A:keras.src.utils.image_utils.shape->backend_module.shape(img)
A:keras.src.utils.image_utils.crop_box_hstart->backend_module.cast(backend_module.cast(height - crop_height, 'float32') / 2, 'int32')
A:keras.src.utils.image_utils.crop_box_wstart->backend_module.cast(backend_module.cast(width - crop_width, 'float32') / 2, 'int32')
keras.src.utils.array_to_img(x,data_format=None,scale=True,dtype=None)
keras.src.utils.image_utils.array_to_img(x,data_format=None,scale=True,dtype=None)
keras.src.utils.image_utils.img_to_array(img,data_format=None,dtype=None)
keras.src.utils.image_utils.load_img(path,color_mode='rgb',target_size=None,interpolation='nearest',keep_aspect_ratio=False)
keras.src.utils.image_utils.save_img(path,x,data_format=None,file_format=None,scale=True,**kwargs)
keras.src.utils.image_utils.smart_resize(x,size,interpolation='bilinear',data_format='channels_last',backend_module=None)
keras.src.utils.img_to_array(img,data_format=None,dtype=None)
keras.src.utils.load_img(path,color_mode='rgb',target_size=None,interpolation='nearest',keep_aspect_ratio=False)
keras.src.utils.save_img(path,x,data_format=None,file_format=None,scale=True,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/audio_dataset_utils.py----------------------------------------
A:keras.src.utils.audio_dataset_utils.seed->numpy.random.randint(1000000.0)
A:keras.src.utils.audio_dataset_utils.(file_paths, labels, class_names)->keras.src.utils.dataset_utils.index_directory(directory, labels, formats=ALLOWED_FORMATS, class_names=class_names, shuffle=shuffle, seed=seed, follow_links=follow_links, verbose=verbose)
A:keras.src.utils.audio_dataset_utils.(train_dataset, val_dataset)->get_training_and_validation_dataset(file_paths=file_paths, labels=labels, validation_split=validation_split, directory=directory, label_mode=label_mode, class_names=class_names, sampling_rate=sampling_rate, output_sequence_length=output_sequence_length, ragged=ragged)
A:keras.src.utils.audio_dataset_utils.train_dataset->paths_and_labels_to_dataset(file_paths=file_paths_train, labels=labels_train, label_mode=label_mode, num_classes=len(class_names) if class_names else 0, sampling_rate=sampling_rate, output_sequence_length=output_sequence_length, ragged=ragged)
A:keras.src.utils.audio_dataset_utils.val_dataset->paths_and_labels_to_dataset(file_paths=file_paths_val, labels=labels_val, label_mode=label_mode, num_classes=len(class_names) if class_names else 0, sampling_rate=sampling_rate, output_sequence_length=output_sequence_length, ragged=ragged)
A:keras.src.utils.audio_dataset_utils.dataset->paths_and_labels_to_dataset(file_paths=file_paths, labels=labels, label_mode=label_mode, num_classes=len(class_names) if class_names else 0, sampling_rate=sampling_rate, output_sequence_length=output_sequence_length, ragged=ragged)
A:keras.src.utils.audio_dataset_utils.(file_paths_train, labels_train)->keras.src.utils.dataset_utils.get_training_or_validation_split(file_paths, labels, validation_split, 'training')
A:keras.src.utils.audio_dataset_utils.(file_paths_val, labels_val)->keras.src.utils.dataset_utils.get_training_or_validation_split(file_paths, labels, validation_split, 'validation')
A:keras.src.utils.audio_dataset_utils.(file_paths, labels)->keras.src.utils.dataset_utils.get_training_or_validation_split(file_paths, labels, validation_split, subset)
A:keras.src.utils.audio_dataset_utils.audio->keras.src.utils.module_utils.tensorflow_io.audio.resample(input=audio, rate_in=default_audio_rate, rate_out=sampling_rate)
A:keras.src.utils.audio_dataset_utils.(audio, default_audio_rate)->keras.src.utils.module_utils.tensorflow.audio.decode_wav(contents=audio, desired_samples=output_sequence_length)
A:keras.src.utils.audio_dataset_utils.default_audio_rate->keras.src.utils.module_utils.tensorflow.cast(default_audio_rate, tf.int64)
A:keras.src.utils.audio_dataset_utils.path_ds->keras.src.utils.module_utils.tensorflow.data.Dataset.from_tensor_slices(file_paths)
A:keras.src.utils.audio_dataset_utils.audio_ds->keras.src.utils.module_utils.tensorflow.data.Dataset.zip((audio_ds, label_ds))
A:keras.src.utils.audio_dataset_utils.label_ds->keras.src.utils.dataset_utils.labels_to_dataset(labels, label_mode, num_classes)
keras.src.utils.audio_dataset_from_directory(directory,labels='inferred',label_mode='int',class_names=None,batch_size=32,sampling_rate=None,output_sequence_length=None,ragged=False,shuffle=True,seed=None,validation_split=None,subset=None,follow_links=False,verbose=True)
keras.src.utils.audio_dataset_utils.audio_dataset_from_directory(directory,labels='inferred',label_mode='int',class_names=None,batch_size=32,sampling_rate=None,output_sequence_length=None,ragged=False,shuffle=True,seed=None,validation_split=None,subset=None,follow_links=False,verbose=True)
keras.src.utils.audio_dataset_utils.get_dataset(file_paths,labels,directory,validation_split,subset,label_mode,class_names,sampling_rate,output_sequence_length,ragged)
keras.src.utils.audio_dataset_utils.get_training_and_validation_dataset(file_paths,labels,validation_split,directory,label_mode,class_names,sampling_rate,output_sequence_length,ragged)
keras.src.utils.audio_dataset_utils.paths_and_labels_to_dataset(file_paths,labels,label_mode,num_classes,sampling_rate,output_sequence_length,ragged)
keras.src.utils.audio_dataset_utils.prepare_dataset(dataset,batch_size,shuffle,seed,class_names,output_sequence_length,ragged)
keras.src.utils.audio_dataset_utils.read_and_decode_audio(path,sampling_rate=None,output_sequence_length=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/traceback_utils.py----------------------------------------
A:keras.src.utils.traceback_utils.tb_list->list(traceback.walk_tb(tb))
A:keras.src.utils.traceback_utils.last_tb->types.TracebackType(last_tb, f, f.f_lasti, line_no)
A:keras.src.utils.traceback_utils.filtered_tb->_process_traceback_frames(e.__traceback__)
A:keras.src.utils.traceback_utils.signature->inspect.signature(fn)
A:keras.src.utils.traceback_utils.bound_signature->inspect.signature(fn).bind(*args, **kwargs)
A:keras.src.utils.traceback_utils.value->keras.src.utils.tree.map_structure(format_argument_value, bound_signature.arguments[arg.name])
A:keras.src.utils.traceback_utils.arguments_context->'\n'.join(arguments_context)
A:keras.src.utils.traceback_utils.new_e->RuntimeError(message)
keras.src.utils.traceback_utils._process_traceback_frames(tb)
keras.src.utils.traceback_utils.disable_traceback_filtering()
keras.src.utils.traceback_utils.enable_traceback_filtering()
keras.src.utils.traceback_utils.filter_traceback(fn)
keras.src.utils.traceback_utils.format_argument_value(value)
keras.src.utils.traceback_utils.include_frame(fname)
keras.src.utils.traceback_utils.inject_argument_info_in_traceback(fn,object_name=None)
keras.src.utils.traceback_utils.is_traceback_filtering_enabled()


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/sequence_utils.py----------------------------------------
A:keras.src.utils.sequence_utils.num_samples->len(sequences)
A:keras.src.utils.sequence_utils.maxlen->numpy.max(lengths)
A:keras.src.utils.sequence_utils.x->numpy.full((num_samples, maxlen) + sample_shape, value, dtype=dtype)
A:keras.src.utils.sequence_utils.trunc->numpy.asarray(trunc, dtype=dtype)
keras.src.utils.pad_sequences(sequences,maxlen=None,dtype='int32',padding='pre',truncating='pre',value=0.0)
keras.src.utils.sequence_utils.pad_sequences(sequences,maxlen=None,dtype='int32',padding='pre',truncating='pre',value=0.0)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/naming.py----------------------------------------
A:keras.src.utils.naming.prefix->to_snake_case(prefix)
A:keras.src.utils.naming.object_name_uids->keras.src.backend.common.global_state.get_global_attribute('object_name_uids', default=collections.defaultdict(int), set_to_default=True)
A:keras.src.utils.naming.name->re.sub('([a-z])([A-Z])', '\\1_\\2', name).lower()
keras.src.utils.naming.auto_name(prefix)
keras.src.utils.naming.get_object_name(obj)
keras.src.utils.naming.get_uid(prefix='')
keras.src.utils.naming.reset_uids()
keras.src.utils.naming.to_snake_case(name)
keras.src.utils.naming.uniquify(name)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/module_utils.py----------------------------------------
A:keras.src.utils.module_utils.self.module->importlib.import_module(self.name)
A:keras.src.utils.module_utils.tensorflow->LazyModule('tensorflow')
A:keras.src.utils.module_utils.gfile->LazyModule('tensorflow.io.gfile', pip_name='tensorflow')
A:keras.src.utils.module_utils.tensorflow_io->LazyModule('tensorflow_io')
A:keras.src.utils.module_utils.scipy->LazyModule('scipy')
keras.src.utils.module_utils.LazyModule(self,name,pip_name=None)
keras.src.utils.module_utils.LazyModule.__getattr__(self,name)
keras.src.utils.module_utils.LazyModule.__init__(self,name,pip_name=None)
keras.src.utils.module_utils.LazyModule.available(self)
keras.src.utils.module_utils.LazyModule.initialize(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/dataset_utils.py----------------------------------------
A:keras.src.utils.dataset_utils.dataset_type_spec->_get_type_spec(dataset)
A:keras.src.utils.dataset_utils.dataset_as_list->_convert_dataset_to_list(dataset, dataset_type_spec)
A:keras.src.utils.dataset_utils.seed->numpy.random.randint(1000000.0)
A:keras.src.utils.dataset_utils.total_length->len(dataset_as_list)
A:keras.src.utils.dataset_utils.(left_size, right_size)->_rescale_dataset_split_sizes(left_size, right_size, total_length)
A:keras.src.utils.dataset_utils.left_split->left_split.prefetch(tf.data.AUTOTUNE).prefetch(tf.data.AUTOTUNE)
A:keras.src.utils.dataset_utils.right_split->right_split.prefetch(tf.data.AUTOTUNE).prefetch(tf.data.AUTOTUNE)
A:keras.src.utils.dataset_utils.batch_size->get_batch_size(dataset)
A:keras.src.utils.dataset_utils.dataset_iterator->iter(dataset_iterator)
A:keras.src.utils.dataset_utils.start_time->time.time()
A:keras.src.utils.dataset_utils.arr->numpy.array(sample, dtype=object)
A:keras.src.utils.dataset_utils.dataset->dataset.unbatch().unbatch()
A:keras.src.utils.dataset_utils.first_sample->next(dataset_iterator)
A:keras.src.utils.dataset_utils.cur_time->time.time()
A:keras.src.utils.dataset_utils.left_size_type->type(left_size)
A:keras.src.utils.dataset_utils.right_size_type->type(right_size)
A:keras.src.utils.dataset_utils.left_size->float(left_size)
A:keras.src.utils.dataset_utils.right_size->float(right_size)
A:keras.src.utils.dataset_utils.class_indices->dict(zip(class_names, range(len(class_names))))
A:keras.src.utils.dataset_utils.pool->ThreadPool()
A:keras.src.utils.dataset_utils.(partial_filenames, partial_labels)->res.get()
A:keras.src.utils.dataset_utils.labels->numpy.zeros((len(filenames),), dtype='int32')
A:keras.src.utils.dataset_utils.rng->numpy.random.RandomState(seed)
A:keras.src.utils.dataset_utils.walk->os.walk(directory, followlinks=follow_links)
A:keras.src.utils.dataset_utils.dirname->os.path.basename(directory)
A:keras.src.utils.dataset_utils.valid_files->iter_valid_files(directory, follow_links, formats)
A:keras.src.utils.dataset_utils.absolute_path->keras.src.utils.module_utils.tensorflow.io.gfile.join(root, fname)
A:keras.src.utils.dataset_utils.relative_path->keras.src.utils.module_utils.tensorflow.io.gfile.join(dirname, os.path.relpath(absolute_path, directory))
A:keras.src.utils.dataset_utils.num_val_samples->int(validation_split * len(samples))
A:keras.src.utils.dataset_utils.label_ds->label_ds.map(lambda x: tf.one_hot(x, num_classes), num_parallel_calls=tf.data.AUTOTUNE).map(lambda x: tf.one_hot(x, num_classes), num_parallel_calls=tf.data.AUTOTUNE)
keras.src.utils.dataset_utils._convert_dataset_to_list(dataset,dataset_type_spec,data_size_warning_flag=True,ensure_shape_similarity=True)
keras.src.utils.dataset_utils._get_data_iterator_from_dataset(dataset,dataset_type_spec)
keras.src.utils.dataset_utils._get_next_sample(dataset_iterator,ensure_shape_similarity,data_size_warning_flag,start_time)
keras.src.utils.dataset_utils._get_type_spec(dataset)
keras.src.utils.dataset_utils._rescale_dataset_split_sizes(left_size,right_size,total_length)
keras.src.utils.dataset_utils._restore_dataset_from_list(dataset_as_list,dataset_type_spec,original_dataset)
keras.src.utils.dataset_utils.check_validation_split_arg(validation_split,subset,shuffle,seed)
keras.src.utils.dataset_utils.get_batch_size(dataset)
keras.src.utils.dataset_utils.get_training_or_validation_split(samples,labels,validation_split,subset)
keras.src.utils.dataset_utils.index_directory(directory,labels,formats,class_names=None,shuffle=True,seed=None,follow_links=False,verbose=True)
keras.src.utils.dataset_utils.index_subdirectory(directory,class_indices,follow_links,formats)
keras.src.utils.dataset_utils.is_batched(dataset)
keras.src.utils.dataset_utils.is_torch_dataset(dataset)
keras.src.utils.dataset_utils.iter_valid_files(directory,follow_links,formats)
keras.src.utils.dataset_utils.labels_to_dataset(labels,label_mode,num_classes)
keras.src.utils.dataset_utils.split_dataset(dataset,left_size=None,right_size=None,shuffle=False,seed=None)
keras.src.utils.split_dataset(dataset,left_size=None,right_size=None,shuffle=False,seed=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/torch_utils.py----------------------------------------
A:keras.src.utils.torch_utils.self.module->module.to(get_device())
A:keras.src.utils.torch_utils.variable->Variable(initializer=param, trainable=param.requires_grad)
A:keras.src.utils.torch_utils.state_dict->self.module.state_dict()
A:keras.src.utils.torch_utils.store[key]->convert_to_numpy(state_dict[key])
A:keras.src.utils.torch_utils.key->key.decode().decode()
A:keras.src.utils.torch_utils.state_dict[key]->convert_to_tensor(store[key])
A:keras.src.utils.torch_utils.base_config->super().get_config()
A:keras.src.utils.torch_utils.buffer->io.BytesIO(config['module'])
A:keras.src.utils.torch_utils.config['module']->torch.load(buffer)
keras.src.utils.torch_utils.TorchModuleWrapper(self,module,name=None,**kwargs)
keras.src.utils.torch_utils.TorchModuleWrapper.__init__(self,module,name=None,**kwargs)
keras.src.utils.torch_utils.TorchModuleWrapper._track_module_parameters(self)
keras.src.utils.torch_utils.TorchModuleWrapper.call(self,*args,**kwargs)
keras.src.utils.torch_utils.TorchModuleWrapper.from_config(cls,config)
keras.src.utils.torch_utils.TorchModuleWrapper.get_config(self)
keras.src.utils.torch_utils.TorchModuleWrapper.load_own_variables(self,store)
keras.src.utils.torch_utils.TorchModuleWrapper.parameters(self,recurse=True)
keras.src.utils.torch_utils.TorchModuleWrapper.save_own_variables(self,store)
keras.src.utils.torch_utils.no_grad(orig_func)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/shape_utils.py----------------------------------------
keras.src.utils.shape_utils.is_shape_tuple(x)
keras.src.utils.shape_utils.map_shape_structure(fn,struct)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/tf_utils.py----------------------------------------
A:keras.src.utils.tf_utils.result->keras.src.utils.module_utils.tensorflow.math.bincount(inputs, weights=count_weights, minlength=depth, maxlength=depth, dtype=dtype, axis=-1, binary_output=binary_output)
A:keras.src.utils.tf_utils.inputs->keras.src.utils.module_utils.tensorflow.cast(inputs, dtype)
A:keras.src.utils.tf_utils.bincounts->dense_bincount(inputs, depth, binary_output, dtype, count_weights)
A:keras.src.utils.tf_utils.value_weights->keras.src.utils.module_utils.tensorflow.gather(idf_weights, bincounts.indices[:, -1])
A:keras.src.utils.tf_utils.spec->keras.src.utils.module_utils.tensorflow.TensorSpec(shape=t.shape, dtype=t.dtype, name=name)
A:keras.src.utils.tf_utils.shape_list->keras.src.utils.module_utils.tensorflow.TensorShape(shape_list).as_list()
A:keras.src.utils.tf_utils.shape->keras.src.utils.module_utils.tensorflow.TensorShape(shape_list)
keras.src.utils.tf_utils.dense_bincount(inputs,depth,binary_output,dtype,count_weights=None)
keras.src.utils.tf_utils.encode_categorical_inputs(inputs,output_mode,depth,dtype='float32',sparse=False,count_weights=None,idf_weights=None)
keras.src.utils.tf_utils.ensure_tensor(inputs,dtype=None)
keras.src.utils.tf_utils.expand_dims(inputs,axis)
keras.src.utils.tf_utils.get_tensor_spec(t,dynamic_batch=False,name=None)
keras.src.utils.tf_utils.sparse_bincount(inputs,depth,binary_output,dtype,count_weights=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/code_stats.py----------------------------------------
A:keras.src.utils.code_stats.fname->os.path.join(root, fname)
A:keras.src.utils.code_stats.lines->f.read().split('\n')
A:keras.src.utils.code_stats.line->line.strip().strip()
keras.src.utils.code_stats.count_loc(directory,exclude=('_test',),extensions=('.py',),verbose=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/summary_utils.py----------------------------------------
A:keras.src.utils.summary_utils.unique_weights->{id(w): w for w in weights}.values()
A:keras.src.utils.summary_utils.weight_shape->math.prod(w.shape)
A:keras.src.utils.summary_utils.dtype->keras.src.backend.standardize_dtype(w.dtype)
A:keras.src.utils.summary_utils.per_param_size->keras.src.utils.dtype_utils.dtype_size(dtype)
A:keras.src.utils.summary_utils.output_shapes->keras.src.utils.tree.map_structure(lambda x: format_shape(x.shape), outputs)
A:keras.src.utils.summary_utils.out->out.replace("'", '').replace("'", '')
A:keras.src.utils.summary_utils.nodes_by_depth->model._nodes_by_depth.values()
A:keras.src.utils.summary_utils.default_line_length->min(default_line_length, shutil.get_terminal_size().columns - 4)
A:keras.src.utils.summary_utils.column->rich.table.Column(name, justify=alignment[i], width=column_widths[i])
A:keras.src.utils.summary_utils.table->rich.table.Table(*columns, width=line_length, show_lines=True)
A:keras.src.utils.summary_utils.node_index->highlight_number(keras_history.node_index)
A:keras.src.utils.summary_utils.tensor_index->highlight_number(keras_history.tensor_index)
A:keras.src.utils.summary_utils.output_shape->format_layer_shape(layer)
A:keras.src.utils.summary_utils.name->rich.markup.escape(name)
A:keras.src.utils.summary_utils.params->highlight_number(f'{layer.count_params():,}')
A:keras.src.utils.summary_utils.fields->get_layer_fields(layer, prefix=prefix)
A:keras.src.utils.summary_utils.layer_range->get_layer_index_bound_by_layer_name(layers, layer_range)
A:keras.src.utils.summary_utils.trainable_count->count_params(model.trainable_weights)
A:keras.src.utils.summary_utils.trainable_memory_size->weight_memory_size(model.trainable_weights)
A:keras.src.utils.summary_utils.non_trainable_count->count_params(model.non_trainable_weights)
A:keras.src.utils.summary_utils.non_trainable_memory_size->weight_memory_size(model.non_trainable_weights)
A:keras.src.utils.summary_utils.optimizer_weight_count->count_params(model.optimizer.variables)
A:keras.src.utils.summary_utils.optimizer_memory_size->weight_memory_size(model.optimizer.variables)
A:keras.src.utils.summary_utils.console->rich.console.Console(highlight=False)
keras.src.utils.summary_utils.bold_text(x,color=None)
keras.src.utils.summary_utils.count_params(weights)
keras.src.utils.summary_utils.format_layer_shape(layer)
keras.src.utils.summary_utils.get_layer_index_bound_by_layer_name(layers,layer_range=None)
keras.src.utils.summary_utils.highlight_number(x)
keras.src.utils.summary_utils.highlight_symbol(x)
keras.src.utils.summary_utils.print_summary(model,line_length=None,positions=None,print_fn=None,expand_nested=False,show_trainable=False,layer_range=None)
keras.src.utils.summary_utils.readable_memory_size(weight_memory_size)
keras.src.utils.summary_utils.weight_memory_size(weights)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/text_dataset_utils.py----------------------------------------
A:keras.src.utils.text_dataset_utils.seed->numpy.random.randint(1000000.0)
A:keras.src.utils.text_dataset_utils.(file_paths, labels, class_names)->keras.src.utils.dataset_utils.index_directory(directory, labels, formats=('.txt',), class_names=class_names, shuffle=shuffle, seed=seed, follow_links=follow_links, verbose=verbose)
A:keras.src.utils.text_dataset_utils.(file_paths_train, labels_train)->keras.src.utils.dataset_utils.get_training_or_validation_split(file_paths, labels, validation_split, 'training')
A:keras.src.utils.text_dataset_utils.(file_paths_val, labels_val)->keras.src.utils.dataset_utils.get_training_or_validation_split(file_paths, labels, validation_split, 'validation')
A:keras.src.utils.text_dataset_utils.train_dataset->train_dataset.shuffle(buffer_size=1024, seed=seed).shuffle(buffer_size=1024, seed=seed)
A:keras.src.utils.text_dataset_utils.val_dataset->val_dataset.batch(batch_size).batch(batch_size)
A:keras.src.utils.text_dataset_utils.(file_paths, labels)->keras.src.utils.dataset_utils.get_training_or_validation_split(file_paths, labels, validation_split, subset)
A:keras.src.utils.text_dataset_utils.dataset->dataset.shuffle(buffer_size=1024, seed=seed).shuffle(buffer_size=1024, seed=seed)
A:keras.src.utils.text_dataset_utils.path_ds->keras.src.utils.module_utils.tensorflow.data.Dataset.from_tensor_slices(file_paths)
A:keras.src.utils.text_dataset_utils.string_ds->keras.src.utils.module_utils.tensorflow.data.Dataset.zip((string_ds, label_ds))
A:keras.src.utils.text_dataset_utils.label_ds->keras.src.utils.dataset_utils.labels_to_dataset(labels, label_mode, num_classes)
A:keras.src.utils.text_dataset_utils.txt->keras.src.utils.module_utils.tensorflow.strings.substr(txt, 0, max_length)
keras.src.utils.text_dataset_from_directory(directory,labels='inferred',label_mode='int',class_names=None,batch_size=32,max_length=None,shuffle=True,seed=None,validation_split=None,subset=None,follow_links=False,verbose=True)
keras.src.utils.text_dataset_utils.path_to_string_content(path,max_length)
keras.src.utils.text_dataset_utils.paths_and_labels_to_dataset(file_paths,labels,label_mode,num_classes,max_length)
keras.src.utils.text_dataset_utils.text_dataset_from_directory(directory,labels='inferred',label_mode='int',class_names=None,batch_size=32,max_length=None,shuffle=True,seed=None,validation_split=None,subset=None,follow_links=False,verbose=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/jax_utils.py----------------------------------------
A:keras.src.utils.jax_utils.x->keras.src.backend.numpy.ones(())
keras.src.utils.jax_utils.is_in_jax_tracing_scope(x=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/tree.py----------------------------------------
A:keras.src.utils.tree.(children, treedef)->optree.tree_flatten(structure, is_leaf=lambda x: x is not structure, none_is_leaf=True, namespace='keras')
A:keras.src.utils.tree.ret->func(traversed_structure)
A:keras.src.utils.tree.traversed_structure->traverse_children()
A:keras.src.utils.tree.(leaves, _)->optree.tree_flatten(structure, none_is_leaf=True, namespace='keras')
A:keras.src.utils.tree.structure_spec->optree.tree_structure(structure, none_is_leaf=True, namespace='keras')
A:keras.src.utils.tree.a_structure->optree.tree_structure(a, none_is_leaf=True, namespace='keras')
A:keras.src.utils.tree.b_structure->optree.tree_structure(b, none_is_leaf=True, namespace='keras')
A:keras.src.utils.tree.type_structure->optree.tree_map(lambda x, y: type(x) is type(y), a, b, none_is_leaf=True, namespace='keras')
A:keras.src.utils.tree.value_str->str(value)
A:keras.src.utils.tree.(final_index, packed)->_packed_nest_with_indices(structure, flat_sequence, 0, sequence_fn)
A:keras.src.utils.tree.flat_structure->flatten(structure)
A:keras.src.utils.tree._MAP_TO_NONE->_MapToNone()
A:keras.src.utils.tree.input_tree->dict(_yield_sorted_items(input_tree))
A:keras.src.utils.tree.zipped_iterators->zip(*[_yield_flat_up_to(shallow_tree, input_tree) for input_tree in input_trees])
A:keras.src.utils.tree.(paths, values)->zip(*paths_and_values)
A:keras.src.utils.tree.paths->locals().get('paths', ((),))
A:keras.src.utils.tree.shallow_structure_spec->optree.tree_structure(shallow_structure, none_is_leaf=True, namespace='keras')
A:keras.src.utils.tree.result->dict(zip(sorted(instance), args))
A:keras.src.utils.tree.instance_type->type(instance)
A:keras.src.utils.tree.(new_index, child)->_packed_nest_with_indices(s, flat, index, sequence_fn)
keras.src.utils.tree._MapToNone
keras.src.utils.tree._MapToNone.__repr__(self)
keras.src.utils.tree._map_structure_with_path_up_to(shallow_structure,func,*structures)
keras.src.utils.tree._multiyield_flat_up_to(shallow_tree,*input_trees)
keras.src.utils.tree._packed_nest_with_indices(structure,flat,index,sequence_fn=None)
keras.src.utils.tree._sequence_like(instance,args)
keras.src.utils.tree._yield_flat_up_to(shallow_tree,input_tree,path=())
keras.src.utils.tree._yield_sorted_items(iterable)
keras.src.utils.tree._yield_value(iterable)
keras.src.utils.tree.assert_same_structure(a,b,check_types=True)
keras.src.utils.tree.flatten(structure)
keras.src.utils.tree.is_nested(structure)
keras.src.utils.tree.lists_to_tuples(structure)
keras.src.utils.tree.map_structure(func,*structures)
keras.src.utils.tree.map_structure_up_to(shallow_structure,func,*structures)
keras.src.utils.tree.pack_sequence_as(structure,flat_sequence,sequence_fn=None)
keras.src.utils.tree.traverse(func,structure,top_down=True)
keras.src.utils.tree.unflatten_as(structure,flat_sequence)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/file_utils.py----------------------------------------
A:keras.src.utils.file_utils.tip->resolve_path(os.path.join(base, os.path.dirname(info.name)))
A:keras.src.utils.file_utils.base_dir->resolve_path('.')
A:keras.src.utils.file_utils.file_path->path_to_string(file_path)
A:keras.src.utils.file_utils.path->path_to_string(path)
A:keras.src.utils.file_utils.cache_dir->keras.src.backend.config.keras_home()
A:keras.src.utils.file_utils.datadir_base->os.path.join('/tmp', '.keras')
A:keras.src.utils.file_utils.datadir->os.path.join(datadir_base, cache_subdir)
A:keras.src.utils.file_utils.fname->str(fname)
A:keras.src.utils.file_utils.untar_fpath->os.path.join(datadir, fname)
A:keras.src.utils.file_utils.fpath->os.path.join(datadir, fname)
A:keras.src.utils.file_utils.self.progbar->Progbar(total_size)
A:keras.src.utils.file_utils.status->extract_archive(fpath, datadir, archive_format)
A:keras.src.utils.file_utils.hasher->resolve_hasher(algorithm, file_hash)
keras.src.utils.file_utils.File(path,mode='r')
keras.src.utils.file_utils._raise_if_no_gfile(path)
keras.src.utils.file_utils.copy(src,dst)
keras.src.utils.file_utils.exists(path)
keras.src.utils.file_utils.extract_archive(file_path,path='.',archive_format='auto')
keras.src.utils.file_utils.filter_safe_paths(members)
keras.src.utils.file_utils.get_file(fname=None,origin=None,untar=False,md5_hash=None,file_hash=None,cache_subdir='datasets',hash_algorithm='auto',extract=False,archive_format='auto',cache_dir=None,force_download=False)
keras.src.utils.file_utils.hash_file(fpath,algorithm='sha256',chunk_size=65535)
keras.src.utils.file_utils.is_link_in_dir(info,base)
keras.src.utils.file_utils.is_path_in_dir(path,base_dir)
keras.src.utils.file_utils.is_remote_path(filepath)
keras.src.utils.file_utils.isdir(path)
keras.src.utils.file_utils.join(path,*paths)
keras.src.utils.file_utils.listdir(path)
keras.src.utils.file_utils.makedirs(path)
keras.src.utils.file_utils.path_to_string(path)
keras.src.utils.file_utils.resolve_hasher(algorithm,file_hash=None)
keras.src.utils.file_utils.resolve_path(path)
keras.src.utils.file_utils.rmtree(path)
keras.src.utils.file_utils.validate_file(fpath,file_hash,algorithm='auto',chunk_size=65535)
keras.src.utils.get_file(fname=None,origin=None,untar=False,md5_hash=None,file_hash=None,cache_subdir='datasets',hash_algorithm='auto',extract=False,archive_format='auto',cache_dir=None,force_download=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/model_visualization.py----------------------------------------
A:keras.src.utils.model_visualization.edge->pydot.Edge(src, dst)
A:keras.src.utils.model_visualization.activation_name->str(layer.activation)
A:keras.src.utils.model_visualization.show_layer_names->kwargs.pop('show_layer_names')
A:keras.src.utils.model_visualization.show_layer_activations->kwargs.pop('show_layer_activations')
A:keras.src.utils.model_visualization.show_dtype->kwargs.pop('show_dtype')
A:keras.src.utils.model_visualization.show_shapes->kwargs.pop('show_shapes')
A:keras.src.utils.model_visualization.show_trainable->kwargs.pop('show_trainable')
A:keras.src.utils.model_visualization.colspan->len(cols)
A:keras.src.utils.model_visualization.node->make_node(layer, **kwargs)
A:keras.src.utils.model_visualization.dot->model_to_dot(model, show_shapes=show_shapes, show_dtype=show_dtype, show_layer_names=show_layer_names, rankdir=rankdir, expand_nested=expand_nested, dpi=dpi, show_layer_activations=show_layer_activations, show_trainable=show_trainable)
A:keras.src.utils.model_visualization.submodel->model_to_dot(layer, show_shapes, show_dtype, show_layer_names, rankdir, expand_nested, subgraph=True, show_layer_activations=show_layer_activations, show_trainable=show_trainable)
A:keras.src.utils.model_visualization.sub_n_nodes->model_to_dot(layer, show_shapes, show_dtype, show_layer_names, rankdir, expand_nested, subgraph=True, show_layer_activations=show_layer_activations, show_trainable=show_trainable).get_nodes()
A:keras.src.utils.model_visualization.inbound_layer_id->str(id(inbound_layer))
A:keras.src.utils.model_visualization.layer_id->str(id(layer))
A:keras.src.utils.model_visualization.node_key->make_node_key(layer, i)
A:keras.src.utils.model_visualization.name->sub_n_last_node[inbound_layer.name].get_name()
A:keras.src.utils.model_visualization.output_name->sub_n_first_node[layer.name].get_name()
A:keras.src.utils.model_visualization.to_file->str(to_file)
A:keras.src.utils.model_visualization.(_, extension)->os.path.splitext(to_file)
keras.src.utils.model_to_dot(model,show_shapes=False,show_dtype=False,show_layer_names=True,rankdir='TB',expand_nested=False,dpi=200,subgraph=False,show_layer_activations=False,show_trainable=False,**kwargs)
keras.src.utils.model_visualization.add_edge(dot,src,dst)
keras.src.utils.model_visualization.check_graphviz()
keras.src.utils.model_visualization.check_pydot()
keras.src.utils.model_visualization.get_layer_activation_name(layer)
keras.src.utils.model_visualization.make_layer_label(layer,**kwargs)
keras.src.utils.model_visualization.make_node(layer,**kwargs)
keras.src.utils.model_visualization.model_to_dot(model,show_shapes=False,show_dtype=False,show_layer_names=True,rankdir='TB',expand_nested=False,dpi=200,subgraph=False,show_layer_activations=False,show_trainable=False,**kwargs)
keras.src.utils.model_visualization.plot_model(model,to_file='model.png',show_shapes=False,show_dtype=False,show_layer_names=False,rankdir='TB',expand_nested=False,dpi=200,show_layer_activations=False,show_trainable=False,**kwargs)
keras.src.utils.plot_model(model,to_file='model.png',show_shapes=False,show_dtype=False,show_layer_names=False,rankdir='TB',expand_nested=False,dpi=200,show_layer_activations=False,show_trainable=False,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/timeseries_dataset_utils.py----------------------------------------
A:keras.src.utils.timeseries_dataset_utils.end_index->len(data)
A:keras.src.utils.timeseries_dataset_utils.num_seqs->min(num_seqs, len(targets))
A:keras.src.utils.timeseries_dataset_utils.start_positions->numpy.arange(0, num_seqs, sequence_stride, dtype=index_dtype)
A:keras.src.utils.timeseries_dataset_utils.seed->numpy.random.randint(1000000.0)
A:keras.src.utils.timeseries_dataset_utils.rng->numpy.random.RandomState(seed)
A:keras.src.utils.timeseries_dataset_utils.sequence_length->keras.src.utils.module_utils.tensorflow.cast(sequence_length, dtype=index_dtype)
A:keras.src.utils.timeseries_dataset_utils.sampling_rate->keras.src.utils.module_utils.tensorflow.cast(sampling_rate, dtype=index_dtype)
A:keras.src.utils.timeseries_dataset_utils.positions_ds->keras.src.utils.module_utils.tensorflow.data.Dataset.from_tensors(start_positions).repeat()
A:keras.src.utils.timeseries_dataset_utils.indices->keras.src.utils.module_utils.tensorflow.data.Dataset.zip((tf.data.Dataset.range(len(start_positions)), positions_ds)).map(lambda i, positions: positions[i], num_parallel_calls=tf.data.AUTOTUNE)
A:keras.src.utils.timeseries_dataset_utils.dataset->keras.src.utils.module_utils.tensorflow.data.Dataset.zip((dataset.repeat(), indices_ds)).map(lambda steps, inds: tf.gather(steps, inds), num_parallel_calls=tf.data.AUTOTUNE)
A:keras.src.utils.timeseries_dataset_utils.target_ds->sequences_from_indices(targets, indices, start_index, end_index)
keras.src.utils.timeseries_dataset_from_array(data,targets,sequence_length,sequence_stride=1,sampling_rate=1,batch_size=128,shuffle=False,seed=None,start_index=None,end_index=None)
keras.src.utils.timeseries_dataset_utils.sequences_from_indices(array,indices_ds,start_index,end_index)
keras.src.utils.timeseries_dataset_utils.timeseries_dataset_from_array(data,targets,sequence_length,sequence_stride=1,sampling_rate=1,batch_size=128,shuffle=False,seed=None,start_index=None,end_index=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/argument_validation.py----------------------------------------
A:keras.src.utils.argument_validation.value_tuple->tuple(value)
A:keras.src.utils.argument_validation.padding->value.lower()
keras.src.utils.argument_validation.standardize_padding(value,allow_causal=False)
keras.src.utils.argument_validation.standardize_tuple(value,n,name,allow_zero=False)
keras.src.utils.argument_validation.validate_string_arg(value,allowable_strings,caller_name,arg_name,allow_none=False,allow_callables=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/image_dataset_utils.py----------------------------------------
A:keras.src.utils.image_dataset_utils.interpolation->interpolation.lower().lower()
A:keras.src.utils.image_dataset_utils.seed->numpy.random.randint(1000000.0)
A:keras.src.utils.image_dataset_utils.(image_paths, labels, class_names)->keras.src.utils.dataset_utils.index_directory(directory, labels, formats=ALLOWLIST_FORMATS, class_names=class_names, shuffle=shuffle, seed=seed, follow_links=follow_links, verbose=verbose)
A:keras.src.utils.image_dataset_utils.data_format->standardize_data_format(data_format=data_format)
A:keras.src.utils.image_dataset_utils.(image_paths_train, labels_train)->keras.src.utils.dataset_utils.get_training_or_validation_split(image_paths, labels, validation_split, 'training')
A:keras.src.utils.image_dataset_utils.(image_paths_val, labels_val)->keras.src.utils.dataset_utils.get_training_or_validation_split(image_paths, labels, validation_split, 'validation')
A:keras.src.utils.image_dataset_utils.train_dataset->train_dataset.prefetch(tf.data.AUTOTUNE).prefetch(tf.data.AUTOTUNE)
A:keras.src.utils.image_dataset_utils.val_dataset->val_dataset.prefetch(tf.data.AUTOTUNE).prefetch(tf.data.AUTOTUNE)
A:keras.src.utils.image_dataset_utils.(image_paths, labels)->keras.src.utils.dataset_utils.get_training_or_validation_split(image_paths, labels, validation_split, subset)
A:keras.src.utils.image_dataset_utils.dataset->dataset.prefetch(tf.data.AUTOTUNE).prefetch(tf.data.AUTOTUNE)
A:keras.src.utils.image_dataset_utils.path_ds->keras.src.utils.module_utils.tensorflow.data.Dataset.from_tensor_slices(image_paths)
A:keras.src.utils.image_dataset_utils.img_ds->keras.src.utils.module_utils.tensorflow.data.Dataset.zip((img_ds, label_ds))
A:keras.src.utils.image_dataset_utils.label_ds->keras.src.utils.dataset_utils.labels_to_dataset(labels, label_mode, num_classes)
A:keras.src.utils.image_dataset_utils.img->keras.src.utils.module_utils.tensorflow.transpose(img, (2, 0, 1))
keras.src.utils.image_dataset_from_directory(directory,labels='inferred',label_mode='int',class_names=None,color_mode='rgb',batch_size=32,image_size=(256,256),shuffle=True,seed=None,validation_split=None,subset=None,interpolation='bilinear',follow_links=False,crop_to_aspect_ratio=False,pad_to_aspect_ratio=False,data_format=None,verbose=True)
keras.src.utils.image_dataset_utils.image_dataset_from_directory(directory,labels='inferred',label_mode='int',class_names=None,color_mode='rgb',batch_size=32,image_size=(256,256),shuffle=True,seed=None,validation_split=None,subset=None,interpolation='bilinear',follow_links=False,crop_to_aspect_ratio=False,pad_to_aspect_ratio=False,data_format=None,verbose=True)
keras.src.utils.image_dataset_utils.load_image(path,image_size,num_channels,interpolation,data_format,crop_to_aspect_ratio=False,pad_to_aspect_ratio=False)
keras.src.utils.image_dataset_utils.paths_and_labels_to_dataset(image_paths,image_size,num_channels,labels,label_mode,num_classes,interpolation,data_format,crop_to_aspect_ratio=False,pad_to_aspect_ratio=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/utils/tracking.py----------------------------------------
A:keras.src.utils.tracking.self.original_value->is_tracking_enabled()
A:keras.src.utils.tracking.value->super().pop()
A:keras.src.utils.tracking.(key, value)->super().popitem()
A:keras.src.utils.tracking.(keys, values)->optree.utils.unzip2(optree.utils.total_order_sorted(self.items(), key=lambda kv: kv[0]))
keras.src.utils.tracking.DotNotTrackScope
keras.src.utils.tracking.DotNotTrackScope.__enter__(self)
keras.src.utils.tracking.DotNotTrackScope.__exit__(self,*args,**kwargs)
keras.src.utils.tracking.TrackedDict(self,values=None,tracker=None)
keras.src.utils.tracking.TrackedDict.__init__(self,values=None,tracker=None)
keras.src.utils.tracking.TrackedDict.__setitem__(self,key,value)
keras.src.utils.tracking.TrackedDict.clear(self)
keras.src.utils.tracking.TrackedDict.pop(self,key,default=None)
keras.src.utils.tracking.TrackedDict.popitem(self)
keras.src.utils.tracking.TrackedDict.tree_flatten(self)
keras.src.utils.tracking.TrackedDict.tree_unflatten(cls,keys,values)
keras.src.utils.tracking.TrackedDict.update(self,mapping)
keras.src.utils.tracking.TrackedList(self,values=None,tracker=None)
keras.src.utils.tracking.TrackedList.__delitem__(self,index)
keras.src.utils.tracking.TrackedList.__init__(self,values=None,tracker=None)
keras.src.utils.tracking.TrackedList.append(self,value)
keras.src.utils.tracking.TrackedList.clear(self)
keras.src.utils.tracking.TrackedList.extend(self,values)
keras.src.utils.tracking.TrackedList.insert(self,value)
keras.src.utils.tracking.TrackedList.pop(self,index=-1)
keras.src.utils.tracking.TrackedList.remove(self,value)
keras.src.utils.tracking.TrackedList.tree_flatten(self)
keras.src.utils.tracking.TrackedList.tree_unflatten(cls,metadata,children)
keras.src.utils.tracking.TrackedSet(self,values=None,tracker=None)
keras.src.utils.tracking.TrackedSet.__init__(self,values=None,tracker=None)
keras.src.utils.tracking.TrackedSet.add(self,value)
keras.src.utils.tracking.TrackedSet.clear(self)
keras.src.utils.tracking.TrackedSet.pop(self)
keras.src.utils.tracking.TrackedSet.remove(self,value)
keras.src.utils.tracking.TrackedSet.tree_flatten(self)
keras.src.utils.tracking.TrackedSet.tree_unflatten(cls,metadata,children)
keras.src.utils.tracking.TrackedSet.update(self,values)
keras.src.utils.tracking.Tracker(self,config)
keras.src.utils.tracking.Tracker.__init__(self,config)
keras.src.utils.tracking.Tracker.add_to_store(self,store_name,value)
keras.src.utils.tracking.Tracker.lock(self,msg=None)
keras.src.utils.tracking.Tracker.track(self,attr)
keras.src.utils.tracking.Tracker.unlock(self)
keras.src.utils.tracking.Tracker.untrack(self,value)
keras.src.utils.tracking.is_tracking_enabled()
keras.src.utils.tracking.no_automatic_dependency_tracking(fn)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/__init__.py----------------------------------------
A:keras.src.layers.__init__.obj->keras.src.saving.serialization_lib.deserialize_keras_object(config, custom_objects=custom_objects)
keras.src.layers.__init__.deserialize(config,custom_objects=None)
keras.src.layers.__init__.serialize(layer)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/input_spec.py----------------------------------------
A:keras.src.layers.input_spec.self.shape->keras.src.backend.standardize_shape(shape)
A:keras.src.layers.input_spec.self.ndim->len(shape)
A:keras.src.layers.input_spec.max_axis->max(self.axes)
A:keras.src.layers.input_spec.input_spec->keras.src.utils.tree.flatten(input_spec)
A:keras.src.layers.input_spec.inputs->keras.src.utils.tree.flatten(inputs)
A:keras.src.layers.input_spec.shape->keras.src.backend.standardize_shape(x.shape)
A:keras.src.layers.input_spec.ndim->len(shape)
A:keras.src.layers.input_spec.dtype->keras.src.backend.standardize_dtype(x.dtype)
keras.InputSpec(self,dtype=None,shape=None,ndim=None,max_ndim=None,min_ndim=None,axes=None,allow_last_axis_squeeze=False,name=None)
keras.InputSpec.__repr__(self)
keras.InputSpec.from_config(cls,config)
keras.InputSpec.get_config(self)
keras.src.layers.input_spec.InputSpec(self,dtype=None,shape=None,ndim=None,max_ndim=None,min_ndim=None,axes=None,allow_last_axis_squeeze=False,name=None)
keras.src.layers.input_spec.InputSpec.__init__(self,dtype=None,shape=None,ndim=None,max_ndim=None,min_ndim=None,axes=None,allow_last_axis_squeeze=False,name=None)
keras.src.layers.input_spec.InputSpec.__repr__(self)
keras.src.layers.input_spec.InputSpec.from_config(cls,config)
keras.src.layers.input_spec.InputSpec.get_config(self)
keras.src.layers.input_spec.assert_input_compatibility(input_spec,inputs,layer_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/layer.py----------------------------------------
A:keras.src.layers.layer.obj->super().__new__(cls, *args, **kwargs)
A:keras.src.layers.layer.signature->inspect.signature(original_build_method)
A:keras.src.layers.layer.self.activity_regularizer->keras.src.regularizers.get(activity_regularizer)
A:keras.src.layers.layer.input_dim_arg->keras.src.utils.tree.map_structure(maybe_convert, kwargs).pop('input_dim', None)
A:keras.src.layers.layer.input_shape_arg->keras.src.utils.tree.map_structure(maybe_convert, kwargs).pop('input_shape', None)
A:keras.src.layers.layer.self._loss_ids->set()
A:keras.src.layers.layer.self._call_signature->inspect.signature(self.call)
A:keras.src.layers.layer.self._tracker->keras.src.utils.tracking.Tracker({'trainable_variables': (lambda x: isinstance(x, backend.Variable) and x.trainable, trainable_variables), 'non_trainable_variables': (lambda x: isinstance(x, backend.Variable) and (not x.trainable), non_trainable_variables), 'metrics': (lambda x: isinstance(x, Metric), metrics), 'layers': (lambda x: isinstance(x, Layer) and (not isinstance(x, Metric)), layers), 'seed_generators': (lambda x: isinstance(x, backend.random.SeedGenerator), seed_generators)})
A:keras.src.layers.layer._self_setattr_tracking->getattr(self, '_self_setattr_tracking', True)
A:keras.src.layers.layer.dtype->keras.src.backend.standardize_dtype(dtype)
A:keras.src.layers.layer.initializer->keras.src.initializers.get(initializer)
A:keras.src.layers.layer.variable->keras.src.backend.Variable(initializer=initializer, shape=shape, dtype=dtype, trainable=trainable, name=name)
A:keras.src.layers.layer.variable.regularizer->keras.src.regularizers.get(regularizer)
A:keras.src.layers.layer.variable.constraint->keras.src.constraints.get(constraint)
A:keras.src.layers.layer.value->self._tracker.track(value)
A:keras.src.layers.layer.seen_ids->set()
A:keras.src.layers.layer.args->keras.src.utils.tree.map_structure(maybe_convert, args)
A:keras.src.layers.layer.kwargs->keras.src.utils.tree.map_structure(maybe_convert, kwargs)
A:keras.src.layers.layer.call_spec->CallSpec(self._call_signature, args, kwargs)
A:keras.src.layers.layer.call_context->self._get_call_context()
A:keras.src.layers.layer.training->CallSpec(self._call_signature, args, kwargs).arguments_dict.get('training', None)
A:keras.src.layers.layer.mask->keras.src.utils.tree.map_structure(lambda x: getattr(x, '_keras_mask', None), v)
A:keras.src.layers.layer.current_scope->keras.src.backend.get_autocast_scope()
A:keras.src.layers.layer.new_scope->keras.src.backend.AutocastScope(self.compute_dtype)
A:keras.src.layers.layer.outputs->self.call(*args, **kwargs)
A:keras.src.layers.layer.distribution->keras.src.distribution.distribution_lib.distribution()
A:keras.src.layers.layer.current_layer_path->current_path()
A:keras.src.layers.layer.layout->keras.src.distribution.distribution_lib.distribution().get_tensor_layout(current_layer_path)
A:keras.src.layers.layer.previous_mask->getattr(call_spec.first_arg, '_keras_mask', None)
A:keras.src.layers.layer.trainable_mapping->zip(self.trainable_variables, trainable_variables)
A:keras.src.layers.layer.non_trainable_mapping->zip(self.non_trainable_variables, non_trainable_variables)
A:keras.src.layers.layer.new_v->keras.src.backend.get_stateless_scope().get_current_value(v)
A:keras.src.layers.layer.shapes_dict->update_shapes_dict_for_target_fn(self.build, shapes_dict=shapes_dict, call_spec=call_spec, class_name=self.__class__.__name__)
A:keras.src.layers.layer.output_shape->tuple(output_shape)
A:keras.src.layers.layer.losses->self._get_own_losses()
A:keras.src.layers.layer.scope->keras.src.backend.get_stateless_scope()
A:keras.src.layers.layer.v->keras.src.backend.get_stateless_scope().get_current_value(variable)
A:keras.src.layers.layer.weight_regularization_losses->self._get_regularization_losses()
A:keras.src.layers.layer.first_shape->next(iter(shapes_dict.values()), None)
A:keras.src.layers.layer.input_tensors->map_shape_structure(lambda s: backend.KerasTensor(s), input_shape)
A:keras.src.layers.layer.(name, value)->self._setattr_hook(name, value)
A:keras.src.layers.layer.layer_call_ctx->keras.src.backend.common.global_state.get_global_attribute('current_call_ctx')
A:keras.src.layers.layer.seen_object_ids->set()
A:keras.src.layers.layer.deque->collections.deque(self._layers)
A:keras.src.layers.layer.layer->collections.deque(self._layers).popleft()
A:keras.src.layers.layer.flat_outputs->keras.src.utils.tree.flatten(outputs)
A:keras.src.layers.layer.mask_already_computed->all((getattr(x, '_keras_mask', None) is not None for x in flat_outputs))
A:keras.src.layers.layer.output_masks->self.compute_mask(inputs, previous_mask)
A:keras.src.layers.layer.flat_masks->keras.src.utils.tree.flatten(output_masks)
A:keras.src.layers.layer.base_config->super().get_config()
A:keras.src.layers.layer.bound_args->inspect.signature(target_fn).bind(*args, **kwargs)
A:keras.src.layers.layer.flat_values->keras.src.utils.tree.flatten(value)
A:keras.src.layers.layer.sig->inspect.signature(target_fn)
A:keras.src.layers.layer.shapes_dict[f'{k}_shape']->keras.src.backend.standardize_shape(v.shape)
A:keras.src.layers.layer.values->tuple(shapes_dict.values())
A:keras.src.layers.layer.expected_call_arg->keras.src.utils.removesuffix(name, '_shape')
keras.src.Layer(self,*,activity_regularizer=None,trainable=True,dtype=None,autocast=True,name=None,**kwargs)
keras.src.Layer.__repr__(self)
keras.src.Layer.__setattr__(self,name,value)
keras.src.Layer.__str__(self)
keras.src.Layer._assert_input_compatibility(self,arg_0)
keras.src.Layer._build_by_run_for_kwargs(self,shapes_dict)
keras.src.Layer._build_by_run_for_single_pos_arg(self,input_shape)
keras.src.Layer._check_quantize_args(self,mode,compute_dtype)
keras.src.Layer._check_super_called(self)
keras.src.Layer._clear_losses(self)
keras.src.Layer._flatten_layers(self,include_self=True,recursive=True)
keras.src.Layer._get_call_context(self)
keras.src.Layer._get_own_losses(self)
keras.src.Layer._get_regularization_losses(self)
keras.src.Layer._initializer_tracker(self)
keras.src.Layer._lock_state(self)
keras.src.Layer._maybe_build(self,call_spec)
keras.src.Layer._maybe_reset_call_context(self)
keras.src.Layer._set_mask_metadata(self,inputs,outputs,previous_mask)
keras.src.Layer._track_variable(self,variable)
keras.src.Layer._untrack_variable(self,variable)
keras.src.Layer.add_loss(self,loss)
keras.src.Layer.add_metric(self)
keras.src.Layer.add_variable(self,shape,initializer,dtype=None,trainable=True,regularizer=None,constraint=None,name=None)
keras.src.Layer.add_weight(self,shape=None,initializer=None,dtype=None,trainable=True,regularizer=None,constraint=None,name=None)
keras.src.Layer.build(self,input_shape)
keras.src.Layer.build_from_config(self,config)
keras.src.Layer.call(self,*args,**kwargs)
keras.src.Layer.compute_dtype(self)
keras.src.Layer.compute_mask(self,inputs,previous_mask)
keras.src.Layer.compute_output_shape(self,*args,**kwargs)
keras.src.Layer.compute_output_spec(self,*args,**kwargs)
keras.src.Layer.count_params(self)
keras.src.Layer.dtype(self)
keras.src.Layer.get_build_config(self)
keras.src.Layer.get_config(self)
keras.src.Layer.get_weights(self)
keras.src.Layer.input_dtype(self)
keras.src.Layer.input_spec(self)
keras.src.Layer.input_spec(self,value)
keras.src.Layer.load_own_variables(self,store)
keras.src.Layer.losses(self)
keras.src.Layer.metrics_variables(self)
keras.src.Layer.non_trainable_variables(self)
keras.src.Layer.non_trainable_weights(self)
keras.src.Layer.quantize(self,mode)
keras.src.Layer.quantized_call(self,*args,**kwargs)
keras.src.Layer.save_own_variables(self,store)
keras.src.Layer.set_weights(self,weights)
keras.src.Layer.stateless_call(self,trainable_variables,non_trainable_variables,*args,return_losses=False,**kwargs)
keras.src.Layer.supports_masking(self)
keras.src.Layer.supports_masking(self,value)
keras.src.Layer.trainable(self)
keras.src.Layer.trainable(self,value)
keras.src.Layer.trainable_variables(self)
keras.src.Layer.trainable_weights(self)
keras.src.Layer.variable_dtype(self)
keras.src.Layer.variables(self)
keras.src.Layer.weights(self)
keras.src.layers.layer.CallContext(self,entry_layer)
keras.src.layers.layer.CallContext.__init__(self,entry_layer)
keras.src.layers.layer.CallSpec(self,signature,args,kwargs)
keras.src.layers.layer.CallSpec.__init__(self,signature,args,kwargs)
keras.src.layers.layer.Layer(self,*,activity_regularizer=None,trainable=True,dtype=None,autocast=True,name=None,**kwargs)
keras.src.layers.layer.Layer.__init__(self,*,activity_regularizer=None,trainable=True,dtype=None,autocast=True,name=None,**kwargs)
keras.src.layers.layer.Layer.__repr__(self)
keras.src.layers.layer.Layer.__setattr__(self,name,value)
keras.src.layers.layer.Layer.__str__(self)
keras.src.layers.layer.Layer._assert_input_compatibility(self,arg_0)
keras.src.layers.layer.Layer._build_by_run_for_kwargs(self,shapes_dict)
keras.src.layers.layer.Layer._build_by_run_for_single_pos_arg(self,input_shape)
keras.src.layers.layer.Layer._check_quantize_args(self,mode,compute_dtype)
keras.src.layers.layer.Layer._check_super_called(self)
keras.src.layers.layer.Layer._clear_losses(self)
keras.src.layers.layer.Layer._flatten_layers(self,include_self=True,recursive=True)
keras.src.layers.layer.Layer._get_call_context(self)
keras.src.layers.layer.Layer._get_own_losses(self)
keras.src.layers.layer.Layer._get_regularization_losses(self)
keras.src.layers.layer.Layer._initializer_tracker(self)
keras.src.layers.layer.Layer._lock_state(self)
keras.src.layers.layer.Layer._maybe_build(self,call_spec)
keras.src.layers.layer.Layer._maybe_reset_call_context(self)
keras.src.layers.layer.Layer._set_mask_metadata(self,inputs,outputs,previous_mask)
keras.src.layers.layer.Layer._track_variable(self,variable)
keras.src.layers.layer.Layer._untrack_variable(self,variable)
keras.src.layers.layer.Layer.add_loss(self,loss)
keras.src.layers.layer.Layer.add_metric(self)
keras.src.layers.layer.Layer.add_variable(self,shape,initializer,dtype=None,trainable=True,regularizer=None,constraint=None,name=None)
keras.src.layers.layer.Layer.add_weight(self,shape=None,initializer=None,dtype=None,trainable=True,regularizer=None,constraint=None,name=None)
keras.src.layers.layer.Layer.build(self,input_shape)
keras.src.layers.layer.Layer.build_from_config(self,config)
keras.src.layers.layer.Layer.call(self,*args,**kwargs)
keras.src.layers.layer.Layer.compute_dtype(self)
keras.src.layers.layer.Layer.compute_mask(self,inputs,previous_mask)
keras.src.layers.layer.Layer.compute_output_shape(self,*args,**kwargs)
keras.src.layers.layer.Layer.compute_output_spec(self,*args,**kwargs)
keras.src.layers.layer.Layer.count_params(self)
keras.src.layers.layer.Layer.dtype(self)
keras.src.layers.layer.Layer.get_build_config(self)
keras.src.layers.layer.Layer.get_config(self)
keras.src.layers.layer.Layer.get_weights(self)
keras.src.layers.layer.Layer.input_dtype(self)
keras.src.layers.layer.Layer.input_spec(self)
keras.src.layers.layer.Layer.input_spec(self,value)
keras.src.layers.layer.Layer.load_own_variables(self,store)
keras.src.layers.layer.Layer.losses(self)
keras.src.layers.layer.Layer.metrics_variables(self)
keras.src.layers.layer.Layer.non_trainable_variables(self)
keras.src.layers.layer.Layer.non_trainable_weights(self)
keras.src.layers.layer.Layer.quantize(self,mode)
keras.src.layers.layer.Layer.quantized_call(self,*args,**kwargs)
keras.src.layers.layer.Layer.save_own_variables(self,store)
keras.src.layers.layer.Layer.set_weights(self,weights)
keras.src.layers.layer.Layer.stateless_call(self,trainable_variables,non_trainable_variables,*args,return_losses=False,**kwargs)
keras.src.layers.layer.Layer.supports_masking(self)
keras.src.layers.layer.Layer.supports_masking(self,value)
keras.src.layers.layer.Layer.trainable(self)
keras.src.layers.layer.Layer.trainable(self,value)
keras.src.layers.layer.Layer.trainable_variables(self)
keras.src.layers.layer.Layer.trainable_weights(self)
keras.src.layers.layer.Layer.variable_dtype(self)
keras.src.layers.layer.Layer.variables(self)
keras.src.layers.layer.Layer.weights(self)
keras.src.layers.layer.get_arguments_dict(fn,args,kwargs)
keras.src.layers.layer.get_shapes_dict(call_spec)
keras.src.layers.layer.is_backend_tensor_or_symbolic(x)
keras.src.layers.layer.is_shape_tuple(s)
keras.src.layers.layer.might_have_unbuilt_state(layer)
keras.src.layers.layer.update_shapes_dict_for_target_fn(target_fn,shapes_dict,call_spec,class_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/core/input_layer.py----------------------------------------
A:keras.src.layers.core.input_layer.shape->keras.src.backend.standardize_shape(shape)
A:keras.src.layers.core.input_layer.batch_shape->kwargs.pop('batch_input_shape')
A:keras.src.layers.core.input_layer.self.batch_shape->tuple(batch_shape)
A:keras.src.layers.core.input_layer.self._dtype->keras.src.backend.standardize_dtype(dtype)
A:keras.src.layers.core.input_layer.self.sparse->bool(sparse)
A:keras.src.layers.core.input_layer.input_tensor->keras.src.backend.KerasTensor(shape=batch_shape, dtype=dtype, sparse=sparse, name=name)
A:keras.src.layers.core.input_layer.layer->InputLayer(shape=shape, batch_size=batch_size, dtype=dtype, sparse=sparse, batch_shape=batch_shape, name=name, input_tensor=tensor)
keras.src.Input(shape=None,batch_size=None,dtype=None,sparse=None,batch_shape=None,name=None,tensor=None)
keras.src.InputLayer(self,shape=None,batch_size=None,dtype=None,sparse=None,batch_shape=None,input_tensor=None,name=None,**kwargs)
keras.src.InputLayer.call(self)
keras.src.InputLayer.dtype(self)
keras.src.InputLayer.get_config(self)
keras.src.layers.core.input_layer.Input(shape=None,batch_size=None,dtype=None,sparse=None,batch_shape=None,name=None,tensor=None)
keras.src.layers.core.input_layer.InputLayer(self,shape=None,batch_size=None,dtype=None,sparse=None,batch_shape=None,input_tensor=None,name=None,**kwargs)
keras.src.layers.core.input_layer.InputLayer.__init__(self,shape=None,batch_size=None,dtype=None,sparse=None,batch_shape=None,input_tensor=None,name=None,**kwargs)
keras.src.layers.core.input_layer.InputLayer.call(self)
keras.src.layers.core.input_layer.InputLayer.dtype(self)
keras.src.layers.core.input_layer.InputLayer.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/core/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/core/dense.py----------------------------------------
A:keras.src.layers.core.dense.self.activation->keras.src.activations.get(activation)
A:keras.src.layers.core.dense.self.kernel_initializer->keras.src.initializers.get(kernel_initializer)
A:keras.src.layers.core.dense.self.bias_initializer->keras.src.initializers.get(bias_initializer)
A:keras.src.layers.core.dense.self.kernel_regularizer->keras.src.regularizers.get(kernel_regularizer)
A:keras.src.layers.core.dense.self.bias_regularizer->keras.src.regularizers.get(bias_regularizer)
A:keras.src.layers.core.dense.self.kernel_constraint->keras.src.constraints.get(kernel_constraint)
A:keras.src.layers.core.dense.self.bias_constraint->keras.src.constraints.get(bias_constraint)
A:keras.src.layers.core.dense.self.input_spec->InputSpec(min_ndim=2, axes={-1: input_dim})
A:keras.src.layers.core.dense.self._kernel->self.add_weight(name='kernel', shape=self._kernel.shape, initializer=lambda shape, dtype: kernel_value, dtype='int8', trainable=False)
A:keras.src.layers.core.dense.self.bias->self.add_weight(name='bias', shape=(self.units,), initializer=self.bias_initializer, regularizer=self.bias_regularizer, constraint=self.bias_constraint)
A:keras.src.layers.core.dense.x->self.activation(x)
A:keras.src.layers.core.dense.(inputs, inputs_scale)->self.inputs_quantizer(inputs)
A:keras.src.layers.core.dense.output_shape->list(input_shape)
A:keras.src.layers.core.dense.self.lora_kernel_a->self._untrack_variable(self.lora_kernel_a)
A:keras.src.layers.core.dense.self.lora_kernel_b->self._untrack_variable(self.lora_kernel_b)
A:keras.src.layers.core.dense.self.inputs_quantizer->keras.src.quantizers.AbsMaxQuantizer(axis=-1)
A:keras.src.layers.core.dense.(kernel_value, kernel_scale)->keras.src.quantizers.abs_max_quantize(self._kernel, axis=0)
A:keras.src.layers.core.dense.kernel_scale->keras.src.ops.cast(kernel_scale, self.compute_dtype)
A:keras.src.layers.core.dense.self.kernel_scale->self.add_weight(name='kernel_scale', shape=kernel_scale.shape, initializer=lambda shape, dtype: kernel_scale, dtype=self.compute_dtype, trainable=False)
A:keras.src.layers.core.dense.self.dtype_policy->keras.src.dtype_policies.get(quantized_dtype)
A:keras.src.layers.core.dense.base_config->super().get_config()
keras.src.layers.Dense(self,units,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,lora_rank=None,**kwargs)
keras.src.layers.Dense._merge_lora_into_kernel(self,untrack=False)
keras.src.layers.Dense.build(self,input_shape)
keras.src.layers.Dense.call(self,inputs)
keras.src.layers.Dense.compute_output_shape(self,input_shape)
keras.src.layers.Dense.enable_lora(self,rank,a_initializer='he_uniform',b_initializer='zeros')
keras.src.layers.Dense.get_config(self)
keras.src.layers.Dense.kernel(self)
keras.src.layers.Dense.load_own_variables(self,store)
keras.src.layers.Dense.quantize(self,mode)
keras.src.layers.Dense.quantized_call(self,inputs)
keras.src.layers.Dense.save_own_variables(self,store)
keras.src.layers.core.dense.Dense(self,units,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,lora_rank=None,**kwargs)
keras.src.layers.core.dense.Dense.__init__(self,units,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,lora_rank=None,**kwargs)
keras.src.layers.core.dense.Dense._merge_lora_into_kernel(self,untrack=False)
keras.src.layers.core.dense.Dense.build(self,input_shape)
keras.src.layers.core.dense.Dense.call(self,inputs)
keras.src.layers.core.dense.Dense.compute_output_shape(self,input_shape)
keras.src.layers.core.dense.Dense.enable_lora(self,rank,a_initializer='he_uniform',b_initializer='zeros')
keras.src.layers.core.dense.Dense.get_config(self)
keras.src.layers.core.dense.Dense.kernel(self)
keras.src.layers.core.dense.Dense.load_own_variables(self,store)
keras.src.layers.core.dense.Dense.quantize(self,mode)
keras.src.layers.core.dense.Dense.quantized_call(self,inputs)
keras.src.layers.core.dense.Dense.save_own_variables(self,store)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/core/identity.py----------------------------------------
keras.src.layers.Identity(self,**kwargs)
keras.src.layers.Identity.call(self,inputs)
keras.src.layers.Identity.compute_output_shape(self,input_shape)
keras.src.layers.Identity.compute_output_spec(self,inputs)
keras.src.layers.core.identity.Identity(self,**kwargs)
keras.src.layers.core.identity.Identity.__init__(self,**kwargs)
keras.src.layers.core.identity.Identity.call(self,inputs)
keras.src.layers.core.identity.Identity.compute_output_shape(self,input_shape)
keras.src.layers.core.identity.Identity.compute_output_spec(self,inputs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/core/masking.py----------------------------------------
A:keras.src.layers.core.masking.boolean_mask->keras.src.ops.any(ops.not_equal(inputs, self.mask_value), axis=-1, keepdims=True)
A:keras.src.layers.core.masking.outputs._keras_mask->keras.src.ops.squeeze(boolean_mask, axis=-1)
A:keras.src.layers.core.masking.base_config->super().get_config()
keras.src.layers.Masking(self,mask_value=0.0,**kwargs)
keras.src.layers.Masking.call(self,inputs)
keras.src.layers.Masking.compute_mask(self,inputs,mask=None)
keras.src.layers.Masking.compute_output_shape(self,input_shape)
keras.src.layers.Masking.get_config(self)
keras.src.layers.core.masking.Masking(self,mask_value=0.0,**kwargs)
keras.src.layers.core.masking.Masking.__init__(self,mask_value=0.0,**kwargs)
keras.src.layers.core.masking.Masking.call(self,inputs)
keras.src.layers.core.masking.Masking.compute_mask(self,inputs,mask=None)
keras.src.layers.core.masking.Masking.compute_output_shape(self,input_shape)
keras.src.layers.core.masking.Masking.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/core/lambda_layer.py----------------------------------------
A:keras.src.layers.core.lambda_layer.inputs->keras.src.utils.shape_utils.map_shape_structure(lambda x: backend.KerasTensor(x, dtype=self.compute_dtype), input_shape)
A:keras.src.layers.core.lambda_layer.output_spec->keras.src.backend.compute_output_spec(self.call, inputs)
A:keras.src.layers.core.lambda_layer.output_shape->self._serialize_function_to_config(self._output_shape)
A:keras.src.layers.core.lambda_layer.mask->keras.src.saving.serialization_lib.serialize_keras_object(self.mask)
A:keras.src.layers.core.lambda_layer.config['arguments']->keras.src.saving.serialization_lib.deserialize_keras_object(config['arguments'], custom_objects=custom_objects)
A:keras.src.layers.core.lambda_layer.base_config->super().get_config()
A:keras.src.layers.core.lambda_layer.(code, defaults, closure)->keras.src.utils.python_utils.func_dump(fn)
A:keras.src.layers.core.lambda_layer.fn->keras.src.utils.python_utils.func_load(inner_config['code'], defaults=inner_config['defaults'], closure=inner_config['closure'])
A:keras.src.layers.core.lambda_layer.config['function']->keras.src.saving.serialization_lib.deserialize_keras_object(fn_config, custom_objects=custom_objects)
A:keras.src.layers.core.lambda_layer.config['output_shape']->keras.src.saving.serialization_lib.deserialize_keras_object(fn_config, custom_objects=custom_objects)
keras.src.layers.Lambda(self,function,output_shape=None,mask=None,arguments=None,**kwargs)
keras.src.layers.Lambda._raise_for_lambda_deserialization(arg_name,safe_mode)
keras.src.layers.Lambda._serialize_function_to_config(self,fn)
keras.src.layers.Lambda.call(self,inputs,mask=None,training=None)
keras.src.layers.Lambda.compute_mask(self,inputs,mask=None)
keras.src.layers.Lambda.compute_output_shape(self,input_shape)
keras.src.layers.Lambda.from_config(cls,config,custom_objects=None,safe_mode=None)
keras.src.layers.Lambda.get_config(self)
keras.src.layers.core.lambda_layer.Lambda(self,function,output_shape=None,mask=None,arguments=None,**kwargs)
keras.src.layers.core.lambda_layer.Lambda.__init__(self,function,output_shape=None,mask=None,arguments=None,**kwargs)
keras.src.layers.core.lambda_layer.Lambda._raise_for_lambda_deserialization(arg_name,safe_mode)
keras.src.layers.core.lambda_layer.Lambda._serialize_function_to_config(self,fn)
keras.src.layers.core.lambda_layer.Lambda.call(self,inputs,mask=None,training=None)
keras.src.layers.core.lambda_layer.Lambda.compute_mask(self,inputs,mask=None)
keras.src.layers.core.lambda_layer.Lambda.compute_output_shape(self,input_shape)
keras.src.layers.core.lambda_layer.Lambda.from_config(cls,config,custom_objects=None,safe_mode=None)
keras.src.layers.core.lambda_layer.Lambda.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/core/einsum_dense.py----------------------------------------
A:keras.src.layers.core.einsum_dense.self.partial_output_shape->tuple(output_shape)
A:keras.src.layers.core.einsum_dense.self.activation->keras.src.activations.get(activation)
A:keras.src.layers.core.einsum_dense.self.kernel_initializer->keras.src.initializers.get(kernel_initializer)
A:keras.src.layers.core.einsum_dense.self.bias_initializer->keras.src.initializers.get(bias_initializer)
A:keras.src.layers.core.einsum_dense.self.kernel_regularizer->keras.src.regularizers.get(kernel_regularizer)
A:keras.src.layers.core.einsum_dense.self.bias_regularizer->keras.src.regularizers.get(bias_regularizer)
A:keras.src.layers.core.einsum_dense.self.kernel_constraint->keras.src.constraints.get(kernel_constraint)
A:keras.src.layers.core.einsum_dense.self.bias_constraint->keras.src.constraints.get(bias_constraint)
A:keras.src.layers.core.einsum_dense.shape_data->_analyze_einsum_string(self.equation, self.bias_axes, input_shape, self.partial_output_shape)
A:keras.src.layers.core.einsum_dense.self.full_output_shape->tuple(full_output_shape)
A:keras.src.layers.core.einsum_dense.self._kernel->self.add_weight(name='kernel', shape=self._kernel.shape, initializer=lambda shape, dtype: kernel_value, dtype='int8', trainable=False)
A:keras.src.layers.core.einsum_dense.self.bias->self.add_weight(name='bias', shape=tuple(bias_shape), initializer=self.bias_initializer, regularizer=self.bias_regularizer, constraint=self.bias_constraint, dtype=self.dtype, trainable=True)
A:keras.src.layers.core.einsum_dense.self.input_spec->InputSpec(ndim=len(input_shape))
A:keras.src.layers.core.einsum_dense.base_config->super().get_config()
A:keras.src.layers.core.einsum_dense.x->self.activation(x)
A:keras.src.layers.core.einsum_dense.(inputs, inputs_scale)->self.inputs_quantizer(inputs)
A:keras.src.layers.core.einsum_dense.inputs_scale->keras.src.ops.squeeze(inputs_scale, axis=self._input_squeeze_axes)
A:keras.src.layers.core.einsum_dense.self.lora_kernel_a->self._untrack_variable(self.lora_kernel_a)
A:keras.src.layers.core.einsum_dense.self.lora_kernel_b->self._untrack_variable(self.lora_kernel_b)
A:keras.src.layers.core.einsum_dense.(self._input_reduced_axes, self._kernel_reduced_axes, self._input_transpose_axes, self._kernel_transpose_axes, self._input_expand_axes, self._kernel_expand_axes, self._input_squeeze_axes, self._kernel_squeeze_axes)->_analyze_quantization_info(self.equation, self.input_spec.ndim)
A:keras.src.layers.core.einsum_dense.self.inputs_quantizer->keras.src.quantizers.AbsMaxQuantizer(axis=self._input_reduced_axes)
A:keras.src.layers.core.einsum_dense.(kernel_value, kernel_scale)->keras.src.quantizers.abs_max_quantize(self._kernel, axis=self._kernel_reduced_axes)
A:keras.src.layers.core.einsum_dense.kernel_scale->keras.src.ops.squeeze(kernel_scale, axis=self._kernel_squeeze_axes)
A:keras.src.layers.core.einsum_dense.self.kernel_scale->self.add_weight(name='kernel_scale', shape=kernel_scale.shape, initializer=lambda shape, dtype: kernel_scale, dtype=self.compute_dtype, trainable=False)
A:keras.src.layers.core.einsum_dense.self.dtype_policy->keras.src.dtype_policies.get(quantized_dtype)
A:keras.src.layers.core.einsum_dense.dot_replaced_string->re.sub('\\.\\.\\.', '0', equation)
A:keras.src.layers.core.einsum_dense.split_string->re.match('([a-zA-Z]{2,})0,([a-zA-Z]+)->([a-zA-Z]+)0', dot_replaced_string)
A:keras.src.layers.core.einsum_dense.input_spec->re.match('([a-zA-Z]{2,})0,([a-zA-Z]+)->([a-zA-Z]+)0', dot_replaced_string).group(1)
A:keras.src.layers.core.einsum_dense.weight_spec->re.match('([a-zA-Z]{2,})0,([a-zA-Z]+)->([a-zA-Z]+)0', dot_replaced_string).group(2)
A:keras.src.layers.core.einsum_dense.output_spec->re.match('([a-zA-Z]{2,})0,([a-zA-Z]+)->([a-zA-Z]+)0', dot_replaced_string).group(3)
A:keras.src.layers.core.einsum_dense.output_shape->list(output_shape)
A:keras.src.layers.core.einsum_dense.first_bias_location->min([output_spec.find(char) for char in bias_axes])
A:keras.src.layers.core.einsum_dense.possible_labels->sorted(set(possible_labels) - set(input_spec) - set(weight_spec) - set(output_spec))
A:keras.src.layers.core.einsum_dense.(input_spec, weight_spec, output_spec)->get_specs(equation, input_shape)
A:keras.src.layers.core.einsum_dense.index->weight_expand_axes.pop(0)
A:keras.src.layers.core.einsum_dense.index_input->re.match('([a-zA-Z]{2,})0,([a-zA-Z]+)->([a-zA-Z]+)0', dot_replaced_string).group(1).find(label)
A:keras.src.layers.core.einsum_dense.index_weight->re.match('([a-zA-Z]{2,})0,([a-zA-Z]+)->([a-zA-Z]+)0', dot_replaced_string).group(2).find(label)
keras.src.layers.EinsumDense(self,equation,output_shape,activation=None,bias_axes=None,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,kernel_constraint=None,bias_constraint=None,lora_rank=None,**kwargs)
keras.src.layers.EinsumDense._merge_lora_into_kernel(self,untrack=False)
keras.src.layers.EinsumDense.build(self,input_shape)
keras.src.layers.EinsumDense.call(self,inputs)
keras.src.layers.EinsumDense.compute_output_shape(self,_)
keras.src.layers.EinsumDense.enable_lora(self,rank,a_initializer='he_uniform',b_initializer='zeros')
keras.src.layers.EinsumDense.get_config(self)
keras.src.layers.EinsumDense.kernel(self)
keras.src.layers.EinsumDense.load_own_variables(self,store)
keras.src.layers.EinsumDense.quantize(self,mode)
keras.src.layers.EinsumDense.quantized_call(self,inputs)
keras.src.layers.EinsumDense.save_own_variables(self,store)
keras.src.layers.core.einsum_dense.EinsumDense(self,equation,output_shape,activation=None,bias_axes=None,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,kernel_constraint=None,bias_constraint=None,lora_rank=None,**kwargs)
keras.src.layers.core.einsum_dense.EinsumDense.__init__(self,equation,output_shape,activation=None,bias_axes=None,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,kernel_constraint=None,bias_constraint=None,lora_rank=None,**kwargs)
keras.src.layers.core.einsum_dense.EinsumDense._merge_lora_into_kernel(self,untrack=False)
keras.src.layers.core.einsum_dense.EinsumDense.build(self,input_shape)
keras.src.layers.core.einsum_dense.EinsumDense.call(self,inputs)
keras.src.layers.core.einsum_dense.EinsumDense.compute_output_shape(self,_)
keras.src.layers.core.einsum_dense.EinsumDense.enable_lora(self,rank,a_initializer='he_uniform',b_initializer='zeros')
keras.src.layers.core.einsum_dense.EinsumDense.get_config(self)
keras.src.layers.core.einsum_dense.EinsumDense.kernel(self)
keras.src.layers.core.einsum_dense.EinsumDense.load_own_variables(self,store)
keras.src.layers.core.einsum_dense.EinsumDense.quantize(self,mode)
keras.src.layers.core.einsum_dense.EinsumDense.quantized_call(self,inputs)
keras.src.layers.core.einsum_dense.EinsumDense.save_own_variables(self,store)
keras.src.layers.core.einsum_dense._analyze_einsum_string(equation,bias_axes,input_shape,output_shape)
keras.src.layers.core.einsum_dense._analyze_quantization_info(equation,input_shape)
keras.src.layers.core.einsum_dense._analyze_split_string(split_string,bias_axes,input_shape,output_shape,left_elided=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/core/embedding.py----------------------------------------
A:keras.src.layers.core.embedding.self.embeddings_initializer->keras.src.initializers.get(embeddings_initializer)
A:keras.src.layers.core.embedding.self.embeddings_regularizer->keras.src.regularizers.get(embeddings_regularizer)
A:keras.src.layers.core.embedding.self.embeddings_constraint->keras.src.constraints.get(embeddings_constraint)
A:keras.src.layers.core.embedding.self._embeddings->self.add_weight(shape=(self.input_dim, self.output_dim), initializer=self.embeddings_initializer, name='embeddings', regularizer=self.embeddings_regularizer, constraint=self.embeddings_constraint, trainable=True)
A:keras.src.layers.core.embedding.inputs->keras.src.ops.cast(inputs, 'int32')
A:keras.src.layers.core.embedding.outputs->keras.src.ops.take(self.embeddings, inputs, axis=0)
A:keras.src.layers.core.embedding.self.lora_embeddings_a->self.add_weight(name='lora_embeddings_a', shape=(self.embeddings.shape[0], rank), initializer=initializers.get(a_initializer), regularizer=self.embeddings_regularizer)
A:keras.src.layers.core.embedding.self.lora_embeddings_b->self.add_weight(name='lora_embeddings_b', shape=(rank, self.embeddings.shape[1]), initializer=initializers.get(b_initializer), regularizer=self.embeddings_regularizer)
A:keras.src.layers.core.embedding.base_config->super().get_config()
keras.src.layers.Embedding(self,input_dim,output_dim,embeddings_initializer='uniform',embeddings_regularizer=None,embeddings_constraint=None,mask_zero=False,lora_rank=None,**kwargs)
keras.src.layers.Embedding.build(self,input_shape=None)
keras.src.layers.Embedding.call(self,inputs)
keras.src.layers.Embedding.compute_mask(self,inputs,mask=None)
keras.src.layers.Embedding.compute_output_shape(self,input_shape)
keras.src.layers.Embedding.embeddings(self)
keras.src.layers.Embedding.enable_lora(self,rank,a_initializer='he_uniform',b_initializer='zeros')
keras.src.layers.Embedding.get_config(self)
keras.src.layers.Embedding.load_own_variables(self,store)
keras.src.layers.Embedding.save_own_variables(self,store)
keras.src.layers.core.embedding.Embedding(self,input_dim,output_dim,embeddings_initializer='uniform',embeddings_regularizer=None,embeddings_constraint=None,mask_zero=False,lora_rank=None,**kwargs)
keras.src.layers.core.embedding.Embedding.__init__(self,input_dim,output_dim,embeddings_initializer='uniform',embeddings_regularizer=None,embeddings_constraint=None,mask_zero=False,lora_rank=None,**kwargs)
keras.src.layers.core.embedding.Embedding.build(self,input_shape=None)
keras.src.layers.core.embedding.Embedding.call(self,inputs)
keras.src.layers.core.embedding.Embedding.compute_mask(self,inputs,mask=None)
keras.src.layers.core.embedding.Embedding.compute_output_shape(self,input_shape)
keras.src.layers.core.embedding.Embedding.embeddings(self)
keras.src.layers.core.embedding.Embedding.enable_lora(self,rank,a_initializer='he_uniform',b_initializer='zeros')
keras.src.layers.core.embedding.Embedding.get_config(self)
keras.src.layers.core.embedding.Embedding.load_own_variables(self,store)
keras.src.layers.core.embedding.Embedding.save_own_variables(self,store)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/core/wrapper.py----------------------------------------
A:keras.src.layers.core.wrapper.base_config->super().get_config()
A:keras.src.layers.core.wrapper.layer->keras.src.saving.serialization_lib.deserialize_keras_object(config.pop('layer'), custom_objects=custom_objects)
keras.src.layers.Wrapper(self,layer,**kwargs)
keras.src.layers.Wrapper.build(self,input_shape=None)
keras.src.layers.Wrapper.from_config(cls,config,custom_objects=None)
keras.src.layers.Wrapper.get_config(self)
keras.src.layers.core.wrapper.Wrapper(self,layer,**kwargs)
keras.src.layers.core.wrapper.Wrapper.__init__(self,layer,**kwargs)
keras.src.layers.core.wrapper.Wrapper.build(self,input_shape=None)
keras.src.layers.core.wrapper.Wrapper.from_config(cls,config,custom_objects=None)
keras.src.layers.core.wrapper.Wrapper.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/center_crop.py----------------------------------------
A:keras.src.layers.preprocessing.center_crop.self.data_format->keras.src.backend.standardize_data_format(data_format)
A:keras.src.layers.preprocessing.center_crop.inputs->self.backend.cast(inputs, self.compute_dtype)
A:keras.src.layers.preprocessing.center_crop.h_start->int(h_diff / 2)
A:keras.src.layers.preprocessing.center_crop.w_start->int(w_diff / 2)
A:keras.src.layers.preprocessing.center_crop.input_shape->list(input_shape)
A:keras.src.layers.preprocessing.center_crop.base_config->super().get_config()
keras.src.layers.CenterCrop(self,height,width,data_format=None,**kwargs)
keras.src.layers.CenterCrop.call(self,inputs)
keras.src.layers.CenterCrop.compute_output_shape(self,input_shape)
keras.src.layers.CenterCrop.get_config(self)
keras.src.layers.preprocessing.center_crop.CenterCrop(self,height,width,data_format=None,**kwargs)
keras.src.layers.preprocessing.center_crop.CenterCrop.__init__(self,height,width,data_format=None,**kwargs)
keras.src.layers.preprocessing.center_crop.CenterCrop.call(self,inputs)
keras.src.layers.preprocessing.center_crop.CenterCrop.compute_output_shape(self,input_shape)
keras.src.layers.preprocessing.center_crop.CenterCrop.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/random_zoom.py----------------------------------------
A:keras.src.layers.preprocessing.random_zoom.(self.height_lower, self.height_upper)->self._set_factor(height_factor, 'height_factor')
A:keras.src.layers.preprocessing.random_zoom.(self.width_lower, self.width_upper)->self._set_factor(width_factor, 'width_factor')
A:keras.src.layers.preprocessing.random_zoom.self.generator->SeedGenerator(seed)
A:keras.src.layers.preprocessing.random_zoom.self.data_format->keras.src.backend.standardize_data_format(data_format)
A:keras.src.layers.preprocessing.random_zoom.(lower, upper)->sorted(factor)
A:keras.src.layers.preprocessing.random_zoom.factor->abs(factor)
A:keras.src.layers.preprocessing.random_zoom.inputs->self.backend.numpy.expand_dims(inputs, axis=0)
A:keras.src.layers.preprocessing.random_zoom.inputs_shape->self.backend.shape(inputs)
A:keras.src.layers.preprocessing.random_zoom.seed_generator->self._get_seed_generator(self.backend._backend)
A:keras.src.layers.preprocessing.random_zoom.height_zoom->self.backend.random.uniform(minval=1.0 + self.height_lower, maxval=1.0 + self.height_upper, shape=[batch_size, 1], seed=seed_generator)
A:keras.src.layers.preprocessing.random_zoom.width_zoom->self.backend.random.uniform(minval=1.0 + self.width_lower, maxval=1.0 + self.width_upper, shape=[batch_size, 1], seed=seed_generator)
A:keras.src.layers.preprocessing.random_zoom.zooms->self.backend.cast(self.backend.numpy.concatenate([width_zoom, height_zoom], axis=1), dtype='float32')
A:keras.src.layers.preprocessing.random_zoom.outputs->self.backend.numpy.squeeze(outputs, axis=0)
A:keras.src.layers.preprocessing.random_zoom.base_config->super().get_config()
keras.src.layers.RandomZoom(self,height_factor,width_factor=None,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,data_format=None,**kwargs)
keras.src.layers.RandomZoom._check_factor_range(self,input_number)
keras.src.layers.RandomZoom._get_zoom_matrix(self,zooms,image_height,image_width)
keras.src.layers.RandomZoom._randomly_zoom_inputs(self,inputs)
keras.src.layers.RandomZoom._set_factor(self,factor,factor_name)
keras.src.layers.RandomZoom.call(self,inputs,training=True)
keras.src.layers.RandomZoom.compute_output_shape(self,input_shape)
keras.src.layers.RandomZoom.get_config(self)
keras.src.layers.preprocessing.random_zoom.RandomZoom(self,height_factor,width_factor=None,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,data_format=None,**kwargs)
keras.src.layers.preprocessing.random_zoom.RandomZoom.__init__(self,height_factor,width_factor=None,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,data_format=None,**kwargs)
keras.src.layers.preprocessing.random_zoom.RandomZoom._check_factor_range(self,input_number)
keras.src.layers.preprocessing.random_zoom.RandomZoom._get_zoom_matrix(self,zooms,image_height,image_width)
keras.src.layers.preprocessing.random_zoom.RandomZoom._randomly_zoom_inputs(self,inputs)
keras.src.layers.preprocessing.random_zoom.RandomZoom._set_factor(self,factor,factor_name)
keras.src.layers.preprocessing.random_zoom.RandomZoom.call(self,inputs,training=True)
keras.src.layers.preprocessing.random_zoom.RandomZoom.compute_output_shape(self,input_shape)
keras.src.layers.preprocessing.random_zoom.RandomZoom.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/random_brightness.py----------------------------------------
A:keras.src.layers.preprocessing.random_brightness.self.generator->SeedGenerator(seed)
A:keras.src.layers.preprocessing.random_brightness.self.value_range->sorted(value_range)
A:keras.src.layers.preprocessing.random_brightness.self._factor->sorted(factor)
A:keras.src.layers.preprocessing.random_brightness.factor->abs(factor)
A:keras.src.layers.preprocessing.random_brightness.inputs->self.backend.cast(inputs, self.compute_dtype)
A:keras.src.layers.preprocessing.random_brightness.images_shape->self.backend.shape(images)
A:keras.src.layers.preprocessing.random_brightness.rank->len(images_shape)
A:keras.src.layers.preprocessing.random_brightness.seed_generator->self._get_seed_generator(self.backend._backend)
A:keras.src.layers.preprocessing.random_brightness.rgb_delta->self.backend.cast(rgb_delta, images.dtype)
A:keras.src.layers.preprocessing.random_brightness.base_config->super().get_config()
keras.src.layers.RandomBrightness(self,factor,value_range=(0,255),seed=None,**kwargs)
keras.src.layers.RandomBrightness._check_factor_range(self,input_number)
keras.src.layers.RandomBrightness._randomly_adjust_brightness(self,images)
keras.src.layers.RandomBrightness._set_factor(self,factor)
keras.src.layers.RandomBrightness._set_value_range(self,value_range)
keras.src.layers.RandomBrightness.call(self,inputs,training=True)
keras.src.layers.RandomBrightness.compute_output_shape(self,input_shape)
keras.src.layers.RandomBrightness.get_config(self)
keras.src.layers.preprocessing.random_brightness.RandomBrightness(self,factor,value_range=(0,255),seed=None,**kwargs)
keras.src.layers.preprocessing.random_brightness.RandomBrightness.__init__(self,factor,value_range=(0,255),seed=None,**kwargs)
keras.src.layers.preprocessing.random_brightness.RandomBrightness._check_factor_range(self,input_number)
keras.src.layers.preprocessing.random_brightness.RandomBrightness._randomly_adjust_brightness(self,images)
keras.src.layers.preprocessing.random_brightness.RandomBrightness._set_factor(self,factor)
keras.src.layers.preprocessing.random_brightness.RandomBrightness._set_value_range(self,value_range)
keras.src.layers.preprocessing.random_brightness.RandomBrightness.call(self,inputs,training=True)
keras.src.layers.preprocessing.random_brightness.RandomBrightness.compute_output_shape(self,input_shape)
keras.src.layers.preprocessing.random_brightness.RandomBrightness.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/rescaling.py----------------------------------------
A:keras.src.layers.preprocessing.rescaling.scale->self.backend.numpy.reshape(scale, scale_shape + (1,) * (3 - len(scale_shape)))
A:keras.src.layers.preprocessing.rescaling.offset->self.backend.cast(self.offset, dtype)
A:keras.src.layers.preprocessing.rescaling.scale_shape->self.backend.core.shape(scale)
A:keras.src.layers.preprocessing.rescaling.base_config->super().get_config()
keras.src.layers.Rescaling(self,scale,offset=0.0,**kwargs)
keras.src.layers.Rescaling.call(self,inputs)
keras.src.layers.Rescaling.compute_output_shape(self,input_shape)
keras.src.layers.Rescaling.get_config(self)
keras.src.layers.preprocessing.rescaling.Rescaling(self,scale,offset=0.0,**kwargs)
keras.src.layers.preprocessing.rescaling.Rescaling.__init__(self,scale,offset=0.0,**kwargs)
keras.src.layers.preprocessing.rescaling.Rescaling.call(self,inputs)
keras.src.layers.preprocessing.rescaling.Rescaling.compute_output_shape(self,input_shape)
keras.src.layers.preprocessing.rescaling.Rescaling.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/text_vectorization.py----------------------------------------
A:keras.src.layers.preprocessing.text_vectorization.self._ngrams->tuple(range(1, ngrams + 1))
A:keras.src.layers.preprocessing.text_vectorization.self._has_input_vocabulary->kwargs.pop('has_input_vocabulary', vocabulary is not None)
A:keras.src.layers.preprocessing.text_vectorization.vocabulary_size->kwargs.pop('vocabulary_size', None)
A:keras.src.layers.preprocessing.text_vectorization.self._lookup_layer->StringLookup(max_tokens=max_tokens, vocabulary=vocabulary, idf_weights=idf_weights, pad_to_max_tokens=pad_to_max_tokens, mask_token='', output_mode=output_mode, sparse=sparse, has_input_vocabulary=self._has_input_vocabulary, encoding=encoding, vocabulary_size=vocabulary_size)
A:keras.src.layers.preprocessing.text_vectorization.output_shape->self.compute_output_shape(inputs.shape)
A:keras.src.layers.preprocessing.text_vectorization.output_dtype->keras.src.backend.floatx()
A:keras.src.layers.preprocessing.text_vectorization.data->keras.src.utils.module_utils.tensorflow.expand_dims(data, -1)
A:keras.src.layers.preprocessing.text_vectorization.base_config->super().get_config()
A:keras.src.layers.preprocessing.text_vectorization.config['standardize']->keras.src.saving.serialization_lib.deserialize_keras_object(config['standardize'])
A:keras.src.layers.preprocessing.text_vectorization.config['split']->keras.src.saving.serialization_lib.deserialize_keras_object(config['split'])
A:keras.src.layers.preprocessing.text_vectorization.config['ngrams']->tuple(config['ngrams'])
A:keras.src.layers.preprocessing.text_vectorization.inputs->self._preprocess(inputs)
A:keras.src.layers.preprocessing.text_vectorization.lookup_data->self._lookup_layer.call(inputs)
A:keras.src.layers.preprocessing.text_vectorization.shape->keras.src.utils.module_utils.tensorflow.shape(outputs)
A:keras.src.layers.preprocessing.text_vectorization.outputs->keras.src.utils.module_utils.tensorflow.pad(outputs, padding)
A:keras.src.layers.preprocessing.text_vectorization.padded_shape->keras.src.utils.module_utils.tensorflow.concat((shape[:-1], [self._output_sequence_length]), 0)
A:keras.src.layers.preprocessing.text_vectorization.(padding, _)->keras.src.utils.module_utils.tensorflow.required_space_to_batch_paddings(shape, padded_shape)
keras.src.layers.TextVectorization(self,max_tokens=None,standardize='lower_and_strip_punctuation',split='whitespace',ngrams=None,output_mode='int',output_sequence_length=None,pad_to_max_tokens=False,vocabulary=None,idf_weights=None,sparse=False,ragged=False,encoding='utf-8',name=None,**kwargs)
keras.src.layers.TextVectorization._preprocess(self,inputs)
keras.src.layers.TextVectorization.adapt(self,data,batch_size=None,steps=None)
keras.src.layers.TextVectorization.build(self,input_shape=None)
keras.src.layers.TextVectorization.call(self,inputs)
keras.src.layers.TextVectorization.compute_dtype(self)
keras.src.layers.TextVectorization.compute_output_shape(self,input_shape)
keras.src.layers.TextVectorization.compute_output_spec(self,inputs)
keras.src.layers.TextVectorization.finalize_state(self)
keras.src.layers.TextVectorization.from_config(cls,config)
keras.src.layers.TextVectorization.get_config(self)
keras.src.layers.TextVectorization.get_vocabulary(self,include_special_tokens=True)
keras.src.layers.TextVectorization.load_assets(self,dir_path)
keras.src.layers.TextVectorization.load_own_variables(self,store)
keras.src.layers.TextVectorization.reset_state(self)
keras.src.layers.TextVectorization.save_assets(self,dir_path)
keras.src.layers.TextVectorization.save_own_variables(self,store)
keras.src.layers.TextVectorization.set_vocabulary(self,vocabulary,idf_weights=None)
keras.src.layers.TextVectorization.update_state(self,data)
keras.src.layers.TextVectorization.variable_dtype(self)
keras.src.layers.TextVectorization.vocabulary_size(self)
keras.src.layers.preprocessing.text_vectorization.TextVectorization(self,max_tokens=None,standardize='lower_and_strip_punctuation',split='whitespace',ngrams=None,output_mode='int',output_sequence_length=None,pad_to_max_tokens=False,vocabulary=None,idf_weights=None,sparse=False,ragged=False,encoding='utf-8',name=None,**kwargs)
keras.src.layers.preprocessing.text_vectorization.TextVectorization.__init__(self,max_tokens=None,standardize='lower_and_strip_punctuation',split='whitespace',ngrams=None,output_mode='int',output_sequence_length=None,pad_to_max_tokens=False,vocabulary=None,idf_weights=None,sparse=False,ragged=False,encoding='utf-8',name=None,**kwargs)
keras.src.layers.preprocessing.text_vectorization.TextVectorization._preprocess(self,inputs)
keras.src.layers.preprocessing.text_vectorization.TextVectorization.adapt(self,data,batch_size=None,steps=None)
keras.src.layers.preprocessing.text_vectorization.TextVectorization.build(self,input_shape=None)
keras.src.layers.preprocessing.text_vectorization.TextVectorization.call(self,inputs)
keras.src.layers.preprocessing.text_vectorization.TextVectorization.compute_dtype(self)
keras.src.layers.preprocessing.text_vectorization.TextVectorization.compute_output_shape(self,input_shape)
keras.src.layers.preprocessing.text_vectorization.TextVectorization.compute_output_spec(self,inputs)
keras.src.layers.preprocessing.text_vectorization.TextVectorization.finalize_state(self)
keras.src.layers.preprocessing.text_vectorization.TextVectorization.from_config(cls,config)
keras.src.layers.preprocessing.text_vectorization.TextVectorization.get_config(self)
keras.src.layers.preprocessing.text_vectorization.TextVectorization.get_vocabulary(self,include_special_tokens=True)
keras.src.layers.preprocessing.text_vectorization.TextVectorization.load_assets(self,dir_path)
keras.src.layers.preprocessing.text_vectorization.TextVectorization.load_own_variables(self,store)
keras.src.layers.preprocessing.text_vectorization.TextVectorization.reset_state(self)
keras.src.layers.preprocessing.text_vectorization.TextVectorization.save_assets(self,dir_path)
keras.src.layers.preprocessing.text_vectorization.TextVectorization.save_own_variables(self,store)
keras.src.layers.preprocessing.text_vectorization.TextVectorization.set_vocabulary(self,vocabulary,idf_weights=None)
keras.src.layers.preprocessing.text_vectorization.TextVectorization.update_state(self,data)
keras.src.layers.preprocessing.text_vectorization.TextVectorization.variable_dtype(self)
keras.src.layers.preprocessing.text_vectorization.TextVectorization.vocabulary_size(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/index_lookup.py----------------------------------------
A:keras.src.layers.preprocessing.index_lookup.self._frozen_vocab_size->self.vocabulary_size()
A:keras.src.layers.preprocessing.index_lookup.self._has_input_vocabulary->kwargs.pop('has_input_vocabulary', vocabulary is not None)
A:keras.src.layers.preprocessing.index_lookup.self._default_value->self._oov_start_index()
A:keras.src.layers.preprocessing.index_lookup.self._mask_key->keras.src.utils.module_utils.tensorflow.convert_to_tensor(mask_key, self._key_dtype)
A:keras.src.layers.preprocessing.index_lookup.self._mask_value->keras.src.utils.module_utils.tensorflow.convert_to_tensor(mask_value, self._value_dtype)
A:keras.src.layers.preprocessing.index_lookup.self.idf_weights->keras.src.utils.module_utils.tensorflow.Variable(idf_weights, dtype=backend.floatx(), trainable=False)
A:keras.src.layers.preprocessing.index_lookup.self.idf_weights_const->self.idf_weights.value()
A:keras.src.layers.preprocessing.index_lookup.self.lookup_table->self._lookup_table_from_tokens(tokens)
A:keras.src.layers.preprocessing.index_lookup.self.token_counts->keras.src.utils.module_utils.tensorflow.lookup.experimental.MutableHashTable(key_dtype=vocabulary_dtype, value_dtype='int64', default_value=0)
A:keras.src.layers.preprocessing.index_lookup.self.token_document_counts->keras.src.utils.module_utils.tensorflow.lookup.experimental.MutableHashTable(key_dtype=vocabulary_dtype, value_dtype='int64', default_value=0)
A:keras.src.layers.preprocessing.index_lookup.self.num_documents->keras.src.utils.module_utils.tensorflow.Variable(0, dtype='int64', trainable=False)
A:keras.src.layers.preprocessing.index_lookup.(keys, values)->self.lookup_table.export()
A:keras.src.layers.preprocessing.index_lookup.lookup->collections.defaultdict(lambda : self.oov_token, zip(indices, vocab))
A:keras.src.layers.preprocessing.index_lookup.base_config->super().get_config()
A:keras.src.layers.preprocessing.index_lookup.vocabulary->self.get_vocabulary(include_special_tokens=True)
A:keras.src.layers.preprocessing.index_lookup.idf_weights->keras.src.utils.module_utils.tensorflow.pad(idf_weights, [[0, self.max_tokens - tf.size(idf_weights)]], constant_values=0)
A:keras.src.layers.preprocessing.index_lookup.oov_start->self._oov_start_index()
A:keras.src.layers.preprocessing.index_lookup.token_start->self._token_start_index()
A:keras.src.layers.preprocessing.index_lookup.found_special_tokens->numpy.array_equal(special_tokens, vocabulary[:token_start])
A:keras.src.layers.preprocessing.index_lookup.repeated_tokens->self._find_repeated_tokens(tokens)
A:keras.src.layers.preprocessing.index_lookup.front_padding_value->numpy.average(idf_weights)
A:keras.src.layers.preprocessing.index_lookup.weights->keras.src.utils.module_utils.tensorflow.convert_to_tensor(weights, dtype=backend.floatx())
A:keras.src.layers.preprocessing.index_lookup.output_dtype->keras.src.backend.floatx()
A:keras.src.layers.preprocessing.index_lookup.output_shape->self.compute_output_shape(inputs.shape)
A:keras.src.layers.preprocessing.index_lookup.data->keras.src.utils.module_utils.tensorflow.expand_dims(data, 0)
A:keras.src.layers.preprocessing.index_lookup.(tokens, counts)->self.token_counts.export()
A:keras.src.layers.preprocessing.index_lookup.deduped_doc_data->keras.src.utils.module_utils.tensorflow.concat(deduped_doc_data, axis=0)
A:keras.src.layers.preprocessing.index_lookup.tokens->keras.src.utils.module_utils.tensorflow.gather(tokens, sorted_indices)
A:keras.src.layers.preprocessing.index_lookup.token_document_counts->self.token_document_counts.lookup(tokens)
A:keras.src.layers.preprocessing.index_lookup.inputs->self._expand_dims(inputs, -1)
A:keras.src.layers.preprocessing.index_lookup.lookups->keras.src.utils.module_utils.tensorflow.where(oov_locations, oov_indices, lookups)
A:keras.src.layers.preprocessing.index_lookup.mask_locations->keras.src.utils.module_utils.tensorflow.equal(inputs, self._mask_key)
A:keras.src.layers.preprocessing.index_lookup.oov_indices->keras.src.utils.module_utils.tensorflow.strings.to_hash_bucket_fast(inputs, num_buckets=self.num_oov_indices)
A:keras.src.layers.preprocessing.index_lookup.oov_inputs->keras.src.utils.module_utils.tensorflow.gather_nd(inputs, oov_indices)
A:keras.src.layers.preprocessing.index_lookup.msg->keras.src.utils.module_utils.tensorflow.strings.format('When `num_oov_indices=0` all inputs should be in vocabulary, found OOV values {}, consider setting `num_oov_indices=1`.', (oov_inputs,))
A:keras.src.layers.preprocessing.index_lookup.assertion->keras.src.utils.module_utils.tensorflow.Assert(tf.equal(tf.size(oov_indices), 0), [msg])
A:keras.src.layers.preprocessing.index_lookup.oov_locations->keras.src.utils.module_utils.tensorflow.equal(lookups, self._default_value)
A:keras.src.layers.preprocessing.index_lookup.store['idf_weights']->self.idf_weights_const.numpy()
A:keras.src.layers.preprocessing.index_lookup.vocabulary_filepath->keras.src.utils.module_utils.tensorflow.io.gfile.join(dir_path, 'vocabulary.txt')
A:keras.src.layers.preprocessing.index_lookup.lines->f.read().split('\n')
A:keras.src.layers.preprocessing.index_lookup.initializer->keras.src.utils.module_utils.tensorflow.lookup.TextFileInitializer(filename=filename, key_dtype=self._key_dtype, key_index=key_index, value_dtype=self._value_dtype, value_index=value_index, value_index_offset=self._token_start_index())
A:keras.src.layers.preprocessing.index_lookup.indices->keras.src.utils.module_utils.tensorflow.range(token_start, token_end, dtype=indices_dtype)
A:keras.src.layers.preprocessing.index_lookup.new_vocab_size->self.vocabulary_size()
A:keras.src.layers.preprocessing.index_lookup.vocabulary_set->set(vocabulary)
A:keras.src.layers.preprocessing.index_lookup.flat_values->keras.src.utils.module_utils.tensorflow.reshape(data, [-1])
A:keras.src.layers.preprocessing.index_lookup.(tokens, _, counts)->keras.src.utils.module_utils.tensorflow.unique_with_counts(flat_values, out_idx='int64')
A:keras.src.layers.preprocessing.index_lookup.x->x.tolist().tolist()
keras.src.layers.IndexLookup(self,max_tokens,num_oov_indices,mask_token,oov_token,vocabulary_dtype,vocabulary=None,idf_weights=None,invert=False,output_mode='int',sparse=False,pad_to_max_tokens=False,name=None,**kwargs)
keras.src.layers.IndexLookup._convert_to_ndarray(self,x)
keras.src.layers.IndexLookup._ensure_known_vocab_size(self)
keras.src.layers.IndexLookup._ensure_vocab_size_unchanged(self)
keras.src.layers.IndexLookup._expand_dims(self,inputs,axis)
keras.src.layers.IndexLookup._find_repeated_tokens(self,vocabulary)
keras.src.layers.IndexLookup._inverse_document_frequency(self,token_document_counts,num_documents)
keras.src.layers.IndexLookup._lookup_dense(self,inputs)
keras.src.layers.IndexLookup._lookup_table_from_file(self,filename)
keras.src.layers.IndexLookup._lookup_table_from_tokens(self,tokens)
keras.src.layers.IndexLookup._num_tokens(self,data)
keras.src.layers.IndexLookup._oov_start_index(self)
keras.src.layers.IndexLookup._record_vocabulary_size(self)
keras.src.layers.IndexLookup._tensor_vocab_to_numpy(self,vocabulary)
keras.src.layers.IndexLookup._token_start_index(self)
keras.src.layers.IndexLookup._uninitialized_lookup_table(self)
keras.src.layers.IndexLookup.adapt(self,data,steps=None)
keras.src.layers.IndexLookup.build(self)
keras.src.layers.IndexLookup.build_from_config(self,config)
keras.src.layers.IndexLookup.call(self,inputs)
keras.src.layers.IndexLookup.compute_dtype(self)
keras.src.layers.IndexLookup.compute_output_shape(self,input_shape)
keras.src.layers.IndexLookup.compute_output_spec(self,inputs)
keras.src.layers.IndexLookup.finalize_state(self)
keras.src.layers.IndexLookup.get_build_config(self)
keras.src.layers.IndexLookup.get_config(self)
keras.src.layers.IndexLookup.get_vocabulary(self,include_special_tokens=True)
keras.src.layers.IndexLookup.load_assets(self,dir_path)
keras.src.layers.IndexLookup.load_own_variables(self,store)
keras.src.layers.IndexLookup.reset_state(self)
keras.src.layers.IndexLookup.save_assets(self,dir_path)
keras.src.layers.IndexLookup.save_own_variables(self,store)
keras.src.layers.IndexLookup.set_vocabulary(self,vocabulary,idf_weights=None)
keras.src.layers.IndexLookup.update_state(self,data)
keras.src.layers.IndexLookup.variable_dtype(self)
keras.src.layers.IndexLookup.vocabulary_size(self)
keras.src.layers.preprocessing.index_lookup.IndexLookup(self,max_tokens,num_oov_indices,mask_token,oov_token,vocabulary_dtype,vocabulary=None,idf_weights=None,invert=False,output_mode='int',sparse=False,pad_to_max_tokens=False,name=None,**kwargs)
keras.src.layers.preprocessing.index_lookup.IndexLookup.__init__(self,max_tokens,num_oov_indices,mask_token,oov_token,vocabulary_dtype,vocabulary=None,idf_weights=None,invert=False,output_mode='int',sparse=False,pad_to_max_tokens=False,name=None,**kwargs)
keras.src.layers.preprocessing.index_lookup.IndexLookup._convert_to_ndarray(self,x)
keras.src.layers.preprocessing.index_lookup.IndexLookup._ensure_known_vocab_size(self)
keras.src.layers.preprocessing.index_lookup.IndexLookup._ensure_vocab_size_unchanged(self)
keras.src.layers.preprocessing.index_lookup.IndexLookup._expand_dims(self,inputs,axis)
keras.src.layers.preprocessing.index_lookup.IndexLookup._find_repeated_tokens(self,vocabulary)
keras.src.layers.preprocessing.index_lookup.IndexLookup._inverse_document_frequency(self,token_document_counts,num_documents)
keras.src.layers.preprocessing.index_lookup.IndexLookup._lookup_dense(self,inputs)
keras.src.layers.preprocessing.index_lookup.IndexLookup._lookup_table_from_file(self,filename)
keras.src.layers.preprocessing.index_lookup.IndexLookup._lookup_table_from_tokens(self,tokens)
keras.src.layers.preprocessing.index_lookup.IndexLookup._num_tokens(self,data)
keras.src.layers.preprocessing.index_lookup.IndexLookup._oov_start_index(self)
keras.src.layers.preprocessing.index_lookup.IndexLookup._record_vocabulary_size(self)
keras.src.layers.preprocessing.index_lookup.IndexLookup._tensor_vocab_to_numpy(self,vocabulary)
keras.src.layers.preprocessing.index_lookup.IndexLookup._token_start_index(self)
keras.src.layers.preprocessing.index_lookup.IndexLookup._uninitialized_lookup_table(self)
keras.src.layers.preprocessing.index_lookup.IndexLookup.adapt(self,data,steps=None)
keras.src.layers.preprocessing.index_lookup.IndexLookup.build(self)
keras.src.layers.preprocessing.index_lookup.IndexLookup.build_from_config(self,config)
keras.src.layers.preprocessing.index_lookup.IndexLookup.call(self,inputs)
keras.src.layers.preprocessing.index_lookup.IndexLookup.compute_dtype(self)
keras.src.layers.preprocessing.index_lookup.IndexLookup.compute_output_shape(self,input_shape)
keras.src.layers.preprocessing.index_lookup.IndexLookup.compute_output_spec(self,inputs)
keras.src.layers.preprocessing.index_lookup.IndexLookup.finalize_state(self)
keras.src.layers.preprocessing.index_lookup.IndexLookup.get_build_config(self)
keras.src.layers.preprocessing.index_lookup.IndexLookup.get_config(self)
keras.src.layers.preprocessing.index_lookup.IndexLookup.get_vocabulary(self,include_special_tokens=True)
keras.src.layers.preprocessing.index_lookup.IndexLookup.load_assets(self,dir_path)
keras.src.layers.preprocessing.index_lookup.IndexLookup.load_own_variables(self,store)
keras.src.layers.preprocessing.index_lookup.IndexLookup.reset_state(self)
keras.src.layers.preprocessing.index_lookup.IndexLookup.save_assets(self,dir_path)
keras.src.layers.preprocessing.index_lookup.IndexLookup.save_own_variables(self,store)
keras.src.layers.preprocessing.index_lookup.IndexLookup.set_vocabulary(self,vocabulary,idf_weights=None)
keras.src.layers.preprocessing.index_lookup.IndexLookup.update_state(self,data)
keras.src.layers.preprocessing.index_lookup.IndexLookup.variable_dtype(self)
keras.src.layers.preprocessing.index_lookup.IndexLookup.vocabulary_size(self)
keras.src.layers.preprocessing.index_lookup.get_null_initializer(key_dtype,value_dtype)
keras.src.layers.preprocessing.index_lookup.listify_tensors(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/random_translation.py----------------------------------------
A:keras.src.layers.preprocessing.random_translation.(self.height_lower, self.height_upper)->self._set_factor(height_factor, 'height_factor')
A:keras.src.layers.preprocessing.random_translation.(self.width_lower, self.width_upper)->self._set_factor(width_factor, 'width_factor')
A:keras.src.layers.preprocessing.random_translation.self.generator->SeedGenerator(seed)
A:keras.src.layers.preprocessing.random_translation.self.data_format->keras.src.backend.standardize_data_format(data_format)
A:keras.src.layers.preprocessing.random_translation.(lower, upper)->sorted(factor)
A:keras.src.layers.preprocessing.random_translation.factor->abs(factor)
A:keras.src.layers.preprocessing.random_translation.inputs->self.backend.numpy.expand_dims(inputs, axis=0)
A:keras.src.layers.preprocessing.random_translation.inputs_shape->self.backend.shape(inputs)
A:keras.src.layers.preprocessing.random_translation.seed_generator->self._get_seed_generator(self.backend._backend)
A:keras.src.layers.preprocessing.random_translation.height_translate->self.backend.numpy.multiply(height_translate, height)
A:keras.src.layers.preprocessing.random_translation.width_translate->self.backend.numpy.multiply(width_translate, width)
A:keras.src.layers.preprocessing.random_translation.translations->self.backend.cast(self.backend.numpy.concatenate([width_translate, height_translate], axis=1), dtype='float32')
A:keras.src.layers.preprocessing.random_translation.outputs->self.backend.numpy.squeeze(outputs, axis=0)
A:keras.src.layers.preprocessing.random_translation.base_config->super().get_config()
keras.src.layers.RandomTranslation(self,height_factor,width_factor,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,data_format=None,**kwargs)
keras.src.layers.RandomTranslation._check_factor_range(self,input_number)
keras.src.layers.RandomTranslation._get_translation_matrix(self,translations)
keras.src.layers.RandomTranslation._randomly_translate_inputs(self,inputs)
keras.src.layers.RandomTranslation._set_factor(self,factor,factor_name)
keras.src.layers.RandomTranslation.call(self,inputs,training=True)
keras.src.layers.RandomTranslation.compute_output_shape(self,input_shape)
keras.src.layers.RandomTranslation.get_config(self)
keras.src.layers.preprocessing.random_translation.RandomTranslation(self,height_factor,width_factor,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,data_format=None,**kwargs)
keras.src.layers.preprocessing.random_translation.RandomTranslation.__init__(self,height_factor,width_factor,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,data_format=None,**kwargs)
keras.src.layers.preprocessing.random_translation.RandomTranslation._check_factor_range(self,input_number)
keras.src.layers.preprocessing.random_translation.RandomTranslation._get_translation_matrix(self,translations)
keras.src.layers.preprocessing.random_translation.RandomTranslation._randomly_translate_inputs(self,inputs)
keras.src.layers.preprocessing.random_translation.RandomTranslation._set_factor(self,factor,factor_name)
keras.src.layers.preprocessing.random_translation.RandomTranslation.call(self,inputs,training=True)
keras.src.layers.preprocessing.random_translation.RandomTranslation.compute_output_shape(self,input_shape)
keras.src.layers.preprocessing.random_translation.RandomTranslation.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/tf_data_layer.py----------------------------------------
A:keras.src.layers.preprocessing.tf_data_layer.self.backend->keras.src.utils.backend_utils.DynamicBackend()
A:keras.src.layers.preprocessing.tf_data_layer.inputs->keras.src.utils.tree.map_structure(lambda x: self.backend.convert_to_tensor(x, dtype=self.compute_dtype), inputs)
A:keras.src.layers.preprocessing.tf_data_layer.outputs->super().__call__(inputs, **kwargs)
A:keras.src.layers.preprocessing.tf_data_layer.seed_generator->SeedGenerator(self.seed, backend=self.backend)
keras.src.layers.preprocessing.tf_data_layer.TFDataLayer(self,**kwargs)
keras.src.layers.preprocessing.tf_data_layer.TFDataLayer.__init__(self,**kwargs)
keras.src.layers.preprocessing.tf_data_layer.TFDataLayer._get_seed_generator(self,backend=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/hashing.py----------------------------------------
A:keras.src.layers.preprocessing.hashing.self.salt->list(salt)
A:keras.src.layers.preprocessing.hashing.inputs->keras.src.utils.module_utils.tensorflow.convert_to_tensor(backend.convert_to_numpy(inputs))
A:keras.src.layers.preprocessing.hashing.indices->self._hash_values_to_bins(inputs)
A:keras.src.layers.preprocessing.hashing.outputs->keras.src.utils.tf_utils.encode_categorical_inputs(indices, output_mode=self.output_mode, depth=self.num_bins, sparse=self.sparse, dtype=self.dtype)
A:keras.src.layers.preprocessing.hashing.mask->keras.src.utils.module_utils.tensorflow.equal(values, self.mask_value)
A:keras.src.layers.preprocessing.hashing.values->keras.src.utils.module_utils.tensorflow.where(mask, tf.zeros_like(values), values)
A:keras.src.layers.preprocessing.hashing.config->super().get_config()
keras.src.layers.Hashing(self,num_bins,mask_value=None,salt=None,output_mode='int',sparse=False,**kwargs)
keras.src.layers.Hashing._hash_values_to_bins(self,values)
keras.src.layers.Hashing.call(self,inputs)
keras.src.layers.Hashing.compute_output_spec(self,inputs)
keras.src.layers.Hashing.get_config(self)
keras.src.layers.preprocessing.hashing.Hashing(self,num_bins,mask_value=None,salt=None,output_mode='int',sparse=False,**kwargs)
keras.src.layers.preprocessing.hashing.Hashing.__init__(self,num_bins,mask_value=None,salt=None,output_mode='int',sparse=False,**kwargs)
keras.src.layers.preprocessing.hashing.Hashing._hash_values_to_bins(self,values)
keras.src.layers.preprocessing.hashing.Hashing.call(self,inputs)
keras.src.layers.preprocessing.hashing.Hashing.compute_output_spec(self,inputs)
keras.src.layers.preprocessing.hashing.Hashing.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/feature_space.py----------------------------------------
A:keras.src.layers.preprocessing.feature_space.self.feature_names->tuple(feature_names)
A:keras.src.layers.preprocessing.feature_space.preprocessor->keras.src.layers.Hashing(name=f'{name}_preprocessor', num_bins=num_bins)
A:keras.src.layers.preprocessing.feature_space.feature_set->set(features.keys())
A:keras.src.layers.preprocessing.feature_space.cross->keras.src.saving.serialization_lib.deserialize_keras_object(cross)
A:keras.src.layers.preprocessing.feature_space.feature_dataset->feature_dataset.map(lambda x: tf.expand_dims(x, -1)).map(lambda x: tf.expand_dims(x, -1))
A:keras.src.layers.preprocessing.feature_space.preprocessed_features->self._preprocess_features(self.inputs)
A:keras.src.layers.preprocessing.feature_space.crossed_features->self._cross_features(preprocessed_features)
A:keras.src.layers.preprocessing.feature_space.merged_features->self._merge_features(preprocessed_features, crossed_features)
A:keras.src.layers.preprocessing.feature_space.outputs->self.crossers[cross.name](inputs)
A:keras.src.layers.preprocessing.feature_space.self._preprocessed_features_names->sorted(preprocessed_features.keys())
A:keras.src.layers.preprocessing.feature_space.self._crossed_features_names->sorted(crossed_features.keys())
A:keras.src.layers.preprocessing.feature_space.encoder->keras.src.layers.CategoryEncoding(num_tokens=cardinality, output_mode='multi_hot')
A:keras.src.layers.preprocessing.feature_space.feature->encoder(feature)
A:keras.src.layers.preprocessing.feature_space.dtype->keras.src.backend.standardize_dtype(dtype)
A:keras.src.layers.preprocessing.feature_space.cardinality->keras.src.layers.Hashing(name=f'{name}_preprocessor', num_bins=num_bins).vocabulary_size()
A:keras.src.layers.preprocessing.feature_space.self.concat->keras.src.layers.Concatenate(axis=-1)
A:keras.src.layers.preprocessing.feature_space.x->keras.src.utils.module_utils.tensorflow.convert_to_tensor(x)
A:keras.src.layers.preprocessing.feature_space.data[name]->keras.src.utils.module_utils.tensorflow.expand_dims(x, -1)
A:keras.src.layers.preprocessing.feature_space.preprocessed_data->keras.src.utils.tree.map_structure(lambda x: self._convert_input(x), preprocessed_data)
A:keras.src.layers.preprocessing.feature_space.crossed_data->keras.src.utils.tree.map_structure(lambda x: self._convert_input(x), crossed_data)
A:keras.src.layers.preprocessing.feature_space.merged_data->keras.src.utils.tree.map_structure(lambda x: backend.convert_to_tensor(x, dtype=x.dtype), merged_data)
A:keras.src.layers.preprocessing.feature_space.merged_data[name]->keras.src.utils.module_utils.tensorflow.squeeze(x, axis=0)
keras.src.layers.preprocessing.feature_space.Cross(self,feature_names,crossing_dim,output_mode='one_hot')
keras.src.layers.preprocessing.feature_space.Cross.__init__(self,feature_names,crossing_dim,output_mode='one_hot')
keras.src.layers.preprocessing.feature_space.Cross.from_config(cls,config)
keras.src.layers.preprocessing.feature_space.Cross.get_config(self)
keras.src.layers.preprocessing.feature_space.Cross.name(self)
keras.src.layers.preprocessing.feature_space.Feature(self,dtype,preprocessor,output_mode)
keras.src.layers.preprocessing.feature_space.Feature.__init__(self,dtype,preprocessor,output_mode)
keras.src.layers.preprocessing.feature_space.Feature.from_config(cls,config)
keras.src.layers.preprocessing.feature_space.Feature.get_config(self)
keras.src.layers.preprocessing.feature_space.FeatureSpace(self,features,output_mode='concat',crosses=None,crossing_dim=32,hashing_dim=32,num_discretization_bins=32,name=None)
keras.src.layers.preprocessing.feature_space.FeatureSpace.__init__(self,features,output_mode='concat',crosses=None,crossing_dim=32,hashing_dim=32,num_discretization_bins=32,name=None)
keras.src.layers.preprocessing.feature_space.FeatureSpace._check_if_adapted(self)
keras.src.layers.preprocessing.feature_space.FeatureSpace._check_if_built(self)
keras.src.layers.preprocessing.feature_space.FeatureSpace._convert_input(self,x)
keras.src.layers.preprocessing.feature_space.FeatureSpace._cross_features(self,features)
keras.src.layers.preprocessing.feature_space.FeatureSpace._cross_to_crosser(self,cross)
keras.src.layers.preprocessing.feature_space.FeatureSpace._feature_to_input(self,name,feature)
keras.src.layers.preprocessing.feature_space.FeatureSpace._list_adaptable_preprocessors(self)
keras.src.layers.preprocessing.feature_space.FeatureSpace._merge_features(self,preprocessed_features,crossed_features)
keras.src.layers.preprocessing.feature_space.FeatureSpace._preprocess_features(self,features)
keras.src.layers.preprocessing.feature_space.FeatureSpace._standardize_feature(self,name,feature)
keras.src.layers.preprocessing.feature_space.FeatureSpace.adapt(self,dataset)
keras.src.layers.preprocessing.feature_space.FeatureSpace.build_from_config(self,config)
keras.src.layers.preprocessing.feature_space.FeatureSpace.cross(cls,feature_names,crossing_dim,output_mode='one_hot')
keras.src.layers.preprocessing.feature_space.FeatureSpace.feature(cls,dtype,preprocessor,output_mode)
keras.src.layers.preprocessing.feature_space.FeatureSpace.float(cls,name=None)
keras.src.layers.preprocessing.feature_space.FeatureSpace.float_discretized(cls,num_bins,bin_boundaries=None,output_mode='one_hot',name=None)
keras.src.layers.preprocessing.feature_space.FeatureSpace.float_normalized(cls,name=None)
keras.src.layers.preprocessing.feature_space.FeatureSpace.float_rescaled(cls,scale=1.0,offset=0.0,name=None)
keras.src.layers.preprocessing.feature_space.FeatureSpace.from_config(cls,config)
keras.src.layers.preprocessing.feature_space.FeatureSpace.get_build_config(self)
keras.src.layers.preprocessing.feature_space.FeatureSpace.get_config(self)
keras.src.layers.preprocessing.feature_space.FeatureSpace.get_encoded_features(self)
keras.src.layers.preprocessing.feature_space.FeatureSpace.get_inputs(self)
keras.src.layers.preprocessing.feature_space.FeatureSpace.integer_categorical(cls,max_tokens=None,num_oov_indices=1,output_mode='one_hot',name=None)
keras.src.layers.preprocessing.feature_space.FeatureSpace.integer_hashed(cls,num_bins,output_mode='one_hot',name=None)
keras.src.layers.preprocessing.feature_space.FeatureSpace.load_own_variables(self,store)
keras.src.layers.preprocessing.feature_space.FeatureSpace.save(self,filepath)
keras.src.layers.preprocessing.feature_space.FeatureSpace.save_own_variables(self,store)
keras.src.layers.preprocessing.feature_space.FeatureSpace.string_categorical(cls,max_tokens=None,num_oov_indices=1,output_mode='one_hot',name=None)
keras.src.layers.preprocessing.feature_space.FeatureSpace.string_hashed(cls,num_bins,output_mode='one_hot',name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/hashed_crossing.py----------------------------------------
A:keras.src.layers.preprocessing.hashed_crossing.rank->len(first_shape)
A:keras.src.layers.preprocessing.hashed_crossing.outputs->keras.src.utils.tf_utils.encode_categorical_inputs(outputs, output_mode=self.output_mode, depth=self.num_bins, sparse=self.sparse, dtype=self.compute_dtype)
A:keras.src.layers.preprocessing.hashed_crossing.first_shape->tuple(inputs[0].shape)
keras.src.layers.HashedCrossing(self,num_bins,output_mode='int',sparse=False,name=None,dtype=None,**kwargs)
keras.src.layers.HashedCrossing._check_at_least_two_inputs(self,inputs)
keras.src.layers.HashedCrossing._check_input_shape_and_type(self,inputs)
keras.src.layers.HashedCrossing.call(self,inputs)
keras.src.layers.HashedCrossing.compute_output_shape(self,input_shape)
keras.src.layers.HashedCrossing.get_config(self)
keras.src.layers.preprocessing.hashed_crossing.HashedCrossing(self,num_bins,output_mode='int',sparse=False,name=None,dtype=None,**kwargs)
keras.src.layers.preprocessing.hashed_crossing.HashedCrossing.__init__(self,num_bins,output_mode='int',sparse=False,name=None,dtype=None,**kwargs)
keras.src.layers.preprocessing.hashed_crossing.HashedCrossing._check_at_least_two_inputs(self,inputs)
keras.src.layers.preprocessing.hashed_crossing.HashedCrossing._check_input_shape_and_type(self,inputs)
keras.src.layers.preprocessing.hashed_crossing.HashedCrossing.call(self,inputs)
keras.src.layers.preprocessing.hashed_crossing.HashedCrossing.compute_output_shape(self,input_shape)
keras.src.layers.preprocessing.hashed_crossing.HashedCrossing.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/string_lookup.py----------------------------------------
A:keras.src.layers.preprocessing.string_lookup.vocabulary->vocabulary.numpy().numpy()
A:keras.src.layers.preprocessing.string_lookup.base_config->super().get_config()
A:keras.src.layers.preprocessing.string_lookup.inputs->keras.src.utils.module_utils.tensorflow.convert_to_tensor(backend.convert_to_numpy(inputs))
A:keras.src.layers.preprocessing.string_lookup.outputs->keras.src.utils.backend_utils.convert_tf_tensor(outputs)
keras.src.layers.StringLookup(self,max_tokens=None,num_oov_indices=1,mask_token=None,oov_token='[UNK]',vocabulary=None,idf_weights=None,invert=False,output_mode='int',pad_to_max_tokens=False,sparse=False,encoding='utf-8',name=None,**kwargs)
keras.src.layers.StringLookup._tensor_vocab_to_numpy(self,vocabulary)
keras.src.layers.StringLookup.adapt(self,data,steps=None)
keras.src.layers.StringLookup.call(self,inputs)
keras.src.layers.StringLookup.get_config(self)
keras.src.layers.preprocessing.string_lookup.StringLookup(self,max_tokens=None,num_oov_indices=1,mask_token=None,oov_token='[UNK]',vocabulary=None,idf_weights=None,invert=False,output_mode='int',pad_to_max_tokens=False,sparse=False,encoding='utf-8',name=None,**kwargs)
keras.src.layers.preprocessing.string_lookup.StringLookup.__init__(self,max_tokens=None,num_oov_indices=1,mask_token=None,oov_token='[UNK]',vocabulary=None,idf_weights=None,invert=False,output_mode='int',pad_to_max_tokens=False,sparse=False,encoding='utf-8',name=None,**kwargs)
keras.src.layers.preprocessing.string_lookup.StringLookup._tensor_vocab_to_numpy(self,vocabulary)
keras.src.layers.preprocessing.string_lookup.StringLookup.adapt(self,data,steps=None)
keras.src.layers.preprocessing.string_lookup.StringLookup.call(self,inputs)
keras.src.layers.preprocessing.string_lookup.StringLookup.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/random_flip.py----------------------------------------
A:keras.src.layers.preprocessing.random_flip.self.generator->SeedGenerator(seed)
A:keras.src.layers.preprocessing.random_flip.inputs_shape->self.backend.shape(inputs)
A:keras.src.layers.preprocessing.random_flip.inputs->self.backend.cast(inputs, self.compute_dtype)
A:keras.src.layers.preprocessing.random_flip.seed_generator->self._get_seed_generator(self.backend._backend)
A:keras.src.layers.preprocessing.random_flip.flipped_outputs->self.backend.numpy.squeeze(flipped_outputs, axis=0)
A:keras.src.layers.preprocessing.random_flip.config->super().get_config()
keras.src.layers.RandomFlip(self,mode=HORIZONTAL_AND_VERTICAL,seed=None,**kwargs)
keras.src.layers.RandomFlip._randomly_flip_inputs(self,inputs)
keras.src.layers.RandomFlip.call(self,inputs,training=True)
keras.src.layers.RandomFlip.compute_output_shape(self,input_shape)
keras.src.layers.RandomFlip.get_config(self)
keras.src.layers.preprocessing.random_flip.RandomFlip(self,mode=HORIZONTAL_AND_VERTICAL,seed=None,**kwargs)
keras.src.layers.preprocessing.random_flip.RandomFlip.__init__(self,mode=HORIZONTAL_AND_VERTICAL,seed=None,**kwargs)
keras.src.layers.preprocessing.random_flip.RandomFlip._randomly_flip_inputs(self,inputs)
keras.src.layers.preprocessing.random_flip.RandomFlip.call(self,inputs,training=True)
keras.src.layers.preprocessing.random_flip.RandomFlip.compute_output_shape(self,input_shape)
keras.src.layers.preprocessing.random_flip.RandomFlip.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/discretization.py----------------------------------------
A:keras.src.layers.preprocessing.discretization.self.summary->numpy.array([[], []], dtype='float32')
A:keras.src.layers.preprocessing.discretization.data->numpy.array(data).astype('float32')
A:keras.src.layers.preprocessing.discretization.summary->numpy.stack((new_bins, new_weights))
A:keras.src.layers.preprocessing.discretization.self.bin_boundaries->get_bin_boundaries(self.summary, self.num_bins).tolist()
A:keras.src.layers.preprocessing.discretization.indices->self.backend.numpy.digitize(inputs, self.bin_boundaries)
A:keras.src.layers.preprocessing.discretization.outputs->keras.src.utils.numerical_utils.encode_categorical_inputs(indices, output_mode=self.output_mode, depth=len(self.bin_boundaries) + 1, dtype=self.compute_dtype, backend_module=self.backend)
A:keras.src.layers.preprocessing.discretization.values->numpy.sort(values)
A:keras.src.layers.preprocessing.discretization.elements->numpy.size(values)
A:keras.src.layers.preprocessing.discretization.step->max(increment, 1)
A:keras.src.layers.preprocessing.discretization.weights->numpy.ones_like(boundaries)
A:keras.src.layers.preprocessing.discretization.merged->numpy.take(merged, np.argsort(merged[0]), axis=1)
A:keras.src.layers.preprocessing.discretization.cum_weights->numpy.interp(percents, cum_weight_percents, cum_weights)
A:keras.src.layers.preprocessing.discretization.new_bins->numpy.interp(percents, cum_weight_percents, summary[0])
keras.src.layers.Discretization(self,bin_boundaries=None,num_bins=None,epsilon=0.01,output_mode='int',sparse=False,dtype=None,name=None)
keras.src.layers.Discretization.adapt(self,data,steps=None)
keras.src.layers.Discretization.build(self,input_shape=None)
keras.src.layers.Discretization.call(self,inputs)
keras.src.layers.Discretization.compute_output_spec(self,inputs)
keras.src.layers.Discretization.finalize_state(self)
keras.src.layers.Discretization.get_config(self)
keras.src.layers.Discretization.input_dtype(self)
keras.src.layers.Discretization.load_own_variables(self,store)
keras.src.layers.Discretization.reset_state(self)
keras.src.layers.Discretization.update_state(self,data)
keras.src.layers.preprocessing.discretization.Discretization(self,bin_boundaries=None,num_bins=None,epsilon=0.01,output_mode='int',sparse=False,dtype=None,name=None)
keras.src.layers.preprocessing.discretization.Discretization.__init__(self,bin_boundaries=None,num_bins=None,epsilon=0.01,output_mode='int',sparse=False,dtype=None,name=None)
keras.src.layers.preprocessing.discretization.Discretization.adapt(self,data,steps=None)
keras.src.layers.preprocessing.discretization.Discretization.build(self,input_shape=None)
keras.src.layers.preprocessing.discretization.Discretization.call(self,inputs)
keras.src.layers.preprocessing.discretization.Discretization.compute_output_spec(self,inputs)
keras.src.layers.preprocessing.discretization.Discretization.finalize_state(self)
keras.src.layers.preprocessing.discretization.Discretization.get_config(self)
keras.src.layers.preprocessing.discretization.Discretization.input_dtype(self)
keras.src.layers.preprocessing.discretization.Discretization.load_own_variables(self,store)
keras.src.layers.preprocessing.discretization.Discretization.reset_state(self)
keras.src.layers.preprocessing.discretization.Discretization.update_state(self,data)
keras.src.layers.preprocessing.discretization.compress_summary(summary,epsilon)
keras.src.layers.preprocessing.discretization.get_bin_boundaries(summary,num_bins)
keras.src.layers.preprocessing.discretization.merge_summaries(prev_summary,next_summary,epsilon)
keras.src.layers.preprocessing.discretization.summarize(values,epsilon)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/random_crop.py----------------------------------------
A:keras.src.layers.preprocessing.random_crop.self.generator->SeedGenerator(seed)
A:keras.src.layers.preprocessing.random_crop.self.data_format->keras.src.backend.standardize_data_format(data_format)
A:keras.src.layers.preprocessing.random_crop.inputs->self.backend.numpy.expand_dims(inputs, axis=0)
A:keras.src.layers.preprocessing.random_crop.input_shape->list(input_shape)
A:keras.src.layers.preprocessing.random_crop.seed_generator->self._get_seed_generator(self.backend._backend)
A:keras.src.layers.preprocessing.random_crop.h_start->self.backend.cast(self.backend.random.uniform((), 0, maxval=float(input_height - self.height + 1), seed=seed_generator), 'int32')
A:keras.src.layers.preprocessing.random_crop.w_start->self.backend.cast(self.backend.random.uniform((), 0, maxval=float(input_width - self.width + 1), seed=seed_generator), 'int32')
A:keras.src.layers.preprocessing.random_crop.outputs->self.backend.numpy.squeeze(outputs, axis=0)
A:keras.src.layers.preprocessing.random_crop.predicate->self.backend.numpy.logical_and(training, self.backend.numpy.logical_and(h_diff >= 0, w_diff >= 0))
A:keras.src.layers.preprocessing.random_crop.config->super().get_config()
keras.src.layers.RandomCrop(self,height,width,seed=None,data_format=None,name=None,**kwargs)
keras.src.layers.RandomCrop.call(self,inputs,training=True)
keras.src.layers.RandomCrop.compute_output_shape(self,input_shape,*args,**kwargs)
keras.src.layers.RandomCrop.get_config(self)
keras.src.layers.preprocessing.random_crop.RandomCrop(self,height,width,seed=None,data_format=None,name=None,**kwargs)
keras.src.layers.preprocessing.random_crop.RandomCrop.__init__(self,height,width,seed=None,data_format=None,name=None,**kwargs)
keras.src.layers.preprocessing.random_crop.RandomCrop.call(self,inputs,training=True)
keras.src.layers.preprocessing.random_crop.RandomCrop.compute_output_shape(self,input_shape,*args,**kwargs)
keras.src.layers.preprocessing.random_crop.RandomCrop.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/random_contrast.py----------------------------------------
A:keras.src.layers.preprocessing.random_contrast.self.generator->SeedGenerator(seed)
A:keras.src.layers.preprocessing.random_contrast.inputs->self.backend.cast(inputs, self.compute_dtype)
A:keras.src.layers.preprocessing.random_contrast.seed_generator->self._get_seed_generator(self.backend._backend)
A:keras.src.layers.preprocessing.random_contrast.factor->self.backend.random.uniform(shape=(), minval=1.0 - self.lower, maxval=1.0 + self.upper, seed=seed_generator, dtype=self.compute_dtype)
A:keras.src.layers.preprocessing.random_contrast.outputs->self.backend.numpy.clip(outputs, 0, 255)
A:keras.src.layers.preprocessing.random_contrast.inp_mean->self.backend.numpy.mean(inp_mean, axis=-2, keepdims=True)
A:keras.src.layers.preprocessing.random_contrast.base_config->super().get_config()
keras.src.layers.RandomContrast(self,factor,seed=None,**kwargs)
keras.src.layers.RandomContrast._adjust_constrast(self,inputs,contrast_factor)
keras.src.layers.RandomContrast.call(self,inputs,training=True)
keras.src.layers.RandomContrast.compute_output_shape(self,input_shape)
keras.src.layers.RandomContrast.get_config(self)
keras.src.layers.preprocessing.random_contrast.RandomContrast(self,factor,seed=None,**kwargs)
keras.src.layers.preprocessing.random_contrast.RandomContrast.__init__(self,factor,seed=None,**kwargs)
keras.src.layers.preprocessing.random_contrast.RandomContrast._adjust_constrast(self,inputs,contrast_factor)
keras.src.layers.preprocessing.random_contrast.RandomContrast.call(self,inputs,training=True)
keras.src.layers.preprocessing.random_contrast.RandomContrast.compute_output_shape(self,input_shape)
keras.src.layers.preprocessing.random_contrast.RandomContrast.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/random_rotation.py----------------------------------------
A:keras.src.layers.preprocessing.random_rotation.self.generator->SeedGenerator(seed)
A:keras.src.layers.preprocessing.random_rotation.self.data_format->keras.src.backend.standardize_data_format(data_format)
A:keras.src.layers.preprocessing.random_rotation.self.value_range->sorted(value_range)
A:keras.src.layers.preprocessing.random_rotation.self._factor->sorted(factor)
A:keras.src.layers.preprocessing.random_rotation.factor->abs(factor)
A:keras.src.layers.preprocessing.random_rotation.shape->self.backend.core.shape(inputs)
A:keras.src.layers.preprocessing.random_rotation.seed_generator->self._get_seed_generator(self.backend._backend)
A:keras.src.layers.preprocessing.random_rotation.angle->self.backend.random.uniform(shape=(batch_size,), minval=lower, maxval=upper, seed=seed_generator)
A:keras.src.layers.preprocessing.random_rotation.cos_theta->self.backend.numpy.cos(angle)
A:keras.src.layers.preprocessing.random_rotation.sin_theta->self.backend.numpy.sin(angle)
A:keras.src.layers.preprocessing.random_rotation.image_height->self.backend.core.cast(image_height, cos_theta.dtype)
A:keras.src.layers.preprocessing.random_rotation.image_width->self.backend.core.cast(image_width, cos_theta.dtype)
A:keras.src.layers.preprocessing.random_rotation.outputs->self.backend.numpy.squeeze(outputs, axis=0)
A:keras.src.layers.preprocessing.random_rotation.inputs->self.backend.cast(inputs, self.compute_dtype)
A:keras.src.layers.preprocessing.random_rotation.rotation_matrix->self._get_rotation_matrix(inputs)
A:keras.src.layers.preprocessing.random_rotation.transformed_image->self.backend.image.affine_transform(image=inputs, transform=rotation_matrix, interpolation=self.interpolation, fill_mode=self.fill_mode, fill_value=self.fill_value, data_format=self.data_format)
A:keras.src.layers.preprocessing.random_rotation.base_config->super().get_config()
keras.src.layers.RandomRotation(self,factor,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,value_range=(0,255),data_format=None,**kwargs)
keras.src.layers.RandomRotation._check_factor_range(self,input_number)
keras.src.layers.RandomRotation._get_rotation_matrix(self,inputs)
keras.src.layers.RandomRotation._set_factor(self,factor)
keras.src.layers.RandomRotation._set_value_range(self,value_range)
keras.src.layers.RandomRotation.call(self,inputs,training=True)
keras.src.layers.RandomRotation.compute_output_shape(self,input_shape)
keras.src.layers.RandomRotation.get_config(self)
keras.src.layers.preprocessing.random_rotation.RandomRotation(self,factor,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,value_range=(0,255),data_format=None,**kwargs)
keras.src.layers.preprocessing.random_rotation.RandomRotation.__init__(self,factor,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,value_range=(0,255),data_format=None,**kwargs)
keras.src.layers.preprocessing.random_rotation.RandomRotation._check_factor_range(self,input_number)
keras.src.layers.preprocessing.random_rotation.RandomRotation._get_rotation_matrix(self,inputs)
keras.src.layers.preprocessing.random_rotation.RandomRotation._set_factor(self,factor)
keras.src.layers.preprocessing.random_rotation.RandomRotation._set_value_range(self,value_range)
keras.src.layers.preprocessing.random_rotation.RandomRotation.call(self,inputs,training=True)
keras.src.layers.preprocessing.random_rotation.RandomRotation.compute_output_shape(self,input_shape)
keras.src.layers.preprocessing.random_rotation.RandomRotation.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/normalization.py----------------------------------------
A:keras.src.layers.preprocessing.normalization.axis->tuple(axis)
A:keras.src.layers.preprocessing.normalization.ndim->len(input_shape)
A:keras.src.layers.preprocessing.normalization.self._keep_axis->tuple(sorted([d if d >= 0 else d + ndim for d in self.axis]))
A:keras.src.layers.preprocessing.normalization.self._reduce_axis->tuple((d for d in range(ndim) if d not in self._keep_axis))
A:keras.src.layers.preprocessing.normalization.mean_and_var_shape->tuple((input_shape[d] for d in self._keep_axis))
A:keras.src.layers.preprocessing.normalization.self.adapt_mean->self.add_weight(name='mean', shape=mean_and_var_shape, initializer='zeros', trainable=False)
A:keras.src.layers.preprocessing.normalization.self.adapt_variance->self.add_weight(name='variance', shape=mean_and_var_shape, initializer='ones', trainable=False)
A:keras.src.layers.preprocessing.normalization.self.count->self.add_weight(name='count', shape=(), dtype='int', initializer='zeros', trainable=False)
A:keras.src.layers.preprocessing.normalization.mean->keras.src.ops.reshape(mean, self._broadcast_shape)
A:keras.src.layers.preprocessing.normalization.variance->keras.src.ops.reshape(variance, self._broadcast_shape)
A:keras.src.layers.preprocessing.normalization.self.mean->keras.src.ops.cast(self.mean, self.compute_dtype)
A:keras.src.layers.preprocessing.normalization.self.variance->keras.src.ops.cast(self.variance, self.compute_dtype)
A:keras.src.layers.preprocessing.normalization.input_shape->tuple(data.element_spec.shape)
A:keras.src.layers.preprocessing.normalization.data->data.batch(128).batch(128)
A:keras.src.layers.preprocessing.normalization.total_mean->keras.src.ops.zeros(self._mean_and_var_shape)
A:keras.src.layers.preprocessing.normalization.total_var->keras.src.ops.zeros(self._mean_and_var_shape)
A:keras.src.layers.preprocessing.normalization.batch->keras.src.backend.convert_to_tensor(batch, dtype=self.compute_dtype)
A:keras.src.layers.preprocessing.normalization.batch_mean->keras.src.ops.mean(batch, axis=self._reduce_axis)
A:keras.src.layers.preprocessing.normalization.batch_var->keras.src.ops.var(batch, axis=self._reduce_axis)
A:keras.src.layers.preprocessing.normalization.batch_count->math.prod(batch_reduce_shape)
A:keras.src.layers.preprocessing.normalization.inputs->keras.src.backend.convert_to_tensor(inputs, dtype=self.compute_dtype)
A:keras.src.layers.preprocessing.normalization.config->super().get_config()
keras.src.layers.Normalization(self,axis=-1,mean=None,variance=None,invert=False,**kwargs)
keras.src.layers.Normalization.adapt(self,data)
keras.src.layers.Normalization.build(self,input_shape)
keras.src.layers.Normalization.build_from_config(self,config)
keras.src.layers.Normalization.call(self,inputs)
keras.src.layers.Normalization.compute_output_shape(self,input_shape)
keras.src.layers.Normalization.finalize_state(self)
keras.src.layers.Normalization.get_build_config(self)
keras.src.layers.Normalization.get_config(self)
keras.src.layers.Normalization.load_own_variables(self,store)
keras.src.layers.preprocessing.normalization.Normalization(self,axis=-1,mean=None,variance=None,invert=False,**kwargs)
keras.src.layers.preprocessing.normalization.Normalization.__init__(self,axis=-1,mean=None,variance=None,invert=False,**kwargs)
keras.src.layers.preprocessing.normalization.Normalization.adapt(self,data)
keras.src.layers.preprocessing.normalization.Normalization.build(self,input_shape)
keras.src.layers.preprocessing.normalization.Normalization.build_from_config(self,config)
keras.src.layers.preprocessing.normalization.Normalization.call(self,inputs)
keras.src.layers.preprocessing.normalization.Normalization.compute_output_shape(self,input_shape)
keras.src.layers.preprocessing.normalization.Normalization.finalize_state(self)
keras.src.layers.preprocessing.normalization.Normalization.get_build_config(self)
keras.src.layers.preprocessing.normalization.Normalization.get_config(self)
keras.src.layers.preprocessing.normalization.Normalization.load_own_variables(self,store)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/audio_preprocessing.py----------------------------------------
A:keras.src.layers.preprocessing.audio_preprocessing.inputs->self.backend.convert_to_tensor(inputs, dtype=dtype)
A:keras.src.layers.preprocessing.audio_preprocessing.outputs->self.backend.cast(outputs, self.compute_dtype)
A:keras.src.layers.preprocessing.audio_preprocessing.(real, imag)->self.backend.math.stft(inputs, sequence_length=self.sequence_length, sequence_stride=self.sequence_stride, fft_length=self.fft_length, window=self.window, center=True)
A:keras.src.layers.preprocessing.audio_preprocessing.spec->self.backend.numpy.power(spec, self.mag_exp)
A:keras.src.layers.preprocessing.audio_preprocessing.matrix->self.linear_to_mel_weight_matrix(num_mel_bins=self.num_mel_bins, num_spectrogram_bins=self.backend.shape(inputs)[-1], sampling_rate=self.sampling_rate, lower_edge_hertz=self.min_freq, upper_edge_hertz=self.max_freq)
A:keras.src.layers.preprocessing.audio_preprocessing.ref_value->self.backend.numpy.abs(self.backend.convert_to_tensor(self.ref_power))
A:keras.src.layers.preprocessing.audio_preprocessing.log_spec->self.backend.numpy.maximum(log_spec, self.backend.numpy.max(log_spec) - self.top_db)
A:keras.src.layers.preprocessing.audio_preprocessing.sampling_rate->self.backend.cast(sampling_rate, dtype)
A:keras.src.layers.preprocessing.audio_preprocessing.lower_edge_hertz->self.backend.convert_to_tensor(lower_edge_hertz, dtype)
A:keras.src.layers.preprocessing.audio_preprocessing.upper_edge_hertz->self.backend.convert_to_tensor(upper_edge_hertz, dtype)
A:keras.src.layers.preprocessing.audio_preprocessing.zero->self.backend.convert_to_tensor(0.0, dtype)
A:keras.src.layers.preprocessing.audio_preprocessing.spectrogram_bins_mel->self.backend.numpy.expand_dims(self._hertz_to_mel(linear_frequencies), 1)
A:keras.src.layers.preprocessing.audio_preprocessing.band_edges_mel->self.backend.math.extract_sequences(self.backend.numpy.linspace(self._hertz_to_mel(lower_edge_hertz), self._hertz_to_mel(upper_edge_hertz), num_mel_bins + 2), sequence_length=3, sequence_stride=1)
A:keras.src.layers.preprocessing.audio_preprocessing.(lower_edge_mel, center_mel, upper_edge_mel)->tuple((self.backend.numpy.reshape(t, [1, num_mel_bins]) for t in self.backend.numpy.split(band_edges_mel, 3, axis=1)))
A:keras.src.layers.preprocessing.audio_preprocessing.mel_weights_matrix->self.backend.numpy.maximum(zero, self.backend.numpy.minimum(lower_slopes, upper_slopes))
A:keras.src.layers.preprocessing.audio_preprocessing.config->super().get_config()
keras.src.layers.MelSpectrogram(self,fft_length=2048,sequence_stride=512,sequence_length=None,window='hann',sampling_rate=16000,num_mel_bins=128,min_freq=20.0,max_freq=None,power_to_db=True,top_db=80.0,mag_exp=2.0,min_power=1e-10,ref_power=1.0,**kwargs)
keras.src.layers.MelSpectrogram._dbscale(self,inputs)
keras.src.layers.MelSpectrogram._hertz_to_mel(self,frequencies_hertz)
keras.src.layers.MelSpectrogram._melscale(self,inputs)
keras.src.layers.MelSpectrogram._spectrogram(self,inputs)
keras.src.layers.MelSpectrogram.call(self,inputs)
keras.src.layers.MelSpectrogram.compute_output_shape(self,input_shape)
keras.src.layers.MelSpectrogram.get_config(self)
keras.src.layers.MelSpectrogram.linear_to_mel_weight_matrix(self,num_mel_bins=20,num_spectrogram_bins=129,sampling_rate=8000,lower_edge_hertz=125.0,upper_edge_hertz=3800.0,dtype='float32')
keras.src.layers.preprocessing.audio_preprocessing.MelSpectrogram(self,fft_length=2048,sequence_stride=512,sequence_length=None,window='hann',sampling_rate=16000,num_mel_bins=128,min_freq=20.0,max_freq=None,power_to_db=True,top_db=80.0,mag_exp=2.0,min_power=1e-10,ref_power=1.0,**kwargs)
keras.src.layers.preprocessing.audio_preprocessing.MelSpectrogram.__init__(self,fft_length=2048,sequence_stride=512,sequence_length=None,window='hann',sampling_rate=16000,num_mel_bins=128,min_freq=20.0,max_freq=None,power_to_db=True,top_db=80.0,mag_exp=2.0,min_power=1e-10,ref_power=1.0,**kwargs)
keras.src.layers.preprocessing.audio_preprocessing.MelSpectrogram._dbscale(self,inputs)
keras.src.layers.preprocessing.audio_preprocessing.MelSpectrogram._hertz_to_mel(self,frequencies_hertz)
keras.src.layers.preprocessing.audio_preprocessing.MelSpectrogram._melscale(self,inputs)
keras.src.layers.preprocessing.audio_preprocessing.MelSpectrogram._spectrogram(self,inputs)
keras.src.layers.preprocessing.audio_preprocessing.MelSpectrogram.call(self,inputs)
keras.src.layers.preprocessing.audio_preprocessing.MelSpectrogram.compute_output_shape(self,input_shape)
keras.src.layers.preprocessing.audio_preprocessing.MelSpectrogram.get_config(self)
keras.src.layers.preprocessing.audio_preprocessing.MelSpectrogram.linear_to_mel_weight_matrix(self,num_mel_bins=20,num_spectrogram_bins=129,sampling_rate=8000,lower_edge_hertz=125.0,upper_edge_hertz=3800.0,dtype='float32')


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/category_encoding.py----------------------------------------
A:keras.src.layers.preprocessing.category_encoding.one_hot_encoding->self.backend.nn.one_hot(inputs, self.num_tokens, axis=axis, dtype=self.dtype)
A:keras.src.layers.preprocessing.category_encoding.split_weights->self.backend.numpy.split(count_weights, count_weights.shape[reduction_axis], reduction_axis)
A:keras.src.layers.preprocessing.category_encoding.stacked_weights->self.backend.numpy.stack(split_weights, axis=reduction_axis)
A:keras.src.layers.preprocessing.category_encoding.outputs->self._encode(inputs, count_weights)
A:keras.src.layers.preprocessing.category_encoding.base_config->super().get_config()
A:keras.src.layers.preprocessing.category_encoding.count_weights->self.backend.convert_to_tensor(count_weights, dtype=self.compute_dtype)
keras.src.layers.CategoryEncoding(self,num_tokens=None,output_mode='multi_hot',**kwargs)
keras.src.layers.CategoryEncoding._count(self,inputs,axis=-1,count_weights=None)
keras.src.layers.CategoryEncoding._encode(self,inputs,count_weights=None)
keras.src.layers.CategoryEncoding.call(self,inputs,count_weights=None)
keras.src.layers.CategoryEncoding.compute_output_shape(self,input_shape)
keras.src.layers.CategoryEncoding.get_config(self)
keras.src.layers.preprocessing.category_encoding.CategoryEncoding(self,num_tokens=None,output_mode='multi_hot',**kwargs)
keras.src.layers.preprocessing.category_encoding.CategoryEncoding.__init__(self,num_tokens=None,output_mode='multi_hot',**kwargs)
keras.src.layers.preprocessing.category_encoding.CategoryEncoding._count(self,inputs,axis=-1,count_weights=None)
keras.src.layers.preprocessing.category_encoding.CategoryEncoding._encode(self,inputs,count_weights=None)
keras.src.layers.preprocessing.category_encoding.CategoryEncoding.call(self,inputs,count_weights=None)
keras.src.layers.preprocessing.category_encoding.CategoryEncoding.compute_output_shape(self,input_shape)
keras.src.layers.preprocessing.category_encoding.CategoryEncoding.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/integer_lookup.py----------------------------------------
A:keras.src.layers.preprocessing.integer_lookup.config->super().get_config()
A:keras.src.layers.preprocessing.integer_lookup.config['oov_token']->int(config['oov_token'])
A:keras.src.layers.preprocessing.integer_lookup.config['mask_token']->int(config['mask_token'])
A:keras.src.layers.preprocessing.integer_lookup.inputs->keras.src.utils.module_utils.tensorflow.convert_to_tensor(backend.convert_to_numpy(inputs))
A:keras.src.layers.preprocessing.integer_lookup.outputs->super().call(inputs)
keras.src.layers.IntegerLookup(self,max_tokens=None,num_oov_indices=1,mask_token=None,oov_token=-1,vocabulary=None,vocabulary_dtype='int64',idf_weights=None,invert=False,output_mode='int',sparse=False,pad_to_max_tokens=False,name=None,**kwargs)
keras.src.layers.IntegerLookup.adapt(self,data,steps=None)
keras.src.layers.IntegerLookup.call(self,inputs)
keras.src.layers.IntegerLookup.get_config(self)
keras.src.layers.preprocessing.integer_lookup.IntegerLookup(self,max_tokens=None,num_oov_indices=1,mask_token=None,oov_token=-1,vocabulary=None,vocabulary_dtype='int64',idf_weights=None,invert=False,output_mode='int',sparse=False,pad_to_max_tokens=False,name=None,**kwargs)
keras.src.layers.preprocessing.integer_lookup.IntegerLookup.__init__(self,max_tokens=None,num_oov_indices=1,mask_token=None,oov_token=-1,vocabulary=None,vocabulary_dtype='int64',idf_weights=None,invert=False,output_mode='int',sparse=False,pad_to_max_tokens=False,name=None,**kwargs)
keras.src.layers.preprocessing.integer_lookup.IntegerLookup.adapt(self,data,steps=None)
keras.src.layers.preprocessing.integer_lookup.IntegerLookup.call(self,inputs)
keras.src.layers.preprocessing.integer_lookup.IntegerLookup.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/preprocessing/resizing.py----------------------------------------
A:keras.src.layers.preprocessing.resizing.self.data_format->keras.src.backend.standardize_data_format(data_format)
A:keras.src.layers.preprocessing.resizing.outputs->self.backend.image.resize(inputs, size=size, interpolation=self.interpolation, data_format=self.data_format)
A:keras.src.layers.preprocessing.resizing.input_shape->list(input_shape)
A:keras.src.layers.preprocessing.resizing.base_config->super().get_config()
keras.src.layers.Resizing(self,height,width,interpolation='bilinear',crop_to_aspect_ratio=False,data_format=None,**kwargs)
keras.src.layers.Resizing.call(self,inputs)
keras.src.layers.Resizing.compute_output_shape(self,input_shape)
keras.src.layers.Resizing.get_config(self)
keras.src.layers.preprocessing.resizing.Resizing(self,height,width,interpolation='bilinear',crop_to_aspect_ratio=False,data_format=None,**kwargs)
keras.src.layers.preprocessing.resizing.Resizing.__init__(self,height,width,interpolation='bilinear',crop_to_aspect_ratio=False,data_format=None,**kwargs)
keras.src.layers.preprocessing.resizing.Resizing.call(self,inputs)
keras.src.layers.preprocessing.resizing.Resizing.compute_output_shape(self,input_shape)
keras.src.layers.preprocessing.resizing.Resizing.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/rnn/dropout_rnn_cell.py----------------------------------------
A:keras.src.layers.rnn.dropout_rnn_cell.ones->keras.src.ops.ones_like(step_input)
A:keras.src.layers.rnn.dropout_rnn_cell.self._dropout_mask->keras.src.backend.random.dropout(ones, rate=self.dropout, seed=self.seed_generator)
A:keras.src.layers.rnn.dropout_rnn_cell.self._recurrent_dropout_mask->keras.src.backend.random.dropout(ones, rate=self.dropout, seed=self.seed_generator)
keras.src.layers.rnn.dropout_rnn_cell.DropoutRNNCell
keras.src.layers.rnn.dropout_rnn_cell.DropoutRNNCell.get_dropout_mask(self,step_input)
keras.src.layers.rnn.dropout_rnn_cell.DropoutRNNCell.get_recurrent_dropout_mask(self,step_input)
keras.src.layers.rnn.dropout_rnn_cell.DropoutRNNCell.reset_dropout_mask(self)
keras.src.layers.rnn.dropout_rnn_cell.DropoutRNNCell.reset_recurrent_dropout_mask(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/rnn/rnn.py----------------------------------------
A:keras.src.layers.rnn.rnn.cell->keras.src.saving.serialization_lib.deserialize_keras_object(config.pop('cell'), custom_objects=custom_objects)
A:keras.src.layers.rnn.rnn.state_size->getattr(self.cell, 'state_size', None)
A:keras.src.layers.rnn.rnn.self.state_size->list(state_size)
A:keras.src.layers.rnn.rnn.output_size->getattr(self.cell, 'output_size', None)
A:keras.src.layers.rnn.rnn.self.states->keras.src.utils.tree.map_structure(lambda value: backend.Variable(value, trainable=False, dtype=self.variable_dtype, name='rnn_state'), self.get_initial_state(batch_size))
A:keras.src.layers.rnn.rnn.get_initial_state_fn->getattr(self.cell, 'get_initial_state', None)
A:keras.src.layers.rnn.rnn.init_state->get_initial_state_fn(batch_size=batch_size)
A:keras.src.layers.rnn.rnn.(output, new_states)->self.cell(inputs, states, **cell_kwargs)
A:keras.src.layers.rnn.rnn.initial_state->keras.src.utils.tree.map_structure(lambda x: backend.convert_to_tensor(x, dtype=self.cell.compute_dtype), initial_state)
A:keras.src.layers.rnn.rnn.(last_output, outputs, states)->self.inner_loop(sequences=sequences, initial_state=initial_state, mask=mask, training=training)
A:keras.src.layers.rnn.rnn.last_output->keras.src.ops.cast(last_output, self.compute_dtype)
A:keras.src.layers.rnn.rnn.outputs->keras.src.ops.cast(outputs, self.compute_dtype)
A:keras.src.layers.rnn.rnn.states->keras.src.utils.tree.map_structure(lambda x: ops.cast(x, dtype=self.compute_dtype), states)
A:keras.src.layers.rnn.rnn.(input_sequence, _)->cell_call_fn(input_sequence, s)
A:keras.src.layers.rnn.rnn.config['cell']->keras.src.saving.serialization_lib.serialize_keras_object(self.cell)
A:keras.src.layers.rnn.rnn.base_config->super().get_config()
A:keras.src.layers.rnn.rnn.layer->cls(cell, **config)
keras.src.layers.RNN(self,cell,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,zero_output_for_mask=False,**kwargs)
keras.src.layers.RNN._create_state_variables(self,batch_size)
keras.src.layers.RNN._maybe_config_dropout_masks(self,cell,input_sequence,input_state)
keras.src.layers.RNN._maybe_reset_dropout_masks(self,cell)
keras.src.layers.RNN.build(self,sequences_shape,initial_state_shape=None)
keras.src.layers.RNN.call(self,sequences,initial_state=None,mask=None,training=False)
keras.src.layers.RNN.compute_mask(self,_,mask)
keras.src.layers.RNN.compute_output_shape(self,sequences_shape,initial_state_shape=None)
keras.src.layers.RNN.from_config(cls,config,custom_objects=None)
keras.src.layers.RNN.get_config(self)
keras.src.layers.RNN.get_initial_state(self,batch_size)
keras.src.layers.RNN.inner_loop(self,sequences,initial_state,mask,training=False)
keras.src.layers.RNN.reset_state(self)
keras.src.layers.RNN.reset_states(self)
keras.src.layers.rnn.rnn.RNN(self,cell,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,zero_output_for_mask=False,**kwargs)
keras.src.layers.rnn.rnn.RNN.__init__(self,cell,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,zero_output_for_mask=False,**kwargs)
keras.src.layers.rnn.rnn.RNN._create_state_variables(self,batch_size)
keras.src.layers.rnn.rnn.RNN._maybe_config_dropout_masks(self,cell,input_sequence,input_state)
keras.src.layers.rnn.rnn.RNN._maybe_reset_dropout_masks(self,cell)
keras.src.layers.rnn.rnn.RNN.build(self,sequences_shape,initial_state_shape=None)
keras.src.layers.rnn.rnn.RNN.call(self,sequences,initial_state=None,mask=None,training=False)
keras.src.layers.rnn.rnn.RNN.compute_mask(self,_,mask)
keras.src.layers.rnn.rnn.RNN.compute_output_shape(self,sequences_shape,initial_state_shape=None)
keras.src.layers.rnn.rnn.RNN.from_config(cls,config,custom_objects=None)
keras.src.layers.rnn.rnn.RNN.get_config(self)
keras.src.layers.rnn.rnn.RNN.get_initial_state(self,batch_size)
keras.src.layers.rnn.rnn.RNN.inner_loop(self,sequences,initial_state,mask,training=False)
keras.src.layers.rnn.rnn.RNN.reset_state(self)
keras.src.layers.rnn.rnn.RNN.reset_states(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/rnn/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/rnn/stacked_rnn_cells.py----------------------------------------
A:keras.src.layers.rnn.stacked_rnn_cells.get_initial_state_fn->getattr(cell, 'get_initial_state', None)
A:keras.src.layers.rnn.stacked_rnn_cells.state_is_list->keras.src.utils.tree.is_nested(states)
A:keras.src.layers.rnn.stacked_rnn_cells.(inputs, states)->cell_call_fn(inputs, states, **kwargs)
A:keras.src.layers.rnn.stacked_rnn_cells.base_config->super().get_config()
keras.src.layers.StackedRNNCells(self,cells,**kwargs)
keras.src.layers.StackedRNNCells.build(self,input_shape)
keras.src.layers.StackedRNNCells.call(self,inputs,states,training=False,**kwargs)
keras.src.layers.StackedRNNCells.from_config(cls,config,custom_objects=None)
keras.src.layers.StackedRNNCells.get_config(self)
keras.src.layers.StackedRNNCells.get_initial_state(self,batch_size=None)
keras.src.layers.StackedRNNCells.output_size(self)
keras.src.layers.StackedRNNCells.state_size(self)
keras.src.layers.rnn.stacked_rnn_cells.StackedRNNCells(self,cells,**kwargs)
keras.src.layers.rnn.stacked_rnn_cells.StackedRNNCells.__init__(self,cells,**kwargs)
keras.src.layers.rnn.stacked_rnn_cells.StackedRNNCells.build(self,input_shape)
keras.src.layers.rnn.stacked_rnn_cells.StackedRNNCells.call(self,inputs,states,training=False,**kwargs)
keras.src.layers.rnn.stacked_rnn_cells.StackedRNNCells.from_config(cls,config,custom_objects=None)
keras.src.layers.rnn.stacked_rnn_cells.StackedRNNCells.get_config(self)
keras.src.layers.rnn.stacked_rnn_cells.StackedRNNCells.get_initial_state(self,batch_size=None)
keras.src.layers.rnn.stacked_rnn_cells.StackedRNNCells.output_size(self)
keras.src.layers.rnn.stacked_rnn_cells.StackedRNNCells.state_size(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/rnn/conv_lstm2d.py----------------------------------------
keras.src.layers.ConvLSTM2D(self,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,**kwargs)
keras.src.layers.rnn.conv_lstm2d.ConvLSTM2D(self,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,**kwargs)
keras.src.layers.rnn.conv_lstm2d.ConvLSTM2D.__init__(self,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/rnn/time_distributed.py----------------------------------------
A:keras.src.layers.rnn.time_distributed.child_input_shape->self._get_child_input_shape(input_shape)
A:keras.src.layers.rnn.time_distributed.child_output_shape->self.layer.compute_output_shape(child_input_shape)
A:keras.src.layers.rnn.time_distributed.inputs->time_distributed_transpose(inputs)
A:keras.src.layers.rnn.time_distributed.mask->time_distributed_transpose(mask)
A:keras.src.layers.rnn.time_distributed.outputs->keras.src.backend.vectorized_map(step_function, ops.arange(timesteps))
keras.src.layers.TimeDistributed(self,layer,**kwargs)
keras.src.layers.TimeDistributed._get_child_input_shape(self,input_shape)
keras.src.layers.TimeDistributed.build(self,input_shape)
keras.src.layers.TimeDistributed.call(self,inputs,training=None,mask=None)
keras.src.layers.TimeDistributed.compute_output_shape(self,input_shape)
keras.src.layers.rnn.time_distributed.TimeDistributed(self,layer,**kwargs)
keras.src.layers.rnn.time_distributed.TimeDistributed.__init__(self,layer,**kwargs)
keras.src.layers.rnn.time_distributed.TimeDistributed._get_child_input_shape(self,input_shape)
keras.src.layers.rnn.time_distributed.TimeDistributed.build(self,input_shape)
keras.src.layers.rnn.time_distributed.TimeDistributed.call(self,inputs,training=None,mask=None)
keras.src.layers.rnn.time_distributed.TimeDistributed.compute_output_shape(self,input_shape)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/rnn/lstm.py----------------------------------------
A:keras.src.layers.rnn.lstm.implementation->kwargs.pop('implementation', 2)
A:keras.src.layers.rnn.lstm.self.activation->keras.src.activations.get(activation)
A:keras.src.layers.rnn.lstm.self.recurrent_activation->keras.src.activations.get(recurrent_activation)
A:keras.src.layers.rnn.lstm.self.kernel_initializer->keras.src.initializers.get(kernel_initializer)
A:keras.src.layers.rnn.lstm.self.recurrent_initializer->keras.src.initializers.get(recurrent_initializer)
A:keras.src.layers.rnn.lstm.self.bias_initializer->keras.src.initializers.get(bias_initializer)
A:keras.src.layers.rnn.lstm.self.kernel_regularizer->keras.src.regularizers.get(kernel_regularizer)
A:keras.src.layers.rnn.lstm.self.recurrent_regularizer->keras.src.regularizers.get(recurrent_regularizer)
A:keras.src.layers.rnn.lstm.self.bias_regularizer->keras.src.regularizers.get(bias_regularizer)
A:keras.src.layers.rnn.lstm.self.kernel_constraint->keras.src.constraints.get(kernel_constraint)
A:keras.src.layers.rnn.lstm.self.recurrent_constraint->keras.src.constraints.get(recurrent_constraint)
A:keras.src.layers.rnn.lstm.self.bias_constraint->keras.src.constraints.get(bias_constraint)
A:keras.src.layers.rnn.lstm.self.dropout->min(1.0, max(0.0, dropout))
A:keras.src.layers.rnn.lstm.self.recurrent_dropout->min(1.0, max(0.0, recurrent_dropout))
A:keras.src.layers.rnn.lstm.self.seed_generator->keras.src.backend.random.SeedGenerator(seed=seed)
A:keras.src.layers.rnn.lstm.self.kernel->self.add_weight(shape=(input_dim, self.units * 4), name='kernel', initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, constraint=self.kernel_constraint)
A:keras.src.layers.rnn.lstm.self.recurrent_kernel->self.add_weight(shape=(self.units, self.units * 4), name='recurrent_kernel', initializer=self.recurrent_initializer, regularizer=self.recurrent_regularizer, constraint=self.recurrent_constraint)
A:keras.src.layers.rnn.lstm.self.bias->self.add_weight(shape=(self.units * 4,), name='bias', initializer=bias_initializer, regularizer=self.bias_regularizer, constraint=self.bias_constraint)
A:keras.src.layers.rnn.lstm.i->self.recurrent_activation(z0)
A:keras.src.layers.rnn.lstm.f->self.recurrent_activation(z1)
A:keras.src.layers.rnn.lstm.o->self.recurrent_activation(z3)
A:keras.src.layers.rnn.lstm.dp_mask->self.get_dropout_mask(inputs)
A:keras.src.layers.rnn.lstm.rec_dp_mask->self.get_recurrent_dropout_mask(h_tm1)
A:keras.src.layers.rnn.lstm.(k_i, k_f, k_c, k_o)->keras.src.ops.split(self.kernel, 4, axis=1)
A:keras.src.layers.rnn.lstm.x_i->keras.src.ops.matmul(inputs_i, k_i)
A:keras.src.layers.rnn.lstm.x_f->keras.src.ops.matmul(inputs_f, k_f)
A:keras.src.layers.rnn.lstm.x_c->keras.src.ops.matmul(inputs_c, k_c)
A:keras.src.layers.rnn.lstm.x_o->keras.src.ops.matmul(inputs_o, k_o)
A:keras.src.layers.rnn.lstm.(b_i, b_f, b_c, b_o)->keras.src.ops.split(self.bias, 4, axis=0)
A:keras.src.layers.rnn.lstm.(c, o)->self._compute_carry_and_output_fused(z, c_tm1)
A:keras.src.layers.rnn.lstm.z->keras.src.ops.split(z, 4, axis=1)
A:keras.src.layers.rnn.lstm.base_config->super().get_config()
A:keras.src.layers.rnn.lstm.cell->LSTMCell(units, activation=activation, recurrent_activation=recurrent_activation, use_bias=use_bias, kernel_initializer=kernel_initializer, unit_forget_bias=unit_forget_bias, recurrent_initializer=recurrent_initializer, bias_initializer=bias_initializer, kernel_regularizer=kernel_regularizer, recurrent_regularizer=recurrent_regularizer, bias_regularizer=bias_regularizer, kernel_constraint=kernel_constraint, recurrent_constraint=recurrent_constraint, bias_constraint=bias_constraint, dropout=dropout, recurrent_dropout=recurrent_dropout, dtype=kwargs.get('dtype', None), trainable=kwargs.get('trainable', True), name='lstm_cell', seed=seed, implementation=kwargs.pop('implementation', 2))
A:keras.src.layers.rnn.lstm.self.input_spec->InputSpec(ndim=3)
A:keras.src.layers.rnn.lstm.out->keras.src.backend.lstm(sequences, initial_state[0], initial_state[1], mask, kernel=self.cell.kernel, recurrent_kernel=self.cell.recurrent_kernel, bias=self.cell.bias, activation=self.cell.activation, recurrent_activation=self.cell.recurrent_activation, return_sequences=self.return_sequences, go_backwards=self.go_backwards, unroll=self.unroll)
keras.src.layers.LSTM(self,units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,**kwargs)
keras.src.layers.LSTM.activation(self)
keras.src.layers.LSTM.bias_constraint(self)
keras.src.layers.LSTM.bias_initializer(self)
keras.src.layers.LSTM.bias_regularizer(self)
keras.src.layers.LSTM.call(self,sequences,initial_state=None,mask=None,training=False)
keras.src.layers.LSTM.dropout(self)
keras.src.layers.LSTM.from_config(cls,config)
keras.src.layers.LSTM.get_config(self)
keras.src.layers.LSTM.inner_loop(self,sequences,initial_state,mask,training=False)
keras.src.layers.LSTM.kernel_constraint(self)
keras.src.layers.LSTM.kernel_initializer(self)
keras.src.layers.LSTM.kernel_regularizer(self)
keras.src.layers.LSTM.recurrent_activation(self)
keras.src.layers.LSTM.recurrent_constraint(self)
keras.src.layers.LSTM.recurrent_dropout(self)
keras.src.layers.LSTM.recurrent_initializer(self)
keras.src.layers.LSTM.recurrent_regularizer(self)
keras.src.layers.LSTM.unit_forget_bias(self)
keras.src.layers.LSTM.units(self)
keras.src.layers.LSTM.use_bias(self)
keras.src.layers.LSTMCell(self,units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,**kwargs)
keras.src.layers.LSTMCell._compute_carry_and_output(self,x,h_tm1,c_tm1)
keras.src.layers.LSTMCell._compute_carry_and_output_fused(self,z,c_tm1)
keras.src.layers.LSTMCell.build(self,input_shape)
keras.src.layers.LSTMCell.call(self,inputs,states,training=False)
keras.src.layers.LSTMCell.get_config(self)
keras.src.layers.LSTMCell.get_initial_state(self,batch_size=None)
keras.src.layers.rnn.lstm.LSTM(self,units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,**kwargs)
keras.src.layers.rnn.lstm.LSTM.__init__(self,units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,**kwargs)
keras.src.layers.rnn.lstm.LSTM.activation(self)
keras.src.layers.rnn.lstm.LSTM.bias_constraint(self)
keras.src.layers.rnn.lstm.LSTM.bias_initializer(self)
keras.src.layers.rnn.lstm.LSTM.bias_regularizer(self)
keras.src.layers.rnn.lstm.LSTM.call(self,sequences,initial_state=None,mask=None,training=False)
keras.src.layers.rnn.lstm.LSTM.dropout(self)
keras.src.layers.rnn.lstm.LSTM.from_config(cls,config)
keras.src.layers.rnn.lstm.LSTM.get_config(self)
keras.src.layers.rnn.lstm.LSTM.inner_loop(self,sequences,initial_state,mask,training=False)
keras.src.layers.rnn.lstm.LSTM.kernel_constraint(self)
keras.src.layers.rnn.lstm.LSTM.kernel_initializer(self)
keras.src.layers.rnn.lstm.LSTM.kernel_regularizer(self)
keras.src.layers.rnn.lstm.LSTM.recurrent_activation(self)
keras.src.layers.rnn.lstm.LSTM.recurrent_constraint(self)
keras.src.layers.rnn.lstm.LSTM.recurrent_dropout(self)
keras.src.layers.rnn.lstm.LSTM.recurrent_initializer(self)
keras.src.layers.rnn.lstm.LSTM.recurrent_regularizer(self)
keras.src.layers.rnn.lstm.LSTM.unit_forget_bias(self)
keras.src.layers.rnn.lstm.LSTM.units(self)
keras.src.layers.rnn.lstm.LSTM.use_bias(self)
keras.src.layers.rnn.lstm.LSTMCell(self,units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,**kwargs)
keras.src.layers.rnn.lstm.LSTMCell.__init__(self,units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,**kwargs)
keras.src.layers.rnn.lstm.LSTMCell._compute_carry_and_output(self,x,h_tm1,c_tm1)
keras.src.layers.rnn.lstm.LSTMCell._compute_carry_and_output_fused(self,z,c_tm1)
keras.src.layers.rnn.lstm.LSTMCell.build(self,input_shape)
keras.src.layers.rnn.lstm.LSTMCell.call(self,inputs,states,training=False)
keras.src.layers.rnn.lstm.LSTMCell.get_config(self)
keras.src.layers.rnn.lstm.LSTMCell.get_initial_state(self,batch_size=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/rnn/conv_lstm3d.py----------------------------------------
keras.src.layers.ConvLSTM3D(self,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,**kwargs)
keras.src.layers.rnn.conv_lstm3d.ConvLSTM3D(self,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,**kwargs)
keras.src.layers.rnn.conv_lstm3d.ConvLSTM3D.__init__(self,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/rnn/conv_lstm1d.py----------------------------------------
keras.src.layers.ConvLSTM1D(self,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,**kwargs)
keras.src.layers.rnn.conv_lstm1d.ConvLSTM1D(self,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,**kwargs)
keras.src.layers.rnn.conv_lstm1d.ConvLSTM1D.__init__(self,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/rnn/simple_rnn.py----------------------------------------
A:keras.src.layers.rnn.simple_rnn.self.seed_generator->keras.src.backend.random.SeedGenerator(seed)
A:keras.src.layers.rnn.simple_rnn.self.activation->keras.src.activations.get(activation)
A:keras.src.layers.rnn.simple_rnn.self.kernel_initializer->keras.src.initializers.get(kernel_initializer)
A:keras.src.layers.rnn.simple_rnn.self.recurrent_initializer->keras.src.initializers.get(recurrent_initializer)
A:keras.src.layers.rnn.simple_rnn.self.bias_initializer->keras.src.initializers.get(bias_initializer)
A:keras.src.layers.rnn.simple_rnn.self.kernel_regularizer->keras.src.regularizers.get(kernel_regularizer)
A:keras.src.layers.rnn.simple_rnn.self.recurrent_regularizer->keras.src.regularizers.get(recurrent_regularizer)
A:keras.src.layers.rnn.simple_rnn.self.bias_regularizer->keras.src.regularizers.get(bias_regularizer)
A:keras.src.layers.rnn.simple_rnn.self.kernel_constraint->keras.src.constraints.get(kernel_constraint)
A:keras.src.layers.rnn.simple_rnn.self.recurrent_constraint->keras.src.constraints.get(recurrent_constraint)
A:keras.src.layers.rnn.simple_rnn.self.bias_constraint->keras.src.constraints.get(bias_constraint)
A:keras.src.layers.rnn.simple_rnn.self.dropout->min(1.0, max(0.0, dropout))
A:keras.src.layers.rnn.simple_rnn.self.recurrent_dropout->min(1.0, max(0.0, recurrent_dropout))
A:keras.src.layers.rnn.simple_rnn.self.kernel->self.add_weight(shape=(input_shape[-1], self.units), name='kernel', initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, constraint=self.kernel_constraint)
A:keras.src.layers.rnn.simple_rnn.self.recurrent_kernel->self.add_weight(shape=(self.units, self.units), name='recurrent_kernel', initializer=self.recurrent_initializer, regularizer=self.recurrent_regularizer, constraint=self.recurrent_constraint)
A:keras.src.layers.rnn.simple_rnn.self.bias->self.add_weight(shape=(self.units,), name='bias', initializer=self.bias_initializer, regularizer=self.bias_regularizer, constraint=self.bias_constraint)
A:keras.src.layers.rnn.simple_rnn.dp_mask->self.get_dropout_mask(sequence)
A:keras.src.layers.rnn.simple_rnn.rec_dp_mask->self.get_recurrent_dropout_mask(prev_output)
A:keras.src.layers.rnn.simple_rnn.h->keras.src.ops.matmul(sequence, self.kernel)
A:keras.src.layers.rnn.simple_rnn.output->self.activation(output)
A:keras.src.layers.rnn.simple_rnn.base_config->super().get_config()
A:keras.src.layers.rnn.simple_rnn.cell->SimpleRNNCell(units, activation=activation, use_bias=use_bias, kernel_initializer=kernel_initializer, recurrent_initializer=recurrent_initializer, bias_initializer=bias_initializer, kernel_regularizer=kernel_regularizer, recurrent_regularizer=recurrent_regularizer, bias_regularizer=bias_regularizer, kernel_constraint=kernel_constraint, recurrent_constraint=recurrent_constraint, bias_constraint=bias_constraint, dropout=dropout, recurrent_dropout=recurrent_dropout, seed=seed, dtype=kwargs.get('dtype', None), trainable=kwargs.get('trainable', True), name='simple_rnn_cell')
keras.src.layers.SimpleRNN(self,units,activation='tanh',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,seed=None,**kwargs)
keras.src.layers.SimpleRNN.activation(self)
keras.src.layers.SimpleRNN.bias_constraint(self)
keras.src.layers.SimpleRNN.bias_initializer(self)
keras.src.layers.SimpleRNN.bias_regularizer(self)
keras.src.layers.SimpleRNN.call(self,sequences,initial_state=None,mask=None,training=False)
keras.src.layers.SimpleRNN.dropout(self)
keras.src.layers.SimpleRNN.from_config(cls,config)
keras.src.layers.SimpleRNN.get_config(self)
keras.src.layers.SimpleRNN.kernel_constraint(self)
keras.src.layers.SimpleRNN.kernel_initializer(self)
keras.src.layers.SimpleRNN.kernel_regularizer(self)
keras.src.layers.SimpleRNN.recurrent_constraint(self)
keras.src.layers.SimpleRNN.recurrent_dropout(self)
keras.src.layers.SimpleRNN.recurrent_initializer(self)
keras.src.layers.SimpleRNN.recurrent_regularizer(self)
keras.src.layers.SimpleRNN.units(self)
keras.src.layers.SimpleRNN.use_bias(self)
keras.src.layers.SimpleRNNCell(self,units,activation='tanh',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,**kwargs)
keras.src.layers.SimpleRNNCell.build(self,input_shape)
keras.src.layers.SimpleRNNCell.call(self,sequence,states,training=False)
keras.src.layers.SimpleRNNCell.get_config(self)
keras.src.layers.SimpleRNNCell.get_initial_state(self,batch_size=None)
keras.src.layers.rnn.simple_rnn.SimpleRNN(self,units,activation='tanh',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,seed=None,**kwargs)
keras.src.layers.rnn.simple_rnn.SimpleRNN.__init__(self,units,activation='tanh',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,seed=None,**kwargs)
keras.src.layers.rnn.simple_rnn.SimpleRNN.activation(self)
keras.src.layers.rnn.simple_rnn.SimpleRNN.bias_constraint(self)
keras.src.layers.rnn.simple_rnn.SimpleRNN.bias_initializer(self)
keras.src.layers.rnn.simple_rnn.SimpleRNN.bias_regularizer(self)
keras.src.layers.rnn.simple_rnn.SimpleRNN.call(self,sequences,initial_state=None,mask=None,training=False)
keras.src.layers.rnn.simple_rnn.SimpleRNN.dropout(self)
keras.src.layers.rnn.simple_rnn.SimpleRNN.from_config(cls,config)
keras.src.layers.rnn.simple_rnn.SimpleRNN.get_config(self)
keras.src.layers.rnn.simple_rnn.SimpleRNN.kernel_constraint(self)
keras.src.layers.rnn.simple_rnn.SimpleRNN.kernel_initializer(self)
keras.src.layers.rnn.simple_rnn.SimpleRNN.kernel_regularizer(self)
keras.src.layers.rnn.simple_rnn.SimpleRNN.recurrent_constraint(self)
keras.src.layers.rnn.simple_rnn.SimpleRNN.recurrent_dropout(self)
keras.src.layers.rnn.simple_rnn.SimpleRNN.recurrent_initializer(self)
keras.src.layers.rnn.simple_rnn.SimpleRNN.recurrent_regularizer(self)
keras.src.layers.rnn.simple_rnn.SimpleRNN.units(self)
keras.src.layers.rnn.simple_rnn.SimpleRNN.use_bias(self)
keras.src.layers.rnn.simple_rnn.SimpleRNNCell(self,units,activation='tanh',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,**kwargs)
keras.src.layers.rnn.simple_rnn.SimpleRNNCell.__init__(self,units,activation='tanh',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,**kwargs)
keras.src.layers.rnn.simple_rnn.SimpleRNNCell.build(self,input_shape)
keras.src.layers.rnn.simple_rnn.SimpleRNNCell.call(self,sequence,states,training=False)
keras.src.layers.rnn.simple_rnn.SimpleRNNCell.get_config(self)
keras.src.layers.rnn.simple_rnn.SimpleRNNCell.get_initial_state(self,batch_size=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/rnn/bidirectional.py----------------------------------------
A:keras.src.layers.rnn.bidirectional.config->copy.deepcopy(config)
A:keras.src.layers.rnn.bidirectional.self.forward_layer->keras.src.saving.serialization_lib.deserialize_keras_object(config)
A:keras.src.layers.rnn.bidirectional.self.backward_layer->keras.src.saving.serialization_lib.deserialize_keras_object(config)
A:keras.src.layers.rnn.bidirectional.nw->len(weights)
A:keras.src.layers.rnn.bidirectional.forward_value->getattr(self.forward_layer, a)
A:keras.src.layers.rnn.bidirectional.backward_value->getattr(self.backward_layer, a)
A:keras.src.layers.rnn.bidirectional.output_shape->tuple(output_shape)
A:keras.src.layers.rnn.bidirectional.y->keras.src.ops.cast(y, self.compute_dtype)
A:keras.src.layers.rnn.bidirectional.y_rev->keras.src.ops.flip(y_rev, axis=1)
A:keras.src.layers.rnn.bidirectional.states->tuple(y[1:] + y_rev[1:])
A:keras.src.layers.rnn.bidirectional.output->keras.src.ops.concatenate([y, y_rev], axis=-1)
A:keras.src.layers.rnn.bidirectional.config['layer']->keras.src.saving.serialization_lib.deserialize_keras_object(config['layer'], custom_objects=custom_objects)
A:keras.src.layers.rnn.bidirectional.config['backward_layer']->keras.src.saving.serialization_lib.serialize_keras_object(self.backward_layer)
A:keras.src.layers.rnn.bidirectional.base_config->super().get_config()
A:keras.src.layers.rnn.bidirectional.backward_layer_config->copy.deepcopy(config).pop('backward_layer', None)
A:keras.src.layers.rnn.bidirectional.backward_layer->keras.src.saving.serialization_lib.deserialize_keras_object(backward_layer_config, custom_objects=custom_objects)
A:keras.src.layers.rnn.bidirectional.layer->cls(**config)
keras.src.layers.Bidirectional(self,layer,merge_mode='concat',weights=None,backward_layer=None,**kwargs)
keras.src.layers.Bidirectional._verify_layer_config(self)
keras.src.layers.Bidirectional.build(self,sequences_shape,initial_state_shape=None)
keras.src.layers.Bidirectional.call(self,sequences,initial_state=None,mask=None,training=None)
keras.src.layers.Bidirectional.compute_mask(self,_,mask)
keras.src.layers.Bidirectional.compute_output_shape(self,sequences_shape,initial_state_shape=None)
keras.src.layers.Bidirectional.from_config(cls,config,custom_objects=None)
keras.src.layers.Bidirectional.get_config(self)
keras.src.layers.Bidirectional.reset_state(self)
keras.src.layers.Bidirectional.reset_states(self)
keras.src.layers.Bidirectional.states(self)
keras.src.layers.rnn.bidirectional.Bidirectional(self,layer,merge_mode='concat',weights=None,backward_layer=None,**kwargs)
keras.src.layers.rnn.bidirectional.Bidirectional.__init__(self,layer,merge_mode='concat',weights=None,backward_layer=None,**kwargs)
keras.src.layers.rnn.bidirectional.Bidirectional._verify_layer_config(self)
keras.src.layers.rnn.bidirectional.Bidirectional.build(self,sequences_shape,initial_state_shape=None)
keras.src.layers.rnn.bidirectional.Bidirectional.call(self,sequences,initial_state=None,mask=None,training=None)
keras.src.layers.rnn.bidirectional.Bidirectional.compute_mask(self,_,mask)
keras.src.layers.rnn.bidirectional.Bidirectional.compute_output_shape(self,sequences_shape,initial_state_shape=None)
keras.src.layers.rnn.bidirectional.Bidirectional.from_config(cls,config,custom_objects=None)
keras.src.layers.rnn.bidirectional.Bidirectional.get_config(self)
keras.src.layers.rnn.bidirectional.Bidirectional.reset_state(self)
keras.src.layers.rnn.bidirectional.Bidirectional.reset_states(self)
keras.src.layers.rnn.bidirectional.Bidirectional.states(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/rnn/gru.py----------------------------------------
A:keras.src.layers.rnn.gru.implementation->kwargs.pop('implementation', 2)
A:keras.src.layers.rnn.gru.self.activation->keras.src.activations.get(activation)
A:keras.src.layers.rnn.gru.self.recurrent_activation->keras.src.activations.get(recurrent_activation)
A:keras.src.layers.rnn.gru.self.kernel_initializer->keras.src.initializers.get(kernel_initializer)
A:keras.src.layers.rnn.gru.self.recurrent_initializer->keras.src.initializers.get(recurrent_initializer)
A:keras.src.layers.rnn.gru.self.bias_initializer->keras.src.initializers.get(bias_initializer)
A:keras.src.layers.rnn.gru.self.kernel_regularizer->keras.src.regularizers.get(kernel_regularizer)
A:keras.src.layers.rnn.gru.self.recurrent_regularizer->keras.src.regularizers.get(recurrent_regularizer)
A:keras.src.layers.rnn.gru.self.bias_regularizer->keras.src.regularizers.get(bias_regularizer)
A:keras.src.layers.rnn.gru.self.kernel_constraint->keras.src.constraints.get(kernel_constraint)
A:keras.src.layers.rnn.gru.self.recurrent_constraint->keras.src.constraints.get(recurrent_constraint)
A:keras.src.layers.rnn.gru.self.bias_constraint->keras.src.constraints.get(bias_constraint)
A:keras.src.layers.rnn.gru.self.dropout->min(1.0, max(0.0, dropout))
A:keras.src.layers.rnn.gru.self.recurrent_dropout->min(1.0, max(0.0, recurrent_dropout))
A:keras.src.layers.rnn.gru.self.seed_generator->keras.src.backend.random.SeedGenerator(seed=seed)
A:keras.src.layers.rnn.gru.self.kernel->self.add_weight(shape=(input_dim, self.units * 3), name='kernel', initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, constraint=self.kernel_constraint)
A:keras.src.layers.rnn.gru.self.recurrent_kernel->self.add_weight(shape=(self.units, self.units * 3), name='recurrent_kernel', initializer=self.recurrent_initializer, regularizer=self.recurrent_regularizer, constraint=self.recurrent_constraint)
A:keras.src.layers.rnn.gru.self.bias->self.add_weight(shape=bias_shape, name='bias', initializer=self.bias_initializer, regularizer=self.bias_regularizer, constraint=self.bias_constraint)
A:keras.src.layers.rnn.gru.dp_mask->self.get_dropout_mask(inputs)
A:keras.src.layers.rnn.gru.rec_dp_mask->self.get_recurrent_dropout_mask(h_tm1)
A:keras.src.layers.rnn.gru.x_z->keras.src.ops.matmul(inputs_z, self.kernel[:, :self.units])
A:keras.src.layers.rnn.gru.x_r->keras.src.ops.matmul(inputs_r, self.kernel[:, self.units:self.units * 2])
A:keras.src.layers.rnn.gru.x_h->keras.src.ops.matmul(inputs_h, self.kernel[:, self.units * 2:])
A:keras.src.layers.rnn.gru.recurrent_z->keras.src.ops.matmul(h_tm1_z, self.recurrent_kernel[:, :self.units])
A:keras.src.layers.rnn.gru.recurrent_r->keras.src.ops.matmul(h_tm1_r, self.recurrent_kernel[:, self.units:self.units * 2])
A:keras.src.layers.rnn.gru.z->self.recurrent_activation(x_z + recurrent_z)
A:keras.src.layers.rnn.gru.r->self.recurrent_activation(x_r + recurrent_r)
A:keras.src.layers.rnn.gru.recurrent_h->keras.src.ops.matmul(r * h_tm1, self.recurrent_kernel[:, 2 * self.units:])
A:keras.src.layers.rnn.gru.hh->self.activation(x_h + recurrent_h)
A:keras.src.layers.rnn.gru.matrix_x->keras.src.ops.matmul(inputs, self.kernel)
A:keras.src.layers.rnn.gru.(x_z, x_r, x_h)->keras.src.ops.split(matrix_x, 3, axis=-1)
A:keras.src.layers.rnn.gru.matrix_inner->keras.src.ops.matmul(h_tm1, self.recurrent_kernel[:, :2 * self.units])
A:keras.src.layers.rnn.gru.base_config->super().get_config()
A:keras.src.layers.rnn.gru.cell->GRUCell(units, activation=activation, recurrent_activation=recurrent_activation, use_bias=use_bias, kernel_initializer=kernel_initializer, recurrent_initializer=recurrent_initializer, bias_initializer=bias_initializer, kernel_regularizer=kernel_regularizer, recurrent_regularizer=recurrent_regularizer, bias_regularizer=bias_regularizer, kernel_constraint=kernel_constraint, recurrent_constraint=recurrent_constraint, bias_constraint=bias_constraint, dropout=dropout, recurrent_dropout=recurrent_dropout, reset_after=reset_after, dtype=kwargs.get('dtype', None), trainable=kwargs.get('trainable', True), name='gru_cell', seed=seed)
A:keras.src.layers.rnn.gru.self.input_spec->InputSpec(ndim=3)
A:keras.src.layers.rnn.gru.out->keras.src.backend.gru(sequences, initial_state, mask, kernel=self.cell.kernel, recurrent_kernel=self.cell.recurrent_kernel, bias=self.cell.bias, activation=self.cell.activation, recurrent_activation=self.cell.recurrent_activation, return_sequences=self.return_sequences, go_backwards=self.go_backwards, unroll=self.unroll, reset_after=self.cell.reset_after)
keras.src.layers.GRU(self,units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,reset_after=True,**kwargs)
keras.src.layers.GRU.activation(self)
keras.src.layers.GRU.bias_constraint(self)
keras.src.layers.GRU.bias_initializer(self)
keras.src.layers.GRU.bias_regularizer(self)
keras.src.layers.GRU.call(self,sequences,initial_state=None,mask=None,training=False)
keras.src.layers.GRU.dropout(self)
keras.src.layers.GRU.from_config(cls,config)
keras.src.layers.GRU.get_config(self)
keras.src.layers.GRU.inner_loop(self,sequences,initial_state,mask,training=False)
keras.src.layers.GRU.kernel_constraint(self)
keras.src.layers.GRU.kernel_initializer(self)
keras.src.layers.GRU.kernel_regularizer(self)
keras.src.layers.GRU.recurrent_activation(self)
keras.src.layers.GRU.recurrent_constraint(self)
keras.src.layers.GRU.recurrent_dropout(self)
keras.src.layers.GRU.recurrent_initializer(self)
keras.src.layers.GRU.recurrent_regularizer(self)
keras.src.layers.GRU.reset_after(self)
keras.src.layers.GRU.units(self)
keras.src.layers.GRU.use_bias(self)
keras.src.layers.GRUCell(self,units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,reset_after=True,seed=None,**kwargs)
keras.src.layers.GRUCell.build(self,input_shape)
keras.src.layers.GRUCell.call(self,inputs,states,training=False)
keras.src.layers.GRUCell.get_config(self)
keras.src.layers.GRUCell.get_initial_state(self,batch_size=None)
keras.src.layers.rnn.gru.GRU(self,units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,reset_after=True,**kwargs)
keras.src.layers.rnn.gru.GRU.__init__(self,units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,reset_after=True,**kwargs)
keras.src.layers.rnn.gru.GRU.activation(self)
keras.src.layers.rnn.gru.GRU.bias_constraint(self)
keras.src.layers.rnn.gru.GRU.bias_initializer(self)
keras.src.layers.rnn.gru.GRU.bias_regularizer(self)
keras.src.layers.rnn.gru.GRU.call(self,sequences,initial_state=None,mask=None,training=False)
keras.src.layers.rnn.gru.GRU.dropout(self)
keras.src.layers.rnn.gru.GRU.from_config(cls,config)
keras.src.layers.rnn.gru.GRU.get_config(self)
keras.src.layers.rnn.gru.GRU.inner_loop(self,sequences,initial_state,mask,training=False)
keras.src.layers.rnn.gru.GRU.kernel_constraint(self)
keras.src.layers.rnn.gru.GRU.kernel_initializer(self)
keras.src.layers.rnn.gru.GRU.kernel_regularizer(self)
keras.src.layers.rnn.gru.GRU.recurrent_activation(self)
keras.src.layers.rnn.gru.GRU.recurrent_constraint(self)
keras.src.layers.rnn.gru.GRU.recurrent_dropout(self)
keras.src.layers.rnn.gru.GRU.recurrent_initializer(self)
keras.src.layers.rnn.gru.GRU.recurrent_regularizer(self)
keras.src.layers.rnn.gru.GRU.reset_after(self)
keras.src.layers.rnn.gru.GRU.units(self)
keras.src.layers.rnn.gru.GRU.use_bias(self)
keras.src.layers.rnn.gru.GRUCell(self,units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,reset_after=True,seed=None,**kwargs)
keras.src.layers.rnn.gru.GRUCell.__init__(self,units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,reset_after=True,seed=None,**kwargs)
keras.src.layers.rnn.gru.GRUCell.build(self,input_shape)
keras.src.layers.rnn.gru.GRUCell.call(self,inputs,states,training=False)
keras.src.layers.rnn.gru.GRUCell.get_config(self)
keras.src.layers.rnn.gru.GRUCell.get_initial_state(self,batch_size=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/rnn/conv_lstm.py----------------------------------------
A:keras.src.layers.rnn.conv_lstm.self.seed_generator->keras.src.backend.random.SeedGenerator(seed=seed)
A:keras.src.layers.rnn.conv_lstm.self.kernel_size->keras.src.utils.argument_validation.standardize_tuple(kernel_size, self.rank, 'kernel_size')
A:keras.src.layers.rnn.conv_lstm.self.strides->keras.src.utils.argument_validation.standardize_tuple(strides, self.rank, 'strides', allow_zero=True)
A:keras.src.layers.rnn.conv_lstm.self.padding->keras.src.utils.argument_validation.standardize_padding(padding)
A:keras.src.layers.rnn.conv_lstm.self.data_format->keras.src.backend.standardize_data_format(data_format)
A:keras.src.layers.rnn.conv_lstm.self.dilation_rate->keras.src.utils.argument_validation.standardize_tuple(dilation_rate, self.rank, 'dilation_rate')
A:keras.src.layers.rnn.conv_lstm.self.activation->keras.src.activations.get(activation)
A:keras.src.layers.rnn.conv_lstm.self.recurrent_activation->keras.src.activations.get(recurrent_activation)
A:keras.src.layers.rnn.conv_lstm.self.kernel_initializer->keras.src.initializers.get(kernel_initializer)
A:keras.src.layers.rnn.conv_lstm.self.recurrent_initializer->keras.src.initializers.get(recurrent_initializer)
A:keras.src.layers.rnn.conv_lstm.self.bias_initializer->keras.src.initializers.get(bias_initializer)
A:keras.src.layers.rnn.conv_lstm.self.kernel_regularizer->keras.src.regularizers.get(kernel_regularizer)
A:keras.src.layers.rnn.conv_lstm.self.recurrent_regularizer->keras.src.regularizers.get(recurrent_regularizer)
A:keras.src.layers.rnn.conv_lstm.self.bias_regularizer->keras.src.regularizers.get(bias_regularizer)
A:keras.src.layers.rnn.conv_lstm.self.kernel_constraint->keras.src.constraints.get(kernel_constraint)
A:keras.src.layers.rnn.conv_lstm.self.recurrent_constraint->keras.src.constraints.get(recurrent_constraint)
A:keras.src.layers.rnn.conv_lstm.self.bias_constraint->keras.src.constraints.get(bias_constraint)
A:keras.src.layers.rnn.conv_lstm.self.dropout->min(1.0, max(0.0, dropout))
A:keras.src.layers.rnn.conv_lstm.self.recurrent_dropout->min(1.0, max(0.0, recurrent_dropout))
A:keras.src.layers.rnn.conv_lstm.self.input_spec->InputSpec(ndim=rank + 3)
A:keras.src.layers.rnn.conv_lstm.self.kernel->self.add_weight(shape=self.kernel_shape, initializer=self.kernel_initializer, name='kernel', regularizer=self.kernel_regularizer, constraint=self.kernel_constraint)
A:keras.src.layers.rnn.conv_lstm.self.recurrent_kernel->self.add_weight(shape=recurrent_kernel_shape, initializer=self.recurrent_initializer, name='recurrent_kernel', regularizer=self.recurrent_regularizer, constraint=self.recurrent_constraint)
A:keras.src.layers.rnn.conv_lstm.self.bias->self.add_weight(shape=(self.filters * 4,), name='bias', initializer=bias_initializer, regularizer=self.bias_regularizer, constraint=self.bias_constraint)
A:keras.src.layers.rnn.conv_lstm.(kernel_i, kernel_f, kernel_c, kernel_o)->keras.src.ops.split(self.kernel, 4, axis=self.rank + 1)
A:keras.src.layers.rnn.conv_lstm.(recurrent_kernel_i, recurrent_kernel_f, recurrent_kernel_c, recurrent_kernel_o)->keras.src.ops.split(self.recurrent_kernel, 4, axis=self.rank + 1)
A:keras.src.layers.rnn.conv_lstm.(bias_i, bias_f, bias_c, bias_o)->keras.src.ops.split(self.bias, 4)
A:keras.src.layers.rnn.conv_lstm.x_i->self.input_conv(inputs_i, kernel_i, bias_i, padding=self.padding)
A:keras.src.layers.rnn.conv_lstm.x_f->self.input_conv(inputs_f, kernel_f, bias_f, padding=self.padding)
A:keras.src.layers.rnn.conv_lstm.x_c->self.input_conv(inputs_c, kernel_c, bias_c, padding=self.padding)
A:keras.src.layers.rnn.conv_lstm.x_o->self.input_conv(inputs_o, kernel_o, bias_o, padding=self.padding)
A:keras.src.layers.rnn.conv_lstm.h_i->self.recurrent_conv(h_tm1_i, recurrent_kernel_i)
A:keras.src.layers.rnn.conv_lstm.h_f->self.recurrent_conv(h_tm1_f, recurrent_kernel_f)
A:keras.src.layers.rnn.conv_lstm.h_c->self.recurrent_conv(h_tm1_c, recurrent_kernel_c)
A:keras.src.layers.rnn.conv_lstm.h_o->self.recurrent_conv(h_tm1_o, recurrent_kernel_o)
A:keras.src.layers.rnn.conv_lstm.i->self.recurrent_activation(x_i + h_i)
A:keras.src.layers.rnn.conv_lstm.f->self.recurrent_activation(x_f + h_f)
A:keras.src.layers.rnn.conv_lstm.o->self.recurrent_activation(x_o + h_o)
A:keras.src.layers.rnn.conv_lstm.conv_output_shape->keras.src.ops.operation_utils.compute_conv_output_shape(inputs_shape, self.filters, self.kernel_size, strides=self.strides, padding=self.padding, data_format=self.data_format, dilation_rate=self.dilation_rate)
A:keras.src.layers.rnn.conv_lstm.conv_out->keras.src.ops.conv(x, w, strides=strides, padding='same', data_format=self.data_format)
A:keras.src.layers.rnn.conv_lstm.bias->keras.src.ops.reshape(b, bias_shape)
A:keras.src.layers.rnn.conv_lstm.strides->keras.src.utils.argument_validation.standardize_tuple(1, self.rank, 'strides', allow_zero=True)
A:keras.src.layers.rnn.conv_lstm.base_config->super().get_config()
A:keras.src.layers.rnn.conv_lstm.cell->ConvLSTMCell(rank=rank, filters=filters, kernel_size=kernel_size, strides=strides, padding=padding, data_format=data_format, dilation_rate=dilation_rate, activation=activation, recurrent_activation=recurrent_activation, use_bias=use_bias, kernel_initializer=kernel_initializer, recurrent_initializer=recurrent_initializer, bias_initializer=bias_initializer, unit_forget_bias=unit_forget_bias, kernel_regularizer=kernel_regularizer, recurrent_regularizer=recurrent_regularizer, bias_regularizer=bias_regularizer, kernel_constraint=kernel_constraint, recurrent_constraint=recurrent_constraint, bias_constraint=bias_constraint, dropout=dropout, recurrent_dropout=recurrent_dropout, seed=seed, name='conv_lstm_cell', dtype=kwargs.get('dtype'))
keras.src.layers.rnn.conv_lstm.ConvLSTM(self,rank,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,**kwargs)
keras.src.layers.rnn.conv_lstm.ConvLSTM.__init__(self,rank,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,**kwargs)
keras.src.layers.rnn.conv_lstm.ConvLSTM.activation(self)
keras.src.layers.rnn.conv_lstm.ConvLSTM.bias_constraint(self)
keras.src.layers.rnn.conv_lstm.ConvLSTM.bias_initializer(self)
keras.src.layers.rnn.conv_lstm.ConvLSTM.bias_regularizer(self)
keras.src.layers.rnn.conv_lstm.ConvLSTM.call(self,sequences,initial_state=None,mask=None,training=False)
keras.src.layers.rnn.conv_lstm.ConvLSTM.compute_mask(self,_,mask)
keras.src.layers.rnn.conv_lstm.ConvLSTM.compute_output_shape(self,sequences_shape,initial_state_shape=None)
keras.src.layers.rnn.conv_lstm.ConvLSTM.data_format(self)
keras.src.layers.rnn.conv_lstm.ConvLSTM.dilation_rate(self)
keras.src.layers.rnn.conv_lstm.ConvLSTM.dropout(self)
keras.src.layers.rnn.conv_lstm.ConvLSTM.filters(self)
keras.src.layers.rnn.conv_lstm.ConvLSTM.from_config(cls,config)
keras.src.layers.rnn.conv_lstm.ConvLSTM.get_config(self)
keras.src.layers.rnn.conv_lstm.ConvLSTM.kernel_constraint(self)
keras.src.layers.rnn.conv_lstm.ConvLSTM.kernel_initializer(self)
keras.src.layers.rnn.conv_lstm.ConvLSTM.kernel_regularizer(self)
keras.src.layers.rnn.conv_lstm.ConvLSTM.kernel_size(self)
keras.src.layers.rnn.conv_lstm.ConvLSTM.padding(self)
keras.src.layers.rnn.conv_lstm.ConvLSTM.recurrent_activation(self)
keras.src.layers.rnn.conv_lstm.ConvLSTM.recurrent_constraint(self)
keras.src.layers.rnn.conv_lstm.ConvLSTM.recurrent_dropout(self)
keras.src.layers.rnn.conv_lstm.ConvLSTM.recurrent_initializer(self)
keras.src.layers.rnn.conv_lstm.ConvLSTM.recurrent_regularizer(self)
keras.src.layers.rnn.conv_lstm.ConvLSTM.strides(self)
keras.src.layers.rnn.conv_lstm.ConvLSTM.unit_forget_bias(self)
keras.src.layers.rnn.conv_lstm.ConvLSTM.use_bias(self)
keras.src.layers.rnn.conv_lstm.ConvLSTMCell(self,rank,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,**kwargs)
keras.src.layers.rnn.conv_lstm.ConvLSTMCell.__init__(self,rank,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,seed=None,**kwargs)
keras.src.layers.rnn.conv_lstm.ConvLSTMCell.build(self,inputs_shape,states_shape=None)
keras.src.layers.rnn.conv_lstm.ConvLSTMCell.call(self,inputs,states,training=False)
keras.src.layers.rnn.conv_lstm.ConvLSTMCell.compute_output_shape(self,inputs_shape,states_shape=None)
keras.src.layers.rnn.conv_lstm.ConvLSTMCell.get_config(self)
keras.src.layers.rnn.conv_lstm.ConvLSTMCell.get_initial_state(self,batch_size=None)
keras.src.layers.rnn.conv_lstm.ConvLSTMCell.input_conv(self,x,w,b=None,padding='valid')
keras.src.layers.rnn.conv_lstm.ConvLSTMCell.recurrent_conv(self,x,w)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/regularization/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/regularization/activity_regularization.py----------------------------------------
A:keras.src.layers.regularization.activity_regularization.base_config->super().get_config()
keras.src.layers.ActivityRegularization(self,l1=0.0,l2=0.0,**kwargs)
keras.src.layers.ActivityRegularization.call(self,inputs)
keras.src.layers.ActivityRegularization.compute_output_shape(self,input_shape)
keras.src.layers.ActivityRegularization.get_config(self)
keras.src.layers.regularization.activity_regularization.ActivityRegularization(self,l1=0.0,l2=0.0,**kwargs)
keras.src.layers.regularization.activity_regularization.ActivityRegularization.__init__(self,l1=0.0,l2=0.0,**kwargs)
keras.src.layers.regularization.activity_regularization.ActivityRegularization.call(self,inputs)
keras.src.layers.regularization.activity_regularization.ActivityRegularization.compute_output_shape(self,input_shape)
keras.src.layers.regularization.activity_regularization.ActivityRegularization.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/regularization/dropout.py----------------------------------------
A:keras.src.layers.regularization.dropout.self.seed_generator->keras.src.backend.random.SeedGenerator(seed)
A:keras.src.layers.regularization.dropout.base_config->super().get_config()
keras.src.layers.Dropout(self,rate,noise_shape=None,seed=None,**kwargs)
keras.src.layers.Dropout.call(self,inputs,training=False)
keras.src.layers.Dropout.compute_output_shape(self,input_shape)
keras.src.layers.Dropout.get_config(self)
keras.src.layers.regularization.dropout.Dropout(self,rate,noise_shape=None,seed=None,**kwargs)
keras.src.layers.regularization.dropout.Dropout.__init__(self,rate,noise_shape=None,seed=None,**kwargs)
keras.src.layers.regularization.dropout.Dropout.call(self,inputs,training=False)
keras.src.layers.regularization.dropout.Dropout.compute_output_shape(self,input_shape)
keras.src.layers.regularization.dropout.Dropout.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/regularization/spatial_dropout.py----------------------------------------
A:keras.src.layers.regularization.spatial_dropout.self.input_spec->InputSpec(ndim=5)
A:keras.src.layers.regularization.spatial_dropout.input_shape->keras.src.ops.shape(inputs)
A:keras.src.layers.regularization.spatial_dropout.self.data_format->keras.src.backend.standardize_data_format(data_format)
A:keras.src.layers.regularization.spatial_dropout.base_config->super().get_config()
keras.src.layers.SpatialDropout1D(self,rate,seed=None,name=None,dtype=None)
keras.src.layers.SpatialDropout1D._get_noise_shape(self,inputs)
keras.src.layers.SpatialDropout2D(self,rate,data_format=None,seed=None,name=None,dtype=None)
keras.src.layers.SpatialDropout2D._get_noise_shape(self,inputs)
keras.src.layers.SpatialDropout2D.get_config(self)
keras.src.layers.SpatialDropout3D(self,rate,data_format=None,seed=None,name=None,dtype=None)
keras.src.layers.SpatialDropout3D._get_noise_shape(self,inputs)
keras.src.layers.SpatialDropout3D.get_config(self)
keras.src.layers.regularization.spatial_dropout.BaseSpatialDropout(self,rate,seed=None,name=None,dtype=None)
keras.src.layers.regularization.spatial_dropout.BaseSpatialDropout.__init__(self,rate,seed=None,name=None,dtype=None)
keras.src.layers.regularization.spatial_dropout.BaseSpatialDropout.call(self,inputs,training=False)
keras.src.layers.regularization.spatial_dropout.BaseSpatialDropout.get_config(self)
keras.src.layers.regularization.spatial_dropout.SpatialDropout1D(self,rate,seed=None,name=None,dtype=None)
keras.src.layers.regularization.spatial_dropout.SpatialDropout1D.__init__(self,rate,seed=None,name=None,dtype=None)
keras.src.layers.regularization.spatial_dropout.SpatialDropout1D._get_noise_shape(self,inputs)
keras.src.layers.regularization.spatial_dropout.SpatialDropout2D(self,rate,data_format=None,seed=None,name=None,dtype=None)
keras.src.layers.regularization.spatial_dropout.SpatialDropout2D.__init__(self,rate,data_format=None,seed=None,name=None,dtype=None)
keras.src.layers.regularization.spatial_dropout.SpatialDropout2D._get_noise_shape(self,inputs)
keras.src.layers.regularization.spatial_dropout.SpatialDropout2D.get_config(self)
keras.src.layers.regularization.spatial_dropout.SpatialDropout3D(self,rate,data_format=None,seed=None,name=None,dtype=None)
keras.src.layers.regularization.spatial_dropout.SpatialDropout3D.__init__(self,rate,data_format=None,seed=None,name=None,dtype=None)
keras.src.layers.regularization.spatial_dropout.SpatialDropout3D._get_noise_shape(self,inputs)
keras.src.layers.regularization.spatial_dropout.SpatialDropout3D.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/regularization/gaussian_dropout.py----------------------------------------
A:keras.src.layers.regularization.gaussian_dropout.self.seed_generator->keras.src.backend.random.SeedGenerator(seed)
A:keras.src.layers.regularization.gaussian_dropout.stddev->math.sqrt(self.rate / (1.0 - self.rate))
A:keras.src.layers.regularization.gaussian_dropout.base_config->super().get_config()
keras.src.layers.GaussianDropout(self,rate,seed=None,**kwargs)
keras.src.layers.GaussianDropout.call(self,inputs,training=False)
keras.src.layers.GaussianDropout.compute_output_shape(self,input_shape)
keras.src.layers.GaussianDropout.get_config(self)
keras.src.layers.regularization.gaussian_dropout.GaussianDropout(self,rate,seed=None,**kwargs)
keras.src.layers.regularization.gaussian_dropout.GaussianDropout.__init__(self,rate,seed=None,**kwargs)
keras.src.layers.regularization.gaussian_dropout.GaussianDropout.call(self,inputs,training=False)
keras.src.layers.regularization.gaussian_dropout.GaussianDropout.compute_output_shape(self,input_shape)
keras.src.layers.regularization.gaussian_dropout.GaussianDropout.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/regularization/alpha_dropout.py----------------------------------------
A:keras.src.layers.regularization.alpha_dropout.self.seed_generator->keras.src.backend.random.SeedGenerator(seed)
A:keras.src.layers.regularization.alpha_dropout.noise_shape->self._get_concrete_noise_shape(inputs, self.noise_shape)
A:keras.src.layers.regularization.alpha_dropout.kept_idx->keras.src.ops.cast(kept_idx, inputs.dtype)
A:keras.src.layers.regularization.alpha_dropout.concrete_inputs_shape->keras.src.ops.shape(inputs)
A:keras.src.layers.regularization.alpha_dropout.base_config->super().get_config()
keras.src.layers.AlphaDropout(self,rate,noise_shape=None,seed=None,**kwargs)
keras.src.layers.AlphaDropout._get_concrete_noise_shape(self,inputs,noise_shape)
keras.src.layers.AlphaDropout.call(self,inputs,training=False)
keras.src.layers.AlphaDropout.compute_output_shape(self,input_shape)
keras.src.layers.AlphaDropout.get_config(self)
keras.src.layers.regularization.alpha_dropout.AlphaDropout(self,rate,noise_shape=None,seed=None,**kwargs)
keras.src.layers.regularization.alpha_dropout.AlphaDropout.__init__(self,rate,noise_shape=None,seed=None,**kwargs)
keras.src.layers.regularization.alpha_dropout.AlphaDropout._get_concrete_noise_shape(self,inputs,noise_shape)
keras.src.layers.regularization.alpha_dropout.AlphaDropout.call(self,inputs,training=False)
keras.src.layers.regularization.alpha_dropout.AlphaDropout.compute_output_shape(self,input_shape)
keras.src.layers.regularization.alpha_dropout.AlphaDropout.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/regularization/gaussian_noise.py----------------------------------------
A:keras.src.layers.regularization.gaussian_noise.self.seed_generator->keras.src.backend.random.SeedGenerator(seed)
A:keras.src.layers.regularization.gaussian_noise.base_config->super().get_config()
keras.src.layers.GaussianNoise(self,stddev,seed=None,**kwargs)
keras.src.layers.GaussianNoise.call(self,inputs,training=False)
keras.src.layers.GaussianNoise.compute_output_shape(self,input_shape)
keras.src.layers.GaussianNoise.get_config(self)
keras.src.layers.regularization.gaussian_noise.GaussianNoise(self,stddev,seed=None,**kwargs)
keras.src.layers.regularization.gaussian_noise.GaussianNoise.__init__(self,stddev,seed=None,**kwargs)
keras.src.layers.regularization.gaussian_noise.GaussianNoise.call(self,inputs,training=False)
keras.src.layers.regularization.gaussian_noise.GaussianNoise.compute_output_shape(self,input_shape)
keras.src.layers.regularization.gaussian_noise.GaussianNoise.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/merging/multiply.py----------------------------------------
A:keras.src.layers.merging.multiply.output->keras.src.ops.multiply(output, inputs[i])
keras.src.layers.Multiply(Merge)
keras.src.layers.Multiply._merge_function(self,inputs)
keras.src.layers.merging.multiply.Multiply(Merge)
keras.src.layers.merging.multiply.Multiply._merge_function(self,inputs)
keras.src.layers.merging.multiply.multiply(inputs,**kwargs)
keras.src.layers.multiply(inputs,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/merging/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/merging/add.py----------------------------------------
A:keras.src.layers.merging.add.output->keras.src.ops.add(output, inputs[i])
keras.src.layers.Add(Merge)
keras.src.layers.Add._merge_function(self,inputs)
keras.src.layers.add(inputs,**kwargs)
keras.src.layers.merging.add.Add(Merge)
keras.src.layers.merging.add.Add._merge_function(self,inputs)
keras.src.layers.merging.add.add(inputs,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/merging/concatenate.py----------------------------------------
A:keras.src.layers.merging.concatenate.shape_set->set()
A:keras.src.layers.merging.concatenate.ranks->set((len(shape) for shape in shape_set))
A:keras.src.layers.merging.concatenate.unique_dims->set((shape[axis] for shape in shape_set if shape[axis] is not None))
A:keras.src.layers.merging.concatenate.output_shape->list(input_shapes[0])
A:keras.src.layers.merging.concatenate.concatenated->keras.src.ops.concatenate(masks, axis=self.axis)
A:keras.src.layers.merging.concatenate.base_config->super().get_config()
keras.src.layers.Concatenate(self,axis=-1,**kwargs)
keras.src.layers.Concatenate._merge_function(self,inputs)
keras.src.layers.Concatenate.build(self,input_shape)
keras.src.layers.Concatenate.compute_mask(self,inputs,mask=None)
keras.src.layers.Concatenate.compute_output_shape(self,input_shape)
keras.src.layers.Concatenate.get_config(self)
keras.src.layers.concatenate(inputs,axis=-1,**kwargs)
keras.src.layers.merging.concatenate.Concatenate(self,axis=-1,**kwargs)
keras.src.layers.merging.concatenate.Concatenate.__init__(self,axis=-1,**kwargs)
keras.src.layers.merging.concatenate.Concatenate._merge_function(self,inputs)
keras.src.layers.merging.concatenate.Concatenate.build(self,input_shape)
keras.src.layers.merging.concatenate.Concatenate.compute_mask(self,inputs,mask=None)
keras.src.layers.merging.concatenate.Concatenate.compute_output_shape(self,input_shape)
keras.src.layers.merging.concatenate.Concatenate.get_config(self)
keras.src.layers.merging.concatenate.concatenate(inputs,axis=-1,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/merging/average.py----------------------------------------
A:keras.src.layers.merging.average.output->keras.src.ops.add(output, inputs[i])
keras.src.layers.Average(Merge)
keras.src.layers.Average._merge_function(self,inputs)
keras.src.layers.average(inputs,**kwargs)
keras.src.layers.merging.average.Average(Merge)
keras.src.layers.merging.average.Average._merge_function(self,inputs)
keras.src.layers.merging.average.average(inputs,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/merging/dot.py----------------------------------------
A:keras.src.layers.merging.dot.x_ndim->len(x_shape)
A:keras.src.layers.merging.dot.y_ndim->len(y_shape)
A:keras.src.layers.merging.dot.axes->list(axes)
A:keras.src.layers.merging.dot.x->keras.src.ops.reshape(x, x_squashed_shape)
A:keras.src.layers.merging.dot.y->keras.src.ops.reshape(y, y_squashed_shape)
A:keras.src.layers.merging.dot.pattern->list(range(y_ndim))
A:keras.src.layers.merging.dot.x_shape->keras.src.ops.shape(x)
A:keras.src.layers.merging.dot.y_shape->keras.src.ops.shape(y)
A:keras.src.layers.merging.dot.result->keras.src.ops.squeeze(result, -1)
A:keras.src.layers.merging.dot.output_shape->keras.src.ops.shape(result)
A:keras.src.layers.merging.dot.x1->normalize(x1, axis=axes[0])
A:keras.src.layers.merging.dot.x2->normalize(x2, axis=axes[1])
A:keras.src.layers.merging.dot.output->batch_dot(x1, x2, axes)
A:keras.src.layers.merging.dot.shape1->list(input_shape[0])
A:keras.src.layers.merging.dot.shape2->list(input_shape[1])
A:keras.src.layers.merging.dot.base_config->super().get_config()
keras.src.layers.Dot(self,axes,normalize=False,**kwargs)
keras.src.layers.Dot._merge_function(self,inputs)
keras.src.layers.Dot.build(self,input_shape)
keras.src.layers.Dot.compute_mask(self,inputs,mask=None)
keras.src.layers.Dot.compute_output_shape(self,input_shape)
keras.src.layers.Dot.get_config(self)
keras.src.layers.dot(inputs,axes=-1,**kwargs)
keras.src.layers.merging.dot.Dot(self,axes,normalize=False,**kwargs)
keras.src.layers.merging.dot.Dot.__init__(self,axes,normalize=False,**kwargs)
keras.src.layers.merging.dot.Dot._merge_function(self,inputs)
keras.src.layers.merging.dot.Dot.build(self,input_shape)
keras.src.layers.merging.dot.Dot.compute_mask(self,inputs,mask=None)
keras.src.layers.merging.dot.Dot.compute_output_shape(self,input_shape)
keras.src.layers.merging.dot.Dot.get_config(self)
keras.src.layers.merging.dot.batch_dot(x,y,axes=None)
keras.src.layers.merging.dot.dot(inputs,axes=-1,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/merging/base_merge.py----------------------------------------
A:keras.src.layers.merging.base_merge.output_shape->self.compute_output_shape([x.shape for x in inputs])
A:keras.src.layers.merging.base_merge.input_ndims->list(map(ops.ndim, inputs))
A:keras.src.layers.merging.base_merge.max_ndim->max(input_ndims)
A:keras.src.layers.merging.base_merge.x_ndim->keras.src.ops.ndim(x)
A:keras.src.layers.merging.base_merge.x->keras.src.ops.expand_dims(x, axis=1)
A:keras.src.layers.merging.base_merge.x_shape->keras.src.ops.shape(x)
A:keras.src.layers.merging.base_merge.new_shape->keras.src.ops.concatenate([ops.expand_dims(batch_size, axis=-1), y_shape[:y_ndim - 1]])
A:keras.src.layers.merging.base_merge.x_transposed->keras.src.ops.reshape(x_transposed, new_shape)
A:keras.src.layers.merging.base_merge.y->keras.src.ops.transpose(y, perm=dims)
A:keras.src.layers.merging.base_merge.y_ndim->keras.src.ops.ndim(y)
A:keras.src.layers.merging.base_merge.y_shape->keras.src.ops.shape(y)
A:keras.src.layers.merging.base_merge.output_sparse->all((x.sparse for x in inputs))
keras.src.layers.merging.base_merge.Merge(self,**kwargs)
keras.src.layers.merging.base_merge.Merge.__init__(self,**kwargs)
keras.src.layers.merging.base_merge.Merge._compute_elemwise_op_output_shape(self,shape1,shape2)
keras.src.layers.merging.base_merge.Merge._merge_function(self,inputs)
keras.src.layers.merging.base_merge.Merge.build(self,input_shape)
keras.src.layers.merging.base_merge.Merge.call(self,inputs)
keras.src.layers.merging.base_merge.Merge.compute_mask(self,inputs,mask=None)
keras.src.layers.merging.base_merge.Merge.compute_output_shape(self,input_shape)
keras.src.layers.merging.base_merge.Merge.compute_output_spec(self,inputs)
keras.src.layers.merging.base_merge.Merge.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/merging/subtract.py----------------------------------------
keras.src.layers.Subtract(Merge)
keras.src.layers.Subtract._merge_function(self,inputs)
keras.src.layers.Subtract.build(self,input_shape)
keras.src.layers.merging.subtract.Subtract(Merge)
keras.src.layers.merging.subtract.Subtract._merge_function(self,inputs)
keras.src.layers.merging.subtract.Subtract.build(self,input_shape)
keras.src.layers.merging.subtract.subtract(inputs,**kwargs)
keras.src.layers.subtract(inputs,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/merging/minimum.py----------------------------------------
A:keras.src.layers.merging.minimum.output->keras.src.ops.minimum(output, inputs[i])
keras.src.layers.Minimum(Merge)
keras.src.layers.Minimum._merge_function(self,inputs)
keras.src.layers.merging.minimum.Minimum(Merge)
keras.src.layers.merging.minimum.Minimum._merge_function(self,inputs)
keras.src.layers.merging.minimum.minimum(inputs,**kwargs)
keras.src.layers.minimum(inputs,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/merging/maximum.py----------------------------------------
A:keras.src.layers.merging.maximum.output->keras.src.ops.maximum(output, inputs[i])
keras.src.layers.Maximum(Merge)
keras.src.layers.Maximum._merge_function(self,inputs)
keras.src.layers.maximum(inputs,**kwargs)
keras.src.layers.merging.maximum.Maximum(Merge)
keras.src.layers.merging.maximum.Maximum._merge_function(self,inputs)
keras.src.layers.merging.maximum.maximum(inputs,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/activations/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/activations/elu.py----------------------------------------
keras.src.layers.activations.ELU(self,alpha=1.0,**kwargs)
keras.src.layers.activations.ELU.call(self,inputs)
keras.src.layers.activations.ELU.compute_output_shape(self,input_shape)
keras.src.layers.activations.elu.ELU(self,alpha=1.0,**kwargs)
keras.src.layers.activations.elu.ELU.__init__(self,alpha=1.0,**kwargs)
keras.src.layers.activations.elu.ELU.call(self,inputs)
keras.src.layers.activations.elu.ELU.compute_output_shape(self,input_shape)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/activations/softmax.py----------------------------------------
A:keras.src.layers.activations.softmax.config->super().get_config()
keras.src.layers.activations.Softmax(self,axis=-1,**kwargs)
keras.src.layers.activations.Softmax.call(self,inputs,mask=None)
keras.src.layers.activations.Softmax.compute_output_shape(self,input_shape)
keras.src.layers.activations.Softmax.get_config(self)
keras.src.layers.activations.softmax.Softmax(self,axis=-1,**kwargs)
keras.src.layers.activations.softmax.Softmax.__init__(self,axis=-1,**kwargs)
keras.src.layers.activations.softmax.Softmax.call(self,inputs,mask=None)
keras.src.layers.activations.softmax.Softmax.compute_output_shape(self,input_shape)
keras.src.layers.activations.softmax.Softmax.get_config(self)
keras.src.layers.activations.softmax._large_negative_number(dtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/activations/relu.py----------------------------------------
A:keras.src.layers.activations.relu.config->super().get_config()
keras.src.layers.activations.ReLU(self,max_value=None,negative_slope=0.0,threshold=0.0,**kwargs)
keras.src.layers.activations.ReLU.call(self,inputs)
keras.src.layers.activations.ReLU.compute_output_shape(self,input_shape)
keras.src.layers.activations.ReLU.get_config(self)
keras.src.layers.activations.relu.ReLU(self,max_value=None,negative_slope=0.0,threshold=0.0,**kwargs)
keras.src.layers.activations.relu.ReLU.__init__(self,max_value=None,negative_slope=0.0,threshold=0.0,**kwargs)
keras.src.layers.activations.relu.ReLU.call(self,inputs)
keras.src.layers.activations.relu.ReLU.compute_output_shape(self,input_shape)
keras.src.layers.activations.relu.ReLU.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/activations/prelu.py----------------------------------------
A:keras.src.layers.activations.prelu.self.alpha_initializer->keras.src.initializers.get(alpha_initializer)
A:keras.src.layers.activations.prelu.self.alpha_regularizer->keras.src.regularizers.get(alpha_regularizer)
A:keras.src.layers.activations.prelu.self.alpha_constraint->keras.src.constraints.get(alpha_constraint)
A:keras.src.layers.activations.prelu.self.shared_axes->list(shared_axes)
A:keras.src.layers.activations.prelu.param_shape->list(input_shape[1:])
A:keras.src.layers.activations.prelu.self.alpha->self.add_weight(shape=param_shape, name='alpha', initializer=self.alpha_initializer, regularizer=self.alpha_regularizer, constraint=self.alpha_constraint)
A:keras.src.layers.activations.prelu.self.input_spec->InputSpec(ndim=len(input_shape), axes=axes)
A:keras.src.layers.activations.prelu.pos->keras.src.activations.relu(inputs)
A:keras.src.layers.activations.prelu.config->super().get_config()
keras.src.layers.activations.PReLU(self,alpha_initializer='Zeros',alpha_regularizer=None,alpha_constraint=None,shared_axes=None,**kwargs)
keras.src.layers.activations.PReLU.build(self,input_shape)
keras.src.layers.activations.PReLU.call(self,inputs)
keras.src.layers.activations.PReLU.compute_output_shape(self,input_shape)
keras.src.layers.activations.PReLU.get_config(self)
keras.src.layers.activations.prelu.PReLU(self,alpha_initializer='Zeros',alpha_regularizer=None,alpha_constraint=None,shared_axes=None,**kwargs)
keras.src.layers.activations.prelu.PReLU.__init__(self,alpha_initializer='Zeros',alpha_regularizer=None,alpha_constraint=None,shared_axes=None,**kwargs)
keras.src.layers.activations.prelu.PReLU.build(self,input_shape)
keras.src.layers.activations.prelu.PReLU.call(self,inputs)
keras.src.layers.activations.prelu.PReLU.compute_output_shape(self,input_shape)
keras.src.layers.activations.prelu.PReLU.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/activations/leaky_relu.py----------------------------------------
A:keras.src.layers.activations.leaky_relu.negative_slope->kwargs.pop('alpha')
A:keras.src.layers.activations.leaky_relu.config->super().get_config()
keras.src.layers.activations.LeakyReLU(self,negative_slope=0.3,**kwargs)
keras.src.layers.activations.LeakyReLU.call(self,inputs)
keras.src.layers.activations.LeakyReLU.compute_output_shape(self,input_shape)
keras.src.layers.activations.LeakyReLU.get_config(self)
keras.src.layers.activations.leaky_relu.LeakyReLU(self,negative_slope=0.3,**kwargs)
keras.src.layers.activations.leaky_relu.LeakyReLU.__init__(self,negative_slope=0.3,**kwargs)
keras.src.layers.activations.leaky_relu.LeakyReLU.call(self,inputs)
keras.src.layers.activations.leaky_relu.LeakyReLU.compute_output_shape(self,input_shape)
keras.src.layers.activations.leaky_relu.LeakyReLU.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/activations/activation.py----------------------------------------
A:keras.src.layers.activations.activation.self.activation->keras.src.activations.get(activation)
A:keras.src.layers.activations.activation.base_config->super().get_config()
keras.src.layers.Activation(self,activation,**kwargs)
keras.src.layers.Activation.call(self,inputs)
keras.src.layers.Activation.compute_output_shape(self,input_shape)
keras.src.layers.Activation.get_config(self)
keras.src.layers.activations.activation.Activation(self,activation,**kwargs)
keras.src.layers.activations.activation.Activation.__init__(self,activation,**kwargs)
keras.src.layers.activations.activation.Activation.call(self,inputs)
keras.src.layers.activations.activation.Activation.compute_output_shape(self,input_shape)
keras.src.layers.activations.activation.Activation.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/convolutional/base_separable_conv.py----------------------------------------
A:keras.src.layers.convolutional.base_separable_conv.self.kernel_size->standardize_tuple(kernel_size, rank, 'kernel_size')
A:keras.src.layers.convolutional.base_separable_conv.self.strides->standardize_tuple(strides, rank, 'strides')
A:keras.src.layers.convolutional.base_separable_conv.self.dilation_rate->standardize_tuple(dilation_rate, rank, 'dilation_rate')
A:keras.src.layers.convolutional.base_separable_conv.self.padding->standardize_padding(padding)
A:keras.src.layers.convolutional.base_separable_conv.self.data_format->standardize_data_format(data_format)
A:keras.src.layers.convolutional.base_separable_conv.self.activation->keras.src.activations.get(activation)
A:keras.src.layers.convolutional.base_separable_conv.self.depthwise_initializer->keras.src.initializers.get(depthwise_initializer)
A:keras.src.layers.convolutional.base_separable_conv.self.pointwise_initializer->keras.src.initializers.get(pointwise_initializer)
A:keras.src.layers.convolutional.base_separable_conv.self.bias_initializer->keras.src.initializers.get(bias_initializer)
A:keras.src.layers.convolutional.base_separable_conv.self.depthwise_regularizer->keras.src.regularizers.get(depthwise_regularizer)
A:keras.src.layers.convolutional.base_separable_conv.self.pointwise_regularizer->keras.src.regularizers.get(pointwise_regularizer)
A:keras.src.layers.convolutional.base_separable_conv.self.bias_regularizer->keras.src.regularizers.get(bias_regularizer)
A:keras.src.layers.convolutional.base_separable_conv.self.depthwise_constraint->keras.src.constraints.get(depthwise_constraint)
A:keras.src.layers.convolutional.base_separable_conv.self.pointwise_constraint->keras.src.constraints.get(pointwise_constraint)
A:keras.src.layers.convolutional.base_separable_conv.self.bias_constraint->keras.src.constraints.get(bias_constraint)
A:keras.src.layers.convolutional.base_separable_conv.self.input_spec->InputSpec(min_ndim=self.rank + 2, axes={channel_axis: input_channel})
A:keras.src.layers.convolutional.base_separable_conv.self.depthwise_kernel->self.add_weight(name='depthwise_kernel', shape=depthwise_kernel_shape, initializer=self.depthwise_initializer, regularizer=self.depthwise_regularizer, constraint=self.depthwise_constraint, trainable=True, dtype=self.dtype)
A:keras.src.layers.convolutional.base_separable_conv.self.pointwise_kernel->self.add_weight(name='pointwise_kernel', shape=pointwise_kernel_shape, initializer=self.pointwise_initializer, regularizer=self.pointwise_regularizer, constraint=self.pointwise_constraint, trainable=True, dtype=self.dtype)
A:keras.src.layers.convolutional.base_separable_conv.self.bias->self.add_weight(name='bias', shape=(self.filters,), initializer=self.bias_initializer, regularizer=self.bias_regularizer, constraint=self.bias_constraint, trainable=True, dtype=self.dtype)
A:keras.src.layers.convolutional.base_separable_conv.outputs->keras.src.ops.separable_conv(inputs, self.depthwise_kernel, self.pointwise_kernel, strides=self.strides, padding=self.padding, dilation_rate=self.dilation_rate, data_format=self.data_format)
A:keras.src.layers.convolutional.base_separable_conv.bias->keras.src.ops.reshape(self.bias, bias_shape)
A:keras.src.layers.convolutional.base_separable_conv.config->super().get_config()
keras.src.layers.convolutional.base_separable_conv.BaseSeparableConv(self,rank,depth_multiplier,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.src.layers.convolutional.base_separable_conv.BaseSeparableConv.__init__(self,rank,depth_multiplier,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.src.layers.convolutional.base_separable_conv.BaseSeparableConv.build(self,input_shape)
keras.src.layers.convolutional.base_separable_conv.BaseSeparableConv.call(self,inputs)
keras.src.layers.convolutional.base_separable_conv.BaseSeparableConv.compute_output_shape(self,input_shape)
keras.src.layers.convolutional.base_separable_conv.BaseSeparableConv.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/convolutional/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/convolutional/depthwise_conv1d.py----------------------------------------
keras.src.layers.DepthwiseConv1D(self,kernel_size,strides=1,padding='valid',depth_multiplier=1,data_format=None,dilation_rate=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.convolutional.depthwise_conv1d.DepthwiseConv1D(self,kernel_size,strides=1,padding='valid',depth_multiplier=1,data_format=None,dilation_rate=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.convolutional.depthwise_conv1d.DepthwiseConv1D.__init__(self,kernel_size,strides=1,padding='valid',depth_multiplier=1,data_format=None,dilation_rate=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,bias_constraint=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/convolutional/conv3d.py----------------------------------------
keras.src.layers.Conv3D(self,filters,kernel_size,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1),groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.convolutional.conv3d.Conv3D(self,filters,kernel_size,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1),groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.convolutional.conv3d.Conv3D.__init__(self,filters,kernel_size,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1),groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/convolutional/depthwise_conv2d.py----------------------------------------
keras.src.layers.DepthwiseConv2D(self,kernel_size,strides=(1,1),padding='valid',depth_multiplier=1,data_format=None,dilation_rate=(1,1),activation=None,use_bias=True,depthwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.convolutional.depthwise_conv2d.DepthwiseConv2D(self,kernel_size,strides=(1,1),padding='valid',depth_multiplier=1,data_format=None,dilation_rate=(1,1),activation=None,use_bias=True,depthwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.convolutional.depthwise_conv2d.DepthwiseConv2D.__init__(self,kernel_size,strides=(1,1),padding='valid',depth_multiplier=1,data_format=None,dilation_rate=(1,1),activation=None,use_bias=True,depthwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,bias_constraint=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/convolutional/base_depthwise_conv.py----------------------------------------
A:keras.src.layers.convolutional.base_depthwise_conv.self.kernel_size->standardize_tuple(kernel_size, rank, 'kernel_size')
A:keras.src.layers.convolutional.base_depthwise_conv.self.strides->standardize_tuple(strides, rank, 'strides')
A:keras.src.layers.convolutional.base_depthwise_conv.self.dilation_rate->standardize_tuple(dilation_rate, rank, 'dilation_rate')
A:keras.src.layers.convolutional.base_depthwise_conv.self.padding->standardize_padding(padding)
A:keras.src.layers.convolutional.base_depthwise_conv.self.data_format->standardize_data_format(data_format)
A:keras.src.layers.convolutional.base_depthwise_conv.self.activation->keras.src.activations.get(activation)
A:keras.src.layers.convolutional.base_depthwise_conv.self.depthwise_initializer->keras.src.initializers.get(depthwise_initializer)
A:keras.src.layers.convolutional.base_depthwise_conv.self.bias_initializer->keras.src.initializers.get(bias_initializer)
A:keras.src.layers.convolutional.base_depthwise_conv.self.depthwise_regularizer->keras.src.regularizers.get(depthwise_regularizer)
A:keras.src.layers.convolutional.base_depthwise_conv.self.bias_regularizer->keras.src.regularizers.get(bias_regularizer)
A:keras.src.layers.convolutional.base_depthwise_conv.self.depthwise_constraint->keras.src.constraints.get(depthwise_constraint)
A:keras.src.layers.convolutional.base_depthwise_conv.self.bias_constraint->keras.src.constraints.get(bias_constraint)
A:keras.src.layers.convolutional.base_depthwise_conv.self.input_spec->InputSpec(min_ndim=self.rank + 2, axes={channel_axis: input_channel})
A:keras.src.layers.convolutional.base_depthwise_conv.self.kernel->self.add_weight(name='kernel', shape=depthwise_shape, initializer=self.depthwise_initializer, regularizer=self.depthwise_regularizer, constraint=self.depthwise_constraint, trainable=True, dtype=self.dtype)
A:keras.src.layers.convolutional.base_depthwise_conv.self.bias->self.add_weight(name='bias', shape=(self.depth_multiplier * input_channel,), initializer=self.bias_initializer, regularizer=self.bias_regularizer, constraint=self.bias_constraint, trainable=True, dtype=self.dtype)
A:keras.src.layers.convolutional.base_depthwise_conv.input_channel->self._get_input_channel(input_shape)
A:keras.src.layers.convolutional.base_depthwise_conv.outputs->keras.src.ops.depthwise_conv(inputs, self.kernel, strides=self.strides, padding=self.padding, dilation_rate=self.dilation_rate, data_format=self.data_format)
A:keras.src.layers.convolutional.base_depthwise_conv.bias->keras.src.ops.reshape(self.bias, bias_shape)
A:keras.src.layers.convolutional.base_depthwise_conv.config->super().get_config()
keras.src.layers.convolutional.base_depthwise_conv.BaseDepthwiseConv(self,rank,depth_multiplier,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.src.layers.convolutional.base_depthwise_conv.BaseDepthwiseConv.__init__(self,rank,depth_multiplier,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.src.layers.convolutional.base_depthwise_conv.BaseDepthwiseConv._get_input_channel(self,input_shape)
keras.src.layers.convolutional.base_depthwise_conv.BaseDepthwiseConv.build(self,input_shape)
keras.src.layers.convolutional.base_depthwise_conv.BaseDepthwiseConv.call(self,inputs)
keras.src.layers.convolutional.base_depthwise_conv.BaseDepthwiseConv.compute_output_shape(self,input_shape)
keras.src.layers.convolutional.base_depthwise_conv.BaseDepthwiseConv.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/convolutional/conv2d.py----------------------------------------
keras.src.layers.Conv2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.convolutional.conv2d.Conv2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.convolutional.conv2d.Conv2D.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/convolutional/conv2d_transpose.py----------------------------------------
keras.src.layers.Conv2DTranspose(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.convolutional.conv2d_transpose.Conv2DTranspose(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.convolutional.conv2d_transpose.Conv2DTranspose.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/convolutional/separable_conv2d.py----------------------------------------
keras.src.layers.SeparableConv2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.convolutional.separable_conv2d.SeparableConv2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.convolutional.separable_conv2d.SeparableConv2D.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/convolutional/separable_conv1d.py----------------------------------------
keras.src.layers.SeparableConv1D(self,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.convolutional.separable_conv1d.SeparableConv1D(self,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.convolutional.separable_conv1d.SeparableConv1D.__init__(self,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/convolutional/base_conv.py----------------------------------------
A:keras.src.layers.convolutional.base_conv.self.kernel_size->standardize_tuple(kernel_size, rank, 'kernel_size')
A:keras.src.layers.convolutional.base_conv.self.strides->standardize_tuple(strides, rank, 'strides')
A:keras.src.layers.convolutional.base_conv.self.dilation_rate->standardize_tuple(dilation_rate, rank, 'dilation_rate')
A:keras.src.layers.convolutional.base_conv.self.padding->standardize_padding(padding, allow_causal=rank == 1)
A:keras.src.layers.convolutional.base_conv.self.data_format->standardize_data_format(data_format)
A:keras.src.layers.convolutional.base_conv.self.activation->keras.src.activations.get(activation)
A:keras.src.layers.convolutional.base_conv.self.kernel_initializer->keras.src.initializers.get(kernel_initializer)
A:keras.src.layers.convolutional.base_conv.self.bias_initializer->keras.src.initializers.get(bias_initializer)
A:keras.src.layers.convolutional.base_conv.self.kernel_regularizer->keras.src.regularizers.get(kernel_regularizer)
A:keras.src.layers.convolutional.base_conv.self.bias_regularizer->keras.src.regularizers.get(bias_regularizer)
A:keras.src.layers.convolutional.base_conv.self.kernel_constraint->keras.src.constraints.get(kernel_constraint)
A:keras.src.layers.convolutional.base_conv.self.bias_constraint->keras.src.constraints.get(bias_constraint)
A:keras.src.layers.convolutional.base_conv.self.input_spec->InputSpec(min_ndim=self.rank + 2, axes={channel_axis: input_channel})
A:keras.src.layers.convolutional.base_conv.self.kernel->self.add_weight(name='kernel', shape=kernel_shape, initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, constraint=self.kernel_constraint, trainable=True, dtype=self.dtype)
A:keras.src.layers.convolutional.base_conv.self.bias->self.add_weight(name='bias', shape=(self.filters,), initializer=self.bias_initializer, regularizer=self.bias_regularizer, constraint=self.bias_constraint, trainable=True, dtype=self.dtype)
A:keras.src.layers.convolutional.base_conv.outputs->self.convolution_op(inputs, self.kernel)
A:keras.src.layers.convolutional.base_conv.bias->keras.src.ops.reshape(self.bias, bias_shape)
A:keras.src.layers.convolutional.base_conv.config->super().get_config()
keras.src.layers.convolutional.base_conv.BaseConv(self,rank,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.src.layers.convolutional.base_conv.BaseConv.__init__(self,rank,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.src.layers.convolutional.base_conv.BaseConv.build(self,input_shape)
keras.src.layers.convolutional.base_conv.BaseConv.call(self,inputs)
keras.src.layers.convolutional.base_conv.BaseConv.compute_output_shape(self,input_shape)
keras.src.layers.convolutional.base_conv.BaseConv.convolution_op(self,inputs,kernel)
keras.src.layers.convolutional.base_conv.BaseConv.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/convolutional/conv1d_transpose.py----------------------------------------
keras.src.layers.Conv1DTranspose(self,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.convolutional.conv1d_transpose.Conv1DTranspose(self,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.convolutional.conv1d_transpose.Conv1DTranspose.__init__(self,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/convolutional/base_conv_transpose.py----------------------------------------
A:keras.src.layers.convolutional.base_conv_transpose.self.kernel_size->standardize_tuple(kernel_size, rank, 'kernel_size')
A:keras.src.layers.convolutional.base_conv_transpose.self.strides->standardize_tuple(strides, rank, 'strides')
A:keras.src.layers.convolutional.base_conv_transpose.self.dilation_rate->standardize_tuple(dilation_rate, rank, 'dilation_rate')
A:keras.src.layers.convolutional.base_conv_transpose.self.padding->standardize_padding(padding)
A:keras.src.layers.convolutional.base_conv_transpose.self.output_padding->standardize_tuple(output_padding, rank, 'output_padding')
A:keras.src.layers.convolutional.base_conv_transpose.self.data_format->standardize_data_format(data_format)
A:keras.src.layers.convolutional.base_conv_transpose.self.activation->keras.src.activations.get(activation)
A:keras.src.layers.convolutional.base_conv_transpose.self.kernel_initializer->keras.src.initializers.get(kernel_initializer)
A:keras.src.layers.convolutional.base_conv_transpose.self.bias_initializer->keras.src.initializers.get(bias_initializer)
A:keras.src.layers.convolutional.base_conv_transpose.self.kernel_regularizer->keras.src.regularizers.get(kernel_regularizer)
A:keras.src.layers.convolutional.base_conv_transpose.self.bias_regularizer->keras.src.regularizers.get(bias_regularizer)
A:keras.src.layers.convolutional.base_conv_transpose.self.kernel_constraint->keras.src.constraints.get(kernel_constraint)
A:keras.src.layers.convolutional.base_conv_transpose.self.bias_constraint->keras.src.constraints.get(bias_constraint)
A:keras.src.layers.convolutional.base_conv_transpose.self.input_spec->InputSpec(min_ndim=self.rank + 2, axes={channel_axis: input_channel})
A:keras.src.layers.convolutional.base_conv_transpose.self.kernel->self.add_weight(name='kernel', shape=kernel_shape, initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, constraint=self.kernel_constraint, trainable=True, dtype=self.dtype)
A:keras.src.layers.convolutional.base_conv_transpose.self.bias->self.add_weight(name='bias', shape=(self.filters,), initializer=self.bias_initializer, regularizer=self.bias_regularizer, constraint=self.bias_constraint, trainable=True, dtype=self.dtype)
A:keras.src.layers.convolutional.base_conv_transpose.outputs->keras.src.ops.conv_transpose(inputs, self.kernel, strides=list(self.strides), padding=self.padding, output_padding=self.output_padding, dilation_rate=self.dilation_rate, data_format=self.data_format)
A:keras.src.layers.convolutional.base_conv_transpose.bias->keras.src.ops.reshape(self.bias, bias_shape)
A:keras.src.layers.convolutional.base_conv_transpose.config->super().get_config()
keras.src.layers.convolutional.base_conv_transpose.BaseConvTranspose(self,rank,filters,kernel_size,strides=1,padding='valid',output_padding=None,data_format=None,dilation_rate=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.src.layers.convolutional.base_conv_transpose.BaseConvTranspose.__init__(self,rank,filters,kernel_size,strides=1,padding='valid',output_padding=None,data_format=None,dilation_rate=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.src.layers.convolutional.base_conv_transpose.BaseConvTranspose.build(self,input_shape)
keras.src.layers.convolutional.base_conv_transpose.BaseConvTranspose.call(self,inputs)
keras.src.layers.convolutional.base_conv_transpose.BaseConvTranspose.compute_output_shape(self,input_shape)
keras.src.layers.convolutional.base_conv_transpose.BaseConvTranspose.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/convolutional/conv3d_transpose.py----------------------------------------
keras.src.layers.Conv3DTranspose(self,filters,kernel_size,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.convolutional.conv3d_transpose.Conv3DTranspose(self,filters,kernel_size,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.convolutional.conv3d_transpose.Conv3DTranspose.__init__(self,filters,kernel_size,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/convolutional/conv1d.py----------------------------------------
A:keras.src.layers.convolutional.conv1d.inputs->keras.src.ops.pad(inputs, self._compute_causal_padding())
A:keras.src.layers.convolutional.conv1d.outputs->keras.src.ops.conv(inputs, self.kernel, strides=list(self.strides), padding=padding, dilation_rate=self.dilation_rate, data_format=self.data_format)
A:keras.src.layers.convolutional.conv1d.bias->keras.src.ops.reshape(self.bias, bias_shape)
keras.src.layers.Conv1D(self,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.Conv1D._compute_causal_padding(self)
keras.src.layers.Conv1D.call(self,inputs)
keras.src.layers.convolutional.conv1d.Conv1D(self,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.convolutional.conv1d.Conv1D.__init__(self,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.convolutional.conv1d.Conv1D._compute_causal_padding(self)
keras.src.layers.convolutional.conv1d.Conv1D.call(self,inputs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/normalization/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/normalization/spectral_normalization.py----------------------------------------
A:keras.src.layers.normalization.spectral_normalization.self.input_spec->InputSpec(shape=[None] + list(input_shape[1:]))
A:keras.src.layers.normalization.spectral_normalization.self.vector_u->self.add_weight(shape=(1, self.kernel_shape[-1]), initializer=initializers.TruncatedNormal(stddev=0.02), trainable=False, name='vector_u', dtype=self.kernel.dtype)
A:keras.src.layers.normalization.spectral_normalization.(new_vector_u, new_kernel)->keras.src.ops.cond(ops.all(ops.equal(self.kernel.value, 0)), lambda : (self.vector_u.value, self.kernel.value), self.normalized_weights)
A:keras.src.layers.normalization.spectral_normalization.output->self.layer(inputs)
A:keras.src.layers.normalization.spectral_normalization.weights->keras.src.ops.reshape(self.kernel, [-1, self.kernel_shape[-1]])
A:keras.src.layers.normalization.spectral_normalization.vector_v->normalize(ops.matmul(vector_u, ops.transpose(weights)), axis=None)
A:keras.src.layers.normalization.spectral_normalization.vector_u->normalize(ops.matmul(vector_v, weights), axis=None)
A:keras.src.layers.normalization.spectral_normalization.sigma->keras.src.ops.matmul(ops.matmul(vector_v, weights), ops.transpose(vector_u))
A:keras.src.layers.normalization.spectral_normalization.kernel->keras.src.ops.reshape(ops.divide(self.kernel, sigma), self.kernel_shape)
A:keras.src.layers.normalization.spectral_normalization.base_config->super().get_config()
keras.src.layers.SpectralNormalization(self,layer,power_iterations=1,**kwargs)
keras.src.layers.SpectralNormalization.build(self,input_shape)
keras.src.layers.SpectralNormalization.call(self,inputs,training=False)
keras.src.layers.SpectralNormalization.compute_output_shape(self,input_shape)
keras.src.layers.SpectralNormalization.get_config(self)
keras.src.layers.SpectralNormalization.normalized_weights(self)
keras.src.layers.normalization.spectral_normalization.SpectralNormalization(self,layer,power_iterations=1,**kwargs)
keras.src.layers.normalization.spectral_normalization.SpectralNormalization.__init__(self,layer,power_iterations=1,**kwargs)
keras.src.layers.normalization.spectral_normalization.SpectralNormalization.build(self,input_shape)
keras.src.layers.normalization.spectral_normalization.SpectralNormalization.call(self,inputs,training=False)
keras.src.layers.normalization.spectral_normalization.SpectralNormalization.compute_output_shape(self,input_shape)
keras.src.layers.normalization.spectral_normalization.SpectralNormalization.get_config(self)
keras.src.layers.normalization.spectral_normalization.SpectralNormalization.normalized_weights(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/normalization/unit_normalization.py----------------------------------------
A:keras.src.layers.normalization.unit_normalization.self.axis->list(axis)
A:keras.src.layers.normalization.unit_normalization.x->keras.src.ops.cast(inputs, self.compute_dtype)
A:keras.src.layers.normalization.unit_normalization.square_sum->keras.src.ops.sum(ops.square(x), axis=self.axis, keepdims=True)
A:keras.src.layers.normalization.unit_normalization.x_inv_norm->keras.src.ops.rsqrt(ops.maximum(square_sum, 1e-12))
A:keras.src.layers.normalization.unit_normalization.config->super().get_config()
keras.src.layers.UnitNormalization(self,axis=-1,**kwargs)
keras.src.layers.UnitNormalization.build(self,input_shape)
keras.src.layers.UnitNormalization.call(self,inputs)
keras.src.layers.UnitNormalization.compute_output_shape(self,input_shape)
keras.src.layers.UnitNormalization.get_config(self)
keras.src.layers.normalization.unit_normalization.UnitNormalization(self,axis=-1,**kwargs)
keras.src.layers.normalization.unit_normalization.UnitNormalization.__init__(self,axis=-1,**kwargs)
keras.src.layers.normalization.unit_normalization.UnitNormalization.build(self,input_shape)
keras.src.layers.normalization.unit_normalization.UnitNormalization.call(self,inputs)
keras.src.layers.normalization.unit_normalization.UnitNormalization.compute_output_shape(self,input_shape)
keras.src.layers.normalization.unit_normalization.UnitNormalization.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/normalization/layer_normalization.py----------------------------------------
A:keras.src.layers.normalization.layer_normalization.self.axis->list(axis)
A:keras.src.layers.normalization.layer_normalization.self.beta_initializer->keras.src.initializers.get(beta_initializer)
A:keras.src.layers.normalization.layer_normalization.self.gamma_initializer->keras.src.initializers.get(gamma_initializer)
A:keras.src.layers.normalization.layer_normalization.self.beta_regularizer->keras.src.regularizers.get(beta_regularizer)
A:keras.src.layers.normalization.layer_normalization.self.gamma_regularizer->keras.src.regularizers.get(gamma_regularizer)
A:keras.src.layers.normalization.layer_normalization.self.beta_constraint->keras.src.constraints.get(beta_constraint)
A:keras.src.layers.normalization.layer_normalization.self.gamma_constraint->keras.src.constraints.get(gamma_constraint)
A:keras.src.layers.normalization.layer_normalization.shape->tuple([input_shape[dim] for dim in self.axis])
A:keras.src.layers.normalization.layer_normalization.self.gamma->self.add_weight(name='gamma', shape=shape, initializer=self.gamma_initializer, regularizer=self.gamma_regularizer, constraint=self.gamma_constraint, trainable=True)
A:keras.src.layers.normalization.layer_normalization.self.beta->self.add_weight(name='beta', shape=shape, initializer=self.beta_initializer, regularizer=self.beta_regularizer, constraint=self.beta_constraint, trainable=True)
A:keras.src.layers.normalization.layer_normalization.inputs->keras.src.ops.cast(inputs, 'float32')
A:keras.src.layers.normalization.layer_normalization.ndims->len(input_shape)
A:keras.src.layers.normalization.layer_normalization.variance->keras.src.ops.var(inputs, axis=self.axis, keepdims=True)
A:keras.src.layers.normalization.layer_normalization.inv->keras.src.ops.rsqrt(variance + self.epsilon)
A:keras.src.layers.normalization.layer_normalization.(mean, variance)->keras.src.ops.moments(inputs, axes=self.axis, keepdims=True)
A:keras.src.layers.normalization.layer_normalization.gamma->keras.src.ops.cast(gamma, inputs.dtype)
A:keras.src.layers.normalization.layer_normalization.beta->keras.src.ops.cast(beta, inputs.dtype)
A:keras.src.layers.normalization.layer_normalization.base_config->super().get_config()
keras.src.LayerNormalization(self,axis=-1,epsilon=0.001,center=True,scale=True,rms_scaling=False,beta_initializer='zeros',gamma_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,**kwargs)
keras.src.LayerNormalization.build(self,input_shape)
keras.src.LayerNormalization.call(self,inputs)
keras.src.LayerNormalization.compute_output_shape(self,input_shape)
keras.src.LayerNormalization.get_config(self)
keras.src.layers.normalization.layer_normalization.LayerNormalization(self,axis=-1,epsilon=0.001,center=True,scale=True,rms_scaling=False,beta_initializer='zeros',gamma_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,**kwargs)
keras.src.layers.normalization.layer_normalization.LayerNormalization.__init__(self,axis=-1,epsilon=0.001,center=True,scale=True,rms_scaling=False,beta_initializer='zeros',gamma_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,**kwargs)
keras.src.layers.normalization.layer_normalization.LayerNormalization.build(self,input_shape)
keras.src.layers.normalization.layer_normalization.LayerNormalization.call(self,inputs)
keras.src.layers.normalization.layer_normalization.LayerNormalization.compute_output_shape(self,input_shape)
keras.src.layers.normalization.layer_normalization.LayerNormalization.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/normalization/group_normalization.py----------------------------------------
A:keras.src.layers.normalization.group_normalization.self.beta_initializer->keras.src.initializers.get(beta_initializer)
A:keras.src.layers.normalization.group_normalization.self.gamma_initializer->keras.src.initializers.get(gamma_initializer)
A:keras.src.layers.normalization.group_normalization.self.beta_regularizer->keras.src.regularizers.get(beta_regularizer)
A:keras.src.layers.normalization.group_normalization.self.gamma_regularizer->keras.src.regularizers.get(gamma_regularizer)
A:keras.src.layers.normalization.group_normalization.self.beta_constraint->keras.src.constraints.get(beta_constraint)
A:keras.src.layers.normalization.group_normalization.self.gamma_constraint->keras.src.constraints.get(gamma_constraint)
A:keras.src.layers.normalization.group_normalization.self.input_spec->InputSpec(ndim=len(input_shape), axes={self.axis: dim})
A:keras.src.layers.normalization.group_normalization.self.gamma->self.add_weight(shape=(dim,), name='gamma', initializer=self.gamma_initializer, regularizer=self.gamma_regularizer, constraint=self.gamma_constraint)
A:keras.src.layers.normalization.group_normalization.self.beta->self.add_weight(shape=(dim,), name='beta', initializer=self.beta_initializer, regularizer=self.beta_regularizer, constraint=self.beta_constraint)
A:keras.src.layers.normalization.group_normalization.reshaped_inputs->keras.src.ops.reshape(inputs, group_shape)
A:keras.src.layers.normalization.group_normalization.normalized_inputs->self._apply_normalization(reshaped_inputs, inputs.shape)
A:keras.src.layers.normalization.group_normalization.input_shape->keras.src.ops.shape(inputs)
A:keras.src.layers.normalization.group_normalization.group_shape->list(inputs.shape)
A:keras.src.layers.normalization.group_normalization.group_reduction_axes->list(range(1, len(reshaped_inputs.shape)))
A:keras.src.layers.normalization.group_normalization.broadcast_shape->self._create_broadcast_shape(input_shape)
A:keras.src.layers.normalization.group_normalization.(mean, variance)->keras.src.ops.moments(reshaped_inputs, axes=group_reduction_axes, keepdims=True)
A:keras.src.layers.normalization.group_normalization.inv->keras.src.ops.rsqrt(variance + self.epsilon)
A:keras.src.layers.normalization.group_normalization.gamma->keras.src.ops.cast(gamma, reshaped_inputs.dtype)
A:keras.src.layers.normalization.group_normalization.beta->keras.src.ops.cast(beta, reshaped_inputs.dtype)
A:keras.src.layers.normalization.group_normalization.base_config->super().get_config()
keras.src.layers.GroupNormalization(self,groups=32,axis=-1,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,**kwargs)
keras.src.layers.GroupNormalization._apply_normalization(self,reshaped_inputs,input_shape)
keras.src.layers.GroupNormalization._create_broadcast_shape(self,input_shape)
keras.src.layers.GroupNormalization._reshape_into_groups(self,inputs)
keras.src.layers.GroupNormalization.build(self,input_shape)
keras.src.layers.GroupNormalization.call(self,inputs)
keras.src.layers.GroupNormalization.compute_output_shape(self,input_shape)
keras.src.layers.GroupNormalization.get_config(self)
keras.src.layers.normalization.group_normalization.GroupNormalization(self,groups=32,axis=-1,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,**kwargs)
keras.src.layers.normalization.group_normalization.GroupNormalization.__init__(self,groups=32,axis=-1,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,**kwargs)
keras.src.layers.normalization.group_normalization.GroupNormalization._apply_normalization(self,reshaped_inputs,input_shape)
keras.src.layers.normalization.group_normalization.GroupNormalization._create_broadcast_shape(self,input_shape)
keras.src.layers.normalization.group_normalization.GroupNormalization._reshape_into_groups(self,inputs)
keras.src.layers.normalization.group_normalization.GroupNormalization.build(self,input_shape)
keras.src.layers.normalization.group_normalization.GroupNormalization.call(self,inputs)
keras.src.layers.normalization.group_normalization.GroupNormalization.compute_output_shape(self,input_shape)
keras.src.layers.normalization.group_normalization.GroupNormalization.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/normalization/batch_normalization.py----------------------------------------
A:keras.src.layers.normalization.batch_normalization.self.axis->int(axis)
A:keras.src.layers.normalization.batch_normalization.self.momentum->float(momentum)
A:keras.src.layers.normalization.batch_normalization.self.epsilon->float(epsilon)
A:keras.src.layers.normalization.batch_normalization.self.beta_initializer->keras.src.initializers.get(beta_initializer)
A:keras.src.layers.normalization.batch_normalization.self.gamma_initializer->keras.src.initializers.get(gamma_initializer)
A:keras.src.layers.normalization.batch_normalization.self.moving_mean_initializer->keras.src.initializers.get(moving_mean_initializer)
A:keras.src.layers.normalization.batch_normalization.self.moving_variance_initializer->keras.src.initializers.get(moving_variance_initializer)
A:keras.src.layers.normalization.batch_normalization.self.beta_regularizer->keras.src.regularizers.get(beta_regularizer)
A:keras.src.layers.normalization.batch_normalization.self.gamma_regularizer->keras.src.regularizers.get(gamma_regularizer)
A:keras.src.layers.normalization.batch_normalization.self.beta_constraint->keras.src.constraints.get(beta_constraint)
A:keras.src.layers.normalization.batch_normalization.self.gamma_constraint->keras.src.constraints.get(gamma_constraint)
A:keras.src.layers.normalization.batch_normalization.self.gamma->self.add_weight(shape=shape, name='gamma', initializer=self.gamma_initializer, regularizer=self.gamma_regularizer, constraint=self.gamma_constraint, trainable=True)
A:keras.src.layers.normalization.batch_normalization.self.beta->self.add_weight(shape=shape, name='beta', initializer=self.beta_initializer, regularizer=self.beta_regularizer, constraint=self.beta_constraint, trainable=True)
A:keras.src.layers.normalization.batch_normalization.self.moving_mean->self.add_weight(shape=shape, name='moving_mean', initializer=self.moving_mean_initializer, trainable=False)
A:keras.src.layers.normalization.batch_normalization.self.moving_variance->self.add_weight(shape=shape, name='moving_variance', initializer=self.moving_variance_initializer, trainable=False)
A:keras.src.layers.normalization.batch_normalization.self.input_spec->InputSpec(ndim=len(input_shape), axes={self.axis: input_shape[self.axis]})
A:keras.src.layers.normalization.batch_normalization.reduction_axes->list(range(len(input_shape)))
A:keras.src.layers.normalization.batch_normalization.input_dtype->standardize_dtype(inputs.dtype)
A:keras.src.layers.normalization.batch_normalization.inputs->keras.src.ops.cast(inputs, 'float32')
A:keras.src.layers.normalization.batch_normalization.(mean, variance)->self._moments(inputs, mask)
A:keras.src.layers.normalization.batch_normalization.moving_mean->keras.src.ops.cast(self.moving_mean, inputs.dtype)
A:keras.src.layers.normalization.batch_normalization.moving_variance->keras.src.ops.cast(self.moving_variance, inputs.dtype)
A:keras.src.layers.normalization.batch_normalization.gamma->keras.src.ops.cast(self.gamma, inputs.dtype)
A:keras.src.layers.normalization.batch_normalization.beta->keras.src.ops.cast(self.beta, inputs.dtype)
A:keras.src.layers.normalization.batch_normalization.outputs->keras.src.ops.cast(outputs, input_dtype)
A:keras.src.layers.normalization.batch_normalization.base_config->super().get_config()
A:keras.src.layers.normalization.batch_normalization.mask_weights->keras.src.ops.cast(mask, inputs.dtype)
A:keras.src.layers.normalization.batch_normalization.mask_weights_broadcasted->keras.src.ops.expand_dims(mask_weights, axis=-1)
A:keras.src.layers.normalization.batch_normalization.weighted_input_sum->keras.src.ops.sum(weighted_inputs, self._reduction_axes, keepdims=True)
A:keras.src.layers.normalization.batch_normalization.sum_of_weights->keras.src.ops.sum(mask_weights_broadcasted, self._reduction_axes, keepdims=True)
A:keras.src.layers.normalization.batch_normalization.squared_difference->keras.src.ops.square(difference)
A:keras.src.layers.normalization.batch_normalization.weighted_distsq->keras.src.ops.sum(mask_weights_broadcasted * squared_difference, self._reduction_axes, keepdims=True)
keras.src.layers.BatchNormalization(self,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',moving_mean_initializer='zeros',moving_variance_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,synchronized=False,**kwargs)
keras.src.layers.BatchNormalization._moments(self,inputs,mask)
keras.src.layers.BatchNormalization.build(self,input_shape)
keras.src.layers.BatchNormalization.call(self,inputs,training=None,mask=None)
keras.src.layers.BatchNormalization.compute_output_shape(self,input_shape)
keras.src.layers.BatchNormalization.get_config(self)
keras.src.layers.normalization.batch_normalization.BatchNormalization(self,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',moving_mean_initializer='zeros',moving_variance_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,synchronized=False,**kwargs)
keras.src.layers.normalization.batch_normalization.BatchNormalization.__init__(self,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',moving_mean_initializer='zeros',moving_variance_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,synchronized=False,**kwargs)
keras.src.layers.normalization.batch_normalization.BatchNormalization._moments(self,inputs,mask)
keras.src.layers.normalization.batch_normalization.BatchNormalization.build(self,input_shape)
keras.src.layers.normalization.batch_normalization.BatchNormalization.call(self,inputs,training=None,mask=None)
keras.src.layers.normalization.batch_normalization.BatchNormalization.compute_output_shape(self,input_shape)
keras.src.layers.normalization.batch_normalization.BatchNormalization.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/attention/attention.py----------------------------------------
A:keras.src.layers.attention.attention.self.seed_generator->keras.src.backend.random.SeedGenerator(seed=seed)
A:keras.src.layers.attention.attention.self.scale->self.add_weight(name='scale', shape=(), initializer='ones', dtype=self.dtype, trainable=True)
A:keras.src.layers.attention.attention.self.concat_score_weight->self.add_weight(name='concat_score_weight', shape=(), initializer='ones', dtype=self.dtype, trainable=True)
A:keras.src.layers.attention.attention.scores->self._calculate_scores(query=q, key=k)
A:keras.src.layers.attention.attention.q_reshaped->keras.src.ops.expand_dims(query, axis=-2)
A:keras.src.layers.attention.attention.k_reshaped->keras.src.ops.expand_dims(key, axis=-3)
A:keras.src.layers.attention.attention.padding_mask->keras.src.ops.logical_not(scores_mask)
A:keras.src.layers.attention.attention.weights->keras.src.backend.random.dropout(weights, self.dropout, seed=self.seed_generator)
A:keras.src.layers.attention.attention.score_shape->keras.src.ops.shape(scores)
A:keras.src.layers.attention.attention.ones_mask->keras.src.ops.ones(shape=mask_shape, dtype='int32')
A:keras.src.layers.attention.attention.row_index->keras.src.ops.cumsum(ones_mask, axis=-2)
A:keras.src.layers.attention.attention.col_index->keras.src.ops.cumsum(ones_mask, axis=-1)
A:keras.src.layers.attention.attention.causal_mask->keras.src.ops.greater_equal(row_index, col_index)
A:keras.src.layers.attention.attention.v_mask->keras.src.ops.expand_dims(v_mask, axis=-2)
A:keras.src.layers.attention.attention.scores_mask->self._calculate_score_mask(scores, v_mask, use_causal_mask)
A:keras.src.layers.attention.attention.(result, attention_scores)->self._apply_scores(scores=scores, value=v, scores_mask=scores_mask, training=training)
A:keras.src.layers.attention.attention.q_mask->keras.src.ops.expand_dims(q_mask, axis=-1)
A:keras.src.layers.attention.attention.base_config->super().get_config()
keras.src.layers.Attention(self,use_scale=False,score_mode='dot',dropout=0.0,seed=None,**kwargs)
keras.src.layers.Attention._apply_scores(self,scores,value,scores_mask=None,training=False)
keras.src.layers.Attention._calculate_score_mask(self,scores,v_mask,use_causal_mask)
keras.src.layers.Attention._calculate_scores(self,query,key)
keras.src.layers.Attention._validate_inputs(self,inputs,mask=None)
keras.src.layers.Attention.build(self,input_shape)
keras.src.layers.Attention.call(self,inputs,mask=None,training=False,return_attention_scores=False,use_causal_mask=False)
keras.src.layers.Attention.compute_mask(self,inputs,mask=None)
keras.src.layers.Attention.compute_output_shape(self,input_shape)
keras.src.layers.Attention.get_config(self)
keras.src.layers.attention.attention.Attention(self,use_scale=False,score_mode='dot',dropout=0.0,seed=None,**kwargs)
keras.src.layers.attention.attention.Attention.__init__(self,use_scale=False,score_mode='dot',dropout=0.0,seed=None,**kwargs)
keras.src.layers.attention.attention.Attention._apply_scores(self,scores,value,scores_mask=None,training=False)
keras.src.layers.attention.attention.Attention._calculate_score_mask(self,scores,v_mask,use_causal_mask)
keras.src.layers.attention.attention.Attention._calculate_scores(self,query,key)
keras.src.layers.attention.attention.Attention._validate_inputs(self,inputs,mask=None)
keras.src.layers.attention.attention.Attention.build(self,input_shape)
keras.src.layers.attention.attention.Attention.call(self,inputs,mask=None,training=False,return_attention_scores=False,use_causal_mask=False)
keras.src.layers.attention.attention.Attention.compute_mask(self,inputs,mask=None)
keras.src.layers.attention.attention.Attention.compute_output_shape(self,input_shape)
keras.src.layers.attention.attention.Attention.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/attention/multi_head_attention.py----------------------------------------
A:keras.src.layers.attention.multi_head_attention.self._kernel_initializer->keras.src.initializers.get(kernel_initializer)
A:keras.src.layers.attention.multi_head_attention.self._bias_initializer->keras.src.initializers.get(bias_initializer)
A:keras.src.layers.attention.multi_head_attention.self._kernel_regularizer->keras.src.regularizers.get(kernel_regularizer)
A:keras.src.layers.attention.multi_head_attention.self._bias_regularizer->keras.src.regularizers.get(bias_regularizer)
A:keras.src.layers.attention.multi_head_attention.self._activity_regularizer->keras.src.regularizers.get(activity_regularizer)
A:keras.src.layers.attention.multi_head_attention.self._kernel_constraint->keras.src.constraints.get(kernel_constraint)
A:keras.src.layers.attention.multi_head_attention.self._bias_constraint->keras.src.constraints.get(bias_constraint)
A:keras.src.layers.attention.multi_head_attention.base_config->super().get_config()
A:keras.src.layers.attention.multi_head_attention.query_rank->len(query_shape)
A:keras.src.layers.attention.multi_head_attention.value_rank->len(value_shape)
A:keras.src.layers.attention.multi_head_attention.key_rank->len(key_shape)
A:keras.src.layers.attention.multi_head_attention.(einsum_equation, bias_axes, output_rank)->_build_proj_equation(query_rank - 1, bound_dims=2, output_dims=len(output_shape))
A:keras.src.layers.attention.multi_head_attention.self._query_dense->EinsumDense(einsum_equation, output_shape=_get_output_shape(output_rank - 1, [self._num_heads, self._key_dim]), bias_axes=bias_axes if self._use_bias else None, name='query', **self._get_common_kwargs_for_sublayer())
A:keras.src.layers.attention.multi_head_attention.self._key_dense->EinsumDense(einsum_equation, output_shape=_get_output_shape(output_rank - 1, [self._num_heads, self._key_dim]), bias_axes=bias_axes if self._use_bias else None, name='key', **self._get_common_kwargs_for_sublayer())
A:keras.src.layers.attention.multi_head_attention.self._value_dense->EinsumDense(einsum_equation, output_shape=_get_output_shape(output_rank - 1, [self._num_heads, self._value_dim]), bias_axes=bias_axes if self._use_bias else None, name='value', **self._get_common_kwargs_for_sublayer())
A:keras.src.layers.attention.multi_head_attention.self._output_dense->self._make_output_dense(query_shape, self._get_common_kwargs_for_sublayer(), 'attention_output')
A:keras.src.layers.attention.multi_head_attention.output_dense_input_shape->list(self._query_dense.compute_output_shape(query_shape))
A:keras.src.layers.attention.multi_head_attention.common_kwargs->dict(kernel_regularizer=self._kernel_regularizer, bias_regularizer=self._bias_regularizer, activity_regularizer=self._activity_regularizer, kernel_constraint=self._kernel_constraint, bias_constraint=self._bias_constraint, dtype=self.dtype_policy)
A:keras.src.layers.attention.multi_head_attention.kernel_initializer->self._kernel_initializer.__class__.from_config(self._kernel_initializer.get_config())
A:keras.src.layers.attention.multi_head_attention.bias_initializer->self._bias_initializer.__class__.from_config(self._bias_initializer.get_config())
A:keras.src.layers.attention.multi_head_attention.self._attention_axes->tuple(self._attention_axes)
A:keras.src.layers.attention.multi_head_attention.(self._dot_product_equation, self._combine_equation, attn_scores_rank)->_build_attention_equation(rank, attn_axes=self._attention_axes)
A:keras.src.layers.attention.multi_head_attention.norm_axes->tuple(range(attn_scores_rank - len(self._attention_axes), attn_scores_rank))
A:keras.src.layers.attention.multi_head_attention.self._softmax->Softmax(axis=norm_axes, dtype=self.dtype_policy)
A:keras.src.layers.attention.multi_head_attention.self._dropout_layer->Dropout(rate=self._dropout, dtype=self.dtype_policy)
A:keras.src.layers.attention.multi_head_attention.attention_mask->self._compute_attention_mask(query, value, query_mask=query_mask, value_mask=value_mask, key_mask=key_mask, attention_mask=attention_mask, use_causal_mask=use_causal_mask)
A:keras.src.layers.attention.multi_head_attention.query->self._query_dense(query)
A:keras.src.layers.attention.multi_head_attention.attention_scores->self._masked_softmax(attention_scores, attention_mask)
A:keras.src.layers.attention.multi_head_attention.final_attn_scores->self._dropout_layer(attention_scores, training=training)
A:keras.src.layers.attention.multi_head_attention.attention_output->self._output_dense(attention_output)
A:keras.src.layers.attention.multi_head_attention.key->self._key_dense(key)
A:keras.src.layers.attention.multi_head_attention.value->self._value_dense(value)
A:keras.src.layers.attention.multi_head_attention.(attention_output, attention_scores)->self._compute_attention(query, key, value, attention_mask, training)
A:keras.src.layers.attention.multi_head_attention.query_mask->keras.src.ops.cast(query_mask, 'bool')
A:keras.src.layers.attention.multi_head_attention.auto_mask->keras.src.ops.expand_dims(query_mask, -1)
A:keras.src.layers.attention.multi_head_attention.value_mask->keras.src.ops.cast(value_mask, 'bool')
A:keras.src.layers.attention.multi_head_attention.mask->self._compute_causal_mask(query, value)
A:keras.src.layers.attention.multi_head_attention.key_mask->keras.src.ops.cast(key_mask, 'bool')
A:keras.src.layers.attention.multi_head_attention.ones_mask->keras.src.ops.ones((1, q_seq_length, v_seq_length), dtype='int32')
A:keras.src.layers.attention.multi_head_attention.row_index->keras.src.ops.cumsum(ones_mask, axis=-2)
A:keras.src.layers.attention.multi_head_attention.col_index->keras.src.ops.cumsum(ones_mask, axis=-1)
A:keras.src.layers.attention.multi_head_attention.batch_dims->tuple(np.delete(range(rank), attn_axes + (rank - 1,)))
A:keras.src.layers.attention.multi_head_attention.product_notation->''.join([target_notation[i] for i in batch_dims] + [target_notation[i] for i in attn_axes] + [source_notation[i] for i in attn_axes])
A:keras.src.layers.attention.multi_head_attention.attn_scores_rank->len(product_notation)
A:keras.src.layers.attention.multi_head_attention.char->_index_to_einsum_variable(i + letter_offset)
keras.src.layers.MultiHeadAttention(self,num_heads,key_dim,value_dim=None,dropout=0.0,use_bias=True,output_shape=None,attention_axes=None,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.MultiHeadAttention._build_attention(self,rank)
keras.src.layers.MultiHeadAttention._compute_attention(self,query,key,value,attention_mask=None,training=None)
keras.src.layers.MultiHeadAttention._compute_attention_mask(self,query,value,query_mask=None,value_mask=None,key_mask=None,attention_mask=None,use_causal_mask=False)
keras.src.layers.MultiHeadAttention._compute_causal_mask(self,query,value=None)
keras.src.layers.MultiHeadAttention._get_common_kwargs_for_sublayer(self)
keras.src.layers.MultiHeadAttention._make_output_dense(self,query_shape,common_kwargs,name=None)
keras.src.layers.MultiHeadAttention._masked_softmax(self,attention_scores,attention_mask=None)
keras.src.layers.MultiHeadAttention.attention_axes(self)
keras.src.layers.MultiHeadAttention.build(self,query_shape,value_shape,key_shape=None)
keras.src.layers.MultiHeadAttention.call(self,query,value,key=None,query_mask=None,value_mask=None,key_mask=None,attention_mask=None,return_attention_scores=False,training=None,use_causal_mask=False)
keras.src.layers.MultiHeadAttention.compute_output_shape(self,query_shape,value_shape,key_shape=None)
keras.src.layers.MultiHeadAttention.dropout(self)
keras.src.layers.MultiHeadAttention.get_config(self)
keras.src.layers.MultiHeadAttention.key_dense(self)
keras.src.layers.MultiHeadAttention.key_dim(self)
keras.src.layers.MultiHeadAttention.num_heads(self)
keras.src.layers.MultiHeadAttention.output_dense(self)
keras.src.layers.MultiHeadAttention.output_shape(self)
keras.src.layers.MultiHeadAttention.query_dense(self)
keras.src.layers.MultiHeadAttention.use_bias(self)
keras.src.layers.MultiHeadAttention.value_dense(self)
keras.src.layers.MultiHeadAttention.value_dim(self)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention(self,num_heads,key_dim,value_dim=None,dropout=0.0,use_bias=True,output_shape=None,attention_axes=None,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention.__init__(self,num_heads,key_dim,value_dim=None,dropout=0.0,use_bias=True,output_shape=None,attention_axes=None,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention._build_attention(self,rank)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention._compute_attention(self,query,key,value,attention_mask=None,training=None)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention._compute_attention_mask(self,query,value,query_mask=None,value_mask=None,key_mask=None,attention_mask=None,use_causal_mask=False)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention._compute_causal_mask(self,query,value=None)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention._get_common_kwargs_for_sublayer(self)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention._make_output_dense(self,query_shape,common_kwargs,name=None)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention._masked_softmax(self,attention_scores,attention_mask=None)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention.attention_axes(self)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention.build(self,query_shape,value_shape,key_shape=None)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention.call(self,query,value,key=None,query_mask=None,value_mask=None,key_mask=None,attention_mask=None,return_attention_scores=False,training=None,use_causal_mask=False)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention.compute_output_shape(self,query_shape,value_shape,key_shape=None)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention.dropout(self)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention.get_config(self)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention.key_dense(self)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention.key_dim(self)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention.num_heads(self)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention.output_dense(self)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention.output_shape(self)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention.query_dense(self)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention.use_bias(self)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention.value_dense(self)
keras.src.layers.attention.multi_head_attention.MultiHeadAttention.value_dim(self)
keras.src.layers.attention.multi_head_attention._build_attention_equation(rank,attn_axes)
keras.src.layers.attention.multi_head_attention._build_proj_equation(free_dims,bound_dims,output_dims)
keras.src.layers.attention.multi_head_attention._get_output_shape(output_rank,known_last_dims)
keras.src.layers.attention.multi_head_attention._index_to_einsum_variable(i)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/attention/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/attention/additive_attention.py----------------------------------------
A:keras.src.layers.attention.additive_attention.self.scale->self.add_weight(name='scale', shape=[dim], initializer='glorot_uniform', dtype=self.dtype, trainable=True)
A:keras.src.layers.attention.additive_attention.q_reshaped->keras.src.ops.expand_dims(query, axis=-2)
A:keras.src.layers.attention.additive_attention.k_reshaped->keras.src.ops.expand_dims(key, axis=-3)
A:keras.src.layers.attention.additive_attention.base_config->super().get_config()
keras.src.layers.AdditiveAttention(self,use_scale=True,dropout=0.0,**kwargs)
keras.src.layers.AdditiveAttention._calculate_scores(self,query,key)
keras.src.layers.AdditiveAttention.build(self,input_shape)
keras.src.layers.AdditiveAttention.get_config(self)
keras.src.layers.attention.additive_attention.AdditiveAttention(self,use_scale=True,dropout=0.0,**kwargs)
keras.src.layers.attention.additive_attention.AdditiveAttention.__init__(self,use_scale=True,dropout=0.0,**kwargs)
keras.src.layers.attention.additive_attention.AdditiveAttention._calculate_scores(self,query,key)
keras.src.layers.attention.additive_attention.AdditiveAttention.build(self,input_shape)
keras.src.layers.attention.additive_attention.AdditiveAttention.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/attention/grouped_query_attention.py----------------------------------------
A:keras.src.layers.attention.grouped_query_attention.self.kernel_initializer->keras.src.initializers.get(kernel_initializer)
A:keras.src.layers.attention.grouped_query_attention.self.bias_initializer->keras.src.initializers.get(bias_initializer)
A:keras.src.layers.attention.grouped_query_attention.self.kernel_regularizer->keras.src.regularizers.get(kernel_regularizer)
A:keras.src.layers.attention.grouped_query_attention.self.bias_regularizer->keras.src.regularizers.get(bias_regularizer)
A:keras.src.layers.attention.grouped_query_attention.self.activity_regularizer->keras.src.regularizers.get(activity_regularizer)
A:keras.src.layers.attention.grouped_query_attention.self.kernel_constraint->keras.src.constraints.get(kernel_constraint)
A:keras.src.layers.attention.grouped_query_attention.self.bias_constraint->keras.src.constraints.get(bias_constraint)
A:keras.src.layers.attention.grouped_query_attention.self._query_dense->EinsumDense('bqm,muh->bquh', output_shape=(None, self.num_query_heads, self.head_dim), bias_axes='uh' if self.use_bias else None, name='query', **self._get_common_kwargs_for_sublayer())
A:keras.src.layers.attention.grouped_query_attention.self._key_dense->EinsumDense('bkm,mvh->bkvh', output_shape=(None, self.num_key_value_heads, self.head_dim), bias_axes='vh' if self.use_bias else None, name='key', **self._get_common_kwargs_for_sublayer())
A:keras.src.layers.attention.grouped_query_attention.self._value_dense->EinsumDense('bkm,mvh->bkvh', output_shape=(None, self.num_key_value_heads, self.head_dim), bias_axes='vh' if self.use_bias else None, name='value', **self._get_common_kwargs_for_sublayer())
A:keras.src.layers.attention.grouped_query_attention.self._softmax->Softmax(axis=-1, dtype=self.dtype_policy)
A:keras.src.layers.attention.grouped_query_attention.self._dropout_layer->Dropout(rate=self.dropout, dtype=self.dtype_policy)
A:keras.src.layers.attention.grouped_query_attention.self._output_dense->EinsumDense('bquh,uhm->bqm', output_shape=(None, self.feature_dim), bias_axes='m' if self.use_bias else None, name='attention_output', **self._get_common_kwargs_for_sublayer())
A:keras.src.layers.attention.grouped_query_attention.common_kwargs->dict(kernel_regularizer=self.kernel_regularizer, bias_regularizer=self.bias_regularizer, activity_regularizer=self.activity_regularizer, kernel_constraint=self.kernel_constraint, bias_constraint=self.bias_constraint, dtype=self.dtype_policy)
A:keras.src.layers.attention.grouped_query_attention.kernel_initializer->self.kernel_initializer.__class__.from_config(self.kernel_initializer.get_config())
A:keras.src.layers.attention.grouped_query_attention.bias_initializer->self.bias_initializer.__class__.from_config(self.bias_initializer.get_config())
A:keras.src.layers.attention.grouped_query_attention.attention_mask->keras.src.ops.expand_dims(attention_mask, axis=mask_expansion_axis)
A:keras.src.layers.attention.grouped_query_attention.query->keras.src.ops.multiply(query, 1.0 / ops.sqrt(ops.cast(self.head_dim, query.dtype)))
A:keras.src.layers.attention.grouped_query_attention.key->keras.src.ops.repeat(key, self.num_repeats, axis=2)
A:keras.src.layers.attention.grouped_query_attention.value->keras.src.ops.repeat(value, self.num_repeats, axis=2)
A:keras.src.layers.attention.grouped_query_attention.(output, scores)->self._compute_attention(query, key, value, attention_mask=attention_mask, training=training)
A:keras.src.layers.attention.grouped_query_attention.output->keras.src.ops.einsum(self._combine_equation, scores_dropout, value)
A:keras.src.layers.attention.grouped_query_attention.query_mask->keras.src.ops.cast(query_mask, 'bool')
A:keras.src.layers.attention.grouped_query_attention.auto_mask->keras.src.ops.expand_dims(query_mask, -1)
A:keras.src.layers.attention.grouped_query_attention.value_mask->keras.src.ops.cast(value_mask, 'bool')
A:keras.src.layers.attention.grouped_query_attention.mask->self._compute_causal_mask(query, value)
A:keras.src.layers.attention.grouped_query_attention.key_mask->keras.src.ops.cast(key_mask, 'bool')
A:keras.src.layers.attention.grouped_query_attention.ones_mask->keras.src.ops.ones((1, q_seq_length, v_seq_length), dtype='int32')
A:keras.src.layers.attention.grouped_query_attention.row_index->keras.src.ops.cumsum(ones_mask, axis=-2)
A:keras.src.layers.attention.grouped_query_attention.col_index->keras.src.ops.cumsum(ones_mask, axis=-1)
A:keras.src.layers.attention.grouped_query_attention.scores->self._masked_softmax(scores, attention_mask=attention_mask)
A:keras.src.layers.attention.grouped_query_attention.scores_dropout->self._dropout_layer(scores, training=training)
A:keras.src.layers.attention.grouped_query_attention.base_config->super().get_config()
keras.src.layers.GroupedQueryAttention(self,head_dim,num_query_heads,num_key_value_heads,dropout=0.0,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.GroupedQueryAttention._compute_attention(self,query,key,value,attention_mask=None,training=None)
keras.src.layers.GroupedQueryAttention._compute_attention_mask(self,query,value,query_mask=None,value_mask=None,key_mask=None,attention_mask=None,use_causal_mask=False)
keras.src.layers.GroupedQueryAttention._compute_causal_mask(self,query,value=None)
keras.src.layers.GroupedQueryAttention._get_common_kwargs_for_sublayer(self)
keras.src.layers.GroupedQueryAttention._masked_softmax(self,scores,attention_mask=None)
keras.src.layers.GroupedQueryAttention.build(self,query_shape,value_shape,key_shape=None)
keras.src.layers.GroupedQueryAttention.call(self,query,value,key=None,query_mask=None,value_mask=None,key_mask=None,attention_mask=None,return_attention_scores=False,training=None,use_causal_mask=False)
keras.src.layers.GroupedQueryAttention.compute_output_shape(self,query_shape,value_shape,key_shape=None)
keras.src.layers.GroupedQueryAttention.get_config(self)
keras.src.layers.attention.grouped_query_attention.GroupedQueryAttention(self,head_dim,num_query_heads,num_key_value_heads,dropout=0.0,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.attention.grouped_query_attention.GroupedQueryAttention.__init__(self,head_dim,num_query_heads,num_key_value_heads,dropout=0.0,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.src.layers.attention.grouped_query_attention.GroupedQueryAttention._compute_attention(self,query,key,value,attention_mask=None,training=None)
keras.src.layers.attention.grouped_query_attention.GroupedQueryAttention._compute_attention_mask(self,query,value,query_mask=None,value_mask=None,key_mask=None,attention_mask=None,use_causal_mask=False)
keras.src.layers.attention.grouped_query_attention.GroupedQueryAttention._compute_causal_mask(self,query,value=None)
keras.src.layers.attention.grouped_query_attention.GroupedQueryAttention._get_common_kwargs_for_sublayer(self)
keras.src.layers.attention.grouped_query_attention.GroupedQueryAttention._masked_softmax(self,scores,attention_mask=None)
keras.src.layers.attention.grouped_query_attention.GroupedQueryAttention.build(self,query_shape,value_shape,key_shape=None)
keras.src.layers.attention.grouped_query_attention.GroupedQueryAttention.call(self,query,value,key=None,query_mask=None,value_mask=None,key_mask=None,attention_mask=None,return_attention_scores=False,training=None,use_causal_mask=False)
keras.src.layers.attention.grouped_query_attention.GroupedQueryAttention.compute_output_shape(self,query_shape,value_shape,key_shape=None)
keras.src.layers.attention.grouped_query_attention.GroupedQueryAttention.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/reshaping/up_sampling2d.py----------------------------------------
A:keras.src.layers.reshaping.up_sampling2d.self.data_format->keras.src.backend.standardize_data_format(data_format)
A:keras.src.layers.reshaping.up_sampling2d.self.size->keras.src.utils.argument_validation.standardize_tuple(size, 2, 'size')
A:keras.src.layers.reshaping.up_sampling2d.self.interpolation->interpolation.lower()
A:keras.src.layers.reshaping.up_sampling2d.self.input_spec->InputSpec(ndim=4)
A:keras.src.layers.reshaping.up_sampling2d.base_config->super().get_config()
A:keras.src.layers.reshaping.up_sampling2d.x->keras.src.ops.transpose(x, [0, 3, 1, 2])
keras.src.layers.UpSampling2D(self,size=(2,2),data_format=None,interpolation='nearest',**kwargs)
keras.src.layers.UpSampling2D._resize_images(self,x,height_factor,width_factor,data_format,interpolation='nearest')
keras.src.layers.UpSampling2D.call(self,inputs)
keras.src.layers.UpSampling2D.compute_output_shape(self,input_shape)
keras.src.layers.UpSampling2D.get_config(self)
keras.src.layers.reshaping.up_sampling2d.UpSampling2D(self,size=(2,2),data_format=None,interpolation='nearest',**kwargs)
keras.src.layers.reshaping.up_sampling2d.UpSampling2D.__init__(self,size=(2,2),data_format=None,interpolation='nearest',**kwargs)
keras.src.layers.reshaping.up_sampling2d.UpSampling2D._resize_images(self,x,height_factor,width_factor,data_format,interpolation='nearest')
keras.src.layers.reshaping.up_sampling2d.UpSampling2D.call(self,inputs)
keras.src.layers.reshaping.up_sampling2d.UpSampling2D.compute_output_shape(self,input_shape)
keras.src.layers.reshaping.up_sampling2d.UpSampling2D.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/reshaping/flatten.py----------------------------------------
A:keras.src.layers.reshaping.flatten.self.data_format->keras.src.backend.standardize_data_format(data_format)
A:keras.src.layers.reshaping.flatten.self.input_spec->InputSpec(min_ndim=1)
A:keras.src.layers.reshaping.flatten.rank->len(input_shape)
A:keras.src.layers.reshaping.flatten.inputs->keras.src.ops.transpose(inputs, axes=(0, *range(2, rank), 1))
A:keras.src.layers.reshaping.flatten.output_shape->self.compute_output_shape(inputs.shape)
A:keras.src.layers.reshaping.flatten.flattened_dim->math.prod(non_batch_dims)
A:keras.src.layers.reshaping.flatten.base_config->super().get_config()
keras.src.layers.Flatten(self,data_format=None,**kwargs)
keras.src.layers.Flatten.call(self,inputs)
keras.src.layers.Flatten.compute_output_shape(self,input_shape)
keras.src.layers.Flatten.compute_output_spec(self,inputs)
keras.src.layers.Flatten.get_config(self)
keras.src.layers.reshaping.flatten.Flatten(self,data_format=None,**kwargs)
keras.src.layers.reshaping.flatten.Flatten.__init__(self,data_format=None,**kwargs)
keras.src.layers.reshaping.flatten.Flatten.call(self,inputs)
keras.src.layers.reshaping.flatten.Flatten.compute_output_shape(self,input_shape)
keras.src.layers.reshaping.flatten.Flatten.compute_output_spec(self,inputs)
keras.src.layers.reshaping.flatten.Flatten.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/reshaping/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/reshaping/cropping2d.py----------------------------------------
A:keras.src.layers.reshaping.cropping2d.self.data_format->keras.src.backend.standardize_data_format(data_format)
A:keras.src.layers.reshaping.cropping2d.height_cropping->keras.src.utils.argument_validation.standardize_tuple(cropping[0], 2, '1st entry of cropping', allow_zero=True)
A:keras.src.layers.reshaping.cropping2d.width_cropping->keras.src.utils.argument_validation.standardize_tuple(cropping[1], 2, '2nd entry of cropping', allow_zero=True)
A:keras.src.layers.reshaping.cropping2d.self.input_spec->InputSpec(ndim=4)
A:keras.src.layers.reshaping.cropping2d.base_config->super().get_config()
keras.src.layers.Cropping2D(self,cropping=((0,0),(0,0)),data_format=None,**kwargs)
keras.src.layers.Cropping2D.call(self,inputs)
keras.src.layers.Cropping2D.compute_output_shape(self,input_shape)
keras.src.layers.Cropping2D.get_config(self)
keras.src.layers.reshaping.cropping2d.Cropping2D(self,cropping=((0,0),(0,0)),data_format=None,**kwargs)
keras.src.layers.reshaping.cropping2d.Cropping2D.__init__(self,cropping=((0,0),(0,0)),data_format=None,**kwargs)
keras.src.layers.reshaping.cropping2d.Cropping2D.call(self,inputs)
keras.src.layers.reshaping.cropping2d.Cropping2D.compute_output_shape(self,input_shape)
keras.src.layers.reshaping.cropping2d.Cropping2D.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/reshaping/cropping3d.py----------------------------------------
A:keras.src.layers.reshaping.cropping3d.self.data_format->keras.src.backend.standardize_data_format(data_format)
A:keras.src.layers.reshaping.cropping3d.dim1_cropping->keras.src.utils.argument_validation.standardize_tuple(cropping[0], 2, '1st entry of cropping', allow_zero=True)
A:keras.src.layers.reshaping.cropping3d.dim2_cropping->keras.src.utils.argument_validation.standardize_tuple(cropping[1], 2, '2nd entry of cropping', allow_zero=True)
A:keras.src.layers.reshaping.cropping3d.dim3_cropping->keras.src.utils.argument_validation.standardize_tuple(cropping[2], 2, '3rd entry of cropping', allow_zero=True)
A:keras.src.layers.reshaping.cropping3d.self.input_spec->InputSpec(ndim=5)
A:keras.src.layers.reshaping.cropping3d.spatial_dims->list(inputs.shape[1:4])
A:keras.src.layers.reshaping.cropping3d.base_config->super().get_config()
keras.src.layers.Cropping3D(self,cropping=((1,1),(1,1),(1,1)),data_format=None,**kwargs)
keras.src.layers.Cropping3D.call(self,inputs)
keras.src.layers.Cropping3D.compute_output_shape(self,input_shape)
keras.src.layers.Cropping3D.get_config(self)
keras.src.layers.reshaping.cropping3d.Cropping3D(self,cropping=((1,1),(1,1),(1,1)),data_format=None,**kwargs)
keras.src.layers.reshaping.cropping3d.Cropping3D.__init__(self,cropping=((1,1),(1,1),(1,1)),data_format=None,**kwargs)
keras.src.layers.reshaping.cropping3d.Cropping3D.call(self,inputs)
keras.src.layers.reshaping.cropping3d.Cropping3D.compute_output_shape(self,input_shape)
keras.src.layers.reshaping.cropping3d.Cropping3D.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/reshaping/cropping1d.py----------------------------------------
A:keras.src.layers.reshaping.cropping1d.self.cropping->keras.src.utils.argument_validation.standardize_tuple(cropping, 2, 'cropping', allow_zero=True)
A:keras.src.layers.reshaping.cropping1d.self.input_spec->InputSpec(ndim=3)
A:keras.src.layers.reshaping.cropping1d.base_config->super().get_config()
keras.src.layers.Cropping1D(self,cropping=(1,1),**kwargs)
keras.src.layers.Cropping1D.call(self,inputs)
keras.src.layers.Cropping1D.compute_output_shape(self,input_shape)
keras.src.layers.Cropping1D.get_config(self)
keras.src.layers.reshaping.cropping1d.Cropping1D(self,cropping=(1,1),**kwargs)
keras.src.layers.reshaping.cropping1d.Cropping1D.__init__(self,cropping=(1,1),**kwargs)
keras.src.layers.reshaping.cropping1d.Cropping1D.call(self,inputs)
keras.src.layers.reshaping.cropping1d.Cropping1D.compute_output_shape(self,input_shape)
keras.src.layers.reshaping.cropping1d.Cropping1D.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/reshaping/reshape.py----------------------------------------
A:keras.src.layers.reshaping.reshape.self.target_shape->tuple(target_shape)
A:keras.src.layers.reshaping.reshape.output_shape->self.compute_output_shape(inputs.shape)
A:keras.src.layers.reshaping.reshape.sample_output_shape->keras.src.ops.operation_utils.compute_reshape_output_shape(input_shape[1:], self.target_shape, 'target_shape')
A:keras.src.layers.reshaping.reshape.self._resolved_target_shape->tuple((-1 if d is None else d for d in sample_output_shape))
A:keras.src.layers.reshaping.reshape.base_config->super().get_config()
keras.src.layers.Reshape(self,target_shape,**kwargs)
keras.src.layers.Reshape.build(self,input_shape)
keras.src.layers.Reshape.call(self,inputs)
keras.src.layers.Reshape.compute_output_shape(self,input_shape)
keras.src.layers.Reshape.compute_output_spec(self,inputs)
keras.src.layers.Reshape.get_config(self)
keras.src.layers.reshaping.reshape.Reshape(self,target_shape,**kwargs)
keras.src.layers.reshaping.reshape.Reshape.__init__(self,target_shape,**kwargs)
keras.src.layers.reshaping.reshape.Reshape.build(self,input_shape)
keras.src.layers.reshaping.reshape.Reshape.call(self,inputs)
keras.src.layers.reshaping.reshape.Reshape.compute_output_shape(self,input_shape)
keras.src.layers.reshaping.reshape.Reshape.compute_output_spec(self,inputs)
keras.src.layers.reshaping.reshape.Reshape.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/reshaping/up_sampling1d.py----------------------------------------
A:keras.src.layers.reshaping.up_sampling1d.self.size->int(size)
A:keras.src.layers.reshaping.up_sampling1d.self.input_spec->InputSpec(ndim=3)
A:keras.src.layers.reshaping.up_sampling1d.base_config->super().get_config()
keras.src.layers.UpSampling1D(self,size=2,**kwargs)
keras.src.layers.UpSampling1D.call(self,inputs)
keras.src.layers.UpSampling1D.compute_output_shape(self,input_shape)
keras.src.layers.UpSampling1D.get_config(self)
keras.src.layers.reshaping.up_sampling1d.UpSampling1D(self,size=2,**kwargs)
keras.src.layers.reshaping.up_sampling1d.UpSampling1D.__init__(self,size=2,**kwargs)
keras.src.layers.reshaping.up_sampling1d.UpSampling1D.call(self,inputs)
keras.src.layers.reshaping.up_sampling1d.UpSampling1D.compute_output_shape(self,input_shape)
keras.src.layers.reshaping.up_sampling1d.UpSampling1D.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/reshaping/up_sampling3d.py----------------------------------------
A:keras.src.layers.reshaping.up_sampling3d.self.data_format->keras.src.backend.standardize_data_format(data_format)
A:keras.src.layers.reshaping.up_sampling3d.self.size->keras.src.utils.argument_validation.standardize_tuple(size, 3, 'size')
A:keras.src.layers.reshaping.up_sampling3d.self.input_spec->InputSpec(ndim=5)
A:keras.src.layers.reshaping.up_sampling3d.base_config->super().get_config()
A:keras.src.layers.reshaping.up_sampling3d.output->keras.src.ops.repeat(output, width_factor, axis=3)
keras.src.layers.UpSampling3D(self,size=(2,2,2),data_format=None,**kwargs)
keras.src.layers.UpSampling3D._resize_volumes(self,x,depth_factor,height_factor,width_factor,data_format)
keras.src.layers.UpSampling3D.call(self,inputs)
keras.src.layers.UpSampling3D.compute_output_shape(self,input_shape)
keras.src.layers.UpSampling3D.get_config(self)
keras.src.layers.reshaping.up_sampling3d.UpSampling3D(self,size=(2,2,2),data_format=None,**kwargs)
keras.src.layers.reshaping.up_sampling3d.UpSampling3D.__init__(self,size=(2,2,2),data_format=None,**kwargs)
keras.src.layers.reshaping.up_sampling3d.UpSampling3D._resize_volumes(self,x,depth_factor,height_factor,width_factor,data_format)
keras.src.layers.reshaping.up_sampling3d.UpSampling3D.call(self,inputs)
keras.src.layers.reshaping.up_sampling3d.UpSampling3D.compute_output_shape(self,input_shape)
keras.src.layers.reshaping.up_sampling3d.UpSampling3D.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/reshaping/repeat_vector.py----------------------------------------
A:keras.src.layers.reshaping.repeat_vector.self.input_spec->InputSpec(ndim=2)
A:keras.src.layers.reshaping.repeat_vector.input_shape->keras.src.ops.shape(inputs)
A:keras.src.layers.reshaping.repeat_vector.reshaped->keras.src.ops.reshape(inputs, (input_shape[0], 1, input_shape[1]))
A:keras.src.layers.reshaping.repeat_vector.base_config->super().get_config()
keras.src.layers.RepeatVector(self,n,**kwargs)
keras.src.layers.RepeatVector.call(self,inputs)
keras.src.layers.RepeatVector.compute_output_shape(self,input_shape)
keras.src.layers.RepeatVector.get_config(self)
keras.src.layers.reshaping.repeat_vector.RepeatVector(self,n,**kwargs)
keras.src.layers.reshaping.repeat_vector.RepeatVector.__init__(self,n,**kwargs)
keras.src.layers.reshaping.repeat_vector.RepeatVector.call(self,inputs)
keras.src.layers.reshaping.repeat_vector.RepeatVector.compute_output_shape(self,input_shape)
keras.src.layers.reshaping.repeat_vector.RepeatVector.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/reshaping/zero_padding2d.py----------------------------------------
A:keras.src.layers.reshaping.zero_padding2d.self.data_format->keras.src.backend.standardize_data_format(data_format)
A:keras.src.layers.reshaping.zero_padding2d.height_padding->keras.src.utils.argument_validation.standardize_tuple(padding[0], 2, '1st entry of padding', allow_zero=True)
A:keras.src.layers.reshaping.zero_padding2d.width_padding->keras.src.utils.argument_validation.standardize_tuple(padding[1], 2, '2nd entry of padding', allow_zero=True)
A:keras.src.layers.reshaping.zero_padding2d.self.input_spec->InputSpec(ndim=4)
A:keras.src.layers.reshaping.zero_padding2d.output_shape->list(input_shape)
A:keras.src.layers.reshaping.zero_padding2d.base_config->super().get_config()
keras.src.layers.ZeroPadding2D(self,padding=(1,1),data_format=None,**kwargs)
keras.src.layers.ZeroPadding2D.call(self,inputs)
keras.src.layers.ZeroPadding2D.compute_output_shape(self,input_shape)
keras.src.layers.ZeroPadding2D.get_config(self)
keras.src.layers.reshaping.zero_padding2d.ZeroPadding2D(self,padding=(1,1),data_format=None,**kwargs)
keras.src.layers.reshaping.zero_padding2d.ZeroPadding2D.__init__(self,padding=(1,1),data_format=None,**kwargs)
keras.src.layers.reshaping.zero_padding2d.ZeroPadding2D.call(self,inputs)
keras.src.layers.reshaping.zero_padding2d.ZeroPadding2D.compute_output_shape(self,input_shape)
keras.src.layers.reshaping.zero_padding2d.ZeroPadding2D.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/reshaping/permute.py----------------------------------------
A:keras.src.layers.reshaping.permute.self.dims->tuple(dims)
A:keras.src.layers.reshaping.permute.self.input_spec->InputSpec(ndim=len(self.dims) + 1)
A:keras.src.layers.reshaping.permute.output_shape->self.compute_output_shape(inputs.shape)
A:keras.src.layers.reshaping.permute.base_config->super().get_config()
keras.src.layers.Permute(self,dims,**kwargs)
keras.src.layers.Permute.call(self,inputs)
keras.src.layers.Permute.compute_output_shape(self,input_shape)
keras.src.layers.Permute.compute_output_spec(self,inputs)
keras.src.layers.Permute.get_config(self)
keras.src.layers.reshaping.permute.Permute(self,dims,**kwargs)
keras.src.layers.reshaping.permute.Permute.__init__(self,dims,**kwargs)
keras.src.layers.reshaping.permute.Permute.call(self,inputs)
keras.src.layers.reshaping.permute.Permute.compute_output_shape(self,input_shape)
keras.src.layers.reshaping.permute.Permute.compute_output_spec(self,inputs)
keras.src.layers.reshaping.permute.Permute.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/reshaping/zero_padding3d.py----------------------------------------
A:keras.src.layers.reshaping.zero_padding3d.self.data_format->keras.src.backend.standardize_data_format(data_format)
A:keras.src.layers.reshaping.zero_padding3d.dim1_padding->keras.src.utils.argument_validation.standardize_tuple(padding[0], 2, '1st entry of padding', allow_zero=True)
A:keras.src.layers.reshaping.zero_padding3d.dim2_padding->keras.src.utils.argument_validation.standardize_tuple(padding[1], 2, '2nd entry of padding', allow_zero=True)
A:keras.src.layers.reshaping.zero_padding3d.dim3_padding->keras.src.utils.argument_validation.standardize_tuple(padding[2], 2, '3rd entry of padding', allow_zero=True)
A:keras.src.layers.reshaping.zero_padding3d.self.input_spec->InputSpec(ndim=5)
A:keras.src.layers.reshaping.zero_padding3d.output_shape->list(input_shape)
A:keras.src.layers.reshaping.zero_padding3d.base_config->super().get_config()
keras.src.layers.ZeroPadding3D(self,padding=((1,1),(1,1),(1,1)),data_format=None,**kwargs)
keras.src.layers.ZeroPadding3D.call(self,inputs)
keras.src.layers.ZeroPadding3D.compute_output_shape(self,input_shape)
keras.src.layers.ZeroPadding3D.get_config(self)
keras.src.layers.reshaping.zero_padding3d.ZeroPadding3D(self,padding=((1,1),(1,1),(1,1)),data_format=None,**kwargs)
keras.src.layers.reshaping.zero_padding3d.ZeroPadding3D.__init__(self,padding=((1,1),(1,1),(1,1)),data_format=None,**kwargs)
keras.src.layers.reshaping.zero_padding3d.ZeroPadding3D.call(self,inputs)
keras.src.layers.reshaping.zero_padding3d.ZeroPadding3D.compute_output_shape(self,input_shape)
keras.src.layers.reshaping.zero_padding3d.ZeroPadding3D.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/reshaping/zero_padding1d.py----------------------------------------
A:keras.src.layers.reshaping.zero_padding1d.self.padding->keras.src.utils.argument_validation.standardize_tuple(padding, 2, 'padding', allow_zero=True)
A:keras.src.layers.reshaping.zero_padding1d.self.input_spec->InputSpec(ndim=3)
A:keras.src.layers.reshaping.zero_padding1d.output_shape->list(input_shape)
A:keras.src.layers.reshaping.zero_padding1d.base_config->super().get_config()
keras.src.layers.ZeroPadding1D(self,padding=1,**kwargs)
keras.src.layers.ZeroPadding1D.call(self,inputs)
keras.src.layers.ZeroPadding1D.compute_output_shape(self,input_shape)
keras.src.layers.ZeroPadding1D.get_config(self)
keras.src.layers.reshaping.zero_padding1d.ZeroPadding1D(self,padding=1,**kwargs)
keras.src.layers.reshaping.zero_padding1d.ZeroPadding1D.__init__(self,padding=1,**kwargs)
keras.src.layers.reshaping.zero_padding1d.ZeroPadding1D.call(self,inputs)
keras.src.layers.reshaping.zero_padding1d.ZeroPadding1D.compute_output_shape(self,input_shape)
keras.src.layers.reshaping.zero_padding1d.ZeroPadding1D.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/pooling/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/pooling/base_global_pooling.py----------------------------------------
A:keras.src.layers.pooling.base_global_pooling.self.data_format->keras.src.backend.standardize_data_format(data_format)
A:keras.src.layers.pooling.base_global_pooling.self.input_spec->InputSpec(ndim=pool_dimensions + 2)
A:keras.src.layers.pooling.base_global_pooling.config->super().get_config()
keras.src.layers.pooling.base_global_pooling.BaseGlobalPooling(self,pool_dimensions,data_format=None,keepdims=False,**kwargs)
keras.src.layers.pooling.base_global_pooling.BaseGlobalPooling.__init__(self,pool_dimensions,data_format=None,keepdims=False,**kwargs)
keras.src.layers.pooling.base_global_pooling.BaseGlobalPooling.call(self,inputs)
keras.src.layers.pooling.base_global_pooling.BaseGlobalPooling.compute_output_shape(self,input_shape)
keras.src.layers.pooling.base_global_pooling.BaseGlobalPooling.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/pooling/global_max_pooling1d.py----------------------------------------
keras.src.layers.GlobalMaxPooling1D(self,data_format=None,keepdims=False,**kwargs)
keras.src.layers.GlobalMaxPooling1D.call(self,inputs)
keras.src.layers.pooling.global_max_pooling1d.GlobalMaxPooling1D(self,data_format=None,keepdims=False,**kwargs)
keras.src.layers.pooling.global_max_pooling1d.GlobalMaxPooling1D.__init__(self,data_format=None,keepdims=False,**kwargs)
keras.src.layers.pooling.global_max_pooling1d.GlobalMaxPooling1D.call(self,inputs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/pooling/max_pooling2d.py----------------------------------------
keras.src.layers.MaxPooling2D(self,pool_size=(2,2),strides=None,padding='valid',data_format=None,name=None,**kwargs)
keras.src.layers.pooling.max_pooling2d.MaxPooling2D(self,pool_size=(2,2),strides=None,padding='valid',data_format=None,name=None,**kwargs)
keras.src.layers.pooling.max_pooling2d.MaxPooling2D.__init__(self,pool_size=(2,2),strides=None,padding='valid',data_format=None,name=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/pooling/global_average_pooling1d.py----------------------------------------
A:keras.src.layers.pooling.global_average_pooling1d.mask->keras.src.ops.expand_dims(mask, 2 if self.data_format == 'channels_last' else 1)
keras.src.layers.GlobalAveragePooling1D(self,data_format=None,keepdims=False,**kwargs)
keras.src.layers.GlobalAveragePooling1D.call(self,inputs,mask=None)
keras.src.layers.GlobalAveragePooling1D.compute_mask(self,inputs,mask=None)
keras.src.layers.pooling.global_average_pooling1d.GlobalAveragePooling1D(self,data_format=None,keepdims=False,**kwargs)
keras.src.layers.pooling.global_average_pooling1d.GlobalAveragePooling1D.__init__(self,data_format=None,keepdims=False,**kwargs)
keras.src.layers.pooling.global_average_pooling1d.GlobalAveragePooling1D.call(self,inputs,mask=None)
keras.src.layers.pooling.global_average_pooling1d.GlobalAveragePooling1D.compute_mask(self,inputs,mask=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/pooling/average_pooling1d.py----------------------------------------
keras.src.layers.AveragePooling1D(self,pool_size,strides=None,padding='valid',data_format=None,name=None,**kwargs)
keras.src.layers.pooling.average_pooling1d.AveragePooling1D(self,pool_size,strides=None,padding='valid',data_format=None,name=None,**kwargs)
keras.src.layers.pooling.average_pooling1d.AveragePooling1D.__init__(self,pool_size,strides=None,padding='valid',data_format=None,name=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/pooling/average_pooling3d.py----------------------------------------
keras.src.layers.AveragePooling3D(self,pool_size,strides=None,padding='valid',data_format=None,name=None,**kwargs)
keras.src.layers.pooling.average_pooling3d.AveragePooling3D(self,pool_size,strides=None,padding='valid',data_format=None,name=None,**kwargs)
keras.src.layers.pooling.average_pooling3d.AveragePooling3D.__init__(self,pool_size,strides=None,padding='valid',data_format=None,name=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/pooling/global_max_pooling2d.py----------------------------------------
keras.src.layers.GlobalMaxPooling2D(self,data_format=None,keepdims=False,**kwargs)
keras.src.layers.GlobalMaxPooling2D.call(self,inputs)
keras.src.layers.pooling.global_max_pooling2d.GlobalMaxPooling2D(self,data_format=None,keepdims=False,**kwargs)
keras.src.layers.pooling.global_max_pooling2d.GlobalMaxPooling2D.__init__(self,data_format=None,keepdims=False,**kwargs)
keras.src.layers.pooling.global_max_pooling2d.GlobalMaxPooling2D.call(self,inputs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/pooling/average_pooling2d.py----------------------------------------
keras.src.layers.AveragePooling2D(self,pool_size,strides=None,padding='valid',data_format=None,name=None,**kwargs)
keras.src.layers.pooling.average_pooling2d.AveragePooling2D(self,pool_size,strides=None,padding='valid',data_format=None,name=None,**kwargs)
keras.src.layers.pooling.average_pooling2d.AveragePooling2D.__init__(self,pool_size,strides=None,padding='valid',data_format=None,name=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/pooling/max_pooling3d.py----------------------------------------
keras.src.layers.MaxPooling3D(self,pool_size=(2,2,2),strides=None,padding='valid',data_format=None,name=None,**kwargs)
keras.src.layers.pooling.max_pooling3d.MaxPooling3D(self,pool_size=(2,2,2),strides=None,padding='valid',data_format=None,name=None,**kwargs)
keras.src.layers.pooling.max_pooling3d.MaxPooling3D.__init__(self,pool_size=(2,2,2),strides=None,padding='valid',data_format=None,name=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/pooling/base_pooling.py----------------------------------------
A:keras.src.layers.pooling.base_pooling.self.pool_size->keras.src.utils.argument_validation.standardize_tuple(pool_size, pool_dimensions, 'pool_size')
A:keras.src.layers.pooling.base_pooling.self.strides->keras.src.utils.argument_validation.standardize_tuple(strides, pool_dimensions, 'strides', allow_zero=True)
A:keras.src.layers.pooling.base_pooling.self.data_format->keras.src.backend.standardize_data_format(data_format)
A:keras.src.layers.pooling.base_pooling.self.input_spec->InputSpec(ndim=pool_dimensions + 2)
A:keras.src.layers.pooling.base_pooling.config->super().get_config()
keras.src.layers.pooling.base_pooling.BasePooling(self,pool_size,strides,pool_dimensions,pool_mode='max',padding='valid',data_format=None,name=None,**kwargs)
keras.src.layers.pooling.base_pooling.BasePooling.__init__(self,pool_size,strides,pool_dimensions,pool_mode='max',padding='valid',data_format=None,name=None,**kwargs)
keras.src.layers.pooling.base_pooling.BasePooling.call(self,inputs)
keras.src.layers.pooling.base_pooling.BasePooling.compute_output_shape(self,input_shape)
keras.src.layers.pooling.base_pooling.BasePooling.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/pooling/global_max_pooling3d.py----------------------------------------
keras.src.layers.GlobalMaxPooling3D(self,data_format=None,keepdims=False,**kwargs)
keras.src.layers.GlobalMaxPooling3D.call(self,inputs)
keras.src.layers.pooling.global_max_pooling3d.GlobalMaxPooling3D(self,data_format=None,keepdims=False,**kwargs)
keras.src.layers.pooling.global_max_pooling3d.GlobalMaxPooling3D.__init__(self,data_format=None,keepdims=False,**kwargs)
keras.src.layers.pooling.global_max_pooling3d.GlobalMaxPooling3D.call(self,inputs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/pooling/global_average_pooling3d.py----------------------------------------
keras.src.layers.GlobalAveragePooling3D(self,data_format=None,keepdims=False,**kwargs)
keras.src.layers.GlobalAveragePooling3D.call(self,inputs)
keras.src.layers.pooling.global_average_pooling3d.GlobalAveragePooling3D(self,data_format=None,keepdims=False,**kwargs)
keras.src.layers.pooling.global_average_pooling3d.GlobalAveragePooling3D.__init__(self,data_format=None,keepdims=False,**kwargs)
keras.src.layers.pooling.global_average_pooling3d.GlobalAveragePooling3D.call(self,inputs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/pooling/max_pooling1d.py----------------------------------------
keras.src.layers.MaxPooling1D(self,pool_size=2,strides=None,padding='valid',data_format=None,name=None,**kwargs)
keras.src.layers.pooling.max_pooling1d.MaxPooling1D(self,pool_size=2,strides=None,padding='valid',data_format=None,name=None,**kwargs)
keras.src.layers.pooling.max_pooling1d.MaxPooling1D.__init__(self,pool_size=2,strides=None,padding='valid',data_format=None,name=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/src/layers/pooling/global_average_pooling2d.py----------------------------------------
keras.src.layers.GlobalAveragePooling2D(self,data_format=None,keepdims=False,**kwargs)
keras.src.layers.GlobalAveragePooling2D.call(self,inputs)
keras.src.layers.pooling.global_average_pooling2d.GlobalAveragePooling2D(self,data_format=None,keepdims=False,**kwargs)
keras.src.layers.pooling.global_average_pooling2d.GlobalAveragePooling2D.__init__(self,data_format=None,keepdims=False,**kwargs)
keras.src.layers.pooling.global_average_pooling2d.GlobalAveragePooling2D.call(self,inputs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/preprocessing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/preprocessing/image/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/preprocessing/sequence/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/dtype_policies/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/saving/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/datasets/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/datasets/cifar100/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/datasets/imdb/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/datasets/california_housing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/datasets/boston_housing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/datasets/fashion_mnist/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/datasets/cifar10/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/datasets/reuters/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/datasets/mnist/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/metrics/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/quantizers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/applications/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/applications/mobilenet_v3/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/applications/resnet/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/applications/convnext/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/applications/inception_v3/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/applications/vgg19/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/applications/resnet_v2/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/applications/inception_resnet_v2/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/applications/efficientnet/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/applications/efficientnet_v2/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/applications/densenet/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/applications/xception/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/applications/imagenet_utils/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/applications/resnet50/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/applications/vgg16/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/applications/mobilenet_v2/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/applications/nasnet/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/applications/mobilenet/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/activations/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/tree/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/backend/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/initializers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/random/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/optimizers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/optimizers/schedules/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/optimizers/legacy/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/legacy/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/legacy/saving/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/callbacks/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/losses/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/export/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/constraints/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/distribution/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/preprocessing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/preprocessing/image/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/preprocessing/text/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/preprocessing/sequence/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/dtype_policies/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/saving/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/datasets/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/datasets/cifar100/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/datasets/imdb/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/datasets/california_housing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/datasets/boston_housing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/datasets/fashion_mnist/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/datasets/cifar10/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/datasets/reuters/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/datasets/mnist/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/metrics/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/quantizers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/applications/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/applications/mobilenet_v3/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/applications/resnet/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/applications/convnext/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/applications/inception_v3/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/applications/vgg19/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/applications/resnet_v2/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/applications/inception_resnet_v2/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/applications/efficientnet/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/applications/efficientnet_v2/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/applications/densenet/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/applications/xception/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/applications/imagenet_utils/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/applications/resnet50/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/applications/vgg16/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/applications/mobilenet_v2/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/applications/nasnet/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/applications/mobilenet/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/activations/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/tree/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/backend/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/initializers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/random/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/optimizers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/optimizers/schedules/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/optimizers/legacy/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/legacy/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/legacy/saving/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/callbacks/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/losses/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/export/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/constraints/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/distribution/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/ops/image/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/ops/linalg/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/ops/numpy/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/ops/nn/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/models/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/config/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/regularizers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/mixed_precision/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/utils/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/utils/legacy/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/_tf_keras/keras/layers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/ops/image/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/ops/linalg/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/ops/numpy/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/ops/nn/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/models/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/config/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/regularizers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/mixed_precision/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/utils/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/utils/legacy/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras3.1.1/lib/python3.9/site-packages/keras/layers/__init__.py----------------------------------------

