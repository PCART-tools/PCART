
----------------------------------------/home/zhang/Packages/keras/keras1.1.1/objectives.py----------------------------------------
A:keras.objectives.diff->K.abs((y_true - y_pred) / K.clip(K.abs(y_true), K.epsilon(), np.inf))
A:keras.objectives.first_log->K.log(K.clip(y_pred, K.epsilon(), np.inf) + 1.0)
A:keras.objectives.second_log->K.log(K.clip(y_true, K.epsilon(), np.inf) + 1.0)
A:keras.objectives.y_true->K.l2_normalize(y_true, axis=-1)
A:keras.objectives.y_pred->K.l2_normalize(y_pred, axis=-1)
keras.objectives.binary_crossentropy(y_true,y_pred)
keras.objectives.categorical_crossentropy(y_true,y_pred)
keras.objectives.cosine_proximity(y_true,y_pred)
keras.objectives.get(identifier)
keras.objectives.hinge(y_true,y_pred)
keras.objectives.kullback_leibler_divergence(y_true,y_pred)
keras.objectives.mean_absolute_error(y_true,y_pred)
keras.objectives.mean_absolute_percentage_error(y_true,y_pred)
keras.objectives.mean_squared_error(y_true,y_pred)
keras.objectives.mean_squared_logarithmic_error(y_true,y_pred)
keras.objectives.poisson(y_true,y_pred)
keras.objectives.sparse_categorical_crossentropy(y_true,y_pred)
keras.objectives.squared_hinge(y_true,y_pred)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/regularizers.py----------------------------------------
A:keras.regularizers.WW->K.dot(K.transpose(W), W)
A:keras.regularizers.(dim1, dim2)->K.eval(K.shape(WW))
A:keras.regularizers.o->K.ones([dim1, 1])
A:keras.regularizers.main_eigenvect->K.dot(WW, main_eigenvect)
A:keras.regularizers.WWd->K.dot(WW, main_eigenvect)
A:keras.regularizers.self.l1->K.cast_to_floatx(l1)
A:keras.regularizers.self.l2->K.cast_to_floatx(l2)
A:keras.regularizers.output->self.layer.get_output_at(i)
keras.regularizers.ActivityRegularizer(self,l1=0.0,l2=0.0)
keras.regularizers.ActivityRegularizer.__init__(self,l1=0.0,l2=0.0)
keras.regularizers.ActivityRegularizer.get_config(self)
keras.regularizers.ActivityRegularizer.set_layer(self,layer)
keras.regularizers.EigenvalueRegularizer(self,k)
keras.regularizers.EigenvalueRegularizer.__init__(self,k)
keras.regularizers.EigenvalueRegularizer.set_param(self,p)
keras.regularizers.Regularizer(self,loss)
keras.regularizers.Regularizer.__call__(self,loss)
keras.regularizers.Regularizer.get_config(self)
keras.regularizers.Regularizer.set_layer(self,layer)
keras.regularizers.Regularizer.set_param(self,p)
keras.regularizers.WeightRegularizer(self,l1=0.0,l2=0.0)
keras.regularizers.WeightRegularizer.__init__(self,l1=0.0,l2=0.0)
keras.regularizers.WeightRegularizer.get_config(self)
keras.regularizers.WeightRegularizer.set_param(self,p)
keras.regularizers.activity_l1(l=0.01)
keras.regularizers.activity_l1l2(l1=0.01,l2=0.01)
keras.regularizers.activity_l2(l=0.01)
keras.regularizers.get(identifier,kwargs=None)
keras.regularizers.l1(l=0.01)
keras.regularizers.l1l2(l1=0.01,l2=0.01)
keras.regularizers.l2(l=0.01)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/activations.py----------------------------------------
A:keras.activations.ndim->K.ndim(x)
A:keras.activations.e->K.exp(x - K.max(x, axis=-1, keepdims=True))
A:keras.activations.s->K.sum(e, axis=-1, keepdims=True)
keras.activations.elu(x,alpha=1.0)
keras.activations.get(identifier)
keras.activations.hard_sigmoid(x)
keras.activations.linear(x)
keras.activations.relu(x,alpha=0.0,max_value=None)
keras.activations.sigmoid(x)
keras.activations.softmax(x)
keras.activations.softplus(x)
keras.activations.softsign(x)
keras.activations.tanh(x)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/metrics.py----------------------------------------
A:keras.metrics.diff->K.abs((y_true - y_pred) / K.clip(K.abs(y_true), K.epsilon(), np.inf))
A:keras.metrics.first_log->K.log(K.clip(y_pred, K.epsilon(), np.inf) + 1.0)
A:keras.metrics.second_log->K.log(K.clip(y_true, K.epsilon(), np.inf) + 1.0)
A:keras.metrics.y_true->K.l2_normalize(y_true, axis=-1)
A:keras.metrics.y_pred->K.l2_normalize(y_pred, axis=-1)
A:keras.metrics.y_pred_pos->K.round(K.clip(y_pred, 0, 1))
A:keras.metrics.y_pos->K.round(K.clip(y_true, 0, 1))
A:keras.metrics.tp->K.sum(y_pos * y_pred_pos)
A:keras.metrics.tn->K.sum(y_neg * y_pred_neg)
A:keras.metrics.fp->K.sum(y_neg * y_pred_pos)
A:keras.metrics.fn->K.sum(y_pos * y_pred_neg)
A:keras.metrics.denominator->K.sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn))
A:keras.metrics.c1->K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))
A:keras.metrics.c2->K.sum(K.round(K.clip(y_pred, 0, 1)))
A:keras.metrics.c3->K.sum(K.round(K.clip(y_true, 0, 1)))
keras.metrics.binary_accuracy(y_true,y_pred)
keras.metrics.binary_crossentropy(y_true,y_pred)
keras.metrics.categorical_accuracy(y_true,y_pred)
keras.metrics.categorical_crossentropy(y_true,y_pred)
keras.metrics.cosine_proximity(y_true,y_pred)
keras.metrics.fbeta_score(y_true,y_pred,beta=1)
keras.metrics.get(identifier)
keras.metrics.hinge(y_true,y_pred)
keras.metrics.kullback_leibler_divergence(y_true,y_pred)
keras.metrics.matthews_correlation(y_true,y_pred)
keras.metrics.mean_absolute_error(y_true,y_pred)
keras.metrics.mean_absolute_percentage_error(y_true,y_pred)
keras.metrics.mean_squared_error(y_true,y_pred)
keras.metrics.mean_squared_logarithmic_error(y_true,y_pred)
keras.metrics.poisson(y_true,y_pred)
keras.metrics.sparse_categorical_accuracy(y_true,y_pred)
keras.metrics.sparse_categorical_crossentropy(y_true,y_pred)
keras.metrics.squared_hinge(y_true,y_pred)
keras.metrics.top_k_categorical_accuracy(y_true,y_pred,k=5)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/optimizers.py----------------------------------------
A:keras.optimizers.g->K.switch(n >= c, g * c / n, g)
A:keras.optimizers.grads->self.get_gradients(loss, params)
A:keras.optimizers.norm->K.sqrt(sum([K.sum(K.square(g)) for g in grads]))
A:keras.optimizers.param_values->K.batch_get_value(params)
A:keras.optimizers.self.iterations->K.variable(0.0)
A:keras.optimizers.self.lr->K.variable(lr)
A:keras.optimizers.self.momentum->K.variable(momentum)
A:keras.optimizers.self.decay->K.variable(decay)
A:keras.optimizers.new_p->c(new_p)
A:keras.optimizers.base_config->super(Nadam, self).get_config()
A:keras.optimizers.self.rho->K.variable(rho)
A:keras.optimizers.self.beta_1->K.variable(beta_1)
A:keras.optimizers.self.beta_2->K.variable(beta_2)
A:keras.optimizers.u_t->K.maximum(self.beta_2 * u, K.abs(g))
A:keras.optimizers.self.m_schedule->K.variable(1.0)
keras.optimizers.Adadelta(self,lr=1.0,rho=0.95,epsilon=1e-08,decay=0.0,**kwargs)
keras.optimizers.Adadelta.__init__(self,lr=1.0,rho=0.95,epsilon=1e-08,decay=0.0,**kwargs)
keras.optimizers.Adadelta.get_config(self)
keras.optimizers.Adadelta.get_updates(self,params,constraints,loss)
keras.optimizers.Adagrad(self,lr=0.01,epsilon=1e-08,decay=0.0,**kwargs)
keras.optimizers.Adagrad.__init__(self,lr=0.01,epsilon=1e-08,decay=0.0,**kwargs)
keras.optimizers.Adagrad.get_config(self)
keras.optimizers.Adagrad.get_updates(self,params,constraints,loss)
keras.optimizers.Adam(self,lr=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-08,decay=0.0,**kwargs)
keras.optimizers.Adam.__init__(self,lr=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-08,decay=0.0,**kwargs)
keras.optimizers.Adam.get_config(self)
keras.optimizers.Adam.get_updates(self,params,constraints,loss)
keras.optimizers.Adamax(self,lr=0.002,beta_1=0.9,beta_2=0.999,epsilon=1e-08,decay=0.0,**kwargs)
keras.optimizers.Adamax.__init__(self,lr=0.002,beta_1=0.9,beta_2=0.999,epsilon=1e-08,decay=0.0,**kwargs)
keras.optimizers.Adamax.get_config(self)
keras.optimizers.Adamax.get_updates(self,params,constraints,loss)
keras.optimizers.Nadam(self,lr=0.002,beta_1=0.9,beta_2=0.999,epsilon=1e-08,schedule_decay=0.004,**kwargs)
keras.optimizers.Nadam.__init__(self,lr=0.002,beta_1=0.9,beta_2=0.999,epsilon=1e-08,schedule_decay=0.004,**kwargs)
keras.optimizers.Nadam.get_config(self)
keras.optimizers.Nadam.get_updates(self,params,constraints,loss)
keras.optimizers.Optimizer(self,**kwargs)
keras.optimizers.Optimizer.__init__(self,**kwargs)
keras.optimizers.Optimizer.from_config(cls,config)
keras.optimizers.Optimizer.get_config(self)
keras.optimizers.Optimizer.get_gradients(self,loss,params)
keras.optimizers.Optimizer.get_state(self)
keras.optimizers.Optimizer.get_updates(self,params,constraints,loss)
keras.optimizers.Optimizer.get_weights(self)
keras.optimizers.Optimizer.set_state(self,value_list)
keras.optimizers.Optimizer.set_weights(self,weights)
keras.optimizers.RMSprop(self,lr=0.001,rho=0.9,epsilon=1e-08,decay=0.0,**kwargs)
keras.optimizers.RMSprop.__init__(self,lr=0.001,rho=0.9,epsilon=1e-08,decay=0.0,**kwargs)
keras.optimizers.RMSprop.get_config(self)
keras.optimizers.RMSprop.get_updates(self,params,constraints,loss)
keras.optimizers.SGD(self,lr=0.01,momentum=0.0,decay=0.0,nesterov=False,**kwargs)
keras.optimizers.SGD.__init__(self,lr=0.01,momentum=0.0,decay=0.0,nesterov=False,**kwargs)
keras.optimizers.SGD.get_config(self)
keras.optimizers.SGD.get_updates(self,params,constraints,loss)
keras.optimizers.clip_norm(g,c,n)
keras.optimizers.get(identifier,kwargs=None)
keras.optimizers.optimizer_from_config(config,custom_objects={})


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/callbacks.py----------------------------------------
A:keras.callbacks.self._delta_ts_batch_begin->deque([], maxlen=self.queue_length)
A:keras.callbacks.self._delta_ts_batch_end->deque([], maxlen=self.queue_length)
A:keras.callbacks.t_before_callbacks->time.time()
A:keras.callbacks.delta_t_median->numpy.median(self._delta_ts_batch_end)
A:keras.callbacks.self._t_enter_batch->time.time()
A:keras.callbacks.batch_size->logs.get('size', 0)
A:keras.callbacks.self.progbar->Progbar(target=self.params['nb_sample'], verbose=self.verbose)
A:keras.callbacks.filepath->self.filepath.format(epoch=epoch, **logs)
A:keras.callbacks.current->logs.get(self.monitor)
A:keras.callbacks.lr->self.schedule(epoch)
A:keras.callbacks.self.sess->keras.backend.tensorflow_backend.get_session()
A:keras.callbacks.w_img->tensorflow.expand_dims(tf.expand_dims(w_img, 0), -1)
A:keras.callbacks.shape->tensorflow.expand_dims(tf.expand_dims(w_img, 0), -1).get_shape()
A:keras.callbacks.self.merged->tensorflow.merge_all_summaries()
A:keras.callbacks.self.writer->csv.DictWriter(self.csv_file, fieldnames=['epoch'] + self.keys)
A:keras.callbacks.cut_v_data->len(self.model.inputs)
A:keras.callbacks.feed_dict->dict(zip(tensors, val_data))
A:keras.callbacks.result->self.sess.run([self.merged], feed_dict=feed_dict)
A:keras.callbacks.summary->tensorflow.Summary()
A:keras.callbacks.summary_value->tensorflow.Summary().value.add()
A:keras.callbacks.summary_value.simple_value->value.item()
A:keras.callbacks.logs['lr']->keras.backend.get_value(self.model.optimizer.lr)
A:keras.callbacks.old_lr->float(K.get_value(self.model.optimizer.lr))
A:keras.callbacks.new_lr->max(new_lr, self.min_lr)
A:keras.callbacks.self.csv_file->open(self.filename, 'w')
A:keras.callbacks.self.keys->sorted(logs.keys())
A:keras.callbacks.row_dict->OrderedDict({'epoch': epoch})
keras.callbacks.BaseLogger(Callback)
keras.callbacks.BaseLogger.on_batch_end(self,batch,logs={})
keras.callbacks.BaseLogger.on_epoch_begin(self,epoch,logs={})
keras.callbacks.BaseLogger.on_epoch_end(self,epoch,logs={})
keras.callbacks.CSVLogger(self,filename,separator=',',append=False)
keras.callbacks.CSVLogger.__init__(self,filename,separator=',',append=False)
keras.callbacks.CSVLogger.on_epoch_end(self,epoch,logs={})
keras.callbacks.CSVLogger.on_train_begin(self,logs={})
keras.callbacks.CSVLogger.on_train_end(self,logs={})
keras.callbacks.Callback(self)
keras.callbacks.Callback.__init__(self)
keras.callbacks.Callback._set_model(self,model)
keras.callbacks.Callback._set_params(self,params)
keras.callbacks.Callback.on_batch_begin(self,batch,logs={})
keras.callbacks.Callback.on_batch_end(self,batch,logs={})
keras.callbacks.Callback.on_epoch_begin(self,epoch,logs={})
keras.callbacks.Callback.on_epoch_end(self,epoch,logs={})
keras.callbacks.Callback.on_train_begin(self,logs={})
keras.callbacks.Callback.on_train_end(self,logs={})
keras.callbacks.CallbackList(self,callbacks=[],queue_length=10)
keras.callbacks.CallbackList.__init__(self,callbacks=[],queue_length=10)
keras.callbacks.CallbackList._set_model(self,model)
keras.callbacks.CallbackList._set_params(self,params)
keras.callbacks.CallbackList.append(self,callback)
keras.callbacks.CallbackList.on_batch_begin(self,batch,logs={})
keras.callbacks.CallbackList.on_batch_end(self,batch,logs={})
keras.callbacks.CallbackList.on_epoch_begin(self,epoch,logs={})
keras.callbacks.CallbackList.on_epoch_end(self,epoch,logs={})
keras.callbacks.CallbackList.on_train_begin(self,logs={})
keras.callbacks.CallbackList.on_train_end(self,logs={})
keras.callbacks.EarlyStopping(self,monitor='val_loss',min_delta=0,patience=0,verbose=0,mode='auto')
keras.callbacks.EarlyStopping.__init__(self,monitor='val_loss',min_delta=0,patience=0,verbose=0,mode='auto')
keras.callbacks.EarlyStopping.on_epoch_end(self,epoch,logs={})
keras.callbacks.EarlyStopping.on_train_begin(self,logs={})
keras.callbacks.History(Callback)
keras.callbacks.History.on_epoch_end(self,epoch,logs={})
keras.callbacks.History.on_train_begin(self,logs={})
keras.callbacks.LambdaCallback(self,on_epoch_begin=None,on_epoch_end=None,on_batch_begin=None,on_batch_end=None,on_train_begin=None,on_train_end=None,**kwargs)
keras.callbacks.LambdaCallback.__init__(self,on_epoch_begin=None,on_epoch_end=None,on_batch_begin=None,on_batch_end=None,on_train_begin=None,on_train_end=None,**kwargs)
keras.callbacks.LearningRateScheduler(self,schedule)
keras.callbacks.LearningRateScheduler.__init__(self,schedule)
keras.callbacks.LearningRateScheduler.on_epoch_begin(self,epoch,logs={})
keras.callbacks.ModelCheckpoint(self,filepath,monitor='val_loss',verbose=0,save_best_only=False,save_weights_only=False,mode='auto')
keras.callbacks.ModelCheckpoint.__init__(self,filepath,monitor='val_loss',verbose=0,save_best_only=False,save_weights_only=False,mode='auto')
keras.callbacks.ModelCheckpoint.on_epoch_end(self,epoch,logs={})
keras.callbacks.ProgbarLogger(Callback)
keras.callbacks.ProgbarLogger.on_batch_begin(self,batch,logs={})
keras.callbacks.ProgbarLogger.on_batch_end(self,batch,logs={})
keras.callbacks.ProgbarLogger.on_epoch_begin(self,epoch,logs={})
keras.callbacks.ProgbarLogger.on_epoch_end(self,epoch,logs={})
keras.callbacks.ProgbarLogger.on_train_begin(self,logs={})
keras.callbacks.ReduceLROnPlateau(self,monitor='val_loss',factor=0.1,patience=10,verbose=0,mode='auto',epsilon=0.0001,cooldown=0,min_lr=0)
keras.callbacks.ReduceLROnPlateau.__init__(self,monitor='val_loss',factor=0.1,patience=10,verbose=0,mode='auto',epsilon=0.0001,cooldown=0,min_lr=0)
keras.callbacks.ReduceLROnPlateau.in_cooldown(self)
keras.callbacks.ReduceLROnPlateau.on_epoch_end(self,epoch,logs={})
keras.callbacks.ReduceLROnPlateau.on_train_begin(self,logs={})
keras.callbacks.ReduceLROnPlateau.reset(self)
keras.callbacks.RemoteMonitor(self,root='http://localhost:9000',path='/publish/epoch/end/',field='data')
keras.callbacks.RemoteMonitor.__init__(self,root='http://localhost:9000',path='/publish/epoch/end/',field='data')
keras.callbacks.RemoteMonitor.on_epoch_end(self,epoch,logs={})
keras.callbacks.TensorBoard(self,log_dir='./logs',histogram_freq=0,write_graph=True,write_images=False)
keras.callbacks.TensorBoard.__init__(self,log_dir='./logs',histogram_freq=0,write_graph=True,write_images=False)
keras.callbacks.TensorBoard._set_model(self,model)
keras.callbacks.TensorBoard.on_epoch_end(self,epoch,logs={})


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/models.py----------------------------------------
A:keras.models.proceed->ask_to_proceed_with_overwrite(filepath)
A:keras.models.f->h5py.File(filepath, mode='r')
A:keras.models.f.attrs['keras_version']->str(keras_version).encode('utf8')
A:keras.models.f.attrs['model_config']->json.dumps({'class_name': model.__class__.__name__, 'config': model.get_config()}, default=get_json_type).encode('utf8')
A:keras.models.model_weights_group->h5py.File(filepath, mode='r').create_group('model_weights')
A:keras.models.f.attrs['training_config']->json.dumps({'optimizer_config': {'class_name': model.optimizer.__class__.__name__, 'config': model.optimizer.get_config()}, 'loss': model.loss, 'metrics': model.metrics, 'sample_weight_mode': model.sample_weight_mode, 'loss_weights': model.loss_weights}, default=get_json_type).encode('utf8')
A:keras.models.symbolic_weights->getattr(model.optimizer, 'weights')
A:keras.models.optimizer_weights_group->h5py.File(filepath, mode='r').create_group('optimizer_weights')
A:keras.models.weight_values->K.batch_get_value(symbolic_weights)
A:keras.models.name->layer_data['config'].get('name')
A:keras.models.param_dset->h5py.File(filepath, mode='r').create_group('optimizer_weights').create_dataset(name, val.shape, dtype=val.dtype)
A:keras.models.model_config->json.loads(model_config.decode('utf-8'))
A:keras.models.model->cls()
A:keras.models.training_config->json.loads(training_config.decode('utf-8'))
A:keras.models.optimizer->optimizer_from_config(optimizer_config)
A:keras.models.loss->deserialize(training_config['loss'])
A:keras.models.metrics->deserialize(training_config['metrics'])
A:keras.models.config->json.loads(json_string)
A:keras.models.self.inputs->get_source_inputs(self.outputs[0])
A:keras.models.output_tensor->layer(self.outputs[0])
A:keras.models.self.model->Model(self.inputs, self.outputs[0], name=self.name + '_model')
A:keras.models.layer_dict->getattr(layer, attr, {})
A:keras.models.all_attrs->dict(list(all_attrs.items()) + list(layer_dict.items()))
A:keras.models.weights->self._gather_list_attr('non_trainable_weights')
A:keras.models.trainable_weights->self._gather_list_attr('trainable_weights')
A:keras.models.nb_param->len(layer.weights)
A:keras.models.preds->self.predict(x, batch_size, verbose)
A:keras.models.proba->self.predict(x, batch_size=batch_size, verbose=verbose)
A:keras.models.merge_config->self.layers[0].get_config()
A:keras.models.layer->get_or_create_layer(conf)
A:keras.models.first_layer->normalize_legacy_config(first_layer)
A:keras.models.merge_input->layer_from_config(merge_input_config)
A:keras.models.merge->keras.layers.Merge.from_config(first_layer_config)
A:keras.models.conf->normalize_legacy_config(conf)
keras.models.Sequential(self,layers=[],name=None)
keras.models.Sequential.__init__(self,layers=[],name=None)
keras.models.Sequential._gather_dict_attr(self,attr)
keras.models.Sequential._gather_list_attr(self,attr)
keras.models.Sequential.add(self,layer)
keras.models.Sequential.build(self,input_shape=None)
keras.models.Sequential.call(self,x,mask=None)
keras.models.Sequential.compile(self,optimizer,loss,metrics=[],sample_weight_mode=None,**kwargs)
keras.models.Sequential.constraints(self)
keras.models.Sequential.evaluate(self,x,y,batch_size=32,verbose=1,sample_weight=None,**kwargs)
keras.models.Sequential.evaluate_generator(self,generator,val_samples,max_q_size=10,nb_worker=1,pickle_safe=False,**kwargs)
keras.models.Sequential.fit(self,x,y,batch_size=32,nb_epoch=10,verbose=1,callbacks=[],validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,**kwargs)
keras.models.Sequential.fit_generator(self,generator,samples_per_epoch,nb_epoch,verbose=1,callbacks=[],validation_data=None,nb_val_samples=None,class_weight=None,max_q_size=10,nb_worker=1,pickle_safe=False,**kwargs)
keras.models.Sequential.flattened_layers(self)
keras.models.Sequential.from_config(cls,config,layer_cache=None)
keras.models.Sequential.get_config(self)
keras.models.Sequential.get_layer(self,name=None,index=None)
keras.models.Sequential.get_weights(self)
keras.models.Sequential.non_trainable_weights(self)
keras.models.Sequential.pop(self)
keras.models.Sequential.predict(self,x,batch_size=32,verbose=0)
keras.models.Sequential.predict_classes(self,x,batch_size=32,verbose=1)
keras.models.Sequential.predict_generator(self,generator,val_samples,max_q_size=10,nb_worker=1,pickle_safe=False)
keras.models.Sequential.predict_on_batch(self,x)
keras.models.Sequential.predict_proba(self,x,batch_size=32,verbose=1)
keras.models.Sequential.regularizers(self)
keras.models.Sequential.set_weights(self,weights)
keras.models.Sequential.state_updates(self)
keras.models.Sequential.test_on_batch(self,x,y,sample_weight=None,**kwargs)
keras.models.Sequential.train_on_batch(self,x,y,class_weight=None,sample_weight=None,**kwargs)
keras.models.Sequential.trainable_weights(self)
keras.models.Sequential.training_data(self)
keras.models.Sequential.updates(self)
keras.models.Sequential.uses_learning_phase(self)
keras.models.Sequential.validation_data(self)
keras.models.load_model(filepath,custom_objects={})
keras.models.model_from_config(config,custom_objects={})
keras.models.model_from_json(json_string,custom_objects={})
keras.models.model_from_yaml(yaml_string,custom_objects={})
keras.models.save_model(model,filepath,overwrite=True)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/initializations.py----------------------------------------
A:keras.initializations.receptive_field_size->numpy.prod(shape[:2])
A:keras.initializations.fan_in->numpy.sqrt(np.prod(shape))
A:keras.initializations.fan_out->numpy.sqrt(np.prod(shape))
A:keras.initializations.(fan_in, fan_out)->get_fans(shape, dim_ordering=dim_ordering)
A:keras.initializations.scale->numpy.sqrt(3.0 / fan_in)
A:keras.initializations.s->numpy.sqrt(6.0 / fan_in)
A:keras.initializations.a->numpy.random.normal(0.0, 1.0, flat_shape)
A:keras.initializations.(u, _, v)->numpy.linalg.svd(a, full_matrices=False)
A:keras.initializations.q->q.reshape(shape).reshape(shape)
keras.initializations.get(identifier,**kwargs)
keras.initializations.get_fans(shape,dim_ordering='th')
keras.initializations.glorot_normal(shape,name=None,dim_ordering='th')
keras.initializations.glorot_uniform(shape,name=None,dim_ordering='th')
keras.initializations.he_normal(shape,name=None,dim_ordering='th')
keras.initializations.he_uniform(shape,name=None,dim_ordering='th')
keras.initializations.identity(shape,scale=1,name=None)
keras.initializations.lecun_uniform(shape,name=None,dim_ordering='th')
keras.initializations.normal(shape,scale=0.05,name=None)
keras.initializations.one(shape,name=None)
keras.initializations.orthogonal(shape,scale=1.1,name=None)
keras.initializations.uniform(shape,scale=0.05,name=None)
keras.initializations.zero(shape,name=None)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/constraints.py----------------------------------------
A:keras.constraints.norms->K.sqrt(K.sum(K.square(p), axis=self.axis, keepdims=True))
A:keras.constraints.desired->K.clip(norms, 0, self.m)
keras.constraints.Constraint(self,p)
keras.constraints.Constraint.__call__(self,p)
keras.constraints.Constraint.get_config(self)
keras.constraints.MaxNorm(self,m=2,axis=0)
keras.constraints.MaxNorm.__init__(self,m=2,axis=0)
keras.constraints.MaxNorm.get_config(self)
keras.constraints.NonNeg(self,p)
keras.constraints.NonNeg.__call__(self,p)
keras.constraints.UnitNorm(self,axis=0)
keras.constraints.UnitNorm.__init__(self,axis=0)
keras.constraints.UnitNorm.get_config(self)
keras.constraints.get(identifier,kwargs=None)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/utils/data_utils.py----------------------------------------
A:keras.utils.data_utils.total_size->int(total_size)
A:keras.utils.data_utils.chunk->urlopen(url, data).read(chunk_size)
A:keras.utils.data_utils.response->urlopen(url, data)
A:keras.utils.data_utils.datadir_base->os.path.join('/tmp', '.keras')
A:keras.utils.data_utils.datadir->os.path.join(datadir_base, cache_subdir)
A:keras.utils.data_utils.untar_fpath->os.path.join(datadir, fname)
A:keras.utils.data_utils.fpath->os.path.join(datadir, fname)
A:keras.utils.data_utils.progbar->Progbar(total_size)
A:keras.utils.data_utils.tfile->tarfile.open(fpath, 'r:gz')
A:keras.utils.data_utils.hasher->hashlib.md5()
A:keras.utils.data_utils.buf->f.read()
keras.utils.data_utils.get_file(fname,origin,untar=False,md5_hash=None,cache_subdir='datasets')
keras.utils.data_utils.validate_file(fpath,md5_hash)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/utils/visualize_util.py----------------------------------------
A:keras.utils.visualize_util.dot->model_to_dot(model, show_shapes, show_layer_names)
A:keras.utils.visualize_util.layer_id->str(id(layer))
A:keras.utils.visualize_util.layer_name->'{}({})'.format(layer_name, layer.layer.name)
A:keras.utils.visualize_util.class_name->'{}({})'.format(class_name, layer.layer.__class__.__name__)
A:keras.utils.visualize_util.label->'{}: {}'.format(layer_name, class_name)
A:keras.utils.visualize_util.outputlabels->str(layer.output_shape)
A:keras.utils.visualize_util.inputlabels->', '.join([str(ishape) for ishape in layer.input_shapes])
A:keras.utils.visualize_util.node->pydot.Node(layer_id, label=label)
A:keras.utils.visualize_util.inbound_layer_id->str(id(inbound_layer))
A:keras.utils.visualize_util.(_, format)->os.path.splitext(to_file)
keras.utils.visualize_util.model_to_dot(model,show_shapes=False,show_layer_names=True)
keras.utils.visualize_util.plot(model,to_file='model.png',show_shapes=False,show_layer_names=True)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/utils/io_utils.py----------------------------------------
A:keras.utils.io_utils.refs->defaultdict(int)
A:keras.utils.io_utils.f->tables.open_file(name)
A:keras.utils.io_utils.idx->(self.start + key).tolist()
A:keras.utils.io_utils.atom->tables.Atom.from_dtype(array.dtype)
A:keras.utils.io_utils.ds->tables.open_file(name).createCArray(f.root, 'data', atom, array.shape)
A:keras.utils.io_utils.a->numpy.empty(shape=array.shape, dtype=array.dtype)
A:keras.utils.io_utils.overwrite->get_input('Enter "y" (overwrite) or "n" (cancel).')
keras.utils.io_utils.HDF5Matrix(self,datapath,dataset,start=0,end=None,normalizer=None)
keras.utils.io_utils.HDF5Matrix.__getitem__(self,key)
keras.utils.io_utils.HDF5Matrix.__init__(self,datapath,dataset,start=0,end=None,normalizer=None)
keras.utils.io_utils.HDF5Matrix.__len__(self)
keras.utils.io_utils.HDF5Matrix.shape(self)
keras.utils.io_utils.ask_to_proceed_with_overwrite(filepath)
keras.utils.io_utils.load_array(name)
keras.utils.io_utils.save_array(array,name)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/utils/test_utils.py----------------------------------------
A:keras.utils.test_utils.y->layer(x)
A:keras.utils.test_utils.X->numpy.zeros((nb_sample,) + input_shape)
A:keras.utils.test_utils.X[i]->numpy.random.normal(loc=y_loc[i], scale=0.7, size=input_shape)
A:keras.utils.test_utils.y_loc->numpy.random.random((nb_sample,))
A:keras.utils.test_utils.y[i]->numpy.random.normal(loc=y_loc[i], scale=0.7, size=output_shape)
A:keras.utils.test_utils.input_dtype->K.floatx()
A:keras.utils.test_utils.input_data->(10 * np.random.random(input_shape)).astype(input_dtype)
A:keras.utils.test_utils.layer->layer.__class__.from_config(layer_config).__class__.from_config(layer_config)
A:keras.utils.test_utils.weights->layer.__class__.from_config(layer_config).__class__.from_config(layer_config).get_weights()
A:keras.utils.test_utils.x->Input(shape=input_shape[1:], dtype=input_dtype)
A:keras.utils.test_utils.model->model_from_json(json_model)
A:keras.utils.test_utils.expected_output_shape->layer.__class__.from_config(layer_config).__class__.from_config(layer_config).get_output_shape_for(input_shape)
A:keras.utils.test_utils.actual_output->model_from_json(json_model).predict(input_data)
A:keras.utils.test_utils.model_config->model_from_json(json_model).get_config()
A:keras.utils.test_utils.layer_config->layer.__class__.from_config(layer_config).__class__.from_config(layer_config).get_config()
A:keras.utils.test_utils.json_model->model_from_json(json_model).to_json()
A:keras.utils.test_utils.output->func(*args, **kwargs)
keras.utils.test_utils.get_test_data(nb_train=1000,nb_test=500,input_shape=(10,),output_shape=(2,),classification=True,nb_class=2)
keras.utils.test_utils.keras_test(func)
keras.utils.test_utils.layer_test(layer_cls,kwargs={},input_shape=None,input_dtype=None,input_data=None,expected_output=None,expected_output_dtype=None,fixed_batch_size=False)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/utils/generic_utils.py----------------------------------------
A:keras.utils.generic_utils.res->module_params.get(name)
A:keras.utils.generic_utils.name->identifier.pop('name')
A:keras.utils.generic_utils.code->marshal.loads(code.encode('raw_unicode_escape'))
A:keras.utils.generic_utils.closure->func_reconstruct_closure(closure)
A:keras.utils.generic_utils.globs->globals()
A:keras.utils.generic_utils.nums->range(len(values))
A:keras.utils.generic_utils.src->'\n'.join(src)
A:keras.utils.generic_utils.self.start->time.time()
A:keras.utils.generic_utils.now->time.time()
A:keras.utils.generic_utils.prog_width->int(self.width * prog)
A:keras.utils.generic_utils.self.total_width->len(bar)
keras.utils.generic_utils.Progbar(self,target,width=30,verbose=1,interval=0.01)
keras.utils.generic_utils.Progbar.__init__(self,target,width=30,verbose=1,interval=0.01)
keras.utils.generic_utils.Progbar.add(self,n,values=[])
keras.utils.generic_utils.Progbar.update(self,current,values=[],force=False)
keras.utils.generic_utils.display_table(rows,positions)
keras.utils.generic_utils.func_dump(func)
keras.utils.generic_utils.func_load(code,defaults=None,closure=None,globs=None)
keras.utils.generic_utils.func_reconstruct_closure(values)
keras.utils.generic_utils.get_from_module(identifier,module_params,module_name,instantiate=False,kwargs=None)
keras.utils.generic_utils.make_tuple(*args)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/utils/layer_utils.py----------------------------------------
A:keras.utils.layer_utils.layer_class->get_from_module(class_name, globals(), 'layer', instantiate=False)
A:keras.utils.layer_utils.layer_set->set()
A:keras.utils.layer_utils.original_w->K.get_value(layer.W)
A:keras.utils.layer_utils.converted_w->convert_kernel(original_w)
keras.utils.layer_utils.convert_all_kernels_in_model(model)
keras.utils.layer_utils.layer_from_config(config,custom_objects={})
keras.utils.layer_utils.print_summary(layers,relevant_nodes=None,line_length=100,positions=[0.33,0.55,0.67,1.0])


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/utils/np_utils.py----------------------------------------
A:keras.utils.np_utils.Y->numpy.zeros((len(y), nb_classes))
A:keras.utils.np_utils.l2->numpy.atleast_1d(np.linalg.norm(a, order, axis))
A:keras.utils.np_utils.p->scipy.minimum(1 - epsilon, p)
A:keras.utils.np_utils.res->sum(y * sp.log(p) + sp.subtract(1, y) * sp.log(sp.subtract(1, p)))
A:keras.utils.np_utils.dim_ordering->K.image_dim_ordering()
A:keras.utils.np_utils.new_kernel->numpy.copy(kernel)
keras.utils.np_utils.accuracy(p,y)
keras.utils.np_utils.binary_logloss(p,y)
keras.utils.np_utils.categorical_probas_to_classes(p)
keras.utils.np_utils.conv_input_length(output_length,filter_size,border_mode,stride)
keras.utils.np_utils.conv_output_length(input_length,filter_size,border_mode,stride,dilation=1)
keras.utils.np_utils.convert_kernel(kernel,dim_ordering='default')
keras.utils.np_utils.multiclass_logloss(P,Y)
keras.utils.np_utils.normalize(a,axis=-1,order=2)
keras.utils.np_utils.probas_to_classes(y_pred)
keras.utils.np_utils.to_categorical(y,nb_classes=None)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/utils/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/engine/training.py----------------------------------------
A:keras.engine.training.array->numpy.expand_dims(array, 1)
A:keras.engine.training.set_x->set(x_lengths)
A:keras.engine.training.set_y->set(y_lengths)
A:keras.engine.training.set_w->set(w_lengths)
A:keras.engine.training.output_metrics->metrics.get(name, [])
A:keras.engine.training.trainable->getattr(layer, 'trainable', True)
A:keras.engine.training.weights->numpy.asarray([class_weight[cls] for cls in y_classes])
A:keras.engine.training.batch_count->int(len(index_array) / batch_size)
A:keras.engine.training.index_array->numpy.arange(nb_sample)
A:keras.engine.training.nb_batch->int(np.ceil(size / float(batch_size)))
A:keras.engine.training.start->start.tolist().tolist()
A:keras.engine.training.score_array->K.mean(score_array, axis=list(range(weight_ndim, ndim)))
A:keras.engine.training.mask->K.cast(mask, K.floatx())
A:keras.engine.training.ndim->K.ndim(score_array)
A:keras.engine.training.weight_ndim->K.ndim(weights)
A:keras.engine.training.y_classes->numpy.reshape(y, y.shape[0])
A:keras.engine.training.q->Queue.Queue()
A:keras.engine.training._stop->threading.Event()
A:keras.engine.training.generator_output->data_gen_queue.get()
A:keras.engine.training.thread->threading.Thread(target=data_generator_task)
A:keras.engine.training.self.optimizer->optimizers.get(optimizer)
A:keras.engine.training.loss_function->objectives.get(loss)
A:keras.engine.training.masks->self.compute_mask(self.inputs, mask=None)
A:keras.engine.training.weight->K.placeholder(ndim=1, name=name + '_sample_weights')
A:keras.engine.training.output_loss->weighted_loss(y_true, y_pred, sample_weight, mask)
A:keras.engine.training.total_loss->r(total_loss)
A:keras.engine.training.nested_metrics->collect_metrics(metrics, self.output_names)
A:keras.engine.training.metric_fn->metrics_module.get(metric)
A:keras.engine.training.metric_result->metric_fn(y_true, y_pred)
A:keras.engine.training.self._collected_trainable_weights->collect_trainable_weights(self)
A:keras.engine.training.training_updates->self.optimizer.get_updates(self._collected_trainable_weights, self.constraints, self.total_loss)
A:keras.engine.training.self.train_function->K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=updates, **self._function_kwargs)
A:keras.engine.training.self.test_function->K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=self.state_updates, **self._function_kwargs)
A:keras.engine.training.kwargs->getattr(self, '_function_kwargs', {})
A:keras.engine.training.self.predict_function->K.function(inputs, self.outputs, updates=self.state_updates, **kwargs)
A:keras.engine.training.self.history->cbks.History()
A:keras.engine.training.callbacks->cbks.CallbackList(callbacks)
A:keras.engine.training.batches->make_batches(nb_sample, batch_size)
A:keras.engine.training.ins_batch->slice_X(ins, batch_ids)
A:keras.engine.training.batch_logs['size']->len(batch_ids)
A:keras.engine.training.outs->self.predict_on_batch(x)
A:keras.engine.training.val_outs->self.evaluate(val_x, val_y, batch_size=batch_size, sample_weight=val_sample_weights, verbose=0)
A:keras.engine.training.progbar->Progbar(target=nb_sample)
A:keras.engine.training.batch_outs->f(ins_batch)
A:keras.engine.training.x->standardize_input_data(x, self.input_names, self.internal_input_shapes)
A:keras.engine.training.y->standardize_input_data(y, self.output_names, output_shapes, check_batch_dim=False, exception_prefix='model target')
A:keras.engine.training.sample_weights->standardize_sample_weights(sample_weight, self.output_names)
A:keras.engine.training.class_weights->standardize_class_weights(class_weight, self.output_names)
A:keras.engine.training.(x, y, sample_weights)->self._standardize_user_data(x, y, sample_weight=sample_weight, check_batch_dim=True)
A:keras.engine.training.(val_x, val_y, val_sample_weights)->self._standardize_user_data(val_x, val_y, val_sample_weight)
A:keras.engine.training.split_at->int(len(x[0]) * (1.0 - validation_split))
A:keras.engine.training.dup_idx->out_labels[:i].count(label)
A:keras.engine.training.callback_metrics->copy.copy(out_labels)
A:keras.engine.training.outputs->self.predict_function(ins)
A:keras.engine.training.do_validation->bool(validation_data)
A:keras.engine.training.(data_gen_queue, _stop, generator_threads)->generator_queue(generator, max_q_size=max_q_size, nb_worker=nb_worker, pickle_safe=pickle_safe)
A:keras.engine.training.nb_samples->len(x)
keras.engine.Model(Container)
keras.engine.Model._fit_loop(self,f,ins,out_labels=[],batch_size=32,nb_epoch=100,verbose=1,callbacks=[],val_f=None,val_ins=None,shuffle=True,callback_metrics=[])
keras.engine.Model._make_predict_function(self)
keras.engine.Model._make_test_function(self)
keras.engine.Model._make_train_function(self)
keras.engine.Model._predict_loop(self,f,ins,batch_size=32,verbose=0)
keras.engine.Model._standardize_user_data(self,x,y,sample_weight=None,class_weight=None,check_batch_dim=True,batch_size=None)
keras.engine.Model._test_loop(self,f,ins,batch_size=32,verbose=0)
keras.engine.Model.compile(self,optimizer,loss,metrics=[],loss_weights=None,sample_weight_mode=None,**kwargs)
keras.engine.Model.evaluate(self,x,y,batch_size=32,verbose=1,sample_weight=None)
keras.engine.Model.evaluate_generator(self,generator,val_samples,max_q_size=10,nb_worker=1,pickle_safe=False)
keras.engine.Model.fit(self,x,y,batch_size=32,nb_epoch=10,verbose=1,callbacks=[],validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None)
keras.engine.Model.fit_generator(self,generator,samples_per_epoch,nb_epoch,verbose=1,callbacks=[],validation_data=None,nb_val_samples=None,class_weight={},max_q_size=10,nb_worker=1,pickle_safe=False)
keras.engine.Model.predict(self,x,batch_size=32,verbose=0)
keras.engine.Model.predict_generator(self,generator,val_samples,max_q_size=10,nb_worker=1,pickle_safe=False)
keras.engine.Model.predict_on_batch(self,x)
keras.engine.Model.test_on_batch(self,x,y,sample_weight=None)
keras.engine.Model.train_on_batch(self,x,y,sample_weight=None,class_weight=None)
keras.engine.training.Model(Container)
keras.engine.training.Model._fit_loop(self,f,ins,out_labels=[],batch_size=32,nb_epoch=100,verbose=1,callbacks=[],val_f=None,val_ins=None,shuffle=True,callback_metrics=[])
keras.engine.training.Model._make_predict_function(self)
keras.engine.training.Model._make_test_function(self)
keras.engine.training.Model._make_train_function(self)
keras.engine.training.Model._predict_loop(self,f,ins,batch_size=32,verbose=0)
keras.engine.training.Model._standardize_user_data(self,x,y,sample_weight=None,class_weight=None,check_batch_dim=True,batch_size=None)
keras.engine.training.Model._test_loop(self,f,ins,batch_size=32,verbose=0)
keras.engine.training.Model.compile(self,optimizer,loss,metrics=[],loss_weights=None,sample_weight_mode=None,**kwargs)
keras.engine.training.Model.evaluate(self,x,y,batch_size=32,verbose=1,sample_weight=None)
keras.engine.training.Model.evaluate_generator(self,generator,val_samples,max_q_size=10,nb_worker=1,pickle_safe=False)
keras.engine.training.Model.fit(self,x,y,batch_size=32,nb_epoch=10,verbose=1,callbacks=[],validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None)
keras.engine.training.Model.fit_generator(self,generator,samples_per_epoch,nb_epoch,verbose=1,callbacks=[],validation_data=None,nb_val_samples=None,class_weight={},max_q_size=10,nb_worker=1,pickle_safe=False)
keras.engine.training.Model.predict(self,x,batch_size=32,verbose=0)
keras.engine.training.Model.predict_generator(self,generator,val_samples,max_q_size=10,nb_worker=1,pickle_safe=False)
keras.engine.training.Model.predict_on_batch(self,x)
keras.engine.training.Model.test_on_batch(self,x,y,sample_weight=None)
keras.engine.training.Model.train_on_batch(self,x,y,sample_weight=None,class_weight=None)
keras.engine.training.batch_shuffle(index_array,batch_size)
keras.engine.training.check_array_lengths(X,Y,W)
keras.engine.training.check_loss_and_target_compatibility(targets,losses,output_shapes)
keras.engine.training.collect_metrics(metrics,output_names)
keras.engine.training.collect_trainable_weights(layer)
keras.engine.training.generator_queue(generator,max_q_size=10,wait_time=0.05,nb_worker=1,pickle_safe=False)
keras.engine.training.make_batches(size,batch_size)
keras.engine.training.slice_X(X,start=None,stop=None)
keras.engine.training.standardize_class_weights(class_weight,output_names)
keras.engine.training.standardize_input_data(data,names,shapes=None,check_batch_dim=True,exception_prefix='')
keras.engine.training.standardize_sample_or_class_weights(x_weight,output_names,weight_type)
keras.engine.training.standardize_sample_weights(sample_weight,output_names)
keras.engine.training.standardize_weights(y,sample_weight=None,class_weight=None,sample_weight_mode=None)
keras.engine.training.weighted_objective(fn)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/engine/topology.py----------------------------------------
A:keras.engine.topology.self.ndim->len(shape)
A:keras.engine.topology.output_tensors->to_list(layer.call(computed_tensors, computed_masks))
A:keras.engine.topology.output_masks->to_list(layer.compute_mask(computed_tensors, computed_masks))
A:keras.engine.topology.output_shapes->to_list(output_shape)
A:keras.engine.topology.name->str(w.name)
A:keras.engine.topology.prefix->self.__class__.__name__.lower()
A:keras.engine.topology.self.trainable->kwargs.get('trainable', True)
A:keras.engine.topology.batch_input_shape->tuple(batch_input_shape)
A:keras.engine.topology.input_dtype->K.dtype(input_tensor)
A:keras.engine.topology.trainable->getattr(self, 'trainable', True)
A:keras.engine.topology.x->Input(batch_shape=batch_input_shape, dtype=input_dtype, name=name)
A:keras.engine.topology.inputs->to_list(input)
A:keras.engine.topology.ndim->int(int_ndim)
A:keras.engine.topology.x_shape->K.int_shape(x)
A:keras.engine.topology.input_tensors->to_list(x)
A:keras.engine.topology.inbound_layers->to_list(inbound_layers)
A:keras.engine.topology.node_indices->to_list(node_indices)
A:keras.engine.topology.tensor_indices->to_list(tensor_indices)
A:keras.engine.topology.values->getattr(self.inbound_nodes[node_index], attr)
A:keras.engine.topology.shape->K.int_shape(input_tensor)
A:keras.engine.topology.input_shape->tuple(shape)
A:keras.engine.topology.all_input_shapes->set([str(node.input_shapes) for node in self.inbound_nodes])
A:keras.engine.topology.all_output_shapes->set([str(node.output_shapes) for node in self.inbound_nodes])
A:keras.engine.topology.param_values->K.batch_get_value(params)
A:keras.engine.topology.input_tensor->K.placeholder(shape=batch_input_shape, dtype=input_dtype, sparse=self.sparse, name=self.name)
A:keras.engine.topology.input_layer->InputLayer(batch_input_shape=batch_shape, name=name, input_dtype=dtype, sparse=sparse, input_tensor=tensor)
A:keras.engine.topology.layer_output_shape->layer_from_config(layer_data, custom_objects=custom_objects).get_output_shape_at(node_indices[i])
A:keras.engine.topology.input_shapes_set->set(input_shapes)
A:keras.engine.topology.n1->len(shape1)
A:keras.engine.topology.n2->len(shape2)
A:keras.engine.topology.shape_set->set()
A:keras.engine.topology.s->K.maximum(s, inputs[i])
A:keras.engine.topology.output->K.expand_dims(output, 1)
A:keras.engine.topology.denominator->K.maximum(denominator, K.epsilon())
A:keras.engine.topology.output_shape->layer_from_config(layer_data, custom_objects=custom_objects).get_output_shape_for(input_shapes)
A:keras.engine.topology.shape1->list(input_shapes[0])
A:keras.engine.topology.shape2->list(input_shapes[1])
A:keras.engine.topology.concatenated->K.concatenate(masks, axis=self.concat_axis)
A:keras.engine.topology.mode->func_load(config['mode'], globs=globals())
A:keras.engine.topology.mode_type->self.get_config().pop('mode_type')
A:keras.engine.topology.output_shape_type->self.get_config().pop('output_shape_type')
A:keras.engine.topology.merge_layer->Merge(mode=mode, concat_axis=concat_axis, dot_axes=dot_axes, output_shape=output_shape, output_mask=output_mask, name=name)
A:keras.engine.topology.self.inputs->list(input)
A:keras.engine.topology.self.outputs->list(output)
A:keras.engine.topology.inputs_set->set(self.inputs)
A:keras.engine.topology.mask_cache_key->','.join([str(id(x)) for x in self.inputs])
A:keras.engine.topology.container_nodes->set()
A:keras.engine.topology.node_depth->nodes_depths.get(node)
A:keras.engine.topology.nodes_depths[node]->max(depth, node_depth)
A:keras.engine.topology.previously_seen_depth->layers_depths.get(layer)
A:keras.engine.topology.current_depth->max(depth, previously_seen_depth)
A:keras.engine.topology.layer_indices[layer]->len(layer_indices)
A:keras.engine.topology.node_marker->make_node_marker(next_node, current_depth + 1)
A:keras.engine.topology.seen_nodes->set()
A:keras.engine.topology.depth_keys->list(self.nodes_by_depth.keys())
A:keras.engine.topology.nb_param->len(layer.weights)
A:keras.engine.topology.layers_learning_phase->any([layer.uses_learning_phase for layer in self.layers])
A:keras.engine.topology.regs_learning_phase->any([reg.uses_learning_phase for reg in self.regularizers])
A:keras.engine.topology.masks->to_list(mask)
A:keras.engine.topology.cache_key->','.join([str(x) for x in input_shapes])
A:keras.engine.topology.(output_tensors, output_masks, output_shapes)->self.run_internal_graph(inputs, masks)
A:keras.engine.topology.input_shapes->to_list(input_shape)
A:keras.engine.topology.node_index->layer_from_config(layer_data, custom_objects=custom_objects).inbound_nodes.index(node)
A:keras.engine.topology.shapes->to_list(layer.get_output_shape_for([x._keras_shape for x in computed_tensors]))
A:keras.engine.topology.layer_config->layer_from_config(layer_data, custom_objects=custom_objects).get_config()
A:keras.engine.topology.new_node_index->node_conversion_map.get(node_key, 0)
A:keras.engine.topology.layer->layer_from_config(layer_data, custom_objects=custom_objects)
A:keras.engine.topology.proceed->ask_to_proceed_with_overwrite(filepath)
A:keras.engine.topology.f->h5py.File(filepath, mode='r')
A:keras.engine.topology.g->h5py.File(filepath, mode='r').create_group(layer.name)
A:keras.engine.topology.weight_values->K.batch_get_value(symbolic_weights)
A:keras.engine.topology.param_dset->h5py.File(filepath, mode='r').create_group(layer.name).create_dataset(name, val.shape, dtype=val.dtype)
A:keras.engine.topology.w->numpy.transpose(w, (2, 3, 1, 0))
A:keras.engine.topology.config->self.get_config()
A:keras.engine.topology.model_config->self._updated_config()
A:keras.engine.topology.previous_sources->get_source_inputs(x, layer, node_index)
keras.engine.Input(shape=None,batch_shape=None,name=None,dtype=K.floatx(),sparse=False,tensor=None)
keras.engine.InputLayer(self,input_shape=None,batch_input_shape=None,input_dtype=None,input_tensor=None,sparse=False,name=None)
keras.engine.InputLayer.get_config(self)
keras.engine.InputSpec(self,dtype=None,shape=None,ndim=None)
keras.engine.Layer(self,**kwargs)
keras.engine.Layer._get_node_attribute_at_index(self,node_index,attr,attr_name)
keras.engine.Layer.add_inbound_node(self,inbound_layers,node_indices=None,tensor_indices=None)
keras.engine.Layer.assert_input_compatibility(self,input)
keras.engine.Layer.build(self,input_shape)
keras.engine.Layer.call(self,x,mask=None)
keras.engine.Layer.compute_mask(self,input,input_mask=None)
keras.engine.Layer.count_params(self)
keras.engine.Layer.create_input_layer(self,batch_input_shape,input_dtype=None,name=None)
keras.engine.Layer.from_config(cls,config)
keras.engine.Layer.get_config(self)
keras.engine.Layer.get_input_at(self,node_index)
keras.engine.Layer.get_input_mask_at(self,node_index)
keras.engine.Layer.get_input_shape_at(self,node_index)
keras.engine.Layer.get_output_at(self,node_index)
keras.engine.Layer.get_output_mask_at(self,node_index)
keras.engine.Layer.get_output_shape_at(self,node_index)
keras.engine.Layer.get_output_shape_for(self,input_shape)
keras.engine.Layer.get_weights(self)
keras.engine.Layer.input(self)
keras.engine.Layer.input_mask(self)
keras.engine.Layer.input_shape(self)
keras.engine.Layer.non_trainable_weights(self)
keras.engine.Layer.non_trainable_weights(self,weights)
keras.engine.Layer.output(self)
keras.engine.Layer.output_mask(self)
keras.engine.Layer.output_shape(self)
keras.engine.Layer.set_input(self,input_tensor,shape=None)
keras.engine.Layer.set_weights(self,weights)
keras.engine.Layer.trainable_weights(self)
keras.engine.Layer.trainable_weights(self,weights)
keras.engine.Layer.weights(self)
keras.engine.Merge(self,layers=None,mode='sum',concat_axis=-1,dot_axes=-1,output_shape=None,output_mask=None,node_indices=None,tensor_indices=None,name=None)
keras.engine.Merge._arguments_validation(self,layers,mode,concat_axis,dot_axes,node_indices,tensor_indices)
keras.engine.Merge.call(self,inputs,mask=None)
keras.engine.Merge.compute_mask(self,inputs,mask=None)
keras.engine.Merge.from_config(cls,config)
keras.engine.Merge.get_config(self)
keras.engine.Merge.get_output_shape_for(self,input_shape)
keras.engine.get_source_inputs(tensor,layer=None,node_index=None)
keras.engine.merge(inputs,mode='sum',concat_axis=-1,dot_axes=-1,output_shape=None,output_mask=None,name=None)
keras.engine.topology.Container(self,input,output,name=None)
keras.engine.topology.Container.__init__(self,input,output,name=None)
keras.engine.topology.Container._updated_config(self)
keras.engine.topology.Container.call(self,input,mask=None)
keras.engine.topology.Container.compute_mask(self,input,mask)
keras.engine.topology.Container.constraints(self)
keras.engine.topology.Container.from_config(cls,config,custom_objects={})
keras.engine.topology.Container.get_config(self)
keras.engine.topology.Container.get_layer(self,name=None,index=None)
keras.engine.topology.Container.get_output_shape_for(self,input_shape)
keras.engine.topology.Container.get_weights(self)
keras.engine.topology.Container.input_spec(self)
keras.engine.topology.Container.load_weights(self,filepath,by_name=False)
keras.engine.topology.Container.load_weights_from_hdf5_group(self,f)
keras.engine.topology.Container.load_weights_from_hdf5_group_by_name(self,f)
keras.engine.topology.Container.non_trainable_weights(self)
keras.engine.topology.Container.regularizers(self)
keras.engine.topology.Container.reset_states(self)
keras.engine.topology.Container.run_internal_graph(self,inputs,masks=None)
keras.engine.topology.Container.save(self,filepath,overwrite=True)
keras.engine.topology.Container.save_weights(self,filepath,overwrite=True)
keras.engine.topology.Container.save_weights_to_hdf5_group(self,f)
keras.engine.topology.Container.set_weights(self,weights)
keras.engine.topology.Container.state_updates(self)
keras.engine.topology.Container.stateful(self)
keras.engine.topology.Container.summary(self,line_length=100,positions=[0.33,0.55,0.67,1.0])
keras.engine.topology.Container.to_json(self,**kwargs)
keras.engine.topology.Container.to_yaml(self,**kwargs)
keras.engine.topology.Container.trainable_weights(self)
keras.engine.topology.Container.updates(self)
keras.engine.topology.Container.uses_learning_phase(self)
keras.engine.topology.Input(shape=None,batch_shape=None,name=None,dtype=K.floatx(),sparse=False,tensor=None)
keras.engine.topology.InputLayer(self,input_shape=None,batch_input_shape=None,input_dtype=None,input_tensor=None,sparse=False,name=None)
keras.engine.topology.InputLayer.__init__(self,input_shape=None,batch_input_shape=None,input_dtype=None,input_tensor=None,sparse=False,name=None)
keras.engine.topology.InputLayer.get_config(self)
keras.engine.topology.InputSpec(self,dtype=None,shape=None,ndim=None)
keras.engine.topology.InputSpec.__init__(self,dtype=None,shape=None,ndim=None)
keras.engine.topology.Layer(self,**kwargs)
keras.engine.topology.Layer.__init__(self,**kwargs)
keras.engine.topology.Layer._get_node_attribute_at_index(self,node_index,attr,attr_name)
keras.engine.topology.Layer.add_inbound_node(self,inbound_layers,node_indices=None,tensor_indices=None)
keras.engine.topology.Layer.assert_input_compatibility(self,input)
keras.engine.topology.Layer.build(self,input_shape)
keras.engine.topology.Layer.call(self,x,mask=None)
keras.engine.topology.Layer.compute_mask(self,input,input_mask=None)
keras.engine.topology.Layer.count_params(self)
keras.engine.topology.Layer.create_input_layer(self,batch_input_shape,input_dtype=None,name=None)
keras.engine.topology.Layer.from_config(cls,config)
keras.engine.topology.Layer.get_config(self)
keras.engine.topology.Layer.get_input_at(self,node_index)
keras.engine.topology.Layer.get_input_mask_at(self,node_index)
keras.engine.topology.Layer.get_input_shape_at(self,node_index)
keras.engine.topology.Layer.get_output_at(self,node_index)
keras.engine.topology.Layer.get_output_mask_at(self,node_index)
keras.engine.topology.Layer.get_output_shape_at(self,node_index)
keras.engine.topology.Layer.get_output_shape_for(self,input_shape)
keras.engine.topology.Layer.get_weights(self)
keras.engine.topology.Layer.input(self)
keras.engine.topology.Layer.input_mask(self)
keras.engine.topology.Layer.input_shape(self)
keras.engine.topology.Layer.non_trainable_weights(self)
keras.engine.topology.Layer.non_trainable_weights(self,weights)
keras.engine.topology.Layer.output(self)
keras.engine.topology.Layer.output_mask(self)
keras.engine.topology.Layer.output_shape(self)
keras.engine.topology.Layer.set_input(self,input_tensor,shape=None)
keras.engine.topology.Layer.set_weights(self,weights)
keras.engine.topology.Layer.trainable_weights(self)
keras.engine.topology.Layer.trainable_weights(self,weights)
keras.engine.topology.Layer.weights(self)
keras.engine.topology.Merge(self,layers=None,mode='sum',concat_axis=-1,dot_axes=-1,output_shape=None,output_mask=None,node_indices=None,tensor_indices=None,name=None)
keras.engine.topology.Merge.__init__(self,layers=None,mode='sum',concat_axis=-1,dot_axes=-1,output_shape=None,output_mask=None,node_indices=None,tensor_indices=None,name=None)
keras.engine.topology.Merge._arguments_validation(self,layers,mode,concat_axis,dot_axes,node_indices,tensor_indices)
keras.engine.topology.Merge.call(self,inputs,mask=None)
keras.engine.topology.Merge.compute_mask(self,inputs,mask=None)
keras.engine.topology.Merge.from_config(cls,config)
keras.engine.topology.Merge.get_config(self)
keras.engine.topology.Merge.get_output_shape_for(self,input_shape)
keras.engine.topology.Node(self,outbound_layer,inbound_layers,node_indices,tensor_indices,input_tensors,output_tensors,input_masks,output_masks,input_shapes,output_shapes)
keras.engine.topology.Node.__init__(self,outbound_layer,inbound_layers,node_indices,tensor_indices,input_tensors,output_tensors,input_masks,output_masks,input_shapes,output_shapes)
keras.engine.topology.Node.create_node(cls,outbound_layer,inbound_layers,node_indices=None,tensor_indices=None)
keras.engine.topology.Node.get_config(self)
keras.engine.topology.get_source_inputs(tensor,layer=None,node_index=None)
keras.engine.topology.merge(inputs,mode='sum',concat_axis=-1,dot_axes=-1,output_shape=None,output_mask=None,name=None)
keras.engine.topology.to_list(x)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/engine/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/preprocessing/text.py----------------------------------------
A:keras.preprocessing.text.f->f.replace("'", '').replace("'", '')
A:keras.preprocessing.text.text->text.translate(maketrans(filters, split * len(filters))).translate(maketrans(filters, split * len(filters)))
A:keras.preprocessing.text.seq->set(seq)
A:keras.preprocessing.text.wcounts->list(self.word_counts.items())
A:keras.preprocessing.text.self.word_index->dict(list(zip(sorted_voc, list(range(1, len(sorted_voc) + 1)))))
A:keras.preprocessing.text.self.document_count->len(sequences)
A:keras.preprocessing.text.i->self.word_index.get(w)
A:keras.preprocessing.text.sequences->self.texts_to_sequences(texts)
A:keras.preprocessing.text.X->numpy.zeros((len(sequences), nb_words))
A:keras.preprocessing.text.idf->numpy.log(1 + self.document_count / (1 + self.index_docs.get(j, 0)))
keras.preprocessing.text.Tokenizer(self,nb_words=None,filters=base_filter(),lower=True,split='',char_level=False)
keras.preprocessing.text.Tokenizer.__init__(self,nb_words=None,filters=base_filter(),lower=True,split='',char_level=False)
keras.preprocessing.text.Tokenizer.fit_on_sequences(self,sequences)
keras.preprocessing.text.Tokenizer.fit_on_texts(self,texts)
keras.preprocessing.text.Tokenizer.sequences_to_matrix(self,sequences,mode='binary')
keras.preprocessing.text.Tokenizer.texts_to_matrix(self,texts,mode='binary')
keras.preprocessing.text.Tokenizer.texts_to_sequences(self,texts)
keras.preprocessing.text.Tokenizer.texts_to_sequences_generator(self,texts)
keras.preprocessing.text.base_filter()
keras.preprocessing.text.one_hot(text,n,filters=base_filter(),lower=True,split='')
keras.preprocessing.text.text_to_word_sequence(text,filters=base_filter(),lower=True,split='')


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/preprocessing/sequence.py----------------------------------------
A:keras.preprocessing.sequence.nb_samples->len(sequences)
A:keras.preprocessing.sequence.maxlen->numpy.max(lengths)
A:keras.preprocessing.sequence.sample_shape->tuple()
A:keras.preprocessing.sequence.x->(np.ones((nb_samples, maxlen) + sample_shape) * value).astype(dtype)
A:keras.preprocessing.sequence.trunc->numpy.asarray(trunc, dtype=dtype)
A:keras.preprocessing.sequence.rank->numpy.array(list(range(size)))
A:keras.preprocessing.sequence.window_start->max(0, i - window_size)
A:keras.preprocessing.sequence.window_end->min(len(sequence), i + window_size + 1)
A:keras.preprocessing.sequence.nb_negative_samples->int(len(labels) * negative_samples)
A:keras.preprocessing.sequence.seed->random.randint(0, 10000000.0)
keras.preprocessing.sequence.make_sampling_table(size,sampling_factor=1e-05)
keras.preprocessing.sequence.pad_sequences(sequences,maxlen=None,dtype='int32',padding='pre',truncating='pre',value=0.0)
keras.preprocessing.sequence.skipgrams(sequence,vocabulary_size,window_size=4,negative_samples=1.0,shuffle=True,categorical=False,sampling_table=None)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/preprocessing/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/preprocessing/image.py----------------------------------------
A:keras.preprocessing.image.rotation_matrix->numpy.array([[np.cos(theta), -np.sin(theta), 0], [np.sin(theta), np.cos(theta), 0], [0, 0, 1]])
A:keras.preprocessing.image.transform_matrix->transform_matrix_offset_center(transform_matrix, h, w)
A:keras.preprocessing.image.x->self.image_data_generator.standardize(x)
A:keras.preprocessing.image.translation_matrix->numpy.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])
A:keras.preprocessing.image.shear->numpy.random.uniform(-self.shear_range, self.shear_range)
A:keras.preprocessing.image.shear_matrix->numpy.array([[1, -np.sin(shear), 0], [0, np.cos(shear), 0], [0, 0, 1]])
A:keras.preprocessing.image.(zx, zy)->numpy.random.uniform(self.zoom_range[0], self.zoom_range[1], 2)
A:keras.preprocessing.image.zoom_matrix->numpy.array([[zx, 0, 0], [0, zy, 0], [0, 0, 1]])
A:keras.preprocessing.image.offset_matrix->numpy.array([[1, 0, o_x], [0, 1, o_y], [0, 0, 1]])
A:keras.preprocessing.image.reset_matrix->numpy.array([[1, 0, -o_x], [0, 1, -o_y], [0, 0, 1]])
A:keras.preprocessing.image.dim_ordering->K.image_dim_ordering()
A:keras.preprocessing.image.x_max->numpy.max(x)
A:keras.preprocessing.image.img->array_to_img(batch_x[i], self.dim_ordering, scale=True)
A:keras.preprocessing.image.flatx->numpy.reshape(x, x.size)
A:keras.preprocessing.image.whitex->numpy.dot(flatx, self.principal_components)
A:keras.preprocessing.image.X->numpy.copy(X)
A:keras.preprocessing.image.aX->numpy.zeros(tuple([rounds * X.shape[0]] + list(X.shape)[1:]))
A:keras.preprocessing.image.aX[i + r * X.shape[0]]->self.random_transform(X[i])
A:keras.preprocessing.image.self.mean->numpy.mean(X, axis=0)
A:keras.preprocessing.image.self.std->numpy.std(X, axis=0)
A:keras.preprocessing.image.flatX->numpy.reshape(X, (X.shape[0], X.shape[1] * X.shape[2] * X.shape[3]))
A:keras.preprocessing.image.(U, S, V)->scipy.linalg.svd(sigma)
A:keras.preprocessing.image.self.principal_components->numpy.dot(np.dot(U, np.diag(1.0 / np.sqrt(S + 1e-06))), U.T)
A:keras.preprocessing.image.self.lock->threading.Lock()
A:keras.preprocessing.image.self.index_generator->self._flow_index(N, batch_size, shuffle, seed)
A:keras.preprocessing.image.index_array->numpy.random.permutation(N)
A:keras.preprocessing.image.(index_array, current_index, current_batch_size)->next(self.index_generator)
A:keras.preprocessing.image.batch_x->numpy.zeros((current_batch_size,) + self.image_shape)
A:keras.preprocessing.image.fname->'{prefix}_{index}_{hash}.{format}'.format(prefix=self.save_prefix, index=current_index + i, hash=np.random.randint(10000.0), format=self.save_format)
A:keras.preprocessing.image.self.target_size->tuple(target_size)
A:keras.preprocessing.image.self.nb_class->len(classes)
A:keras.preprocessing.image.self.class_indices->dict(zip(classes, range(len(classes))))
A:keras.preprocessing.image.subpath->os.path.join(directory, subdir)
A:keras.preprocessing.image.self.classes->numpy.zeros((self.nb_sample,), dtype='int32')
A:keras.preprocessing.image.batch_y->numpy.zeros((len(batch_x), self.nb_class), dtype='float32')
keras.preprocessing.image.DirectoryIterator(self,directory,image_data_generator,target_size=(256,256),color_mode='rgb',dim_ordering='default',classes=None,class_mode='categorical',batch_size=32,shuffle=True,seed=None,save_to_dir=None,save_prefix='',save_format='jpeg')
keras.preprocessing.image.DirectoryIterator.__init__(self,directory,image_data_generator,target_size=(256,256),color_mode='rgb',dim_ordering='default',classes=None,class_mode='categorical',batch_size=32,shuffle=True,seed=None,save_to_dir=None,save_prefix='',save_format='jpeg')
keras.preprocessing.image.DirectoryIterator.next(self)
keras.preprocessing.image.ImageDataGenerator(self,featurewise_center=False,samplewise_center=False,featurewise_std_normalization=False,samplewise_std_normalization=False,zca_whitening=False,rotation_range=0.0,width_shift_range=0.0,height_shift_range=0.0,shear_range=0.0,zoom_range=0.0,channel_shift_range=0.0,fill_mode='nearest',cval=0.0,horizontal_flip=False,vertical_flip=False,rescale=None,dim_ordering='default')
keras.preprocessing.image.ImageDataGenerator.__init__(self,featurewise_center=False,samplewise_center=False,featurewise_std_normalization=False,samplewise_std_normalization=False,zca_whitening=False,rotation_range=0.0,width_shift_range=0.0,height_shift_range=0.0,shear_range=0.0,zoom_range=0.0,channel_shift_range=0.0,fill_mode='nearest',cval=0.0,horizontal_flip=False,vertical_flip=False,rescale=None,dim_ordering='default')
keras.preprocessing.image.ImageDataGenerator.fit(self,X,augment=False,rounds=1,seed=None)
keras.preprocessing.image.ImageDataGenerator.flow(self,X,y=None,batch_size=32,shuffle=True,seed=None,save_to_dir=None,save_prefix='',save_format='jpeg')
keras.preprocessing.image.ImageDataGenerator.flow_from_directory(self,directory,target_size=(256,256),color_mode='rgb',classes=None,class_mode='categorical',batch_size=32,shuffle=True,seed=None,save_to_dir=None,save_prefix='',save_format='jpeg')
keras.preprocessing.image.ImageDataGenerator.random_transform(self,x)
keras.preprocessing.image.ImageDataGenerator.standardize(self,x)
keras.preprocessing.image.Iterator(self,N,batch_size,shuffle,seed)
keras.preprocessing.image.Iterator.__init__(self,N,batch_size,shuffle,seed)
keras.preprocessing.image.Iterator.__iter__(self)
keras.preprocessing.image.Iterator.__next__(self,*args,**kwargs)
keras.preprocessing.image.Iterator._flow_index(self,N,batch_size=32,shuffle=False,seed=None)
keras.preprocessing.image.Iterator.reset(self)
keras.preprocessing.image.NumpyArrayIterator(self,X,y,image_data_generator,batch_size=32,shuffle=False,seed=None,dim_ordering='default',save_to_dir=None,save_prefix='',save_format='jpeg')
keras.preprocessing.image.NumpyArrayIterator.__init__(self,X,y,image_data_generator,batch_size=32,shuffle=False,seed=None,dim_ordering='default',save_to_dir=None,save_prefix='',save_format='jpeg')
keras.preprocessing.image.NumpyArrayIterator.next(self)
keras.preprocessing.image.apply_transform(x,transform_matrix,channel_index=0,fill_mode='nearest',cval=0.0)
keras.preprocessing.image.array_to_img(x,dim_ordering='default',scale=True)
keras.preprocessing.image.flip_axis(x,axis)
keras.preprocessing.image.img_to_array(img,dim_ordering='default')
keras.preprocessing.image.list_pictures(directory,ext='jpg|jpeg|bmp|png')
keras.preprocessing.image.load_img(path,grayscale=False,target_size=None)
keras.preprocessing.image.random_barrel_transform(x,intensity)
keras.preprocessing.image.random_channel_shift(x,intensity,channel_index=0)
keras.preprocessing.image.random_rotation(x,rg,row_index=1,col_index=2,channel_index=0,fill_mode='nearest',cval=0.0)
keras.preprocessing.image.random_shear(x,intensity,row_index=1,col_index=2,channel_index=0,fill_mode='nearest',cval=0.0)
keras.preprocessing.image.random_shift(x,wrg,hrg,row_index=1,col_index=2,channel_index=0,fill_mode='nearest',cval=0.0)
keras.preprocessing.image.random_zoom(x,zoom_range,row_index=1,col_index=2,channel_index=0,fill_mode='nearest',cval=0.0)
keras.preprocessing.image.transform_matrix_offset_center(matrix,x,y)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/backend/theano_backend.py----------------------------------------
A:keras.backend.theano_backend._LEARNING_PHASE->theano.tensor.scalar(dtype='uint8', name='keras_learning_phase')
A:keras.backend.theano_backend.value->numpy.asarray(value, dtype=dtype)
A:keras.backend.theano_backend.ndim->len(shape)
A:keras.backend.theano_backend.shape->list(x.shape)
A:keras.backend.theano_backend.x->x.dimshuffle((0, 4, 1, 2, 3)).dimshuffle((0, 4, 1, 2, 3))
A:keras.backend.theano_backend.out->expand_dims(out, 1)
A:keras.backend.theano_backend.broadcast_beta->theano.tensor.reshape(beta, target_shape)
A:keras.backend.theano_backend.broadcast_gamma->theano.tensor.reshape(gamma, target_shape)
A:keras.backend.theano_backend.(normed, mean, stdinv)->theano.sandbox.cuda.dnn.dnn_batch_normalization_train(x, broadcast_gamma, broadcast_beta, 'spatial', epsilon)
A:keras.backend.theano_backend.var->var.dimshuffle(shuffle_pattern).dimshuffle(shuffle_pattern)
A:keras.backend.theano_backend.mean->mean.dimshuffle(shuffle_pattern).dimshuffle(shuffle_pattern)
A:keras.backend.theano_backend.target_shape->theano.tensor.stack(*target_shape)
A:keras.backend.theano_backend.broadcast_mean->theano.tensor.reshape(mean, target_shape)
A:keras.backend.theano_backend.broadcast_var->theano.tensor.reshape(var, target_shape)
A:keras.backend.theano_backend.normed->normed.dimshuffle(shuffle_pattern).dimshuffle(shuffle_pattern)
A:keras.backend.theano_backend.axis->mean.dimshuffle(shuffle_pattern).dimshuffle(shuffle_pattern).broadcastable.index(False)
A:keras.backend.theano_backend.shuffle_pattern->list(range(ndim))
A:keras.backend.theano_backend.beta->beta.dimshuffle(shuffle_pattern).dimshuffle(shuffle_pattern)
A:keras.backend.theano_backend.gamma->gamma.dimshuffle(shuffle_pattern).dimshuffle(shuffle_pattern)
A:keras.backend.theano_backend.pattern->tuple(pattern)
A:keras.backend.theano_backend.output->theano.tensor.signal.pool.pool_2d(input=x.dimshuffle(0, 1, 4, 3, 2), ds=(pool_size[1], pool_size[0]), st=(strides[1], strides[0]), ignore_border=ignore_border, padding=padding, mode='average_exc_pad')
A:keras.backend.theano_backend.input_shape->tuple((indices.shape[i] for i in range(indices.ndim)))
A:keras.backend.theano_backend.indices->list(range(input_length))
A:keras.backend.theano_backend.oh->theano.tensor.reshape(oh, input_shape + (nb_classes,))
A:keras.backend.theano_backend.p_op->Print(message)
A:keras.backend.theano_backend.self.function->theano.function(inputs, outputs, updates=updates, allow_input_downcast=True, on_unused_input='ignore', **kwargs)
A:keras.backend.theano_backend.inputs->inputs.dimshuffle(axes).dimshuffle(axes)
A:keras.backend.theano_backend.mask->mask.dimshuffle(axes).dimshuffle(axes)
A:keras.backend.theano_backend.(output, new_states)->step_function(input, states)
A:keras.backend.theano_backend.prev_output->zeros_like(output)
A:keras.backend.theano_backend.outputs->outputs.dimshuffle(axes).dimshuffle(axes)
A:keras.backend.theano_backend.initial_output->theano.tensor.unbroadcast(initial_output, 0, 1)
A:keras.backend.theano_backend.(results, _)->theano.scan(_step, sequences=inputs, outputs_info=[None] + initial_states, non_sequences=constants, go_backwards=go_backwards)
A:keras.backend.theano_backend.(output, states)->step_function(inputs[i], states + constants)
A:keras.backend.theano_backend.target->reshape(target, shape(output))
A:keras.backend.theano_backend.seed->numpy.random.randint(1, 10000000.0)
A:keras.backend.theano_backend.rng->RandomStreams(seed=seed)
A:keras.backend.theano_backend.random_tensor->theano.tensor.patternbroadcast(random_tensor, [dim == 1 for dim in noise_shape])
A:keras.backend.theano_backend.norm->theano.tensor.sqrt(T.sum(T.square(x), axis=axis, keepdims=True))
A:keras.backend.theano_backend.(result, _)->theano.map(lambda prediction, target: any(equal(prediction, target)), sequences=[predictions_top_k, targets])
A:keras.backend.theano_backend.kernel->kernel.dimshuffle((4, 3, 0, 1, 2)).dimshuffle((4, 3, 0, 1, 2))
A:keras.backend.theano_backend.image_shape->_preprocess_conv2d_image_shape(dim_ordering, image_shape)
A:keras.backend.theano_backend.volume_shape->_preprocess_conv3d_volume_shape(dim_ordering, volume_shape)
A:keras.backend.theano_backend.filter_shape->_preprocess_conv3d_filter_shape(dim_ordering, filter_shape)
A:keras.backend.theano_backend.conv_out->conv_out.dimshuffle((0, 2, 3, 4, 1)).dimshuffle((0, 2, 3, 4, 1))
A:keras.backend.theano_backend.th_border_mode->_preprocess_border_mode(border_mode)
A:keras.backend.theano_backend.np_kernel->kernel.dimshuffle((4, 3, 0, 1, 2)).dimshuffle((4, 3, 0, 1, 2)).eval()
A:keras.backend.theano_backend.op->theano.tensor.nnet.abstract_conv.AbstractConv2d_gradInputs(imshp=output_shape, kshp=filter_shape, subsample=strides, border_mode=th_border_mode, filter_flip=not flip_filters)
A:keras.backend.theano_backend.pool_out->pool_out.dimshuffle((0, 2, 3, 4, 1)).dimshuffle((0, 2, 3, 4, 1))
A:keras.backend.theano_backend.Y_->theano.tensor.set_subtensor(Y_[T.arange(Y.shape[0]) * 2 + 1], Y)
A:keras.backend.theano_backend.non_repeats->theano.tensor.neq(Y[skip_idxs], Y[skip_idxs + 2])
A:keras.backend.theano_backend.active_next->theano.tensor.cast(T.minimum(T.maximum(active + 1, T.max(T.concatenate([active_skip_idxs, [-1]])) + 2 + 1), log_p_curr.shape[0]), 'int32')
A:keras.backend.theano_backend.common_factor->theano.tensor.max(log_probs)
A:keras.backend.theano_backend.p_prev->theano.tensor.exp(log_p_prev[:active] - common_factor)
A:keras.backend.theano_backend._p_prev->theano.tensor.inc_subtensor(_p_prev[active_skip_idxs + 2], p_prev[active_skip_idxs])
A:keras.backend.theano_backend.log_p_next->theano.tensor.set_subtensor(zeros[:active_next], log_p_curr[:active_next] + updated_log_p_prev)
A:keras.backend.theano_backend.L->theano.tensor.log(smoothed_predict)
A:keras.backend.theano_backend.zeros->theano.tensor.zeros_like(L[0])
A:keras.backend.theano_backend.base->theano.tensor.set_subtensor(zeros[:1], np.float32(1))
A:keras.backend.theano_backend.f_skip_idxs->ctc_create_skip_idxs(Y)
A:keras.backend.theano_backend.b_skip_idxs->ctc_create_skip_idxs(Y[::-1])
A:keras.backend.theano_backend.(f_active_next, log_f_next)->ctc_update_log_p(f_skip_idxs, zeros, f_active, log_f_curr, log_f_prev)
A:keras.backend.theano_backend.(b_active_next, log_b_next)->ctc_update_log_p(b_skip_idxs, zeros, b_active, log_b_curr, log_b_prev)
A:keras.backend.theano_backend.([f_active, log_f_probs, b_active, log_b_probs], _)->theano.scan(step, sequences=[L, L[::-1, ::-1]], outputs_info=[np.int32(1), log_first, np.int32(1), log_first])
A:keras.backend.theano_backend.idxs->theano.tensor.arange(L.shape[1]).dimshuffle('x', 0)
A:keras.backend.theano_backend.(log_probs, mask)->ctc_path_probs(predict, ctc_interleave_blanks(Y))
A:keras.backend.theano_backend.(ret, _)->theano.scan(fn=ctc_step, outputs_info=None, sequences=[y_true, y_pred, input_length, label_length])
A:keras.backend.theano_backend.ret->ret.dimshuffle('x', 0).dimshuffle('x', 0)
keras.backend.Function(self,inputs,outputs,updates=[],**kwargs)
keras.backend._assert_has_capability(module,func)
keras.backend._assert_sparse_module()
keras.backend._old_theano_conv3d(x,kernel,strides=(1,1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,volume_shape=None,filter_shape=None)
keras.backend._old_theano_pool3d(x,pool_size,strides=(1,1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,pool_mode='max')
keras.backend._postprocess_conv2d_output(conv_out,x,border_mode,np_kernel,strides,dim_ordering)
keras.backend._postprocess_conv3d_output(conv_out,x,border_mode,np_kernel,strides,dim_ordering)
keras.backend._preprocess_border_mode(border_mode)
keras.backend._preprocess_conv2d_filter_shape(dim_ordering,filter_shape)
keras.backend._preprocess_conv2d_image_shape(dim_ordering,image_shape)
keras.backend._preprocess_conv2d_input(x,dim_ordering)
keras.backend._preprocess_conv2d_kernel(kernel,dim_ordering)
keras.backend._preprocess_conv3d_filter_shape(dim_ordering,filter_shape)
keras.backend._preprocess_conv3d_input(x,dim_ordering)
keras.backend._preprocess_conv3d_kernel(kernel,dim_ordering)
keras.backend._preprocess_conv3d_volume_shape(dim_ordering,volume_shape)
keras.backend.abs(x)
keras.backend.all(x,axis=None,keepdims=False)
keras.backend.any(x,axis=None,keepdims=False)
keras.backend.argmax(x,axis=-1)
keras.backend.argmin(x,axis=-1)
keras.backend.asymmetric_spatial_2d_padding(x,top_pad=1,bottom_pad=1,left_pad=1,right_pad=1,dim_ordering=_IMAGE_DIM_ORDERING)
keras.backend.asymmetric_temporal_padding(x,left_pad=1,right_pad=1)
keras.backend.atrous_conv2d(x,kernel,rate=1,border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,image_shape=None,filter_shape=None)
keras.backend.batch_dot(x,y,axes=None)
keras.backend.batch_flatten(x)
keras.backend.batch_get_value(xs)
keras.backend.batch_normalization(x,mean,var,beta,gamma,epsilon=0.0001)
keras.backend.batch_set_value(tuples)
keras.backend.binary_crossentropy(output,target,from_logits=False)
keras.backend.cast(x,dtype)
keras.backend.categorical_crossentropy(output,target,from_logits=False)
keras.backend.clip(x,min_value,max_value)
keras.backend.concatenate(tensors,axis=-1)
keras.backend.conv2d(x,kernel,strides=(1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,image_shape=None,filter_shape=None,filter_dilation=(1,1))
keras.backend.conv3d(x,kernel,strides=(1,1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,volume_shape=None,filter_shape=None,filter_dilation=(1,1,1))
keras.backend.cos(x)
keras.backend.count_params(x)
keras.backend.ctc_batch_cost(y_true,y_pred,input_length,label_length)
keras.backend.ctc_cost(predict,Y)
keras.backend.ctc_create_skip_idxs(Y)
keras.backend.ctc_interleave_blanks(Y)
keras.backend.ctc_path_probs(predict,Y,alpha=0.0001)
keras.backend.ctc_update_log_p(skip_idxs,zeros,active,log_p_curr,log_p_prev)
keras.backend.deconv2d(x,kernel,output_shape,strides=(1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,image_shape=None,filter_shape=None)
keras.backend.dot(x,y)
keras.backend.dropout(x,level,noise_shape=None,seed=None)
keras.backend.dtype(x)
keras.backend.elu(x,alpha=1.0)
keras.backend.equal(x,y)
keras.backend.eval(x)
keras.backend.exp(x)
keras.backend.expand_dims(x,dim=-1)
keras.backend.eye(size,dtype=_FLOATX,name=None)
keras.backend.flatten(x)
keras.backend.function(inputs,outputs,updates=[],**kwargs)
keras.backend.gather(reference,indices)
keras.backend.get_value(x)
keras.backend.get_variable_shape(x)
keras.backend.gradients(loss,variables)
keras.backend.greater(x,y)
keras.backend.greater_equal(x,y)
keras.backend.hard_sigmoid(x)
keras.backend.in_test_phase(x,alt)
keras.backend.in_top_k(predictions,targets,k)
keras.backend.in_train_phase(x,alt)
keras.backend.is_sparse(tensor)
keras.backend.l2_normalize(x,axis)
keras.backend.learning_phase()
keras.backend.lesser(x,y)
keras.backend.lesser_equal(x,y)
keras.backend.log(x)
keras.backend.max(x,axis=None,keepdims=False)
keras.backend.maximum(x,y)
keras.backend.mean(x,axis=None,keepdims=False)
keras.backend.min(x,axis=None,keepdims=False)
keras.backend.minimum(x,y)
keras.backend.moving_average_update(variable,value,momentum)
keras.backend.ndim(x)
keras.backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.0001)
keras.backend.not_equal(x,y)
keras.backend.one_hot(indices,nb_classes)
keras.backend.ones(shape,dtype=_FLOATX,name=None)
keras.backend.ones_like(x)
keras.backend.pack(x)
keras.backend.permute_dimensions(x,pattern)
keras.backend.placeholder(shape=None,ndim=None,dtype=_FLOATX,sparse=False,name=None)
keras.backend.pool2d(x,pool_size,strides=(1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,pool_mode='max')
keras.backend.pool3d(x,pool_size,strides=(1,1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,pool_mode='max')
keras.backend.pow(x,a)
keras.backend.print_tensor(x,message='')
keras.backend.prod(x,axis=None,keepdims=False)
keras.backend.random_binomial(shape,p=0.0,dtype=_FLOATX,seed=None)
keras.backend.random_normal(shape,mean=0.0,std=1.0,dtype=_FLOATX,seed=None)
keras.backend.random_normal_variable(shape,mean,scale,dtype=_FLOATX,name=None)
keras.backend.random_uniform(shape,low=0.0,high=1.0,dtype=_FLOATX,seed=None)
keras.backend.random_uniform_variable(shape,low,high,dtype=_FLOATX,name=None)
keras.backend.relu(x,alpha=0.0,max_value=None)
keras.backend.repeat(x,n)
keras.backend.repeat_elements(x,rep,axis)
keras.backend.reshape(x,shape)
keras.backend.resize_images(X,height_factor,width_factor,dim_ordering)
keras.backend.resize_volumes(X,depth_factor,height_factor,width_factor,dim_ordering)
keras.backend.reverse(x,axes)
keras.backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None)
keras.backend.round(x)
keras.backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING)
keras.backend.set_learning_phase(value)
keras.backend.set_value(x,value)
keras.backend.shape(x)
keras.backend.sigmoid(x)
keras.backend.sign(x)
keras.backend.sin(x)
keras.backend.softmax(x)
keras.backend.softplus(x)
keras.backend.softsign(x)
keras.backend.sparse_categorical_crossentropy(output,target,from_logits=False)
keras.backend.spatial_2d_padding(x,padding=(1,1),dim_ordering=_IMAGE_DIM_ORDERING)
keras.backend.spatial_3d_padding(x,padding=(1,1,1),dim_ordering=_IMAGE_DIM_ORDERING)
keras.backend.sqrt(x)
keras.backend.square(x)
keras.backend.squeeze(x,axis)
keras.backend.std(x,axis=None,keepdims=False)
keras.backend.stop_gradient(variables)
keras.backend.sum(x,axis=None,keepdims=False)
keras.backend.switch(condition,then_expression,else_expression)
keras.backend.tanh(x)
keras.backend.temporal_padding(x,padding=1)
keras.backend.theano_backend.Function(self,inputs,outputs,updates=[],**kwargs)
keras.backend.theano_backend.Function.__init__(self,inputs,outputs,updates=[],**kwargs)
keras.backend.theano_backend._assert_has_capability(module,func)
keras.backend.theano_backend._assert_sparse_module()
keras.backend.theano_backend._old_theano_conv3d(x,kernel,strides=(1,1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,volume_shape=None,filter_shape=None)
keras.backend.theano_backend._old_theano_pool3d(x,pool_size,strides=(1,1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,pool_mode='max')
keras.backend.theano_backend._postprocess_conv2d_output(conv_out,x,border_mode,np_kernel,strides,dim_ordering)
keras.backend.theano_backend._postprocess_conv3d_output(conv_out,x,border_mode,np_kernel,strides,dim_ordering)
keras.backend.theano_backend._preprocess_border_mode(border_mode)
keras.backend.theano_backend._preprocess_conv2d_filter_shape(dim_ordering,filter_shape)
keras.backend.theano_backend._preprocess_conv2d_image_shape(dim_ordering,image_shape)
keras.backend.theano_backend._preprocess_conv2d_input(x,dim_ordering)
keras.backend.theano_backend._preprocess_conv2d_kernel(kernel,dim_ordering)
keras.backend.theano_backend._preprocess_conv3d_filter_shape(dim_ordering,filter_shape)
keras.backend.theano_backend._preprocess_conv3d_input(x,dim_ordering)
keras.backend.theano_backend._preprocess_conv3d_kernel(kernel,dim_ordering)
keras.backend.theano_backend._preprocess_conv3d_volume_shape(dim_ordering,volume_shape)
keras.backend.theano_backend.abs(x)
keras.backend.theano_backend.all(x,axis=None,keepdims=False)
keras.backend.theano_backend.any(x,axis=None,keepdims=False)
keras.backend.theano_backend.argmax(x,axis=-1)
keras.backend.theano_backend.argmin(x,axis=-1)
keras.backend.theano_backend.asymmetric_spatial_2d_padding(x,top_pad=1,bottom_pad=1,left_pad=1,right_pad=1,dim_ordering=_IMAGE_DIM_ORDERING)
keras.backend.theano_backend.asymmetric_temporal_padding(x,left_pad=1,right_pad=1)
keras.backend.theano_backend.atrous_conv2d(x,kernel,rate=1,border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,image_shape=None,filter_shape=None)
keras.backend.theano_backend.batch_dot(x,y,axes=None)
keras.backend.theano_backend.batch_flatten(x)
keras.backend.theano_backend.batch_get_value(xs)
keras.backend.theano_backend.batch_normalization(x,mean,var,beta,gamma,epsilon=0.0001)
keras.backend.theano_backend.batch_set_value(tuples)
keras.backend.theano_backend.binary_crossentropy(output,target,from_logits=False)
keras.backend.theano_backend.cast(x,dtype)
keras.backend.theano_backend.categorical_crossentropy(output,target,from_logits=False)
keras.backend.theano_backend.clip(x,min_value,max_value)
keras.backend.theano_backend.concatenate(tensors,axis=-1)
keras.backend.theano_backend.conv2d(x,kernel,strides=(1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,image_shape=None,filter_shape=None,filter_dilation=(1,1))
keras.backend.theano_backend.conv3d(x,kernel,strides=(1,1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,volume_shape=None,filter_shape=None,filter_dilation=(1,1,1))
keras.backend.theano_backend.cos(x)
keras.backend.theano_backend.count_params(x)
keras.backend.theano_backend.ctc_batch_cost(y_true,y_pred,input_length,label_length)
keras.backend.theano_backend.ctc_cost(predict,Y)
keras.backend.theano_backend.ctc_create_skip_idxs(Y)
keras.backend.theano_backend.ctc_interleave_blanks(Y)
keras.backend.theano_backend.ctc_path_probs(predict,Y,alpha=0.0001)
keras.backend.theano_backend.ctc_update_log_p(skip_idxs,zeros,active,log_p_curr,log_p_prev)
keras.backend.theano_backend.deconv2d(x,kernel,output_shape,strides=(1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,image_shape=None,filter_shape=None)
keras.backend.theano_backend.dot(x,y)
keras.backend.theano_backend.dropout(x,level,noise_shape=None,seed=None)
keras.backend.theano_backend.dtype(x)
keras.backend.theano_backend.elu(x,alpha=1.0)
keras.backend.theano_backend.equal(x,y)
keras.backend.theano_backend.eval(x)
keras.backend.theano_backend.exp(x)
keras.backend.theano_backend.expand_dims(x,dim=-1)
keras.backend.theano_backend.eye(size,dtype=_FLOATX,name=None)
keras.backend.theano_backend.flatten(x)
keras.backend.theano_backend.function(inputs,outputs,updates=[],**kwargs)
keras.backend.theano_backend.gather(reference,indices)
keras.backend.theano_backend.get_value(x)
keras.backend.theano_backend.get_variable_shape(x)
keras.backend.theano_backend.gradients(loss,variables)
keras.backend.theano_backend.greater(x,y)
keras.backend.theano_backend.greater_equal(x,y)
keras.backend.theano_backend.hard_sigmoid(x)
keras.backend.theano_backend.in_test_phase(x,alt)
keras.backend.theano_backend.in_top_k(predictions,targets,k)
keras.backend.theano_backend.in_train_phase(x,alt)
keras.backend.theano_backend.is_sparse(tensor)
keras.backend.theano_backend.l2_normalize(x,axis)
keras.backend.theano_backend.learning_phase()
keras.backend.theano_backend.lesser(x,y)
keras.backend.theano_backend.lesser_equal(x,y)
keras.backend.theano_backend.log(x)
keras.backend.theano_backend.max(x,axis=None,keepdims=False)
keras.backend.theano_backend.maximum(x,y)
keras.backend.theano_backend.mean(x,axis=None,keepdims=False)
keras.backend.theano_backend.min(x,axis=None,keepdims=False)
keras.backend.theano_backend.minimum(x,y)
keras.backend.theano_backend.moving_average_update(variable,value,momentum)
keras.backend.theano_backend.ndim(x)
keras.backend.theano_backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.0001)
keras.backend.theano_backend.not_equal(x,y)
keras.backend.theano_backend.one_hot(indices,nb_classes)
keras.backend.theano_backend.ones(shape,dtype=_FLOATX,name=None)
keras.backend.theano_backend.ones_like(x)
keras.backend.theano_backend.pack(x)
keras.backend.theano_backend.permute_dimensions(x,pattern)
keras.backend.theano_backend.placeholder(shape=None,ndim=None,dtype=_FLOATX,sparse=False,name=None)
keras.backend.theano_backend.pool2d(x,pool_size,strides=(1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,pool_mode='max')
keras.backend.theano_backend.pool3d(x,pool_size,strides=(1,1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,pool_mode='max')
keras.backend.theano_backend.pow(x,a)
keras.backend.theano_backend.print_tensor(x,message='')
keras.backend.theano_backend.prod(x,axis=None,keepdims=False)
keras.backend.theano_backend.random_binomial(shape,p=0.0,dtype=_FLOATX,seed=None)
keras.backend.theano_backend.random_normal(shape,mean=0.0,std=1.0,dtype=_FLOATX,seed=None)
keras.backend.theano_backend.random_normal_variable(shape,mean,scale,dtype=_FLOATX,name=None)
keras.backend.theano_backend.random_uniform(shape,low=0.0,high=1.0,dtype=_FLOATX,seed=None)
keras.backend.theano_backend.random_uniform_variable(shape,low,high,dtype=_FLOATX,name=None)
keras.backend.theano_backend.relu(x,alpha=0.0,max_value=None)
keras.backend.theano_backend.repeat(x,n)
keras.backend.theano_backend.repeat_elements(x,rep,axis)
keras.backend.theano_backend.reshape(x,shape)
keras.backend.theano_backend.resize_images(X,height_factor,width_factor,dim_ordering)
keras.backend.theano_backend.resize_volumes(X,depth_factor,height_factor,width_factor,dim_ordering)
keras.backend.theano_backend.reverse(x,axes)
keras.backend.theano_backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None)
keras.backend.theano_backend.round(x)
keras.backend.theano_backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING)
keras.backend.theano_backend.set_learning_phase(value)
keras.backend.theano_backend.set_value(x,value)
keras.backend.theano_backend.shape(x)
keras.backend.theano_backend.sigmoid(x)
keras.backend.theano_backend.sign(x)
keras.backend.theano_backend.sin(x)
keras.backend.theano_backend.softmax(x)
keras.backend.theano_backend.softplus(x)
keras.backend.theano_backend.softsign(x)
keras.backend.theano_backend.sparse_categorical_crossentropy(output,target,from_logits=False)
keras.backend.theano_backend.spatial_2d_padding(x,padding=(1,1),dim_ordering=_IMAGE_DIM_ORDERING)
keras.backend.theano_backend.spatial_3d_padding(x,padding=(1,1,1),dim_ordering=_IMAGE_DIM_ORDERING)
keras.backend.theano_backend.sqrt(x)
keras.backend.theano_backend.square(x)
keras.backend.theano_backend.squeeze(x,axis)
keras.backend.theano_backend.std(x,axis=None,keepdims=False)
keras.backend.theano_backend.stop_gradient(variables)
keras.backend.theano_backend.sum(x,axis=None,keepdims=False)
keras.backend.theano_backend.switch(condition,then_expression,else_expression)
keras.backend.theano_backend.tanh(x)
keras.backend.theano_backend.temporal_padding(x,padding=1)
keras.backend.theano_backend.tile(x,n)
keras.backend.theano_backend.to_dense(tensor)
keras.backend.theano_backend.transpose(x)
keras.backend.theano_backend.update(x,new_x)
keras.backend.theano_backend.update_add(x,increment)
keras.backend.theano_backend.update_sub(x,decrement)
keras.backend.theano_backend.var(x,axis=None,keepdims=False)
keras.backend.theano_backend.variable(value,dtype=_FLOATX,name=None)
keras.backend.theano_backend.zeros(shape,dtype=_FLOATX,name=None)
keras.backend.theano_backend.zeros_like(x)
keras.backend.tile(x,n)
keras.backend.to_dense(tensor)
keras.backend.transpose(x)
keras.backend.update(x,new_x)
keras.backend.update_add(x,increment)
keras.backend.update_sub(x,decrement)
keras.backend.var(x,axis=None,keepdims=False)
keras.backend.variable(value,dtype=_FLOATX,name=None)
keras.backend.zeros(shape,dtype=_FLOATX,name=None)
keras.backend.zeros_like(x)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/backend/common.py----------------------------------------
A:keras.backend.common._UID_PREFIXES->defaultdict(int)
A:keras.backend.common._FLOATX->str(floatx)
A:keras.backend.common._IMAGE_DIM_ORDERING->str(dim_ordering)
keras.backend.cast_to_floatx(x)
keras.backend.common.cast_to_floatx(x)
keras.backend.common.epsilon()
keras.backend.common.floatx()
keras.backend.common.get_uid(prefix='')
keras.backend.common.image_dim_ordering()
keras.backend.common.is_keras_tensor(x)
keras.backend.common.legacy_weight_ordering()
keras.backend.common.reset_uids()
keras.backend.common.set_epsilon(e)
keras.backend.common.set_floatx(floatx)
keras.backend.common.set_image_dim_ordering(dim_ordering)
keras.backend.common.set_legacy_weight_ordering(value)
keras.backend.epsilon()
keras.backend.floatx()
keras.backend.get_uid(prefix='')
keras.backend.image_dim_ordering()
keras.backend.is_keras_tensor(x)
keras.backend.legacy_weight_ordering()
keras.backend.set_epsilon(e)
keras.backend.set_floatx(floatx)
keras.backend.set_image_dim_ordering(dim_ordering)
keras.backend.set_legacy_weight_ordering(value)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/backend/__init__.py----------------------------------------
A:keras.backend.__init__._keras_base_dir->os.path.expanduser('~')
A:keras.backend.__init__._keras_dir->os.path.join(_keras_base_dir, '.keras')
A:keras.backend.__init__._config_path->os.path.expanduser(os.path.join(_keras_dir, 'keras.json'))
A:keras.backend.__init__._config->json.load(open(_config_path))
A:keras.backend.__init__._floatx->json.load(open(_config_path)).get('floatx', floatx())
A:keras.backend.__init__._epsilon->json.load(open(_config_path)).get('epsilon', epsilon())
A:keras.backend.__init__._backend->json.load(open(_config_path)).get('backend', _BACKEND)
A:keras.backend.__init__._image_dim_ordering->json.load(open(_config_path)).get('image_dim_ordering', image_dim_ordering())
keras.backend.__init__.backend()


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/backend/tensorflow_backend.py----------------------------------------
A:keras.backend.tensorflow_backend._LEARNING_PHASE->tensorflow.placeholder(dtype='uint8', name='keras_learning_phase')
A:keras.backend.tensorflow_backend._SESSION->tensorflow.Session(config=tf.ConfigProto(intra_op_parallelism_threads=nb_thread, allow_soft_placement=True))
A:keras.backend.tensorflow_backend.nb_thread->int(os.environ.get('OMP_NUM_THREADS'))
A:keras.backend.tensorflow_backend.x->tensorflow.nn.avg_pool3d(x, pool_size, strides, padding=padding)
A:keras.backend.tensorflow_backend.sparse_coo->numpy.asarray(value).tocoo()
A:keras.backend.tensorflow_backend.indices->tensorflow.transpose(tf.reshape(tf.concat(0, [batch_ind, label_ind]), [2, -1]))
A:keras.backend.tensorflow_backend.v->tensorflow.Variable(value, dtype=_convert_string_dtype(dtype), name=name)
A:keras.backend.tensorflow_backend.shape->tensorflow.nn.avg_pool3d(x, pool_size, strides, padding=padding).get_shape()
A:keras.backend.tensorflow_backend.tf_shape->tensorflow.constant(np.array(list([0 for _ in range(len(shape))]), dtype=np.int64))
A:keras.backend.tensorflow_backend.tf_dtype->_convert_string_dtype(x.dtype.name.split('_')[0])
A:keras.backend.tensorflow_backend.seed->numpy.random.randint(10000000.0)
A:keras.backend.tensorflow_backend.value->numpy.asarray(value)
A:keras.backend.tensorflow_backend.y_shape->int_shape(y)
A:keras.backend.tensorflow_backend.y_permute_dim->list(range(ndim(y)))
A:keras.backend.tensorflow_backend.xt->tensorflow.reshape(x, [-1, x_shape[-1]])
A:keras.backend.tensorflow_backend.yt->tensorflow.reshape(tf.transpose(y, perm=y_permute_dim), [y_shape[-2], -1])
A:keras.backend.tensorflow_backend.out->expand_dims(out, 1)
A:keras.backend.tensorflow_backend.axis->_normalize_axis(axis, ndim(x))
A:keras.backend.tensorflow_backend.m->tensorflow.reduce_mean(x, reduction_indices=axis, keep_dims=True)
A:keras.backend.tensorflow_backend.devs_squared->tensorflow.square(x - m)
A:keras.backend.tensorflow_backend.zero->_to_tensor(0.0, x.dtype.base_dtype)
A:keras.backend.tensorflow_backend.inf->_to_tensor(np.inf, x.dtype.base_dtype)
A:keras.backend.tensorflow_backend.min_value->_to_tensor(min_value, x.dtype.base_dtype)
A:keras.backend.tensorflow_backend.max_value->_to_tensor(max_value, x.dtype.base_dtype)
A:keras.backend.tensorflow_backend.(mean, var)->tensorflow.nn.moments(x, reduction_axes, shift=None, name=None, keep_dims=False)
A:keras.backend.tensorflow_backend.normed->tensorflow.nn.batch_normalization(x, broadcast_mean, broadcast_var, broadcast_beta, broadcast_gamma, epsilon)
A:keras.backend.tensorflow_backend.target_shape->tensorflow.pack(target_shape)
A:keras.backend.tensorflow_backend.broadcast_mean->tensorflow.reshape(mean, target_shape)
A:keras.backend.tensorflow_backend.broadcast_var->tensorflow.reshape(var, target_shape)
A:keras.backend.tensorflow_backend.broadcast_gamma->tensorflow.reshape(gamma, target_shape)
A:keras.backend.tensorflow_backend.broadcast_beta->tensorflow.reshape(beta, target_shape)
A:keras.backend.tensorflow_backend.dims->ndim(tensors[0])
A:keras.backend.tensorflow_backend.original_shape->int_shape(X)
A:keras.backend.tensorflow_backend.X->tensorflow.image.resize_nearest_neighbor(X, new_shape)
A:keras.backend.tensorflow_backend.output->tensorflow.log(output / (1 - output))
A:keras.backend.tensorflow_backend.x_shape->copy.copy(x.get_shape())
A:keras.backend.tensorflow_backend.splits->tensorflow.split(axis, x_shape[axis], x)
A:keras.backend.tensorflow_backend.pattern->tensorflow.pack([1, n, 1])
A:keras.backend.tensorflow_backend.assign_placeholder->tensorflow.placeholder(tf_dtype, shape=value.shape)
A:keras.backend.tensorflow_backend.assign_op->tensorflow.nn.avg_pool3d(x, pool_size, strides, padding=padding).assign(assign_placeholder)
A:keras.backend.tensorflow_backend.self.inputs->list(inputs)
A:keras.backend.tensorflow_backend.self.outputs->list(outputs)
A:keras.backend.tensorflow_backend.self.updates_op->tensorflow.group(*updates_ops)
A:keras.backend.tensorflow_backend.session->get_session()
A:keras.backend.tensorflow_backend.updated->get_session().run(self.outputs + [self.updates_op], feed_dict=feed_dict)
A:keras.backend.tensorflow_backend.ndim->len(inputs.get_shape())
A:keras.backend.tensorflow_backend.inputs->tensorflow.concat(2, [tf.cast(mask, inputs.dtype), inputs])
A:keras.backend.tensorflow_backend.input_list->tensorflow.unpack(inputs)
A:keras.backend.tensorflow_backend.mask->tensorflow.transpose(mask, axes)
A:keras.backend.tensorflow_backend.mask_list->tensorflow.unpack(mask)
A:keras.backend.tensorflow_backend.(output, new_states)->step_function(input, states + constants)
A:keras.backend.tensorflow_backend.tiled_mask_t->tensorflow.tile(mask_t, tf.pack([1, tf.shape(new_state)[1]]))
A:keras.backend.tensorflow_backend.prev_output->zeros_like(output)
A:keras.backend.tensorflow_backend.outputs->tensorflow.transpose(outputs, axes)
A:keras.backend.tensorflow_backend.(output, states)->step_function(input, states + constants)
A:keras.backend.tensorflow_backend.nb_states->len(states)
A:keras.backend.tensorflow_backend.state_size->int(states[0].get_shape()[-1])
A:keras.backend.tensorflow_backend.state->tensorflow.concat(1, states)
A:keras.backend.tensorflow_backend.mask_t->tensorflow.cast(input[:, 0], tf.bool)
A:keras.backend.tensorflow_backend.new_state->tensorflow.concat(1, new_states)
A:keras.backend.tensorflow_backend.slice_begin->tensorflow.pack([tf.shape(outputs)[0] - 1] + [0] * (ndim - 1))
A:keras.backend.tensorflow_backend.slice_size->tensorflow.pack([1] + [-1] * (ndim - 1))
A:keras.backend.tensorflow_backend.first_input->tensorflow.squeeze(first_input, [0])
A:keras.backend.tensorflow_backend._step.output_size->int(_step(first_input, state)[0].get_shape()[-1])
A:keras.backend.tensorflow_backend.(outputs, final_state)->_dynamic_rnn_loop(_step, inputs, state, parallel_iterations=32, swap_memory=True, sequence_length=None)
A:keras.backend.tensorflow_backend.last_output->tensorflow.squeeze(last_output, [0])
A:keras.backend.tensorflow_backend.negative_part->tensorflow.nn.relu(-x)
A:keras.backend.tensorflow_backend.alpha->_to_tensor(alpha, x.dtype.base_dtype)
A:keras.backend.tensorflow_backend.res->tensorflow.nn.sparse_softmax_cross_entropy_with_logits(tf.reshape(output, [-1, int(output_shape[-1])]), cast(flatten(target), 'int64'))
A:keras.backend.tensorflow_backend.epsilon->_to_tensor(_EPSILON, output.dtype.base_dtype)
A:keras.backend.tensorflow_backend.output_shape->_preprocess_deconv_output_shape(output_shape, dim_ordering)
A:keras.backend.tensorflow_backend.one->_to_tensor(1.0, x.dtype.base_dtype)
A:keras.backend.tensorflow_backend.kernel->_preprocess_conv3d_kernel(kernel, dim_ordering)
A:keras.backend.tensorflow_backend.padding->_preprocess_border_mode(border_mode)
A:keras.backend.tensorflow_backend.depthwise_kernel->_preprocess_conv2d_kernel(depthwise_kernel, dim_ordering)
A:keras.backend.tensorflow_backend.pointwise_kernel->_preprocess_conv2d_kernel(pointwise_kernel, dim_ordering)
A:keras.backend.tensorflow_backend.label_shape->tensorflow.shape(labels)
A:keras.backend.tensorflow_backend.num_batches_tns->tensorflow.pack([label_shape[0]])
A:keras.backend.tensorflow_backend.max_num_labels_tns->tensorflow.pack([label_shape[1]])
A:keras.backend.tensorflow_backend.init->tensorflow.cast(tf.fill([1, label_shape[1]], 0), tf.bool)
A:keras.backend.tensorflow_backend.dense_mask->tensorflow.python.ops.functional_ops.scan(range_less_than, label_lengths, initializer=init, parallel_iterations=1)
A:keras.backend.tensorflow_backend.label_array->tensorflow.reshape(tf.tile(tf.range(0, label_shape[1]), num_batches_tns), label_shape)
A:keras.backend.tensorflow_backend.label_ind->tensorflow.boolean_mask(label_array, dense_mask)
A:keras.backend.tensorflow_backend.batch_array->tensorflow.transpose(tf.reshape(tf.tile(tf.range(0, label_shape[0]), max_num_labels_tns), tf.reverse(label_shape, [True])))
A:keras.backend.tensorflow_backend.batch_ind->tensorflow.boolean_mask(batch_array, dense_mask)
A:keras.backend.tensorflow_backend.vals_sparse->tensorflow.gather_nd(labels, indices)
A:keras.backend.tensorflow_backend.label_length->tensorflow.to_int32(tf.squeeze(label_length))
A:keras.backend.tensorflow_backend.input_length->tensorflow.to_int32(input_length)
A:keras.backend.tensorflow_backend.sparse_labels->tensorflow.to_int32(ctc_label_dense_to_sparse(y_true, label_length))
A:keras.backend.tensorflow_backend.y_pred->tensorflow.log(tf.transpose(y_pred, perm=[1, 0, 2]) + 1e-08)
A:keras.backend.tensorflow_backend.(decoded, log_prob)->tensorflow.contrib.ctc.ctc_beam_search_decoder(inputs=y_pred, sequence_length=input_length, beam_width=beam_width, top_paths=top_paths)
keras.backend.Function(self,inputs,outputs,updates=[])
keras.backend._cond(condition,then_lambda,else_lambda)
keras.backend._convert_string_dtype(dtype)
keras.backend._normalize_axis(axis,ndim)
keras.backend._postprocess_conv2d_output(x,dim_ordering)
keras.backend._postprocess_conv3d_output(x,dim_ordering)
keras.backend._preprocess_border_mode(border_mode)
keras.backend._preprocess_conv2d_input(x,dim_ordering)
keras.backend._preprocess_conv2d_kernel(kernel,dim_ordering)
keras.backend._preprocess_conv3d_input(x,dim_ordering)
keras.backend._preprocess_conv3d_kernel(kernel,dim_ordering)
keras.backend._preprocess_deconv_output_shape(shape,dim_ordering)
keras.backend._to_tensor(x,dtype)
keras.backend.abs(x)
keras.backend.all(x,axis=None,keepdims=False)
keras.backend.any(x,axis=None,keepdims=False)
keras.backend.argmax(x,axis=-1)
keras.backend.argmin(x,axis=-1)
keras.backend.asymmetric_spatial_2d_padding(x,top_pad=1,bottom_pad=1,left_pad=1,right_pad=1,dim_ordering=_IMAGE_DIM_ORDERING)
keras.backend.asymmetric_temporal_padding(x,left_pad=1,right_pad=1)
keras.backend.atrous_conv2d(x,kernel,rate=1,border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,image_shape=None,filter_shape=None)
keras.backend.batch_dot(x,y,axes=None)
keras.backend.batch_flatten(x)
keras.backend.batch_get_value(xs)
keras.backend.batch_normalization(x,mean,var,beta,gamma,epsilon=0.0001)
keras.backend.batch_set_value(tuples)
keras.backend.binary_crossentropy(output,target,from_logits=False)
keras.backend.cast(x,dtype)
keras.backend.categorical_crossentropy(output,target,from_logits=False)
keras.backend.clear_session()
keras.backend.clip(x,min_value,max_value)
keras.backend.concatenate(tensors,axis=-1)
keras.backend.conv2d(x,kernel,strides=(1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,image_shape=None,filter_shape=None,filter_dilation=(1,1))
keras.backend.conv3d(x,kernel,strides=(1,1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,volume_shape=None,filter_shape=None)
keras.backend.cos(x)
keras.backend.count_params(x)
keras.backend.ctc_batch_cost(y_true,y_pred,input_length,label_length)
keras.backend.ctc_decode(y_pred,input_length,greedy=True,beam_width=100,top_paths=1)
keras.backend.ctc_label_dense_to_sparse(labels,label_lengths)
keras.backend.deconv2d(x,kernel,output_shape,strides=(1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,image_shape=None,filter_shape=None)
keras.backend.dot(x,y)
keras.backend.dropout(x,level,noise_shape=None,seed=None)
keras.backend.dtype(x)
keras.backend.elu(x,alpha=1.0)
keras.backend.equal(x,y)
keras.backend.eval(x)
keras.backend.exp(x)
keras.backend.expand_dims(x,dim=-1)
keras.backend.eye(size,dtype=_FLOATX,name=None)
keras.backend.flatten(x)
keras.backend.function(inputs,outputs,updates=[],**kwargs)
keras.backend.gather(reference,indices)
keras.backend.get_session()
keras.backend.get_value(x)
keras.backend.get_variable_shape(x)
keras.backend.gradients(loss,variables)
keras.backend.greater(x,y)
keras.backend.greater_equal(x,y)
keras.backend.hard_sigmoid(x)
keras.backend.in_test_phase(x,alt)
keras.backend.in_top_k(predictions,targets,k)
keras.backend.in_train_phase(x,alt)
keras.backend.int_shape(x)
keras.backend.is_sparse(tensor)
keras.backend.l2_normalize(x,axis)
keras.backend.learning_phase()
keras.backend.lesser(x,y)
keras.backend.lesser_equal(x,y)
keras.backend.log(x)
keras.backend.manual_variable_initialization(value)
keras.backend.max(x,axis=None,keepdims=False)
keras.backend.maximum(x,y)
keras.backend.mean(x,axis=None,keepdims=False)
keras.backend.min(x,axis=None,keepdims=False)
keras.backend.minimum(x,y)
keras.backend.moving_average_update(variable,value,momentum)
keras.backend.ndim(x)
keras.backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.0001)
keras.backend.not_equal(x,y)
keras.backend.one_hot(indices,nb_classes)
keras.backend.ones(shape,dtype=_FLOATX,name=None)
keras.backend.ones_like(x,name=None)
keras.backend.pack(x)
keras.backend.permute_dimensions(x,pattern)
keras.backend.placeholder(shape=None,ndim=None,dtype=_FLOATX,sparse=False,name=None)
keras.backend.pool2d(x,pool_size,strides=(1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,pool_mode='max')
keras.backend.pool3d(x,pool_size,strides=(1,1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,pool_mode='max')
keras.backend.pow(x,a)
keras.backend.print_tensor(x,message='')
keras.backend.prod(x,axis=None,keepdims=False)
keras.backend.random_binomial(shape,p=0.0,dtype=_FLOATX,seed=None)
keras.backend.random_normal(shape,mean=0.0,std=1.0,dtype=_FLOATX,seed=None)
keras.backend.random_normal_variable(shape,mean,scale,dtype=_FLOATX,name=None,seed=None)
keras.backend.random_uniform(shape,low=0.0,high=1.0,dtype=_FLOATX,seed=None)
keras.backend.random_uniform_variable(shape,low,high,dtype=_FLOATX,name=None,seed=None)
keras.backend.relu(x,alpha=0.0,max_value=None)
keras.backend.repeat(x,n)
keras.backend.repeat_elements(x,rep,axis)
keras.backend.reshape(x,shape)
keras.backend.resize_images(X,height_factor,width_factor,dim_ordering)
keras.backend.resize_volumes(X,depth_factor,height_factor,width_factor,dim_ordering)
keras.backend.reverse(x,axes)
keras.backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None)
keras.backend.round(x)
keras.backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING)
keras.backend.set_learning_phase(value)
keras.backend.set_session(session)
keras.backend.set_value(x,value)
keras.backend.shape(x)
keras.backend.sigmoid(x)
keras.backend.sign(x)
keras.backend.sin(x)
keras.backend.softmax(x)
keras.backend.softplus(x)
keras.backend.softsign(x)
keras.backend.sparse_categorical_crossentropy(output,target,from_logits=False)
keras.backend.spatial_2d_padding(x,padding=(1,1),dim_ordering=_IMAGE_DIM_ORDERING)
keras.backend.spatial_3d_padding(x,padding=(1,1,1),dim_ordering=_IMAGE_DIM_ORDERING)
keras.backend.sqrt(x)
keras.backend.square(x)
keras.backend.squeeze(x,axis)
keras.backend.std(x,axis=None,keepdims=False)
keras.backend.stop_gradient(variables)
keras.backend.sum(x,axis=None,keepdims=False)
keras.backend.switch(condition,then_expression,else_expression)
keras.backend.tanh(x)
keras.backend.temporal_padding(x,padding=1)
keras.backend.tensorflow_backend.Function(self,inputs,outputs,updates=[])
keras.backend.tensorflow_backend.Function.__init__(self,inputs,outputs,updates=[])
keras.backend.tensorflow_backend._cond(condition,then_lambda,else_lambda)
keras.backend.tensorflow_backend._convert_string_dtype(dtype)
keras.backend.tensorflow_backend._normalize_axis(axis,ndim)
keras.backend.tensorflow_backend._postprocess_conv2d_output(x,dim_ordering)
keras.backend.tensorflow_backend._postprocess_conv3d_output(x,dim_ordering)
keras.backend.tensorflow_backend._preprocess_border_mode(border_mode)
keras.backend.tensorflow_backend._preprocess_conv2d_input(x,dim_ordering)
keras.backend.tensorflow_backend._preprocess_conv2d_kernel(kernel,dim_ordering)
keras.backend.tensorflow_backend._preprocess_conv3d_input(x,dim_ordering)
keras.backend.tensorflow_backend._preprocess_conv3d_kernel(kernel,dim_ordering)
keras.backend.tensorflow_backend._preprocess_deconv_output_shape(shape,dim_ordering)
keras.backend.tensorflow_backend._to_tensor(x,dtype)
keras.backend.tensorflow_backend.abs(x)
keras.backend.tensorflow_backend.all(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.any(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.argmax(x,axis=-1)
keras.backend.tensorflow_backend.argmin(x,axis=-1)
keras.backend.tensorflow_backend.asymmetric_spatial_2d_padding(x,top_pad=1,bottom_pad=1,left_pad=1,right_pad=1,dim_ordering=_IMAGE_DIM_ORDERING)
keras.backend.tensorflow_backend.asymmetric_temporal_padding(x,left_pad=1,right_pad=1)
keras.backend.tensorflow_backend.atrous_conv2d(x,kernel,rate=1,border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,image_shape=None,filter_shape=None)
keras.backend.tensorflow_backend.batch_dot(x,y,axes=None)
keras.backend.tensorflow_backend.batch_flatten(x)
keras.backend.tensorflow_backend.batch_get_value(xs)
keras.backend.tensorflow_backend.batch_normalization(x,mean,var,beta,gamma,epsilon=0.0001)
keras.backend.tensorflow_backend.batch_set_value(tuples)
keras.backend.tensorflow_backend.binary_crossentropy(output,target,from_logits=False)
keras.backend.tensorflow_backend.cast(x,dtype)
keras.backend.tensorflow_backend.categorical_crossentropy(output,target,from_logits=False)
keras.backend.tensorflow_backend.clear_session()
keras.backend.tensorflow_backend.clip(x,min_value,max_value)
keras.backend.tensorflow_backend.concatenate(tensors,axis=-1)
keras.backend.tensorflow_backend.conv2d(x,kernel,strides=(1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,image_shape=None,filter_shape=None,filter_dilation=(1,1))
keras.backend.tensorflow_backend.conv3d(x,kernel,strides=(1,1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,volume_shape=None,filter_shape=None)
keras.backend.tensorflow_backend.cos(x)
keras.backend.tensorflow_backend.count_params(x)
keras.backend.tensorflow_backend.ctc_batch_cost(y_true,y_pred,input_length,label_length)
keras.backend.tensorflow_backend.ctc_decode(y_pred,input_length,greedy=True,beam_width=100,top_paths=1)
keras.backend.tensorflow_backend.ctc_label_dense_to_sparse(labels,label_lengths)
keras.backend.tensorflow_backend.deconv2d(x,kernel,output_shape,strides=(1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,image_shape=None,filter_shape=None)
keras.backend.tensorflow_backend.dot(x,y)
keras.backend.tensorflow_backend.dropout(x,level,noise_shape=None,seed=None)
keras.backend.tensorflow_backend.dtype(x)
keras.backend.tensorflow_backend.elu(x,alpha=1.0)
keras.backend.tensorflow_backend.equal(x,y)
keras.backend.tensorflow_backend.eval(x)
keras.backend.tensorflow_backend.exp(x)
keras.backend.tensorflow_backend.expand_dims(x,dim=-1)
keras.backend.tensorflow_backend.eye(size,dtype=_FLOATX,name=None)
keras.backend.tensorflow_backend.flatten(x)
keras.backend.tensorflow_backend.function(inputs,outputs,updates=[],**kwargs)
keras.backend.tensorflow_backend.gather(reference,indices)
keras.backend.tensorflow_backend.get_session()
keras.backend.tensorflow_backend.get_value(x)
keras.backend.tensorflow_backend.get_variable_shape(x)
keras.backend.tensorflow_backend.gradients(loss,variables)
keras.backend.tensorflow_backend.greater(x,y)
keras.backend.tensorflow_backend.greater_equal(x,y)
keras.backend.tensorflow_backend.hard_sigmoid(x)
keras.backend.tensorflow_backend.in_test_phase(x,alt)
keras.backend.tensorflow_backend.in_top_k(predictions,targets,k)
keras.backend.tensorflow_backend.in_train_phase(x,alt)
keras.backend.tensorflow_backend.int_shape(x)
keras.backend.tensorflow_backend.is_sparse(tensor)
keras.backend.tensorflow_backend.l2_normalize(x,axis)
keras.backend.tensorflow_backend.learning_phase()
keras.backend.tensorflow_backend.lesser(x,y)
keras.backend.tensorflow_backend.lesser_equal(x,y)
keras.backend.tensorflow_backend.log(x)
keras.backend.tensorflow_backend.manual_variable_initialization(value)
keras.backend.tensorflow_backend.max(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.maximum(x,y)
keras.backend.tensorflow_backend.mean(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.min(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.minimum(x,y)
keras.backend.tensorflow_backend.moving_average_update(variable,value,momentum)
keras.backend.tensorflow_backend.ndim(x)
keras.backend.tensorflow_backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.0001)
keras.backend.tensorflow_backend.not_equal(x,y)
keras.backend.tensorflow_backend.one_hot(indices,nb_classes)
keras.backend.tensorflow_backend.ones(shape,dtype=_FLOATX,name=None)
keras.backend.tensorflow_backend.ones_like(x,name=None)
keras.backend.tensorflow_backend.pack(x)
keras.backend.tensorflow_backend.permute_dimensions(x,pattern)
keras.backend.tensorflow_backend.placeholder(shape=None,ndim=None,dtype=_FLOATX,sparse=False,name=None)
keras.backend.tensorflow_backend.pool2d(x,pool_size,strides=(1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,pool_mode='max')
keras.backend.tensorflow_backend.pool3d(x,pool_size,strides=(1,1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING,pool_mode='max')
keras.backend.tensorflow_backend.pow(x,a)
keras.backend.tensorflow_backend.print_tensor(x,message='')
keras.backend.tensorflow_backend.prod(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.random_binomial(shape,p=0.0,dtype=_FLOATX,seed=None)
keras.backend.tensorflow_backend.random_normal(shape,mean=0.0,std=1.0,dtype=_FLOATX,seed=None)
keras.backend.tensorflow_backend.random_normal_variable(shape,mean,scale,dtype=_FLOATX,name=None,seed=None)
keras.backend.tensorflow_backend.random_uniform(shape,low=0.0,high=1.0,dtype=_FLOATX,seed=None)
keras.backend.tensorflow_backend.random_uniform_variable(shape,low,high,dtype=_FLOATX,name=None,seed=None)
keras.backend.tensorflow_backend.relu(x,alpha=0.0,max_value=None)
keras.backend.tensorflow_backend.repeat(x,n)
keras.backend.tensorflow_backend.repeat_elements(x,rep,axis)
keras.backend.tensorflow_backend.reshape(x,shape)
keras.backend.tensorflow_backend.resize_images(X,height_factor,width_factor,dim_ordering)
keras.backend.tensorflow_backend.resize_volumes(X,depth_factor,height_factor,width_factor,dim_ordering)
keras.backend.tensorflow_backend.reverse(x,axes)
keras.backend.tensorflow_backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None)
keras.backend.tensorflow_backend.round(x)
keras.backend.tensorflow_backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),border_mode='valid',dim_ordering=_IMAGE_DIM_ORDERING)
keras.backend.tensorflow_backend.set_learning_phase(value)
keras.backend.tensorflow_backend.set_session(session)
keras.backend.tensorflow_backend.set_value(x,value)
keras.backend.tensorflow_backend.shape(x)
keras.backend.tensorflow_backend.sigmoid(x)
keras.backend.tensorflow_backend.sign(x)
keras.backend.tensorflow_backend.sin(x)
keras.backend.tensorflow_backend.softmax(x)
keras.backend.tensorflow_backend.softplus(x)
keras.backend.tensorflow_backend.softsign(x)
keras.backend.tensorflow_backend.sparse_categorical_crossentropy(output,target,from_logits=False)
keras.backend.tensorflow_backend.spatial_2d_padding(x,padding=(1,1),dim_ordering=_IMAGE_DIM_ORDERING)
keras.backend.tensorflow_backend.spatial_3d_padding(x,padding=(1,1,1),dim_ordering=_IMAGE_DIM_ORDERING)
keras.backend.tensorflow_backend.sqrt(x)
keras.backend.tensorflow_backend.square(x)
keras.backend.tensorflow_backend.squeeze(x,axis)
keras.backend.tensorflow_backend.std(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.stop_gradient(variables)
keras.backend.tensorflow_backend.sum(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.switch(condition,then_expression,else_expression)
keras.backend.tensorflow_backend.tanh(x)
keras.backend.tensorflow_backend.temporal_padding(x,padding=1)
keras.backend.tensorflow_backend.tile(x,n)
keras.backend.tensorflow_backend.to_dense(tensor)
keras.backend.tensorflow_backend.transpose(x)
keras.backend.tensorflow_backend.update(x,new_x)
keras.backend.tensorflow_backend.update_add(x,increment)
keras.backend.tensorflow_backend.update_sub(x,decrement)
keras.backend.tensorflow_backend.var(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.variable(value,dtype=_FLOATX,name=None)
keras.backend.tensorflow_backend.zeros(shape,dtype=_FLOATX,name=None)
keras.backend.tensorflow_backend.zeros_like(x,name=None)
keras.backend.tile(x,n)
keras.backend.to_dense(tensor)
keras.backend.transpose(x)
keras.backend.update(x,new_x)
keras.backend.update_add(x,increment)
keras.backend.update_sub(x,decrement)
keras.backend.var(x,axis=None,keepdims=False)
keras.backend.variable(value,dtype=_FLOATX,name=None)
keras.backend.zeros(shape,dtype=_FLOATX,name=None)
keras.backend.zeros_like(x,name=None)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/applications/audio_conv_utils.py----------------------------------------
A:keras.applications.audio_conv_utils.dim_ordering->K.image_dim_ordering()
A:keras.applications.audio_conv_utils.(src, sr)->librosa.load(audio_path, sr=SR)
A:keras.applications.audio_conv_utils.n_sample_wanted->int(DURA * SR)
A:keras.applications.audio_conv_utils.src->numpy.hstack((src, np.zeros((int(DURA * SR) - n_sample,))))
A:keras.applications.audio_conv_utils.x->numpy.expand_dims(x, axis=3)
A:keras.applications.audio_conv_utils.result->sorted(result, key=lambda x: x[1], reverse=True)
keras.applications.audio_conv_utils.decode_predictions(preds,top_n=5)
keras.applications.audio_conv_utils.librosa_exists()
keras.applications.audio_conv_utils.preprocess_input(audio_path,dim_ordering='default')


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/applications/vgg19.py----------------------------------------
A:keras.applications.vgg19.img_input->Input(tensor=input_tensor, shape=input_shape)
A:keras.applications.vgg19.x->Dense(1000, activation='softmax', name='predictions')(x)
A:keras.applications.vgg19.model->Model(img_input, x)
A:keras.applications.vgg19.weights_path->get_file('vgg19_weights_tf_dim_ordering_tf_kernels_notop.h5', TF_WEIGHTS_PATH_NO_TOP, cache_subdir='models')
keras.applications.VGG19(include_top=True,weights='imagenet',input_tensor=None)
keras.applications.vgg19.VGG19(include_top=True,weights='imagenet',input_tensor=None)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/applications/imagenet_utils.py----------------------------------------
A:keras.applications.imagenet_utils.dim_ordering->K.image_dim_ordering()
A:keras.applications.imagenet_utils.fpath->get_file('imagenet_class_index.json', CLASS_INDEX_PATH, cache_subdir='models')
A:keras.applications.imagenet_utils.CLASS_INDEX->json.load(open(fpath))
keras.applications.imagenet_utils.decode_predictions(preds,top=5)
keras.applications.imagenet_utils.preprocess_input(x,dim_ordering='default')


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/applications/inception_v3.py----------------------------------------
A:keras.applications.inception_v3.x->Dense(1000, activation='softmax', name='predictions')(x)
A:keras.applications.inception_v3.img_input->Input(tensor=input_tensor, shape=input_shape)
A:keras.applications.inception_v3.branch1x1->conv2d_bn(x, 320, 1, 1)
A:keras.applications.inception_v3.branch5x5->conv2d_bn(branch5x5, 64, 5, 5)
A:keras.applications.inception_v3.branch3x3dbl->merge([branch3x3dbl_1, branch3x3dbl_2], mode='concat', concat_axis=channel_axis)
A:keras.applications.inception_v3.branch_pool->conv2d_bn(branch_pool, 192, 1, 1)
A:keras.applications.inception_v3.branch3x3->merge([branch3x3_1, branch3x3_2], mode='concat', concat_axis=channel_axis, name='mixed9_' + str(i))
A:keras.applications.inception_v3.branch7x7->conv2d_bn(branch7x7, 192, 7, 1)
A:keras.applications.inception_v3.branch7x7dbl->conv2d_bn(branch7x7dbl, 192, 1, 7)
A:keras.applications.inception_v3.branch7x7x3->conv2d_bn(branch7x7x3, 192, 3, 3, subsample=(2, 2), border_mode='valid')
A:keras.applications.inception_v3.branch3x3_1->conv2d_bn(branch3x3, 384, 1, 3)
A:keras.applications.inception_v3.branch3x3_2->conv2d_bn(branch3x3, 384, 3, 1)
A:keras.applications.inception_v3.branch3x3dbl_1->conv2d_bn(branch3x3dbl, 384, 1, 3)
A:keras.applications.inception_v3.branch3x3dbl_2->conv2d_bn(branch3x3dbl, 384, 3, 1)
A:keras.applications.inception_v3.model->Model(img_input, x)
A:keras.applications.inception_v3.weights_path->get_file('inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5', TF_WEIGHTS_PATH_NO_TOP, cache_subdir='models', md5_hash='2f3609166de1d967d1a481094754f691')
keras.applications.InceptionV3(include_top=True,weights='imagenet',input_tensor=None)
keras.applications.inception_v3.InceptionV3(include_top=True,weights='imagenet',input_tensor=None)
keras.applications.inception_v3.conv2d_bn(x,nb_filter,nb_row,nb_col,border_mode='same',subsample=(1,1),name=None)
keras.applications.inception_v3.preprocess_input(x)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/applications/resnet50.py----------------------------------------
A:keras.applications.resnet50.x->Dense(1000, activation='softmax', name='fc1000')(x)
A:keras.applications.resnet50.shortcut->BatchNormalization(axis=bn_axis, name=bn_name_base + '1')(shortcut)
A:keras.applications.resnet50.img_input->Input(tensor=input_tensor, shape=input_shape)
A:keras.applications.resnet50.model->Model(img_input, x)
A:keras.applications.resnet50.weights_path->get_file('resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5', TF_WEIGHTS_PATH_NO_TOP, cache_subdir='models', md5_hash='a268eb855778b3df3c7506639542a6af')
keras.applications.ResNet50(include_top=True,weights='imagenet',input_tensor=None)
keras.applications.resnet50.ResNet50(include_top=True,weights='imagenet',input_tensor=None)
keras.applications.resnet50.conv_block(input_tensor,kernel_size,filters,stage,block,strides=(2,2))
keras.applications.resnet50.identity_block(input_tensor,kernel_size,filters,stage,block)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/applications/music_tagger_crnn.py----------------------------------------
A:keras.applications.music_tagger_crnn.melgram_input->Input(tensor=input_tensor, shape=input_shape)
A:keras.applications.music_tagger_crnn.x->Dense(50, activation='sigmoid', name='output')(x)
A:keras.applications.music_tagger_crnn.model->Model(melgram_input, x)
A:keras.applications.music_tagger_crnn.weights_path->get_file('music_tagger_crnn_weights_tf_kernels_th_dim_ordering.h5', TH_WEIGHTS_PATH, cache_subdir='models')
keras.applications.music_tagger_crnn.MusicTaggerCRNN(weights='msd',input_tensor=None,include_top=True)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/applications/vgg16.py----------------------------------------
A:keras.applications.vgg16.img_input->Input(tensor=input_tensor, shape=input_shape)
A:keras.applications.vgg16.x->Dense(1000, activation='softmax', name='predictions')(x)
A:keras.applications.vgg16.model->Model(img_input, x)
A:keras.applications.vgg16.weights_path->get_file('vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5', TF_WEIGHTS_PATH_NO_TOP, cache_subdir='models')
keras.applications.VGG16(include_top=True,weights='imagenet',input_tensor=None)
keras.applications.vgg16.VGG16(include_top=True,weights='imagenet',input_tensor=None)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/applications/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/applications/xception.py----------------------------------------
A:keras.applications.xception.img_input->Input(tensor=input_tensor, shape=input_shape)
A:keras.applications.xception.x->Dense(1000, activation='softmax', name='predictions')(x)
A:keras.applications.xception.residual->BatchNormalization()(residual)
A:keras.applications.xception.model->Model(img_input, x)
A:keras.applications.xception.weights_path->get_file('xception_weights_tf_dim_ordering_tf_kernels_notop.h5', TF_WEIGHTS_PATH_NO_TOP, cache_subdir='models')
keras.applications.Xception(include_top=True,weights='imagenet',input_tensor=None)
keras.applications.xception.Xception(include_top=True,weights='imagenet',input_tensor=None)
keras.applications.xception.preprocess_input(x)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/datasets/data_utils.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/datasets/imdb.py----------------------------------------
A:keras.datasets.imdb.path->get_file(path, origin='https://s3.amazonaws.com/text-datasets/imdb_word_index.pkl', md5_hash='72d94b01291be4ff843198d3b0e1e4d7')
A:keras.datasets.imdb.f->open(path, 'rb')
A:keras.datasets.imdb.((x_train, labels_train), (x_test, labels_test))->six.moves.cPickle.load(f)
A:keras.datasets.imdb.nb_words->max([max(x) for x in X])
A:keras.datasets.imdb.X_train->numpy.array(X[:len(x_train)])
A:keras.datasets.imdb.y_train->numpy.array(labels[:len(x_train)])
A:keras.datasets.imdb.X_test->numpy.array(X[len(x_train):])
A:keras.datasets.imdb.y_test->numpy.array(labels[len(x_train):])
A:keras.datasets.imdb.data->six.moves.cPickle.load(f, encoding='latin1')
keras.datasets.imdb.get_word_index(path='imdb_word_index.pkl')
keras.datasets.imdb.load_data(path='imdb_full.pkl',nb_words=None,skip_top=0,maxlen=None,seed=113,start_char=1,oov_char=2,index_from=3)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/datasets/cifar100.py----------------------------------------
A:keras.datasets.cifar100.path->get_file(dirname, origin=origin, untar=True)
A:keras.datasets.cifar100.fpath->os.path.join(path, 'test')
A:keras.datasets.cifar100.(X_train, y_train)->load_batch(fpath, label_key=label_mode + '_labels')
A:keras.datasets.cifar100.(X_test, y_test)->load_batch(fpath, label_key=label_mode + '_labels')
A:keras.datasets.cifar100.y_train->numpy.reshape(y_train, (len(y_train), 1))
A:keras.datasets.cifar100.y_test->numpy.reshape(y_test, (len(y_test), 1))
A:keras.datasets.cifar100.X_train->X_train.transpose(0, 2, 3, 1).transpose(0, 2, 3, 1)
A:keras.datasets.cifar100.X_test->X_test.transpose(0, 2, 3, 1).transpose(0, 2, 3, 1)
keras.datasets.cifar100.load_data(label_mode='fine')


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/datasets/cifar.py----------------------------------------
A:keras.datasets.cifar.f->open(fpath, 'rb')
A:keras.datasets.cifar.d->six.moves.cPickle.load(f, encoding='bytes')
A:keras.datasets.cifar.data->data.reshape(data.shape[0], 3, 32, 32).reshape(data.shape[0], 3, 32, 32)
keras.datasets.cifar.load_batch(fpath,label_key='labels')


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/datasets/cifar10.py----------------------------------------
A:keras.datasets.cifar10.path->get_file(dirname, origin=origin, untar=True)
A:keras.datasets.cifar10.X_train->X_train.transpose(0, 2, 3, 1).transpose(0, 2, 3, 1)
A:keras.datasets.cifar10.y_train->numpy.reshape(y_train, (len(y_train), 1))
A:keras.datasets.cifar10.fpath->os.path.join(path, 'test_batch')
A:keras.datasets.cifar10.(data, labels)->load_batch(fpath)
A:keras.datasets.cifar10.(X_test, y_test)->load_batch(fpath)
A:keras.datasets.cifar10.y_test->numpy.reshape(y_test, (len(y_test), 1))
A:keras.datasets.cifar10.X_test->X_test.transpose(0, 2, 3, 1).transpose(0, 2, 3, 1)
keras.datasets.cifar10.load_data()


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/datasets/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/datasets/mnist.py----------------------------------------
A:keras.datasets.mnist.path->get_file(path, origin='https://s3.amazonaws.com/img-datasets/mnist.pkl.gz')
A:keras.datasets.mnist.f->open(path, 'rb')
A:keras.datasets.mnist.data->six.moves.cPickle.load(f, encoding='bytes')
keras.datasets.mnist.load_data(path='mnist.pkl.gz')


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/datasets/reuters.py----------------------------------------
A:keras.datasets.reuters.path->get_file(path, origin='https://s3.amazonaws.com/text-datasets/reuters_word_index.pkl')
A:keras.datasets.reuters.f->open(path, 'rb')
A:keras.datasets.reuters.(X, labels)->six.moves.cPickle.load(f)
A:keras.datasets.reuters.nb_words->max([max(x) for x in X])
A:keras.datasets.reuters.data->six.moves.cPickle.load(f, encoding='latin1')
keras.datasets.reuters.get_word_index(path='reuters_word_index.pkl')
keras.datasets.reuters.load_data(path='reuters.pkl',nb_words=None,skip_top=0,maxlen=None,test_split=0.2,seed=113,start_char=1,oov_char=2,index_from=3)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/wrappers/scikit_learn.py----------------------------------------
A:keras.wrappers.scikit_learn.legal_params->set(legal_params)
A:keras.wrappers.scikit_learn.res->copy.deepcopy(self.sk_params)
A:keras.wrappers.scikit_learn.self.model->self.build_fn(**self.filter_sk_params(self.build_fn))
A:keras.wrappers.scikit_learn.y->to_categorical(y)
A:keras.wrappers.scikit_learn.fit_args->copy.deepcopy(self.filter_sk_params(Sequential.fit))
A:keras.wrappers.scikit_learn.history->self.model.fit(X, y, **fit_args)
A:keras.wrappers.scikit_learn.kwargs->self.filter_sk_params(Sequential.evaluate, kwargs)
A:keras.wrappers.scikit_learn.probs->numpy.hstack([1 - probs, probs])
A:keras.wrappers.scikit_learn.outputs->self.model.evaluate(X, y, **kwargs)
A:keras.wrappers.scikit_learn.loss->self.model.evaluate(X, y, **kwargs)
keras.wrappers.scikit_learn.BaseWrapper(self,build_fn=None,**sk_params)
keras.wrappers.scikit_learn.BaseWrapper.__init__(self,build_fn=None,**sk_params)
keras.wrappers.scikit_learn.BaseWrapper.check_params(self,params)
keras.wrappers.scikit_learn.BaseWrapper.filter_sk_params(self,fn,override={})
keras.wrappers.scikit_learn.BaseWrapper.fit(self,X,y,**kwargs)
keras.wrappers.scikit_learn.BaseWrapper.get_params(self,deep=True)
keras.wrappers.scikit_learn.BaseWrapper.set_params(self,**params)
keras.wrappers.scikit_learn.KerasClassifier(BaseWrapper)
keras.wrappers.scikit_learn.KerasClassifier.predict(self,X,**kwargs)
keras.wrappers.scikit_learn.KerasClassifier.predict_proba(self,X,**kwargs)
keras.wrappers.scikit_learn.KerasClassifier.score(self,X,y,**kwargs)
keras.wrappers.scikit_learn.KerasRegressor(BaseWrapper)
keras.wrappers.scikit_learn.KerasRegressor.predict(self,X,**kwargs)
keras.wrappers.scikit_learn.KerasRegressor.score(self,X,y,**kwargs)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/wrappers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/layers/local.py----------------------------------------
A:keras.layers.local.self.init->keras.layers.initializations.get(init, dim_ordering=dim_ordering)
A:keras.layers.local.self.activation->keras.layers.activations.get(activation)
A:keras.layers.local.self.W_regularizer->keras.layers.regularizers.get(W_regularizer)
A:keras.layers.local.self.b_regularizer->keras.layers.regularizers.get(b_regularizer)
A:keras.layers.local.self.activity_regularizer->keras.layers.regularizers.get(activity_regularizer)
A:keras.layers.local.self.W_constraint->keras.layers.constraints.get(W_constraint)
A:keras.layers.local.self.b_constraint->keras.layers.constraints.get(b_constraint)
A:keras.layers.local.(_, output_length, nb_filter)->self.get_output_shape_for(input_shape)
A:keras.layers.local.self.W->self.init(self.W_shape, name='{}_W'.format(self.name))
A:keras.layers.local.self.b->keras.backend.zeros((output_row, output_col, nb_filter), name='{}_b'.format(self.name))
A:keras.layers.local.length->conv_output_length(input_shape[1], self.filter_length, self.border_mode, self.subsample_length)
A:keras.layers.local.slice_length->slice(i * stride, i * stride + self.filter_length)
A:keras.layers.local.x_aggregate->keras.backend.concatenate(xs, axis=0)
A:keras.layers.local.output->self.activation(output)
A:keras.layers.local.base_config->super(LocallyConnected2D, self).get_config()
A:keras.layers.local.dim_ordering->keras.backend.image_dim_ordering()
A:keras.layers.local.self.subsample->tuple(subsample)
A:keras.layers.local.output_shape->self.get_output_shape_for(input_shape)
A:keras.layers.local.rows->conv_output_length(rows, self.nb_row, self.border_mode, self.subsample[0])
A:keras.layers.local.cols->conv_output_length(cols, self.nb_col, self.border_mode, self.subsample[1])
A:keras.layers.local.slice_row->slice(i * stride_row, i * stride_row + self.nb_row)
A:keras.layers.local.slice_col->slice(j * stride_col, j * stride_col + self.nb_col)
A:keras.layers.local.x_flatten->keras.backend.reshape(x[:, :, slice_row, slice_col], (1, -1, feature_dim))
keras.layers.LocallyConnected1D(self,nb_filter,filter_length,init='uniform',activation='linear',weights=None,border_mode='valid',subsample_length=1,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,input_length=None,**kwargs)
keras.layers.LocallyConnected1D.build(self,input_shape)
keras.layers.LocallyConnected1D.call(self,x,mask=None)
keras.layers.LocallyConnected1D.get_config(self)
keras.layers.LocallyConnected1D.get_output_shape_for(self,input_shape)
keras.layers.LocallyConnected2D(self,nb_filter,nb_row,nb_col,init='glorot_uniform',activation='linear',weights=None,border_mode='valid',subsample=(1,1),dim_ordering='default',W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,**kwargs)
keras.layers.LocallyConnected2D.build(self,input_shape)
keras.layers.LocallyConnected2D.call(self,x,mask=None)
keras.layers.LocallyConnected2D.get_config(self)
keras.layers.LocallyConnected2D.get_output_shape_for(self,input_shape)
keras.layers.local.LocallyConnected1D(self,nb_filter,filter_length,init='uniform',activation='linear',weights=None,border_mode='valid',subsample_length=1,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,input_length=None,**kwargs)
keras.layers.local.LocallyConnected1D.__init__(self,nb_filter,filter_length,init='uniform',activation='linear',weights=None,border_mode='valid',subsample_length=1,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,input_length=None,**kwargs)
keras.layers.local.LocallyConnected1D.build(self,input_shape)
keras.layers.local.LocallyConnected1D.call(self,x,mask=None)
keras.layers.local.LocallyConnected1D.get_config(self)
keras.layers.local.LocallyConnected1D.get_output_shape_for(self,input_shape)
keras.layers.local.LocallyConnected2D(self,nb_filter,nb_row,nb_col,init='glorot_uniform',activation='linear',weights=None,border_mode='valid',subsample=(1,1),dim_ordering='default',W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,**kwargs)
keras.layers.local.LocallyConnected2D.__init__(self,nb_filter,nb_row,nb_col,init='glorot_uniform',activation='linear',weights=None,border_mode='valid',subsample=(1,1),dim_ordering='default',W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,**kwargs)
keras.layers.local.LocallyConnected2D.build(self,input_shape)
keras.layers.local.LocallyConnected2D.call(self,x,mask=None)
keras.layers.local.LocallyConnected2D.get_config(self)
keras.layers.local.LocallyConnected2D.get_output_shape_for(self,input_shape)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/layers/advanced_activations.py----------------------------------------
A:keras.layers.advanced_activations.base_config->super(SReLU, self).get_config()
A:keras.layers.advanced_activations.self.init->initializations.get(init)
A:keras.layers.advanced_activations.self.alphas->K.variable(self.alpha_init * np.ones(input_shape), name='{}_alphas'.format(self.name))
A:keras.layers.advanced_activations.pos->K.relu(x)
A:keras.layers.advanced_activations.self.alpha->K.cast_to_floatx(alpha)
A:keras.layers.advanced_activations.self.alpha_init->K.cast_to_floatx(alpha_init)
A:keras.layers.advanced_activations.self.beta_init->K.cast_to_floatx(beta_init)
A:keras.layers.advanced_activations.self.betas->K.variable(self.beta_init * np.ones(input_shape), name='{}_betas'.format(self.name))
A:keras.layers.advanced_activations.self.theta->K.cast_to_floatx(theta)
A:keras.layers.advanced_activations.t_left_init->initializations.get(self.t_left_init)
A:keras.layers.advanced_activations.a_left_init->initializations.get(self.a_left_init)
A:keras.layers.advanced_activations.t_right_init->initializations.get(self.t_right_init)
A:keras.layers.advanced_activations.a_right_init->initializations.get(self.a_right_init)
A:keras.layers.advanced_activations.self.t_left->t_left_init(input_shape, name='{}_t_left'.format(self.name))
A:keras.layers.advanced_activations.self.a_left->a_left_init(input_shape, name='{}_a_left'.format(self.name))
A:keras.layers.advanced_activations.self.t_right->t_right_init(input_shape, name='{}_t_right'.format(self.name))
A:keras.layers.advanced_activations.self.a_right->a_right_init(input_shape, name='{}_a_right'.format(self.name))
keras.layers.ELU(self,alpha=1.0,**kwargs)
keras.layers.ELU.call(self,x,mask=None)
keras.layers.ELU.get_config(self)
keras.layers.LeakyReLU(self,alpha=0.3,**kwargs)
keras.layers.LeakyReLU.call(self,x,mask=None)
keras.layers.LeakyReLU.get_config(self)
keras.layers.PReLU(self,init='zero',weights=None,**kwargs)
keras.layers.PReLU.build(self,input_shape)
keras.layers.PReLU.call(self,x,mask=None)
keras.layers.PReLU.get_config(self)
keras.layers.ParametricSoftplus(self,alpha_init=0.2,beta_init=5.0,weights=None,**kwargs)
keras.layers.ParametricSoftplus.build(self,input_shape)
keras.layers.ParametricSoftplus.call(self,x,mask=None)
keras.layers.ParametricSoftplus.get_config(self)
keras.layers.SReLU(self,t_left_init='zero',a_left_init='glorot_uniform',t_right_init='glorot_uniform',a_right_init='one',**kwargs)
keras.layers.SReLU.build(self,input_shape)
keras.layers.SReLU.call(self,x,mask=None)
keras.layers.SReLU.get_config(self)
keras.layers.ThresholdedReLU(self,theta=1.0,**kwargs)
keras.layers.ThresholdedReLU.call(self,x,mask=None)
keras.layers.ThresholdedReLU.get_config(self)
keras.layers.advanced_activations.ELU(self,alpha=1.0,**kwargs)
keras.layers.advanced_activations.ELU.__init__(self,alpha=1.0,**kwargs)
keras.layers.advanced_activations.ELU.call(self,x,mask=None)
keras.layers.advanced_activations.ELU.get_config(self)
keras.layers.advanced_activations.LeakyReLU(self,alpha=0.3,**kwargs)
keras.layers.advanced_activations.LeakyReLU.__init__(self,alpha=0.3,**kwargs)
keras.layers.advanced_activations.LeakyReLU.call(self,x,mask=None)
keras.layers.advanced_activations.LeakyReLU.get_config(self)
keras.layers.advanced_activations.PReLU(self,init='zero',weights=None,**kwargs)
keras.layers.advanced_activations.PReLU.__init__(self,init='zero',weights=None,**kwargs)
keras.layers.advanced_activations.PReLU.build(self,input_shape)
keras.layers.advanced_activations.PReLU.call(self,x,mask=None)
keras.layers.advanced_activations.PReLU.get_config(self)
keras.layers.advanced_activations.ParametricSoftplus(self,alpha_init=0.2,beta_init=5.0,weights=None,**kwargs)
keras.layers.advanced_activations.ParametricSoftplus.__init__(self,alpha_init=0.2,beta_init=5.0,weights=None,**kwargs)
keras.layers.advanced_activations.ParametricSoftplus.build(self,input_shape)
keras.layers.advanced_activations.ParametricSoftplus.call(self,x,mask=None)
keras.layers.advanced_activations.ParametricSoftplus.get_config(self)
keras.layers.advanced_activations.SReLU(self,t_left_init='zero',a_left_init='glorot_uniform',t_right_init='glorot_uniform',a_right_init='one',**kwargs)
keras.layers.advanced_activations.SReLU.__init__(self,t_left_init='zero',a_left_init='glorot_uniform',t_right_init='glorot_uniform',a_right_init='one',**kwargs)
keras.layers.advanced_activations.SReLU.build(self,input_shape)
keras.layers.advanced_activations.SReLU.call(self,x,mask=None)
keras.layers.advanced_activations.SReLU.get_config(self)
keras.layers.advanced_activations.ThresholdedReLU(self,theta=1.0,**kwargs)
keras.layers.advanced_activations.ThresholdedReLU.__init__(self,theta=1.0,**kwargs)
keras.layers.advanced_activations.ThresholdedReLU.call(self,x,mask=None)
keras.layers.advanced_activations.ThresholdedReLU.get_config(self)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/layers/convolutional.py----------------------------------------
A:keras.layers.convolutional.self.init->initializations.get(init, dim_ordering=dim_ordering)
A:keras.layers.convolutional.self.activation->activations.get(activation)
A:keras.layers.convolutional.self.W_regularizer->regularizers.get(W_regularizer)
A:keras.layers.convolutional.self.b_regularizer->regularizers.get(b_regularizer)
A:keras.layers.convolutional.self.activity_regularizer->regularizers.get(activity_regularizer)
A:keras.layers.convolutional.self.W_constraint->constraints.get(W_constraint)
A:keras.layers.convolutional.self.b_constraint->constraints.get(b_constraint)
A:keras.layers.convolutional.self.W->self.init(self.W_shape, name='{}_W'.format(self.name))
A:keras.layers.convolutional.self.b->K.zeros((self.nb_filter,), name='{}_b'.format(self.name))
A:keras.layers.convolutional.length->conv_output_length(input_shape[1], self.filter_length, self.border_mode, self.subsample[0], dilation=self.atrous_rate)
A:keras.layers.convolutional.x->K.expand_dims(x, 2)
A:keras.layers.convolutional.output->K.repeat_elements(x, self.length, axis=1)
A:keras.layers.convolutional.base_config->super(Cropping3D, self).get_config()
A:keras.layers.convolutional.self.atrous_rate->tuple(atrous_rate)
A:keras.layers.convolutional.dim_ordering->K.image_dim_ordering()
A:keras.layers.convolutional.self.subsample->tuple(subsample)
A:keras.layers.convolutional.rows->conv_output_length(rows, self.nb_row, self.border_mode, self.subsample[0])
A:keras.layers.convolutional.cols->conv_output_length(cols, self.nb_col, self.border_mode, self.subsample[1])
A:keras.layers.convolutional.self.depthwise_regularizer->regularizers.get(depthwise_regularizer)
A:keras.layers.convolutional.self.pointwise_regularizer->regularizers.get(pointwise_regularizer)
A:keras.layers.convolutional.self.depthwise_constraint->constraints.get(depthwise_constraint)
A:keras.layers.convolutional.self.pointwise_constraint->constraints.get(pointwise_constraint)
A:keras.layers.convolutional.self.depthwise_kernel->self.init(depthwise_shape, name='{}_depthwise_kernel'.format(self.name))
A:keras.layers.convolutional.self.pointwise_kernel->self.init(pointwise_shape, name='{}_pointwise_kernel'.format(self.name))
A:keras.layers.convolutional.conv_dim1->conv_output_length(conv_dim1, self.kernel_dim1, self.border_mode, self.subsample[0])
A:keras.layers.convolutional.conv_dim2->conv_output_length(conv_dim2, self.kernel_dim2, self.border_mode, self.subsample[1])
A:keras.layers.convolutional.conv_dim3->conv_output_length(conv_dim3, self.kernel_dim3, self.border_mode, self.subsample[2])
A:keras.layers.convolutional.self.size->tuple(size)
A:keras.layers.convolutional.self.left_pad->tuple(padding).get('left_pad', 0)
A:keras.layers.convolutional.self.right_pad->tuple(padding).get('right_pad', 0)
A:keras.layers.convolutional.padding->tuple(padding)
A:keras.layers.convolutional.self.top_pad->tuple(padding).get('top_pad', 0)
A:keras.layers.convolutional.self.bottom_pad->tuple(padding).get('bottom_pad', 0)
A:keras.layers.convolutional.self.padding->tuple(padding)
A:keras.layers.convolutional.self.cropping->tuple(cropping)
keras.layers.AtrousConvolution1D(self,nb_filter,filter_length,init='uniform',activation='linear',weights=None,border_mode='valid',subsample_length=1,atrous_rate=1,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,**kwargs)
keras.layers.AtrousConvolution1D.call(self,x,mask=None)
keras.layers.AtrousConvolution1D.get_config(self)
keras.layers.AtrousConvolution1D.get_output_shape_for(self,input_shape)
keras.layers.AtrousConvolution2D(self,nb_filter,nb_row,nb_col,init='glorot_uniform',activation='linear',weights=None,border_mode='valid',subsample=(1,1),atrous_rate=(1,1),dim_ordering='default',W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,**kwargs)
keras.layers.AtrousConvolution2D.call(self,x,mask=None)
keras.layers.AtrousConvolution2D.get_config(self)
keras.layers.AtrousConvolution2D.get_output_shape_for(self,input_shape)
keras.layers.Convolution1D(self,nb_filter,filter_length,init='uniform',activation='linear',weights=None,border_mode='valid',subsample_length=1,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,input_length=None,**kwargs)
keras.layers.Convolution1D.build(self,input_shape)
keras.layers.Convolution1D.call(self,x,mask=None)
keras.layers.Convolution1D.get_config(self)
keras.layers.Convolution1D.get_output_shape_for(self,input_shape)
keras.layers.Convolution2D(self,nb_filter,nb_row,nb_col,init='glorot_uniform',activation='linear',weights=None,border_mode='valid',subsample=(1,1),dim_ordering='default',W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,**kwargs)
keras.layers.Convolution2D.build(self,input_shape)
keras.layers.Convolution2D.call(self,x,mask=None)
keras.layers.Convolution2D.get_config(self)
keras.layers.Convolution2D.get_output_shape_for(self,input_shape)
keras.layers.Convolution3D(self,nb_filter,kernel_dim1,kernel_dim2,kernel_dim3,init='glorot_uniform',activation='linear',weights=None,border_mode='valid',subsample=(1,1,1),dim_ordering='default',W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,**kwargs)
keras.layers.Convolution3D.build(self,input_shape)
keras.layers.Convolution3D.call(self,x,mask=None)
keras.layers.Convolution3D.get_config(self)
keras.layers.Convolution3D.get_output_shape_for(self,input_shape)
keras.layers.Cropping1D(self,cropping=(1,1),**kwargs)
keras.layers.Cropping1D.build(self,input_shape)
keras.layers.Cropping1D.call(self,x,mask=None)
keras.layers.Cropping1D.get_config(self)
keras.layers.Cropping1D.get_output_shape_for(self,input_shape)
keras.layers.Cropping2D(self,cropping=((0,0),(0,0)),dim_ordering='default',**kwargs)
keras.layers.Cropping2D.build(self,input_shape)
keras.layers.Cropping2D.call(self,x,mask=None)
keras.layers.Cropping2D.get_config(self)
keras.layers.Cropping2D.get_output_shape_for(self,input_shape)
keras.layers.Cropping3D(self,cropping=((1,1),(1,1),(1,1)),dim_ordering='default',**kwargs)
keras.layers.Cropping3D.build(self,input_shape)
keras.layers.Cropping3D.call(self,x,mask=None)
keras.layers.Cropping3D.get_config(self)
keras.layers.Cropping3D.get_output_shape_for(self,input_shape)
keras.layers.Deconvolution2D(self,nb_filter,nb_row,nb_col,output_shape,init='glorot_uniform',activation='linear',weights=None,border_mode='valid',subsample=(1,1),dim_ordering='default',W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,**kwargs)
keras.layers.Deconvolution2D.call(self,x,mask=None)
keras.layers.Deconvolution2D.get_config(self)
keras.layers.Deconvolution2D.get_output_shape_for(self,input_shape)
keras.layers.SeparableConvolution2D(self,nb_filter,nb_row,nb_col,init='glorot_uniform',activation='linear',weights=None,border_mode='valid',subsample=(1,1),depth_multiplier=1,dim_ordering='default',depthwise_regularizer=None,pointwise_regularizer=None,b_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,b_constraint=None,bias=True,**kwargs)
keras.layers.SeparableConvolution2D.build(self,input_shape)
keras.layers.SeparableConvolution2D.call(self,x,mask=None)
keras.layers.SeparableConvolution2D.get_config(self)
keras.layers.SeparableConvolution2D.get_output_shape_for(self,input_shape)
keras.layers.UpSampling1D(self,length=2,**kwargs)
keras.layers.UpSampling1D.call(self,x,mask=None)
keras.layers.UpSampling1D.get_config(self)
keras.layers.UpSampling1D.get_output_shape_for(self,input_shape)
keras.layers.UpSampling2D(self,size=(2,2),dim_ordering='default',**kwargs)
keras.layers.UpSampling2D.call(self,x,mask=None)
keras.layers.UpSampling2D.get_config(self)
keras.layers.UpSampling2D.get_output_shape_for(self,input_shape)
keras.layers.UpSampling3D(self,size=(2,2,2),dim_ordering='default',**kwargs)
keras.layers.UpSampling3D.call(self,x,mask=None)
keras.layers.UpSampling3D.get_config(self)
keras.layers.UpSampling3D.get_output_shape_for(self,input_shape)
keras.layers.ZeroPadding1D(self,padding=1,**kwargs)
keras.layers.ZeroPadding1D.call(self,x,mask=None)
keras.layers.ZeroPadding1D.get_config(self)
keras.layers.ZeroPadding1D.get_output_shape_for(self,input_shape)
keras.layers.ZeroPadding2D(self,padding=(1,1),dim_ordering='default',**kwargs)
keras.layers.ZeroPadding2D.call(self,x,mask=None)
keras.layers.ZeroPadding2D.get_config(self)
keras.layers.ZeroPadding2D.get_output_shape_for(self,input_shape)
keras.layers.ZeroPadding3D(self,padding=(1,1,1),dim_ordering='default',**kwargs)
keras.layers.ZeroPadding3D.call(self,x,mask=None)
keras.layers.ZeroPadding3D.get_config(self)
keras.layers.ZeroPadding3D.get_output_shape_for(self,input_shape)
keras.layers.convolutional.AtrousConvolution1D(self,nb_filter,filter_length,init='uniform',activation='linear',weights=None,border_mode='valid',subsample_length=1,atrous_rate=1,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,**kwargs)
keras.layers.convolutional.AtrousConvolution1D.__init__(self,nb_filter,filter_length,init='uniform',activation='linear',weights=None,border_mode='valid',subsample_length=1,atrous_rate=1,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,**kwargs)
keras.layers.convolutional.AtrousConvolution1D.call(self,x,mask=None)
keras.layers.convolutional.AtrousConvolution1D.get_config(self)
keras.layers.convolutional.AtrousConvolution1D.get_output_shape_for(self,input_shape)
keras.layers.convolutional.AtrousConvolution2D(self,nb_filter,nb_row,nb_col,init='glorot_uniform',activation='linear',weights=None,border_mode='valid',subsample=(1,1),atrous_rate=(1,1),dim_ordering='default',W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,**kwargs)
keras.layers.convolutional.AtrousConvolution2D.__init__(self,nb_filter,nb_row,nb_col,init='glorot_uniform',activation='linear',weights=None,border_mode='valid',subsample=(1,1),atrous_rate=(1,1),dim_ordering='default',W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,**kwargs)
keras.layers.convolutional.AtrousConvolution2D.call(self,x,mask=None)
keras.layers.convolutional.AtrousConvolution2D.get_config(self)
keras.layers.convolutional.AtrousConvolution2D.get_output_shape_for(self,input_shape)
keras.layers.convolutional.Convolution1D(self,nb_filter,filter_length,init='uniform',activation='linear',weights=None,border_mode='valid',subsample_length=1,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,input_length=None,**kwargs)
keras.layers.convolutional.Convolution1D.__init__(self,nb_filter,filter_length,init='uniform',activation='linear',weights=None,border_mode='valid',subsample_length=1,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,input_length=None,**kwargs)
keras.layers.convolutional.Convolution1D.build(self,input_shape)
keras.layers.convolutional.Convolution1D.call(self,x,mask=None)
keras.layers.convolutional.Convolution1D.get_config(self)
keras.layers.convolutional.Convolution1D.get_output_shape_for(self,input_shape)
keras.layers.convolutional.Convolution2D(self,nb_filter,nb_row,nb_col,init='glorot_uniform',activation='linear',weights=None,border_mode='valid',subsample=(1,1),dim_ordering='default',W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,**kwargs)
keras.layers.convolutional.Convolution2D.__init__(self,nb_filter,nb_row,nb_col,init='glorot_uniform',activation='linear',weights=None,border_mode='valid',subsample=(1,1),dim_ordering='default',W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,**kwargs)
keras.layers.convolutional.Convolution2D.build(self,input_shape)
keras.layers.convolutional.Convolution2D.call(self,x,mask=None)
keras.layers.convolutional.Convolution2D.get_config(self)
keras.layers.convolutional.Convolution2D.get_output_shape_for(self,input_shape)
keras.layers.convolutional.Convolution3D(self,nb_filter,kernel_dim1,kernel_dim2,kernel_dim3,init='glorot_uniform',activation='linear',weights=None,border_mode='valid',subsample=(1,1,1),dim_ordering='default',W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,**kwargs)
keras.layers.convolutional.Convolution3D.__init__(self,nb_filter,kernel_dim1,kernel_dim2,kernel_dim3,init='glorot_uniform',activation='linear',weights=None,border_mode='valid',subsample=(1,1,1),dim_ordering='default',W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,**kwargs)
keras.layers.convolutional.Convolution3D.build(self,input_shape)
keras.layers.convolutional.Convolution3D.call(self,x,mask=None)
keras.layers.convolutional.Convolution3D.get_config(self)
keras.layers.convolutional.Convolution3D.get_output_shape_for(self,input_shape)
keras.layers.convolutional.Cropping1D(self,cropping=(1,1),**kwargs)
keras.layers.convolutional.Cropping1D.__init__(self,cropping=(1,1),**kwargs)
keras.layers.convolutional.Cropping1D.build(self,input_shape)
keras.layers.convolutional.Cropping1D.call(self,x,mask=None)
keras.layers.convolutional.Cropping1D.get_config(self)
keras.layers.convolutional.Cropping1D.get_output_shape_for(self,input_shape)
keras.layers.convolutional.Cropping2D(self,cropping=((0,0),(0,0)),dim_ordering='default',**kwargs)
keras.layers.convolutional.Cropping2D.__init__(self,cropping=((0,0),(0,0)),dim_ordering='default',**kwargs)
keras.layers.convolutional.Cropping2D.build(self,input_shape)
keras.layers.convolutional.Cropping2D.call(self,x,mask=None)
keras.layers.convolutional.Cropping2D.get_config(self)
keras.layers.convolutional.Cropping2D.get_output_shape_for(self,input_shape)
keras.layers.convolutional.Cropping3D(self,cropping=((1,1),(1,1),(1,1)),dim_ordering='default',**kwargs)
keras.layers.convolutional.Cropping3D.__init__(self,cropping=((1,1),(1,1),(1,1)),dim_ordering='default',**kwargs)
keras.layers.convolutional.Cropping3D.build(self,input_shape)
keras.layers.convolutional.Cropping3D.call(self,x,mask=None)
keras.layers.convolutional.Cropping3D.get_config(self)
keras.layers.convolutional.Cropping3D.get_output_shape_for(self,input_shape)
keras.layers.convolutional.Deconvolution2D(self,nb_filter,nb_row,nb_col,output_shape,init='glorot_uniform',activation='linear',weights=None,border_mode='valid',subsample=(1,1),dim_ordering='default',W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,**kwargs)
keras.layers.convolutional.Deconvolution2D.__init__(self,nb_filter,nb_row,nb_col,output_shape,init='glorot_uniform',activation='linear',weights=None,border_mode='valid',subsample=(1,1),dim_ordering='default',W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,**kwargs)
keras.layers.convolutional.Deconvolution2D.call(self,x,mask=None)
keras.layers.convolutional.Deconvolution2D.get_config(self)
keras.layers.convolutional.Deconvolution2D.get_output_shape_for(self,input_shape)
keras.layers.convolutional.SeparableConvolution2D(self,nb_filter,nb_row,nb_col,init='glorot_uniform',activation='linear',weights=None,border_mode='valid',subsample=(1,1),depth_multiplier=1,dim_ordering='default',depthwise_regularizer=None,pointwise_regularizer=None,b_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,b_constraint=None,bias=True,**kwargs)
keras.layers.convolutional.SeparableConvolution2D.__init__(self,nb_filter,nb_row,nb_col,init='glorot_uniform',activation='linear',weights=None,border_mode='valid',subsample=(1,1),depth_multiplier=1,dim_ordering='default',depthwise_regularizer=None,pointwise_regularizer=None,b_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,b_constraint=None,bias=True,**kwargs)
keras.layers.convolutional.SeparableConvolution2D.build(self,input_shape)
keras.layers.convolutional.SeparableConvolution2D.call(self,x,mask=None)
keras.layers.convolutional.SeparableConvolution2D.get_config(self)
keras.layers.convolutional.SeparableConvolution2D.get_output_shape_for(self,input_shape)
keras.layers.convolutional.UpSampling1D(self,length=2,**kwargs)
keras.layers.convolutional.UpSampling1D.__init__(self,length=2,**kwargs)
keras.layers.convolutional.UpSampling1D.call(self,x,mask=None)
keras.layers.convolutional.UpSampling1D.get_config(self)
keras.layers.convolutional.UpSampling1D.get_output_shape_for(self,input_shape)
keras.layers.convolutional.UpSampling2D(self,size=(2,2),dim_ordering='default',**kwargs)
keras.layers.convolutional.UpSampling2D.__init__(self,size=(2,2),dim_ordering='default',**kwargs)
keras.layers.convolutional.UpSampling2D.call(self,x,mask=None)
keras.layers.convolutional.UpSampling2D.get_config(self)
keras.layers.convolutional.UpSampling2D.get_output_shape_for(self,input_shape)
keras.layers.convolutional.UpSampling3D(self,size=(2,2,2),dim_ordering='default',**kwargs)
keras.layers.convolutional.UpSampling3D.__init__(self,size=(2,2,2),dim_ordering='default',**kwargs)
keras.layers.convolutional.UpSampling3D.call(self,x,mask=None)
keras.layers.convolutional.UpSampling3D.get_config(self)
keras.layers.convolutional.UpSampling3D.get_output_shape_for(self,input_shape)
keras.layers.convolutional.ZeroPadding1D(self,padding=1,**kwargs)
keras.layers.convolutional.ZeroPadding1D.__init__(self,padding=1,**kwargs)
keras.layers.convolutional.ZeroPadding1D.call(self,x,mask=None)
keras.layers.convolutional.ZeroPadding1D.get_config(self)
keras.layers.convolutional.ZeroPadding1D.get_output_shape_for(self,input_shape)
keras.layers.convolutional.ZeroPadding2D(self,padding=(1,1),dim_ordering='default',**kwargs)
keras.layers.convolutional.ZeroPadding2D.__init__(self,padding=(1,1),dim_ordering='default',**kwargs)
keras.layers.convolutional.ZeroPadding2D.call(self,x,mask=None)
keras.layers.convolutional.ZeroPadding2D.get_config(self)
keras.layers.convolutional.ZeroPadding2D.get_output_shape_for(self,input_shape)
keras.layers.convolutional.ZeroPadding3D(self,padding=(1,1,1),dim_ordering='default',**kwargs)
keras.layers.convolutional.ZeroPadding3D.__init__(self,padding=(1,1,1),dim_ordering='default',**kwargs)
keras.layers.convolutional.ZeroPadding3D.call(self,x,mask=None)
keras.layers.convolutional.ZeroPadding3D.get_config(self)
keras.layers.convolutional.ZeroPadding3D.get_output_shape_for(self,input_shape)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/layers/core.py----------------------------------------
A:keras.layers.core.boolean_mask->K.any(K.not_equal(x, self.mask_value), axis=-1, keepdims=True)
A:keras.layers.core.base_config->super(TimeDistributedDense, self).get_config()
A:keras.layers.core.noise_shape->self._get_noise_shape(x)
A:keras.layers.core.x->K.reshape(x, (-1, input_shape[-1]))
A:keras.layers.core.dim_ordering->K.image_dim_ordering()
A:keras.layers.core.input_shape->list(input_shape)
A:keras.layers.core.self.activation->activations.get(activation)
A:keras.layers.core.self.target_shape->tuple(target_shape)
A:keras.layers.core.output_shape->func_load(config['output_shape'], globs=globals())
A:keras.layers.core.original->numpy.prod(input_shape, dtype=int)
A:keras.layers.core.target_shape->self.get_output_shape_for(input_shape)
A:keras.layers.core.self.dims->tuple(dims)
A:keras.layers.core.self._output_shape->tuple(output_shape)
A:keras.layers.core.shape->self._output_shape(input_shape)
A:keras.layers.core.arg_spec->inspect.getargspec(self.function)
A:keras.layers.core.function->func_load(config['function'], globs=globals())
A:keras.layers.core.function_type->config.pop('function_type')
A:keras.layers.core.output_shape_type->config.pop('output_shape_type')
A:keras.layers.core.self.init->initializations.get(init)
A:keras.layers.core.self.W_regularizer->regularizers.get(W_regularizer)
A:keras.layers.core.self.b_regularizer->regularizers.get(b_regularizer)
A:keras.layers.core.self.activity_regularizer->regularizers.get(activity_regularizer)
A:keras.layers.core.self.W_constraint->constraints.get(W_constraint)
A:keras.layers.core.self.b_constraint->constraints.get(b_constraint)
A:keras.layers.core.self.W->self.init((input_dim, self.output_dim), name='{}_W'.format(self.name))
A:keras.layers.core.self.b->K.zeros((self.output_dim,), name='{}_b'.format(self.name))
A:keras.layers.core.output->K.max(output, axis=1)
A:keras.layers.core.activity_regularizer->ActivityRegularizer(l1=l1, l2=l2)
A:keras.layers.core.self.W_carry->self.init((input_dim, input_dim), name='{}_W_carry'.format(self.name))
A:keras.layers.core.self.b_carry->K.variable(np.ones((input_dim,)) * self.transform_bias, name='{}_b_carry'.format(self.name))
A:keras.layers.core.y->self.activation(y)
A:keras.layers.core.transform_weight->activations.sigmoid(y)
A:keras.layers.core.act->self.activation(y)
keras.layers.Activation(self,activation,**kwargs)
keras.layers.Activation.call(self,x,mask=None)
keras.layers.Activation.get_config(self)
keras.layers.ActivityRegularization(self,l1=0.0,l2=0.0,**kwargs)
keras.layers.ActivityRegularization.get_config(self)
keras.layers.Dense(self,output_dim,init='glorot_uniform',activation='linear',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,**kwargs)
keras.layers.Dense.build(self,input_shape)
keras.layers.Dense.call(self,x,mask=None)
keras.layers.Dense.get_config(self)
keras.layers.Dense.get_output_shape_for(self,input_shape)
keras.layers.Dropout(self,p,**kwargs)
keras.layers.Dropout._get_noise_shape(self,x)
keras.layers.Dropout.call(self,x,mask=None)
keras.layers.Dropout.get_config(self)
keras.layers.Flatten(self,**kwargs)
keras.layers.Flatten.call(self,x,mask=None)
keras.layers.Flatten.get_output_shape_for(self,input_shape)
keras.layers.Highway(self,init='glorot_uniform',transform_bias=-2,activation='linear',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,**kwargs)
keras.layers.Highway.build(self,input_shape)
keras.layers.Highway.call(self,x,mask=None)
keras.layers.Highway.get_config(self)
keras.layers.Lambda(self,function,output_shape=None,arguments={},**kwargs)
keras.layers.Lambda.call(self,x,mask=None)
keras.layers.Lambda.from_config(cls,config)
keras.layers.Lambda.get_config(self)
keras.layers.Lambda.get_output_shape_for(self,input_shape)
keras.layers.Masking(self,mask_value=0.0,**kwargs)
keras.layers.Masking.call(self,x,mask=None)
keras.layers.Masking.compute_mask(self,input,input_mask=None)
keras.layers.Masking.get_config(self)
keras.layers.MaxoutDense(self,output_dim,nb_feature=4,init='glorot_uniform',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,**kwargs)
keras.layers.MaxoutDense.build(self,input_shape)
keras.layers.MaxoutDense.call(self,x,mask=None)
keras.layers.MaxoutDense.get_config(self)
keras.layers.MaxoutDense.get_output_shape_for(self,input_shape)
keras.layers.Permute(self,dims,**kwargs)
keras.layers.Permute.call(self,x,mask=None)
keras.layers.Permute.get_config(self)
keras.layers.Permute.get_output_shape_for(self,input_shape)
keras.layers.RepeatVector(self,n,**kwargs)
keras.layers.RepeatVector.call(self,x,mask=None)
keras.layers.RepeatVector.get_config(self)
keras.layers.RepeatVector.get_output_shape_for(self,input_shape)
keras.layers.Reshape(self,target_shape,**kwargs)
keras.layers.Reshape._fix_unknown_dimension(self,input_shape,output_shape)
keras.layers.Reshape.call(self,x,mask=None)
keras.layers.Reshape.get_config(self)
keras.layers.Reshape.get_output_shape_for(self,input_shape)
keras.layers.SpatialDropout2D(self,p,dim_ordering='default',**kwargs)
keras.layers.SpatialDropout2D._get_noise_shape(self,x)
keras.layers.SpatialDropout3D(self,p,dim_ordering='default',**kwargs)
keras.layers.SpatialDropout3D._get_noise_shape(self,x)
keras.layers.TimeDistributedDense(self,output_dim,init='glorot_uniform',activation='linear',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,input_length=None,**kwargs)
keras.layers.TimeDistributedDense.build(self,input_shape)
keras.layers.TimeDistributedDense.call(self,x,mask=None)
keras.layers.TimeDistributedDense.get_config(self)
keras.layers.TimeDistributedDense.get_output_shape_for(self,input_shape)
keras.layers.core.Activation(self,activation,**kwargs)
keras.layers.core.Activation.__init__(self,activation,**kwargs)
keras.layers.core.Activation.call(self,x,mask=None)
keras.layers.core.Activation.get_config(self)
keras.layers.core.ActivityRegularization(self,l1=0.0,l2=0.0,**kwargs)
keras.layers.core.ActivityRegularization.__init__(self,l1=0.0,l2=0.0,**kwargs)
keras.layers.core.ActivityRegularization.get_config(self)
keras.layers.core.Dense(self,output_dim,init='glorot_uniform',activation='linear',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,**kwargs)
keras.layers.core.Dense.__init__(self,output_dim,init='glorot_uniform',activation='linear',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,**kwargs)
keras.layers.core.Dense.build(self,input_shape)
keras.layers.core.Dense.call(self,x,mask=None)
keras.layers.core.Dense.get_config(self)
keras.layers.core.Dense.get_output_shape_for(self,input_shape)
keras.layers.core.Dropout(self,p,**kwargs)
keras.layers.core.Dropout.__init__(self,p,**kwargs)
keras.layers.core.Dropout._get_noise_shape(self,x)
keras.layers.core.Dropout.call(self,x,mask=None)
keras.layers.core.Dropout.get_config(self)
keras.layers.core.Flatten(self,**kwargs)
keras.layers.core.Flatten.__init__(self,**kwargs)
keras.layers.core.Flatten.call(self,x,mask=None)
keras.layers.core.Flatten.get_output_shape_for(self,input_shape)
keras.layers.core.Highway(self,init='glorot_uniform',transform_bias=-2,activation='linear',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,**kwargs)
keras.layers.core.Highway.__init__(self,init='glorot_uniform',transform_bias=-2,activation='linear',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,**kwargs)
keras.layers.core.Highway.build(self,input_shape)
keras.layers.core.Highway.call(self,x,mask=None)
keras.layers.core.Highway.get_config(self)
keras.layers.core.Lambda(self,function,output_shape=None,arguments={},**kwargs)
keras.layers.core.Lambda.__init__(self,function,output_shape=None,arguments={},**kwargs)
keras.layers.core.Lambda.call(self,x,mask=None)
keras.layers.core.Lambda.from_config(cls,config)
keras.layers.core.Lambda.get_config(self)
keras.layers.core.Lambda.get_output_shape_for(self,input_shape)
keras.layers.core.Masking(self,mask_value=0.0,**kwargs)
keras.layers.core.Masking.__init__(self,mask_value=0.0,**kwargs)
keras.layers.core.Masking.call(self,x,mask=None)
keras.layers.core.Masking.compute_mask(self,input,input_mask=None)
keras.layers.core.Masking.get_config(self)
keras.layers.core.MaxoutDense(self,output_dim,nb_feature=4,init='glorot_uniform',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,**kwargs)
keras.layers.core.MaxoutDense.__init__(self,output_dim,nb_feature=4,init='glorot_uniform',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,**kwargs)
keras.layers.core.MaxoutDense.build(self,input_shape)
keras.layers.core.MaxoutDense.call(self,x,mask=None)
keras.layers.core.MaxoutDense.get_config(self)
keras.layers.core.MaxoutDense.get_output_shape_for(self,input_shape)
keras.layers.core.Permute(self,dims,**kwargs)
keras.layers.core.Permute.__init__(self,dims,**kwargs)
keras.layers.core.Permute.call(self,x,mask=None)
keras.layers.core.Permute.get_config(self)
keras.layers.core.Permute.get_output_shape_for(self,input_shape)
keras.layers.core.RepeatVector(self,n,**kwargs)
keras.layers.core.RepeatVector.__init__(self,n,**kwargs)
keras.layers.core.RepeatVector.call(self,x,mask=None)
keras.layers.core.RepeatVector.get_config(self)
keras.layers.core.RepeatVector.get_output_shape_for(self,input_shape)
keras.layers.core.Reshape(self,target_shape,**kwargs)
keras.layers.core.Reshape.__init__(self,target_shape,**kwargs)
keras.layers.core.Reshape._fix_unknown_dimension(self,input_shape,output_shape)
keras.layers.core.Reshape.call(self,x,mask=None)
keras.layers.core.Reshape.get_config(self)
keras.layers.core.Reshape.get_output_shape_for(self,input_shape)
keras.layers.core.SpatialDropout2D(self,p,dim_ordering='default',**kwargs)
keras.layers.core.SpatialDropout2D.__init__(self,p,dim_ordering='default',**kwargs)
keras.layers.core.SpatialDropout2D._get_noise_shape(self,x)
keras.layers.core.SpatialDropout3D(self,p,dim_ordering='default',**kwargs)
keras.layers.core.SpatialDropout3D.__init__(self,p,dim_ordering='default',**kwargs)
keras.layers.core.SpatialDropout3D._get_noise_shape(self,x)
keras.layers.core.TimeDistributedDense(self,output_dim,init='glorot_uniform',activation='linear',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,input_length=None,**kwargs)
keras.layers.core.TimeDistributedDense.__init__(self,output_dim,init='glorot_uniform',activation='linear',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,input_length=None,**kwargs)
keras.layers.core.TimeDistributedDense.build(self,input_shape)
keras.layers.core.TimeDistributedDense.call(self,x,mask=None)
keras.layers.core.TimeDistributedDense.get_config(self)
keras.layers.core.TimeDistributedDense.get_output_shape_for(self,input_shape)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/layers/recurrent.py----------------------------------------
A:keras.layers.recurrent.ones->K.tile(ones, (1, input_dim))
A:keras.layers.recurrent.dropout_matrix->K.dropout(ones, dropout)
A:keras.layers.recurrent.expanded_dropout_matrix->K.repeat(dropout_matrix, timesteps)
A:keras.layers.recurrent.x->K.reshape(x, (-1, timesteps, output_dim))
A:keras.layers.recurrent.initial_state->K.tile(initial_state, [1, self.output_dim])
A:keras.layers.recurrent.initial_states->self.get_initial_states(x)
A:keras.layers.recurrent.constants->self.get_constants(x)
A:keras.layers.recurrent.preprocessed_input->self.preprocess_input(x)
A:keras.layers.recurrent.(last_output, outputs, states)->K.rnn(self.step, preprocessed_input, initial_states, go_backwards=self.go_backwards, mask=mask, constants=constants, unroll=self.unroll, input_length=input_shape[1])
A:keras.layers.recurrent.base_config->super(LSTM, self).get_config()
A:keras.layers.recurrent.self.init->initializations.get(init)
A:keras.layers.recurrent.self.inner_init->initializations.get(inner_init)
A:keras.layers.recurrent.self.activation->activations.get(activation)
A:keras.layers.recurrent.self.W_regularizer->regularizers.get(W_regularizer)
A:keras.layers.recurrent.self.U_regularizer->regularizers.get(U_regularizer)
A:keras.layers.recurrent.self.b_regularizer->regularizers.get(b_regularizer)
A:keras.layers.recurrent.self.W->K.concatenate([self.W_i, self.W_f, self.W_c, self.W_o])
A:keras.layers.recurrent.self.U->K.concatenate([self.U_i, self.U_f, self.U_c, self.U_o])
A:keras.layers.recurrent.self.b->K.concatenate([self.b_i, self.b_f, self.b_c, self.b_o])
A:keras.layers.recurrent.output->self.activation(h + K.dot(prev_output * B_U, self.U))
A:keras.layers.recurrent.B_U->K.in_train_phase(K.dropout(ones, self.dropout_U), ones)
A:keras.layers.recurrent.B_W->K.in_train_phase(K.dropout(ones, self.dropout_W), ones)
A:keras.layers.recurrent.self.inner_activation->activations.get(inner_activation)
A:keras.layers.recurrent.self.W_z->self.init((self.input_dim, self.output_dim), name='{}_W_z'.format(self.name))
A:keras.layers.recurrent.self.U_z->self.inner_init((self.output_dim, self.output_dim), name='{}_U_z'.format(self.name))
A:keras.layers.recurrent.self.b_z->K.zeros((self.output_dim,), name='{}_b_z'.format(self.name))
A:keras.layers.recurrent.self.W_r->self.init((self.input_dim, self.output_dim), name='{}_W_r'.format(self.name))
A:keras.layers.recurrent.self.U_r->self.inner_init((self.output_dim, self.output_dim), name='{}_U_r'.format(self.name))
A:keras.layers.recurrent.self.b_r->K.zeros((self.output_dim,), name='{}_b_r'.format(self.name))
A:keras.layers.recurrent.self.W_h->self.init((self.input_dim, self.output_dim), name='{}_W_h'.format(self.name))
A:keras.layers.recurrent.self.U_h->self.inner_init((self.output_dim, self.output_dim), name='{}_U_h'.format(self.name))
A:keras.layers.recurrent.self.b_h->K.zeros((self.output_dim,), name='{}_b_h'.format(self.name))
A:keras.layers.recurrent.x_z->time_distributed_dense(x, self.W_z, self.b_z, self.dropout_W, input_dim, self.output_dim, timesteps)
A:keras.layers.recurrent.x_r->time_distributed_dense(x, self.W_r, self.b_r, self.dropout_W, input_dim, self.output_dim, timesteps)
A:keras.layers.recurrent.x_h->time_distributed_dense(x, self.W_h, self.b_h, self.dropout_W, input_dim, self.output_dim, timesteps)
A:keras.layers.recurrent.matrix_inner->K.dot(h_tm1 * B_U[0], self.U[:, :2 * self.output_dim])
A:keras.layers.recurrent.z->self.inner_activation(x_z + K.dot(h_tm1 * B_U[0], self.U_z))
A:keras.layers.recurrent.r->self.inner_activation(x_r + K.dot(h_tm1 * B_U[1], self.U_r))
A:keras.layers.recurrent.inner_h->K.dot(r * h_tm1 * B_U[0], self.U[:, 2 * self.output_dim:])
A:keras.layers.recurrent.hh->self.activation(x_h + K.dot(r * h_tm1 * B_U[2], self.U_h))
A:keras.layers.recurrent.self.forget_bias_init->initializations.get(forget_bias_init)
A:keras.layers.recurrent.self.W_i->self.init((self.input_dim, self.output_dim), name='{}_W_i'.format(self.name))
A:keras.layers.recurrent.self.U_i->self.inner_init((self.output_dim, self.output_dim), name='{}_U_i'.format(self.name))
A:keras.layers.recurrent.self.b_i->K.zeros((self.output_dim,), name='{}_b_i'.format(self.name))
A:keras.layers.recurrent.self.W_f->self.init((self.input_dim, self.output_dim), name='{}_W_f'.format(self.name))
A:keras.layers.recurrent.self.U_f->self.inner_init((self.output_dim, self.output_dim), name='{}_U_f'.format(self.name))
A:keras.layers.recurrent.self.b_f->self.forget_bias_init((self.output_dim,), name='{}_b_f'.format(self.name))
A:keras.layers.recurrent.self.W_c->self.init((self.input_dim, self.output_dim), name='{}_W_c'.format(self.name))
A:keras.layers.recurrent.self.U_c->self.inner_init((self.output_dim, self.output_dim), name='{}_U_c'.format(self.name))
A:keras.layers.recurrent.self.b_c->K.zeros((self.output_dim,), name='{}_b_c'.format(self.name))
A:keras.layers.recurrent.self.W_o->self.init((self.input_dim, self.output_dim), name='{}_W_o'.format(self.name))
A:keras.layers.recurrent.self.U_o->self.inner_init((self.output_dim, self.output_dim), name='{}_U_o'.format(self.name))
A:keras.layers.recurrent.self.b_o->K.zeros((self.output_dim,), name='{}_b_o'.format(self.name))
A:keras.layers.recurrent.x_i->time_distributed_dense(x, self.W_i, self.b_i, dropout, input_dim, self.output_dim, timesteps)
A:keras.layers.recurrent.x_f->time_distributed_dense(x, self.W_f, self.b_f, dropout, input_dim, self.output_dim, timesteps)
A:keras.layers.recurrent.x_c->time_distributed_dense(x, self.W_c, self.b_c, dropout, input_dim, self.output_dim, timesteps)
A:keras.layers.recurrent.x_o->time_distributed_dense(x, self.W_o, self.b_o, dropout, input_dim, self.output_dim, timesteps)
A:keras.layers.recurrent.i->self.inner_activation(x_i + K.dot(h_tm1 * B_U[0], self.U_i))
A:keras.layers.recurrent.f->self.inner_activation(x_f + K.dot(h_tm1 * B_U[1], self.U_f))
A:keras.layers.recurrent.o->self.inner_activation(x_o + K.dot(h_tm1 * B_U[3], self.U_o))
keras.layers.GRU(self,output_dim,init='glorot_uniform',inner_init='orthogonal',activation='tanh',inner_activation='hard_sigmoid',W_regularizer=None,U_regularizer=None,b_regularizer=None,dropout_W=0.0,dropout_U=0.0,**kwargs)
keras.layers.GRU.build(self,input_shape)
keras.layers.GRU.get_config(self)
keras.layers.GRU.get_constants(self,x)
keras.layers.GRU.preprocess_input(self,x)
keras.layers.GRU.reset_states(self)
keras.layers.GRU.step(self,x,states)
keras.layers.LSTM(self,output_dim,init='glorot_uniform',inner_init='orthogonal',forget_bias_init='one',activation='tanh',inner_activation='hard_sigmoid',W_regularizer=None,U_regularizer=None,b_regularizer=None,dropout_W=0.0,dropout_U=0.0,**kwargs)
keras.layers.LSTM.build(self,input_shape)
keras.layers.LSTM.get_config(self)
keras.layers.LSTM.get_constants(self,x)
keras.layers.LSTM.preprocess_input(self,x)
keras.layers.LSTM.reset_states(self)
keras.layers.LSTM.step(self,x,states)
keras.layers.Recurrent(self,weights=None,return_sequences=False,go_backwards=False,stateful=False,unroll=False,consume_less='cpu',input_dim=None,input_length=None,**kwargs)
keras.layers.Recurrent.call(self,x,mask=None)
keras.layers.Recurrent.compute_mask(self,input,mask)
keras.layers.Recurrent.get_config(self)
keras.layers.Recurrent.get_constants(self,x)
keras.layers.Recurrent.get_initial_states(self,x)
keras.layers.Recurrent.get_output_shape_for(self,input_shape)
keras.layers.Recurrent.preprocess_input(self,x)
keras.layers.Recurrent.step(self,x,states)
keras.layers.SimpleRNN(self,output_dim,init='glorot_uniform',inner_init='orthogonal',activation='tanh',W_regularizer=None,U_regularizer=None,b_regularizer=None,dropout_W=0.0,dropout_U=0.0,**kwargs)
keras.layers.SimpleRNN.build(self,input_shape)
keras.layers.SimpleRNN.get_config(self)
keras.layers.SimpleRNN.get_constants(self,x)
keras.layers.SimpleRNN.preprocess_input(self,x)
keras.layers.SimpleRNN.reset_states(self)
keras.layers.SimpleRNN.step(self,x,states)
keras.layers.recurrent.GRU(self,output_dim,init='glorot_uniform',inner_init='orthogonal',activation='tanh',inner_activation='hard_sigmoid',W_regularizer=None,U_regularizer=None,b_regularizer=None,dropout_W=0.0,dropout_U=0.0,**kwargs)
keras.layers.recurrent.GRU.__init__(self,output_dim,init='glorot_uniform',inner_init='orthogonal',activation='tanh',inner_activation='hard_sigmoid',W_regularizer=None,U_regularizer=None,b_regularizer=None,dropout_W=0.0,dropout_U=0.0,**kwargs)
keras.layers.recurrent.GRU.build(self,input_shape)
keras.layers.recurrent.GRU.get_config(self)
keras.layers.recurrent.GRU.get_constants(self,x)
keras.layers.recurrent.GRU.preprocess_input(self,x)
keras.layers.recurrent.GRU.reset_states(self)
keras.layers.recurrent.GRU.step(self,x,states)
keras.layers.recurrent.LSTM(self,output_dim,init='glorot_uniform',inner_init='orthogonal',forget_bias_init='one',activation='tanh',inner_activation='hard_sigmoid',W_regularizer=None,U_regularizer=None,b_regularizer=None,dropout_W=0.0,dropout_U=0.0,**kwargs)
keras.layers.recurrent.LSTM.__init__(self,output_dim,init='glorot_uniform',inner_init='orthogonal',forget_bias_init='one',activation='tanh',inner_activation='hard_sigmoid',W_regularizer=None,U_regularizer=None,b_regularizer=None,dropout_W=0.0,dropout_U=0.0,**kwargs)
keras.layers.recurrent.LSTM.build(self,input_shape)
keras.layers.recurrent.LSTM.get_config(self)
keras.layers.recurrent.LSTM.get_constants(self,x)
keras.layers.recurrent.LSTM.preprocess_input(self,x)
keras.layers.recurrent.LSTM.reset_states(self)
keras.layers.recurrent.LSTM.step(self,x,states)
keras.layers.recurrent.Recurrent(self,weights=None,return_sequences=False,go_backwards=False,stateful=False,unroll=False,consume_less='cpu',input_dim=None,input_length=None,**kwargs)
keras.layers.recurrent.Recurrent.__init__(self,weights=None,return_sequences=False,go_backwards=False,stateful=False,unroll=False,consume_less='cpu',input_dim=None,input_length=None,**kwargs)
keras.layers.recurrent.Recurrent.call(self,x,mask=None)
keras.layers.recurrent.Recurrent.compute_mask(self,input,mask)
keras.layers.recurrent.Recurrent.get_config(self)
keras.layers.recurrent.Recurrent.get_constants(self,x)
keras.layers.recurrent.Recurrent.get_initial_states(self,x)
keras.layers.recurrent.Recurrent.get_output_shape_for(self,input_shape)
keras.layers.recurrent.Recurrent.preprocess_input(self,x)
keras.layers.recurrent.Recurrent.step(self,x,states)
keras.layers.recurrent.SimpleRNN(self,output_dim,init='glorot_uniform',inner_init='orthogonal',activation='tanh',W_regularizer=None,U_regularizer=None,b_regularizer=None,dropout_W=0.0,dropout_U=0.0,**kwargs)
keras.layers.recurrent.SimpleRNN.__init__(self,output_dim,init='glorot_uniform',inner_init='orthogonal',activation='tanh',W_regularizer=None,U_regularizer=None,b_regularizer=None,dropout_W=0.0,dropout_U=0.0,**kwargs)
keras.layers.recurrent.SimpleRNN.build(self,input_shape)
keras.layers.recurrent.SimpleRNN.get_config(self)
keras.layers.recurrent.SimpleRNN.get_constants(self,x)
keras.layers.recurrent.SimpleRNN.preprocess_input(self,x)
keras.layers.recurrent.SimpleRNN.reset_states(self)
keras.layers.recurrent.SimpleRNN.step(self,x,states)
keras.layers.recurrent.time_distributed_dense(x,w,b=None,dropout=None,input_dim=None,output_dim=None,timesteps=None)
keras.layers.time_distributed_dense(x,w,b=None,dropout=None,input_dim=None,output_dim=None,timesteps=None)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/layers/embeddings.py----------------------------------------
A:keras.layers.embeddings.self.init->initializations.get(init)
A:keras.layers.embeddings.self.W_constraint->constraints.get(W_constraint)
A:keras.layers.embeddings.self.W_regularizer->regularizers.get(W_regularizer)
A:keras.layers.embeddings.self.activity_regularizer->regularizers.get(activity_regularizer)
A:keras.layers.embeddings.self.W->self.init((self.input_dim, self.output_dim), name='{}_W'.format(self.name))
A:keras.layers.embeddings.x->K.cast(x, 'int32')
A:keras.layers.embeddings.B->K.expand_dims(B)
A:keras.layers.embeddings.W->K.in_train_phase(self.W * B, self.W)
A:keras.layers.embeddings.out->K.gather(W, x)
A:keras.layers.embeddings.base_config->super(Embedding, self).get_config()
keras.layers.Embedding(self,input_dim,output_dim,init='uniform',input_length=None,W_regularizer=None,activity_regularizer=None,W_constraint=None,mask_zero=False,weights=None,dropout=0.0,**kwargs)
keras.layers.Embedding.build(self,input_shape)
keras.layers.Embedding.call(self,x,mask=None)
keras.layers.Embedding.compute_mask(self,x,mask=None)
keras.layers.Embedding.get_config(self)
keras.layers.Embedding.get_output_shape_for(self,input_shape)
keras.layers.embeddings.Embedding(self,input_dim,output_dim,init='uniform',input_length=None,W_regularizer=None,activity_regularizer=None,W_constraint=None,mask_zero=False,weights=None,dropout=0.0,**kwargs)
keras.layers.embeddings.Embedding.__init__(self,input_dim,output_dim,init='uniform',input_length=None,W_regularizer=None,activity_regularizer=None,W_constraint=None,mask_zero=False,weights=None,dropout=0.0,**kwargs)
keras.layers.embeddings.Embedding.build(self,input_shape)
keras.layers.embeddings.Embedding.call(self,x,mask=None)
keras.layers.embeddings.Embedding.compute_mask(self,x,mask=None)
keras.layers.embeddings.Embedding.get_config(self)
keras.layers.embeddings.Embedding.get_output_shape_for(self,input_shape)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/layers/noise.py----------------------------------------
A:keras.layers.noise.base_config->super(GaussianDropout, self).get_config()
keras.layers.GaussianDropout(self,p,**kwargs)
keras.layers.GaussianDropout.call(self,x,mask=None)
keras.layers.GaussianDropout.get_config(self)
keras.layers.GaussianNoise(self,sigma,**kwargs)
keras.layers.GaussianNoise.call(self,x,mask=None)
keras.layers.GaussianNoise.get_config(self)
keras.layers.noise.GaussianDropout(self,p,**kwargs)
keras.layers.noise.GaussianDropout.__init__(self,p,**kwargs)
keras.layers.noise.GaussianDropout.call(self,x,mask=None)
keras.layers.noise.GaussianDropout.get_config(self)
keras.layers.noise.GaussianNoise(self,sigma,**kwargs)
keras.layers.noise.GaussianNoise.__init__(self,sigma,**kwargs)
keras.layers.noise.GaussianNoise.call(self,x,mask=None)
keras.layers.noise.GaussianNoise.get_config(self)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/layers/wrappers.py----------------------------------------
A:keras.layers.wrappers.self.trainable_weights->getattr(self.layer, 'trainable_weights', [])
A:keras.layers.wrappers.self.non_trainable_weights->getattr(self.layer, 'non_trainable_weights', [])
A:keras.layers.wrappers.self.updates->getattr(self.layer, 'updates', [])
A:keras.layers.wrappers.self.regularizers->getattr(self.layer, 'regularizers', [])
A:keras.layers.wrappers.self.constraints->getattr(self.layer, 'constraints', {})
A:keras.layers.wrappers.weights->self.layer.get_weights()
A:keras.layers.wrappers.base_config->super(Bidirectional, self).get_config()
A:keras.layers.wrappers.layer->layer_from_config(config.pop('layer'))
A:keras.layers.wrappers.child_output_shape->self.layer.get_output_shape_for(child_input_shape)
A:keras.layers.wrappers.output->self.layer.call(x)
A:keras.layers.wrappers.(last_output, outputs, states)->K.rnn(step, X, initial_states=[], input_length=input_length, unroll=unroll)
A:keras.layers.wrappers.X->K.reshape(X, (-1,) + input_shape[2:])
A:keras.layers.wrappers.y->K.reshape(y, (-1, input_length) + output_shape[2:])
A:keras.layers.wrappers.output_shape->self.get_output_shape_for(input_shape)
A:keras.layers.wrappers.config->layer_from_config(config.pop('layer')).get_config()
A:keras.layers.wrappers.self.backward_layer->layer_from_config(config.pop('layer')).__class__.from_config(config)
A:keras.layers.wrappers.nw->len(weights)
A:keras.layers.wrappers.shape->list(self.forward_layer.get_output_shape_for(input_shape))
A:keras.layers.wrappers.Y->self.forward_layer.call(X, mask)
A:keras.layers.wrappers.Y_rev->K.reverse(Y_rev, 1)
keras.layers.Bidirectional(self,layer,merge_mode='concat',weights=None,**kwargs)
keras.layers.Bidirectional.build(self,input_shape)
keras.layers.Bidirectional.call(self,X,mask=None)
keras.layers.Bidirectional.compute_mask(self,input,mask)
keras.layers.Bidirectional.constraints(self)
keras.layers.Bidirectional.get_config(self)
keras.layers.Bidirectional.get_output_shape_for(self,input_shape)
keras.layers.Bidirectional.get_weights(self)
keras.layers.Bidirectional.non_trainable_weights(self)
keras.layers.Bidirectional.regularizers(self)
keras.layers.Bidirectional.reset_states(self)
keras.layers.Bidirectional.set_weights(self,weights)
keras.layers.Bidirectional.trainable_weights(self)
keras.layers.Bidirectional.updates(self)
keras.layers.TimeDistributed(self,layer,**kwargs)
keras.layers.TimeDistributed.build(self,input_shape)
keras.layers.TimeDistributed.call(self,X,mask=None)
keras.layers.TimeDistributed.get_output_shape_for(self,input_shape)
keras.layers.Wrapper(self,layer,**kwargs)
keras.layers.Wrapper.build(self,input_shape=None)
keras.layers.Wrapper.from_config(cls,config)
keras.layers.Wrapper.get_config(self)
keras.layers.Wrapper.get_weights(self)
keras.layers.Wrapper.set_weights(self,weights)
keras.layers.wrappers.Bidirectional(self,layer,merge_mode='concat',weights=None,**kwargs)
keras.layers.wrappers.Bidirectional.__init__(self,layer,merge_mode='concat',weights=None,**kwargs)
keras.layers.wrappers.Bidirectional.build(self,input_shape)
keras.layers.wrappers.Bidirectional.call(self,X,mask=None)
keras.layers.wrappers.Bidirectional.compute_mask(self,input,mask)
keras.layers.wrappers.Bidirectional.constraints(self)
keras.layers.wrappers.Bidirectional.get_config(self)
keras.layers.wrappers.Bidirectional.get_output_shape_for(self,input_shape)
keras.layers.wrappers.Bidirectional.get_weights(self)
keras.layers.wrappers.Bidirectional.non_trainable_weights(self)
keras.layers.wrappers.Bidirectional.regularizers(self)
keras.layers.wrappers.Bidirectional.reset_states(self)
keras.layers.wrappers.Bidirectional.set_weights(self,weights)
keras.layers.wrappers.Bidirectional.trainable_weights(self)
keras.layers.wrappers.Bidirectional.updates(self)
keras.layers.wrappers.TimeDistributed(self,layer,**kwargs)
keras.layers.wrappers.TimeDistributed.__init__(self,layer,**kwargs)
keras.layers.wrappers.TimeDistributed.build(self,input_shape)
keras.layers.wrappers.TimeDistributed.call(self,X,mask=None)
keras.layers.wrappers.TimeDistributed.get_output_shape_for(self,input_shape)
keras.layers.wrappers.Wrapper(self,layer,**kwargs)
keras.layers.wrappers.Wrapper.__init__(self,layer,**kwargs)
keras.layers.wrappers.Wrapper.build(self,input_shape=None)
keras.layers.wrappers.Wrapper.from_config(cls,config)
keras.layers.wrappers.Wrapper.get_config(self)
keras.layers.wrappers.Wrapper.get_weights(self)
keras.layers.wrappers.Wrapper.set_weights(self,weights)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/layers/pooling.py----------------------------------------
A:keras.layers.pooling.length->conv_output_length(input_shape[1], self.pool_length, self.border_mode, self.stride)
A:keras.layers.pooling.x->K.permute_dimensions(x, (0, 2, 1, 3))
A:keras.layers.pooling.output->K.pool3d(inputs, pool_size, strides, border_mode, dim_ordering, pool_mode='avg')
A:keras.layers.pooling.base_config->super(_GlobalPooling3D, self).get_config()
A:keras.layers.pooling.dim_ordering->K.image_dim_ordering()
A:keras.layers.pooling.self.pool_size->tuple(pool_size)
A:keras.layers.pooling.self.strides->tuple(strides)
A:keras.layers.pooling.rows->conv_output_length(rows, self.pool_size[0], self.border_mode, self.strides[0])
A:keras.layers.pooling.cols->conv_output_length(cols, self.pool_size[1], self.border_mode, self.strides[1])
A:keras.layers.pooling.len_dim1->conv_output_length(len_dim1, self.pool_size[0], self.border_mode, self.strides[0])
A:keras.layers.pooling.len_dim2->conv_output_length(len_dim2, self.pool_size[1], self.border_mode, self.strides[1])
A:keras.layers.pooling.len_dim3->conv_output_length(len_dim3, self.pool_size[2], self.border_mode, self.strides[2])
keras.layers.AveragePooling1D(self,pool_length=2,stride=None,border_mode='valid',**kwargs)
keras.layers.AveragePooling1D._pooling_function(self,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers.AveragePooling2D(self,pool_size=(2,2),strides=None,border_mode='valid',dim_ordering='default',**kwargs)
keras.layers.AveragePooling2D._pooling_function(self,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers.AveragePooling3D(self,pool_size=(2,2,2),strides=None,border_mode='valid',dim_ordering='default',**kwargs)
keras.layers.AveragePooling3D._pooling_function(self,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers.GlobalAveragePooling1D(_GlobalPooling1D)
keras.layers.GlobalAveragePooling1D.call(self,x,mask=None)
keras.layers.GlobalAveragePooling2D(_GlobalPooling2D)
keras.layers.GlobalAveragePooling2D.call(self,x,mask=None)
keras.layers.GlobalAveragePooling3D(_GlobalPooling3D)
keras.layers.GlobalAveragePooling3D.call(self,x,mask=None)
keras.layers.GlobalMaxPooling1D(_GlobalPooling1D)
keras.layers.GlobalMaxPooling1D.call(self,x,mask=None)
keras.layers.GlobalMaxPooling2D(_GlobalPooling2D)
keras.layers.GlobalMaxPooling2D.call(self,x,mask=None)
keras.layers.GlobalMaxPooling3D(_GlobalPooling3D)
keras.layers.GlobalMaxPooling3D.call(self,x,mask=None)
keras.layers.MaxPooling1D(self,pool_length=2,stride=None,border_mode='valid',**kwargs)
keras.layers.MaxPooling1D._pooling_function(self,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers.MaxPooling2D(self,pool_size=(2,2),strides=None,border_mode='valid',dim_ordering='default',**kwargs)
keras.layers.MaxPooling2D._pooling_function(self,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers.MaxPooling3D(self,pool_size=(2,2,2),strides=None,border_mode='valid',dim_ordering='default',**kwargs)
keras.layers.MaxPooling3D._pooling_function(self,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers._GlobalPooling1D(self,**kwargs)
keras.layers._GlobalPooling1D.call(self,x,mask=None)
keras.layers._GlobalPooling1D.get_output_shape_for(self,input_shape)
keras.layers._GlobalPooling2D(self,dim_ordering='default',**kwargs)
keras.layers._GlobalPooling2D.call(self,x,mask=None)
keras.layers._GlobalPooling2D.get_config(self)
keras.layers._GlobalPooling2D.get_output_shape_for(self,input_shape)
keras.layers._GlobalPooling3D(self,dim_ordering='default',**kwargs)
keras.layers._GlobalPooling3D.call(self,x,mask=None)
keras.layers._GlobalPooling3D.get_config(self)
keras.layers._GlobalPooling3D.get_output_shape_for(self,input_shape)
keras.layers._Pooling1D(self,pool_length=2,stride=None,border_mode='valid',**kwargs)
keras.layers._Pooling1D._pooling_function(self,back_end,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers._Pooling1D.call(self,x,mask=None)
keras.layers._Pooling1D.get_config(self)
keras.layers._Pooling1D.get_output_shape_for(self,input_shape)
keras.layers._Pooling2D(self,pool_size=(2,2),strides=None,border_mode='valid',dim_ordering='default',**kwargs)
keras.layers._Pooling2D._pooling_function(self,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers._Pooling2D.call(self,x,mask=None)
keras.layers._Pooling2D.get_config(self)
keras.layers._Pooling2D.get_output_shape_for(self,input_shape)
keras.layers._Pooling3D(self,pool_size=(2,2,2),strides=None,border_mode='valid',dim_ordering='default',**kwargs)
keras.layers._Pooling3D._pooling_function(self,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers._Pooling3D.call(self,x,mask=None)
keras.layers._Pooling3D.get_config(self)
keras.layers._Pooling3D.get_output_shape_for(self,input_shape)
keras.layers.pooling.AveragePooling1D(self,pool_length=2,stride=None,border_mode='valid',**kwargs)
keras.layers.pooling.AveragePooling1D.__init__(self,pool_length=2,stride=None,border_mode='valid',**kwargs)
keras.layers.pooling.AveragePooling1D._pooling_function(self,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers.pooling.AveragePooling2D(self,pool_size=(2,2),strides=None,border_mode='valid',dim_ordering='default',**kwargs)
keras.layers.pooling.AveragePooling2D.__init__(self,pool_size=(2,2),strides=None,border_mode='valid',dim_ordering='default',**kwargs)
keras.layers.pooling.AveragePooling2D._pooling_function(self,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers.pooling.AveragePooling3D(self,pool_size=(2,2,2),strides=None,border_mode='valid',dim_ordering='default',**kwargs)
keras.layers.pooling.AveragePooling3D.__init__(self,pool_size=(2,2,2),strides=None,border_mode='valid',dim_ordering='default',**kwargs)
keras.layers.pooling.AveragePooling3D._pooling_function(self,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers.pooling.GlobalAveragePooling1D(_GlobalPooling1D)
keras.layers.pooling.GlobalAveragePooling1D.call(self,x,mask=None)
keras.layers.pooling.GlobalAveragePooling2D(_GlobalPooling2D)
keras.layers.pooling.GlobalAveragePooling2D.call(self,x,mask=None)
keras.layers.pooling.GlobalAveragePooling3D(_GlobalPooling3D)
keras.layers.pooling.GlobalAveragePooling3D.call(self,x,mask=None)
keras.layers.pooling.GlobalMaxPooling1D(_GlobalPooling1D)
keras.layers.pooling.GlobalMaxPooling1D.call(self,x,mask=None)
keras.layers.pooling.GlobalMaxPooling2D(_GlobalPooling2D)
keras.layers.pooling.GlobalMaxPooling2D.call(self,x,mask=None)
keras.layers.pooling.GlobalMaxPooling3D(_GlobalPooling3D)
keras.layers.pooling.GlobalMaxPooling3D.call(self,x,mask=None)
keras.layers.pooling.MaxPooling1D(self,pool_length=2,stride=None,border_mode='valid',**kwargs)
keras.layers.pooling.MaxPooling1D.__init__(self,pool_length=2,stride=None,border_mode='valid',**kwargs)
keras.layers.pooling.MaxPooling1D._pooling_function(self,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers.pooling.MaxPooling2D(self,pool_size=(2,2),strides=None,border_mode='valid',dim_ordering='default',**kwargs)
keras.layers.pooling.MaxPooling2D.__init__(self,pool_size=(2,2),strides=None,border_mode='valid',dim_ordering='default',**kwargs)
keras.layers.pooling.MaxPooling2D._pooling_function(self,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers.pooling.MaxPooling3D(self,pool_size=(2,2,2),strides=None,border_mode='valid',dim_ordering='default',**kwargs)
keras.layers.pooling.MaxPooling3D.__init__(self,pool_size=(2,2,2),strides=None,border_mode='valid',dim_ordering='default',**kwargs)
keras.layers.pooling.MaxPooling3D._pooling_function(self,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers.pooling._GlobalPooling1D(self,**kwargs)
keras.layers.pooling._GlobalPooling1D.__init__(self,**kwargs)
keras.layers.pooling._GlobalPooling1D.call(self,x,mask=None)
keras.layers.pooling._GlobalPooling1D.get_output_shape_for(self,input_shape)
keras.layers.pooling._GlobalPooling2D(self,dim_ordering='default',**kwargs)
keras.layers.pooling._GlobalPooling2D.__init__(self,dim_ordering='default',**kwargs)
keras.layers.pooling._GlobalPooling2D.call(self,x,mask=None)
keras.layers.pooling._GlobalPooling2D.get_config(self)
keras.layers.pooling._GlobalPooling2D.get_output_shape_for(self,input_shape)
keras.layers.pooling._GlobalPooling3D(self,dim_ordering='default',**kwargs)
keras.layers.pooling._GlobalPooling3D.__init__(self,dim_ordering='default',**kwargs)
keras.layers.pooling._GlobalPooling3D.call(self,x,mask=None)
keras.layers.pooling._GlobalPooling3D.get_config(self)
keras.layers.pooling._GlobalPooling3D.get_output_shape_for(self,input_shape)
keras.layers.pooling._Pooling1D(self,pool_length=2,stride=None,border_mode='valid',**kwargs)
keras.layers.pooling._Pooling1D.__init__(self,pool_length=2,stride=None,border_mode='valid',**kwargs)
keras.layers.pooling._Pooling1D._pooling_function(self,back_end,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers.pooling._Pooling1D.call(self,x,mask=None)
keras.layers.pooling._Pooling1D.get_config(self)
keras.layers.pooling._Pooling1D.get_output_shape_for(self,input_shape)
keras.layers.pooling._Pooling2D(self,pool_size=(2,2),strides=None,border_mode='valid',dim_ordering='default',**kwargs)
keras.layers.pooling._Pooling2D.__init__(self,pool_size=(2,2),strides=None,border_mode='valid',dim_ordering='default',**kwargs)
keras.layers.pooling._Pooling2D._pooling_function(self,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers.pooling._Pooling2D.call(self,x,mask=None)
keras.layers.pooling._Pooling2D.get_config(self)
keras.layers.pooling._Pooling2D.get_output_shape_for(self,input_shape)
keras.layers.pooling._Pooling3D(self,pool_size=(2,2,2),strides=None,border_mode='valid',dim_ordering='default',**kwargs)
keras.layers.pooling._Pooling3D.__init__(self,pool_size=(2,2,2),strides=None,border_mode='valid',dim_ordering='default',**kwargs)
keras.layers.pooling._Pooling3D._pooling_function(self,inputs,pool_size,strides,border_mode,dim_ordering)
keras.layers.pooling._Pooling3D.call(self,x,mask=None)
keras.layers.pooling._Pooling3D.get_config(self)
keras.layers.pooling._Pooling3D.get_output_shape_for(self,input_shape)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/layers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/layers/normalization.py----------------------------------------
A:keras.layers.normalization.self.beta_init->initializations.get(beta_init)
A:keras.layers.normalization.self.gamma_init->initializations.get(gamma_init)
A:keras.layers.normalization.self.gamma_regularizer->regularizers.get(gamma_regularizer)
A:keras.layers.normalization.self.beta_regularizer->regularizers.get(beta_regularizer)
A:keras.layers.normalization.self.gamma->self.gamma_init(shape, name='{}_gamma'.format(self.name))
A:keras.layers.normalization.self.beta->self.beta_init(shape, name='{}_beta'.format(self.name))
A:keras.layers.normalization.self.running_mean->K.zeros(shape, name='{}_running_mean'.format(self.name))
A:keras.layers.normalization.self.running_std->K.ones(shape, name='{}_running_std'.format(self.name))
A:keras.layers.normalization.reduction_axes->list(range(len(input_shape)))
A:keras.layers.normalization.(x_normed, mean, std)->K.normalize_batch_in_training(x, self.gamma, self.beta, reduction_axes, epsilon=self.epsilon)
A:keras.layers.normalization.x_normed_running->K.batch_normalization(x, broadcast_running_mean, broadcast_running_std, broadcast_beta, broadcast_gamma, epsilon=self.epsilon)
A:keras.layers.normalization.broadcast_running_mean->K.reshape(self.running_mean, broadcast_shape)
A:keras.layers.normalization.broadcast_running_std->K.reshape(self.running_std, broadcast_shape)
A:keras.layers.normalization.broadcast_beta->K.reshape(self.beta, broadcast_shape)
A:keras.layers.normalization.broadcast_gamma->K.reshape(self.gamma, broadcast_shape)
A:keras.layers.normalization.x_normed->K.in_train_phase(x_normed, x_normed_running)
A:keras.layers.normalization.m->K.mean(x, axis=-1, keepdims=True)
A:keras.layers.normalization.std->K.sqrt(K.var(x, axis=-1, keepdims=True) + self.epsilon)
A:keras.layers.normalization.base_config->super(BatchNormalization, self).get_config()
keras.layers.BatchNormalization(self,epsilon=1e-05,mode=0,axis=-1,momentum=0.99,weights=None,beta_init='zero',gamma_init='one',gamma_regularizer=None,beta_regularizer=None,**kwargs)
keras.layers.BatchNormalization.build(self,input_shape)
keras.layers.BatchNormalization.call(self,x,mask=None)
keras.layers.BatchNormalization.get_config(self)
keras.layers.normalization.BatchNormalization(self,epsilon=1e-05,mode=0,axis=-1,momentum=0.99,weights=None,beta_init='zero',gamma_init='one',gamma_regularizer=None,beta_regularizer=None,**kwargs)
keras.layers.normalization.BatchNormalization.__init__(self,epsilon=1e-05,mode=0,axis=-1,momentum=0.99,weights=None,beta_init='zero',gamma_init='one',gamma_regularizer=None,beta_regularizer=None,**kwargs)
keras.layers.normalization.BatchNormalization.build(self,input_shape)
keras.layers.normalization.BatchNormalization.call(self,x,mask=None)
keras.layers.normalization.BatchNormalization.get_config(self)


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/legacy/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras1.1.1/legacy/models.py----------------------------------------
A:keras.legacy.models.self._graph_namespace->set()
A:keras.legacy.models.self._graph_nodes->OrderedDict()
A:keras.legacy.models.self._graph_inputs->OrderedDict()
A:keras.legacy.models.self._graph_outputs->OrderedDict()
A:keras.legacy.models.dtype->K.floatx()
A:keras.legacy.models.input_layer->InputLayer(input_shape=input_shape, batch_input_shape=batch_input_shape, name=name, input_dtype=dtype)
A:keras.legacy.models.merge->Merge(to_merge, mode=merge_mode, concat_axis=concat_axis, dot_axes=dot_axes, name=name)
A:keras.legacy.models.output_layer->Layer(name=output_layer_name)
A:keras.legacy.models.x->self._get_x(data)
A:keras.legacy.models.y->self._get_y(data)
A:keras.legacy.models.val_x->self._get_x(validation_data)
A:keras.legacy.models.val_y->self._get_y(validation_data)
A:keras.legacy.models.output_list->super(Graph, self).predict_on_batch(data)
A:keras.legacy.models.data->next(original_generator)
A:keras.legacy.models.generator->fixed_generator()
A:keras.legacy.models.history->super(Graph, self).evaluate_generator(generator, val_samples, max_q_size=max_q_size, nb_worker=nb_worker, pickle_safe=pickle_safe)
A:keras.legacy.models.name->conf.get('custom_name')
A:keras.legacy.models.graph->cls()
A:keras.legacy.models.inputs->config.get('input_config')
A:keras.legacy.models.nodes->config.get('node_config')
A:keras.legacy.models.layer_config->normalize_legacy_config(layer_config)
A:keras.legacy.models.node['layer']->layer_from_config(node['layer'])
A:keras.legacy.models.layer->layer_from_config(layer_config)
A:keras.legacy.models.outputs->config.get('output_config')
keras.legacy.models.Graph(self,name=None)
keras.legacy.models.Graph.__init__(self,name=None)
keras.legacy.models.Graph._get_x(self,data)
keras.legacy.models.Graph._get_y(self,data)
keras.legacy.models.Graph.add_input(self,name,input_shape=None,batch_input_shape=None,dtype='float')
keras.legacy.models.Graph.add_node(self,layer,name,input=None,inputs=[],merge_mode='concat',concat_axis=-1,dot_axes=-1,create_output=False)
keras.legacy.models.Graph.add_output(self,name,input=None,inputs=[],merge_mode='concat',concat_axis=-1,dot_axes=-1)
keras.legacy.models.Graph.add_shared_node(self,layer,name,inputs=[],merge_mode=None,concat_axis=-1,dot_axes=-1,outputs=[],create_output=False)
keras.legacy.models.Graph.build(self,input_shape=None)
keras.legacy.models.Graph.compile(self,optimizer,loss,metrics=[],sample_weight_modes=None,loss_weights=None,**kwargs)
keras.legacy.models.Graph.evaluate(self,data,batch_size=128,verbose=0,sample_weight={},**kwargs)
keras.legacy.models.Graph.evaluate_generator(self,generator,val_samples,verbose=1,max_q_size=10,nb_worker=1,pickle_safe=False,**kwargs)
keras.legacy.models.Graph.fit(self,data,batch_size=32,nb_epoch=10,verbose=1,callbacks=[],validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,**kwargs)
keras.legacy.models.Graph.fit_generator(self,generator,samples_per_epoch,nb_epoch,verbose=1,callbacks=[],validation_data=None,nb_val_samples=None,class_weight={},max_q_size=10,nb_worker=1,pickle_safe=False,**kwargs)
keras.legacy.models.Graph.from_config(cls,config)
keras.legacy.models.Graph.get_config(self)
keras.legacy.models.Graph.load_weights(self,fname)
keras.legacy.models.Graph.predict(self,data,batch_size=128,verbose=0)
keras.legacy.models.Graph.predict_on_batch(self,data)
keras.legacy.models.Graph.test_on_batch(self,data,sample_weight={},**kwargs)
keras.legacy.models.Graph.train_on_batch(self,data,class_weight={},sample_weight={},**kwargs)

