
----------------------------------------/home/zhang/Packages/keras/keras2.4.1/objectives.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/combinations.py----------------------------------------
A:keras.combinations.run_eagerly->kwargs.pop('run_eagerly', None)
A:keras.combinations.model_type->kwargs.pop('model_type', None)
A:keras.combinations.generate->functools.partial(tf.__internal__.test.combinations.generate, test_combinations=_defaults + (KerasModeCombination(), KerasModelTypeCombination()))
keras.combinations.KerasModeCombination(tf.__internal__.test.combinations.TestCombination)
keras.combinations.KerasModeCombination.context_managers(self,kwargs)
keras.combinations.KerasModeCombination.parameter_modifiers(self)
keras.combinations.KerasModelTypeCombination(tf.__internal__.test.combinations.TestCombination)
keras.combinations.KerasModelTypeCombination.context_managers(self,kwargs)
keras.combinations.KerasModelTypeCombination.parameter_modifiers(self)
keras.combinations.keras_mode_combinations(mode=None,run_eagerly=None)
keras.combinations.keras_model_type_combinations()


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/losses.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/regularizers.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/activations.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/backend.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/initializers.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/metrics.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/optimizer_v1.py----------------------------------------
A:keras.optimizer_v1.grads->self.optimizer.compute_gradients(loss, params)
A:keras.optimizer_v1.param_values->keras.backend.batch_get_value(params)
A:keras.optimizer_v1.self.iterations->keras.backend.variable(0, dtype='int64', name='iterations')
A:keras.optimizer_v1.self.lr->keras.backend.variable(lr, name='lr')
A:keras.optimizer_v1.self.momentum->keras.backend.variable(momentum, name='momentum')
A:keras.optimizer_v1.self.decay->keras.backend.variable(decay, name='decay')
A:keras.optimizer_v1.moments->self._create_all_weights(params)
A:keras.optimizer_v1.new_p->p.constraint(new_p)
A:keras.optimizer_v1.base_config->super(Nadam, self).get_config()
A:keras.optimizer_v1.self.rho->keras.backend.variable(rho, name='rho')
A:keras.optimizer_v1.epsilon->keras.backend.epsilon()
A:keras.optimizer_v1.accumulators->self._create_all_weights(params)
A:keras.optimizer_v1.(accumulators, delta_accumulators)->self._create_all_weights(params)
A:keras.optimizer_v1.self.beta_1->keras.backend.variable(beta_1, name='beta_1')
A:keras.optimizer_v1.self.beta_2->keras.backend.variable(beta_2, name='beta_2')
A:keras.optimizer_v1.t->tensorflow.compat.v2.cast(self.iterations, backend.floatx())
A:keras.optimizer_v1.(ms, vs, vhats)->self._create_all_weights(params)
A:keras.optimizer_v1.vhat_t->tensorflow.compat.v2.maximum(vhat, v_t)
A:keras.optimizer_v1.(ms, us)->self._create_all_weights(params)
A:keras.optimizer_v1.u_t->tensorflow.compat.v2.maximum(self.beta_2 * u, tf.abs(g))
A:keras.optimizer_v1.self.m_schedule->keras.backend.variable(1.0, name='m_schedule')
A:keras.optimizer_v1.(ms, vs)->self._create_all_weights(params)
A:keras.optimizer_v1.loss->loss()
A:keras.optimizer_v1.var_list->tensorflow.compat.v2.nest.flatten(var_list)
A:keras.optimizer_v1.grads_and_vars->list(zip(grads, var_list))
A:keras.optimizer_v1.global_step->tensorflow.compat.v2.compat.v1.train.get_global_step()
A:keras.optimizer_v1.opt_update->self.optimizer.apply_gradients(grads, global_step=self.iterations)
keras.optimizer_v1.Adadelta(self,lr=1.0,rho=0.95,epsilon=None,decay=0.0,**kwargs)
keras.optimizer_v1.Adadelta.__init__(self,lr=1.0,rho=0.95,epsilon=None,decay=0.0,**kwargs)
keras.optimizer_v1.Adadelta._create_all_weights(self,params)
keras.optimizer_v1.Adadelta.get_config(self)
keras.optimizer_v1.Adadelta.get_updates(self,loss,params)
keras.optimizer_v1.Adagrad(self,lr=0.01,epsilon=None,decay=0.0,**kwargs)
keras.optimizer_v1.Adagrad.__init__(self,lr=0.01,epsilon=None,decay=0.0,**kwargs)
keras.optimizer_v1.Adagrad._create_all_weights(self,params)
keras.optimizer_v1.Adagrad.get_config(self)
keras.optimizer_v1.Adagrad.get_updates(self,loss,params)
keras.optimizer_v1.Adam(self,lr=0.001,beta_1=0.9,beta_2=0.999,epsilon=None,decay=0.0,amsgrad=False,**kwargs)
keras.optimizer_v1.Adam.__init__(self,lr=0.001,beta_1=0.9,beta_2=0.999,epsilon=None,decay=0.0,amsgrad=False,**kwargs)
keras.optimizer_v1.Adam._create_all_weights(self,params)
keras.optimizer_v1.Adam.get_config(self)
keras.optimizer_v1.Adam.get_updates(self,loss,params)
keras.optimizer_v1.Adamax(self,lr=0.002,beta_1=0.9,beta_2=0.999,epsilon=None,decay=0.0,**kwargs)
keras.optimizer_v1.Adamax.__init__(self,lr=0.002,beta_1=0.9,beta_2=0.999,epsilon=None,decay=0.0,**kwargs)
keras.optimizer_v1.Adamax._create_all_weights(self,params)
keras.optimizer_v1.Adamax.get_config(self)
keras.optimizer_v1.Adamax.get_updates(self,loss,params)
keras.optimizer_v1.Nadam(self,lr=0.002,beta_1=0.9,beta_2=0.999,epsilon=None,schedule_decay=0.004,**kwargs)
keras.optimizer_v1.Nadam.__init__(self,lr=0.002,beta_1=0.9,beta_2=0.999,epsilon=None,schedule_decay=0.004,**kwargs)
keras.optimizer_v1.Nadam._create_all_weights(self,params)
keras.optimizer_v1.Nadam.get_config(self)
keras.optimizer_v1.Nadam.get_updates(self,loss,params)
keras.optimizer_v1.Optimizer(self,**kwargs)
keras.optimizer_v1.Optimizer.__init__(self,**kwargs)
keras.optimizer_v1.Optimizer._create_all_weights(self,params)
keras.optimizer_v1.Optimizer.from_config(cls,config)
keras.optimizer_v1.Optimizer.get_config(self)
keras.optimizer_v1.Optimizer.get_gradients(self,loss,params)
keras.optimizer_v1.Optimizer.get_updates(self,loss,params)
keras.optimizer_v1.Optimizer.get_weights(self)
keras.optimizer_v1.Optimizer.set_weights(self,weights)
keras.optimizer_v1.RMSprop(self,lr=0.001,rho=0.9,epsilon=None,decay=0.0,**kwargs)
keras.optimizer_v1.RMSprop.__init__(self,lr=0.001,rho=0.9,epsilon=None,decay=0.0,**kwargs)
keras.optimizer_v1.RMSprop._create_all_weights(self,params)
keras.optimizer_v1.RMSprop.get_config(self)
keras.optimizer_v1.RMSprop.get_updates(self,loss,params)
keras.optimizer_v1.SGD(self,lr=0.01,momentum=0.0,decay=0.0,nesterov=False,**kwargs)
keras.optimizer_v1.SGD.__init__(self,lr=0.01,momentum=0.0,decay=0.0,nesterov=False,**kwargs)
keras.optimizer_v1.SGD._create_all_weights(self,params)
keras.optimizer_v1.SGD.get_config(self)
keras.optimizer_v1.SGD.get_updates(self,loss,params)
keras.optimizer_v1.TFOptimizer(self,optimizer,iterations=None)
keras.optimizer_v1.TFOptimizer.__init__(self,optimizer,iterations=None)
keras.optimizer_v1.TFOptimizer._clip_gradients(self,grads)
keras.optimizer_v1.TFOptimizer.apply_gradients(self,grads_and_vars)
keras.optimizer_v1.TFOptimizer.from_config(self,config)
keras.optimizer_v1.TFOptimizer.get_config(self)
keras.optimizer_v1.TFOptimizer.get_grads(self,loss,params)
keras.optimizer_v1.TFOptimizer.get_updates(self,loss,params)
keras.optimizer_v1.TFOptimizer.minimize(self,loss,var_list,grad_loss=None,tape=None)
keras.optimizer_v1.TFOptimizer.weights(self)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/testing_utils.py----------------------------------------
A:keras.testing_utils.y->layer(x)
A:keras.testing_utils.x->layer(x)
A:keras.testing_utils.input_data_shape->list(input_shape)
A:keras.testing_utils.input_data_shape[i]->numpy.random.randint(1, 4)
A:keras.testing_utils.input_data->input_data.astype(input_dtype).astype(input_dtype)
A:keras.testing_utils.layer->getattr(self, self._layer_name_for_i(i))
A:keras.testing_utils.weights->keras.models.Sequential(name=name).get_weights()
A:keras.testing_utils.model->keras.models.Sequential(name=name)
A:keras.testing_utils.computed_output_shape->tuple(layer.compute_output_shape(tf.TensorShape(input_shape)).as_list())
A:keras.testing_utils.computed_output_signature->getattr(self, self._layer_name_for_i(i)).compute_output_signature(tf.TensorSpec(shape=input_shape, dtype=input_dtype))
A:keras.testing_utils.actual_output->keras.models.Sequential(name=name).predict(input_data)
A:keras.testing_utils.model_config->keras.models.Sequential(name=name).get_config()
A:keras.testing_utils.recovered_model->keras.models.Sequential.from_config(model_config, custom_objects)
A:keras.testing_utils.output->keras.models.Sequential.from_config(model_config, custom_objects).predict(input_data)
A:keras.testing_utils.layer_weights->getattr(self, self._layer_name_for_i(i)).get_weights()
A:keras.testing_utils.layer_config->getattr(self, self._layer_name_for_i(i)).get_config()
A:keras.testing_utils._thread_local_data->threading.local()
A:keras.testing_utils.inputs->layer(inputs)
A:keras.testing_utils.outputs->layer(outputs)
A:keras.testing_utils.self.layer_a->keras.layers.Dense(self.num_hidden, activation='relu')
A:keras.testing_utils.self.layer_b->keras.layers.Dense(self.num_classes, activation=activation)
A:keras.testing_utils.self.dp->keras.layers.Dropout(0.5)
A:keras.testing_utils.self.bn->keras.layers.BatchNormalization(axis=-1)
A:keras.testing_utils.model_type->get_model_type()
A:keras.testing_utils.self.num_layers->len(model_layers)
A:keras.testing_utils.self.bias->self.add_variable('bias', (1,), initializer='zeros')
A:keras.testing_utils.a->layer(a)
A:keras.testing_utils.b->layer(b)
A:keras.testing_utils.outs->layer(outs)
A:keras.testing_utils.self._shared_input_branch->self._shared_input_branch_func()
A:keras.testing_utils.self._branch_a->self._branch_a_func()
A:keras.testing_utils.self._branch_b->self._branch_b_func()
A:keras.testing_utils.self._shared_output_branch->self._shared_output_branch_func()
A:keras.testing_utils.a_and_b->layer(a_and_b)
A:keras.testing_utils.value->getattr(cls, name)
A:keras.testing_utils.allowed->tensorflow.compat.v2.config.experimental.tensor_float_32_execution_enabled()
A:keras.testing_utils.name->''.join(['_{}_{}'.format(''.join(filter(str.isalnum, key)), ''.join(filter(str.isalnum, str(value)))) for (key, value) in combination.items()])
keras.testing_utils.Bias(layers.Layer)
keras.testing_utils.Bias.build(self,input_shape)
keras.testing_utils.Bias.call(self,inputs)
keras.testing_utils.SmallSubclassMLP(self,num_hidden,num_classes,use_bn=False,use_dp=False,**kwargs)
keras.testing_utils.SmallSubclassMLP.__init__(self,num_hidden,num_classes,use_bn=False,use_dp=False,**kwargs)
keras.testing_utils.SmallSubclassMLP.call(self,inputs,**kwargs)
keras.testing_utils._MultiIOSubclassModel(self,branch_a,branch_b,shared_input_branch=None,shared_output_branch=None,name=None)
keras.testing_utils._MultiIOSubclassModel.__init__(self,branch_a,branch_b,shared_input_branch=None,shared_output_branch=None,name=None)
keras.testing_utils._MultiIOSubclassModel.call(self,inputs,**kwargs)
keras.testing_utils._MultiIOSubclassModelCustomBuild(self,branch_a_func,branch_b_func,shared_input_branch_func=None,shared_output_branch_func=None)
keras.testing_utils._MultiIOSubclassModelCustomBuild.__init__(self,branch_a_func,branch_b_func,shared_input_branch_func=None,shared_output_branch_func=None)
keras.testing_utils._MultiIOSubclassModelCustomBuild.build(self,input_shape)
keras.testing_utils._MultiIOSubclassModelCustomBuild.call(self,inputs,**kwargs)
keras.testing_utils._SmallSubclassMLPCustomBuild(self,num_hidden,num_classes)
keras.testing_utils._SmallSubclassMLPCustomBuild.__init__(self,num_hidden,num_classes)
keras.testing_utils._SmallSubclassMLPCustomBuild.build(self,input_shape)
keras.testing_utils._SmallSubclassMLPCustomBuild.call(self,inputs,**kwargs)
keras.testing_utils._SubclassModel(self,model_layers,*args,**kwargs)
keras.testing_utils._SubclassModel.__init__(self,model_layers,*args,**kwargs)
keras.testing_utils._SubclassModel._layer_name_for_i(self,i)
keras.testing_utils._SubclassModel.call(self,inputs,**kwargs)
keras.testing_utils._SubclassModelCustomBuild(self,layer_generating_func,*args,**kwargs)
keras.testing_utils._SubclassModelCustomBuild.__init__(self,layer_generating_func,*args,**kwargs)
keras.testing_utils._SubclassModelCustomBuild.build(self,input_shape)
keras.testing_utils._SubclassModelCustomBuild.call(self,inputs,**kwargs)
keras.testing_utils._set_v2_dtype_behavior(fn,enabled)
keras.testing_utils.device(should_use_gpu)
keras.testing_utils.disable_v2_dtype_behavior(fn)
keras.testing_utils.enable_v2_dtype_behavior(fn)
keras.testing_utils.for_all_test_methods(decorator,*args,**kwargs)
keras.testing_utils.generate_combinations_with_testcase_name(**kwargs)
keras.testing_utils.get_expected_metric_variable_names(var_names,name_suffix='')
keras.testing_utils.get_model_from_layers(model_layers,input_shape=None,input_dtype=None,name=None,input_ragged=None,input_sparse=None)
keras.testing_utils.get_model_type()
keras.testing_utils.get_multi_io_model(branch_a,branch_b,shared_input_branch=None,shared_output_branch=None)
keras.testing_utils.get_save_format()
keras.testing_utils.get_save_kwargs()
keras.testing_utils.get_small_functional_mlp(num_hidden,num_classes,input_dim)
keras.testing_utils.get_small_mlp(num_hidden,num_classes,input_dim)
keras.testing_utils.get_small_sequential_mlp(num_hidden,num_classes,input_dim=None)
keras.testing_utils.get_small_subclass_mlp(num_hidden,num_classes)
keras.testing_utils.get_small_subclass_mlp_with_custom_build(num_hidden,num_classes)
keras.testing_utils.get_test_data(train_samples,test_samples,input_shape,num_classes,random_seed=None)
keras.testing_utils.get_v2_optimizer(name,**kwargs)
keras.testing_utils.layer_test(layer_cls,kwargs=None,input_shape=None,input_dtype=None,input_data=None,expected_output=None,expected_output_dtype=None,expected_output_shape=None,validate_training=True,adapt_data=None,custom_objects=None,test_harness=None,supports_masking=None)
keras.testing_utils.model_type_scope(value)
keras.testing_utils.numeric_test(actual,expected)
keras.testing_utils.run_all_without_tensor_float_32(description)
keras.testing_utils.run_eagerly_scope(value)
keras.testing_utils.run_v2_only(func=None)
keras.testing_utils.run_without_tensor_float_32(description)
keras.testing_utils.saved_model_format_scope(value,**kwargs)
keras.testing_utils.should_run_eagerly()
keras.testing_utils.string_test(actual,expected)
keras.testing_utils.use_gpu()


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/optimizers.py----------------------------------------
A:keras.optimizers.then_expression->tensorflow.scalar_mul(c / n, g)
A:keras.optimizers.g_shape->copy.copy(then_expression.dense_shape)
A:keras.optimizers.condition->tensorflow.cast(condition, 'bool')
A:keras.optimizers.g->K.switch(K.greater_equal(n, c), g * c / n, g)
A:keras.optimizers.grads->self.optimizer.compute_gradients(loss, var_list=params)
A:keras.optimizers.norm->K.sqrt(sum([K.sum(K.square(g)) for g in grads]))
A:keras.optimizers.param_values->K.batch_get_value(params)
A:keras.optimizers.learning_rate->kwargs.pop('lr', learning_rate)
A:keras.optimizers.self.initial_decay->kwargs.pop('decay', 0.0)
A:keras.optimizers.self.iterations->K.variable(0, dtype='int64', name='iterations')
A:keras.optimizers.self.learning_rate->K.variable(learning_rate, name='learning_rate')
A:keras.optimizers.self.momentum->K.variable(momentum, name='momentum')
A:keras.optimizers.self.decay->K.variable(self.initial_decay, name='decay')
A:keras.optimizers.new_p->p.constraint(new_p)
A:keras.optimizers.base_config->super(Nadam, self).get_config()
A:keras.optimizers.self.epsilon->kwargs.pop('epsilon', K.epsilon())
A:keras.optimizers.self.rho->K.variable(rho, name='rho')
A:keras.optimizers.self.beta_1->K.variable(beta_1, name='beta_1')
A:keras.optimizers.self.beta_2->K.variable(beta_2, name='beta_2')
A:keras.optimizers.vhat_t->K.maximum(vhat, v_t)
A:keras.optimizers.u_t->K.maximum(self.beta_2 * u, K.abs(g))
A:keras.optimizers.self.schedule_decay->kwargs.pop('schedule_decay', 0.004)
A:keras.optimizers.self.m_schedule->K.variable(1.0, name='m_schedule')
A:keras.optimizers.opt_update->self.optimizer.apply_gradients(grads, global_step=self.iterations)
A:keras.optimizers.config['class_name']->config['class_name'].lower().lower()
keras.optimizers.Adadelta(self,learning_rate=1.0,rho=0.95,**kwargs)
keras.optimizers.Adadelta.__init__(self,learning_rate=1.0,rho=0.95,**kwargs)
keras.optimizers.Adadelta.get_config(self)
keras.optimizers.Adadelta.get_updates(self,loss,params)
keras.optimizers.Adadelta.set_weights(self,weights)
keras.optimizers.Adagrad(self,learning_rate=0.01,**kwargs)
keras.optimizers.Adagrad.__init__(self,learning_rate=0.01,**kwargs)
keras.optimizers.Adagrad.get_config(self)
keras.optimizers.Adagrad.get_updates(self,loss,params)
keras.optimizers.Adagrad.set_weights(self,weights)
keras.optimizers.Adam(self,learning_rate=0.001,beta_1=0.9,beta_2=0.999,amsgrad=False,**kwargs)
keras.optimizers.Adam.__init__(self,learning_rate=0.001,beta_1=0.9,beta_2=0.999,amsgrad=False,**kwargs)
keras.optimizers.Adam.get_config(self)
keras.optimizers.Adam.get_updates(self,loss,params)
keras.optimizers.Adamax(self,learning_rate=0.002,beta_1=0.9,beta_2=0.999,**kwargs)
keras.optimizers.Adamax.__init__(self,learning_rate=0.002,beta_1=0.9,beta_2=0.999,**kwargs)
keras.optimizers.Adamax.get_config(self)
keras.optimizers.Adamax.get_updates(self,loss,params)
keras.optimizers.Nadam(self,learning_rate=0.002,beta_1=0.9,beta_2=0.999,**kwargs)
keras.optimizers.Nadam.__init__(self,learning_rate=0.002,beta_1=0.9,beta_2=0.999,**kwargs)
keras.optimizers.Nadam.get_config(self)
keras.optimizers.Nadam.get_updates(self,loss,params)
keras.optimizers.Nadam.set_weights(self,weights)
keras.optimizers.Optimizer(self,**kwargs)
keras.optimizers.Optimizer.__init__(self,**kwargs)
keras.optimizers.Optimizer.from_config(cls,config)
keras.optimizers.Optimizer.get_config(self)
keras.optimizers.Optimizer.get_gradients(self,loss,params)
keras.optimizers.Optimizer.get_updates(self,loss,params)
keras.optimizers.Optimizer.get_weights(self)
keras.optimizers.Optimizer.lr(self)
keras.optimizers.Optimizer.set_weights(self,weights)
keras.optimizers.RMSprop(self,learning_rate=0.001,rho=0.9,**kwargs)
keras.optimizers.RMSprop.__init__(self,learning_rate=0.001,rho=0.9,**kwargs)
keras.optimizers.RMSprop.get_config(self)
keras.optimizers.RMSprop.get_updates(self,loss,params)
keras.optimizers.RMSprop.set_weights(self,weights)
keras.optimizers.SGD(self,learning_rate=0.01,momentum=0.0,nesterov=False,**kwargs)
keras.optimizers.SGD.__init__(self,learning_rate=0.01,momentum=0.0,nesterov=False,**kwargs)
keras.optimizers.SGD.get_config(self)
keras.optimizers.SGD.get_updates(self,loss,params)
keras.optimizers.TFOptimizer(self,optimizer)
keras.optimizers.TFOptimizer.__init__(self,optimizer)
keras.optimizers.TFOptimizer.from_config(cls,config)
keras.optimizers.TFOptimizer.get_config(self)
keras.optimizers.TFOptimizer.get_updates(self,loss,params)
keras.optimizers.TFOptimizer.weights(self)
keras.optimizers.clip_norm(g,c,n)
keras.optimizers.deserialize(config,custom_objects=None)
keras.optimizers.get(identifier)
keras.optimizers.serialize(optimizer)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/callbacks_v1.py----------------------------------------
A:keras.callbacks_v1.self.writer->tensorflow.compat.v2.compat.v1.summary.FileWriter(self.log_dir)
A:keras.callbacks_v1.mapped_weight_name->weight.name.replace(':', '_')
A:keras.callbacks_v1.w_img->tensorflow.compat.v2.reshape(w_img, [1, shape[0], 1, 1])
A:keras.callbacks_v1.shape->keras.backend.int_shape(w_img)
A:keras.callbacks_v1.grads->model.optimizer.get_gradients(model.total_loss, weight)
A:keras.callbacks_v1.self.merged->tensorflow.compat.v2.compat.v1.summary.merge_all()
A:keras.callbacks_v1.self.embeddings_data->keras.engine.training_utils_v1.standardize_input_data(self.embeddings_data, model.input_names)
A:keras.callbacks_v1.self.batch_idbatch_id->tensorflow.compat.v2.compat.v1.placeholder(tf.int32)
A:keras.callbacks_v1.self.stepstep->tensorflow.compat.v2.compat.v1.placeholder(tf.int32)
A:keras.callbacks_v1.embedding_size->numpy.prod(embedding_input.shape[1:])
A:keras.callbacks_v1.embedding_input->tensorflow.compat.v2.reshape(embedding_input, (step, int(embedding_size)))
A:keras.callbacks_v1.embedding->tensorboard.plugins.projector.ProjectorConfig().embeddings.add()
A:keras.callbacks_v1.batch->slice(i, i + step)
A:keras.callbacks_v1.self.saver->tensorflow.compat.v2.compat.v1.train.Saver(list(embeddings_vars.values()))
A:keras.callbacks_v1.config->tensorboard.plugins.projector.ProjectorConfig()
A:keras.callbacks_v1.value->value.item().item()
A:keras.callbacks_v1.summary->tensorflow.compat.v2.compat.v1.Summary()
A:keras.callbacks_v1.summary_value->tensorflow.compat.v2.compat.v1.Summary().value.add()
A:keras.callbacks_v1.sess->keras.backend.get_session()
A:keras.callbacks_v1.step->min(self.batch_size, n_samples - i)
keras.callbacks_v1.TensorBoard(self,log_dir='./logs',histogram_freq=0,batch_size=32,write_graph=True,write_grads=False,write_images=False,embeddings_freq=0,embeddings_layer_names=None,embeddings_metadata=None,embeddings_data=None,update_freq='epoch',profile_batch=2)
keras.callbacks_v1.TensorBoard.__init__(self,log_dir='./logs',histogram_freq=0,batch_size=32,write_graph=True,write_grads=False,write_images=False,embeddings_freq=0,embeddings_layer_names=None,embeddings_metadata=None,embeddings_data=None,update_freq='epoch',profile_batch=2)
keras.callbacks_v1.TensorBoard._fetch_callback(self,summary)
keras.callbacks_v1.TensorBoard._init_writer(self,model)
keras.callbacks_v1.TensorBoard._make_histogram_ops(self,model)
keras.callbacks_v1.TensorBoard._start_profiler(self)
keras.callbacks_v1.TensorBoard._stop_profiler(self)
keras.callbacks_v1.TensorBoard._write_custom_summaries(self,step,logs=None)
keras.callbacks_v1.TensorBoard.on_batch_end(self,batch,logs=None)
keras.callbacks_v1.TensorBoard.on_epoch_begin(self,epoch,logs=None)
keras.callbacks_v1.TensorBoard.on_epoch_end(self,epoch,logs=None)
keras.callbacks_v1.TensorBoard.on_test_begin(self,logs=None)
keras.callbacks_v1.TensorBoard.on_test_end(self,logs=None)
keras.callbacks_v1.TensorBoard.on_train_batch_begin(self,batch,logs=None)
keras.callbacks_v1.TensorBoard.on_train_batch_end(self,batch,logs=None)
keras.callbacks_v1.TensorBoard.on_train_begin(self,logs=None)
keras.callbacks_v1.TensorBoard.on_train_end(self,logs=None)
keras.callbacks_v1.TensorBoard.set_model(self,model)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/keras_parameterized.py----------------------------------------
A:keras.keras_parameterized.cls->type(cls).__new__(type(cls), cls.__name__, cls.__bases__, cls.__dict__.copy())
keras.keras_parameterized.TestCase(tf.test.TestCase,parameterized.TestCase)
keras.keras_parameterized.TestCase.tearDown(self)
keras.keras_parameterized._test_functional_model_type(f,test_or_class,*args,**kwargs)
keras.keras_parameterized._test_h5_saved_model_format(f,test_or_class,*args,**kwargs)
keras.keras_parameterized._test_or_class_decorator(test_or_class,single_method_decorator)
keras.keras_parameterized._test_sequential_model_type(f,test_or_class,*args,**kwargs)
keras.keras_parameterized._test_subclass_model_type(f,test_or_class,*args,**kwargs)
keras.keras_parameterized._test_tf_saved_model_format(f,test_or_class,*args,**kwargs)
keras.keras_parameterized._test_tf_saved_model_format_no_traces(f,test_or_class,*args,**kwargs)
keras.keras_parameterized._v1_session_test(f,test_or_class,config,*args,**kwargs)
keras.keras_parameterized._v2_eager_test(f,test_or_class,*args,**kwargs)
keras.keras_parameterized._v2_function_test(f,test_or_class,*args,**kwargs)
keras.keras_parameterized.run_all_keras_modes(test_or_class=None,config=None,always_skip_v1=False,always_skip_eager=False,**kwargs)
keras.keras_parameterized.run_with_all_model_types(test_or_class=None,exclude_models=None)
keras.keras_parameterized.run_with_all_saved_model_formats(test_or_class=None,exclude_formats=None)
keras.keras_parameterized.run_with_all_weight_formats(test_or_class=None,exclude_formats=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/callbacks.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/models.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/constraints.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/backend_config.py----------------------------------------
A:keras.backend_config._FLOATX->str(value)
A:keras.backend_config._IMAGE_DATA_FORMAT->str(data_format)
keras.backend_config.epsilon()
keras.backend_config.floatx()
keras.backend_config.image_data_format()
keras.backend_config.set_epsilon(value)
keras.backend_config.set_floatx(value)
keras.backend_config.set_image_data_format(data_format)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/legacy_tf_layers/convolutional.py----------------------------------------
A:keras.legacy_tf_layers.convolutional.layer->Conv3DTranspose(filters=filters, kernel_size=kernel_size, strides=strides, padding=padding, data_format=data_format, activation=activation, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer, kernel_regularizer=kernel_regularizer, bias_regularizer=bias_regularizer, activity_regularizer=activity_regularizer, kernel_constraint=kernel_constraint, bias_constraint=bias_constraint, trainable=trainable, name=name, _reuse=reuse, _scope=name)
keras.legacy_tf_layers.convolutional.Conv1D(self,filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.legacy_tf_layers.convolutional.Conv1D.__init__(self,filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.legacy_tf_layers.convolutional.Conv2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.legacy_tf_layers.convolutional.Conv2D.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.legacy_tf_layers.convolutional.Conv2DTranspose(self,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.legacy_tf_layers.convolutional.Conv2DTranspose.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.legacy_tf_layers.convolutional.Conv3D(self,filters,kernel_size,strides=(1,1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.legacy_tf_layers.convolutional.Conv3D.__init__(self,filters,kernel_size,strides=(1,1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.legacy_tf_layers.convolutional.Conv3DTranspose(self,filters,kernel_size,strides=(1,1,1),padding='valid',data_format='channels_last',activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.legacy_tf_layers.convolutional.Conv3DTranspose.__init__(self,filters,kernel_size,strides=(1,1,1),padding='valid',data_format='channels_last',activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.legacy_tf_layers.convolutional.SeparableConv1D(self,filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer=None,pointwise_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.legacy_tf_layers.convolutional.SeparableConv1D.__init__(self,filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer=None,pointwise_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.legacy_tf_layers.convolutional.SeparableConv2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1),depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer=None,pointwise_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.legacy_tf_layers.convolutional.SeparableConv2D.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1),depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer=None,pointwise_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.legacy_tf_layers.convolutional.conv1d(inputs,filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)
keras.legacy_tf_layers.convolutional.conv2d(inputs,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)
keras.legacy_tf_layers.convolutional.conv2d_transpose(inputs,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)
keras.legacy_tf_layers.convolutional.conv3d(inputs,filters,kernel_size,strides=(1,1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)
keras.legacy_tf_layers.convolutional.conv3d_transpose(inputs,filters,kernel_size,strides=(1,1,1),padding='valid',data_format='channels_last',activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)
keras.legacy_tf_layers.convolutional.separable_conv1d(inputs,filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer=None,pointwise_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)
keras.legacy_tf_layers.convolutional.separable_conv2d(inputs,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1),depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer=None,pointwise_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/legacy_tf_layers/core.py----------------------------------------
A:keras.legacy_tf_layers.core.layer->Flatten(name=name, data_format=data_format)
keras.legacy_tf_layers.core.Dense(self,units,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.legacy_tf_layers.core.Dense.__init__(self,units,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
keras.legacy_tf_layers.core.Dropout(self,rate=0.5,noise_shape=None,seed=None,name=None,**kwargs)
keras.legacy_tf_layers.core.Dropout.__init__(self,rate=0.5,noise_shape=None,seed=None,name=None,**kwargs)
keras.legacy_tf_layers.core.Dropout.call(self,inputs,training=False)
keras.legacy_tf_layers.core.Flatten(keras_layers.Flatten,base.Layer)
keras.legacy_tf_layers.core.dense(inputs,units,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)
keras.legacy_tf_layers.core.dropout(inputs,rate=0.5,noise_shape=None,seed=None,training=False,name=None)
keras.legacy_tf_layers.core.flatten(inputs,name=None,data_format='channels_last')


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/legacy_tf_layers/base.py----------------------------------------
A:keras.legacy_tf_layers.base.scope->kwargs.pop('scope', None)
A:keras.legacy_tf_layers.base.self._reuse->kwargs.pop('_reuse', None)
A:keras.legacy_tf_layers.base.dtype->keras.mixed_precision.policy.Policy('_infer')
A:keras.legacy_tf_layers.base.(self._name, _)->self._make_unique_name()
A:keras.legacy_tf_layers.base.(self._name, base_name)->self._make_unique_name()
A:keras.legacy_tf_layers.base.base_name->keras.engine.base_layer.to_snake_case(self.__class__.__name__)
A:keras.legacy_tf_layers.base.name->keras.backend.unique_object_name(base_name, name_uid_map=name_uid_map, avoid_names=avoid_names, namespace=namespace, zero_based=zero_based)
A:keras.legacy_tf_layers.base.previous_losses_length->len(self._losses)
A:keras.legacy_tf_layers.base.previous_callable_losses_length->len(self._callable_losses)
A:keras.legacy_tf_layers.base.loss_tensor->regularizer()
A:keras.legacy_tf_layers.base.default_graph->tensorflow.compat.v2.compat.v1.get_default_graph()
A:keras.legacy_tf_layers.base.init_graph->tensorflow.compat.v2.compat.v1.get_default_graph()
A:keras.legacy_tf_layers.base.existing_variables->set(tf.compat.v1.global_variables())
A:keras.legacy_tf_layers.base.prev_len_trainable->len(self._trainable_weights)
A:keras.legacy_tf_layers.base.variable->super(Layer, self).add_weight(name, shape, dtype=tf.as_dtype(dtype), initializer=initializer, trainable=trainable and self.trainable, constraint=constraint, partitioner=partitioner, use_resource=use_resource, synchronization=synchronization, aggregation=aggregation, getter=tf.compat.v1.get_variable, **kwargs)
A:keras.legacy_tf_layers.base.trainable_variables->tensorflow.compat.v2.compat.v1.trainable_variables()
A:keras.legacy_tf_layers.base.scope_context_manager->tensorflow.compat.v2.compat.v1.variable_scope(self._scope, reuse=self._reuse, auxiliary_name_scope=False)
A:keras.legacy_tf_layers.base.self._call_fn_args->fn_args(self.call)
A:keras.legacy_tf_layers.base.outputs->super(Layer, self).__call__(inputs, *args, **kwargs)
A:keras.legacy_tf_layers.base.no_copy->set(['_graph', '_thread_local', '_metrics_lock'])
A:keras.legacy_tf_layers.base.shallow_copy->set(['_scope', '_always_reuse_variable_scope'])
A:keras.legacy_tf_layers.base.result->cls.__new__(cls)
A:keras.legacy_tf_layers.base.elements->tensorflow.compat.v2.nest.flatten(elements)
A:keras.legacy_tf_layers.base.collection_list->tensorflow.compat.v2.nest.flatten(collection_list)
A:keras.legacy_tf_layers.base.collection->tensorflow.compat.v2.compat.v1.get_collection_ref(name)
A:keras.legacy_tf_layers.base.args->fn_args(fn.func)
A:keras.legacy_tf_layers.base.(_, fn)->tensorflow.compat.v2.__internal__.decorator.unwrap(fn)
keras.legacy_tf_layers.base.Layer(self,trainable=True,name=None,dtype=None,**kwargs)
keras.legacy_tf_layers.base.Layer.__deepcopy__(self,memo)
keras.legacy_tf_layers.base.Layer.__init__(self,trainable=True,name=None,dtype=None,**kwargs)
keras.legacy_tf_layers.base.Layer.__setattr__(self,value,name)
keras.legacy_tf_layers.base.Layer._init_set_name(self,name)
keras.legacy_tf_layers.base.Layer._is_legacy_layer(self)
keras.legacy_tf_layers.base.Layer._make_unique_name(self,name_uid_map=None,avoid_names=None,namespace='',zero_based=False)
keras.legacy_tf_layers.base.Layer._name_scope(self)
keras.legacy_tf_layers.base.Layer._set_scope(self,scope=None)
keras.legacy_tf_layers.base.Layer.add_loss(self,losses,inputs=None)
keras.legacy_tf_layers.base.Layer.add_weight(self,name,shape,dtype=None,initializer=None,regularizer=None,trainable=None,constraint=None,use_resource=None,synchronization=tf.VariableSynchronization.AUTO,aggregation=tf.compat.v1.VariableAggregation.NONE,partitioner=None,**kwargs)
keras.legacy_tf_layers.base.Layer.graph(self)
keras.legacy_tf_layers.base.Layer.scope_name(self)
keras.legacy_tf_layers.base._add_elements_to_collection(elements,collection_list)
keras.legacy_tf_layers.base._is_in_keras_style_scope()
keras.legacy_tf_layers.base.fn_args(fn)
keras.legacy_tf_layers.base.is_bound_method(fn)
keras.legacy_tf_layers.base.keras_style_scope()
keras.legacy_tf_layers.base.set_keras_style()


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/legacy_tf_layers/pooling.py----------------------------------------
A:keras.legacy_tf_layers.pooling.layer->MaxPooling3D(pool_size=pool_size, strides=strides, padding=padding, data_format=data_format, name=name)
keras.legacy_tf_layers.pooling.AveragePooling1D(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
keras.legacy_tf_layers.pooling.AveragePooling1D.__init__(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
keras.legacy_tf_layers.pooling.AveragePooling2D(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
keras.legacy_tf_layers.pooling.AveragePooling2D.__init__(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
keras.legacy_tf_layers.pooling.AveragePooling3D(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
keras.legacy_tf_layers.pooling.AveragePooling3D.__init__(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
keras.legacy_tf_layers.pooling.MaxPooling1D(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
keras.legacy_tf_layers.pooling.MaxPooling1D.__init__(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
keras.legacy_tf_layers.pooling.MaxPooling2D(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
keras.legacy_tf_layers.pooling.MaxPooling2D.__init__(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
keras.legacy_tf_layers.pooling.MaxPooling3D(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
keras.legacy_tf_layers.pooling.MaxPooling3D.__init__(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
keras.legacy_tf_layers.pooling.average_pooling1d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)
keras.legacy_tf_layers.pooling.average_pooling2d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)
keras.legacy_tf_layers.pooling.average_pooling3d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)
keras.legacy_tf_layers.pooling.max_pooling1d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)
keras.legacy_tf_layers.pooling.max_pooling2d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)
keras.legacy_tf_layers.pooling.max_pooling3d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/legacy_tf_layers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/legacy_tf_layers/normalization.py----------------------------------------
A:keras.legacy_tf_layers.normalization.layer->BatchNormalization(axis=axis, momentum=momentum, epsilon=epsilon, center=center, scale=scale, beta_initializer=beta_initializer, gamma_initializer=gamma_initializer, moving_mean_initializer=moving_mean_initializer, moving_variance_initializer=moving_variance_initializer, beta_regularizer=beta_regularizer, gamma_regularizer=gamma_regularizer, beta_constraint=beta_constraint, gamma_constraint=gamma_constraint, renorm=renorm, renorm_clipping=renorm_clipping, renorm_momentum=renorm_momentum, fused=fused, trainable=trainable, virtual_batch_size=virtual_batch_size, adjustment=adjustment, name=name, _reuse=reuse, _scope=name)
keras.legacy_tf_layers.normalization.BatchNormalization(self,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer=tf.compat.v1.zeros_initializer(),gamma_initializer=tf.compat.v1.ones_initializer(),moving_mean_initializer=tf.compat.v1.zeros_initializer(),moving_variance_initializer=tf.compat.v1.ones_initializer(),beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,renorm=False,renorm_clipping=None,renorm_momentum=0.99,fused=None,trainable=True,virtual_batch_size=None,adjustment=None,name=None,**kwargs)
keras.legacy_tf_layers.normalization.BatchNormalization.__init__(self,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer=tf.compat.v1.zeros_initializer(),gamma_initializer=tf.compat.v1.ones_initializer(),moving_mean_initializer=tf.compat.v1.zeros_initializer(),moving_variance_initializer=tf.compat.v1.ones_initializer(),beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,renorm=False,renorm_clipping=None,renorm_momentum=0.99,fused=None,trainable=True,virtual_batch_size=None,adjustment=None,name=None,**kwargs)
keras.legacy_tf_layers.normalization.BatchNormalization.call(self,inputs,training=False)
keras.legacy_tf_layers.normalization.batch_normalization(inputs,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer=tf.compat.v1.zeros_initializer(),gamma_initializer=tf.compat.v1.ones_initializer(),moving_mean_initializer=tf.compat.v1.zeros_initializer(),moving_variance_initializer=tf.compat.v1.ones_initializer(),beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,training=False,trainable=True,name=None,reuse=None,renorm=False,renorm_clipping=None,renorm_momentum=0.99,fused=None,virtual_batch_size=None,adjustment=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/__init__.py----------------------------------------
A:keras.api.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], '', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/__init__.py----------------------------------------
A:keras.api.keras.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/utils/__init__.py----------------------------------------
A:keras.api.keras.utils.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.utils', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/callbacks/__init__.py----------------------------------------
A:keras.api.keras.callbacks.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.callbacks', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/callbacks/experimental/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/activations/__init__.py----------------------------------------
A:keras.api.keras.activations.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.activations', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/experimental/__init__.py----------------------------------------
A:keras.api.keras.experimental.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.experimental', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/preprocessing/__init__.py----------------------------------------
A:keras.api.keras.preprocessing.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.preprocessing', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/preprocessing/image/__init__.py----------------------------------------
A:keras.api.keras.preprocessing.image.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.preprocessing.image', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/preprocessing/text/__init__.py----------------------------------------
A:keras.api.keras.preprocessing.text.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.preprocessing.text', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/preprocessing/sequence/__init__.py----------------------------------------
A:keras.api.keras.preprocessing.sequence.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.preprocessing.sequence', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/backend/__init__.py----------------------------------------
A:keras.api.keras.backend.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.backend', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/metrics/__init__.py----------------------------------------
A:keras.api.keras.metrics.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.metrics', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/applications/__init__.py----------------------------------------
A:keras.api.keras.applications.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/applications/mobilenet_v2/__init__.py----------------------------------------
A:keras.api.keras.applications.mobilenet_v2.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.mobilenet_v2', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/applications/efficientnet/__init__.py----------------------------------------
A:keras.api.keras.applications.efficientnet.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.efficientnet', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/applications/resnet50/__init__.py----------------------------------------
A:keras.api.keras.applications.resnet50.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.resnet50', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/applications/nasnet/__init__.py----------------------------------------
A:keras.api.keras.applications.nasnet.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.nasnet', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/applications/resnet/__init__.py----------------------------------------
A:keras.api.keras.applications.resnet.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.resnet', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/applications/vgg19/__init__.py----------------------------------------
A:keras.api.keras.applications.vgg19.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.vgg19', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/applications/inception_resnet_v2/__init__.py----------------------------------------
A:keras.api.keras.applications.inception_resnet_v2.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.inception_resnet_v2', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/applications/vgg16/__init__.py----------------------------------------
A:keras.api.keras.applications.vgg16.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.vgg16', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/applications/resnet_v2/__init__.py----------------------------------------
A:keras.api.keras.applications.resnet_v2.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.resnet_v2', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/applications/inception_v3/__init__.py----------------------------------------
A:keras.api.keras.applications.inception_v3.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.inception_v3', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/applications/mobilenet/__init__.py----------------------------------------
A:keras.api.keras.applications.mobilenet.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.mobilenet', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/applications/xception/__init__.py----------------------------------------
A:keras.api.keras.applications.xception.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.xception', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/applications/imagenet_utils/__init__.py----------------------------------------
A:keras.api.keras.applications.imagenet_utils.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.imagenet_utils', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/applications/densenet/__init__.py----------------------------------------
A:keras.api.keras.applications.densenet.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.densenet', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/applications/mobilenet_v3/__init__.py----------------------------------------
A:keras.api.keras.applications.mobilenet_v3.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.mobilenet_v3', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/initializers/__init__.py----------------------------------------
A:keras.api.keras.initializers.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.initializers', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/estimator/__init__.py----------------------------------------
A:keras.api.keras.estimator.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.estimator', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/datasets/__init__.py----------------------------------------
A:keras.api.keras.datasets.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.datasets', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/datasets/boston_housing/__init__.py----------------------------------------
A:keras.api.keras.datasets.boston_housing.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.datasets.boston_housing', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/datasets/cifar10/__init__.py----------------------------------------
A:keras.api.keras.datasets.cifar10.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.datasets.cifar10', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/datasets/cifar100/__init__.py----------------------------------------
A:keras.api.keras.datasets.cifar100.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.datasets.cifar100', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/datasets/mnist/__init__.py----------------------------------------
A:keras.api.keras.datasets.mnist.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.datasets.mnist', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/datasets/imdb/__init__.py----------------------------------------
A:keras.api.keras.datasets.imdb.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.datasets.imdb', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/datasets/reuters/__init__.py----------------------------------------
A:keras.api.keras.datasets.reuters.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.datasets.reuters', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/datasets/fashion_mnist/__init__.py----------------------------------------
A:keras.api.keras.datasets.fashion_mnist.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.datasets.fashion_mnist', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/premade/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/losses/__init__.py----------------------------------------
A:keras.api.keras.losses.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.losses', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/optimizers/__init__.py----------------------------------------
A:keras.api.keras.optimizers.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.optimizers', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/optimizers/schedules/__init__.py----------------------------------------
A:keras.api.keras.optimizers.schedules.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.optimizers.schedules', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/models/__init__.py----------------------------------------
A:keras.api.keras.models.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.models', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/constraints/__init__.py----------------------------------------
A:keras.api.keras.constraints.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.constraints', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/regularizers/__init__.py----------------------------------------
A:keras.api.keras.regularizers.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.regularizers', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/mixed_precision/__init__.py----------------------------------------
A:keras.api.keras.mixed_precision.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.mixed_precision', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/mixed_precision/experimental/__init__.py----------------------------------------
A:keras.api.keras.mixed_precision.experimental.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.mixed_precision.experimental', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/wrappers/__init__.py----------------------------------------
A:keras.api.keras.wrappers.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.wrappers', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/wrappers/scikit_learn/__init__.py----------------------------------------
A:keras.api.keras.wrappers.scikit_learn.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.wrappers.scikit_learn', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/layers/__init__.py----------------------------------------
A:keras.api.keras.layers.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.layers', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/layers/experimental/__init__.py----------------------------------------
A:keras.api.keras.layers.experimental.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.layers.experimental', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/keras/layers/experimental/preprocessing/__init__.py----------------------------------------
A:keras.api.keras.layers.experimental.preprocessing.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.layers.experimental.preprocessing', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/utils/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/utils/experimental/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/callbacks/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/callbacks/experimental/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/activations/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/experimental/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/preprocessing/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/preprocessing/image/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/preprocessing/text/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/preprocessing/sequence/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/backend/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/metrics/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/applications/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/applications/mobilenet_v2/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/applications/efficientnet/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/applications/resnet50/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/applications/nasnet/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/applications/resnet/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/applications/vgg19/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/applications/inception_resnet_v2/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/applications/vgg16/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/applications/resnet_v2/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/applications/inception_v3/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/applications/mobilenet/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/applications/xception/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/applications/imagenet_utils/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/applications/densenet/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/applications/mobilenet_v3/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/initializers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/estimator/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/datasets/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/datasets/boston_housing/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/datasets/cifar10/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/datasets/cifar100/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/datasets/mnist/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/datasets/imdb/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/datasets/reuters/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/datasets/fashion_mnist/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/premade/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/losses/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/optimizers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/optimizers/schedules/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/models/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/constraints/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/regularizers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/mixed_precision/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/mixed_precision/experimental/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/wrappers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/wrappers/scikit_learn/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/layers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/layers/experimental/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v2/keras/layers/experimental/preprocessing/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/__init__.py----------------------------------------
A:keras.api._v1.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], '', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/__init__.py----------------------------------------
A:keras.api._v1.keras.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/utils/__init__.py----------------------------------------
A:keras.api._v1.keras.utils.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.utils', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/callbacks/__init__.py----------------------------------------
A:keras.api._v1.keras.callbacks.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.callbacks', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/callbacks/experimental/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/activations/__init__.py----------------------------------------
A:keras.api._v1.keras.activations.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.activations', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/experimental/__init__.py----------------------------------------
A:keras.api._v1.keras.experimental.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.experimental', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/preprocessing/__init__.py----------------------------------------
A:keras.api._v1.keras.preprocessing.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.preprocessing', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/preprocessing/image/__init__.py----------------------------------------
A:keras.api._v1.keras.preprocessing.image.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.preprocessing.image', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/preprocessing/text/__init__.py----------------------------------------
A:keras.api._v1.keras.preprocessing.text.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.preprocessing.text', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/preprocessing/sequence/__init__.py----------------------------------------
A:keras.api._v1.keras.preprocessing.sequence.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.preprocessing.sequence', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/backend/__init__.py----------------------------------------
A:keras.api._v1.keras.backend.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.backend', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/metrics/__init__.py----------------------------------------
A:keras.api._v1.keras.metrics.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.metrics', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/applications/__init__.py----------------------------------------
A:keras.api._v1.keras.applications.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/applications/mobilenet_v2/__init__.py----------------------------------------
A:keras.api._v1.keras.applications.mobilenet_v2.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.mobilenet_v2', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/applications/efficientnet/__init__.py----------------------------------------
A:keras.api._v1.keras.applications.efficientnet.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.efficientnet', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/applications/resnet50/__init__.py----------------------------------------
A:keras.api._v1.keras.applications.resnet50.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.resnet50', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/applications/nasnet/__init__.py----------------------------------------
A:keras.api._v1.keras.applications.nasnet.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.nasnet', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/applications/resnet/__init__.py----------------------------------------
A:keras.api._v1.keras.applications.resnet.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.resnet', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/applications/vgg19/__init__.py----------------------------------------
A:keras.api._v1.keras.applications.vgg19.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.vgg19', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/applications/inception_resnet_v2/__init__.py----------------------------------------
A:keras.api._v1.keras.applications.inception_resnet_v2.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.inception_resnet_v2', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/applications/vgg16/__init__.py----------------------------------------
A:keras.api._v1.keras.applications.vgg16.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.vgg16', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/applications/resnet_v2/__init__.py----------------------------------------
A:keras.api._v1.keras.applications.resnet_v2.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.resnet_v2', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/applications/inception_v3/__init__.py----------------------------------------
A:keras.api._v1.keras.applications.inception_v3.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.inception_v3', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/applications/mobilenet/__init__.py----------------------------------------
A:keras.api._v1.keras.applications.mobilenet.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.mobilenet', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/applications/xception/__init__.py----------------------------------------
A:keras.api._v1.keras.applications.xception.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.xception', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/applications/imagenet_utils/__init__.py----------------------------------------
A:keras.api._v1.keras.applications.imagenet_utils.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.imagenet_utils', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/applications/densenet/__init__.py----------------------------------------
A:keras.api._v1.keras.applications.densenet.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.densenet', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/applications/mobilenet_v3/__init__.py----------------------------------------
A:keras.api._v1.keras.applications.mobilenet_v3.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.applications.mobilenet_v3', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/initializers/__init__.py----------------------------------------
A:keras.api._v1.keras.initializers.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.initializers', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/estimator/__init__.py----------------------------------------
A:keras.api._v1.keras.estimator.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.estimator', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/datasets/__init__.py----------------------------------------
A:keras.api._v1.keras.datasets.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.datasets', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/datasets/boston_housing/__init__.py----------------------------------------
A:keras.api._v1.keras.datasets.boston_housing.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.datasets.boston_housing', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/datasets/cifar10/__init__.py----------------------------------------
A:keras.api._v1.keras.datasets.cifar10.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.datasets.cifar10', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/datasets/cifar100/__init__.py----------------------------------------
A:keras.api._v1.keras.datasets.cifar100.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.datasets.cifar100', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/datasets/mnist/__init__.py----------------------------------------
A:keras.api._v1.keras.datasets.mnist.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.datasets.mnist', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/datasets/imdb/__init__.py----------------------------------------
A:keras.api._v1.keras.datasets.imdb.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.datasets.imdb', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/datasets/reuters/__init__.py----------------------------------------
A:keras.api._v1.keras.datasets.reuters.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.datasets.reuters', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/datasets/fashion_mnist/__init__.py----------------------------------------
A:keras.api._v1.keras.datasets.fashion_mnist.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.datasets.fashion_mnist', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/premade/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/losses/__init__.py----------------------------------------
A:keras.api._v1.keras.losses.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.losses', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/optimizers/__init__.py----------------------------------------
A:keras.api._v1.keras.optimizers.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.optimizers', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/optimizers/schedules/__init__.py----------------------------------------
A:keras.api._v1.keras.optimizers.schedules.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.optimizers.schedules', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/models/__init__.py----------------------------------------
A:keras.api._v1.keras.models.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.models', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/constraints/__init__.py----------------------------------------
A:keras.api._v1.keras.constraints.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.constraints', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/regularizers/__init__.py----------------------------------------
A:keras.api._v1.keras.regularizers.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.regularizers', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/mixed_precision/__init__.py----------------------------------------
A:keras.api._v1.keras.mixed_precision.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.mixed_precision', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/mixed_precision/experimental/__init__.py----------------------------------------
A:keras.api._v1.keras.mixed_precision.experimental.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.mixed_precision.experimental', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/wrappers/__init__.py----------------------------------------
A:keras.api._v1.keras.wrappers.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.wrappers', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/wrappers/scikit_learn/__init__.py----------------------------------------
A:keras.api._v1.keras.wrappers.scikit_learn.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.wrappers.scikit_learn', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/layers/__init__.py----------------------------------------
A:keras.api._v1.keras.layers.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.layers', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/layers/experimental/__init__.py----------------------------------------
A:keras.api._v1.keras.layers.experimental.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.layers.experimental', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/api/_v1/keras/layers/experimental/preprocessing/__init__.py----------------------------------------
A:keras.api._v1.keras.layers.experimental.preprocessing.__init__._sys.modules[__name__]->tensorflow.python.util.module_wrapper.TFModuleWrapper(_sys.modules[__name__], 'keras.layers.experimental.preprocessing', public_apis=None, deprecation=True, has_lite=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/metrics_utils.py----------------------------------------
A:keras.utils.metrics_utils.update_op->update_state_fn(*args, **kwargs)
A:keras.utils.metrics_utils.result_t->K.identity(result_fn(*args, **kwargs))
A:keras.utils.metrics_utils.(_, top_k_idx)->tensorflow.nn.top_k(x, k, sorted=False)
A:keras.utils.metrics_utils.top_k_mask->K.sum(K.one_hot(top_k_idx, x.shape[-1]), axis=-2)
A:keras.utils.metrics_utils.thresholds->to_list(thresholds)
A:keras.utils.metrics_utils.label->K.expand_dims(label, 0)
A:keras.utils.metrics_utils.pred->K.expand_dims(pred, 0)
A:keras.utils.metrics_utils.are_different->K.concatenate([label, pred], axis=0)
A:keras.utils.metrics_utils.label_and_pred->K.cast(label_and_pred, dtype=K.floatx())
A:keras.utils.metrics_utils.y_true->K.cast(y_true, dtype=K.floatx())
A:keras.utils.metrics_utils.y_pred->filter_top_k(y_pred, top_k)
A:keras.utils.metrics_utils.sample_weight->K.cast(sample_weight, dtype=K.floatx())
A:keras.utils.metrics_utils.(y_pred, y_true)->losses_utils.squeeze_or_expand_dimensions(y_pred, y_true=y_true)
A:keras.utils.metrics_utils.(y_pred, y_true, sample_weight)->losses_utils.squeeze_or_expand_dimensions(y_pred, y_true=y_true, sample_weight=sample_weight)
A:keras.utils.metrics_utils.num_thresholds->len(thresholds)
A:keras.utils.metrics_utils.num_predictions->K.size(y_pred)
A:keras.utils.metrics_utils.predictions_2d->K.reshape(y_pred, [1, -1])
A:keras.utils.metrics_utils.labels_2d->K.reshape(K.cast(y_true, dtype='bool'), [1, -1])
A:keras.utils.metrics_utils.thresh_tiled->K.tile(K.expand_dims(K.constant(thresholds), 1), K.cast(K.stack([1, num_predictions]), dtype='int32'))
A:keras.utils.metrics_utils.preds_tiled->K.tile(predictions_2d, [num_thresholds, 1])
A:keras.utils.metrics_utils.pred_is_pos->K.greater(preds_tiled, thresh_tiled)
A:keras.utils.metrics_utils.label_is_pos->K.tile(labels_2d, [num_thresholds, 1])
A:keras.utils.metrics_utils.weights->losses_utils.broadcast_weights(y_pred, K.cast(sample_weight, dtype=K.floatx()))
A:keras.utils.metrics_utils.weights_tiled->K.tile(K.reshape(weights, [1, -1]), [num_thresholds, 1])
A:keras.utils.metrics_utils.pred_is_neg->K.equal(pred_is_pos, K.zeros_like(pred_is_pos, dtype=pred_is_pos.dtype))
A:keras.utils.metrics_utils.label_is_neg->K.equal(label_is_pos, K.zeros_like(label_is_pos, dtype=label_is_pos.dtype))
keras.utils.metrics_utils.AUCCurve(Enum)
keras.utils.metrics_utils.AUCCurve.from_str(key)
keras.utils.metrics_utils.AUCSummationMethod(Enum)
keras.utils.metrics_utils.AUCSummationMethod.from_str(key)
keras.utils.metrics_utils.ConfusionMatrix(Enum)
keras.utils.metrics_utils.Reduction(object)
keras.utils.metrics_utils.assert_thresholds_range(thresholds)
keras.utils.metrics_utils.filter_top_k(x,k)
keras.utils.metrics_utils.parse_init_thresholds(thresholds,default_threshold=0.5)
keras.utils.metrics_utils.result_wrapper(result_fn)
keras.utils.metrics_utils.to_list(x)
keras.utils.metrics_utils.update_confusion_matrix_variables(variables_to_update,y_true,y_pred,thresholds=0.5,top_k=None,class_id=None,sample_weight=None)
keras.utils.metrics_utils.update_state_wrapper(update_state_fn)
keras.utils.metrics_utils.weighted_assign_add(label,pred,weights,var)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/tf_inspect.py----------------------------------------
A:keras.utils.tf_inspect.FullArgSpec->collections.namedtuple('FullArgSpec', ['args', 'varargs', 'varkw', 'defaults', 'kwonlyargs', 'kwonlydefaults', 'annotations'])
A:keras.utils.tf_inspect.fullargspecs->getfullargspec(target)
A:keras.utils.tf_inspect.argspecs->ArgSpec(args=fullargspecs.args, varargs=fullargspecs.varargs, keywords=fullargspecs.varkw, defaults=fullargspecs.defaults)
A:keras.utils.tf_inspect.(decorators, target)->tensorflow.compat.v2.__internal__.decorator.unwrap(obj)
A:keras.utils.tf_inspect.spec->next((d.decorator_argspec for d in decorators if d.decorator_argspec is not None), None)
A:keras.utils.tf_inspect.n_prune_args->len(obj.args)
A:keras.utils.tf_inspect.(args, varargs, keywords, defaults)->getargspec(obj.func)
A:keras.utils.tf_inspect.no_default->object()
A:keras.utils.tf_inspect.idx->args.index(kw)
A:keras.utils.tf_inspect.first_default->next((idx for (idx, x) in enumerate(all_defaults) if x is not no_default), None)
A:keras.utils.tf_inspect.argspec->getfullargspec(func)
A:keras.utils.tf_inspect.call_args->named.copy()
keras.utils.tf_inspect._convert_maybe_argspec_to_fullargspec(argspec)
keras.utils.tf_inspect._get_argspec_for_partial(obj)
keras.utils.tf_inspect.currentframe()
keras.utils.tf_inspect.getargspec(obj)
keras.utils.tf_inspect.getcallargs(*func_and_positional,**named)
keras.utils.tf_inspect.getdoc(object)
keras.utils.tf_inspect.getfile(object)
keras.utils.tf_inspect.getframeinfo(*args,**kwargs)
keras.utils.tf_inspect.getfullargspec(obj)
keras.utils.tf_inspect.getmembers(object,predicate=None)
keras.utils.tf_inspect.getmodule(object)
keras.utils.tf_inspect.getmro(cls)
keras.utils.tf_inspect.getsource(object)
keras.utils.tf_inspect.getsourcefile(object)
keras.utils.tf_inspect.getsourcelines(object)
keras.utils.tf_inspect.isbuiltin(object)
keras.utils.tf_inspect.isclass(object)
keras.utils.tf_inspect.isframe(object)
keras.utils.tf_inspect.isfunction(object)
keras.utils.tf_inspect.isgenerator(object)
keras.utils.tf_inspect.isgeneratorfunction(object)
keras.utils.tf_inspect.ismethod(object)
keras.utils.tf_inspect.ismodule(object)
keras.utils.tf_inspect.isroutine(object)
keras.utils.tf_inspect.stack(context=1)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/data_utils.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/version_utils.py----------------------------------------
A:keras.utils.version_utils.training->LazyLoader('training', globals(), 'keras.engine.training')
A:keras.utils.version_utils.training_v1->LazyLoader('training_v1', globals(), 'keras.engine.training_v1')
A:keras.utils.version_utils.base_layer->LazyLoader('base_layer', globals(), 'keras.engine.base_layer')
A:keras.utils.version_utils.base_layer_v1->LazyLoader('base_layer_v1', globals(), 'keras.engine.base_layer_v1')
A:keras.utils.version_utils.callbacks->LazyLoader('callbacks', globals(), 'keras.callbacks')
A:keras.utils.version_utils.callbacks_v1->LazyLoader('callbacks_v1', globals(), 'keras.callbacks_v1')
A:keras.utils.version_utils.use_v2->should_use_v2()
A:keras.utils.version_utils.cls->swap_class(start_cls, callbacks.TensorBoard, callbacks_v1.TensorBoard, use_v2)
A:keras.utils.version_utils.graph->tensorflow.compat.v2.compat.v1.get_default_graph()
A:keras.utils.version_utils.new_base->swap_class(base, v2_cls, v1_cls, use_v2)
A:keras.utils.version_utils.cls.__bases__->tuple(new_bases)
A:keras.utils.version_utils.error_msg->error_msg.format(cls_name=cls_name, method_name=method_name).format(cls_name=cls_name, method_name=method_name)
keras.utils.version_utils.LayerVersionSelector(cls,*args,**kwargs)
keras.utils.version_utils.LayerVersionSelector.__new__(cls,*args,**kwargs)
keras.utils.version_utils.ModelVersionSelector(cls,*args,**kwargs)
keras.utils.version_utils.ModelVersionSelector.__new__(cls,*args,**kwargs)
keras.utils.version_utils.TensorBoardVersionSelector(cls,*args,**kwargs)
keras.utils.version_utils.TensorBoardVersionSelector.__new__(cls,*args,**kwargs)
keras.utils.version_utils.disallow_legacy_graph(cls_name,method_name)
keras.utils.version_utils.is_v1_layer_or_model(obj)
keras.utils.version_utils.should_use_v2()
keras.utils.version_utils.swap_class(cls,v2_cls,v1_cls,use_v2)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/all_utils.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/tf_contextlib.py----------------------------------------
A:keras.utils.tf_contextlib.context_manager->contextlib.contextmanager(target)
keras.utils.tf_contextlib.contextmanager(target)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/io_utils.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/kpl_test_utils.py----------------------------------------
A:keras.utils.kpl_test_utils.feature_lookup_layer->keras.layers.preprocessing.string_lookup.StringLookup(vocabulary=self.FEATURE_VOCAB, num_oov_indices=1)
A:keras.utils.kpl_test_utils.label_lookup_layer->keras.layers.preprocessing.string_lookup.StringLookup(vocabulary=self.LABEL_VOCAB, num_oov_indices=0, mask_token=None)
A:keras.utils.kpl_test_utils.raw_feature_input->keras.layers.Input(shape=(3,), dtype=tf.string, name='feature', ragged=True)
A:keras.utils.kpl_test_utils.feature_id_input->feature_lookup_layer(raw_feature_input)
A:keras.utils.kpl_test_utils.feature_mapper->keras.Model({'features': raw_feature_input}, feature_id_input)
A:keras.utils.kpl_test_utils.raw_label_input->keras.layers.Input(shape=(1,), dtype=tf.string, name='label')
A:keras.utils.kpl_test_utils.label_id_input->label_lookup_layer(raw_label_input)
A:keras.utils.kpl_test_utils.label_mapper->keras.Model({'label': raw_label_input}, label_id_input)
A:keras.utils.kpl_test_utils.features->random.sample(self.FEATURE_VOCAB, 3)
A:keras.utils.kpl_test_utils.raw_dataset->tensorflow.compat.v2.data.Dataset.from_generator(feature_and_label_gen, output_signature={'features': tf.TensorSpec([3], tf.string), 'label': tf.TensorSpec([1], tf.string)}).shuffle(100).batch(32)
A:keras.utils.kpl_test_utils.train_dataset->tensorflow.compat.v2.data.Dataset.from_generator(feature_and_label_gen, output_signature={'features': tf.TensorSpec([3], tf.string), 'label': tf.TensorSpec([1], tf.string)}).shuffle(100).batch(32).map(lambda x: ({'features': feature_mapper(x['features'])}, label_mapper(x['label'])))
A:keras.utils.kpl_test_utils.model_input->keras.layers.Input(shape=(3,), dtype=tf.int64, name='model_input')
A:keras.utils.kpl_test_utils.emb_output->tensorflow.compat.v2.reduce_mean(emb_output, axis=1)
A:keras.utils.kpl_test_utils.dense_output->keras.layers.Dense(units=1, activation='sigmoid')(emb_output)
A:keras.utils.kpl_test_utils.model->keras.Model({'features': model_input}, dense_output)
A:keras.utils.kpl_test_utils.label_inverse_lookup_layer->keras.layers.preprocessing.string_lookup.StringLookup(num_oov_indices=0, mask_token=None, vocabulary=self.LABEL_VOCAB, invert=True)
A:keras.utils.kpl_test_utils.raw_features->tensorflow.compat.v2.compat.v1.expand_dims(raw_features, axis=0)
A:keras.utils.kpl_test_utils.transformed_features->keras.Model({'features': model_input}, dense_output).feature_mapper(raw_features)
A:keras.utils.kpl_test_utils.outputs->tensorflow.compat.v2.cast(tf.greater(outputs, 0.5), tf.int64)
A:keras.utils.kpl_test_utils.decoded_outputs->keras.Model({'features': model_input}, dense_output).label_inverse_lookup_layer(outputs)
A:keras.utils.kpl_test_utils.serving_fn->self.create_serving_signature(model, feature_mapper, label_inverse_lookup_layer)
A:keras.utils.kpl_test_utils.saved_model_dir->tempfile.mkdtemp(dir=self.get_temp_dir())
keras.utils.kpl_test_utils.DistributeKplTestUtils(tf.test.TestCase)
keras.utils.kpl_test_utils.DistributeKplTestUtils.create_serving_signature(self,model,feature_mapper,label_inverse_lookup_layer)
keras.utils.kpl_test_utils.DistributeKplTestUtils.dataset_fn(self,feature_mapper,label_mapper)
keras.utils.kpl_test_utils.DistributeKplTestUtils.define_kpls_for_training(self,use_adapt)
keras.utils.kpl_test_utils.DistributeKplTestUtils.define_model(self)
keras.utils.kpl_test_utils.DistributeKplTestUtils.define_reverse_lookup_layer(self)
keras.utils.kpl_test_utils.DistributeKplTestUtils.test_save_load_serving_model(self,model,feature_mapper,label_inverse_lookup_layer)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/losses_utils.py----------------------------------------
A:keras.utils.losses_utils.y_pred_rank->K.ndim(y_pred)
A:keras.utils.losses_utils.y_pred_shape->K.int_shape(y_pred)
A:keras.utils.losses_utils.y_true_rank->K.ndim(y_true)
A:keras.utils.losses_utils.y_true_shape->K.int_shape(y_true)
A:keras.utils.losses_utils.y_pred->K.expand_dims(y_pred, -1)
A:keras.utils.losses_utils.y_true->K.squeeze(y_true, -1)
A:keras.utils.losses_utils.weights_rank->K.ndim(sample_weight)
A:keras.utils.losses_utils.sample_weight->broadcast_weights(losses, sample_weight)
A:keras.utils.losses_utils.loss->K.cast(loss, input_dtype)
A:keras.utils.losses_utils.weights_shape->K.int_shape(sample_weight)
A:keras.utils.losses_utils.values_shape->K.int_shape(values)
A:keras.utils.losses_utils.values_rank->K.ndim(values)
A:keras.utils.losses_utils.input_dtype->K.dtype(losses)
A:keras.utils.losses_utils.losses->K.cast(losses, K.floatx())
A:keras.utils.losses_utils.(losses, _, sample_weight)->squeeze_or_expand_dimensions(losses, None, sample_weight)
keras.utils.losses_utils.Reduction(object)
keras.utils.losses_utils.Reduction.all(cls)
keras.utils.losses_utils.Reduction.validate(cls,key)
keras.utils.losses_utils._num_elements(losses)
keras.utils.losses_utils.broadcast_weights(values,sample_weight)
keras.utils.losses_utils.compute_weighted_loss(losses,sample_weight=None,reduction=Reduction.SUM_OVER_BATCH_SIZE,name=None)
keras.utils.losses_utils.reduce_weighted_loss(weighted_losses,reduction=Reduction.SUM_OVER_BATCH_SIZE)
keras.utils.losses_utils.squeeze_or_expand_dimensions(y_pred,y_true=None,sample_weight=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/test_utils.py----------------------------------------
A:keras.utils.test_utils.y->layer(x)
A:keras.utils.test_utils.X->numpy.zeros((samples,) + input_shape, dtype=np.float32)
A:keras.utils.test_utils.X[i]->numpy.random.normal(loc=y_loc[i], scale=0.7, size=input_shape)
A:keras.utils.test_utils.y_loc->numpy.random.random((samples,))
A:keras.utils.test_utils.y[i]->numpy.random.normal(loc=y_loc[i], scale=0.7, size=output_shape)
A:keras.utils.test_utils.input_dtype->K.floatx()
A:keras.utils.test_utils.input_data_shape->list(input_shape)
A:keras.utils.test_utils.input_data_shape[i]->numpy.random.randint(1, 4)
A:keras.utils.test_utils.input_data->input_data.astype(input_dtype).astype(input_dtype)
A:keras.utils.test_utils.layer->layer.__class__.from_config(layer_config).__class__.from_config(layer_config)
A:keras.utils.test_utils.weights->Model(x, y).get_weights()
A:keras.utils.test_utils.expected_output_shape->layer.__class__.from_config(layer_config).__class__.from_config(layer_config).compute_output_shape(input_shape)
A:keras.utils.test_utils.x->Input(shape=input_shape[1:], dtype=input_dtype)
A:keras.utils.test_utils.model->Model(x, y)
A:keras.utils.test_utils.actual_output->Model(x, y).predict(input_data)
A:keras.utils.test_utils.model_config->Model(x, y).get_config()
A:keras.utils.test_utils.recovered_model->Model(x, y).__class__.from_config(model_config)
A:keras.utils.test_utils._output->Model(x, y).__class__.from_config(model_config).predict(input_data)
A:keras.utils.test_utils.layer_config->layer.__class__.from_config(layer_config).__class__.from_config(layer_config).get_config()
keras.utils.test_utils.get_test_data(num_train=1000,num_test=500,input_shape=(10,),output_shape=(2,),classification=True,num_classes=2)
keras.utils.test_utils.layer_test(layer_cls,kwargs={},input_shape=None,input_dtype=None,input_data=None,expected_output=None,expected_output_dtype=None,fixed_batch_size=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/object_identity.py----------------------------------------
A:keras.utils.object_identity.unwrapped->property()
A:keras.utils.object_identity.keys->list(self._storage)
A:keras.utils.object_identity.self._storage->set((self._wrap_key(obj) for obj in list(*args)))
A:keras.utils.object_identity.result->ObjectIdentitySet()
keras.utils.object_identity.ObjectIdentityDictionary(self)
keras.utils.object_identity.ObjectIdentityDictionary.__delitem__(self,key)
keras.utils.object_identity.ObjectIdentityDictionary.__getitem__(self,key)
keras.utils.object_identity.ObjectIdentityDictionary.__init__(self)
keras.utils.object_identity.ObjectIdentityDictionary.__iter__(self)
keras.utils.object_identity.ObjectIdentityDictionary.__len__(self)
keras.utils.object_identity.ObjectIdentityDictionary.__repr__(self)
keras.utils.object_identity.ObjectIdentityDictionary.__setitem__(self,key,value)
keras.utils.object_identity.ObjectIdentityDictionary._wrap_key(self,key)
keras.utils.object_identity.ObjectIdentitySet(self,*args)
keras.utils.object_identity.ObjectIdentitySet.__contains__(self,key)
keras.utils.object_identity.ObjectIdentitySet.__init__(self,*args)
keras.utils.object_identity.ObjectIdentitySet.__iter__(self)
keras.utils.object_identity.ObjectIdentitySet.__len__(self)
keras.utils.object_identity.ObjectIdentitySet._from_storage(storage)
keras.utils.object_identity.ObjectIdentitySet._wrap_key(self,key)
keras.utils.object_identity.ObjectIdentitySet.add(self,key)
keras.utils.object_identity.ObjectIdentitySet.clear(self)
keras.utils.object_identity.ObjectIdentitySet.difference(self,items)
keras.utils.object_identity.ObjectIdentitySet.discard(self,key)
keras.utils.object_identity.ObjectIdentitySet.intersection(self,items)
keras.utils.object_identity.ObjectIdentitySet.update(self,items)
keras.utils.object_identity.ObjectIdentityWeakKeyDictionary(ObjectIdentityDictionary)
keras.utils.object_identity.ObjectIdentityWeakKeyDictionary.__iter__(self)
keras.utils.object_identity.ObjectIdentityWeakKeyDictionary.__len__(self)
keras.utils.object_identity.ObjectIdentityWeakKeyDictionary._wrap_key(self,key)
keras.utils.object_identity.ObjectIdentityWeakSet(ObjectIdentitySet)
keras.utils.object_identity.ObjectIdentityWeakSet.__iter__(self)
keras.utils.object_identity.ObjectIdentityWeakSet.__len__(self)
keras.utils.object_identity.ObjectIdentityWeakSet._wrap_key(self,key)
keras.utils.object_identity.Reference(_ObjectIdentityWrapper)
keras.utils.object_identity.Reference.deref(self)
keras.utils.object_identity._ObjectIdentityWrapper(self,wrapped)
keras.utils.object_identity._ObjectIdentityWrapper.__eq__(self,other)
keras.utils.object_identity._ObjectIdentityWrapper.__gt__(self,other)
keras.utils.object_identity._ObjectIdentityWrapper.__hash__(self)
keras.utils.object_identity._ObjectIdentityWrapper.__init__(self,wrapped)
keras.utils.object_identity._ObjectIdentityWrapper.__lt__(self,other)
keras.utils.object_identity._ObjectIdentityWrapper.__ne__(self,other)
keras.utils.object_identity._ObjectIdentityWrapper.__repr__(self)
keras.utils.object_identity._ObjectIdentityWrapper._assert_type(self,other)
keras.utils.object_identity._ObjectIdentityWrapper.unwrapped(self)
keras.utils.object_identity._WeakObjectIdentityWrapper(self,wrapped)
keras.utils.object_identity._WeakObjectIdentityWrapper.__init__(self,wrapped)
keras.utils.object_identity._WeakObjectIdentityWrapper.unwrapped(self)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/conv_utils.py----------------------------------------
A:keras.utils.conv_utils.value_tuple->tuple(value)
A:keras.utils.conv_utils.padding->value.lower()
A:keras.utils.conv_utils.kernel->numpy.asarray(kernel)
keras.utils.conv_utils.conv_input_length(output_length,filter_size,padding,stride)
keras.utils.conv_utils.conv_output_length(input_length,filter_size,padding,stride,dilation=1)
keras.utils.conv_utils.convert_kernel(kernel)
keras.utils.conv_utils.deconv_length(dim_size,stride_size,kernel_size,padding,output_padding,dilation=1)
keras.utils.conv_utils.normalize_padding(value)
keras.utils.conv_utils.normalize_tuple(value,n,name)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/kernelized_utils.py----------------------------------------
A:keras.utils.kernelized_utils.u_rank->len(u.shape)
A:keras.utils.kernelized_utils.x_matrix->_to_matrix(x)
A:keras.utils.kernelized_utils.y_matrix->_to_matrix(y)
A:keras.utils.kernelized_utils.x_tile->tensorflow.compat.v2.tile(tf.compat.v1.expand_dims(x_matrix, 1), [1, y_shape[0], 1])
A:keras.utils.kernelized_utils.y_tile->tensorflow.compat.v2.tile(tf.compat.v1.expand_dims(y_matrix, 0), [x_shape[0], 1, 1])
A:keras.utils.kernelized_utils.u->_to_matrix(u)
A:keras.utils.kernelized_utils.v->_to_matrix(v)
A:keras.utils.kernelized_utils.(x_aligned, y_aligned)->_align_matrices(x, y)
A:keras.utils.kernelized_utils.diff_squared_l2_norm->tensorflow.compat.v2.reduce_sum(tf.math.squared_difference(x_aligned, y_aligned), 2)
A:keras.utils.kernelized_utils.diff_l1_norm->tensorflow.compat.v2.reduce_sum(tf.abs(tf.subtract(x_aligned, y_aligned)), 2)
keras.utils.kernelized_utils._align_matrices(x,y)
keras.utils.kernelized_utils._to_matrix(u)
keras.utils.kernelized_utils.exact_gaussian_kernel(x,y,stddev)
keras.utils.kernelized_utils.exact_laplacian_kernel(x,y,stddev)
keras.utils.kernelized_utils.inner_product(u,v)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/generic_utils.py----------------------------------------
A:keras.utils.generic_utils.object_list->to_list(object_list)
A:keras.utils.generic_utils.iterable->to_list(iterable_or_element, allow_tuple=True)
A:keras.utils.generic_utils.start->start.tolist().tolist()
A:keras.utils.generic_utils.unknown->set(input_dict.keys()).difference(expected_values)
A:keras.utils.generic_utils.arg_spec->inspect.getfullargspec(fn)
A:keras.utils.generic_utils.signature->inspect.signature(fn)
A:keras.utils.generic_utils.parameter->inspect.signature(fn).parameters.get(name)
keras.utils.generic_utils.check_for_unexpected_keys(name,input_dict,expected_values)
keras.utils.generic_utils.has_arg(fn,name,accept_all=False)
keras.utils.generic_utils.is_all_none(iterable_or_element)
keras.utils.generic_utils.object_list_uid(object_list)
keras.utils.generic_utils.slice_arrays(arrays,start=None,stop=None)
keras.utils.generic_utils.to_list(x,allow_tuple=False)
keras.utils.generic_utils.transpose_shape(shape,target_format,spatial_axes)
keras.utils.generic_utils.unpack_singleton(x)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/layer_utils.py----------------------------------------
A:keras.utils.layer_utils.weight_ids->set()
A:keras.utils.layer_utils.original_kernel->K.get_value(layer.kernel)
A:keras.utils.layer_utils.converted_kernel->convert_kernel(original_kernel)
A:keras.utils.layer_utils.(kernel, bias)->dense.get_weights()
A:keras.utils.layer_utils.ki->numpy.transpose(ki, (1, 2, 0))
A:keras.utils.layer_utils.kernel[:, i]->numpy.reshape(ki, (np.prod(previous_feature_map_shape),))
keras.utils.layer_utils.convert_all_kernels_in_model(model)
keras.utils.layer_utils.convert_dense_weights_data_format(dense,previous_feature_map_shape,target_data_format='channels_first')
keras.utils.layer_utils.count_params(weights)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/np_utils.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/tf_utils.py----------------------------------------
A:keras.utils.tf_utils.v->tensorflow.compat.v2.nest.flatten(v)
A:keras.utils.tf_utils.inputs->tensorflow.compat.v2.nest.flatten(inputs, expand_composites=True)
A:keras.utils.tf_utils.reachable->keras.utils.object_identity.ObjectIdentitySet(inputs)
A:keras.utils.tf_utils.remaining_targets->keras.utils.object_identity.ObjectIdentitySet(tf.nest.flatten(targets))
A:keras.utils.tf_utils.queue->collections.deque(inputs)
A:keras.utils.tf_utils.x->t.numpy()
A:keras.utils.tf_utils.outputs->t.numpy().consumers()
A:keras.utils.tf_utils.values->_astuple(nested)
A:keras.utils.tf_utils.input_shape->convert_shapes(input_shape, to_tuples=True)
A:keras.utils.tf_utils.output_shape->convert_shapes(output_shape, to_tuples=False)
A:keras.utils.tf_utils._user_convertible_tensor_types->set()
A:keras.utils.tf_utils.component_tensors->tensorflow.compat.v2.nest.flatten(tensor, expand_composites=True)
A:keras.utils.tf_utils.tensor->tensorflow.python.framework.ops.convert_to_tensor_or_composite(tensor)
A:keras.utils.tf_utils.layer_str->'\n'.join(('  ' + str(l) for l in legacy_layers))
A:keras.utils.tf_utils.dataset_size->keras.backend.get_session().run(tf.data.experimental.cardinality(dataset))
A:keras.utils.tf_utils.spec->tensorflow.compat.v2.TensorSpec(shape=t.shape, dtype=t.dtype, name=name)
A:keras.utils.tf_utils.dynamic_batch_spec->copy.deepcopy(spec)
A:keras.utils.tf_utils.shape_list->shape.as_list()
A:keras.utils.tf_utils.dynamic_batch_spec._shape->tensorflow.compat.v2.TensorShape(shape_list)
A:keras.utils.tf_utils.cls->type(attrs)
A:keras.utils.tf_utils.fields->getattr(cls, '__attrs_attrs__', None)
keras.utils.tf_utils.ListWrapper(self,list_to_wrap)
keras.utils.tf_utils.ListWrapper.__init__(self,list_to_wrap)
keras.utils.tf_utils.ListWrapper.as_list(self)
keras.utils.tf_utils._astuple(attrs)
keras.utils.tf_utils.are_all_symbolic_tensors(tensors)
keras.utils.tf_utils.assert_no_legacy_layers(layers)
keras.utils.tf_utils.convert_inner_node_data(nested,wrap=False)
keras.utils.tf_utils.convert_shapes(input_shape,to_tuples=True)
keras.utils.tf_utils.dataset_is_infinite(dataset)
keras.utils.tf_utils.get_reachable_from_inputs(inputs,targets=None)
keras.utils.tf_utils.get_shapes(tensors)
keras.utils.tf_utils.get_tensor_spec(t,dynamic_batch=False,name=None)
keras.utils.tf_utils.graph_context_for_symbolic_tensors(*args,**kwargs)
keras.utils.tf_utils.is_extension_type(tensor)
keras.utils.tf_utils.is_ragged(tensor)
keras.utils.tf_utils.is_symbolic_tensor(tensor)
keras.utils.tf_utils.is_tensor_or_tensor_list(v)
keras.utils.tf_utils.is_tensor_or_variable(x)
keras.utils.tf_utils.map_structure_with_atomic(is_atomic_fn,map_fn,nested)
keras.utils.tf_utils.maybe_init_scope(layer)
keras.utils.tf_utils.register_symbolic_tensor_type(cls)
keras.utils.tf_utils.shape_type_conversion(fn)
keras.utils.tf_utils.sync_to_numpy_or_python_type(tensors)
keras.utils.tf_utils.type_spec_from_value(value)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/control_flow_util.py----------------------------------------
A:keras.utils.control_flow_util.ctxt->op._get_control_flow_context()
keras.utils.control_flow_util.GetContainingWhileContext(ctxt,stop_ctxt=None)
keras.utils.control_flow_util.GetContainingXLAContext(ctxt)
keras.utils.control_flow_util.GraphOrParentsInXlaContext(graph)
keras.utils.control_flow_util.InXlaContext(graph)
keras.utils.control_flow_util.IsInWhileLoop(op)
keras.utils.control_flow_util.constant_value(pred)
keras.utils.control_flow_util.smart_cond(pred,true_fn=None,false_fn=None,name=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/multi_gpu_utils.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/dataset_creator.py----------------------------------------
A:keras.utils.dataset_creator.dataset->self.dataset_fn(*args, **kwargs)
keras.utils.dataset_creator.DatasetCreator(self,dataset_fn)
keras.utils.dataset_creator.DatasetCreator.__init__(self,dataset_fn)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/mode_keys.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/utils/vis_utils.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/callbacks/tensorboard_v1.py----------------------------------------
A:keras.callbacks.tensorboard_v1.self.sess->K.get_session()
A:keras.callbacks.tensorboard_v1.mapped_weight_name->weight.name.replace(':', '_')
A:keras.callbacks.tensorboard_v1.grads->model.optimizer.get_gradients(model.total_loss, weight)
A:keras.callbacks.tensorboard_v1.w_img->tensorflow.reshape(w_img, [1, shape[0], 1, 1])
A:keras.callbacks.tensorboard_v1.shape->K.int_shape(w_img)
A:keras.callbacks.tensorboard_v1.self.merged->tensorflow.summary.merge_all()
A:keras.callbacks.tensorboard_v1.self.writer->tensorflow.summary.FileWriter(self.log_dir)
A:keras.callbacks.tensorboard_v1.self.embeddings_data->standardize_input_data(self.embeddings_data, model.input_names)
A:keras.callbacks.tensorboard_v1.self.batch_idbatch_id->tensorflow.placeholder(tf.int32)
A:keras.callbacks.tensorboard_v1.self.stepstep->tensorflow.placeholder(tf.int32)
A:keras.callbacks.tensorboard_v1.embedding_size->numpy.prod(embedding_input.shape[1:])
A:keras.callbacks.tensorboard_v1.embedding_input->tensorflow.reshape(embedding_input, (step, int(embedding_size)))
A:keras.callbacks.tensorboard_v1.embedding->tensorflow.contrib.tensorboard.plugins.projector.ProjectorConfig().embeddings.add()
A:keras.callbacks.tensorboard_v1.batch->slice(i, i + step)
A:keras.callbacks.tensorboard_v1.self.saver->tensorflow.train.Saver(list(embeddings_vars.values()))
A:keras.callbacks.tensorboard_v1.config->tensorflow.contrib.tensorboard.plugins.projector.ProjectorConfig()
A:keras.callbacks.tensorboard_v1.step->min(self.batch_size, n_samples - i)
A:keras.callbacks.tensorboard_v1.feed_dict->dict(zip(tensors, batch_val))
A:keras.callbacks.tensorboard_v1.result->self.sess.run([self.merged], feed_dict=feed_dict)
A:keras.callbacks.tensorboard_v1.summary->tensorflow.Summary()
A:keras.callbacks.tensorboard_v1.summary_value->tensorflow.Summary().value.add()
A:keras.callbacks.tensorboard_v1.summary_value.simple_value->value.item()
keras.callbacks.TensorBoard(self,log_dir='./logs',histogram_freq=0,batch_size=32,write_graph=True,write_grads=False,write_images=False,embeddings_freq=0,embeddings_layer_names=None,embeddings_metadata=None,embeddings_data=None,update_freq='epoch')
keras.callbacks.TensorBoard._write_logs(self,logs,index)
keras.callbacks.TensorBoard.on_batch_end(self,batch,logs=None)
keras.callbacks.TensorBoard.on_epoch_end(self,epoch,logs=None)
keras.callbacks.TensorBoard.on_train_end(self,_)
keras.callbacks.TensorBoard.set_model(self,model)
keras.callbacks.tensorboard_v1.TensorBoard(self,log_dir='./logs',histogram_freq=0,batch_size=32,write_graph=True,write_grads=False,write_images=False,embeddings_freq=0,embeddings_layer_names=None,embeddings_metadata=None,embeddings_data=None,update_freq='epoch')
keras.callbacks.tensorboard_v1.TensorBoard.__init__(self,log_dir='./logs',histogram_freq=0,batch_size=32,write_graph=True,write_grads=False,write_images=False,embeddings_freq=0,embeddings_layer_names=None,embeddings_metadata=None,embeddings_data=None,update_freq='epoch')
keras.callbacks.tensorboard_v1.TensorBoard._write_logs(self,logs,index)
keras.callbacks.tensorboard_v1.TensorBoard.on_batch_end(self,batch,logs=None)
keras.callbacks.tensorboard_v1.TensorBoard.on_epoch_end(self,epoch,logs=None)
keras.callbacks.tensorboard_v1.TensorBoard.on_train_end(self,_)
keras.callbacks.tensorboard_v1.TensorBoard.set_model(self,model)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/callbacks/callbacks.py----------------------------------------
A:keras.callbacks.callbacks.self._delta_ts->defaultdict(lambda : deque([], maxlen=self.queue_length))
A:keras.callbacks.callbacks.hook_name->'on_{mode}_batch_{hook}'.format(mode=mode, hook=hook)
A:keras.callbacks.callbacks.self._t_enter_batch->time.time()
A:keras.callbacks.callbacks.t_before_callbacks->time.time()
A:keras.callbacks.callbacks.batch_hook->getattr(callback, hook_name)
A:keras.callbacks.callbacks.delta_t_median->numpy.median(self._delta_ts[hook_name])
A:keras.callbacks.callbacks.self.stateful_metrics->set()
A:keras.callbacks.callbacks.batch_size->dict([(k, logs[k] if k in logs else 'NA') for k in self.keys]).get('size', 0)
A:keras.callbacks.callbacks.loss->dict([(k, logs[k] if k in logs else 'NA') for k in self.keys]).get('loss')
A:keras.callbacks.callbacks.self.progbar->Progbar(target=self.target, verbose=self.verbose, stateful_metrics=self.stateful_metrics)
A:keras.callbacks.callbacks.filepath->self.filepath.format(epoch=epoch + 1, **logs)
A:keras.callbacks.callbacks.current->dict([(k, logs[k] if k in logs else 'NA') for k in self.keys]).get(self.monitor)
A:keras.callbacks.callbacks.self.best_weights->self.model.get_weights()
A:keras.callbacks.callbacks.monitor_value->dict([(k, logs[k] if k in logs else 'NA') for k in self.keys]).get(self.monitor)
A:keras.callbacks.callbacks.send[k]->v.item()
A:keras.callbacks.callbacks.lr->self.schedule(epoch)
A:keras.callbacks.callbacks.logs['lr']->K.get_value(self.model.optimizer.lr)
A:keras.callbacks.callbacks.min_delta->kwargs.pop('epsilon')
A:keras.callbacks.callbacks.old_lr->float(K.get_value(self.model.optimizer.lr))
A:keras.callbacks.callbacks.new_lr->max(new_lr, self.min_lr)
A:keras.callbacks.callbacks.self.csv_file->io.open(self.filename, mode + self.file_flags, **self._open_args)
A:keras.callbacks.callbacks.self.keys->sorted(logs.keys())
A:keras.callbacks.callbacks.logs->dict([(k, logs[k] if k in logs else 'NA') for k in self.keys])
A:keras.callbacks.callbacks.self.writer->csv.DictWriter(self.csv_file, fieldnames=fieldnames, dialect=CustomDialect)
A:keras.callbacks.callbacks.row_dict->OrderedDict({'epoch': epoch})
keras.callbacks.BaseLogger(self,stateful_metrics=None)
keras.callbacks.BaseLogger.on_batch_end(self,batch,logs=None)
keras.callbacks.BaseLogger.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.BaseLogger.on_epoch_end(self,epoch,logs=None)
keras.callbacks.CSVLogger(self,filename,separator=',',append=False)
keras.callbacks.CSVLogger.__del__(self)
keras.callbacks.CSVLogger.on_epoch_end(self,epoch,logs=None)
keras.callbacks.CSVLogger.on_train_begin(self,logs=None)
keras.callbacks.CSVLogger.on_train_end(self,logs=None)
keras.callbacks.Callback(self)
keras.callbacks.Callback.on_batch_begin(self,batch,logs=None)
keras.callbacks.Callback.on_batch_end(self,batch,logs=None)
keras.callbacks.Callback.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.Callback.on_epoch_end(self,epoch,logs=None)
keras.callbacks.Callback.on_predict_batch_begin(self,batch,logs=None)
keras.callbacks.Callback.on_predict_batch_end(self,batch,logs=None)
keras.callbacks.Callback.on_predict_begin(self,logs=None)
keras.callbacks.Callback.on_predict_end(self,logs=None)
keras.callbacks.Callback.on_test_batch_begin(self,batch,logs=None)
keras.callbacks.Callback.on_test_batch_end(self,batch,logs=None)
keras.callbacks.Callback.on_test_begin(self,logs=None)
keras.callbacks.Callback.on_test_end(self,logs=None)
keras.callbacks.Callback.on_train_batch_begin(self,batch,logs=None)
keras.callbacks.Callback.on_train_batch_end(self,batch,logs=None)
keras.callbacks.Callback.on_train_begin(self,logs=None)
keras.callbacks.Callback.on_train_end(self,logs=None)
keras.callbacks.Callback.set_model(self,model)
keras.callbacks.Callback.set_params(self,params)
keras.callbacks.CallbackList(self,callbacks=None,queue_length=10)
keras.callbacks.CallbackList.__iter__(self)
keras.callbacks.CallbackList._call_batch_hook(self,mode,hook,batch,logs=None)
keras.callbacks.CallbackList._call_begin_hook(self,mode)
keras.callbacks.CallbackList._call_end_hook(self,mode)
keras.callbacks.CallbackList._reset_batch_timing(self)
keras.callbacks.CallbackList.append(self,callback)
keras.callbacks.CallbackList.on_batch_begin(self,batch,logs=None)
keras.callbacks.CallbackList.on_batch_end(self,batch,logs=None)
keras.callbacks.CallbackList.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.CallbackList.on_epoch_end(self,epoch,logs=None)
keras.callbacks.CallbackList.on_predict_batch_begin(self,batch,logs=None)
keras.callbacks.CallbackList.on_predict_batch_end(self,batch,logs=None)
keras.callbacks.CallbackList.on_predict_begin(self,logs=None)
keras.callbacks.CallbackList.on_predict_end(self,logs=None)
keras.callbacks.CallbackList.on_test_batch_begin(self,batch,logs=None)
keras.callbacks.CallbackList.on_test_batch_end(self,batch,logs=None)
keras.callbacks.CallbackList.on_test_begin(self,logs=None)
keras.callbacks.CallbackList.on_test_end(self,logs=None)
keras.callbacks.CallbackList.on_train_batch_begin(self,batch,logs=None)
keras.callbacks.CallbackList.on_train_batch_end(self,batch,logs=None)
keras.callbacks.CallbackList.on_train_begin(self,logs=None)
keras.callbacks.CallbackList.on_train_end(self,logs=None)
keras.callbacks.CallbackList.set_model(self,model)
keras.callbacks.CallbackList.set_params(self,params)
keras.callbacks.EarlyStopping(self,monitor='val_loss',min_delta=0,patience=0,verbose=0,mode='auto',baseline=None,restore_best_weights=False)
keras.callbacks.EarlyStopping.get_monitor_value(self,logs)
keras.callbacks.EarlyStopping.on_epoch_end(self,epoch,logs=None)
keras.callbacks.EarlyStopping.on_train_begin(self,logs=None)
keras.callbacks.EarlyStopping.on_train_end(self,logs=None)
keras.callbacks.History(Callback)
keras.callbacks.History.on_epoch_end(self,epoch,logs=None)
keras.callbacks.History.on_train_begin(self,logs=None)
keras.callbacks.LambdaCallback(self,on_epoch_begin=None,on_epoch_end=None,on_batch_begin=None,on_batch_end=None,on_train_begin=None,on_train_end=None,**kwargs)
keras.callbacks.LearningRateScheduler(self,schedule,verbose=0)
keras.callbacks.LearningRateScheduler.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.LearningRateScheduler.on_epoch_end(self,epoch,logs=None)
keras.callbacks.ModelCheckpoint(self,filepath,monitor='val_loss',verbose=0,save_best_only=False,save_weights_only=False,mode='auto',period=1)
keras.callbacks.ModelCheckpoint.on_epoch_end(self,epoch,logs=None)
keras.callbacks.ProgbarLogger(self,count_mode='samples',stateful_metrics=None)
keras.callbacks.ProgbarLogger.on_batch_begin(self,batch,logs=None)
keras.callbacks.ProgbarLogger.on_batch_end(self,batch,logs=None)
keras.callbacks.ProgbarLogger.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.ProgbarLogger.on_epoch_end(self,epoch,logs=None)
keras.callbacks.ProgbarLogger.on_train_begin(self,logs=None)
keras.callbacks.ReduceLROnPlateau(self,monitor='val_loss',factor=0.1,patience=10,verbose=0,mode='auto',min_delta=0.0001,cooldown=0,min_lr=0,**kwargs)
keras.callbacks.ReduceLROnPlateau._reset(self)
keras.callbacks.ReduceLROnPlateau.in_cooldown(self)
keras.callbacks.ReduceLROnPlateau.on_epoch_end(self,epoch,logs=None)
keras.callbacks.ReduceLROnPlateau.on_train_begin(self,logs=None)
keras.callbacks.RemoteMonitor(self,root='http://localhost:9000',path='/publish/epoch/end/',field='data',headers=None,send_as_json=False)
keras.callbacks.RemoteMonitor.on_epoch_end(self,epoch,logs=None)
keras.callbacks.TerminateOnNaN(Callback)
keras.callbacks.TerminateOnNaN.on_batch_end(self,batch,logs=None)
keras.callbacks.callbacks.BaseLogger(self,stateful_metrics=None)
keras.callbacks.callbacks.BaseLogger.__init__(self,stateful_metrics=None)
keras.callbacks.callbacks.BaseLogger.on_batch_end(self,batch,logs=None)
keras.callbacks.callbacks.BaseLogger.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.callbacks.BaseLogger.on_epoch_end(self,epoch,logs=None)
keras.callbacks.callbacks.CSVLogger(self,filename,separator=',',append=False)
keras.callbacks.callbacks.CSVLogger.__del__(self)
keras.callbacks.callbacks.CSVLogger.__init__(self,filename,separator=',',append=False)
keras.callbacks.callbacks.CSVLogger.on_epoch_end(self,epoch,logs=None)
keras.callbacks.callbacks.CSVLogger.on_train_begin(self,logs=None)
keras.callbacks.callbacks.CSVLogger.on_train_end(self,logs=None)
keras.callbacks.callbacks.Callback(self)
keras.callbacks.callbacks.Callback.__init__(self)
keras.callbacks.callbacks.Callback.on_batch_begin(self,batch,logs=None)
keras.callbacks.callbacks.Callback.on_batch_end(self,batch,logs=None)
keras.callbacks.callbacks.Callback.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.callbacks.Callback.on_epoch_end(self,epoch,logs=None)
keras.callbacks.callbacks.Callback.on_predict_batch_begin(self,batch,logs=None)
keras.callbacks.callbacks.Callback.on_predict_batch_end(self,batch,logs=None)
keras.callbacks.callbacks.Callback.on_predict_begin(self,logs=None)
keras.callbacks.callbacks.Callback.on_predict_end(self,logs=None)
keras.callbacks.callbacks.Callback.on_test_batch_begin(self,batch,logs=None)
keras.callbacks.callbacks.Callback.on_test_batch_end(self,batch,logs=None)
keras.callbacks.callbacks.Callback.on_test_begin(self,logs=None)
keras.callbacks.callbacks.Callback.on_test_end(self,logs=None)
keras.callbacks.callbacks.Callback.on_train_batch_begin(self,batch,logs=None)
keras.callbacks.callbacks.Callback.on_train_batch_end(self,batch,logs=None)
keras.callbacks.callbacks.Callback.on_train_begin(self,logs=None)
keras.callbacks.callbacks.Callback.on_train_end(self,logs=None)
keras.callbacks.callbacks.Callback.set_model(self,model)
keras.callbacks.callbacks.Callback.set_params(self,params)
keras.callbacks.callbacks.CallbackList(self,callbacks=None,queue_length=10)
keras.callbacks.callbacks.CallbackList.__init__(self,callbacks=None,queue_length=10)
keras.callbacks.callbacks.CallbackList.__iter__(self)
keras.callbacks.callbacks.CallbackList._call_batch_hook(self,mode,hook,batch,logs=None)
keras.callbacks.callbacks.CallbackList._call_begin_hook(self,mode)
keras.callbacks.callbacks.CallbackList._call_end_hook(self,mode)
keras.callbacks.callbacks.CallbackList._reset_batch_timing(self)
keras.callbacks.callbacks.CallbackList.append(self,callback)
keras.callbacks.callbacks.CallbackList.on_batch_begin(self,batch,logs=None)
keras.callbacks.callbacks.CallbackList.on_batch_end(self,batch,logs=None)
keras.callbacks.callbacks.CallbackList.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.callbacks.CallbackList.on_epoch_end(self,epoch,logs=None)
keras.callbacks.callbacks.CallbackList.on_predict_batch_begin(self,batch,logs=None)
keras.callbacks.callbacks.CallbackList.on_predict_batch_end(self,batch,logs=None)
keras.callbacks.callbacks.CallbackList.on_predict_begin(self,logs=None)
keras.callbacks.callbacks.CallbackList.on_predict_end(self,logs=None)
keras.callbacks.callbacks.CallbackList.on_test_batch_begin(self,batch,logs=None)
keras.callbacks.callbacks.CallbackList.on_test_batch_end(self,batch,logs=None)
keras.callbacks.callbacks.CallbackList.on_test_begin(self,logs=None)
keras.callbacks.callbacks.CallbackList.on_test_end(self,logs=None)
keras.callbacks.callbacks.CallbackList.on_train_batch_begin(self,batch,logs=None)
keras.callbacks.callbacks.CallbackList.on_train_batch_end(self,batch,logs=None)
keras.callbacks.callbacks.CallbackList.on_train_begin(self,logs=None)
keras.callbacks.callbacks.CallbackList.on_train_end(self,logs=None)
keras.callbacks.callbacks.CallbackList.set_model(self,model)
keras.callbacks.callbacks.CallbackList.set_params(self,params)
keras.callbacks.callbacks.EarlyStopping(self,monitor='val_loss',min_delta=0,patience=0,verbose=0,mode='auto',baseline=None,restore_best_weights=False)
keras.callbacks.callbacks.EarlyStopping.__init__(self,monitor='val_loss',min_delta=0,patience=0,verbose=0,mode='auto',baseline=None,restore_best_weights=False)
keras.callbacks.callbacks.EarlyStopping.get_monitor_value(self,logs)
keras.callbacks.callbacks.EarlyStopping.on_epoch_end(self,epoch,logs=None)
keras.callbacks.callbacks.EarlyStopping.on_train_begin(self,logs=None)
keras.callbacks.callbacks.EarlyStopping.on_train_end(self,logs=None)
keras.callbacks.callbacks.History(Callback)
keras.callbacks.callbacks.History.on_epoch_end(self,epoch,logs=None)
keras.callbacks.callbacks.History.on_train_begin(self,logs=None)
keras.callbacks.callbacks.LambdaCallback(self,on_epoch_begin=None,on_epoch_end=None,on_batch_begin=None,on_batch_end=None,on_train_begin=None,on_train_end=None,**kwargs)
keras.callbacks.callbacks.LambdaCallback.__init__(self,on_epoch_begin=None,on_epoch_end=None,on_batch_begin=None,on_batch_end=None,on_train_begin=None,on_train_end=None,**kwargs)
keras.callbacks.callbacks.LearningRateScheduler(self,schedule,verbose=0)
keras.callbacks.callbacks.LearningRateScheduler.__init__(self,schedule,verbose=0)
keras.callbacks.callbacks.LearningRateScheduler.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.callbacks.LearningRateScheduler.on_epoch_end(self,epoch,logs=None)
keras.callbacks.callbacks.ModelCheckpoint(self,filepath,monitor='val_loss',verbose=0,save_best_only=False,save_weights_only=False,mode='auto',period=1)
keras.callbacks.callbacks.ModelCheckpoint.__init__(self,filepath,monitor='val_loss',verbose=0,save_best_only=False,save_weights_only=False,mode='auto',period=1)
keras.callbacks.callbacks.ModelCheckpoint.on_epoch_end(self,epoch,logs=None)
keras.callbacks.callbacks.ProgbarLogger(self,count_mode='samples',stateful_metrics=None)
keras.callbacks.callbacks.ProgbarLogger.__init__(self,count_mode='samples',stateful_metrics=None)
keras.callbacks.callbacks.ProgbarLogger.on_batch_begin(self,batch,logs=None)
keras.callbacks.callbacks.ProgbarLogger.on_batch_end(self,batch,logs=None)
keras.callbacks.callbacks.ProgbarLogger.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.callbacks.ProgbarLogger.on_epoch_end(self,epoch,logs=None)
keras.callbacks.callbacks.ProgbarLogger.on_train_begin(self,logs=None)
keras.callbacks.callbacks.ReduceLROnPlateau(self,monitor='val_loss',factor=0.1,patience=10,verbose=0,mode='auto',min_delta=0.0001,cooldown=0,min_lr=0,**kwargs)
keras.callbacks.callbacks.ReduceLROnPlateau.__init__(self,monitor='val_loss',factor=0.1,patience=10,verbose=0,mode='auto',min_delta=0.0001,cooldown=0,min_lr=0,**kwargs)
keras.callbacks.callbacks.ReduceLROnPlateau._reset(self)
keras.callbacks.callbacks.ReduceLROnPlateau.in_cooldown(self)
keras.callbacks.callbacks.ReduceLROnPlateau.on_epoch_end(self,epoch,logs=None)
keras.callbacks.callbacks.ReduceLROnPlateau.on_train_begin(self,logs=None)
keras.callbacks.callbacks.RemoteMonitor(self,root='http://localhost:9000',path='/publish/epoch/end/',field='data',headers=None,send_as_json=False)
keras.callbacks.callbacks.RemoteMonitor.__init__(self,root='http://localhost:9000',path='/publish/epoch/end/',field='data',headers=None,send_as_json=False)
keras.callbacks.callbacks.RemoteMonitor.on_epoch_end(self,epoch,logs=None)
keras.callbacks.callbacks.TerminateOnNaN(Callback)
keras.callbacks.callbacks.TerminateOnNaN.on_batch_end(self,batch,logs=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/callbacks/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/callbacks/tensorboard_v2.py----------------------------------------
keras.callbacks.TensorBoard(self,log_dir='./logs',histogram_freq=0,batch_size=None,write_graph=True,write_grads=False,write_images=False,embeddings_freq=0,embeddings_layer_names=None,embeddings_metadata=None,embeddings_data=None,update_freq='epoch',**kwargs)
keras.callbacks.TensorBoard.set_model(self,model)
keras.callbacks.tensorboard_v2.TensorBoard(self,log_dir='./logs',histogram_freq=0,batch_size=None,write_graph=True,write_grads=False,write_images=False,embeddings_freq=0,embeddings_layer_names=None,embeddings_metadata=None,embeddings_data=None,update_freq='epoch',**kwargs)
keras.callbacks.tensorboard_v2.TensorBoard.__init__(self,log_dir='./logs',histogram_freq=0,batch_size=None,write_graph=True,write_grads=False,write_images=False,embeddings_freq=0,embeddings_layer_names=None,embeddings_metadata=None,embeddings_data=None,update_freq='epoch',**kwargs)
keras.callbacks.tensorboard_v2.TensorBoard.set_model(self,model)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/input_spec.py----------------------------------------
A:keras.engine.input_spec.shape->tensorflow.compat.v2.TensorShape(x.shape)
A:keras.engine.input_spec.self.ndim->len(shape)
A:keras.engine.input_spec.max_axis->max(self.axes)
A:keras.engine.input_spec.input_spec->tensorflow.compat.v2.nest.flatten(input_spec)
A:keras.engine.input_spec.inputs->tensorflow.compat.v2.nest.flatten(inputs)
A:keras.engine.input_spec.shape_as_list->tensorflow.compat.v2.TensorShape(x.shape).as_list()
keras.engine.input_spec.InputSpec(self,dtype=None,shape=None,ndim=None,max_ndim=None,min_ndim=None,axes=None,allow_last_axis_squeeze=False,name=None)
keras.engine.input_spec.InputSpec.__init__(self,dtype=None,shape=None,ndim=None,max_ndim=None,min_ndim=None,axes=None,allow_last_axis_squeeze=False,name=None)
keras.engine.input_spec.InputSpec.__repr__(self)
keras.engine.input_spec.InputSpec.from_config(cls,config)
keras.engine.input_spec.InputSpec.get_config(self)
keras.engine.input_spec.assert_input_compatibility(input_spec,inputs,layer_name)
keras.engine.input_spec.display_shape(shape)
keras.engine.input_spec.to_tensor_shape(spec)
keras.engine.input_spec.to_tensor_spec(input_spec,default_dtype=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/training_arrays_v1.py----------------------------------------
A:keras.engine.training_arrays_v1.steps_per_epoch->keras.engine.training_utils_v1.infer_steps_for_dataset(model, inputs, steps_per_epoch, epochs=epochs, steps_name=steps_name)
A:keras.engine.training_arrays_v1.is_dataset->isinstance(inputs, (tf.compat.v1.data.Dataset, tf.data.Dataset))
A:keras.engine.training_arrays_v1.input_iterator->_get_iterator(inputs, model._distribution_strategy)
A:keras.engine.training_arrays_v1.scope->keras.distribute.distributed_training_utils_v1.distributed_scope(strategy=model._distribution_strategy, learning_phase=1 if mode == ModeKeys.TRAIN else 0)
A:keras.engine.training_arrays_v1.ins->_prepare_feed_values(model, inputs, targets, sample_weights, mode)
A:keras.engine.training_arrays_v1.num_samples_or_steps->_get_num_samples_or_steps(ins, batch_size, steps_per_epoch)
A:keras.engine.training_arrays_v1.f->_make_execution_function(model, mode)
A:keras.engine.training_arrays_v1.validation_steps->keras.engine.training_utils_v1.infer_steps_for_dataset(model, val_inputs, validation_steps, epochs=epochs, steps_name='validation_steps')
A:keras.engine.training_arrays_v1.val_iterator->_get_iterator(val_inputs, model._distribution_strategy)
A:keras.engine.training_arrays_v1.val_inputs->_prepare_feed_values(model, val_iterator, val_targets, val_sample_weights, ModeKeys.TEST)
A:keras.engine.training_arrays_v1.callbacks->keras.callbacks.configure_callbacks(callbacks, model, do_validation=do_validation, batch_size=batch_size, epochs=epochs, steps_per_epoch=steps_per_epoch, samples=num_samples_or_steps, count_mode=count_mode, verbose=verbose, mode=mode)
A:keras.engine.training_arrays_v1.feed->_get_model_feed(model, mode)
A:keras.engine.training_arrays_v1.aggregator->keras.engine.training_utils_v1.MetricsAggregator(use_steps, num_samples=None if steps_per_epoch else num_samples_or_steps, steps=steps_per_epoch)
A:keras.engine.training_arrays_v1.initial_epoch->model._maybe_load_initial_epoch_from_ckpt(initial_epoch, mode)
A:keras.engine.training_arrays_v1.actual_inputs->ins()
A:keras.engine.training_arrays_v1.batch_outs->f(ins_batch)
A:keras.engine.training_arrays_v1.batch_logs->keras.callbacks.make_logs(model, batch_logs, batch_outs, mode)
A:keras.engine.training_arrays_v1.index_array->keras.engine.training_utils_v1.batch_shuffle(index_array, batch_size)
A:keras.engine.training_arrays_v1.batches->make_batches(num_samples_or_steps, batch_size)
A:keras.engine.training_arrays_v1.ins_batch->slice_arrays(ins, batch_ids)
A:keras.engine.training_arrays_v1.ins_batch[i]->ins_batch[i].toarray().toarray()
A:keras.engine.training_arrays_v1.epoch_logs->keras.callbacks.make_logs(model, epoch_logs, val_results, mode, prefix='val_')
A:keras.engine.training_arrays_v1.val_results->model_iteration(model, val_inputs, targets=val_targets, sample_weights=val_sample_weights, batch_size=batch_size, steps_per_epoch=validation_steps, callbacks=callbacks, verbose=0, mode=ModeKeys.TEST, validation_in_fit=True, prepared_feed_values_from_dataset=val_iterator is not None, steps_name='validation_steps')
A:keras.engine.training_arrays_v1.msg->'Train on {0} {increment}'.format(num_samples_or_steps, increment=increment)
A:keras.engine.training_arrays_v1.inputs->keras.engine.training_utils_v1.ModelInputs(inputs).as_list()
A:keras.engine.training_arrays_v1.(inputs, targets, sample_weights)->model._standardize_user_data(inputs, extract_tensors_from_dataset=True)
A:keras.engine.training_arrays_v1.targets->list(targets or [])
A:keras.engine.training_arrays_v1.sample_weights->list(sample_weights or [])
A:keras.engine.training_arrays_v1.fit_loop->functools.partial(model_iteration, mode=ModeKeys.TRAIN)
A:keras.engine.training_arrays_v1.test_loop->functools.partial(model_iteration, mode=ModeKeys.TEST, shuffle=False)
A:keras.engine.training_arrays_v1.predict_loop->functools.partial(model_iteration, mode=ModeKeys.PREDICT, shuffle=False)
A:keras.engine.training_arrays_v1.batch_size->model._validate_or_infer_batch_size(batch_size, steps, x)
A:keras.engine.training_arrays_v1.(x, y, sample_weights)->model._standardize_user_data(x, y, sample_weight=sample_weight, batch_size=batch_size, check_steps=True, steps_name='steps', steps=steps)
A:keras.engine.training_arrays_v1.(val_x, val_y, val_sample_weights)->model._prepare_validation_data(validation_data, batch_size, validation_steps)
A:keras.engine.training_arrays_v1.(x, y, sample_weights, val_x, val_y, val_sample_weights)->keras.engine.training_utils_v1.split_training_and_validation_data(x, y, sample_weights, validation_split)
A:keras.engine.training_arrays_v1.(x, _, _)->model._standardize_user_data(x, check_steps=True, steps_name='steps', steps=steps)
keras.engine.training_arrays_v1.ArrayLikeTrainingLoop(training_utils_v1.TrainingLoop)
keras.engine.training_arrays_v1.ArrayLikeTrainingLoop.evaluate(self,model,x=None,y=None,batch_size=None,verbose=1,sample_weight=None,steps=None,callbacks=None,**kwargs)
keras.engine.training_arrays_v1.ArrayLikeTrainingLoop.fit(self,model,x=None,y=None,batch_size=None,epochs=1,verbose=1,callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None,validation_freq=1,**kwargs)
keras.engine.training_arrays_v1.ArrayLikeTrainingLoop.predict(self,model,x,batch_size=None,verbose=0,steps=None,callbacks=None,**kwargs)
keras.engine.training_arrays_v1._get_iterator(inputs,distribution_strategy=None)
keras.engine.training_arrays_v1._get_model_feed(model,mode)
keras.engine.training_arrays_v1._get_num_samples_or_steps(ins,batch_size,steps_per_epoch)
keras.engine.training_arrays_v1._make_execution_function(model,mode)
keras.engine.training_arrays_v1._prepare_feed_values(model,inputs,targets,sample_weights,mode)
keras.engine.training_arrays_v1._print_train_info(num_samples_or_steps,val_samples_or_steps,is_dataset)
keras.engine.training_arrays_v1._reinitialize_iterator(iterator,distribution_strategy=None)
keras.engine.training_arrays_v1._update_sample_weight_mode(model,mode,inputs)
keras.engine.training_arrays_v1.model_iteration(model,inputs,targets=None,sample_weights=None,batch_size=None,epochs=1,verbose=1,callbacks=None,val_inputs=None,val_targets=None,val_sample_weights=None,shuffle=True,initial_epoch=0,steps_per_epoch=None,validation_steps=None,validation_freq=1,mode=ModeKeys.TRAIN,validation_in_fit=False,prepared_feed_values_from_dataset=False,steps_name='steps',**kwargs)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/base_layer_utils.py----------------------------------------
A:keras.engine.base_layer_utils._call_context->threading.local()
A:keras.engine.base_layer_utils.metric_obj->keras.metrics.Mean(name=name, dtype=value.dtype)
A:keras.engine.base_layer_utils.initializer->initializer()
A:keras.engine.base_layer_utils.init_val->functools.partial(initializer, shape, dtype=dtype)
A:keras.engine.base_layer_utils.variable_shape->tensorflow.compat.v2.TensorShape(shape)
A:keras.engine.base_layer_utils.(_, created_layers)->_create_keras_history_helper(tensors, set(), [])
A:keras.engine.base_layer_utils.tensor_list->tensorflow.compat.v2.nest.flatten(tensors)
A:keras.engine.base_layer_utils.op_inputs->list(op.inputs)
A:keras.engine.base_layer_utils.using_xla->keras.utils.control_flow_util.GraphOrParentsInXlaContext(tf.compat.v1.get_default_graph())
A:keras.engine.base_layer_utils.constants[i]->keras.backend.function([], op_input)([])
A:keras.engine.base_layer_utils.layer_inputs->unnest_if_single_tensor(layer_inputs)
A:keras.engine.base_layer_utils.(processed_ops, created_layers)->_create_keras_history_helper(layer_inputs, processed_ops, created_layers)
A:keras.engine.base_layer_utils.node_def->op.node_def.SerializeToString()
A:keras.engine.base_layer_utils.op_layer->keras.engine.base_layer.TensorFlowOpLayer(node_def, constants=constants, name=name)
A:keras.engine.base_layer_utils.flat_input_tensors->tensorflow.compat.v2.nest.flatten(input_tensors)
A:keras.engine.base_layer_utils.input_tensors->tensorflow.compat.v2.nest.flatten(tensors)
A:keras.engine.base_layer_utils.graph->tensorflow.compat.v2.compat.v1.get_default_graph()
A:keras.engine.base_layer_utils.checked_tensors->set()
A:keras.engine.base_layer_utils.tensors_to_check->tensorflow.compat.v2.nest.flatten(tensors)
A:keras.engine.base_layer_utils.call_ctx->CallContext()
A:keras.engine.base_layer_utils.full_args->dict(zip(argspec.args[2:], args))
A:keras.engine.base_layer_utils.return_tensor->acd.mark_as_return(tensor)
A:keras.engine.base_layer_utils.return_tensor._keras_mask->acd.mark_as_return(tensor._keras_mask)
A:keras.engine.base_layer_utils.self._distribute_strategy->tensorflow.compat.v2.distribute.get_strategy()
A:keras.engine.base_layer_utils.saveables->trackable._gather_saveables_for_checkpoint().values()
A:keras.engine.base_layer_utils.self._num_tensors->len(self._saveable.specs)
A:keras.engine.base_layer_utils.self._saveable->saveable()
A:keras.engine.base_layer_utils.self._assign_op->self._saveable.restore(self._placeholder_tensors, None)
A:keras.engine.base_layer_utils.input_list->tensorflow.compat.v2.nest.flatten(inputs)
A:keras.engine.base_layer_utils.obj_type->type(obj)
keras.engine.base_layer_utils.CallContext(self)
keras.engine.base_layer_utils.CallContext.__init__(self)
keras.engine.base_layer_utils.CallContext.build_graph(self)
keras.engine.base_layer_utils.CallContext.enter(self,layer,inputs,build_graph,training,saving=None)
keras.engine.base_layer_utils.CallContext.frozen(self)
keras.engine.base_layer_utils.CallContext.in_keras_graph(self)
keras.engine.base_layer_utils.CallContext.inputs(self)
keras.engine.base_layer_utils.CallContext.layer(self)
keras.engine.base_layer_utils.CallContext.saving(self)
keras.engine.base_layer_utils.CallContext.training(self)
keras.engine.base_layer_utils.CallContextManager(self,call_ctx,state)
keras.engine.base_layer_utils.CallContextManager.__enter__(self)
keras.engine.base_layer_utils.CallContextManager.__exit__(self,*exc_info)
keras.engine.base_layer_utils.CallContextManager.__init__(self,call_ctx,state)
keras.engine.base_layer_utils.StaticTableHandler(self,getter_lambda)
keras.engine.base_layer_utils.StaticTableHandler.__init__(self,getter_lambda)
keras.engine.base_layer_utils.TrackableWeightHandler(self,trackable)
keras.engine.base_layer_utils.TrackableWeightHandler.__init__(self,trackable)
keras.engine.base_layer_utils.TrackableWeightHandler._set_weights_v1(self,weights)
keras.engine.base_layer_utils.TrackableWeightHandler.get_tensors(self)
keras.engine.base_layer_utils.TrackableWeightHandler.num_tensors(self)
keras.engine.base_layer_utils.TrackableWeightHandler.set_weights(self,weights)
keras.engine.base_layer_utils._create_keras_history_helper(tensors,processed_ops,created_layers)
keras.engine.base_layer_utils.call_context()
keras.engine.base_layer_utils.check_graph_consistency(tensor=None,method='add_loss',force_raise=False)
keras.engine.base_layer_utils.collect_previous_mask(input_tensors)
keras.engine.base_layer_utils.create_keras_history(tensors)
keras.engine.base_layer_utils.create_mean_metric(value,name=None)
keras.engine.base_layer_utils.disable_v2_dtype_behavior()
keras.engine.base_layer_utils.enable_v2_dtype_behavior()
keras.engine.base_layer_utils.from_saved_model(layer)
keras.engine.base_layer_utils.generate_placeholders_from_shape(shape)
keras.engine.base_layer_utils.has_weights(obj)
keras.engine.base_layer_utils.have_all_keras_metadata(tensors)
keras.engine.base_layer_utils.is_in_eager_or_tf_function()
keras.engine.base_layer_utils.is_in_keras_graph()
keras.engine.base_layer_utils.is_in_tf_function()
keras.engine.base_layer_utils.is_split_variable(v)
keras.engine.base_layer_utils.is_subclassed(layer)
keras.engine.base_layer_utils.make_variable(name,shape=None,dtype=tf.float32,initializer=None,trainable=None,caching_device=None,validate_shape=True,constraint=None,use_resource=None,collections=None,synchronization=tf.VariableSynchronization.AUTO,aggregation=tf.compat.v1.VariableAggregation.NONE,partitioner=None)
keras.engine.base_layer_utils.mark_as_return(outputs,acd)
keras.engine.base_layer_utils.mark_checked(tensors)
keras.engine.base_layer_utils.needs_keras_history(tensors,ignore_call_context=False)
keras.engine.base_layer_utils.no_ragged_support(inputs,layer_name)
keras.engine.base_layer_utils.training_arg_passed_to_call(argspec,args,kwargs)
keras.engine.base_layer_utils.unnest_if_single_tensor(input_tensors)
keras.engine.base_layer_utils.uses_keras_history(tensors)
keras.engine.base_layer_utils.v2_dtype_behavior_enabled()


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/training_generator.py----------------------------------------
A:keras.engine.training_generator.do_validation->bool(validation_data)
A:keras.engine.training_generator.use_sequence_api->is_sequence(generator)
A:keras.engine.training_generator.steps_per_epoch->len(generator)
A:keras.engine.training_generator.val_use_sequence_api->is_sequence(validation_data)
A:keras.engine.training_generator.model.history->cbks.History()
A:keras.engine.training_generator.callbacks->cbks.CallbackList(callbacks)
A:keras.engine.training_generator.callback_model->model._get_callback_model()
A:keras.engine.training_generator.val_enqueuer->GeneratorEnqueuer(val_data, use_multiprocessing=use_multiprocessing)
A:keras.engine.training_generator.val_enqueuer_gen->iter_sequence_infinite(val_data)
A:keras.engine.training_generator.(val_x, val_y, val_sample_weights)->model._standardize_user_data(val_x, val_y, val_sample_weight)
A:keras.engine.training_generator.enqueuer->GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing)
A:keras.engine.training_generator.output_generator->iter_sequence_infinite(generator)
A:keras.engine.training_generator.generator_output->next(output_generator)
A:keras.engine.training_generator.outs->to_list(outs)
A:keras.engine.training_generator.val_outs->to_list(val_outs)
A:keras.engine.training_generator.steps->len(generator)
A:keras.engine.training_generator.callback_metrics->list(model.metrics_names)
A:keras.engine.training_generator.progbar->Progbar(target=steps)
keras.engine.training_generator.evaluate_generator(model,generator,steps=None,callbacks=None,max_queue_size=10,workers=1,use_multiprocessing=False,verbose=0)
keras.engine.training_generator.fit_generator(model,generator,steps_per_epoch=None,epochs=1,verbose=1,callbacks=None,validation_data=None,validation_steps=None,validation_freq=1,class_weight=None,max_queue_size=10,workers=1,use_multiprocessing=False,shuffle=True,initial_epoch=0)
keras.engine.training_generator.predict_generator(model,generator,steps=None,callbacks=None,max_queue_size=10,workers=1,use_multiprocessing=False,verbose=0)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/base_preprocessing_layer.py----------------------------------------
A:keras.engine.base_preprocessing_layer.keras_kpl_gauge->tensorflow.compat.v2.__internal__.monitoring.BoolGauge('/tensorflow/api/oss-keras/layers/preprocessing', 'keras preprocessing layers usage', 'method')
A:keras.engine.base_preprocessing_layer.data->next(iterator)
A:keras.engine.base_preprocessing_layer.adapt_fn->tensorflow.compat.v2.function(adapt_fn)
A:keras.engine.base_preprocessing_layer.data_handler->keras.engine.data_adapter.DataHandler(data, batch_size=batch_size, steps_per_epoch=steps, epochs=1, steps_per_execution=self._steps_per_execution, distribute=False)
A:keras.engine.base_preprocessing_layer.self._adapt_function->self.make_adapt_function()
A:keras.engine.base_preprocessing_layer.self._steps_per_execution->tensorflow.compat.v2.Variable(steps_per_execution, dtype='int64', aggregation=tf.VariableAggregation.ONLY_FIRST_REPLICA)
A:keras.engine.base_preprocessing_layer.data_shape_nones->tuple([None] * len(data.shape))
A:keras.engine.base_preprocessing_layer.batch_input_shape->getattr(self, '_batch_input_shape', None)
A:keras.engine.base_preprocessing_layer.self.state_variables->collections.OrderedDict()
A:keras.engine.base_preprocessing_layer.self._adapt_accumulator->self._combiner.restore(self._restore_updates())
A:keras.engine.base_preprocessing_layer.merged_accumulator->self._combiner.merge(accumulators)
A:keras.engine.base_preprocessing_layer.weight->self.add_weight(name=name, shape=shape, dtype=dtype, initializer=initializer, regularizer=None, trainable=False, constraint=None, partitioner=partitioner, use_resource=use_resource, **kwargs)
A:keras.engine.base_preprocessing_layer.data_dict[name]->var.numpy()
A:keras.engine.base_preprocessing_layer.updates->self._combiner.extract(accumulator)
A:keras.engine.base_preprocessing_layer.values->values.tolist().tolist()
A:keras.engine.base_preprocessing_layer.dense_tensor->tensorflow.compat.v2.sparse.to_dense(values, default_value=sparse_default_value)
A:keras.engine.base_preprocessing_layer.error_msg->'Detected a call to `PreprocessingLayer.{method_name}` inside a `tf.function`. `PreprocessingLayer.{method_name} is a high-level endpoint that manages its own `tf.function`. Please move the call to `PreprocessingLayer.{method_name}` outside of all enclosing `tf.function`s. Note that you can call a `PreprocessingLayer` directly on `Tensor`s inside a `tf.function` like: `layer(x)`, or update its state like: `layer.update_state(x)`.'.format(method_name=method_name)
keras.engine.base_preprocessing_layer.Combiner(object)
keras.engine.base_preprocessing_layer.Combiner.__repr__(self)
keras.engine.base_preprocessing_layer.Combiner.compute(self,batch_values,accumulator=None)
keras.engine.base_preprocessing_layer.Combiner.deserialize(self,encoded_accumulator)
keras.engine.base_preprocessing_layer.Combiner.extract(self,accumulator)
keras.engine.base_preprocessing_layer.Combiner.merge(self,accumulators)
keras.engine.base_preprocessing_layer.Combiner.restore(self,output)
keras.engine.base_preprocessing_layer.Combiner.serialize(self,accumulator)
keras.engine.base_preprocessing_layer.CombinerPreprocessingLayer(self,combiner,**kwargs)
keras.engine.base_preprocessing_layer.CombinerPreprocessingLayer.__init__(self,combiner,**kwargs)
keras.engine.base_preprocessing_layer.CombinerPreprocessingLayer._add_state_variable(self,name,shape,dtype,initializer=None,partitioner=None,use_resource=None,**kwargs)
keras.engine.base_preprocessing_layer.CombinerPreprocessingLayer._get_accumulator(self)
keras.engine.base_preprocessing_layer.CombinerPreprocessingLayer._restore_updates(self)
keras.engine.base_preprocessing_layer.CombinerPreprocessingLayer._set_accumulator(self,accumulator)
keras.engine.base_preprocessing_layer.CombinerPreprocessingLayer._set_state_variables(self,updates)
keras.engine.base_preprocessing_layer.CombinerPreprocessingLayer.adapt(self,data,batch_size=None,steps=None,reset_state=True)
keras.engine.base_preprocessing_layer.CombinerPreprocessingLayer.compile(self,run_eagerly=None,steps_per_execution=None)
keras.engine.base_preprocessing_layer.CombinerPreprocessingLayer.finalize_state(self)
keras.engine.base_preprocessing_layer.CombinerPreprocessingLayer.merge_state(self,layers)
keras.engine.base_preprocessing_layer.CombinerPreprocessingLayer.reset_state(self)
keras.engine.base_preprocessing_layer.CombinerPreprocessingLayer.update_state(self,data)
keras.engine.base_preprocessing_layer.PreprocessingLayer(self,stateful=False,streaming=True,**kwargs)
keras.engine.base_preprocessing_layer.PreprocessingLayer.__init__(self,stateful=False,streaming=True,**kwargs)
keras.engine.base_preprocessing_layer.PreprocessingLayer._adapt_maybe_build(self,data)
keras.engine.base_preprocessing_layer.PreprocessingLayer._configure_steps_per_execution(self,steps_per_execution)
keras.engine.base_preprocessing_layer.PreprocessingLayer._reset_state_wrapper(self)
keras.engine.base_preprocessing_layer.PreprocessingLayer.adapt(self,data,batch_size=None,steps=None,reset_state=True)
keras.engine.base_preprocessing_layer.PreprocessingLayer.compile(self,run_eagerly=None,steps_per_execution=None)
keras.engine.base_preprocessing_layer.PreprocessingLayer.finalize_state(self)
keras.engine.base_preprocessing_layer.PreprocessingLayer.is_adapted(self)
keras.engine.base_preprocessing_layer.PreprocessingLayer.make_adapt_function(self)
keras.engine.base_preprocessing_layer.PreprocessingLayer.merge_state(self,layers)
keras.engine.base_preprocessing_layer.PreprocessingLayer.reset_state(self)
keras.engine.base_preprocessing_layer.PreprocessingLayer.streaming(self)
keras.engine.base_preprocessing_layer.PreprocessingLayer.update_state(self,data)
keras.engine.base_preprocessing_layer._disallow_inside_tf_function(method_name)
keras.engine.base_preprocessing_layer.convert_to_list(values,sparse_default_value=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/training_utils.py----------------------------------------
A:keras.engine.training_utils.shape->K.int_shape(x)
A:keras.engine.training_utils.x->numpy.expand_dims(x, 1)
A:keras.engine.training_utils.set_x->set_of_lengths(inputs)
A:keras.engine.training_utils.set_y->set_of_lengths(targets)
A:keras.engine.training_utils.set_w->set_of_lengths(weights)
A:keras.engine.training_utils.is_loss_wrapper->isinstance(loss, losses.LossFunctionWrapper)
A:keras.engine.training_utils.batch_count->int(len(index_array) / batch_size)
A:keras.engine.training_utils.index_array->index_array.flatten().flatten()
A:keras.engine.training_utils.score_array->K.mean(score_array, axis=list(range(weight_ndim, ndim)))
A:keras.engine.training_utils.mask->K.cast(mask, y_pred.dtype)
A:keras.engine.training_utils.ndim->K.ndim(score_array)
A:keras.engine.training_utils.weight_ndim->K.ndim(weights)
A:keras.engine.training_utils.y_classes->numpy.reshape(y, y.shape[0])
A:keras.engine.training_utils.class_sample_weight->numpy.asarray([class_weight[cls] for cls in y_classes if cls in class_weight])
A:keras.engine.training_utils.existing_classes->set(y_classes)
A:keras.engine.training_utils.existing_class_weight->set(class_weight.keys())
A:keras.engine.training_utils.(batch_input_shape, _)->get_input_shape_and_dtype(layer)
A:keras.engine.training_utils.loss->losses.get(loss)
A:keras.engine.training_utils.loss_fn->losses.get(loss)
A:keras.engine.training_utils.weight->K.placeholder(shape=shape, name=output_name + '_sample_weights')
A:keras.engine.training_utils.(weight, mode)->get_output_sample_weight_and_mode(skip_target_weighing_indices, sample_weight_mode, name, i)
A:keras.engine.training_utils.any_sub_list->any((isinstance(m, list) for m in metrics))
A:keras.engine.training_utils.output_metrics->utils.generic_utils.to_list(metrics.get(name, []))
A:keras.engine.training_utils.metrics_dict->OrderedDict()
A:keras.engine.training_utils.metric_name->get_metric_name(metric, is_weighted)
A:keras.engine.training_utils.metric_fn->metrics_module.MeanMetricWrapper(metric_fn, name=metric_name)
A:keras.engine.training_utils.metric->metrics_module.get(metric)
A:keras.engine.training_utils.(mask, _, weights)->utils.losses_utils.squeeze_or_expand_dimensions(mask, sample_weight=weights)
A:keras.engine.training_utils.update_ops->metrics_module.MeanMetricWrapper(metric_fn, name=metric_name).update_state(y_true, sample_weight=weights)
keras.engine.training_utils.batch_shuffle(index_array,batch_size)
keras.engine.training_utils.call_metric_function(metric_fn,y_true,y_pred=None,weights=None,mask=None)
keras.engine.training_utils.check_array_length_consistency(inputs,targets,weights=None)
keras.engine.training_utils.check_generator_arguments(y=None,sample_weight=None,validation_split=None)
keras.engine.training_utils.check_loss_and_target_compatibility(targets,loss_fns,output_shapes)
keras.engine.training_utils.check_num_samples(ins,batch_size=None,steps=None,steps_name='steps')
keras.engine.training_utils.collect_per_output_metric_info(metrics,output_names,output_shapes,loss_fns,is_weighted=False)
keras.engine.training_utils.get_input_shape_and_dtype(layer)
keras.engine.training_utils.get_loss_function(loss)
keras.engine.training_utils.get_metric_function(metric,output_shape=None,loss_fn=None)
keras.engine.training_utils.get_metric_name(metric,weighted=False)
keras.engine.training_utils.get_output_sample_weight_and_mode(skip_target_weighing_indices,sample_weight_mode,output_name,output_index)
keras.engine.training_utils.get_static_batch_size(layer)
keras.engine.training_utils.is_generator_or_sequence(x)
keras.engine.training_utils.is_sequence(seq)
keras.engine.training_utils.iter_sequence_infinite(seq)
keras.engine.training_utils.make_batches(size,batch_size)
keras.engine.training_utils.prepare_loss_functions(loss,output_names)
keras.engine.training_utils.prepare_loss_weights(output_names,loss_weights=None)
keras.engine.training_utils.prepare_sample_weights(output_names,sample_weight_mode,skip_target_weighing_indices)
keras.engine.training_utils.should_run_validation(validation_freq,epoch)
keras.engine.training_utils.standardize_class_weights(class_weight,output_names)
keras.engine.training_utils.standardize_input_data(data,names,shapes=None,check_batch_axis=True,exception_prefix='')
keras.engine.training_utils.standardize_sample_or_class_weights(x_weight,output_names,weight_type)
keras.engine.training_utils.standardize_sample_weights(sample_weight,output_names)
keras.engine.training_utils.standardize_single_array(x)
keras.engine.training_utils.standardize_weights(y,sample_weight=None,class_weight=None,sample_weight_mode=None)
keras.engine.training_utils.weighted_masked_objective(fn)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/input_layer.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/data_adapter.py----------------------------------------
A:keras.engine.data_adapter.keras_data_adapter_gauge->tensorflow.compat.v2.__internal__.monitoring.BoolGauge('/tensorflow/api/oss-keras/data_adapters', 'keras data adapter usage', 'method')
A:keras.engine.data_adapter.flat_inputs->tensorflow.compat.v2.nest.flatten(x)
A:keras.engine.data_adapter.tensor_types->_get_tensor_types()
A:keras.engine.data_adapter.(x, y, sample_weights)->_process_tensorlike((x, y, sample_weights))
A:keras.engine.data_adapter.sample_weight_modes->tensorflow.compat.v2.nest.pack_sequence_as(target_structure, tf.nest.flatten(sample_weight_modes))
A:keras.engine.data_adapter.(sample_weights, _, _)->keras.engine.training_utils.handle_partial_sample_weights(y, sample_weights, sample_weight_modes, check_all_flat=True)
A:keras.engine.data_adapter.inputs->tensorflow.compat.v2.nest.map_structure(_convert_numpy_and_scipy, inputs)
A:keras.engine.data_adapter.num_samples->set((int(i.shape[0]) for i in tf.nest.flatten(data)))
A:keras.engine.data_adapter.self._size->len(x)
A:keras.engine.data_adapter.num_full_batches->int(num_samples // batch_size)
A:keras.engine.data_adapter.shuffle->shuffle.lower().lower()
A:keras.engine.data_adapter.indices_dataset->indices_dataset.flat_map(slice_batch_indices).flat_map(slice_batch_indices)
A:keras.engine.data_adapter.indices->numpy.concatenate((np.expand_dims(row, axis=1), np.expand_dims(col, axis=1)), axis=1)
A:keras.engine.data_adapter.first_k_indices->tensorflow.compat.v2.reshape(first_k_indices, [num_full_batches, batch_size])
A:keras.engine.data_adapter.flat_dataset->flat_dataset.shuffle(1024).repeat(epochs).shuffle(1024).repeat(epochs)
A:keras.engine.data_adapter.index_remainder->tensorflow.compat.v2.data.Dataset.from_tensors(tf.slice(indices, [num_in_full_batch], [self._partial_batch_size]))
A:keras.engine.data_adapter.dataset->tensorflow.compat.v2.distribute.get_strategy().experimental_distribute_dataset(dataset)
A:keras.engine.data_adapter.options->tensorflow.compat.v2.data.Options()
A:keras.engine.data_adapter.shape->list(t.shape)
A:keras.engine.data_adapter.flat_out->tensorflow.compat.v2.py_function(py_method, [indices], flat_dtypes)
A:keras.engine.data_adapter.handles_x->ListsOfScalarsDataAdapter._is_list_of_scalars(x)
A:keras.engine.data_adapter.handles_y->ListsOfScalarsDataAdapter._is_list_of_scalars(y)
A:keras.engine.data_adapter.x->numpy.asarray(x)
A:keras.engine.data_adapter.y->numpy.asarray(y)
A:keras.engine.data_adapter.sample_weights->numpy.asarray(sample_weights)
A:keras.engine.data_adapter.self._internal_adapter->TensorLikeDataAdapter(x, y=y, sample_weights=sample_weights, sample_weight_modes=sample_weight_modes, batch_size=batch_size, shuffle=shuffle, **kwargs)
A:keras.engine.data_adapter.size->tensorflow.compat.v2.data.experimental.cardinality(dataset)
A:keras.engine.data_adapter.(peek, x)->self._peek_and_restore(x)
A:keras.engine.data_adapter.peek->next(x)
A:keras.engine.data_adapter.(concrete_x, _, _)->unpack_x_y_sample_weight(peek)
A:keras.engine.data_adapter.self._first_batch_size->int(tf.nest.flatten(peek)[0].shape[0])
A:keras.engine.data_adapter.output_shapes->tensorflow.compat.v2.nest.map_structure(_get_dynamic_shape, peek)
A:keras.engine.data_adapter.output_types->tensorflow.compat.v2.nest.map_structure(lambda t: t.dtype, peek)
A:keras.engine.data_adapter.generator_fn->self._handle_multiprocessing(x, workers, use_multiprocessing, max_queue_size)
A:keras.engine.data_adapter.(x, y, sample_weight)->_process_tensorlike((x, y, sample_weight))
A:keras.engine.data_adapter.data->data.astype(backend.floatx()).astype(backend.floatx())
A:keras.engine.data_adapter.enqueuer->keras.utils.data_utils.GeneratorEnqueuer(x, use_multiprocessing=use_multiprocessing)
A:keras.engine.data_adapter.self._enqueuer->keras.utils.data_utils.OrderedEnqueuer(x, use_multiprocessing=use_multiprocessing, shuffle=self._shuffle_sequence)
A:keras.engine.data_adapter.order->list(order)
A:keras.engine.data_adapter.key_types->set((_type_name(key) for key in x.keys()))
A:keras.engine.data_adapter.val_types->set((_type_name(key) for key in x.values()))
A:keras.engine.data_adapter.types->set((_type_name(val) for val in x))
A:keras.engine.data_adapter.dtype->keras.backend.floatx()
A:keras.engine.data_adapter.target_str->str(tf.nest.map_structure(lambda _: '...', target_structure))
A:keras.engine.data_adapter.mode_str->str(tf.nest.map_structure(lambda _: '...', sample_weight_modes))
A:keras.engine.data_adapter.self._steps_per_execution_value->steps_per_execution.numpy().item()
A:keras.engine.data_adapter.adapter_cls->select_data_adapter(x, y)
A:keras.engine.data_adapter.self._adapter->adapter_cls(x, y, batch_size=batch_size, steps=steps_per_epoch, epochs=epochs - initial_epoch, sample_weights=sample_weight, shuffle=shuffle, max_queue_size=max_queue_size, workers=workers, use_multiprocessing=use_multiprocessing, distribution_strategy=tf.distribute.get_strategy(), model=model)
A:keras.engine.data_adapter.strategy->tensorflow.compat.v2.distribute.get_strategy()
A:keras.engine.data_adapter.self._inferred_steps->self._infer_steps(steps_per_epoch, dataset)
A:keras.engine.data_adapter.data_iterator->iter(self._dataset)
A:keras.engine.data_adapter.adapter_steps->self._adapter.get_size()
A:keras.engine.data_adapter.self._dataset->self._model._cluster_coordinator.create_per_worker_dataset(per_worker_dataset_fn)
A:keras.engine.data_adapter.class_ids->list(sorted(class_weight.keys()))
A:keras.engine.data_adapter.expected_class_ids->list(range(len(class_ids)))
A:keras.engine.data_adapter.error_msg->'Data is expected to be in format `x`, `(x,)`, `(x, y)`, or `(x, y, sample_weight)`, found: {}'.format(data)
A:keras.engine.data_adapter.class_weight_tensor->tensorflow.compat.v2.convert_to_tensor([class_weight[int(c)] for c in class_ids])
A:keras.engine.data_adapter.(x, y, sw)->unpack_x_y_sample_weight(data)
A:keras.engine.data_adapter.y_classes->tensorflow.python.framework.smart_cond.smart_cond(y.shape.rank == 2 and backend.shape(y)[1] > 1, lambda : backend.argmax(y, axis=1), lambda : tf.cast(backend.reshape(y, (-1,)), tf.int64))
A:keras.engine.data_adapter.cw->tensorflow.compat.v2.cast(cw, sw.dtype)
A:keras.engine.data_adapter.(sw, cw)->expand_1d((sw, cw))
A:keras.engine.data_adapter.flat_arrays->tensorflow.compat.v2.nest.flatten(arrays)
A:keras.engine.data_adapter.batch_dim->int(first_non_none.shape[0])
A:keras.engine.data_adapter.split_at->int(math.floor(batch_dim * (1.0 - validation_split)))
A:keras.engine.data_adapter.train_arrays->tensorflow.compat.v2.nest.map_structure(functools.partial(_split, start=0, end=split_at), arrays)
A:keras.engine.data_adapter.val_arrays->tensorflow.compat.v2.nest.map_structure(functools.partial(_split, start=split_at, end=batch_dim), arrays)
A:keras.engine.data_adapter.sparse_coo->t.tocoo()
keras.engine.data_adapter.CompositeTensorDataAdapter(self,x,y=None,sample_weights=None,sample_weight_modes=None,batch_size=None,steps=None,shuffle=False,**kwargs)
keras.engine.data_adapter.CompositeTensorDataAdapter.__init__(self,x,y=None,sample_weights=None,sample_weight_modes=None,batch_size=None,steps=None,shuffle=False,**kwargs)
keras.engine.data_adapter.CompositeTensorDataAdapter.batch_size(self)
keras.engine.data_adapter.CompositeTensorDataAdapter.can_handle(x,y=None)
keras.engine.data_adapter.CompositeTensorDataAdapter.get_dataset(self)
keras.engine.data_adapter.CompositeTensorDataAdapter.get_size(self)
keras.engine.data_adapter.CompositeTensorDataAdapter.has_partial_batch(self)
keras.engine.data_adapter.CompositeTensorDataAdapter.partial_batch_size(self)
keras.engine.data_adapter.CompositeTensorDataAdapter.should_recreate_iterator(self)
keras.engine.data_adapter.DataAdapter(self,x,y=None,**kwargs)
keras.engine.data_adapter.DataAdapter.__init__(self,x,y=None,**kwargs)
keras.engine.data_adapter.DataAdapter.batch_size(self)
keras.engine.data_adapter.DataAdapter.can_handle(x,y=None)
keras.engine.data_adapter.DataAdapter.get_dataset(self)
keras.engine.data_adapter.DataAdapter.get_samples(self)
keras.engine.data_adapter.DataAdapter.get_size(self)
keras.engine.data_adapter.DataAdapter.has_partial_batch(self)
keras.engine.data_adapter.DataAdapter.on_epoch_end(self)
keras.engine.data_adapter.DataAdapter.partial_batch_size(self)
keras.engine.data_adapter.DataAdapter.representative_batch_size(self)
keras.engine.data_adapter.DataAdapter.should_recreate_iterator(self)
keras.engine.data_adapter.DataHandler(self,x,y=None,sample_weight=None,batch_size=None,steps_per_epoch=None,initial_epoch=0,epochs=1,shuffle=False,class_weight=None,max_queue_size=10,workers=1,use_multiprocessing=False,model=None,steps_per_execution=None,distribute=True)
keras.engine.data_adapter.DataHandler.__init__(self,x,y=None,sample_weight=None,batch_size=None,steps_per_epoch=None,initial_epoch=0,epochs=1,shuffle=False,class_weight=None,max_queue_size=10,workers=1,use_multiprocessing=False,model=None,steps_per_execution=None,distribute=True)
keras.engine.data_adapter.DataHandler._configure_dataset_and_inferred_steps(self,strategy,x,steps_per_epoch,class_weight,distribute)
keras.engine.data_adapter.DataHandler._infer_steps(self,steps,dataset)
keras.engine.data_adapter.DataHandler._samples(self)
keras.engine.data_adapter.DataHandler._truncate_execution_to_epoch(self)
keras.engine.data_adapter.DataHandler._validate_data_handler(self)
keras.engine.data_adapter.DataHandler._verify_data_adapter_compatibility(self,adapter_cls)
keras.engine.data_adapter.DataHandler.catch_stop_iteration(self)
keras.engine.data_adapter.DataHandler.enumerate_epochs(self)
keras.engine.data_adapter.DataHandler.inferred_steps(self)
keras.engine.data_adapter.DataHandler.should_sync(self)
keras.engine.data_adapter.DataHandler.step_increment(self)
keras.engine.data_adapter.DataHandler.steps(self)
keras.engine.data_adapter.DataHandler.sync(self)
keras.engine.data_adapter.DatasetAdapter(self,x,y=None,sample_weights=None,steps=None,**kwargs)
keras.engine.data_adapter.DatasetAdapter.__init__(self,x,y=None,sample_weights=None,steps=None,**kwargs)
keras.engine.data_adapter.DatasetAdapter._validate_args(self,y,sample_weights,steps)
keras.engine.data_adapter.DatasetAdapter.batch_size(self)
keras.engine.data_adapter.DatasetAdapter.can_handle(x,y=None)
keras.engine.data_adapter.DatasetAdapter.get_dataset(self)
keras.engine.data_adapter.DatasetAdapter.get_size(self)
keras.engine.data_adapter.DatasetAdapter.has_partial_batch(self)
keras.engine.data_adapter.DatasetAdapter.partial_batch_size(self)
keras.engine.data_adapter.DatasetAdapter.should_recreate_iterator(self)
keras.engine.data_adapter.DatasetCreatorAdapter(self,x,y,steps=None,distribution_strategy=None,**kwargs)
keras.engine.data_adapter.DatasetCreatorAdapter.__init__(self,x,y,steps=None,distribution_strategy=None,**kwargs)
keras.engine.data_adapter.DatasetCreatorAdapter.batch_size(self)
keras.engine.data_adapter.DatasetCreatorAdapter.can_handle(x,y=None)
keras.engine.data_adapter.DatasetCreatorAdapter.get_dataset(self)
keras.engine.data_adapter.DatasetCreatorAdapter.get_size(self)
keras.engine.data_adapter.DatasetCreatorAdapter.has_partial_batch(self)
keras.engine.data_adapter.DatasetCreatorAdapter.partial_batch_size(self)
keras.engine.data_adapter.DatasetCreatorAdapter.should_recreate_iterator(self)
keras.engine.data_adapter.GeneratorDataAdapter(self,x,y=None,sample_weights=None,workers=1,use_multiprocessing=False,max_queue_size=10,model=None,**kwargs)
keras.engine.data_adapter.GeneratorDataAdapter.__init__(self,x,y=None,sample_weights=None,workers=1,use_multiprocessing=False,max_queue_size=10,model=None,**kwargs)
keras.engine.data_adapter.GeneratorDataAdapter._handle_multiprocessing(self,x,workers,use_multiprocessing,max_queue_size)
keras.engine.data_adapter.GeneratorDataAdapter._peek_and_restore(x)
keras.engine.data_adapter.GeneratorDataAdapter._standardize_batch(self,data)
keras.engine.data_adapter.GeneratorDataAdapter.batch_size(self)
keras.engine.data_adapter.GeneratorDataAdapter.can_handle(x,y=None)
keras.engine.data_adapter.GeneratorDataAdapter.get_dataset(self)
keras.engine.data_adapter.GeneratorDataAdapter.get_size(self)
keras.engine.data_adapter.GeneratorDataAdapter.has_partial_batch(self)
keras.engine.data_adapter.GeneratorDataAdapter.partial_batch_size(self)
keras.engine.data_adapter.GeneratorDataAdapter.representative_batch_size(self)
keras.engine.data_adapter.GeneratorDataAdapter.should_recreate_iterator(self)
keras.engine.data_adapter.GenericArrayLikeDataAdapter(self,*args,**kwargs)
keras.engine.data_adapter.GenericArrayLikeDataAdapter.__init__(self,*args,**kwargs)
keras.engine.data_adapter.GenericArrayLikeDataAdapter.can_handle(x,y=None)
keras.engine.data_adapter.GenericArrayLikeDataAdapter.slice_inputs(self,indices_dataset,inputs)
keras.engine.data_adapter.KerasSequenceAdapter(self,x,y=None,sample_weights=None,shuffle=False,workers=1,use_multiprocessing=False,max_queue_size=10,model=None,**kwargs)
keras.engine.data_adapter.KerasSequenceAdapter.__init__(self,x,y=None,sample_weights=None,shuffle=False,workers=1,use_multiprocessing=False,max_queue_size=10,model=None,**kwargs)
keras.engine.data_adapter.KerasSequenceAdapter._handle_multiprocessing(self,x,workers,use_multiprocessing,max_queue_size)
keras.engine.data_adapter.KerasSequenceAdapter._peek_and_restore(x)
keras.engine.data_adapter.KerasSequenceAdapter.can_handle(x,y=None)
keras.engine.data_adapter.KerasSequenceAdapter.get_size(self)
keras.engine.data_adapter.KerasSequenceAdapter.on_epoch_end(self)
keras.engine.data_adapter.KerasSequenceAdapter.should_recreate_iterator(self)
keras.engine.data_adapter.ListsOfScalarsDataAdapter(self,x,y=None,sample_weights=None,sample_weight_modes=None,batch_size=None,shuffle=False,**kwargs)
keras.engine.data_adapter.ListsOfScalarsDataAdapter.__init__(self,x,y=None,sample_weights=None,sample_weight_modes=None,batch_size=None,shuffle=False,**kwargs)
keras.engine.data_adapter.ListsOfScalarsDataAdapter._is_list_of_scalars(inp)
keras.engine.data_adapter.ListsOfScalarsDataAdapter.batch_size(self)
keras.engine.data_adapter.ListsOfScalarsDataAdapter.can_handle(x,y=None)
keras.engine.data_adapter.ListsOfScalarsDataAdapter.get_dataset(self)
keras.engine.data_adapter.ListsOfScalarsDataAdapter.get_size(self)
keras.engine.data_adapter.ListsOfScalarsDataAdapter.has_partial_batch(self)
keras.engine.data_adapter.ListsOfScalarsDataAdapter.partial_batch_size(self)
keras.engine.data_adapter.ListsOfScalarsDataAdapter.should_recreate_iterator(self)
keras.engine.data_adapter.TensorLikeDataAdapter(self,x,y=None,sample_weights=None,sample_weight_modes=None,batch_size=None,epochs=1,steps=None,shuffle=False,**kwargs)
keras.engine.data_adapter.TensorLikeDataAdapter.__init__(self,x,y=None,sample_weights=None,sample_weight_modes=None,batch_size=None,epochs=1,steps=None,shuffle=False,**kwargs)
keras.engine.data_adapter.TensorLikeDataAdapter.batch_size(self)
keras.engine.data_adapter.TensorLikeDataAdapter.can_handle(x,y=None)
keras.engine.data_adapter.TensorLikeDataAdapter.get_dataset(self)
keras.engine.data_adapter.TensorLikeDataAdapter.get_size(self)
keras.engine.data_adapter.TensorLikeDataAdapter.has_partial_batch(self)
keras.engine.data_adapter.TensorLikeDataAdapter.partial_batch_size(self)
keras.engine.data_adapter.TensorLikeDataAdapter.should_recreate_iterator(self)
keras.engine.data_adapter.TensorLikeDataAdapter.slice_inputs(self,indices_dataset,inputs)
keras.engine.data_adapter._ClusterCoordinatorDataHandler(DataHandler)
keras.engine.data_adapter._ClusterCoordinatorDataHandler._configure_dataset_and_inferred_steps(self,strategy,x,steps_per_epoch,class_weight,distribute)
keras.engine.data_adapter._ClusterCoordinatorDataHandler._verify_data_adapter_compatibility(self,adapter_cls)
keras.engine.data_adapter._ClusterCoordinatorDataHandler.sync(self)
keras.engine.data_adapter._check_data_cardinality(data)
keras.engine.data_adapter._get_tensor_types()
keras.engine.data_adapter._is_distributed_dataset(ds)
keras.engine.data_adapter._is_scipy_sparse(x)
keras.engine.data_adapter._make_class_weight_map_fn(class_weight)
keras.engine.data_adapter._process_tensorlike(inputs)
keras.engine.data_adapter._scipy_sparse_to_sparse_tensor(t)
keras.engine.data_adapter._type_name(x)
keras.engine.data_adapter.broadcast_sample_weight_modes(target_structure,sample_weight_modes)
keras.engine.data_adapter.expand_1d(data)
keras.engine.data_adapter.get_data_handler(*args,**kwargs)
keras.engine.data_adapter.is_none_or_empty(inputs)
keras.engine.data_adapter.pack_x_y_sample_weight(x,y=None,sample_weight=None)
keras.engine.data_adapter.select_data_adapter(x,y)
keras.engine.data_adapter.single_batch_iterator(strategy,x,y=None,sample_weight=None,class_weight=None)
keras.engine.data_adapter.train_validation_split(arrays,validation_split)
keras.engine.data_adapter.unpack_x_y_sample_weight(data)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/training_utils_v1.py----------------------------------------
A:keras.engine.training_utils_v1.max_dim0_value->max(max_dim0_value, index[0])
A:keras.engine.training_utils_v1.new_indices->numpy.append(new_indices, [index], axis=0)
A:keras.engine.training_utils_v1.new_values->numpy.concatenate((target.values, to_append.values), axis=0)
A:keras.engine.training_utils_v1.new_dense_shape->tuple(new_dense_shape)
A:keras.engine.training_utils_v1.new_row_splits->numpy.append(target.row_splits, adjusted_row_splits)
A:keras.engine.training_utils_v1.self.composite->is_composite_or_composite_value(batch_element)
A:keras.engine.training_utils_v1.results->_append_composite_tensor(results, r)
A:keras.engine.training_utils_v1.self.results->tensorflow.compat.v2.nest.pack_sequence_as(self._structure, self.results)
A:keras.engine.training_utils_v1._COPY_POOL->multiprocessing.pool.ThreadPool(_COPY_THREADS)
A:keras.engine.training_utils_v1.self._pool->get_copy_pool()
A:keras.engine.training_utils_v1.num_elements->numpy.prod(batch_element.shape)
A:keras.engine.training_utils_v1.is_finished->threading.Event()
A:keras.engine.training_utils_v1.start_time->time.time()
A:keras.engine.training_utils_v1.timeout->max([0.0, self._MAX_COPY_SECONDS - (time.time() - start_time)])
A:keras.engine.training_utils_v1.self._structure->tensorflow.compat.v2.__internal__.nest.get_traverse_shallow_structure(lambda x: not is_composite_or_composite_value(x), batch_outs)
A:keras.engine.training_utils_v1.batch_outs->tensorflow.compat.v2.__internal__.nest.flatten_up_to(self._structure, batch_outs)
A:keras.engine.training_utils_v1.stateful_metric_names->getattr(model, 'metrics_names', None)
A:keras.engine.training_utils_v1.x->tensorflow.compat.v2.convert_to_tensor(x)
A:keras.engine.training_utils_v1.data_len->len(data)
A:keras.engine.training_utils_v1.data_shape->tuple(tensorshape.as_list())
A:keras.engine.training_utils_v1.tensorshape->get_composite_shape(data[i])
A:keras.engine.training_utils_v1.set_x->set_of_lengths(inputs)
A:keras.engine.training_utils_v1.set_y->set_of_lengths(targets)
A:keras.engine.training_utils_v1.set_w->set_of_lengths(weights)
A:keras.engine.training_utils_v1.is_loss_wrapper->isinstance(loss, losses.LossFunctionWrapper)
A:keras.engine.training_utils_v1.any_sub_list->any((isinstance(m, list) for m in metrics))
A:keras.engine.training_utils_v1.output_metrics->keras.utils.generic_utils.to_list(metrics.get(name, []))
A:keras.engine.training_utils_v1.metrics_dict->collections.OrderedDict()
A:keras.engine.training_utils_v1.metric_name->get_metric_name(metric, is_weighted)
A:keras.engine.training_utils_v1.metric_fn->keras.metrics.get(metric)
A:keras.engine.training_utils_v1.batch_count->int(len(index_array) / batch_size)
A:keras.engine.training_utils_v1.index_array->index_array.flatten().flatten()
A:keras.engine.training_utils_v1.keys->numpy.array(sorted(class_weight.keys()))
A:keras.engine.training_utils_v1.values->numpy.array([class_weight[i] for i in keys])
A:keras.engine.training_utils_v1.weight_vector->numpy.zeros(np.max(keys) + 1)
A:keras.engine.training_utils_v1.y_classes->numpy.reshape(y, y.shape[0])
A:keras.engine.training_utils_v1.class_sample_weight->numpy.asarray([class_weight[cls] for cls in y_classes if cls in class_weight])
A:keras.engine.training_utils_v1.sample_weight->tensorflow.compat.v2.cast(tf.convert_to_tensor(sample_weight), backend.floatx())
A:keras.engine.training_utils_v1.existing_classes->set(y_classes)
A:keras.engine.training_utils_v1.existing_class_weight->set(class_weight.keys())
A:keras.engine.training_utils_v1.metric->keras.metrics.get(metric)
A:keras.engine.training_utils_v1.mask->tensorflow.compat.v2.cast(mask, y_pred.dtype)
A:keras.engine.training_utils_v1.weights->tensorflow.compat.v2.cast(weights, dtype=y_pred.dtype)
A:keras.engine.training_utils_v1.(mask, _, weights)->keras.utils.losses_utils.squeeze_or_expand_dimensions(mask, sample_weight=weights)
A:keras.engine.training_utils_v1.loss->keras.losses.get(loss)
A:keras.engine.training_utils_v1.loss_fn->keras.losses.get(loss)
A:keras.engine.training_utils_v1.is_x_iterator->isinstance(input_data, (tf.compat.v1.data.Iterator, tf.data.Iterator))
A:keras.engine.training_utils_v1.target->tensorflow.compat.v2.convert_to_tensor(target)
A:keras.engine.training_utils_v1.input_dtypes->tensorflow.compat.v2.nest.map_structure(lambda t: t.dtype, model.inputs)
A:keras.engine.training_utils_v1.end_point.sample_weight_mode->sample_weight_mode.get(end_point.output_name)
A:keras.engine.training_utils_v1.loss_functions->tensorflow.compat.v2.nest.map_structure(get_loss_function, loss)
A:keras.engine.training_utils_v1.e.loss_weight->loss_weights.get(e.output_name, 1.0)
A:keras.engine.training_utils_v1.graph_def_str->keras.backend.get_value(dataset._as_serialized_graph())
A:keras.engine.training_utils_v1.graph_def->get_dataset_graph_def(x)
A:keras.engine.training_utils_v1.iterator->get_iterator(dataset)
A:keras.engine.training_utils_v1.(inputs, targets, sample_weight)->unpack_iterator_input(iterator)
A:keras.engine.training_utils_v1.next_element->get_iterator(dataset).get_next()
A:keras.engine.training_utils_v1.size->keras.backend.get_value(tf.data.experimental.cardinality(dataset))
A:keras.engine.training_utils_v1.self._is_dict->isinstance(self._inputs, dict)
A:keras.engine.training_utils_v1.self._flattened_inputs->tensorflow.compat.v2.nest.flatten(self._inputs)
A:keras.engine.training_utils_v1.v->keras.backend.placeholder(shape=shape, name=k, dtype=v.dtype)
A:keras.engine.training_utils_v1.dtype->keras.backend.floatx()
A:keras.engine.training_utils_v1.split_at->int(len(x[0]) * (1.0 - validation_split))
keras.engine.training_utils_v1.Aggregator(self,use_steps,num_samples=None,steps=None,batch_size=None)
keras.engine.training_utils_v1.Aggregator.__init__(self,use_steps,num_samples=None,steps=None,batch_size=None)
keras.engine.training_utils_v1.Aggregator.aggregate(self,batch_outs,batch_start=None,batch_end=None)
keras.engine.training_utils_v1.Aggregator.create(self,batch_outs)
keras.engine.training_utils_v1.Aggregator.finalize(self)
keras.engine.training_utils_v1.ConcatAggregator(self,batch_size)
keras.engine.training_utils_v1.ConcatAggregator.__init__(self,batch_size)
keras.engine.training_utils_v1.ConcatAggregator.aggregate(self,batch_element,batch_start=None,batch_end=None)
keras.engine.training_utils_v1.ConcatAggregator.create(self,batch_element)
keras.engine.training_utils_v1.ConcatAggregator.finalize(self)
keras.engine.training_utils_v1.MetricsAggregator(self,use_steps,num_samples=None,steps=None)
keras.engine.training_utils_v1.MetricsAggregator.__init__(self,use_steps,num_samples=None,steps=None)
keras.engine.training_utils_v1.MetricsAggregator.aggregate(self,batch_outs,batch_start=None,batch_end=None)
keras.engine.training_utils_v1.MetricsAggregator.create(self,batch_outs)
keras.engine.training_utils_v1.MetricsAggregator.finalize(self)
keras.engine.training_utils_v1.ModelInputs(self,inputs)
keras.engine.training_utils_v1.ModelInputs.__init__(self,inputs)
keras.engine.training_utils_v1.ModelInputs.as_dict(self)
keras.engine.training_utils_v1.ModelInputs.as_list(self)
keras.engine.training_utils_v1.ModelInputs.get_input_names(self)
keras.engine.training_utils_v1.ModelInputs.get_symbolic_inputs(self,return_single_as_list=False)
keras.engine.training_utils_v1.OutputsAggregator(Aggregator)
keras.engine.training_utils_v1.OutputsAggregator.aggregate(self,batch_outs,batch_start=None,batch_end=None)
keras.engine.training_utils_v1.OutputsAggregator.create(self,batch_outs)
keras.engine.training_utils_v1.OutputsAggregator.finalize(self)
keras.engine.training_utils_v1.SliceAggregator(self,num_samples,batch_size)
keras.engine.training_utils_v1.SliceAggregator.__init__(self,num_samples,batch_size)
keras.engine.training_utils_v1.SliceAggregator._slice_assign(self,batch_element,batch_start,batch_end,is_finished)
keras.engine.training_utils_v1.SliceAggregator.aggregate(self,batch_element,batch_start,batch_end)
keras.engine.training_utils_v1.SliceAggregator.create(self,batch_element)
keras.engine.training_utils_v1.SliceAggregator.finalize(self)
keras.engine.training_utils_v1.TrainingLoop(object)
keras.engine.training_utils_v1.TrainingLoop.evaluate(self,model,x=None,y=None,batch_size=None,verbose=1,sample_weight=None,steps=None,callbacks=None,**kwargs)
keras.engine.training_utils_v1.TrainingLoop.fit(self,model,x=None,y=None,batch_size=None,epochs=1,verbose=1,callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None,validation_freq=1,**kwargs)
keras.engine.training_utils_v1.TrainingLoop.predict(self,model,x,batch_size=None,verbose=0,steps=None,callbacks=None,**kwargs)
keras.engine.training_utils_v1._append_composite_tensor(target,to_append)
keras.engine.training_utils_v1._append_ragged_tensor_value(target,to_append)
keras.engine.training_utils_v1._append_sparse_tensor_value(target,to_append)
keras.engine.training_utils_v1.batch_shuffle(index_array,batch_size)
keras.engine.training_utils_v1.call_metric_function(metric_fn,y_true,y_pred=None,weights=None,mask=None)
keras.engine.training_utils_v1.cast_if_floating_dtype(x,dtype=None)
keras.engine.training_utils_v1.cast_if_floating_dtype_and_mismatch(targets,outputs)
keras.engine.training_utils_v1.cast_single_tensor(x,dtype=None)
keras.engine.training_utils_v1.cast_to_model_input_dtypes(x,model)
keras.engine.training_utils_v1.check_array_lengths(inputs,targets,weights=None)
keras.engine.training_utils_v1.check_generator_arguments(y=None,sample_weight=None,validation_split=None)
keras.engine.training_utils_v1.check_loss_and_target_compatibility(targets,loss_fns,output_shapes)
keras.engine.training_utils_v1.check_num_samples(ins,batch_size=None,steps=None,steps_name='steps')
keras.engine.training_utils_v1.check_steps_argument(input_data,steps,steps_name)
keras.engine.training_utils_v1.collect_per_output_metric_info(metrics,output_names,output_shapes,loss_fns,from_serialized=False,is_weighted=False)
keras.engine.training_utils_v1.extract_tensors_from_dataset(dataset)
keras.engine.training_utils_v1.generic_output_names(outputs_list)
keras.engine.training_utils_v1.get_composite_shape(tensor)
keras.engine.training_utils_v1.get_copy_pool()
keras.engine.training_utils_v1.get_dataset_graph_def(dataset)
keras.engine.training_utils_v1.get_iterator(dataset)
keras.engine.training_utils_v1.get_loss_function(loss)
keras.engine.training_utils_v1.get_metric_function(metric,output_shape=None,loss_fn=None)
keras.engine.training_utils_v1.get_metric_name(metric,weighted=False)
keras.engine.training_utils_v1.get_progbar(model,count_mode,include_metrics=True)
keras.engine.training_utils_v1.has_symbolic_tensors(ls)
keras.engine.training_utils_v1.has_tensors(ls)
keras.engine.training_utils_v1.infer_steps_for_dataset(model,dataset,steps,epochs=1,steps_name='steps')
keras.engine.training_utils_v1.initialize_iterator(iterator)
keras.engine.training_utils_v1.is_composite_or_composite_value(tensor)
keras.engine.training_utils_v1.is_dataset_or_iterator(data)
keras.engine.training_utils_v1.is_eager_dataset_or_iterator(data)
keras.engine.training_utils_v1.is_feature_layer(layer)
keras.engine.training_utils_v1.prepare_loss_functions(loss,output_names)
keras.engine.training_utils_v1.prepare_loss_weights(training_endpoints,loss_weights=None)
keras.engine.training_utils_v1.prepare_sample_weight_modes(training_endpoints,sample_weight_mode)
keras.engine.training_utils_v1.should_run_validation(validation_freq,epoch)
keras.engine.training_utils_v1.split_training_and_validation_data(x,y,sample_weights,validation_split)
keras.engine.training_utils_v1.standardize_class_weights(class_weight,output_names)
keras.engine.training_utils_v1.standardize_input_data(data,names,shapes=None,check_batch_axis=True,exception_prefix='')
keras.engine.training_utils_v1.standardize_sample_or_class_weights(x_weight,output_names,weight_type)
keras.engine.training_utils_v1.standardize_sample_weights(sample_weight,output_names)
keras.engine.training_utils_v1.standardize_single_array(x,expected_shape=None)
keras.engine.training_utils_v1.standardize_weights(y,sample_weight=None,class_weight=None,sample_weight_mode=None)
keras.engine.training_utils_v1.unpack_iterator_input(iterator)
keras.engine.training_utils_v1.unpack_validation_data(validation_data,raise_if_ambiguous=True)
keras.engine.training_utils_v1.validate_dataset_input(x,y,sample_weight,validation_split=None)
keras.engine.training_utils_v1.validate_input_types(inp,orig_inp,allow_dict=True,field_name='inputs')
keras.engine.training_utils_v1.verify_dataset_shuffled(x)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/training_eager_v1.py----------------------------------------
A:keras.engine.training_eager_v1.loss->loss_fn(targets, outputs)
A:keras.engine.training_eager_v1.outputs->tensorflow.compat.v2.nest.flatten(outputs)
A:keras.engine.training_eager_v1.targets->tensorflow.compat.v2.nest.flatten(targets)
A:keras.engine.training_eager_v1.metric_results->model._handle_metrics(outputs, targets=targets, sample_weights=sample_weights, masks=masks, return_weighted_and_unweighted_metrics=True, skip_target_masks=model._prepare_skip_target_masks())
A:keras.engine.training_eager_v1.inputs->keras.engine.training_utils_v1.cast_to_model_input_dtypes(inputs, model)
A:keras.engine.training_eager_v1.outs->tensorflow.compat.v2.nest.flatten(outs)
A:keras.engine.training_eager_v1.mask->tensorflow.compat.v2.cast(mask, outs[i].dtype)
A:keras.engine.training_eager_v1.weights->tensorflow.compat.v2.cast(weights, outs[i].dtype)
A:keras.engine.training_eager_v1.(mask, _, weights)->keras.utils.losses_utils.squeeze_or_expand_dimensions(mask, sample_weight=weights)
A:keras.engine.training_eager_v1.per_sample_losses->loss_fn.call(targets[i], outs[i])
A:keras.engine.training_eager_v1.weighted_losses->keras.utils.losses_utils.compute_weighted_loss(per_sample_losses, sample_weight=weights, reduction=losses_utils.ReductionV2.NONE)
A:keras.engine.training_eager_v1.output_loss->keras.utils.losses_utils.scale_loss_for_distribution(output_loss)
A:keras.engine.training_eager_v1.(outs, total_loss, output_losses, masks)->_model_loss(model, inputs, targets, sample_weights=sample_weights, training=False, output_loss_metrics=output_loss_metrics)
A:keras.engine.training_eager_v1.scaled_total_loss->model.optimizer.get_scaled_loss(total_loss)
A:keras.engine.training_eager_v1.grads->model.optimizer.get_unscaled_gradients(grads)
A:keras.engine.training_eager_v1.metrics_results->_eager_metrics_fn(model, outs, targets, sample_weights=sample_weights, masks=masks)
A:keras.engine.training_eager_v1.total_loss->tensorflow.compat.v2.nest.flatten(total_loss)
keras.engine.training_eager_v1._eager_loss_fn(outputs,targets,loss_fn,output_name)
keras.engine.training_eager_v1._eager_metrics_fn(model,outputs,targets,sample_weights=None,masks=None)
keras.engine.training_eager_v1._model_loss(model,inputs,targets,output_loss_metrics=None,sample_weights=None,training=False)
keras.engine.training_eager_v1._process_single_batch(model,inputs,targets,output_loss_metrics=None,sample_weights=None,training=False)
keras.engine.training_eager_v1.test_on_batch(model,inputs,targets,sample_weights=None,output_loss_metrics=None)
keras.engine.training_eager_v1.train_on_batch(model,inputs,targets,sample_weights=None,output_loss_metrics=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/base_layer.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/training_distributed_v1.py----------------------------------------
A:keras.engine.training_distributed_v1.exec_func->model._make_execution_function(mode)
A:keras.engine.training_distributed_v1.(grouped_inputs, grouped_outputs, grouped_updates, grouped_session_args)->strategy.extended.call_for_each_replica(_per_replica_execution_function, args=(dist_utils.get_distributed_model(model, mode), mode))
A:keras.engine.training_distributed_v1.(all_inputs, all_outputs, all_updates, all_session_args)->keras.distribute.distributed_training_utils_v1.unwrap_values(strategy, grouped_inputs, grouped_outputs, grouped_updates, grouped_session_args)
A:keras.engine.training_distributed_v1.combined_fn->keras.backend.function(all_inputs, all_outputs, updates=all_updates, name='distributed_' + str(mode) + '_function', **all_session_args)
A:keras.engine.training_distributed_v1.iteration_value->min(steps_per_epoch, current_strategy.extended.steps_per_run)
A:keras.engine.training_distributed_v1.steps_per_run->keras.backend.variable(value=iteration_value, dtype='int32', name='steps_per_run')
A:keras.engine.training_distributed_v1.iterator->keras.distribute.distributed_training_utils_v1.get_iterator(dataset, current_strategy)
A:keras.engine.training_distributed_v1.scope->keras.distribute.distributed_training_utils_v1.distributed_scope(strategy=current_strategy, learning_phase=0)
A:keras.engine.training_distributed_v1.step_fn->_make_train_step_fn(model, ModeKeys.TRAIN, current_strategy, out_labels)
A:keras.engine.training_distributed_v1.initial_loop_values['loss']->tensorflow.compat.v2.constant(10000000.0)
A:keras.engine.training_distributed_v1.tensor->m.result()
A:keras.engine.training_distributed_v1.initial_loop_values[m.name]->tensorflow.compat.v2.zeros(tensor.shape, tensor.dtype)
A:keras.engine.training_distributed_v1.ctx->current_strategy.extended.experimental_run_steps_on_iterator(step_fn, iterator, iterations=steps_per_run, initial_loop_values=initial_loop_values)
A:keras.engine.training_distributed_v1.do_validation->bool(validation_steps)
A:keras.engine.training_distributed_v1.callbacks->kwargs.pop('callbacks', None)
A:keras.engine.training_distributed_v1.target_steps->len(steps_to_run)
A:keras.engine.training_distributed_v1.initial_epoch->model._maybe_load_initial_epoch_from_ckpt(initial_epoch, mode)
A:keras.engine.training_distributed_v1.(_, outputs)->keras.backend.batch_get_value([train_op, output_tensors])
A:keras.engine.training_distributed_v1.val_outs->experimental_tpu_test_loop(model, val_dataset, steps=validation_steps, verbose=verbose, callbacks=callbacks)
A:keras.engine.training_distributed_v1.(_, outputs, updates, _)->_per_replica_execution_function(dist_utils.get_distributed_model(model, mode), mode)
A:keras.engine.training_distributed_v1.test_input_data->keras.distribute.distributed_training_utils_v1.get_iterator(dataset, current_strategy).get_next()
A:keras.engine.training_distributed_v1.per_replica_outputs->current_strategy.run(_predict_step_fn, args=(predict_input_data,))
A:keras.engine.training_distributed_v1.output_tensors[label]->current_strategy.reduce(reduce_op, output, axis=None)
A:keras.engine.training_distributed_v1.test_op->tensorflow.compat.v2.group(list(output_tensors.values()))
A:keras.engine.training_distributed_v1.progbar->Progbar(target=steps)
A:keras.engine.training_distributed_v1.(_, batch_outs)->keras.backend.batch_get_value([predict_ops, output_tensors])
A:keras.engine.training_distributed_v1.warning_msg->'Make sure that your dataset can generate at least `steps` batches (in this case, {} batches).'.format(steps)
A:keras.engine.training_distributed_v1.batch_logs->keras.callbacks.make_logs(model, batch_logs, batch_outs, mode)
A:keras.engine.training_distributed_v1.dataset_fully_shaped->keras.distribute.distributed_training_utils_v1.is_dataset_shape_fully_defined(dataset)
A:keras.engine.training_distributed_v1.padding_handler->keras.engine.partial_batch_padding_handler.PartialBatchPaddingHandler(model._feed_output_shapes)
A:keras.engine.training_distributed_v1.(batch_size, _, prefetch_buffer)->tensorflow.python.distribute.input_lib._get_dataset_attributes(dataset)
A:keras.engine.training_distributed_v1.padding_handler.padding_mask->model._distribution_standardize_user_data(x, batch_size=batch_size, allow_partial_batch=True).reduce(padding_handler.padding_mask, padding_handler.update_mask)
A:keras.engine.training_distributed_v1.dataset->model._distribution_standardize_user_data(x, batch_size=batch_size, allow_partial_batch=True)
A:keras.engine.training_distributed_v1.predict_input_data->keras.distribute.distributed_training_utils_v1.get_iterator(dataset, current_strategy).get_next()
A:keras.engine.training_distributed_v1.output_tensors->keras.distribute.distributed_training_utils_v1.flatten_per_replica_values(current_strategy, per_replica_outputs)
A:keras.engine.training_distributed_v1.num_model_outputs->len(model.output_names)
A:keras.engine.training_distributed_v1.predict_ops->tensorflow.compat.v2.group(output_tensors)
A:keras.engine.training_distributed_v1.prediction_result->keras.engine.partial_batch_padding_handler.PartialBatchPaddingHandler(model._feed_output_shapes).apply_mask(prediction_result)
A:keras.engine.training_distributed_v1.(batch_size, steps_per_epoch)->keras.distribute.distributed_training_utils_v1.process_batch_and_step_size(model._distribution_strategy, x, batch_size, steps_per_epoch, ModeKeys.TRAIN, validation_split=validation_split)
A:keras.engine.training_distributed_v1.batch_size->model._validate_or_infer_batch_size(batch_size, steps, x)
A:keras.engine.training_distributed_v1.(dataset, _, _)->model._standardize_user_data(dataset, sample_weight=sample_weight, class_weight=class_weight, batch_size=batch_size, validation_split=validation_split, shuffle=shuffle)
A:keras.engine.training_distributed_v1.(val_x, val_y, val_sample_weights)->keras.engine.training_utils_v1.unpack_validation_data(validation_data)
A:keras.engine.training_distributed_v1.(_, validation_steps)->keras.distribute.distributed_training_utils_v1.process_batch_and_step_size(model._distribution_strategy, val_x, batch_size, validation_steps, ModeKeys.TEST)
A:keras.engine.training_distributed_v1.val_dataset->model._distribution_standardize_user_data(val_x, val_y, sample_weight=val_sample_weights, class_weight=None, batch_size=batch_size, validation_split=validation_split, shuffle=shuffle, allow_partial_batch=True)
A:keras.engine.training_distributed_v1.steps_per_epoch->keras.engine.training_utils_v1.infer_steps_for_dataset(model, dataset, steps_per_epoch, epochs, steps_name='steps_per_epoch')
A:keras.engine.training_distributed_v1.(batch_size, steps)->keras.distribute.distributed_training_utils_v1.process_batch_and_step_size(model._distribution_strategy, x, batch_size, steps, ModeKeys.PREDICT)
A:keras.engine.training_distributed_v1.steps->keras.engine.training_utils_v1.infer_steps_for_dataset(model, dataset, steps, steps_name='steps')
A:keras.engine.training_distributed_v1.filtered_callbacks->keras.distribute.distributed_training_utils_v1.filter_distributed_callbacks(callbacks, model)
keras.engine.training_distributed_v1.DistributionMultiWorkerTrainingLoop(self,single_worker_loop)
keras.engine.training_distributed_v1.DistributionMultiWorkerTrainingLoop.__init__(self,single_worker_loop)
keras.engine.training_distributed_v1.DistributionMultiWorkerTrainingLoop.evaluate(self,*args,**kwargs)
keras.engine.training_distributed_v1.DistributionMultiWorkerTrainingLoop.fit(self,*args,**kwargs)
keras.engine.training_distributed_v1.DistributionMultiWorkerTrainingLoop.predict(self,*args,**kwargs)
keras.engine.training_distributed_v1.DistributionSingleWorkerTrainingLoop(training_utils_v1.TrainingLoop)
keras.engine.training_distributed_v1.DistributionSingleWorkerTrainingLoop.evaluate(self,model,x=None,y=None,batch_size=None,verbose=1,sample_weight=None,steps=None,callbacks=None,**kwargs)
keras.engine.training_distributed_v1.DistributionSingleWorkerTrainingLoop.fit(self,model,x=None,y=None,batch_size=None,epochs=1,verbose=1,callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None,validation_freq=1,**kwargs)
keras.engine.training_distributed_v1.DistributionSingleWorkerTrainingLoop.predict(self,model,x,batch_size=None,verbose=0,steps=None,callbacks=None,**kwargs)
keras.engine.training_distributed_v1._build_model(strategy,model,mode,inputs,targets=None)
keras.engine.training_distributed_v1._make_train_step_fn(model,mode,strategy,output_labels)
keras.engine.training_distributed_v1._per_replica_execution_function(model,mode)
keras.engine.training_distributed_v1._train_with_multi_worker(method)
keras.engine.training_distributed_v1.experimental_tpu_fit_loop(model,dataset,epochs=100,verbose=1,callbacks=None,initial_epoch=0,steps_per_epoch=None,val_dataset=None,validation_steps=None,validation_freq=1)
keras.engine.training_distributed_v1.experimental_tpu_predict_loop(model,dataset,verbose=0,steps=None,callbacks=None)
keras.engine.training_distributed_v1.experimental_tpu_test_loop(model,dataset,verbose=0,steps=None,callbacks=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/training_v1.py----------------------------------------
A:keras.engine.training_v1.self._experimental_run_tf_function->getattr(self, '_function_kwargs', {}).pop('experimental_run_tf_function', True)
A:keras.engine.training_v1.self._run_eagerly->getattr(self, '_function_kwargs', {}).pop('run_eagerly', None)
A:keras.engine.training_v1.self._from_serialized->getattr(self, '_function_kwargs', {}).pop('from_serialized', False)
A:keras.engine.training_v1.is_any_keras_optimizer_v1->any((isinstance(opt, optimizer_v1.Optimizer) and (not isinstance(opt, optimizer_v1.TFOptimizer)) for opt in tf.nest.flatten(self.optimizer)))
A:keras.engine.training_v1.self._distribution_strategy->tensorflow.compat.v2.distribute.get_strategy()
A:keras.engine.training_v1.self._compiled_trainable_state->self._get_trainable_state()
A:keras.engine.training_v1.self.loss_functions->keras.engine.training_utils_v1.prepare_loss_functions(self.loss, self.output_names)
A:keras.engine.training_v1.target_tensors->self._process_target_tensor_for_compile(target_tensors)
A:keras.engine.training_v1.endpoint->_TrainingEndpoint(o, n, l)
A:keras.engine.training_v1.epochs->getattr(self, '_function_kwargs', {}).pop('nb_epoch')
A:keras.engine.training_v1.func->self._select_training_loop(x)
A:keras.engine.training_v1.metrics->self._get_training_eval_metrics()
A:keras.engine.training_v1.(x, y, sample_weights)->self._standardize_user_data(x, y, sample_weight=sample_weight, extract_tensors_from_dataset=True)
A:keras.engine.training_v1.output_dict->keras.engine.training_eager_v1.test_on_batch(self, x, y, sample_weights=sample_weights, output_loss_metrics=self._output_loss_metrics)
A:keras.engine.training_v1.x->dict(zip(feed_input_names, x))
A:keras.engine.training_v1.outputs->tensorflow.compat.v2.nest.flatten(outputs)
A:keras.engine.training_v1.(inputs, _, _)->self._standardize_user_data(x, extract_tensors_from_dataset=True)
A:keras.engine.training_v1.inputs->keras.engine.training_utils_v1.ModelInputs(inputs).get_symbolic_inputs()
A:keras.engine.training_v1.self.optimizer->keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizerV1(self.optimizer, loss_scale)
A:keras.engine.training_v1.(val_x, val_y, val_sample_weights)->keras.engine.training_utils_v1.unpack_validation_data(validation_data)
A:keras.engine.training_v1.unexpected_target_tensor_names->set(target_tensors.keys()).difference(self.output_names)
A:keras.engine.training_v1.recompile->any((e.sample_weights_mismatch() for e in self._training_endpoints))
A:keras.engine.training_v1.masks->self._prepare_output_masks()
A:keras.engine.training_v1.self.total_loss->self._prepare_total_loss(masks)
A:keras.engine.training_v1.loss_name->_TrainingEndpoint(o, n, l).loss_name()
A:keras.engine.training_v1.mask->tensorflow.compat.v2.cast(mask, y_pred.dtype)
A:keras.engine.training_v1.(mask, _, sample_weight)->keras.utils.losses_utils.squeeze_or_expand_dimensions(mask, sample_weight=sample_weight)
A:keras.engine.training_v1.per_sample_losses->loss_fn.call(y_true, y_pred)
A:keras.engine.training_v1.weighted_losses->keras.utils.losses_utils.compute_weighted_loss(per_sample_losses, sample_weight=sample_weight, reduction=losses_utils.ReductionV2.NONE)
A:keras.engine.training_v1.output_loss->keras.utils.losses_utils.scale_loss_for_distribution(output_loss)
A:keras.engine.training_v1.total_custom_loss->tensorflow.compat.v2.add_n(losses_utils.cast_losses_to_common_dtype(custom_losses))
A:keras.engine.training_v1.loss_list->keras.utils.losses_utils.cast_losses_to_common_dtype(loss_list)
A:keras.engine.training_v1.total_loss->tensorflow.compat.v2.add_n(loss_list)
A:keras.engine.training_v1.self._replicated_model->DistributedCallbackModel(first_replicated_model)
A:keras.engine.training_v1.layers->keras.utils.layer_utils.filter_empty_layer_containers(layers)
A:keras.engine.training_v1.first_layer->next(layers, None)
A:keras.engine.training_v1.static_batch_size->keras.engine.training_utils.get_static_batch_size(first_layer)
A:keras.engine.training_v1.self._per_output_metrics->keras.engine.training_utils_v1.collect_per_output_metric_info(metrics, self.output_names, output_shapes, self.loss_functions, from_serialized=self._from_serialized)
A:keras.engine.training_v1.self._per_output_weighted_metrics->keras.engine.training_utils_v1.collect_per_output_metric_info(weighted_metrics, self.output_names, output_shapes, self.loss_functions, from_serialized=self._from_serialized, is_weighted=True)
A:keras.engine.training_v1.updated_metrics_dict->collections.OrderedDict()
A:keras.engine.training_v1.metric_name->self._add_unique_metric_name(metric_name, metric_fn, output_index)
A:keras.engine.training_v1.endpoint.output_loss_metric->keras.metrics.Mean(name=endpoint.loss_name())
A:keras.engine.training_v1.metric_result->keras.engine.training_utils_v1.call_metric_function(metric_fn, y_true, y_pred, weights=weights, mask=mask)
A:keras.engine.training_v1.has_recompiled->self._recompile_weights_loss_and_weighted_metrics()
A:keras.engine.training_v1.current_trainable_state->self._get_trainable_state()
A:keras.engine.training_v1.updates->self.optimizer.get_updates(params=self._collected_trainable_weights, loss=self.total_loss)
A:keras.engine.training_v1.fn->keras.backend.function(inputs, [self.total_loss] + metrics_tensors, updates=updates, name='test_function', **self._function_kwargs)
A:keras.engine.training_v1.kwargs->getattr(self, '_function_kwargs', {})
A:keras.engine.training_v1.self.predict_function->keras.backend.function(inputs, self.outputs, updates=self.state_updates, name='predict_function', **kwargs)
A:keras.engine.training_v1.session->keras.backend.get_session()
A:keras.engine.training_v1.y->keras.engine.training_utils_v1.standardize_input_data(y, feed_output_names, shapes=None, check_batch_axis=False, exception_prefix='target')
A:keras.engine.training_v1.sample_weight->keras.engine.training_utils.list_to_tuple(sample_weight)
A:keras.engine.training_v1.ds->ds.repeat(epochs).repeat(epochs)
A:keras.engine.training_v1.(x, y, sample_weight)->keras.engine.training_utils_v1.unpack_iterator_input(iterator)
A:keras.engine.training_v1.(all_inputs, y_input, dict_inputs)->self._build_model_with_inputs(x, y)
A:keras.engine.training_v1.dict_inputs->isinstance(self.inputs, dict)
A:keras.engine.training_v1.x_shapes->tensorflow.compat.v2.nest.map_structure(_type_spec_from_value, x)
A:keras.engine.training_v1.flat_inputs->tensorflow.compat.v2.nest.flatten(x_shapes, expand_composites=False)
A:keras.engine.training_v1.flat_expected_inputs->tensorflow.compat.v2.nest.flatten(self.inputs, expand_composites=False)
A:keras.engine.training_v1.sample_weights->keras.engine.training_utils_v1.standardize_sample_weights(sample_weight, feed_output_names)
A:keras.engine.training_v1.class_weights->keras.engine.training_utils_v1.standardize_class_weights(class_weight, feed_output_names)
A:keras.engine.training_v1.(sample_weights, _, _)->keras.engine.training_utils.handle_partial_sample_weights(y, sample_weights, feed_sample_weight_modes, check_all_flat=True)
A:keras.engine.training_v1.(inputs, targets, _)->keras.engine.training_utils_v1.extract_tensors_from_dataset(inputs)
A:keras.engine.training_v1.keys->sorted(inputs.keys())
A:keras.engine.training_v1.cast_inputs->keras.engine.training_utils_v1.cast_if_floating_dtype(inputs)
A:keras.engine.training_v1.target->keras.backend.placeholder(ndim=len(self.shape), name=self.output_name + '_target', sparse=backend.is_sparse(self.output), dtype=target_dtype)
A:keras.engine.training_v1.is_dataset->isinstance(orig_inputs, (tf.compat.v1.data.Dataset, tf.data.Dataset, tf.compat.v1.data.Iterator))
A:keras.engine.training_v1.training->keras.backend.learning_phase()
A:keras.engine.training_v1.model_inputs->keras.engine.training_utils_v1.ModelInputs(inputs)
A:keras.engine.training_v1.self.inputs->keras.engine.training_utils_v1.ModelInputs(inputs).get_symbolic_inputs(return_single_as_list=True)
A:keras.engine.training_v1.self.input_names->keras.engine.training_utils_v1.ModelInputs(inputs).get_input_names()
A:keras.engine.training_v1.self.output_names->keras.engine.training_utils_v1.generic_output_names(outputs)
A:keras.engine.training_v1.strategy->tensorflow.compat.v2.distribute.get_strategy()
A:keras.engine.training_v1.distributed_model_weights->self.get_weights()
A:keras.engine.training_v1.orig_model_weights->self._original_model.get_weights()
A:keras.engine.training_v1.self.training_target->_TrainingTarget(target, feedable=feedable, skip_target_weights=skip_target_weights)
A:keras.engine.training_v1.target_dtype->keras.losses.LABEL_DTYPES_FOR_LOSSES.get(self.loss_fn, backend.dtype(self.output))
A:keras.engine.training_v1.self._sample_weight->tensorflow.compat.v2.compat.v1.placeholder_with_default(tf.constant(default_value, dtype=backend.floatx()), shape=shape, name=self.output_name + '_sample_weights')
A:keras.engine.training_v1.sparse_coo->value.tocoo()
A:keras.engine.training_v1.indices->numpy.concatenate((np.expand_dims(row, 1), np.expand_dims(col, 1)), 1)
A:keras.engine.training_v1.constant_value->tensorflow.compat.v2.get_static_value(v)
keras.engine.training_v1.DistributedCallbackModel(self,model)
keras.engine.training_v1.DistributedCallbackModel.__getattr__(self,item)
keras.engine.training_v1.DistributedCallbackModel.__init__(self,model)
keras.engine.training_v1.DistributedCallbackModel.load_weights(self,filepath,by_name=False)
keras.engine.training_v1.DistributedCallbackModel.save(self,filepath,overwrite=True,include_optimizer=True)
keras.engine.training_v1.DistributedCallbackModel.save_weights(self,filepath,overwrite=True,save_format=None)
keras.engine.training_v1.DistributedCallbackModel.set_original_model(self,orig_model)
keras.engine.training_v1.Model(self,*args,**kwargs)
keras.engine.training_v1.Model.__init__(self,*args,**kwargs)
keras.engine.training_v1.Model._add_unique_metric_name(self,metric_name,metric_fn,output_index)
keras.engine.training_v1.Model._assert_compile_was_called(self)
keras.engine.training_v1.Model._build_model_with_inputs(self,inputs,targets)
keras.engine.training_v1.Model._cache_output_metric_attributes(self,metrics,weighted_metrics)
keras.engine.training_v1.Model._check_call_args(self,method_name)
keras.engine.training_v1.Model._check_trainable_weights_consistency(self)
keras.engine.training_v1.Model._compile_eagerly(self,metrics,weighted_metrics,sample_weight_mode)
keras.engine.training_v1.Model._compile_from_inputs(self,all_inputs,target,orig_inputs,orig_target)
keras.engine.training_v1.Model._compile_was_called(self)
keras.engine.training_v1.Model._compile_weights_loss_and_weighted_metrics(self,sample_weights=None)
keras.engine.training_v1.Model._distribution_standardize_user_data(self,x,y=None,sample_weight=None,class_weight=None,batch_size=None,validation_split=0,shuffle=False,epochs=1,allow_partial_batch=False)
keras.engine.training_v1.Model._feed_loss_fns(self)
keras.engine.training_v1.Model._feed_output_names(self)
keras.engine.training_v1.Model._feed_output_shapes(self)
keras.engine.training_v1.Model._feed_sample_weights(self)
keras.engine.training_v1.Model._feed_targets(self)
keras.engine.training_v1.Model._get_callback_model(self)
keras.engine.training_v1.Model._get_compile_args(self,user_metrics=True)
keras.engine.training_v1.Model._get_training_eval_metrics(self)
keras.engine.training_v1.Model._handle_metrics(self,outputs,targets=None,skip_target_masks=None,sample_weights=None,masks=None,return_weighted_metrics=False,return_weighted_and_unweighted_metrics=False)
keras.engine.training_v1.Model._handle_per_output_metrics(self,metrics_dict,y_true,y_pred,mask,weights=None)
keras.engine.training_v1.Model._in_multi_worker_mode(self)
keras.engine.training_v1.Model._init_batch_counters(self)
keras.engine.training_v1.Model._init_distributed_function_cache_if_not_compiled(self)
keras.engine.training_v1.Model._init_metric_attributes(self)
keras.engine.training_v1.Model._loss_weights_list(self)
keras.engine.training_v1.Model._make_callback_model(self,grouped_model)
keras.engine.training_v1.Model._make_execution_function(self,mode)
keras.engine.training_v1.Model._make_predict_function(self)
keras.engine.training_v1.Model._make_test_function(self)
keras.engine.training_v1.Model._make_train_function(self)
keras.engine.training_v1.Model._maybe_load_initial_epoch_from_ckpt(self,initial_epoch,mode)
keras.engine.training_v1.Model._output_loss_metrics(self)
keras.engine.training_v1.Model._prepare_output_masks(self)
keras.engine.training_v1.Model._prepare_sample_weights(self,sample_weights=None)
keras.engine.training_v1.Model._prepare_skip_target_masks(self)
keras.engine.training_v1.Model._prepare_total_loss(self,masks)
keras.engine.training_v1.Model._prepare_validation_data(self,validation_data,batch_size,validation_steps)
keras.engine.training_v1.Model._process_target_tensor_for_compile(self,target_tensors)
keras.engine.training_v1.Model._recompile_weights_loss_and_weighted_metrics(self)
keras.engine.training_v1.Model._sample_weight_modes(self)
keras.engine.training_v1.Model._select_training_loop(self,inputs)
keras.engine.training_v1.Model._set_input_attrs(self,inputs)
keras.engine.training_v1.Model._set_inputs(self,inputs,outputs=None,training=None)
keras.engine.training_v1.Model._set_metric_attributes(self)
keras.engine.training_v1.Model._set_optimizer(self,optimizer)
keras.engine.training_v1.Model._set_output_attrs(self,outputs)
keras.engine.training_v1.Model._set_per_output_metric_attributes(self,metrics_dict,output_index)
keras.engine.training_v1.Model._set_strategy(self,strategy)
keras.engine.training_v1.Model._standardize_tensors(self,x,y,sample_weight,run_eagerly,dict_inputs,is_dataset,class_weight=None,batch_size=None)
keras.engine.training_v1.Model._standardize_user_data(self,x,y=None,sample_weight=None,class_weight=None,batch_size=None,check_steps=False,steps_name='steps',steps=None,validation_split=0,shuffle=False,extract_tensors_from_dataset=False)
keras.engine.training_v1.Model._targets(self)
keras.engine.training_v1.Model._trackable_saved_model_saver(self)
keras.engine.training_v1.Model._update_sample_weight_modes(self,sample_weights=None)
keras.engine.training_v1.Model._validate_compile_param_for_distribution_strategy(self,run_eagerly,sample_weight_mode,target_tensors,weighted_metrics)
keras.engine.training_v1.Model._validate_or_infer_batch_size(self,batch_size,steps,x)
keras.engine.training_v1.Model.compile(self,optimizer='rmsprop',loss=None,metrics=None,loss_weights=None,sample_weight_mode=None,weighted_metrics=None,target_tensors=None,distribute=None,**kwargs)
keras.engine.training_v1.Model.evaluate(self,x=None,y=None,batch_size=None,verbose=1,sample_weight=None,steps=None,callbacks=None,max_queue_size=10,workers=1,use_multiprocessing=False)
keras.engine.training_v1.Model.evaluate_generator(self,generator,steps=None,callbacks=None,max_queue_size=10,workers=1,use_multiprocessing=False,verbose=0)
keras.engine.training_v1.Model.fit(self,x=None,y=None,batch_size=None,epochs=1,verbose=1,callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None,validation_freq=1,max_queue_size=10,workers=1,use_multiprocessing=False,**kwargs)
keras.engine.training_v1.Model.fit_generator(self,generator,steps_per_epoch=None,epochs=1,verbose=1,callbacks=None,validation_data=None,validation_steps=None,validation_freq=1,class_weight=None,max_queue_size=10,workers=1,use_multiprocessing=False,shuffle=True,initial_epoch=0)
keras.engine.training_v1.Model.get_weights(self)
keras.engine.training_v1.Model.load_weights(self,filepath,by_name=False,skip_mismatch=False)
keras.engine.training_v1.Model.metrics(self)
keras.engine.training_v1.Model.metrics_names(self)
keras.engine.training_v1.Model.predict(self,x,batch_size=None,verbose=0,steps=None,callbacks=None,max_queue_size=10,workers=1,use_multiprocessing=False)
keras.engine.training_v1.Model.predict_generator(self,generator,steps=None,callbacks=None,max_queue_size=10,workers=1,use_multiprocessing=False,verbose=0)
keras.engine.training_v1.Model.predict_on_batch(self,x)
keras.engine.training_v1.Model.reset_metrics(self)
keras.engine.training_v1.Model.run_eagerly(self)
keras.engine.training_v1.Model.run_eagerly(self,value)
keras.engine.training_v1.Model.sample_weights(self)
keras.engine.training_v1.Model.test_on_batch(self,x,y=None,sample_weight=None,reset_metrics=True)
keras.engine.training_v1.Model.train_on_batch(self,x,y=None,sample_weight=None,class_weight=None,reset_metrics=True)
keras.engine.training_v1._TrainingEndpoint(self,output,output_name,loss_fn,loss_weight=None,training_target=None,output_loss_metric=None,sample_weight=None,sample_weight_mode=None)
keras.engine.training_v1._TrainingEndpoint.__init__(self,output,output_name,loss_fn,loss_weight=None,training_target=None,output_loss_metric=None,sample_weight=None,sample_weight_mode=None)
keras.engine.training_v1._TrainingEndpoint.create_training_target(self,target,run_eagerly=False)
keras.engine.training_v1._TrainingEndpoint.feed_output_shape(self)
keras.engine.training_v1._TrainingEndpoint.has_feedable_training_target(self)
keras.engine.training_v1._TrainingEndpoint.has_training_target(self)
keras.engine.training_v1._TrainingEndpoint.loss_fn(self)
keras.engine.training_v1._TrainingEndpoint.loss_name(self)
keras.engine.training_v1._TrainingEndpoint.loss_weight(self)
keras.engine.training_v1._TrainingEndpoint.loss_weight(self,value)
keras.engine.training_v1._TrainingEndpoint.output(self)
keras.engine.training_v1._TrainingEndpoint.output_loss_metric(self)
keras.engine.training_v1._TrainingEndpoint.output_loss_metric(self,value)
keras.engine.training_v1._TrainingEndpoint.output_name(self)
keras.engine.training_v1._TrainingEndpoint.populate_sample_weight(self,sample_weight,sample_weight_mode)
keras.engine.training_v1._TrainingEndpoint.sample_weight(self)
keras.engine.training_v1._TrainingEndpoint.sample_weight(self,value)
keras.engine.training_v1._TrainingEndpoint.sample_weight_mode(self)
keras.engine.training_v1._TrainingEndpoint.sample_weight_mode(self,value)
keras.engine.training_v1._TrainingEndpoint.sample_weights_mismatch(self)
keras.engine.training_v1._TrainingEndpoint.shape(self)
keras.engine.training_v1._TrainingEndpoint.should_skip_target(self)
keras.engine.training_v1._TrainingEndpoint.should_skip_target_weights(self)
keras.engine.training_v1._TrainingEndpoint.training_target(self)
keras.engine.training_v1._TrainingEndpoint.training_target(self,value)
keras.engine.training_v1._TrainingTarget(self,target,feedable=False,skip_target_weights=True)
keras.engine.training_v1._TrainingTarget.__init__(self,target,feedable=False,skip_target_weights=True)
keras.engine.training_v1._TrainingTarget.feedable(self)
keras.engine.training_v1._TrainingTarget.skip_target_weights(self)
keras.engine.training_v1._TrainingTarget.target(self)
keras.engine.training_v1._convert_scipy_sparse_tensor(value,expected_input)
keras.engine.training_v1._get_metrics_from_layers(layers)
keras.engine.training_v1._is_symbolic_tensor(x)
keras.engine.training_v1._non_none_constant_value(v)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/base_layer_v1.py----------------------------------------
A:keras.engine.base_layer_v1._TF_MODULE_IGNORED_PROPERTIES->frozenset(itertools.chain(('_obj_reference_counts_dict',), tf.Module._TF_MODULE_IGNORED_PROPERTIES))
A:keras.engine.base_layer_v1.self._activity_regularizer->keras.regularizers.get(kwargs.pop('activity_regularizer', None))
A:keras.engine.base_layer_v1.self._thread_local->threading.local()
A:keras.engine.base_layer_v1.self._autocast->kwargs.get('autocast', base_layer_utils.v2_dtype_behavior_enabled())
A:keras.engine.base_layer_v1.batch_input_shape->tuple(kwargs['batch_input_shape'])
A:keras.engine.base_layer_v1.self._initial_weights->kwargs.get('weights', None)
A:keras.engine.base_layer_v1.handler->keras.engine.base_layer_utils.TrackableWeightHandler(trackable_object)
A:keras.engine.base_layer_v1.getter->kwargs.pop('getter', base_layer_utils.make_variable)
A:keras.engine.base_layer_v1.collections_arg->kwargs.pop('collections', None)
A:keras.engine.base_layer_v1.autocast->kwargs.pop('experimental_autocast', True)
A:keras.engine.base_layer_v1.caching_device->kwargs.pop('caching_device', None)
A:keras.engine.base_layer_v1.dtype->tensorflow.compat.v2.as_dtype(dtype)
A:keras.engine.base_layer_v1.initializer->tensorflow.compat.v2.compat.v1.zeros_initializer()
A:keras.engine.base_layer_v1.regularizer->keras.regularizers.get(regularizer)
A:keras.engine.base_layer_v1.constraint->keras.constraints.get(constraint)
A:keras.engine.base_layer_v1.variable->self._add_variable_with_custom_getter(name=name, shape=shape, getter=getter, overwrite=True, initializer=initializer, dtype=dtype, constraint=constraint, trainable=trainable, partitioner=partitioner, use_resource=use_resource, collections=collections_arg, synchronization=synchronization, aggregation=aggregation, caching_device=caching_device)
A:keras.engine.base_layer_v1.config['dtype']->keras.mixed_precision.policy.serialize(self._dtype_policy)
A:keras.engine.base_layer_v1.expected_args->config.keys()
A:keras.engine.base_layer_v1.graph->keras.backend.get_graph()
A:keras.engine.base_layer_v1.input_shape->tensorflow.compat.v2.nest.map_structure(check_type_return_shape, input_signature)
A:keras.engine.base_layer_v1.inputs->self.get_input_at(node_index)
A:keras.engine.base_layer_v1.outputs->self.call(cast_inputs, *args, **kwargs)
A:keras.engine.base_layer_v1.output_shape->self.compute_output_shape(input_shape)
A:keras.engine.base_layer_v1.call_context->keras.engine.base_layer_utils.call_context()
A:keras.engine.base_layer_v1.input_list->tensorflow.compat.v2.nest.flatten(inputs)
A:keras.engine.base_layer_v1.build_graph->keras.utils.tf_utils.are_all_symbolic_tensors(input_list)
A:keras.engine.base_layer_v1.input_masks->tensorflow.compat.v2.nest.map_structure(lambda t: getattr(t, '_keras_mask', None), inputs)
A:keras.engine.base_layer_v1.training_value->bool(training_value)
A:keras.engine.base_layer_v1.(args, kwargs)->self._set_call_arg_value('training', None, args, kwargs, pop_kwarg_if_none=True)
A:keras.engine.base_layer_v1.cast_inputs->self._maybe_cast_inputs(inputs)
A:keras.engine.base_layer_v1.call_fn->tensorflow.compat.v2.__internal__.autograph.tf_convert(self.call, tf.__internal__.autograph.control_status_ctx())
A:keras.engine.base_layer_v1.all_layers->self._flatten_layers()
A:keras.engine.base_layer_v1.u->u()
A:keras.engine.base_layer_v1.loss_tensor->regularizer()
A:keras.engine.base_layer_v1.loss->tensorflow.compat.v2.convert_to_tensor(loss, dtype=backend.floatx())
A:keras.engine.base_layer_v1.losses->tensorflow.compat.v2.nest.flatten(losses)
A:keras.engine.base_layer_v1.from_metric_obj->hasattr(value, '_metric_obj')
A:keras.engine.base_layer_v1.is_symbolic->keras.utils.tf_utils.is_symbolic_tensor(value)
A:keras.engine.base_layer_v1.updates->keras.utils.generic_utils.to_list(updates)
A:keras.engine.base_layer_v1.inbound_nodes->getattr(self, '_inbound_nodes', [])
A:keras.engine.base_layer_v1.update->tensorflow.compat.v2.convert_to_tensor(x)
A:keras.engine.base_layer_v1.reachable->keras.utils.tf_utils.get_reachable_from_inputs(inputs, losses)
A:keras.engine.base_layer_v1.output->self.get_output_at(node_index)
A:keras.engine.base_layer_v1.all_input_shapes->set([str(node.input_shapes) for node in self._inbound_nodes])
A:keras.engine.base_layer_v1.all_output_shapes->set([str(node.output_shapes) for node in self._inbound_nodes])
A:keras.engine.base_layer_v1.self._dtype_policy->keras.mixed_precision.policy.global_policy()
A:keras.engine.base_layer_v1.strategy->tensorflow.compat.v2.distribute.get_strategy()
A:keras.engine.base_layer_v1.self._compute_dtype_object->tensorflow.compat.v2.as_dtype(self._dtype_policy.compute_dtype)
A:keras.engine.base_layer_v1.self._name->keras.backend.unique_object_name(generic_utils.to_snake_case(self.__class__.__name__), zero_based=zero_based)
A:keras.engine.base_layer_v1.match->self._get_existing_metric(name)
A:keras.engine.base_layer_v1.result_tensor->match(value)
A:keras.engine.base_layer_v1.(metric_obj, result_tensor)->keras.engine.base_layer_utils.create_mean_metric(value, name)
A:keras.engine.base_layer_v1.regularization->regularizer(v)
A:keras.engine.base_layer_v1.output_list->tensorflow.compat.v2.nest.flatten(outputs)
A:keras.engine.base_layer_v1.activity_loss->self._activity_regularizer(output)
A:keras.engine.base_layer_v1.batch_size->tensorflow.compat.v2.cast(tf.compat.v1.shape(output)[0], activity_loss.dtype)
A:keras.engine.base_layer_v1.flat_outputs->tensorflow.compat.v2.nest.flatten(outputs)
A:keras.engine.base_layer_v1.output_masks->self.compute_mask(inputs, previous_mask)
A:keras.engine.base_layer_v1.flat_masks->tensorflow.compat.v2.nest.flatten(output_masks)
A:keras.engine.base_layer_v1.args_dict->dict(zip(call_fn_args, args))
A:keras.engine.base_layer_v1.arg_pos->self._call_fn_arg_positions.get(arg_name, None)
A:keras.engine.base_layer_v1.args->list(args)
A:keras.engine.base_layer_v1.values->getattr(self._inbound_nodes[node_index], attr)
A:keras.engine.base_layer_v1.input_shapes->tensorflow.compat.v2.nest.map_structure(lambda x: x.shape, inputs)
A:keras.engine.base_layer_v1.output_shapes->self.compute_output_shape(input_shapes)
A:keras.engine.base_layer_v1.ph->keras.backend.placeholder(shape=shape, dtype=self.dtype)
A:keras.engine.base_layer_v1.layers->self._flatten_layers(include_self=False, recursive=False)
A:keras.engine.base_layer_v1.existing_value->getattr(self, name, None)
A:keras.engine.base_layer_v1.value->tensorflow.compat.v2.__internal__.tracking.sticky_attribute_assignment(trackable=self, value=value, name=name)
A:keras.engine.base_layer_v1.call_fn_arg_positions->dict()
A:keras.engine.base_layer_v1.state->self.__dict__.copy()
A:keras.engine.base_layer_v1.state['_thread_local']->threading.local()
keras.engine.base_layer_v1.KerasHistory(collections.namedtuple('KerasHistory',['layer','node_index','tensor_index']))
keras.engine.base_layer_v1.Layer(self,trainable=True,name=None,dtype=None,dynamic=False,**kwargs)
keras.engine.base_layer_v1.Layer.__delattr__(self,name)
keras.engine.base_layer_v1.Layer.__getstate__(self)
keras.engine.base_layer_v1.Layer.__init__(self,trainable=True,name=None,dtype=None,dynamic=False,**kwargs)
keras.engine.base_layer_v1.Layer.__setattr__(self,name,value)
keras.engine.base_layer_v1.Layer.__setstate__(self,state)
keras.engine.base_layer_v1.Layer._add_trackable(self,trackable_object,trainable)
keras.engine.base_layer_v1.Layer._assert_built_as_v1(self)
keras.engine.base_layer_v1.Layer._call_accepts_kwargs(self)
keras.engine.base_layer_v1.Layer._call_arg_was_passed(self,arg_name,args,kwargs,inputs_in_args=False)
keras.engine.base_layer_v1.Layer._call_fn_arg_positions(self)
keras.engine.base_layer_v1.Layer._call_fn_args(self)
keras.engine.base_layer_v1.Layer._call_full_argspec(self)
keras.engine.base_layer_v1.Layer._collect_input_masks(self,inputs,args,kwargs)
keras.engine.base_layer_v1.Layer._compute_dtype(self)
keras.engine.base_layer_v1.Layer._dedup_weights(self,weights)
keras.engine.base_layer_v1.Layer._dtype(self)
keras.engine.base_layer_v1.Layer._dtype(self,value)
keras.engine.base_layer_v1.Layer._get_call_arg_value(self,arg_name,args,kwargs,inputs_in_args=False)
keras.engine.base_layer_v1.Layer._get_existing_metric(self,name=None)
keras.engine.base_layer_v1.Layer._get_node_attribute_at_index(self,node_index,attr,attr_name)
keras.engine.base_layer_v1.Layer._get_trainable_state(self)
keras.engine.base_layer_v1.Layer._handle_activity_regularization(self,inputs,outputs)
keras.engine.base_layer_v1.Layer._handle_weight_regularization(self,name,variable,regularizer)
keras.engine.base_layer_v1.Layer._inbound_nodes(self)
keras.engine.base_layer_v1.Layer._inbound_nodes(self,value)
keras.engine.base_layer_v1.Layer._init_call_fn_args(self,expects_training_arg=None)
keras.engine.base_layer_v1.Layer._init_set_name(self,name,zero_based=True)
keras.engine.base_layer_v1.Layer._is_layer(self)
keras.engine.base_layer_v1.Layer._list_extra_dependencies_for_serialization(self,serialization_cache)
keras.engine.base_layer_v1.Layer._list_functions_for_serialization(self,serialization_cache)
keras.engine.base_layer_v1.Layer._maybe_build(self,inputs)
keras.engine.base_layer_v1.Layer._maybe_cast_inputs(self,inputs)
keras.engine.base_layer_v1.Layer._maybe_create_attribute(self,name,default_value)
keras.engine.base_layer_v1.Layer._name_scope(self)
keras.engine.base_layer_v1.Layer._obj_reference_counts(self)
keras.engine.base_layer_v1.Layer._object_identifier(self)
keras.engine.base_layer_v1.Layer._outbound_nodes(self)
keras.engine.base_layer_v1.Layer._outbound_nodes(self,value)
keras.engine.base_layer_v1.Layer._set_call_arg_value(self,arg_name,new_value,args,kwargs,inputs_in_args=False,pop_kwarg_if_none=False)
keras.engine.base_layer_v1.Layer._set_dtype_policy(self,dtype)
keras.engine.base_layer_v1.Layer._set_mask_metadata(self,inputs,outputs,previous_mask)
keras.engine.base_layer_v1.Layer._set_trainable_state(self,trainable_state)
keras.engine.base_layer_v1.Layer._should_compute_mask(self)
keras.engine.base_layer_v1.Layer._symbolic_add_metric(self,value,aggregation=None,name=None)
keras.engine.base_layer_v1.Layer._symbolic_call(self,inputs)
keras.engine.base_layer_v1.Layer._trackable_saved_model_saver(self)
keras.engine.base_layer_v1.Layer._tracking_metadata(self)
keras.engine.base_layer_v1.Layer.activity_regularizer(self)
keras.engine.base_layer_v1.Layer.activity_regularizer(self,regularizer)
keras.engine.base_layer_v1.Layer.add_loss(self,losses,inputs=None)
keras.engine.base_layer_v1.Layer.add_metric(self,value,aggregation=None,name=None)
keras.engine.base_layer_v1.Layer.add_update(self,updates,inputs=None)
keras.engine.base_layer_v1.Layer.add_variable(self,*args,**kwargs)
keras.engine.base_layer_v1.Layer.add_weight(self,name=None,shape=None,dtype=None,initializer=None,regularizer=None,trainable=None,constraint=None,partitioner=None,use_resource=None,synchronization=tf.VariableSynchronization.AUTO,aggregation=tf.compat.v1.VariableAggregation.NONE,**kwargs)
keras.engine.base_layer_v1.Layer.apply(self,inputs,*args,**kwargs)
keras.engine.base_layer_v1.Layer.build(self,input_shape)
keras.engine.base_layer_v1.Layer.call(self,inputs,**kwargs)
keras.engine.base_layer_v1.Layer.compute_mask(self,inputs,mask=None)
keras.engine.base_layer_v1.Layer.compute_output_shape(self,input_shape)
keras.engine.base_layer_v1.Layer.compute_output_signature(self,input_signature)
keras.engine.base_layer_v1.Layer.count_params(self)
keras.engine.base_layer_v1.Layer.dtype(self)
keras.engine.base_layer_v1.Layer.dynamic(self)
keras.engine.base_layer_v1.Layer.from_config(cls,config)
keras.engine.base_layer_v1.Layer.get_config(self)
keras.engine.base_layer_v1.Layer.get_input_at(self,node_index)
keras.engine.base_layer_v1.Layer.get_input_mask_at(self,node_index)
keras.engine.base_layer_v1.Layer.get_input_shape_at(self,node_index)
keras.engine.base_layer_v1.Layer.get_losses_for(self,inputs)
keras.engine.base_layer_v1.Layer.get_output_at(self,node_index)
keras.engine.base_layer_v1.Layer.get_output_mask_at(self,node_index)
keras.engine.base_layer_v1.Layer.get_output_shape_at(self,node_index)
keras.engine.base_layer_v1.Layer.get_updates_for(self,inputs)
keras.engine.base_layer_v1.Layer.get_weights(self)
keras.engine.base_layer_v1.Layer.inbound_nodes(self)
keras.engine.base_layer_v1.Layer.input(self)
keras.engine.base_layer_v1.Layer.input_mask(self)
keras.engine.base_layer_v1.Layer.input_shape(self)
keras.engine.base_layer_v1.Layer.input_spec(self)
keras.engine.base_layer_v1.Layer.input_spec(self,value)
keras.engine.base_layer_v1.Layer.losses(self)
keras.engine.base_layer_v1.Layer.metrics(self)
keras.engine.base_layer_v1.Layer.name(self)
keras.engine.base_layer_v1.Layer.non_trainable_variables(self)
keras.engine.base_layer_v1.Layer.outbound_nodes(self)
keras.engine.base_layer_v1.Layer.output(self)
keras.engine.base_layer_v1.Layer.output_mask(self)
keras.engine.base_layer_v1.Layer.output_shape(self)
keras.engine.base_layer_v1.Layer.set_weights(self,weights)
keras.engine.base_layer_v1.Layer.stateful(self)
keras.engine.base_layer_v1.Layer.stateful(self,value)
keras.engine.base_layer_v1.Layer.trainable(self)
keras.engine.base_layer_v1.Layer.trainable(self,value)
keras.engine.base_layer_v1.Layer.trainable_variables(self)
keras.engine.base_layer_v1.Layer.updates(self)
keras.engine.base_layer_v1.Layer.variables(self)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/sequential.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/training_arrays.py----------------------------------------
A:keras.engine.training_arrays.num_train_samples->check_num_samples(fit_inputs, batch_size=batch_size, steps=steps_per_epoch, steps_name='steps_per_epoch')
A:keras.engine.training_arrays.index_array->numpy.arange(num_samples)
A:keras.engine.training_arrays.model.history->cbks.History()
A:keras.engine.training_arrays.callbacks->cbks.CallbackList(callbacks)
A:keras.engine.training_arrays.callback_model->model._get_callback_model()
A:keras.engine.training_arrays.callback_metrics->list(model.metrics_names)
A:keras.engine.training_arrays.outs->to_list(outs)
A:keras.engine.training_arrays.val_outs->to_list(val_outs)
A:keras.engine.training_arrays.batches->make_batches(num_samples, batch_size)
A:keras.engine.training_arrays.ins_batch->slice_arrays(ins, batch_ids)
A:keras.engine.training_arrays.ins_batch[i]->ins_batch[i].toarray().toarray()
A:keras.engine.training_arrays.num_samples->check_num_samples(ins, batch_size=batch_size, steps=steps, steps_name='steps')
A:keras.engine.training_arrays.progbar->Progbar(target=num_samples)
A:keras.engine.training_arrays.batch_outs->f(ins_batch)
A:keras.engine.training_arrays.outs[i]->float(batch_out)
A:keras.engine.training_arrays.batch_logs[l]->float(o)
keras.engine.training_arrays.fit_loop(model,fit_function,fit_inputs,out_labels=None,batch_size=None,epochs=100,verbose=1,callbacks=None,val_function=None,val_inputs=None,shuffle=True,initial_epoch=0,steps_per_epoch=None,validation_steps=None,validation_freq=1)
keras.engine.training_arrays.predict_loop(model,f,ins,batch_size=32,verbose=0,steps=None,callbacks=None)
keras.engine.training_arrays.test_loop(model,f,ins,batch_size=None,verbose=0,steps=None,callbacks=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/compile_utils.py----------------------------------------
A:keras.engine.compile_utils.self._output_names->create_pseudo_output_names(y_pred)
A:keras.engine.compile_utils.struct->copy.copy(struct)
A:keras.engine.compile_utils.self._loss_metric->keras.metrics.Mean(name='loss')
A:keras.engine.compile_utils.self._losses->tensorflow.compat.v2.nest.flatten(self._losses)
A:keras.engine.compile_utils.self._loss_weights->tensorflow.compat.v2.nest.flatten(self._loss_weights)
A:keras.engine.compile_utils.y_true->self._conform_to_outputs(y_pred, y_true)
A:keras.engine.compile_utils.sample_weight->tensorflow.compat.v2.nest.flatten(sample_weight)
A:keras.engine.compile_utils.y_pred->tensorflow.compat.v2.nest.flatten(y_pred)
A:keras.engine.compile_utils.(y_t, y_p, sw)->match_dtype_and_rank(y_t, y_p, sw)
A:keras.engine.compile_utils.sw->tensorflow.compat.v2.cast(sw, y_p.dtype)
A:keras.engine.compile_utils.loss_value->keras.utils.losses_utils.scale_loss_for_distribution(loss_value)
A:keras.engine.compile_utils.batch_dim->tensorflow.compat.v2.cast(y_t, y_p.dtype).nrows()
A:keras.engine.compile_utils.regularization_losses->keras.utils.losses_utils.cast_losses_to_common_dtype(regularization_losses)
A:keras.engine.compile_utils.reg_loss->tensorflow.compat.v2.add_n(regularization_losses)
A:keras.engine.compile_utils.loss_metric_values->keras.utils.losses_utils.cast_losses_to_common_dtype(loss_metric_values)
A:keras.engine.compile_utils.total_loss_metric_value->tensorflow.compat.v2.add_n(loss_metric_values)
A:keras.engine.compile_utils.loss_values->keras.utils.losses_utils.cast_losses_to_common_dtype(loss_values)
A:keras.engine.compile_utils.total_loss->tensorflow.compat.v2.add_n(loss_values)
A:keras.engine.compile_utils.loss->keras.losses.LossFunctionWrapper(loss, name=loss_name)
A:keras.engine.compile_utils.loss_name->get_custom_object_name(loss)
A:keras.engine.compile_utils.self._metrics->tensorflow.compat.v2.__internal__.nest.flatten_up_to(y_pred, self._metrics, check_types=False)
A:keras.engine.compile_utils.self._weighted_metrics->tensorflow.compat.v2.__internal__.nest.flatten_up_to(y_pred, self._weighted_metrics, check_types=False)
A:keras.engine.compile_utils.metric_names->set()
A:keras.engine.compile_utils.mask->tensorflow.compat.v2.cast(mask, y_p.dtype)
A:keras.engine.compile_utils.metrics->tensorflow.compat.v2.nest.flatten(metrics)
A:keras.engine.compile_utils.metric_obj->keras.metrics.MeanMetricWrapper(metric_obj, name=metric_name)
A:keras.engine.compile_utils.y_t_rank->len(y_t.shape.as_list())
A:keras.engine.compile_utils.y_p_rank->len(y_p.shape.as_list())
A:keras.engine.compile_utils.metric_name->get_custom_object_name(metric)
A:keras.engine.compile_utils.flat_paths->tensorflow.compat.v2.nest.map_structure(one_index, flat_paths)
A:keras.engine.compile_utils.name->'_'.join((str(p) for p in path))
A:keras.engine.compile_utils.y_t->tensorflow.compat.v2.cast(y_t, y_p.dtype)
A:keras.engine.compile_utils.(mask, _, sw)->keras.utils.losses_utils.squeeze_or_expand_dimensions(mask, sample_weight=sw)
keras.engine.compile_utils.Container(self,output_names=None)
keras.engine.compile_utils.Container.__init__(self,output_names=None)
keras.engine.compile_utils.Container._conform_to_outputs(self,outputs,struct)
keras.engine.compile_utils.Container._copy_object(self,obj)
keras.engine.compile_utils.Container._maybe_broadcast_to_outputs(self,outputs,objects)
keras.engine.compile_utils.Container._should_broadcast(self,objects)
keras.engine.compile_utils.Container.build(self,y_pred)
keras.engine.compile_utils.LossesContainer(self,losses,loss_weights=None,output_names=None)
keras.engine.compile_utils.LossesContainer.__init__(self,losses,loss_weights=None,output_names=None)
keras.engine.compile_utils.LossesContainer._copy_object(self,obj)
keras.engine.compile_utils.LossesContainer._create_metrics(self)
keras.engine.compile_utils.LossesContainer._get_loss_object(self,loss)
keras.engine.compile_utils.LossesContainer._should_broadcast(self,obj)
keras.engine.compile_utils.LossesContainer.build(self,y_pred)
keras.engine.compile_utils.LossesContainer.built(self)
keras.engine.compile_utils.LossesContainer.metrics(self)
keras.engine.compile_utils.LossesContainer.reset_state(self)
keras.engine.compile_utils.MetricsContainer(self,metrics=None,weighted_metrics=None,output_names=None,from_serialized=False)
keras.engine.compile_utils.MetricsContainer.__init__(self,metrics=None,weighted_metrics=None,output_names=None,from_serialized=False)
keras.engine.compile_utils.MetricsContainer._copy_object(self,obj)
keras.engine.compile_utils.MetricsContainer._create_ordered_metrics(self)
keras.engine.compile_utils.MetricsContainer._get_metric_object(self,metric,y_t,y_p)
keras.engine.compile_utils.MetricsContainer._get_metric_objects(self,metrics,y_t,y_p)
keras.engine.compile_utils.MetricsContainer._set_metric_names(self)
keras.engine.compile_utils.MetricsContainer._should_broadcast(self,obj)
keras.engine.compile_utils.MetricsContainer.build(self,y_pred,y_true)
keras.engine.compile_utils.MetricsContainer.built(self)
keras.engine.compile_utils.MetricsContainer.metrics(self)
keras.engine.compile_utils.MetricsContainer.reset_state(self)
keras.engine.compile_utils.MetricsContainer.unweighted_metrics(self)
keras.engine.compile_utils.MetricsContainer.update_state(self,y_true,y_pred,sample_weight=None)
keras.engine.compile_utils.MetricsContainer.weighted_metrics(self)
keras.engine.compile_utils._create_pseudo_names(tensors,prefix)
keras.engine.compile_utils.apply_mask(y_p,sw,mask)
keras.engine.compile_utils.create_pseudo_input_names(inputs)
keras.engine.compile_utils.create_pseudo_output_names(outputs)
keras.engine.compile_utils.get_custom_object_name(obj)
keras.engine.compile_utils.get_mask(y_p)
keras.engine.compile_utils.map_missing_dict_keys(y_pred,struct)
keras.engine.compile_utils.map_to_output_names(y_pred,output_names,struct)
keras.engine.compile_utils.match_dtype_and_rank(y_t,y_p,sw)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/node.py----------------------------------------
A:keras.engine.node.call_args->tensorflow.compat.v2.nest.map_structure(lambda t: t, call_args)
A:keras.engine.node.call_kwargs->tensorflow.compat.v2.nest.map_structure(lambda t: t, call_kwargs)
A:keras.engine.node.self.outputs->tensorflow.compat.v2.nest.map_structure(lambda t: t, outputs)
A:keras.engine.node.self._flat_arguments->tensorflow.compat.v2.nest.flatten((self.call_args, self.call_kwargs))
A:keras.engine.node.kt_id->str(id(ele))
A:keras.engine.node.tensor._keras_history->KerasHistory(layer=layer, node_index=node_index, tensor_index=i)
A:keras.engine.node.flat_arguments->copy.copy(self._flat_arguments)
A:keras.engine.node.flat_arguments[kt_index]->tensor_dict[kt_id].pop()
A:keras.engine.node.(args, kwargs)->tensorflow.compat.v2.nest.pack_sequence_as((self.call_args, self.call_kwargs), flat_arguments)
A:keras.engine.node.(inputs, args, kwargs)->self.layer._split_out_first_arg(args, kwargs)
A:keras.engine.node.arguments->dict(zip(self.layer._call_fn_args[1:], args))
A:keras.engine.node.node_key->make_node_key(kh.layer.name, node_index)
A:keras.engine.node.new_node_index->node_conversion_map.get(node_key, 0)
A:keras.engine.node.kwargs->tensorflow.compat.v2.nest.map_structure(_serialize_keras_tensor, kwargs)
A:keras.engine.node.kwarg_types->tensorflow.compat.v2.nest.map_structure(type, kwargs)
A:keras.engine.node.data->keras.utils.tf_utils.convert_inner_node_data(data)
A:keras.engine.node.input_shapes->tensorflow.compat.v2.nest.map_structure(backend.int_shape, self.input_tensors)
A:keras.engine.node.inbound_layers->tensorflow.compat.v2.nest.map_structure(lambda t: t._keras_history.layer, self.call_args[0])
keras.engine.node.KerasHistory(collections.namedtuple('KerasHistory',['layer','node_index','tensor_index']))
keras.engine.node.Node(self,layer,call_args=None,call_kwargs=None,outputs=None)
keras.engine.node.Node.__init__(self,layer,call_args=None,call_kwargs=None,outputs=None)
keras.engine.node.Node.inbound_layers(self)
keras.engine.node.Node.input_shapes(self)
keras.engine.node.Node.input_tensors(self)
keras.engine.node.Node.iterate_inbound(self)
keras.engine.node.Node.keras_inputs(self)
keras.engine.node.Node.map_arguments(self,tensor_dict)
keras.engine.node.Node.outbound_layer(self)
keras.engine.node.Node.output_shapes(self)
keras.engine.node.Node.output_tensors(self)
keras.engine.node.Node.parent_nodes(self)
keras.engine.node.Node.serialize(self,make_node_key,node_conversion_map)
keras.engine.node.is_keras_tensor(obj)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/functional.py----------------------------------------
A:keras.engine.functional._TF_MODULE_IGNORED_PROPERTIES->frozenset(itertools.chain(('_layer_call_argspecs', '_compiled_trainable_state', '_output_mask_cache', '_output_tensor_cache', '_output_shape_cache'), training_lib.Model._TF_MODULE_IGNORED_PROPERTIES))
A:keras.engine.functional.skip_init->_deserialize_keras_tensors(kwargs, created_layers).pop('skip_init', False)
A:keras.engine.functional.self.inputs->tensorflow.compat.v2.nest.flatten(inputs)
A:keras.engine.functional.self.outputs->tensorflow.compat.v2.nest.flatten(outputs)
A:keras.engine.functional.self._build_input_shape->tensorflow.compat.v2.nest.map_structure(lambda x: x.shape, inputs)
A:keras.engine.functional.(nodes, nodes_by_depth, layers, _)->_map_graph_network(self.inputs, self.outputs)
A:keras.engine.functional.self._layer_call_argspecs[layer]->keras.utils.tf_inspect.getfullargspec(layer.call)
A:keras.engine.functional.names->sorted(self._nested_inputs.keys())
A:keras.engine.functional.output_names->set()
A:keras.engine.functional.existing_count->prefix_count.get(layer.name, 1)
A:keras.engine.functional.proposal->'{}_{}'.format(layer.name, existing_count)
A:keras.engine.functional.dependencies->collections.OrderedDict()
A:keras.engine.functional.output_tensors->tensorflow.compat.v2.nest.pack_sequence_as(output_layers, output_tensors)
A:keras.engine.functional.input_shape->keras.utils.tf_utils.convert_shapes(input_shape, to_tuples=False)
A:keras.engine.functional.cache_key->tuple(tf_utils.convert_shapes(input_shape, to_tuples=True))
A:keras.engine.functional.depth_keys->list(nodes_by_depth.keys())
A:keras.engine.functional.layer_input_shapes->keras.utils.tf_utils.convert_shapes(layer_input_shapes, to_tuples=True)
A:keras.engine.functional.layer_output_shapes->keras.utils.tf_utils.convert_shapes(layer_output_shapes, to_tuples=False)
A:keras.engine.functional.node_index->get_node_index(layer, node_index)
A:keras.engine.functional.output_shapes->tensorflow.compat.v2.nest.pack_sequence_as(self._nested_outputs, output_shapes)
A:keras.engine.functional.self._name->keras.backend.unique_object_name(generic_utils.to_snake_case(cls_name), zero_based=zero_based)
A:keras.engine.functional.inputs->self._flatten_to_reference_inputs(inputs)
A:keras.engine.functional.masks->self._flatten_to_reference_inputs(mask)
A:keras.engine.functional.y->self._conform_to_reference_input(y, ref_input=x)
A:keras.engine.functional.x_id->str(id(x))
A:keras.engine.functional.(args, kwargs)->unprocessed_nodes.pop(0).map_arguments(tensor_dict)
A:keras.engine.functional.outputs->unprocessed_nodes.pop(0).layer(*args, **kwargs)
A:keras.engine.functional.ref_input_names->sorted(ref_inputs.keys())
A:keras.engine.functional.keras_history->getattr(tensor, '_keras_history', None)
A:keras.engine.functional.tensor->tensorflow.compat.v2.cast(tensor, dtype=ref_input_dtype)
A:keras.engine.functional.ref_input_dtype->getattr(ref_input, 'dtype', None)
A:keras.engine.functional.(input_tensors, output_tensors, created_layers)->reconstruct_from_config(config, custom_objects)
A:keras.engine.functional.model->cls(inputs=input_tensors, outputs=output_tensors, name=config.get('name'))
A:keras.engine.functional.layers->tensorflow.compat.v2.nest.flatten(layers)
A:keras.engine.functional.relevant_nodes->tensorflow.compat.v2.nest.flatten([layer.inbound_nodes[1:] if _should_skip_first_node(layer) else layer.inbound_nodes for layer in created_layers.values()])
A:keras.engine.functional.network_nodes->set(relevant_nodes + list(node_to_depth.keys()))
A:keras.engine.functional.min_depth->min(min_depth, node_to_depth[inbound_node])
A:keras.engine.functional.unprocessed_nodes->copy.copy(relevant_nodes)
A:keras.engine.functional.node->copy.copy(relevant_nodes).pop(0)
A:keras.engine.functional.depth->max(depth, previous_depth)
A:keras.engine.functional.node_key->_make_node_key(layer.name, node_index)
A:keras.engine.functional.layer_set->set(self._self_tracked_trackables)
A:keras.engine.functional.tensor_usage_count->collections.Counter()
A:keras.engine.functional.available_tensors->set((str(id(tensor)) for tensor in self.inputs))
A:keras.engine.functional.(new_nodes, new_layers)->_map_subgraph_network(self.inputs, [value])
A:keras.engine.functional.add_loss_layer->keras.engine.base_layer.AddLoss(unconditional=False, dtype=symbolic_loss.dtype)
A:keras.engine.functional.add_metric_layer->keras.engine.base_layer.AddMetric(aggregation, name, dtype=value.dtype)
A:keras.engine.functional.(nodes_in_decreasing_depth, layer_indices)->_build_map(outputs)
A:keras.engine.functional.previous_depth->nodes_depths.get(node_dep, 0)
A:keras.engine.functional.nodes_depths[node_dep]->max(depth + 1, previous_depth)
A:keras.engine.functional.nodes_by_depth->collections.defaultdict(list)
A:keras.engine.functional.layers_by_depth->collections.defaultdict(list)
A:keras.engine.functional.computable_tensors->set()
A:keras.engine.functional.finished_nodes->set()
A:keras.engine.functional.nodes_in_progress->set()
A:keras.engine.functional.layer_indices[layer]->len(layer_indices)
A:keras.engine.functional.(_, nodes_by_depth, layers, _)->_map_graph_network(inputs, outputs)
A:keras.engine.functional.t->t.as_list().as_list()
A:keras.engine.functional.new_node_index->get_node_index(layer, node_index)
A:keras.engine.functional.kwargs->_deserialize_keras_tensors(kwargs, created_layers)
A:keras.engine.functional.input_data->input_data.as_list().as_list()
A:keras.engine.functional.inbound_node_index->get_node_index(inbound_layer, inbound_node_index)
A:keras.engine.functional.input_tensors->tensorflow.compat.v2.nest.pack_sequence_as(input_layers, input_tensors)
A:keras.engine.functional.layer->deserialize_layer(layer_data, custom_objects=custom_objects)
A:keras.engine.functional.node_count_by_layer[layer]->int(_should_skip_first_node(layer))
A:keras.engine.functional.inbound_nodes_data->keras.utils.tf_utils.convert_inner_node_data(inbound_nodes_data, wrap=True)
A:keras.engine.functional.input_layers->keras.utils.tf_utils.convert_inner_node_data(config['input_layers'], wrap=True)
A:keras.engine.functional.(layer_name, node_index, tensor_index)->layer_data.as_list()
A:keras.engine.functional.output_layers->keras.utils.tf_utils.convert_inner_node_data(config['output_layers'], wrap=True)
A:keras.engine.functional.node_data->copy.copy(relevant_nodes).pop(0).serialize(_make_node_key, node_conversion_map)
A:keras.engine.functional.layer_config->serialize_layer_fn(layer)
A:keras.engine.functional.model_inputs->keras.utils.tf_utils.convert_inner_node_data(model_inputs)
A:keras.engine.functional.model_outputs->keras.utils.tf_utils.convert_inner_node_data(model_outputs)
A:keras.engine.functional.shape->x.shape.as_list()
A:keras.engine.functional.method->getattr(module, method_name)
A:keras.engine.functional.method_arg_spec->keras.utils.tf_inspect.getfullargspec(method)
keras.engine.functional.Functional(self,inputs,outputs,name=None,trainable=True,**kwargs)
keras.engine.functional.Functional.__init__(self,inputs,outputs,name=None,trainable=True,**kwargs)
keras.engine.functional.Functional._assert_weights_created(self)
keras.engine.functional.Functional._checkpoint_dependencies(self)
keras.engine.functional.Functional._compute_tensor_usage_count(self)
keras.engine.functional.Functional._conform_to_reference_input(self,tensor,ref_input)
keras.engine.functional.Functional._flatten_to_reference_inputs(self,tensors)
keras.engine.functional.Functional._get_save_spec(self,dynamic_batch=True)
keras.engine.functional.Functional._graph_network_add_loss(self,symbolic_loss)
keras.engine.functional.Functional._graph_network_add_metric(self,value,aggregation,name)
keras.engine.functional.Functional._handle_deferred_layer_dependencies(self,layers)
keras.engine.functional.Functional._init_graph_network(self,inputs,outputs)
keras.engine.functional.Functional._init_set_name(self,name,zero_based=True)
keras.engine.functional.Functional._insert_layers(self,layers,relevant_nodes=None)
keras.engine.functional.Functional._layer_checkpoint_dependencies(self)
keras.engine.functional.Functional._lookup_dependency(self,name)
keras.engine.functional.Functional._run_internal_graph(self,inputs,training=None,mask=None)
keras.engine.functional.Functional._set_output_names(self)
keras.engine.functional.Functional._should_compute_mask(self)
keras.engine.functional.Functional._trackable_saved_model_saver(self)
keras.engine.functional.Functional._validate_graph_inputs_and_outputs(self)
keras.engine.functional.Functional.call(self,inputs,training=None,mask=None)
keras.engine.functional.Functional.compute_mask(self,inputs,mask)
keras.engine.functional.Functional.compute_output_shape(self,input_shape)
keras.engine.functional.Functional.from_config(cls,config,custom_objects=None)
keras.engine.functional.Functional.get_config(self)
keras.engine.functional.Functional.input(self)
keras.engine.functional.Functional.input_shape(self)
keras.engine.functional.Functional.input_spec(self)
keras.engine.functional.Functional.input_spec(self,value)
keras.engine.functional.Functional.output(self)
keras.engine.functional.Functional.output_shape(self)
keras.engine.functional.ModuleWrapper(self,module,method_name=None,**kwargs)
keras.engine.functional.ModuleWrapper.__init__(self,module,method_name=None,**kwargs)
keras.engine.functional.ModuleWrapper.call(self,*args,**kwargs)
keras.engine.functional._build_map(outputs)
keras.engine.functional._build_map_helper(tensor,finished_nodes,nodes_in_progress,nodes_in_decreasing_depth,layer_indices)
keras.engine.functional._make_node_key(layer_name,node_index)
keras.engine.functional._map_graph_network(inputs,outputs)
keras.engine.functional._map_subgraph_network(inputs,outputs)
keras.engine.functional._should_skip_first_node(layer)
keras.engine.functional.connect_ancillary_layers(model,created_layers)
keras.engine.functional.get_network_config(network,serialize_layer_fn=None)
keras.engine.functional.reconstruct_from_config(config,custom_objects=None,created_layers=None)
keras.engine.functional.shape_with_no_batch_size(x)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/network.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/training.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/training_generator_v1.py----------------------------------------
A:keras.engine.training_generator_v1.is_dataset->isinstance(data, (tf.data.Dataset, tf.compat.v1.data.Dataset))
A:keras.engine.training_generator_v1.steps_per_epoch->int(math.ceil(num_samples / batch_size))
A:keras.engine.training_generator_v1.(generator, steps_per_epoch)->convert_to_generator_like(data, steps_per_epoch=steps_per_epoch, batch_size=batch_size, epochs=epochs - initial_epoch, shuffle=shuffle)
A:keras.engine.training_generator_v1.is_sequence->isinstance(generator, data_utils.Sequence)
A:keras.engine.training_generator_v1.batch_function->_make_execution_function(model, mode, class_weight=class_weight)
A:keras.engine.training_generator_v1.(generator, enqueuer)->_make_enqueued_generator(generator, workers=workers, use_multiprocessing=use_multiprocessing, max_queue_size=max_queue_size, shuffle=shuffle)
A:keras.engine.training_generator_v1.(num_samples_or_steps, use_steps)->_get_num_samples_or_steps(data, steps_per_epoch)
A:keras.engine.training_generator_v1.callbacks->keras.callbacks.configure_callbacks(callbacks, model, do_validation=do_validation, epochs=epochs, steps_per_epoch=steps_per_epoch, batch_size=batch_size, samples=num_samples_or_steps, count_mode=count_mode, verbose=verbose, mode=mode)
A:keras.engine.training_generator_v1.aggregator->keras.engine.training_utils_v1.MetricsAggregator(True, steps=steps_per_epoch)
A:keras.engine.training_generator_v1.learning_phase_scope->keras.backend.eager_learning_phase_scope(1 if mode == ModeKeys.TRAIN else 0)
A:keras.engine.training_generator_v1.initial_epoch->model._maybe_load_initial_epoch_from_ckpt(initial_epoch, mode)
A:keras.engine.training_generator_v1.batch_data->_get_next_batch(generator)
A:keras.engine.training_generator_v1.batch_size->model._validate_or_infer_batch_size(batch_size, steps, x)
A:keras.engine.training_generator_v1.batch_outs->batch_function(*batch_data)
A:keras.engine.training_generator_v1.batch_logs->keras.callbacks.make_logs(model, batch_logs, batch_outs, mode)
A:keras.engine.training_generator_v1.epoch_logs->keras.callbacks.make_logs(model, epoch_logs, val_results, mode, prefix='val_')
A:keras.engine.training_generator_v1.val_results->model_iteration(model, validation_data, steps_per_epoch=validation_steps, batch_size=batch_size, class_weight=class_weight, workers=workers, use_multiprocessing=use_multiprocessing, max_queue_size=max_queue_size, callbacks=callbacks, verbose=verbose, mode=ModeKeys.TEST, steps_name='validation_steps')
A:keras.engine.training_generator_v1.generator->tensorflow.compat.v2.compat.v1.data.make_one_shot_iterator(original_dataset)
A:keras.engine.training_generator_v1.fit_generator->functools.partial(model_iteration, mode=ModeKeys.TRAIN)
A:keras.engine.training_generator_v1.evaluate_generator->functools.partial(model_iteration, mode=ModeKeys.TEST, shuffle=False)
A:keras.engine.training_generator_v1.predict_generator->functools.partial(model_iteration, mode=ModeKeys.PREDICT, shuffle=False)
A:keras.engine.training_generator_v1.generator_output->next(generator)
A:keras.engine.training_generator_v1.data->tuple((ele for ele in data if not all((e is None for e in tf.nest.flatten(ele)))))
A:keras.engine.training_generator_v1.num_samples->int(tf.nest.flatten(data)[0].shape[0])
A:keras.engine.training_generator_v1.index_array->numpy.arange(num_samples)
A:keras.engine.training_generator_v1.batches->keras.utils.generic_utils.make_batches(num_samples, batch_size)
A:keras.engine.training_generator_v1.flat_batch_data->keras.engine.training_utils.slice_arrays(tf.nest.flatten(data), batch_ids, contiguous=not shuffle)
A:keras.engine.training_generator_v1.enqueuer->keras.utils.data_utils.GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing)
A:keras.engine.training_generator_v1.output_generator->keras.utils.data_utils.iter_sequence_infinite(generator)
A:keras.engine.training_generator_v1.f->functools.partial(f, reset_metrics=False)
A:keras.engine.training_generator_v1.flat_inputs->tensorflow.compat.v2.nest.flatten(data)
A:keras.engine.training_generator_v1.(x, y, sample_weights)->model._standardize_user_data(x, y, sample_weight=sample_weight, batch_size=batch_size, check_steps=True, steps_name='steps', steps=steps)
A:keras.engine.training_generator_v1.validation_data->model._prepare_validation_data(validation_data, batch_size, validation_steps)
A:keras.engine.training_generator_v1.(x, y, sample_weights, val_x, val_y, val_sample_weights)->keras.engine.training_utils_v1.split_training_and_validation_data(x, y, sample_weights, validation_split)
A:keras.engine.training_generator_v1.(x, _, _)->model._standardize_user_data(x, check_steps=True, steps_name='steps', steps=steps)
keras.engine.training_generator_v1.EagerDatasetOrIteratorTrainingLoop(training_utils_v1.TrainingLoop)
keras.engine.training_generator_v1.EagerDatasetOrIteratorTrainingLoop.evaluate(self,model,x=None,y=None,batch_size=None,verbose=1,sample_weight=None,steps=None,callbacks=None,**kwargs)
keras.engine.training_generator_v1.EagerDatasetOrIteratorTrainingLoop.fit(self,model,x=None,y=None,batch_size=None,epochs=1,verbose=1,callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None,validation_freq=1,**kwargs)
keras.engine.training_generator_v1.EagerDatasetOrIteratorTrainingLoop.predict(self,model,x,batch_size=None,verbose=0,steps=None,callbacks=None,**kwargs)
keras.engine.training_generator_v1.GeneratorLikeTrainingLoop(training_utils_v1.TrainingLoop)
keras.engine.training_generator_v1.GeneratorLikeTrainingLoop.evaluate(self,model,x=None,y=None,batch_size=None,verbose=1,sample_weight=None,steps=None,callbacks=None,**kwargs)
keras.engine.training_generator_v1.GeneratorLikeTrainingLoop.fit(self,model,x=None,y=None,batch_size=None,epochs=1,verbose=1,callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None,validation_freq=1,**kwargs)
keras.engine.training_generator_v1.GeneratorLikeTrainingLoop.predict(self,model,x,batch_size=None,verbose=0,steps=None,callbacks=None,**kwargs)
keras.engine.training_generator_v1.GeneratorOrSequenceTrainingLoop(training_utils_v1.TrainingLoop)
keras.engine.training_generator_v1.GeneratorOrSequenceTrainingLoop.evaluate(self,model,x=None,y=None,batch_size=None,verbose=1,sample_weight=None,steps=None,callbacks=None,max_queue_size=10,workers=1,use_multiprocessing=False)
keras.engine.training_generator_v1.GeneratorOrSequenceTrainingLoop.fit(self,model,x=None,y=None,batch_size=None,epochs=1,verbose=1,callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None,validation_freq=1,max_queue_size=10,workers=1,use_multiprocessing=False)
keras.engine.training_generator_v1.GeneratorOrSequenceTrainingLoop.predict(self,model,x,batch_size=None,verbose=0,steps=None,callbacks=None,max_queue_size=10,workers=1,use_multiprocessing=False)
keras.engine.training_generator_v1._get_next_batch(generator)
keras.engine.training_generator_v1._get_num_samples_or_steps(data,steps_per_epoch)
keras.engine.training_generator_v1._make_enqueued_generator(generator,workers=1,use_multiprocessing=False,max_queue_size=10,shuffle=False)
keras.engine.training_generator_v1._make_execution_function(model,mode,class_weight=None)
keras.engine.training_generator_v1._validate_arguments(is_sequence,is_dataset,use_multiprocessing,workers,steps_per_epoch,validation_data,validation_steps,mode,kwargs)
keras.engine.training_generator_v1.convert_to_generator_like(data,batch_size=None,steps_per_epoch=None,epochs=1,shuffle=False)
keras.engine.training_generator_v1.model_iteration(model,data,steps_per_epoch=None,epochs=1,verbose=1,callbacks=None,validation_data=None,validation_steps=None,validation_freq=1,class_weight=None,max_queue_size=10,workers=1,use_multiprocessing=False,shuffle=False,initial_epoch=0,mode=ModeKeys.TRAIN,batch_size=None,steps_name='steps',**kwargs)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/topology.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/saving.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/partial_batch_padding_handler.py----------------------------------------
A:keras.engine.partial_batch_padding_handler.self.padding_mask->tensorflow.compat.v2.zeros(0)
A:keras.engine.partial_batch_padding_handler.original_batch_size->self.get_real_batch_size(dataset_batch)
A:keras.engine.partial_batch_padding_handler.mask->keras.backend.concatenate([tf.ones(original_batch_size), tf.zeros(missing_count)], axis=0)
A:keras.engine.partial_batch_padding_handler.padded_dict_batch[key]->_pad(value)
A:keras.engine.partial_batch_padding_handler.rank->len(batch.shape)
A:keras.engine.partial_batch_padding_handler.padding->keras.backend.stack([[0, missing_count]] + [[0, 0]] * (rank - 1))
A:keras.engine.partial_batch_padding_handler.padding_mask->keras.backend.get_value(self.padding_mask)
A:keras.engine.partial_batch_padding_handler.prediction->numpy.take(prediction, np.nonzero(padding_mask[:len(prediction)]), axis=0)
keras.engine.partial_batch_padding_handler.PartialBatchPaddingHandler(self,output_shape)
keras.engine.partial_batch_padding_handler.PartialBatchPaddingHandler.__init__(self,output_shape)
keras.engine.partial_batch_padding_handler.PartialBatchPaddingHandler.apply_mask(self,prediction_result)
keras.engine.partial_batch_padding_handler.PartialBatchPaddingHandler.get_real_batch_size(self,dataset_batch)
keras.engine.partial_batch_padding_handler.PartialBatchPaddingHandler.pad_batch(self,*dataset_batch_elements)
keras.engine.partial_batch_padding_handler.PartialBatchPaddingHandler.update_mask(self,padding_mask,dataset_batch)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/engine/keras_tensor.py----------------------------------------
A:keras.engine.keras_tensor.name->getattr(x, 'name', None)
A:keras.engine.keras_tensor.type_spec->UserRegisteredSpec(x.shape, x.dtype)
A:keras.engine.keras_tensor.inferred_value->tensorflow.compat.v2.compat.v1.shape(tf.compat.v1.placeholder(shape=self._inferred_value, dtype=tf.int32))
A:keras.engine.keras_tensor.shape->tensorflow.compat.v2.TensorShape(dim_list)
A:keras.engine.keras_tensor.tensor_oper->getattr(tensor_oper, '__func__', tensor_oper)
A:keras.engine.keras_tensor.result->tensorflow.compat.v2.RaggedTensor.from_uniform_row_length(result, rowlen, validate=False)
A:keras.engine.keras_tensor.splits->tensorflow.compat.v2.compat.v1.placeholder(ragged_spec.row_splits_dtype, [num_splits])
A:keras.engine.keras_tensor.rowlen->tensorflow.compat.v2.constant(axis_size, ragged_spec.row_splits_dtype)
A:keras.engine.keras_tensor.out->keras_tensor_cls.from_tensor(tensor)
A:keras.engine.keras_tensor.out._keras_mask->keras_tensor_from_tensor(tensor._keras_mask)
keras.engine.keras_tensor.KerasTensor(self,type_spec,inferred_value=None,name=None)
keras.engine.keras_tensor.KerasTensor.__array__(self)
keras.engine.keras_tensor.KerasTensor.__hash__(self)
keras.engine.keras_tensor.KerasTensor.__init__(self,type_spec,inferred_value=None,name=None)
keras.engine.keras_tensor.KerasTensor.__iter__(self)
keras.engine.keras_tensor.KerasTensor.__len__(self)
keras.engine.keras_tensor.KerasTensor.__repr__(self)
keras.engine.keras_tensor.KerasTensor.__str__(self)
keras.engine.keras_tensor.KerasTensor._overload_all_operators(cls,tensor_class)
keras.engine.keras_tensor.KerasTensor._overload_operator(cls,tensor_class,operator)
keras.engine.keras_tensor.KerasTensor._to_placeholder(self)
keras.engine.keras_tensor.KerasTensor.dtype(self)
keras.engine.keras_tensor.KerasTensor.from_tensor(cls,tensor)
keras.engine.keras_tensor.KerasTensor.from_type_spec(cls,type_spec,name=None)
keras.engine.keras_tensor.KerasTensor.get_shape(self)
keras.engine.keras_tensor.KerasTensor.is_tensor_like(self)
keras.engine.keras_tensor.KerasTensor.name(self)
keras.engine.keras_tensor.KerasTensor.op(self)
keras.engine.keras_tensor.KerasTensor.ref(self)
keras.engine.keras_tensor.KerasTensor.set_shape(self,shape)
keras.engine.keras_tensor.KerasTensor.shape(self)
keras.engine.keras_tensor.KerasTensor.type_spec(self)
keras.engine.keras_tensor.RaggedKerasTensor(KerasTensor)
keras.engine.keras_tensor.RaggedKerasTensor._to_placeholder(self)
keras.engine.keras_tensor.RaggedKerasTensor.ragged_rank(self)
keras.engine.keras_tensor.SparseKerasTensor(KerasTensor)
keras.engine.keras_tensor.SparseKerasTensor._to_placeholder(self)
keras.engine.keras_tensor.UserRegisteredSpec(self,shape,dtype)
keras.engine.keras_tensor.UserRegisteredSpec.__init__(self,shape,dtype)
keras.engine.keras_tensor.UserRegisteredSpec._component_specs(self)
keras.engine.keras_tensor.UserRegisteredSpec._from_components(self,components)
keras.engine.keras_tensor.UserRegisteredSpec._serialize(self)
keras.engine.keras_tensor.UserRegisteredSpec._to_components(self,value)
keras.engine.keras_tensor.UserRegisteredSpec.value_type(self)
keras.engine.keras_tensor.UserRegisteredTypeKerasTensor(self,user_registered_symbolic_object)
keras.engine.keras_tensor.UserRegisteredTypeKerasTensor.__init__(self,user_registered_symbolic_object)
keras.engine.keras_tensor.UserRegisteredTypeKerasTensor._to_placeholder(self)
keras.engine.keras_tensor.UserRegisteredTypeKerasTensor.from_tensor(cls,tensor)
keras.engine.keras_tensor.UserRegisteredTypeKerasTensor.from_type_spec(cls,type_spec,name=None)
keras.engine.keras_tensor._KerasTensorIterator(self,tensor,dim0)
keras.engine.keras_tensor._KerasTensorIterator.__init__(self,tensor,dim0)
keras.engine.keras_tensor._KerasTensorIterator.__iter__(self)
keras.engine.keras_tensor._KerasTensorIterator.__next__(self)
keras.engine.keras_tensor.keras_tensor_from_tensor(tensor)
keras.engine.keras_tensor.keras_tensor_from_type_spec(type_spec,name=None)
keras.engine.keras_tensor.keras_tensor_to_placeholder(x)
keras.engine.keras_tensor.register_keras_tensor_specialization(cls,keras_tensor_subclass)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/tests/model_architectures.py----------------------------------------
A:keras.tests.model_architectures.ModelFn->collections.namedtuple('ModelFn', ['model', 'input_shape', 'target_shape'])
A:keras.tests.model_architectures.model->keras.Model(inputs, outputs, name='m', trainable=False)
A:keras.tests.model_architectures.inputs->keras.Input(shape=(3,))
A:keras.tests.model_architectures.layer->keras.layers.RNN([keras.layers.LSTMCell(2) for _ in range(3)])
A:keras.tests.model_architectures.x->keras.layers.BatchNormalization()(x)
A:keras.tests.model_architectures.outputs->keras.layers.Dense(2)(x)
A:keras.tests.model_architectures.body_input->keras.Input(shape=(None,), name='body')
A:keras.tests.model_architectures.tags_input->keras.Input(shape=(2,), name='tags')
A:keras.tests.model_architectures.body_features->keras.layers.LSTM(5)(x)
A:keras.tests.model_architectures.pred_1->keras.layers.Dense(2, activation='sigmoid', name='priority')(x)
A:keras.tests.model_architectures.pred_2->keras.layers.Dense(3, activation='softmax', name='department')(x)
A:keras.tests.model_architectures.inner_model->keras.Sequential([keras.layers.Conv2D(2, 3, activation='relu'), keras.layers.Conv2D(2, 3, activation='relu')])
A:keras.tests.model_architectures.encoder_inputs->keras.Input(shape=(None, num_encoder_tokens))
A:keras.tests.model_architectures.encoder->keras.layers.LSTM(latent_dim, return_state=True)
A:keras.tests.model_architectures.(_, state_h, state_c)->encoder(encoder_inputs)
A:keras.tests.model_architectures.decoder_inputs->keras.Input(shape=(None, num_decoder_tokens))
A:keras.tests.model_architectures.decoder_lstm->keras.layers.LSTM(latent_dim, return_sequences=True, return_state=True)
A:keras.tests.model_architectures.(decoder_outputs, _, _)->decoder_lstm(decoder_inputs, initial_state=encoder_states)
A:keras.tests.model_architectures.decoder_dense->keras.layers.Dense(num_decoder_tokens, activation='softmax')
A:keras.tests.model_architectures.decoder_outputs->decoder_dense(decoder_outputs)
A:keras.tests.model_architectures.main_input->keras.Input(shape=(10,), dtype='int32', name='main_input')
A:keras.tests.model_architectures.lstm_out->keras.layers.LSTM(3)(x)
A:keras.tests.model_architectures.auxiliary_output->keras.layers.Dense(1, activation='sigmoid', name='aux_output')(lstm_out)
A:keras.tests.model_architectures.auxiliary_input->keras.Input(shape=(5,), name='aux_input')
A:keras.tests.model_architectures.main_output->keras.layers.Dense(1, activation='sigmoid', name='main_output')(x)
A:keras.tests.model_architectures.inputs_1->keras.Input((5, 5, 3))
A:keras.tests.model_architectures.inputs_2->keras.Input((5, 5, 3))
A:keras.tests.model_architectures.x1->inner_model(inputs_1)
A:keras.tests.model_architectures.x2->inner_model(inputs_2)
A:keras.tests.model_architectures.self.dense1->keras.layers.Dense(4, activation='relu')
A:keras.tests.model_architectures.self.dense2->keras.layers.Dense(2, activation='relu')
A:keras.tests.model_architectures.self.bn->keras.layers.BatchNormalization()
A:keras.tests.model_architectures.self.dp->keras.layers.Dropout(0.5)
A:keras.tests.model_architectures.self.inner_subclass_model->MySubclassModel()
A:keras.tests.model_architectures.inner_subclass_model->MySubclassModel()
A:keras.tests.model_architectures.self.inner_functional_model->get_functional_model()
A:keras.tests.model_architectures.self.dense->keras.layers.Dense(3, activation='relu')
keras.tests.model_architectures.MySubclassModel(self,input_dim=3)
keras.tests.model_architectures.MySubclassModel.__init__(self,input_dim=3)
keras.tests.model_architectures.MySubclassModel.call(self,inputs,**kwargs)
keras.tests.model_architectures.MySubclassModel.from_config(cls,config)
keras.tests.model_architectures.MySubclassModel.get_config(self)
keras.tests.model_architectures.basic_sequential()
keras.tests.model_architectures.basic_sequential_deferred()
keras.tests.model_architectures.functional_with_keyword_args()
keras.tests.model_architectures.get_models(exclude_models=None)
keras.tests.model_architectures.lstm()
keras.tests.model_architectures.multi_input_multi_output()
keras.tests.model_architectures.nested_functional_in_subclassed_model()
keras.tests.model_architectures.nested_sequential_in_functional()
keras.tests.model_architectures.nested_subclassed_in_functional_model()
keras.tests.model_architectures.nested_subclassed_model()
keras.tests.model_architectures.seq_to_seq()
keras.tests.model_architectures.shared_layer_functional()
keras.tests.model_architectures.shared_layer_subclassed_model()
keras.tests.model_architectures.shared_sequential()
keras.tests.model_architectures.stacked_rnn()


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/tests/model_subclassing_test_util.py----------------------------------------
A:keras.tests.model_subclassing_test_util.self.conv1->keras.layers.Conv2D(32, (3, 3), activation='relu')
A:keras.tests.model_subclassing_test_util.self.flatten->keras.layers.Flatten()
A:keras.tests.model_subclassing_test_util.self.dense1->keras.layers.Dense(1)
A:keras.tests.model_subclassing_test_util.x->test_model(x)
A:keras.tests.model_subclassing_test_util.shared_layer->keras.layers.Dense(32, activation='relu')
A:keras.tests.model_subclassing_test_util.model->keras.testing_utils._MultiIOSubclassModel(branch_a, branch_b, name='test_model')
A:keras.tests.model_subclassing_test_util.self.dense2->keras.layers.Dense(1, activation='softmax')
A:keras.tests.model_subclassing_test_util.self.bn->keras.layers.BatchNormalization()
A:keras.tests.model_subclassing_test_util.self.test_net->self.get_functional_graph_model(32, 4)
A:keras.tests.model_subclassing_test_util.self.bnself.bn->keras.layers.BatchNormalization()
A:keras.tests.model_subclassing_test_util.inputs->keras.Input(shape=(input_dim,))
A:keras.tests.model_subclassing_test_util.outputs->keras.layers.Dense(num_classes)(x)
A:keras.tests.model_subclassing_test_util.test_model->Inner()
keras.tests.model_subclassing_test_util.CustomCallModel(self)
keras.tests.model_subclassing_test_util.CustomCallModel.__init__(self)
keras.tests.model_subclassing_test_util.CustomCallModel.call(self,first,second,fiddle_with_output='no',training=True)
keras.tests.model_subclassing_test_util.NestedTestModel1(self,num_classes=2)
keras.tests.model_subclassing_test_util.NestedTestModel1.__init__(self,num_classes=2)
keras.tests.model_subclassing_test_util.NestedTestModel1.call(self,inputs)
keras.tests.model_subclassing_test_util.NestedTestModel2(self,num_classes=2)
keras.tests.model_subclassing_test_util.NestedTestModel2.__init__(self,num_classes=2)
keras.tests.model_subclassing_test_util.NestedTestModel2.call(self,inputs)
keras.tests.model_subclassing_test_util.NestedTestModel2.get_functional_graph_model(input_dim,num_classes)
keras.tests.model_subclassing_test_util.SimpleConvTestModel(self,num_classes=10)
keras.tests.model_subclassing_test_util.SimpleConvTestModel.__init__(self,num_classes=10)
keras.tests.model_subclassing_test_util.SimpleConvTestModel.call(self,x)
keras.tests.model_subclassing_test_util.TrainingMaskingModel(self)
keras.tests.model_subclassing_test_util.TrainingMaskingModel.__init__(self)
keras.tests.model_subclassing_test_util.TrainingMaskingModel.call(self,x,training=False,mask=None)
keras.tests.model_subclassing_test_util.TrainingNoDefaultModel(self)
keras.tests.model_subclassing_test_util.TrainingNoDefaultModel.__init__(self)
keras.tests.model_subclassing_test_util.TrainingNoDefaultModel.call(self,x,training)
keras.tests.model_subclassing_test_util.get_multi_io_subclass_model(use_bn=False,use_dp=False,num_classes=(2,3))
keras.tests.model_subclassing_test_util.get_nested_model_3(input_dim,num_classes)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/type/types.py----------------------------------------
keras.type.types.Layer(object,metaclass=abc.ABCMeta)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/type/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/preprocessing/image_dataset.py----------------------------------------
A:keras.preprocessing.image_dataset.interpolation->keras.layers.preprocessing.image_preprocessing.get_interpolation(interpolation)
A:keras.preprocessing.image_dataset.seed->numpy.random.randint(1000000.0)
A:keras.preprocessing.image_dataset.(image_paths, labels, class_names)->keras.preprocessing.dataset_utils.index_directory(directory, labels, formats=ALLOWLIST_FORMATS, class_names=class_names, shuffle=shuffle, seed=seed, follow_links=follow_links)
A:keras.preprocessing.image_dataset.(image_paths, labels)->keras.preprocessing.dataset_utils.get_training_or_validation_split(image_paths, labels, validation_split, subset)
A:keras.preprocessing.image_dataset.dataset->dataset.batch(batch_size).batch(batch_size)
A:keras.preprocessing.image_dataset.path_ds->tensorflow.compat.v2.data.Dataset.from_tensor_slices(image_paths)
A:keras.preprocessing.image_dataset.img_ds->tensorflow.compat.v2.data.Dataset.zip((img_ds, label_ds))
A:keras.preprocessing.image_dataset.label_ds->keras.preprocessing.dataset_utils.labels_to_dataset(labels, label_mode, num_classes)
A:keras.preprocessing.image_dataset.img->tensorflow.compat.v2.image.resize(img, image_size, method=interpolation)
keras.preprocessing.image_dataset.image_dataset_from_directory(directory,labels='inferred',label_mode='int',class_names=None,color_mode='rgb',batch_size=32,image_size=(256,256),shuffle=True,seed=None,validation_split=None,subset=None,interpolation='bilinear',follow_links=False,smart_resize=False)
keras.preprocessing.image_dataset.load_image(path,image_size,num_channels,interpolation,smart_resize=False)
keras.preprocessing.image_dataset.paths_and_labels_to_dataset(image_paths,image_size,num_channels,labels,label_mode,num_classes,interpolation,smart_resize=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/preprocessing/text.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/preprocessing/dataset_utils.py----------------------------------------
A:keras.preprocessing.dataset_utils.class_indices->dict(zip(class_names, range(len(class_names))))
A:keras.preprocessing.dataset_utils.pool->multiprocessing.pool.ThreadPool()
A:keras.preprocessing.dataset_utils.(partial_filenames, partial_labels)->res.get()
A:keras.preprocessing.dataset_utils.labels->numpy.zeros((len(filenames),), dtype='int32')
A:keras.preprocessing.dataset_utils.seed->numpy.random.randint(1000000.0)
A:keras.preprocessing.dataset_utils.rng->numpy.random.RandomState(seed)
A:keras.preprocessing.dataset_utils.walk->os.walk(directory, followlinks=follow_links)
A:keras.preprocessing.dataset_utils.dirname->os.path.basename(directory)
A:keras.preprocessing.dataset_utils.valid_files->iter_valid_files(directory, follow_links, formats)
A:keras.preprocessing.dataset_utils.absolute_path->os.path.join(root, fname)
A:keras.preprocessing.dataset_utils.relative_path->os.path.join(dirname, os.path.relpath(absolute_path, directory))
A:keras.preprocessing.dataset_utils.num_val_samples->int(validation_split * len(samples))
A:keras.preprocessing.dataset_utils.label_ds->label_ds.map(lambda x: tf.one_hot(x, num_classes)).map(lambda x: tf.one_hot(x, num_classes))
keras.preprocessing.dataset_utils.check_validation_split_arg(validation_split,subset,shuffle,seed)
keras.preprocessing.dataset_utils.get_training_or_validation_split(samples,labels,validation_split,subset)
keras.preprocessing.dataset_utils.index_directory(directory,labels,formats,class_names=None,shuffle=True,seed=None,follow_links=False)
keras.preprocessing.dataset_utils.index_subdirectory(directory,class_indices,follow_links,formats)
keras.preprocessing.dataset_utils.iter_valid_files(directory,follow_links,formats)
keras.preprocessing.dataset_utils.labels_to_dataset(labels,label_mode,num_classes)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/preprocessing/timeseries.py----------------------------------------
A:keras.preprocessing.timeseries.end_index->len(data)
A:keras.preprocessing.timeseries.num_seqs->min(num_seqs, len(targets))
A:keras.preprocessing.timeseries.start_positions->numpy.arange(0, num_seqs, sequence_stride, dtype=index_dtype)
A:keras.preprocessing.timeseries.seed->numpy.random.randint(1000000.0)
A:keras.preprocessing.timeseries.rng->numpy.random.RandomState(seed)
A:keras.preprocessing.timeseries.sequence_length->tensorflow.compat.v2.cast(sequence_length, dtype=index_dtype)
A:keras.preprocessing.timeseries.sampling_rate->tensorflow.compat.v2.cast(sampling_rate, dtype=index_dtype)
A:keras.preprocessing.timeseries.positions_ds->tensorflow.compat.v2.data.Dataset.from_tensors(start_positions).repeat()
A:keras.preprocessing.timeseries.indices->tensorflow.compat.v2.data.Dataset.zip((tf.data.Dataset.range(len(start_positions)), positions_ds)).map(lambda i, positions: positions[i], num_parallel_calls=tf.data.AUTOTUNE)
A:keras.preprocessing.timeseries.dataset->tensorflow.compat.v2.data.Dataset.zip((dataset.repeat(), indices_ds)).map(lambda steps, inds: tf.compat.v1.gather(steps, inds), num_parallel_calls=tf.data.AUTOTUNE)
A:keras.preprocessing.timeseries.target_ds->sequences_from_indices(targets, indices, start_index, end_index)
keras.preprocessing.timeseries.sequences_from_indices(array,indices_ds,start_index,end_index)
keras.preprocessing.timeseries.timeseries_dataset_from_array(data,targets,sequence_length,sequence_stride=1,sampling_rate=1,batch_size=128,shuffle=False,seed=None,start_index=None,end_index=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/preprocessing/sequence.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/preprocessing/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/preprocessing/image.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/preprocessing/text_dataset.py----------------------------------------
A:keras.preprocessing.text_dataset.seed->numpy.random.randint(1000000.0)
A:keras.preprocessing.text_dataset.(file_paths, labels, class_names)->keras.preprocessing.dataset_utils.index_directory(directory, labels, formats=('.txt',), class_names=class_names, shuffle=shuffle, seed=seed, follow_links=follow_links)
A:keras.preprocessing.text_dataset.(file_paths, labels)->keras.preprocessing.dataset_utils.get_training_or_validation_split(file_paths, labels, validation_split, subset)
A:keras.preprocessing.text_dataset.dataset->dataset.batch(batch_size).batch(batch_size)
A:keras.preprocessing.text_dataset.path_ds->tensorflow.compat.v2.data.Dataset.from_tensor_slices(file_paths)
A:keras.preprocessing.text_dataset.string_ds->tensorflow.compat.v2.data.Dataset.zip((string_ds, label_ds))
A:keras.preprocessing.text_dataset.label_ds->keras.preprocessing.dataset_utils.labels_to_dataset(labels, label_mode, num_classes)
A:keras.preprocessing.text_dataset.txt->tensorflow.compat.v2.compat.v1.strings.substr(txt, 0, max_length)
keras.preprocessing.text_dataset.path_to_string_content(path,max_length)
keras.preprocessing.text_dataset.paths_and_labels_to_dataset(file_paths,labels,label_mode,num_classes,max_length)
keras.preprocessing.text_dataset.text_dataset_from_directory(directory,labels='inferred',label_mode='int',class_names=None,batch_size=32,max_length=None,shuffle=True,seed=None,validation_split=None,subset=None,follow_links=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/hdf5_format.py----------------------------------------
A:keras.saving.hdf5_format.sequential_lib->LazyLoader('sequential_lib', globals(), 'keras.engine.sequential')
A:keras.saving.hdf5_format.proceed->ask_to_proceed_with_overwrite(filepath)
A:keras.saving.hdf5_format.dirpath->os.path.dirname(filepath)
A:keras.saving.hdf5_format.f->h5py.File(filepath, mode='r')
A:keras.saving.hdf5_format.model_metadata->keras.saving.saving_utils.model_metadata(model, include_optimizer)
A:keras.saving.hdf5_format.f.attrs[k]->json.dumps(v, default=json_utils.get_json_type).encode('utf8')
A:keras.saving.hdf5_format.model_weights_group->h5py.File(filepath, mode='r').create_group('model_weights')
A:keras.saving.hdf5_format.model_config->keras.saving.saved_model.json_utils.decode(model_config)
A:keras.saving.hdf5_format.model->keras.saving.model_config.model_from_config(model_config, custom_objects=custom_objects)
A:keras.saving.hdf5_format.training_config->keras.saving.saved_model.json_utils.decode(training_config)
A:keras.saving.hdf5_format.optimizer_weight_values->load_optimizer_weights_from_hdf5_group(f)
A:keras.saving.hdf5_format.forward_weights->preprocess_weights_for_loading(layer.forward_layer, weights[:num_weights_per_layer], original_keras_version, original_backend)
A:keras.saving.hdf5_format.backward_weights->preprocess_weights_for_loading(layer.backward_layer, weights[num_weights_per_layer:], original_keras_version, original_backend)
A:keras.saving.hdf5_format.num_trainable_weights->len(sublayer.trainable_weights)
A:keras.saving.hdf5_format.num_non_trainable_weights->len(sublayer.non_trainable_weights)
A:keras.saving.hdf5_format.preprocessed->preprocess_weights_for_loading(layer=sublayer, weights=trainable_weights[:num_trainable_weights] + non_trainable_weights[:num_non_trainable_weights], original_keras_version=original_keras_version, original_backend=original_backend)
A:keras.saving.hdf5_format.weights->_legacy_weights(layer)
A:keras.saving.hdf5_format.weights[0]->numpy.transpose(weights[0], (3, 2, 0, 1))
A:keras.saving.hdf5_format.kernel->numpy.transpose(kernel, (2, 3, 1, 0))
A:keras.saving.hdf5_format.recurrent_kernel->numpy.transpose(recurrent_kernel, (2, 3, 1, 0))
A:keras.saving.hdf5_format.bias->numpy.concatenate([weights[2], weights[8], weights[5], weights[11]], axis=-1)
A:keras.saving.hdf5_format.weights[1]->numpy.transpose(weights[1], (3, 2, 0, 1))
A:keras.saving.hdf5_format.kernels->transform_kernels(weights[0], transpose_input(from_cudnn), n_gates)
A:keras.saving.hdf5_format.recurrent_kernels->transform_kernels(weights[1], lambda k: k.T, n_gates)
A:keras.saving.hdf5_format.biases->numpy.array(weights[2]).reshape((2, -1) if from_cudnn else -1)
A:keras.saving.hdf5_format.symbolic_weights->_legacy_weights(layer)
A:keras.saving.hdf5_format.weights_group->hdf5_group.create_group('optimizer_weights')
A:keras.saving.hdf5_format.weight_values->preprocess_weights_for_loading(layer, weight_values, original_keras_version, original_backend)
A:keras.saving.hdf5_format.param_dset->f.create_group(layer.name).create_dataset(name, val.shape, dtype=val.dtype)
A:keras.saving.hdf5_format.optimizer_weight_names->load_attributes_from_hdf5_group(weights_group, 'weight_names')
A:keras.saving.hdf5_format.f.attrs['backend']->keras.backend.backend().encode('utf8')
A:keras.saving.hdf5_format.f.attrs['keras_version']->str(keras_version).encode('utf8')
A:keras.saving.hdf5_format.g->h5py.File(filepath, mode='r').create_group(layer.name)
A:keras.saving.hdf5_format.original_keras_version->original_keras_version.decode('utf8').decode('utf8')
A:keras.saving.hdf5_format.original_backend->original_backend.decode('utf8').decode('utf8')
A:keras.saving.hdf5_format.layer_names->load_attributes_from_hdf5_group(f, 'layer_names')
A:keras.saving.hdf5_format.weight_names->load_attributes_from_hdf5_group(g, 'weight_names')
A:keras.saving.hdf5_format.data_npy->numpy.asarray(data)
A:keras.saving.hdf5_format.chunked_data->numpy.array_split(data_npy, num_chunks)
keras.saving.hdf5_format._convert_rnn_weights(layer,weights)
keras.saving.hdf5_format._legacy_weights(layer)
keras.saving.hdf5_format.load_attributes_from_hdf5_group(group,name)
keras.saving.hdf5_format.load_model_from_hdf5(filepath,custom_objects=None,compile=True)
keras.saving.hdf5_format.load_optimizer_weights_from_hdf5_group(hdf5_group)
keras.saving.hdf5_format.load_weights_from_hdf5_group(f,layers)
keras.saving.hdf5_format.load_weights_from_hdf5_group_by_name(f,layers,skip_mismatch=False)
keras.saving.hdf5_format.preprocess_weights_for_loading(layer,weights,original_keras_version=None,original_backend=None)
keras.saving.hdf5_format.save_attributes_to_hdf5_group(group,name,data)
keras.saving.hdf5_format.save_model_to_hdf5(model,filepath,overwrite=True,include_optimizer=True)
keras.saving.hdf5_format.save_optimizer_weights_to_hdf5_group(hdf5_group,optimizer)
keras.saving.hdf5_format.save_weights_to_hdf5_group(f,layers)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/saving_utils.py----------------------------------------
A:keras.saving.saving_utils.input_specs->_enforce_names_consistency(input_specs)
A:keras.saving.saving_utils.input_signature->model_input_signature(model)
A:keras.saving.saving_utils.outputs->tensorflow.compat.v2.nest.flatten(outputs)
A:keras.saving.saving_utils.output_names->keras.engine.compile_utils.create_pseudo_output_names(outputs)
A:keras.saving.saving_utils.model_config['config']->model.get_config()
A:keras.saving.saving_utils.metadata->dict(keras_version=str(keras_version), backend=K.backend(), model_config=model_config)
A:keras.saving.saving_utils.training_config->model._get_compile_args(user_metrics=False)
A:keras.saving.saving_utils.metadata['training_config']->_serialize_nested_config(training_config)
A:keras.saving.saving_utils.optimizer->keras.optimizers.deserialize(optimizer_config)
A:keras.saving.saving_utils.loss_config->model._get_compile_args(user_metrics=False).get('loss', None)
A:keras.saving.saving_utils.loss->_deserialize_nested_config(losses.deserialize, loss_config)
A:keras.saving.saving_utils.metrics_config->model._get_compile_args(user_metrics=False).get('metrics', None)
A:keras.saving.saving_utils.metrics->_deserialize_nested_config(_deserialize_metric, metrics_config)
A:keras.saving.saving_utils.weighted_metrics_config->model._get_compile_args(user_metrics=False).get('weighted_metrics', None)
A:keras.saving.saving_utils.weighted_metrics->_deserialize_nested_config(_deserialize_metric, weighted_metrics_config)
A:keras.saving.saving_utils.spec->copy.deepcopy(spec)
A:keras.saving.saving_utils.flat_specs->tensorflow.compat.v2.nest.flatten(specs)
A:keras.saving.saving_utils.specs->tensorflow.compat.v2.nest.map_structure(_clear_name, specs)
keras.saving.saving_utils._deserialize_metric(metric_config)
keras.saving.saving_utils._deserialize_nested_config(deserialize_fn,config)
keras.saving.saving_utils._enforce_names_consistency(specs)
keras.saving.saving_utils._serialize_nested_config(config)
keras.saving.saving_utils.compile_args_from_training_config(training_config,custom_objects=None)
keras.saving.saving_utils.extract_model_metrics(model)
keras.saving.saving_utils.is_hdf5_filepath(filepath)
keras.saving.saving_utils.model_input_signature(model,keep_original_batch_size=False)
keras.saving.saving_utils.model_metadata(model,include_optimizer=True,require_config=True)
keras.saving.saving_utils.raise_model_input_error(model)
keras.saving.saving_utils.should_overwrite(filepath,overwrite)
keras.saving.saving_utils.trace_model_call(model,input_signature=None)
keras.saving.saving_utils.try_build_compiled_arguments(model)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/saved_model_experimental.py----------------------------------------
A:keras.saving.saved_model_experimental.metrics_lib->LazyLoader('metrics_lib', globals(), 'keras.metrics')
A:keras.saving.saved_model_experimental.models_lib->LazyLoader('models_lib', globals(), 'keras.models')
A:keras.saving.saved_model_experimental.sequential->LazyLoader('sequential', globals(), 'keras.engine.sequential')
A:keras.saving.saved_model_experimental.model_json->f.read()
A:keras.saving.saved_model_experimental.model_json_filepath->os.path.join(tf.compat.as_bytes(saved_model_path), tf.compat.as_bytes(tf.saved_model.ASSETS_DIRECTORY), tf.compat.as_bytes(SAVED_MODEL_FILENAME_JSON))
A:keras.saving.saved_model_experimental.checkpoint_prefix->os.path.join(tf.compat.as_text(saved_model_path), tf.compat.as_text(tf.saved_model.VARIABLES_DIRECTORY), tf.compat.as_text(tf.saved_model.VARIABLES_FILENAME))
A:keras.saving.saved_model_experimental.builder->tensorflow.python.saved_model.builder._SavedModelBuilder(path)
A:keras.saving.saved_model_experimental.checkpoint_path->_export_model_variables(model, path)
A:keras.saving.saved_model_experimental.(var_list, _, _)->tensorflow.python.training.tracking.graph_view.ObjectGraphView(model).serialize_object_graph()
A:keras.saving.saved_model_experimental.model_graph->tensorflow.compat.v2.compat.v1.get_default_graph()
A:keras.saving.saved_model_experimental.input_tensors->tensorflow.compat.v2.nest.map_structure(create_placeholder, input_signature)
A:keras.saving.saved_model_experimental.clone->LazyLoader('models_lib', globals(), 'keras.models').clone_and_build_model(model, input_tensors=input_tensors, custom_objects=custom_objects, compile_clone=compile_clone)
A:keras.saving.saved_model_experimental.clone_var_list->_get_var_list(clone)
A:keras.saving.saved_model_experimental.status->LazyLoader('models_lib', globals(), 'keras.models').clone_and_build_model(model, input_tensors=input_tensors, custom_objects=custom_objects, compile_clone=compile_clone).load_weights(checkpoint_path)
A:keras.saving.saved_model_experimental.metrics->keras.saving.saving_utils.extract_model_metrics(model)
A:keras.saving.saved_model_experimental.local_vars->set(tf.compat.v1.get_collection(tf.compat.v1.GraphKeys.LOCAL_VARIABLES))
A:keras.saving.saved_model_experimental.vars_to_add->vars_to_add.difference(local_vars).difference(local_vars)
A:keras.saving.saved_model_experimental.export_outputs->keras.saving.utils_v1.export_outputs_for_mode(mode, predictions=outputs_dict, loss=model.total_loss if model.optimizer else None, metrics=metrics)
A:keras.saving.saved_model_experimental.model->keras.saving.model_config.model_from_json(model_json, custom_objects=custom_objects)
A:keras.saving.saved_model_experimental.variables_dir->_get_variables_dir(export_dir)
A:keras.saving.saved_model_experimental.assets_destination_dir->_get_assets_dir(export_dir)
keras.saving.saved_model_experimental._assert_same_non_optimizer_objects(model,model_graph,clone,clone_graph)
keras.saving.saved_model_experimental._create_signature_def_map(model,mode)
keras.saving.saved_model_experimental._export_mode(mode,has_saved_vars,builder,model,custom_objects,checkpoint_path,input_signature)
keras.saving.saved_model_experimental._export_model_json(model,saved_model_path)
keras.saving.saved_model_experimental._export_model_variables(model,saved_model_path)
keras.saving.saved_model_experimental._get_assets_dir(export_dir)
keras.saving.saved_model_experimental._get_or_create_assets_dir(export_dir)
keras.saving.saved_model_experimental._get_or_create_variables_dir(export_dir)
keras.saving.saved_model_experimental._get_var_list(model)
keras.saving.saved_model_experimental._get_variables_dir(export_dir)
keras.saving.saved_model_experimental._get_variables_path(export_dir)
keras.saving.saved_model_experimental._save_v1_format(model,path,custom_objects,as_text,input_signature)
keras.saving.saved_model_experimental.create_placeholder(spec)
keras.saving.saved_model_experimental.export_saved_model(model,saved_model_path,custom_objects=None,as_text=False,input_signature=None,serving_only=False)
keras.saving.saved_model_experimental.load_from_saved_model(saved_model_path,custom_objects=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/model_config.py----------------------------------------
A:keras.saving.model_config.config->keras.saving.saved_model.json_utils.decode(json_string)
keras.saving.model_config.model_from_config(config,custom_objects=None)
keras.saving.model_config.model_from_json(json_string,custom_objects=None)
keras.saving.model_config.model_from_yaml(yaml_string,custom_objects=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/save.py----------------------------------------
A:keras.saving.save.filepath->path_to_string(filepath)
keras.saving.save.load_model(filepath,custom_objects=None,compile=True,options=None)
keras.saving.save.save_model(model,filepath,overwrite=True,include_optimizer=True,save_format=None,signatures=None,options=None,save_traces=True)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/saved_model/load.py----------------------------------------
A:keras.saving.saved_model.load.models_lib->LazyLoader('models_lib', globals(), 'keras.models')
A:keras.saving.saved_model.load.base_layer->LazyLoader('base_layer', globals(), 'keras.engine.base_layer')
A:keras.saving.saved_model.load.layers_module->LazyLoader('layers_module', globals(), 'keras.layers')
A:keras.saving.saved_model.load.input_layer->LazyLoader('input_layer', globals(), 'keras.engine.input_layer')
A:keras.saving.saved_model.load.functional_lib->LazyLoader('functional_lib', globals(), 'keras.engine.functional')
A:keras.saving.saved_model.load.training_lib->LazyLoader('training_lib', globals(), 'keras.engine.training')
A:keras.saving.saved_model.load.training_lib_v1->LazyLoader('training_lib_v1', globals(), 'keras.engine.training_v1')
A:keras.saving.saved_model.load.metrics->LazyLoader('metrics', globals(), 'keras.metrics')
A:keras.saving.saved_model.load.recurrent->LazyLoader('recurrent', globals(), 'keras.layers.recurrent')
A:keras.saving.saved_model.load.PUBLIC_ATTRIBUTES->keras.saving.saved_model.serialized_attributes.CommonEndpoints.all_functions.union(CommonEndpoints.all_checkpointable_objects)
A:keras.saving.saved_model.load.metadata->keras.saving.saved_model.json_utils.decode(metadata)
A:keras.saving.saved_model.load.path_to_metadata_pb->os.path.join(path, constants.SAVED_METADATA_PATH)
A:keras.saving.saved_model.load.file_content->f.read()
A:keras.saving.saved_model.load.keras_loader->KerasObjectLoader(metadata, object_graph_def)
A:keras.saving.saved_model.load.loaded->tensorflow.compat.v2.__internal__.saved_model.load_partial(path, nodes_to_load, options=options)
A:keras.saving.saved_model.load.training_config->models_lib.Functional(inputs=[], outputs=[], name=config['name'])._serialized_attributes['metadata'].get('training_config', None)
A:keras.saving.saved_model.load.sess->keras.backend.get_session()
A:keras.saving.saved_model.load.node_paths->_generate_object_paths(object_graph_def)
A:keras.saving.saved_model.load.current_node->nodes_to_visit.pop()
A:keras.saving.saved_model.load.paths[reference.node_id]->'{}.{}'.format(current_path, reference.local_name)
A:keras.saving.saved_model.load.self._traversed_nodes_from_config->set()
A:keras.saving.saved_model.load.dependencies->list(node._self_unconditional_dependency_names)
A:keras.saving.saved_model.load.obj_child->metrics.deserialize(generic_utils.serialize_keras_class_and_config(class_name, config))._lookup_dependency(reference.local_name)
A:keras.saving.saved_model.load.metric_list_node_id->self._search_for_child_node(node_id, [constants.KERAS_ATTR, 'layer_metrics'])
A:keras.saving.saved_model.load.metric->obj_metrics.get(reference.local_name)
A:keras.saving.saved_model.load.metric_path->'{}.layer_metrics.{}'.format(constants.KERAS_ATTR, reference.local_name)
A:keras.saving.saved_model.load.setter->self._config_node_setter(_revive_setter)
A:keras.saving.saved_model.load.child_path->'{}.{}'.format(parent_path, child_name)
A:keras.saving.saved_model.load.self.loaded_nodes[node_metadata.node_id]->self._load_layer(node_metadata.node_id, node_metadata.identifier, node_metadata.metadata)
A:keras.saving.saved_model.load.config->keras.saving.saved_model.json_utils.decode(metadata).get('config')
A:keras.saving.saved_model.load.child_nodes->self._get_child_layer_node_ids(node_id)
A:keras.saving.saved_model.load.(obj, setter)->revive_custom_object(identifier, metadata)
A:keras.saving.saved_model.load.obj->LazyLoader('metrics', globals(), 'keras.metrics').deserialize(generic_utils.serialize_keras_class_and_config(class_name, config))
A:keras.saving.saved_model.load.class_name->tensorflow.compat.v2.compat.as_str(metadata['class_name'])
A:keras.saving.saved_model.load.model->LazyLoader('models_lib', globals(), 'keras.models').Functional(inputs=[], outputs=[], name=config['name'])
A:keras.saving.saved_model.load.layers->self._get_child_layer_node_ids(node_id)
A:keras.saving.saved_model.load.shared_object_id->keras.saving.saved_model.json_utils.decode(metadata).get('shared_object_id')
A:keras.saving.saved_model.load.must_restore_from_config->keras.saving.saved_model.json_utils.decode(metadata).get('must_restore_from_config')
A:keras.saving.saved_model.load.save_spec->keras.saving.saved_model.json_utils.decode(metadata).get('save_spec')
A:keras.saving.saved_model.load.build_input_shape->self._infer_inputs(node_id, convert_to_shapes=True)
A:keras.saving.saved_model.load.built->self._try_build_layer(obj, node_id, build_input_shape)
A:keras.saving.saved_model.load.all_initialized_models->set()
A:keras.saving.saved_model.load.model_id->self._models_to_reconstruct.pop(0)
A:keras.saving.saved_model.load.input_specs->self._infer_inputs(first_layer)
A:keras.saving.saved_model.load.input_shapes->self._infer_inputs(first_layer, convert_to_shapes=True)
A:keras.saving.saved_model.load.(inputs, outputs, created_layers)->LazyLoader('functional_lib', globals(), 'keras.engine.functional').reconstruct_from_config(config, created_layers={layer.name: layer for layer in layers})
A:keras.saving.saved_model.load.pattern->re.compile('layer-(\\d+)')
A:keras.saving.saved_model.load.m->re.compile('layer-(\\d+)').match(child.local_name)
A:keras.saving.saved_model.load.layer_n->int(m.group(1))
A:keras.saving.saved_model.load.num_layers->max(layer_n + 1, num_layers)
A:keras.saving.saved_model.load.child->child_layers.get(n)
A:keras.saving.saved_model.load.coder->tensorflow.compat.v2.__internal__.saved_model.StructureCoder()
A:keras.saving.saved_model.load.call_fn_id->self._search_for_child_node(layer_node_id, ['call_and_return_all_conditional_losses'])
A:keras.saving.saved_model.load.structured_input_signature->tensorflow.compat.v2.__internal__.saved_model.StructureCoder().decode_proto(call_fn_proto.canonicalized_input_signature)
A:keras.saving.saved_model.load.layer_call->getattr(_get_keras_attr(layer), 'call_and_return_conditional_losses', None)
A:keras.saving.saved_model.load.layer.call->types.MethodType(_unable_to_call_layer_due_to_serialization_issue, layer)
A:keras.saving.saved_model.load.inputs->infer_inputs_from_restored_call_function(call_fn)
A:keras.saving.saved_model.load.layer.states->getattr(_get_keras_attr(layer), 'states', None)
A:keras.saving.saved_model.load.metric.update_state->types.MethodType(metrics_utils.update_state_wrapper(metric.keras_api.update_state), metric)
A:keras.saving.saved_model.load.losses->layer._serialized_attributes.get('regularization_losses', [])
A:keras.saving.saved_model.load.activity_regularizer->getattr(_get_keras_attr(layer), 'activity_regularizer_fn', None)
A:keras.saving.saved_model.load.parent_classes->revived_classes.get(identifier, None)
A:keras.saving.saved_model.load.revived_cls->type(tf.compat.as_str(metadata['class_name']), parent_classes, {})
A:keras.saving.saved_model.load.metrics_list->getattr(_get_keras_attr(layer), 'layer_metrics', {})
A:keras.saving.saved_model.load.init_args->dict(name=metadata['name'], dtype=metadata['dtype'], sparse=metadata['sparse'], ragged=metadata['ragged'], batch_input_shape=metadata['batch_input_shape'])
A:keras.saving.saved_model.load.revived_obj->cls(name=metadata['name'])
A:keras.saving.saved_model.load.revived_obj.input_spec->recursively_deserialize_keras_object(metadata['input_spec'], module_objects={'InputSpec': input_spec.InputSpec})
A:keras.saving.saved_model.load.revived_obj.activity_regularizer->keras.regularizers.deserialize(metadata['activity_regularizer'])
A:keras.saving.saved_model.load.common_shape->get_common_shape(x.shape, y.shape)
A:keras.saving.saved_model.load.spec->tensorflow.compat.v2.nest.map_structure(common_spec, spec, spec2)
keras.saving.saved_model.load.KerasObjectLoader(self,metadata,object_graph_def)
keras.saving.saved_model.load.KerasObjectLoader.__init__(self,metadata,object_graph_def)
keras.saving.saved_model.load.KerasObjectLoader._add_children_recreated_from_config(self,obj,proto,node_id)
keras.saving.saved_model.load.KerasObjectLoader._config_node_setter(self,setter)
keras.saving.saved_model.load.KerasObjectLoader._get_child_layer_node_ids(self,node_id)
keras.saving.saved_model.load.KerasObjectLoader._infer_inputs(self,layer_node_id,convert_to_shapes=False)
keras.saving.saved_model.load.KerasObjectLoader._load_edges(self)
keras.saving.saved_model.load.KerasObjectLoader._load_layer(self,node_id,identifier,metadata)
keras.saving.saved_model.load.KerasObjectLoader._reconstruct_all_models(self)
keras.saving.saved_model.load.KerasObjectLoader._reconstruct_model(self,model_id,model,layers)
keras.saving.saved_model.load.KerasObjectLoader._revive_from_config(self,identifier,metadata,node_id)
keras.saving.saved_model.load.KerasObjectLoader._revive_graph_network(self,identifier,metadata,node_id)
keras.saving.saved_model.load.KerasObjectLoader._revive_layer_or_model_from_config(self,metadata,node_id)
keras.saving.saved_model.load.KerasObjectLoader._revive_metric_from_config(self,metadata)
keras.saving.saved_model.load.KerasObjectLoader._search_for_child_node(self,parent_id,path_to_child)
keras.saving.saved_model.load.KerasObjectLoader._try_build_layer(self,obj,node_id,build_input_shape)
keras.saving.saved_model.load.KerasObjectLoader._unblock_model_reconstruction(self,layer_id,layer)
keras.saving.saved_model.load.KerasObjectLoader.del_tracking(self)
keras.saving.saved_model.load.KerasObjectLoader.finalize_objects(self)
keras.saving.saved_model.load.KerasObjectLoader.get_path(self,node_id)
keras.saving.saved_model.load.KerasObjectLoader.load_layers(self,compile=True)
keras.saving.saved_model.load.RevivedInputLayer(object)
keras.saving.saved_model.load.RevivedInputLayer._init_from_metadata(cls,metadata)
keras.saving.saved_model.load.RevivedInputLayer.get_config(self)
keras.saving.saved_model.load.RevivedLayer(object)
keras.saving.saved_model.load.RevivedLayer._init_from_metadata(cls,metadata)
keras.saving.saved_model.load.RevivedLayer.get_config(self)
keras.saving.saved_model.load.RevivedLayer.keras_api(self)
keras.saving.saved_model.load.RevivedNetwork(RevivedLayer)
keras.saving.saved_model.load.RevivedNetwork._init_from_metadata(cls,metadata)
keras.saving.saved_model.load._finalize_config_layers(layers)
keras.saving.saved_model.load._finalize_metric(metric)
keras.saving.saved_model.load._finalize_saved_model_layers(layers)
keras.saving.saved_model.load._generate_object_paths(object_graph_def)
keras.saving.saved_model.load._get_keras_attr(layer)
keras.saving.saved_model.load._is_graph_network(layer)
keras.saving.saved_model.load._maybe_add_serialized_attributes(layer,metadata)
keras.saving.saved_model.load._read_legacy_metadata(object_graph_def,metadata)
keras.saving.saved_model.load._restore_layer_activation_loss(layer)
keras.saving.saved_model.load._restore_layer_metrics(layer)
keras.saving.saved_model.load._restore_layer_unconditional_losses(layer)
keras.saving.saved_model.load._revive_setter(layer,name,value)
keras.saving.saved_model.load._set_network_attributes_from_metadata(revived_obj)
keras.saving.saved_model.load._unable_to_call_layer_due_to_serialization_issue(layer,*unused_args,**unused_kwargs)
keras.saving.saved_model.load.get_common_shape(x,y)
keras.saving.saved_model.load.infer_inputs_from_restored_call_function(fn)
keras.saving.saved_model.load.load(path,compile=True,options=None)
keras.saving.saved_model.load.recursively_deserialize_keras_object(config,module_objects=None)
keras.saving.saved_model.load.revive_custom_object(identifier,metadata)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/saved_model/model_serialization.py----------------------------------------
A:keras.saving.saved_model.model_serialization.metadata->super(ModelSavedModelSaver, self)._python_properties_internal()
A:keras.saving.saved_model.model_serialization.metadata['save_spec']->self.obj._get_save_spec(dynamic_batch=False)
A:keras.saving.saved_model.model_serialization.default_signature->keras.saving.saved_model.save_impl.default_save_signature(self.obj)
A:keras.saving.saved_model.model_serialization.(objects, functions)->super(ModelSavedModelSaver, self)._get_serialized_attributes_internal(serialization_cache)
keras.saving.saved_model.model_serialization.ModelSavedModelSaver(layer_serialization.LayerSavedModelSaver)
keras.saving.saved_model.model_serialization.ModelSavedModelSaver._get_serialized_attributes_internal(self,serialization_cache)
keras.saving.saved_model.model_serialization.ModelSavedModelSaver._python_properties_internal(self)
keras.saving.saved_model.model_serialization.ModelSavedModelSaver.object_identifier(self)
keras.saving.saved_model.model_serialization.SequentialSavedModelSaver(ModelSavedModelSaver)
keras.saving.saved_model.model_serialization.SequentialSavedModelSaver.object_identifier(self)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/saved_model/utils.py----------------------------------------
A:keras.saving.saved_model.utils.training_lib->LazyLoader('training_lib', globals(), 'keras.engine.training')
A:keras.saving.saved_model.utils.expects_training_arg->layer_uses_training_bool(layer)
A:keras.saving.saved_model.utils.(fn, arg_spec)->maybe_add_training_arg(original_call, call_fn, expects_training_arg, default_training_value)
A:keras.saving.saved_model.utils.(outputs, losses)->fn(*args, **kwargs)
A:keras.saving.saved_model.utils.decorated->tensorflow.compat.v2.__internal__.decorator.make_decorator(target=call_fn, decorator_func=return_outputs_and_add_losses, decorator_argspec=arg_spec)
A:keras.saving.saved_model.utils.to_visit->list_all_layers(layer)
A:keras.saving.saved_model.utils.layer->list_all_layers(layer).pop()
A:keras.saving.saved_model.utils.s->set([obj])
A:keras.saving.saved_model.utils.training_arg_index->get_training_arg_index(original_call)
A:keras.saving.saved_model.utils.training->get_training_arg(training_arg_index, args, kwargs)
A:keras.saving.saved_model.utils.args->list(args)
A:keras.saving.saved_model.utils.kwargs->kwargs.copy().copy()
A:keras.saving.saved_model.utils.arg_spec->keras.utils.tf_inspect.getfullargspec(original_call)
A:keras.saving.saved_model.utils.index->keras.utils.tf_inspect.getfullargspec(original_call).args.index('training')
A:keras.saving.saved_model.utils.decorator_argspec->keras.utils.tf_inspect.FullArgSpec(args=arg_spec.args, varargs=arg_spec.varargs, varkw=arg_spec.varkw, defaults=defaults, kwonlyargs=kwonlyargs, kwonlydefaults=kwonlydefaults, annotations=arg_spec.annotations)
A:keras.saving.saved_model.utils.argspec->keras.utils.tf_inspect.getfullargspec(call_fn)
A:keras.saving.saved_model.utils._save_options_context->SaveOptionsContext()
A:keras.saving.saved_model.utils.previous_value->getattr(obj, '_setattr_tracking', True)
keras.saving.saved_model.utils.SaveOptionsContext(self)
keras.saving.saved_model.utils.SaveOptionsContext.__init__(self)
keras.saving.saved_model.utils.get_training_arg(index,args,kwargs)
keras.saving.saved_model.utils.get_training_arg_index(call_fn)
keras.saving.saved_model.utils.keras_option_scope(save_traces)
keras.saving.saved_model.utils.layer_uses_training_bool(layer)
keras.saving.saved_model.utils.list_all_layers(obj)
keras.saving.saved_model.utils.list_all_layers_and_sublayers(obj)
keras.saving.saved_model.utils.maybe_add_training_arg(original_call,wrapped_call,expects_training_arg,default_training_value)
keras.saving.saved_model.utils.no_automatic_dependency_tracking_scope(obj)
keras.saving.saved_model.utils.remove_training_arg(index,args,kwargs)
keras.saving.saved_model.utils.set_training_arg(training,index,args,kwargs)
keras.saving.saved_model.utils.should_save_traces()
keras.saving.saved_model.utils.use_wrapped_call(layer,call_fn,default_training_value=None,return_method=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/saved_model/metric_serialization.py----------------------------------------
A:keras.saving.saved_model.metric_serialization.metadata->dict(class_name=generic_utils.get_registered_name(type(self.obj)), name=self.obj.name, dtype=self.obj.dtype)
keras.saving.saved_model.metric_serialization.MetricSavedModelSaver(layer_serialization.LayerSavedModelSaver)
keras.saving.saved_model.metric_serialization.MetricSavedModelSaver._get_serialized_attributes_internal(self,unused_serialization_cache)
keras.saving.saved_model.metric_serialization.MetricSavedModelSaver._python_properties_internal(self)
keras.saving.saved_model.metric_serialization.MetricSavedModelSaver.object_identifier(self)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/saved_model/layer_serialization.py----------------------------------------
A:keras.saving.saved_model.layer_serialization.metadata->self._python_properties_internal()
A:keras.saving.saved_model.layer_serialization.metadata['input_spec']->tensorflow.compat.v2.nest.map_structure(lambda x: generic_utils.serialize_keras_object(x) if x else None, self.obj.input_spec)
A:keras.saving.saved_model.layer_serialization.metadata['activity_regularizer']->keras.utils.generic_utils.serialize_keras_object(self.obj.activity_regularizer)
A:keras.saving.saved_model.layer_serialization.keras_cache->serialization_cache.setdefault(constants.KERAS_CACHE_KEY, {})
A:keras.saving.saved_model.layer_serialization.serialized_attrkeras_cache[self.obj]->keras.saving.saved_model.serialized_attributes.SerializedAttributes.new(self.obj)
A:keras.saving.saved_model.layer_serialization.(object_dict, function_dict)->self._get_serialized_attributes_internal(serialization_cache)
A:keras.saving.saved_model.layer_serialization.objects->keras.saving.saved_model.save_impl.wrap_layer_objects(self.obj, serialization_cache)
A:keras.saving.saved_model.layer_serialization.functions->keras.saving.saved_model.save_impl.wrap_layer_functions(self.obj, serialization_cache)
A:keras.saving.saved_model.layer_serialization.(objects, functions)->super(RNNSavedModelSaver, self)._get_serialized_attributes_internal(serialization_cache)
A:keras.saving.saved_model.layer_serialization.states->tensorflow.compat.v2.__internal__.tracking.wrap(list(states))
keras.saving.saved_model.layer_serialization.IndexLookupLayerSavedModelSaver(LayerSavedModelSaver)
keras.saving.saved_model.layer_serialization.IndexLookupLayerSavedModelSaver.python_properties(self)
keras.saving.saved_model.layer_serialization.InputLayerSavedModelSaver(base_serialization.SavedModelSaver)
keras.saving.saved_model.layer_serialization.InputLayerSavedModelSaver.functions_to_serialize(self,serialization_cache)
keras.saving.saved_model.layer_serialization.InputLayerSavedModelSaver.object_identifier(self)
keras.saving.saved_model.layer_serialization.InputLayerSavedModelSaver.objects_to_serialize(self,serialization_cache)
keras.saving.saved_model.layer_serialization.InputLayerSavedModelSaver.python_properties(self)
keras.saving.saved_model.layer_serialization.LayerSavedModelSaver(base_serialization.SavedModelSaver)
keras.saving.saved_model.layer_serialization.LayerSavedModelSaver._get_serialized_attributes(self,serialization_cache)
keras.saving.saved_model.layer_serialization.LayerSavedModelSaver._get_serialized_attributes_internal(self,serialization_cache)
keras.saving.saved_model.layer_serialization.LayerSavedModelSaver._python_properties_internal(self)
keras.saving.saved_model.layer_serialization.LayerSavedModelSaver.functions_to_serialize(self,serialization_cache)
keras.saving.saved_model.layer_serialization.LayerSavedModelSaver.object_identifier(self)
keras.saving.saved_model.layer_serialization.LayerSavedModelSaver.objects_to_serialize(self,serialization_cache)
keras.saving.saved_model.layer_serialization.LayerSavedModelSaver.python_properties(self)
keras.saving.saved_model.layer_serialization.RNNSavedModelSaver(LayerSavedModelSaver)
keras.saving.saved_model.layer_serialization.RNNSavedModelSaver._get_serialized_attributes_internal(self,serialization_cache)
keras.saving.saved_model.layer_serialization.RNNSavedModelSaver.object_identifier(self)
keras.saving.saved_model.layer_serialization.get_serialized(obj)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/saved_model/base_serialization.py----------------------------------------
A:keras.saving.saved_model.base_serialization.fns->self.functions_to_serialize(serialization_cache)
keras.saving.saved_model.base_serialization.SavedModelSaver(self,obj)
keras.saving.saved_model.base_serialization.SavedModelSaver.__init__(self,obj)
keras.saving.saved_model.base_serialization.SavedModelSaver.functions_to_serialize(self,serialization_cache)
keras.saving.saved_model.base_serialization.SavedModelSaver.list_extra_dependencies_for_serialization(self,serialization_cache)
keras.saving.saved_model.base_serialization.SavedModelSaver.list_functions_for_serialization(self,serialization_cache)
keras.saving.saved_model.base_serialization.SavedModelSaver.object_identifier(self)
keras.saving.saved_model.base_serialization.SavedModelSaver.objects_to_serialize(self,serialization_cache)
keras.saving.saved_model.base_serialization.SavedModelSaver.python_properties(self)
keras.saving.saved_model.base_serialization.SavedModelSaver.tracking_metadata(self)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/saved_model/serialized_attributes.py----------------------------------------
A:keras.saving.saved_model.serialized_attributes.base_layer->LazyLoader('base_layer', globals(), 'keras.engine.base_layer')
A:keras.saving.saved_model.serialized_attributes.training_lib->LazyLoader('training_lib', globals(), 'keras.engine.training')
A:keras.saving.saved_model.serialized_attributes.metrics->LazyLoader('metrics', globals(), 'keras.metrics')
A:keras.saving.saved_model.serialized_attributes.recurrent->LazyLoader('recurrent', globals(), 'keras.layers.recurrent')
A:keras.saving.saved_model.serialized_attributes.self._keras_trackable->AutoTrackable()
keras.saving.saved_model.serialized_attributes.CommonEndpoints(SerializedAttributes.with_attributes('CommonEndpoints',checkpointable_objects=['variables','trainable_variables','regularization_losses'],functions=['__call__','call_and_return_all_conditional_losses','_default_save_signature']))
keras.saving.saved_model.serialized_attributes.LayerAttributes(SerializedAttributes.with_attributes('LayerAttributes',checkpointable_objects=['non_trainable_variables','layers','metrics','layer_regularization_losses','layer_metrics'],functions=['call_and_return_conditional_losses','activity_regularizer_fn'],copy_from=[CommonEndpoints]))
keras.saving.saved_model.serialized_attributes.MetricAttributes(SerializedAttributes.with_attributes('MetricAttributes',checkpointable_objects=['variables'],functions=[]))
keras.saving.saved_model.serialized_attributes.ModelAttributes(SerializedAttributes.with_attributes('ModelAttributes',copy_from=[LayerAttributes]))
keras.saving.saved_model.serialized_attributes.RNNAttributes(SerializedAttributes.with_attributes('RNNAttributes',checkpointable_objects=['states'],copy_from=[LayerAttributes]))
keras.saving.saved_model.serialized_attributes.SerializedAttributes(self)
keras.saving.saved_model.serialized_attributes.SerializedAttributes.__init__(self)
keras.saving.saved_model.serialized_attributes.SerializedAttributes.checkpointable_objects(self)
keras.saving.saved_model.serialized_attributes.SerializedAttributes.functions(self)
keras.saving.saved_model.serialized_attributes.SerializedAttributes.functions_to_serialize(self)
keras.saving.saved_model.serialized_attributes.SerializedAttributes.new(obj)
keras.saving.saved_model.serialized_attributes.SerializedAttributes.objects_to_serialize(self)
keras.saving.saved_model.serialized_attributes.SerializedAttributes.set_and_validate_functions(self,function_dict)
keras.saving.saved_model.serialized_attributes.SerializedAttributes.set_and_validate_objects(self,object_dict)
keras.saving.saved_model.serialized_attributes.SerializedAttributes.with_attributes(name,checkpointable_objects=None,functions=None,copy_from=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/saved_model/save.py----------------------------------------
A:keras.saving.saved_model.save.base_layer->LazyLoader('base_layer', globals(), 'keras.engine.base_layer')
A:keras.saving.saved_model.save.training_lib->LazyLoader('training_lib', globals(), 'keras.engine.training')
A:keras.saving.saved_model.save.proceed->ask_to_proceed_with_overwrite(filepath)
A:keras.saving.saved_model.save.(saved_nodes, node_paths)->tensorflow.python.saved_model.save.save_and_return_nodes(model, filepath, signatures, options)
A:keras.saving.saved_model.save.metadata->keras.protobuf.saved_metadata_pb2.SavedMetadata()
A:keras.saving.saved_model.save.node_path->'root.{}'.format('.'.join([ref.name for ref in path]))
keras.saving.saved_model.save.generate_keras_metadata(saved_nodes,node_paths)
keras.saving.saved_model.save.save(model,filepath,overwrite,include_optimizer,signatures=None,options=None,save_traces=True)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/saved_model/network_serialization.py----------------------------------------
keras.saving.saved_model.network_serialization.NetworkSavedModelSaver(model_serialization.ModelSavedModelSaver)
keras.saving.saved_model.network_serialization.NetworkSavedModelSaver.object_identifier(self)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/saved_model/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/saved_model/save_impl.py----------------------------------------
A:keras.saving.saved_model.save_impl.base_layer->LazyLoader('base_layer', globals(), 'keras.engine.base_layer')
A:keras.saving.saved_model.save_impl.metrics->LazyLoader('metrics', globals(), 'keras.metrics')
A:keras.saving.saved_model.save_impl.input_layer->LazyLoader('input_layer', globals(), 'keras.engine.input_layer')
A:keras.saving.saved_model.save_impl.training_lib->LazyLoader('training_lib', globals(), 'keras.engine.training')
A:keras.saving.saved_model.save_impl.sequential_lib->LazyLoader('sequential_lib', globals(), 'keras.engine.sequential')
A:keras.saving.saved_model.save_impl.keras_loss_cache->serialization_cache.setdefault('keras_losses', {})
A:keras.saving.saved_model.save_impl.wrapped_loss->_wrap_unconditional_loss(loss_fn, len(keras_loss_cache))
A:keras.saving.saved_model.save_impl.layer_metrics->tensorflow.compat.v2.__internal__.tracking.wrap({m.name: m for m in layer._metrics})
A:keras.saving.saved_model.save_impl.original_fns->_replace_child_layer_functions(layer, serialization_cache)
A:keras.saving.saved_model.save_impl.original_losses->_reset_layer_losses(layer)
A:keras.saving.saved_model.save_impl.call_collection->LayerCallCollection(layer)
A:keras.saving.saved_model.save_impl.call_fn_with_losses->LayerCallCollection(layer).add_function(_wrap_call_and_conditional_losses(layer), '{}_layer_call_and_return_conditional_losses'.format(layer.name), match_layer_training_arg=True)
A:keras.saving.saved_model.save_impl.call_fn->_get_layer_call_method(layer)
A:keras.saving.saved_model.save_impl.fns['activity_regularizer_fn']->_wrap_activity_regularizer(layer)
A:keras.saving.saved_model.save_impl.fns['call_and_return_all_conditional_losses']->LayerCallCollection(layer).add_function(_append_activity_regularizer_loss(layer, call_fn_with_losses, fns['activity_regularizer_fn']), '{}_layer_call_and_return_all_conditional_losses'.format(layer.name), match_layer_training_arg=False)
A:keras.saving.saved_model.save_impl.fn->tensorflow.compat.v2.__internal__.decorator.make_decorator(target=method, decorator_func=wrapper)
A:keras.saving.saved_model.save_impl.child_layer._activity_regularizer->serialized_fns.get('activity_regularizer_fn')
A:keras.saving.saved_model.save_impl.child_layer.call->keras.saving.saved_model.utils.use_wrapped_call(child_layer, serialized_fns['call_and_return_conditional_losses'], default_training_value=False)
A:keras.saving.saved_model.save_impl._thread_local_data->LayerTracingContext()
A:keras.saving.saved_model.save_impl.(fn, args, kwargs, training)->LayerTracingContext().trace_queue.pop()
A:keras.saving.saved_model.save_impl.self.layer_call_method->_get_layer_call_method(layer)
A:keras.saving.saved_model.save_impl.self._expects_training_arg->keras.saving.saved_model.utils.layer_uses_training_bool(layer)
A:keras.saving.saved_model.save_impl.self._training_arg_index->keras.saving.saved_model.utils.get_training_arg_index(self.layer_call_method)
A:keras.saving.saved_model.save_impl.arg_spec->keras.utils.tf_inspect.getfullargspec(call_fn)
A:keras.saving.saved_model.save_impl.self._has_kwargs->bool(self._expects_training_arg or arg_spec.defaults or arg_spec.kwonlyargs or arg_spec.varkw)
A:keras.saving.saved_model.save_impl.self._input_signature->self._generate_input_signature(layer)
A:keras.saving.saved_model.save_impl.self._functions->weakref.WeakValueDictionary()
A:keras.saving.saved_model.save_impl.spec->keras.engine.input_spec.to_tensor_spec(x, layer._compute_dtype)
A:keras.saving.saved_model.save_impl.args->list(args)
A:keras.saving.saved_model.save_impl.kwargs->kwargs.copy().copy()
A:keras.saving.saved_model.save_impl.defaults->list(arg_spec.defaults or [])
A:keras.saving.saved_model.save_impl.new_arg_spec->keras.utils.tf_inspect.FullArgSpec(args=args, varargs=arg_spec.varargs, varkw=arg_spec.varkw, defaults=defaults, kwonlyargs=arg_spec.kwonlyargs, kwonlydefaults=arg_spec.kwonlydefaults, annotations=arg_spec.annotations)
A:keras.saving.saved_model.save_impl.inputs->_filtered_inputs([args, kwargs])
A:keras.saving.saved_model.save_impl.training->LayerCallCollection(layer).get_training_arg_value(args, kwargs)
A:keras.saving.saved_model.save_impl.ret->method(*args, **kwargs)
A:keras.saving.saved_model.save_impl.self.wrapped_call->tensorflow.compat.v2.function(layer_call_wrapper(call_collection, call_fn, name), input_signature=input_signature)
A:keras.saving.saved_model.save_impl.layer_call->_get_layer_call_method(layer)
A:keras.saving.saved_model.save_impl.call_output->layer_call(*args, **kwargs)
A:keras.saving.saved_model.save_impl.conditional_losses->layer.get_losses_for(_filtered_inputs([args, kwargs]))
A:keras.saving.saved_model.save_impl.(outputs, losses)->call_fn_with_losses(inputs, *args, **kwargs)
A:keras.saving.saved_model.save_impl.(fn, arg_spec)->keras.saving.saved_model.utils.maybe_add_training_arg(call_fn, wrapped_call, layer._expects_training_arg, default_training_value=False)
keras.saving.saved_model.save_impl.LayerCall(self,call_collection,call_fn,name,input_signature)
keras.saving.saved_model.save_impl.LayerCall.__init__(self,call_collection,call_fn,name,input_signature)
keras.saving.saved_model.save_impl.LayerCall._maybe_trace(self,args,kwargs)
keras.saving.saved_model.save_impl.LayerCall.get_concrete_function(self,*args,**kwargs)
keras.saving.saved_model.save_impl.LayerCallCollection(self,layer)
keras.saving.saved_model.save_impl.LayerCallCollection.__init__(self,layer)
keras.saving.saved_model.save_impl.LayerCallCollection._generate_input_signature(self,layer)
keras.saving.saved_model.save_impl.LayerCallCollection._maybe_wrap_with_training_arg(self,call_fn,match_layer_training_arg)
keras.saving.saved_model.save_impl.LayerCallCollection.add_function(self,call_fn,name,match_layer_training_arg)
keras.saving.saved_model.save_impl.LayerCallCollection.add_trace(self,*args,**kwargs)
keras.saving.saved_model.save_impl.LayerCallCollection.fn_input_signature(self)
keras.saving.saved_model.save_impl.LayerCallCollection.get_input_arg_value(self,args,kwargs)
keras.saving.saved_model.save_impl.LayerCallCollection.get_training_arg_value(self,args,kwargs)
keras.saving.saved_model.save_impl.LayerCallCollection.trace_with_input_signature(self)
keras.saving.saved_model.save_impl.LayerCallCollection.training_arg_was_passed(self,args,kwargs)
keras.saving.saved_model.save_impl.LayerTracingContext(self)
keras.saving.saved_model.save_impl.LayerTracingContext.__init__(self)
keras.saving.saved_model.save_impl._append_activity_regularizer_loss(layer,call_fn_with_losses,activity_regularizer_fn)
keras.saving.saved_model.save_impl._create_call_fn_decorator(layer,wrapped_call)
keras.saving.saved_model.save_impl._extract_outputs_from_fn(layer,call_and_return_conditional_losses)
keras.saving.saved_model.save_impl._filtered_inputs(inputs)
keras.saving.saved_model.save_impl._get_layer_call_method(layer)
keras.saving.saved_model.save_impl._replace_child_layer_functions(layer,serialization_cache)
keras.saving.saved_model.save_impl._reset_layer_losses(parent_layer)
keras.saving.saved_model.save_impl._restore_child_layer_functions(original_fns)
keras.saving.saved_model.save_impl._restore_layer_losses(losses_dict)
keras.saving.saved_model.save_impl._wrap_activity_regularizer(layer)
keras.saving.saved_model.save_impl._wrap_call_and_conditional_losses(layer)
keras.saving.saved_model.save_impl._wrap_unconditional_loss(loss_fn,index)
keras.saving.saved_model.save_impl.add_trace_to_queue(fn,args,kwargs,training=None)
keras.saving.saved_model.save_impl.default_save_signature(layer)
keras.saving.saved_model.save_impl.layer_call_wrapper(call_collection,method,name)
keras.saving.saved_model.save_impl.should_skip_serialization(layer)
keras.saving.saved_model.save_impl.tracing_enabled()
keras.saving.saved_model.save_impl.tracing_scope()
keras.saving.saved_model.save_impl.wrap_layer_functions(layer,serialization_cache)
keras.saving.saved_model.save_impl.wrap_layer_objects(layer,serialization_cache)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/saved_model/constants.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/saved_model/load_context.py----------------------------------------
A:keras.saving.saved_model.load_context._load_context->LoadContext()
keras.saving.saved_model.load_context.LoadContext(self)
keras.saving.saved_model.load_context.LoadContext.__init__(self)
keras.saving.saved_model.load_context.LoadContext.clear_load_options(self)
keras.saving.saved_model.load_context.LoadContext.load_options(self)
keras.saving.saved_model.load_context.LoadContext.set_load_options(self,load_options)
keras.saving.saved_model.load_context.get_load_options()
keras.saving.saved_model.load_context.load_context(load_options)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/saved_model/json_utils.py----------------------------------------
A:keras.saving.saved_model.json_utils.type_spec_name->tensorflow.python.framework.type_spec.get_name(type(obj))
keras.saving.saved_model.json_utils.Encoder(json.JSONEncoder)
keras.saving.saved_model.json_utils.Encoder.default(self,obj)
keras.saving.saved_model.json_utils.Encoder.encode(self,obj)
keras.saving.saved_model.json_utils._decode_helper(obj)
keras.saving.saved_model.json_utils._encode_tuple(x)
keras.saving.saved_model.json_utils.decode(json_string)
keras.saving.saved_model.json_utils.get_json_type(obj)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/utils_v1/unexported_constants.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/utils_v1/export_utils.py----------------------------------------
A:keras.saving.utils_v1.export_utils.EXPORT_TAG_MAP->keras.saving.utils_v1.mode_keys.ModeKeyMap(**{ModeKeys.PREDICT: [tf.saved_model.SERVING], ModeKeys.TRAIN: [tf.saved_model.TRAINING], ModeKeys.TEST: [unexported_constants.EVAL]})
A:keras.saving.utils_v1.export_utils.SIGNATURE_KEY_MAP->keras.saving.utils_v1.mode_keys.ModeKeyMap(**{ModeKeys.PREDICT: tf.saved_model.DEFAULT_SERVING_SIGNATURE_DEF_KEY, ModeKeys.TRAIN: unexported_constants.DEFAULT_TRAIN_SIGNATURE_DEF_KEY, ModeKeys.TEST: unexported_constants.DEFAULT_EVAL_SIGNATURE_DEF_KEY})
A:keras.saving.utils_v1.export_utils.signature_name->'{}:{}'.format(receiver_name or 'None', output_key or 'None')
A:keras.saving.utils_v1.export_utils.signature->export_output.as_signature_def(receiver_tensors_alt)
A:keras.saving.utils_v1.export_utils.excluded_signatures[signature_name]->str(e)
A:keras.saving.utils_v1.export_utils.sig_names_by_method_name->collections.defaultdict(list)
A:keras.saving.utils_v1.export_utils.timestamp->int(time.time())
A:keras.saving.utils_v1.export_utils.result_dir->os.path.join(tf.compat.as_bytes(export_dir_base), tf.compat.as_bytes(str(timestamp)))
A:keras.saving.utils_v1.export_utils.(dirname, basename)->os.path.split(timestamped_export_dir)
A:keras.saving.utils_v1.export_utils.str_name->str(basename)
A:keras.saving.utils_v1.export_utils.temp_export_dir->os.path.join(tf.compat.as_bytes(dirname), tf.compat.as_bytes('temp-{}'.format(str_name)))
A:keras.saving.utils_v1.export_utils.default_output->keras.saving.utils_v1.export_output.PredictOutput(predictions)
A:keras.saving.utils_v1.export_utils.((key, value),)->export_outputs.items()
keras.saving.utils_v1.build_all_signature_defs(receiver_tensors,export_outputs,receiver_tensors_alternatives=None,serving_only=True)
keras.saving.utils_v1.export_outputs_for_mode(mode,serving_export_outputs=None,predictions=None,loss=None,metrics=None)
keras.saving.utils_v1.export_utils._log_signature_report(signature_def_map,excluded_signatures)
keras.saving.utils_v1.export_utils._maybe_add_default_serving_output(export_outputs)
keras.saving.utils_v1.export_utils.build_all_signature_defs(receiver_tensors,export_outputs,receiver_tensors_alternatives=None,serving_only=True)
keras.saving.utils_v1.export_utils.export_outputs_for_mode(mode,serving_export_outputs=None,predictions=None,loss=None,metrics=None)
keras.saving.utils_v1.export_utils.get_export_outputs(export_outputs,predictions)
keras.saving.utils_v1.export_utils.get_temp_export_dir(timestamped_export_dir)
keras.saving.utils_v1.export_utils.get_timestamped_export_dir(export_dir_base)
keras.saving.utils_v1.get_export_outputs(export_outputs,predictions)
keras.saving.utils_v1.get_temp_export_dir(timestamped_export_dir)
keras.saving.utils_v1.get_timestamped_export_dir(export_dir_base)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/utils_v1/export_output.py----------------------------------------
A:keras.saving.utils_v1.export_output.key->self._prefix_key(key, self.METRICS_NAME)
A:keras.saving.utils_v1.export_output.((_, examples),)->receiver_tensors.items()
A:keras.saving.utils_v1.export_output.self._outputs->self._wrap_and_check_outputs(outputs, self._SINGLE_OUTPUT_DEFAULT_NAME, error_label='Prediction')
A:keras.saving.utils_v1.export_output.loss_dict->self._wrap_and_check_outputs(loss, self.LOSS_NAME)
A:keras.saving.utils_v1.export_output.self._loss->self._prefix_output_keys(loss_dict, self.LOSS_NAME)
A:keras.saving.utils_v1.export_output.pred_dict->self._wrap_and_check_outputs(predictions, self.PREDICTIONS_NAME)
A:keras.saving.utils_v1.export_output.self._predictions->self._prefix_output_keys(pred_dict, self.PREDICTIONS_NAME)
A:keras.saving.utils_v1.export_output.self._metrics->self._wrap_and_check_metrics(metrics)
A:keras.saving.utils_v1.export_output.metric_val->value.result()
A:keras.saving.utils_v1.export_output.metric_op_tensor->tensorflow.compat.v2.constant([], name='metric_op_wrapper')
A:keras.saving.utils_v1.export_output.signature_def_fn->self._get_signature_def_fn()
keras.saving.utils_v1.ClassificationOutput(self,scores=None,classes=None)
keras.saving.utils_v1.ClassificationOutput.as_signature_def(self,receiver_tensors)
keras.saving.utils_v1.ClassificationOutput.classes(self)
keras.saving.utils_v1.ClassificationOutput.scores(self)
keras.saving.utils_v1.EvalOutput(_SupervisedOutput)
keras.saving.utils_v1.EvalOutput._get_signature_def_fn(self)
keras.saving.utils_v1.ExportOutput(object)
keras.saving.utils_v1.ExportOutput._check_output_key(self,key,error_label)
keras.saving.utils_v1.ExportOutput._wrap_and_check_outputs(self,outputs,single_output_default_name,error_label=None)
keras.saving.utils_v1.ExportOutput.as_signature_def(self,receiver_tensors)
keras.saving.utils_v1.PredictOutput(self,outputs)
keras.saving.utils_v1.PredictOutput.as_signature_def(self,receiver_tensors)
keras.saving.utils_v1.PredictOutput.outputs(self)
keras.saving.utils_v1.RegressionOutput(self,value)
keras.saving.utils_v1.RegressionOutput.as_signature_def(self,receiver_tensors)
keras.saving.utils_v1.RegressionOutput.value(self)
keras.saving.utils_v1.TrainOutput(_SupervisedOutput)
keras.saving.utils_v1.TrainOutput._get_signature_def_fn(self)
keras.saving.utils_v1._SupervisedOutput(self,loss=None,predictions=None,metrics=None)
keras.saving.utils_v1._SupervisedOutput._get_signature_def_fn(self)
keras.saving.utils_v1._SupervisedOutput._prefix_key(self,key,output_name)
keras.saving.utils_v1._SupervisedOutput._prefix_output_keys(self,output_dict,output_name)
keras.saving.utils_v1._SupervisedOutput._wrap_and_check_metrics(self,metrics)
keras.saving.utils_v1._SupervisedOutput.as_signature_def(self,receiver_tensors)
keras.saving.utils_v1._SupervisedOutput.loss(self)
keras.saving.utils_v1._SupervisedOutput.metrics(self)
keras.saving.utils_v1._SupervisedOutput.predictions(self)
keras.saving.utils_v1.export_output.ClassificationOutput(self,scores=None,classes=None)
keras.saving.utils_v1.export_output.ClassificationOutput.__init__(self,scores=None,classes=None)
keras.saving.utils_v1.export_output.ClassificationOutput.as_signature_def(self,receiver_tensors)
keras.saving.utils_v1.export_output.ClassificationOutput.classes(self)
keras.saving.utils_v1.export_output.ClassificationOutput.scores(self)
keras.saving.utils_v1.export_output.EvalOutput(_SupervisedOutput)
keras.saving.utils_v1.export_output.EvalOutput._get_signature_def_fn(self)
keras.saving.utils_v1.export_output.ExportOutput(object)
keras.saving.utils_v1.export_output.ExportOutput._check_output_key(self,key,error_label)
keras.saving.utils_v1.export_output.ExportOutput._wrap_and_check_outputs(self,outputs,single_output_default_name,error_label=None)
keras.saving.utils_v1.export_output.ExportOutput.as_signature_def(self,receiver_tensors)
keras.saving.utils_v1.export_output.PredictOutput(self,outputs)
keras.saving.utils_v1.export_output.PredictOutput.__init__(self,outputs)
keras.saving.utils_v1.export_output.PredictOutput.as_signature_def(self,receiver_tensors)
keras.saving.utils_v1.export_output.PredictOutput.outputs(self)
keras.saving.utils_v1.export_output.RegressionOutput(self,value)
keras.saving.utils_v1.export_output.RegressionOutput.__init__(self,value)
keras.saving.utils_v1.export_output.RegressionOutput.as_signature_def(self,receiver_tensors)
keras.saving.utils_v1.export_output.RegressionOutput.value(self)
keras.saving.utils_v1.export_output.TrainOutput(_SupervisedOutput)
keras.saving.utils_v1.export_output.TrainOutput._get_signature_def_fn(self)
keras.saving.utils_v1.export_output._SupervisedOutput(self,loss=None,predictions=None,metrics=None)
keras.saving.utils_v1.export_output._SupervisedOutput.__init__(self,loss=None,predictions=None,metrics=None)
keras.saving.utils_v1.export_output._SupervisedOutput._get_signature_def_fn(self)
keras.saving.utils_v1.export_output._SupervisedOutput._prefix_key(self,key,output_name)
keras.saving.utils_v1.export_output._SupervisedOutput._prefix_output_keys(self,output_dict,output_name)
keras.saving.utils_v1.export_output._SupervisedOutput._wrap_and_check_metrics(self,metrics)
keras.saving.utils_v1.export_output._SupervisedOutput.as_signature_def(self,receiver_tensors)
keras.saving.utils_v1.export_output._SupervisedOutput.loss(self)
keras.saving.utils_v1.export_output._SupervisedOutput.metrics(self)
keras.saving.utils_v1.export_output._SupervisedOutput.predictions(self)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/utils_v1/signature_def_utils.py----------------------------------------
A:keras.saving.utils_v1.signature_def_utils.signature_def->tensorflow.compat.v2.compat.v1.saved_model.build_signature_def(signature_inputs, signature_outputs, method_name)
keras.saving.utils_v1.signature_def_utils._supervised_signature_def(method_name,inputs,loss=None,predictions=None,metrics=None)
keras.saving.utils_v1.signature_def_utils.supervised_eval_signature_def(inputs,loss,predictions=None,metrics=None)
keras.saving.utils_v1.signature_def_utils.supervised_train_signature_def(inputs,loss,predictions=None,metrics=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/utils_v1/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/saving/utils_v1/mode_keys.py----------------------------------------
A:keras.saving.utils_v1.mode_keys.dict_key->self._get_internal_key(key)
keras.saving.utils_v1.mode_keys.EstimatorModeKeys
keras.saving.utils_v1.mode_keys.KerasModeKeys
keras.saving.utils_v1.mode_keys.ModeKeyMap(self,**kwargs)
keras.saving.utils_v1.mode_keys.ModeKeyMap.__getitem__(self,key)
keras.saving.utils_v1.mode_keys.ModeKeyMap.__init__(self,**kwargs)
keras.saving.utils_v1.mode_keys.ModeKeyMap.__iter__(self)
keras.saving.utils_v1.mode_keys.ModeKeyMap.__len__(self)
keras.saving.utils_v1.mode_keys.ModeKeyMap._get_internal_key(self,key)
keras.saving.utils_v1.mode_keys.is_eval(mode)
keras.saving.utils_v1.mode_keys.is_predict(mode)
keras.saving.utils_v1.mode_keys.is_train(mode)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/backend/cntk_backend.py----------------------------------------
A:keras.backend.cntk_backend.dev->cntk.device.use_default_device()
A:keras.backend.cntk_backend._LEARNING_PHASE_PLACEHOLDER->cntk.constant(shape=(), dtype=np.float32, value=1.0, name='_keras_learning_phase')
A:keras.backend.cntk_backend._UID_PREFIXES->defaultdict(int)
A:keras.backend.cntk_backend._LEARNING_PHASE_PLACEHOLDER.value->numpy.asarray(value)
A:keras.backend.cntk_backend.training->learning_phase()
A:keras.backend.cntk_backend.x->cntk.swapaxes(x, -1, axis)
A:keras.backend.cntk_backend.alt->alt()
A:keras.backend.cntk_backend.result->arguments.data().as_shape((num_batch,) + self.target_shape)
A:keras.backend.cntk_backend.dtype->floatx()
A:keras.backend.cntk_backend.value->numpy.asarray(value)
A:keras.backend.cntk_backend.v->self.metrics_func.eval(input_dict, as_numpy=False).asarray()
A:keras.backend.cntk_backend.data_format->normalize_data_format(data_format)
A:keras.backend.cntk_backend.dims->len(shape)
A:keras.backend.cntk_backend.bias_dims->len(bias.shape)
A:keras.backend.cntk_backend.shape->int_shape(inputs)
A:keras.backend.cntk_backend.cntk_shape->tuple(cntk_shape)
A:keras.backend.cntk_backend.num_dynamic->get_num_dynamic_axis(placeholder)
A:keras.backend.cntk_backend.prefix->'_'.join(NAME_SCOPE_STACK)
A:keras.backend.cntk_backend.const->cntk.constant(np_value, dtype=dtype, name=_prepare_name(name, 'constant'))
A:keras.backend.cntk_backend.seed->numpy.random.randint(1, 10000000.0)
A:keras.backend.cntk_backend.p->cntk.parameter(shape=shape, init=C.initializer.normal(scale=scale, seed=seed), dtype=dtype, name=name)
A:keras.backend.cntk_backend.ctype->_convert_string_dtype(dtype)
A:keras.backend.cntk_backend.y_shape->int_shape(y)
A:keras.backend.cntk_backend.y->concatenate([ones(sliced_shape, dtype=x.dtype), repeat_elements(_x, rep=shape[axis] - 1 - rep, axis=axis)], axis=axis)
A:keras.backend.cntk_backend.x_shape->int_shape(x)
A:keras.backend.cntk_backend.x_ndim->len(x_shape)
A:keras.backend.cntk_backend.y_ndim->len(y_shape)
A:keras.backend.cntk_backend.axes->list(axes)
A:keras.backend.cntk_backend.permute_pattern->list(range(y_ndim))
A:keras.backend.cntk_backend.xi->squeeze(xi, 0)
A:keras.backend.cntk_backend.yi->squeeze(yi, 0)
A:keras.backend.cntk_backend.one_hot_matrix->cntk.ops.one_hot(indices, num_classes)
A:keras.backend.cntk_backend.nones->_get_dynamic_axis_num(inputs)
A:keras.backend.cntk_backend.axis->_normalize_axis(axis, x)
A:keras.backend.cntk_backend.output->permute_dimensions(output, (0, 2, 3, 1))
A:keras.backend.cntk_backend.m->mean(x, axis, keepdims=True)
A:keras.backend.cntk_backend.devs_squared->cntk.square(x - m)
A:keras.backend.cntk_backend.new_shape->tuple(new_shape)
A:keras.backend.cntk_backend.n->tuple(n)
A:keras.backend.cntk_backend.num_dynamic_axis->_get_dynamic_axis_num(x)
A:keras.backend.cntk_backend.ndim->len(shape)
A:keras.backend.cntk_backend._axis->cntk.Axis.all_axes()
A:keras.backend.cntk_backend.reduce_result->prod(x, axis, keepdims=keepdims)
A:keras.backend.cntk_backend.any_matrix->cntk.element_select(reduce_result, ones_like(reduce_result), zeros_like(reduce_result))
A:keras.backend.cntk_backend.all_matrix->cntk.element_select(reduce_result, ones_like(reduce_result), zeros_like(reduce_result))
A:keras.backend.cntk_backend.g->cntk.constant(0, shape=v.shape, name='keras_grad_placeholder')
A:keras.backend.cntk_backend.gamma->_reshape_dummy_dim(gamma, [0])
A:keras.backend.cntk_backend.beta->_reshape_dummy_dim(beta, [0])
A:keras.backend.cntk_backend.(mean, variant)->_moments(x, _normalize_axis(reduction_axes, x))
A:keras.backend.cntk_backend.normalized->batch_normalization(x, broadcast_mean, broadcast_var, broadcast_beta, broadcast_gamma, epsilon)
A:keras.backend.cntk_backend.broadcast_mean->cntk.reshape(mean, target_shape)
A:keras.backend.cntk_backend.broadcast_var->cntk.reshape(variant, target_shape)
A:keras.backend.cntk_backend.broadcast_gamma->cntk.reshape(gamma, target_shape)
A:keras.backend.cntk_backend.broadcast_beta->cntk.reshape(beta, target_shape)
A:keras.backend.cntk_backend._axes->tuple(axes)
A:keras.backend.cntk_backend.shift->cntk.stop_gradient(shift)
A:keras.backend.cntk_backend.shifted_mean->cntk.reduce_mean(shifted_mean, axis=axis)
A:keras.backend.cntk_backend.variance_mean->cntk.reduce_mean(variance_mean, axis=axis)
A:keras.backend.cntk_backend.variance->squeeze(variance, _axes)
A:keras.backend.cntk_backend.mean->_reshape_dummy_dim(mean, [0])
A:keras.backend.cntk_backend.var->_reshape_dummy_dim(var, [0])
A:keras.backend.cntk_backend.current_layout->tuple([i for i in range(dims)])
A:keras.backend.cntk_backend.tmp->cntk.ops.slice(x, axis, i, i + 1)
A:keras.backend.cntk_backend.mask_shape->int_shape(mask)
A:keras.backend.cntk_backend.mask->cntk.to_sequence_like(mask, rnn_inputs)
A:keras.backend.cntk_backend.states->tuple(initial)
A:keras.backend.cntk_backend.current->squeeze(current, 1)
A:keras.backend.cntk_backend.(output, new_states)->step_function(current, tuple(states) + tuple(constants))
A:keras.backend.cntk_backend.mask_slice->squeeze(mask_slice, 1)
A:keras.backend.cntk_backend.prev_output->zeros_like(output)
A:keras.backend.cntk_backend.final_output->_reshape_sequence(final_output, num_time_step)
A:keras.backend.cntk_backend.output_slice->expand_dims(outputs[i], 1)
A:keras.backend.cntk_backend.rnn_inputs->cntk.to_sequence(rnn_inputs)
A:keras.backend.cntk_backend.(new_output, new_states)->step_function(x, tuple(past_values) + tuple(rnn_constants))
A:keras.backend.cntk_backend.(final_output, final_states)->_recurrence(rnn_inputs, states, mask)
A:keras.backend.cntk_backend.last_output->cntk.sequence.last(final_output)
A:keras.backend.cntk_backend.norm->cntk.sqrt(C.reduce_sum(C.square(x), axis=axis[0]))
A:keras.backend.cntk_backend.kernel->cntk.transpose(kernel, (4, 3, 0, 1, 2))
A:keras.backend.cntk_backend.padding->_preprocess_border_mode(padding)
A:keras.backend.cntk_backend.depthwise_kernel->cntk.reshape(C.transpose(depthwise_kernel, (1, 0, 2, 3)), (-1, 1) + depthwise_kernel.shape[2:])
A:keras.backend.cntk_backend.pointwise_kernel->_preprocess_conv2d_kernel(pointwise_kernel, data_format)
A:keras.backend.cntk_backend.output_shape->transpose_shape(output_shape, 'channels_first', spatial_axes=(0, 1))
A:keras.backend.cntk_backend.negative_part->cntk.relu(-x)
A:keras.backend.cntk_backend.dim->numpy.prod(x.shape)
A:keras.backend.cntk_backend.output_dimensions->list(range(len(output.shape)))
A:keras.backend.cntk_backend.target->cntk.reshape(target, output.shape)
A:keras.backend.cntk_backend.u->cntk.assign(update[0], update[1])
A:keras.backend.cntk_backend.update_func->cntk.combine([u.output for u in u_ops])
A:keras.backend.cntk_backend.grads->cntk.combine([u.output for u in u_ops]).find_all_with_name('keras_grad_placeholder')
A:keras.backend.cntk_backend.learner->cntk.cntk_py.universal_learner(p_list, u_list, update_func)
A:keras.backend.cntk_backend.self.trainer->cntk.trainer.Trainer(outputs[0], criterion, [learner])
A:keras.backend.cntk_backend.self.trainer_output->tuple([f.output for f in criterion])
A:keras.backend.cntk_backend.self.unrelated_updates->cntk.combine([_.output for _ in unrelated_updates])
A:keras.backend.cntk_backend.self.metrics_func->cntk.combine(self.metrics_outputs)
A:keras.backend.cntk_backend.(_, output_values)->self.metrics_func.forward(input_dict, self.metrics_func.outputs, (self.metrics_func.outputs[0],), as_numpy=False)
A:keras.backend.cntk_backend.output_values->self.metrics_func.eval(input_dict, as_numpy=False)
A:keras.backend.cntk_backend.prefix_shape->tuple(prefix_shape)
A:keras.backend.cntk_backend.postfix_shape->tuple(postfix_shape)
A:keras.backend.cntk_backend.then_expression->then_expression()
A:keras.backend.cntk_backend.else_expression->else_expression()
A:keras.backend.cntk_backend.ndim_cond->ndim(condition)
A:keras.backend.cntk_backend.ndim_expr->ndim(then_expression)
A:keras.backend.cntk_backend.shape_expr->int_shape(then_expression)
A:keras.backend.cntk_backend.condition->tile(condition, shape_expr[ndim_cond + i])
A:keras.backend.cntk_backend.res->cntk.elu(x)
A:keras.backend.cntk_backend._targets->cntk.one_hot(targets, predictions.shape[-1])
A:keras.backend.cntk_backend.tmp_shape->list(int_shape(x))
A:keras.backend.cntk_backend.kernel_shape->int_shape(kernel)
A:keras.backend.cntk_backend.slice_length->py_slice(i * stride, i * stride + kernel_size[0])
A:keras.backend.cntk_backend.x_aggregate->concatenate(xs, axis=1)
A:keras.backend.cntk_backend.weight->permute_dimensions(kernel, (2, 0, 1))
A:keras.backend.cntk_backend.slice_row->py_slice(i * stride_row, i * stride_row + kernel_size[0])
A:keras.backend.cntk_backend.slice_col->py_slice(j * stride_col, j * stride_col + kernel_size[1])
A:keras.backend.cntk_backend.cntk_axes->_normalize_axis(axes, x)
A:keras.backend.cntk_backend.out._keras_shape->tuple(size)
A:keras.backend.cntk_backend.const_a->cntk.reshape(const_a, shape)
A:keras.backend.cntk_backend.batch_axis->cntk.Axis.default_batch_axis()
A:keras.backend.cntk_backend.num_static_element->numpy.prod(np.asarray(self.from_shape))
A:keras.backend.cntk_backend.num_batch->int(num_element / num_static_element)
A:keras.backend.cntk_backend.grad_array_view->root_gradients.data()
A:keras.backend.cntk_backend.num_old_batch->int(num_element / num_static_element)
A:keras.backend.cntk_backend.U->cntk.constant(np.triu(np.ones((dim, dim))).astype(x.dtype))
A:keras.backend.cntk_backend.out->cntk.element_times(out, y)
A:keras.backend.cntk_backend.sliced_shape->list(shape)
A:keras.backend.cntk_backend.accumulator->fn(accumulator, elems[-i])
A:keras.backend.cntk_backend.accumulator.name->str(name)
keras.backend.cntk_backend.ConvertToBatch(self,input,name='convert_to_batch')
keras.backend.cntk_backend.ConvertToBatch.__init__(self,input,name='convert_to_batch')
keras.backend.cntk_backend.ConvertToBatch.backward(self,state,root_gradients)
keras.backend.cntk_backend.ConvertToBatch.forward(self,arguments,device=None,outputs_to_retain=None)
keras.backend.cntk_backend.ConvertToBatch.infer_outputs(self)
keras.backend.cntk_backend.ConvertToStatic(self,input,batch_size,name='convert_to_static')
keras.backend.cntk_backend.ConvertToStatic.__init__(self,input,batch_size,name='convert_to_static')
keras.backend.cntk_backend.ConvertToStatic.backward(self,state,root_gradients)
keras.backend.cntk_backend.ConvertToStatic.forward(self,arguments,device=None,outputs_to_retain=None)
keras.backend.cntk_backend.ConvertToStatic.infer_outputs(self)
keras.backend.cntk_backend.Function(self,inputs,outputs,updates=[],**kwargs)
keras.backend.cntk_backend.Function.__init__(self,inputs,outputs,updates=[],**kwargs)
keras.backend.cntk_backend.Function._is_input_shape_compatible(input,placeholder)
keras.backend.cntk_backend.LambdaFunc(self,arg,when=lambdaarg:True,execute=lambdaarg:print(arg),name='')
keras.backend.cntk_backend.LambdaFunc.__init__(self,arg,when=lambdaarg:True,execute=lambdaarg:print(arg),name='')
keras.backend.cntk_backend.LambdaFunc.backward(self,state,root_gradients)
keras.backend.cntk_backend.LambdaFunc.forward(self,argument,device=None,outputs_to_retain=None)
keras.backend.cntk_backend.LambdaFunc.infer_outputs(self)
keras.backend.cntk_backend.ReshapeBatch(self,input,shape,name='reshape_with_batch')
keras.backend.cntk_backend.ReshapeBatch.__init__(self,input,shape,name='reshape_with_batch')
keras.backend.cntk_backend.ReshapeBatch.backward(self,state,root_gradients)
keras.backend.cntk_backend.ReshapeBatch.forward(self,arguments,device=None,outputs_to_retain=None)
keras.backend.cntk_backend.ReshapeBatch.infer_outputs(self)
keras.backend.cntk_backend._contain_seqence_axis(x)
keras.backend.cntk_backend._convert_dtype_string(dtype)
keras.backend.cntk_backend._convert_string_dtype(dtype)
keras.backend.cntk_backend._get_cntk_version()
keras.backend.cntk_backend._get_dynamic_axis_num(x)
keras.backend.cntk_backend._moments(x,axes=None,shift=None,keep_dims=False)
keras.backend.cntk_backend._normalize_axis(axis,x)
keras.backend.cntk_backend._padding(x,pattern,axis)
keras.backend.cntk_backend._postprocess_conv2d_output(x,data_format)
keras.backend.cntk_backend._postprocess_conv3d_output(x,dim_ordering)
keras.backend.cntk_backend._prepare_name(name,default)
keras.backend.cntk_backend._preprocess_border_mode(padding)
keras.backend.cntk_backend._preprocess_conv2d_input(x,data_format)
keras.backend.cntk_backend._preprocess_conv2d_kernel(kernel,data_format)
keras.backend.cntk_backend._preprocess_conv3d_input(x,data_format)
keras.backend.cntk_backend._preprocess_conv3d_kernel(kernel,dim_ordering)
keras.backend.cntk_backend._reduce_on_axis(x,axis,reduce_fun_name)
keras.backend.cntk_backend._remove_dims(x,axis,keepdims=False)
keras.backend.cntk_backend._reshape_batch(x,shape)
keras.backend.cntk_backend._reshape_dummy_dim(x,axis)
keras.backend.cntk_backend._reshape_sequence(x,time_step)
keras.backend.cntk_backend._static_rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None)
keras.backend.cntk_backend.abs(x)
keras.backend.cntk_backend.all(x,axis=None,keepdims=False)
keras.backend.cntk_backend.any(x,axis=None,keepdims=False)
keras.backend.cntk_backend.arange(start,stop=None,step=1,dtype='int32')
keras.backend.cntk_backend.argmax(x,axis=-1)
keras.backend.cntk_backend.argmin(x,axis=-1)
keras.backend.cntk_backend.batch_dot(x,y,axes=None)
keras.backend.cntk_backend.batch_flatten(x)
keras.backend.cntk_backend.batch_get_value(xs)
keras.backend.cntk_backend.batch_normalization(x,mean,var,beta,gamma,axis=-1,epsilon=0.001)
keras.backend.cntk_backend.batch_set_value(tuples)
keras.backend.cntk_backend.bias_add(x,bias,data_format=None)
keras.backend.cntk_backend.binary_crossentropy(target,output,from_logits=False)
keras.backend.cntk_backend.cast(x,dtype)
keras.backend.cntk_backend.categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.backend.cntk_backend.classification_error(target,output,axis=-1)
keras.backend.cntk_backend.clear_session()
keras.backend.cntk_backend.clip(x,min_value,max_value)
keras.backend.cntk_backend.concatenate(tensors,axis=-1)
keras.backend.cntk_backend.constant(value,dtype=None,shape=None,name=None)
keras.backend.cntk_backend.control_dependencies(control_inputs)
keras.backend.cntk_backend.conv1d(x,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.cntk_backend.conv2d(x,kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.cntk_backend.conv2d_transpose(x,kernel,output_shape,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.cntk_backend.conv3d(x,kernel,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1))
keras.backend.cntk_backend.conv3d_transpose(x,kernel,output_shape,strides=(1,1,1),padding='valid',data_format=None)
keras.backend.cntk_backend.cos(x)
keras.backend.cntk_backend.count_params(x)
keras.backend.cntk_backend.ctc_batch_cost(y_true,y_pred,input_length,label_length)
keras.backend.cntk_backend.ctc_decode(y_pred,input_length,greedy=True,beam_width=100,top_paths=1,merge_repeated=False)
keras.backend.cntk_backend.ctc_label_dense_to_sparse(labels,label_lengths)
keras.backend.cntk_backend.cumprod(x,axis=0)
keras.backend.cntk_backend.cumsum(x,axis=0)
keras.backend.cntk_backend.depthwise_conv2d(x,depthwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.cntk_backend.dot(x,y)
keras.backend.cntk_backend.dropout(x,level,noise_shape=None,seed=None)
keras.backend.cntk_backend.dtype(x)
keras.backend.cntk_backend.elu(x,alpha=1.0)
keras.backend.cntk_backend.equal(x,y)
keras.backend.cntk_backend.eval(x)
keras.backend.cntk_backend.exp(x)
keras.backend.cntk_backend.expand_dims(x,axis=-1)
keras.backend.cntk_backend.eye(size,dtype=None,name=None)
keras.backend.cntk_backend.flatten(x)
keras.backend.cntk_backend.foldl(fn,elems,initializer=None,name=None)
keras.backend.cntk_backend.foldr(fn,elems,initializer=None,name=None)
keras.backend.cntk_backend.function(inputs,outputs,updates=[],**kwargs)
keras.backend.cntk_backend.gather(reference,indices)
keras.backend.cntk_backend.get_num_dynamic_axis(x)
keras.backend.cntk_backend.get_uid(prefix='')
keras.backend.cntk_backend.get_value(x)
keras.backend.cntk_backend.get_variable_shape(x)
keras.backend.cntk_backend.gradients(loss,variables)
keras.backend.cntk_backend.greater(x,y)
keras.backend.cntk_backend.greater_equal(x,y)
keras.backend.cntk_backend.hard_sigmoid(x)
keras.backend.cntk_backend.has_seq_axis(x)
keras.backend.cntk_backend.identity(x,name=None)
keras.backend.cntk_backend.in_test_phase(x,alt,training=None)
keras.backend.cntk_backend.in_top_k(predictions,targets,k)
keras.backend.cntk_backend.in_train_phase(x,alt,training=None)
keras.backend.cntk_backend.int_shape(x)
keras.backend.cntk_backend.is_keras_tensor(x)
keras.backend.cntk_backend.is_placeholder(x)
keras.backend.cntk_backend.is_sparse(tensor)
keras.backend.cntk_backend.is_tensor(x)
keras.backend.cntk_backend.is_variable(x)
keras.backend.cntk_backend.l2_normalize(x,axis=None)
keras.backend.cntk_backend.learning_phase()
keras.backend.cntk_backend.less(x,y)
keras.backend.cntk_backend.less_equal(x,y)
keras.backend.cntk_backend.local_conv1d(inputs,kernel,kernel_size,strides,data_format=None)
keras.backend.cntk_backend.local_conv2d(inputs,kernel,kernel_size,strides,output_shape,data_format=None)
keras.backend.cntk_backend.log(x)
keras.backend.cntk_backend.logsumexp(x,axis=None,keepdims=False)
keras.backend.cntk_backend.map_fn(fn,elems,name=None,dtype=None)
keras.backend.cntk_backend.max(x,axis=None,keepdims=False)
keras.backend.cntk_backend.maximum(x,y)
keras.backend.cntk_backend.mean(x,axis=None,keepdims=False)
keras.backend.cntk_backend.min(x,axis=None,keepdims=False)
keras.backend.cntk_backend.minimum(x,y)
keras.backend.cntk_backend.moving_average_update(variable,value,momentum)
keras.backend.cntk_backend.name_scope(name)
keras.backend.cntk_backend.ndim(x)
keras.backend.cntk_backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.cntk_backend.not_equal(x,y)
keras.backend.cntk_backend.one_hot(indices,num_classes)
keras.backend.cntk_backend.ones(shape,dtype=None,name=None)
keras.backend.cntk_backend.ones_like(x,dtype=None,name=None)
keras.backend.cntk_backend.pad(x,pad_info,data_format,num_dynamic_axis)
keras.backend.cntk_backend.permute_dimensions(x,pattern)
keras.backend.cntk_backend.placeholder(shape=None,ndim=None,dtype=None,sparse=False,name=None,dynamic_axis_num=1)
keras.backend.cntk_backend.pool2d(x,pool_size,strides=(1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.cntk_backend.pool3d(x,pool_size,strides=(1,1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.cntk_backend.pow(x,a)
keras.backend.cntk_backend.print_tensor(x,message='')
keras.backend.cntk_backend.prod(x,axis=None,keepdims=False)
keras.backend.cntk_backend.random_binomial(shape,p=0.0,dtype=None,seed=None)
keras.backend.cntk_backend.random_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.cntk_backend.random_normal_variable(shape,mean,scale,dtype=None,name=None,seed=None)
keras.backend.cntk_backend.random_uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)
keras.backend.cntk_backend.random_uniform_variable(shape,low,high,dtype=None,name=None,seed=None)
keras.backend.cntk_backend.relu(x,alpha=0.0,max_value=None,threshold=0.0)
keras.backend.cntk_backend.repeat(x,n)
keras.backend.cntk_backend.repeat_elements(x,rep,axis)
keras.backend.cntk_backend.reset_uids()
keras.backend.cntk_backend.reshape(x,shape)
keras.backend.cntk_backend.resize_images(x,height_factor,width_factor,data_format,interpolation='nearest')
keras.backend.cntk_backend.resize_volumes(x,depth_factor,height_factor,width_factor,data_format)
keras.backend.cntk_backend.reverse(x,axes)
keras.backend.cntk_backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None)
keras.backend.cntk_backend.round(x)
keras.backend.cntk_backend.separable_conv1d(x,depthwise_kernel,pointwise_kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.cntk_backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.cntk_backend.set_learning_phase(value)
keras.backend.cntk_backend.set_value(x,value)
keras.backend.cntk_backend.shape(x)
keras.backend.cntk_backend.sigmoid(x)
keras.backend.cntk_backend.sign(x)
keras.backend.cntk_backend.sin(x)
keras.backend.cntk_backend.size(x,name=None)
keras.backend.cntk_backend.slice(x,start,size)
keras.backend.cntk_backend.softmax(x,axis=-1)
keras.backend.cntk_backend.softplus(x)
keras.backend.cntk_backend.softsign(x)
keras.backend.cntk_backend.sparse_categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.backend.cntk_backend.spatial_2d_padding(x,padding=((1,1),(1,1)),data_format=None)
keras.backend.cntk_backend.spatial_3d_padding(x,padding=((1,1),(1,1),(1,1)),data_format=None)
keras.backend.cntk_backend.sqrt(x)
keras.backend.cntk_backend.square(x)
keras.backend.cntk_backend.squeeze(x,axis)
keras.backend.cntk_backend.stack(x,axis=0)
keras.backend.cntk_backend.std(x,axis=None,keepdims=False)
keras.backend.cntk_backend.stop_gradient(variables)
keras.backend.cntk_backend.sum(x,axis=None,keepdims=False)
keras.backend.cntk_backend.switch(condition,then_expression,else_expression)
keras.backend.cntk_backend.tanh(x)
keras.backend.cntk_backend.temporal_padding(x,padding=(1,1))
keras.backend.cntk_backend.tile(x,n)
keras.backend.cntk_backend.to_dense(tensor)
keras.backend.cntk_backend.transpose(x)
keras.backend.cntk_backend.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.cntk_backend.update(x,new_x)
keras.backend.cntk_backend.update_add(x,increment)
keras.backend.cntk_backend.update_sub(x,decrement)
keras.backend.cntk_backend.var(x,axis=None,keepdims=False)
keras.backend.cntk_backend.variable(value,dtype=None,name=None,constraint=None)
keras.backend.cntk_backend.zeros(shape,dtype=None,name=None)
keras.backend.cntk_backend.zeros_like(x,dtype=None,name=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/backend/numpy_backend.py----------------------------------------
A:keras.backend.numpy_backend.w->numpy.insert(w, 2 * j + 1, 0, axis=i)
A:keras.backend.numpy_backend.x->repeat_elements(x, width_factor, axis=3)
A:keras.backend.numpy_backend.dilation_rate->kwargs.pop('dilation_rate', 1)
A:keras.backend.numpy_backend.y->numpy.repeat(y, n, axis=1)
A:keras.backend.numpy_backend.x2->depthwise_conv(x, w1, padding=padding, data_format=data_format)
A:keras.backend.numpy_backend.(output_sample, _)->step_function(inputs[:, 0], initial_states + constants)
A:keras.backend.numpy_backend.mask->mask.astype(np.bool).astype(np.bool)
A:keras.backend.numpy_backend.mask_->numpy.expand_dims(mask_, axis=-1)
A:keras.backend.numpy_backend.output_mask->expand_mask(mask, output_sample)
A:keras.backend.numpy_backend.time_index->range(input_length)
A:keras.backend.numpy_backend.output_tm1->numpy.zeros(output_sample.shape)
A:keras.backend.numpy_backend.(output_t, states_t)->step_function(inputs[:, t], states_tm1 + constants)
A:keras.backend.numpy_backend.output_t->numpy.where(output_mask[:, t], output_t, output_tm1)
A:keras.backend.numpy_backend.training->learning_phase()
A:keras.backend.numpy_backend.above_threshold->numpy.clip(above_threshold, 0.0, max_value)
A:keras.backend.numpy_backend.cond_float->condition.astype(floatx())
A:keras.backend.numpy_backend.targets->targets.reshape(-1, 1).reshape(-1, 1)
A:keras.backend.numpy_backend.output->numpy.clip(output, 1e-07, 1 - 1e-07)
A:keras.backend.numpy_backend.axis->tuple(axis)
A:keras.backend.numpy_backend.all_dims_padding->transpose_shape(all_dims_padding, data_format, spatial_axes=(1, 2, 3))
A:keras.backend.numpy_backend.dtype->floatx()
A:keras.backend.numpy_backend.axes->tuple(axes)
A:keras.backend.numpy_backend.result->numpy.expand_dims(result, -1)
A:keras.backend.numpy_backend.noise->numpy.random.choice([0, 1], noise_shape, replace=True, p=[level, 1 - level])
A:keras.backend.numpy_backend.log_prob->numpy.zeros((num_samples, 1))
A:keras.backend.numpy_backend.decoded_length->numpy.zeros((num_samples,), dtype=np.int)
A:keras.backend.numpy_backend.decoded->_remove_blanks(decoded, num_classes)
A:keras.backend.numpy_backend.decoded_length[i]->len(decoded)
A:keras.backend.numpy_backend.is_not_repeat->numpy.insert(np.diff(inds).astype(np.bool), 0, True)
keras.backend.numpy_backend._remove_blanks(inds,num_classes)
keras.backend.numpy_backend._remove_repeats(inds)
keras.backend.numpy_backend.all(x,axis=None,keepdims=False)
keras.backend.numpy_backend.any(x,axis=None,keepdims=False)
keras.backend.numpy_backend.arange(start,stop=None,step=1,dtype='int32')
keras.backend.numpy_backend.argmax(x,axis=-1)
keras.backend.numpy_backend.argmin(x,axis=-1)
keras.backend.numpy_backend.batch_dot(x,y,axes=None)
keras.backend.numpy_backend.batch_flatten(x)
keras.backend.numpy_backend.batch_normalization(x,mean,var,beta,gamma,axis=-1,epsilon=0.001)
keras.backend.numpy_backend.bias_add(x,y,data_format)
keras.backend.numpy_backend.binary_crossentropy(target,output,from_logits=False)
keras.backend.numpy_backend.categorical_crossentropy(target,output,from_logits=False)
keras.backend.numpy_backend.clip(x,min_value,max_value)
keras.backend.numpy_backend.concatenate(tensors,axis=-1)
keras.backend.numpy_backend.constant(value,dtype=None,shape=None,name=None)
keras.backend.numpy_backend.conv(x,w,padding,data_format)
keras.backend.numpy_backend.conv_transpose(x,w,output_shape,padding,data_format,dilation_rate=1)
keras.backend.numpy_backend.count_params(x)
keras.backend.numpy_backend.ctc_decode(y_pred,input_length,greedy=True,beam_width=100,top_paths=1,merge_repeated=False)
keras.backend.numpy_backend.cumprod(x,axis=0)
keras.backend.numpy_backend.cumsum(x,axis=0)
keras.backend.numpy_backend.depthwise_conv(x,w,padding,data_format)
keras.backend.numpy_backend.dot(x,y)
keras.backend.numpy_backend.dropout(x,level,noise_shape=None,seed=None)
keras.backend.numpy_backend.dtype(x)
keras.backend.numpy_backend.elu(x,alpha=1.0)
keras.backend.numpy_backend.equal(x,y)
keras.backend.numpy_backend.eval(x)
keras.backend.numpy_backend.eye(size,dtype=None,name=None)
keras.backend.numpy_backend.flatten(x)
keras.backend.numpy_backend.gather(reference,indices)
keras.backend.numpy_backend.get_value(x)
keras.backend.numpy_backend.get_variable_shape(x)
keras.backend.numpy_backend.greater(x,y)
keras.backend.numpy_backend.greater_equal(x,y)
keras.backend.numpy_backend.hard_sigmoid(x)
keras.backend.numpy_backend.in_test_phase(x,alt,training=None)
keras.backend.numpy_backend.in_top_k(predictions,targets,k)
keras.backend.numpy_backend.in_train_phase(x,alt,training=None)
keras.backend.numpy_backend.int_shape(x)
keras.backend.numpy_backend.l2_normalize(x,axis=-1)
keras.backend.numpy_backend.learning_phase()
keras.backend.numpy_backend.less(x,y)
keras.backend.numpy_backend.less_equal(x,y)
keras.backend.numpy_backend.logsumexp(x,axis=None,keepdims=False)
keras.backend.numpy_backend.max(x,axis=None,keepdims=False)
keras.backend.numpy_backend.maximum(x,y)
keras.backend.numpy_backend.mean(x,axis=None,keepdims=False)
keras.backend.numpy_backend.min(x,axis=None,keepdims=False)
keras.backend.numpy_backend.minimum(x,y)
keras.backend.numpy_backend.ndim(x)
keras.backend.numpy_backend.normalize_conv(func)
keras.backend.numpy_backend.not_equal(x,y)
keras.backend.numpy_backend.one_hot(indices,num_classes)
keras.backend.numpy_backend.ones(shape,dtype=floatx(),name=None)
keras.backend.numpy_backend.ones_like(x,dtype=floatx(),name=None)
keras.backend.numpy_backend.permute_dimensions(x,pattern)
keras.backend.numpy_backend.pool(x,pool_size,strides,padding,data_format,pool_mode)
keras.backend.numpy_backend.pow(x,a=1.0)
keras.backend.numpy_backend.print_tensor(x,message='')
keras.backend.numpy_backend.prod(x,axis=None,keepdims=False)
keras.backend.numpy_backend.random_normal_variable(shape,mean,scale,dtype=None,name=None,seed=None)
keras.backend.numpy_backend.random_uniform_variable(shape,low,high,dtype=None,name=None,seed=None)
keras.backend.numpy_backend.relu(x,alpha=0.0,max_value=None,threshold=0.0)
keras.backend.numpy_backend.repeat(x,n)
keras.backend.numpy_backend.repeat_elements(x,rep,axis)
keras.backend.numpy_backend.reshape(x,shape)
keras.backend.numpy_backend.resize_images(x,height_factor,width_factor,data_format)
keras.backend.numpy_backend.resize_volumes(x,depth_factor,height_factor,width_factor,data_format)
keras.backend.numpy_backend.reverse(x,axes)
keras.backend.numpy_backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None)
keras.backend.numpy_backend.separable_conv(x,w1,w2,padding,data_format)
keras.backend.numpy_backend.set_learning_phase(value)
keras.backend.numpy_backend.sigmoid(x)
keras.backend.numpy_backend.slice(x,start,size)
keras.backend.numpy_backend.softmax(x,axis=-1)
keras.backend.numpy_backend.softplus(x)
keras.backend.numpy_backend.softsign(x)
keras.backend.numpy_backend.spatial_2d_padding(x,padding=((1,1),(1,1)),data_format=None)
keras.backend.numpy_backend.spatial_3d_padding(x,padding=((1,1),(1,1),(1,1)),data_format=None)
keras.backend.numpy_backend.sqrt(x)
keras.backend.numpy_backend.stack(x,axis=0)
keras.backend.numpy_backend.std(x,axis=None,keepdims=False)
keras.backend.numpy_backend.sum(x,axis=None,keepdims=False)
keras.backend.numpy_backend.switch(condition,then_expression,else_expression)
keras.backend.numpy_backend.tanh(x)
keras.backend.numpy_backend.temporal_padding(x,padding=(1,1))
keras.backend.numpy_backend.tile(x,n)
keras.backend.numpy_backend.transpose(x)
keras.backend.numpy_backend.var(x,axis=None,keepdims=False)
keras.backend.numpy_backend.variable(value,dtype=None,name=None,constraint=None)
keras.backend.numpy_backend.zeros(shape,dtype=floatx(),name=None)
keras.backend.numpy_backend.zeros_like(x,dtype=floatx(),name=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/backend/theano_backend.py----------------------------------------
A:keras.backend.theano_backend.theano.config.floatX->floatx()
A:keras.backend.theano_backend._LEARNING_PHASE->theano.tensor.scalar(dtype='uint8', name='keras_learning_phase')
A:keras.backend.theano_backend._UID_PREFIXES->defaultdict(int)
A:keras.backend.theano_backend.prefix->'/'.join(NAME_SCOPE_STACK)
A:keras.backend.theano_backend.dtype->floatx()
A:keras.backend.theano_backend.variable->theano.shared(value=value, name=_prepare_name(name, 'variable'), strict=False)
A:keras.backend.theano_backend.value->numpy.reshape(value, shape)
A:keras.backend.theano_backend.const->theano.tensor.constant(value, dtype=dtype, name=_prepare_name(name, 'constant'))
A:keras.backend.theano_backend.ndim->len(shape)
A:keras.backend.theano_backend.shape->int_shape(x)
A:keras.backend.theano_backend.name->_prepare_name(name, 'placeholder')
A:keras.backend.theano_backend.x->x.dimshuffle((0, 4, 1, 2, 3)).dimshuffle((0, 4, 1, 2, 3))
A:keras.backend.theano_backend.f->theano.function([], x.shape, profile=False)
A:keras.backend.theano_backend.out->expand_dims(out, 1)
A:keras.backend.theano_backend.x_shape->list(x._keras_shape)
A:keras.backend.theano_backend.y_shape->list(y._keras_shape)
A:keras.backend.theano_backend.out._keras_shape->tuple(size)
A:keras.backend.theano_backend.axes->list(axes)
A:keras.backend.theano_backend.y->theano.tensor.set_subtensor(output[indices], x)
A:keras.backend.theano_backend.y._keras_shape->tuple(kshape)
A:keras.backend.theano_backend.axis_list->list(set((int(a) for a in axis)))
A:keras.backend.theano_backend.keras_shape_list->list(x._keras_shape)
A:keras.backend.theano_backend.z->theano.tensor.neq(x, y)
A:keras.backend.theano_backend.gamma->gamma.dimshuffle(shuffle_pattern).dimshuffle(shuffle_pattern)
A:keras.backend.theano_backend.beta->beta.dimshuffle(shuffle_pattern).dimshuffle(shuffle_pattern)
A:keras.backend.theano_backend.(normed, mean, stdinv)->theano.tensor.nnet.bn.batch_normalization_train(x, gamma, beta, reduction_axes, epsilon)
A:keras.backend.theano_backend.reduction_axes->list(range(x.ndim - 1))
A:keras.backend.theano_backend.broadcast_beta->theano.tensor.reshape(beta, target_shape)
A:keras.backend.theano_backend.broadcast_gamma->theano.tensor.reshape(gamma, target_shape)
A:keras.backend.theano_backend.trained->theano.sandbox.cuda.dnn.dnn_batch_normalization_train(x, broadcast_gamma, broadcast_beta, 'spatial', epsilon)
A:keras.backend.theano_backend.normed->batch_normalization(x, broadcast_mean, broadcast_var, broadcast_beta, broadcast_gamma, epsilon)
A:keras.backend.theano_backend.mean->mean.dimshuffle(shuffle_pattern).dimshuffle(shuffle_pattern)
A:keras.backend.theano_backend.stdinv->theano.tensor.as_tensor_variable(stdinv)
A:keras.backend.theano_backend.var->var.dimshuffle(shuffle_pattern).dimshuffle(shuffle_pattern)
A:keras.backend.theano_backend.target_shape->theano.tensor.stack(*target_shape)
A:keras.backend.theano_backend.broadcast_mean->theano.tensor.reshape(mean, target_shape)
A:keras.backend.theano_backend.broadcast_var->theano.tensor.reshape(var, target_shape)
A:keras.backend.theano_backend.axis->mean.dimshuffle(shuffle_pattern).dimshuffle(shuffle_pattern).broadcastable.index(False)
A:keras.backend.theano_backend.shuffle_pattern->list(range(ndim))
A:keras.backend.theano_backend.result->theano.tensor.set_subtensor(output[:, padding[0]:x.shape[1] + padding[0], :], x)
A:keras.backend.theano_backend.output->permute_dimensions(output, (2, 0, 1, 3))
A:keras.backend.theano_backend.output_shape->list(input_shapes[0])
A:keras.backend.theano_backend.output._keras_shape->tuple(output._keras_shape)
A:keras.backend.theano_backend.pattern->tuple(pattern)
A:keras.backend.theano_backend.n->tuple(n)
A:keras.backend.theano_backend.kshape->list(x._keras_shape)
A:keras.backend.theano_backend.data_format->normalize_data_format(data_format)
A:keras.backend.theano_backend.input_shape->tuple((indices.shape[i] for i in range(indices.ndim)))
A:keras.backend.theano_backend.indices->list(range(input_length))
A:keras.backend.theano_backend.oh->theano.tensor.reshape(oh, input_shape + (num_classes,))
A:keras.backend.theano_backend.p_op->Print(message)
A:keras.backend.theano_backend.updates->unique_variables_to_update.items()
A:keras.backend.theano_backend.self.function->theano.function(inputs, outputs, updates=updates, allow_input_downcast=True, on_unused_input='ignore', name=name, **kwargs)
A:keras.backend.theano_backend.self._metrics_function->theano.function([], self._metrics, name=name + '_metrics' if name else None)
A:keras.backend.theano_backend.outputs->outputs.dimshuffle(axes).dimshuffle(axes)
A:keras.backend.theano_backend.metrics->self._metrics_function()
A:keras.backend.theano_backend.inputs->inputs.dimshuffle(axes).dimshuffle(axes)
A:keras.backend.theano_backend.mask->mask.dimshuffle([1, 0]).dimshuffle([1, 0])
A:keras.backend.theano_backend.mask_t->expand_dims(mask_t)
A:keras.backend.theano_backend.reps->theano.tensor.concatenate([[1], add_shape], 0)
A:keras.backend.theano_backend.(output, new_states)->step_function(inputs[i], states + constants)
A:keras.backend.theano_backend.prev_output->zeros_like(output)
A:keras.backend.theano_backend.output_mask->get_matching_mask(mask, outputs)
A:keras.backend.theano_backend.state_mask->get_matching_mask(mask, state)
A:keras.backend.theano_backend.initial_output->theano.tensor.unbroadcast(initial_output, 0, 1)
A:keras.backend.theano_backend.initial_states[0]->theano.tensor.unbroadcast(initial_states[0], 0, 1)
A:keras.backend.theano_backend.(outputs, new_states)->step_function(inputs, states)
A:keras.backend.theano_backend.(results, _)->theano.scan(_step, sequences=inputs, outputs_info=[None] + initial_states, non_sequences=constants, go_backwards=go_backwards)
A:keras.backend.theano_backend.(outputs, states)->step_function(inputs[i], states + constants)
A:keras.backend.theano_backend.then_expression->then_expression()
A:keras.backend.theano_backend.else_expression->else_expression()
A:keras.backend.theano_backend.cond_ndim->ndim(condition)
A:keras.backend.theano_backend.expr_ndim->ndim(then_expression)
A:keras.backend.theano_backend.condition->expand_dims(condition)
A:keras.backend.theano_backend.training->learning_phase()
A:keras.backend.theano_backend.alt->alt()
A:keras.backend.theano_backend.negative_part->theano.tensor.nnet.relu(-x)
A:keras.backend.theano_backend.xm->x.dimshuffle((0, 4, 1, 2, 3)).dimshuffle((0, 4, 1, 2, 3)).max(axis=axis, keepdims=True)
A:keras.backend.theano_backend.output_dimensions->list(range(len(int_shape(output))))
A:keras.backend.theano_backend.target->reshape(target, shape(output))
A:keras.backend.theano_backend.seed->numpy.random.randint(1, 10000000.0)
A:keras.backend.theano_backend.noise_shape->tuple(noise_shape)
A:keras.backend.theano_backend.rng->RandomStreams(seed=seed)
A:keras.backend.theano_backend.random_tensor->theano.tensor.patternbroadcast(random_tensor, [dim == 1 for dim in noise_shape])
A:keras.backend.theano_backend.square_sum->theano.tensor.sum(T.square(x), axis=axis, keepdims=True)
A:keras.backend.theano_backend.norm->theano.tensor.sqrt(T.maximum(square_sum, epsilon()))
A:keras.backend.theano_backend.kernel->_preprocess_conv3d_kernel(kernel, data_format)
A:keras.backend.theano_backend.image_shape->_preprocess_conv2d_image_shape(int_shape(x), data_format)
A:keras.backend.theano_backend.volume_shape->_preprocess_conv3d_volume_shape(int_shape(x), data_format)
A:keras.backend.theano_backend.filter_shape->tuple((int_or_none(v) for v in filter_shape))
A:keras.backend.theano_backend.conv_out->_postprocess_conv3d_output(conv_out, x, padding, kernel_shape, strides, data_format)
A:keras.backend.theano_backend.kernel_shape->int_shape(kernel)
A:keras.backend.theano_backend.th_padding->_preprocess_padding(padding)
A:keras.backend.theano_backend.op->theano.tensor.nnet.abstract_conv.AbstractConv3d_gradInputs(imshp=None, kshp=kernel_shape, subsample=strides, border_mode=th_padding, filter_flip=not flip_filters)
A:keras.backend.theano_backend.depthwise_kernel->_preprocess_conv2d_depthwise_kernel(depthwise_kernel, depthwise_kernel_shape, data_format)
A:keras.backend.theano_backend.pointwise_kernel->_preprocess_conv2d_kernel(pointwise_kernel, data_format)
A:keras.backend.theano_backend.depthwise_kernel_shape->_preprocess_conv2d_depthwise_filter_shape(depthwise_kernel_shape, data_format)
A:keras.backend.theano_backend.pointwise_kernel_shape->_preprocess_conv2d_filter_shape(pointwise_kernel_shape, data_format)
A:keras.backend.theano_backend.pool_out->pool_out.dimshuffle((0, 2, 3, 4, 1)).dimshuffle((0, 2, 3, 4, 1))
A:keras.backend.theano_backend.bias_shape->tuple(bias.shape)
A:keras.backend.theano_backend.normal_t->RandomStreams(seed=seed).normal(size=shape, avg=mean, std=stddev, dtype=dtype)
A:keras.backend.theano_backend.Y_->theano.tensor.set_subtensor(Y_[T.arange(Y.shape[0]) * 2 + 1], Y)
A:keras.backend.theano_backend.non_repeats->theano.tensor.neq(Y[skip_idxs], Y[skip_idxs + 2])
A:keras.backend.theano_backend.active_next->theano.tensor.cast(T.minimum(T.maximum(active + 1, T.max(T.concatenate([active_skip_idxs, [-1]])) + 2 + 1), log_p_curr.shape[0]), 'int32')
A:keras.backend.theano_backend.common_factor->theano.tensor.max(log_probs)
A:keras.backend.theano_backend.p_prev->theano.tensor.exp(log_p_prev[:active] - common_factor)
A:keras.backend.theano_backend._p_prev->theano.tensor.inc_subtensor(_p_prev[active_skip_idxs + 2], p_prev[active_skip_idxs])
A:keras.backend.theano_backend.log_p_next->theano.tensor.set_subtensor(zeros[:active_next], log_p_curr[:active_next] + updated_log_p_prev)
A:keras.backend.theano_backend.L->theano.tensor.log(smoothed)
A:keras.backend.theano_backend.zeros->theano.tensor.zeros_like(L[0])
A:keras.backend.theano_backend.f_skip_idxs->ctc_create_skip_idxs(Y)
A:keras.backend.theano_backend.b_skip_idxs->ctc_create_skip_idxs(Y[::-1])
A:keras.backend.theano_backend.(f_active_next, log_f_next)->ctc_update_log_p(f_skip_idxs, zeros, f_active, log_f_curr, log_f_prev)
A:keras.backend.theano_backend.(b_active_next, log_b_next)->ctc_update_log_p(b_skip_idxs, zeros, b_active, log_b_curr, log_b_prev)
A:keras.backend.theano_backend.([f_active, log_f_probs, b_active, log_b_probs], _)->theano.scan(step, sequences=[L, L[::-1, ::-1]], outputs_info=[np.int32(1), log_first, np.int32(1), log_first])
A:keras.backend.theano_backend.idxs->theano.tensor.arange(L.shape[1]).dimshuffle('x', 0)
A:keras.backend.theano_backend.(log_probs, mask)->ctc_path_probs(predict, ctc_interleave_blanks(Y))
A:keras.backend.theano_backend.total_log_prob->theano.tensor.log(T.sum(T.exp(log_probs - common_factor)[mask.nonzero()]))
A:keras.backend.theano_backend.(ret, _)->theano.scan(fn=ctc_step, outputs_info=None, sequences=[y_true, y_pred, input_length, label_length])
A:keras.backend.theano_backend.ret->ret.dimshuffle('x', 0).dimshuffle('x', 0)
A:keras.backend.theano_backend.slice_length->py_slice(i * stride, i * stride + kernel_size[0])
A:keras.backend.theano_backend.x_aggregate->concatenate(xs, axis=0)
A:keras.backend.theano_backend.slice_row->py_slice(i * stride_row, i * stride_row + kernel_size[0])
A:keras.backend.theano_backend.slice_col->py_slice(j * stride_col, j * stride_col + kernel_size[1])
A:keras.backend.theano_backend.x_flatten->reshape(inputs[:, :, slice_row, slice_col], (1, -1, feature_dim))
keras.backend.theano_backend.Function(self,inputs,outputs,updates=[],name=None,**kwargs)
keras.backend.theano_backend.Function.__init__(self,inputs,outputs,updates=[],name=None,**kwargs)
keras.backend.theano_backend._assert_has_capability(module,func)
keras.backend.theano_backend._assert_sparse_module()
keras.backend.theano_backend._old_batch_normalization(x,mean,var,beta,gamma,epsilon=0.001)
keras.backend.theano_backend._old_normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.theano_backend._postprocess_conv2d_output(conv_out,x,padding,kernel_shape,strides,data_format)
keras.backend.theano_backend._postprocess_conv3d_output(conv_out,x,padding,kernel_shape,strides,data_format)
keras.backend.theano_backend._prepare_name(name,default)
keras.backend.theano_backend._preprocess_conv2d_depthwise_filter_shape(filter_shape,data_format)
keras.backend.theano_backend._preprocess_conv2d_depthwise_kernel(kernel,kernel_shape,data_format)
keras.backend.theano_backend._preprocess_conv2d_filter_shape(filter_shape,data_format)
keras.backend.theano_backend._preprocess_conv2d_image_shape(image_shape,data_format)
keras.backend.theano_backend._preprocess_conv2d_input(x,data_format)
keras.backend.theano_backend._preprocess_conv2d_kernel(kernel,data_format)
keras.backend.theano_backend._preprocess_conv3d_filter_shape(filter_shape,data_format)
keras.backend.theano_backend._preprocess_conv3d_input(x,data_format)
keras.backend.theano_backend._preprocess_conv3d_kernel(kernel,data_format)
keras.backend.theano_backend._preprocess_conv3d_volume_shape(volume_shape,data_format)
keras.backend.theano_backend._preprocess_padding(padding)
keras.backend.theano_backend._raise_invalid_arg(key)
keras.backend.theano_backend._set_keras_shape_for_reduction(x,y,axis,keepdims)
keras.backend.theano_backend.abs(x)
keras.backend.theano_backend.all(x,axis=None,keepdims=False)
keras.backend.theano_backend.any(x,axis=None,keepdims=False)
keras.backend.theano_backend.arange(start,stop=None,step=1,dtype='int32')
keras.backend.theano_backend.argmax(x,axis=-1)
keras.backend.theano_backend.argmin(x,axis=-1)
keras.backend.theano_backend.batch_dot(x,y,axes=None)
keras.backend.theano_backend.batch_flatten(x)
keras.backend.theano_backend.batch_get_value(xs)
keras.backend.theano_backend.batch_normalization(x,mean,var,beta,gamma,axis=-1,epsilon=0.001)
keras.backend.theano_backend.batch_set_value(tuples)
keras.backend.theano_backend.bias_add(x,bias,data_format=None)
keras.backend.theano_backend.binary_crossentropy(target,output,from_logits=False)
keras.backend.theano_backend.cast(x,dtype)
keras.backend.theano_backend.categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.backend.theano_backend.clip(x,min_value,max_value)
keras.backend.theano_backend.concatenate(tensors,axis=-1)
keras.backend.theano_backend.constant(value,dtype=None,shape=None,name=None)
keras.backend.theano_backend.control_dependencies(control_inputs)
keras.backend.theano_backend.conv1d(x,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.theano_backend.conv2d(x,kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.theano_backend.conv2d_transpose(x,kernel,output_shape,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.theano_backend.conv3d(x,kernel,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1))
keras.backend.theano_backend.conv3d_transpose(x,kernel,output_shape,strides=(1,1,1),padding='valid',data_format=None)
keras.backend.theano_backend.cos(x)
keras.backend.theano_backend.count_params(x)
keras.backend.theano_backend.ctc_batch_cost(y_true,y_pred,input_length,label_length)
keras.backend.theano_backend.ctc_cost(predict,Y)
keras.backend.theano_backend.ctc_create_skip_idxs(Y)
keras.backend.theano_backend.ctc_decode(y_pred,input_length,greedy=True,beam_width=100,top_paths=1,merge_repeated=False)
keras.backend.theano_backend.ctc_interleave_blanks(Y)
keras.backend.theano_backend.ctc_label_dense_to_sparse(labels,label_lengths)
keras.backend.theano_backend.ctc_path_probs(predict,Y,alpha=0.0001)
keras.backend.theano_backend.ctc_update_log_p(skip_idxs,zeros,active,log_p_curr,log_p_prev)
keras.backend.theano_backend.cumprod(x,axis=0)
keras.backend.theano_backend.cumsum(x,axis=0)
keras.backend.theano_backend.depthwise_conv2d(x,depthwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.theano_backend.dot(x,y)
keras.backend.theano_backend.dropout(x,level,noise_shape=None,seed=None)
keras.backend.theano_backend.dtype(x)
keras.backend.theano_backend.elu(x,alpha=1.0)
keras.backend.theano_backend.equal(x,y)
keras.backend.theano_backend.eval(x)
keras.backend.theano_backend.exp(x)
keras.backend.theano_backend.expand_dims(x,axis=-1)
keras.backend.theano_backend.eye(size,dtype=None,name=None)
keras.backend.theano_backend.flatten(x)
keras.backend.theano_backend.foldl(fn,elems,initializer=None,name=None)
keras.backend.theano_backend.foldr(fn,elems,initializer=None,name=None)
keras.backend.theano_backend.function(inputs,outputs,updates=[],**kwargs)
keras.backend.theano_backend.gather(reference,indices)
keras.backend.theano_backend.get_uid(prefix='')
keras.backend.theano_backend.get_value(x)
keras.backend.theano_backend.get_variable_shape(x)
keras.backend.theano_backend.gradients(loss,variables)
keras.backend.theano_backend.greater(x,y)
keras.backend.theano_backend.greater_equal(x,y)
keras.backend.theano_backend.hard_sigmoid(x)
keras.backend.theano_backend.identity(x,name=None)
keras.backend.theano_backend.in_test_phase(x,alt,training=None)
keras.backend.theano_backend.in_top_k(predictions,targets,k)
keras.backend.theano_backend.in_train_phase(x,alt,training=None)
keras.backend.theano_backend.int_shape(x)
keras.backend.theano_backend.is_keras_tensor(x)
keras.backend.theano_backend.is_placeholder(x)
keras.backend.theano_backend.is_sparse(tensor)
keras.backend.theano_backend.is_tensor(x)
keras.backend.theano_backend.is_variable(x)
keras.backend.theano_backend.l2_normalize(x,axis=None)
keras.backend.theano_backend.learning_phase()
keras.backend.theano_backend.less(x,y)
keras.backend.theano_backend.less_equal(x,y)
keras.backend.theano_backend.local_conv1d(inputs,kernel,kernel_size,strides,data_format=None)
keras.backend.theano_backend.local_conv2d(inputs,kernel,kernel_size,strides,output_shape,data_format=None)
keras.backend.theano_backend.log(x)
keras.backend.theano_backend.logsumexp(x,axis=None,keepdims=False)
keras.backend.theano_backend.map_fn(fn,elems,name=None,dtype=None)
keras.backend.theano_backend.max(x,axis=None,keepdims=False)
keras.backend.theano_backend.maximum(x,y)
keras.backend.theano_backend.mean(x,axis=None,keepdims=False)
keras.backend.theano_backend.min(x,axis=None,keepdims=False)
keras.backend.theano_backend.minimum(x,y)
keras.backend.theano_backend.moving_average_update(variable,value,momentum)
keras.backend.theano_backend.name_scope(name)
keras.backend.theano_backend.ndim(x)
keras.backend.theano_backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.theano_backend.not_equal(x,y)
keras.backend.theano_backend.one_hot(indices,num_classes)
keras.backend.theano_backend.ones(shape,dtype=None,name=None)
keras.backend.theano_backend.ones_like(x,dtype=None,name=None)
keras.backend.theano_backend.pattern_broadcast(x,broadcastable)
keras.backend.theano_backend.permute_dimensions(x,pattern)
keras.backend.theano_backend.placeholder(shape=None,ndim=None,dtype=None,sparse=False,name=None)
keras.backend.theano_backend.pool2d(x,pool_size,strides=(1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.theano_backend.pool3d(x,pool_size,strides=(1,1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.theano_backend.pow(x,a)
keras.backend.theano_backend.print_tensor(x,message='')
keras.backend.theano_backend.prod(x,axis=None,keepdims=False)
keras.backend.theano_backend.random_binomial(shape,p=0.0,dtype=None,seed=None)
keras.backend.theano_backend.random_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.theano_backend.random_normal_variable(shape,mean,scale,dtype=None,name=None)
keras.backend.theano_backend.random_uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)
keras.backend.theano_backend.random_uniform_variable(shape,low,high,dtype=None,name=None)
keras.backend.theano_backend.relu(x,alpha=0.0,max_value=None,threshold=0.0)
keras.backend.theano_backend.repeat(x,n)
keras.backend.theano_backend.repeat_elements(x,rep,axis)
keras.backend.theano_backend.reset_uids()
keras.backend.theano_backend.reshape(x,shape)
keras.backend.theano_backend.resize_images(x,height_factor,width_factor,data_format,interpolation='nearest')
keras.backend.theano_backend.resize_volumes(x,depth_factor,height_factor,width_factor,data_format)
keras.backend.theano_backend.reverse(x,axes)
keras.backend.theano_backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None)
keras.backend.theano_backend.round(x)
keras.backend.theano_backend.separable_conv1d(x,depthwise_kernel,pointwise_kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.theano_backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.theano_backend.set_learning_phase(value)
keras.backend.theano_backend.set_value(x,value)
keras.backend.theano_backend.shape(x)
keras.backend.theano_backend.sigmoid(x)
keras.backend.theano_backend.sign(x)
keras.backend.theano_backend.sin(x)
keras.backend.theano_backend.size(x,name=None)
keras.backend.theano_backend.slice(x,start,size)
keras.backend.theano_backend.softmax(x,axis=-1)
keras.backend.theano_backend.softplus(x)
keras.backend.theano_backend.softsign(x)
keras.backend.theano_backend.sparse_categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.backend.theano_backend.spatial_2d_padding(x,padding=((1,1),(1,1)),data_format=None)
keras.backend.theano_backend.spatial_3d_padding(x,padding=((1,1),(1,1),(1,1)),data_format=None)
keras.backend.theano_backend.sqrt(x)
keras.backend.theano_backend.square(x)
keras.backend.theano_backend.squeeze(x,axis)
keras.backend.theano_backend.stack(x,axis=0)
keras.backend.theano_backend.std(x,axis=None,keepdims=False)
keras.backend.theano_backend.stop_gradient(variables)
keras.backend.theano_backend.sum(x,axis=None,keepdims=False)
keras.backend.theano_backend.switch(condition,then_expression,else_expression)
keras.backend.theano_backend.tanh(x)
keras.backend.theano_backend.temporal_padding(x,padding=(1,1))
keras.backend.theano_backend.tile(x,n)
keras.backend.theano_backend.to_dense(tensor)
keras.backend.theano_backend.transpose(x)
keras.backend.theano_backend.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.theano_backend.update(x,new_x)
keras.backend.theano_backend.update_add(x,increment)
keras.backend.theano_backend.update_sub(x,decrement)
keras.backend.theano_backend.var(x,axis=None,keepdims=False)
keras.backend.theano_backend.variable(value,dtype=None,name=None,constraint=None)
keras.backend.theano_backend.zeros(shape,dtype=None,name=None)
keras.backend.theano_backend.zeros_like(x,dtype=None,name=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/backend/common.py----------------------------------------
A:keras.backend.common._EPSILON->float(e)
A:keras.backend.common._FLOATX->str(floatx)
A:keras.backend.common._IMAGE_DATA_FORMAT->str(data_format)
A:keras.backend.common.value->image_data_format()
A:keras.backend.common.data_format->image_data_format().lower()
keras.backend.common.cast_to_floatx(x)
keras.backend.common.eager(func)
keras.backend.common.epsilon()
keras.backend.common.floatx()
keras.backend.common.image_data_format()
keras.backend.common.image_dim_ordering()
keras.backend.common.normalize_data_format(value)
keras.backend.common.set_epsilon(e)
keras.backend.common.set_floatx(floatx)
keras.backend.common.set_image_data_format(data_format)
keras.backend.common.set_image_dim_ordering(dim_ordering)
keras.backend.common.symbolic(func)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/backend/load_backend.py----------------------------------------
A:keras.backend.load_backend._keras_dir->os.path.join(_keras_base_dir, '.keras')
A:keras.backend.load_backend._keras_base_dir->os.path.expanduser('~')
A:keras.backend.load_backend._config_path->os.path.expanduser(os.path.join(_keras_dir, 'keras.json'))
A:keras.backend.load_backend._config->json.load(f)
A:keras.backend.load_backend._floatx->json.load(f).get('floatx', floatx())
A:keras.backend.load_backend._epsilon->json.load(f).get('epsilon', epsilon())
A:keras.backend.load_backend._backend->json.load(f).get('backend', _BACKEND)
A:keras.backend.load_backend._image_data_format->json.load(f).get('image_data_format', image_data_format())
A:keras.backend.load_backend.backend_module->importlib.import_module(_BACKEND)
A:keras.backend.load_backend.namespace->globals()
keras.backend.backend()
keras.backend.load_backend.backend()


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/backend/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/backend/tensorflow_backend.py----------------------------------------
A:keras.backend.tensorflow_backend._SYMBOLIC_SCOPE->threading.local()
A:keras.backend.tensorflow_backend.out->tensorflow.matmul(x, y)
A:keras.backend.tensorflow_backend.value->tensorflow.random_normal_initializer(mean, scale, seed=seed)(shape, dtype=dtype)
A:keras.backend.tensorflow_backend.data_format->normalize_data_format(data_format)
A:keras.backend.tensorflow_backend.lp->tensorflow.python.keras.backend.learning_phase()
A:keras.backend.tensorflow_backend.int_lp->tensorflow.cast(lp, 'int32', name='learning_phase')
A:keras.backend.tensorflow_backend.session->get_session()
A:keras.backend.tensorflow_backend.variables->tensorflow.global_variables()
A:keras.backend.tensorflow_backend.is_initialized->get_session().run([tf.is_variable_initialized(v) for v in candidate_vars])
A:keras.backend.tensorflow_backend.self.device->tensorflow.python.framework.device.DeviceSpec.from_string(device_str)
A:keras.backend.tensorflow_backend.g->get_graph()
A:keras.backend.tensorflow_backend.op->tensorflow.print(message, x, output_stream=sys.stdout)
A:keras.backend.tensorflow_backend.device_type->device_type.lower().lower()
A:keras.backend.tensorflow_backend.device->_get_current_tf_device()
A:keras.backend.tensorflow_backend.devices->get_session().list_devices()
A:keras.backend.tensorflow_backend._LOCAL_DEVICES->tensorflow.config.experimental_list_devices()
A:keras.backend.tensorflow_backend.explicitly_on_cpu->_is_current_explicit_device('cpu')
A:keras.backend.tensorflow_backend.v->tensorflow.ones(shape=shape, dtype=dtype, name=name)
A:keras.backend.tensorflow_backend.v._keras_shape->int_shape(value)
A:keras.backend.tensorflow_backend.dtype->floatx()
A:keras.backend.tensorflow_backend.x->tensorflow.nn.bias_add(x, bias)
A:keras.backend.tensorflow_backend.shape->int_shape(x)
A:keras.backend.tensorflow_backend.eval_fn->function([], [x])
A:keras.backend.tensorflow_backend.seed->numpy.random.randint(10000000.0)
A:keras.backend.tensorflow_backend.decay->tensorflow.python.ops.math_ops.cast(decay, x.dtype.base_dtype)
A:keras.backend.tensorflow_backend.x_shape->int_shape(x)
A:keras.backend.tensorflow_backend.y_shape->shape(y)
A:keras.backend.tensorflow_backend.y_permute_dim->list(range(ndim(y)))
A:keras.backend.tensorflow_backend.xt->tensorflow.reshape(x, [-1, x_shape[-1]])
A:keras.backend.tensorflow_backend.yt->tensorflow.reshape(tf.transpose(y, perm=y_permute_dim), [y_shape[-2], -1])
A:keras.backend.tensorflow_backend.x_ndim->len(x_shape)
A:keras.backend.tensorflow_backend.y_ndim->len(y_shape)
A:keras.backend.tensorflow_backend.axes->list(axes)
A:keras.backend.tensorflow_backend.y->tensorflow.reshape(y, y_squashed_shape)
A:keras.backend.tensorflow_backend.pattern->transpose_shape(pattern, data_format, spatial_axes=(1, 2, 3))
A:keras.backend.tensorflow_backend.x_squashed_dim->tensorflow.reduce_prod(x_mid_dims)
A:keras.backend.tensorflow_backend.x_squashed_shape->tensorflow.stack([x_shape[0], x_squashed_dim, x_shape[-1]])
A:keras.backend.tensorflow_backend.y_squashed_dim->tensorflow.reduce_prod(y_trail_dims)
A:keras.backend.tensorflow_backend.y_squashed_shape->tensorflow.stack([y_shape[0], y_shape[1], y_squashed_dim])
A:keras.backend.tensorflow_backend.result->cast(result, dtype)
A:keras.backend.tensorflow_backend.output_shape->tensorflow.stack(list(output_shape))
A:keras.backend.tensorflow_backend.m->tensorflow.reduce_mean(x, axis, True)
A:keras.backend.tensorflow_backend.devs_squared->tensorflow.square(x - m)
A:keras.backend.tensorflow_backend.zero->_to_tensor(0.0, x.dtype.base_dtype)
A:keras.backend.tensorflow_backend.inf->_to_tensor(np.inf, x.dtype.base_dtype)
A:keras.backend.tensorflow_backend.(mean, var)->tensorflow.nn.moments(x, reduction_axes, None, None, False)
A:keras.backend.tensorflow_backend.normed->tensorflow.nn.batch_normalization(x, broadcast_mean, broadcast_var, broadcast_beta, broadcast_gamma, epsilon)
A:keras.backend.tensorflow_backend.target_shape->tensorflow.stack(target_shape)
A:keras.backend.tensorflow_backend.broadcast_mean->tensorflow.reshape(mean, target_shape)
A:keras.backend.tensorflow_backend.broadcast_var->tensorflow.reshape(var, target_shape)
A:keras.backend.tensorflow_backend.broadcast_gamma->tensorflow.reshape(gamma, target_shape)
A:keras.backend.tensorflow_backend.broadcast_beta->tensorflow.reshape(beta, target_shape)
A:keras.backend.tensorflow_backend.gamma->tensorflow.cast(gamma, tf.float32)
A:keras.backend.tensorflow_backend.beta->tensorflow.cast(beta, tf.float32)
A:keras.backend.tensorflow_backend.mean->tensorflow.cast(mean, tf.float32)
A:keras.backend.tensorflow_backend.var->tensorflow.cast(var, tf.float32)
A:keras.backend.tensorflow_backend.(y, _, _)->fused_batch_norm(x, gamma, beta, epsilon=epsilon, mean=mean, variance=var, data_format=tf_data_format, is_training=False)
A:keras.backend.tensorflow_backend.rank->ndim(tensors[0])
A:keras.backend.tensorflow_backend.original_shape->int_shape(x)
A:keras.backend.tensorflow_backend.output->permute_dimensions(output, (2, 0, 1, 3))
A:keras.backend.tensorflow_backend.splits->tensorflow.split(value=x, num_or_size_splits=x_shape[axis], axis=axis)
A:keras.backend.tensorflow_backend.x_rep->tensorflow.reshape(x_rep, x_shape)
A:keras.backend.tensorflow_backend.reps->tensorflow.constant(reps, dtype='int32')
A:keras.backend.tensorflow_backend.x_rep._keras_shape->tuple(x_shape)
A:keras.backend.tensorflow_backend.start->tensorflow.cond(start < 0, true_fn=lambda : tf.constant(0, dtype=start.dtype), false_fn=lambda : start)
A:keras.backend.tensorflow_backend.n->tuple(n)
A:keras.backend.tensorflow_backend.(last_output, outputs, new_states)->tensorflow.python.keras.backend.rnn(step_function, inputs, initial_states, go_backwards=go_backwards, mask=mask, constants=constants, unroll=unroll, input_length=input_length)
A:keras.backend.tensorflow_backend.reachable->tensorflow.python.keras.utils.tf_utils.get_reachable_from_inputs([learning_phase()], targets=[last_output])
A:keras.backend.tensorflow_backend.condition->tensorflow.tile(condition, tile_shape)
A:keras.backend.tensorflow_backend.cond_ndim->ndim(condition)
A:keras.backend.tensorflow_backend.then_expression->then_expression()
A:keras.backend.tensorflow_backend.else_expression->else_expression()
A:keras.backend.tensorflow_backend.expr_ndim->ndim(then_expression)
A:keras.backend.tensorflow_backend.cond_shape->tensorflow.concat([tf.shape(condition), [1] * ndim_diff], axis=0)
A:keras.backend.tensorflow_backend.expr_shape->tensorflow.shape(then_expression)
A:keras.backend.tensorflow_backend.zero_expr_shape->tensorflow.ones_like(expr_shape)
A:keras.backend.tensorflow_backend.tile_shape->tensorflow.where(shape_diff > 0, expr_shape, zero_expr_shape)
A:keras.backend.tensorflow_backend.training->learning_phase()
A:keras.backend.tensorflow_backend.negative_part->tensorflow.nn.relu(-x)
A:keras.backend.tensorflow_backend.max_value->_to_tensor(max_value, x.dtype.base_dtype)
A:keras.backend.tensorflow_backend.alpha->_to_tensor(alpha, x.dtype.base_dtype)
A:keras.backend.tensorflow_backend.res->tensorflow.nn.elu(x)
A:keras.backend.tensorflow_backend.kernel_shape->int_shape(kernel)
A:keras.backend.tensorflow_backend.padding->_preprocess_padding(padding)
A:keras.backend.tensorflow_backend.(x, tf_data_format)->_preprocess_conv3d_input(x, data_format)
A:keras.backend.tensorflow_backend.depthwise_kernel->tensorflow.expand_dims(depthwise_kernel, 0)
A:keras.backend.tensorflow_backend.pointwise_kernel->tensorflow.expand_dims(pointwise_kernel, 0)
A:keras.backend.tensorflow_backend.slice_length->py_slice(i * stride, i * stride + kernel_size[0])
A:keras.backend.tensorflow_backend.x_aggregate->concatenate(xs, axis=0)
A:keras.backend.tensorflow_backend.slice_row->py_slice(i * stride_row, i * stride_row + kernel_size[0])
A:keras.backend.tensorflow_backend.slice_col->py_slice(j * stride_col, j * stride_col + kernel_size[1])
A:keras.backend.tensorflow_backend.bias_shape->int_shape(bias)
A:keras.backend.tensorflow_backend.new_shape->transpose_shape(new_shape, data_format, spatial_axes=(1,))
A:keras.backend.tensorflow_backend.label_shape->tensorflow.cast(label_shape, tf.int64)
A:keras.backend.tensorflow_backend.num_batches_tns->tensorflow.stack([label_shape[0]])
A:keras.backend.tensorflow_backend.max_num_labels_tns->tensorflow.stack([label_shape[1]])
A:keras.backend.tensorflow_backend.init->tensorflow.cast(tf.fill([1, label_shape[1]], 0), tf.bool)
A:keras.backend.tensorflow_backend.dense_mask->tensorflow.python.ops.functional_ops.scan(range_less_than, label_lengths, initializer=init, parallel_iterations=1)
A:keras.backend.tensorflow_backend.label_array->tensorflow.reshape(tf.tile(tf.range(label_shape[1]), num_batches_tns), label_shape)
A:keras.backend.tensorflow_backend.label_ind->tensorflow.boolean_mask(label_array, dense_mask)
A:keras.backend.tensorflow_backend.tmp->tensorflow.tile(tf.range(label_shape[0]), max_num_labels_tns)
A:keras.backend.tensorflow_backend.batch_array->tensorflow.transpose(tf.reshape(tmp, reverse(label_shape, 0)))
A:keras.backend.tensorflow_backend.batch_ind->tensorflow.boolean_mask(batch_array, dense_mask)
A:keras.backend.tensorflow_backend.indices->tensorflow.cast(indices, tf.int64)
A:keras.backend.tensorflow_backend.vals_sparse->tensorflow.gather_nd(labels, indices)
A:keras.backend.tensorflow_backend.label_length->tensorflow.cast(tf.squeeze(label_length, axis=-1), tf.int32)
A:keras.backend.tensorflow_backend.input_length->tensorflow.cast(input_length, tf.int32)
A:keras.backend.tensorflow_backend.sparse_labels->tensorflow.cast(ctc_label_dense_to_sparse(y_true, label_length), tf.int32)
A:keras.backend.tensorflow_backend.y_pred->tensorflow.python.ops.math_ops.log(tf.transpose(y_pred, perm=[1, 0, 2]) + epsilon())
A:keras.backend.tensorflow_backend.(decoded, log_prob)->tensorflow.python.ops.ctc_ops.ctc_beam_search_decoder(inputs=y_pred, sequence_length=input_length, beam_width=beam_width, top_paths=top_paths, merge_repeated=merge_repeated)
A:keras.backend.tensorflow_backend.dense_tensor->tensorflow.sparse.to_dense(st, default_value=-1)
keras.backend.tensorflow_backend._TfDeviceCaptureOp(self)
keras.backend.tensorflow_backend._TfDeviceCaptureOp.__init__(self)
keras.backend.tensorflow_backend._TfDeviceCaptureOp._set_device(self,device)
keras.backend.tensorflow_backend._TfDeviceCaptureOp._set_device_from_string(self,device_str)
keras.backend.tensorflow_backend._broadcast_normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.tensorflow_backend._fused_normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.tensorflow_backend._get_available_gpus()
keras.backend.tensorflow_backend._get_current_tf_device()
keras.backend.tensorflow_backend._has_compat_v1()
keras.backend.tensorflow_backend._has_nchw_support()
keras.backend.tensorflow_backend._is_current_explicit_device(device_type)
keras.backend.tensorflow_backend._is_tf_1()
keras.backend.tensorflow_backend._preprocess_conv1d_input(x,data_format)
keras.backend.tensorflow_backend._preprocess_conv2d_input(x,data_format,force_transpose=False)
keras.backend.tensorflow_backend._preprocess_conv3d_input(x,data_format)
keras.backend.tensorflow_backend._preprocess_padding(padding)
keras.backend.tensorflow_backend._regular_normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.tensorflow_backend._to_tensor(x,dtype)
keras.backend.tensorflow_backend.abs(x)
keras.backend.tensorflow_backend.all(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.any(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.arange(start,stop=None,step=1,dtype='int32')
keras.backend.tensorflow_backend.argmax(x,axis=-1)
keras.backend.tensorflow_backend.argmin(x,axis=-1)
keras.backend.tensorflow_backend.batch_dot(x,y,axes=None)
keras.backend.tensorflow_backend.batch_flatten(x)
keras.backend.tensorflow_backend.batch_get_value(ops)
keras.backend.tensorflow_backend.batch_normalization(x,mean,var,beta,gamma,axis=-1,epsilon=0.001)
keras.backend.tensorflow_backend.batch_set_value(tuples)
keras.backend.tensorflow_backend.bias_add(x,bias,data_format=None)
keras.backend.tensorflow_backend.binary_crossentropy(target,output,from_logits=False)
keras.backend.tensorflow_backend.cast(x,dtype)
keras.backend.tensorflow_backend.cast_to_floatx(x)
keras.backend.tensorflow_backend.categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.backend.tensorflow_backend.clear_session()
keras.backend.tensorflow_backend.clip(x,min_value,max_value)
keras.backend.tensorflow_backend.concatenate(tensors,axis=-1)
keras.backend.tensorflow_backend.constant(value,dtype=None,shape=None,name=None)
keras.backend.tensorflow_backend.control_dependencies(control_inputs)
keras.backend.tensorflow_backend.conv1d(x,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.tensorflow_backend.conv2d(x,kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.tensorflow_backend.conv2d_transpose(x,kernel,output_shape,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.tensorflow_backend.conv3d(x,kernel,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1))
keras.backend.tensorflow_backend.conv3d_transpose(x,kernel,output_shape,strides=(1,1,1),padding='valid',data_format=None)
keras.backend.tensorflow_backend.cos(x)
keras.backend.tensorflow_backend.count_params(x)
keras.backend.tensorflow_backend.ctc_batch_cost(y_true,y_pred,input_length,label_length)
keras.backend.tensorflow_backend.ctc_decode(y_pred,input_length,greedy=True,beam_width=100,top_paths=1,merge_repeated=False)
keras.backend.tensorflow_backend.ctc_label_dense_to_sparse(labels,label_lengths)
keras.backend.tensorflow_backend.cumprod(x,axis=0)
keras.backend.tensorflow_backend.cumsum(x,axis=0)
keras.backend.tensorflow_backend.depthwise_conv2d(x,depthwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.tensorflow_backend.dot(x,y)
keras.backend.tensorflow_backend.dropout(x,level,noise_shape=None,seed=None)
keras.backend.tensorflow_backend.dtype(x)
keras.backend.tensorflow_backend.eager(func)
keras.backend.tensorflow_backend.elu(x,alpha=1.0)
keras.backend.tensorflow_backend.epsilon()
keras.backend.tensorflow_backend.equal(x,y)
keras.backend.tensorflow_backend.eval(x)
keras.backend.tensorflow_backend.exp(x)
keras.backend.tensorflow_backend.expand_dims(x,axis=-1)
keras.backend.tensorflow_backend.eye(size,dtype=None,name=None)
keras.backend.tensorflow_backend.flatten(x)
keras.backend.tensorflow_backend.floatx()
keras.backend.tensorflow_backend.foldl(fn,elems,initializer=None,name=None)
keras.backend.tensorflow_backend.foldr(fn,elems,initializer=None,name=None)
keras.backend.tensorflow_backend.function(inputs,outputs,updates=None,**kwargs)
keras.backend.tensorflow_backend.gather(reference,indices)
keras.backend.tensorflow_backend.get_session()
keras.backend.tensorflow_backend.get_uid(prefix='')
keras.backend.tensorflow_backend.get_value(x)
keras.backend.tensorflow_backend.get_variable_shape(x)
keras.backend.tensorflow_backend.gradients(loss,variables)
keras.backend.tensorflow_backend.greater(x,y)
keras.backend.tensorflow_backend.greater_equal(x,y)
keras.backend.tensorflow_backend.hard_sigmoid(x)
keras.backend.tensorflow_backend.identity(x,name=None)
keras.backend.tensorflow_backend.image_data_format()
keras.backend.tensorflow_backend.in_test_phase(x,alt,training=None)
keras.backend.tensorflow_backend.in_top_k(predictions,targets,k)
keras.backend.tensorflow_backend.in_train_phase(x,alt,training=None)
keras.backend.tensorflow_backend.int_shape(x)
keras.backend.tensorflow_backend.is_keras_tensor(x)
keras.backend.tensorflow_backend.is_placeholder(x)
keras.backend.tensorflow_backend.is_sparse(tensor)
keras.backend.tensorflow_backend.is_symbolic(x)
keras.backend.tensorflow_backend.is_tensor(x)
keras.backend.tensorflow_backend.is_variable(x)
keras.backend.tensorflow_backend.l2_normalize(x,axis=None)
keras.backend.tensorflow_backend.learning_phase()
keras.backend.tensorflow_backend.less(x,y)
keras.backend.tensorflow_backend.less_equal(x,y)
keras.backend.tensorflow_backend.local_conv1d(inputs,kernel,kernel_size,strides,data_format=None)
keras.backend.tensorflow_backend.local_conv2d(inputs,kernel,kernel_size,strides,output_shape,data_format=None)
keras.backend.tensorflow_backend.log(x)
keras.backend.tensorflow_backend.logsumexp(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.manual_variable_initialization(value)
keras.backend.tensorflow_backend.map_fn(fn,elems,name=None,dtype=None)
keras.backend.tensorflow_backend.max(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.maximum(x,y)
keras.backend.tensorflow_backend.mean(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.min(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.minimum(x,y)
keras.backend.tensorflow_backend.moving_average_update(x,value,momentum)
keras.backend.tensorflow_backend.ndim(x)
keras.backend.tensorflow_backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.tensorflow_backend.normalize_data_format(value)
keras.backend.tensorflow_backend.not_equal(x,y)
keras.backend.tensorflow_backend.one_hot(indices,num_classes)
keras.backend.tensorflow_backend.ones(shape,dtype=None,name=None)
keras.backend.tensorflow_backend.ones_like(x,dtype=None,name=None)
keras.backend.tensorflow_backend.permute_dimensions(x,pattern)
keras.backend.tensorflow_backend.placeholder(shape=None,ndim=None,dtype=None,sparse=False,name=None)
keras.backend.tensorflow_backend.pool2d(x,pool_size,strides=(1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.tensorflow_backend.pool3d(x,pool_size,strides=(1,1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.tensorflow_backend.pow(x,a)
keras.backend.tensorflow_backend.print_tensor(x,message='')
keras.backend.tensorflow_backend.prod(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.random_binomial(shape,p=0.0,dtype=None,seed=None)
keras.backend.tensorflow_backend.random_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.tensorflow_backend.random_normal_variable(shape,mean,scale,dtype=None,name=None,seed=None)
keras.backend.tensorflow_backend.random_uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)
keras.backend.tensorflow_backend.random_uniform_variable(shape,low,high,dtype=None,name=None,seed=None)
keras.backend.tensorflow_backend.relu(x,alpha=0.0,max_value=None,threshold=0.0)
keras.backend.tensorflow_backend.repeat(x,n)
keras.backend.tensorflow_backend.repeat_elements(x,rep,axis)
keras.backend.tensorflow_backend.reset_uids()
keras.backend.tensorflow_backend.reshape(x,shape)
keras.backend.tensorflow_backend.resize_images(x,height_factor,width_factor,data_format,interpolation='nearest')
keras.backend.tensorflow_backend.resize_volumes(x,depth_factor,height_factor,width_factor,data_format)
keras.backend.tensorflow_backend.reverse(x,axes)
keras.backend.tensorflow_backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None)
keras.backend.tensorflow_backend.round(x)
keras.backend.tensorflow_backend.separable_conv1d(x,depthwise_kernel,pointwise_kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.tensorflow_backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.tensorflow_backend.set_epsilon(e)
keras.backend.tensorflow_backend.set_floatx(floatx)
keras.backend.tensorflow_backend.set_image_data_format(data_format)
keras.backend.tensorflow_backend.set_learning_phase(value)
keras.backend.tensorflow_backend.set_session(session)
keras.backend.tensorflow_backend.set_value(x,value)
keras.backend.tensorflow_backend.shape(x)
keras.backend.tensorflow_backend.sigmoid(x)
keras.backend.tensorflow_backend.sign(x)
keras.backend.tensorflow_backend.sin(x)
keras.backend.tensorflow_backend.size(x,name=None)
keras.backend.tensorflow_backend.slice(x,start,size)
keras.backend.tensorflow_backend.softmax(x,axis=-1)
keras.backend.tensorflow_backend.softplus(x)
keras.backend.tensorflow_backend.softsign(x)
keras.backend.tensorflow_backend.sparse_categorical_crossentropy(target,output,from_logits=False,axis=-1)
keras.backend.tensorflow_backend.spatial_2d_padding(x,padding=((1,1),(1,1)),data_format=None)
keras.backend.tensorflow_backend.spatial_3d_padding(x,padding=((1,1),(1,1),(1,1)),data_format=None)
keras.backend.tensorflow_backend.sqrt(x)
keras.backend.tensorflow_backend.square(x)
keras.backend.tensorflow_backend.squeeze(x,axis)
keras.backend.tensorflow_backend.stack(x,axis=0)
keras.backend.tensorflow_backend.std(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.stop_gradient(variables)
keras.backend.tensorflow_backend.sum(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.switch(condition,then_expression,else_expression)
keras.backend.tensorflow_backend.symbolic(func)
keras.backend.tensorflow_backend.tanh(x)
keras.backend.tensorflow_backend.temporal_padding(x,padding=(1,1))
keras.backend.tensorflow_backend.tile(x,n)
keras.backend.tensorflow_backend.to_dense(tensor)
keras.backend.tensorflow_backend.transpose(x)
keras.backend.tensorflow_backend.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.tensorflow_backend.update(x,new_x)
keras.backend.tensorflow_backend.update_add(x,increment)
keras.backend.tensorflow_backend.update_sub(x,decrement)
keras.backend.tensorflow_backend.v1_variable_initialization()
keras.backend.tensorflow_backend.var(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.variable(value,dtype=None,name=None,constraint=None)
keras.backend.tensorflow_backend.zeros(shape,dtype=None,name=None)
keras.backend.tensorflow_backend.zeros_like(x,dtype=None,name=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/feature_column/sequence_feature_column.py----------------------------------------
A:keras.feature_column.sequence_feature_column.training->keras.backend.learning_phase()
A:keras.feature_column.sequence_feature_column.transformation_cache->tensorflow.compat.v2.__internal__.feature_column.FeatureTransformationCache(features)
A:keras.feature_column.sequence_feature_column.(dense_tensor, sequence_length)->column.get_sequence_dense_tensor(transformation_cache, self._state_manager)
A:keras.feature_column.sequence_feature_column.sequence_length->_assert_all_equal_and_return(sequence_lengths)
keras.feature_column.sequence_feature_column.SequenceFeatures(self,feature_columns,trainable=True,name=None,**kwargs)
keras.feature_column.sequence_feature_column.SequenceFeatures.__init__(self,feature_columns,trainable=True,name=None,**kwargs)
keras.feature_column.sequence_feature_column.SequenceFeatures._is_feature_layer(self)
keras.feature_column.sequence_feature_column.SequenceFeatures._target_shape(self,input_shape,total_elements)
keras.feature_column.sequence_feature_column.SequenceFeatures.call(self,features,training=None)
keras.feature_column.sequence_feature_column._assert_all_equal_and_return(tensors,name=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/feature_column/dense_features_v2.py----------------------------------------
A:keras.feature_column.dense_features_v2.self._state_manager->_StateManagerImplV2(self, self.trainable)
A:keras.feature_column.dense_features_v2.var->self._layer.add_weight(name=name, shape=shape, dtype=dtype, initializer=initializer, trainable=self._trainable and trainable, use_resource=use_resource)
A:keras.feature_column.dense_features_v2.previous_value->getattr(obj, '_manual_tracking', True)
keras.feature_column.dense_features_v2.DenseFeatures(self,feature_columns,trainable=True,name=None,**kwargs)
keras.feature_column.dense_features_v2.DenseFeatures.__init__(self,feature_columns,trainable=True,name=None,**kwargs)
keras.feature_column.dense_features_v2.DenseFeatures.build(self,_)
keras.feature_column.dense_features_v2._StateManagerImplV2(tf.__internal__.feature_column.StateManager)
keras.feature_column.dense_features_v2._StateManagerImplV2.create_variable(self,feature_column,name,shape,dtype=None,trainable=True,use_resource=True,initializer=None)
keras.feature_column.dense_features_v2.no_manual_dependency_tracking_scope(obj)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/feature_column/base_feature_layer.py----------------------------------------
A:keras.feature_column.base_feature_layer.self._feature_columns->_normalize_feature_columns(feature_columns)
A:keras.feature_column.base_feature_layer.self._state_manager->tensorflow.compat.v2.__internal__.feature_column.StateManager(self, self.trainable)
A:keras.feature_column.base_feature_layer.num_elements->column.variable_shape.num_elements()
A:keras.feature_column.base_feature_layer.target_shape->self._target_shape(tf.compat.v1.shape(tensor), num_elements)
A:keras.feature_column.base_feature_layer.config['partitioner']->keras.utils.generic_utils.serialize_keras_object(self._partitioner)
A:keras.feature_column.base_feature_layer.base_config->super(_BaseFeaturesLayer, self).get_config()
A:keras.feature_column.base_feature_layer.config_cp->config.copy()
A:keras.feature_column.base_feature_layer.config_cp['partitioner']->keras.utils.generic_utils.deserialize_keras_object(config['partitioner'], custom_objects)
A:keras.feature_column.base_feature_layer.invalid_char->re.compile('[^A-Za-z0-9_.\\-]')
A:keras.feature_column.base_feature_layer.batch_size->tensorflow.compat.v2.compat.v1.Dimension(tf.compat.dimension_value(tensors[i].shape[0]))
A:keras.feature_column.base_feature_layer.feature_columns->list(feature_columns)
keras.feature_column.base_feature_layer._BaseFeaturesLayer(self,feature_columns,expected_column_type,trainable,name,partitioner=None,**kwargs)
keras.feature_column.base_feature_layer._BaseFeaturesLayer.__init__(self,feature_columns,expected_column_type,trainable,name,partitioner=None,**kwargs)
keras.feature_column.base_feature_layer._BaseFeaturesLayer._output_shape(self,input_shape,num_elements)
keras.feature_column.base_feature_layer._BaseFeaturesLayer._process_dense_tensor(self,column,tensor)
keras.feature_column.base_feature_layer._BaseFeaturesLayer._verify_and_concat_tensors(self,output_tensors)
keras.feature_column.base_feature_layer._BaseFeaturesLayer.build(self,_)
keras.feature_column.base_feature_layer._BaseFeaturesLayer.compute_output_shape(self,input_shape)
keras.feature_column.base_feature_layer._BaseFeaturesLayer.from_config(cls,config,custom_objects=None)
keras.feature_column.base_feature_layer._BaseFeaturesLayer.get_config(self)
keras.feature_column.base_feature_layer._normalize_feature_columns(feature_columns)
keras.feature_column.base_feature_layer._sanitize_column_name_for_variable_scope(name)
keras.feature_column.base_feature_layer._verify_static_batch_size_equality(tensors,columns)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/feature_column/dense_features.py----------------------------------------
A:keras.feature_column.dense_features.metadata->json.loads(super(DenseFeatures, self)._tracking_metadata)
A:keras.feature_column.dense_features.training->keras.backend.learning_phase()
A:keras.feature_column.dense_features.transformation_cache->tensorflow.compat.v2.__internal__.feature_column.FeatureTransformationCache(features)
A:keras.feature_column.dense_features.tensor->column.get_dense_tensor(transformation_cache, self._state_manager)
A:keras.feature_column.dense_features.processed_tensors->self._process_dense_tensor(column, tensor)
keras.feature_column.dense_features.DenseFeatures(self,feature_columns,trainable=True,name=None,partitioner=None,**kwargs)
keras.feature_column.dense_features.DenseFeatures.__init__(self,feature_columns,trainable=True,name=None,partitioner=None,**kwargs)
keras.feature_column.dense_features.DenseFeatures._is_feature_layer(self)
keras.feature_column.dense_features.DenseFeatures._target_shape(self,input_shape,total_elements)
keras.feature_column.dense_features.DenseFeatures._tracking_metadata(self)
keras.feature_column.dense_features.DenseFeatures.call(self,features,cols_to_output_tensors=None,training=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/feature_column/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/applications/mobilenet_v2.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/applications/vgg19.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/applications/resnet.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/applications/imagenet_utils.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/applications/nasnet.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/applications/inception_v3.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/applications/mobilenet.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/applications/densenet.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/applications/resnet50.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/applications/efficientnet.py----------------------------------------
A:keras.applications.efficientnet.layers->VersionAwareLayers()
A:keras.applications.efficientnet.input_shape->keras.applications.imagenet_utils.obtain_input_shape(input_shape, default_size=default_size, min_size=32, data_format=backend.image_data_format(), require_flatten=include_top, weights=weights)
A:keras.applications.efficientnet.img_input->VersionAwareLayers().Input(tensor=input_tensor, shape=input_shape)
A:keras.applications.efficientnet.new_filters->max(divisor, int(filters + divisor / 2) // divisor * divisor)
A:keras.applications.efficientnet.x->VersionAwareLayers().add([x, inputs], name=name + 'add')
A:keras.applications.efficientnet.blocks_args->copy.deepcopy(blocks_args)
A:keras.applications.efficientnet.blocks->float(sum((round_repeats(args['repeats']) for args in blocks_args)))
A:keras.applications.efficientnet.args['filters_in']->round_filters(args['filters_in'])
A:keras.applications.efficientnet.args['filters_out']->round_filters(args['filters_out'])
A:keras.applications.efficientnet.inputs->keras.utils.layer_utils.get_source_inputs(input_tensor)
A:keras.applications.efficientnet.model->keras.engine.training.Model(inputs, x, name=model_name)
A:keras.applications.efficientnet.weights_path->keras.utils.data_utils.get_file(file_name, BASE_WEIGHTS_PATH + file_name, cache_subdir='models', file_hash=file_hash)
A:keras.applications.efficientnet.filters_se->max(1, int(filters_in * se_ratio))
A:keras.applications.efficientnet.se->VersionAwareLayers().Conv2D(filters, 1, padding='same', activation='sigmoid', kernel_initializer=CONV_KERNEL_INITIALIZER, name=name + 'se_expand')(se)
A:keras.applications.efficientnet.EfficientNetB0.__doc__->BASE_DOCSTRING.format(name='EfficientNetB0')
A:keras.applications.efficientnet.EfficientNetB1.__doc__->BASE_DOCSTRING.format(name='EfficientNetB1')
A:keras.applications.efficientnet.EfficientNetB2.__doc__->BASE_DOCSTRING.format(name='EfficientNetB2')
A:keras.applications.efficientnet.EfficientNetB3.__doc__->BASE_DOCSTRING.format(name='EfficientNetB3')
A:keras.applications.efficientnet.EfficientNetB4.__doc__->BASE_DOCSTRING.format(name='EfficientNetB4')
A:keras.applications.efficientnet.EfficientNetB5.__doc__->BASE_DOCSTRING.format(name='EfficientNetB5')
A:keras.applications.efficientnet.EfficientNetB6.__doc__->BASE_DOCSTRING.format(name='EfficientNetB6')
A:keras.applications.efficientnet.EfficientNetB7.__doc__->BASE_DOCSTRING.format(name='EfficientNetB7')
keras.applications.efficientnet.EfficientNet(width_coefficient,depth_coefficient,default_size,dropout_rate=0.2,drop_connect_rate=0.2,depth_divisor=8,activation='swish',blocks_args='default',model_name='efficientnet',include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
keras.applications.efficientnet.EfficientNetB0(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
keras.applications.efficientnet.EfficientNetB1(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
keras.applications.efficientnet.EfficientNetB2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
keras.applications.efficientnet.EfficientNetB3(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
keras.applications.efficientnet.EfficientNetB4(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
keras.applications.efficientnet.EfficientNetB5(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
keras.applications.efficientnet.EfficientNetB6(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
keras.applications.efficientnet.EfficientNetB7(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
keras.applications.efficientnet.block(inputs,activation='swish',drop_rate=0.0,name='',filters_in=32,filters_out=16,kernel_size=3,strides=1,expand_ratio=1,se_ratio=0.0,id_skip=True)
keras.applications.efficientnet.decode_predictions(preds,top=5)
keras.applications.efficientnet.preprocess_input(x,data_format=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/applications/inception_resnet_v2.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/applications/vgg16.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/applications/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/applications/resnet_v2.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/applications/xception.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/applications/mobilenet_v3.py----------------------------------------
A:keras.applications.mobilenet_v3.layers->VersionAwareLayers()
A:keras.applications.mobilenet_v3.is_input_t_tensor->keras.backend.is_keras_tensor(layer_utils.get_source_inputs(input_tensor))
A:keras.applications.mobilenet_v3.img_input->VersionAwareLayers().Input(tensor=input_tensor, shape=input_shape)
A:keras.applications.mobilenet_v3.x->VersionAwareLayers().Add(name=prefix + 'Add')([shortcut, x])
A:keras.applications.mobilenet_v3.last_conv_ch->_depth(backend.int_shape(x)[channel_axis] * 6)
A:keras.applications.mobilenet_v3.last_point_ch->_depth(last_point_ch * alpha)
A:keras.applications.mobilenet_v3.inputs->keras.utils.layer_utils.get_source_inputs(input_tensor)
A:keras.applications.mobilenet_v3.model->keras.models.Model(inputs, x, name='MobilenetV3' + model_type)
A:keras.applications.mobilenet_v3.model_name->'{}{}_224_{}_float'.format(model_type, '_minimalistic' if minimalistic else '', str(alpha))
A:keras.applications.mobilenet_v3.weights_path->keras.utils.data_utils.get_file(file_name, BASE_WEIGHT_PATH + file_name, cache_subdir='models', file_hash=file_hash)
A:keras.applications.mobilenet_v3.MobileNetV3Small.__doc__->BASE_DOCSTRING.format(name='MobileNetV3Small')
A:keras.applications.mobilenet_v3.MobileNetV3Large.__doc__->BASE_DOCSTRING.format(name='MobileNetV3Large')
A:keras.applications.mobilenet_v3.new_v->max(min_value, int(v + divisor / 2) // divisor * divisor)
A:keras.applications.mobilenet_v3.prefix->'expanded_conv_{}/'.format(block_id)
keras.applications.mobilenet_v3.MobileNetV3(stack_fn,last_point_ch,input_shape=None,alpha=1.0,model_type='large',minimalistic=False,include_top=True,weights='imagenet',input_tensor=None,classes=1000,pooling=None,dropout_rate=0.2,classifier_activation='softmax')
keras.applications.mobilenet_v3.MobileNetV3Large(input_shape=None,alpha=1.0,minimalistic=False,include_top=True,weights='imagenet',input_tensor=None,classes=1000,pooling=None,dropout_rate=0.2,classifier_activation='softmax')
keras.applications.mobilenet_v3.MobileNetV3Small(input_shape=None,alpha=1.0,minimalistic=False,include_top=True,weights='imagenet',input_tensor=None,classes=1000,pooling=None,dropout_rate=0.2,classifier_activation='softmax')
keras.applications.mobilenet_v3._depth(v,divisor=8,min_value=None)
keras.applications.mobilenet_v3._inverted_res_block(x,expansion,filters,kernel_size,stride,se_ratio,activation,block_id)
keras.applications.mobilenet_v3._se_block(inputs,filters,se_ratio,prefix)
keras.applications.mobilenet_v3.decode_predictions(preds,top=5)
keras.applications.mobilenet_v3.hard_sigmoid(x)
keras.applications.mobilenet_v3.hard_swish(x)
keras.applications.mobilenet_v3.preprocess_input(x,data_format=None)
keras.applications.mobilenet_v3.relu(x)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/initializers/initializers_v2.py----------------------------------------
A:keras.initializers.initializers_v2.dtype->tensorflow.compat.v2.as_dtype(dtype)
A:keras.initializers.initializers_v2.self._random_generator->_RandomGenerator(seed)
A:keras.initializers.initializers_v2.distribution->distribution.lower().lower()
A:keras.initializers.initializers_v2.(fan_in, fan_out)->_compute_fans(shape)
A:keras.initializers.initializers_v2.stddev->math.sqrt(scale)
A:keras.initializers.initializers_v2.limit->math.sqrt(3.0 * scale)
A:keras.initializers.initializers_v2.a->self._random_generator.random_normal(flat_shape, dtype=dtype)
A:keras.initializers.initializers_v2.(q, r)->tensorflow.compat.v2.linalg.qr(a, full_matrices=False)
A:keras.initializers.initializers_v2.d->tensorflow.compat.v2.linalg.tensor_diag_part(r)
A:keras.initializers.initializers_v2.q->tensorflow.compat.v2.linalg.matrix_transpose(q)
A:keras.initializers.initializers_v2.initializer->tensorflow.compat.v2.eye(*shape, dtype=dtype)
keras.initializers.initializers_v2.Constant(self,value=0)
keras.initializers.initializers_v2.Constant.__init__(self,value=0)
keras.initializers.initializers_v2.Constant.get_config(self)
keras.initializers.initializers_v2.GlorotNormal(self,seed=None)
keras.initializers.initializers_v2.GlorotNormal.__init__(self,seed=None)
keras.initializers.initializers_v2.GlorotNormal.get_config(self)
keras.initializers.initializers_v2.GlorotUniform(self,seed=None)
keras.initializers.initializers_v2.GlorotUniform.__init__(self,seed=None)
keras.initializers.initializers_v2.GlorotUniform.get_config(self)
keras.initializers.initializers_v2.HeNormal(self,seed=None)
keras.initializers.initializers_v2.HeNormal.__init__(self,seed=None)
keras.initializers.initializers_v2.HeNormal.get_config(self)
keras.initializers.initializers_v2.HeUniform(self,seed=None)
keras.initializers.initializers_v2.HeUniform.__init__(self,seed=None)
keras.initializers.initializers_v2.HeUniform.get_config(self)
keras.initializers.initializers_v2.Identity(self,gain=1.0)
keras.initializers.initializers_v2.Identity.__init__(self,gain=1.0)
keras.initializers.initializers_v2.Identity.get_config(self)
keras.initializers.initializers_v2.Initializer(self,shape,dtype=None,**kwargs)
keras.initializers.initializers_v2.Initializer.__call__(self,shape,dtype=None,**kwargs)
keras.initializers.initializers_v2.Initializer.from_config(cls,config)
keras.initializers.initializers_v2.Initializer.get_config(self)
keras.initializers.initializers_v2.LecunNormal(self,seed=None)
keras.initializers.initializers_v2.LecunNormal.__init__(self,seed=None)
keras.initializers.initializers_v2.LecunNormal.get_config(self)
keras.initializers.initializers_v2.LecunUniform(self,seed=None)
keras.initializers.initializers_v2.LecunUniform.__init__(self,seed=None)
keras.initializers.initializers_v2.LecunUniform.get_config(self)
keras.initializers.initializers_v2.Ones(self,shape,dtype=None,**kwargs)
keras.initializers.initializers_v2.Ones.__call__(self,shape,dtype=None,**kwargs)
keras.initializers.initializers_v2.Orthogonal(self,gain=1.0,seed=None)
keras.initializers.initializers_v2.Orthogonal.__init__(self,gain=1.0,seed=None)
keras.initializers.initializers_v2.Orthogonal.get_config(self)
keras.initializers.initializers_v2.RandomNormal(self,mean=0.0,stddev=0.05,seed=None)
keras.initializers.initializers_v2.RandomNormal.__init__(self,mean=0.0,stddev=0.05,seed=None)
keras.initializers.initializers_v2.RandomNormal.get_config(self)
keras.initializers.initializers_v2.RandomUniform(self,minval=-0.05,maxval=0.05,seed=None)
keras.initializers.initializers_v2.RandomUniform.__init__(self,minval=-0.05,maxval=0.05,seed=None)
keras.initializers.initializers_v2.RandomUniform.get_config(self)
keras.initializers.initializers_v2.TruncatedNormal(self,mean=0.0,stddev=0.05,seed=None)
keras.initializers.initializers_v2.TruncatedNormal.__init__(self,mean=0.0,stddev=0.05,seed=None)
keras.initializers.initializers_v2.TruncatedNormal.get_config(self)
keras.initializers.initializers_v2.VarianceScaling(self,scale=1.0,mode='fan_in',distribution='truncated_normal',seed=None)
keras.initializers.initializers_v2.VarianceScaling.__init__(self,scale=1.0,mode='fan_in',distribution='truncated_normal',seed=None)
keras.initializers.initializers_v2.VarianceScaling.get_config(self)
keras.initializers.initializers_v2.Zeros(self,shape,dtype=None,**kwargs)
keras.initializers.initializers_v2.Zeros.__call__(self,shape,dtype=None,**kwargs)
keras.initializers.initializers_v2._RandomGenerator(self,seed=None)
keras.initializers.initializers_v2._RandomGenerator.__init__(self,seed=None)
keras.initializers.initializers_v2._RandomGenerator.random_normal(self,shape,mean=0.0,stddev=1,dtype=tf.float32)
keras.initializers.initializers_v2._RandomGenerator.random_uniform(self,shape,minval,maxval,dtype)
keras.initializers.initializers_v2._RandomGenerator.truncated_normal(self,shape,mean,stddev,dtype)
keras.initializers.initializers_v2._assert_float_dtype(dtype)
keras.initializers.initializers_v2._compute_fans(shape)
keras.initializers.initializers_v2._get_dtype(dtype)
keras.initializers.initializers_v2._validate_kwargs(cls_name,kwargs,support_partition=True)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/initializers/__init__.py----------------------------------------
A:keras.initializers.__init__.LOCAL->threading.local()
A:keras.initializers.__init__.LOCAL.GENERATED_WITH_V2->tensorflow.compat.v2.__internal__.tf2.enabled()
A:keras.initializers.__init__.identifier->identifier()
keras.initializers.__init__.deserialize(config,custom_objects=None)
keras.initializers.__init__.get(identifier)
keras.initializers.__init__.populate_deserializable_objects()
keras.initializers.__init__.serialize(initializer)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/initializers/initializers_v1.py----------------------------------------
keras.initializers.initializers_v1.HeNormal(self,seed=None)
keras.initializers.initializers_v1.HeNormal.__init__(self,seed=None)
keras.initializers.initializers_v1.HeNormal.get_config(self)
keras.initializers.initializers_v1.HeUniform(self,seed=None)
keras.initializers.initializers_v1.HeUniform.__init__(self,seed=None)
keras.initializers.initializers_v1.HeUniform.get_config(self)
keras.initializers.initializers_v1.LecunNormal(self,seed=None)
keras.initializers.initializers_v1.LecunNormal.__init__(self,seed=None)
keras.initializers.initializers_v1.LecunNormal.get_config(self)
keras.initializers.initializers_v1.LecunUniform(self,seed=None)
keras.initializers.initializers_v1.LecunUniform.__init__(self,seed=None)
keras.initializers.initializers_v1.LecunUniform.get_config(self)
keras.initializers.initializers_v1.RandomNormal(self,mean=0.0,stddev=0.05,seed=None,dtype=tf.float32)
keras.initializers.initializers_v1.RandomNormal.__init__(self,mean=0.0,stddev=0.05,seed=None,dtype=tf.float32)
keras.initializers.initializers_v1.RandomUniform(self,minval=-0.05,maxval=0.05,seed=None,dtype=tf.float32)
keras.initializers.initializers_v1.RandomUniform.__init__(self,minval=-0.05,maxval=0.05,seed=None,dtype=tf.float32)
keras.initializers.initializers_v1.TruncatedNormal(self,mean=0.0,stddev=0.05,seed=None,dtype=tf.float32)
keras.initializers.initializers_v1.TruncatedNormal.__init__(self,mean=0.0,stddev=0.05,seed=None,dtype=tf.float32)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/estimator/__init__.py----------------------------------------
A:keras.estimator.__init__._model_to_estimator_usage_gauge->tensorflow.compat.v2.__internal__.monitoring.BoolGauge('/tensorflow/api/oss-keras/model_to_estimator', 'Whether tf.keras.estimator.model_to_estimator() is called.', 'version')
keras.estimator.__init__.model_to_estimator(keras_model=None,keras_model_path=None,custom_objects=None,model_dir=None,config=None,checkpoint_format='saver',metric_names_map=None,export_outputs=None)
keras.estimator.__init__.model_to_estimator_v2(keras_model=None,keras_model_path=None,custom_objects=None,model_dir=None,config=None,checkpoint_format='checkpoint',metric_names_map=None,export_outputs=None)
keras_lib.estimator.__init__.model_to_estimator(keras_model=None,keras_model_path=None,custom_objects=None,model_dir=None,config=None,checkpoint_format='saver',metric_names_map=None,export_outputs=None)
keras_lib.estimator.__init__.model_to_estimator_v2(keras_model=None,keras_model_path=None,custom_objects=None,model_dir=None,config=None,checkpoint_format='checkpoint',metric_names_map=None,export_outputs=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/datasets/imdb.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/datasets/boston_housing.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/datasets/cifar100.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/datasets/fashion_mnist.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/datasets/cifar.py----------------------------------------
A:keras.datasets.cifar.d->six.moves.cPickle.load(f, encoding='bytes')
A:keras.datasets.cifar.data->data.reshape(data.shape[0], 3, 32, 32).reshape(data.shape[0], 3, 32, 32)
keras.datasets.cifar.load_batch(fpath,label_key='labels')


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/datasets/cifar10.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/datasets/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/datasets/mnist.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/datasets/reuters.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/premade/linear.py----------------------------------------
A:keras.premade.linear.self.activation->keras.activations.get(activation)
A:keras.premade.linear.self.kernel_initializer->keras.initializers.get(kernel_initializer)
A:keras.premade.linear.self.bias_initializer->keras.initializers.get(bias_initializer)
A:keras.premade.linear.self.kernel_regularizer->keras.regularizers.get(kernel_regularizer)
A:keras.premade.linear.self.bias_regularizer->keras.regularizers.get(bias_regularizer)
A:keras.premade.linear.names->sorted(list(input_shape.keys()))
A:keras.premade.linear.layer->keras.layers.core.Dense(units=self.units, use_bias=False, kernel_initializer=self.kernel_initializer, kernel_regularizer=self.kernel_regularizer)
A:keras.premade.linear.self.bias->self.add_weight('bias', shape=self.units, initializer=self.bias_initializer, regularizer=self.bias_regularizer, dtype=self.dtype, trainable=True)
A:keras.premade.linear.output->layer(inp)
A:keras.premade.linear.result->tensorflow.compat.v2.nn.bias_add(result, self.bias)
A:keras.premade.linear.base_config->keras.engine.base_layer.Layer.get_config(self)
keras.premade.linear.LinearModel(self,units=1,activation=None,use_bias=True,kernel_initializer='zeros',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,**kwargs)
keras.premade.linear.LinearModel.__init__(self,units=1,activation=None,use_bias=True,kernel_initializer='zeros',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,**kwargs)
keras.premade.linear.LinearModel.build(self,input_shape)
keras.premade.linear.LinearModel.call(self,inputs)
keras.premade.linear.LinearModel.from_config(cls,config,custom_objects=None)
keras.premade.linear.LinearModel.get_config(self)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/premade/wide_deep.py----------------------------------------
A:keras.premade.wide_deep.self.activation->keras.activations.get(activation)
A:keras.premade.wide_deep.linear_output->self.linear_model(linear_inputs)
A:keras.premade.wide_deep.training->keras.backend.learning_phase()
A:keras.premade.wide_deep.dnn_output->self.dnn_model(dnn_inputs)
A:keras.premade.wide_deep.output->tensorflow.compat.v2.nest.map_structure(lambda x, y: x + y, linear_output, dnn_output)
A:keras.premade.wide_deep.(x, y, sample_weight)->keras.engine.data_adapter.expand_1d((x, y, sample_weight))
A:keras.premade.wide_deep.y_pred->self(x, training=True)
A:keras.premade.wide_deep.loss->self.compiled_loss(y, y_pred, sample_weight, regularization_losses=self.losses)
A:keras.premade.wide_deep.(linear_grads, dnn_grads)->tape.gradient(loss, (linear_vars, dnn_vars))
A:keras.premade.wide_deep.grads->tape.gradient(loss, trainable_variables)
A:keras.premade.wide_deep.has_recompiled->self._recompile_weights_loss_and_weighted_metrics()
A:keras.premade.wide_deep.current_trainable_state->self._get_trainable_state()
A:keras.premade.wide_deep.linear_updates->linear_optimizer.get_updates(params=self.linear_model.trainable_weights, loss=self.total_loss)
A:keras.premade.wide_deep.dnn_updates->dnn_optimizer.get_updates(params=self.dnn_model.trainable_weights, loss=self.total_loss)
A:keras.premade.wide_deep.metrics->self._get_training_eval_metrics()
A:keras.premade.wide_deep.fn->keras.backend.function(inputs, [self.total_loss] + metrics_tensors, updates=updates, name='train_function', **self._function_kwargs)
A:keras.premade.wide_deep.linear_config->config.pop('linear_model')
A:keras.premade.wide_deep.dnn_config->config.pop('dnn_model')
A:keras.premade.wide_deep.base_config->keras.engine.base_layer.Layer.get_config(self)
A:keras.premade.wide_deep.linear_model->keras.layers.deserialize(linear_config, custom_objects)
A:keras.premade.wide_deep.dnn_model->keras.layers.deserialize(dnn_config, custom_objects)
A:keras.premade.wide_deep.activation->keras.activations.deserialize(config.pop('activation', None), custom_objects=custom_objects)
keras.premade.wide_deep.WideDeepModel(self,linear_model,dnn_model,activation=None,**kwargs)
keras.premade.wide_deep.WideDeepModel.__init__(self,linear_model,dnn_model,activation=None,**kwargs)
keras.premade.wide_deep.WideDeepModel._make_train_function(self)
keras.premade.wide_deep.WideDeepModel.call(self,inputs,training=None)
keras.premade.wide_deep.WideDeepModel.from_config(cls,config,custom_objects=None)
keras.premade.wide_deep.WideDeepModel.get_config(self)
keras.premade.wide_deep.WideDeepModel.train_step(self,data)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/premade/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/distribute/keras_dnn_correctness_test.py----------------------------------------
A:keras.distribute.keras_dnn_correctness_test.model->SubclassedModel(initial_weights, input_shapes)
A:keras.distribute.keras_dnn_correctness_test.x_train->numpy.random.rand(9984, 1).astype('float32')
A:keras.distribute.keras_dnn_correctness_test.x_predict->numpy.array([[1.0], [2.0], [3.0], [4.0]], dtype=np.float32)
A:keras.distribute.keras_dnn_correctness_test.x_eval->numpy.random.rand(10000, 1).astype('float32')
A:keras.distribute.keras_dnn_correctness_test.(x_train, y_train, _)->self.get_data()
A:keras.distribute.keras_dnn_correctness_test.batch_size->keras.distribute.keras_correctness_test_base.get_batch_size(batch_size, distribution)
A:keras.distribute.keras_dnn_correctness_test.train_dataset->keras.distribute.keras_correctness_test_base.batch_wrapper(train_dataset, batch_size)
A:keras.distribute.keras_dnn_correctness_test.history->SubclassedModel(initial_weights, input_shapes).fit(x=train_dataset, epochs=2, steps_per_epoch=10)
A:keras.distribute.keras_dnn_correctness_test.x->self.dense3(x)
A:keras.distribute.keras_dnn_correctness_test.y->numpy.zeros((100, 1)).astype('float32')
A:keras.distribute.keras_dnn_correctness_test.dataset->keras.distribute.keras_correctness_test_base.batch_wrapper(dataset, 4)
A:keras.distribute.keras_dnn_correctness_test.outs->SubclassedModel(initial_weights, input_shapes).evaluate(dataset, steps=10)
A:keras.distribute.keras_dnn_correctness_test.self.dense1->keras.layers.Dense(10, activation='relu', input_shape=(1,))
A:keras.distribute.keras_dnn_correctness_test.self.dense2->keras.layers.Dense(10, activation='relu', kernel_regularizer=keras.regularizers.l2(0.0001))
A:keras.distribute.keras_dnn_correctness_test.self.dense3->keras.layers.Dense(10, activation='relu')
A:keras.distribute.keras_dnn_correctness_test.self.dense4->keras.layers.Dense(1)
keras.distribute.keras_dnn_correctness_test.SubclassedModel(self,initial_weights,input_shapes)
keras.distribute.keras_dnn_correctness_test.SubclassedModel.__init__(self,initial_weights,input_shapes)
keras.distribute.keras_dnn_correctness_test.SubclassedModel.call(self,inputs)
keras.distribute.keras_dnn_correctness_test.TestDistributionStrategyDnnCorrectness(keras_correctness_test_base.TestDistributionStrategyCorrectnessBase)
keras.distribute.keras_dnn_correctness_test.TestDistributionStrategyDnnCorrectness.get_data(self)
keras.distribute.keras_dnn_correctness_test.TestDistributionStrategyDnnCorrectness.get_data_with_partial_last_batch(self)
keras.distribute.keras_dnn_correctness_test.TestDistributionStrategyDnnCorrectness.get_data_with_partial_last_batch_eval(self)
keras.distribute.keras_dnn_correctness_test.TestDistributionStrategyDnnCorrectness.get_model(self,initial_weights=None,distribution=None,input_shapes=None)
keras.distribute.keras_dnn_correctness_test.TestDistributionStrategyDnnCorrectness.test_dnn_correctness(self,distribution,use_numpy,use_validation_data)
keras.distribute.keras_dnn_correctness_test.TestDistributionStrategyDnnCorrectness.test_dnn_correctness_with_partial_last_batch(self,distribution,use_numpy,use_validation_data)
keras.distribute.keras_dnn_correctness_test.TestDistributionStrategyDnnCorrectness.test_dnn_correctness_with_partial_last_batch_eval(self,distribution,use_numpy,use_validation_data)
keras.distribute.keras_dnn_correctness_test.TestDistributionStrategyDnnCorrectness.test_dnn_with_dynamic_learning_rate(self,distribution)
keras.distribute.keras_dnn_correctness_test.TestDistributionStrategyDnnCorrectnessWithSubclassedModel(TestDistributionStrategyDnnCorrectness)
keras.distribute.keras_dnn_correctness_test.TestDistributionStrategyDnnCorrectnessWithSubclassedModel.get_model(self,initial_weights=None,distribution=None,input_shapes=None)
keras.distribute.keras_dnn_correctness_test.TestDistributionStrategyDnnCorrectnessWithSubclassedModel.test_dnn_correctness(self,distribution,use_numpy,use_validation_data)
keras.distribute.keras_dnn_correctness_test.TestDistributionStrategyDnnCorrectnessWithSubclassedModel.test_dnn_correctness_with_partial_last_batch_eval(self,distribution,use_numpy,use_validation_data)
keras.distribute.keras_dnn_correctness_test.TestDistributionStrategyDnnCorrectnessWithSubclassedModel.test_dnn_with_dynamic_learning_rate(self,distribution)
keras.distribute.keras_dnn_correctness_test.TestDistributionStrategyDnnMetricCorrectness(keras_correctness_test_base.TestDistributionStrategyCorrectnessBase)
keras.distribute.keras_dnn_correctness_test.TestDistributionStrategyDnnMetricCorrectness.get_model(self,distribution=None,input_shapes=None)
keras.distribute.keras_dnn_correctness_test.TestDistributionStrategyDnnMetricCorrectness.run_metric_correctness_test(self,distribution)
keras.distribute.keras_dnn_correctness_test.TestDistributionStrategyDnnMetricCorrectness.test_simple_dnn_metric_correctness(self,distribution)
keras.distribute.keras_dnn_correctness_test.TestDistributionStrategyDnnMetricEvalCorrectness(keras_correctness_test_base.TestDistributionStrategyCorrectnessBase)
keras.distribute.keras_dnn_correctness_test.TestDistributionStrategyDnnMetricEvalCorrectness.get_model(self,distribution=None,input_shapes=None)
keras.distribute.keras_dnn_correctness_test.TestDistributionStrategyDnnMetricEvalCorrectness.run_eval_metrics_correctness_test(self,distribution)
keras.distribute.keras_dnn_correctness_test.TestDistributionStrategyDnnMetricEvalCorrectness.test_identity_model_metric_eval_correctness(self,distribution)
keras.distribute.keras_dnn_correctness_test.all_strategy_combinations_with_eager_and_graph_modes()
keras.distribute.keras_dnn_correctness_test.all_strategy_combinations_with_graph_mode()
keras.distribute.keras_dnn_correctness_test.is_default_strategy(strategy)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/distribute/saved_model_test_base.py----------------------------------------
A:keras.distribute.saved_model_test_base.func->tensorflow.compat.v2.saved_model.load(saved_dir)
A:keras.distribute.saved_model_test_base.dist_predict_dataset->distribution.experimental_distribute_dataset(predict_dataset)
A:keras.distribute.saved_model_test_base.per_replica_predict_data->next(iter(dist_predict_dataset))
A:keras.distribute.saved_model_test_base.result->tensorflow.compat.v2.saved_model.load(saved_dir).signatures[_DEFAULT_FUNCTION_KEY](next(iter(predict_dataset)))
A:keras.distribute.saved_model_test_base.reduced->distribution.experimental_local_results(result)
A:keras.distribute.saved_model_test_base.concat->tensorflow.compat.v2.concat(reduced, 0)
A:keras.distribute.saved_model_test_base.training_dataset->training_dataset.batch(batch_size).batch(batch_size)
A:keras.distribute.saved_model_test_base.predict_dataset->self._get_predict_dataset(x_predict, batch_size)
A:keras.distribute.saved_model_test_base.saved_dir->os.path.join(self.get_temp_dir(), '3')
A:keras.distribute.saved_model_test_base.model->model_and_input.get_model()
A:keras.distribute.saved_model_test_base.(x_train, y_train, x_predict)->model_and_input.get_data()
A:keras.distribute.saved_model_test_base.batch_size->model_and_input.get_batch_size()
A:keras.distribute.saved_model_test_base.result_before_save->self._predict_with_model(distribution_for_saving, model, predict_dataset)
A:keras.distribute.saved_model_test_base.result_after_save->self._load_and_run_model(distribution=distribution, saved_dir=saved_dir, predict_dataset=predict_dataset)
A:keras.distribute.saved_model_test_base.tolerance->get_tolerance(distribution_for_saving, distribution_for_restoring)
A:keras.distribute.saved_model_test_base.load_result->self._load_and_run_model(distribution=distribution_for_restoring, saved_dir=saved_dir, predict_dataset=predict_dataset)
A:keras.distribute.saved_model_test_base.(x_train, y_train, _)->model_and_input.get_data()
keras.distribute.saved_model_test_base.TestSavedModelBase(tf.test.TestCase,parameterized.TestCase)
keras.distribute.saved_model_test_base.TestSavedModelBase._get_predict_dataset(self,x_predict,batch_size)
keras.distribute.saved_model_test_base.TestSavedModelBase._load_and_run_model(self,distribution,saved_dir,predict_dataset,output_name='output_1')
keras.distribute.saved_model_test_base.TestSavedModelBase._predict_with_model(self,distribution,model,predict_dataset)
keras.distribute.saved_model_test_base.TestSavedModelBase._save_model(self,model,saved_dir)
keras.distribute.saved_model_test_base.TestSavedModelBase._train_model(self,model,x_train,y_train,batch_size)
keras.distribute.saved_model_test_base.TestSavedModelBase.run_test_save_no_strategy_restore_strategy(self,model_and_input,distribution)
keras.distribute.saved_model_test_base.TestSavedModelBase.run_test_save_strategy(self,model_and_input,distribution,save_in_scope)
keras.distribute.saved_model_test_base.TestSavedModelBase.run_test_save_strategy_restore_no_strategy(self,model_and_input,distribution,save_in_scope)
keras.distribute.saved_model_test_base.TestSavedModelBase.run_test_save_strategy_restore_strategy(self,model_and_input,distribution_for_saving,distribution_for_restoring,save_in_scope)
keras.distribute.saved_model_test_base.TestSavedModelBase.setUp(self)
keras.distribute.saved_model_test_base.get_tolerance(save_distribution,restore_distribution)
keras.distribute.saved_model_test_base.load_and_run_with_saved_model_api(distribution,saved_dir,predict_dataset,output_name)
keras.distribute.saved_model_test_base.simple_models_with_strategies()
keras.distribute.saved_model_test_base.simple_models_with_strategy_pairs()
keras.distribute.saved_model_test_base.tfmodule_models_with_strategies()
keras.distribute.saved_model_test_base.tfmodule_models_with_strategy_pairs()


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/distribute/multi_worker_testing_utils.py----------------------------------------
A:keras.distribute.multi_worker_testing_utils.x_train->tensorflow.compat.v2.ones([batch_size * steps_per_epoch, 28, 28, 1], dtype=tf.float32)
A:keras.distribute.multi_worker_testing_utils.y_train->tensorflow.compat.v2.ones([batch_size * steps_per_epoch, 1], dtype=tf.int32)
A:keras.distribute.multi_worker_testing_utils.train_ds->train_ds.batch(64, drop_remainder=True).batch(64, drop_remainder=True)
A:keras.distribute.multi_worker_testing_utils.x_test->tensorflow.compat.v2.random.uniform([10000, 28, 28, 1], dtype=tf.float32)
A:keras.distribute.multi_worker_testing_utils.y_test->tensorflow.compat.v2.random.uniform([10000, 1], minval=0, maxval=9, dtype=tf.int32)
A:keras.distribute.multi_worker_testing_utils.eval_ds->eval_ds.batch(64, drop_remainder=True).batch(64, drop_remainder=True)
A:keras.distribute.multi_worker_testing_utils.inputs->keras.Input(shape=input_shape)
A:keras.distribute.multi_worker_testing_utils.x->keras.layers.Dense(10, activation='softmax', kernel_initializer=keras.initializers.TruncatedNormal(seed=99))(x)
A:keras.distribute.multi_worker_testing_utils.model->keras.Model(inputs=inputs, outputs=x)
A:keras.distribute.multi_worker_testing_utils.cluster_def->tensorflow.python.distribute.multi_worker_test_base.create_in_process_cluster(num_workers=num_workers, num_ps=num_ps, rpc_layer='grpc')
keras.distribute.multi_worker_testing_utils.get_mnist_model(input_shape)
keras.distribute.multi_worker_testing_utils.make_parameter_server_cluster(num_workers,num_ps)
keras.distribute.multi_worker_testing_utils.mnist_synthetic_dataset(batch_size,steps_per_epoch)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/distribute/distributed_file_utils.py----------------------------------------
A:keras.distribute.distributed_file_utils.temp_dir->os.path.join(dirpath, _get_base_dirpath(strategy))
A:keras.distribute.distributed_file_utils.strategy->tensorflow.compat.v2.distribute.get_strategy()
A:keras.distribute.distributed_file_utils.dirpath->os.path.dirname(filepath)
A:keras.distribute.distributed_file_utils.base->os.path.basename(filepath)
keras.distribute.distributed_file_utils._get_base_dirpath(strategy)
keras.distribute.distributed_file_utils._get_temp_dir(dirpath,strategy)
keras.distribute.distributed_file_utils._is_temp_dir(dirpath,strategy)
keras.distribute.distributed_file_utils.remove_temp_dir_with_filepath(filepath,strategy)
keras.distribute.distributed_file_utils.remove_temp_dirpath(dirpath,strategy)
keras.distribute.distributed_file_utils.write_dirpath(dirpath,strategy)
keras.distribute.distributed_file_utils.write_filepath(filepath,strategy)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/distribute/keras_stateful_lstm_model_correctness_test.py----------------------------------------
A:keras.distribute.keras_stateful_lstm_model_correctness_test.word_ids->keras.layers.Input(shape=(max_words,), batch_size=batch_size, dtype=np.int32, name='words')
A:keras.distribute.keras_stateful_lstm_model_correctness_test.word_embed->keras.layers.Embedding(input_dim=20, output_dim=10)(word_ids)
A:keras.distribute.keras_stateful_lstm_model_correctness_test.lstm_embed->keras.layers.LSTM(units=4, return_sequences=False, stateful=True)(word_embed)
A:keras.distribute.keras_stateful_lstm_model_correctness_test.preds->keras.layers.Dense(2, activation='softmax')(lstm_embed)
A:keras.distribute.keras_stateful_lstm_model_correctness_test.model->keras.Model(inputs=[word_ids], outputs=[preds])
keras.distribute.keras_stateful_lstm_model_correctness_test.DistributionStrategyStatefulLstmModelCorrectnessTest(keras_correctness_test_base.TestDistributionStrategyEmbeddingModelCorrectnessBase)
keras.distribute.keras_stateful_lstm_model_correctness_test.DistributionStrategyStatefulLstmModelCorrectnessTest.disabled_test_stateful_lstm_model_correctness(self,distribution,use_numpy,use_validation_data)
keras.distribute.keras_stateful_lstm_model_correctness_test.DistributionStrategyStatefulLstmModelCorrectnessTest.get_model(self,max_words=10,initial_weights=None,distribution=None,input_shapes=None)
keras.distribute.keras_stateful_lstm_model_correctness_test.DistributionStrategyStatefulLstmModelCorrectnessTest.test_incorrectly_use_multiple_cores_for_stateful_lstm_model(self,distribution,use_numpy,use_validation_data)
keras.distribute.keras_stateful_lstm_model_correctness_test.strategies_for_stateful_embedding_model()
keras.distribute.keras_stateful_lstm_model_correctness_test.test_combinations_for_stateful_embedding_model()


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/distribute/distributed_training_utils_v1.py----------------------------------------
A:keras.distribute.distributed_training_utils_v1.num_param->len(layer.weights)
A:keras.distribute.distributed_training_utils_v1.all_inputs->flatten_per_replica_values(distribution_strategy, grouped_inputs)
A:keras.distribute.distributed_training_utils_v1.all_outputs->unwrap_outputs(strategy, outputs, with_loss_tensor=mode != ModeKeys.PREDICT)
A:keras.distribute.distributed_training_utils_v1.all_updates->flatten_per_replica_values(distribution_strategy, grouped_updates)
A:keras.distribute.distributed_training_utils_v1.grouped_feed_dict->grouped_session_args.get('feed_dict')
A:keras.distribute.distributed_training_utils_v1.all_session_args['feed_dict']->flatten_per_replica_values(distribution_strategy, grouped_feed_dict)
A:keras.distribute.distributed_training_utils_v1.grouped_fetches->grouped_session_args.get('fetches')
A:keras.distribute.distributed_training_utils_v1.all_session_args['fetches']->flatten_per_replica_values(distribution_strategy, grouped_fetches)
A:keras.distribute.distributed_training_utils_v1.total_loss->strategy.reduce(tf.distribute.ReduceOp.SUM, grouped_outputs['total_loss'][0], axis=None)
A:keras.distribute.distributed_training_utils_v1.output_losses->flatten_per_replica_values(strategy, grouped_outputs['output_losses'])
A:keras.distribute.distributed_training_utils_v1.metrics->flatten_per_replica_values(strategy, grouped_outputs['metrics'])
A:keras.distribute.distributed_training_utils_v1.batch_size->strategy.reduce(tf.distribute.ReduceOp.SUM, grouped_outputs['batch_size'], axis=None)
A:keras.distribute.distributed_training_utils_v1.loss->distribution_strategy.reduce(tf.distribute.ReduceOp.SUM, grouped_outputs[0], axis=None)
A:keras.distribute.distributed_training_utils_v1.x_values_list->validate_per_replica_inputs(distribution_strategy, x)
A:keras.distribute.distributed_training_utils_v1.y_values_list->validate_per_replica_inputs(distribution_strategy, y)
A:keras.distribute.distributed_training_utils_v1.sample_weights_list->validate_per_replica_inputs(distribution_strategy, sample_weights)
A:keras.distribute.distributed_training_utils_v1.per_replica_list->tensorflow.compat.v2.nest.flatten(x, expand_composites=True)
A:keras.distribute.distributed_training_utils_v1.x_values->distribution_strategy.unwrap(x)
A:keras.distribute.distributed_training_utils_v1.x_shape->x_values[0].shape.as_list()
A:keras.distribute.distributed_training_utils_v1.all_variables->keras.backend._get_variables(backend.get_graph())
A:keras.distribute.distributed_training_utils_v1.is_initialized->keras.backend._get_session().run([tf.compat.v1.is_variable_initialized(v) for v in candidate_vars])
A:keras.distribute.distributed_training_utils_v1.session->keras.backend._get_session()
A:keras.distribute.distributed_training_utils_v1.shapes->tensorflow.compat.v2.nest.flatten(tf.compat.v1.data.get_output_shapes(iterator))
A:keras.distribute.distributed_training_utils_v1.num_samples->int(num_samples * (1 - validation_split))
A:keras.distribute.distributed_training_utils_v1.(steps_per_epoch, batch_size)->get_input_params(strategy, num_samples, steps_per_epoch, batch_size, mode=mode)
A:keras.distribute.distributed_training_utils_v1.global_batch_size->min(num_samples, 32)
A:keras.distribute.distributed_training_utils_v1.steps->numpy.ceil(num_samples / global_batch_size).astype(int)
A:keras.distribute.distributed_training_utils_v1.iterator->distribution_strategy.make_dataset_iterator(dataset)
A:keras.distribute.distributed_training_utils_v1.init_op->tensorflow.compat.v2.group(iterator.initializer)
A:keras.distribute.distributed_training_utils_v1.next_element->distribution_strategy.make_dataset_iterator(dataset).get_next()
A:keras.distribute.distributed_training_utils_v1.(inputs, targets, sample_weights)->_get_input_from_iterator(inputs, model)
A:keras.distribute.distributed_training_utils_v1.inputs->keras.engine.training_utils_v1.ModelInputs(inputs).as_list()
A:keras.distribute.distributed_training_utils_v1.targets->tensorflow.compat.v2.nest.flatten(targets)
A:keras.distribute.distributed_training_utils_v1.(inputs, targets)->tensorflow.compat.v2.nest.map_structure(training_utils_v1.standardize_single_array, (inputs, targets))
A:keras.distribute.distributed_training_utils_v1.sample_weights->flatten_per_replica_values(strategy, sample_weights)
A:keras.distribute.distributed_training_utils_v1.updated_model->keras.models._clone_functional_model(model, input_tensors=inputs, layer_fn=models.share_weights)
A:keras.distribute.distributed_training_utils_v1.distributed_model->get_distributed_model(model, mode)
A:keras.distribute.distributed_training_utils_v1.cloned_model->keras.models.clone_model(model, input_tensors=inputs)
A:keras.distribute.distributed_training_utils_v1.optimizer_config->model.optimizer.get_config()
A:keras.distribute.distributed_training_utils_v1.optimizer->model.optimizer.__class__.from_config(optimizer_config)
A:keras.distribute.distributed_training_utils_v1.distributed_function->_make_graph_execution_function(model, mode)
A:keras.distribute.distributed_training_utils_v1.distribution_function->_make_execution_function_without_cloning(model, mode)
A:keras.distribute.distributed_training_utils_v1.per_replica_function->_make_replica_execution_function(model, mode)
A:keras.distribute.distributed_training_utils_v1.(x, y, sample_weights)->input_fn()
A:keras.distribute.distributed_training_utils_v1.outputs->strategy.run(per_replica_function, args=(x, y, sample_weights))
A:keras.distribute.distributed_training_utils_v1.func->functools.partial(func, reset_metrics=False)
A:keras.distribute.distributed_training_utils_v1.f->model._make_execution_function(mode)
A:keras.distribute.distributed_training_utils_v1.(grouped_inputs, grouped_outputs, grouped_updates, grouped_session_args)->strategy.extended.call_for_each_replica(_per_replica_function, args=(get_distributed_model(model, mode),))
A:keras.distribute.distributed_training_utils_v1.(all_inputs, all_outputs, all_updates, all_session_args)->unwrap_values(strategy, grouped_inputs, grouped_outputs, grouped_updates, grouped_session_args, with_loss_tensor=mode != ModeKeys.PREDICT)
A:keras.distribute.distributed_training_utils_v1.global_graph->keras.backend.get_graph()
A:keras.distribute.distributed_training_utils_v1.grouped->strategy.extended.call_for_each_replica(_per_replica_function, args=(get_distributed_model(model, mode),))
A:keras.distribute.distributed_training_utils_v1.(all_inputs, all_outputs, _, _)->unwrap_values(strategy, grouped_inputs, grouped_outputs, with_loss_tensor=mode != ModeKeys.PREDICT)
A:keras.distribute.distributed_training_utils_v1.orig_model_weights->original_model.get_weights()
A:keras.distribute.distributed_training_utils_v1.updated_weights->model._distribution_strategy.unwrap(distributed_model)[0].get_weights()
A:keras.distribute.distributed_training_utils_v1.key->hash(mode)
A:keras.distribute.distributed_training_utils_v1.distributed_model._recompile_exec_function->any([e.sample_weights_mismatch() for e in model._training_endpoints])
A:keras.distribute.distributed_training_utils_v1.distributed_models->flatten_per_replica_values(model._distribution_strategy, distributed_model)
keras.distribute.distributed_training_utils_v1._build_distributed_network(model,strategy,mode,inputs=None,targets=None)
keras.distribute.distributed_training_utils_v1._build_network_on_replica(model,mode,inputs=None,targets=None)
keras.distribute.distributed_training_utils_v1._clone_and_build_model(model,mode,inputs=None,targets=None)
keras.distribute.distributed_training_utils_v1._copy_weights_to_distributed_model(original_model,mode)
keras.distribute.distributed_training_utils_v1._copy_weights_to_original_model(model,mode)
keras.distribute.distributed_training_utils_v1._custom_compile_for_predict(model)
keras.distribute.distributed_training_utils_v1._generate_cache_key(mode)
keras.distribute.distributed_training_utils_v1._get_input_from_iterator(iterator,model)
keras.distribute.distributed_training_utils_v1._make_eager_execution_function(model,mode)
keras.distribute.distributed_training_utils_v1._make_execution_function(model,mode)
keras.distribute.distributed_training_utils_v1._make_execution_function_with_cloning(model,mode)
keras.distribute.distributed_training_utils_v1._make_execution_function_without_cloning(model,mode)
keras.distribute.distributed_training_utils_v1._make_graph_execution_function(model,mode)
keras.distribute.distributed_training_utils_v1._make_replica_execution_function(model,mode)
keras.distribute.distributed_training_utils_v1._make_replicated_models_with_cloning(model,mode)
keras.distribute.distributed_training_utils_v1._per_replica_aggregate_batch(strategy,batch_outs,model,mode)
keras.distribute.distributed_training_utils_v1._prepare_feed_values(model,inputs,targets,sample_weights,mode)
keras.distribute.distributed_training_utils_v1._reset_metrics(model)
keras.distribute.distributed_training_utils_v1._update_sample_weight_modes(model,mode,sample_weights)
keras.distribute.distributed_training_utils_v1._wait_for_variable_initialization(session)
keras.distribute.distributed_training_utils_v1.clone_model_on_replicas(model,strategy,mode,inputs=None,targets=None)
keras.distribute.distributed_training_utils_v1.concat_along_batch_dimension(outputs)
keras.distribute.distributed_training_utils_v1.distributed_scope(strategy,learning_phase)
keras.distribute.distributed_training_utils_v1.filter_distributed_callbacks(callbacks_list,model)
keras.distribute.distributed_training_utils_v1.flatten_per_replica_values(distribution_strategy,per_replica_values)
keras.distribute.distributed_training_utils_v1.get_batch_dimension(iterator)
keras.distribute.distributed_training_utils_v1.get_distributed_function(model,mode)
keras.distribute.distributed_training_utils_v1.get_distributed_model(model,mode)
keras.distribute.distributed_training_utils_v1.get_input_params(distribution_strategy,num_samples,steps,batch_size,mode=None)
keras.distribute.distributed_training_utils_v1.get_iterator(dataset,distribution_strategy)
keras.distribute.distributed_training_utils_v1.init_restore_or_wait_for_variables()
keras.distribute.distributed_training_utils_v1.initialize_iterator(iterator,distribution_strategy)
keras.distribute.distributed_training_utils_v1.is_current_worker_chief()
keras.distribute.distributed_training_utils_v1.is_dataset_shape_fully_defined(dataset)
keras.distribute.distributed_training_utils_v1.is_distributing_by_cloning(model)
keras.distribute.distributed_training_utils_v1.process_batch_and_step_size(strategy,inputs,batch_size,steps_per_epoch,mode,validation_split=0.0)
keras.distribute.distributed_training_utils_v1.set_distributed_function(model,mode,distributed_function)
keras.distribute.distributed_training_utils_v1.set_distributed_model(model,mode,distributed_model)
keras.distribute.distributed_training_utils_v1.set_weights(distribution_strategy,dist_model,weights)
keras.distribute.distributed_training_utils_v1.unwrap_output_dict(strategy,grouped_outputs,mode)
keras.distribute.distributed_training_utils_v1.unwrap_outputs(distribution_strategy,grouped_outputs,with_loss_tensor=False)
keras.distribute.distributed_training_utils_v1.unwrap_values(distribution_strategy,grouped_inputs,grouped_outputs,grouped_updates=None,grouped_session_args=None,with_loss_tensor=False)
keras.distribute.distributed_training_utils_v1.validate_all_tensor_shapes(x,x_values)
keras.distribute.distributed_training_utils_v1.validate_all_tensor_types(x,x_values)
keras.distribute.distributed_training_utils_v1.validate_callbacks(input_callbacks,optimizer)
keras.distribute.distributed_training_utils_v1.validate_distributed_dataset_inputs(distribution_strategy,x,y,sample_weights=None)
keras.distribute.distributed_training_utils_v1.validate_inputs(x,y)
keras.distribute.distributed_training_utils_v1.validate_per_replica_inputs(distribution_strategy,x)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/distribute/keras_embedding_model_correctness_test.py----------------------------------------
A:keras.distribute.keras_embedding_model_correctness_test.word_ids->keras.layers.Input(shape=(max_words,), dtype=np.int32, name='words')
A:keras.distribute.keras_embedding_model_correctness_test.word_embed->keras.layers.Embedding(input_dim=20, output_dim=10, input_length=max_words, embeddings_initializer=keras.initializers.RandomUniform(0, 1))
A:keras.distribute.keras_embedding_model_correctness_test.avg->keras.layers.GlobalAveragePooling1D()(word_embed)
A:keras.distribute.keras_embedding_model_correctness_test.preds->keras.layers.Dense(2, activation='softmax')(avg)
A:keras.distribute.keras_embedding_model_correctness_test.model->keras.Model(inputs=[word_ids_a, word_ids_b], outputs=[sim])
A:keras.distribute.keras_embedding_model_correctness_test.word_ids_a->keras.layers.Input(shape=(max_words,), dtype=np.int32, name='words_a')
A:keras.distribute.keras_embedding_model_correctness_test.word_ids_b->keras.layers.Input(shape=(max_words,), dtype=np.int32, name='words_b')
A:keras.distribute.keras_embedding_model_correctness_test.rep->keras.layers.GlobalAveragePooling1D()(word_embed)
A:keras.distribute.keras_embedding_model_correctness_test.sim->keras.layers.Dot(axes=1, normalize=True)([a_rep, b_rep])
A:keras.distribute.keras_embedding_model_correctness_test.(features_a, labels_a, _)->super(DistributionStrategySiameseEmbeddingModelCorrectnessTest, self).get_data(count, min_words, max_words, max_word_id, num_classes)
A:keras.distribute.keras_embedding_model_correctness_test.(features_b, labels_b, _)->super(DistributionStrategySiameseEmbeddingModelCorrectnessTest, self).get_data(count, min_words, max_words, max_word_id, num_classes)
A:keras.distribute.keras_embedding_model_correctness_test.y_train->numpy.zeros((count, 1), dtype=np.float32)
keras.distribute.keras_embedding_model_correctness_test.DistributionStrategyEmbeddingModelCorrectnessTest(keras_correctness_test_base.TestDistributionStrategyEmbeddingModelCorrectnessBase)
keras.distribute.keras_embedding_model_correctness_test.DistributionStrategyEmbeddingModelCorrectnessTest.get_model(self,max_words=10,initial_weights=None,distribution=None,input_shapes=None)
keras.distribute.keras_embedding_model_correctness_test.DistributionStrategyEmbeddingModelCorrectnessTest.test_embedding_model_correctness(self,distribution,use_numpy,use_validation_data)
keras.distribute.keras_embedding_model_correctness_test.DistributionStrategyEmbeddingModelCorrectnessTest.test_embedding_time_distributed_model_correctness(self,distribution,use_numpy,use_validation_data)
keras.distribute.keras_embedding_model_correctness_test.DistributionStrategySiameseEmbeddingModelCorrectnessTest(keras_correctness_test_base.TestDistributionStrategyEmbeddingModelCorrectnessBase)
keras.distribute.keras_embedding_model_correctness_test.DistributionStrategySiameseEmbeddingModelCorrectnessTest.get_data(self,count=keras_correctness_test_base._GLOBAL_BATCH_SIZE*keras_correctness_test_base._EVAL_STEPS,min_words=5,max_words=10,max_word_id=19,num_classes=2)
keras.distribute.keras_embedding_model_correctness_test.DistributionStrategySiameseEmbeddingModelCorrectnessTest.get_model(self,max_words=10,initial_weights=None,distribution=None,input_shapes=None)
keras.distribute.keras_embedding_model_correctness_test.DistributionStrategySiameseEmbeddingModelCorrectnessTest.test_siamese_embedding_model_correctness(self,distribution,use_numpy,use_validation_data)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/distribute/keras_utils_test.py----------------------------------------
A:keras.distribute.keras_utils_test.self.method_counts->collections.defaultdict(int)
A:keras.distribute.keras_utils_test.model->keras.Model(x, y)
A:keras.distribute.keras_utils_test.dataset->dataset.batch(10, drop_remainder=True).batch(10, drop_remainder=True)
A:keras.distribute.keras_utils_test.counter->Counter()
A:keras.distribute.keras_utils_test.a->tensorflow.compat.v2.constant([1, 2], shape=(1, 2), dtype=tf.int32)
A:keras.distribute.keras_utils_test.b->tensorflow.compat.v2.constant([1, 2], shape=(1, 2), dtype=tf.float64)
A:keras.distribute.keras_utils_test.x->keras.layers.Input(shape=(3,), batch_size=10, name='input')
A:keras.distribute.keras_utils_test.y->keras.layers.Dense(4, name='dense')(x)
A:keras.distribute.keras_utils_test.optimizer->tensorflow.compat.v2.compat.v1.train.GradientDescentOptimizer(0.001)
A:keras.distribute.keras_utils_test.sample_weight->numpy.random.random((10,))
A:keras.distribute.keras_utils_test.self.dense->keras.layers.Dense(num_labels)
A:keras.distribute.keras_utils_test.loss_object->keras.losses.MeanSquaredError()
A:keras.distribute.keras_utils_test.hist->keras.Model(x, y).fit(x=dataset, epochs=1, steps_per_epoch=2)
A:keras.distribute.keras_utils_test.norm->keras.layers.BatchNormalization(input_shape=(10, 20, 30), momentum=0.8, fused=fused)
A:keras.distribute.keras_utils_test.predict_dataset->keras.distribute.distribute_strategy_test.batch_wrapper(predict_dataset, 32, distribution)
A:keras.distribute.keras_utils_test.out->keras.Model(x, y).predict(predict_dataset, steps=2)
A:keras.distribute.keras_utils_test.weights_file->tempfile.mktemp()
A:keras.distribute.keras_utils_test.model_2->keras.distribute.distribute_strategy_test.get_model()
A:keras.distribute.keras_utils_test.inputs->numpy.zeros((10, 3), dtype=np.float32)
A:keras.distribute.keras_utils_test.targets->numpy.zeros((10, 4), dtype=np.float32)
keras.distribute.keras_utils_test.Counter(self)
keras.distribute.keras_utils_test.Counter.__init__(self)
keras.distribute.keras_utils_test.Counter.wrap_with_counts(self,method_name,method)
keras.distribute.keras_utils_test.TestDistributionStrategyErrorCases(tf.test.TestCase,parameterized.TestCase)
keras.distribute.keras_utils_test.TestDistributionStrategyErrorCases.test_distribution_strategy_on_deferred_sequential_model(self,distribution)
keras.distribute.keras_utils_test.TestDistributionStrategyErrorCases.test_distribution_strategy_on_subclassed_model(self,distribution)
keras.distribute.keras_utils_test.TestDistributionStrategyErrorCases.test_standalone_loss_without_loss_reduction(self,distribution)
keras.distribute.keras_utils_test.TestDistributionStrategyErrorCases.test_unsupported_features(self,distribution,mode)
keras.distribute.keras_utils_test.TestDistributionStrategyErrorCases.test_validating_dataset_input_tensors_with_dtype_mismatch(self,distribution)
keras.distribute.keras_utils_test.TestDistributionStrategyErrorCases.test_validating_dataset_input_tensors_with_shape_mismatch(self,distribution)
keras.distribute.keras_utils_test.TestDistributionStrategySaveLoadWeights(tf.test.TestCase,parameterized.TestCase)
keras.distribute.keras_utils_test.TestDistributionStrategySaveLoadWeights.test_save_load_h5(self,distribution,optimizer)
keras.distribute.keras_utils_test.TestDistributionStrategySaveLoadWeights.test_save_load_trackable(self,distribution,optimizer)
keras.distribute.keras_utils_test.TestDistributionStrategyValidation(tf.test.TestCase,parameterized.TestCase)
keras.distribute.keras_utils_test.TestDistributionStrategyValidation.test_layer_outside_scope(self,distribution)
keras.distribute.keras_utils_test.TestDistributionStrategyValidation.test_model_outside_scope(self,distribution)
keras.distribute.keras_utils_test.TestDistributionStrategyWithCallbacks(tf.test.TestCase,parameterized.TestCase)
keras.distribute.keras_utils_test.TestDistributionStrategyWithCallbacks.test_callbacks_in_eval(self,distribution)
keras.distribute.keras_utils_test.TestDistributionStrategyWithCallbacks.test_callbacks_in_fit(self,distribution)
keras.distribute.keras_utils_test.TestDistributionStrategyWithCallbacks.test_callbacks_in_predict(self,distribution)
keras.distribute.keras_utils_test.TestDistributionStrategyWithLossMasking(tf.test.TestCase,parameterized.TestCase)
keras.distribute.keras_utils_test.TestDistributionStrategyWithLossMasking.test_masking(self,distribution,optimizer)
keras.distribute.keras_utils_test.TestDistributionStrategyWithNormalizationLayer(tf.test.TestCase,parameterized.TestCase)
keras.distribute.keras_utils_test.TestDistributionStrategyWithNormalizationLayer.test_batchnorm_correctness(self,distribution,fused,optimizer)
keras.distribute.keras_utils_test.TestDistributionStrategyWithStaticShapes(tf.test.TestCase,parameterized.TestCase)
keras.distribute.keras_utils_test.TestDistributionStrategyWithStaticShapes.test_input_batch_size_not_divisible_by_num_replicas(self,distribution)
keras.distribute.keras_utils_test.TestDistributionStrategyWithStaticShapes.test_static_input_batch_size(self,distribution)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/distribute/test_example.py----------------------------------------
A:keras.distribute.test_example.dataset->tensorflow.compat.v2.data.Dataset.from_tensors([[1.0]]).repeat()
A:keras.distribute.test_example.layer->tensorflow.compat.v2.compat.v1.layers.Dense(1, use_bias=False)
A:keras.distribute.test_example.optimizer->optimizer_fn()
A:keras.distribute.test_example.batchnorm->tensorflow.compat.v2.compat.v1.layers.BatchNormalization(renorm=renorm, momentum=momentum, fused=False)
A:keras.distribute.test_example.y->batchnorm(x, training=True)
A:keras.distribute.test_example.loss->tensorflow.compat.v2.reduce_mean(tf.reduce_sum(layer(y)) - tf.constant(1.0))
keras.distribute.test_example.batchnorm_example(optimizer_fn,batch_per_epoch=1,momentum=0.9,renorm=False,update_ops_in_replica_mode=False)
keras.distribute.test_example.minimize_loss_example(optimizer,use_bias=False,use_callable_loss=True)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/distribute/model_combinations.py----------------------------------------
A:keras.distribute.model_combinations.simple_functional_model->tensorflow.compat.v2.__internal__.test.combinations.NamedObject('SimpleFunctionalModel', simple_models.SimpleFunctionalModel())
A:keras.distribute.model_combinations.simple_sequential_model->tensorflow.compat.v2.__internal__.test.combinations.NamedObject('SimpleSequentialModel', simple_models.SimpleSequentialModel())
A:keras.distribute.model_combinations.simple_subclass_model->tensorflow.compat.v2.__internal__.test.combinations.NamedObject('SimpleSubclassModel', simple_models.SimpleSubclassModel())
A:keras.distribute.model_combinations.simple_tfmodule_model->tensorflow.compat.v2.__internal__.test.combinations.NamedObject('SimpleTFModuleModel', simple_models.SimpleTFModuleModel())


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/distribute/keras_rnn_model_correctness_test.py----------------------------------------
A:keras.distribute.keras_rnn_model_correctness_test.rnn_cls->self._get_layer_class()
A:keras.distribute.keras_rnn_model_correctness_test.word_ids->keras.layers.Input(shape=(max_words,), dtype=np.int32, name='words')
A:keras.distribute.keras_rnn_model_correctness_test.word_embed->keras.layers.Embedding(input_dim=20, output_dim=10)(word_ids)
A:keras.distribute.keras_rnn_model_correctness_test.rnn_embed->rnn_cls(units=4, return_sequences=False)(word_embed)
A:keras.distribute.keras_rnn_model_correctness_test.dense_output->keras.layers.Dense(2)(rnn_embed)
A:keras.distribute.keras_rnn_model_correctness_test.preds->keras.layers.Softmax(dtype='float32')(dense_output)
A:keras.distribute.keras_rnn_model_correctness_test.model->keras.Model(inputs=[word_ids], outputs=[preds])
keras.distribute.keras_rnn_model_correctness_test.DistributionStrategyGruModelCorrectnessTest(_DistributionStrategyRnnModelCorrectnessTest)
keras.distribute.keras_rnn_model_correctness_test.DistributionStrategyGruModelCorrectnessTest._get_layer_class(self)
keras.distribute.keras_rnn_model_correctness_test.DistributionStrategyGruModelCorrectnessTest.test_gru_model_correctness(self,distribution,use_numpy,use_validation_data)
keras.distribute.keras_rnn_model_correctness_test.DistributionStrategyLstmModelCorrectnessTest(_DistributionStrategyRnnModelCorrectnessTest)
keras.distribute.keras_rnn_model_correctness_test.DistributionStrategyLstmModelCorrectnessTest._get_layer_class(self)
keras.distribute.keras_rnn_model_correctness_test.DistributionStrategyLstmModelCorrectnessTest.test_lstm_model_correctness(self,distribution,use_numpy,use_validation_data)
keras.distribute.keras_rnn_model_correctness_test.DistributionStrategyLstmModelCorrectnessTest.test_lstm_model_correctness_mixed_precision(self,distribution,use_numpy,use_validation_data)
keras.distribute.keras_rnn_model_correctness_test._DistributionStrategyRnnModelCorrectnessTest(keras_correctness_test_base.TestDistributionStrategyEmbeddingModelCorrectnessBase)
keras.distribute.keras_rnn_model_correctness_test._DistributionStrategyRnnModelCorrectnessTest._get_layer_class(self)
keras.distribute.keras_rnn_model_correctness_test._DistributionStrategyRnnModelCorrectnessTest.get_model(self,max_words=10,initial_weights=None,distribution=None,input_shapes=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/distribute/distribute_strategy_test.py----------------------------------------
A:keras.distribute.distribute_strategy_test.model->create_model()
A:keras.distribute.distribute_strategy_test.self.dense->keras.layers.Dense(num_labels)
A:keras.distribute.distribute_strategy_test.input_a->keras.layers.Input(shape=(16,), name='z_input_sorted_last')
A:keras.distribute.distribute_strategy_test.input_b->keras.layers.Input(shape=(32,), name='a_input_sorted_first')
A:keras.distribute.distribute_strategy_test.merged->keras.layers.Add()([intermediate_a, intermediate_b])
A:keras.distribute.distribute_strategy_test.output_c->keras.layers.Dense(3, activation='softmax', name='dense_2')(merged)
A:keras.distribute.distribute_strategy_test.output_d->keras.layers.Dense(2, activation='softmax', name='dense_3')(merged)
A:keras.distribute.distribute_strategy_test.((a_train, c_train), (a_test, c_test))->keras.testing_utils.get_test_data(train_samples=_TRAIN_SIZE, test_samples=50, input_shape=(16,), num_classes=3, random_seed=_RANDOM_SEED)
A:keras.distribute.distribute_strategy_test.((b_train, d_train), (b_test, d_test))->keras.testing_utils.get_test_data(train_samples=_TRAIN_SIZE, test_samples=50, input_shape=(16,), num_classes=2, random_seed=_RANDOM_SEED)
A:keras.distribute.distribute_strategy_test.((m_train, _), (m_test, _))->keras.testing_utils.get_test_data(train_samples=_TRAIN_SIZE, test_samples=50, input_shape=(8,), num_classes=2, random_seed=_RANDOM_SEED)
A:keras.distribute.distribute_strategy_test.c_train->keras.utils.np_utils.to_categorical(c_train)
A:keras.distribute.distribute_strategy_test.c_test->keras.utils.np_utils.to_categorical(c_test)
A:keras.distribute.distribute_strategy_test.d_train->keras.utils.np_utils.to_categorical(d_train)
A:keras.distribute.distribute_strategy_test.d_test->keras.utils.np_utils.to_categorical(d_test)
A:keras.distribute.distribute_strategy_test.dataset->dataset.batch(8 * distribution.num_replicas_in_sync).batch(8 * distribution.num_replicas_in_sync)
A:keras.distribute.distribute_strategy_test.x->create_model().get_layer('embedding').get_output_at(-1)
A:keras.distribute.distribute_strategy_test.y->keras.layers.Dense(1)(x)
A:keras.distribute.distribute_strategy_test.inputs->keras.Input(input_shape, name='images')
A:keras.distribute.distribute_strategy_test.targets->numpy.zeros((64, 4), dtype=np.float32)
A:keras.distribute.distribute_strategy_test.original_dataset->tensorflow.compat.v2.data.Dataset.from_tensor_slices(input_slices)
A:keras.distribute.distribute_strategy_test.ds_with_unknown_cardinality->tensorflow.compat.v2.data.Dataset.from_tensor_slices(input_slices).filter(dummy_op).batch(10, drop_remainder=True)
A:keras.distribute.distribute_strategy_test.a->keras.layers.Input(shape=(3,), name='input_a')
A:keras.distribute.distribute_strategy_test.b->keras.layers.Input(shape=(5,), name='input_b')
A:keras.distribute.distribute_strategy_test.dense_1->keras.layers.Dense(7, name='dense_1')
A:keras.distribute.distribute_strategy_test.dense_2->keras.layers.Dense(7, name='dense_2')
A:keras.distribute.distribute_strategy_test.c->dense_1(a)
A:keras.distribute.distribute_strategy_test.d->keras.layers.Dense(1, kernel_initializer='zeros')
A:keras.distribute.distribute_strategy_test.e->keras.layers.Dropout(0.5, name='dropout')(c)
A:keras.distribute.distribute_strategy_test.non_tpu_strategies->tensorflow.compat.v2.__internal__.test.combinations.times(strategy_minus_tpu_combinations(), tf.__internal__.test.combinations.combine(optimizer=[optimizer_combinations.adagrad_optimizer_v1_fn, optimizer_combinations.adam_optimizer_v1_fn, optimizer_combinations.gradient_descent_optimizer_v1_fn, optimizer_combinations.rmsprop_optimizer_v1_fn, optimizer_combinations.adadelta_optimizer_keras_v2_fn, optimizer_combinations.adagrad_optimizer_keras_v2_fn, optimizer_combinations.adam_optimizer_keras_v2_fn, optimizer_combinations.adamax_optimizer_keras_v2_fn, optimizer_combinations.gradient_descent_optimizer_keras_v2_fn, optimizer_combinations.nadam_optimizer_keras_v2_fn, optimizer_combinations.rmsprop_optimizer_keras_v2_fn, optimizer_combinations.ftrl_optimizer_keras_v2_fn]))
A:keras.distribute.distribute_strategy_test.tpu_strategies_graph->tensorflow.compat.v2.__internal__.test.combinations.combine(distribution=tpu_strategies, mode=['graph'], optimizer=[optimizer_combinations.adagrad_optimizer_v1_fn, optimizer_combinations.adam_optimizer_v1_fn, optimizer_combinations.gradient_descent_optimizer_v1_fn, optimizer_combinations.rmsprop_optimizer_v1_fn, optimizer_combinations.adagrad_optimizer_keras_v2_fn, optimizer_combinations.adam_optimizer_keras_v2_fn, optimizer_combinations.gradient_descent_optimizer_keras_v2_fn, optimizer_combinations.rmsprop_optimizer_keras_v2_fn])
A:keras.distribute.distribute_strategy_test.tpu_strategies_eager->tensorflow.compat.v2.__internal__.test.combinations.combine(distribution=tpu_strategies, mode=['eager'], optimizer=[optimizer_combinations.adagrad_optimizer_keras_v2_fn, optimizer_combinations.adam_optimizer_keras_v2_fn, optimizer_combinations.gradient_descent_optimizer_keras_v2_fn, optimizer_combinations.rmsprop_optimizer_keras_v2_fn])
A:keras.distribute.distribute_strategy_test.multi_worker_eager->tensorflow.compat.v2.__internal__.test.combinations.combine(distribution=multi_worker_mirrored_strategies, mode=['eager'], optimizer=[optimizer_combinations.adadelta_optimizer_keras_v2_fn, optimizer_combinations.adagrad_optimizer_keras_v2_fn, optimizer_combinations.adam_optimizer_keras_v2_fn, optimizer_combinations.adamax_optimizer_keras_v2_fn, optimizer_combinations.gradient_descent_optimizer_keras_v2_fn, optimizer_combinations.nadam_optimizer_keras_v2_fn, optimizer_combinations.rmsprop_optimizer_keras_v2_fn, optimizer_combinations.ftrl_optimizer_keras_v2_fn])
A:keras.distribute.distribute_strategy_test.(steps, batch_size)->keras.distribute.distributed_training_utils_v1.get_input_params(distribution, 64, steps=5, batch_size=3)
A:keras.distribute.distribute_strategy_test.optimizer->keras.optimizers.adam_v2.Adam(0.0001)
A:keras.distribute.distribute_strategy_test.self.v1->tensorflow.compat.v2.Variable(1.0)
A:keras.distribute.distribute_strategy_test.self.v2->tensorflow.compat.v2.Variable(-1.0)
A:keras.distribute.distribute_strategy_test.layer->MyLayer()
A:keras.distribute.distribute_strategy_test.(grad_v1, grad_v2)->tensorflow.compat.v2.compat.v1.distribute.experimental.ParameterServerStrategy(cluster_resolver).run(run_fn)
A:keras.distribute.distribute_strategy_test.run_fn->tensorflow.compat.v2.function(run_fn)
A:keras.distribute.distribute_strategy_test.gradients->tape.gradient(y, model.trainable_variables)
A:keras.distribute.distribute_strategy_test.input_a_np->numpy.random.random((10, 3)).astype('float32')
A:keras.distribute.distribute_strategy_test.input_b_np->numpy.random.random((10, 5)).astype('float32')
A:keras.distribute.distribute_strategy_test.output_d_np->numpy.random.random((10, 7)).astype('float32')
A:keras.distribute.distribute_strategy_test.output_e_np->numpy.random.random((10, 7)).astype('float32')
A:keras.distribute.distribute_strategy_test.sample_weights->numpy.array([0.25, 0.5, 0.75, 1], np.float32)
A:keras.distribute.distribute_strategy_test.result->create_model().evaluate(ds, verbose=1)
A:keras.distribute.distribute_strategy_test.outs->create_model().predict(inputs)
A:keras.distribute.distribute_strategy_test.model_with_ds_strategy->simple_multi_inputs_multi_outputs_model()
A:keras.distribute.distribute_strategy_test.cpu_model->simple_multi_inputs_multi_outputs_model()
A:keras.distribute.distribute_strategy_test.evaluate_ground_truth->simple_multi_inputs_multi_outputs_model().evaluate(x, y)
A:keras.distribute.distribute_strategy_test.steps->numpy.ceil(10.0 / batch_size)
A:keras.distribute.distribute_strategy_test.predict_ground_truth->simple_multi_inputs_multi_outputs_model().predict(inputs)
A:keras.distribute.distribute_strategy_test.(input_data, _)->get_multi_inputs_multi_outputs_data()
A:keras.distribute.distribute_strategy_test.self.extra_weight_1->self.add_weight('extra_weight_1', shape=(), initializer='ones')
A:keras.distribute.distribute_strategy_test.self.extra_weight_2->self.add_weight('extra_weight_2', shape=(), initializer='ones')
A:keras.distribute.distribute_strategy_test.user_controlled_model->get_model()
A:keras.distribute.distribute_strategy_test.interleaved_model->get_model()
A:keras.distribute.distribute_strategy_test.interleaved_output->get_model().fit(dataset, epochs=2, steps_per_epoch=2, verbose=1, validation_data=dataset, validation_steps=2, shuffle=False)
A:keras.distribute.distribute_strategy_test.val_mean_absolute_error->get_model().fit(dataset, epochs=2, steps_per_epoch=2, verbose=1, validation_data=dataset, validation_steps=2, shuffle=False).history.get('val_mean_absolute_error')
A:keras.distribute.distribute_strategy_test.dataset_tuple->dataset_tuple.batch(10).batch(10)
A:keras.distribute.distribute_strategy_test.dataset_dict->dataset_dict.batch(10).batch(10)
A:keras.distribute.distribute_strategy_test.bce->keras.losses.binary_crossentropy(label, predict)
A:keras.distribute.distribute_strategy_test.input_img->keras.layers.Input([64, 64, 3], name='img')
A:keras.distribute.distribute_strategy_test.input_lbl->keras.layers.Input([64, 64, 1], name='lbl')
A:keras.distribute.distribute_strategy_test.input_weight->keras.layers.Input([64, 64], name='weight')
A:keras.distribute.distribute_strategy_test.predict->keras.layers.Conv2D(2, [1, 1], padding='same')(input_img)
A:keras.distribute.distribute_strategy_test.loss_lambda->keras.layers.Lambda(lambda x: custom_loss(*x), name='my_loss')
A:keras.distribute.distribute_strategy_test.my_loss->loss_lambda([predict, input_lbl, input_weight])
A:keras.distribute.distribute_strategy_test.fake_imgs->numpy.ones([50, 64, 64, 3], dtype=np.float32)
A:keras.distribute.distribute_strategy_test.fake_lbls->numpy.ones([50, 64, 64, 1], dtype=np.float32)
A:keras.distribute.distribute_strategy_test.fake_weights->numpy.ones([50, 64, 64], dtype=np.float32)
A:keras.distribute.distribute_strategy_test.data->tensorflow.compat.v2.data.Dataset.from_tensor_slices((fake_imgs, fake_lbls, fake_weights)).map(map_fn).batch(10)
A:keras.distribute.distribute_strategy_test.eval_with_numpy->create_model().evaluate(inputs, targets, batch_size=10)
A:keras.distribute.distribute_strategy_test.predict_with_numpy->create_model().predict(inputs, batch_size=10)
A:keras.distribute.distribute_strategy_test.eval_with_ds->create_model().evaluate(dataset, steps=100)
A:keras.distribute.distribute_strategy_test.predict_dataset->predict_dataset.repeat().batch(batch_size).repeat().batch(batch_size)
A:keras.distribute.distribute_strategy_test.predict_with_ds->create_model().predict(predict_dataset, steps=100)
A:keras.distribute.distribute_strategy_test.z->keras.layers.Dropout(0.9999)(y)
A:keras.distribute.distribute_strategy_test.initial_weights->create_model().get_weights()
A:keras.distribute.distribute_strategy_test.hist->create_model().fit(dataset, epochs=1, steps_per_epoch=20, verbose=1)
A:keras.distribute.distribute_strategy_test.output->create_model().predict(input_data, batch_size=2)
A:keras.distribute.distribute_strategy_test.ref_output->numpy.ones((160, 1), dtype=np.float32)
A:keras.distribute.distribute_strategy_test.dataset_with_partial_batch->dataset.batch(8 * distribution.num_replicas_in_sync).batch(8 * distribution.num_replicas_in_sync).batch(18)
A:keras.distribute.distribute_strategy_test.intermediate_a->keras.layers.Dense(10)(input_a)
A:keras.distribute.distribute_strategy_test.intermediate_b->keras.layers.Dense(10)(input_b)
A:keras.distribute.distribute_strategy_test.target->numpy.ones((32, 2), dtype=np.float32)
A:keras.distribute.distribute_strategy_test.(input_a, input_b, output)->_create_model_input_output_tensors()
A:keras.distribute.distribute_strategy_test.model_with_array_input->keras.models.Model(inputs=[input_a, input_b], outputs=output)
A:keras.distribute.distribute_strategy_test.model_weights->keras.models.Model(inputs=[input_a, input_b], outputs=output).get_weights()
A:keras.distribute.distribute_strategy_test.model_with_dict_input->keras.models.Model(inputs={'z_input_sorted_last': input_a, 'a_input_sorted_first': input_b}, outputs=output)
A:keras.distribute.distribute_strategy_test.ds->ds.filter(lambda *args, **kwargs: True).filter(lambda *args, **kwargs: True)
A:keras.distribute.distribute_strategy_test.self.input_file_name->os.path.join(self.get_temp_dir(), 'input.tfrecord')
A:keras.distribute.distribute_strategy_test.input_dataset->input_dataset.map(tf.io.serialize_tensor).map(tf.io.serialize_tensor)
A:keras.distribute.distribute_strategy_test.writer->tensorflow.compat.v2.data.experimental.TFRecordWriter(self.input_file_name)
A:keras.distribute.distribute_strategy_test.options->tensorflow.compat.v2.data.Options()
A:keras.distribute.distribute_strategy_test.self.v->self.add_weight('v', (), initializer='ones', regularizer=TestRegularizerLoss.IdentityRegularizer())
A:keras.distribute.distribute_strategy_test.opt->keras.optimizer_v2.gradient_descent.SGD(1.0)
A:keras.distribute.distribute_strategy_test.cb_counter->CBCounter()
A:keras.distribute.distribute_strategy_test.val_ds->tensorflow.compat.v2.compat.v1.distribute.experimental.ParameterServerStrategy(cluster_resolver).distribute_datasets_from_function(make_dataset)
A:keras.distribute.distribute_strategy_test.outputs->keras.layers.Dense(num_classes, name='logits')(x)
A:keras.distribute.distribute_strategy_test.bc->BatchCountingCB()
A:keras.distribute.distribute_strategy_test.train_ds->ds.filter(lambda *args, **kwargs: True).filter(lambda *args, **kwargs: True).repeat(2)
A:keras.distribute.distribute_strategy_test.test_ds->ds.filter(lambda *args, **kwargs: True).filter(lambda *args, **kwargs: True).repeat(2)
A:keras.distribute.distribute_strategy_test.predict_ds->ds.filter(lambda *args, **kwargs: True).filter(lambda *args, **kwargs: True).repeat(2)
A:keras.distribute.distribute_strategy_test.inp->keras.layers.Input(shape=(10,))
A:keras.distribute.distribute_strategy_test.out->keras.layers.Dense(3, activation='softmax')(inp)
A:keras.distribute.distribute_strategy_test.x1->keras.layers.Dense(10, kernel_initializer='zeros')(inputs)
A:keras.distribute.distribute_strategy_test.x2->Bias()(x1)
A:keras.distribute.distribute_strategy_test.history->create_model().fit(x, y, validation_data=(x, y), validation_steps=2, epochs=2)
A:keras.distribute.distribute_strategy_test.ds_model->_make_model_with_add_metric()
A:keras.distribute.distribute_strategy_test.ds_history->_make_model_with_add_metric().fit(x, y, validation_data=(x, y), validation_steps=2, epochs=2)
A:keras.distribute.distribute_strategy_test.self.bias->self.add_weight(name='bias', initializer='zeros', shape=())
A:keras.distribute.distribute_strategy_test.self.mean->keras.metrics.Mean(name='mean')
A:keras.distribute.distribute_strategy_test.indices->tensorflow.compat.v2.where(tf.not_equal(inputs, 0))
A:keras.distribute.distribute_strategy_test.values->tensorflow.compat.v2.compat.v1.gather_nd(inputs, indices)
A:keras.distribute.distribute_strategy_test.shape->tensorflow.compat.v2.compat.v1.shape(inputs, out_type='int64')
A:keras.distribute.distribute_strategy_test.input_data->numpy.array([[1, 0, 0], [2, 3, 0]])
A:keras.distribute.distribute_strategy_test.expected_indices->numpy.array([[0, 0], [1, 0], [1, 1]])
A:keras.distribute.distribute_strategy_test.expected_values->numpy.array([1, 2, 3])
A:keras.distribute.distribute_strategy_test.expected_dense_shape->numpy.array([2, 3])
A:keras.distribute.distribute_strategy_test.labels->keras.layers.Input(shape=(1,))
A:keras.distribute.distribute_strategy_test.x_train->x_train.astype('float32').astype('float32')
A:keras.distribute.distribute_strategy_test.y_train->y_train.astype('float32').astype('float32')
A:keras.distribute.distribute_strategy_test.logits->base_model(inputs)
A:keras.distribute.distribute_strategy_test.loss->tensorflow.compat.v2.nn.compute_average_loss(loss, global_batch_size=batch_size)
A:keras.distribute.distribute_strategy_test.grads->tape.gradient(loss, model.trainable_variables)
A:keras.distribute.distribute_strategy_test.per_replica_losses->tensorflow.compat.v2.compat.v1.distribute.experimental.ParameterServerStrategy(cluster_resolver).run(step_fn, args=(dist_inputs,))
A:keras.distribute.distribute_strategy_test.cluster_spec->tensorflow.python.distribute.multi_worker_test_base.create_in_process_cluster(num_workers=3, num_ps=2)
A:keras.distribute.distribute_strategy_test.cluster_resolver->SimpleClusterResolver(cluster_spec=tf.train.ClusterSpec(cluster_spec), task_type='worker', task_id=1, num_accelerators={'GPU': 0})
A:keras.distribute.distribute_strategy_test.distribution->tensorflow.compat.v2.compat.v1.distribute.experimental.ParameterServerStrategy(cluster_resolver)
A:keras.distribute.distribute_strategy_test.l2_loss->tensorflow.compat.v2.reduce_mean(tf.reduce_sum(tf.square(logits - zero_logits), -1))
A:keras.distribute.distribute_strategy_test.l1_loss->tensorflow.compat.v2.reduce_mean(tf.reduce_sum(tf.abs(logits - one_logits), -1))
A:keras.distribute.distribute_strategy_test.base_model->keras.Sequential([keras.layers.Conv2D(32, kernel_size=5, activation='relu', input_shape=input_shape), keras.layers.MaxPooling2D(pool_size=2), keras.layers.Conv2D(64, kernel_size=5, activation='relu'), keras.layers.MaxPooling2D(pool_size=2), keras.layers.Flatten(), keras.layers.Dense(1024, activation='relu'), keras.layers.Dense(num_classes, name='logits')])
A:keras.distribute.distribute_strategy_test.zero_logits->base_model(tf.compat.v1.zeros_like(inputs))
A:keras.distribute.distribute_strategy_test.one_logits->base_model(tf.compat.v1.ones_like(inputs))
A:keras.distribute.distribute_strategy_test.results->dict(zip(model.metrics_names, results))
A:keras.distribute.distribute_strategy_test.self.x->tensorflow.compat.v2.Variable(tf.ones(shape=()))
A:keras.distribute.distribute_strategy_test.active_strategy->tensorflow.compat.v2.distribute.get_strategy()
A:keras.distribute.distribute_strategy_test.metric_vars->tensorflow.compat.v2.nest.flatten([metric.variables for metric in model.metrics])
A:keras.distribute.distribute_strategy_test.metric->keras.metrics.BinaryAccuracy()
A:keras.distribute.distribute_strategy_test.temp_dir->os.path.join(self.get_temp_dir(), 'ckpt')
A:keras.distribute.distribute_strategy_test.xy->tensorflow.compat.v2.ones(shape=(1, 1))
keras.distribute.distribute_strategy_test.BatchCountingCB(self)
keras.distribute.distribute_strategy_test.BatchCountingCB.__init__(self)
keras.distribute.distribute_strategy_test.BatchCountingCB.on_predict_batch_begin(self,batch,logs=None)
keras.distribute.distribute_strategy_test.BatchCountingCB.on_predict_batch_end(self,batch,logs=None)
keras.distribute.distribute_strategy_test.BatchCountingCB.on_test_batch_begin(self,batch,logs=None)
keras.distribute.distribute_strategy_test.BatchCountingCB.on_test_batch_end(self,batch,logs=None)
keras.distribute.distribute_strategy_test.BatchCountingCB.on_train_batch_begin(self,batch,logs=None)
keras.distribute.distribute_strategy_test.BatchCountingCB.on_train_batch_end(self,batch,logs=None)
keras.distribute.distribute_strategy_test.DeterministicModel(self,strategy)
keras.distribute.distribute_strategy_test.DeterministicModel.__init__(self,strategy)
keras.distribute.distribute_strategy_test.DeterministicModel.build(self,input_shape)
keras.distribute.distribute_strategy_test.DeterministicModel.call(self,inputs,training=None,mask=None)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasets(tf.test.TestCase,parameterized.TestCase)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasets.testOptimizerWithCallbacks(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasets.test_calling_model_on_same_dataset(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasets.test_dataset_external_batch_input_validation(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasets.test_dataset_with_sample_weights(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasets.test_dataset_wrong_input_shape(self,distribution,mode)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasets.test_evaluate_with_dataset_with_partial_batch(self,distribution,batch_size)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasets.test_fit_eval_and_predict_methods_on_dataset(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasets.test_fit_eval_and_predict_methods_on_dataset_without_steps(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasets.test_fit_eval_and_predict_with_optimizer(self,distribution,optimizer)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasets.test_fit_with_dictionary_in_the_dataset_b135161171(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasets.test_fit_with_tuple_and_dict_dataset_inputs(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasets.test_learning_phase_value(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasets.test_match_model_input_matches_with_dataset_tensors(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasets.test_model_interleaved_eval_same_as_direct_eval(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasets.test_on_dataset_with_unknown_cardinality(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasets.test_on_dataset_with_unknown_cardinality_without_steps(self,distribution,mode)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasets.test_predict_multi_output_model_with_dataset_with_partial_batch(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasets.test_predict_on_dataset_with_unknown_cardinality_without_steps(self,distribution,mode)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasets.test_predict_with_dataset_with_partial_batch(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasetsFile(tf.test.TestCase,parameterized.TestCase)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasetsFile.setUp(self)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithDatasetsFile.test_predict_on_dataset_shard_options_file_multi_worker_mirrored(self,distribution,mode)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithKerasModels(tf.test.TestCase,parameterized.TestCase)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithKerasModels.DISABLED_test_distribution_strategy_with_callable_add_loss(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithKerasModels.test_correctness_of_add_loss_with_merge_call(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithKerasModels.test_custom_gradient_transformation(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithKerasModels.test_distributed_dataset(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithKerasModels.test_distributed_datasets_from_function(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithKerasModels.test_distribution_strategy_on_functional_model(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithKerasModels.test_distribution_strategy_on_sequential_model(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithKerasModels.test_distribution_strategy_one_dimensional(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithKerasModels.test_distribution_strategy_with_add_metric_in_call(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithKerasModels.test_distribution_strategy_with_add_metric_object(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithKerasModels.test_distribution_strategy_with_add_metric_outside_call(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithKerasModels.test_distribution_strategy_with_loss_reduction_types(self,distribution,reduction)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithKerasModels.test_distribution_strategy_with_symbolic_add_loss(self,mode,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithKerasModels.test_gradient_clipping(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithKerasModels.test_host_training_loop(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithKerasModels.test_host_training_loop_dataset_unknown_size(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithKerasModels.test_host_training_loop_last_partial_execution(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithKerasModels.test_host_training_loop_truncate_to_epoch(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithKerasModels.test_ragged_tensor_outputs(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithKerasModels.test_sparse_tensor_outputs(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithKerasModels.test_unimplemented_parameter_server_strategy(self)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithMultipleAddLossAndMetricCalls(tf.test.TestCase,parameterized.TestCase)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithMultipleAddLossAndMetricCalls.test_fit_and_evaluate(self,distribution,model_fn,l1,l2)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithNumpyArrays(tf.test.TestCase,parameterized.TestCase)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithNumpyArrays.test_calculating_input_params_no_steps_no_batch_size(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithNumpyArrays.test_calculating_input_params_no_steps_with_batch_size(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithNumpyArrays.test_calculating_input_params_with_steps_no_batch_size(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithNumpyArrays.test_calculating_input_params_with_steps_with_batch_size(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithNumpyArrays.test_calling_model_with_mixed_precision(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithNumpyArrays.test_calling_model_with_nested_numpy_arrays(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithNumpyArrays.test_calling_model_with_numpy_arrays(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithNumpyArrays.test_evaluate_with_partial_batch(self,distribution,batch_size)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithNumpyArrays.test_flatten_predict_outputs(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithNumpyArrays.test_gradients_are_none(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithNumpyArrays.test_no_target_model(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithNumpyArrays.test_numpy_with_sample_weights(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithNumpyArrays.test_operator_overload_mixed_precision(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithNumpyArrays.test_optimizer_in_cross_replica_context_raises_error(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithNumpyArrays.test_predict_multi_output_model_with_partial_batch(self,distribution)
keras.distribute.distribute_strategy_test.TestDistributionStrategyWithNumpyArrays.test_predict_with_partial_batch(self,distribution)
keras.distribute.distribute_strategy_test.TestModelCapturesStrategy(tf.test.TestCase,parameterized.TestCase)
keras.distribute.distribute_strategy_test.TestModelCapturesStrategy.test_fit_and_evaluate(self,distribution)
keras.distribute.distribute_strategy_test.TestModelCapturesStrategy.test_optimizer(self,distribution)
keras.distribute.distribute_strategy_test.TestRegularizerLoss(tf.test.TestCase,parameterized.TestCase)
keras.distribute.distribute_strategy_test.TestRegularizerLoss.AddLayer(keras.layers.Layer)
keras.distribute.distribute_strategy_test.TestRegularizerLoss.AddLayer.build(self,_)
keras.distribute.distribute_strategy_test.TestRegularizerLoss.AddLayer.call(self,inputs)
keras.distribute.distribute_strategy_test.TestRegularizerLoss.IdentityRegularizer(self,x)
keras.distribute.distribute_strategy_test.TestRegularizerLoss.IdentityRegularizer.__call__(self,x)
keras.distribute.distribute_strategy_test.TestRegularizerLoss.loss_fn(_,y_pred)
keras.distribute.distribute_strategy_test.TestRegularizerLoss.test_regularizer_loss(self,distribution)
keras.distribute.distribute_strategy_test._functional_with_add_loss_and_metric(input_shape,num_classes,l1,l2)
keras.distribute.distribute_strategy_test._functional_with_layer_reuse(input_shape,num_classes,l1,l2)
keras.distribute.distribute_strategy_test._sequential_with_add_loss_and_metric(input_shape,num_classes,l1,l2)
keras.distribute.distribute_strategy_test.all_strategy_combinations()
keras.distribute.distribute_strategy_test.all_strategy_combinations_minus_default()
keras.distribute.distribute_strategy_test.all_strategy_minus_default_and_tpu_combinations()
keras.distribute.distribute_strategy_test.batch_wrapper(dataset,batch_size,distribution,repeat=None)
keras.distribute.distribute_strategy_test.convert_numpy_to_dataset_with_unknown_cardinality(inputs,targets=None)
keras.distribute.distribute_strategy_test.get_dataset(distribution)
keras.distribute.distribute_strategy_test.get_model()
keras.distribute.distribute_strategy_test.get_multi_inputs_multi_outputs_data()
keras.distribute.distribute_strategy_test.get_predict_dataset(distribution)
keras.distribute.distribute_strategy_test.get_sample_weights_model()
keras.distribute.distribute_strategy_test.multi_input_output_model()
keras.distribute.distribute_strategy_test.multi_worker_strategy_combinations_eager_only()
keras.distribute.distribute_strategy_test.simple_multi_inputs_multi_outputs_model()
keras.distribute.distribute_strategy_test.simple_sequential_model()
keras.distribute.distribute_strategy_test.simple_subclassed_model(num_labels=_NUM_CLASS)
keras.distribute.distribute_strategy_test.strategy_and_optimizer_combinations()
keras.distribute.distribute_strategy_test.strategy_minus_tpu_combinations()
keras.distribute.distribute_strategy_test.tpu_strategy_combinations()
keras.distribute.distribute_strategy_test.tpu_strategy_combinations_graph_only()


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/distribute/model_collection_base.py----------------------------------------
keras.distribute.model_collection_base.ModelAndInput
keras.distribute.model_collection_base.ModelAndInput.get_batch_size(self)
keras.distribute.model_collection_base.ModelAndInput.get_data(self)
keras.distribute.model_collection_base.ModelAndInput.get_model(self)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/distribute/optimizer_combinations.py----------------------------------------
A:keras.distribute.optimizer_combinations.gradient_descent_optimizer_v1_fn->tensorflow.compat.v2.__internal__.test.combinations.NamedObject('GradientDescentV1', lambda : tf.compat.v1.train.GradientDescentOptimizer(0.001))
A:keras.distribute.optimizer_combinations.adagrad_optimizer_v1_fn->tensorflow.compat.v2.__internal__.test.combinations.NamedObject('AdagradV1', lambda : tf.compat.v1.train.AdagradOptimizer(0.001))
A:keras.distribute.optimizer_combinations.adam_optimizer_v1_fn->tensorflow.compat.v2.__internal__.test.combinations.NamedObject('AdamV1', lambda : tf.compat.v1.train.AdamOptimizer(0.001, epsilon=1))
A:keras.distribute.optimizer_combinations.ftrl_optimizer_v1_fn->tensorflow.compat.v2.__internal__.test.combinations.NamedObject('FtrlV1', lambda : tf.compat.v1.train.FtrlOptimizer(0.001))
A:keras.distribute.optimizer_combinations.rmsprop_optimizer_v1_fn->tensorflow.compat.v2.__internal__.test.combinations.NamedObject('RmsPropV1', lambda : tf.compat.v1.train.RMSPropOptimizer(0.001))
A:keras.distribute.optimizer_combinations.adadelta_optimizer_keras_v2_fn->tensorflow.compat.v2.__internal__.test.combinations.NamedObject('AdadeltaKerasV2', lambda : adadelta_keras_v2.Adadelta(0.001))
A:keras.distribute.optimizer_combinations.adagrad_optimizer_keras_v2_fn->tensorflow.compat.v2.__internal__.test.combinations.NamedObject('AdagradKerasV2', lambda : adagrad_keras_v2.Adagrad(0.001))
A:keras.distribute.optimizer_combinations.adam_optimizer_keras_v2_fn->tensorflow.compat.v2.__internal__.test.combinations.NamedObject('AdamKerasV2', lambda : adam_keras_v2.Adam(0.001, epsilon=1.0))
A:keras.distribute.optimizer_combinations.adamax_optimizer_keras_v2_fn->tensorflow.compat.v2.__internal__.test.combinations.NamedObject('AdamaxKerasV2', lambda : adamax_keras_v2.Adamax(0.001, epsilon=1.0))
A:keras.distribute.optimizer_combinations.nadam_optimizer_keras_v2_fn->tensorflow.compat.v2.__internal__.test.combinations.NamedObject('NadamKerasV2', lambda : nadam_keras_v2.Nadam(0.001, epsilon=1.0))
A:keras.distribute.optimizer_combinations.ftrl_optimizer_keras_v2_fn->tensorflow.compat.v2.__internal__.test.combinations.NamedObject('FtrlKerasV2', lambda : ftrl_keras_v2.Ftrl(0.001))
A:keras.distribute.optimizer_combinations.gradient_descent_optimizer_keras_v2_fn->tensorflow.compat.v2.__internal__.test.combinations.NamedObject('GradientDescentKerasV2', lambda : gradient_descent_keras_v2.SGD(0.001))
A:keras.distribute.optimizer_combinations.rmsprop_optimizer_keras_v2_fn->tensorflow.compat.v2.__internal__.test.combinations.NamedObject('RmsPropKerasV2', lambda : rmsprop_keras_v2.RMSprop(0.001))
keras.distribute.optimizer_combinations.distributions_and_v1_and_v2_optimizers()
keras.distribute.optimizer_combinations.distributions_and_v1_optimizers()
keras.distribute.optimizer_combinations.distributions_and_v2_optimizers()


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/distribute/worker_training_state.py----------------------------------------
A:keras.distribute.worker_training_state.self._ckpt_saved_epoch->tensorflow.compat.v2.Variable(initial_value=tf.constant(CKPT_SAVED_EPOCH_UNUSED_VALUE, dtype=tf.int64), name='ckpt_saved_epoch')
A:keras.distribute.worker_training_state.checkpoint->tensorflow.compat.v2.train.Checkpoint(model=self._model, ckpt_saved_epoch=self._ckpt_saved_epoch)
A:keras.distribute.worker_training_state.self.read_checkpoint_manager->tensorflow.compat.v2.train.CheckpointManager(checkpoint, directory=os.path.join(checkpoint_dir, 'chief'), max_to_keep=1)
A:keras.distribute.worker_training_state.write_checkpoint_dir->keras.distribute.distributed_file_utils.write_dirpath(checkpoint_dir, self._model.distribute_strategy)
A:keras.distribute.worker_training_state.self.write_checkpoint_manager->tensorflow.compat.v2.train.CheckpointManager(checkpoint, directory=write_checkpoint_dir, max_to_keep=1)
A:keras.distribute.worker_training_state.epoch->keras.backend.eval(self._ckpt_saved_epoch)
keras.distribute.worker_training_state.WorkerTrainingState(self,model,checkpoint_dir)
keras.distribute.worker_training_state.WorkerTrainingState.__init__(self,model,checkpoint_dir)
keras.distribute.worker_training_state.WorkerTrainingState.back_up(self,epoch)
keras.distribute.worker_training_state.WorkerTrainingState.delete_backup(self)
keras.distribute.worker_training_state.WorkerTrainingState.maybe_load_initial_epoch_from_ckpt(self,initial_epoch,mode)
keras.distribute.worker_training_state.WorkerTrainingState.restore(self)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/distribute/sidecar_evaluator.py----------------------------------------
A:keras.distribute.sidecar_evaluator.reader->tensorflow.compat.v2.train.load_checkpoint(ckpt_dir_or_file)
A:keras.distribute.sidecar_evaluator.variable_map->tensorflow.compat.v2.train.load_checkpoint(ckpt_dir_or_file).get_variable_to_shape_map()
A:keras.distribute.sidecar_evaluator.self._iterations->tensorflow.compat.v2.Variable(name='iterations', initial_value=_ITERATIONS_UNINITIALIZED, dtype=tf.int64)
A:keras.distribute.sidecar_evaluator.optimizer_checkpoint->tensorflow.compat.v2.train.Checkpoint(iter=self._iterations)
A:keras.distribute.sidecar_evaluator.checkpoint->tensorflow.compat.v2.train.Checkpoint(model=self.model, optimizer=optimizer_checkpoint)
A:keras.distribute.sidecar_evaluator.checkpoint_attributes->list_checkpoint_attributes(latest_checkpoint)
keras.distribute.sidecar_evaluator.SidecarEvaluator(self,model,data,checkpoint_dir,steps=None,max_evaluations=None,callbacks=None)
keras.distribute.sidecar_evaluator.SidecarEvaluator.__init__(self,model,data,checkpoint_dir,steps=None,max_evaluations=None,callbacks=None)
keras.distribute.sidecar_evaluator.SidecarEvaluator.start(self)
keras.distribute.sidecar_evaluator.list_checkpoint_attributes(ckpt_dir_or_file)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/distribute/simple_models.py----------------------------------------
A:keras.distribute.simple_models.x_train->tensorflow.compat.v2.constant(np.random.rand(1000, 3), dtype=tf.float32)
A:keras.distribute.simple_models.y_train->tensorflow.compat.v2.constant(np.random.rand(1000, 5), dtype=tf.float32)
A:keras.distribute.simple_models.x_predict->tensorflow.compat.v2.constant(np.random.rand(1000, 3), dtype=tf.float32)
A:keras.distribute.simple_models.x->keras.layers.Input(shape=(3,), dtype=tf.float32)
A:keras.distribute.simple_models.y->keras.layers.Dense(5, dtype=tf.float32, name=output_name, input_dim=3)
A:keras.distribute.simple_models.model->_SimpleModule()
A:keras.distribute.simple_models.optimizer->keras.optimizer_v2.gradient_descent.SGD(learning_rate=0.001)
A:keras.distribute.simple_models.self._dense_layer->keras.layers.Dense(5, dtype=tf.float32)
A:keras.distribute.simple_models.self.v->tensorflow.compat.v2.Variable(3.0)
keras.distribute.simple_models.SimpleFunctionalModel(model_collection_base.ModelAndInput)
keras.distribute.simple_models.SimpleFunctionalModel.get_batch_size(self)
keras.distribute.simple_models.SimpleFunctionalModel.get_data(self)
keras.distribute.simple_models.SimpleFunctionalModel.get_model(self,**kwargs)
keras.distribute.simple_models.SimpleSequentialModel(model_collection_base.ModelAndInput)
keras.distribute.simple_models.SimpleSequentialModel.get_batch_size(self)
keras.distribute.simple_models.SimpleSequentialModel.get_data(self)
keras.distribute.simple_models.SimpleSequentialModel.get_model(self,**kwargs)
keras.distribute.simple_models.SimpleSubclassModel(model_collection_base.ModelAndInput)
keras.distribute.simple_models.SimpleSubclassModel.get_batch_size(self)
keras.distribute.simple_models.SimpleSubclassModel.get_data(self)
keras.distribute.simple_models.SimpleSubclassModel.get_model(self,**kwargs)
keras.distribute.simple_models.SimpleTFModuleModel(model_collection_base.ModelAndInput)
keras.distribute.simple_models.SimpleTFModuleModel.get_batch_size(self)
keras.distribute.simple_models.SimpleTFModuleModel.get_data(self)
keras.distribute.simple_models.SimpleTFModuleModel.get_model(self,**kwargs)
keras.distribute.simple_models._SimpleModel(self)
keras.distribute.simple_models._SimpleModel.__init__(self)
keras.distribute.simple_models._SimpleModel.call(self,inputs)
keras.distribute.simple_models._SimpleModule(self)
keras.distribute.simple_models._SimpleModule.__init__(self)
keras.distribute.simple_models._get_data_for_simple_models()


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/distribute/distributed_training_utils.py----------------------------------------
A:keras.distribute.distributed_training_utils.strategy->tensorflow.compat.v2.distribute.get_strategy()
A:keras.distribute.distributed_training_utils.is_tpu->keras.backend.is_tpu_strategy(strategy)
keras.distribute.distributed_training_utils.call_replica_local_fn(fn,*args,**kwargs)
keras.distribute.distributed_training_utils.global_batch_size_supported(distribution_strategy)
keras.distribute.distributed_training_utils.is_distributed_variable(v)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/distribute/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/distribute/strategy_combinations.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/distribute/keras_image_model_correctness_test.py----------------------------------------
A:keras.distribute.keras_image_model_correctness_test.image->keras.layers.Input(shape=(28, 28, 3), name='image')
A:keras.distribute.keras_image_model_correctness_test.c1->keras.layers.MaxPooling2D(pool_size=(2, 2))(c1)
A:keras.distribute.keras_image_model_correctness_test.bn1->keras.layers.SyncBatchNormalization(name='bn1')(c1)
A:keras.distribute.keras_image_model_correctness_test.bn2->keras.layers.SyncBatchNormalization(name='bn2')(c1)
A:keras.distribute.keras_image_model_correctness_test.logits->keras.layers.Dense(10, activation='softmax', name='pred')(keras.layers.Flatten()(c1))
A:keras.distribute.keras_image_model_correctness_test.model->keras.Model(inputs=[image], outputs=[logits])
A:keras.distribute.keras_image_model_correctness_test.centers->numpy.random.randn(num_classes, *shape)
A:keras.distribute.keras_image_model_correctness_test.offset->offset.reshape(shape).reshape(shape)
A:keras.distribute.keras_image_model_correctness_test.x->numpy.asarray(features, dtype=np.float32)
A:keras.distribute.keras_image_model_correctness_test.y->numpy.asarray(labels, dtype=np.float32).reshape((count, 1))
A:keras.distribute.keras_image_model_correctness_test.(x_train, y_train)->self._get_data(count=1280)
A:keras.distribute.keras_image_model_correctness_test.(x_eval, y_eval)->self._get_data(count=1000)
keras.distribute.keras_image_model_correctness_test.DistributionStrategyCnnCorrectnessTest(keras_correctness_test_base.TestDistributionStrategyCorrectnessBase)
keras.distribute.keras_image_model_correctness_test.DistributionStrategyCnnCorrectnessTest._get_data(self,count,shape=(28,28,3),num_classes=10)
keras.distribute.keras_image_model_correctness_test.DistributionStrategyCnnCorrectnessTest.get_data(self)
keras.distribute.keras_image_model_correctness_test.DistributionStrategyCnnCorrectnessTest.get_data_with_partial_last_batch_eval(self)
keras.distribute.keras_image_model_correctness_test.DistributionStrategyCnnCorrectnessTest.get_model(self,initial_weights=None,distribution=None,input_shapes=None)
keras.distribute.keras_image_model_correctness_test.DistributionStrategyCnnCorrectnessTest.test_cnn_correctness(self,distribution,use_numpy,use_validation_data)
keras.distribute.keras_image_model_correctness_test.DistributionStrategyCnnCorrectnessTest.test_cnn_correctness_with_partial_last_batch_eval(self,distribution,use_numpy,use_validation_data)
keras.distribute.keras_image_model_correctness_test.DistributionStrategyCnnCorrectnessTest.test_cnn_with_batch_norm_correctness(self,distribution,use_numpy,use_validation_data)
keras.distribute.keras_image_model_correctness_test.DistributionStrategyCnnCorrectnessTest.test_cnn_with_batch_norm_correctness_and_partial_last_batch_eval(self,distribution,use_numpy,use_validation_data)
keras.distribute.keras_image_model_correctness_test.DistributionStrategyCnnCorrectnessTest.test_cnn_with_sync_batch_norm_correctness(self,distribution,use_numpy,use_validation_data)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/distribute/keras_correctness_test_base.py----------------------------------------
A:keras.distribute.keras_correctness_test_base.self._scope->self._distribution.scope()
A:keras.distribute.keras_correctness_test_base.dataset->dataset.repeat(repeat).repeat(repeat)
A:keras.distribute.keras_correctness_test_base.shapes->tensorflow.compat.v2.nest.map_structure(lambda x: x.shape, data)
A:keras.distribute.keras_correctness_test_base.batch_size->get_batch_size(global_batch_size, with_distribution)
A:keras.distribute.keras_correctness_test_base.training_data_size->get_data_size(x_train)
A:keras.distribute.keras_correctness_test_base.train_dataset->tensorflow.compat.v2.data.Dataset.from_tensor_slices((x_train, y_train))
A:keras.distribute.keras_correctness_test_base.x->batch_wrapper(eval_dataset, batch_size)
A:keras.distribute.keras_correctness_test_base.steps_per_epoch->int(np.ceil(1.0 * training_data_size / global_batch_size))
A:keras.distribute.keras_correctness_test_base.eval_dataset->tensorflow.compat.v2.data.Dataset.from_tensor_slices((x_eval, y_eval))
A:keras.distribute.keras_correctness_test_base.eval_steps->int(np.ceil(1.0 * get_data_size(x_eval) / global_batch_size))
A:keras.distribute.keras_correctness_test_base.predict_batch_size->get_batch_size(get_data_size(x_predict), with_distribution)
A:keras.distribute.keras_correctness_test_base.predict_dataset->batch_wrapper(predict_dataset, predict_batch_size)
A:keras.distribute.keras_correctness_test_base.(training_inputs, eval_inputs, predict_inputs)->input_fn()
A:keras.distribute.keras_correctness_test_base.model->self.get_model(input_shapes=get_shapes(x_train))
A:keras.distribute.keras_correctness_test_base.result['eval_result_1']->self.get_model(input_shapes=get_shapes(x_train)).evaluate(**eval_inputs)
A:keras.distribute.keras_correctness_test_base.result['weights_1']->self.get_model(input_shapes=get_shapes(x_train)).get_weights()
A:keras.distribute.keras_correctness_test_base.result_key->'predict_result_{}'.format(i)
A:keras.distribute.keras_correctness_test_base.result[result_key]->self.get_model(input_shapes=get_shapes(x_train)).predict(**predict_inputs)
A:keras.distribute.keras_correctness_test_base.result['eval_result_2']->self.get_model(input_shapes=get_shapes(x_train)).evaluate(**eval_inputs)
A:keras.distribute.keras_correctness_test_base.result['weights_2']->self.get_model(input_shapes=get_shapes(x_train)).get_weights()
A:keras.distribute.keras_correctness_test_base.tolerance->_get_compare_result_tolerance(key)
A:keras.distribute.keras_correctness_test_base.x_train->numpy.asarray(features, dtype=np.float32)
A:keras.distribute.keras_correctness_test_base.(x_train, y_train, x_eval, y_eval, x_predict)->self.get_data_with_partial_last_batch()
A:keras.distribute.keras_correctness_test_base.(x_train, y_train, x_predict)->self.get_data()
A:keras.distribute.keras_correctness_test_base.initial_weights->self.get_model(input_shapes=get_shapes(x_train)).get_weights()
A:keras.distribute.keras_correctness_test_base.ds_input_fn->functools.partial(self.get_input_for_dynamic_lr_test, x=x_train, y=y_train, batch_size=ds_batch_size, shuffle=False, epochs=training_epochs, callbacks=[LearningRateBatchScheduler(update_freq)], validation_data=(x_train, y_train))
A:keras.distribute.keras_correctness_test_base.nods_input_fn->functools.partial(self.get_input_for_dynamic_lr_test, x=x_train, y=y_train, batch_size=nods_batch_size, shuffle=False, epochs=training_epochs, callbacks=[LearningRateBatchScheduler(update_freq)], validation_data=(x_train, y_train))
A:keras.distribute.keras_correctness_test_base.results_with_ds->fit_eval_and_predict(initial_weights, input_fn=ds_input_fn, model_fn=self.get_model, distribution=distribution)
A:keras.distribute.keras_correctness_test_base.results_without_ds->fit_eval_and_predict(initial_weights, input_fn=nods_input_fn, model_fn=self.get_model, distribution=None)
A:keras.distribute.keras_correctness_test_base.(x_train, y_train, _)->self.get_data()
A:keras.distribute.keras_correctness_test_base.ds_batch_size->get_batch_size(global_batch_size, distribution)
A:keras.distribute.keras_correctness_test_base.nods_batch_size->get_batch_size(global_batch_size, None)
A:keras.distribute.keras_correctness_test_base.dist->numpy.abs(np.random.randn(max_word_id))
A:keras.distribute.keras_correctness_test_base.word_ids->numpy.random.choice(max_word_id, size=num_words, replace=True, p=distribution[label])
A:keras.distribute.keras_correctness_test_base.features->keras.preprocessing.sequence.pad_sequences(features, maxlen=max_words)
A:keras.distribute.keras_correctness_test_base.y_train->numpy.asarray(labels, dtype=np.int32).reshape((count, 1))
keras.distribute.keras_correctness_test_base.LearningRateBatchScheduler(self,update_freq=None)
keras.distribute.keras_correctness_test_base.LearningRateBatchScheduler.__init__(self,update_freq=None)
keras.distribute.keras_correctness_test_base.LearningRateBatchScheduler.on_batch_begin(self,batch,logs=None)
keras.distribute.keras_correctness_test_base.MaybeDistributionScope(self,distribution)
keras.distribute.keras_correctness_test_base.MaybeDistributionScope.__enter__(self)
keras.distribute.keras_correctness_test_base.MaybeDistributionScope.__exit__(self,exc_type,value,traceback)
keras.distribute.keras_correctness_test_base.MaybeDistributionScope.__init__(self,distribution)
keras.distribute.keras_correctness_test_base.TestDistributionStrategyCorrectnessBase(tf.test.TestCase,parameterized.TestCase)
keras.distribute.keras_correctness_test_base.TestDistributionStrategyCorrectnessBase.get_data(self)
keras.distribute.keras_correctness_test_base.TestDistributionStrategyCorrectnessBase.get_data_with_partial_last_batch(self)
keras.distribute.keras_correctness_test_base.TestDistributionStrategyCorrectnessBase.get_data_with_partial_last_batch_eval(self)
keras.distribute.keras_correctness_test_base.TestDistributionStrategyCorrectnessBase.get_input_for_correctness_test(self,**kwargs)
keras.distribute.keras_correctness_test_base.TestDistributionStrategyCorrectnessBase.get_input_for_dynamic_lr_test(self,**kwargs)
keras.distribute.keras_correctness_test_base.TestDistributionStrategyCorrectnessBase.get_model(self,distribution=None,input_shapes=None)
keras.distribute.keras_correctness_test_base.TestDistributionStrategyCorrectnessBase.run_correctness_test(self,distribution,use_numpy,use_validation_data,with_batch_norm=None,is_stateful_model=False,partial_last_batch=None,training_epochs=2)
keras.distribute.keras_correctness_test_base.TestDistributionStrategyCorrectnessBase.run_dynamic_lr_test(self,distribution)
keras.distribute.keras_correctness_test_base.TestDistributionStrategyCorrectnessBase.set_up_test_config(self,use_numpy=False,use_validation_data=False,with_batch_norm=None)
keras.distribute.keras_correctness_test_base.TestDistributionStrategyEmbeddingModelCorrectnessBase(TestDistributionStrategyCorrectnessBase)
keras.distribute.keras_correctness_test_base.TestDistributionStrategyEmbeddingModelCorrectnessBase.get_data(self,count=_GLOBAL_BATCH_SIZE*_EVAL_STEPS,min_words=5,max_words=10,max_word_id=19,num_classes=2)
keras.distribute.keras_correctness_test_base.all_strategy_and_input_config_combinations()
keras.distribute.keras_correctness_test_base.all_strategy_and_input_config_combinations_eager()
keras.distribute.keras_correctness_test_base.batch_wrapper(dataset,batch_size,repeat=None)
keras.distribute.keras_correctness_test_base.compare_results(results_with_ds,results_without_ds,distribution,testcase,partial_last_batch=None)
keras.distribute.keras_correctness_test_base.eager_mode_test_configuration()
keras.distribute.keras_correctness_test_base.fit_eval_and_predict(initial_weights,input_fn,model_fn,distribution=None,is_stateful_model=False)
keras.distribute.keras_correctness_test_base.get_batch_size(global_batch_size,distribution)
keras.distribute.keras_correctness_test_base.get_correctness_test_inputs(use_numpy,use_validation_data,with_distribution,x_train,y_train,x_eval,y_eval,x_predict,training_epochs)
keras.distribute.keras_correctness_test_base.get_data_size(data)
keras.distribute.keras_correctness_test_base.get_shapes(data)
keras.distribute.keras_correctness_test_base.graph_mode_test_configuration()
keras.distribute.keras_correctness_test_base.multi_worker_mirrored_eager()
keras.distribute.keras_correctness_test_base.multi_worker_mirrored_eager_and_graph()
keras.distribute.keras_correctness_test_base.should_skip_tpu_with_eager(distribution)
keras.distribute.keras_correctness_test_base.strategies_for_embedding_models()
keras.distribute.keras_correctness_test_base.strategy_minus_tpu_and_input_config_combinations_eager()
keras.distribute.keras_correctness_test_base.test_combinations_for_embedding_model()
keras.distribute.keras_correctness_test_base.test_combinations_with_tpu_strategies_graph()


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/optimizers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/optimizers/schedules/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/protobuf/saved_metadata_pb2.py----------------------------------------
A:keras.protobuf.saved_metadata_pb2._sym_db->google.protobuf.symbol_database.Default()
A:keras.protobuf.saved_metadata_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='keras/protobuf/saved_metadata.proto', package='third_party.py.keras.protobuf', syntax='proto3', serialized_options=None, create_key=_descriptor._internal_create_key, serialized_pb=b'\n#keras/protobuf/saved_metadata.proto\x12\x1dthird_party.py.keras.protobuf\x1a\x1dkeras/protobuf/versions.proto"J\n\rSavedMetadata\x129\n\x05nodes\x18\x01 \x03(\x0b2*.third_party.py.keras.protobuf.SavedObject"\x99\x01\n\x0bSavedObject\x12\x0f\n\x07node_id\x18\x02 \x01(\x05\x12\x11\n\tnode_path\x18\x03 \x01(\t\x12\x12\n\nidentifier\x18\x04 \x01(\t\x12\x10\n\x08metadata\x18\x05 \x01(\t\x12:\n\x07version\x18\x06 \x01(\x0b2).third_party.py.keras.protobuf.VersionDefJ\x04\x08\x01\x10\x02b\x06proto3', dependencies=[keras_dot_protobuf_dot_versions__pb2.DESCRIPTOR])
A:keras.protobuf.saved_metadata_pb2._SAVEDMETADATA->google.protobuf.descriptor.Descriptor(name='SavedMetadata', full_name='third_party.py.keras.protobuf.SavedMetadata', filename=None, file=DESCRIPTOR, containing_type=None, create_key=_descriptor._internal_create_key, fields=[_descriptor.FieldDescriptor(name='nodes', full_name='third_party.py.keras.protobuf.SavedMetadata.nodes', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=101, serialized_end=175)
A:keras.protobuf.saved_metadata_pb2._SAVEDOBJECT->google.protobuf.descriptor.Descriptor(name='SavedObject', full_name='third_party.py.keras.protobuf.SavedObject', filename=None, file=DESCRIPTOR, containing_type=None, create_key=_descriptor._internal_create_key, fields=[_descriptor.FieldDescriptor(name='node_id', full_name='third_party.py.keras.protobuf.SavedObject.node_id', index=0, number=2, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key), _descriptor.FieldDescriptor(name='node_path', full_name='third_party.py.keras.protobuf.SavedObject.node_path', index=1, number=3, type=9, cpp_type=9, label=1, has_default_value=False, default_value=b''.decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key), _descriptor.FieldDescriptor(name='identifier', full_name='third_party.py.keras.protobuf.SavedObject.identifier', index=2, number=4, type=9, cpp_type=9, label=1, has_default_value=False, default_value=b''.decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key), _descriptor.FieldDescriptor(name='metadata', full_name='third_party.py.keras.protobuf.SavedObject.metadata', index=3, number=5, type=9, cpp_type=9, label=1, has_default_value=False, default_value=b''.decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key), _descriptor.FieldDescriptor(name='version', full_name='third_party.py.keras.protobuf.SavedObject.version', index=4, number=6, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=178, serialized_end=331)
A:keras.protobuf.saved_metadata_pb2.SavedMetadata->google.protobuf.reflection.GeneratedProtocolMessageType('SavedMetadata', (_message.Message,), {'DESCRIPTOR': _SAVEDMETADATA, '__module__': 'keras.protobuf.saved_metadata_pb2'})
A:keras.protobuf.saved_metadata_pb2.SavedObject->google.protobuf.reflection.GeneratedProtocolMessageType('SavedObject', (_message.Message,), {'DESCRIPTOR': _SAVEDOBJECT, '__module__': 'keras.protobuf.saved_metadata_pb2'})


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/protobuf/projector_config_pb2.py----------------------------------------
A:keras.protobuf.projector_config_pb2._sym_db->google.protobuf.symbol_database.Default()
A:keras.protobuf.projector_config_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='keras/protobuf/projector_config.proto', package='third_party.py.keras.protobuf', syntax='proto3', serialized_options=None, create_key=_descriptor._internal_create_key, serialized_pb=b'\n%keras/protobuf/projector_config.proto\x12\x1dthird_party.py.keras.protobuf">\n\x0eSpriteMetadata\x12\x12\n\nimage_path\x18\x01 \x01(\t\x12\x18\n\x10single_image_dim\x18\x02 \x03(\r"\xbd\x01\n\rEmbeddingInfo\x12\x13\n\x0btensor_name\x18\x01 \x01(\t\x12\x15\n\rmetadata_path\x18\x02 \x01(\t\x12\x16\n\x0ebookmarks_path\x18\x03 \x01(\t\x12\x14\n\x0ctensor_shape\x18\x04 \x03(\r\x12=\n\x06sprite\x18\x05 \x01(\x0b2-.third_party.py.keras.protobuf.SpriteMetadata\x12\x13\n\x0btensor_path\x18\x06 \x01(\t"\x90\x01\n\x0fProjectorConfig\x12\x1d\n\x15model_checkpoint_path\x18\x01 \x01(\t\x12@\n\nembeddings\x18\x02 \x03(\x0b2,.third_party.py.keras.protobuf.EmbeddingInfo\x12\x1c\n\x14model_checkpoint_dir\x18\x03 \x01(\tb\x06proto3')
A:keras.protobuf.projector_config_pb2._SPRITEMETADATA->google.protobuf.descriptor.Descriptor(name='SpriteMetadata', full_name='third_party.py.keras.protobuf.SpriteMetadata', filename=None, file=DESCRIPTOR, containing_type=None, create_key=_descriptor._internal_create_key, fields=[_descriptor.FieldDescriptor(name='image_path', full_name='third_party.py.keras.protobuf.SpriteMetadata.image_path', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=b''.decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key), _descriptor.FieldDescriptor(name='single_image_dim', full_name='third_party.py.keras.protobuf.SpriteMetadata.single_image_dim', index=1, number=2, type=13, cpp_type=3, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=72, serialized_end=134)
A:keras.protobuf.projector_config_pb2._EMBEDDINGINFO->google.protobuf.descriptor.Descriptor(name='EmbeddingInfo', full_name='third_party.py.keras.protobuf.EmbeddingInfo', filename=None, file=DESCRIPTOR, containing_type=None, create_key=_descriptor._internal_create_key, fields=[_descriptor.FieldDescriptor(name='tensor_name', full_name='third_party.py.keras.protobuf.EmbeddingInfo.tensor_name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=b''.decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key), _descriptor.FieldDescriptor(name='metadata_path', full_name='third_party.py.keras.protobuf.EmbeddingInfo.metadata_path', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=b''.decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key), _descriptor.FieldDescriptor(name='bookmarks_path', full_name='third_party.py.keras.protobuf.EmbeddingInfo.bookmarks_path', index=2, number=3, type=9, cpp_type=9, label=1, has_default_value=False, default_value=b''.decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key), _descriptor.FieldDescriptor(name='tensor_shape', full_name='third_party.py.keras.protobuf.EmbeddingInfo.tensor_shape', index=3, number=4, type=13, cpp_type=3, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key), _descriptor.FieldDescriptor(name='sprite', full_name='third_party.py.keras.protobuf.EmbeddingInfo.sprite', index=4, number=5, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key), _descriptor.FieldDescriptor(name='tensor_path', full_name='third_party.py.keras.protobuf.EmbeddingInfo.tensor_path', index=5, number=6, type=9, cpp_type=9, label=1, has_default_value=False, default_value=b''.decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=137, serialized_end=326)
A:keras.protobuf.projector_config_pb2._PROJECTORCONFIG->google.protobuf.descriptor.Descriptor(name='ProjectorConfig', full_name='third_party.py.keras.protobuf.ProjectorConfig', filename=None, file=DESCRIPTOR, containing_type=None, create_key=_descriptor._internal_create_key, fields=[_descriptor.FieldDescriptor(name='model_checkpoint_path', full_name='third_party.py.keras.protobuf.ProjectorConfig.model_checkpoint_path', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=b''.decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key), _descriptor.FieldDescriptor(name='embeddings', full_name='third_party.py.keras.protobuf.ProjectorConfig.embeddings', index=1, number=2, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key), _descriptor.FieldDescriptor(name='model_checkpoint_dir', full_name='third_party.py.keras.protobuf.ProjectorConfig.model_checkpoint_dir', index=2, number=3, type=9, cpp_type=9, label=1, has_default_value=False, default_value=b''.decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=329, serialized_end=473)
A:keras.protobuf.projector_config_pb2.SpriteMetadata->google.protobuf.reflection.GeneratedProtocolMessageType('SpriteMetadata', (_message.Message,), {'DESCRIPTOR': _SPRITEMETADATA, '__module__': 'keras.protobuf.projector_config_pb2'})
A:keras.protobuf.projector_config_pb2.EmbeddingInfo->google.protobuf.reflection.GeneratedProtocolMessageType('EmbeddingInfo', (_message.Message,), {'DESCRIPTOR': _EMBEDDINGINFO, '__module__': 'keras.protobuf.projector_config_pb2'})
A:keras.protobuf.projector_config_pb2.ProjectorConfig->google.protobuf.reflection.GeneratedProtocolMessageType('ProjectorConfig', (_message.Message,), {'DESCRIPTOR': _PROJECTORCONFIG, '__module__': 'keras.protobuf.projector_config_pb2'})


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/protobuf/versions_pb2.py----------------------------------------
A:keras.protobuf.versions_pb2._sym_db->google.protobuf.symbol_database.Default()
A:keras.protobuf.versions_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='keras/protobuf/versions.proto', package='third_party.py.keras.protobuf', syntax='proto3', serialized_options=None, create_key=_descriptor._internal_create_key, serialized_pb=b'\n\x1dkeras/protobuf/versions.proto\x12\x1dthird_party.py.keras.protobuf"K\n\nVersionDef\x12\x10\n\x08producer\x18\x01 \x01(\x05\x12\x14\n\x0cmin_consumer\x18\x02 \x01(\x05\x12\x15\n\rbad_consumers\x18\x03 \x03(\x05b\x06proto3')
A:keras.protobuf.versions_pb2._VERSIONDEF->google.protobuf.descriptor.Descriptor(name='VersionDef', full_name='third_party.py.keras.protobuf.VersionDef', filename=None, file=DESCRIPTOR, containing_type=None, create_key=_descriptor._internal_create_key, fields=[_descriptor.FieldDescriptor(name='producer', full_name='third_party.py.keras.protobuf.VersionDef.producer', index=0, number=1, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key), _descriptor.FieldDescriptor(name='min_consumer', full_name='third_party.py.keras.protobuf.VersionDef.min_consumer', index=1, number=2, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key), _descriptor.FieldDescriptor(name='bad_consumers', full_name='third_party.py.keras.protobuf.VersionDef.bad_consumers', index=2, number=3, type=5, cpp_type=1, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR, create_key=_descriptor._internal_create_key)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=64, serialized_end=139)
A:keras.protobuf.versions_pb2.VersionDef->google.protobuf.reflection.GeneratedProtocolMessageType('VersionDef', (_message.Message,), {'DESCRIPTOR': _VERSIONDEF, '__module__': 'keras.protobuf.versions_pb2'})


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/protobuf/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/mixed_precision/device_compatibility_check.py----------------------------------------
A:keras.mixed_precision.device_compatibility_check.num->len(list(vals))
A:keras.mixed_precision.device_compatibility_check.name->details.get('device_name', 'Unknown GPU')
A:keras.mixed_precision.device_compatibility_check.cc->details.get('compute_capability')
A:keras.mixed_precision.device_compatibility_check.gpus->tensorflow.compat.v2.config.list_physical_devices('GPU')
keras.mixed_precision.device_compatibility_check._dedup_strings(device_strs)
keras.mixed_precision.device_compatibility_check._log_device_compatibility_check(policy_name,gpu_details_list)
keras.mixed_precision.device_compatibility_check.log_device_compatibility_check(policy_name)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/mixed_precision/test_util.py----------------------------------------
A:keras.mixed_precision.test_util.x->tensorflow.compat.v2.identity(x)
A:keras.mixed_precision.test_util.expected_tensor->tensorflow.compat.v2.convert_to_tensor(expected_gradient, dtype=dx.dtype, name='expected_gradient')
A:keras.mixed_precision.test_util.assert_op->tensorflow.compat.v2.compat.v1.assert_equal(dx, expected_tensor)
A:keras.mixed_precision.test_util.dx->tensorflow.compat.v2.identity(dx)
A:keras.mixed_precision.test_util.inputs_flattened->tensorflow.compat.v2.nest.flatten(inputs)
A:keras.mixed_precision.test_util.self._regularizer->keras.regularizers.deserialize(regularizer, custom_objects=globals())
A:keras.mixed_precision.test_util.self._activity_regularizer->keras.regularizers.deserialize(activity_regularizer, custom_objects=globals())
A:keras.mixed_precision.test_util.self.v->self.add_weight(self._var_name, (), initializer='ones', regularizer=self._regularizer)
A:keras.mixed_precision.test_util.config->super(MultiplyLayer, self).get_config()
A:keras.mixed_precision.test_util.config['regularizer']->keras.regularizers.serialize(self._regularizer)
A:keras.mixed_precision.test_util.config['activity_regularizer']->keras.regularizers.serialize(self._activity_regularizer)
keras.mixed_precision.test_util.AssertTypeLayer(self,assert_type=None,**kwargs)
keras.mixed_precision.test_util.AssertTypeLayer.__init__(self,assert_type=None,**kwargs)
keras.mixed_precision.test_util.AssertTypeLayer.assert_input_types(self,inputs)
keras.mixed_precision.test_util.IdentityRegularizer(self,x)
keras.mixed_precision.test_util.IdentityRegularizer.__call__(self,x)
keras.mixed_precision.test_util.IdentityRegularizer.get_config(self)
keras.mixed_precision.test_util.MultiplyLayer(self,regularizer=None,activity_regularizer=None,use_operator=False,var_name='v',**kwargs)
keras.mixed_precision.test_util.MultiplyLayer.__init__(self,regularizer=None,activity_regularizer=None,use_operator=False,var_name='v',**kwargs)
keras.mixed_precision.test_util.MultiplyLayer._multiply(self,x,y)
keras.mixed_precision.test_util.MultiplyLayer.build(self,_)
keras.mixed_precision.test_util.MultiplyLayer.call(self,inputs)
keras.mixed_precision.test_util.MultiplyLayer.get_config(self)
keras.mixed_precision.test_util.ReduceSumRegularizer(self,x)
keras.mixed_precision.test_util.ReduceSumRegularizer.__call__(self,x)
keras.mixed_precision.test_util.ReduceSumRegularizer.get_config(self)
keras.mixed_precision.test_util.create_identity_with_grad_check_fn(expected_gradient,expected_dtype=None)
keras.mixed_precision.test_util.create_identity_with_nan_gradients_fn(have_nan_gradients)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/mixed_precision/get_layer_policy.py----------------------------------------
keras.mixed_precision.get_layer_policy.get_layer_policy(layer)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/mixed_precision/policy.py----------------------------------------
A:keras.mixed_precision.policy.(self._compute_dtype, self._variable_dtype)->self._parse_name(name)
A:keras.mixed_precision.policy.config->config.copy().copy()
A:keras.mixed_precision.policy.self._loss_scale->keras.mixed_precision.loss_scale.get(loss_scale)
A:keras.mixed_precision.policy.config['loss_scale']->keras.mixed_precision.loss_scale.deserialize(config['loss_scale'], custom_objects=custom_objects)
A:keras.mixed_precision.policy.policy->Policy(policy)
keras.mixed_precision.policy.Policy(self,name)
keras.mixed_precision.policy.Policy.__init__(self,name)
keras.mixed_precision.policy.Policy.__repr__(self)
keras.mixed_precision.policy.Policy._parse_name(self,name)
keras.mixed_precision.policy.Policy.compute_dtype(self)
keras.mixed_precision.policy.Policy.from_config(cls,config,custom_objects=None)
keras.mixed_precision.policy.Policy.get_config(self)
keras.mixed_precision.policy.Policy.name(self)
keras.mixed_precision.policy.Policy.variable_dtype(self)
keras.mixed_precision.policy.PolicyV1(self,name,loss_scale='auto')
keras.mixed_precision.policy.PolicyV1.__init__(self,name,loss_scale='auto')
keras.mixed_precision.policy.PolicyV1.__repr__(self)
keras.mixed_precision.policy.PolicyV1.from_config(cls,config,custom_objects=None)
keras.mixed_precision.policy.PolicyV1.get_config(self)
keras.mixed_precision.policy.PolicyV1.loss_scale(self)
keras.mixed_precision.policy._check_if_mixed_precision_graph_rewrite_is_enabled(policy)
keras.mixed_precision.policy._is_convertible_to_dtype(dtype)
keras.mixed_precision.policy._policy_equivalent_to_dtype(policy)
keras.mixed_precision.policy.deserialize(config,custom_objects=None)
keras.mixed_precision.policy.global_policy()
keras.mixed_precision.policy.policy_scope(policy)
keras.mixed_precision.policy.serialize(policy)
keras.mixed_precision.policy.set_policy(policy)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/mixed_precision/loss_scale_optimizer.py----------------------------------------
A:keras.mixed_precision.loss_scale_optimizer.self._initial_loss_scale->float(initial_loss_scale)
A:keras.mixed_precision.loss_scale_optimizer.self._growth_steps->int(growth_steps)
A:keras.mixed_precision.loss_scale_optimizer.self._multiplier->float(multiplier)
A:keras.mixed_precision.loss_scale_optimizer.self._current_loss_scale->self._add_weight(name='current_loss_scale', dtype=tf.float32, initial_value=self._initial_loss_scale)
A:keras.mixed_precision.loss_scale_optimizer.self._counter->self._add_weight(name='good_steps', dtype=tf.int64, initial_value=0)
A:keras.mixed_precision.loss_scale_optimizer.variable->tensorflow.compat.v2.compat.v1.Variable(initial_value=initial_value, name=name, dtype=dtype, trainable=False, use_resource=True, synchronization=tf.VariableSynchronization.AUTO, aggregation=tf.compat.v1.VariableAggregation.NONE)
A:keras.mixed_precision.loss_scale_optimizer.graph->tensorflow.compat.v2.compat.v1.get_default_graph()
A:keras.mixed_precision.loss_scale_optimizer.unconditional->super(_DynamicLossScaleState, self)._lookup_dependency(name)
A:keras.mixed_precision.loss_scale_optimizer.grads->self._optimizer.get_gradients(loss, params)
A:keras.mixed_precision.loss_scale_optimizer.distribution->tensorflow.compat.v2.distribute.get_strategy()
A:keras.mixed_precision.loss_scale_optimizer.is_finite_per_replica->tensorflow.compat.v2.distribute.get_strategy().extended.call_for_each_replica(_is_all_finite, args=(grads,))
A:keras.mixed_precision.loss_scale_optimizer.is_finite->_is_all_finite(grads)
A:keras.mixed_precision.loss_scale_optimizer.new_loss_scale->tensorflow.compat.v2.maximum(self.current_loss_scale / self.multiplier, 1)
A:keras.mixed_precision.loss_scale_optimizer.update_op->tensorflow.compat.v2.compat.v1.cond(is_finite, update_if_finite_grads, update_if_not_finite_grads)
A:keras.mixed_precision.loss_scale_optimizer.self._loss_scale->float(initial_scale)
A:keras.mixed_precision.loss_scale_optimizer.loss_val->loss()
A:keras.mixed_precision.loss_scale_optimizer.loss->self.get_scaled_loss(loss)
A:keras.mixed_precision.loss_scale_optimizer.grads_and_vars->tuple(grads_and_vars)
A:keras.mixed_precision.loss_scale_optimizer.unscaled_grads->self.get_unscaled_gradients(grads)
A:keras.mixed_precision.loss_scale_optimizer.wrapped_vars->_UnwrapPreventer([v for (_, v) in grads_and_vars])
A:keras.mixed_precision.loss_scale_optimizer.(loss_scale_update_op, should_apply_grads)->_if_should_apply_grads(grads)
A:keras.mixed_precision.loss_scale_optimizer.maybe_apply_op->tensorflow.python.framework.smart_cond.smart_cond(should_apply_grads, apply_fn, do_not_apply_fn)
A:keras.mixed_precision.loss_scale_optimizer.serialized_optimizer->keras.optimizers.serialize(self._optimizer)
A:keras.mixed_precision.loss_scale_optimizer.config->config.copy().copy()
A:keras.mixed_precision.loss_scale_optimizer.loss_scale->keras.mixed_precision.loss_scale.deserialize(loss_scale)
A:keras.mixed_precision.loss_scale_optimizer.config['inner_optimizer']->keras.optimizers.deserialize(config['inner_optimizer'], custom_objects=custom_objects)
A:keras.mixed_precision.loss_scale_optimizer.strategy->tensorflow.compat.v2.distribute.get_strategy()
A:keras.mixed_precision.loss_scale_optimizer.result->set(super(LossScaleOptimizer, self).__dir__())
A:keras.mixed_precision.loss_scale_optimizer.config['loss_scale']->tensorflow.compat.v2.mixed_precision.experimental.FixedLossScale(config['initial_scale'])
A:keras.mixed_precision.loss_scale_optimizer.config['optimizer']->keras.optimizers.deserialize(config.pop('inner_optimizer'), custom_objects=custom_objects)
A:keras.mixed_precision.loss_scale_optimizer.scale->tensorflow.compat.v2.cast(scale, gradient.dtype)
keras.mixed_precision.loss_scale_optimizer.FakeOptimizerForRestoration(self,optimizer)
keras.mixed_precision.loss_scale_optimizer.FakeOptimizerForRestoration.__init__(self,optimizer)
keras.mixed_precision.loss_scale_optimizer.FakeOptimizerForRestoration._create_or_restore_slot_variable(self,slot_variable_position,slot_name,variable)
keras.mixed_precision.loss_scale_optimizer.FakeOptimizerForRestoration.get_slot_names(self)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer(self,inner_optimizer,dynamic=True,initial_scale=None,dynamic_growth_steps=None)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.__dir__(self)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.__getattribute__(self,name)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.__init__(self,inner_optimizer,dynamic=True,initial_scale=None,dynamic_growth_steps=None)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.__setattr__(self,name,value)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer._aggregate_gradients(self,grads_and_vars)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer._apply_gradients(self,grads,wrapped_vars,name)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer._compute_gradients(self,loss,var_list,grad_loss=None,tape=None)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer._create_all_weights(self,var_list)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer._create_or_restore_slot_variable(self,slot_variable_position,slot_name,variable)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer._raise_if_strategy_unsupported(self)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer._restore_slot_variable(self,slot_name,variable,slot_variable)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.add_slot(self,var,slot_name,initializer='zeros')
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.apply_gradients(self,grads_and_vars,name=None,experimental_aggregate_gradients=True)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.clipnorm(self)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.clipnorm(self,val)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.clipvalue(self)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.clipvalue(self,val)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.dynamic(self)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.dynamic_counter(self)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.dynamic_growth_steps(self)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.from_config(cls,config,custom_objects=None)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.get_config(self)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.get_gradients(self,loss,params)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.get_scaled_loss(self,loss)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.get_slot(self,var,slot_name)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.get_slot_names(self)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.get_unscaled_gradients(self,grads)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.get_weights(self)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.global_clipnorm(self)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.global_clipnorm(self,val)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.initial_scale(self)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.inner_optimizer(self)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.iterations(self)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.iterations(self,variable)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.learning_rate(self)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.learning_rate(self,value)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.loss_scale(self)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.lr(self)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.lr(self,value)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.set_weights(self,weights)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.variables(self)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizer.weights(self)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizerV1(self,optimizer,loss_scale)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizerV1.__init__(self,optimizer,loss_scale)
keras.mixed_precision.loss_scale_optimizer.LossScaleOptimizerV1.from_config(cls,config,custom_objects=None)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin(self,trackable_obj)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin.__init__(self,trackable_obj)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._add_variable_with_custom_getter(self,name,shape=None,dtype=tf.float32,initializer=None,getter=None,overwrite=False,**kwargs_for_getter)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._checkpoint_dependencies(self)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._deferred_dependencies(self)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._gather_saveables_for_checkpoint(self)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._handle_deferred_dependencies(self,name,trackable)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._list_extra_dependencies_for_serialization(self,serialization_cache)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._list_functions_for_serialization(self,serialization_cache)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._lookup_dependency(self,name)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._maybe_initialize_trackable(self)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._name_based_attribute_restore(self,checkpoint)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._name_based_restores(self)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._no_dependency(self,value)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._object_identifier(self)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._preload_simple_restoration(self,name)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._restore_from_checkpoint_position(self,checkpoint_position)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._setattr_tracking(self)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._setattr_tracking(self,value)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._single_restoration_from_checkpoint_position(self,checkpoint_position,visit_queue)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._track_trackable(self,trackable,name,overwrite=False)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._tracking_metadata(self)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._unconditional_checkpoint_dependencies(self)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._unconditional_dependency_names(self)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._update_uid(self)
keras.mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._update_uid(self,value)
keras.mixed_precision.loss_scale_optimizer._DynamicLossScaleState(self,initial_loss_scale,growth_steps,multiplier)
keras.mixed_precision.loss_scale_optimizer._DynamicLossScaleState.__init__(self,initial_loss_scale,growth_steps,multiplier)
keras.mixed_precision.loss_scale_optimizer._DynamicLossScaleState._add_weight(self,name,initial_value,dtype=None)
keras.mixed_precision.loss_scale_optimizer._DynamicLossScaleState._checkpoint_dependencies(self)
keras.mixed_precision.loss_scale_optimizer._DynamicLossScaleState._lookup_dependency(self,name)
keras.mixed_precision.loss_scale_optimizer._DynamicLossScaleState.counter(self)
keras.mixed_precision.loss_scale_optimizer._DynamicLossScaleState.current_loss_scale(self)
keras.mixed_precision.loss_scale_optimizer._DynamicLossScaleState.growth_steps(self)
keras.mixed_precision.loss_scale_optimizer._DynamicLossScaleState.initial_loss_scale(self)
keras.mixed_precision.loss_scale_optimizer._DynamicLossScaleState.multiplier(self)
keras.mixed_precision.loss_scale_optimizer._DynamicLossScaleState.update(self,grads)
keras.mixed_precision.loss_scale_optimizer._UnwrapPreventer(self,value)
keras.mixed_precision.loss_scale_optimizer._UnwrapPreventer.__init__(self,value)
keras.mixed_precision.loss_scale_optimizer._assign_if_finite(var,value)
keras.mixed_precision.loss_scale_optimizer._is_all_finite(grads)
keras.mixed_precision.loss_scale_optimizer._multiply_gradient(gradient,scale)
keras.mixed_precision.loss_scale_optimizer._op_in_graph_mode(tensor)
keras.mixed_precision.loss_scale_optimizer.strategy_supports_loss_scaling()


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/mixed_precision/autocast_variable.py----------------------------------------
A:keras.mixed_precision.autocast_variable._autocast_dtype->threading.local()
A:keras.mixed_precision.autocast_variable.autocast_dtype->getattr(_autocast_dtype, 'dtype', None)
A:keras.mixed_precision.autocast_variable.dtype->getattr(_autocast_dtype, 'dtype', None)
A:keras.mixed_precision.autocast_variable.val->tensorflow.compat.v2.convert_to_tensor(self._variable, dtype=self._variable.dtype, name=name)
A:keras.mixed_precision.autocast_variable.assign_op->update_fn(value, use_locking, name, False)
A:keras.mixed_precision.autocast_variable.var->create_autocast_variable(self._variable)
A:keras.mixed_precision.autocast_variable.assign_var->update_fn(value, use_locking, name, read_value)
A:keras.mixed_precision.autocast_variable.update_var->update_fn(*args, **kwargs)
A:keras.mixed_precision.autocast_variable.graph_element->self._variable._as_graph_element()
A:keras.mixed_precision.autocast_variable.(obj_map, resource_map)->self._variable._map_resources(save_options)
A:keras.mixed_precision.autocast_variable.self._prev_dtype->getattr(_autocast_dtype, 'dtype', None)
keras.mixed_precision.autocast_variable.AutoCastVariable(self,variable)
keras.mixed_precision.autocast_variable.AutoCastVariable.__abs__(self)
keras.mixed_precision.autocast_variable.AutoCastVariable.__add__(self,o)
keras.mixed_precision.autocast_variable.AutoCastVariable.__div__(self,o)
keras.mixed_precision.autocast_variable.AutoCastVariable.__floordiv__(self,o)
keras.mixed_precision.autocast_variable.AutoCastVariable.__ge__(self,o)
keras.mixed_precision.autocast_variable.AutoCastVariable.__getattr__(self,name)
keras.mixed_precision.autocast_variable.AutoCastVariable.__getitem__(self,o)
keras.mixed_precision.autocast_variable.AutoCastVariable.__gt__(self,o)
keras.mixed_precision.autocast_variable.AutoCastVariable.__init__(self,variable)
keras.mixed_precision.autocast_variable.AutoCastVariable.__le__(self,o)
keras.mixed_precision.autocast_variable.AutoCastVariable.__lt__(self,o)
keras.mixed_precision.autocast_variable.AutoCastVariable.__matmul__(self,o)
keras.mixed_precision.autocast_variable.AutoCastVariable.__mod__(self,o)
keras.mixed_precision.autocast_variable.AutoCastVariable.__mul__(self,o)
keras.mixed_precision.autocast_variable.AutoCastVariable.__neg__(self)
keras.mixed_precision.autocast_variable.AutoCastVariable.__pow__(self,o,modulo=None)
keras.mixed_precision.autocast_variable.AutoCastVariable.__radd__(self,o)
keras.mixed_precision.autocast_variable.AutoCastVariable.__rdiv__(self,o)
keras.mixed_precision.autocast_variable.AutoCastVariable.__repr__(self)
keras.mixed_precision.autocast_variable.AutoCastVariable.__rfloordiv__(self,o)
keras.mixed_precision.autocast_variable.AutoCastVariable.__rmatmul__(self,o)
keras.mixed_precision.autocast_variable.AutoCastVariable.__rmod__(self,o)
keras.mixed_precision.autocast_variable.AutoCastVariable.__rmul__(self,o)
keras.mixed_precision.autocast_variable.AutoCastVariable.__rpow__(self,o)
keras.mixed_precision.autocast_variable.AutoCastVariable.__rsub__(self,o)
keras.mixed_precision.autocast_variable.AutoCastVariable.__rtruediv__(self,o)
keras.mixed_precision.autocast_variable.AutoCastVariable.__sub__(self,o)
keras.mixed_precision.autocast_variable.AutoCastVariable.__truediv__(self,o)
keras.mixed_precision.autocast_variable.AutoCastVariable._apply_assign_update(self,update_fn,value,use_locking=None,name=None,read_value=True)
keras.mixed_precision.autocast_variable.AutoCastVariable._apply_update(self,update_fn,*args,**kwargs)
keras.mixed_precision.autocast_variable.AutoCastVariable._as_graph_element(self)
keras.mixed_precision.autocast_variable.AutoCastVariable._cast_dtype(self)
keras.mixed_precision.autocast_variable.AutoCastVariable._dense_var_to_tensor(self,dtype=None,name=None,as_ref=False)
keras.mixed_precision.autocast_variable.AutoCastVariable._gather_saveables_for_checkpoint(self)
keras.mixed_precision.autocast_variable.AutoCastVariable._handle_name(self)
keras.mixed_precision.autocast_variable.AutoCastVariable._handle_name(self,handle_name)
keras.mixed_precision.autocast_variable.AutoCastVariable._initializer_op(self)
keras.mixed_precision.autocast_variable.AutoCastVariable._initializer_op(self,initializer_op)
keras.mixed_precision.autocast_variable.AutoCastVariable._map_resources(self,save_options)
keras.mixed_precision.autocast_variable.AutoCastVariable._shared_name(self)
keras.mixed_precision.autocast_variable.AutoCastVariable._should_act_as_resource_variable(self)
keras.mixed_precision.autocast_variable.AutoCastVariable._should_cast(self)
keras.mixed_precision.autocast_variable.AutoCastVariable.aggregation(self)
keras.mixed_precision.autocast_variable.AutoCastVariable.assign(self,value,use_locking=None,name=None,read_value=True)
keras.mixed_precision.autocast_variable.AutoCastVariable.assign_add(self,delta,use_locking=None,name=None,read_value=True)
keras.mixed_precision.autocast_variable.AutoCastVariable.assign_sub(self,delta,use_locking=None,name=None,read_value=True)
keras.mixed_precision.autocast_variable.AutoCastVariable.batch_scatter_update(self,sparse_delta,use_locking=False,name=None)
keras.mixed_precision.autocast_variable.AutoCastVariable.constraint(self)
keras.mixed_precision.autocast_variable.AutoCastVariable.device(self)
keras.mixed_precision.autocast_variable.AutoCastVariable.dtype(self)
keras.mixed_precision.autocast_variable.AutoCastVariable.eval(self,session=None)
keras.mixed_precision.autocast_variable.AutoCastVariable.from_proto(self,variable_def,import_scope=None)
keras.mixed_precision.autocast_variable.AutoCastVariable.gather_nd(self,indices,name=None)
keras.mixed_precision.autocast_variable.AutoCastVariable.get_shape(self)
keras.mixed_precision.autocast_variable.AutoCastVariable.graph(self)
keras.mixed_precision.autocast_variable.AutoCastVariable.initial_value(self)
keras.mixed_precision.autocast_variable.AutoCastVariable.initialized_value(self)
keras.mixed_precision.autocast_variable.AutoCastVariable.initializer(self)
keras.mixed_precision.autocast_variable.AutoCastVariable.load(self,value,session=None)
keras.mixed_precision.autocast_variable.AutoCastVariable.name(self)
keras.mixed_precision.autocast_variable.AutoCastVariable.op(self)
keras.mixed_precision.autocast_variable.AutoCastVariable.read_value(self)
keras.mixed_precision.autocast_variable.AutoCastVariable.scatter_add(self,sparse_delta,use_locking=False,name=None)
keras.mixed_precision.autocast_variable.AutoCastVariable.scatter_div(self,sparse_delta,use_locking=False,name=None)
keras.mixed_precision.autocast_variable.AutoCastVariable.scatter_max(self,sparse_delta,use_locking=False,name=None)
keras.mixed_precision.autocast_variable.AutoCastVariable.scatter_min(self,sparse_delta,use_locking=False,name=None)
keras.mixed_precision.autocast_variable.AutoCastVariable.scatter_mul(self,sparse_delta,use_locking=False,name=None)
keras.mixed_precision.autocast_variable.AutoCastVariable.scatter_nd_add(self,indices,updates,name=None)
keras.mixed_precision.autocast_variable.AutoCastVariable.scatter_nd_sub(self,indices,updates,name=None)
keras.mixed_precision.autocast_variable.AutoCastVariable.scatter_nd_update(self,indices,updates,name=None)
keras.mixed_precision.autocast_variable.AutoCastVariable.scatter_sub(self,sparse_delta,use_locking=False,name=None)
keras.mixed_precision.autocast_variable.AutoCastVariable.scatter_update(self,sparse_delta,use_locking=False,name=None)
keras.mixed_precision.autocast_variable.AutoCastVariable.set_shape(self,shape)
keras.mixed_precision.autocast_variable.AutoCastVariable.shape(self)
keras.mixed_precision.autocast_variable.AutoCastVariable.sparse_read(self,indices,name=None)
keras.mixed_precision.autocast_variable.AutoCastVariable.synchronization(self)
keras.mixed_precision.autocast_variable.AutoCastVariable.to_proto(self,export_scope=None)
keras.mixed_precision.autocast_variable.AutoCastVariable.trainable(self)
keras.mixed_precision.autocast_variable.AutoCastVariable.true_dtype(self)
keras.mixed_precision.autocast_variable.AutoCastVariable.value(self)
keras.mixed_precision.autocast_variable.create_autocast_variable(variable)
keras.mixed_precision.autocast_variable.enable_auto_cast_variables(self,dtype)
keras.mixed_precision.autocast_variable.enable_auto_cast_variables.__enter__(self)
keras.mixed_precision.autocast_variable.enable_auto_cast_variables.__exit__(self,type_arg,value_arg,traceback_arg)
keras.mixed_precision.autocast_variable.enable_auto_cast_variables.__init__(self,dtype)
keras.mixed_precision.autocast_variable.numpy_text(tensor,is_repr=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/mixed_precision/loss_scale.py----------------------------------------
keras.mixed_precision.loss_scale.deserialize(config,custom_objects=None)
keras.mixed_precision.loss_scale.get(identifier)
keras.mixed_precision.loss_scale.serialize(loss_scale)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/mixed_precision/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/wrappers/scikit_learn.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/wrappers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/optimizer_v2/adadelta.py----------------------------------------
A:keras.optimizer_v2.adadelta.accum_grad->self.get_slot(var, 'accum_grad')
A:keras.optimizer_v2.adadelta.accum_var->self.get_slot(var, 'accum_var')
A:keras.optimizer_v2.adadelta.config->super(Adadelta, self).get_config()
keras.optimizer_v2.adadelta.Adadelta(self,learning_rate=0.001,rho=0.95,epsilon=1e-07,name='Adadelta',**kwargs)
keras.optimizer_v2.adadelta.Adadelta.__init__(self,learning_rate=0.001,rho=0.95,epsilon=1e-07,name='Adadelta',**kwargs)
keras.optimizer_v2.adadelta.Adadelta._create_slots(self,var_list)
keras.optimizer_v2.adadelta.Adadelta._prepare_local(self,var_device,var_dtype,apply_state)
keras.optimizer_v2.adadelta.Adadelta._resource_apply_dense(self,grad,var,apply_state=None)
keras.optimizer_v2.adadelta.Adadelta._resource_apply_sparse(self,grad,var,indices,apply_state=None)
keras.optimizer_v2.adadelta.Adadelta.get_config(self)
keras.optimizer_v2.adadelta.Adadelta.set_weights(self,weights)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/optimizer_v2/adamax.py----------------------------------------
A:keras.optimizer_v2.adamax.local_step->tensorflow.compat.v2.cast(self.iterations + 1, var_dtype)
A:keras.optimizer_v2.adamax.beta_1_t->tensorflow.compat.v2.identity(self._get_hyper('beta_1', var_dtype))
A:keras.optimizer_v2.adamax.beta_2_t->tensorflow.compat.v2.identity(self._get_hyper('beta_2', var_dtype))
A:keras.optimizer_v2.adamax.beta_1_power->tensorflow.compat.v2.pow(beta_1_t, local_step)
A:keras.optimizer_v2.adamax.m->self.get_slot(var, 'm')
A:keras.optimizer_v2.adamax.v->self.get_slot(var, 'v')
A:keras.optimizer_v2.adamax.m_slice->tensorflow.compat.v2.compat.v1.gather(m, indices, axis=coefficients['zero'])
A:keras.optimizer_v2.adamax.m_t->self._resource_scatter_update(m, indices, m_t_slice)
A:keras.optimizer_v2.adamax.v_slice->tensorflow.compat.v2.compat.v1.gather(v, indices, axis=coefficients['zero'])
A:keras.optimizer_v2.adamax.v_t_slice->tensorflow.compat.v2.maximum(v_slice * coefficients['beta_2_t'], tf.abs(grad))
A:keras.optimizer_v2.adamax.v_t->self._resource_scatter_update(v, indices, v_t_slice)
A:keras.optimizer_v2.adamax.var_update->self._resource_scatter_add(var, indices, var_slice)
A:keras.optimizer_v2.adamax.config->super(Adamax, self).get_config()
keras.optimizer_v2.adamax.Adamax(self,learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,name='Adamax',**kwargs)
keras.optimizer_v2.adamax.Adamax.__init__(self,learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,name='Adamax',**kwargs)
keras.optimizer_v2.adamax.Adamax._create_slots(self,var_list)
keras.optimizer_v2.adamax.Adamax._prepare_local(self,var_device,var_dtype,apply_state)
keras.optimizer_v2.adamax.Adamax._resource_apply_dense(self,grad,var,apply_state=None)
keras.optimizer_v2.adamax.Adamax._resource_apply_sparse(self,grad,var,indices,apply_state=None)
keras.optimizer_v2.adamax.Adamax.get_config(self)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/optimizer_v2/rmsprop.py----------------------------------------
A:keras.optimizer_v2.rmsprop.rho->tensorflow.compat.v2.identity(self._get_hyper('rho', var_dtype))
A:keras.optimizer_v2.rmsprop.rms->self.get_slot(var, 'rms')
A:keras.optimizer_v2.rmsprop.mom->self.get_slot(var, 'momentum')
A:keras.optimizer_v2.rmsprop.mg->self.get_slot(var, 'mg')
A:keras.optimizer_v2.rmsprop.rms_t->self._resource_scatter_add(rms, indices, rms_scaled_g_values)
A:keras.optimizer_v2.rmsprop.mg_t->self._resource_scatter_add(mg, indices, mg_scaled_g_values)
A:keras.optimizer_v2.rmsprop.rms_slice->tensorflow.compat.v2.compat.v1.gather(rms_t, indices)
A:keras.optimizer_v2.rmsprop.mg_slice->tensorflow.compat.v2.compat.v1.gather(mg_t, indices)
A:keras.optimizer_v2.rmsprop.var_update->self._resource_scatter_add(var, indices, coefficients['neg_lr_t'] * grad / (tf.sqrt(denom_slice) + coefficients['epsilon']))
A:keras.optimizer_v2.rmsprop.config->super(RMSprop, self).get_config()
keras.optimizer_v2.rmsprop.RMSprop(self,learning_rate=0.001,rho=0.9,momentum=0.0,epsilon=1e-07,centered=False,name='RMSprop',**kwargs)
keras.optimizer_v2.rmsprop.RMSprop.__init__(self,learning_rate=0.001,rho=0.9,momentum=0.0,epsilon=1e-07,centered=False,name='RMSprop',**kwargs)
keras.optimizer_v2.rmsprop.RMSprop._create_slots(self,var_list)
keras.optimizer_v2.rmsprop.RMSprop._prepare_local(self,var_device,var_dtype,apply_state)
keras.optimizer_v2.rmsprop.RMSprop._resource_apply_dense(self,grad,var,apply_state=None)
keras.optimizer_v2.rmsprop.RMSprop._resource_apply_sparse(self,grad,var,indices,apply_state=None)
keras.optimizer_v2.rmsprop.RMSprop.get_config(self)
keras.optimizer_v2.rmsprop.RMSprop.set_weights(self,weights)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/optimizer_v2/optimizer_v2.py----------------------------------------
A:keras.optimizer_v2.optimizer_v2.keras_optimizers_gauge->tensorflow.compat.v2.__internal__.monitoring.BoolGauge('/tensorflow/api/oss-keras/optimizers', 'keras optimizer usage', 'method')
A:keras.optimizer_v2.optimizer_v2._DEFAULT_VALID_DTYPES->frozenset([tf.float16, tf.bfloat16, tf.float32, tf.float64, tf.complex64, tf.complex128])
A:keras.optimizer_v2.optimizer_v2.(unique_indices, new_index_positions)->tensorflow.compat.v2.unique(indices)
A:keras.optimizer_v2.optimizer_v2.summed_values->tensorflow.compat.v2.math.unsorted_segment_sum(values, new_index_positions, tf.compat.v1.shape(unique_indices)[0])
A:keras.optimizer_v2.optimizer_v2.decay->kwargs.pop('decay', 0.0)
A:keras.optimizer_v2.optimizer_v2.self._distribution_strategy->tensorflow.compat.v2.distribute.get_strategy()
A:keras.optimizer_v2.optimizer_v2.self.clipnorm->kwargs.pop('clipnorm', None)
A:keras.optimizer_v2.optimizer_v2.self.global_clipnorm->kwargs.pop('global_clipnorm', None)
A:keras.optimizer_v2.optimizer_v2.self.clipvalue->kwargs.pop('clipvalue', None)
A:keras.optimizer_v2.optimizer_v2.self._clipnorm_fn->keras.optimizer_v2.utils.make_gradient_clipnorm_fn(self._clipnorm)
A:keras.optimizer_v2.optimizer_v2.self._global_clipnorm_fn->keras.optimizer_v2.utils.make_global_gradient_clipnorm_fn(self._global_clipnorm)
A:keras.optimizer_v2.optimizer_v2.self._clipvalue_fn->keras.optimizer_v2.utils.make_gradient_clipvalue_fn(self._clipvalue)
A:keras.optimizer_v2.optimizer_v2.grads->self.get_gradients(loss, params)
A:keras.optimizer_v2.optimizer_v2.grads_and_vars->list(zip(grads, params))
A:keras.optimizer_v2.optimizer_v2.loss->self._transform_loss(loss)
A:keras.optimizer_v2.optimizer_v2.var_list->tensorflow.compat.v2.nest.flatten(var_list)
A:keras.optimizer_v2.optimizer_v2.strategy->tensorflow.compat.v2.distribute.get_strategy()
A:keras.optimizer_v2.optimizer_v2.apply_state->self._prepare(var_list)
A:keras.optimizer_v2.optimizer_v2.update_op->self._resource_apply_dense(grad, var, **apply_kwargs)
A:keras.optimizer_v2.optimizer_v2.eagerly_outside_functions->tensorflow.compat.v2.compat.v1.executing_eagerly_outside_functions()
A:keras.optimizer_v2.optimizer_v2.any_symbolic->any((isinstance(i, tf.Operation) or tf_utils.is_symbolic_tensor(i) for i in update_ops))
A:keras.optimizer_v2.optimizer_v2.params->tensorflow.compat.v2.nest.flatten(params)
A:keras.optimizer_v2.optimizer_v2.value->value()
A:keras.optimizer_v2.optimizer_v2.result->set(super(OptimizerV2, self).__dir__())
A:keras.optimizer_v2.optimizer_v2.var_key->_var_key(var)
A:keras.optimizer_v2.optimizer_v2.slot_dict->self._slots.get(variable_key, {})
A:keras.optimizer_v2.optimizer_v2.weight->tensorflow.compat.v2.Variable(name='%s/%s' % (var._shared_name, slot_name), dtype=var.dtype, trainable=False, initial_value=initial_value)
A:keras.optimizer_v2.optimizer_v2.initializer->tensorflow.python.training.tracking.base.CheckpointInitialValueCallable(checkpoint_position=slot_variable_position)
A:keras.optimizer_v2.optimizer_v2.initial_value->functools.partial(initializer, shape=slot_shape, dtype=var.dtype)
A:keras.optimizer_v2.optimizer_v2.keys->set()
A:keras.optimizer_v2.optimizer_v2.lr_t->tensorflow.compat.v2.cast(lr_t(local_step), var_dtype)
A:keras.optimizer_v2.optimizer_v2.self._hyper[name]->self.add_weight(name, shape=[], trainable=False, initializer=value, aggregation=tf.compat.v1.VariableAggregation.ONLY_FIRST_REPLICA)
A:keras.optimizer_v2.optimizer_v2.self._iterations->self.add_weight('iter', shape=[], dtype=tf.int64, trainable=False, aggregation=tf.compat.v1.VariableAggregation.ONLY_FIRST_REPLICA)
A:keras.optimizer_v2.optimizer_v2.local_step->tensorflow.compat.v2.cast(self.iterations, var_dtype)
A:keras.optimizer_v2.optimizer_v2.decay_t->tensorflow.compat.v2.cast(self._initial_decay, var_dtype)
A:keras.optimizer_v2.optimizer_v2.config['learning_rate']->keras.optimizer_v2.learning_rate_schedule.deserialize(config['learning_rate'], custom_objects=custom_objects)
A:keras.optimizer_v2.optimizer_v2.param_values->keras.backend.batch_get_value(params)
A:keras.optimizer_v2.optimizer_v2.variable->self._add_variable_with_custom_getter(name=name, shape=shape, getter=base_layer_utils.make_variable, overwrite=True, initializer=initializer, dtype=dtype, trainable=trainable, use_resource=True, synchronization=synchronization, aggregation=aggregation)
A:keras.optimizer_v2.optimizer_v2.self._name->keras.backend.unique_object_name(generic_utils.to_snake_case(self.__class__.__name__), zero_based=zero_based)
A:keras.optimizer_v2.optimizer_v2.valid_dtypes->self._valid_dtypes()
A:keras.optimizer_v2.optimizer_v2.(summed_grad, unique_indices)->_deduplicate_indexed_slices(values=grad, indices=indices)
A:keras.optimizer_v2.optimizer_v2.variable_key->_var_key(variable)
A:keras.optimizer_v2.optimizer_v2.deferred_restorations->self._deferred_slot_restorations.get(slot_name, {}).pop(variable_key, [])
A:keras.optimizer_v2.optimizer_v2.slot_variable->self.add_slot(var=variable, initializer=initializer, slot_name=slot_name)
A:keras.optimizer_v2.optimizer_v2.var->var._distributed_container()._distributed_container()
A:keras.optimizer_v2.optimizer_v2.name->_var_key(var)
keras.optimizer_v2.optimizer_v2.NullContextmanager(self,*args,**kwargs)
keras.optimizer_v2.optimizer_v2.NullContextmanager.__enter__(self)
keras.optimizer_v2.optimizer_v2.NullContextmanager.__exit__(self,type_arg,value_arg,traceback_arg)
keras.optimizer_v2.optimizer_v2.NullContextmanager.__init__(self,*args,**kwargs)
keras.optimizer_v2.optimizer_v2.OptimizerV2(self,name,gradient_aggregator=None,gradient_transformers=None,**kwargs)
keras.optimizer_v2.optimizer_v2.OptimizerV2.__dir__(self)
keras.optimizer_v2.optimizer_v2.OptimizerV2.__getattribute__(self,name)
keras.optimizer_v2.optimizer_v2.OptimizerV2.__init__(self,name,gradient_aggregator=None,gradient_transformers=None,**kwargs)
keras.optimizer_v2.optimizer_v2.OptimizerV2.__setattr__(self,name,value)
keras.optimizer_v2.optimizer_v2.OptimizerV2._aggregate_gradients(self,grads_and_vars)
keras.optimizer_v2.optimizer_v2.OptimizerV2._assert_valid_dtypes(self,tensors)
keras.optimizer_v2.optimizer_v2.OptimizerV2._call_if_callable(self,param)
keras.optimizer_v2.optimizer_v2.OptimizerV2._compute_gradients(self,loss,var_list,grad_loss=None,tape=None)
keras.optimizer_v2.optimizer_v2.OptimizerV2._create_all_weights(self,var_list)
keras.optimizer_v2.optimizer_v2.OptimizerV2._create_hypers(self)
keras.optimizer_v2.optimizer_v2.OptimizerV2._create_or_restore_slot_variable(self,slot_variable_position,slot_name,variable)
keras.optimizer_v2.optimizer_v2.OptimizerV2._create_slots(self,var_list)
keras.optimizer_v2.optimizer_v2.OptimizerV2._decayed_lr(self,var_dtype)
keras.optimizer_v2.optimizer_v2.OptimizerV2._dense_apply_args(self)
keras.optimizer_v2.optimizer_v2.OptimizerV2._distributed_apply(self,distribution,grads_and_vars,name,apply_state)
keras.optimizer_v2.optimizer_v2.OptimizerV2._distribution_strategy_scope(self)
keras.optimizer_v2.optimizer_v2.OptimizerV2._fallback_apply_state(self,var_device,var_dtype)
keras.optimizer_v2.optimizer_v2.OptimizerV2._get_gradients(self,tape,loss,var_list,grad_loss=None)
keras.optimizer_v2.optimizer_v2.OptimizerV2._get_hyper(self,name,dtype=None)
keras.optimizer_v2.optimizer_v2.OptimizerV2._init_set_name(self,name,zero_based=True)
keras.optimizer_v2.optimizer_v2.OptimizerV2._prepare(self,var_list)
keras.optimizer_v2.optimizer_v2.OptimizerV2._prepare_local(self,var_device,var_dtype,apply_state)
keras.optimizer_v2.optimizer_v2.OptimizerV2._resource_apply_dense(self,grad,handle,apply_state)
keras.optimizer_v2.optimizer_v2.OptimizerV2._resource_apply_sparse(self,grad,handle,indices,apply_state)
keras.optimizer_v2.optimizer_v2.OptimizerV2._resource_apply_sparse_duplicate_indices(self,grad,handle,indices,**kwargs)
keras.optimizer_v2.optimizer_v2.OptimizerV2._resource_scatter_add(self,x,i,v)
keras.optimizer_v2.optimizer_v2.OptimizerV2._resource_scatter_update(self,x,i,v)
keras.optimizer_v2.optimizer_v2.OptimizerV2._restore_slot_variable(self,slot_name,variable,slot_variable)
keras.optimizer_v2.optimizer_v2.OptimizerV2._serialize_hyperparameter(self,hyperparameter_name)
keras.optimizer_v2.optimizer_v2.OptimizerV2._set_hyper(self,name,value)
keras.optimizer_v2.optimizer_v2.OptimizerV2._sparse_apply_args(self)
keras.optimizer_v2.optimizer_v2.OptimizerV2._transform_gradients(self,grads_and_vars)
keras.optimizer_v2.optimizer_v2.OptimizerV2._transform_loss(self,loss)
keras.optimizer_v2.optimizer_v2.OptimizerV2._transform_unaggregated_gradients(self,grads_and_vars)
keras.optimizer_v2.optimizer_v2.OptimizerV2._valid_dtypes(self)
keras.optimizer_v2.optimizer_v2.OptimizerV2.add_slot(self,var,slot_name,initializer='zeros',shape=None)
keras.optimizer_v2.optimizer_v2.OptimizerV2.add_weight(self,name,shape,dtype=None,initializer='zeros',trainable=None,synchronization=tf.VariableSynchronization.AUTO,aggregation=tf.compat.v1.VariableAggregation.NONE)
keras.optimizer_v2.optimizer_v2.OptimizerV2.apply_gradients(self,grads_and_vars,name=None,experimental_aggregate_gradients=True)
keras.optimizer_v2.optimizer_v2.OptimizerV2.clipnorm(self)
keras.optimizer_v2.optimizer_v2.OptimizerV2.clipnorm(self,val)
keras.optimizer_v2.optimizer_v2.OptimizerV2.clipvalue(self)
keras.optimizer_v2.optimizer_v2.OptimizerV2.clipvalue(self,val)
keras.optimizer_v2.optimizer_v2.OptimizerV2.from_config(cls,config,custom_objects=None)
keras.optimizer_v2.optimizer_v2.OptimizerV2.get_config(self)
keras.optimizer_v2.optimizer_v2.OptimizerV2.get_gradients(self,loss,params)
keras.optimizer_v2.optimizer_v2.OptimizerV2.get_slot(self,var,slot_name)
keras.optimizer_v2.optimizer_v2.OptimizerV2.get_slot_names(self)
keras.optimizer_v2.optimizer_v2.OptimizerV2.get_updates(self,loss,params)
keras.optimizer_v2.optimizer_v2.OptimizerV2.get_weights(self)
keras.optimizer_v2.optimizer_v2.OptimizerV2.global_clipnorm(self)
keras.optimizer_v2.optimizer_v2.OptimizerV2.global_clipnorm(self,val)
keras.optimizer_v2.optimizer_v2.OptimizerV2.iterations(self)
keras.optimizer_v2.optimizer_v2.OptimizerV2.iterations(self,variable)
keras.optimizer_v2.optimizer_v2.OptimizerV2.minimize(self,loss,var_list,grad_loss=None,name=None,tape=None)
keras.optimizer_v2.optimizer_v2.OptimizerV2.set_weights(self,weights)
keras.optimizer_v2.optimizer_v2.OptimizerV2.variables(self)
keras.optimizer_v2.optimizer_v2.OptimizerV2.weights(self)
keras.optimizer_v2.optimizer_v2.RestoredOptimizer(self)
keras.optimizer_v2.optimizer_v2.RestoredOptimizer.__init__(self)
keras.optimizer_v2.optimizer_v2.RestoredOptimizer.get_config(self)
keras.optimizer_v2.optimizer_v2._deduplicate_indexed_slices(values,indices)
keras.optimizer_v2.optimizer_v2._get_slot_key_from_var(var,slot_name)
keras.optimizer_v2.optimizer_v2._var_key(var)
keras.optimizer_v2.optimizer_v2.name_scope_only_in_function_or_graph(name)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/optimizer_v2/nadam.py----------------------------------------
A:keras.optimizer_v2.nadam.kwargs['decay']->kwargs.pop('schedule_decay', 0.004)
A:keras.optimizer_v2.nadam.learning_rate->kwargs.get('lr', learning_rate)
A:keras.optimizer_v2.nadam.self._m_cache->self.add_weight('momentum_cache', shape=[], dtype=var_dtype, initializer='ones', trainable=False, aggregation=tf.compat.v1.VariableAggregation.ONLY_FIRST_REPLICA)
A:keras.optimizer_v2.nadam.lr_t->tensorflow.compat.v2.identity(self._get_hyper('learning_rate', var_dtype))
A:keras.optimizer_v2.nadam.beta_1_t->tensorflow.compat.v2.identity(self._get_hyper('beta_1', var_dtype))
A:keras.optimizer_v2.nadam.beta_2_t->tensorflow.compat.v2.identity(self._get_hyper('beta_2', var_dtype))
A:keras.optimizer_v2.nadam.local_step->tensorflow.compat.v2.cast(self.iterations + 1, var_dtype)
A:keras.optimizer_v2.nadam.next_step->tensorflow.compat.v2.cast(self.iterations + 2, var_dtype)
A:keras.optimizer_v2.nadam.decay_base->tensorflow.compat.v2.cast(0.96, var_dtype)
A:keras.optimizer_v2.nadam.m_schedule_new->tensorflow.compat.v2.identity(tf.compat.v1.assign(self._m_cache, m_schedule_new, use_locking=self._use_locking))
A:keras.optimizer_v2.nadam.apply_state[var_device, var_dtype]->dict(lr_t=lr_t, neg_lr_t=-lr_t, epsilon=tf.convert_to_tensor(self.epsilon, var_dtype), beta_1_t=beta_1_t, beta_2_t=beta_2_t, m_t=m_t, m_t_1=m_t_1, one_minus_beta_1_t=1 - beta_1_t, one_minus_beta_2_t=1 - beta_2_t, one_minus_m_t=1.0 - m_t, one_minus_m_schedule_new=1.0 - m_schedule_new, one_minus_m_schedule_next=1.0 - m_schedule_next, v_t_prime_denominator=1.0 - tf.pow(beta_2_t, local_step))
A:keras.optimizer_v2.nadam.self._m_cache_read->tensorflow.compat.v2.identity(self._m_cache)
A:keras.optimizer_v2.nadam.m->self.get_slot(var, 'm')
A:keras.optimizer_v2.nadam.v->self.get_slot(var, 'v')
A:keras.optimizer_v2.nadam.m_t->self._resource_scatter_add(m, indices, m_scaled_g_values)
A:keras.optimizer_v2.nadam.v_t->self._resource_scatter_add(v, indices, v_scaled_g_values)
A:keras.optimizer_v2.nadam.m_t_slice->tensorflow.compat.v2.compat.v1.gather(m_t, indices)
A:keras.optimizer_v2.nadam.v_t_slice->tensorflow.compat.v2.compat.v1.gather(v_t, indices)
A:keras.optimizer_v2.nadam.var_update->self._resource_scatter_add(var, indices, coefficients['neg_lr_t'] * m_t_bar / v_prime_sqrt_plus_eps)
A:keras.optimizer_v2.nadam.config->super(Nadam, self).get_config()
keras.optimizer_v2.nadam.Nadam(self,learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,name='Nadam',**kwargs)
keras.optimizer_v2.nadam.Nadam.__init__(self,learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,name='Nadam',**kwargs)
keras.optimizer_v2.nadam.Nadam._create_slots(self,var_list)
keras.optimizer_v2.nadam.Nadam._prepare(self,var_list)
keras.optimizer_v2.nadam.Nadam._prepare_local(self,var_device,var_dtype,apply_state)
keras.optimizer_v2.nadam.Nadam._resource_apply_dense(self,grad,var,apply_state=None)
keras.optimizer_v2.nadam.Nadam._resource_apply_sparse(self,grad,var,indices,apply_state=None)
keras.optimizer_v2.nadam.Nadam.get_config(self)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/optimizer_v2/utils.py----------------------------------------
A:keras.optimizer_v2.utils.grads_and_vars->tuple(grads_and_vars)
A:keras.optimizer_v2.utils.filtered_grads_and_vars->filter_empty_gradients(grads_and_vars)
A:keras.optimizer_v2.utils.reduced->tensorflow.compat.v2.distribute.get_replica_context().merge_call(_all_reduce_sum_fn, args=(filtered_grads_and_vars,))
A:keras.optimizer_v2.utils.filtered->tuple(filtered)
A:keras.optimizer_v2.utils.(grads, variables)->zip(*grads_and_vars)
A:keras.optimizer_v2.utils.(clipped_grads, _)->tensorflow.compat.v2.clip_by_global_norm(grads, clipnorm)
A:keras.optimizer_v2.utils.clipped_grads_and_vars->list(zip(clipped_grads, variables))
A:keras.optimizer_v2.utils.strategy->tensorflow.compat.v2.distribute.get_strategy()
keras.optimizer_v2.utils._all_reduce_sum_fn(distribution,grads_and_vars)
keras.optimizer_v2.utils.all_reduce_sum_gradients(grads_and_vars)
keras.optimizer_v2.utils.filter_empty_gradients(grads_and_vars)
keras.optimizer_v2.utils.make_global_gradient_clipnorm_fn(clipnorm)
keras.optimizer_v2.utils.make_gradient_clipnorm_fn(clipnorm)
keras.optimizer_v2.utils.make_gradient_clipvalue_fn(clipvalue)
keras.optimizer_v2.utils.strategy_supports_no_merge_call()


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/optimizer_v2/adagrad.py----------------------------------------
A:keras.optimizer_v2.adagrad.epsilon->keras.backend_config.epsilon()
A:keras.optimizer_v2.adagrad.init->tensorflow.compat.v2.compat.v1.constant_initializer(self._initial_accumulator_value, dtype=dtype)
A:keras.optimizer_v2.adagrad.config['learning_rate']->super(Adagrad, self).get_config().pop('lr')
A:keras.optimizer_v2.adagrad.acc->self.get_slot(var, 'accumulator')
A:keras.optimizer_v2.adagrad.config->super(Adagrad, self).get_config()
keras.optimizer_v2.adagrad.Adagrad(self,learning_rate=0.001,initial_accumulator_value=0.1,epsilon=1e-07,name='Adagrad',**kwargs)
keras.optimizer_v2.adagrad.Adagrad.__init__(self,learning_rate=0.001,initial_accumulator_value=0.1,epsilon=1e-07,name='Adagrad',**kwargs)
keras.optimizer_v2.adagrad.Adagrad._create_slots(self,var_list)
keras.optimizer_v2.adagrad.Adagrad._prepare_local(self,var_device,var_dtype,apply_state)
keras.optimizer_v2.adagrad.Adagrad._resource_apply_dense(self,grad,var,apply_state=None)
keras.optimizer_v2.adagrad.Adagrad._resource_apply_sparse(self,grad,var,indices,apply_state=None)
keras.optimizer_v2.adagrad.Adagrad.from_config(cls,config,custom_objects=None)
keras.optimizer_v2.adagrad.Adagrad.get_config(self)
keras.optimizer_v2.adagrad.Adagrad.set_weights(self,weights)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/optimizer_v2/gradient_descent.py----------------------------------------
A:keras.optimizer_v2.gradient_descent.apply_state[var_device, var_dtype]['momentum']->tensorflow.compat.v2.identity(self._get_hyper('momentum', var_dtype))
A:keras.optimizer_v2.gradient_descent.momentum_var->self.get_slot(var, 'momentum')
A:keras.optimizer_v2.gradient_descent.config->super(SGD, self).get_config()
keras.optimizer_v2.gradient_descent.SGD(self,learning_rate=0.01,momentum=0.0,nesterov=False,name='SGD',**kwargs)
keras.optimizer_v2.gradient_descent.SGD.__init__(self,learning_rate=0.01,momentum=0.0,nesterov=False,name='SGD',**kwargs)
keras.optimizer_v2.gradient_descent.SGD._create_slots(self,var_list)
keras.optimizer_v2.gradient_descent.SGD._prepare_local(self,var_device,var_dtype,apply_state)
keras.optimizer_v2.gradient_descent.SGD._resource_apply_dense(self,grad,var,apply_state=None)
keras.optimizer_v2.gradient_descent.SGD._resource_apply_sparse(self,grad,var,indices,apply_state=None)
keras.optimizer_v2.gradient_descent.SGD._resource_apply_sparse_duplicate_indices(self,grad,var,indices,**kwargs)
keras.optimizer_v2.gradient_descent.SGD.get_config(self)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/optimizer_v2/learning_rate_schedule.py----------------------------------------
A:keras.optimizer_v2.learning_rate_schedule.initial_learning_rate->tensorflow.compat.v2.convert_to_tensor(self.initial_learning_rate, name='initial_learning_rate')
A:keras.optimizer_v2.learning_rate_schedule.decay_steps->tensorflow.compat.v2.cast(self.decay_steps, dtype)
A:keras.optimizer_v2.learning_rate_schedule.decay_rate->tensorflow.compat.v2.cast(self.decay_rate, dtype)
A:keras.optimizer_v2.learning_rate_schedule.global_step_recomp->tensorflow.compat.v2.minimum(global_step_recomp, decay_steps)
A:keras.optimizer_v2.learning_rate_schedule.p->tensorflow.compat.v2.floor(p)
A:keras.optimizer_v2.learning_rate_schedule.boundaries->tensorflow.compat.v2.nest.map_structure(tf.convert_to_tensor, tf.nest.flatten(self.boundaries))
A:keras.optimizer_v2.learning_rate_schedule.values->tensorflow.compat.v2.nest.map_structure(tf.convert_to_tensor, tf.nest.flatten(self.values))
A:keras.optimizer_v2.learning_rate_schedule.x_recomp->tensorflow.compat.v2.convert_to_tensor(step)
A:keras.optimizer_v2.learning_rate_schedule.b->tensorflow.compat.v2.cast(b, x_recomp.dtype.base_dtype)
A:keras.optimizer_v2.learning_rate_schedule.end_learning_rate->tensorflow.compat.v2.cast(self.end_learning_rate, dtype)
A:keras.optimizer_v2.learning_rate_schedule.power->tensorflow.compat.v2.cast(self.power, dtype)
A:keras.optimizer_v2.learning_rate_schedule.decay_steps_recomp->tensorflow.compat.v2.multiply(decay_steps_recomp, multiplier)
A:keras.optimizer_v2.learning_rate_schedule.multiplier->tensorflow.compat.v2.compat.v1.cond(tf.equal(global_step_recomp, 0), lambda : 1.0, lambda : tf.math.ceil(global_step_recomp / self.decay_steps))
A:keras.optimizer_v2.learning_rate_schedule.const->tensorflow.compat.v2.cast(tf.constant(1), dtype)
A:keras.optimizer_v2.learning_rate_schedule.denom->tensorflow.compat.v2.add(const, tf.multiply(decay_rate, p))
A:keras.optimizer_v2.learning_rate_schedule.first_decay_steps->tensorflow.compat.v2.cast(self.first_decay_steps, dtype)
A:keras.optimizer_v2.learning_rate_schedule.alpha->tensorflow.compat.v2.cast(self.alpha, dtype)
A:keras.optimizer_v2.learning_rate_schedule.t_mul->tensorflow.compat.v2.cast(self._t_mul, dtype)
A:keras.optimizer_v2.learning_rate_schedule.m_mul->tensorflow.compat.v2.cast(self._m_mul, dtype)
A:keras.optimizer_v2.learning_rate_schedule.i_restart->tensorflow.compat.v2.floor(completed_fraction)
A:keras.optimizer_v2.learning_rate_schedule.(i_restart, completed_fraction)->tensorflow.compat.v2.compat.v1.cond(tf.equal(t_mul, 1.0), lambda : compute_step(completed_fraction, geometric=False), lambda : compute_step(completed_fraction, geometric=True))
A:keras.optimizer_v2.learning_rate_schedule.num_periods->tensorflow.compat.v2.cast(self.num_periods, dtype)
A:keras.optimizer_v2.learning_rate_schedule.beta->tensorflow.compat.v2.cast(self.beta, dtype)
A:keras.optimizer_v2.learning_rate_schedule.initial_variance->tensorflow.compat.v2.cast(self.initial_variance, dtype)
A:keras.optimizer_v2.learning_rate_schedule.variance_decay->tensorflow.compat.v2.cast(self.variance_decay, dtype)
A:keras.optimizer_v2.learning_rate_schedule.std->tensorflow.compat.v2.sqrt(variance)
keras.optimizer_v2.learning_rate_schedule.CosineDecay(self,initial_learning_rate,decay_steps,alpha=0.0,name=None)
keras.optimizer_v2.learning_rate_schedule.CosineDecay.__init__(self,initial_learning_rate,decay_steps,alpha=0.0,name=None)
keras.optimizer_v2.learning_rate_schedule.CosineDecay.get_config(self)
keras.optimizer_v2.learning_rate_schedule.CosineDecayRestarts(self,initial_learning_rate,first_decay_steps,t_mul=2.0,m_mul=1.0,alpha=0.0,name=None)
keras.optimizer_v2.learning_rate_schedule.CosineDecayRestarts.__init__(self,initial_learning_rate,first_decay_steps,t_mul=2.0,m_mul=1.0,alpha=0.0,name=None)
keras.optimizer_v2.learning_rate_schedule.CosineDecayRestarts.get_config(self)
keras.optimizer_v2.learning_rate_schedule.ExponentialDecay(self,initial_learning_rate,decay_steps,decay_rate,staircase=False,name=None)
keras.optimizer_v2.learning_rate_schedule.ExponentialDecay.__init__(self,initial_learning_rate,decay_steps,decay_rate,staircase=False,name=None)
keras.optimizer_v2.learning_rate_schedule.ExponentialDecay.get_config(self)
keras.optimizer_v2.learning_rate_schedule.InverseTimeDecay(self,initial_learning_rate,decay_steps,decay_rate,staircase=False,name=None)
keras.optimizer_v2.learning_rate_schedule.InverseTimeDecay.__init__(self,initial_learning_rate,decay_steps,decay_rate,staircase=False,name=None)
keras.optimizer_v2.learning_rate_schedule.InverseTimeDecay.get_config(self)
keras.optimizer_v2.learning_rate_schedule.LearningRateSchedule(self,step)
keras.optimizer_v2.learning_rate_schedule.LearningRateSchedule.__call__(self,step)
keras.optimizer_v2.learning_rate_schedule.LearningRateSchedule.from_config(cls,config)
keras.optimizer_v2.learning_rate_schedule.LearningRateSchedule.get_config(self)
keras.optimizer_v2.learning_rate_schedule.LinearCosineDecay(self,initial_learning_rate,decay_steps,num_periods=0.5,alpha=0.0,beta=0.001,name=None)
keras.optimizer_v2.learning_rate_schedule.LinearCosineDecay.__init__(self,initial_learning_rate,decay_steps,num_periods=0.5,alpha=0.0,beta=0.001,name=None)
keras.optimizer_v2.learning_rate_schedule.LinearCosineDecay.get_config(self)
keras.optimizer_v2.learning_rate_schedule.NoisyLinearCosineDecay(self,initial_learning_rate,decay_steps,initial_variance=1.0,variance_decay=0.55,num_periods=0.5,alpha=0.0,beta=0.001,name=None)
keras.optimizer_v2.learning_rate_schedule.NoisyLinearCosineDecay.__init__(self,initial_learning_rate,decay_steps,initial_variance=1.0,variance_decay=0.55,num_periods=0.5,alpha=0.0,beta=0.001,name=None)
keras.optimizer_v2.learning_rate_schedule.NoisyLinearCosineDecay.get_config(self)
keras.optimizer_v2.learning_rate_schedule.PiecewiseConstantDecay(self,boundaries,values,name=None)
keras.optimizer_v2.learning_rate_schedule.PiecewiseConstantDecay.__init__(self,boundaries,values,name=None)
keras.optimizer_v2.learning_rate_schedule.PiecewiseConstantDecay.get_config(self)
keras.optimizer_v2.learning_rate_schedule.PolynomialDecay(self,initial_learning_rate,decay_steps,end_learning_rate=0.0001,power=1.0,cycle=False,name=None)
keras.optimizer_v2.learning_rate_schedule.PolynomialDecay.__init__(self,initial_learning_rate,decay_steps,end_learning_rate=0.0001,power=1.0,cycle=False,name=None)
keras.optimizer_v2.learning_rate_schedule.PolynomialDecay.get_config(self)
keras.optimizer_v2.learning_rate_schedule.deserialize(config,custom_objects=None)
keras.optimizer_v2.learning_rate_schedule.serialize(learning_rate_schedule)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/optimizer_v2/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/optimizer_v2/ftrl.py----------------------------------------
A:keras.optimizer_v2.ftrl.init->tensorflow.compat.v2.compat.v1.constant_initializer(self._initial_accumulator_value, dtype=dtype)
A:keras.optimizer_v2.ftrl.accum->self.get_slot(var, 'accumulator')
A:keras.optimizer_v2.ftrl.linear->self.get_slot(var, 'linear')
A:keras.optimizer_v2.ftrl.config->super(Ftrl, self).get_config()
keras.optimizer_v2.ftrl.Ftrl(self,learning_rate=0.001,learning_rate_power=-0.5,initial_accumulator_value=0.1,l1_regularization_strength=0.0,l2_regularization_strength=0.0,name='Ftrl',l2_shrinkage_regularization_strength=0.0,beta=0.0,**kwargs)
keras.optimizer_v2.ftrl.Ftrl.__init__(self,learning_rate=0.001,learning_rate_power=-0.5,initial_accumulator_value=0.1,l1_regularization_strength=0.0,l2_regularization_strength=0.0,name='Ftrl',l2_shrinkage_regularization_strength=0.0,beta=0.0,**kwargs)
keras.optimizer_v2.ftrl.Ftrl._create_slots(self,var_list)
keras.optimizer_v2.ftrl.Ftrl._prepare_local(self,var_device,var_dtype,apply_state)
keras.optimizer_v2.ftrl.Ftrl._resource_apply_dense(self,grad,var,apply_state=None)
keras.optimizer_v2.ftrl.Ftrl._resource_apply_sparse(self,grad,var,indices,apply_state=None)
keras.optimizer_v2.ftrl.Ftrl.get_config(self)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/optimizer_v2/adam.py----------------------------------------
A:keras.optimizer_v2.adam.local_step->tensorflow.compat.v2.cast(self.iterations + 1, var_dtype)
A:keras.optimizer_v2.adam.beta_1_t->tensorflow.compat.v2.identity(self._get_hyper('beta_1', var_dtype))
A:keras.optimizer_v2.adam.beta_2_t->tensorflow.compat.v2.identity(self._get_hyper('beta_2', var_dtype))
A:keras.optimizer_v2.adam.beta_1_power->tensorflow.compat.v2.pow(beta_1_t, local_step)
A:keras.optimizer_v2.adam.beta_2_power->tensorflow.compat.v2.pow(beta_2_t, local_step)
A:keras.optimizer_v2.adam.num_vars->int((len(params) - 1) / 2)
A:keras.optimizer_v2.adam.m->self.get_slot(var, 'm')
A:keras.optimizer_v2.adam.v->self.get_slot(var, 'v')
A:keras.optimizer_v2.adam.vhat->self.get_slot(var, 'vhat')
A:keras.optimizer_v2.adam.m_t->self._resource_scatter_add(m, indices, m_scaled_g_values)
A:keras.optimizer_v2.adam.v_t->self._resource_scatter_add(v, indices, v_scaled_g_values)
A:keras.optimizer_v2.adam.v_sqrt->tensorflow.compat.v2.sqrt(v_t)
A:keras.optimizer_v2.adam.var_update->tensorflow.compat.v2.compat.v1.assign_sub(var, coefficients['lr'] * m_t / (v_hat_sqrt + coefficients['epsilon']), use_locking=self._use_locking)
A:keras.optimizer_v2.adam.v_hat->self.get_slot(var, 'vhat')
A:keras.optimizer_v2.adam.v_hat_t->tensorflow.compat.v2.compat.v1.assign(v_hat, v_hat_t, use_locking=self._use_locking)
A:keras.optimizer_v2.adam.v_hat_sqrt->tensorflow.compat.v2.sqrt(v_hat_t)
A:keras.optimizer_v2.adam.config->super(NonFusedAdam, self).get_config()
keras.optimizer_v2.adam.Adam(self,learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,amsgrad=False,name='Adam',**kwargs)
keras.optimizer_v2.adam.Adam.__init__(self,learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,amsgrad=False,name='Adam',**kwargs)
keras.optimizer_v2.adam.Adam._create_slots(self,var_list)
keras.optimizer_v2.adam.Adam._prepare_local(self,var_device,var_dtype,apply_state)
keras.optimizer_v2.adam.Adam._resource_apply_dense(self,grad,var,apply_state=None)
keras.optimizer_v2.adam.Adam._resource_apply_sparse(self,grad,var,indices,apply_state=None)
keras.optimizer_v2.adam.Adam.get_config(self)
keras.optimizer_v2.adam.Adam.set_weights(self,weights)
keras.optimizer_v2.adam.NonFusedAdam(self,learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,amsgrad=False,name='Adam',**kwargs)
keras.optimizer_v2.adam.NonFusedAdam.__init__(self,learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,amsgrad=False,name='Adam',**kwargs)
keras.optimizer_v2.adam.NonFusedAdam._create_slots(self,var_list)
keras.optimizer_v2.adam.NonFusedAdam._prepare_local(self,var_device,var_dtype,apply_state)
keras.optimizer_v2.adam.NonFusedAdam._resource_apply_dense(self,grad,var,apply_state=None)
keras.optimizer_v2.adam.NonFusedAdam._resource_apply_sparse(self,grad,var,indices,apply_state=None)
keras.optimizer_v2.adam.NonFusedAdam.get_config(self)
keras.optimizer_v2.adam.NonFusedAdam.set_weights(self,weights)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/optimizer_v2/legacy_learning_rate_decay.py----------------------------------------
A:keras.optimizer_v2.legacy_learning_rate_decay.decayed_lr->functools.partial(decayed_lr, global_step)
A:keras.optimizer_v2.legacy_learning_rate_decay.boundaries->tensorflow.compat.v2.nest.map_structure(tf.convert_to_tensor, tf.nest.flatten(boundaries))
A:keras.optimizer_v2.legacy_learning_rate_decay.values->tensorflow.compat.v2.nest.map_structure(tf.convert_to_tensor, tf.nest.flatten(values))
A:keras.optimizer_v2.legacy_learning_rate_decay.x_recomp->tensorflow.compat.v2.convert_to_tensor(x)
A:keras.optimizer_v2.legacy_learning_rate_decay.b->tensorflow.compat.v2.cast(b, x_recomp.dtype.base_dtype)
A:keras.optimizer_v2.legacy_learning_rate_decay.natural_exp_rate->tensorflow.compat.v2.exp(tf.negative(decay_rate))
keras.optimizer_v2.legacy_learning_rate_decay.cosine_decay(learning_rate,global_step,decay_steps,alpha=0.0,name=None)
keras.optimizer_v2.legacy_learning_rate_decay.cosine_decay_restarts(learning_rate,global_step,first_decay_steps,t_mul=2.0,m_mul=1.0,alpha=0.0,name=None)
keras.optimizer_v2.legacy_learning_rate_decay.exponential_decay(learning_rate,global_step,decay_steps,decay_rate,staircase=False,name=None)
keras.optimizer_v2.legacy_learning_rate_decay.inverse_time_decay(learning_rate,global_step,decay_steps,decay_rate,staircase=False,name=None)
keras.optimizer_v2.legacy_learning_rate_decay.linear_cosine_decay(learning_rate,global_step,decay_steps,num_periods=0.5,alpha=0.0,beta=0.001,name=None)
keras.optimizer_v2.legacy_learning_rate_decay.natural_exp_decay(learning_rate,global_step,decay_steps,decay_rate,staircase=False,name=None)
keras.optimizer_v2.legacy_learning_rate_decay.noisy_linear_cosine_decay(learning_rate,global_step,decay_steps,initial_variance=1.0,variance_decay=0.55,num_periods=0.5,alpha=0.0,beta=0.001,name=None)
keras.optimizer_v2.legacy_learning_rate_decay.piecewise_constant(x,boundaries,values,name=None)
keras.optimizer_v2.legacy_learning_rate_decay.polynomial_decay(learning_rate,global_step,decay_steps,end_learning_rate=0.0001,power=1.0,cycle=False,name=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/serialization.py----------------------------------------
A:keras.layers.serialization.LOCAL->threading.local()
A:keras.layers.serialization.LOCAL.GENERATED_WITH_V2->tensorflow.compat.v2.__internal__.tf2.enabled()
keras.layers.serialization.deserialize(config,custom_objects=None)
keras.layers.serialization.populate_deserializable_objects()
keras.layers.serialization.serialize(layer)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/local.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/advanced_activations.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/cudnn_recurrent.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/convolutional.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/convolutional_recurrent.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/rnn_cell_wrapper_v2.py----------------------------------------
A:keras.layers.rnn_cell_wrapper_v2.cell_call_spec->keras.utils.tf_inspect.getfullargspec(cell.call)
A:keras.layers.rnn_cell_wrapper_v2.base_config->super(_RNNCellWrapperV2, self).get_config()
A:keras.layers.rnn_cell_wrapper_v2.config->config.copy().copy()
A:keras.layers.rnn_cell_wrapper_v2.cell->deserialize_layer(config.pop('cell'), custom_objects=custom_objects)
keras.layers.rnn_cell_wrapper_v2.DeviceWrapper(self,*args,**kwargs)
keras.layers.rnn_cell_wrapper_v2.DeviceWrapper.__init__(self,*args,**kwargs)
keras.layers.rnn_cell_wrapper_v2.DropoutWrapper(self,*args,**kwargs)
keras.layers.rnn_cell_wrapper_v2.DropoutWrapper.__init__(self,*args,**kwargs)
keras.layers.rnn_cell_wrapper_v2.ResidualWrapper(self,*args,**kwargs)
keras.layers.rnn_cell_wrapper_v2.ResidualWrapper.__init__(self,*args,**kwargs)
keras.layers.rnn_cell_wrapper_v2._RNNCellWrapperV2(self,cell,*args,**kwargs)
keras.layers.rnn_cell_wrapper_v2._RNNCellWrapperV2.__init__(self,cell,*args,**kwargs)
keras.layers.rnn_cell_wrapper_v2._RNNCellWrapperV2.build(self,inputs_shape)
keras.layers.rnn_cell_wrapper_v2._RNNCellWrapperV2.call(self,inputs,state,**kwargs)
keras.layers.rnn_cell_wrapper_v2._RNNCellWrapperV2.from_config(cls,config,custom_objects=None)
keras.layers.rnn_cell_wrapper_v2._RNNCellWrapperV2.get_config(self)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/normalization_v2.py----------------------------------------
A:keras.layers.normalization_v2.replica_ctx->tensorflow.compat.v2.distribute.get_replica_context()
A:keras.layers.normalization_v2.local_sum->tensorflow.compat.v2.reduce_sum(y, axis=axes, keepdims=True)
A:keras.layers.normalization_v2.local_squared_sum->tensorflow.compat.v2.reduce_sum(tf.square(y), axis=axes, keepdims=True)
A:keras.layers.normalization_v2.batch_size->tensorflow.compat.v2.cast(tf.shape(y)[0], tf.float32)
A:keras.layers.normalization_v2.y_sum->tensorflow.compat.v2.distribute.get_replica_context().all_reduce(tf.distribute.ReduceOp.SUM, local_sum)
A:keras.layers.normalization_v2.y_squared_sum->tensorflow.compat.v2.distribute.get_replica_context().all_reduce(tf.distribute.ReduceOp.SUM, local_squared_sum)
A:keras.layers.normalization_v2.global_batch_size->tensorflow.compat.v2.distribute.get_replica_context().all_reduce(tf.distribute.ReduceOp.SUM, batch_size)
A:keras.layers.normalization_v2.multiplier->tensorflow.compat.v2.cast(tf.reduce_prod(axes_vals), tf.float32)
A:keras.layers.normalization_v2.mean->tensorflow.compat.v2.compat.v1.squeeze(mean, axes)
A:keras.layers.normalization_v2.variance->tensorflow.compat.v2.compat.v1.squeeze(variance, axes)
keras.layers.normalization_v2.BatchNormalization(self,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',moving_mean_initializer='zeros',moving_variance_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,**kwargs)
keras.layers.normalization_v2.BatchNormalization.__init__(self,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',moving_mean_initializer='zeros',moving_variance_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,**kwargs)
keras.layers.normalization_v2.SyncBatchNormalization(self,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',moving_mean_initializer='zeros',moving_variance_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,**kwargs)
keras.layers.normalization_v2.SyncBatchNormalization.__init__(self,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',moving_mean_initializer='zeros',moving_variance_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,**kwargs)
keras.layers.normalization_v2.SyncBatchNormalization._calculate_mean_and_var(self,x,axes,keep_dims)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/core.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/recurrent.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/einsum_dense.py----------------------------------------
A:keras.layers.einsum_dense.self.partial_output_shape->list(output_shape)
A:keras.layers.einsum_dense.self.activation->keras.activations.get(activation)
A:keras.layers.einsum_dense.self.kernel_initializer->keras.initializers.get(kernel_initializer)
A:keras.layers.einsum_dense.self.bias_initializer->keras.initializers.get(bias_initializer)
A:keras.layers.einsum_dense.self.kernel_regularizer->keras.regularizers.get(kernel_regularizer)
A:keras.layers.einsum_dense.self.bias_regularizer->keras.regularizers.get(bias_regularizer)
A:keras.layers.einsum_dense.self.kernel_constraint->keras.constraints.get(kernel_constraint)
A:keras.layers.einsum_dense.self.bias_constraint->keras.constraints.get(bias_constraint)
A:keras.layers.einsum_dense.input_shape->tensorflow.compat.v2.TensorShape(input_shape)
A:keras.layers.einsum_dense.shape_data->_analyze_einsum_string(self.equation, self.bias_axes, input_shape, self.partial_output_shape)
A:keras.layers.einsum_dense.self.kernel->self.add_weight('kernel', shape=kernel_shape, initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, constraint=self.kernel_constraint, dtype=self.dtype, trainable=True)
A:keras.layers.einsum_dense.self.bias->self.add_weight('bias', shape=bias_shape, initializer=self.bias_initializer, regularizer=self.bias_regularizer, constraint=self.bias_constraint, dtype=self.dtype, trainable=True)
A:keras.layers.einsum_dense.base_config->super(EinsumDense, self).get_config()
A:keras.layers.einsum_dense.ret->self.activation(ret)
A:keras.layers.einsum_dense.dot_replaced_string->re.sub('\\.\\.\\.', '0', equation)
A:keras.layers.einsum_dense.split_string->re.match('([a-zA-Z]{2,})0,([a-zA-Z]+)->([a-zA-Z]+)0', dot_replaced_string)
A:keras.layers.einsum_dense.input_spec->re.match('([a-zA-Z]{2,})0,([a-zA-Z]+)->([a-zA-Z]+)0', dot_replaced_string).group(1)
A:keras.layers.einsum_dense.weight_spec->re.match('([a-zA-Z]{2,})0,([a-zA-Z]+)->([a-zA-Z]+)0', dot_replaced_string).group(2)
A:keras.layers.einsum_dense.output_spec->re.match('([a-zA-Z]{2,})0,([a-zA-Z]+)->([a-zA-Z]+)0', dot_replaced_string).group(3)
A:keras.layers.einsum_dense.output_shape->list(output_shape)
A:keras.layers.einsum_dense.first_bias_location->min([output_spec.find(char) for char in bias_axes])
keras.layers.einsum_dense.EinsumDense(self,equation,output_shape,activation=None,bias_axes=None,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.einsum_dense.EinsumDense.__init__(self,equation,output_shape,activation=None,bias_axes=None,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.einsum_dense.EinsumDense.build(self,input_shape)
keras.layers.einsum_dense.EinsumDense.call(self,inputs)
keras.layers.einsum_dense.EinsumDense.compute_output_shape(self,_)
keras.layers.einsum_dense.EinsumDense.get_config(self)
keras.layers.einsum_dense._analyze_einsum_string(equation,bias_axes,input_shape,output_shape)
keras.layers.einsum_dense._analyze_split_string(split_string,bias_axes,input_shape,output_shape,left_elided=False)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/embeddings.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/noise.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/multi_head_attention.py----------------------------------------
A:keras.layers.multi_head_attention.batch_dims->tuple(np.delete(range(rank), attn_axes + (rank - 1,)))
A:keras.layers.multi_head_attention.product_notation->''.join([target_notation[i] for i in batch_dims] + [target_notation[i] for i in attn_axes] + [source_notation[i] for i in attn_axes])
A:keras.layers.multi_head_attention.attn_scores_rank->len(product_notation)
A:keras.layers.multi_head_attention.self._kernel_initializer->keras.initializers.get(kernel_initializer)
A:keras.layers.multi_head_attention.self._bias_initializer->keras.initializers.get(bias_initializer)
A:keras.layers.multi_head_attention.self._kernel_regularizer->keras.regularizers.get(kernel_regularizer)
A:keras.layers.multi_head_attention.self._bias_regularizer->keras.regularizers.get(bias_regularizer)
A:keras.layers.multi_head_attention.self._kernel_constraint->keras.constraints.get(kernel_constraint)
A:keras.layers.multi_head_attention.self._bias_constraint->keras.constraints.get(bias_constraint)
A:keras.layers.multi_head_attention.base_config->super(MultiHeadAttention, self).get_config()
A:keras.layers.multi_head_attention.query_shape->config.pop('query_shape')
A:keras.layers.multi_head_attention.key_shape->config.pop('key_shape')
A:keras.layers.multi_head_attention.value_shape->config.pop('value_shape')
A:keras.layers.multi_head_attention.layer->cls(**config)
A:keras.layers.multi_head_attention.self._query_shape->tensorflow.compat.v2.TensorShape(query)
A:keras.layers.multi_head_attention.self._value_shape->tensorflow.compat.v2.TensorShape(value)
A:keras.layers.multi_head_attention.self._key_shape->tensorflow.compat.v2.TensorShape(key)
A:keras.layers.multi_head_attention.common_kwargs->dict(kernel_initializer=self._kernel_initializer, bias_initializer=self._bias_initializer, kernel_regularizer=self._kernel_regularizer, bias_regularizer=self._bias_regularizer, activity_regularizer=self._activity_regularizer, kernel_constraint=self._kernel_constraint, bias_constraint=self._bias_constraint)
A:keras.layers.multi_head_attention.(einsum_equation, bias_axes, output_rank)->_build_proj_equation(free_dims, bound_dims=2, output_dims=len(output_shape))
A:keras.layers.multi_head_attention.self._query_dense->keras.layers.einsum_dense.EinsumDense(einsum_equation, output_shape=_get_output_shape(output_rank - 1, [self._num_heads, self._key_dim]), bias_axes=bias_axes if self._use_bias else None, name='query', **common_kwargs)
A:keras.layers.multi_head_attention.self._key_dense->keras.layers.einsum_dense.EinsumDense(einsum_equation, output_shape=_get_output_shape(output_rank - 1, [self._num_heads, self._key_dim]), bias_axes=bias_axes if self._use_bias else None, name='key', **common_kwargs)
A:keras.layers.multi_head_attention.self._value_dense->keras.layers.einsum_dense.EinsumDense(einsum_equation, output_shape=_get_output_shape(output_rank - 1, [self._num_heads, self._value_dim]), bias_axes=bias_axes if self._use_bias else None, name='value', **common_kwargs)
A:keras.layers.multi_head_attention.self._output_dense->self._make_output_dense(free_dims, common_kwargs, 'attention_output')
A:keras.layers.multi_head_attention.self._attention_axes->tuple(self._attention_axes)
A:keras.layers.multi_head_attention.(self._dot_product_equation, self._combine_equation, attn_scores_rank)->_build_attention_equation(rank, attn_axes=self._attention_axes)
A:keras.layers.multi_head_attention.norm_axes->tuple(range(attn_scores_rank - len(self._attention_axes), attn_scores_rank))
A:keras.layers.multi_head_attention.self._softmax->keras.layers.advanced_activations.Softmax(axis=norm_axes)
A:keras.layers.multi_head_attention.self._dropout_layer->keras.layers.core.Dropout(rate=self._dropout)
A:keras.layers.multi_head_attention.attention_mask->tensorflow.compat.v2.compat.v1.expand_dims(attention_mask, axis=mask_expansion_axes)
A:keras.layers.multi_head_attention.query->self._query_dense(query)
A:keras.layers.multi_head_attention.attention_scores->self._masked_softmax(attention_scores, attention_mask)
A:keras.layers.multi_head_attention.attention_scores_dropout->self._dropout_layer(attention_scores, training=training)
A:keras.layers.multi_head_attention.attention_output->self._output_dense(attention_output)
A:keras.layers.multi_head_attention.key->self._key_dense(key)
A:keras.layers.multi_head_attention.value->self._value_dense(value)
A:keras.layers.multi_head_attention.(attention_output, attention_scores)->self._compute_attention(query, key, value, attention_mask, training)
keras.layers.multi_head_attention.MultiHeadAttention(self,num_heads,key_dim,value_dim=None,dropout=0.0,use_bias=True,output_shape=None,attention_axes=None,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.multi_head_attention.MultiHeadAttention.__init__(self,num_heads,key_dim,value_dim=None,dropout=0.0,use_bias=True,output_shape=None,attention_axes=None,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.multi_head_attention.MultiHeadAttention._build_attention(self,rank)
keras.layers.multi_head_attention.MultiHeadAttention._build_from_signature(self,query,value,key=None)
keras.layers.multi_head_attention.MultiHeadAttention._compute_attention(self,query,key,value,attention_mask=None,training=None)
keras.layers.multi_head_attention.MultiHeadAttention._make_output_dense(self,free_dims,common_kwargs,name=None)
keras.layers.multi_head_attention.MultiHeadAttention._masked_softmax(self,attention_scores,attention_mask=None)
keras.layers.multi_head_attention.MultiHeadAttention.call(self,query,value,key=None,attention_mask=None,return_attention_scores=False,training=None)
keras.layers.multi_head_attention.MultiHeadAttention.from_config(cls,config)
keras.layers.multi_head_attention.MultiHeadAttention.get_config(self)
keras.layers.multi_head_attention._build_attention_equation(rank,attn_axes)
keras.layers.multi_head_attention._build_proj_equation(free_dims,bound_dims,output_dims)
keras.layers.multi_head_attention._get_output_shape(output_rank,known_last_dims)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/merge.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/wrappers.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/recurrent_v2.py----------------------------------------
A:keras.layers.recurrent_v2.self.defun_layer->tensorflow.compat.v2.__internal__.function.defun_with_attributes(layer_func, attributes=supportive_attributes, autograph=False)
A:keras.layers.recurrent_v2.new_wrapper->type(self)(self.time_major, self.go_backwards, self.layer_name)
A:keras.layers.recurrent_v2.self._return_runtime->kwargs.pop('return_runtime', False)
A:keras.layers.recurrent_v2.self._defun_wrapper->_DefunWrapper(time_major, go_backwards, 'lstm')
A:keras.layers.recurrent_v2.(inputs, row_lengths)->keras.backend.convert_inputs_if_ragged(inputs)
A:keras.layers.recurrent_v2.(inputs, initial_state, _)->self._process_inputs(inputs, initial_state, None)
A:keras.layers.recurrent_v2.input_shape->keras.backend.int_shape(inputs)
A:keras.layers.recurrent_v2.(last_output, outputs, states)->keras.backend.rnn(step, inputs, initial_state, constants=None, go_backwards=self.go_backwards, mask=mask, unroll=self.unroll, input_length=row_lengths if row_lengths is not None else timesteps, time_major=self.time_major, zero_output_for_mask=self.zero_output_for_mask)
A:keras.layers.recurrent_v2.runtime->_runtime(_RUNTIME_UNKNOWN)
A:keras.layers.recurrent_v2.(last_output, outputs, runtime, states)->self._defun_gru_call(inputs, initial_state, training, mask, row_lengths)
A:keras.layers.recurrent_v2.output->keras.backend.maybe_convert_to_ragged(is_ragged_input, outputs, row_lengths)
A:keras.layers.recurrent_v2.dropout_mask->self.get_dropout_mask_for_cell(inputs, training, count=4)
A:keras.layers.recurrent_v2.(last_output, outputs, new_h, runtime)->defun_standard_gru(**params)
A:keras.layers.recurrent_v2.normal_gru_kwargs->gpu_gru_kwargs.copy()
A:keras.layers.recurrent_v2.device_type->_get_context_device_type()
A:keras.layers.recurrent_v2.(input_bias, recurrent_bias)->tensorflow.compat.v2.unstack(bias)
A:keras.layers.recurrent_v2.matrix_x->keras.backend.bias_add(matrix_x, input_bias)
A:keras.layers.recurrent_v2.(x_z, x_r, x_h)->tensorflow.compat.v2.split(matrix_x, 3, axis=1)
A:keras.layers.recurrent_v2.matrix_inner->keras.backend.bias_add(matrix_inner, recurrent_bias)
A:keras.layers.recurrent_v2.(recurrent_z, recurrent_r, recurrent_h)->tensorflow.compat.v2.split(matrix_inner, 3, axis=1)
A:keras.layers.recurrent_v2.z->keras.backend.bias_add(z, bias)
A:keras.layers.recurrent_v2.r->tensorflow.compat.v2.sigmoid(x_r + recurrent_r)
A:keras.layers.recurrent_v2.hh->tensorflow.compat.v2.tanh(x_h + r * recurrent_h)
A:keras.layers.recurrent_v2.(last_output, outputs, new_states)->keras.backend.rnn(step, inputs, [init_h, init_c], constants=None, unroll=False, time_major=time_major, mask=mask, go_backwards=go_backwards, input_length=sequence_lengths if sequence_lengths is not None else timesteps, zero_output_for_mask=zero_output_for_mask)
A:keras.layers.recurrent_v2.inputs->tensorflow.compat.v2.reverse(inputs, axis=[0])
A:keras.layers.recurrent_v2.init_h->tensorflow.compat.v2.compat.v1.expand_dims(init_h, axis=seq_axis)
A:keras.layers.recurrent_v2.weights->tensorflow.compat.v2.split(kernel, 4, axis=1)
A:keras.layers.recurrent_v2.bias->tensorflow.compat.v2.split(backend.flatten(bias), 6)
A:keras.layers.recurrent_v2.params->_canonical_to_params(weights=weights, biases=tf.split(full_bias, 8), shape=tf.constant([-1]), transpose_weights=True)
A:keras.layers.recurrent_v2.sequence_lengths->calculate_sequence_by_mask(mask, time_major)
A:keras.layers.recurrent_v2.(outputs, h, _, _, _)->tensorflow.compat.v2.raw_ops.CudnnRNNV3(input=inputs, input_h=init_h, input_c=0, params=params, is_training=True, rnn_mode='gru', sequence_lengths=sequence_lengths, time_major=time_major)
A:keras.layers.recurrent_v2.outputs->tensorflow.compat.v2.compat.v1.transpose(outputs, perm=[1, 0, 2])
A:keras.layers.recurrent_v2.(outputs, h, _, _)->tensorflow.compat.v2.raw_ops.CudnnRNN(input=inputs, input_h=init_h, input_c=0, params=params, is_training=True, rnn_mode='gru')
A:keras.layers.recurrent_v2.h->tensorflow.compat.v2.compat.v1.squeeze(h, axis=seq_axis)
A:keras.layers.recurrent_v2.defun_standard_gru->_generate_defun_backend(api_name, _CPU_DEVICE_NAME, standard_gru, supportive_attribute)
A:keras.layers.recurrent_v2.defun_gpu_gru->_generate_defun_backend(api_name, _GPU_DEVICE_NAME, gpu_gru_with_fallback, supportive_attribute)
A:keras.layers.recurrent_v2.self.return_runtime->kwargs.pop('return_runtime', False)
A:keras.layers.recurrent_v2.(last_output, outputs, new_h, new_c, runtime)->defun_standard_lstm(**params)
A:keras.layers.recurrent_v2.normal_lstm_kwargs->gpu_lstm_kwargs.copy()
A:keras.layers.recurrent_v2.(z0, z1, z2, z3)->tensorflow.compat.v2.split(z, 4, axis=1)
A:keras.layers.recurrent_v2.i->tensorflow.compat.v2.sigmoid(z0)
A:keras.layers.recurrent_v2.f->tensorflow.compat.v2.sigmoid(z1)
A:keras.layers.recurrent_v2.o->tensorflow.compat.v2.sigmoid(z3)
A:keras.layers.recurrent_v2.init_c->tensorflow.compat.v2.compat.v1.expand_dims(init_c, axis=seq_axis)
A:keras.layers.recurrent_v2.full_bias->tensorflow.compat.v2.split(full_bias, 8, axis=0)
A:keras.layers.recurrent_v2.(outputs, h, c, _, _)->tensorflow.compat.v2.raw_ops.CudnnRNNV3(input=inputs, input_h=init_h, input_c=init_c, params=params, is_training=True, rnn_mode='lstm', sequence_lengths=sequence_lengths, time_major=time_major)
A:keras.layers.recurrent_v2.(outputs, h, c, _)->tensorflow.compat.v2.raw_ops.CudnnRNN(input=inputs, input_h=init_h, input_c=init_c, params=params, is_training=True, rnn_mode='lstm')
A:keras.layers.recurrent_v2.c->tensorflow.compat.v2.compat.v1.squeeze(c, axis=seq_axis)
A:keras.layers.recurrent_v2.defun_standard_lstm->_generate_defun_backend(api_name, _CPU_DEVICE_NAME, standard_lstm, supportive_attribute)
A:keras.layers.recurrent_v2.defun_gpu_lstm->_generate_defun_backend(api_name, _GPU_DEVICE_NAME, gpu_lstm_with_fallback, supportive_attribute)
A:keras.layers.recurrent_v2.count_of_true->tensorflow.compat.v2.reduce_sum(tf.cast(mask, tf.int32), axis=1)
A:keras.layers.recurrent_v2.right_padded_mask->tensorflow.compat.v2.sequence_mask(count_of_true, maxlen=max_seq_length)
A:keras.layers.recurrent_v2.mask->tensorflow.compat.v2.compat.v1.transpose(mask)
A:keras.layers.recurrent_v2.current_device->get_device_name()
A:keras.layers.recurrent_v2.concrete_func->func.get_concrete_function(*args, **kwargs)
keras.layers.recurrent_v2.GRU(self,units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,time_major=False,reset_after=True,**kwargs)
keras.layers.recurrent_v2.GRU.__init__(self,units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,time_major=False,reset_after=True,**kwargs)
keras.layers.recurrent_v2.GRU._defun_gru_call(self,inputs,initial_state,training,mask,sequence_lengths)
keras.layers.recurrent_v2.GRU.call(self,inputs,mask=None,training=None,initial_state=None)
keras.layers.recurrent_v2.GRUCell(self,units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,reset_after=True,**kwargs)
keras.layers.recurrent_v2.GRUCell.__init__(self,units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,reset_after=True,**kwargs)
keras.layers.recurrent_v2.LSTM(self,units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,return_sequences=False,return_state=False,go_backwards=False,stateful=False,time_major=False,unroll=False,**kwargs)
keras.layers.recurrent_v2.LSTM.__init__(self,units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,return_sequences=False,return_state=False,go_backwards=False,stateful=False,time_major=False,unroll=False,**kwargs)
keras.layers.recurrent_v2.LSTM.call(self,inputs,mask=None,training=None,initial_state=None)
keras.layers.recurrent_v2.LSTMCell(self,units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,**kwargs)
keras.layers.recurrent_v2.LSTMCell.__init__(self,units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,**kwargs)
keras.layers.recurrent_v2._DefunWrapper(self,time_major,go_backwards,layer_name)
keras.layers.recurrent_v2._DefunWrapper.__deepcopy__(self,memo)
keras.layers.recurrent_v2._DefunWrapper.__init__(self,time_major,go_backwards,layer_name)
keras.layers.recurrent_v2._canonical_to_params(weights,biases,shape,transpose_weights=False)
keras.layers.recurrent_v2._function_register(func,*args,**kwargs)
keras.layers.recurrent_v2._generate_defun_backend(unique_api_name,preferred_device,func,supportive_attributes)
keras.layers.recurrent_v2._get_context_device_type()
keras.layers.recurrent_v2._read_variable_value(v)
keras.layers.recurrent_v2._runtime(runtime_name)
keras.layers.recurrent_v2._use_new_code()
keras.layers.recurrent_v2.calculate_sequence_by_mask(mask,time_major)
keras.layers.recurrent_v2.gpu_gru(inputs,init_h,kernel,recurrent_kernel,bias,mask,time_major,go_backwards,sequence_lengths)
keras.layers.recurrent_v2.gpu_lstm(inputs,init_h,init_c,kernel,recurrent_kernel,bias,mask,time_major,go_backwards,sequence_lengths)
keras.layers.recurrent_v2.gru_with_backend_selection(inputs,init_h,kernel,recurrent_kernel,bias,mask,time_major,go_backwards,sequence_lengths,zero_output_for_mask)
keras.layers.recurrent_v2.has_fully_masked_sequence(mask)
keras.layers.recurrent_v2.is_cudnn_supported_inputs(mask,time_major)
keras.layers.recurrent_v2.is_sequence_right_padded(mask)
keras.layers.recurrent_v2.lstm_with_backend_selection(inputs,init_h,init_c,kernel,recurrent_kernel,bias,mask,time_major,go_backwards,sequence_lengths,zero_output_for_mask)
keras.layers.recurrent_v2.standard_gru(inputs,init_h,kernel,recurrent_kernel,bias,mask,time_major,go_backwards,sequence_lengths,zero_output_for_mask)
keras.layers.recurrent_v2.standard_lstm(inputs,init_h,init_c,kernel,recurrent_kernel,bias,mask,time_major,go_backwards,sequence_lengths,zero_output_for_mask)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/pooling.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/kernelized.py----------------------------------------
A:keras.layers.kernelized.input_shape->input_shape.with_rank(2).with_rank(2)
A:keras.layers.kernelized.self.input_spec->keras.engine.input_spec.InputSpec(ndim=2, axes={1: input_shape.dims[1].value})
A:keras.layers.kernelized.kernel_initializer->keras.initializers.serialize(kernel_initializer)
A:keras.layers.kernelized.self.unscaled_kernel->self.add_weight(name='unscaled_kernel', shape=(input_dim, self.output_dim), dtype=tf.float32, initializer=kernel_initializer, trainable=False)
A:keras.layers.kernelized.self.bias->self.add_weight(name='bias', shape=(self.output_dim,), dtype=tf.float32, initializer=tf.compat.v1.random_uniform_initializer(minval=0.0, maxval=2 * np.pi, dtype=tf.float32), trainable=False)
A:keras.layers.kernelized.self.scale->_get_default_scale(self.kernel_initializer, input_dim)
A:keras.layers.kernelized.self.kernel_scale->self.add_weight(name='kernel_scale', shape=(1,), dtype=tf.float32, initializer=tf.compat.v1.constant_initializer(self.scale), trainable=True, constraint='NonNeg')
A:keras.layers.kernelized.inputs->tensorflow.compat.v2.cast(inputs, tf.float32)
A:keras.layers.kernelized.outputs->tensorflow.compat.v2.nn.bias_add(outputs, self.bias)
A:keras.layers.kernelized.base_config->super(RandomFourierFeatures, self).get_config()
A:keras.layers.kernelized.probs->numpy.random.uniform(low=0.0, high=1.0, size=shape)
A:keras.layers.kernelized.random_features_initializer->tensorflow.compat.v2.compat.v1.constant_initializer(_get_cauchy_samples(loc=0.0, scale=1.0, shape=shape))
keras.layers.kernelized.RandomFourierFeatures(self,output_dim,kernel_initializer='gaussian',scale=None,trainable=False,name=None,**kwargs)
keras.layers.kernelized.RandomFourierFeatures.__init__(self,output_dim,kernel_initializer='gaussian',scale=None,trainable=False,name=None,**kwargs)
keras.layers.kernelized.RandomFourierFeatures.build(self,input_shape)
keras.layers.kernelized.RandomFourierFeatures.call(self,inputs)
keras.layers.kernelized.RandomFourierFeatures.compute_output_shape(self,input_shape)
keras.layers.kernelized.RandomFourierFeatures.get_config(self)
keras.layers.kernelized._get_default_scale(initializer,input_dim)
keras.layers.kernelized._get_random_features_initializer(initializer,shape)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/dense_attention.py----------------------------------------
A:keras.layers.dense_attention.padding_mask->tensorflow.compat.v2.logical_not(scores_mask)
A:keras.layers.dense_attention.training->keras.backend.learning_phase()
A:keras.layers.dense_attention.weights->keras.utils.control_flow_util.smart_cond(training, dropped_weights, lambda : tf.identity(weights))
A:keras.layers.dense_attention.scores->tensorflow.compat.v2.matmul(query, key, transpose_b=True)
A:keras.layers.dense_attention.v_mask->tensorflow.compat.v2.compat.v1.expand_dims(v_mask, axis=-2)
A:keras.layers.dense_attention.scores_shape->tensorflow.compat.v2.compat.v1.shape(scores)
A:keras.layers.dense_attention.causal_mask_shape->tensorflow.compat.v2.concat([tf.compat.v1.ones_like(scores_shape[:-2]), scores_shape[-2:]], axis=0)
A:keras.layers.dense_attention.causal_mask->_lower_triangular_mask(causal_mask_shape)
A:keras.layers.dense_attention.scores_mask->_merge_masks(v_mask, causal_mask)
A:keras.layers.dense_attention.(result, attention_scores)->self._apply_scores(scores=scores, value=v, scores_mask=scores_mask, training=training)
A:keras.layers.dense_attention.q_mask->tensorflow.compat.v2.compat.v1.expand_dims(q_mask, axis=-1)
A:keras.layers.dense_attention.base_config->super(AdditiveAttention, self).get_config()
A:keras.layers.dense_attention.self.scale->self.add_weight(name='scale', shape=[dim], initializer=tf.compat.v1.glorot_uniform_initializer(), dtype=self.dtype, trainable=True)
A:keras.layers.dense_attention.v_shape->tensorflow.compat.v2.TensorShape(input_shape[1])
A:keras.layers.dense_attention.q_reshaped->tensorflow.compat.v2.compat.v1.expand_dims(query, axis=-2)
A:keras.layers.dense_attention.k_reshaped->tensorflow.compat.v2.compat.v1.expand_dims(key, axis=-3)
A:keras.layers.dense_attention.row_index->tensorflow.compat.v2.cumsum(tf.ones(shape=shape, dtype=tf.int32), axis=-2)
A:keras.layers.dense_attention.col_index->tensorflow.compat.v2.cumsum(tf.ones(shape=shape, dtype=tf.int32), axis=-1)
keras.layers.dense_attention.AdditiveAttention(self,use_scale=True,**kwargs)
keras.layers.dense_attention.AdditiveAttention.__init__(self,use_scale=True,**kwargs)
keras.layers.dense_attention.AdditiveAttention._calculate_scores(self,query,key)
keras.layers.dense_attention.AdditiveAttention.build(self,input_shape)
keras.layers.dense_attention.AdditiveAttention.get_config(self)
keras.layers.dense_attention.Attention(self,use_scale=False,**kwargs)
keras.layers.dense_attention.Attention.__init__(self,use_scale=False,**kwargs)
keras.layers.dense_attention.Attention._calculate_scores(self,query,key)
keras.layers.dense_attention.Attention.build(self,input_shape)
keras.layers.dense_attention.Attention.get_config(self)
keras.layers.dense_attention.BaseDenseAttention(self,causal=False,dropout=0.0,**kwargs)
keras.layers.dense_attention.BaseDenseAttention.__init__(self,causal=False,dropout=0.0,**kwargs)
keras.layers.dense_attention.BaseDenseAttention._apply_scores(self,scores,value,scores_mask=None,training=None)
keras.layers.dense_attention.BaseDenseAttention._calculate_scores(self,query,key)
keras.layers.dense_attention.BaseDenseAttention._validate_call_args(self,inputs,mask)
keras.layers.dense_attention.BaseDenseAttention.call(self,inputs,mask=None,training=None,return_attention_scores=False)
keras.layers.dense_attention.BaseDenseAttention.compute_mask(self,inputs,mask=None)
keras.layers.dense_attention.BaseDenseAttention.get_config(self)
keras.layers.dense_attention._lower_triangular_mask(shape)
keras.layers.dense_attention._merge_masks(x,y)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/normalization.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/legacy_rnn/rnn_cell_impl.py----------------------------------------
A:keras.layers.legacy_rnn.rnn_cell_impl.p_static->tensorflow.compat.v2.get_static_value(prefix)
A:keras.layers.legacy_rnn.rnn_cell_impl.p->tensorflow.compat.v2.TensorShape(prefix)
A:keras.layers.legacy_rnn.rnn_cell_impl.s_static->tensorflow.compat.v2.get_static_value(suffix)
A:keras.layers.legacy_rnn.rnn_cell_impl.s->tensorflow.compat.v2.TensorShape(suffix)
A:keras.layers.legacy_rnn.rnn_cell_impl.shape->tensorflow.compat.v2.concat((p, s), 0)
A:keras.layers.legacy_rnn.rnn_cell_impl.c->tensorflow.compat.v2.clip_by_value(c, -self._cell_clip, self._cell_clip)
A:keras.layers.legacy_rnn.rnn_cell_impl.size->tensorflow.compat.v2.zeros(c, dtype=dtype)
A:keras.layers.legacy_rnn.rnn_cell_impl.c_static->_concat(batch_size, s, static=True)
A:keras.layers.legacy_rnn.rnn_cell_impl.scope->tensorflow.compat.v2.compat.v1.variable_scope(tf.compat.v1.get_variable_scope(), custom_getter=self._rnn_get_variable)
A:keras.layers.legacy_rnn.rnn_cell_impl.variable->getter(*args, **kwargs)
A:keras.layers.legacy_rnn.rnn_cell_impl.inputs->tensorflow.compat.v2.convert_to_tensor(inputs, name='inputs')
A:keras.layers.legacy_rnn.rnn_cell_impl.static_batch_size->tensorflow.compat.v2.get_static_value(batch_size, partial=True)
A:keras.layers.legacy_rnn.rnn_cell_impl.is_eager->tensorflow.compat.v2.executing_eagerly()
A:keras.layers.legacy_rnn.rnn_cell_impl.(last_state_size, last_batch_size, last_dtype, last_output)->getattr(self, '_last_zero_state')
A:keras.layers.legacy_rnn.rnn_cell_impl.output->self._activation(gate_inputs)
A:keras.layers.legacy_rnn.rnn_cell_impl.self.input_spec->keras.engine.input_spec.InputSpec(ndim=2)
A:keras.layers.legacy_rnn.rnn_cell_impl.self._activation->keras.activations.get(activation)
A:keras.layers.legacy_rnn.rnn_cell_impl.self._kernel->self.add_variable(_WEIGHTS_VARIABLE_NAME, shape=[input_depth + h_depth, 4 * self._num_units], initializer=self._initializer, partitioner=maybe_partitioner)
A:keras.layers.legacy_rnn.rnn_cell_impl.self._bias->self.add_variable(_BIAS_VARIABLE_NAME, shape=[4 * self._num_units], initializer=initializer)
A:keras.layers.legacy_rnn.rnn_cell_impl.gate_inputs->tensorflow.compat.v2.nn.bias_add(gate_inputs, self._bias)
A:keras.layers.legacy_rnn.rnn_cell_impl.base_config->super(_RNNCellWrapperV1, self).get_config()
A:keras.layers.legacy_rnn.rnn_cell_impl.self._kernel_initializer->keras.initializers.get(kernel_initializer)
A:keras.layers.legacy_rnn.rnn_cell_impl.self._bias_initializer->keras.initializers.get(bias_initializer)
A:keras.layers.legacy_rnn.rnn_cell_impl.self._gate_kernel->self.add_variable('gates/%s' % _WEIGHTS_VARIABLE_NAME, shape=[input_depth + self._num_units, 2 * self._num_units], initializer=self._kernel_initializer)
A:keras.layers.legacy_rnn.rnn_cell_impl.self._gate_bias->self.add_variable('gates/%s' % _BIAS_VARIABLE_NAME, shape=[2 * self._num_units], initializer=self._bias_initializer if self._bias_initializer is not None else tf.compat.v1.constant_initializer(1.0, dtype=self.dtype))
A:keras.layers.legacy_rnn.rnn_cell_impl.self._candidate_kernel->self.add_variable('candidate/%s' % _WEIGHTS_VARIABLE_NAME, shape=[input_depth + self._num_units, self._num_units], initializer=self._kernel_initializer)
A:keras.layers.legacy_rnn.rnn_cell_impl.self._candidate_bias->self.add_variable('candidate/%s' % _BIAS_VARIABLE_NAME, shape=[self._num_units], initializer=self._bias_initializer if self._bias_initializer is not None else tf.compat.v1.zeros_initializer(dtype=self.dtype))
A:keras.layers.legacy_rnn.rnn_cell_impl.value->tensorflow.compat.v2.sigmoid(gate_inputs)
A:keras.layers.legacy_rnn.rnn_cell_impl.(r, u)->tensorflow.compat.v2.split(value=value, num_or_size_splits=2, axis=1)
A:keras.layers.legacy_rnn.rnn_cell_impl.candidate->tensorflow.compat.v2.nn.bias_add(candidate, self._candidate_bias)
A:keras.layers.legacy_rnn.rnn_cell_impl._LSTMStateTuple->collections.namedtuple('LSTMStateTuple', ('c', 'h'))
A:keras.layers.legacy_rnn.rnn_cell_impl.one->tensorflow.compat.v2.constant(1, dtype=tf.int32)
A:keras.layers.legacy_rnn.rnn_cell_impl.(c, h)->tensorflow.compat.v2.split(value=state, num_or_size_splits=2, axis=one)
A:keras.layers.legacy_rnn.rnn_cell_impl.(i, j, f, o)->tensorflow.compat.v2.split(value=lstm_matrix, num_or_size_splits=4, axis=1)
A:keras.layers.legacy_rnn.rnn_cell_impl.forget_bias_tensor->tensorflow.compat.v2.constant(self._forget_bias, dtype=f.dtype)
A:keras.layers.legacy_rnn.rnn_cell_impl.new_c->add(multiply(c, sigmoid(add(f, forget_bias_tensor))), multiply(sigmoid(i), self._activation(j)))
A:keras.layers.legacy_rnn.rnn_cell_impl.new_h->multiply(self._activation(new_c), sigmoid(o))
A:keras.layers.legacy_rnn.rnn_cell_impl.new_state->tensorflow.compat.v2.concat([new_c, new_h], 1)
A:keras.layers.legacy_rnn.rnn_cell_impl.self._initializer->keras.initializers.get(initializer)
A:keras.layers.legacy_rnn.rnn_cell_impl.initializer->tensorflow.compat.v2.compat.v1.zeros_initializer(dtype=self.dtype)
A:keras.layers.legacy_rnn.rnn_cell_impl.self._w_f_diag->self.add_variable('w_f_diag', shape=[self._num_units], initializer=self._initializer)
A:keras.layers.legacy_rnn.rnn_cell_impl.self._w_i_diag->self.add_variable('w_i_diag', shape=[self._num_units], initializer=self._initializer)
A:keras.layers.legacy_rnn.rnn_cell_impl.self._w_o_diag->self.add_variable('w_o_diag', shape=[self._num_units], initializer=self._initializer)
A:keras.layers.legacy_rnn.rnn_cell_impl.self._proj_kernel->self.add_variable('projection/%s' % _WEIGHTS_VARIABLE_NAME, shape=[self._num_units, self._num_proj], initializer=self._initializer, partitioner=maybe_proj_partitioner)
A:keras.layers.legacy_rnn.rnn_cell_impl.c_prev->tensorflow.compat.v2.slice(state, [0, 0], [-1, self._num_units])
A:keras.layers.legacy_rnn.rnn_cell_impl.m_prev->tensorflow.compat.v2.slice(state, [0, self._num_units], [-1, num_proj])
A:keras.layers.legacy_rnn.rnn_cell_impl.lstm_matrix->tensorflow.compat.v2.nn.bias_add(lstm_matrix, self._bias)
A:keras.layers.legacy_rnn.rnn_cell_impl.m->tensorflow.compat.v2.clip_by_value(m, -self._proj_clip, self._proj_clip)
A:keras.layers.legacy_rnn.rnn_cell_impl.config->config.copy().copy()
A:keras.layers.legacy_rnn.rnn_cell_impl.cell->config.copy().copy().pop('cell')
A:keras.layers.legacy_rnn.rnn_cell_impl.cur_state->tensorflow.compat.v2.slice(state, [0, cur_state_pos], [-1, cell.state_size])
A:keras.layers.legacy_rnn.rnn_cell_impl.(cur_inp, new_state)->cell(cur_inp, cur_state)
A:keras.layers.legacy_rnn.rnn_cell_impl.dtype->tensorflow.compat.v2.as_dtype(dtype)
keras.layers.legacy_rnn.rnn_cell_impl.BasicLSTMCell(self,num_units,forget_bias=1.0,state_is_tuple=True,activation=None,reuse=None,name=None,dtype=None,**kwargs)
keras.layers.legacy_rnn.rnn_cell_impl.BasicLSTMCell.__init__(self,num_units,forget_bias=1.0,state_is_tuple=True,activation=None,reuse=None,name=None,dtype=None,**kwargs)
keras.layers.legacy_rnn.rnn_cell_impl.BasicLSTMCell.build(self,inputs_shape)
keras.layers.legacy_rnn.rnn_cell_impl.BasicLSTMCell.call(self,inputs,state)
keras.layers.legacy_rnn.rnn_cell_impl.BasicLSTMCell.get_config(self)
keras.layers.legacy_rnn.rnn_cell_impl.BasicLSTMCell.output_size(self)
keras.layers.legacy_rnn.rnn_cell_impl.BasicLSTMCell.state_size(self)
keras.layers.legacy_rnn.rnn_cell_impl.BasicRNNCell(self,num_units,activation=None,reuse=None,name=None,dtype=None,**kwargs)
keras.layers.legacy_rnn.rnn_cell_impl.BasicRNNCell.__init__(self,num_units,activation=None,reuse=None,name=None,dtype=None,**kwargs)
keras.layers.legacy_rnn.rnn_cell_impl.BasicRNNCell.build(self,inputs_shape)
keras.layers.legacy_rnn.rnn_cell_impl.BasicRNNCell.call(self,inputs,state)
keras.layers.legacy_rnn.rnn_cell_impl.BasicRNNCell.get_config(self)
keras.layers.legacy_rnn.rnn_cell_impl.BasicRNNCell.output_size(self)
keras.layers.legacy_rnn.rnn_cell_impl.BasicRNNCell.state_size(self)
keras.layers.legacy_rnn.rnn_cell_impl.DeviceWrapper(self,*args,**kwargs)
keras.layers.legacy_rnn.rnn_cell_impl.DeviceWrapper.__init__(self,*args,**kwargs)
keras.layers.legacy_rnn.rnn_cell_impl.DropoutWrapper(self,*args,**kwargs)
keras.layers.legacy_rnn.rnn_cell_impl.DropoutWrapper.__init__(self,*args,**kwargs)
keras.layers.legacy_rnn.rnn_cell_impl.GRUCell(self,num_units,activation=None,reuse=None,kernel_initializer=None,bias_initializer=None,name=None,dtype=None,**kwargs)
keras.layers.legacy_rnn.rnn_cell_impl.GRUCell.__init__(self,num_units,activation=None,reuse=None,kernel_initializer=None,bias_initializer=None,name=None,dtype=None,**kwargs)
keras.layers.legacy_rnn.rnn_cell_impl.GRUCell.build(self,inputs_shape)
keras.layers.legacy_rnn.rnn_cell_impl.GRUCell.call(self,inputs,state)
keras.layers.legacy_rnn.rnn_cell_impl.GRUCell.get_config(self)
keras.layers.legacy_rnn.rnn_cell_impl.GRUCell.output_size(self)
keras.layers.legacy_rnn.rnn_cell_impl.GRUCell.state_size(self)
keras.layers.legacy_rnn.rnn_cell_impl.LSTMCell(self,num_units,use_peepholes=False,cell_clip=None,initializer=None,num_proj=None,proj_clip=None,num_unit_shards=None,num_proj_shards=None,forget_bias=1.0,state_is_tuple=True,activation=None,reuse=None,name=None,dtype=None,**kwargs)
keras.layers.legacy_rnn.rnn_cell_impl.LSTMCell.__init__(self,num_units,use_peepholes=False,cell_clip=None,initializer=None,num_proj=None,proj_clip=None,num_unit_shards=None,num_proj_shards=None,forget_bias=1.0,state_is_tuple=True,activation=None,reuse=None,name=None,dtype=None,**kwargs)
keras.layers.legacy_rnn.rnn_cell_impl.LSTMCell.build(self,inputs_shape)
keras.layers.legacy_rnn.rnn_cell_impl.LSTMCell.call(self,inputs,state)
keras.layers.legacy_rnn.rnn_cell_impl.LSTMCell.get_config(self)
keras.layers.legacy_rnn.rnn_cell_impl.LSTMCell.output_size(self)
keras.layers.legacy_rnn.rnn_cell_impl.LSTMCell.state_size(self)
keras.layers.legacy_rnn.rnn_cell_impl.LSTMStateTuple(_LSTMStateTuple)
keras.layers.legacy_rnn.rnn_cell_impl.LSTMStateTuple.dtype(self)
keras.layers.legacy_rnn.rnn_cell_impl.LayerRNNCell(self,inputs,state,scope=None,*args,**kwargs)
keras.layers.legacy_rnn.rnn_cell_impl.LayerRNNCell.__call__(self,inputs,state,scope=None,*args,**kwargs)
keras.layers.legacy_rnn.rnn_cell_impl.MultiRNNCell(self,cells,state_is_tuple=True)
keras.layers.legacy_rnn.rnn_cell_impl.MultiRNNCell.__init__(self,cells,state_is_tuple=True)
keras.layers.legacy_rnn.rnn_cell_impl.MultiRNNCell.call(self,inputs,state)
keras.layers.legacy_rnn.rnn_cell_impl.MultiRNNCell.non_trainable_weights(self)
keras.layers.legacy_rnn.rnn_cell_impl.MultiRNNCell.output_size(self)
keras.layers.legacy_rnn.rnn_cell_impl.MultiRNNCell.state_size(self)
keras.layers.legacy_rnn.rnn_cell_impl.MultiRNNCell.trainable_weights(self)
keras.layers.legacy_rnn.rnn_cell_impl.MultiRNNCell.zero_state(self,batch_size,dtype)
keras.layers.legacy_rnn.rnn_cell_impl.RNNCell(self,trainable=True,name=None,dtype=None,**kwargs)
keras.layers.legacy_rnn.rnn_cell_impl.RNNCell.__init__(self,trainable=True,name=None,dtype=None,**kwargs)
keras.layers.legacy_rnn.rnn_cell_impl.RNNCell._rnn_get_variable(self,getter,*args,**kwargs)
keras.layers.legacy_rnn.rnn_cell_impl.RNNCell._use_input_spec_as_call_signature(self)
keras.layers.legacy_rnn.rnn_cell_impl.RNNCell.build(self,_)
keras.layers.legacy_rnn.rnn_cell_impl.RNNCell.get_config(self)
keras.layers.legacy_rnn.rnn_cell_impl.RNNCell.get_initial_state(self,inputs=None,batch_size=None,dtype=None)
keras.layers.legacy_rnn.rnn_cell_impl.RNNCell.output_size(self)
keras.layers.legacy_rnn.rnn_cell_impl.RNNCell.state_size(self)
keras.layers.legacy_rnn.rnn_cell_impl.RNNCell.zero_state(self,batch_size,dtype)
keras.layers.legacy_rnn.rnn_cell_impl.ResidualWrapper(self,*args,**kwargs)
keras.layers.legacy_rnn.rnn_cell_impl.ResidualWrapper.__init__(self,*args,**kwargs)
keras.layers.legacy_rnn.rnn_cell_impl._RNNCellWrapperV1(self,cell,*args,**kwargs)
keras.layers.legacy_rnn.rnn_cell_impl._RNNCellWrapperV1.__init__(self,cell,*args,**kwargs)
keras.layers.legacy_rnn.rnn_cell_impl._RNNCellWrapperV1._call_wrapped_cell(self,inputs,state,cell_call_fn,**kwargs)
keras.layers.legacy_rnn.rnn_cell_impl._RNNCellWrapperV1.from_config(cls,config,custom_objects=None)
keras.layers.legacy_rnn.rnn_cell_impl._RNNCellWrapperV1.get_config(self)
keras.layers.legacy_rnn.rnn_cell_impl._check_rnn_cell_input_dtypes(inputs)
keras.layers.legacy_rnn.rnn_cell_impl._check_supported_dtypes(dtype)
keras.layers.legacy_rnn.rnn_cell_impl._concat(prefix,suffix,static=False)
keras.layers.legacy_rnn.rnn_cell_impl._hasattr(obj,attr_name)
keras.layers.legacy_rnn.rnn_cell_impl._zero_state_tensors(state_size,batch_size,dtype)
keras.layers.legacy_rnn.rnn_cell_impl.assert_like_rnncell(cell_name,cell)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/legacy_rnn/rnn_cell_wrapper_impl.py----------------------------------------
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.tensor_value->tensorflow.compat.v2.convert_to_tensor(v)
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.const_value->tensorflow.compat.v2.get_static_value(tensor_value)
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.(tensor_prob, const_prob)->tensor_and_const_value(prob)
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.shape->convert_to_batch_shape(s)
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.self._recurrent_input_noise->_enumerated_map_structure_up_to(input_size, lambda i, s: batch_noise(s, inner_seed=self._gen_seed('input', i)), input_size)
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.self._recurrent_state_noise->_enumerated_map_structure_up_to(cell.state_size, lambda i, s: batch_noise(s, inner_seed=self._gen_seed('state', i)), cell.state_size)
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.self._recurrent_output_noise->_enumerated_map_structure_up_to(cell.output_size, lambda i, s: batch_noise(s, inner_seed=self._gen_seed('output', i)), cell.output_size)
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.string->(str(self._seed) + salt).encode('utf-8')
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.binary_tensor->tensorflow.compat.v2.floor(random_tensor)
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.inputs->self._dropout(inputs, 'input', self._recurrent_input_noise, self._input_keep_prob)
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.(output, new_state)->cell_call_fn(inputs, state, **kwargs)
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.shallow_filtered_substructure->tensorflow.compat.v2.__internal__.nest.get_traverse_shallow_structure(self._dropout_state_filter, new_state)
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.new_state->self._dropout(new_state, 'state', self._recurrent_state_noise, self._state_keep_prob, shallow_filtered_substructure)
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.output->keras.utils.generic_utils.func_dump(function)
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.(function, function_type, function_module)->_serialize_function_to_config(self._residual_fn)
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.base_config->super(DeviceWrapperBase, self).get_config()
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.config->config.copy().copy()
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.dropout_state_filter->_parse_config_to_function(config, custom_objects, 'dropout_fn', 'dropout_fn_type', 'dropout_fn_module')
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.(outputs, new_state)->cell_call_fn(inputs, state, **kwargs)
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.res_outputs->(self._residual_fn or default_residual_fn)(inputs, outputs)
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.residual_function->_parse_config_to_function(config, custom_objects, 'residual_fn', 'residual_fn_type', 'residual_fn_module')
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.globs->globals()
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.module->config.copy().copy().pop(module_attr_name, None)
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.function_type->config.copy().copy().pop(func_type_attr_name)
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.function->keras.utils.generic_utils.func_load(config[func_attr_name], globs=globs)
A:keras.layers.legacy_rnn.rnn_cell_wrapper_impl.r->map_fn(ix[0], *inner_args, **inner_kwargs)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.DeviceWrapperBase(self,cell,device,**kwargs)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.DeviceWrapperBase.__init__(self,cell,device,**kwargs)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.DeviceWrapperBase._call_wrapped_cell(self,inputs,state,cell_call_fn,**kwargs)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.DeviceWrapperBase.get_config(self)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.DeviceWrapperBase.output_size(self)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.DeviceWrapperBase.state_size(self)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.DeviceWrapperBase.zero_state(self,batch_size,dtype)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase(self,cell,input_keep_prob=1.0,output_keep_prob=1.0,state_keep_prob=1.0,variational_recurrent=False,input_size=None,dtype=None,seed=None,dropout_state_filter_visitor=None,**kwargs)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.__init__(self,cell,input_keep_prob=1.0,output_keep_prob=1.0,state_keep_prob=1.0,variational_recurrent=False,input_size=None,dtype=None,seed=None,dropout_state_filter_visitor=None,**kwargs)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase._call_wrapped_cell(self,inputs,state,cell_call_fn,**kwargs)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase._dropout(self,values,salt_prefix,recurrent_noise,keep_prob,shallow_filtered_substructure=None)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase._gen_seed(self,salt_prefix,index)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase._variational_recurrent_dropout_value(self,unused_index,value,noise,keep_prob)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.build(self,inputs_shape)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.from_config(cls,config,custom_objects=None)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.get_config(self)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.output_size(self)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.state_size(self)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.wrapped_cell(self)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.zero_state(self,batch_size,dtype)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.ResidualWrapperBase(self,cell,residual_fn=None,**kwargs)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.ResidualWrapperBase.__init__(self,cell,residual_fn=None,**kwargs)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.ResidualWrapperBase._call_wrapped_cell(self,inputs,state,cell_call_fn,**kwargs)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.ResidualWrapperBase.from_config(cls,config,custom_objects=None)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.ResidualWrapperBase.get_config(self)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.ResidualWrapperBase.output_size(self)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.ResidualWrapperBase.state_size(self)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl.ResidualWrapperBase.zero_state(self,batch_size,dtype)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl._default_dropout_state_filter_visitor(substate)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl._enumerated_map_structure_up_to(shallow_structure,map_fn,*args,**kwargs)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl._parse_config_to_function(config,custom_objects,func_attr_name,func_type_attr_name,module_attr_name)
keras.layers.legacy_rnn.rnn_cell_wrapper_impl._serialize_function_to_config(function)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/legacy_rnn/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/experimental/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/experimental/preprocessing/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/preprocessing/string_lookup.py----------------------------------------
A:keras.layers.preprocessing.string_lookup.base_config->super(StringLookup, self).get_config()
A:keras.layers.preprocessing.string_lookup.vocab->super(StringLookup, self).get_vocabulary()
A:keras.layers.preprocessing.string_lookup.vocabulary->keras.layers.preprocessing.table_utils.get_vocabulary_from_file(vocabulary, self.encoding)
keras.layers.preprocessing.string_lookup.StringLookup(self,max_tokens=None,num_oov_indices=1,mask_token='',oov_token='[UNK]',vocabulary=None,encoding=None,invert=False,output_mode=index_lookup.INT,sparse=False,pad_to_max_tokens=False,**kwargs)
keras.layers.preprocessing.string_lookup.StringLookup.__init__(self,max_tokens=None,num_oov_indices=1,mask_token='',oov_token='[UNK]',vocabulary=None,encoding=None,invert=False,output_mode=index_lookup.INT,sparse=False,pad_to_max_tokens=False,**kwargs)
keras.layers.preprocessing.string_lookup.StringLookup.get_config(self)
keras.layers.preprocessing.string_lookup.StringLookup.get_vocabulary(self)
keras.layers.preprocessing.string_lookup.StringLookup.set_vocabulary(self,vocabulary,idf_weights=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/preprocessing/text_vectorization.py----------------------------------------
A:keras.layers.preprocessing.text_vectorization.self._ngrams->tuple(range(1, ngrams + 1))
A:keras.layers.preprocessing.text_vectorization.self._index_lookup_layer->self._get_index_lookup_class()(max_tokens=max_tokens, vocabulary=vocabulary, pad_to_max_tokens=pad_to_max_tokens, output_mode=output_mode if output_mode is not None else INT, vocabulary_size=vocabulary_size)
A:keras.layers.preprocessing.text_vectorization.input_shape->list(input_shape)
A:keras.layers.preprocessing.text_vectorization.output_shape->tensorflow.compat.v2.compat.v1.cond(sequence_len < self._output_sequence_length, true_fn=pad_fn, false_fn=slice_fn).shape.as_list()
A:keras.layers.preprocessing.text_vectorization.data->data.map(lambda tensor: tf.compat.v1.expand_dims(tensor, -1)).map(lambda tensor: tf.compat.v1.expand_dims(tensor, -1))
A:keras.layers.preprocessing.text_vectorization.preprocessed_inputs->data.map(lambda tensor: tf.compat.v1.expand_dims(tensor, -1)).map(lambda tensor: tf.compat.v1.expand_dims(tensor, -1)).map(self._preprocess)
A:keras.layers.preprocessing.text_vectorization.shape->tensorflow.compat.v2.compat.v1.data.get_output_shapes(data)
A:keras.layers.preprocessing.text_vectorization.base_config->super(TextVectorization, self).get_config()
A:keras.layers.preprocessing.text_vectorization.lowercase_inputs->tensorflow.compat.v2.strings.lower(inputs)
A:keras.layers.preprocessing.text_vectorization.inputs->self._preprocess(inputs)
A:keras.layers.preprocessing.text_vectorization.lookup_data->self._index_lookup_layer(inputs)
A:keras.layers.preprocessing.text_vectorization.dense_data->self._index_lookup_layer(inputs).to_tensor(default_value=0)
A:keras.layers.preprocessing.text_vectorization.output_tensor->tensorflow.compat.v2.compat.v1.cond(sequence_len < self._output_sequence_length, true_fn=pad_fn, false_fn=slice_fn)
keras.layers.preprocessing.text_vectorization.TextVectorization(self,max_tokens=None,standardize=LOWER_AND_STRIP_PUNCTUATION,split=SPLIT_ON_WHITESPACE,ngrams=None,output_mode=INT,output_sequence_length=None,pad_to_max_tokens=False,vocabulary=None,**kwargs)
keras.layers.preprocessing.text_vectorization.TextVectorization.__init__(self,max_tokens=None,standardize=LOWER_AND_STRIP_PUNCTUATION,split=SPLIT_ON_WHITESPACE,ngrams=None,output_mode=INT,output_sequence_length=None,pad_to_max_tokens=False,vocabulary=None,**kwargs)
keras.layers.preprocessing.text_vectorization.TextVectorization._assert_same_type(self,expected_type,values,value_name)
keras.layers.preprocessing.text_vectorization.TextVectorization._get_index_lookup_class(self)
keras.layers.preprocessing.text_vectorization.TextVectorization._preprocess(self,inputs)
keras.layers.preprocessing.text_vectorization.TextVectorization._set_state_variables(self,updates)
keras.layers.preprocessing.text_vectorization.TextVectorization.adapt(self,data,reset_state=True)
keras.layers.preprocessing.text_vectorization.TextVectorization.build(self,input_shape)
keras.layers.preprocessing.text_vectorization.TextVectorization.call(self,inputs)
keras.layers.preprocessing.text_vectorization.TextVectorization.compute_output_shape(self,input_shape)
keras.layers.preprocessing.text_vectorization.TextVectorization.compute_output_signature(self,input_spec)
keras.layers.preprocessing.text_vectorization.TextVectorization.count_params(self)
keras.layers.preprocessing.text_vectorization.TextVectorization.get_config(self)
keras.layers.preprocessing.text_vectorization.TextVectorization.get_vocabulary(self)
keras.layers.preprocessing.text_vectorization.TextVectorization.set_vocabulary(self,vocabulary,idf_weights=None)
keras.layers.preprocessing.text_vectorization.TextVectorization.vocabulary_size(self)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/preprocessing/category_encoding.py----------------------------------------
A:keras.layers.preprocessing.category_encoding.output_shape->self.compute_output_shape(input_spec.shape.as_list())
A:keras.layers.preprocessing.category_encoding.base_config->super(CategoryEncoding, self).get_config()
A:keras.layers.preprocessing.category_encoding.inputs->tensorflow.compat.v2.compat.v1.expand_dims(inputs, 1)
A:keras.layers.preprocessing.category_encoding.max_value->tensorflow.compat.v2.reduce_max(inputs)
A:keras.layers.preprocessing.category_encoding.min_value->tensorflow.compat.v2.reduce_min(inputs)
A:keras.layers.preprocessing.category_encoding.condition->tensorflow.compat.v2.logical_and(tf.greater(tf.cast(out_depth, max_value.dtype), max_value), tf.greater_equal(min_value, tf.cast(0, min_value.dtype)))
A:keras.layers.preprocessing.category_encoding.result->tensorflow.compat.v2.math.bincount(inputs, weights=count_weights, minlength=out_depth, maxlength=out_depth, dtype=backend.floatx(), axis=-1, binary_output=binary_output)
keras.layers.preprocessing.category_encoding.CategoryEncoding(self,num_tokens=None,output_mode=BINARY,sparse=False,**kwargs)
keras.layers.preprocessing.category_encoding.CategoryEncoding.__init__(self,num_tokens=None,output_mode=BINARY,sparse=False,**kwargs)
keras.layers.preprocessing.category_encoding.CategoryEncoding.call(self,inputs,count_weights=None)
keras.layers.preprocessing.category_encoding.CategoryEncoding.compute_output_shape(self,input_shape)
keras.layers.preprocessing.category_encoding.CategoryEncoding.compute_output_signature(self,input_spec)
keras.layers.preprocessing.category_encoding.CategoryEncoding.get_config(self)
keras.layers.preprocessing.category_encoding.dense_bincount(inputs,out_depth,binary_output,count_weights=None)
keras.layers.preprocessing.category_encoding.sparse_bincount(inputs,out_depth,binary_output,count_weights=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/preprocessing/preprocessing_test_utils.py----------------------------------------
A:keras.layers.preprocessing.preprocessing_test_utils.data_1->numpy.array([data[1]])
A:keras.layers.preprocessing.preprocessing_test_utils.data_2->numpy.array(data[2:])
A:keras.layers.preprocessing.preprocessing_test_utils.data_0->numpy.array([data[0]])
A:keras.layers.preprocessing.preprocessing_test_utils.single_compute->combiner.compute(data)
A:keras.layers.preprocessing.preprocessing_test_utils.all_merge->combiner.merge([combiner.compute(data_0), combiner.compute(data_1), combiner.compute(data_2)])
A:keras.layers.preprocessing.preprocessing_test_utils.unordered_all_merge->combiner.merge([combiner.compute(data_1), combiner.compute(data_2), combiner.compute(data_0)])
A:keras.layers.preprocessing.preprocessing_test_utils.hierarchical_merge->combiner.merge([combiner.compute(data_1), combiner.merge([combiner.compute(data_2), combiner.compute(data_0)])])
A:keras.layers.preprocessing.preprocessing_test_utils.nested_compute->combiner.compute(data_0, combiner.compute(data_1, combiner.compute(data_2)))
A:keras.layers.preprocessing.preprocessing_test_utils.mixed_compute->combiner.merge([combiner.compute(data_0), combiner.compute(data_1, combiner.compute(data_2))])
A:keras.layers.preprocessing.preprocessing_test_utils.single_merge->combiner.merge([combiner.merge([combiner.compute(data_0)]), combiner.compute(data_1, combiner.compute(data_2))])
A:keras.layers.preprocessing.preprocessing_test_utils.acc->combiner.compute(data)
A:keras.layers.preprocessing.preprocessing_test_utils.extracted_data->combiner.extract(acc)
A:keras.layers.preprocessing.preprocessing_test_utils.restored_acc->combiner.restore(extracted_data)
A:keras.layers.preprocessing.preprocessing_test_utils.serialized_data->combiner.serialize(acc)
A:keras.layers.preprocessing.preprocessing_test_utils.deserialized_data->combiner.deserialize(serialized_data)
A:keras.layers.preprocessing.preprocessing_test_utils.acc2->combiner.compute(data)
keras.layers.preprocessing.preprocessing_test_utils.PreprocessingLayerTest(tf.test.TestCase)
keras.layers.preprocessing.preprocessing_test_utils.PreprocessingLayerTest.assertAllCloseOrEqual(self,a,b,msg=None)
keras.layers.preprocessing.preprocessing_test_utils.PreprocessingLayerTest.assert_extracted_output_equal(self,combiner,acc1,acc2,msg=None)
keras.layers.preprocessing.preprocessing_test_utils.PreprocessingLayerTest.validate_accumulator_computation(self,combiner,data,expected)
keras.layers.preprocessing.preprocessing_test_utils.PreprocessingLayerTest.validate_accumulator_extract(self,combiner,data,expected)
keras.layers.preprocessing.preprocessing_test_utils.PreprocessingLayerTest.validate_accumulator_extract_and_restore(self,combiner,data,expected)
keras.layers.preprocessing.preprocessing_test_utils.PreprocessingLayerTest.validate_accumulator_serialize_and_deserialize(self,combiner,data,expected)
keras.layers.preprocessing.preprocessing_test_utils.PreprocessingLayerTest.validate_accumulator_uniqueness(self,combiner,data)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/preprocessing/category_crossing.py----------------------------------------
A:keras.layers.preprocessing.category_crossing.self._depth_tuple->tuple([i for i in range(1, depth + 1)])
A:keras.layers.preprocessing.category_crossing.inp->tensorflow.compat.v2.compat.v1.expand_dims(inp, axis=-1)
A:keras.layers.preprocessing.category_crossing.partial_out->self.partial_crossing(partial_inps, ragged_out, sparse_out)
A:keras.layers.preprocessing.category_crossing.inp_tensor_shape->tensorflow.compat.v2.TensorShape(inp_shape).as_list()
A:keras.layers.preprocessing.category_crossing.output_shape->self.compute_output_shape(input_shapes)
A:keras.layers.preprocessing.category_crossing.base_config->super(CategoryCrossing, self).get_config()
keras.layers.preprocessing.category_crossing.CategoryCrossing(self,depth=None,name=None,separator='_X_',**kwargs)
keras.layers.preprocessing.category_crossing.CategoryCrossing.__init__(self,depth=None,name=None,separator='_X_',**kwargs)
keras.layers.preprocessing.category_crossing.CategoryCrossing._preprocess_input(self,inp)
keras.layers.preprocessing.category_crossing.CategoryCrossing.call(self,inputs)
keras.layers.preprocessing.category_crossing.CategoryCrossing.compute_output_shape(self,input_shape)
keras.layers.preprocessing.category_crossing.CategoryCrossing.compute_output_signature(self,input_spec)
keras.layers.preprocessing.category_crossing.CategoryCrossing.get_config(self)
keras.layers.preprocessing.category_crossing.CategoryCrossing.partial_crossing(self,partial_inputs,ragged_out,sparse_out)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/preprocessing/hashing.py----------------------------------------
A:keras.layers.preprocessing.hashing.inp->tensorflow.compat.v2.convert_to_tensor(inp)
A:keras.layers.preprocessing.hashing.inputs->self._preprocess_inputs(inputs)
A:keras.layers.preprocessing.hashing.str_to_hash_bucket->self._get_string_to_hash_bucket_fn()
A:keras.layers.preprocessing.hashing.mask->tensorflow.compat.v2.equal(values, self.mask_value)
A:keras.layers.preprocessing.hashing.values->tensorflow.compat.v2.compat.v1.where(mask, tf.compat.v1.zeros_like(values), values)
A:keras.layers.preprocessing.hashing.output_shape->self.compute_output_shape(input_spec.shape)
A:keras.layers.preprocessing.hashing.base_config->super(Hashing, self).get_config()
keras.layers.preprocessing.hashing.Hashing(self,num_bins,mask_value=None,salt=None,**kwargs)
keras.layers.preprocessing.hashing.Hashing.__init__(self,num_bins,mask_value=None,salt=None,**kwargs)
keras.layers.preprocessing.hashing.Hashing._get_string_to_hash_bucket_fn(self)
keras.layers.preprocessing.hashing.Hashing._hash_values_to_bins(self,values)
keras.layers.preprocessing.hashing.Hashing._preprocess_inputs(self,inputs)
keras.layers.preprocessing.hashing.Hashing._preprocess_single_input(self,inp)
keras.layers.preprocessing.hashing.Hashing.call(self,inputs)
keras.layers.preprocessing.hashing.Hashing.compute_output_shape(self,input_shape)
keras.layers.preprocessing.hashing.Hashing.compute_output_signature(self,input_spec)
keras.layers.preprocessing.hashing.Hashing.get_config(self)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/preprocessing/table_utils.py----------------------------------------
A:keras.layers.preprocessing.table_utils.self.mutable->isinstance(table, lookup_ops.MutableHashTable)
A:keras.layers.preprocessing.table_utils.self.oov_tokens->tensorflow.compat.v2.cast(oov_tokens, table._value_dtype)
A:keras.layers.preprocessing.table_utils.(keys, values)->self.table.export()
A:keras.layers.preprocessing.table_utils.(keys, _)->self.table.export()
A:keras.layers.preprocessing.table_utils.keys->tensorflow.compat.v2.convert_to_tensor(keys, dtype=self.table._key_dtype)
A:keras.layers.preprocessing.table_utils.values->self._lookup_and_mask(inputs)
A:keras.layers.preprocessing.table_utils.num_oov_elements->self.oov_tokens.shape.num_elements()
A:keras.layers.preprocessing.table_utils.oov_indices->tensorflow.compat.v2.strings.to_hash_bucket_fast(inputs, num_buckets=num_oov_elements)
A:keras.layers.preprocessing.table_utils.oov_values->tensorflow.compat.v2.compat.v1.gather(self.oov_tokens, oov_indices)
A:keras.layers.preprocessing.table_utils.oov_locations->tensorflow.compat.v2.equal(lookups, self.table._default_value)
A:keras.layers.preprocessing.table_utils.lookups->self.table.lookup(inputs)
A:keras.layers.preprocessing.table_utils.mask_locations->tensorflow.compat.v2.equal(inputs, self.mask_token)
A:keras.layers.preprocessing.table_utils.indexed_data->self._replace_oov_buckets(inputs, values)
A:keras.layers.preprocessing.table_utils.flat_values->tensorflow.compat.v2.convert_to_tensor(value=inputs.flat_values, name='flat_values')
A:keras.layers.preprocessing.table_utils.inputs->tensorflow.compat.v2.convert_to_tensor(inputs)
A:keras.layers.preprocessing.table_utils.text->reader.readline()
A:keras.layers.preprocessing.table_utils.token->token.rstrip(os.linesep).rstrip(os.linesep)
A:keras.layers.preprocessing.table_utils.vocabulary_set->set(vocabulary)
keras.layers.preprocessing.table_utils.TableHandler(self,table,oov_tokens=None,mask_token=None,mask_value=0,use_v1_apis=False)
keras.layers.preprocessing.table_utils.TableHandler.__init__(self,table,oov_tokens=None,mask_token=None,mask_value=0,use_v1_apis=False)
keras.layers.preprocessing.table_utils.TableHandler._eval(self,tensor)
keras.layers.preprocessing.table_utils.TableHandler._lookup_and_mask(self,inputs)
keras.layers.preprocessing.table_utils.TableHandler._ragged_lookup(self,inputs)
keras.layers.preprocessing.table_utils.TableHandler._replace_oov_buckets(self,inputs,lookups)
keras.layers.preprocessing.table_utils.TableHandler._run(self,op)
keras.layers.preprocessing.table_utils.TableHandler._sparse_lookup(self,inputs)
keras.layers.preprocessing.table_utils.TableHandler._tensor_lookup(self,inputs)
keras.layers.preprocessing.table_utils.TableHandler.clear(self)
keras.layers.preprocessing.table_utils.TableHandler.data(self)
keras.layers.preprocessing.table_utils.TableHandler.insert(self,keys,values)
keras.layers.preprocessing.table_utils.TableHandler.lookup(self,inputs)
keras.layers.preprocessing.table_utils.TableHandler.table_size(self)
keras.layers.preprocessing.table_utils.find_repeated_tokens(vocabulary)
keras.layers.preprocessing.table_utils.get_vocabulary_from_file(vocabulary_path,encoding='utf-8')
keras.layers.preprocessing.table_utils.num_tokens_in_file(vocabulary_path)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/preprocessing/index_lookup.py----------------------------------------
A:keras.layers.preprocessing.index_lookup.self._key_dtype->tensorflow.compat.v2.as_dtype(key_dtype)
A:keras.layers.preprocessing.index_lookup.self._value_dtype->tensorflow.compat.v2.as_dtype(value_dtype)
A:keras.layers.preprocessing.index_lookup.restore_from_static_table->kwargs.pop('has_static_table', False)
A:keras.layers.preprocessing.index_lookup.mask_token->numpy.int64(mask_token)
A:keras.layers.preprocessing.index_lookup.oov_start->self._oov_start_index()
A:keras.layers.preprocessing.index_lookup.token_start->self._token_start_index()
A:keras.layers.preprocessing.index_lookup.oov_indices->list(range(oov_start, token_start))
A:keras.layers.preprocessing.index_lookup.initializer->tensorflow.compat.v2.lookup.TextFileInitializer(filename=vocabulary, key_dtype=self._key_dtype, key_index=key_index, value_dtype=self._value_dtype, value_index=value_index, value_index_offset=self._token_start_index())
A:keras.layers.preprocessing.index_lookup.num_tokens->keras.layers.preprocessing.table_utils.num_tokens_in_file(vocabulary)
A:keras.layers.preprocessing.index_lookup.self._table->tensorflow.python.ops.lookup_ops.MutableHashTable(key_dtype=self._key_dtype, value_dtype=self._value_dtype, default_value=default_value, name=self._name + '_index_table')
A:keras.layers.preprocessing.index_lookup.self._table_handler->keras.layers.preprocessing.table_utils.TableHandler(table=self._table, oov_tokens=oov_indices, use_v1_apis=self._use_v1_apis())
A:keras.layers.preprocessing.index_lookup.tracked_table->self._add_trackable(self._table, trainable=False)
A:keras.layers.preprocessing.index_lookup.self.tf_idf_weights->self._add_state_variable(name='idf', shape=tf.TensorShape(idf_shape), dtype=backend.floatx(), initializer=initializer)
A:keras.layers.preprocessing.index_lookup.tracked_table.shape->tensorflow.compat.v2.TensorShape((0,))
A:keras.layers.preprocessing.index_lookup.output_shape->self.compute_output_shape(input_spec.shape.as_list())
A:keras.layers.preprocessing.index_lookup.(keys, values)->self._table_handler.data()
A:keras.layers.preprocessing.index_lookup.index_to_token->zip(values, keys)
A:keras.layers.preprocessing.index_lookup.lookup->collections.defaultdict(lambda : self.oov_token, index_to_token)
A:keras.layers.preprocessing.index_lookup.base_config->super(IndexLookup, self).get_config()
A:keras.layers.preprocessing.index_lookup.has_oov->any(has_oov)
A:keras.layers.preprocessing.index_lookup.repeated_tokens->keras.layers.preprocessing.table_utils.find_repeated_tokens(tokens)
A:keras.layers.preprocessing.index_lookup.idf_weights->self._inverse_document_frequency(doc_counts, num_documents)
A:keras.layers.preprocessing.index_lookup.indices->numpy.arange(token_start, len(tokens) + token_start, dtype=np.int64)
A:keras.layers.preprocessing.index_lookup.front_padding_value->numpy.average(idf_weights)
A:keras.layers.preprocessing.index_lookup.inputs->tensorflow.compat.v2.cast(inputs, tf.int64)
A:keras.layers.preprocessing.index_lookup.lookup_result->self._table_handler.lookup(inputs)
A:keras.layers.preprocessing.index_lookup.bincounts->keras.layers.preprocessing.category_encoding.dense_bincount(lookup_result, out_depth, binary_output)
A:keras.layers.preprocessing.index_lookup.values->keras.engine.base_preprocessing_layer.convert_to_list(values, sparse_default_value=self._mask_value)
A:keras.layers.preprocessing.index_lookup.accumulator->self._create_accumulator()
A:keras.layers.preprocessing.index_lookup.mask_value_bytes->tensorflow.compat.v2.compat.as_bytes(self._mask_value)
A:keras.layers.preprocessing.index_lookup.oov_value_bytes->tensorflow.compat.v2.compat.as_bytes(self._oov_value)
A:keras.layers.preprocessing.index_lookup.sorted_counts->sorted(vocab_counts.items(), key=operator.itemgetter(1, 0), reverse=True)
A:keras.layers.preprocessing.index_lookup.output_dict['vocab']->list(accumulator.count_dict.keys())
A:keras.layers.preprocessing.index_lookup.output_dict['vocab_counts']->list(accumulator.count_dict.values())
A:keras.layers.preprocessing.index_lookup.output_dict['idf_vocab']->list(accumulator.per_doc_count_dict.keys())
A:keras.layers.preprocessing.index_lookup.accumulator_dict->json.loads(tf.compat.as_text(encoded_accumulator))
A:keras.layers.preprocessing.index_lookup.count_dict->collections.defaultdict(int)
A:keras.layers.preprocessing.index_lookup.idf_dict->dict(zip(accumulator_dict['idf_vocab'], idf_count_dicts))
A:keras.layers.preprocessing.index_lookup.per_doc_count_dict->collections.defaultdict(create_default_dict)
keras.layers.preprocessing.index_lookup.IndexLookup(self,max_tokens,num_oov_indices,mask_token,oov_token,vocabulary=None,invert=False,output_mode=INT,sparse=False,pad_to_max_tokens=False,**kwargs)
keras.layers.preprocessing.index_lookup.IndexLookup.__init__(self,max_tokens,num_oov_indices,mask_token,oov_token,vocabulary=None,invert=False,output_mode=INT,sparse=False,pad_to_max_tokens=False,**kwargs)
keras.layers.preprocessing.index_lookup.IndexLookup._convert_to_ndarray(self,x)
keras.layers.preprocessing.index_lookup.IndexLookup._oov_start_index(self)
keras.layers.preprocessing.index_lookup.IndexLookup._set_state_variables(self,updates)
keras.layers.preprocessing.index_lookup.IndexLookup._static_table_class(self)
keras.layers.preprocessing.index_lookup.IndexLookup._token_start_index(self)
keras.layers.preprocessing.index_lookup.IndexLookup._trackable_saved_model_saver(self)
keras.layers.preprocessing.index_lookup.IndexLookup._use_v1_apis(self)
keras.layers.preprocessing.index_lookup.IndexLookup.adapt(self,data,reset_state=True)
keras.layers.preprocessing.index_lookup.IndexLookup.call(self,inputs)
keras.layers.preprocessing.index_lookup.IndexLookup.compute_output_shape(self,input_shape)
keras.layers.preprocessing.index_lookup.IndexLookup.compute_output_signature(self,input_spec)
keras.layers.preprocessing.index_lookup.IndexLookup.count_params(self)
keras.layers.preprocessing.index_lookup.IndexLookup.get_config(self)
keras.layers.preprocessing.index_lookup.IndexLookup.get_vocabulary(self)
keras.layers.preprocessing.index_lookup.IndexLookup.set_vocabulary(self,vocabulary,idf_weights=None)
keras.layers.preprocessing.index_lookup.IndexLookup.vocab_size(self)
keras.layers.preprocessing.index_lookup.IndexLookup.vocabulary_size(self)
keras.layers.preprocessing.index_lookup._IndexLookupAccumulator(collections.namedtuple('Accumulator',['data','count_dict','per_doc_count_dict']))
keras.layers.preprocessing.index_lookup._IndexLookupCombiner(self,vocab_size=None,mask_value=None,oov_value=None,compute_idf=False)
keras.layers.preprocessing.index_lookup._IndexLookupCombiner.__init__(self,vocab_size=None,mask_value=None,oov_value=None,compute_idf=False)
keras.layers.preprocessing.index_lookup._IndexLookupCombiner._create_accumulator(self)
keras.layers.preprocessing.index_lookup._IndexLookupCombiner._inverse_document_frequency(self,document_counts,num_documents)
keras.layers.preprocessing.index_lookup._IndexLookupCombiner.compute(self,values,accumulator=None)
keras.layers.preprocessing.index_lookup._IndexLookupCombiner.deserialize(self,encoded_accumulator)
keras.layers.preprocessing.index_lookup._IndexLookupCombiner.extract(self,accumulator)
keras.layers.preprocessing.index_lookup._IndexLookupCombiner.merge(self,accumulators)
keras.layers.preprocessing.index_lookup._IndexLookupCombiner.restore(self,output)
keras.layers.preprocessing.index_lookup._IndexLookupCombiner.serialize(self,accumulator)
keras.layers.preprocessing.index_lookup._NullInitializer(self,key_dtype,value_dtype)
keras.layers.preprocessing.index_lookup._NullInitializer.__init__(self,key_dtype,value_dtype)
keras.layers.preprocessing.index_lookup._NullInitializer._shared_name(self)
keras.layers.preprocessing.index_lookup._NullInitializer.initialize(self,table)
keras.layers.preprocessing.index_lookup._NullInitializer.key_dtype(self)
keras.layers.preprocessing.index_lookup._NullInitializer.value_dtype(self)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/preprocessing/reduction.py----------------------------------------
A:keras.layers.preprocessing.reduction.weights->tensorflow.compat.v2.compat.v1.expand_dims(weights, -1)
A:keras.layers.preprocessing.reduction.weighted_inputs->tensorflow.compat.v2.multiply(inputs, weights)
A:keras.layers.preprocessing.reduction.input_sum->tensorflow.compat.v2.reduce_sum(weighted_inputs, axis=self.axis)
A:keras.layers.preprocessing.reduction.weight_sum->tensorflow.compat.v2.reduce_sum(weights, axis=self.axis)
A:keras.layers.preprocessing.reduction.squared_weights->tensorflow.compat.v2.pow(weights, 2)
A:keras.layers.preprocessing.reduction.squared_weights_sum->tensorflow.compat.v2.reduce_sum(squared_weights, axis=self.axis)
A:keras.layers.preprocessing.reduction.sqrt_weights_sum->tensorflow.compat.v2.sqrt(squared_weights_sum)
keras.layers.preprocessing.reduction.Reduction(self,reduction,axis=-2,**kwargs)
keras.layers.preprocessing.reduction.Reduction.__init__(self,reduction,axis=-2,**kwargs)
keras.layers.preprocessing.reduction.Reduction.call(self,inputs,weights=None)
keras.layers.preprocessing.reduction.get_reduce_op(reduction_str)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/preprocessing/discretization.py----------------------------------------
A:keras.layers.preprocessing.discretization.n->numpy.prod([[1 if dim is None else dim for dim in value_shape]])
A:keras.layers.preprocessing.discretization.step_size->int(n / num_bins)
A:keras.layers.preprocessing.discretization.partition_indices->numpy.arange(step_size, n, step_size, np.int64)
A:keras.layers.preprocessing.discretization.cum_weights->numpy.interp(percents, cum_weight_percents, cum_weights)
A:keras.layers.preprocessing.discretization.new_bins->numpy.interp(percents, cum_weight_percents, summary[:, 0])
A:keras.layers.preprocessing.discretization.merged->numpy.concatenate((prev_summary, next_summary))
A:keras.layers.preprocessing.discretization.initial_bins->numpy.zeros(self.num_bins)
A:keras.layers.preprocessing.discretization.self.bins->self._add_state_variable(name=_BINS_NAME, shape=(initial_bins.size,), dtype=tf.float32, initializer=tf.compat.v1.constant_initializer(initial_bins))
A:keras.layers.preprocessing.discretization.base_config->super(Discretization, self).get_config()
A:keras.layers.preprocessing.discretization.output_shape->self.compute_output_shape(input_spec.shape.as_list())
A:keras.layers.preprocessing.discretization.integer_buckets->tensorflow.compat.v2.ragged.map_flat_values(_bucketize_fn, inputs)
A:keras.layers.preprocessing.discretization.static_shape->inputs.get_shape()
A:keras.layers.preprocessing.discretization.dynamic_shape->tensorflow.compat.v2.shape(inputs)
A:keras.layers.preprocessing.discretization.reshaped->tensorflow.compat.v2.reshape(inputs, [dynamic_shape[0], -1])
A:keras.layers.preprocessing.discretization.flattened_input->numpy.reshape(values, newshape=(-1, 1))
A:keras.layers.preprocessing.discretization.value_dict->json.loads(tf.compat.as_text(encoded_accumulator))
keras.layers.preprocessing.discretization.Discretization(self,bin_boundaries=None,num_bins=None,epsilon=0.01,**kwargs)
keras.layers.preprocessing.discretization.Discretization.DiscretizingCombiner(self,epsilon,num_bins)
keras.layers.preprocessing.discretization.Discretization.DiscretizingCombiner.__init__(self,epsilon,num_bins)
keras.layers.preprocessing.discretization.Discretization.DiscretizingCombiner._create_accumulator(self,summaries)
keras.layers.preprocessing.discretization.Discretization.DiscretizingCombiner.compute(self,values,accumulator=None)
keras.layers.preprocessing.discretization.Discretization.DiscretizingCombiner.deserialize(self,encoded_accumulator)
keras.layers.preprocessing.discretization.Discretization.DiscretizingCombiner.extract(self,accumulator)
keras.layers.preprocessing.discretization.Discretization.DiscretizingCombiner.merge(self,accumulators)
keras.layers.preprocessing.discretization.Discretization.DiscretizingCombiner.restore(self,output)
keras.layers.preprocessing.discretization.Discretization.DiscretizingCombiner.serialize(self,accumulator)
keras.layers.preprocessing.discretization.Discretization.__init__(self,bin_boundaries=None,num_bins=None,epsilon=0.01,**kwargs)
keras.layers.preprocessing.discretization.Discretization.build(self,input_shape)
keras.layers.preprocessing.discretization.Discretization.call(self,inputs)
keras.layers.preprocessing.discretization.Discretization.compute_output_shape(self,input_shape)
keras.layers.preprocessing.discretization.Discretization.compute_output_signature(self,input_spec)
keras.layers.preprocessing.discretization.Discretization.get_config(self)
keras.layers.preprocessing.discretization.compress(summary,epsilon)
keras.layers.preprocessing.discretization.get_bucket_boundaries(summary,num_bins)
keras.layers.preprocessing.discretization.merge_summaries(prev_summary,next_summary,epsilon)
keras.layers.preprocessing.discretization.summarize(values,epsilon)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/preprocessing/image_preprocessing.py----------------------------------------
A:keras.layers.preprocessing.image_preprocessing.self._interpolation_method->get_interpolation(interpolation)
A:keras.layers.preprocessing.image_preprocessing.self.input_spec->InputSpec(ndim=4)
A:keras.layers.preprocessing.image_preprocessing.outputs->tensorflow.compat.v2.slice(resized_inputs, bbox_begin, bbox_size)
A:keras.layers.preprocessing.image_preprocessing.input_shape->tensorflow.compat.v2.TensorShape(input_shape).as_list()
A:keras.layers.preprocessing.image_preprocessing.base_config->super(RandomWidth, self).get_config()
A:keras.layers.preprocessing.image_preprocessing.inputs_shape->tensorflow.compat.v2.compat.v1.shape(inputs)
A:keras.layers.preprocessing.image_preprocessing.bbox_h_start->tensorflow.compat.v2.cast(img_hd_diff / 2, tf.int32)
A:keras.layers.preprocessing.image_preprocessing.bbox_w_start->tensorflow.compat.v2.cast(img_wd_diff / 2, tf.int32)
A:keras.layers.preprocessing.image_preprocessing.bbox_begin->tensorflow.compat.v2.stack([0, bbox_h_start, bbox_w_start, 0])
A:keras.layers.preprocessing.image_preprocessing.bbox_size->tensorflow.compat.v2.stack([-1, self.height, self.width, -1])
A:keras.layers.preprocessing.image_preprocessing.self._rng->make_generator(self.seed)
A:keras.layers.preprocessing.image_preprocessing.training->keras.backend.learning_phase()
A:keras.layers.preprocessing.image_preprocessing.crop_size->tensorflow.compat.v2.stack([input_shape[0], self.height, self.width, input_shape[3]])
A:keras.layers.preprocessing.image_preprocessing.check->tensorflow.compat.v2.Assert(tf.reduce_all(input_shape >= crop_size), [self.height, self.width])
A:keras.layers.preprocessing.image_preprocessing.resized_height->keras.utils.control_flow_util.smart_cond(ratio_cond, lambda : tf.cast(self.width * input_height_t / input_width_t, input_height_t.dtype), lambda : self.height)
A:keras.layers.preprocessing.image_preprocessing.resized_width->keras.utils.control_flow_util.smart_cond(ratio_cond, lambda : self.width, lambda : tf.cast(self.height * input_width_t / input_height_t, input_width_t.dtype))
A:keras.layers.preprocessing.image_preprocessing.resized_inputs->tensorflow.compat.v2.image.resize(images=inputs, size=tf.stack([resized_height, resized_width]))
A:keras.layers.preprocessing.image_preprocessing.output->tensorflow.compat.v2.image.resize(images=inputs, size=adjusted_size, method=self._interpolation_method)
A:keras.layers.preprocessing.image_preprocessing.original_shape->inputs.shape.as_list()
A:keras.layers.preprocessing.image_preprocessing.scale->tensorflow.compat.v2.cast(self.scale, dtype)
A:keras.layers.preprocessing.image_preprocessing.offset->tensorflow.compat.v2.cast(self.offset, dtype)
A:keras.layers.preprocessing.image_preprocessing.flipped_outputs->tensorflow.compat.v2.image.random_flip_up_down(flipped_outputs, self.seed)
A:keras.layers.preprocessing.image_preprocessing.img_hd->tensorflow.compat.v2.cast(inputs_shape[H_AXIS], tf.float32)
A:keras.layers.preprocessing.image_preprocessing.img_wd->tensorflow.compat.v2.cast(inputs_shape[W_AXIS], tf.float32)
A:keras.layers.preprocessing.image_preprocessing.height_translate->self._rng.uniform(shape=[batch_size, 1], minval=self.height_lower, maxval=self.height_upper, dtype=tf.float32)
A:keras.layers.preprocessing.image_preprocessing.width_translate->self._rng.uniform(shape=[batch_size, 1], minval=self.width_lower, maxval=self.width_upper, dtype=tf.float32)
A:keras.layers.preprocessing.image_preprocessing.translations->tensorflow.compat.v2.cast(tf.concat([width_translate, height_translate], axis=1), dtype=tf.float32)
A:keras.layers.preprocessing.image_preprocessing.output_shape_value->tensorflow.compat.v2.get_static_value(output_shape)
A:keras.layers.preprocessing.image_preprocessing.output_shape->tensorflow.compat.v2.convert_to_tensor(output_shape, tf.int32, name='output_shape')
A:keras.layers.preprocessing.image_preprocessing.fill_value->tensorflow.compat.v2.convert_to_tensor(fill_value, tf.float32, name='fill_value')
A:keras.layers.preprocessing.image_preprocessing.angles->self._rng.uniform(shape=[batch_size], minval=min_angle, maxval=max_angle)
A:keras.layers.preprocessing.image_preprocessing.height_zoom->self._rng.uniform(shape=[batch_size, 1], minval=1.0 + self.height_lower, maxval=1.0 + self.height_upper)
A:keras.layers.preprocessing.image_preprocessing.width_zoom->self._rng.uniform(shape=[batch_size, 1], minval=1.0 + self.width_lower, maxval=1.0 + self.width_upper)
A:keras.layers.preprocessing.image_preprocessing.zooms->tensorflow.compat.v2.cast(tf.concat([width_zoom, height_zoom], axis=1), dtype=tf.float32)
A:keras.layers.preprocessing.image_preprocessing.height_factor->self._rng.uniform(shape=[], minval=1.0 + self.height_lower, maxval=1.0 + self.height_upper)
A:keras.layers.preprocessing.image_preprocessing.adjusted_height->tensorflow.compat.v2.cast(height_factor * img_hd, tf.int32)
A:keras.layers.preprocessing.image_preprocessing.adjusted_size->tensorflow.compat.v2.stack([img_hd, adjusted_width])
A:keras.layers.preprocessing.image_preprocessing.width_factor->self._rng.uniform(shape=[], minval=1.0 + self.width_lower, maxval=1.0 + self.width_upper)
A:keras.layers.preprocessing.image_preprocessing.adjusted_width->tensorflow.compat.v2.cast(width_factor * img_wd, tf.int32)
A:keras.layers.preprocessing.image_preprocessing.interpolation->interpolation.lower().lower()
keras.layers.preprocessing.image_preprocessing.CenterCrop(self,height,width,**kwargs)
keras.layers.preprocessing.image_preprocessing.CenterCrop.__init__(self,height,width,**kwargs)
keras.layers.preprocessing.image_preprocessing.CenterCrop.call(self,inputs)
keras.layers.preprocessing.image_preprocessing.CenterCrop.compute_output_shape(self,input_shape)
keras.layers.preprocessing.image_preprocessing.CenterCrop.get_config(self)
keras.layers.preprocessing.image_preprocessing.RandomContrast(self,factor,seed=None,**kwargs)
keras.layers.preprocessing.image_preprocessing.RandomContrast.__init__(self,factor,seed=None,**kwargs)
keras.layers.preprocessing.image_preprocessing.RandomContrast.call(self,inputs,training=True)
keras.layers.preprocessing.image_preprocessing.RandomContrast.compute_output_shape(self,input_shape)
keras.layers.preprocessing.image_preprocessing.RandomContrast.get_config(self)
keras.layers.preprocessing.image_preprocessing.RandomCrop(self,height,width,seed=None,**kwargs)
keras.layers.preprocessing.image_preprocessing.RandomCrop.__init__(self,height,width,seed=None,**kwargs)
keras.layers.preprocessing.image_preprocessing.RandomCrop.call(self,inputs,training=True)
keras.layers.preprocessing.image_preprocessing.RandomCrop.compute_output_shape(self,input_shape)
keras.layers.preprocessing.image_preprocessing.RandomCrop.get_config(self)
keras.layers.preprocessing.image_preprocessing.RandomFlip(self,mode=HORIZONTAL_AND_VERTICAL,seed=None,**kwargs)
keras.layers.preprocessing.image_preprocessing.RandomFlip.__init__(self,mode=HORIZONTAL_AND_VERTICAL,seed=None,**kwargs)
keras.layers.preprocessing.image_preprocessing.RandomFlip.call(self,inputs,training=True)
keras.layers.preprocessing.image_preprocessing.RandomFlip.compute_output_shape(self,input_shape)
keras.layers.preprocessing.image_preprocessing.RandomFlip.get_config(self)
keras.layers.preprocessing.image_preprocessing.RandomHeight(self,factor,interpolation='bilinear',seed=None,**kwargs)
keras.layers.preprocessing.image_preprocessing.RandomHeight.__init__(self,factor,interpolation='bilinear',seed=None,**kwargs)
keras.layers.preprocessing.image_preprocessing.RandomHeight.call(self,inputs,training=True)
keras.layers.preprocessing.image_preprocessing.RandomHeight.compute_output_shape(self,input_shape)
keras.layers.preprocessing.image_preprocessing.RandomHeight.get_config(self)
keras.layers.preprocessing.image_preprocessing.RandomRotation(self,factor,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,**kwargs)
keras.layers.preprocessing.image_preprocessing.RandomRotation.__init__(self,factor,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,**kwargs)
keras.layers.preprocessing.image_preprocessing.RandomRotation.call(self,inputs,training=True)
keras.layers.preprocessing.image_preprocessing.RandomRotation.compute_output_shape(self,input_shape)
keras.layers.preprocessing.image_preprocessing.RandomRotation.get_config(self)
keras.layers.preprocessing.image_preprocessing.RandomTranslation(self,height_factor,width_factor,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,**kwargs)
keras.layers.preprocessing.image_preprocessing.RandomTranslation.__init__(self,height_factor,width_factor,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,**kwargs)
keras.layers.preprocessing.image_preprocessing.RandomTranslation.call(self,inputs,training=True)
keras.layers.preprocessing.image_preprocessing.RandomTranslation.compute_output_shape(self,input_shape)
keras.layers.preprocessing.image_preprocessing.RandomTranslation.get_config(self)
keras.layers.preprocessing.image_preprocessing.RandomWidth(self,factor,interpolation='bilinear',seed=None,**kwargs)
keras.layers.preprocessing.image_preprocessing.RandomWidth.__init__(self,factor,interpolation='bilinear',seed=None,**kwargs)
keras.layers.preprocessing.image_preprocessing.RandomWidth.call(self,inputs,training=True)
keras.layers.preprocessing.image_preprocessing.RandomWidth.compute_output_shape(self,input_shape)
keras.layers.preprocessing.image_preprocessing.RandomWidth.get_config(self)
keras.layers.preprocessing.image_preprocessing.RandomZoom(self,height_factor,width_factor=None,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,**kwargs)
keras.layers.preprocessing.image_preprocessing.RandomZoom.__init__(self,height_factor,width_factor=None,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,**kwargs)
keras.layers.preprocessing.image_preprocessing.RandomZoom.call(self,inputs,training=True)
keras.layers.preprocessing.image_preprocessing.RandomZoom.compute_output_shape(self,input_shape)
keras.layers.preprocessing.image_preprocessing.RandomZoom.get_config(self)
keras.layers.preprocessing.image_preprocessing.Rescaling(self,scale,offset=0.0,**kwargs)
keras.layers.preprocessing.image_preprocessing.Rescaling.__init__(self,scale,offset=0.0,**kwargs)
keras.layers.preprocessing.image_preprocessing.Rescaling.call(self,inputs)
keras.layers.preprocessing.image_preprocessing.Rescaling.compute_output_shape(self,input_shape)
keras.layers.preprocessing.image_preprocessing.Rescaling.get_config(self)
keras.layers.preprocessing.image_preprocessing.Resizing(self,height,width,interpolation='bilinear',**kwargs)
keras.layers.preprocessing.image_preprocessing.Resizing.__init__(self,height,width,interpolation='bilinear',**kwargs)
keras.layers.preprocessing.image_preprocessing.Resizing.call(self,inputs)
keras.layers.preprocessing.image_preprocessing.Resizing.compute_output_shape(self,input_shape)
keras.layers.preprocessing.image_preprocessing.Resizing.get_config(self)
keras.layers.preprocessing.image_preprocessing.check_fill_mode_and_interpolation(fill_mode,interpolation)
keras.layers.preprocessing.image_preprocessing.get_interpolation(interpolation)
keras.layers.preprocessing.image_preprocessing.get_rotation_matrix(angles,image_height,image_width,name=None)
keras.layers.preprocessing.image_preprocessing.get_translation_matrix(translations,name=None)
keras.layers.preprocessing.image_preprocessing.get_zoom_matrix(zooms,image_height,image_width,name=None)
keras.layers.preprocessing.image_preprocessing.make_generator(seed=None)
keras.layers.preprocessing.image_preprocessing.transform(images,transforms,fill_mode='reflect',fill_value=0.0,interpolation='bilinear',output_shape=None,name=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/preprocessing/integer_lookup.py----------------------------------------
A:keras.layers.preprocessing.integer_lookup.vocabulary->keras.layers.preprocessing.table_utils.get_vocabulary_from_file(vocabulary)
keras.layers.preprocessing.integer_lookup.IntegerLookup(self,max_tokens=None,num_oov_indices=1,mask_token=0,oov_token=-1,vocabulary=None,invert=False,output_mode=index_lookup.INT,sparse=False,pad_to_max_tokens=False,**kwargs)
keras.layers.preprocessing.integer_lookup.IntegerLookup.__init__(self,max_tokens=None,num_oov_indices=1,mask_token=0,oov_token=-1,vocabulary=None,invert=False,output_mode=index_lookup.INT,sparse=False,pad_to_max_tokens=False,**kwargs)
keras.layers.preprocessing.integer_lookup.IntegerLookup.set_vocabulary(self,vocabulary,idf_weights=None)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/preprocessing/preprocessing_stage.py----------------------------------------
A:keras.layers.preprocessing.preprocessing_stage.x->self.layers[i](x)
A:keras.layers.preprocessing.preprocessing_stage.current_layer_data->map_fn(data)
A:keras.layers.preprocessing.preprocessing_stage.data->self._flatten_to_reference_inputs(data)
A:keras.layers.preprocessing.preprocessing_stage.ds_input->_unzip_dataset(data)
A:keras.layers.preprocessing.preprocessing_stage.x_id->str(id(x))
A:keras.layers.preprocessing.preprocessing_stage.depth_keys->sorted(nodes_by_depth.keys(), reverse=True)
A:keras.layers.preprocessing.preprocessing_stage.(args, kwargs)->node.map_arguments(ds_dict)
A:keras.layers.preprocessing.preprocessing_stage.args->tensorflow.compat.v2.data.Dataset.zip(tf.__internal__.nest.list_to_tuple(*args))
A:keras.layers.preprocessing.preprocessing_stage.map_fn->build_map_fn(node, args, kwargs)
A:keras.layers.preprocessing.preprocessing_stage.outputs->_unzip_dataset(outputs)
A:keras.layers.preprocessing.preprocessing_stage.element_count->len(tf.nest.flatten(ds.element_spec))
keras.layers.preprocessing.preprocessing_stage.FunctionalPreprocessingStage(functional.Functional,base_preprocessing_layer.PreprocessingLayer)
keras.layers.preprocessing.preprocessing_stage.FunctionalPreprocessingStage.adapt(self,data,reset_state=True)
keras.layers.preprocessing.preprocessing_stage.FunctionalPreprocessingStage.fit(self,*args,**kwargs)
keras.layers.preprocessing.preprocessing_stage.PreprocessingStage(sequential.Sequential,base_preprocessing_layer.PreprocessingLayer)
keras.layers.preprocessing.preprocessing_stage.PreprocessingStage.adapt(self,data,reset_state=True)
keras.layers.preprocessing.preprocessing_stage._unzip_dataset(ds)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/preprocessing/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/preprocessing/normalization.py----------------------------------------
A:keras.layers.preprocessing.normalization.axis->tuple(axis)
A:keras.layers.preprocessing.normalization.mean->tensorflow.compat.v2.reshape(self.mean, self._broadcast_shape)
A:keras.layers.preprocessing.normalization.variance->tensorflow.compat.v2.reshape(self.variance, self._broadcast_shape)
A:keras.layers.preprocessing.normalization.input_shape->tensorflow.compat.v2.TensorShape(input_shape).as_list()
A:keras.layers.preprocessing.normalization.ndim->len(input_shape)
A:keras.layers.preprocessing.normalization.self._keep_axis->sorted([d if d >= 0 else d + ndim for d in self.axis])
A:keras.layers.preprocessing.normalization.mean_and_var_shape->tuple((input_shape[d] for d in self._keep_axis))
A:keras.layers.preprocessing.normalization.self.mean->self.add_weight(name='mean', shape=mean_and_var_shape, dtype=self.dtype, initializer=tf.compat.v1.zeros_initializer, trainable=False)
A:keras.layers.preprocessing.normalization.self.variance->self.add_weight(name='variance', shape=mean_and_var_shape, dtype=self.dtype, initializer=tf.compat.v1.ones_initializer, trainable=False)
A:keras.layers.preprocessing.normalization.self.count->self.add_weight(name='count', shape=(), dtype=tf.int64, initializer=tf.compat.v1.zeros_initializer, trainable=False)
A:keras.layers.preprocessing.normalization.data->self._standardize_inputs(data)
A:keras.layers.preprocessing.normalization.(batch_mean, batch_variance)->tensorflow.compat.v2.nn.moments(data, axes=self._reduce_axis)
A:keras.layers.preprocessing.normalization.batch_shape->tensorflow.compat.v2.compat.v1.shape(data, out_type=self.count.dtype)
A:keras.layers.preprocessing.normalization.batch_reduce_shape->tensorflow.compat.v2.compat.v1.gather(batch_shape, self._reduce_axis)
A:keras.layers.preprocessing.normalization.batch_count->tensorflow.compat.v2.reduce_prod(batch_reduce_shape)
A:keras.layers.preprocessing.normalization.total_count->tensorflow.compat.v2.reduce_sum(layer_counts)
A:keras.layers.preprocessing.normalization.layer_weightings->tensorflow.compat.v2.reshape(layer_weightings, shape=[len(layers)] + [1] * self.mean.shape.rank)
A:keras.layers.preprocessing.normalization.total_mean->tensorflow.compat.v2.reduce_sum(layer_means * layer_weightings, axis=0)
A:keras.layers.preprocessing.normalization.total_variance->tensorflow.compat.v2.reduce_sum((layer_variances + inter_layer_variances) * layer_weightings, axis=0)
A:keras.layers.preprocessing.normalization.inputs->tensorflow.compat.v2.cast(inputs, self.dtype)
A:keras.layers.preprocessing.normalization.config->super(Normalization, self).get_config()
keras.layers.preprocessing.normalization.Normalization(self,axis=-1,mean=None,variance=None,**kwargs)
keras.layers.preprocessing.normalization.Normalization.__init__(self,axis=-1,mean=None,variance=None,**kwargs)
keras.layers.preprocessing.normalization.Normalization._standardize_inputs(self,inputs)
keras.layers.preprocessing.normalization.Normalization.build(self,input_shape)
keras.layers.preprocessing.normalization.Normalization.call(self,inputs)
keras.layers.preprocessing.normalization.Normalization.compute_output_shape(self,input_shape)
keras.layers.preprocessing.normalization.Normalization.compute_output_signature(self,input_spec)
keras.layers.preprocessing.normalization.Normalization.get_config(self)
keras.layers.preprocessing.normalization.Normalization.merge_state(self,layers)
keras.layers.preprocessing.normalization.Normalization.reset_state(self)
keras.layers.preprocessing.normalization.Normalization.set_weights(self,weights)
keras.layers.preprocessing.normalization.Normalization.update_state(self,data)
keras.layers.preprocessing.normalization.convert_to_ndarray(values)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/preprocessing/benchmarks/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/layers/preprocessing/benchmarks/feature_column_benchmark.py----------------------------------------
A:keras.layers.preprocessing.benchmarks.feature_column_benchmark.self.t0->time.time()
A:keras.layers.preprocessing.benchmarks.feature_column_benchmark.self.tn->time.time()
A:keras.layers.preprocessing.benchmarks.feature_column_benchmark.lengths->(np.random.random(size=num_entries) * length).astype(int)
A:keras.layers.preprocessing.benchmarks.feature_column_benchmark.total_length->numpy.sum(lengths)
A:keras.layers.preprocessing.benchmarks.feature_column_benchmark.values->(np.random.random(size=total_length) * max_value).astype(dtype)
A:keras.layers.preprocessing.benchmarks.feature_column_benchmark.num_oovs->int(pct_oov * total_length)
A:keras.layers.preprocessing.benchmarks.feature_column_benchmark.oov_cadence->int(total_length / num_oovs)
A:keras.layers.preprocessing.benchmarks.feature_column_benchmark.base->len(string.ascii_letters)
A:keras.layers.preprocessing.benchmarks.feature_column_benchmark.n->math.ceil(math.log(vocab_size, base))
A:keras.layers.preprocessing.benchmarks.feature_column_benchmark.ds->tensorflow.data.Dataset.from_tensor_slices(data).repeat().prefetch(tf.data.AUTOTUNE).batch(batch_size).cache()
A:keras.layers.preprocessing.benchmarks.feature_column_benchmark.timer->StepTimingCallback()
A:keras.layers.preprocessing.benchmarks.feature_column_benchmark.avg_time->numpy.mean(avg_per_step_time)
A:keras.layers.preprocessing.benchmarks.feature_column_benchmark.ds_iter->tensorflow.data.Dataset.from_tensor_slices(data).repeat().prefetch(tf.data.AUTOTUNE).batch(batch_size).cache().__iter__()
A:keras.layers.preprocessing.benchmarks.feature_column_benchmark._->fc_fn(next(ds_iter))
keras.layers.preprocessing.benchmarks.feature_column_benchmark.LayerBenchmark(tf.test.Benchmark)
keras.layers.preprocessing.benchmarks.feature_column_benchmark.LayerBenchmark.report(self,name,keras_time,fc_time,iters)
keras.layers.preprocessing.benchmarks.feature_column_benchmark.StepTimingCallback(self)
keras.layers.preprocessing.benchmarks.feature_column_benchmark.StepTimingCallback.__init__(self)
keras.layers.preprocessing.benchmarks.feature_column_benchmark.StepTimingCallback.on_predict_batch_begin(self,batch_index,_)
keras.layers.preprocessing.benchmarks.feature_column_benchmark.StepTimingCallback.on_predict_end(self,_)
keras.layers.preprocessing.benchmarks.feature_column_benchmark.create_data(length,num_entries,max_value,dtype)
keras.layers.preprocessing.benchmarks.feature_column_benchmark.create_string_data(length,num_entries,vocabulary,pct_oov,oov_string='__OOV__')
keras.layers.preprocessing.benchmarks.feature_column_benchmark.create_vocabulary(vocab_size)
keras.layers.preprocessing.benchmarks.feature_column_benchmark.run_fc(data,fc_fn,batch_size,num_runs,steps_per_repeat=100)
keras.layers.preprocessing.benchmarks.feature_column_benchmark.run_keras(data,model,batch_size,num_runs,steps_per_repeat=100)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/legacy/layers.py----------------------------------------
A:keras.legacy.layers.self.init->initializers.get(init)
A:keras.legacy.layers.self.W_regularizer->regularizers.get(W_regularizer)
A:keras.legacy.layers.self.b_regularizer->regularizers.get(b_regularizer)
A:keras.legacy.layers.self.activity_regularizer->regularizers.get(activity_regularizer)
A:keras.legacy.layers.self.W_constraint->constraints.get(W_constraint)
A:keras.legacy.layers.self.b_constraint->constraints.get(b_constraint)
A:keras.legacy.layers.self.input_spec->InputSpec(dtype=K.floatx(), shape=(None, input_dim))
A:keras.legacy.layers.self.W->self.add_weight(shape=(input_dim, input_dim), initializer=self.init, name='W', regularizer=self.W_regularizer, constraint=self.W_constraint)
A:keras.legacy.layers.self.b->self.add_weight(shape=(input_dim,), initializer='zero', name='b', regularizer=self.b_regularizer, constraint=self.b_constraint)
A:keras.legacy.layers.output->super(Recurrent, self).__call__(inputs, **kwargs)
A:keras.legacy.layers.base_config->super(ConvRecurrent2D, self).get_config()
A:keras.legacy.layers.self.activation->activations.get(activation)
A:keras.legacy.layers.self.W_carry->self.add_weight(shape=(input_dim, input_dim), initializer=self.init, name='W_carry')
A:keras.legacy.layers.self.b_carry->self.add_weight(shape=(input_dim,), initializer='one', name='b_carry')
A:keras.legacy.layers.y->K.dot(x, self.W)
A:keras.legacy.layers.transform_weight->activations.sigmoid(y)
A:keras.legacy.layers.act->self.activation(y)
A:keras.legacy.layers.rate->kwargs.pop('atrous_rate')
A:keras.legacy.layers.initial_state->self.get_initial_state(inputs)
A:keras.legacy.layers.is_keras_tensor->hasattr(initial_state[0], '_keras_history')
A:keras.legacy.layers.input_spec->to_list(input_spec)
A:keras.legacy.layers.state_spec->to_list(state_spec)
A:keras.legacy.layers.input_shape->K.int_shape(inputs)
A:keras.legacy.layers.constants->self.get_constants(inputs, training=None)
A:keras.legacy.layers.preprocessed_input->self.preprocess_input(inputs, training=None)
A:keras.legacy.layers.(last_output, outputs, states)->K.rnn(self.step, preprocessed_input, initial_state, go_backwards=self.go_backwards, mask=mask, constants=constants, unroll=self.unroll, input_length=timesteps)
A:keras.legacy.layers.states->to_list(states, allow_tuple=True)
A:keras.legacy.layers.self.kernel_size->utils.conv_utils.normalize_tuple(kernel_size, 2, 'kernel_size')
A:keras.legacy.layers.self.strides->utils.conv_utils.normalize_tuple(strides, 2, 'strides')
A:keras.legacy.layers.self.padding->utils.conv_utils.normalize_padding(padding)
A:keras.legacy.layers.self.data_format->K.normalize_data_format(data_format)
A:keras.legacy.layers.self.dilation_rate->utils.conv_utils.normalize_tuple(dilation_rate, 2, 'dilation_rate')
A:keras.legacy.layers.rows->utils.conv_utils.conv_output_length(rows, self.kernel_size[0], padding=self.padding, stride=self.strides[0], dilation=self.dilation_rate[0])
A:keras.legacy.layers.cols->utils.conv_utils.conv_output_length(cols, self.kernel_size[1], padding=self.padding, stride=self.strides[1], dilation=self.dilation_rate[1])
keras.legacy.layers.AtrousConvolution1D(*args,**kwargs)
keras.legacy.layers.AtrousConvolution2D(*args,**kwargs)
keras.legacy.layers.ConvRecurrent2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),return_sequences=False,go_backwards=False,stateful=False,**kwargs)
keras.legacy.layers.ConvRecurrent2D.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),return_sequences=False,go_backwards=False,stateful=False,**kwargs)
keras.legacy.layers.ConvRecurrent2D.compute_output_shape(self,input_shape)
keras.legacy.layers.ConvRecurrent2D.get_config(self)
keras.legacy.layers.Highway(self,init='glorot_uniform',activation=None,weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,**kwargs)
keras.legacy.layers.Highway.__init__(self,init='glorot_uniform',activation=None,weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,**kwargs)
keras.legacy.layers.Highway.build(self,input_shape)
keras.legacy.layers.Highway.call(self,x)
keras.legacy.layers.Highway.get_config(self)
keras.legacy.layers.MaxoutDense(self,output_dim,nb_feature=4,init='glorot_uniform',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,**kwargs)
keras.legacy.layers.MaxoutDense.__init__(self,output_dim,nb_feature=4,init='glorot_uniform',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,**kwargs)
keras.legacy.layers.MaxoutDense.build(self,input_shape)
keras.legacy.layers.MaxoutDense.call(self,x)
keras.legacy.layers.MaxoutDense.compute_output_shape(self,input_shape)
keras.legacy.layers.MaxoutDense.get_config(self)
keras.legacy.layers.Recurrent(self,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,implementation=0,**kwargs)
keras.legacy.layers.Recurrent.__init__(self,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,implementation=0,**kwargs)
keras.legacy.layers.Recurrent.call(self,inputs,mask=None,training=None,initial_state=None)
keras.legacy.layers.Recurrent.compute_mask(self,inputs,mask)
keras.legacy.layers.Recurrent.compute_output_shape(self,input_shape)
keras.legacy.layers.Recurrent.get_config(self)
keras.legacy.layers.Recurrent.get_constants(self,inputs,training=None)
keras.legacy.layers.Recurrent.get_initial_state(self,inputs)
keras.legacy.layers.Recurrent.preprocess_input(self,inputs,training=None)
keras.legacy.layers.Recurrent.reset_states(self,states=None)
keras.legacy.layers.Recurrent.step(self,inputs,states)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/legacy/interfaces.py----------------------------------------
A:keras.legacy.interfaces.(args, kwargs, converted)->preprocessor(args, kwargs)
A:keras.legacy.interfaces.value->kwargs.pop('forget_bias_init')
A:keras.legacy.interfaces.str_val->str(value)
A:keras.legacy.interfaces.generate_legacy_method_interface->functools.partial(generate_legacy_interface, object_type='method')
A:keras.legacy.interfaces.legacy_dense_support->generate_legacy_interface(allowed_positional_args=['units'], conversions=[('output_dim', 'units'), ('init', 'kernel_initializer'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('W_constraint', 'kernel_constraint'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')])
A:keras.legacy.interfaces.legacy_dropout_support->generate_legacy_interface(allowed_positional_args=['rate', 'noise_shape', 'seed'], conversions=[('p', 'rate')])
A:keras.legacy.interfaces.legacy_embedding_support->generate_legacy_interface(allowed_positional_args=['input_dim', 'output_dim'], conversions=[('init', 'embeddings_initializer'), ('W_regularizer', 'embeddings_regularizer'), ('W_constraint', 'embeddings_constraint')], preprocessor=embedding_kwargs_preprocessor)
A:keras.legacy.interfaces.legacy_pooling1d_support->generate_legacy_interface(allowed_positional_args=['pool_size', 'strides', 'padding'], conversions=[('pool_length', 'pool_size'), ('stride', 'strides'), ('border_mode', 'padding')])
A:keras.legacy.interfaces.legacy_prelu_support->generate_legacy_interface(allowed_positional_args=['alpha_initializer'], conversions=[('init', 'alpha_initializer')])
A:keras.legacy.interfaces.legacy_gaussiannoise_support->generate_legacy_interface(allowed_positional_args=['stddev'], conversions=[('sigma', 'stddev')])
A:keras.legacy.interfaces.input_length->kwargs.pop('input_length', None)
A:keras.legacy.interfaces.input_dim->kwargs.pop('input_dim')
A:keras.legacy.interfaces.legacy_recurrent_support->generate_legacy_interface(allowed_positional_args=['units'], conversions=[('output_dim', 'units'), ('init', 'kernel_initializer'), ('inner_init', 'recurrent_initializer'), ('inner_activation', 'recurrent_activation'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('U_regularizer', 'recurrent_regularizer'), ('dropout_W', 'dropout'), ('dropout_U', 'recurrent_dropout'), ('consume_less', 'implementation')], value_conversions={'consume_less': {'cpu': 0, 'mem': 1, 'gpu': 2}}, preprocessor=recurrent_args_preprocessor)
A:keras.legacy.interfaces.legacy_gaussiandropout_support->generate_legacy_interface(allowed_positional_args=['rate'], conversions=[('p', 'rate')])
A:keras.legacy.interfaces.legacy_pooling2d_support->generate_legacy_interface(allowed_positional_args=['pool_size', 'strides', 'padding'], conversions=[('border_mode', 'padding'), ('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_pooling3d_support->generate_legacy_interface(allowed_positional_args=['pool_size', 'strides', 'padding'], conversions=[('border_mode', 'padding'), ('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_global_pooling_support->generate_legacy_interface(conversions=[('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_upsampling1d_support->generate_legacy_interface(allowed_positional_args=['size'], conversions=[('length', 'size')])
A:keras.legacy.interfaces.legacy_upsampling2d_support->generate_legacy_interface(allowed_positional_args=['size'], conversions=[('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_upsampling3d_support->generate_legacy_interface(allowed_positional_args=['size'], conversions=[('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.length->kwargs.pop('input_length')
A:keras.legacy.interfaces.legacy_conv1d_support->generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('filter_length', 'kernel_size'), ('subsample_length', 'strides'), ('border_mode', 'padding'), ('init', 'kernel_initializer'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('W_constraint', 'kernel_constraint'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')], preprocessor=conv1d_args_preprocessor)
A:keras.legacy.interfaces.legacy_conv2d_support->generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('subsample', 'strides'), ('border_mode', 'padding'), ('dim_ordering', 'data_format'), ('init', 'kernel_initializer'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('W_constraint', 'kernel_constraint'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}}, preprocessor=conv2d_args_preprocessor)
A:keras.legacy.interfaces.init->kwargs.pop('init')
A:keras.legacy.interfaces.(args, kwargs, _converted)->conv2d_args_preprocessor(args, kwargs)
A:keras.legacy.interfaces.legacy_separable_conv2d_support->generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('subsample', 'strides'), ('border_mode', 'padding'), ('dim_ordering', 'data_format'), ('b_regularizer', 'bias_regularizer'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}}, preprocessor=separable_conv2d_args_preprocessor)
A:keras.legacy.interfaces.legacy_deconv2d_support->generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('subsample', 'strides'), ('border_mode', 'padding'), ('dim_ordering', 'data_format'), ('init', 'kernel_initializer'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('W_constraint', 'kernel_constraint'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}}, preprocessor=deconv2d_args_preprocessor)
A:keras.legacy.interfaces.legacy_conv3d_support->generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('subsample', 'strides'), ('border_mode', 'padding'), ('dim_ordering', 'data_format'), ('init', 'kernel_initializer'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('W_constraint', 'kernel_constraint'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}}, preprocessor=conv3d_args_preprocessor)
A:keras.legacy.interfaces.legacy_convlstm2d_support->generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('subsample', 'strides'), ('border_mode', 'padding'), ('dim_ordering', 'data_format'), ('init', 'kernel_initializer'), ('inner_init', 'recurrent_initializer'), ('W_regularizer', 'kernel_regularizer'), ('U_regularizer', 'recurrent_regularizer'), ('b_regularizer', 'bias_regularizer'), ('inner_activation', 'recurrent_activation'), ('dropout_W', 'dropout'), ('dropout_U', 'recurrent_dropout'), ('bias', 'use_bias')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}}, preprocessor=convlstm2d_args_preprocessor)
A:keras.legacy.interfaces.legacy_batchnorm_support->generate_legacy_interface(allowed_positional_args=[], conversions=[('beta_init', 'beta_initializer'), ('gamma_init', 'gamma_initializer')], preprocessor=batchnorm_args_preprocessor)
A:keras.legacy.interfaces.top_pad->args[1].get('top_pad', 0)
A:keras.legacy.interfaces.bottom_pad->args[1].get('bottom_pad', 0)
A:keras.legacy.interfaces.left_pad->args[1].get('left_pad', 0)
A:keras.legacy.interfaces.right_pad->args[1].get('right_pad', 0)
A:keras.legacy.interfaces.legacy_zeropadding2d_support->generate_legacy_interface(allowed_positional_args=['padding'], conversions=[('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}}, preprocessor=zeropadding2d_args_preprocessor)
A:keras.legacy.interfaces.legacy_zeropadding3d_support->generate_legacy_interface(allowed_positional_args=['padding'], conversions=[('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_cropping2d_support->generate_legacy_interface(allowed_positional_args=['cropping'], conversions=[('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_cropping3d_support->generate_legacy_interface(allowed_positional_args=['cropping'], conversions=[('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_spatialdropout1d_support->generate_legacy_interface(allowed_positional_args=['rate'], conversions=[('p', 'rate')])
A:keras.legacy.interfaces.legacy_spatialdropoutNd_support->generate_legacy_interface(allowed_positional_args=['rate'], conversions=[('p', 'rate'), ('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_lambda_support->generate_legacy_interface(allowed_positional_args=['function', 'output_shape'])
A:keras.legacy.interfaces.samples_per_epoch->kwargs.pop('samples_per_epoch')
A:keras.legacy.interfaces.legacy_generator_methods_support->generate_legacy_method_interface(allowed_positional_args=['generator', 'steps_per_epoch', 'epochs'], conversions=[('samples_per_epoch', 'steps_per_epoch'), ('val_samples', 'steps'), ('nb_epoch', 'epochs'), ('nb_val_samples', 'validation_steps'), ('nb_worker', 'workers'), ('pickle_safe', 'use_multiprocessing'), ('max_q_size', 'max_queue_size')], preprocessor=generator_methods_args_preprocessor)
A:keras.legacy.interfaces.legacy_model_constructor_support->generate_legacy_interface(allowed_positional_args=None, conversions=[('input', 'inputs'), ('output', 'outputs')])
A:keras.legacy.interfaces.legacy_input_support->generate_legacy_interface(allowed_positional_args=None, conversions=[('input_dtype', 'dtype')])
A:keras.legacy.interfaces.legacy_add_weight_support->generate_legacy_interface(allowed_positional_args=['name', 'shape'], preprocessor=add_weight_args_preprocessing)
A:keras.legacy.interfaces.legacy_get_updates_support->generate_legacy_interface(allowed_positional_args=None, conversions=[], preprocessor=get_updates_arg_preprocessing)
keras.legacy.interfaces.add_weight_args_preprocessing(args,kwargs)
keras.legacy.interfaces.batchnorm_args_preprocessor(args,kwargs)
keras.legacy.interfaces.conv1d_args_preprocessor(args,kwargs)
keras.legacy.interfaces.conv2d_args_preprocessor(args,kwargs)
keras.legacy.interfaces.conv3d_args_preprocessor(args,kwargs)
keras.legacy.interfaces.convlstm2d_args_preprocessor(args,kwargs)
keras.legacy.interfaces.deconv2d_args_preprocessor(args,kwargs)
keras.legacy.interfaces.embedding_kwargs_preprocessor(args,kwargs)
keras.legacy.interfaces.generate_legacy_interface(allowed_positional_args=None,conversions=None,preprocessor=None,value_conversions=None,object_type='class')
keras.legacy.interfaces.generator_methods_args_preprocessor(args,kwargs)
keras.legacy.interfaces.get_updates_arg_preprocessing(args,kwargs)
keras.legacy.interfaces.raise_duplicate_arg_error(old_arg,new_arg)
keras.legacy.interfaces.recurrent_args_preprocessor(args,kwargs)
keras.legacy.interfaces.separable_conv2d_args_preprocessor(args,kwargs)
keras.legacy.interfaces.zeropadding2d_args_preprocessor(args,kwargs)


----------------------------------------/home/zhang/Packages/keras/keras2.4.1/legacy/__init__.py----------------------------------------

