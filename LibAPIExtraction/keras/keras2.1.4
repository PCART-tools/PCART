
----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/losses.py----------------------------------------
A:keras.losses.diff->K.abs((y_true - y_pred) / K.clip(K.abs(y_true), K.epsilon(), None))
A:keras.losses.first_log->K.log(K.clip(y_pred, K.epsilon(), None) + 1.0)
A:keras.losses.second_log->K.log(K.clip(y_true, K.epsilon(), None) + 1.0)
A:keras.losses.pos->K.sum(y_true * y_pred, axis=-1)
A:keras.losses.neg->K.max((1.0 - y_true) * y_pred, axis=-1)
A:keras.losses.y_true->K.l2_normalize(y_true, axis=-1)
A:keras.losses.y_pred->K.l2_normalize(y_pred, axis=-1)
A:keras.losses.identifier->str(identifier)
keras.losses.binary_crossentropy(y_true,y_pred)
keras.losses.categorical_crossentropy(y_true,y_pred)
keras.losses.categorical_hinge(y_true,y_pred)
keras.losses.cosine_proximity(y_true,y_pred)
keras.losses.deserialize(name,custom_objects=None)
keras.losses.get(identifier)
keras.losses.hinge(y_true,y_pred)
keras.losses.kullback_leibler_divergence(y_true,y_pred)
keras.losses.logcosh(y_true,y_pred)
keras.losses.mean_absolute_error(y_true,y_pred)
keras.losses.mean_absolute_percentage_error(y_true,y_pred)
keras.losses.mean_squared_error(y_true,y_pred)
keras.losses.mean_squared_logarithmic_error(y_true,y_pred)
keras.losses.poisson(y_true,y_pred)
keras.losses.serialize(loss)
keras.losses.sparse_categorical_crossentropy(y_true,y_pred)
keras.losses.squared_hinge(y_true,y_pred)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/metrics.py----------------------------------------
keras.metrics.binary_accuracy(y_true,y_pred)
keras.metrics.categorical_accuracy(y_true,y_pred)
keras.metrics.deserialize(config,custom_objects=None)
keras.metrics.get(identifier)
keras.metrics.serialize(metric)
keras.metrics.sparse_categorical_accuracy(y_true,y_pred)
keras.metrics.sparse_top_k_categorical_accuracy(y_true,y_pred,k=5)
keras.metrics.top_k_categorical_accuracy(y_true,y_pred,k=5)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/optimizers.py----------------------------------------
A:keras.optimizers.then_expression->tensorflow.scalar_mul(c / n, g)
A:keras.optimizers.g_shape->copy.copy(then_expression.dense_shape)
A:keras.optimizers.condition->tensorflow.cast(condition, 'bool')
A:keras.optimizers.g->K.switch(K.greater_equal(n, c), g * c / n, g)
A:keras.optimizers.grads->self.optimizer.compute_gradients(loss, params)
A:keras.optimizers.norm->K.sqrt(sum([K.sum(K.square(g)) for g in grads]))
A:keras.optimizers.param_values->K.batch_get_value(params)
A:keras.optimizers.self.iterations->K.variable(0, dtype='int64', name='iterations')
A:keras.optimizers.self.lr->K.variable(lr, name='lr')
A:keras.optimizers.self.momentum->K.variable(momentum, name='momentum')
A:keras.optimizers.self.decay->K.variable(decay, name='decay')
A:keras.optimizers.new_p->p.constraint(new_p)
A:keras.optimizers.base_config->super(Nadam, self).get_config()
A:keras.optimizers.self.rho->K.variable(rho, name='rho')
A:keras.optimizers.epsilon->K.epsilon()
A:keras.optimizers.self.beta_1->K.variable(beta_1, name='beta_1')
A:keras.optimizers.self.beta_2->K.variable(beta_2, name='beta_2')
A:keras.optimizers.vhat_t->K.maximum(vhat, v_t)
A:keras.optimizers.u_t->K.maximum(self.beta_2 * u, K.abs(g))
A:keras.optimizers.self.m_schedule->K.variable(1.0, name='m_schedule')
A:keras.optimizers.opt_update->self.optimizer.apply_gradients(grads, global_step=self.iterations)
A:keras.optimizers.config['class_name']->config['class_name'].lower().lower()
keras.optimizers.Adadelta(self,lr=1.0,rho=0.95,epsilon=None,decay=0.0,**kwargs)
keras.optimizers.Adadelta.__init__(self,lr=1.0,rho=0.95,epsilon=None,decay=0.0,**kwargs)
keras.optimizers.Adadelta.get_config(self)
keras.optimizers.Adadelta.get_updates(self,loss,params)
keras.optimizers.Adagrad(self,lr=0.01,epsilon=None,decay=0.0,**kwargs)
keras.optimizers.Adagrad.__init__(self,lr=0.01,epsilon=None,decay=0.0,**kwargs)
keras.optimizers.Adagrad.get_config(self)
keras.optimizers.Adagrad.get_updates(self,loss,params)
keras.optimizers.Adam(self,lr=0.001,beta_1=0.9,beta_2=0.999,epsilon=None,decay=0.0,amsgrad=False,**kwargs)
keras.optimizers.Adam.__init__(self,lr=0.001,beta_1=0.9,beta_2=0.999,epsilon=None,decay=0.0,amsgrad=False,**kwargs)
keras.optimizers.Adam.get_config(self)
keras.optimizers.Adam.get_updates(self,loss,params)
keras.optimizers.Adamax(self,lr=0.002,beta_1=0.9,beta_2=0.999,epsilon=None,decay=0.0,**kwargs)
keras.optimizers.Adamax.__init__(self,lr=0.002,beta_1=0.9,beta_2=0.999,epsilon=None,decay=0.0,**kwargs)
keras.optimizers.Adamax.get_config(self)
keras.optimizers.Adamax.get_updates(self,loss,params)
keras.optimizers.Nadam(self,lr=0.002,beta_1=0.9,beta_2=0.999,epsilon=None,schedule_decay=0.004,**kwargs)
keras.optimizers.Nadam.__init__(self,lr=0.002,beta_1=0.9,beta_2=0.999,epsilon=None,schedule_decay=0.004,**kwargs)
keras.optimizers.Nadam.get_config(self)
keras.optimizers.Nadam.get_updates(self,loss,params)
keras.optimizers.Optimizer(self,**kwargs)
keras.optimizers.Optimizer.__init__(self,**kwargs)
keras.optimizers.Optimizer.from_config(cls,config)
keras.optimizers.Optimizer.get_config(self)
keras.optimizers.Optimizer.get_gradients(self,loss,params)
keras.optimizers.Optimizer.get_updates(self,loss,params)
keras.optimizers.Optimizer.get_weights(self)
keras.optimizers.Optimizer.set_weights(self,weights)
keras.optimizers.RMSprop(self,lr=0.001,rho=0.9,epsilon=None,decay=0.0,**kwargs)
keras.optimizers.RMSprop.__init__(self,lr=0.001,rho=0.9,epsilon=None,decay=0.0,**kwargs)
keras.optimizers.RMSprop.get_config(self)
keras.optimizers.RMSprop.get_updates(self,loss,params)
keras.optimizers.SGD(self,lr=0.01,momentum=0.0,decay=0.0,nesterov=False,**kwargs)
keras.optimizers.SGD.__init__(self,lr=0.01,momentum=0.0,decay=0.0,nesterov=False,**kwargs)
keras.optimizers.SGD.get_config(self)
keras.optimizers.SGD.get_updates(self,loss,params)
keras.optimizers.TFOptimizer(self,optimizer)
keras.optimizers.TFOptimizer.__init__(self,optimizer)
keras.optimizers.TFOptimizer.from_config(self,config)
keras.optimizers.TFOptimizer.get_config(self)
keras.optimizers.TFOptimizer.get_updates(self,loss,params)
keras.optimizers.TFOptimizer.weights(self)
keras.optimizers.clip_norm(g,c,n)
keras.optimizers.deserialize(config,custom_objects=None)
keras.optimizers.get(identifier)
keras.optimizers.serialize(optimizer)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/regularizers.py----------------------------------------
A:keras.regularizers.self.l1->K.cast_to_floatx(l1)
A:keras.regularizers.self.l2->K.cast_to_floatx(l2)
keras.regularizers.L1L2(self,l1=0.0,l2=0.0)
keras.regularizers.L1L2.__init__(self,l1=0.0,l2=0.0)
keras.regularizers.L1L2.get_config(self)
keras.regularizers.Regularizer(self,x)
keras.regularizers.Regularizer.__call__(self,x)
keras.regularizers.Regularizer.from_config(cls,config)
keras.regularizers.deserialize(config,custom_objects=None)
keras.regularizers.get(identifier)
keras.regularizers.l1(l=0.01)
keras.regularizers.l1_l2(l1=0.01,l2=0.01)
keras.regularizers.l2(l=0.01)
keras.regularizers.serialize(regularizer)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/models.py----------------------------------------
A:keras.models.proceed->ask_to_proceed_with_overwrite(filepath)
A:keras.models.f.attrs['keras_version']->str(keras_version).encode('utf8')
A:keras.models.f.attrs['backend']->K.backend().encode('utf8')
A:keras.models.f.attrs['model_config']->json.dumps({'class_name': model.__class__.__name__, 'config': model.get_config()}, default=get_json_type).encode('utf8')
A:keras.models.model_weights_group->f.create_group('model_weights')
A:keras.models.model_layers->legacy.models.legacy_sequential_layers(model)
A:keras.models.f.attrs['training_config']->json.dumps({'optimizer_config': {'class_name': model.optimizer.__class__.__name__, 'config': model.optimizer.get_config()}, 'loss': model.loss, 'metrics': model.metrics, 'sample_weight_mode': model.sample_weight_mode, 'loss_weights': model.loss_weights}, default=get_json_type).encode('utf8')
A:keras.models.symbolic_weights->getattr(model.optimizer, 'weights')
A:keras.models.optimizer_weights_group->f.create_group('optimizer_weights')
A:keras.models.weight_values->K.batch_get_value(symbolic_weights)
A:keras.models.name->layer_data['config'].get('name')
A:keras.models.param_dset->f.create_group('optimizer_weights').create_dataset(name, val.shape, dtype=val.dtype)
A:keras.models.deserialized[key]->convert_custom_objects(value)
A:keras.models.model_config->json.loads(model_config.decode('utf-8'))
A:keras.models.model->cls()
A:keras.models.training_config->json.loads(training_config.decode('utf-8'))
A:keras.models.optimizer->optimizers.deserialize(optimizer_config, custom_objects=custom_objects)
A:keras.models.loss->convert_custom_objects(training_config['loss'])
A:keras.models.metrics->convert_custom_objects(training_config['metrics'])
A:keras.models.config->json.loads(json_string)
A:keras.models.x->Input(batch_shape=batch_shape, dtype=dtype, name=layer.name + '_input')
A:keras.models.self.inputs->engine.topology.get_source_inputs(self.outputs[0])
A:keras.models.output_tensor->layer(self.outputs[0])
A:keras.models.self.model->Model(self.inputs, self.outputs[0], name=self.name + '_model')
A:keras.models.weights->self._gather_list_attr('non_trainable_weights')
A:keras.models.trainable_weights->self._gather_list_attr('trainable_weights')
A:keras.models.layers->legacy.models.legacy_sequential_layers(self)
A:keras.models.nb_param->len(layer.weights)
A:keras.models.epochs->kwargs.pop('nb_epoch')
A:keras.models.preds->self.predict(x, batch_size, verbose, steps=steps)
A:keras.models.proba->self.predict(x, batch_size=batch_size, verbose=verbose, steps=steps)
A:keras.models.layer->get_or_create_layer(conf)
A:keras.models.merge_config->self.layers[0].get_config()
A:keras.models.first_layer->normalize_legacy_config(first_layer)
A:keras.models.merge_input->layer_module.deserialize(merge_input_config)
A:keras.models.merge->legacy.layers.Merge.from_config(first_layer_config)
A:keras.models.conf->normalize_legacy_config(conf)
A:keras.models.input_tensor->Input(tensor=x, name='input_wrapper_for_' + str(x.name))
A:keras.models.input_tensors->engine.topology._to_list(input_tensors)
A:keras.models.depth_keys->list(model._nodes_by_depth.keys())
A:keras.models.new_layer->get_or_create_layer(conf).__class__.from_config(layer.get_config())
A:keras.models.output_tensors->engine.topology._to_list(layer(computed_tensors, **kwargs))
A:keras.models.output_masks->engine.topology._to_list(layer.compute_mask(computed_tensors, computed_masks))
keras.Sequential(self,layers=None,name=None)
keras.Sequential._flattened_layers(self)
keras.Sequential._gather_list_attr(self,attr)
keras.Sequential.add(self,layer)
keras.Sequential.build(self,input_shape=None)
keras.Sequential.call(self,inputs,mask=None)
keras.Sequential.compile(self,optimizer,loss,metrics=None,sample_weight_mode=None,weighted_metrics=None,target_tensors=None,**kwargs)
keras.Sequential.evaluate(self,x=None,y=None,batch_size=None,verbose=1,sample_weight=None,steps=None)
keras.Sequential.evaluate_generator(self,generator,steps=None,max_queue_size=10,workers=1,use_multiprocessing=False)
keras.Sequential.fit(self,x=None,y=None,batch_size=None,epochs=1,verbose=1,callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None,**kwargs)
keras.Sequential.fit_generator(self,generator,steps_per_epoch=None,epochs=1,verbose=1,callbacks=None,validation_data=None,validation_steps=None,class_weight=None,max_queue_size=10,workers=1,use_multiprocessing=False,shuffle=True,initial_epoch=0)
keras.Sequential.from_config(cls,config,custom_objects=None)
keras.Sequential.get_config(self)
keras.Sequential.get_layer(self,name=None,index=None)
keras.Sequential.get_losses_for(self,inputs)
keras.Sequential.get_updates_for(self,inputs)
keras.Sequential.get_weights(self)
keras.Sequential.legacy_from_config(cls,config,layer_cache=None)
keras.Sequential.legacy_get_config(self)
keras.Sequential.load_weights(self,filepath,by_name=False,skip_mismatch=False,reshape=False)
keras.Sequential.losses(self)
keras.Sequential.non_trainable_weights(self)
keras.Sequential.pop(self)
keras.Sequential.predict(self,x,batch_size=None,verbose=0,steps=None)
keras.Sequential.predict_classes(self,x,batch_size=None,verbose=0,steps=None)
keras.Sequential.predict_generator(self,generator,steps=None,max_queue_size=10,workers=1,use_multiprocessing=False,verbose=0)
keras.Sequential.predict_on_batch(self,x)
keras.Sequential.predict_proba(self,x,batch_size=None,verbose=0,steps=None)
keras.Sequential.regularizers(self)
keras.Sequential.save_weights(self,filepath,overwrite=True)
keras.Sequential.set_weights(self,weights)
keras.Sequential.state_updates(self)
keras.Sequential.test_on_batch(self,x,y,sample_weight=None)
keras.Sequential.train_on_batch(self,x,y,class_weight=None,sample_weight=None)
keras.Sequential.trainable(self)
keras.Sequential.trainable(self,value)
keras.Sequential.trainable_weights(self)
keras.Sequential.updates(self)
keras.Sequential.uses_learning_phase(self)
keras.models.Sequential(self,layers=None,name=None)
keras.models.Sequential.__init__(self,layers=None,name=None)
keras.models.Sequential._flattened_layers(self)
keras.models.Sequential._gather_list_attr(self,attr)
keras.models.Sequential.add(self,layer)
keras.models.Sequential.build(self,input_shape=None)
keras.models.Sequential.call(self,inputs,mask=None)
keras.models.Sequential.compile(self,optimizer,loss,metrics=None,sample_weight_mode=None,weighted_metrics=None,target_tensors=None,**kwargs)
keras.models.Sequential.evaluate(self,x=None,y=None,batch_size=None,verbose=1,sample_weight=None,steps=None)
keras.models.Sequential.evaluate_generator(self,generator,steps=None,max_queue_size=10,workers=1,use_multiprocessing=False)
keras.models.Sequential.fit(self,x=None,y=None,batch_size=None,epochs=1,verbose=1,callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None,**kwargs)
keras.models.Sequential.fit_generator(self,generator,steps_per_epoch=None,epochs=1,verbose=1,callbacks=None,validation_data=None,validation_steps=None,class_weight=None,max_queue_size=10,workers=1,use_multiprocessing=False,shuffle=True,initial_epoch=0)
keras.models.Sequential.from_config(cls,config,custom_objects=None)
keras.models.Sequential.get_config(self)
keras.models.Sequential.get_layer(self,name=None,index=None)
keras.models.Sequential.get_losses_for(self,inputs)
keras.models.Sequential.get_updates_for(self,inputs)
keras.models.Sequential.get_weights(self)
keras.models.Sequential.legacy_from_config(cls,config,layer_cache=None)
keras.models.Sequential.legacy_get_config(self)
keras.models.Sequential.load_weights(self,filepath,by_name=False,skip_mismatch=False,reshape=False)
keras.models.Sequential.losses(self)
keras.models.Sequential.non_trainable_weights(self)
keras.models.Sequential.pop(self)
keras.models.Sequential.predict(self,x,batch_size=None,verbose=0,steps=None)
keras.models.Sequential.predict_classes(self,x,batch_size=None,verbose=0,steps=None)
keras.models.Sequential.predict_generator(self,generator,steps=None,max_queue_size=10,workers=1,use_multiprocessing=False,verbose=0)
keras.models.Sequential.predict_on_batch(self,x)
keras.models.Sequential.predict_proba(self,x,batch_size=None,verbose=0,steps=None)
keras.models.Sequential.regularizers(self)
keras.models.Sequential.save_weights(self,filepath,overwrite=True)
keras.models.Sequential.set_weights(self,weights)
keras.models.Sequential.state_updates(self)
keras.models.Sequential.test_on_batch(self,x,y,sample_weight=None)
keras.models.Sequential.train_on_batch(self,x,y,class_weight=None,sample_weight=None)
keras.models.Sequential.trainable(self)
keras.models.Sequential.trainable(self,value)
keras.models.Sequential.trainable_weights(self)
keras.models.Sequential.updates(self)
keras.models.Sequential.uses_learning_phase(self)
keras.models._clone_functional_model(model,input_tensors=None)
keras.models._clone_sequential_model(model,input_tensors=None)
keras.models.clone_model(model,input_tensors=None)
keras.models.load_model(filepath,custom_objects=None,compile=True)
keras.models.model_from_config(config,custom_objects=None)
keras.models.model_from_json(json_string,custom_objects=None)
keras.models.model_from_yaml(yaml_string,custom_objects=None)
keras.models.save_model(model,filepath,overwrite=True,include_optimizer=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/callbacks.py----------------------------------------
A:keras.callbacks.self._delta_ts_batch_begin->deque([], maxlen=self.queue_length)
A:keras.callbacks.self._delta_ts_batch_end->deque([], maxlen=self.queue_length)
A:keras.callbacks.t_before_callbacks->time.time()
A:keras.callbacks.delta_t_median->numpy.median(self._delta_ts_batch_end)
A:keras.callbacks.self._t_enter_batch->time.time()
A:keras.callbacks.self.stateful_metrics->set()
A:keras.callbacks.batch_size->dict([(k, logs[k]) if k in logs else (k, 'NA') for k in self.keys]).get('size', 0)
A:keras.callbacks.loss->dict([(k, logs[k]) if k in logs else (k, 'NA') for k in self.keys]).get('loss')
A:keras.callbacks.self.progbar->Progbar(target=self.target, verbose=self.verbose, stateful_metrics=self.stateful_metrics)
A:keras.callbacks.filepath->self.filepath.format(epoch=epoch + 1, **logs)
A:keras.callbacks.current->dict([(k, logs[k]) if k in logs else (k, 'NA') for k in self.keys]).get(self.monitor)
A:keras.callbacks.send[k]->v.item()
A:keras.callbacks.lr->self.schedule(epoch)
A:keras.callbacks.self.sess->K.get_session()
A:keras.callbacks.mapped_weight_name->weight.name.replace(':', '_')
A:keras.callbacks.grads->model.optimizer.get_gradients(model.total_loss, weight)
A:keras.callbacks.w_img->tensorflow.reshape(w_img, [1, shape[0], 1, 1])
A:keras.callbacks.shape->K.int_shape(w_img)
A:keras.callbacks.self.merged->tensorflow.summary.merge_all()
A:keras.callbacks.self.writer->csv.DictWriter(self.csv_file, fieldnames=['epoch'] + self.keys, dialect=CustomDialect)
A:keras.callbacks.self.saver->tensorflow.train.Saver(list(embeddings.values()))
A:keras.callbacks.config->tensorflow.contrib.tensorboard.plugins.projector.ProjectorConfig()
A:keras.callbacks.self.embeddings_ckpt_path->os.path.join(self.log_dir, 'keras_embedding.ckpt')
A:keras.callbacks.embedding->tensorflow.contrib.tensorboard.plugins.projector.ProjectorConfig().embeddings.add()
A:keras.callbacks.step->min(self.batch_size, val_size - i)
A:keras.callbacks.feed_dict->dict(zip(tensors, batch_val))
A:keras.callbacks.result->self.sess.run([self.merged], feed_dict=feed_dict)
A:keras.callbacks.summary->tensorflow.Summary()
A:keras.callbacks.summary_value->tensorflow.Summary().value.add()
A:keras.callbacks.summary_value.simple_value->value.item()
A:keras.callbacks.logs['lr']->K.get_value(self.model.optimizer.lr)
A:keras.callbacks.old_lr->float(K.get_value(self.model.optimizer.lr))
A:keras.callbacks.new_lr->max(new_lr, self.min_lr)
A:keras.callbacks.self.csv_file->open(self.filename, 'w' + self.file_flags)
A:keras.callbacks.self.keys->sorted(logs.keys())
A:keras.callbacks.logs->dict([(k, logs[k]) if k in logs else (k, 'NA') for k in self.keys])
A:keras.callbacks.row_dict->OrderedDict({'epoch': epoch})
keras.callbacks.BaseLogger(self,stateful_metrics=None)
keras.callbacks.BaseLogger.__init__(self,stateful_metrics=None)
keras.callbacks.BaseLogger.on_batch_end(self,batch,logs=None)
keras.callbacks.BaseLogger.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.BaseLogger.on_epoch_end(self,epoch,logs=None)
keras.callbacks.CSVLogger(self,filename,separator=',',append=False)
keras.callbacks.CSVLogger.__init__(self,filename,separator=',',append=False)
keras.callbacks.CSVLogger.on_epoch_end(self,epoch,logs=None)
keras.callbacks.CSVLogger.on_train_begin(self,logs=None)
keras.callbacks.CSVLogger.on_train_end(self,logs=None)
keras.callbacks.Callback(self)
keras.callbacks.Callback.__init__(self)
keras.callbacks.Callback.on_batch_begin(self,batch,logs=None)
keras.callbacks.Callback.on_batch_end(self,batch,logs=None)
keras.callbacks.Callback.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.Callback.on_epoch_end(self,epoch,logs=None)
keras.callbacks.Callback.on_train_begin(self,logs=None)
keras.callbacks.Callback.on_train_end(self,logs=None)
keras.callbacks.Callback.set_model(self,model)
keras.callbacks.Callback.set_params(self,params)
keras.callbacks.CallbackList(self,callbacks=None,queue_length=10)
keras.callbacks.CallbackList.__init__(self,callbacks=None,queue_length=10)
keras.callbacks.CallbackList.__iter__(self)
keras.callbacks.CallbackList.append(self,callback)
keras.callbacks.CallbackList.on_batch_begin(self,batch,logs=None)
keras.callbacks.CallbackList.on_batch_end(self,batch,logs=None)
keras.callbacks.CallbackList.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.CallbackList.on_epoch_end(self,epoch,logs=None)
keras.callbacks.CallbackList.on_train_begin(self,logs=None)
keras.callbacks.CallbackList.on_train_end(self,logs=None)
keras.callbacks.CallbackList.set_model(self,model)
keras.callbacks.CallbackList.set_params(self,params)
keras.callbacks.EarlyStopping(self,monitor='val_loss',min_delta=0,patience=0,verbose=0,mode='auto')
keras.callbacks.EarlyStopping.__init__(self,monitor='val_loss',min_delta=0,patience=0,verbose=0,mode='auto')
keras.callbacks.EarlyStopping.on_epoch_end(self,epoch,logs=None)
keras.callbacks.EarlyStopping.on_train_begin(self,logs=None)
keras.callbacks.EarlyStopping.on_train_end(self,logs=None)
keras.callbacks.History(Callback)
keras.callbacks.History.on_epoch_end(self,epoch,logs=None)
keras.callbacks.History.on_train_begin(self,logs=None)
keras.callbacks.LambdaCallback(self,on_epoch_begin=None,on_epoch_end=None,on_batch_begin=None,on_batch_end=None,on_train_begin=None,on_train_end=None,**kwargs)
keras.callbacks.LambdaCallback.__init__(self,on_epoch_begin=None,on_epoch_end=None,on_batch_begin=None,on_batch_end=None,on_train_begin=None,on_train_end=None,**kwargs)
keras.callbacks.LearningRateScheduler(self,schedule,verbose=0)
keras.callbacks.LearningRateScheduler.__init__(self,schedule,verbose=0)
keras.callbacks.LearningRateScheduler.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.ModelCheckpoint(self,filepath,monitor='val_loss',verbose=0,save_best_only=False,save_weights_only=False,mode='auto',period=1)
keras.callbacks.ModelCheckpoint.__init__(self,filepath,monitor='val_loss',verbose=0,save_best_only=False,save_weights_only=False,mode='auto',period=1)
keras.callbacks.ModelCheckpoint.on_epoch_end(self,epoch,logs=None)
keras.callbacks.ProgbarLogger(self,count_mode='samples',stateful_metrics=None)
keras.callbacks.ProgbarLogger.__init__(self,count_mode='samples',stateful_metrics=None)
keras.callbacks.ProgbarLogger.on_batch_begin(self,batch,logs=None)
keras.callbacks.ProgbarLogger.on_batch_end(self,batch,logs=None)
keras.callbacks.ProgbarLogger.on_epoch_begin(self,epoch,logs=None)
keras.callbacks.ProgbarLogger.on_epoch_end(self,epoch,logs=None)
keras.callbacks.ProgbarLogger.on_train_begin(self,logs=None)
keras.callbacks.ReduceLROnPlateau(self,monitor='val_loss',factor=0.1,patience=10,verbose=0,mode='auto',epsilon=0.0001,cooldown=0,min_lr=0)
keras.callbacks.ReduceLROnPlateau.__init__(self,monitor='val_loss',factor=0.1,patience=10,verbose=0,mode='auto',epsilon=0.0001,cooldown=0,min_lr=0)
keras.callbacks.ReduceLROnPlateau._reset(self)
keras.callbacks.ReduceLROnPlateau.in_cooldown(self)
keras.callbacks.ReduceLROnPlateau.on_epoch_end(self,epoch,logs=None)
keras.callbacks.ReduceLROnPlateau.on_train_begin(self,logs=None)
keras.callbacks.RemoteMonitor(self,root='http://localhost:9000',path='/publish/epoch/end/',field='data',headers=None)
keras.callbacks.RemoteMonitor.__init__(self,root='http://localhost:9000',path='/publish/epoch/end/',field='data',headers=None)
keras.callbacks.RemoteMonitor.on_epoch_end(self,epoch,logs=None)
keras.callbacks.TensorBoard(self,log_dir='./logs',histogram_freq=0,batch_size=32,write_graph=True,write_grads=False,write_images=False,embeddings_freq=0,embeddings_layer_names=None,embeddings_metadata=None)
keras.callbacks.TensorBoard.__init__(self,log_dir='./logs',histogram_freq=0,batch_size=32,write_graph=True,write_grads=False,write_images=False,embeddings_freq=0,embeddings_layer_names=None,embeddings_metadata=None)
keras.callbacks.TensorBoard.on_epoch_end(self,epoch,logs=None)
keras.callbacks.TensorBoard.on_train_end(self,_)
keras.callbacks.TensorBoard.set_model(self,model)
keras.callbacks.TerminateOnNaN(self)
keras.callbacks.TerminateOnNaN.__init__(self)
keras.callbacks.TerminateOnNaN.on_batch_end(self,batch,logs=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/initializers.py----------------------------------------
A:keras.initializers.mode->mode.lower().lower()
A:keras.initializers.distribution->distribution.lower().lower()
A:keras.initializers.(fan_in, fan_out)->_compute_fans(shape)
A:keras.initializers.stddev->numpy.sqrt(scale)
A:keras.initializers.limit->numpy.sqrt(3.0 * scale)
A:keras.initializers.a->numpy.random.normal(0.0, 1.0, flat_shape)
A:keras.initializers.(u, _, v)->numpy.linalg.svd(a, full_matrices=False)
A:keras.initializers.q->q.reshape(shape).reshape(shape)
A:keras.initializers.receptive_field_size->numpy.prod(shape[:-2])
A:keras.initializers.fan_in->numpy.sqrt(np.prod(shape))
A:keras.initializers.fan_out->numpy.sqrt(np.prod(shape))
keras.initializers.Constant(self,value=0)
keras.initializers.Constant.__init__(self,value=0)
keras.initializers.Constant.get_config(self)
keras.initializers.Identity(self,gain=1.0)
keras.initializers.Identity.__init__(self,gain=1.0)
keras.initializers.Identity.get_config(self)
keras.initializers.Initializer(self,shape,dtype=None)
keras.initializers.Initializer.__call__(self,shape,dtype=None)
keras.initializers.Initializer.from_config(cls,config)
keras.initializers.Initializer.get_config(self)
keras.initializers.Ones(self,shape,dtype=None)
keras.initializers.Ones.__call__(self,shape,dtype=None)
keras.initializers.Orthogonal(self,gain=1.0,seed=None)
keras.initializers.Orthogonal.__init__(self,gain=1.0,seed=None)
keras.initializers.Orthogonal.get_config(self)
keras.initializers.RandomNormal(self,mean=0.0,stddev=0.05,seed=None)
keras.initializers.RandomNormal.__init__(self,mean=0.0,stddev=0.05,seed=None)
keras.initializers.RandomNormal.get_config(self)
keras.initializers.RandomUniform(self,minval=-0.05,maxval=0.05,seed=None)
keras.initializers.RandomUniform.__init__(self,minval=-0.05,maxval=0.05,seed=None)
keras.initializers.RandomUniform.get_config(self)
keras.initializers.TruncatedNormal(self,mean=0.0,stddev=0.05,seed=None)
keras.initializers.TruncatedNormal.__init__(self,mean=0.0,stddev=0.05,seed=None)
keras.initializers.TruncatedNormal.get_config(self)
keras.initializers.VarianceScaling(self,scale=1.0,mode='fan_in',distribution='normal',seed=None)
keras.initializers.VarianceScaling.__init__(self,scale=1.0,mode='fan_in',distribution='normal',seed=None)
keras.initializers.VarianceScaling.get_config(self)
keras.initializers.Zeros(self,shape,dtype=None)
keras.initializers.Zeros.__call__(self,shape,dtype=None)
keras.initializers._compute_fans(shape,data_format='channels_last')
keras.initializers.deserialize(config,custom_objects=None)
keras.initializers.get(identifier)
keras.initializers.glorot_normal(seed=None)
keras.initializers.glorot_uniform(seed=None)
keras.initializers.he_normal(seed=None)
keras.initializers.he_uniform(seed=None)
keras.initializers.lecun_normal(seed=None)
keras.initializers.lecun_uniform(seed=None)
keras.initializers.serialize(initializer)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/activations.py----------------------------------------
A:keras.activations.ndim->K.ndim(x)
A:keras.activations.e->K.exp(x - K.max(x, axis=axis, keepdims=True))
A:keras.activations.s->K.sum(e, axis=axis, keepdims=True)
A:keras.activations.identifier->str(identifier)
keras.activations.deserialize(name,custom_objects=None)
keras.activations.elu(x,alpha=1.0)
keras.activations.get(identifier)
keras.activations.hard_sigmoid(x)
keras.activations.linear(x)
keras.activations.relu(x,alpha=0.0,max_value=None)
keras.activations.selu(x)
keras.activations.serialize(activation)
keras.activations.sigmoid(x)
keras.activations.softmax(x,axis=-1)
keras.activations.softplus(x)
keras.activations.softsign(x)
keras.activations.tanh(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/objectives.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/constraints.py----------------------------------------
A:keras.constraints.norms->K.sqrt(K.sum(K.square(w), axis=self.axis, keepdims=True))
A:keras.constraints.desired->K.clip(norms, 0, self.max_value)
keras.constraints.Constraint(self,w)
keras.constraints.Constraint.__call__(self,w)
keras.constraints.Constraint.get_config(self)
keras.constraints.MaxNorm(self,max_value=2,axis=0)
keras.constraints.MaxNorm.__init__(self,max_value=2,axis=0)
keras.constraints.MaxNorm.get_config(self)
keras.constraints.MinMaxNorm(self,min_value=0.0,max_value=1.0,rate=1.0,axis=0)
keras.constraints.MinMaxNorm.__init__(self,min_value=0.0,max_value=1.0,rate=1.0,axis=0)
keras.constraints.MinMaxNorm.get_config(self)
keras.constraints.NonNeg(self,w)
keras.constraints.NonNeg.__call__(self,w)
keras.constraints.UnitNorm(self,axis=0)
keras.constraints.UnitNorm.__init__(self,axis=0)
keras.constraints.UnitNorm.get_config(self)
keras.constraints.deserialize(config,custom_objects=None)
keras.constraints.get(identifier)
keras.constraints.serialize(constraint)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/preprocessing/image.py----------------------------------------
A:keras.preprocessing.image.theta->numpy.deg2rad(np.random.uniform(-self.rotation_range, self.rotation_range))
A:keras.preprocessing.image.rotation_matrix->numpy.array([[np.cos(theta), -np.sin(theta), 0], [np.sin(theta), np.cos(theta), 0], [0, 0, 1]])
A:keras.preprocessing.image.transform_matrix->transform_matrix_offset_center(transform_matrix, h, w)
A:keras.preprocessing.image.x->self.image_data_generator.standardize(x)
A:keras.preprocessing.image.translation_matrix->numpy.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])
A:keras.preprocessing.image.shear->numpy.deg2rad(np.random.uniform(-self.shear_range, self.shear_range))
A:keras.preprocessing.image.shear_matrix->numpy.array([[1, -np.sin(shear), 0], [0, np.cos(shear), 0], [0, 0, 1]])
A:keras.preprocessing.image.(zx, zy)->numpy.random.uniform(self.zoom_range[0], self.zoom_range[1], 2)
A:keras.preprocessing.image.zoom_matrix->numpy.array([[zx, 0, 0], [0, zy, 0], [0, 0, 1]])
A:keras.preprocessing.image.offset_matrix->numpy.array([[1, 0, o_x], [0, 1, o_y], [0, 0, 1]])
A:keras.preprocessing.image.reset_matrix->numpy.array([[1, 0, -o_x], [0, 1, -o_y], [0, 0, 1]])
A:keras.preprocessing.image.data_format->K.image_data_format()
A:keras.preprocessing.image.x_max->numpy.max(x)
A:keras.preprocessing.image.img->array_to_img(batch_x[i], self.data_format, scale=True)
A:keras.preprocessing.image.flatx->numpy.reshape(x, (-1, np.prod(x.shape[-3:])))
A:keras.preprocessing.image.whitex->numpy.dot(flatx, self.principal_components)
A:keras.preprocessing.image.tx->numpy.random.uniform(-self.height_shift_range, self.height_shift_range)
A:keras.preprocessing.image.ty->numpy.random.uniform(-self.width_shift_range, self.width_shift_range)
A:keras.preprocessing.image.shift_matrix->numpy.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])
A:keras.preprocessing.image.ax->numpy.zeros(tuple([rounds * x.shape[0]] + list(x.shape)[1:]), dtype=K.floatx())
A:keras.preprocessing.image.ax[i + r * x.shape[0]]->self.random_transform(x[i])
A:keras.preprocessing.image.self.mean->numpy.reshape(self.mean, broadcast_shape)
A:keras.preprocessing.image.self.std->numpy.reshape(self.std, broadcast_shape)
A:keras.preprocessing.image.flat_x->numpy.reshape(x, (x.shape[0], x.shape[1] * x.shape[2] * x.shape[3]))
A:keras.preprocessing.image.(u, s, _)->scipy.linalg.svd(sigma)
A:keras.preprocessing.image.self.principal_components->(u * s_inv).dot(u.T)
A:keras.preprocessing.image.self.lock->threading.Lock()
A:keras.preprocessing.image.self.index_generator->self._flow_index()
A:keras.preprocessing.image.self.index_array->numpy.random.permutation(self.n)
A:keras.preprocessing.image.self.x->numpy.asarray(x, dtype=K.floatx())
A:keras.preprocessing.image.self.y->numpy.asarray(y)
A:keras.preprocessing.image.batch_x->numpy.zeros((len(index_array),) + self.image_shape, dtype=K.floatx())
A:keras.preprocessing.image.fname->'{prefix}_{index}_{hash}.{format}'.format(prefix=self.save_prefix, index=j, hash=np.random.randint(10000000.0), format=self.save_format)
A:keras.preprocessing.image.index_array->next(self.index_generator)
A:keras.preprocessing.image.subdir->os.path.basename(directory)
A:keras.preprocessing.image.basedir->os.path.dirname(directory)
A:keras.preprocessing.image.absolute_path->os.path.join(root, fname)
A:keras.preprocessing.image.self.target_size->tuple(target_size)
A:keras.preprocessing.image.self.num_classes->len(classes)
A:keras.preprocessing.image.self.class_indices->dict(zip(classes, range(len(classes))))
A:keras.preprocessing.image.pool->multiprocessing.pool.ThreadPool()
A:keras.preprocessing.image.function_partial->partial(_count_valid_files_in_directory, white_list_formats=white_list_formats, follow_links=follow_links)
A:keras.preprocessing.image.self.samples->sum(pool.map(function_partial, (os.path.join(directory, subdir) for subdir in classes)))
A:keras.preprocessing.image.self.classes->numpy.zeros((self.samples,), dtype='int32')
A:keras.preprocessing.image.(classes, filenames)->res.get()
A:keras.preprocessing.image.batch_y->numpy.zeros((len(batch_x), self.num_classes), dtype=K.floatx())
keras.preprocessing.image.DirectoryIterator(self,directory,image_data_generator,target_size=(256,256),color_mode='rgb',classes=None,class_mode='categorical',batch_size=32,shuffle=True,seed=None,data_format=None,save_to_dir=None,save_prefix='',save_format='png',follow_links=False,interpolation='nearest')
keras.preprocessing.image.DirectoryIterator.__init__(self,directory,image_data_generator,target_size=(256,256),color_mode='rgb',classes=None,class_mode='categorical',batch_size=32,shuffle=True,seed=None,data_format=None,save_to_dir=None,save_prefix='',save_format='png',follow_links=False,interpolation='nearest')
keras.preprocessing.image.DirectoryIterator._get_batches_of_transformed_samples(self,index_array)
keras.preprocessing.image.DirectoryIterator.next(self)
keras.preprocessing.image.ImageDataGenerator(self,featurewise_center=False,samplewise_center=False,featurewise_std_normalization=False,samplewise_std_normalization=False,zca_whitening=False,zca_epsilon=1e-06,rotation_range=0.0,width_shift_range=0.0,height_shift_range=0.0,shear_range=0.0,zoom_range=0.0,channel_shift_range=0.0,fill_mode='nearest',cval=0.0,horizontal_flip=False,vertical_flip=False,rescale=None,preprocessing_function=None,data_format=None)
keras.preprocessing.image.ImageDataGenerator.__init__(self,featurewise_center=False,samplewise_center=False,featurewise_std_normalization=False,samplewise_std_normalization=False,zca_whitening=False,zca_epsilon=1e-06,rotation_range=0.0,width_shift_range=0.0,height_shift_range=0.0,shear_range=0.0,zoom_range=0.0,channel_shift_range=0.0,fill_mode='nearest',cval=0.0,horizontal_flip=False,vertical_flip=False,rescale=None,preprocessing_function=None,data_format=None)
keras.preprocessing.image.ImageDataGenerator.fit(self,x,augment=False,rounds=1,seed=None)
keras.preprocessing.image.ImageDataGenerator.flow(self,x,y=None,batch_size=32,shuffle=True,seed=None,save_to_dir=None,save_prefix='',save_format='png')
keras.preprocessing.image.ImageDataGenerator.flow_from_directory(self,directory,target_size=(256,256),color_mode='rgb',classes=None,class_mode='categorical',batch_size=32,shuffle=True,seed=None,save_to_dir=None,save_prefix='',save_format='png',follow_links=False,interpolation='nearest')
keras.preprocessing.image.ImageDataGenerator.random_transform(self,x,seed=None)
keras.preprocessing.image.ImageDataGenerator.standardize(self,x)
keras.preprocessing.image.Iterator(self,n,batch_size,shuffle,seed)
keras.preprocessing.image.Iterator.__getitem__(self,idx)
keras.preprocessing.image.Iterator.__init__(self,n,batch_size,shuffle,seed)
keras.preprocessing.image.Iterator.__iter__(self)
keras.preprocessing.image.Iterator.__len__(self)
keras.preprocessing.image.Iterator.__next__(self,*args,**kwargs)
keras.preprocessing.image.Iterator._flow_index(self)
keras.preprocessing.image.Iterator._get_batches_of_transformed_samples(self,index_array)
keras.preprocessing.image.Iterator._set_index_array(self)
keras.preprocessing.image.Iterator.on_epoch_end(self)
keras.preprocessing.image.Iterator.reset(self)
keras.preprocessing.image.NumpyArrayIterator(self,x,y,image_data_generator,batch_size=32,shuffle=False,seed=None,data_format=None,save_to_dir=None,save_prefix='',save_format='png')
keras.preprocessing.image.NumpyArrayIterator.__init__(self,x,y,image_data_generator,batch_size=32,shuffle=False,seed=None,data_format=None,save_to_dir=None,save_prefix='',save_format='png')
keras.preprocessing.image.NumpyArrayIterator._get_batches_of_transformed_samples(self,index_array)
keras.preprocessing.image.NumpyArrayIterator.next(self)
keras.preprocessing.image._count_valid_files_in_directory(directory,white_list_formats,follow_links)
keras.preprocessing.image._list_valid_filenames_in_directory(directory,white_list_formats,class_indices,follow_links)
keras.preprocessing.image.apply_transform(x,transform_matrix,channel_axis=0,fill_mode='nearest',cval=0.0)
keras.preprocessing.image.array_to_img(x,data_format=None,scale=True)
keras.preprocessing.image.flip_axis(x,axis)
keras.preprocessing.image.img_to_array(img,data_format=None)
keras.preprocessing.image.list_pictures(directory,ext='jpg|jpeg|bmp|png|ppm')
keras.preprocessing.image.load_img(path,grayscale=False,target_size=None,interpolation='nearest')
keras.preprocessing.image.random_channel_shift(x,intensity,channel_axis=0)
keras.preprocessing.image.random_rotation(x,rg,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0)
keras.preprocessing.image.random_shear(x,intensity,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0)
keras.preprocessing.image.random_shift(x,wrg,hrg,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0)
keras.preprocessing.image.random_zoom(x,zoom_range,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0)
keras.preprocessing.image.transform_matrix_offset_center(matrix,x,y)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/preprocessing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/preprocessing/text.py----------------------------------------
A:keras.preprocessing.text.text->text.translate(translate_map).translate(translate_map)
A:keras.preprocessing.text.translate_map->maketrans(filters, split * len(filters))
A:keras.preprocessing.text.seq->set(seq)
A:keras.preprocessing.text.num_words->kwargs.pop('nb_words')
A:keras.preprocessing.text.self.word_counts->OrderedDict()
A:keras.preprocessing.text.wcounts->list(self.word_counts.items())
A:keras.preprocessing.text.self.word_index->dict(list(zip(sorted_voc, list(range(1, len(sorted_voc) + 1)))))
A:keras.preprocessing.text.i->self.word_index.get(self.oov_token)
A:keras.preprocessing.text.self.document_count->len(sequences)
A:keras.preprocessing.text.sequences->self.texts_to_sequences(texts)
A:keras.preprocessing.text.x->numpy.zeros((len(sequences), num_words))
A:keras.preprocessing.text.idf->numpy.log(1 + self.document_count / (1 + self.index_docs.get(j, 0)))
keras.preprocessing.text.Tokenizer(self,num_words=None,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='',char_level=False,oov_token=None,**kwargs)
keras.preprocessing.text.Tokenizer.__init__(self,num_words=None,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='',char_level=False,oov_token=None,**kwargs)
keras.preprocessing.text.Tokenizer.fit_on_sequences(self,sequences)
keras.preprocessing.text.Tokenizer.fit_on_texts(self,texts)
keras.preprocessing.text.Tokenizer.sequences_to_matrix(self,sequences,mode='binary')
keras.preprocessing.text.Tokenizer.texts_to_matrix(self,texts,mode='binary')
keras.preprocessing.text.Tokenizer.texts_to_sequences(self,texts)
keras.preprocessing.text.Tokenizer.texts_to_sequences_generator(self,texts)
keras.preprocessing.text.hashing_trick(text,n,hash_function=None,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='')
keras.preprocessing.text.one_hot(text,n,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='')
keras.preprocessing.text.text_to_word_sequence(text,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='')


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/preprocessing/sequence.py----------------------------------------
A:keras.preprocessing.sequence.num_samples->len(sequences)
A:keras.preprocessing.sequence.maxlen->numpy.max(lengths)
A:keras.preprocessing.sequence.sample_shape->tuple()
A:keras.preprocessing.sequence.x->(np.ones((num_samples, maxlen) + sample_shape) * value).astype(dtype)
A:keras.preprocessing.sequence.trunc->numpy.asarray(trunc, dtype=dtype)
A:keras.preprocessing.sequence.rank->numpy.arange(size)
A:keras.preprocessing.sequence.window_start->max(0, i - window_size)
A:keras.preprocessing.sequence.window_end->min(len(sequence), i + window_size + 1)
A:keras.preprocessing.sequence.num_negative_samples->int(len(labels) * negative_samples)
A:keras.preprocessing.sequence.seed->random.randint(0, 10000000.0)
keras.preprocessing.sequence._remove_long_seq(maxlen,seq,label)
keras.preprocessing.sequence.make_sampling_table(size,sampling_factor=1e-05)
keras.preprocessing.sequence.pad_sequences(sequences,maxlen=None,dtype='int32',padding='pre',truncating='pre',value=0.0)
keras.preprocessing.sequence.skipgrams(sequence,vocabulary_size,window_size=4,negative_samples=1.0,shuffle=True,categorical=False,sampling_table=None,seed=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/datasets/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/datasets/cifar.py----------------------------------------
A:keras.datasets.cifar.d->six.moves.cPickle.load(f, encoding='bytes')
A:keras.datasets.cifar.data->data.reshape(data.shape[0], 3, 32, 32).reshape(data.shape[0], 3, 32, 32)
keras.datasets.cifar.load_batch(fpath,label_key='labels')


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/datasets/reuters.py----------------------------------------
A:keras.datasets.reuters.num_words->max([max(x) for x in xs])
A:keras.datasets.reuters.path->get_file(path, origin='https://s3.amazonaws.com/text-datasets/reuters_word_index.json', file_hash='4d44cc38712099c9e383dc6e5f11a921')
A:keras.datasets.reuters.indices->numpy.arange(len(xs))
A:keras.datasets.reuters.(xs, labels)->_remove_long_seq(maxlen, xs, labels)
A:keras.datasets.reuters.idx->int(len(xs) * (1 - test_split))
A:keras.datasets.reuters.f->open(path)
A:keras.datasets.reuters.data->json.load(f)
keras.datasets.reuters.get_word_index(path='reuters_word_index.json')
keras.datasets.reuters.load_data(path='reuters.npz',num_words=None,skip_top=0,maxlen=None,test_split=0.2,seed=113,start_char=1,oov_char=2,index_from=3,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/datasets/fashion_mnist.py----------------------------------------
A:keras.datasets.fashion_mnist.dirname->os.path.join('datasets', 'fashion-mnist')
A:keras.datasets.fashion_mnist.y_train->numpy.frombuffer(lbpath.read(), np.uint8, offset=8)
A:keras.datasets.fashion_mnist.x_train->numpy.frombuffer(imgpath.read(), np.uint8, offset=16).reshape(len(y_train), 28, 28)
A:keras.datasets.fashion_mnist.y_test->numpy.frombuffer(lbpath.read(), np.uint8, offset=8)
A:keras.datasets.fashion_mnist.x_test->numpy.frombuffer(imgpath.read(), np.uint8, offset=16).reshape(len(y_test), 28, 28)
keras.datasets.fashion_mnist.load_data()


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/datasets/cifar100.py----------------------------------------
A:keras.datasets.cifar100.path->get_file(dirname, origin=origin, untar=True)
A:keras.datasets.cifar100.fpath->os.path.join(path, 'test')
A:keras.datasets.cifar100.(x_train, y_train)->load_batch(fpath, label_key=label_mode + '_labels')
A:keras.datasets.cifar100.(x_test, y_test)->load_batch(fpath, label_key=label_mode + '_labels')
A:keras.datasets.cifar100.y_train->numpy.reshape(y_train, (len(y_train), 1))
A:keras.datasets.cifar100.y_test->numpy.reshape(y_test, (len(y_test), 1))
A:keras.datasets.cifar100.x_train->x_train.transpose(0, 2, 3, 1).transpose(0, 2, 3, 1)
A:keras.datasets.cifar100.x_test->x_test.transpose(0, 2, 3, 1).transpose(0, 2, 3, 1)
keras.datasets.cifar100.load_data(label_mode='fine')


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/datasets/mnist.py----------------------------------------
A:keras.datasets.mnist.path->get_file(path, origin='https://s3.amazonaws.com/img-datasets/mnist.npz', file_hash='8a61469f7ea1b51cbae51d4f78837e45')
A:keras.datasets.mnist.f->numpy.load(path)
keras.datasets.mnist.load_data(path='mnist.npz')


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/datasets/boston_housing.py----------------------------------------
A:keras.datasets.boston_housing.path->get_file(path, origin='https://s3.amazonaws.com/keras-datasets/boston_housing.npz', file_hash='f553886a1f8d56431e820c5b82552d9d95cfcb96d1e678153f8839538947dff5')
A:keras.datasets.boston_housing.f->numpy.load(path)
A:keras.datasets.boston_housing.indices->numpy.arange(len(x))
A:keras.datasets.boston_housing.x_train->numpy.array(x[:int(len(x) * (1 - test_split))])
A:keras.datasets.boston_housing.y_train->numpy.array(y[:int(len(x) * (1 - test_split))])
A:keras.datasets.boston_housing.x_test->numpy.array(x[int(len(x) * (1 - test_split)):])
A:keras.datasets.boston_housing.y_test->numpy.array(y[int(len(x) * (1 - test_split)):])
keras.datasets.boston_housing.load_data(path='boston_housing.npz',test_split=0.2,seed=113)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/datasets/imdb.py----------------------------------------
A:keras.datasets.imdb.num_words->max([max(x) for x in xs])
A:keras.datasets.imdb.path->get_file(path, origin='https://s3.amazonaws.com/text-datasets/imdb_word_index.json', file_hash='bfafd718b763782e994055a2d397834f')
A:keras.datasets.imdb.indices->numpy.arange(len(x_test))
A:keras.datasets.imdb.xs->numpy.concatenate([x_train, x_test])
A:keras.datasets.imdb.labels->numpy.concatenate([labels_train, labels_test])
A:keras.datasets.imdb.(xs, labels)->_remove_long_seq(maxlen, xs, labels)
A:keras.datasets.imdb.idx->len(x_train)
keras.datasets.imdb.get_word_index(path='imdb_word_index.json')
keras.datasets.imdb.load_data(path='imdb.npz',num_words=None,skip_top=0,maxlen=None,seed=113,start_char=1,oov_char=2,index_from=3,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/datasets/cifar10.py----------------------------------------
A:keras.datasets.cifar10.path->get_file(dirname, origin=origin, untar=True)
A:keras.datasets.cifar10.x_train->x_train.transpose(0, 2, 3, 1).transpose(0, 2, 3, 1)
A:keras.datasets.cifar10.y_train->numpy.reshape(y_train, (len(y_train), 1))
A:keras.datasets.cifar10.fpath->os.path.join(path, 'test_batch')
A:keras.datasets.cifar10.(x_train[(i - 1) * 10000:i * 10000, :, :, :], y_train[(i - 1) * 10000:i * 10000])->load_batch(fpath)
A:keras.datasets.cifar10.(x_test, y_test)->load_batch(fpath)
A:keras.datasets.cifar10.y_test->numpy.reshape(y_test, (len(y_test), 1))
A:keras.datasets.cifar10.x_test->x_test.transpose(0, 2, 3, 1).transpose(0, 2, 3, 1)
keras.datasets.cifar10.load_data()


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/engine/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/engine/training.py----------------------------------------
A:keras.engine.training.set_x->set_of_lengths(inputs)
A:keras.engine.training.set_y->set_of_lengths(targets)
A:keras.engine.training.set_w->set_of_lengths(weights)
A:keras.engine.training.output_metrics->metrics.get(name, [])
A:keras.engine.training.batch_count->int(len(index_array) / batch_size)
A:keras.engine.training.index_array->numpy.arange(num_samples)
A:keras.engine.training.start->start.tolist().tolist()
A:keras.engine.training.score_array->K.mean(score_array, axis=list(range(weight_ndim, ndim)))
A:keras.engine.training.mask->K.cast(mask, K.floatx())
A:keras.engine.training.ndim->K.ndim(score_array)
A:keras.engine.training.weight_ndim->K.ndim(weights)
A:keras.engine.training.y_classes->numpy.reshape(y, y.shape[0])
A:keras.engine.training.weights->numpy.asarray([class_weight[cls] for cls in y_classes if cls in class_weight])
A:keras.engine.training.existing_classes->set(y_classes)
A:keras.engine.training.existing_class_weight->set(class_weight.keys())
A:keras.engine.training.self.optimizer->optimizers.get(optimizer)
A:keras.engine.training.loss_function->losses.get(loss)
A:keras.engine.training.masks->self.compute_mask(self.inputs, mask=None)
A:keras.engine.training.target->K.placeholder(ndim=len(shape), name=name + '_target', sparse=K.is_sparse(self.outputs[i]), dtype=K.dtype(self.outputs[i]))
A:keras.engine.training.weight->K.placeholder(ndim=1, name=name + '_sample_weights')
A:keras.engine.training.output_loss->weighted_loss(y_true, y_pred, sample_weight, mask)
A:keras.engine.training.nested_metrics->_collect_metrics(metrics, self.output_names)
A:keras.engine.training.nested_weighted_metrics->_collect_metrics(weighted_metrics, self.output_names)
A:keras.engine.training.weighted_metric_fn->_weighted_masked_objective(metric_fn)
A:keras.engine.training.metric_fn->metrics_module.get(metric)
A:keras.engine.training.metric_result->weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])
A:keras.engine.training.training_updates->self.optimizer.get_updates(params=self._collected_trainable_weights, loss=self.total_loss)
A:keras.engine.training.self.train_function->K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=updates, name='train_function', **self._function_kwargs)
A:keras.engine.training.self.test_function->K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=self.state_updates + self.metrics_updates, name='test_function', **self._function_kwargs)
A:keras.engine.training.kwargs->getattr(self, '_function_kwargs', {})
A:keras.engine.training.self.predict_function->K.function(inputs, self.outputs, updates=self.state_updates, name='predict_function', **kwargs)
A:keras.engine.training.num_train_samples->self._check_num_samples(ins, batch_size, steps_per_epoch, 'steps_per_epoch')
A:keras.engine.training.self.history->cbks.History()
A:keras.engine.training.callbacks->cbks.CallbackList(_callbacks)
A:keras.engine.training.outs->self.predict_on_batch(x)
A:keras.engine.training.val_outs->self.evaluate(val_x, val_y, batch_size=batch_size, sample_weight=val_sample_weights, verbose=0)
A:keras.engine.training.batches->_make_batches(num_samples, batch_size)
A:keras.engine.training.ins_batch->_slice_arrays(ins, batch_ids)
A:keras.engine.training.batch_logs['size']->len(batch_ids)
A:keras.engine.training.ins_batch[i]->ins_batch[i].toarray().toarray()
A:keras.engine.training.num_samples->self._check_num_samples(ins, batch_size, steps, 'steps')
A:keras.engine.training.progbar->Progbar(target=steps)
A:keras.engine.training.batch_outs->f(ins_batch)
A:keras.engine.training.x->_standardize_input_data(x, self._feed_input_names, self._feed_input_shapes)
A:keras.engine.training.y->_standardize_input_data(y, self._feed_output_names, output_shapes, check_batch_axis=False, exception_prefix='target')
A:keras.engine.training.sample_weights->_standardize_sample_weights(sample_weight, self._feed_output_names)
A:keras.engine.training.class_weights->_standardize_class_weights(class_weight, self._feed_output_names)
A:keras.engine.training.epochs->getattr(self, '_function_kwargs', {}).pop('nb_epoch')
A:keras.engine.training.(x, y, sample_weights)->self._standardize_user_data(x, y, sample_weight=sample_weight)
A:keras.engine.training.(val_x, val_y, val_sample_weights)->self._standardize_user_data(val_x, val_y, val_sample_weight)
A:keras.engine.training.split_at->int(len(x[0]) * (1.0 - validation_split))
A:keras.engine.training.callback_metrics->copy.copy(out_labels)
A:keras.engine.training.outputs->self.predict_function(ins)
A:keras.engine.training.do_validation->bool(validation_data)
A:keras.engine.training.is_sequence->isinstance(generator, Sequence)
A:keras.engine.training.steps_per_epoch->len(generator)
A:keras.engine.training.val_enqueuer->GeneratorEnqueuer(validation_data, use_multiprocessing=use_multiprocessing, wait_time=wait_time)
A:keras.engine.training.validation_steps->len(validation_data)
A:keras.engine.training.validation_generator->GeneratorEnqueuer(validation_data, use_multiprocessing=use_multiprocessing, wait_time=wait_time).get()
A:keras.engine.training.enqueuer->GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)
A:keras.engine.training.output_generator->GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time).get()
A:keras.engine.training.generator_output->next(output_generator)
A:keras.engine.training.steps->len(generator)
keras.engine.Model(Container)
keras.engine.Model._check_num_samples(self,ins,batch_size=None,steps=None,steps_name='steps')
keras.engine.Model._check_trainable_weights_consistency(self)
keras.engine.Model._fit_loop(self,f,ins,out_labels=None,batch_size=None,epochs=100,verbose=1,callbacks=None,val_f=None,val_ins=None,shuffle=True,callback_metrics=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None)
keras.engine.Model._make_predict_function(self)
keras.engine.Model._make_test_function(self)
keras.engine.Model._make_train_function(self)
keras.engine.Model._predict_loop(self,f,ins,batch_size=32,verbose=0,steps=None)
keras.engine.Model._standardize_user_data(self,x,y,sample_weight=None,class_weight=None,check_array_lengths=True,batch_size=None)
keras.engine.Model._test_loop(self,f,ins,batch_size=None,verbose=0,steps=None)
keras.engine.Model.compile(self,optimizer,loss=None,metrics=None,loss_weights=None,sample_weight_mode=None,weighted_metrics=None,target_tensors=None,**kwargs)
keras.engine.Model.evaluate(self,x=None,y=None,batch_size=None,verbose=1,sample_weight=None,steps=None)
keras.engine.Model.evaluate_generator(self,generator,steps=None,max_queue_size=10,workers=1,use_multiprocessing=False)
keras.engine.Model.fit(self,x=None,y=None,batch_size=None,epochs=1,verbose=1,callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None,**kwargs)
keras.engine.Model.fit_generator(self,generator,steps_per_epoch=None,epochs=1,verbose=1,callbacks=None,validation_data=None,validation_steps=None,class_weight=None,max_queue_size=10,workers=1,use_multiprocessing=False,shuffle=True,initial_epoch=0)
keras.engine.Model.predict(self,x,batch_size=None,verbose=0,steps=None)
keras.engine.Model.predict_generator(self,generator,steps=None,max_queue_size=10,workers=1,use_multiprocessing=False,verbose=0)
keras.engine.Model.predict_on_batch(self,x)
keras.engine.Model.test_on_batch(self,x,y,sample_weight=None)
keras.engine.Model.train_on_batch(self,x,y,sample_weight=None,class_weight=None)
keras.engine.training.Model(Container)
keras.engine.training.Model._check_num_samples(self,ins,batch_size=None,steps=None,steps_name='steps')
keras.engine.training.Model._check_trainable_weights_consistency(self)
keras.engine.training.Model._fit_loop(self,f,ins,out_labels=None,batch_size=None,epochs=100,verbose=1,callbacks=None,val_f=None,val_ins=None,shuffle=True,callback_metrics=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None)
keras.engine.training.Model._make_predict_function(self)
keras.engine.training.Model._make_test_function(self)
keras.engine.training.Model._make_train_function(self)
keras.engine.training.Model._predict_loop(self,f,ins,batch_size=32,verbose=0,steps=None)
keras.engine.training.Model._standardize_user_data(self,x,y,sample_weight=None,class_weight=None,check_array_lengths=True,batch_size=None)
keras.engine.training.Model._test_loop(self,f,ins,batch_size=None,verbose=0,steps=None)
keras.engine.training.Model.compile(self,optimizer,loss=None,metrics=None,loss_weights=None,sample_weight_mode=None,weighted_metrics=None,target_tensors=None,**kwargs)
keras.engine.training.Model.evaluate(self,x=None,y=None,batch_size=None,verbose=1,sample_weight=None,steps=None)
keras.engine.training.Model.evaluate_generator(self,generator,steps=None,max_queue_size=10,workers=1,use_multiprocessing=False)
keras.engine.training.Model.fit(self,x=None,y=None,batch_size=None,epochs=1,verbose=1,callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None,**kwargs)
keras.engine.training.Model.fit_generator(self,generator,steps_per_epoch=None,epochs=1,verbose=1,callbacks=None,validation_data=None,validation_steps=None,class_weight=None,max_queue_size=10,workers=1,use_multiprocessing=False,shuffle=True,initial_epoch=0)
keras.engine.training.Model.predict(self,x,batch_size=None,verbose=0,steps=None)
keras.engine.training.Model.predict_generator(self,generator,steps=None,max_queue_size=10,workers=1,use_multiprocessing=False,verbose=0)
keras.engine.training.Model.predict_on_batch(self,x)
keras.engine.training.Model.test_on_batch(self,x,y,sample_weight=None)
keras.engine.training.Model.train_on_batch(self,x,y,sample_weight=None,class_weight=None)
keras.engine.training._batch_shuffle(index_array,batch_size)
keras.engine.training._check_array_lengths(inputs,targets,weights=None)
keras.engine.training._check_loss_and_target_compatibility(targets,loss_fns,output_shapes)
keras.engine.training._collect_metrics(metrics,output_names)
keras.engine.training._make_batches(size,batch_size)
keras.engine.training._slice_arrays(arrays,start=None,stop=None)
keras.engine.training._standardize_class_weights(class_weight,output_names)
keras.engine.training._standardize_input_data(data,names,shapes=None,check_batch_axis=True,exception_prefix='')
keras.engine.training._standardize_sample_or_class_weights(x_weight,output_names,weight_type)
keras.engine.training._standardize_sample_weights(sample_weight,output_names)
keras.engine.training._standardize_weights(y,sample_weight=None,class_weight=None,sample_weight_mode=None)
keras.engine.training._weighted_masked_objective(fn)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/engine/topology.py----------------------------------------
A:keras.engine.topology.self.ndim->len(shape)
A:keras.engine.topology.name->str(w.name)
A:keras.engine.topology.self.trainable->kwargs.get('trainable', True)
A:keras.engine.topology.batch_input_shape->tuple(batch_input_shape)
A:keras.engine.topology.dtype->K.floatx()
A:keras.engine.topology.trainable->getattr(self, 'trainable', True)
A:keras.engine.topology.initializer->initializers.get(initializer)
A:keras.engine.topology.weight->K.variable(initializer(shape), dtype=dtype, name=name, constraint=constraint)
A:keras.engine.topology.inputs->_to_list(inputs)
A:keras.engine.topology.input_spec->_to_list(self.input_spec)
A:keras.engine.topology.ndim->K.ndim(x)
A:keras.engine.topology.x_shape->K.int_shape(x)
A:keras.engine.topology.previous_mask->_collect_previous_mask(inputs)
A:keras.engine.topology.user_kwargs->copy.copy(kwargs)
A:keras.engine.topology.input_shape->_collect_input_shape(inputs)
A:keras.engine.topology.output->self.call(inputs, **kwargs)
A:keras.engine.topology.output_mask->self.compute_mask(inputs, previous_mask)
A:keras.engine.topology.output_ls->_to_list(output)
A:keras.engine.topology.inputs_ls->_to_list(inputs)
A:keras.engine.topology.x->K.identity(x)
A:keras.engine.topology.output_shape->deserialize_layer(layer_data, custom_objects=custom_objects).compute_output_shape(input_shapes)
A:keras.engine.topology.input_tensors->_to_list(input_tensors)
A:keras.engine.topology.output_tensors->_to_list(layer.call(computed_tensors, **kwargs))
A:keras.engine.topology.input_masks->_to_list(input_masks)
A:keras.engine.topology.output_masks->_to_list(layer.compute_mask(computed_tensors, computed_masks))
A:keras.engine.topology.input_shapes->_to_list(input_shape)
A:keras.engine.topology.output_shapes->_to_list(output_shape)
A:keras.engine.topology.uses_lp->any([getattr(x, '_uses_learning_phase', False) for x in input_tensors])
A:keras.engine.topology.values->getattr(self._inbound_nodes[node_index], attr)
A:keras.engine.topology.all_input_shapes->set([str(node.input_shapes) for node in self._inbound_nodes])
A:keras.engine.topology.all_output_shapes->set([str(node.output_shapes) for node in self._inbound_nodes])
A:keras.engine.topology.losses->_to_list(losses)
A:keras.engine.topology.inputs_hash->_object_list_uid(inputs)
A:keras.engine.topology.updates->_to_list(updates)
A:keras.engine.topology.param_values->K.batch_get_value(params)
A:keras.engine.topology.input_tensor->K.placeholder(shape=batch_input_shape, dtype=dtype, sparse=self.sparse, name=self.name)
A:keras.engine.topology.input_layer->InputLayer(batch_input_shape=batch_shape, name=name, dtype=dtype, sparse=sparse, input_tensor=tensor)
A:keras.engine.topology.prefix->self.__class__.__name__.lower()
A:keras.engine.topology.self.inputs->list(inputs)
A:keras.engine.topology.self.outputs->list(outputs)
A:keras.engine.topology.mask_cache_key->','.join([str(id(x)) for x in self.inputs])
A:keras.engine.topology.container_nodes->set()
A:keras.engine.topology.layer_indices[layer]->len(layer_indices)
A:keras.engine.topology.finished_nodes->set()
A:keras.engine.topology.nodes_in_progress->set()
A:keras.engine.topology.depth->max(depth, previous_depth)
A:keras.engine.topology.previous_depth->nodes_depths.get(inbound_node, 0)
A:keras.engine.topology.nodes_depths[inbound_node]->max(depth + 1, previous_depth)
A:keras.engine.topology.depth_keys->list(self._nodes_by_depth.keys())
A:keras.engine.topology.node_key->self._node_key(layer, node_index)
A:keras.engine.topology.unique_tensors->list(set((x for x in losses if not isinstance(x, (float, int)))))
A:keras.engine.topology.num_param->len(layer.weights)
A:keras.engine.topology.masks->_to_list(mask)
A:keras.engine.topology.cache_key->','.join([str(x) for x in input_shapes])
A:keras.engine.topology.(output_tensors, _, _)->self.run_internal_graph(inputs, masks)
A:keras.engine.topology.(_, output_masks, _)->self.run_internal_graph(inputs, masks)
A:keras.engine.topology.node_index->deserialize_layer(layer_data, custom_objects=custom_objects)._inbound_nodes.index(node)
A:keras.engine.topology.shapes->_to_list(layer.compute_output_shape([x._keras_shape for x in computed_tensors]))
A:keras.engine.topology.uses_learning_phase->any([x._uses_learning_phase for x in computed_tensors])
A:keras.engine.topology.layer_config->deserialize_layer(layer_data, custom_objects=custom_objects).get_config()
A:keras.engine.topology.new_node_index->node_conversion_map.get(self._node_key(inbound_layer, node_index), 0)
A:keras.engine.topology.layer->deserialize_layer(layer_data, custom_objects=custom_objects)
A:keras.engine.topology.proceed->ask_to_proceed_with_overwrite(filepath)
A:keras.engine.topology.config->self.get_config()
A:keras.engine.topology.model_config->self._updated_config()
A:keras.engine.topology.previous_sources->get_source_inputs(x, layer, node_index)
A:keras.engine.topology.object_list->_to_list(object_list)
A:keras.engine.topology.intermediate->re.sub('(.)([A-Z][a-z0-9]+)', '\\1_\\2', name)
A:keras.engine.topology.insecure->re.sub('([a-z])([A-Z])', '\\1_\\2', intermediate).lower()
A:keras.engine.topology.f.attrs['backend']->K.backend().encode('utf8')
A:keras.engine.topology.f.attrs['keras_version']->str(keras_version).encode('utf8')
A:keras.engine.topology.g->f.create_group(layer.name)
A:keras.engine.topology.weight_values->preprocess_weights_for_loading(layer, weight_values, original_keras_version, original_backend, reshape=reshape)
A:keras.engine.topology.param_dset->f.create_group(layer.name).create_dataset(name, val.shape, dtype=val.dtype)
A:keras.engine.topology.forward_weights->preprocess_weights_for_loading(layer.forward_layer, weights[:num_weights_per_layer], original_keras_version, original_backend)
A:keras.engine.topology.backward_weights->preprocess_weights_for_loading(layer.backward_layer, weights[num_weights_per_layer:], original_keras_version, original_backend)
A:keras.engine.topology.weights->preprocess_weights_for_loading(layer.layer, weights, original_keras_version, original_backend)
A:keras.engine.topology.weights[0]->numpy.concatenate(kernels, axis=1)
A:keras.engine.topology.kernel->numpy.transpose(kernel, (2, 3, 1, 0))
A:keras.engine.topology.recurrent_kernel->numpy.transpose(recurrent_kernel, (2, 3, 1, 0))
A:keras.engine.topology.bias->numpy.concatenate([weights[2], weights[8], weights[5], weights[11]], axis=-1)
A:keras.engine.topology.num_weights->len([l for l in sublayer.weights if l not in sublayer.trainable_weights])
A:keras.engine.topology.layer_weights_shape->K.int_shape(layer.weights[0])
A:keras.engine.topology.weights[1]->numpy.concatenate(recurrent_kernels, axis=1)
A:keras.engine.topology.kernels->numpy.split(weights[0], 4, axis=1)
A:keras.engine.topology.recurrent_kernels->numpy.split(weights[1], 4, axis=1)
A:keras.engine.topology.original_keras_version->f.attrs['keras_version'].decode('utf8')
A:keras.engine.topology.original_backend->f.attrs['backend'].decode('utf8')
keras.engine.Input(shape=None,batch_shape=None,name=None,dtype=None,sparse=False,tensor=None)
keras.engine.InputLayer(self,input_shape=None,batch_size=None,batch_input_shape=None,dtype=None,input_tensor=None,sparse=False,name=None)
keras.engine.InputLayer.get_config(self)
keras.engine.InputSpec(self,dtype=None,shape=None,ndim=None,max_ndim=None,min_ndim=None,axes=None)
keras.engine.InputSpec.__repr__(self)
keras.engine.Layer(self,**kwargs)
keras.engine.Layer._add_inbound_node(self,input_tensors,output_tensors,input_masks,output_masks,input_shapes,output_shapes,arguments=None)
keras.engine.Layer._get_node_attribute_at_index(self,node_index,attr,attr_name)
keras.engine.Layer._node_key(layer,node_index)
keras.engine.Layer.add_loss(self,losses,inputs=None)
keras.engine.Layer.add_update(self,updates,inputs=None)
keras.engine.Layer.add_weight(self,name,shape,dtype=None,initializer=None,regularizer=None,trainable=True,constraint=None)
keras.engine.Layer.assert_input_compatibility(self,inputs)
keras.engine.Layer.build(self,input_shape)
keras.engine.Layer.built(self)
keras.engine.Layer.built(self,value)
keras.engine.Layer.call(self,inputs,**kwargs)
keras.engine.Layer.compute_mask(self,inputs,mask=None)
keras.engine.Layer.compute_output_shape(self,input_shape)
keras.engine.Layer.count_params(self)
keras.engine.Layer.from_config(cls,config)
keras.engine.Layer.get_config(self)
keras.engine.Layer.get_input_at(self,node_index)
keras.engine.Layer.get_input_mask_at(self,node_index)
keras.engine.Layer.get_input_shape_at(self,node_index)
keras.engine.Layer.get_losses_for(self,inputs)
keras.engine.Layer.get_output_at(self,node_index)
keras.engine.Layer.get_output_mask_at(self,node_index)
keras.engine.Layer.get_output_shape_at(self,node_index)
keras.engine.Layer.get_updates_for(self,inputs)
keras.engine.Layer.get_weights(self)
keras.engine.Layer.input(self)
keras.engine.Layer.input_mask(self)
keras.engine.Layer.input_shape(self)
keras.engine.Layer.losses(self)
keras.engine.Layer.non_trainable_weights(self)
keras.engine.Layer.non_trainable_weights(self,weights)
keras.engine.Layer.output(self)
keras.engine.Layer.output_mask(self)
keras.engine.Layer.output_shape(self)
keras.engine.Layer.set_weights(self,weights)
keras.engine.Layer.trainable_weights(self)
keras.engine.Layer.trainable_weights(self,weights)
keras.engine.Layer.updates(self)
keras.engine.Layer.weights(self)
keras.engine.get_source_inputs(tensor,layer=None,node_index=None)
keras.engine.topology.Container(self,inputs,outputs,name=None)
keras.engine.topology.Container.__init__(self,inputs,outputs,name=None)
keras.engine.topology.Container._updated_config(self)
keras.engine.topology.Container.call(self,inputs,mask=None)
keras.engine.topology.Container.compute_mask(self,inputs,mask)
keras.engine.topology.Container.compute_output_shape(self,input_shape)
keras.engine.topology.Container.from_config(cls,config,custom_objects=None)
keras.engine.topology.Container.get_config(self)
keras.engine.topology.Container.get_layer(self,name=None,index=None)
keras.engine.topology.Container.get_weights(self)
keras.engine.topology.Container.input_spec(self)
keras.engine.topology.Container.load_weights(self,filepath,by_name=False,skip_mismatch=False,reshape=False)
keras.engine.topology.Container.losses(self)
keras.engine.topology.Container.non_trainable_weights(self)
keras.engine.topology.Container.reset_states(self)
keras.engine.topology.Container.run_internal_graph(self,inputs,masks=None)
keras.engine.topology.Container.save(self,filepath,overwrite=True,include_optimizer=True)
keras.engine.topology.Container.save_weights(self,filepath,overwrite=True)
keras.engine.topology.Container.set_weights(self,weights)
keras.engine.topology.Container.state_updates(self)
keras.engine.topology.Container.stateful(self)
keras.engine.topology.Container.summary(self,line_length=None,positions=None,print_fn=None)
keras.engine.topology.Container.to_json(self,**kwargs)
keras.engine.topology.Container.to_yaml(self,**kwargs)
keras.engine.topology.Container.trainable_weights(self)
keras.engine.topology.Container.updates(self)
keras.engine.topology.Container.uses_learning_phase(self)
keras.engine.topology.Input(shape=None,batch_shape=None,name=None,dtype=None,sparse=False,tensor=None)
keras.engine.topology.InputLayer(self,input_shape=None,batch_size=None,batch_input_shape=None,dtype=None,input_tensor=None,sparse=False,name=None)
keras.engine.topology.InputLayer.__init__(self,input_shape=None,batch_size=None,batch_input_shape=None,dtype=None,input_tensor=None,sparse=False,name=None)
keras.engine.topology.InputLayer.get_config(self)
keras.engine.topology.InputSpec(self,dtype=None,shape=None,ndim=None,max_ndim=None,min_ndim=None,axes=None)
keras.engine.topology.InputSpec.__init__(self,dtype=None,shape=None,ndim=None,max_ndim=None,min_ndim=None,axes=None)
keras.engine.topology.InputSpec.__repr__(self)
keras.engine.topology.Layer(self,**kwargs)
keras.engine.topology.Layer.__init__(self,**kwargs)
keras.engine.topology.Layer._add_inbound_node(self,input_tensors,output_tensors,input_masks,output_masks,input_shapes,output_shapes,arguments=None)
keras.engine.topology.Layer._get_node_attribute_at_index(self,node_index,attr,attr_name)
keras.engine.topology.Layer._node_key(layer,node_index)
keras.engine.topology.Layer.add_loss(self,losses,inputs=None)
keras.engine.topology.Layer.add_update(self,updates,inputs=None)
keras.engine.topology.Layer.add_weight(self,name,shape,dtype=None,initializer=None,regularizer=None,trainable=True,constraint=None)
keras.engine.topology.Layer.assert_input_compatibility(self,inputs)
keras.engine.topology.Layer.build(self,input_shape)
keras.engine.topology.Layer.built(self)
keras.engine.topology.Layer.built(self,value)
keras.engine.topology.Layer.call(self,inputs,**kwargs)
keras.engine.topology.Layer.compute_mask(self,inputs,mask=None)
keras.engine.topology.Layer.compute_output_shape(self,input_shape)
keras.engine.topology.Layer.count_params(self)
keras.engine.topology.Layer.from_config(cls,config)
keras.engine.topology.Layer.get_config(self)
keras.engine.topology.Layer.get_input_at(self,node_index)
keras.engine.topology.Layer.get_input_mask_at(self,node_index)
keras.engine.topology.Layer.get_input_shape_at(self,node_index)
keras.engine.topology.Layer.get_losses_for(self,inputs)
keras.engine.topology.Layer.get_output_at(self,node_index)
keras.engine.topology.Layer.get_output_mask_at(self,node_index)
keras.engine.topology.Layer.get_output_shape_at(self,node_index)
keras.engine.topology.Layer.get_updates_for(self,inputs)
keras.engine.topology.Layer.get_weights(self)
keras.engine.topology.Layer.input(self)
keras.engine.topology.Layer.input_mask(self)
keras.engine.topology.Layer.input_shape(self)
keras.engine.topology.Layer.losses(self)
keras.engine.topology.Layer.non_trainable_weights(self)
keras.engine.topology.Layer.non_trainable_weights(self,weights)
keras.engine.topology.Layer.output(self)
keras.engine.topology.Layer.output_mask(self)
keras.engine.topology.Layer.output_shape(self)
keras.engine.topology.Layer.set_weights(self,weights)
keras.engine.topology.Layer.trainable_weights(self)
keras.engine.topology.Layer.trainable_weights(self,weights)
keras.engine.topology.Layer.updates(self)
keras.engine.topology.Layer.weights(self)
keras.engine.topology.Node(self,outbound_layer,inbound_layers,node_indices,tensor_indices,input_tensors,output_tensors,input_masks,output_masks,input_shapes,output_shapes,arguments=None)
keras.engine.topology.Node.__init__(self,outbound_layer,inbound_layers,node_indices,tensor_indices,input_tensors,output_tensors,input_masks,output_masks,input_shapes,output_shapes,arguments=None)
keras.engine.topology.Node.get_config(self)
keras.engine.topology._collect_input_shape(input_tensors)
keras.engine.topology._collect_previous_mask(input_tensors)
keras.engine.topology._is_all_none(iterable_or_element)
keras.engine.topology._need_convert_kernel(original_backend)
keras.engine.topology._object_list_uid(object_list)
keras.engine.topology._to_list(x)
keras.engine.topology._to_snake_case(name)
keras.engine.topology.get_source_inputs(tensor,layer=None,node_index=None)
keras.engine.topology.load_weights_from_hdf5_group(f,layers,reshape=False)
keras.engine.topology.load_weights_from_hdf5_group_by_name(f,layers,skip_mismatch=False,reshape=False)
keras.engine.topology.preprocess_weights_for_loading(layer,weights,original_keras_version=None,original_backend=None,reshape=False)
keras.engine.topology.save_weights_to_hdf5_group(f,layers)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/applications/inception_resnet_v2.py----------------------------------------
A:keras.applications.inception_resnet_v2.x->GlobalMaxPooling2D()(x)
A:keras.applications.inception_resnet_v2.branch_0->conv2d_bn(branch_0, 384, 3, strides=2, padding='valid')
A:keras.applications.inception_resnet_v2.branch_1->conv2d_bn(branch_1, 288, 3, strides=2, padding='valid')
A:keras.applications.inception_resnet_v2.branch_2->conv2d_bn(branch_2, 320, 3, strides=2, padding='valid')
A:keras.applications.inception_resnet_v2.mixed->Concatenate(axis=channel_axis, name=block_name + '_mixed')(branches)
A:keras.applications.inception_resnet_v2.up->conv2d_bn(mixed, K.int_shape(x)[channel_axis], 1, activation=None, use_bias=True, name=block_name + '_conv')
A:keras.applications.inception_resnet_v2.input_shape->_obtain_input_shape(input_shape, default_size=299, min_size=139, data_format=K.image_data_format(), require_flatten=False, weights=weights)
A:keras.applications.inception_resnet_v2.img_input->Input(tensor=input_tensor, shape=input_shape)
A:keras.applications.inception_resnet_v2.branch_pool->MaxPooling2D(3, strides=2, padding='valid')(x)
A:keras.applications.inception_resnet_v2.inputs->get_source_inputs(input_tensor)
A:keras.applications.inception_resnet_v2.model->Model(inputs, x, name='inception_resnet_v2')
A:keras.applications.inception_resnet_v2.weights_path->get_file(fname, BASE_WEIGHT_URL + fname, cache_subdir='models', file_hash='d19885ff4a710c122648d3b5c3b684e4')
keras.applications.InceptionResNetV2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
keras.applications.inception_resnet_v2.InceptionResNetV2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
keras.applications.inception_resnet_v2.conv2d_bn(x,filters,kernel_size,strides=1,padding='same',activation='relu',use_bias=False,name=None)
keras.applications.inception_resnet_v2.inception_resnet_block(x,scale,block_type,block_idx,activation='relu')
keras.applications.inception_resnet_v2.preprocess_input(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/applications/nasnet.py----------------------------------------
A:keras.applications.nasnet.input_shape->_obtain_input_shape(input_shape, default_size=default_size, min_size=32, data_format=K.image_data_format(), require_flatten=include_top or weights, weights=weights)
A:keras.applications.nasnet.img_input->Input(tensor=input_tensor, shape=input_shape)
A:keras.applications.nasnet.x->concatenate([x2, x3, x4, x5], axis=channel_dim, name='reduction_concat_%s' % block_id)
A:keras.applications.nasnet.(x, p)->_normal_a_cell(x, p, filters * filter_multiplier ** 2, block_id='%d' % (2 * num_blocks + i + 1))
A:keras.applications.nasnet.(x, p0)->_reduction_a_cell(x, p, filters * filter_multiplier ** 2, block_id='reduce_%d' % (2 * num_blocks))
A:keras.applications.nasnet.inputs->get_source_inputs(input_tensor)
A:keras.applications.nasnet.model->Model(inputs, x, name='NASNet')
A:keras.applications.nasnet.weights_file->get_file(model_name, weight_path, cache_subdir='models')
A:keras.applications.nasnet.ip_shape->K.int_shape(ip)
A:keras.applications.nasnet.p_shape->K.int_shape(p)
A:keras.applications.nasnet.p->_adjust_block(p, ip, filters, block_id)
A:keras.applications.nasnet.p1->Conv2D(filters // 2, (1, 1), padding='same', use_bias=False, name='adjust_conv_1_%s' % block_id, kernel_initializer='he_normal')(p1)
A:keras.applications.nasnet.p2->Conv2D(filters // 2, (1, 1), padding='same', use_bias=False, name='adjust_conv_2_%s' % block_id, kernel_initializer='he_normal')(p2)
A:keras.applications.nasnet.h->BatchNormalization(axis=channel_dim, momentum=0.9997, epsilon=0.001, name='reduction_bn_1_%s' % block_id)(h)
A:keras.applications.nasnet.x1_1->_separable_conv_block(h, filters, (5, 5), strides=(2, 2), block_id='reduction_left1_%s' % block_id)
A:keras.applications.nasnet.x1_2->_separable_conv_block(p, filters, (7, 7), strides=(2, 2), block_id='reduction_1_%s' % block_id)
A:keras.applications.nasnet.x1->add([x1_1, x1_2], name='reduction_add_1_%s' % block_id)
A:keras.applications.nasnet.x2_1->MaxPooling2D((3, 3), strides=(2, 2), padding='same', name='reduction_left2_%s' % block_id)(h)
A:keras.applications.nasnet.x2_2->_separable_conv_block(p, filters, (7, 7), strides=(2, 2), block_id='reduction_right2_%s' % block_id)
A:keras.applications.nasnet.x2->add([x2_1, x2_2], name='reduction_add_2_%s' % block_id)
A:keras.applications.nasnet.x3->add([x3_1, x3_2], name='reduction_add3_%s' % block_id)
A:keras.applications.nasnet.x4_1->AveragePooling2D((3, 3), strides=(1, 1), padding='same', name='normal_left4_%s' % block_id)(p)
A:keras.applications.nasnet.x4_2->AveragePooling2D((3, 3), strides=(1, 1), padding='same', name='normal_right4_%s' % block_id)(p)
A:keras.applications.nasnet.x4->add([x2, x4])
A:keras.applications.nasnet.x5->add([x5_1, x5_2], name='reduction_add4_%s' % block_id)
A:keras.applications.nasnet.x3_1->AveragePooling2D((3, 3), strides=(2, 2), padding='same', name='reduction_left3_%s' % block_id)(h)
A:keras.applications.nasnet.x3_2->_separable_conv_block(p, filters, (5, 5), strides=(2, 2), block_id='reduction_right3_%s' % block_id)
A:keras.applications.nasnet.x5_1->_separable_conv_block(x1, filters, (3, 3), block_id='reduction_left4_%s' % block_id)
A:keras.applications.nasnet.x5_2->MaxPooling2D((3, 3), strides=(2, 2), padding='same', name='reduction_right5_%s' % block_id)(h)
keras.applications.NASNetLarge(input_shape=None,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000)
keras.applications.NASNetMobile(input_shape=None,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000)
keras.applications.nasnet.NASNet(input_shape=None,penultimate_filters=4032,num_blocks=6,stem_block_filters=96,skip_reduction=True,filter_multiplier=2,include_top=True,weights=None,input_tensor=None,pooling=None,classes=1000,default_size=None)
keras.applications.nasnet.NASNetLarge(input_shape=None,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000)
keras.applications.nasnet.NASNetMobile(input_shape=None,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000)
keras.applications.nasnet._adjust_block(p,ip,filters,block_id=None)
keras.applications.nasnet._normal_a_cell(ip,p,filters,block_id=None)
keras.applications.nasnet._reduction_a_cell(ip,p,filters,block_id=None)
keras.applications.nasnet._separable_conv_block(ip,filters,kernel_size=(3,3),strides=(1,1),block_id=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/applications/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/applications/vgg16.py----------------------------------------
A:keras.applications.vgg16.input_shape->_obtain_input_shape(input_shape, default_size=224, min_size=48, data_format=K.image_data_format(), require_flatten=include_top, weights=weights)
A:keras.applications.vgg16.img_input->Input(tensor=input_tensor, shape=input_shape)
A:keras.applications.vgg16.x->GlobalMaxPooling2D()(x)
A:keras.applications.vgg16.inputs->get_source_inputs(input_tensor)
A:keras.applications.vgg16.model->Model(inputs, x, name='vgg16')
A:keras.applications.vgg16.weights_path->get_file('vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5', WEIGHTS_PATH_NO_TOP, cache_subdir='models', file_hash='6d6bbae143d832006294945121d1f1fc')
A:keras.applications.vgg16.maxpool->Model(inputs, x, name='vgg16').get_layer(name='block5_pool')
A:keras.applications.vgg16.dense->Model(inputs, x, name='vgg16').get_layer(name='fc1')
keras.applications.VGG16(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
keras.applications.vgg16.VGG16(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/applications/imagenet_utils.py----------------------------------------
A:keras.applications.imagenet_utils._IMAGENET_MEAN->K.constant(-np.array(mean))
A:keras.applications.imagenet_utils.x->K.bias_add(x, _IMAGENET_MEAN, data_format)
A:keras.applications.imagenet_utils.data_format->K.image_data_format()
A:keras.applications.imagenet_utils.fpath->get_file('imagenet_class_index.json', CLASS_INDEX_PATH, cache_subdir='models', file_hash='c2c37ea517e94d9795004a39431a14cb')
A:keras.applications.imagenet_utils.CLASS_INDEX->json.load(f)
keras.applications.imagenet_utils._obtain_input_shape(input_shape,default_size,min_size,data_format,require_flatten,weights=None)
keras.applications.imagenet_utils._preprocess_numpy_input(x,data_format,mode)
keras.applications.imagenet_utils._preprocess_symbolic_input(x,data_format,mode)
keras.applications.imagenet_utils.decode_predictions(preds,top=5)
keras.applications.imagenet_utils.preprocess_input(x,data_format=None,mode='caffe')


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/applications/mobilenet.py----------------------------------------
A:keras.applications.mobilenet.self.depthwise_initializer->initializers.get(depthwise_initializer)
A:keras.applications.mobilenet.self.depthwise_regularizer->regularizers.get(depthwise_regularizer)
A:keras.applications.mobilenet.self.depthwise_constraint->constraints.get(depthwise_constraint)
A:keras.applications.mobilenet.self.bias_initializer->initializers.get(bias_initializer)
A:keras.applications.mobilenet.input_dim->int(input_shape[channel_axis])
A:keras.applications.mobilenet.self.depthwise_kernel->self.add_weight(shape=depthwise_kernel_shape, initializer=self.depthwise_initializer, name='depthwise_kernel', regularizer=self.depthwise_regularizer, constraint=self.depthwise_constraint)
A:keras.applications.mobilenet.self.bias->self.add_weight(shape=(input_dim * self.depth_multiplier,), initializer=self.bias_initializer, name='bias', regularizer=self.bias_regularizer, constraint=self.bias_constraint)
A:keras.applications.mobilenet.self.input_spec->InputSpec(ndim=4, axes={channel_axis: input_dim})
A:keras.applications.mobilenet.outputs->K.bias_add(outputs, self.bias, data_format=self.data_format)
A:keras.applications.mobilenet.rows->utils.conv_utils.conv_output_length(rows, self.kernel_size[0], self.padding, self.strides[0])
A:keras.applications.mobilenet.cols->utils.conv_utils.conv_output_length(cols, self.kernel_size[1], self.padding, self.strides[1])
A:keras.applications.mobilenet.config->super(DepthwiseConv2D, self).get_config()
A:keras.applications.mobilenet.config['depthwise_initializer']->initializers.serialize(self.depthwise_initializer)
A:keras.applications.mobilenet.config['depthwise_regularizer']->regularizers.serialize(self.depthwise_regularizer)
A:keras.applications.mobilenet.config['depthwise_constraint']->constraints.serialize(self.depthwise_constraint)
A:keras.applications.mobilenet.input_shape->_obtain_input_shape(input_shape, default_size=default_size, min_size=32, data_format=K.image_data_format(), require_flatten=include_top, weights=weights)
A:keras.applications.mobilenet.img_input->Input(tensor=input_tensor, shape=input_shape)
A:keras.applications.mobilenet.x->BatchNormalization(axis=channel_axis, name='conv_pw_%d_bn' % block_id)(x)
A:keras.applications.mobilenet.inputs->get_source_inputs(input_tensor)
A:keras.applications.mobilenet.model->Model(inputs, x, name='mobilenet_%0.2f_%s' % (alpha, rows))
A:keras.applications.mobilenet.weights_path->get_file(model_name, weigh_path, cache_subdir='models')
A:keras.applications.mobilenet.filters->int(filters * alpha)
A:keras.applications.mobilenet.pointwise_conv_filters->int(pointwise_conv_filters * alpha)
keras.applications.MobileNet(input_shape=None,alpha=1.0,depth_multiplier=1,dropout=0.001,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000)
keras.applications.mobilenet.DepthwiseConv2D(self,kernel_size,strides=(1,1),padding='valid',depth_multiplier=1,data_format=None,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,bias_constraint=None,**kwargs)
keras.applications.mobilenet.DepthwiseConv2D.__init__(self,kernel_size,strides=(1,1),padding='valid',depth_multiplier=1,data_format=None,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,bias_constraint=None,**kwargs)
keras.applications.mobilenet.DepthwiseConv2D.build(self,input_shape)
keras.applications.mobilenet.DepthwiseConv2D.call(self,inputs,training=None)
keras.applications.mobilenet.DepthwiseConv2D.compute_output_shape(self,input_shape)
keras.applications.mobilenet.DepthwiseConv2D.get_config(self)
keras.applications.mobilenet.MobileNet(input_shape=None,alpha=1.0,depth_multiplier=1,dropout=0.001,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000)
keras.applications.mobilenet._conv_block(inputs,filters,alpha,kernel=(3,3),strides=(1,1))
keras.applications.mobilenet._depthwise_conv_block(inputs,pointwise_conv_filters,alpha,depth_multiplier=1,strides=(1,1),block_id=1)
keras.applications.mobilenet.preprocess_input(x)
keras.applications.mobilenet.relu6(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/applications/densenet.py----------------------------------------
A:keras.applications.densenet.x->GlobalMaxPooling2D(name='max_pool')(x)
A:keras.applications.densenet.x1->Conv2D(growth_rate, 3, padding='same', use_bias=False, name=name + '_2_conv')(x1)
A:keras.applications.densenet.input_shape->_obtain_input_shape(input_shape, default_size=224, min_size=221, data_format=K.image_data_format(), require_flatten=include_top, weights=weights)
A:keras.applications.densenet.img_input->Input(tensor=input_tensor, shape=input_shape)
A:keras.applications.densenet.inputs->get_source_inputs(input_tensor)
A:keras.applications.densenet.model->Model(inputs, x, name='densenet')
A:keras.applications.densenet.weights_path->get_file('densenet201_weights_tf_dim_ordering_tf_kernels_notop.h5', DENSENET201_WEIGHT_PATH_NO_TOP, cache_subdir='models', file_hash='1c2de60ee40562448dbac34a0737e798')
keras.applications.DenseNet121(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
keras.applications.DenseNet169(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
keras.applications.DenseNet201(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
keras.applications.densenet.DenseNet(blocks,include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
keras.applications.densenet.DenseNet121(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
keras.applications.densenet.DenseNet169(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
keras.applications.densenet.DenseNet201(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
keras.applications.densenet.conv_block(x,growth_rate,name)
keras.applications.densenet.dense_block(x,blocks,name)
keras.applications.densenet.preprocess_input(x,data_format=None)
keras.applications.densenet.transition_block(x,reduction,name)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/applications/xception.py----------------------------------------
A:keras.applications.xception.input_shape->_obtain_input_shape(input_shape, default_size=299, min_size=71, data_format=K.image_data_format(), require_flatten=False, weights=weights)
A:keras.applications.xception.img_input->Input(tensor=input_tensor, shape=input_shape)
A:keras.applications.xception.x->GlobalMaxPooling2D()(x)
A:keras.applications.xception.residual->BatchNormalization()(residual)
A:keras.applications.xception.inputs->get_source_inputs(input_tensor)
A:keras.applications.xception.model->Model(inputs, x, name='xception')
A:keras.applications.xception.weights_path->get_file('xception_weights_tf_dim_ordering_tf_kernels_notop.h5', TF_WEIGHTS_PATH_NO_TOP, cache_subdir='models', file_hash='b0042744bf5b25fce3cb969f33bebb97')
keras.applications.Xception(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
keras.applications.xception.Xception(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
keras.applications.xception.preprocess_input(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/applications/resnet50.py----------------------------------------
A:keras.applications.resnet50.x->GlobalMaxPooling2D()(x)
A:keras.applications.resnet50.shortcut->BatchNormalization(axis=bn_axis, name=bn_name_base + '1')(shortcut)
A:keras.applications.resnet50.input_shape->_obtain_input_shape(input_shape, default_size=224, min_size=197, data_format=K.image_data_format(), require_flatten=include_top, weights=weights)
A:keras.applications.resnet50.img_input->Input(tensor=input_tensor, shape=input_shape)
A:keras.applications.resnet50.inputs->get_source_inputs(input_tensor)
A:keras.applications.resnet50.model->Model(inputs, x, name='resnet50')
A:keras.applications.resnet50.weights_path->get_file('resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5', WEIGHTS_PATH_NO_TOP, cache_subdir='models', md5_hash='a268eb855778b3df3c7506639542a6af')
A:keras.applications.resnet50.maxpool->Model(inputs, x, name='resnet50').get_layer(name='avg_pool')
A:keras.applications.resnet50.dense->Model(inputs, x, name='resnet50').get_layer(name='fc1000')
keras.applications.ResNet50(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
keras.applications.resnet50.ResNet50(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
keras.applications.resnet50.conv_block(input_tensor,kernel_size,filters,stage,block,strides=(2,2))
keras.applications.resnet50.identity_block(input_tensor,kernel_size,filters,stage,block)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/applications/vgg19.py----------------------------------------
A:keras.applications.vgg19.input_shape->_obtain_input_shape(input_shape, default_size=224, min_size=48, data_format=K.image_data_format(), require_flatten=include_top, weights=weights)
A:keras.applications.vgg19.img_input->Input(tensor=input_tensor, shape=input_shape)
A:keras.applications.vgg19.x->GlobalMaxPooling2D()(x)
A:keras.applications.vgg19.inputs->get_source_inputs(input_tensor)
A:keras.applications.vgg19.model->Model(inputs, x, name='vgg19')
A:keras.applications.vgg19.weights_path->get_file('vgg19_weights_tf_dim_ordering_tf_kernels_notop.h5', WEIGHTS_PATH_NO_TOP, cache_subdir='models', file_hash='253f8cb515780f3b799900260a226db6')
A:keras.applications.vgg19.maxpool->Model(inputs, x, name='vgg19').get_layer(name='block5_pool')
A:keras.applications.vgg19.dense->Model(inputs, x, name='vgg19').get_layer(name='fc1')
keras.applications.VGG19(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
keras.applications.vgg19.VGG19(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/applications/inception_v3.py----------------------------------------
A:keras.applications.inception_v3.x->GlobalMaxPooling2D()(x)
A:keras.applications.inception_v3.input_shape->_obtain_input_shape(input_shape, default_size=299, min_size=139, data_format=K.image_data_format(), require_flatten=False, weights=weights)
A:keras.applications.inception_v3.img_input->Input(tensor=input_tensor, shape=input_shape)
A:keras.applications.inception_v3.branch1x1->conv2d_bn(x, 320, 1, 1)
A:keras.applications.inception_v3.branch5x5->conv2d_bn(branch5x5, 64, 5, 5)
A:keras.applications.inception_v3.branch3x3dbl->layers.concatenate([branch3x3dbl_1, branch3x3dbl_2], axis=channel_axis)
A:keras.applications.inception_v3.branch_pool->conv2d_bn(branch_pool, 192, 1, 1)
A:keras.applications.inception_v3.branch3x3->layers.concatenate([branch3x3_1, branch3x3_2], axis=channel_axis, name='mixed9_' + str(i))
A:keras.applications.inception_v3.branch7x7->conv2d_bn(branch7x7, 192, 7, 1)
A:keras.applications.inception_v3.branch7x7dbl->conv2d_bn(branch7x7dbl, 192, 1, 7)
A:keras.applications.inception_v3.branch7x7x3->conv2d_bn(branch7x7x3, 192, 3, 3, strides=(2, 2), padding='valid')
A:keras.applications.inception_v3.branch3x3_1->conv2d_bn(branch3x3, 384, 1, 3)
A:keras.applications.inception_v3.branch3x3_2->conv2d_bn(branch3x3, 384, 3, 1)
A:keras.applications.inception_v3.branch3x3dbl_1->conv2d_bn(branch3x3dbl, 384, 1, 3)
A:keras.applications.inception_v3.branch3x3dbl_2->conv2d_bn(branch3x3dbl, 384, 3, 1)
A:keras.applications.inception_v3.inputs->get_source_inputs(input_tensor)
A:keras.applications.inception_v3.model->Model(inputs, x, name='inception_v3')
A:keras.applications.inception_v3.weights_path->get_file('inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5', WEIGHTS_PATH_NO_TOP, cache_subdir='models', file_hash='bcbd6486424b2319ff4ef7d526e38f63')
keras.applications.InceptionV3(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
keras.applications.inception_v3.InceptionV3(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
keras.applications.inception_v3.conv2d_bn(x,filters,num_row,num_col,padding='same',strides=(1,1),name=None)
keras.applications.inception_v3.preprocess_input(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/backend/cntk_backend.py----------------------------------------
A:keras.backend.cntk_backend.dev->cntk.device.use_default_device()
A:keras.backend.cntk_backend._LEARNING_PHASE->cntk.constant(shape=(), dtype=np.float32, value=1.0, name='_keras_learning_phase')
A:keras.backend.cntk_backend._UID_PREFIXES->defaultdict(int)
A:keras.backend.cntk_backend.v->self.metrics_func.eval(input_dict, as_numpy=False).asarray()
A:keras.backend.cntk_backend.training->learning_phase()
A:keras.backend.cntk_backend.x->getattr(C, reduce_fun_name)(x, axis)
A:keras.backend.cntk_backend.alt->alt()
A:keras.backend.cntk_backend.result->arguments.data().as_shape((num_batch,) + self.target_shape)
A:keras.backend.cntk_backend.dtype->floatx()
A:keras.backend.cntk_backend.value->numpy.asarray(value)
A:keras.backend.cntk_backend.data_format->image_data_format()
A:keras.backend.cntk_backend.dims->len(shape)
A:keras.backend.cntk_backend.bias_dims->len(bias.shape)
A:keras.backend.cntk_backend.shape->list(output_shape)
A:keras.backend.cntk_backend.cntk_shape->tuple(cntk_shape)
A:keras.backend.cntk_backend.num_dynamic->get_num_dynamic_axis(placeholder)
A:keras.backend.cntk_backend.prefix->'_'.join(NAME_SCOPE_STACK)
A:keras.backend.cntk_backend.const->cntk.constant(np_value, dtype=dtype, name=_prepare_name(name, 'constant'))
A:keras.backend.cntk_backend.seed->numpy.random.randint(1, 10000000.0)
A:keras.backend.cntk_backend.binomial->numpy.random.binomial(1, p, size).astype(dtype).reshape(shape)
A:keras.backend.cntk_backend.p->cntk.parameter(shape, init=C.initializer.uniform(scale, seed=seed), dtype=dtype, name=name)
A:keras.backend.cntk_backend.ctype->_convert_string_dtype(dtype)
A:keras.backend.cntk_backend.y_shape->int_shape(y)
A:keras.backend.cntk_backend.y->cntk.swapaxes(y, i, i - 1)
A:keras.backend.cntk_backend.x_shape->int_shape(x)
A:keras.backend.cntk_backend.one_hot_matrix->cntk.ops.one_hot(indices, num_classes)
A:keras.backend.cntk_backend.nones->_get_dynamic_axis_num(inputs)
A:keras.backend.cntk_backend.axis->_normalize_axis(axis, x)
A:keras.backend.cntk_backend.output->permute_dimensions(output, (0, 2, 3, 1))
A:keras.backend.cntk_backend.m->mean(x, axis, keepdims=True)
A:keras.backend.cntk_backend.devs_squared->cntk.square(x - m)
A:keras.backend.cntk_backend.new_shape->tuple(new_shape)
A:keras.backend.cntk_backend.n->tuple(n)
A:keras.backend.cntk_backend.num_dynamic_axis->_get_dynamic_axis_num(x)
A:keras.backend.cntk_backend.ndim->len(shape)
A:keras.backend.cntk_backend._axis->cntk.Axis.all_axes()
A:keras.backend.cntk_backend.reduce_result->prod(x, axis, keepdims=keepdims)
A:keras.backend.cntk_backend.any_matrix->cntk.element_select(reduce_result, ones_like(reduce_result), zeros_like(reduce_result))
A:keras.backend.cntk_backend.all_matrix->cntk.element_select(reduce_result, ones_like(reduce_result), zeros_like(reduce_result))
A:keras.backend.cntk_backend.g->cntk.constant(0, shape=v.shape, name='keras_grad_placeholder')
A:keras.backend.cntk_backend.gamma->_reshape_dummy_dim(gamma, [0])
A:keras.backend.cntk_backend.beta->_reshape_dummy_dim(beta, [0])
A:keras.backend.cntk_backend.(mean, variant)->_moments(x, _normalize_axis(reduction_axes, x))
A:keras.backend.cntk_backend.normalized->batch_normalization(x, broadcast_mean, broadcast_var, broadcast_beta, broadcast_gamma, epsilon)
A:keras.backend.cntk_backend.broadcast_mean->cntk.reshape(mean, target_shape)
A:keras.backend.cntk_backend.broadcast_var->cntk.reshape(variant, target_shape)
A:keras.backend.cntk_backend.broadcast_gamma->cntk.reshape(gamma, target_shape)
A:keras.backend.cntk_backend.broadcast_beta->cntk.reshape(beta, target_shape)
A:keras.backend.cntk_backend._axes->tuple(axes)
A:keras.backend.cntk_backend.shift->cntk.stop_gradient(shift)
A:keras.backend.cntk_backend.shifted_mean->cntk.reduce_mean(shifted_mean, axis=axis)
A:keras.backend.cntk_backend.variance_mean->cntk.reduce_mean(variance_mean, axis=axis)
A:keras.backend.cntk_backend.variance->squeeze(variance, _axes)
A:keras.backend.cntk_backend.mean->_reshape_dummy_dim(mean, [0])
A:keras.backend.cntk_backend.var->_reshape_dummy_dim(var, [0])
A:keras.backend.cntk_backend.current_layout->tuple([i for i in range(dims)])
A:keras.backend.cntk_backend.tmp->cntk.ops.slice(x, axis, i, i + 1)
A:keras.backend.cntk_backend.mask_shape->int_shape(mask)
A:keras.backend.cntk_backend.mask->cntk.to_sequence_like(mask, inputs)
A:keras.backend.cntk_backend.states->tuple(initial)
A:keras.backend.cntk_backend.current->squeeze(current, 1)
A:keras.backend.cntk_backend.(output, new_states)->step_function(current, tuple(states) + tuple(constants))
A:keras.backend.cntk_backend.mask_slice->squeeze(mask_slice, 1)
A:keras.backend.cntk_backend.prev_output->zeros_like(output)
A:keras.backend.cntk_backend.final_output->_reshape_sequence(final_output, num_time_step)
A:keras.backend.cntk_backend.output_slice->expand_dims(outputs[i], 1)
A:keras.backend.cntk_backend.inputs->cntk.to_sequence(inputs)
A:keras.backend.cntk_backend.constants[j][i]->cntk.sequence.broadcast_as(constants[j][i], inputs)
A:keras.backend.cntk_backend.constants[j]->cntk.sequence.broadcast_as(constants[j], inputs)
A:keras.backend.cntk_backend.(new_output, new_states)->step_function(x, tuple(past_values) + tuple(constants))
A:keras.backend.cntk_backend.(final_output, final_states)->_recurrence(inputs, states, mask)
A:keras.backend.cntk_backend.last_output->cntk.sequence.last(final_output)
A:keras.backend.cntk_backend.norm->cntk.sqrt(C.reduce_sum(C.square(x), axis=axis[0]))
A:keras.backend.cntk_backend.kernel->cntk.transpose(kernel, (4, 3, 0, 1, 2))
A:keras.backend.cntk_backend.padding->_preprocess_border_mode(padding)
A:keras.backend.cntk_backend.output_shape->tuple(shape)
A:keras.backend.cntk_backend.negative_part->cntk.relu(-x)
A:keras.backend.cntk_backend.dim->numpy.prod(x.shape)
A:keras.backend.cntk_backend.target->cntk.reshape(target, output.shape)
A:keras.backend.cntk_backend.u->cntk.assign(update[0], update[1])
A:keras.backend.cntk_backend.update_func->cntk.combine([u.output for u in u_ops])
A:keras.backend.cntk_backend.grads->cntk.combine([u.output for u in u_ops]).find_all_with_name('keras_grad_placeholder')
A:keras.backend.cntk_backend.learner->cntk.cntk_py.universal_learner(p_list, u_list, update_func)
A:keras.backend.cntk_backend.self.trainer->cntk.trainer.Trainer(outputs[0], criterion, [learner])
A:keras.backend.cntk_backend.self.trainer_output->tuple([f.output for f in criterion])
A:keras.backend.cntk_backend.self.unrelated_updates->cntk.combine([_.output for _ in unrelated_updates])
A:keras.backend.cntk_backend.self.metrics_func->cntk.combine(self.metrics_outputs)
A:keras.backend.cntk_backend._LEARNING_PHASE.value->numpy.asarray(value)
A:keras.backend.cntk_backend.(_, output_values)->self.metrics_func.forward(input_dict, self.metrics_func.outputs, (self.metrics_func.outputs[0],), as_numpy=False)
A:keras.backend.cntk_backend.output_values->self.metrics_func.eval(input_dict, as_numpy=False)
A:keras.backend.cntk_backend.prefix_shape->tuple(prefix_shape)
A:keras.backend.cntk_backend.postfix_shape->tuple(postfix_shape)
A:keras.backend.cntk_backend.ndim_cond->ndim(condition)
A:keras.backend.cntk_backend.ndim_expr->ndim(then_expression)
A:keras.backend.cntk_backend.shape_expr->int_shape(then_expression)
A:keras.backend.cntk_backend.condition->tile(condition, shape_expr[ndim_cond + i])
A:keras.backend.cntk_backend.res->cntk.elu(x)
A:keras.backend.cntk_backend._targets->cntk.one_hot(targets, predictions.shape[-1])
A:keras.backend.cntk_backend.tmp_shape->list(int_shape(x))
A:keras.backend.cntk_backend.kernel_shape->int_shape(kernel)
A:keras.backend.cntk_backend.slice_length->slice(i * stride, i * stride + kernel_size[0])
A:keras.backend.cntk_backend.x_aggregate->concatenate(xs, axis=1)
A:keras.backend.cntk_backend.weight->permute_dimensions(kernel, (2, 0, 1))
A:keras.backend.cntk_backend.slice_row->slice(i * stride_row, i * stride_row + kernel_size[0])
A:keras.backend.cntk_backend.slice_col->slice(j * stride_col, j * stride_col + kernel_size[1])
A:keras.backend.cntk_backend.cntk_axes->_normalize_axis(axes, x)
A:keras.backend.cntk_backend.const_a->cntk.reshape(const_a, shape)
A:keras.backend.cntk_backend.batch_axis->cntk.Axis.default_batch_axis()
A:keras.backend.cntk_backend.num_static_element->numpy.prod(np.asarray(self.from_shape))
A:keras.backend.cntk_backend.num_batch->int(num_element / num_static_element)
A:keras.backend.cntk_backend.grad_array_view->root_gradients.data()
A:keras.backend.cntk_backend.num_old_batch->int(num_element / num_static_element)
keras.backend.ConvertToBatch(self,input,name='convert_to_batch')
keras.backend.ConvertToBatch.backward(self,state,root_gradients)
keras.backend.ConvertToBatch.forward(self,arguments,device=None,outputs_to_retain=None)
keras.backend.ConvertToBatch.infer_outputs(self)
keras.backend.ConvertToStatic(self,input,batch_size,name='convert_to_static')
keras.backend.ConvertToStatic.backward(self,state,root_gradients)
keras.backend.ConvertToStatic.forward(self,arguments,device=None,outputs_to_retain=None)
keras.backend.ConvertToStatic.infer_outputs(self)
keras.backend.Function(self,inputs,outputs,updates=[],**kwargs)
keras.backend.Function._is_input_shape_compatible(input,placeholder)
keras.backend.LambdaFunc(self,arg,when=lambdaarg:True,execute=lambdaarg:print(arg),name='')
keras.backend.LambdaFunc.backward(self,state,root_gradients)
keras.backend.LambdaFunc.forward(self,argument,device=None,outputs_to_retain=None)
keras.backend.LambdaFunc.infer_outputs(self)
keras.backend.ReshapeBatch(self,input,shape,name='reshape_with_batch')
keras.backend.ReshapeBatch.backward(self,state,root_gradients)
keras.backend.ReshapeBatch.forward(self,arguments,device=None,outputs_to_retain=None)
keras.backend.ReshapeBatch.infer_outputs(self)
keras.backend._contain_seqence_axis(x)
keras.backend._convert_dtype_string(dtype)
keras.backend._convert_string_dtype(dtype)
keras.backend._get_cntk_version()
keras.backend._get_dynamic_axis_num(x)
keras.backend._moments(x,axes=None,shift=None,keep_dims=False)
keras.backend._normalize_axis(axis,x)
keras.backend._padding(x,pattern,axis)
keras.backend._postprocess_conv2d_output(x,data_format)
keras.backend._postprocess_conv3d_output(x,dim_ordering)
keras.backend._prepare_name(name,default)
keras.backend._preprocess_border_mode(padding)
keras.backend._preprocess_conv2d_input(x,data_format)
keras.backend._preprocess_conv2d_kernel(kernel,data_format)
keras.backend._preprocess_conv3d_input(x,data_format)
keras.backend._preprocess_conv3d_kernel(kernel,dim_ordering)
keras.backend._reduce_on_axis(x,axis,reduce_fun_name)
keras.backend._remove_dims(x,axis,keepdims=False)
keras.backend._reshape_batch(x,shape)
keras.backend._reshape_dummy_dim(x,axis)
keras.backend._reshape_sequence(x,time_step)
keras.backend._static_rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None)
keras.backend.abs(x)
keras.backend.all(x,axis=None,keepdims=False)
keras.backend.any(x,axis=None,keepdims=False)
keras.backend.argmax(x,axis=-1)
keras.backend.argmin(x,axis=-1)
keras.backend.batch_dot(x,y,axes=None)
keras.backend.batch_flatten(x)
keras.backend.batch_get_value(xs)
keras.backend.batch_normalization(x,mean,var,beta,gamma,epsilon=0.001)
keras.backend.batch_set_value(tuples)
keras.backend.bias_add(x,bias,data_format=None)
keras.backend.binary_crossentropy(target,output,from_logits=False)
keras.backend.cast(x,dtype)
keras.backend.categorical_crossentropy(target,output,from_logits=False)
keras.backend.classification_error(target,output,axis=-1)
keras.backend.clip(x,min_value,max_value)
keras.backend.cntk_backend.ConvertToBatch(self,input,name='convert_to_batch')
keras.backend.cntk_backend.ConvertToBatch.__init__(self,input,name='convert_to_batch')
keras.backend.cntk_backend.ConvertToBatch.backward(self,state,root_gradients)
keras.backend.cntk_backend.ConvertToBatch.forward(self,arguments,device=None,outputs_to_retain=None)
keras.backend.cntk_backend.ConvertToBatch.infer_outputs(self)
keras.backend.cntk_backend.ConvertToStatic(self,input,batch_size,name='convert_to_static')
keras.backend.cntk_backend.ConvertToStatic.__init__(self,input,batch_size,name='convert_to_static')
keras.backend.cntk_backend.ConvertToStatic.backward(self,state,root_gradients)
keras.backend.cntk_backend.ConvertToStatic.forward(self,arguments,device=None,outputs_to_retain=None)
keras.backend.cntk_backend.ConvertToStatic.infer_outputs(self)
keras.backend.cntk_backend.Function(self,inputs,outputs,updates=[],**kwargs)
keras.backend.cntk_backend.Function.__init__(self,inputs,outputs,updates=[],**kwargs)
keras.backend.cntk_backend.Function._is_input_shape_compatible(input,placeholder)
keras.backend.cntk_backend.LambdaFunc(self,arg,when=lambdaarg:True,execute=lambdaarg:print(arg),name='')
keras.backend.cntk_backend.LambdaFunc.__init__(self,arg,when=lambdaarg:True,execute=lambdaarg:print(arg),name='')
keras.backend.cntk_backend.LambdaFunc.backward(self,state,root_gradients)
keras.backend.cntk_backend.LambdaFunc.forward(self,argument,device=None,outputs_to_retain=None)
keras.backend.cntk_backend.LambdaFunc.infer_outputs(self)
keras.backend.cntk_backend.ReshapeBatch(self,input,shape,name='reshape_with_batch')
keras.backend.cntk_backend.ReshapeBatch.__init__(self,input,shape,name='reshape_with_batch')
keras.backend.cntk_backend.ReshapeBatch.backward(self,state,root_gradients)
keras.backend.cntk_backend.ReshapeBatch.forward(self,arguments,device=None,outputs_to_retain=None)
keras.backend.cntk_backend.ReshapeBatch.infer_outputs(self)
keras.backend.cntk_backend._contain_seqence_axis(x)
keras.backend.cntk_backend._convert_dtype_string(dtype)
keras.backend.cntk_backend._convert_string_dtype(dtype)
keras.backend.cntk_backend._get_cntk_version()
keras.backend.cntk_backend._get_dynamic_axis_num(x)
keras.backend.cntk_backend._moments(x,axes=None,shift=None,keep_dims=False)
keras.backend.cntk_backend._normalize_axis(axis,x)
keras.backend.cntk_backend._padding(x,pattern,axis)
keras.backend.cntk_backend._postprocess_conv2d_output(x,data_format)
keras.backend.cntk_backend._postprocess_conv3d_output(x,dim_ordering)
keras.backend.cntk_backend._prepare_name(name,default)
keras.backend.cntk_backend._preprocess_border_mode(padding)
keras.backend.cntk_backend._preprocess_conv2d_input(x,data_format)
keras.backend.cntk_backend._preprocess_conv2d_kernel(kernel,data_format)
keras.backend.cntk_backend._preprocess_conv3d_input(x,data_format)
keras.backend.cntk_backend._preprocess_conv3d_kernel(kernel,dim_ordering)
keras.backend.cntk_backend._reduce_on_axis(x,axis,reduce_fun_name)
keras.backend.cntk_backend._remove_dims(x,axis,keepdims=False)
keras.backend.cntk_backend._reshape_batch(x,shape)
keras.backend.cntk_backend._reshape_dummy_dim(x,axis)
keras.backend.cntk_backend._reshape_sequence(x,time_step)
keras.backend.cntk_backend._static_rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None)
keras.backend.cntk_backend.abs(x)
keras.backend.cntk_backend.all(x,axis=None,keepdims=False)
keras.backend.cntk_backend.any(x,axis=None,keepdims=False)
keras.backend.cntk_backend.argmax(x,axis=-1)
keras.backend.cntk_backend.argmin(x,axis=-1)
keras.backend.cntk_backend.batch_dot(x,y,axes=None)
keras.backend.cntk_backend.batch_flatten(x)
keras.backend.cntk_backend.batch_get_value(xs)
keras.backend.cntk_backend.batch_normalization(x,mean,var,beta,gamma,epsilon=0.001)
keras.backend.cntk_backend.batch_set_value(tuples)
keras.backend.cntk_backend.bias_add(x,bias,data_format=None)
keras.backend.cntk_backend.binary_crossentropy(target,output,from_logits=False)
keras.backend.cntk_backend.cast(x,dtype)
keras.backend.cntk_backend.categorical_crossentropy(target,output,from_logits=False)
keras.backend.cntk_backend.classification_error(target,output,axis=-1)
keras.backend.cntk_backend.clip(x,min_value,max_value)
keras.backend.cntk_backend.concatenate(tensors,axis=-1)
keras.backend.cntk_backend.constant(value,dtype=None,shape=None,name=None)
keras.backend.cntk_backend.conv1d(x,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.cntk_backend.conv2d(x,kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.cntk_backend.conv2d_transpose(x,kernel,output_shape,strides=(1,1),padding='valid',data_format=None)
keras.backend.cntk_backend.conv3d(x,kernel,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1))
keras.backend.cntk_backend.conv3d_transpose(x,kernel,output_shape,strides=(1,1,1),padding='valid',data_format=None)
keras.backend.cntk_backend.cos(x)
keras.backend.cntk_backend.count_params(x)
keras.backend.cntk_backend.depthwise_conv2d(x,depthwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.cntk_backend.dot(x,y)
keras.backend.cntk_backend.dropout(x,level,noise_shape=None,seed=None)
keras.backend.cntk_backend.dtype(x)
keras.backend.cntk_backend.elu(x,alpha=1.0)
keras.backend.cntk_backend.equal(x,y)
keras.backend.cntk_backend.eval(x)
keras.backend.cntk_backend.exp(x)
keras.backend.cntk_backend.expand_dims(x,axis=-1)
keras.backend.cntk_backend.eye(size,dtype=None,name=None)
keras.backend.cntk_backend.flatten(x)
keras.backend.cntk_backend.function(inputs,outputs,updates=[],**kwargs)
keras.backend.cntk_backend.gather(reference,indices)
keras.backend.cntk_backend.get_num_dynamic_axis(x)
keras.backend.cntk_backend.get_uid(prefix='')
keras.backend.cntk_backend.get_value(x)
keras.backend.cntk_backend.get_variable_shape(x)
keras.backend.cntk_backend.gradients(loss,variables)
keras.backend.cntk_backend.greater(x,y)
keras.backend.cntk_backend.greater_equal(x,y)
keras.backend.cntk_backend.hard_sigmoid(x)
keras.backend.cntk_backend.has_seq_axis(x)
keras.backend.cntk_backend.identity(x,name=None)
keras.backend.cntk_backend.in_test_phase(x,alt)
keras.backend.cntk_backend.in_top_k(predictions,targets,k)
keras.backend.cntk_backend.in_train_phase(x,alt,training=None)
keras.backend.cntk_backend.int_shape(x)
keras.backend.cntk_backend.is_keras_tensor(x)
keras.backend.cntk_backend.is_placeholder(x)
keras.backend.cntk_backend.is_sparse(tensor)
keras.backend.cntk_backend.l2_normalize(x,axis=None)
keras.backend.cntk_backend.learning_phase()
keras.backend.cntk_backend.less(x,y)
keras.backend.cntk_backend.less_equal(x,y)
keras.backend.cntk_backend.local_conv1d(inputs,kernel,kernel_size,strides,data_format=None)
keras.backend.cntk_backend.local_conv2d(inputs,kernel,kernel_size,strides,output_shape,data_format=None)
keras.backend.cntk_backend.log(x)
keras.backend.cntk_backend.logsumexp(x,axis=None,keepdims=False)
keras.backend.cntk_backend.max(x,axis=None,keepdims=False)
keras.backend.cntk_backend.maximum(x,y)
keras.backend.cntk_backend.mean(x,axis=None,keepdims=False)
keras.backend.cntk_backend.min(x,axis=None,keepdims=False)
keras.backend.cntk_backend.minimum(x,y)
keras.backend.cntk_backend.moving_average_update(variable,value,momentum)
keras.backend.cntk_backend.name_scope(name)
keras.backend.cntk_backend.ndim(x)
keras.backend.cntk_backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.cntk_backend.not_equal(x,y)
keras.backend.cntk_backend.one_hot(indices,num_classes)
keras.backend.cntk_backend.ones(shape,dtype=None,name=None)
keras.backend.cntk_backend.ones_like(x,dtype=None,name=None)
keras.backend.cntk_backend.permute_dimensions(x,pattern)
keras.backend.cntk_backend.placeholder(shape=None,ndim=None,dtype=None,sparse=False,name=None,dynamic_axis_num=1)
keras.backend.cntk_backend.pool2d(x,pool_size,strides=(1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.cntk_backend.pool3d(x,pool_size,strides=(1,1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.cntk_backend.pow(x,a)
keras.backend.cntk_backend.print_tensor(x,message='')
keras.backend.cntk_backend.prod(x,axis=None,keepdims=False)
keras.backend.cntk_backend.random_binomial(shape,p=0.0,dtype=None,seed=None)
keras.backend.cntk_backend.random_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.cntk_backend.random_normal_variable(shape,mean,scale,dtype=None,name=None,seed=None)
keras.backend.cntk_backend.random_uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)
keras.backend.cntk_backend.random_uniform_variable(shape,low,high,dtype=None,name=None,seed=None)
keras.backend.cntk_backend.relu(x,alpha=0.0,max_value=None)
keras.backend.cntk_backend.repeat(x,n)
keras.backend.cntk_backend.repeat_elements(x,rep,axis)
keras.backend.cntk_backend.reshape(x,shape)
keras.backend.cntk_backend.resize_images(x,height_factor,width_factor,data_format)
keras.backend.cntk_backend.resize_volumes(x,depth_factor,height_factor,width_factor,data_format)
keras.backend.cntk_backend.reverse(x,axes)
keras.backend.cntk_backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None)
keras.backend.cntk_backend.round(x)
keras.backend.cntk_backend.separable_conv1d(x,depthwise_kernel,pointwise_kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.cntk_backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.cntk_backend.set_learning_phase(value)
keras.backend.cntk_backend.set_value(x,value)
keras.backend.cntk_backend.shape(x)
keras.backend.cntk_backend.sigmoid(x)
keras.backend.cntk_backend.sign(x)
keras.backend.cntk_backend.sin(x)
keras.backend.cntk_backend.softmax(x)
keras.backend.cntk_backend.softplus(x)
keras.backend.cntk_backend.softsign(x)
keras.backend.cntk_backend.sparse_categorical_crossentropy(target,output,from_logits=False)
keras.backend.cntk_backend.spatial_2d_padding(x,padding=((1,1),(1,1)),data_format=None)
keras.backend.cntk_backend.spatial_3d_padding(x,padding=((1,1),(1,1),(1,1)),data_format=None)
keras.backend.cntk_backend.sqrt(x)
keras.backend.cntk_backend.square(x)
keras.backend.cntk_backend.squeeze(x,axis)
keras.backend.cntk_backend.std(x,axis=None,keepdims=False)
keras.backend.cntk_backend.stop_gradient(variables)
keras.backend.cntk_backend.sum(x,axis=None,keepdims=False)
keras.backend.cntk_backend.switch(condition,then_expression,else_expression)
keras.backend.cntk_backend.tanh(x)
keras.backend.cntk_backend.temporal_padding(x,padding=(1,1))
keras.backend.cntk_backend.tile(x,n)
keras.backend.cntk_backend.transpose(x)
keras.backend.cntk_backend.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.cntk_backend.update(x,new_x)
keras.backend.cntk_backend.update_add(x,increment)
keras.backend.cntk_backend.var(x,axis=None,keepdims=False)
keras.backend.cntk_backend.variable(value,dtype=None,name=None,constraint=None)
keras.backend.cntk_backend.zeros(shape,dtype=None,name=None)
keras.backend.cntk_backend.zeros_like(x,dtype=None,name=None)
keras.backend.concatenate(tensors,axis=-1)
keras.backend.constant(value,dtype=None,shape=None,name=None)
keras.backend.conv1d(x,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.conv2d(x,kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.conv2d_transpose(x,kernel,output_shape,strides=(1,1),padding='valid',data_format=None)
keras.backend.conv3d(x,kernel,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1))
keras.backend.conv3d_transpose(x,kernel,output_shape,strides=(1,1,1),padding='valid',data_format=None)
keras.backend.cos(x)
keras.backend.count_params(x)
keras.backend.depthwise_conv2d(x,depthwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.dot(x,y)
keras.backend.dropout(x,level,noise_shape=None,seed=None)
keras.backend.dtype(x)
keras.backend.elu(x,alpha=1.0)
keras.backend.equal(x,y)
keras.backend.eval(x)
keras.backend.exp(x)
keras.backend.expand_dims(x,axis=-1)
keras.backend.eye(size,dtype=None,name=None)
keras.backend.flatten(x)
keras.backend.function(inputs,outputs,updates=[],**kwargs)
keras.backend.gather(reference,indices)
keras.backend.get_num_dynamic_axis(x)
keras.backend.get_uid(prefix='')
keras.backend.get_value(x)
keras.backend.get_variable_shape(x)
keras.backend.gradients(loss,variables)
keras.backend.greater(x,y)
keras.backend.greater_equal(x,y)
keras.backend.hard_sigmoid(x)
keras.backend.has_seq_axis(x)
keras.backend.identity(x,name=None)
keras.backend.in_test_phase(x,alt)
keras.backend.in_top_k(predictions,targets,k)
keras.backend.in_train_phase(x,alt,training=None)
keras.backend.int_shape(x)
keras.backend.is_keras_tensor(x)
keras.backend.is_placeholder(x)
keras.backend.is_sparse(tensor)
keras.backend.l2_normalize(x,axis=None)
keras.backend.learning_phase()
keras.backend.less(x,y)
keras.backend.less_equal(x,y)
keras.backend.local_conv1d(inputs,kernel,kernel_size,strides,data_format=None)
keras.backend.local_conv2d(inputs,kernel,kernel_size,strides,output_shape,data_format=None)
keras.backend.log(x)
keras.backend.logsumexp(x,axis=None,keepdims=False)
keras.backend.max(x,axis=None,keepdims=False)
keras.backend.maximum(x,y)
keras.backend.mean(x,axis=None,keepdims=False)
keras.backend.min(x,axis=None,keepdims=False)
keras.backend.minimum(x,y)
keras.backend.moving_average_update(variable,value,momentum)
keras.backend.name_scope(name)
keras.backend.ndim(x)
keras.backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.not_equal(x,y)
keras.backend.one_hot(indices,num_classes)
keras.backend.ones(shape,dtype=None,name=None)
keras.backend.ones_like(x,dtype=None,name=None)
keras.backend.permute_dimensions(x,pattern)
keras.backend.placeholder(shape=None,ndim=None,dtype=None,sparse=False,name=None,dynamic_axis_num=1)
keras.backend.pool2d(x,pool_size,strides=(1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.pool3d(x,pool_size,strides=(1,1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.pow(x,a)
keras.backend.print_tensor(x,message='')
keras.backend.prod(x,axis=None,keepdims=False)
keras.backend.random_binomial(shape,p=0.0,dtype=None,seed=None)
keras.backend.random_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.random_normal_variable(shape,mean,scale,dtype=None,name=None,seed=None)
keras.backend.random_uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)
keras.backend.random_uniform_variable(shape,low,high,dtype=None,name=None,seed=None)
keras.backend.relu(x,alpha=0.0,max_value=None)
keras.backend.repeat(x,n)
keras.backend.repeat_elements(x,rep,axis)
keras.backend.reshape(x,shape)
keras.backend.resize_images(x,height_factor,width_factor,data_format)
keras.backend.resize_volumes(x,depth_factor,height_factor,width_factor,data_format)
keras.backend.reverse(x,axes)
keras.backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None)
keras.backend.round(x)
keras.backend.separable_conv1d(x,depthwise_kernel,pointwise_kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.set_learning_phase(value)
keras.backend.set_value(x,value)
keras.backend.shape(x)
keras.backend.sigmoid(x)
keras.backend.sign(x)
keras.backend.sin(x)
keras.backend.softmax(x)
keras.backend.softplus(x)
keras.backend.softsign(x)
keras.backend.sparse_categorical_crossentropy(target,output,from_logits=False)
keras.backend.spatial_2d_padding(x,padding=((1,1),(1,1)),data_format=None)
keras.backend.spatial_3d_padding(x,padding=((1,1),(1,1),(1,1)),data_format=None)
keras.backend.sqrt(x)
keras.backend.square(x)
keras.backend.squeeze(x,axis)
keras.backend.std(x,axis=None,keepdims=False)
keras.backend.stop_gradient(variables)
keras.backend.sum(x,axis=None,keepdims=False)
keras.backend.switch(condition,then_expression,else_expression)
keras.backend.tanh(x)
keras.backend.temporal_padding(x,padding=(1,1))
keras.backend.tile(x,n)
keras.backend.transpose(x)
keras.backend.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.update(x,new_x)
keras.backend.update_add(x,increment)
keras.backend.var(x,axis=None,keepdims=False)
keras.backend.variable(value,dtype=None,name=None,constraint=None)
keras.backend.zeros(shape,dtype=None,name=None)
keras.backend.zeros_like(x,dtype=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/backend/__init__.py----------------------------------------
A:keras.backend.__init__._keras_base_dir->os.path.expanduser('~')
A:keras.backend.__init__._keras_dir->os.path.join(_keras_base_dir, '.keras')
A:keras.backend.__init__._config_path->os.path.expanduser(os.path.join(_keras_dir, 'keras.json'))
A:keras.backend.__init__._config->json.load(f)
A:keras.backend.__init__._floatx->json.load(f).get('floatx', floatx())
A:keras.backend.__init__._epsilon->json.load(f).get('epsilon', epsilon())
A:keras.backend.__init__._backend->json.load(f).get('backend', _BACKEND)
A:keras.backend.__init__._image_data_format->json.load(f).get('image_data_format', image_data_format())
keras.backend.__init__.backend()


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py----------------------------------------
A:keras.backend.tensorflow_backend.graph->tensorflow.get_default_graph()
A:keras.backend.tensorflow_backend._GRAPH_UID_DICTS[graph]->defaultdict(int)
A:keras.backend.tensorflow_backend.phase->tensorflow.placeholder_with_default(False, shape=(), name='keras_learning_phase')
A:keras.backend.tensorflow_backend.session->get_session()
A:keras.backend.tensorflow_backend.config->tensorflow.ConfigProto(intra_op_parallelism_threads=num_thread, allow_soft_placement=True)
A:keras.backend.tensorflow_backend.num_thread->int(os.environ.get('OMP_NUM_THREADS'))
A:keras.backend.tensorflow_backend._SESSION->tensorflow.Session(config=config)
A:keras.backend.tensorflow_backend.variables->tensorflow.global_variables()
A:keras.backend.tensorflow_backend.is_initialized->get_session().run([tf.is_variable_initialized(v) for v in candidate_vars])
A:keras.backend.tensorflow_backend.g->tensorflow.get_default_graph()
A:keras.backend.tensorflow_backend.op->_TfDeviceCaptureOp()
A:keras.backend.tensorflow_backend.device_type->device_type.upper().upper()
A:keras.backend.tensorflow_backend.device->_get_current_tf_device()
A:keras.backend.tensorflow_backend._LOCAL_DEVICES->get_session().list_devices()
A:keras.backend.tensorflow_backend.explicitly_on_cpu->_is_current_explicit_device('CPU')
A:keras.backend.tensorflow_backend.dtype->floatx()
A:keras.backend.tensorflow_backend.sparse_coo->numpy.asarray(value, dtype=dtype(x)).tocoo()
A:keras.backend.tensorflow_backend.indices->tensorflow.transpose(tf.reshape(concatenate([batch_ind, label_ind], axis=0), [2, -1]))
A:keras.backend.tensorflow_backend.v->tensorflow.ones(shape=shape, dtype=tf_dtype, name=name)
A:keras.backend.tensorflow_backend.v._keras_shape->int_shape(value)
A:keras.backend.tensorflow_backend.shape->tuple([None for _ in range(ndim)])
A:keras.backend.tensorflow_backend.x->tensorflow.nn.bias_add(x, bias)
A:keras.backend.tensorflow_backend.tf_dtype->tensorflow.as_dtype(x.dtype.name.split('_')[0])
A:keras.backend.tensorflow_backend.seed->numpy.random.randint(10000000.0)
A:keras.backend.tensorflow_backend.value->numpy.asarray(value, dtype=dtype(x))
A:keras.backend.tensorflow_backend.x_shape->tensorflow.nn.bias_add(x, bias).get_shape().as_list()
A:keras.backend.tensorflow_backend.y_shape->tuple(y_shape)
A:keras.backend.tensorflow_backend.y_permute_dim->list(range(ndim(y)))
A:keras.backend.tensorflow_backend.xt->tensorflow.reshape(x, [-1, x_shape[-1]])
A:keras.backend.tensorflow_backend.yt->tensorflow.reshape(tf.transpose(y, perm=y_permute_dim), [y_shape[-2], -1])
A:keras.backend.tensorflow_backend.out->expand_dims(out, 1)
A:keras.backend.tensorflow_backend.x_ndim->ndim(x)
A:keras.backend.tensorflow_backend.y_ndim->ndim(y)
A:keras.backend.tensorflow_backend.y->tensorflow.reshape(y, tf.concat([tf.shape(y), [1] * diff], axis=0))
A:keras.backend.tensorflow_backend.m->tensorflow.reduce_mean(x, axis, True)
A:keras.backend.tensorflow_backend.devs_squared->tensorflow.square(x - m)
A:keras.backend.tensorflow_backend.zero->_to_tensor(0.0, x.dtype.base_dtype)
A:keras.backend.tensorflow_backend.inf->_to_tensor(np.inf, x.dtype.base_dtype)
A:keras.backend.tensorflow_backend.min_value->_to_tensor(min_value, x.dtype.base_dtype)
A:keras.backend.tensorflow_backend.max_value->_to_tensor(max_value, x.dtype.base_dtype)
A:keras.backend.tensorflow_backend.(mean, var)->tensorflow.nn.moments(x, reduction_axes, None, None, False)
A:keras.backend.tensorflow_backend.normed->tensorflow.nn.batch_normalization(x, broadcast_mean, broadcast_var, broadcast_beta, broadcast_gamma, epsilon)
A:keras.backend.tensorflow_backend.target_shape->tensorflow.stack(target_shape)
A:keras.backend.tensorflow_backend.broadcast_mean->tensorflow.reshape(mean, target_shape)
A:keras.backend.tensorflow_backend.broadcast_var->tensorflow.reshape(var, target_shape)
A:keras.backend.tensorflow_backend.broadcast_gamma->tensorflow.reshape(gamma, target_shape)
A:keras.backend.tensorflow_backend.broadcast_beta->tensorflow.reshape(beta, target_shape)
A:keras.backend.tensorflow_backend.gamma->tensorflow.constant(1.0, dtype=x.dtype, shape=[x.get_shape()[normalization_axis]])
A:keras.backend.tensorflow_backend.beta->tensorflow.constant(0.0, dtype=x.dtype, shape=[x.get_shape()[normalization_axis]])
A:keras.backend.tensorflow_backend.rank->ndim(tensors[0])
A:keras.backend.tensorflow_backend.original_shape->int_shape(x)
A:keras.backend.tensorflow_backend.output->permute_dimensions(output, (2, 0, 1, 3))
A:keras.backend.tensorflow_backend.splits->tensorflow.split(value=x, num_or_size_splits=x_shape[axis], axis=axis)
A:keras.backend.tensorflow_backend.x_rep->tensorflow.reshape(x_rep, x_shape)
A:keras.backend.tensorflow_backend.reps->tensorflow.constant(reps, dtype='int32')
A:keras.backend.tensorflow_backend.x_rep._keras_shape->tuple(x_shape)
A:keras.backend.tensorflow_backend.pattern->tensorflow.stack([1, n, 1])
A:keras.backend.tensorflow_backend.start->tensorflow.cond(start < 0, true_fn=lambda : tf.constant(0, dtype=start.dtype), false_fn=lambda : start)
A:keras.backend.tensorflow_backend.result->cast(result, dtype)
A:keras.backend.tensorflow_backend.data_format->image_data_format()
A:keras.backend.tensorflow_backend.assign_placeholder->tensorflow.placeholder(tf_dtype, shape=value.shape)
A:keras.backend.tensorflow_backend.assign_op->tensorflow.nn.bias_add(x, bias).assign(assign_placeholder)
A:keras.backend.tensorflow_backend.self.inputs->list(inputs)
A:keras.backend.tensorflow_backend.self.outputs->list(outputs)
A:keras.backend.tensorflow_backend.self.updates_op->tensorflow.group(*updates_ops)
A:keras.backend.tensorflow_backend.self.feed_dict->session_kwargs.pop('feed_dict', {})
A:keras.backend.tensorflow_backend.self.fetches->session_kwargs.pop('fetches', [])
A:keras.backend.tensorflow_backend.feed_dict->self.feed_dict.copy()
A:keras.backend.tensorflow_backend.updated->get_session().run(fetches=fetches, feed_dict=feed_dict, **self.session_kwargs)
A:keras.backend.tensorflow_backend.ndim->len(inputs.get_shape())
A:keras.backend.tensorflow_backend.inputs->reverse(inputs, 0)
A:keras.backend.tensorflow_backend.mask->reverse(mask, 0)
A:keras.backend.tensorflow_backend.input_list->tensorflow.unstack(inputs)
A:keras.backend.tensorflow_backend.mask_list->tensorflow.unstack(mask)
A:keras.backend.tensorflow_backend.(output, new_states)->step_function(current_input, tuple(states) + tuple(constants))
A:keras.backend.tensorflow_backend.tiled_mask_t->tensorflow.tile(mask_t, tf.stack([1, tf.shape(output)[1]]))
A:keras.backend.tensorflow_backend.prev_output->zeros_like(output)
A:keras.backend.tensorflow_backend.outputs->tensorflow.transpose(outputs, axes)
A:keras.backend.tensorflow_backend.(output, states)->step_function(inp, states + constants)
A:keras.backend.tensorflow_backend.states->tuple(initial_states)
A:keras.backend.tensorflow_backend.(outputs, _)->step_function(inputs[0], initial_states + constants)
A:keras.backend.tensorflow_backend.output_ta->tensorflow.python.ops.tensor_array_ops.TensorArray(dtype=outputs.dtype, size=time_steps, tensor_array_name='output_ta')
A:keras.backend.tensorflow_backend.input_ta->input_ta.unstack(inputs).unstack(inputs)
A:keras.backend.tensorflow_backend.time->tensorflow.constant(0, dtype='int32', name='time')
A:keras.backend.tensorflow_backend.mask_ta->mask_ta.unstack(mask).unstack(mask)
A:keras.backend.tensorflow_backend.current_input->input_ta.unstack(inputs).unstack(inputs).read(time)
A:keras.backend.tensorflow_backend.mask_t->mask_ta.unstack(mask).unstack(mask).read(time)
A:keras.backend.tensorflow_backend.output_ta_t->output_ta_t.write(time, output).write(time, output)
A:keras.backend.tensorflow_backend.final_outputs->tensorflow.python.ops.control_flow_ops.while_loop(cond=lambda time, *_: time < time_steps, body=_step, loop_vars=(time, output_ta) + states, parallel_iterations=32, swap_memory=True)
A:keras.backend.tensorflow_backend.last_output->tensorflow.python.ops.tensor_array_ops.TensorArray(dtype=outputs.dtype, size=time_steps, tensor_array_name='output_ta').read(last_time - 1)
A:keras.backend.tensorflow_backend.condition->tensorflow.tile(condition, tile_shape)
A:keras.backend.tensorflow_backend.cond_ndim->ndim(condition)
A:keras.backend.tensorflow_backend.then_expression->then_expression()
A:keras.backend.tensorflow_backend.else_expression->else_expression()
A:keras.backend.tensorflow_backend.expr_ndim->ndim(then_expression)
A:keras.backend.tensorflow_backend.cond_shape->tensorflow.concat([tf.shape(condition), [1] * ndim_diff], axis=0)
A:keras.backend.tensorflow_backend.expr_shape->tensorflow.shape(then_expression)
A:keras.backend.tensorflow_backend.tile_shape->tensorflow.where(shape_diff > 0, expr_shape, tf.ones_like(expr_shape))
A:keras.backend.tensorflow_backend.training->learning_phase()
A:keras.backend.tensorflow_backend.res->tensorflow.nn.sparse_softmax_cross_entropy_with_logits(labels=targets, logits=logits)
A:keras.backend.tensorflow_backend._epsilon->_to_tensor(epsilon(), output.dtype.base_dtype)
A:keras.backend.tensorflow_backend.output_shape->tensorflow.stack(list(output_shape))
A:keras.backend.tensorflow_backend.targets->cast(flatten(target), 'int64')
A:keras.backend.tensorflow_backend.logits->tensorflow.reshape(output, [-1, int(output_shape[-1])])
A:keras.backend.tensorflow_backend.one->_to_tensor(1.0, x.dtype.base_dtype)
A:keras.backend.tensorflow_backend.kernel_shape->int_shape(kernel)
A:keras.backend.tensorflow_backend.padding->_preprocess_padding(padding)
A:keras.backend.tensorflow_backend.(x, tf_data_format)->_preprocess_conv3d_input(x, data_format)
A:keras.backend.tensorflow_backend.depthwise_kernel->tensorflow.expand_dims(depthwise_kernel, 0)
A:keras.backend.tensorflow_backend.pointwise_kernel->tensorflow.expand_dims(pointwise_kernel, 0)
A:keras.backend.tensorflow_backend.bias_shape->int_shape(bias)
A:keras.backend.tensorflow_backend.label_shape->tensorflow.shape(labels)
A:keras.backend.tensorflow_backend.num_batches_tns->tensorflow.stack([label_shape[0]])
A:keras.backend.tensorflow_backend.max_num_labels_tns->tensorflow.stack([label_shape[1]])
A:keras.backend.tensorflow_backend.init->tensorflow.cast(tf.fill([1, label_shape[1]], 0), tf.bool)
A:keras.backend.tensorflow_backend.dense_mask->tensorflow.python.ops.functional_ops.scan(range_less_than, label_lengths, initializer=init, parallel_iterations=1)
A:keras.backend.tensorflow_backend.label_array->tensorflow.reshape(tf.tile(tf.range(label_shape[1]), num_batches_tns), label_shape)
A:keras.backend.tensorflow_backend.label_ind->tensorflow.boolean_mask(label_array, dense_mask)
A:keras.backend.tensorflow_backend.batch_array->tensorflow.transpose(tf.reshape(tf.tile(tf.range(label_shape[0]), max_num_labels_tns), reverse(label_shape, 0)))
A:keras.backend.tensorflow_backend.batch_ind->tensorflow.boolean_mask(batch_array, dense_mask)
A:keras.backend.tensorflow_backend.vals_sparse->tensorflow.gather_nd(labels, indices)
A:keras.backend.tensorflow_backend.label_length->tensorflow.to_int32(tf.squeeze(label_length))
A:keras.backend.tensorflow_backend.input_length->tensorflow.to_int32(input_length)
A:keras.backend.tensorflow_backend.sparse_labels->tensorflow.to_int32(ctc_label_dense_to_sparse(y_true, label_length))
A:keras.backend.tensorflow_backend.y_pred->tensorflow.log(tf.transpose(y_pred, perm=[1, 0, 2]) + epsilon())
A:keras.backend.tensorflow_backend.(decoded, log_prob)->tensorflow.python.ops.ctc_ops.ctc_beam_search_decoder(inputs=y_pred, sequence_length=input_length, beam_width=beam_width, top_paths=top_paths)
A:keras.backend.tensorflow_backend.slice_length->slice(i * stride, i * stride + kernel_size[0])
A:keras.backend.tensorflow_backend.x_aggregate->concatenate(xs, axis=0)
A:keras.backend.tensorflow_backend.slice_row->slice(i * stride_row, i * stride_row + kernel_size[0])
A:keras.backend.tensorflow_backend.slice_col->slice(j * stride_col, j * stride_col + kernel_size[1])
keras.backend.Function(self,inputs,outputs,updates=None,name=None,**session_kwargs)
keras.backend._TfDeviceCaptureOp(self)
keras.backend._TfDeviceCaptureOp._set_device(self,device)
keras.backend._broadcast_normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend._fused_normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend._get_available_gpus()
keras.backend._get_current_tf_device()
keras.backend._has_nchw_support()
keras.backend._is_current_explicit_device(device_type)
keras.backend._preprocess_conv1d_input(x,data_format)
keras.backend._preprocess_conv2d_input(x,data_format)
keras.backend._preprocess_conv3d_input(x,data_format)
keras.backend._preprocess_padding(padding)
keras.backend._regular_normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend._to_tensor(x,dtype)
keras.backend.abs(x)
keras.backend.all(x,axis=None,keepdims=False)
keras.backend.any(x,axis=None,keepdims=False)
keras.backend.arange(start,stop=None,step=1,dtype='int32')
keras.backend.argmax(x,axis=-1)
keras.backend.argmin(x,axis=-1)
keras.backend.batch_dot(x,y,axes=None)
keras.backend.batch_flatten(x)
keras.backend.batch_get_value(ops)
keras.backend.batch_normalization(x,mean,var,beta,gamma,epsilon=0.001)
keras.backend.batch_set_value(tuples)
keras.backend.bias_add(x,bias,data_format=None)
keras.backend.binary_crossentropy(target,output,from_logits=False)
keras.backend.cast(x,dtype)
keras.backend.categorical_crossentropy(target,output,from_logits=False)
keras.backend.clear_session()
keras.backend.clip(x,min_value,max_value)
keras.backend.concatenate(tensors,axis=-1)
keras.backend.constant(value,dtype=None,shape=None,name=None)
keras.backend.conv1d(x,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.conv2d(x,kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.conv2d_transpose(x,kernel,output_shape,strides=(1,1),padding='valid',data_format=None)
keras.backend.conv3d(x,kernel,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1))
keras.backend.conv3d_transpose(x,kernel,output_shape,strides=(1,1,1),padding='valid',data_format=None)
keras.backend.cos(x)
keras.backend.count_params(x)
keras.backend.ctc_batch_cost(y_true,y_pred,input_length,label_length)
keras.backend.ctc_decode(y_pred,input_length,greedy=True,beam_width=100,top_paths=1)
keras.backend.ctc_label_dense_to_sparse(labels,label_lengths)
keras.backend.cumprod(x,axis=0)
keras.backend.cumsum(x,axis=0)
keras.backend.depthwise_conv2d(x,depthwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.dot(x,y)
keras.backend.dropout(x,level,noise_shape=None,seed=None)
keras.backend.dtype(x)
keras.backend.elu(x,alpha=1.0)
keras.backend.equal(x,y)
keras.backend.eval(x)
keras.backend.exp(x)
keras.backend.expand_dims(x,axis=-1)
keras.backend.eye(size,dtype=None,name=None)
keras.backend.flatten(x)
keras.backend.foldl(fn,elems,initializer=None,name=None)
keras.backend.foldr(fn,elems,initializer=None,name=None)
keras.backend.function(inputs,outputs,updates=None,**kwargs)
keras.backend.gather(reference,indices)
keras.backend.get_session()
keras.backend.get_uid(prefix='')
keras.backend.get_value(x)
keras.backend.get_variable_shape(x)
keras.backend.gradients(loss,variables)
keras.backend.greater(x,y)
keras.backend.greater_equal(x,y)
keras.backend.hard_sigmoid(x)
keras.backend.identity(x,name=None)
keras.backend.in_test_phase(x,alt,training=None)
keras.backend.in_top_k(predictions,targets,k)
keras.backend.in_train_phase(x,alt,training=None)
keras.backend.int_shape(x)
keras.backend.is_keras_tensor(x)
keras.backend.is_placeholder(x)
keras.backend.is_sparse(tensor)
keras.backend.l2_normalize(x,axis=None)
keras.backend.learning_phase()
keras.backend.less(x,y)
keras.backend.less_equal(x,y)
keras.backend.local_conv1d(inputs,kernel,kernel_size,strides,data_format=None)
keras.backend.local_conv2d(inputs,kernel,kernel_size,strides,output_shape,data_format=None)
keras.backend.log(x)
keras.backend.logsumexp(x,axis=None,keepdims=False)
keras.backend.manual_variable_initialization(value)
keras.backend.map_fn(fn,elems,name=None,dtype=None)
keras.backend.max(x,axis=None,keepdims=False)
keras.backend.maximum(x,y)
keras.backend.mean(x,axis=None,keepdims=False)
keras.backend.min(x,axis=None,keepdims=False)
keras.backend.minimum(x,y)
keras.backend.moving_average_update(x,value,momentum)
keras.backend.ndim(x)
keras.backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.not_equal(x,y)
keras.backend.one_hot(indices,num_classes)
keras.backend.ones(shape,dtype=None,name=None)
keras.backend.ones_like(x,dtype=None,name=None)
keras.backend.permute_dimensions(x,pattern)
keras.backend.placeholder(shape=None,ndim=None,dtype=None,sparse=False,name=None)
keras.backend.pool2d(x,pool_size,strides=(1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.pool3d(x,pool_size,strides=(1,1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.pow(x,a)
keras.backend.print_tensor(x,message='')
keras.backend.prod(x,axis=None,keepdims=False)
keras.backend.random_binomial(shape,p=0.0,dtype=None,seed=None)
keras.backend.random_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.random_normal_variable(shape,mean,scale,dtype=None,name=None,seed=None)
keras.backend.random_uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)
keras.backend.random_uniform_variable(shape,low,high,dtype=None,name=None,seed=None)
keras.backend.relu(x,alpha=0.0,max_value=None)
keras.backend.repeat(x,n)
keras.backend.repeat_elements(x,rep,axis)
keras.backend.reset_uids()
keras.backend.reshape(x,shape)
keras.backend.resize_images(x,height_factor,width_factor,data_format)
keras.backend.resize_volumes(x,depth_factor,height_factor,width_factor,data_format)
keras.backend.reverse(x,axes)
keras.backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None)
keras.backend.round(x)
keras.backend.separable_conv1d(x,depthwise_kernel,pointwise_kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.set_learning_phase(value)
keras.backend.set_session(session)
keras.backend.set_value(x,value)
keras.backend.shape(x)
keras.backend.sigmoid(x)
keras.backend.sign(x)
keras.backend.sin(x)
keras.backend.softmax(x)
keras.backend.softplus(x)
keras.backend.softsign(x)
keras.backend.sparse_categorical_crossentropy(target,output,from_logits=False)
keras.backend.spatial_2d_padding(x,padding=((1,1),(1,1)),data_format=None)
keras.backend.spatial_3d_padding(x,padding=((1,1),(1,1),(1,1)),data_format=None)
keras.backend.sqrt(x)
keras.backend.square(x)
keras.backend.squeeze(x,axis)
keras.backend.stack(x,axis=0)
keras.backend.std(x,axis=None,keepdims=False)
keras.backend.stop_gradient(variables)
keras.backend.sum(x,axis=None,keepdims=False)
keras.backend.switch(condition,then_expression,else_expression)
keras.backend.tanh(x)
keras.backend.temporal_padding(x,padding=(1,1))
keras.backend.tensorflow_backend.Function(self,inputs,outputs,updates=None,name=None,**session_kwargs)
keras.backend.tensorflow_backend.Function.__init__(self,inputs,outputs,updates=None,name=None,**session_kwargs)
keras.backend.tensorflow_backend._TfDeviceCaptureOp(self)
keras.backend.tensorflow_backend._TfDeviceCaptureOp.__init__(self)
keras.backend.tensorflow_backend._TfDeviceCaptureOp._set_device(self,device)
keras.backend.tensorflow_backend._broadcast_normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.tensorflow_backend._fused_normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.tensorflow_backend._get_available_gpus()
keras.backend.tensorflow_backend._get_current_tf_device()
keras.backend.tensorflow_backend._has_nchw_support()
keras.backend.tensorflow_backend._is_current_explicit_device(device_type)
keras.backend.tensorflow_backend._preprocess_conv1d_input(x,data_format)
keras.backend.tensorflow_backend._preprocess_conv2d_input(x,data_format)
keras.backend.tensorflow_backend._preprocess_conv3d_input(x,data_format)
keras.backend.tensorflow_backend._preprocess_padding(padding)
keras.backend.tensorflow_backend._regular_normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.tensorflow_backend._to_tensor(x,dtype)
keras.backend.tensorflow_backend.abs(x)
keras.backend.tensorflow_backend.all(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.any(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.arange(start,stop=None,step=1,dtype='int32')
keras.backend.tensorflow_backend.argmax(x,axis=-1)
keras.backend.tensorflow_backend.argmin(x,axis=-1)
keras.backend.tensorflow_backend.batch_dot(x,y,axes=None)
keras.backend.tensorflow_backend.batch_flatten(x)
keras.backend.tensorflow_backend.batch_get_value(ops)
keras.backend.tensorflow_backend.batch_normalization(x,mean,var,beta,gamma,epsilon=0.001)
keras.backend.tensorflow_backend.batch_set_value(tuples)
keras.backend.tensorflow_backend.bias_add(x,bias,data_format=None)
keras.backend.tensorflow_backend.binary_crossentropy(target,output,from_logits=False)
keras.backend.tensorflow_backend.cast(x,dtype)
keras.backend.tensorflow_backend.categorical_crossentropy(target,output,from_logits=False)
keras.backend.tensorflow_backend.clear_session()
keras.backend.tensorflow_backend.clip(x,min_value,max_value)
keras.backend.tensorflow_backend.concatenate(tensors,axis=-1)
keras.backend.tensorflow_backend.constant(value,dtype=None,shape=None,name=None)
keras.backend.tensorflow_backend.conv1d(x,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.tensorflow_backend.conv2d(x,kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.tensorflow_backend.conv2d_transpose(x,kernel,output_shape,strides=(1,1),padding='valid',data_format=None)
keras.backend.tensorflow_backend.conv3d(x,kernel,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1))
keras.backend.tensorflow_backend.conv3d_transpose(x,kernel,output_shape,strides=(1,1,1),padding='valid',data_format=None)
keras.backend.tensorflow_backend.cos(x)
keras.backend.tensorflow_backend.count_params(x)
keras.backend.tensorflow_backend.ctc_batch_cost(y_true,y_pred,input_length,label_length)
keras.backend.tensorflow_backend.ctc_decode(y_pred,input_length,greedy=True,beam_width=100,top_paths=1)
keras.backend.tensorflow_backend.ctc_label_dense_to_sparse(labels,label_lengths)
keras.backend.tensorflow_backend.cumprod(x,axis=0)
keras.backend.tensorflow_backend.cumsum(x,axis=0)
keras.backend.tensorflow_backend.depthwise_conv2d(x,depthwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.tensorflow_backend.dot(x,y)
keras.backend.tensorflow_backend.dropout(x,level,noise_shape=None,seed=None)
keras.backend.tensorflow_backend.dtype(x)
keras.backend.tensorflow_backend.elu(x,alpha=1.0)
keras.backend.tensorflow_backend.equal(x,y)
keras.backend.tensorflow_backend.eval(x)
keras.backend.tensorflow_backend.exp(x)
keras.backend.tensorflow_backend.expand_dims(x,axis=-1)
keras.backend.tensorflow_backend.eye(size,dtype=None,name=None)
keras.backend.tensorflow_backend.flatten(x)
keras.backend.tensorflow_backend.foldl(fn,elems,initializer=None,name=None)
keras.backend.tensorflow_backend.foldr(fn,elems,initializer=None,name=None)
keras.backend.tensorflow_backend.function(inputs,outputs,updates=None,**kwargs)
keras.backend.tensorflow_backend.gather(reference,indices)
keras.backend.tensorflow_backend.get_session()
keras.backend.tensorflow_backend.get_uid(prefix='')
keras.backend.tensorflow_backend.get_value(x)
keras.backend.tensorflow_backend.get_variable_shape(x)
keras.backend.tensorflow_backend.gradients(loss,variables)
keras.backend.tensorflow_backend.greater(x,y)
keras.backend.tensorflow_backend.greater_equal(x,y)
keras.backend.tensorflow_backend.hard_sigmoid(x)
keras.backend.tensorflow_backend.identity(x,name=None)
keras.backend.tensorflow_backend.in_test_phase(x,alt,training=None)
keras.backend.tensorflow_backend.in_top_k(predictions,targets,k)
keras.backend.tensorflow_backend.in_train_phase(x,alt,training=None)
keras.backend.tensorflow_backend.int_shape(x)
keras.backend.tensorflow_backend.is_keras_tensor(x)
keras.backend.tensorflow_backend.is_placeholder(x)
keras.backend.tensorflow_backend.is_sparse(tensor)
keras.backend.tensorflow_backend.l2_normalize(x,axis=None)
keras.backend.tensorflow_backend.learning_phase()
keras.backend.tensorflow_backend.less(x,y)
keras.backend.tensorflow_backend.less_equal(x,y)
keras.backend.tensorflow_backend.local_conv1d(inputs,kernel,kernel_size,strides,data_format=None)
keras.backend.tensorflow_backend.local_conv2d(inputs,kernel,kernel_size,strides,output_shape,data_format=None)
keras.backend.tensorflow_backend.log(x)
keras.backend.tensorflow_backend.logsumexp(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.manual_variable_initialization(value)
keras.backend.tensorflow_backend.map_fn(fn,elems,name=None,dtype=None)
keras.backend.tensorflow_backend.max(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.maximum(x,y)
keras.backend.tensorflow_backend.mean(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.min(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.minimum(x,y)
keras.backend.tensorflow_backend.moving_average_update(x,value,momentum)
keras.backend.tensorflow_backend.ndim(x)
keras.backend.tensorflow_backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.tensorflow_backend.not_equal(x,y)
keras.backend.tensorflow_backend.one_hot(indices,num_classes)
keras.backend.tensorflow_backend.ones(shape,dtype=None,name=None)
keras.backend.tensorflow_backend.ones_like(x,dtype=None,name=None)
keras.backend.tensorflow_backend.permute_dimensions(x,pattern)
keras.backend.tensorflow_backend.placeholder(shape=None,ndim=None,dtype=None,sparse=False,name=None)
keras.backend.tensorflow_backend.pool2d(x,pool_size,strides=(1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.tensorflow_backend.pool3d(x,pool_size,strides=(1,1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.tensorflow_backend.pow(x,a)
keras.backend.tensorflow_backend.print_tensor(x,message='')
keras.backend.tensorflow_backend.prod(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.random_binomial(shape,p=0.0,dtype=None,seed=None)
keras.backend.tensorflow_backend.random_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.tensorflow_backend.random_normal_variable(shape,mean,scale,dtype=None,name=None,seed=None)
keras.backend.tensorflow_backend.random_uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)
keras.backend.tensorflow_backend.random_uniform_variable(shape,low,high,dtype=None,name=None,seed=None)
keras.backend.tensorflow_backend.relu(x,alpha=0.0,max_value=None)
keras.backend.tensorflow_backend.repeat(x,n)
keras.backend.tensorflow_backend.repeat_elements(x,rep,axis)
keras.backend.tensorflow_backend.reset_uids()
keras.backend.tensorflow_backend.reshape(x,shape)
keras.backend.tensorflow_backend.resize_images(x,height_factor,width_factor,data_format)
keras.backend.tensorflow_backend.resize_volumes(x,depth_factor,height_factor,width_factor,data_format)
keras.backend.tensorflow_backend.reverse(x,axes)
keras.backend.tensorflow_backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None)
keras.backend.tensorflow_backend.round(x)
keras.backend.tensorflow_backend.separable_conv1d(x,depthwise_kernel,pointwise_kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.tensorflow_backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.tensorflow_backend.set_learning_phase(value)
keras.backend.tensorflow_backend.set_session(session)
keras.backend.tensorflow_backend.set_value(x,value)
keras.backend.tensorflow_backend.shape(x)
keras.backend.tensorflow_backend.sigmoid(x)
keras.backend.tensorflow_backend.sign(x)
keras.backend.tensorflow_backend.sin(x)
keras.backend.tensorflow_backend.softmax(x)
keras.backend.tensorflow_backend.softplus(x)
keras.backend.tensorflow_backend.softsign(x)
keras.backend.tensorflow_backend.sparse_categorical_crossentropy(target,output,from_logits=False)
keras.backend.tensorflow_backend.spatial_2d_padding(x,padding=((1,1),(1,1)),data_format=None)
keras.backend.tensorflow_backend.spatial_3d_padding(x,padding=((1,1),(1,1),(1,1)),data_format=None)
keras.backend.tensorflow_backend.sqrt(x)
keras.backend.tensorflow_backend.square(x)
keras.backend.tensorflow_backend.squeeze(x,axis)
keras.backend.tensorflow_backend.stack(x,axis=0)
keras.backend.tensorflow_backend.std(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.stop_gradient(variables)
keras.backend.tensorflow_backend.sum(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.switch(condition,then_expression,else_expression)
keras.backend.tensorflow_backend.tanh(x)
keras.backend.tensorflow_backend.temporal_padding(x,padding=(1,1))
keras.backend.tensorflow_backend.tile(x,n)
keras.backend.tensorflow_backend.to_dense(tensor)
keras.backend.tensorflow_backend.transpose(x)
keras.backend.tensorflow_backend.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.tensorflow_backend.update(x,new_x)
keras.backend.tensorflow_backend.update_add(x,increment)
keras.backend.tensorflow_backend.update_sub(x,decrement)
keras.backend.tensorflow_backend.var(x,axis=None,keepdims=False)
keras.backend.tensorflow_backend.variable(value,dtype=None,name=None,constraint=None)
keras.backend.tensorflow_backend.zeros(shape,dtype=None,name=None)
keras.backend.tensorflow_backend.zeros_like(x,dtype=None,name=None)
keras.backend.tile(x,n)
keras.backend.to_dense(tensor)
keras.backend.transpose(x)
keras.backend.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.update(x,new_x)
keras.backend.update_add(x,increment)
keras.backend.update_sub(x,decrement)
keras.backend.var(x,axis=None,keepdims=False)
keras.backend.variable(value,dtype=None,name=None,constraint=None)
keras.backend.zeros(shape,dtype=None,name=None)
keras.backend.zeros_like(x,dtype=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/backend/common.py----------------------------------------
A:keras.backend.common._FLOATX->str(floatx)
A:keras.backend.common._IMAGE_DATA_FORMAT->str(data_format)
keras.backend.cast_to_floatx(x)
keras.backend.common.cast_to_floatx(x)
keras.backend.common.epsilon()
keras.backend.common.floatx()
keras.backend.common.image_data_format()
keras.backend.common.image_dim_ordering()
keras.backend.common.set_epsilon(e)
keras.backend.common.set_floatx(floatx)
keras.backend.common.set_image_data_format(data_format)
keras.backend.common.set_image_dim_ordering(dim_ordering)
keras.backend.epsilon()
keras.backend.floatx()
keras.backend.image_data_format()
keras.backend.set_epsilon(e)
keras.backend.set_floatx(floatx)
keras.backend.set_image_data_format(data_format)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/backend/theano_backend.py----------------------------------------
A:keras.backend.theano_backend.theano.config.floatX->floatx()
A:keras.backend.theano_backend._LEARNING_PHASE->theano.tensor.scalar(dtype='uint8', name='keras_learning_phase')
A:keras.backend.theano_backend._UID_PREFIXES->defaultdict(int)
A:keras.backend.theano_backend.prefix->'/'.join(NAME_SCOPE_STACK)
A:keras.backend.theano_backend.dtype->floatx()
A:keras.backend.theano_backend.variable->theano.shared(value=value, name=_prepare_name(name, 'variable'), strict=False)
A:keras.backend.theano_backend.value->numpy.asarray(value, dtype=dtype)
A:keras.backend.theano_backend.const->theano.tensor.constant(np_value, dtype=dtype, name=_prepare_name(name, 'constant'))
A:keras.backend.theano_backend.ndim->len(shape)
A:keras.backend.theano_backend.shape->list(x.shape)
A:keras.backend.theano_backend.name->_prepare_name(name, 'placeholder')
A:keras.backend.theano_backend.x->x.dimshuffle((0, 4, 1, 2, 3)).dimshuffle((0, 4, 1, 2, 3))
A:keras.backend.theano_backend.f->theano.function([], x.shape, profile=False)
A:keras.backend.theano_backend.out->expand_dims(out, 1)
A:keras.backend.theano_backend.x_shape->list(x._keras_shape)
A:keras.backend.theano_backend.y_shape->list(y._keras_shape)
A:keras.backend.theano_backend.out._keras_shape->tuple(shape)
A:keras.backend.theano_backend.y->theano.tensor.set_subtensor(output[indices], x)
A:keras.backend.theano_backend.y._keras_shape->tuple(kshape)
A:keras.backend.theano_backend.gamma->gamma.dimshuffle(shuffle_pattern).dimshuffle(shuffle_pattern)
A:keras.backend.theano_backend.beta->beta.dimshuffle(shuffle_pattern).dimshuffle(shuffle_pattern)
A:keras.backend.theano_backend.(normed, mean, stdinv)->theano.sandbox.cuda.dnn.dnn_batch_normalization_train(x, broadcast_gamma, broadcast_beta, 'spatial', epsilon)
A:keras.backend.theano_backend.reduction_axes->list(range(x.ndim - 1))
A:keras.backend.theano_backend.broadcast_beta->theano.tensor.reshape(beta, target_shape)
A:keras.backend.theano_backend.broadcast_gamma->theano.tensor.reshape(gamma, target_shape)
A:keras.backend.theano_backend.normed->batch_normalization(x, broadcast_mean, broadcast_var, broadcast_beta, broadcast_gamma, epsilon)
A:keras.backend.theano_backend.mean->mean.dimshuffle(shuffle_pattern).dimshuffle(shuffle_pattern)
A:keras.backend.theano_backend.stdinv->theano.tensor.as_tensor_variable(stdinv)
A:keras.backend.theano_backend.var->var.dimshuffle(shuffle_pattern).dimshuffle(shuffle_pattern)
A:keras.backend.theano_backend.target_shape->theano.tensor.stack(*target_shape)
A:keras.backend.theano_backend.broadcast_mean->theano.tensor.reshape(mean, target_shape)
A:keras.backend.theano_backend.broadcast_var->theano.tensor.reshape(var, target_shape)
A:keras.backend.theano_backend.axis->mean.dimshuffle(shuffle_pattern).dimshuffle(shuffle_pattern).broadcastable.index(False)
A:keras.backend.theano_backend.shuffle_pattern->list(range(ndim))
A:keras.backend.theano_backend.result->theano.tensor.set_subtensor(output[:, padding[0]:x.shape[1] + padding[0], :], x)
A:keras.backend.theano_backend.pattern->tuple(pattern)
A:keras.backend.theano_backend.output->permute_dimensions(output, (2, 0, 1, 3))
A:keras.backend.theano_backend.kshape->list(x._keras_shape)
A:keras.backend.theano_backend.data_format->image_data_format()
A:keras.backend.theano_backend.input_shape->tuple((indices.shape[i] for i in range(indices.ndim)))
A:keras.backend.theano_backend.indices->list(range(input_length))
A:keras.backend.theano_backend.oh->theano.tensor.reshape(oh, input_shape + (num_classes,))
A:keras.backend.theano_backend.p_op->Print(message)
A:keras.backend.theano_backend.updates->unique_variables_to_update.items()
A:keras.backend.theano_backend.self.function->theano.function(inputs, outputs, updates=updates, allow_input_downcast=True, on_unused_input='ignore', name=name, **kwargs)
A:keras.backend.theano_backend.inputs->inputs.dimshuffle(axes).dimshuffle(axes)
A:keras.backend.theano_backend.mask->mask.dimshuffle(axes).dimshuffle(axes)
A:keras.backend.theano_backend.(output, new_states)->step_function(inputs[i], states + constants)
A:keras.backend.theano_backend.prev_output->zeros_like(output)
A:keras.backend.theano_backend.outputs->outputs.dimshuffle(axes).dimshuffle(axes)
A:keras.backend.theano_backend.initial_output->theano.tensor.unbroadcast(initial_output, 0, 1)
A:keras.backend.theano_backend.initial_states[0]->theano.tensor.unbroadcast(initial_states[0], 0, 1)
A:keras.backend.theano_backend.(outputs, new_states)->step_function(inputs, states)
A:keras.backend.theano_backend.(results, _)->theano.scan(_step, sequences=inputs, outputs_info=[None] + initial_states, non_sequences=constants, go_backwards=go_backwards)
A:keras.backend.theano_backend.(outputs, states)->step_function(inputs[i], states + constants)
A:keras.backend.theano_backend.then_expression->then_expression()
A:keras.backend.theano_backend.else_expression->else_expression()
A:keras.backend.theano_backend.cond_ndim->ndim(condition)
A:keras.backend.theano_backend.expr_ndim->ndim(then_expression)
A:keras.backend.theano_backend.condition->expand_dims(condition)
A:keras.backend.theano_backend.training->learning_phase()
A:keras.backend.theano_backend.alt->alt()
A:keras.backend.theano_backend.target->reshape(target, shape(output))
A:keras.backend.theano_backend.seed->numpy.random.randint(1, 10000000.0)
A:keras.backend.theano_backend.noise_shape->tuple(noise_shape)
A:keras.backend.theano_backend.rng->RandomStreams(seed=seed)
A:keras.backend.theano_backend.random_tensor->theano.tensor.patternbroadcast(random_tensor, [dim == 1 for dim in noise_shape])
A:keras.backend.theano_backend.square_sum->theano.tensor.sum(T.square(x), axis=axis, keepdims=True)
A:keras.backend.theano_backend.norm->theano.tensor.sqrt(T.maximum(square_sum, epsilon()))
A:keras.backend.theano_backend.kernel->_preprocess_conv3d_kernel(kernel, data_format)
A:keras.backend.theano_backend.image_shape->_preprocess_conv2d_image_shape(int_shape(x), data_format)
A:keras.backend.theano_backend.volume_shape->_preprocess_conv3d_volume_shape(int_shape(x), data_format)
A:keras.backend.theano_backend.filter_shape->tuple((int_or_none(v) for v in filter_shape))
A:keras.backend.theano_backend.conv_out->_postprocess_conv3d_output(conv_out, x, padding, kernel_shape, strides, data_format)
A:keras.backend.theano_backend.kernel_shape->int_shape(kernel)
A:keras.backend.theano_backend.th_padding->_preprocess_padding(padding)
A:keras.backend.theano_backend.op->theano.tensor.nnet.abstract_conv.AbstractConv3d_gradInputs(imshp=None, kshp=kernel_shape, subsample=strides, border_mode=th_padding, filter_flip=not flip_filters)
A:keras.backend.theano_backend.pool_out->pool_out.dimshuffle((0, 2, 3, 4, 1)).dimshuffle((0, 2, 3, 4, 1))
A:keras.backend.theano_backend.bias_shape->tuple(bias.shape)
A:keras.backend.theano_backend.normal_tensor->RandomStreams(seed=seed).normal(size=shape, avg=mean, std=stddev, dtype=dtype)
A:keras.backend.theano_backend.Y_->theano.tensor.set_subtensor(Y_[T.arange(Y.shape[0]) * 2 + 1], Y)
A:keras.backend.theano_backend.non_repeats->theano.tensor.neq(Y[skip_idxs], Y[skip_idxs + 2])
A:keras.backend.theano_backend.active_next->theano.tensor.cast(T.minimum(T.maximum(active + 1, T.max(T.concatenate([active_skip_idxs, [-1]])) + 2 + 1), log_p_curr.shape[0]), 'int32')
A:keras.backend.theano_backend.common_factor->theano.tensor.max(log_probs)
A:keras.backend.theano_backend.p_prev->theano.tensor.exp(log_p_prev[:active] - common_factor)
A:keras.backend.theano_backend._p_prev->theano.tensor.inc_subtensor(_p_prev[active_skip_idxs + 2], p_prev[active_skip_idxs])
A:keras.backend.theano_backend.log_p_next->theano.tensor.set_subtensor(zeros[:active_next], log_p_curr[:active_next] + updated_log_p_prev)
A:keras.backend.theano_backend.L->theano.tensor.log(smoothed_predict)
A:keras.backend.theano_backend.zeros->theano.tensor.zeros_like(L[0])
A:keras.backend.theano_backend.f_skip_idxs->ctc_create_skip_idxs(Y)
A:keras.backend.theano_backend.b_skip_idxs->ctc_create_skip_idxs(Y[::-1])
A:keras.backend.theano_backend.(f_active_next, log_f_next)->ctc_update_log_p(f_skip_idxs, zeros, f_active, log_f_curr, log_f_prev)
A:keras.backend.theano_backend.(b_active_next, log_b_next)->ctc_update_log_p(b_skip_idxs, zeros, b_active, log_b_curr, log_b_prev)
A:keras.backend.theano_backend.([f_active, log_f_probs, b_active, log_b_probs], _)->theano.scan(step, sequences=[L, L[::-1, ::-1]], outputs_info=[np.int32(1), log_first, np.int32(1), log_first])
A:keras.backend.theano_backend.idxs->theano.tensor.arange(L.shape[1]).dimshuffle('x', 0)
A:keras.backend.theano_backend.(log_probs, mask)->ctc_path_probs(predict, ctc_interleave_blanks(Y))
A:keras.backend.theano_backend.(ret, _)->theano.scan(fn=ctc_step, outputs_info=None, sequences=[y_true, y_pred, input_length, label_length])
A:keras.backend.theano_backend.ret->ret.dimshuffle('x', 0).dimshuffle('x', 0)
A:keras.backend.theano_backend.slice_length->slice(i * stride, i * stride + kernel_size[0])
A:keras.backend.theano_backend.x_aggregate->concatenate(xs, axis=0)
A:keras.backend.theano_backend.slice_row->slice(i * stride_row, i * stride_row + kernel_size[0])
A:keras.backend.theano_backend.slice_col->slice(j * stride_col, j * stride_col + kernel_size[1])
A:keras.backend.theano_backend.x_flatten->reshape(inputs[:, :, slice_row, slice_col], (1, -1, feature_dim))
keras.backend.Function(self,inputs,outputs,updates=[],name=None,**kwargs)
keras.backend._assert_has_capability(module,func)
keras.backend._assert_sparse_module()
keras.backend._is_explicit_shape(shape)
keras.backend._old_batch_normalization(x,mean,var,beta,gamma,epsilon=0.001)
keras.backend._old_normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend._postprocess_conv2d_output(conv_out,x,padding,kernel_shape,strides,data_format)
keras.backend._postprocess_conv3d_output(conv_out,x,padding,kernel_shape,strides,data_format)
keras.backend._prepare_name(name,default)
keras.backend._preprocess_conv2d_filter_shape(filter_shape,data_format)
keras.backend._preprocess_conv2d_image_shape(image_shape,data_format)
keras.backend._preprocess_conv2d_input(x,data_format)
keras.backend._preprocess_conv2d_kernel(kernel,data_format)
keras.backend._preprocess_conv3d_filter_shape(filter_shape,data_format)
keras.backend._preprocess_conv3d_input(x,data_format)
keras.backend._preprocess_conv3d_kernel(kernel,data_format)
keras.backend._preprocess_conv3d_volume_shape(volume_shape,data_format)
keras.backend._preprocess_padding(padding)
keras.backend.abs(x)
keras.backend.all(x,axis=None,keepdims=False)
keras.backend.any(x,axis=None,keepdims=False)
keras.backend.arange(start,stop=None,step=1,dtype='int32')
keras.backend.argmax(x,axis=-1)
keras.backend.argmin(x,axis=-1)
keras.backend.batch_dot(x,y,axes=None)
keras.backend.batch_flatten(x)
keras.backend.batch_get_value(xs)
keras.backend.batch_normalization(x,mean,var,beta,gamma,epsilon=0.001)
keras.backend.batch_set_value(tuples)
keras.backend.bias_add(x,bias,data_format=None)
keras.backend.binary_crossentropy(target,output,from_logits=False)
keras.backend.cast(x,dtype)
keras.backend.categorical_crossentropy(target,output,from_logits=False)
keras.backend.clip(x,min_value,max_value)
keras.backend.concatenate(tensors,axis=-1)
keras.backend.constant(value,dtype=None,shape=None,name=None)
keras.backend.conv1d(x,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.conv2d(x,kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.conv2d_transpose(x,kernel,output_shape,strides=(1,1),padding='valid',data_format=None)
keras.backend.conv3d(x,kernel,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1))
keras.backend.conv3d_transpose(x,kernel,output_shape,strides=(1,1,1),padding='valid',data_format=None)
keras.backend.cos(x)
keras.backend.count_params(x)
keras.backend.ctc_batch_cost(y_true,y_pred,input_length,label_length)
keras.backend.ctc_cost(predict,Y)
keras.backend.ctc_create_skip_idxs(Y)
keras.backend.ctc_interleave_blanks(Y)
keras.backend.ctc_path_probs(predict,Y,alpha=0.0001)
keras.backend.ctc_update_log_p(skip_idxs,zeros,active,log_p_curr,log_p_prev)
keras.backend.cumprod(x,axis=0)
keras.backend.cumsum(x,axis=0)
keras.backend.depthwise_conv2d(x,depthwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.dot(x,y)
keras.backend.dropout(x,level,noise_shape=None,seed=None)
keras.backend.dtype(x)
keras.backend.elu(x,alpha=1.0)
keras.backend.equal(x,y)
keras.backend.eval(x)
keras.backend.exp(x)
keras.backend.expand_dims(x,axis=-1)
keras.backend.eye(size,dtype=None,name=None)
keras.backend.flatten(x)
keras.backend.foldl(fn,elems,initializer=None,name=None)
keras.backend.foldr(fn,elems,initializer=None,name=None)
keras.backend.function(inputs,outputs,updates=[],**kwargs)
keras.backend.gather(reference,indices)
keras.backend.get_uid(prefix='')
keras.backend.get_value(x)
keras.backend.get_variable_shape(x)
keras.backend.gradients(loss,variables)
keras.backend.greater(x,y)
keras.backend.greater_equal(x,y)
keras.backend.hard_sigmoid(x)
keras.backend.identity(x,name=None)
keras.backend.in_test_phase(x,alt,training=None)
keras.backend.in_top_k(predictions,targets,k)
keras.backend.in_train_phase(x,alt,training=None)
keras.backend.int_shape(x)
keras.backend.is_keras_tensor(x)
keras.backend.is_placeholder(x)
keras.backend.is_sparse(tensor)
keras.backend.l2_normalize(x,axis=None)
keras.backend.learning_phase()
keras.backend.less(x,y)
keras.backend.less_equal(x,y)
keras.backend.local_conv1d(inputs,kernel,kernel_size,strides,data_format=None)
keras.backend.local_conv2d(inputs,kernel,kernel_size,strides,output_shape,data_format=None)
keras.backend.log(x)
keras.backend.logsumexp(x,axis=None,keepdims=False)
keras.backend.map_fn(fn,elems,name=None,dtype=None)
keras.backend.max(x,axis=None,keepdims=False)
keras.backend.maximum(x,y)
keras.backend.mean(x,axis=None,keepdims=False)
keras.backend.min(x,axis=None,keepdims=False)
keras.backend.minimum(x,y)
keras.backend.moving_average_update(variable,value,momentum)
keras.backend.name_scope(name)
keras.backend.ndim(x)
keras.backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.not_equal(x,y)
keras.backend.one_hot(indices,num_classes)
keras.backend.ones(shape,dtype=None,name=None)
keras.backend.ones_like(x,dtype=None,name=None)
keras.backend.pattern_broadcast(x,broadcastable)
keras.backend.permute_dimensions(x,pattern)
keras.backend.placeholder(shape=None,ndim=None,dtype=None,sparse=False,name=None)
keras.backend.pool2d(x,pool_size,strides=(1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.pool3d(x,pool_size,strides=(1,1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.pow(x,a)
keras.backend.print_tensor(x,message='')
keras.backend.prod(x,axis=None,keepdims=False)
keras.backend.random_binomial(shape,p=0.0,dtype=None,seed=None)
keras.backend.random_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.random_normal_variable(shape,mean,scale,dtype=None,name=None)
keras.backend.random_uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)
keras.backend.random_uniform_variable(shape,low,high,dtype=None,name=None)
keras.backend.relu(x,alpha=0.0,max_value=None)
keras.backend.repeat(x,n)
keras.backend.repeat_elements(x,rep,axis)
keras.backend.reset_uids()
keras.backend.reshape(x,shape)
keras.backend.resize_images(x,height_factor,width_factor,data_format)
keras.backend.resize_volumes(x,depth_factor,height_factor,width_factor,data_format)
keras.backend.reverse(x,axes)
keras.backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None)
keras.backend.round(x)
keras.backend.separable_conv1d(x,depthwise_kernel,pointwise_kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.set_learning_phase(value)
keras.backend.set_value(x,value)
keras.backend.shape(x)
keras.backend.sigmoid(x)
keras.backend.sign(x)
keras.backend.sin(x)
keras.backend.softmax(x)
keras.backend.softplus(x)
keras.backend.softsign(x)
keras.backend.sparse_categorical_crossentropy(target,output,from_logits=False)
keras.backend.spatial_2d_padding(x,padding=((1,1),(1,1)),data_format=None)
keras.backend.spatial_3d_padding(x,padding=((1,1),(1,1),(1,1)),data_format=None)
keras.backend.sqrt(x)
keras.backend.square(x)
keras.backend.squeeze(x,axis)
keras.backend.stack(x,axis=0)
keras.backend.std(x,axis=None,keepdims=False)
keras.backend.stop_gradient(variables)
keras.backend.sum(x,axis=None,keepdims=False)
keras.backend.switch(condition,then_expression,else_expression)
keras.backend.tanh(x)
keras.backend.temporal_padding(x,padding=(1,1))
keras.backend.theano_backend.Function(self,inputs,outputs,updates=[],name=None,**kwargs)
keras.backend.theano_backend.Function.__init__(self,inputs,outputs,updates=[],name=None,**kwargs)
keras.backend.theano_backend._assert_has_capability(module,func)
keras.backend.theano_backend._assert_sparse_module()
keras.backend.theano_backend._is_explicit_shape(shape)
keras.backend.theano_backend._old_batch_normalization(x,mean,var,beta,gamma,epsilon=0.001)
keras.backend.theano_backend._old_normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.theano_backend._postprocess_conv2d_output(conv_out,x,padding,kernel_shape,strides,data_format)
keras.backend.theano_backend._postprocess_conv3d_output(conv_out,x,padding,kernel_shape,strides,data_format)
keras.backend.theano_backend._prepare_name(name,default)
keras.backend.theano_backend._preprocess_conv2d_filter_shape(filter_shape,data_format)
keras.backend.theano_backend._preprocess_conv2d_image_shape(image_shape,data_format)
keras.backend.theano_backend._preprocess_conv2d_input(x,data_format)
keras.backend.theano_backend._preprocess_conv2d_kernel(kernel,data_format)
keras.backend.theano_backend._preprocess_conv3d_filter_shape(filter_shape,data_format)
keras.backend.theano_backend._preprocess_conv3d_input(x,data_format)
keras.backend.theano_backend._preprocess_conv3d_kernel(kernel,data_format)
keras.backend.theano_backend._preprocess_conv3d_volume_shape(volume_shape,data_format)
keras.backend.theano_backend._preprocess_padding(padding)
keras.backend.theano_backend.abs(x)
keras.backend.theano_backend.all(x,axis=None,keepdims=False)
keras.backend.theano_backend.any(x,axis=None,keepdims=False)
keras.backend.theano_backend.arange(start,stop=None,step=1,dtype='int32')
keras.backend.theano_backend.argmax(x,axis=-1)
keras.backend.theano_backend.argmin(x,axis=-1)
keras.backend.theano_backend.batch_dot(x,y,axes=None)
keras.backend.theano_backend.batch_flatten(x)
keras.backend.theano_backend.batch_get_value(xs)
keras.backend.theano_backend.batch_normalization(x,mean,var,beta,gamma,epsilon=0.001)
keras.backend.theano_backend.batch_set_value(tuples)
keras.backend.theano_backend.bias_add(x,bias,data_format=None)
keras.backend.theano_backend.binary_crossentropy(target,output,from_logits=False)
keras.backend.theano_backend.cast(x,dtype)
keras.backend.theano_backend.categorical_crossentropy(target,output,from_logits=False)
keras.backend.theano_backend.clip(x,min_value,max_value)
keras.backend.theano_backend.concatenate(tensors,axis=-1)
keras.backend.theano_backend.constant(value,dtype=None,shape=None,name=None)
keras.backend.theano_backend.conv1d(x,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.theano_backend.conv2d(x,kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.theano_backend.conv2d_transpose(x,kernel,output_shape,strides=(1,1),padding='valid',data_format=None)
keras.backend.theano_backend.conv3d(x,kernel,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1))
keras.backend.theano_backend.conv3d_transpose(x,kernel,output_shape,strides=(1,1,1),padding='valid',data_format=None)
keras.backend.theano_backend.cos(x)
keras.backend.theano_backend.count_params(x)
keras.backend.theano_backend.ctc_batch_cost(y_true,y_pred,input_length,label_length)
keras.backend.theano_backend.ctc_cost(predict,Y)
keras.backend.theano_backend.ctc_create_skip_idxs(Y)
keras.backend.theano_backend.ctc_interleave_blanks(Y)
keras.backend.theano_backend.ctc_path_probs(predict,Y,alpha=0.0001)
keras.backend.theano_backend.ctc_update_log_p(skip_idxs,zeros,active,log_p_curr,log_p_prev)
keras.backend.theano_backend.cumprod(x,axis=0)
keras.backend.theano_backend.cumsum(x,axis=0)
keras.backend.theano_backend.depthwise_conv2d(x,depthwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.theano_backend.dot(x,y)
keras.backend.theano_backend.dropout(x,level,noise_shape=None,seed=None)
keras.backend.theano_backend.dtype(x)
keras.backend.theano_backend.elu(x,alpha=1.0)
keras.backend.theano_backend.equal(x,y)
keras.backend.theano_backend.eval(x)
keras.backend.theano_backend.exp(x)
keras.backend.theano_backend.expand_dims(x,axis=-1)
keras.backend.theano_backend.eye(size,dtype=None,name=None)
keras.backend.theano_backend.flatten(x)
keras.backend.theano_backend.foldl(fn,elems,initializer=None,name=None)
keras.backend.theano_backend.foldr(fn,elems,initializer=None,name=None)
keras.backend.theano_backend.function(inputs,outputs,updates=[],**kwargs)
keras.backend.theano_backend.gather(reference,indices)
keras.backend.theano_backend.get_uid(prefix='')
keras.backend.theano_backend.get_value(x)
keras.backend.theano_backend.get_variable_shape(x)
keras.backend.theano_backend.gradients(loss,variables)
keras.backend.theano_backend.greater(x,y)
keras.backend.theano_backend.greater_equal(x,y)
keras.backend.theano_backend.hard_sigmoid(x)
keras.backend.theano_backend.identity(x,name=None)
keras.backend.theano_backend.in_test_phase(x,alt,training=None)
keras.backend.theano_backend.in_top_k(predictions,targets,k)
keras.backend.theano_backend.in_train_phase(x,alt,training=None)
keras.backend.theano_backend.int_shape(x)
keras.backend.theano_backend.is_keras_tensor(x)
keras.backend.theano_backend.is_placeholder(x)
keras.backend.theano_backend.is_sparse(tensor)
keras.backend.theano_backend.l2_normalize(x,axis=None)
keras.backend.theano_backend.learning_phase()
keras.backend.theano_backend.less(x,y)
keras.backend.theano_backend.less_equal(x,y)
keras.backend.theano_backend.local_conv1d(inputs,kernel,kernel_size,strides,data_format=None)
keras.backend.theano_backend.local_conv2d(inputs,kernel,kernel_size,strides,output_shape,data_format=None)
keras.backend.theano_backend.log(x)
keras.backend.theano_backend.logsumexp(x,axis=None,keepdims=False)
keras.backend.theano_backend.map_fn(fn,elems,name=None,dtype=None)
keras.backend.theano_backend.max(x,axis=None,keepdims=False)
keras.backend.theano_backend.maximum(x,y)
keras.backend.theano_backend.mean(x,axis=None,keepdims=False)
keras.backend.theano_backend.min(x,axis=None,keepdims=False)
keras.backend.theano_backend.minimum(x,y)
keras.backend.theano_backend.moving_average_update(variable,value,momentum)
keras.backend.theano_backend.name_scope(name)
keras.backend.theano_backend.ndim(x)
keras.backend.theano_backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
keras.backend.theano_backend.not_equal(x,y)
keras.backend.theano_backend.one_hot(indices,num_classes)
keras.backend.theano_backend.ones(shape,dtype=None,name=None)
keras.backend.theano_backend.ones_like(x,dtype=None,name=None)
keras.backend.theano_backend.pattern_broadcast(x,broadcastable)
keras.backend.theano_backend.permute_dimensions(x,pattern)
keras.backend.theano_backend.placeholder(shape=None,ndim=None,dtype=None,sparse=False,name=None)
keras.backend.theano_backend.pool2d(x,pool_size,strides=(1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.theano_backend.pool3d(x,pool_size,strides=(1,1,1),padding='valid',data_format=None,pool_mode='max')
keras.backend.theano_backend.pow(x,a)
keras.backend.theano_backend.print_tensor(x,message='')
keras.backend.theano_backend.prod(x,axis=None,keepdims=False)
keras.backend.theano_backend.random_binomial(shape,p=0.0,dtype=None,seed=None)
keras.backend.theano_backend.random_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.theano_backend.random_normal_variable(shape,mean,scale,dtype=None,name=None)
keras.backend.theano_backend.random_uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)
keras.backend.theano_backend.random_uniform_variable(shape,low,high,dtype=None,name=None)
keras.backend.theano_backend.relu(x,alpha=0.0,max_value=None)
keras.backend.theano_backend.repeat(x,n)
keras.backend.theano_backend.repeat_elements(x,rep,axis)
keras.backend.theano_backend.reset_uids()
keras.backend.theano_backend.reshape(x,shape)
keras.backend.theano_backend.resize_images(x,height_factor,width_factor,data_format)
keras.backend.theano_backend.resize_volumes(x,depth_factor,height_factor,width_factor,data_format)
keras.backend.theano_backend.reverse(x,axes)
keras.backend.theano_backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None)
keras.backend.theano_backend.round(x)
keras.backend.theano_backend.separable_conv1d(x,depthwise_kernel,pointwise_kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
keras.backend.theano_backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
keras.backend.theano_backend.set_learning_phase(value)
keras.backend.theano_backend.set_value(x,value)
keras.backend.theano_backend.shape(x)
keras.backend.theano_backend.sigmoid(x)
keras.backend.theano_backend.sign(x)
keras.backend.theano_backend.sin(x)
keras.backend.theano_backend.softmax(x)
keras.backend.theano_backend.softplus(x)
keras.backend.theano_backend.softsign(x)
keras.backend.theano_backend.sparse_categorical_crossentropy(target,output,from_logits=False)
keras.backend.theano_backend.spatial_2d_padding(x,padding=((1,1),(1,1)),data_format=None)
keras.backend.theano_backend.spatial_3d_padding(x,padding=((1,1),(1,1),(1,1)),data_format=None)
keras.backend.theano_backend.sqrt(x)
keras.backend.theano_backend.square(x)
keras.backend.theano_backend.squeeze(x,axis)
keras.backend.theano_backend.stack(x,axis=0)
keras.backend.theano_backend.std(x,axis=None,keepdims=False)
keras.backend.theano_backend.stop_gradient(variables)
keras.backend.theano_backend.sum(x,axis=None,keepdims=False)
keras.backend.theano_backend.switch(condition,then_expression,else_expression)
keras.backend.theano_backend.tanh(x)
keras.backend.theano_backend.temporal_padding(x,padding=(1,1))
keras.backend.theano_backend.tile(x,n)
keras.backend.theano_backend.to_dense(tensor)
keras.backend.theano_backend.transpose(x)
keras.backend.theano_backend.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.theano_backend.update(x,new_x)
keras.backend.theano_backend.update_add(x,increment)
keras.backend.theano_backend.update_sub(x,decrement)
keras.backend.theano_backend.var(x,axis=None,keepdims=False)
keras.backend.theano_backend.variable(value,dtype=None,name=None,constraint=None)
keras.backend.theano_backend.zeros(shape,dtype=None,name=None)
keras.backend.theano_backend.zeros_like(x,dtype=None,name=None)
keras.backend.tile(x,n)
keras.backend.to_dense(tensor)
keras.backend.transpose(x)
keras.backend.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
keras.backend.update(x,new_x)
keras.backend.update_add(x,increment)
keras.backend.update_sub(x,decrement)
keras.backend.var(x,axis=None,keepdims=False)
keras.backend.variable(value,dtype=None,name=None,constraint=None)
keras.backend.zeros(shape,dtype=None,name=None)
keras.backend.zeros_like(x,dtype=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/wrappers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/wrappers/scikit_learn.py----------------------------------------
A:keras.wrappers.scikit_learn.res->copy.deepcopy(self.sk_params)
A:keras.wrappers.scikit_learn.self.model->self.build_fn(**self.filter_sk_params(self.build_fn))
A:keras.wrappers.scikit_learn.y->to_categorical(y)
A:keras.wrappers.scikit_learn.fit_args->copy.deepcopy(self.filter_sk_params(Sequential.fit))
A:keras.wrappers.scikit_learn.history->self.model.fit(x, y, **fit_args)
A:keras.wrappers.scikit_learn.self.classes_->numpy.unique(y)
A:keras.wrappers.scikit_learn.self.n_classes_->len(self.classes_)
A:keras.wrappers.scikit_learn.kwargs->self.filter_sk_params(Sequential.evaluate, kwargs)
A:keras.wrappers.scikit_learn.proba->self.model.predict(x, **kwargs)
A:keras.wrappers.scikit_learn.classes->(proba > 0.5).astype('int32')
A:keras.wrappers.scikit_learn.probs->numpy.hstack([1 - probs, probs])
A:keras.wrappers.scikit_learn.outputs->self.model.evaluate(x, y, **kwargs)
A:keras.wrappers.scikit_learn.loss->self.model.evaluate(x, y, **kwargs)
keras.wrappers.scikit_learn.BaseWrapper(self,build_fn=None,**sk_params)
keras.wrappers.scikit_learn.BaseWrapper.__init__(self,build_fn=None,**sk_params)
keras.wrappers.scikit_learn.BaseWrapper.check_params(self,params)
keras.wrappers.scikit_learn.BaseWrapper.filter_sk_params(self,fn,override=None)
keras.wrappers.scikit_learn.BaseWrapper.fit(self,x,y,**kwargs)
keras.wrappers.scikit_learn.BaseWrapper.get_params(self,**params)
keras.wrappers.scikit_learn.BaseWrapper.set_params(self,**params)
keras.wrappers.scikit_learn.KerasClassifier(BaseWrapper)
keras.wrappers.scikit_learn.KerasClassifier.fit(self,x,y,sample_weight=None,**kwargs)
keras.wrappers.scikit_learn.KerasClassifier.predict(self,x,**kwargs)
keras.wrappers.scikit_learn.KerasClassifier.predict_proba(self,x,**kwargs)
keras.wrappers.scikit_learn.KerasClassifier.score(self,x,y,**kwargs)
keras.wrappers.scikit_learn.KerasRegressor(BaseWrapper)
keras.wrappers.scikit_learn.KerasRegressor.predict(self,x,**kwargs)
keras.wrappers.scikit_learn.KerasRegressor.score(self,x,y,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/legacy/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/legacy/layers.py----------------------------------------
A:keras.legacy.layers.prefix->self.__class__.__name__.lower()
A:keras.legacy.layers.layer_output_shape->layer.get_output_shape_at(node_indices[i])
A:keras.legacy.layers.input_shapes_set->set(input_shapes)
A:keras.legacy.layers.n1->len(shape1)
A:keras.legacy.layers.n2->len(shape2)
A:keras.legacy.layers.shape_set->set()
A:keras.legacy.layers.s->K.maximum(s, inputs[i])
A:keras.legacy.layers.output->super(Recurrent, self).__call__(inputs, **kwargs)
A:keras.legacy.layers.denominator->K.maximum(denominator, K.epsilon())
A:keras.legacy.layers.output_shape->config.copy().get('output_shape')
A:keras.legacy.layers.shape1->list(input_shapes[0])
A:keras.legacy.layers.shape2->list(input_shapes[1])
A:keras.legacy.layers.concatenated->K.concatenate(masks, axis=self.concat_axis)
A:keras.legacy.layers.mode->func_load(config['mode'], globs=globals())
A:keras.legacy.layers.output_mask->config.copy().get('output_mask')
A:keras.legacy.layers.config->config.copy().copy()
A:keras.legacy.layers.mode_type->config.copy().copy().pop('mode_type')
A:keras.legacy.layers.output_shape_type->config.copy().copy().pop('output_shape_type', None)
A:keras.legacy.layers.output_mask_type->config.copy().copy().pop('output_mask_type', None)
A:keras.legacy.layers.merge_layer->Merge(mode=mode, concat_axis=concat_axis, dot_axes=dot_axes, output_shape=output_shape, output_mask=output_mask, arguments=arguments, name=name)
A:keras.legacy.layers.self.init->initializers.get(init)
A:keras.legacy.layers.self.W_regularizer->regularizers.get(W_regularizer)
A:keras.legacy.layers.self.b_regularizer->regularizers.get(b_regularizer)
A:keras.legacy.layers.self.activity_regularizer->regularizers.get(activity_regularizer)
A:keras.legacy.layers.self.W_constraint->constraints.get(W_constraint)
A:keras.legacy.layers.self.b_constraint->constraints.get(b_constraint)
A:keras.legacy.layers.self.input_spec->InputSpec(dtype=K.floatx(), shape=(None, input_dim))
A:keras.legacy.layers.self.W->self.add_weight((input_dim, input_dim), initializer=self.init, name='W', regularizer=self.W_regularizer, constraint=self.W_constraint)
A:keras.legacy.layers.self.b->self.add_weight((input_dim,), initializer='zero', name='b', regularizer=self.b_regularizer, constraint=self.b_constraint)
A:keras.legacy.layers.base_config->super(Recurrent, self).get_config()
A:keras.legacy.layers.self.activation->activations.get(activation)
A:keras.legacy.layers.self.W_carry->self.add_weight((input_dim, input_dim), initializer=self.init, name='W_carry')
A:keras.legacy.layers.self.b_carry->self.add_weight((input_dim,), initializer='one', name='b_carry')
A:keras.legacy.layers.y->K.dot(x, self.W)
A:keras.legacy.layers.transform_weight->activations.sigmoid(y)
A:keras.legacy.layers.act->self.activation(y)
A:keras.legacy.layers.rate->kwargs.pop('atrous_rate')
A:keras.legacy.layers.initial_state->self.get_initial_state(inputs)
A:keras.legacy.layers.is_keras_tensor->hasattr(initial_state[0], '_keras_history')
A:keras.legacy.layers.input_shape->K.int_shape(inputs)
A:keras.legacy.layers.constants->self.get_constants(inputs, training=None)
A:keras.legacy.layers.preprocessed_input->self.preprocess_input(inputs, training=None)
A:keras.legacy.layers.(last_output, outputs, states)->K.rnn(self.step, preprocessed_input, initial_state, go_backwards=self.go_backwards, mask=mask, constants=constants, unroll=self.unroll, input_length=timesteps)
A:keras.legacy.layers.states->list(states)
keras.legacy.layers.AtrousConvolution1D(*args,**kwargs)
keras.legacy.layers.AtrousConvolution2D(*args,**kwargs)
keras.legacy.layers.Highway(self,init='glorot_uniform',activation=None,weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,**kwargs)
keras.legacy.layers.Highway.__init__(self,init='glorot_uniform',activation=None,weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,**kwargs)
keras.legacy.layers.Highway.build(self,input_shape)
keras.legacy.layers.Highway.call(self,x)
keras.legacy.layers.Highway.get_config(self)
keras.legacy.layers.MaxoutDense(self,output_dim,nb_feature=4,init='glorot_uniform',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,**kwargs)
keras.legacy.layers.MaxoutDense.__init__(self,output_dim,nb_feature=4,init='glorot_uniform',weights=None,W_regularizer=None,b_regularizer=None,activity_regularizer=None,W_constraint=None,b_constraint=None,bias=True,input_dim=None,**kwargs)
keras.legacy.layers.MaxoutDense.build(self,input_shape)
keras.legacy.layers.MaxoutDense.call(self,x)
keras.legacy.layers.MaxoutDense.compute_output_shape(self,input_shape)
keras.legacy.layers.MaxoutDense.get_config(self)
keras.legacy.layers.Merge(self,layers=None,mode='sum',concat_axis=-1,dot_axes=-1,output_shape=None,output_mask=None,arguments=None,node_indices=None,tensor_indices=None,name=None)
keras.legacy.layers.Merge.__init__(self,layers=None,mode='sum',concat_axis=-1,dot_axes=-1,output_shape=None,output_mask=None,arguments=None,node_indices=None,tensor_indices=None,name=None)
keras.legacy.layers.Merge._arguments_validation(self,layers,mode,concat_axis,dot_axes,node_indices,tensor_indices)
keras.legacy.layers.Merge.call(self,inputs,mask=None)
keras.legacy.layers.Merge.compute_mask(self,inputs,mask=None)
keras.legacy.layers.Merge.compute_output_shape(self,input_shape)
keras.legacy.layers.Merge.from_config(cls,config)
keras.legacy.layers.Merge.get_config(self)
keras.legacy.layers.Recurrent(self,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,implementation=0,**kwargs)
keras.legacy.layers.Recurrent.__init__(self,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,implementation=0,**kwargs)
keras.legacy.layers.Recurrent.call(self,inputs,mask=None,training=None,initial_state=None)
keras.legacy.layers.Recurrent.compute_mask(self,inputs,mask)
keras.legacy.layers.Recurrent.compute_output_shape(self,input_shape)
keras.legacy.layers.Recurrent.get_config(self)
keras.legacy.layers.Recurrent.get_constants(self,inputs,training=None)
keras.legacy.layers.Recurrent.get_initial_state(self,inputs)
keras.legacy.layers.Recurrent.preprocess_input(self,inputs,training=None)
keras.legacy.layers.Recurrent.reset_states(self,states=None)
keras.legacy.layers.Recurrent.step(self,inputs,states)
keras.legacy.layers.merge(inputs,mode='sum',concat_axis=-1,dot_axes=-1,output_shape=None,output_mask=None,arguments=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/legacy/models.py----------------------------------------
keras.legacy.models.legacy_sequential_layers(model)
keras.legacy.models.needs_legacy_support(model)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/legacy/interfaces.py----------------------------------------
A:keras.legacy.interfaces.(args, kwargs, converted)->preprocessor(args, kwargs)
A:keras.legacy.interfaces.value->kwargs.pop('forget_bias_init')
A:keras.legacy.interfaces.str_val->str(value)
A:keras.legacy.interfaces.generate_legacy_method_interface->functools.partial(generate_legacy_interface, object_type='method')
A:keras.legacy.interfaces.legacy_dense_support->generate_legacy_interface(allowed_positional_args=['units'], conversions=[('output_dim', 'units'), ('init', 'kernel_initializer'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('W_constraint', 'kernel_constraint'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')])
A:keras.legacy.interfaces.legacy_dropout_support->generate_legacy_interface(allowed_positional_args=['rate', 'noise_shape', 'seed'], conversions=[('p', 'rate')])
A:keras.legacy.interfaces.legacy_embedding_support->generate_legacy_interface(allowed_positional_args=['input_dim', 'output_dim'], conversions=[('init', 'embeddings_initializer'), ('W_regularizer', 'embeddings_regularizer'), ('W_constraint', 'embeddings_constraint')], preprocessor=embedding_kwargs_preprocessor)
A:keras.legacy.interfaces.legacy_pooling1d_support->generate_legacy_interface(allowed_positional_args=['pool_size', 'strides', 'padding'], conversions=[('pool_length', 'pool_size'), ('stride', 'strides'), ('border_mode', 'padding')])
A:keras.legacy.interfaces.legacy_prelu_support->generate_legacy_interface(allowed_positional_args=['alpha_initializer'], conversions=[('init', 'alpha_initializer')])
A:keras.legacy.interfaces.legacy_gaussiannoise_support->generate_legacy_interface(allowed_positional_args=['stddev'], conversions=[('sigma', 'stddev')])
A:keras.legacy.interfaces.input_length->kwargs.pop('input_length', None)
A:keras.legacy.interfaces.input_dim->kwargs.pop('input_dim')
A:keras.legacy.interfaces.legacy_recurrent_support->generate_legacy_interface(allowed_positional_args=['units'], conversions=[('output_dim', 'units'), ('init', 'kernel_initializer'), ('inner_init', 'recurrent_initializer'), ('inner_activation', 'recurrent_activation'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('U_regularizer', 'recurrent_regularizer'), ('dropout_W', 'dropout'), ('dropout_U', 'recurrent_dropout'), ('consume_less', 'implementation')], value_conversions={'consume_less': {'cpu': 0, 'mem': 1, 'gpu': 2}}, preprocessor=recurrent_args_preprocessor)
A:keras.legacy.interfaces.legacy_gaussiandropout_support->generate_legacy_interface(allowed_positional_args=['rate'], conversions=[('p', 'rate')])
A:keras.legacy.interfaces.legacy_pooling2d_support->generate_legacy_interface(allowed_positional_args=['pool_size', 'strides', 'padding'], conversions=[('border_mode', 'padding'), ('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_pooling3d_support->generate_legacy_interface(allowed_positional_args=['pool_size', 'strides', 'padding'], conversions=[('border_mode', 'padding'), ('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_global_pooling_support->generate_legacy_interface(conversions=[('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_upsampling1d_support->generate_legacy_interface(allowed_positional_args=['size'], conversions=[('length', 'size')])
A:keras.legacy.interfaces.legacy_upsampling2d_support->generate_legacy_interface(allowed_positional_args=['size'], conversions=[('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_upsampling3d_support->generate_legacy_interface(allowed_positional_args=['size'], conversions=[('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.length->kwargs.pop('input_length')
A:keras.legacy.interfaces.legacy_conv1d_support->generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('filter_length', 'kernel_size'), ('subsample_length', 'strides'), ('border_mode', 'padding'), ('init', 'kernel_initializer'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('W_constraint', 'kernel_constraint'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')], preprocessor=conv1d_args_preprocessor)
A:keras.legacy.interfaces.legacy_conv2d_support->generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('subsample', 'strides'), ('border_mode', 'padding'), ('dim_ordering', 'data_format'), ('init', 'kernel_initializer'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('W_constraint', 'kernel_constraint'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}}, preprocessor=conv2d_args_preprocessor)
A:keras.legacy.interfaces.init->kwargs.pop('init')
A:keras.legacy.interfaces.(args, kwargs, _converted)->conv2d_args_preprocessor(args, kwargs)
A:keras.legacy.interfaces.legacy_separable_conv2d_support->generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('subsample', 'strides'), ('border_mode', 'padding'), ('dim_ordering', 'data_format'), ('b_regularizer', 'bias_regularizer'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}}, preprocessor=separable_conv2d_args_preprocessor)
A:keras.legacy.interfaces.legacy_deconv2d_support->generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('subsample', 'strides'), ('border_mode', 'padding'), ('dim_ordering', 'data_format'), ('init', 'kernel_initializer'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('W_constraint', 'kernel_constraint'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}}, preprocessor=deconv2d_args_preprocessor)
A:keras.legacy.interfaces.legacy_conv3d_support->generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('subsample', 'strides'), ('border_mode', 'padding'), ('dim_ordering', 'data_format'), ('init', 'kernel_initializer'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('W_constraint', 'kernel_constraint'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}}, preprocessor=conv3d_args_preprocessor)
A:keras.legacy.interfaces.legacy_convlstm2d_support->generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('subsample', 'strides'), ('border_mode', 'padding'), ('dim_ordering', 'data_format'), ('init', 'kernel_initializer'), ('inner_init', 'recurrent_initializer'), ('W_regularizer', 'kernel_regularizer'), ('U_regularizer', 'recurrent_regularizer'), ('b_regularizer', 'bias_regularizer'), ('inner_activation', 'recurrent_activation'), ('dropout_W', 'dropout'), ('dropout_U', 'recurrent_dropout'), ('bias', 'use_bias')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}}, preprocessor=convlstm2d_args_preprocessor)
A:keras.legacy.interfaces.legacy_batchnorm_support->generate_legacy_interface(allowed_positional_args=[], conversions=[('beta_init', 'beta_initializer'), ('gamma_init', 'gamma_initializer')], preprocessor=batchnorm_args_preprocessor)
A:keras.legacy.interfaces.top_pad->args[1].get('top_pad', 0)
A:keras.legacy.interfaces.bottom_pad->args[1].get('bottom_pad', 0)
A:keras.legacy.interfaces.left_pad->args[1].get('left_pad', 0)
A:keras.legacy.interfaces.right_pad->args[1].get('right_pad', 0)
A:keras.legacy.interfaces.legacy_zeropadding2d_support->generate_legacy_interface(allowed_positional_args=['padding'], conversions=[('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}}, preprocessor=zeropadding2d_args_preprocessor)
A:keras.legacy.interfaces.legacy_zeropadding3d_support->generate_legacy_interface(allowed_positional_args=['padding'], conversions=[('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_cropping2d_support->generate_legacy_interface(allowed_positional_args=['cropping'], conversions=[('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_cropping3d_support->generate_legacy_interface(allowed_positional_args=['cropping'], conversions=[('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_spatialdropout1d_support->generate_legacy_interface(allowed_positional_args=['rate'], conversions=[('p', 'rate')])
A:keras.legacy.interfaces.legacy_spatialdropoutNd_support->generate_legacy_interface(allowed_positional_args=['rate'], conversions=[('p', 'rate'), ('dim_ordering', 'data_format')], value_conversions={'dim_ordering': {'tf': 'channels_last', 'th': 'channels_first', 'default': None}})
A:keras.legacy.interfaces.legacy_lambda_support->generate_legacy_interface(allowed_positional_args=['function', 'output_shape'])
A:keras.legacy.interfaces.samples_per_epoch->kwargs.pop('samples_per_epoch')
A:keras.legacy.interfaces.legacy_generator_methods_support->generate_legacy_method_interface(allowed_positional_args=['generator', 'steps_per_epoch', 'epochs'], conversions=[('samples_per_epoch', 'steps_per_epoch'), ('val_samples', 'steps'), ('nb_epoch', 'epochs'), ('nb_val_samples', 'validation_steps'), ('nb_worker', 'workers'), ('pickle_safe', 'use_multiprocessing'), ('max_q_size', 'max_queue_size')], preprocessor=generator_methods_args_preprocessor)
A:keras.legacy.interfaces.legacy_model_constructor_support->generate_legacy_interface(allowed_positional_args=None, conversions=[('input', 'inputs'), ('output', 'outputs')])
A:keras.legacy.interfaces.legacy_input_support->generate_legacy_interface(allowed_positional_args=None, conversions=[('input_dtype', 'dtype')])
A:keras.legacy.interfaces.legacy_add_weight_support->generate_legacy_interface(allowed_positional_args=['name', 'shape'], preprocessor=add_weight_args_preprocessing)
A:keras.legacy.interfaces.legacy_get_updates_support->generate_legacy_interface(allowed_positional_args=None, conversions=[], preprocessor=get_updates_arg_preprocessing)
keras.legacy.interfaces.add_weight_args_preprocessing(args,kwargs)
keras.legacy.interfaces.batchnorm_args_preprocessor(args,kwargs)
keras.legacy.interfaces.conv1d_args_preprocessor(args,kwargs)
keras.legacy.interfaces.conv2d_args_preprocessor(args,kwargs)
keras.legacy.interfaces.conv3d_args_preprocessor(args,kwargs)
keras.legacy.interfaces.convlstm2d_args_preprocessor(args,kwargs)
keras.legacy.interfaces.deconv2d_args_preprocessor(args,kwargs)
keras.legacy.interfaces.embedding_kwargs_preprocessor(args,kwargs)
keras.legacy.interfaces.generate_legacy_interface(allowed_positional_args=None,conversions=None,preprocessor=None,value_conversions=None,object_type='class')
keras.legacy.interfaces.generator_methods_args_preprocessor(args,kwargs)
keras.legacy.interfaces.get_updates_arg_preprocessing(args,kwargs)
keras.legacy.interfaces.raise_duplicate_arg_error(old_arg,new_arg)
keras.legacy.interfaces.recurrent_args_preprocessor(args,kwargs)
keras.legacy.interfaces.separable_conv2d_args_preprocessor(args,kwargs)
keras.legacy.interfaces.zeropadding2d_args_preprocessor(args,kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/utils/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/utils/vis_utils.py----------------------------------------
A:keras.utils.vis_utils.dot->model_to_dot(model, show_shapes, show_layer_names, rankdir)
A:keras.utils.vis_utils.layer_id->str(id(layer))
A:keras.utils.vis_utils.layer_name->'{}({})'.format(layer_name, layer.layer.name)
A:keras.utils.vis_utils.class_name->'{}({})'.format(class_name, child_class_name)
A:keras.utils.vis_utils.label->'{}: {}'.format(layer_name, class_name)
A:keras.utils.vis_utils.outputlabels->str(layer.output_shape)
A:keras.utils.vis_utils.inputlabels->', '.join([str(ishape) for ishape in layer.input_shapes])
A:keras.utils.vis_utils.node->pydot.Node(layer_id, label=label)
A:keras.utils.vis_utils.inbound_layer_id->str(id(inbound_layer))
A:keras.utils.vis_utils.(_, extension)->os.path.splitext(to_file)
keras.utils.plot_model(model,to_file='model.png',show_shapes=False,show_layer_names=True,rankdir='TB')
keras.utils.vis_utils._check_pydot()
keras.utils.vis_utils.model_to_dot(model,show_shapes=False,show_layer_names=True,rankdir='TB')
keras.utils.vis_utils.plot_model(model,to_file='model.png',show_shapes=False,show_layer_names=True,rankdir='TB')


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/utils/generic_utils.py----------------------------------------
A:keras.utils.generic_utils.self.backup->_GLOBAL_CUSTOM_OBJECTS.copy()
A:keras.utils.generic_utils.cls->module_objects.get(class_name)
A:keras.utils.generic_utils.fn->module_objects.get(function_name)
A:keras.utils.generic_utils.raw_code->marshal.loads(raw_code).encode('raw_unicode_escape')
A:keras.utils.generic_utils.code->marshal.loads(raw_code)
A:keras.utils.generic_utils.closure->tuple((ensure_value_to_cell(_) for _ in closure))
A:keras.utils.generic_utils.defaults->tuple(defaults)
A:keras.utils.generic_utils.globs->globals()
A:keras.utils.generic_utils.arg_spec->inspect.getfullargspec(fn)
A:keras.utils.generic_utils.signature->inspect.signature(fn)
A:keras.utils.generic_utils.parameter->inspect.signature(fn).parameters.get(name)
A:keras.utils.generic_utils.self.stateful_metrics->set()
A:keras.utils.generic_utils.self._values->collections.OrderedDict()
A:keras.utils.generic_utils.self._start->time.time()
A:keras.utils.generic_utils.now->time.time()
A:keras.utils.generic_utils.prog_width->int(self.width * prog)
A:keras.utils.generic_utils.self._total_width->len(bar)
A:keras.utils.generic_utils.avg->numpy.mean(self._values[k][0] / max(1, self._values[k][1]))
keras.utils.CustomObjectScope(self,*args)
keras.utils.CustomObjectScope.__enter__(self)
keras.utils.CustomObjectScope.__exit__(self,*args,**kwargs)
keras.utils.Progbar(self,target,width=30,verbose=1,interval=0.05,stateful_metrics=None)
keras.utils.Progbar.add(self,n,values=None)
keras.utils.Progbar.update(self,current,values=None)
keras.utils.custom_object_scope(*args)
keras.utils.deserialize_keras_object(identifier,module_objects=None,custom_objects=None,printable_module_name='object')
keras.utils.generic_utils.CustomObjectScope(self,*args)
keras.utils.generic_utils.CustomObjectScope.__enter__(self)
keras.utils.generic_utils.CustomObjectScope.__exit__(self,*args,**kwargs)
keras.utils.generic_utils.CustomObjectScope.__init__(self,*args)
keras.utils.generic_utils.Progbar(self,target,width=30,verbose=1,interval=0.05,stateful_metrics=None)
keras.utils.generic_utils.Progbar.__init__(self,target,width=30,verbose=1,interval=0.05,stateful_metrics=None)
keras.utils.generic_utils.Progbar.add(self,n,values=None)
keras.utils.generic_utils.Progbar.update(self,current,values=None)
keras.utils.generic_utils.custom_object_scope(*args)
keras.utils.generic_utils.deserialize_keras_object(identifier,module_objects=None,custom_objects=None,printable_module_name='object')
keras.utils.generic_utils.func_dump(func)
keras.utils.generic_utils.func_load(code,defaults=None,closure=None,globs=None)
keras.utils.generic_utils.get_custom_objects()
keras.utils.generic_utils.has_arg(fn,name,accept_all=False)
keras.utils.generic_utils.serialize_keras_object(instance)
keras.utils.get_custom_objects()
keras.utils.serialize_keras_object(instance)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/utils/io_utils.py----------------------------------------
A:keras.utils.io_utils.refs->defaultdict(int)
A:keras.utils.io_utils.f->h5py.File(datapath)
A:keras.utils.io_utils.idx->(self.start + key).tolist()
A:keras.utils.io_utils.overwrite->six.moves.input('Enter "y" (overwrite) or "n" (cancel).').strip().lower()
keras.utils.HDF5Matrix(self,datapath,dataset,start=0,end=None,normalizer=None)
keras.utils.HDF5Matrix.__getitem__(self,key)
keras.utils.HDF5Matrix.__len__(self)
keras.utils.HDF5Matrix.dtype(self)
keras.utils.HDF5Matrix.ndim(self)
keras.utils.HDF5Matrix.shape(self)
keras.utils.HDF5Matrix.size(self)
keras.utils.io_utils.HDF5Matrix(self,datapath,dataset,start=0,end=None,normalizer=None)
keras.utils.io_utils.HDF5Matrix.__getitem__(self,key)
keras.utils.io_utils.HDF5Matrix.__init__(self,datapath,dataset,start=0,end=None,normalizer=None)
keras.utils.io_utils.HDF5Matrix.__len__(self)
keras.utils.io_utils.HDF5Matrix.dtype(self)
keras.utils.io_utils.HDF5Matrix.ndim(self)
keras.utils.io_utils.HDF5Matrix.shape(self)
keras.utils.io_utils.HDF5Matrix.size(self)
keras.utils.io_utils.ask_to_proceed_with_overwrite(filepath)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/utils/layer_utils.py----------------------------------------
A:keras.utils.layer_utils.nodes_by_depth->model._nodes_by_depth.values()
A:keras.utils.layer_utils.trainable_count->count_params(model.trainable_weights)
A:keras.utils.layer_utils.non_trainable_count->int(np.sum([K.count_params(p) for p in set(model.non_trainable_weights)]))
A:keras.utils.layer_utils.original_kernel->K.get_value(layer.kernel)
A:keras.utils.layer_utils.converted_kernel->convert_kernel(original_kernel)
A:keras.utils.layer_utils.(kernel, bias)->dense.get_weights()
A:keras.utils.layer_utils.ki->numpy.transpose(ki, (1, 2, 0))
A:keras.utils.layer_utils.kernel[:, i]->numpy.reshape(ki, (np.prod(previous_feature_map_shape),))
keras.utils.convert_all_kernels_in_model(model)
keras.utils.layer_utils.convert_all_kernels_in_model(model)
keras.utils.layer_utils.convert_dense_weights_data_format(dense,previous_feature_map_shape,target_data_format='channels_first')
keras.utils.layer_utils.count_params(weights)
keras.utils.layer_utils.print_summary(model,line_length=None,positions=None,print_fn=None)
keras.utils.print_summary(model,line_length=None,positions=None,print_fn=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/utils/data_utils.py----------------------------------------
A:keras.utils.data_utils.content_type->response.info().get('Content-Length')
A:keras.utils.data_utils.total_size->int(content_type.strip())
A:keras.utils.data_utils.chunk->response.read(chunk_size)
A:keras.utils.data_utils.cache_dir->os.path.join(os.path.expanduser('~'), '.keras')
A:keras.utils.data_utils.datadir_base->os.path.join('/tmp', '.keras')
A:keras.utils.data_utils.datadir->os.path.join(datadir_base, cache_subdir)
A:keras.utils.data_utils.untar_fpath->os.path.join(datadir, fname)
A:keras.utils.data_utils.fpath->os.path.join(datadir, fname)
A:keras.utils.data_utils.ProgressTracker.progbar->Progbar(total_size)
A:keras.utils.data_utils.hasher->hashlib.md5()
A:keras.utils.data_utils._SEQUENCE_COUNTER->multiprocessing.Value('i', 0)
A:keras.utils.data_utils.self.queue->Queue.Queue(maxsize=max_queue_size)
A:keras.utils.data_utils.self.stop_signal->threading.Event()
A:keras.utils.data_utils.self.run_thread->threading.Thread(target=self._run)
A:keras.utils.data_utils.sequence->list(range(len(self.sequence)))
A:keras.utils.data_utils.inputs->self.queue.get(block=True).get()
A:keras.utils.data_utils.generator_output->next(self._generator)
A:keras.utils.data_utils.self._manager->multiprocessing.Manager()
A:keras.utils.data_utils.self._stop_event->threading.Event()
A:keras.utils.data_utils.self.genlock->threading.Lock()
A:keras.utils.data_utils.thread->threading.Thread(target=self._data_generator_task)
A:keras.utils.data_utils.(success, value)->self.queue.get()
A:keras.utils.data_utils.all_finished->all([not thread.is_alive() for thread in self._threads])
keras.utils.GeneratorEnqueuer(self,generator,use_multiprocessing=False,wait_time=0.05,seed=None)
keras.utils.GeneratorEnqueuer._data_generator_task(self)
keras.utils.GeneratorEnqueuer.get(self)
keras.utils.GeneratorEnqueuer.is_running(self)
keras.utils.GeneratorEnqueuer.start(self,workers=1,max_queue_size=10)
keras.utils.GeneratorEnqueuer.stop(self,timeout=None)
keras.utils.OrderedEnqueuer(self,sequence,use_multiprocessing=False,shuffle=False)
keras.utils.OrderedEnqueuer._run(self)
keras.utils.OrderedEnqueuer._send_sequence(self)
keras.utils.OrderedEnqueuer._wait_queue(self)
keras.utils.OrderedEnqueuer.get(self)
keras.utils.OrderedEnqueuer.is_running(self)
keras.utils.OrderedEnqueuer.start(self,workers=1,max_queue_size=10)
keras.utils.OrderedEnqueuer.stop(self,timeout=None)
keras.utils.Sequence(object)
keras.utils.Sequence.__getitem__(self,index)
keras.utils.Sequence.__len__(self)
keras.utils.Sequence.on_epoch_end(self)
keras.utils.SequenceEnqueuer(object)
keras.utils.SequenceEnqueuer.get(self)
keras.utils.SequenceEnqueuer.is_running(self)
keras.utils.SequenceEnqueuer.start(self,workers=1,max_queue_size=10)
keras.utils.SequenceEnqueuer.stop(self,timeout=None)
keras.utils.data_utils.GeneratorEnqueuer(self,generator,use_multiprocessing=False,wait_time=0.05,seed=None)
keras.utils.data_utils.GeneratorEnqueuer.__init__(self,generator,use_multiprocessing=False,wait_time=0.05,seed=None)
keras.utils.data_utils.GeneratorEnqueuer._data_generator_task(self)
keras.utils.data_utils.GeneratorEnqueuer.get(self)
keras.utils.data_utils.GeneratorEnqueuer.is_running(self)
keras.utils.data_utils.GeneratorEnqueuer.start(self,workers=1,max_queue_size=10)
keras.utils.data_utils.GeneratorEnqueuer.stop(self,timeout=None)
keras.utils.data_utils.OrderedEnqueuer(self,sequence,use_multiprocessing=False,shuffle=False)
keras.utils.data_utils.OrderedEnqueuer.__init__(self,sequence,use_multiprocessing=False,shuffle=False)
keras.utils.data_utils.OrderedEnqueuer._run(self)
keras.utils.data_utils.OrderedEnqueuer._send_sequence(self)
keras.utils.data_utils.OrderedEnqueuer._wait_queue(self)
keras.utils.data_utils.OrderedEnqueuer.get(self)
keras.utils.data_utils.OrderedEnqueuer.is_running(self)
keras.utils.data_utils.OrderedEnqueuer.start(self,workers=1,max_queue_size=10)
keras.utils.data_utils.OrderedEnqueuer.stop(self,timeout=None)
keras.utils.data_utils.Sequence(object)
keras.utils.data_utils.Sequence.__getitem__(self,index)
keras.utils.data_utils.Sequence.__len__(self)
keras.utils.data_utils.Sequence.on_epoch_end(self)
keras.utils.data_utils.SequenceEnqueuer(object)
keras.utils.data_utils.SequenceEnqueuer.get(self)
keras.utils.data_utils.SequenceEnqueuer.is_running(self)
keras.utils.data_utils.SequenceEnqueuer.start(self,workers=1,max_queue_size=10)
keras.utils.data_utils.SequenceEnqueuer.stop(self,timeout=None)
keras.utils.data_utils._extract_archive(file_path,path='.',archive_format='auto')
keras.utils.data_utils._hash_file(fpath,algorithm='sha256',chunk_size=65535)
keras.utils.data_utils.get_file(fname,origin,untar=False,md5_hash=None,file_hash=None,cache_subdir='datasets',hash_algorithm='auto',extract=False,archive_format='auto',cache_dir=None)
keras.utils.data_utils.get_index(uid,i)
keras.utils.data_utils.validate_file(fpath,file_hash,algorithm='auto',chunk_size=65535)
keras.utils.get_file(fname,origin,untar=False,md5_hash=None,file_hash=None,cache_subdir='datasets',hash_algorithm='auto',extract=False,archive_format='auto',cache_dir=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/utils/training_utils.py----------------------------------------
A:keras.utils.training_utils.available_devices->_get_available_devices()
A:keras.utils.training_utils.gpus->len([x for x in available_devices if 'gpu' in x])
A:keras.utils.training_utils.num_gpus->len(gpus)
A:keras.utils.training_utils.target_gpu_ids->range(num_gpus)
A:keras.utils.training_utils.shape->tensorflow.shape(data)
A:keras.utils.training_utils.size->tensorflow.concat([size, input_shape], axis=0)
A:keras.utils.training_utils.stride->tensorflow.concat([step, input_shape * 0], axis=0)
A:keras.utils.training_utils.slice_i->Lambda(get_slice, output_shape=input_shape, arguments={'i': i, 'parts': num_gpus})(x)
A:keras.utils.training_utils.outputs->model(inputs)
keras.utils.multi_gpu_model(model,gpus=None)
keras.utils.training_utils._get_available_devices()
keras.utils.training_utils._normalize_device_name(name)
keras.utils.training_utils.multi_gpu_model(model,gpus=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/utils/conv_utils.py----------------------------------------
A:keras.utils.conv_utils.value_tuple->tuple(value)
A:keras.utils.conv_utils.value->K.image_data_format()
A:keras.utils.conv_utils.data_format->K.image_data_format().lower()
A:keras.utils.conv_utils.padding->K.image_data_format().lower()
A:keras.utils.conv_utils.kernel->numpy.asarray(kernel)
keras.utils.conv_utils.conv_input_length(output_length,filter_size,padding,stride)
keras.utils.conv_utils.conv_output_length(input_length,filter_size,padding,stride,dilation=1)
keras.utils.conv_utils.convert_kernel(kernel)
keras.utils.conv_utils.deconv_length(dim_size,stride_size,kernel_size,padding)
keras.utils.conv_utils.normalize_data_format(value)
keras.utils.conv_utils.normalize_padding(value)
keras.utils.conv_utils.normalize_tuple(value,n,name)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/utils/np_utils.py----------------------------------------
A:keras.utils.np_utils.y->y.ravel().ravel()
A:keras.utils.np_utils.input_shape->tuple(input_shape[:-1])
A:keras.utils.np_utils.categorical->numpy.reshape(categorical, output_shape)
A:keras.utils.np_utils.l2->numpy.atleast_1d(np.linalg.norm(x, order, axis))
keras.utils.normalize(x,axis=-1,order=2)
keras.utils.np_utils.normalize(x,axis=-1,order=2)
keras.utils.np_utils.to_categorical(y,num_classes=None)
keras.utils.to_categorical(y,num_classes=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/utils/test_utils.py----------------------------------------
A:keras.utils.test_utils.y->layer(x)
A:keras.utils.test_utils.X->numpy.zeros((samples,) + input_shape)
A:keras.utils.test_utils.X[i]->numpy.random.normal(loc=y_loc[i], scale=0.7, size=input_shape)
A:keras.utils.test_utils.y_loc->numpy.random.random((samples,))
A:keras.utils.test_utils.y[i]->numpy.random.normal(loc=y_loc[i], scale=0.7, size=output_shape)
A:keras.utils.test_utils.input_dtype->K.floatx()
A:keras.utils.test_utils.input_data_shape->list(input_shape)
A:keras.utils.test_utils.input_data_shape[i]->numpy.random.randint(1, 4)
A:keras.utils.test_utils.input_data->input_data.astype(input_dtype).astype(input_dtype)
A:keras.utils.test_utils.layer->layer.__class__.from_config(layer_config).__class__.from_config(layer_config)
A:keras.utils.test_utils.weights->Sequential().get_weights()
A:keras.utils.test_utils.x->Input(shape=input_shape[1:], dtype=input_dtype)
A:keras.utils.test_utils.model->Sequential()
A:keras.utils.test_utils.expected_output_shape->layer.__class__.from_config(layer_config).__class__.from_config(layer_config).compute_output_shape(input_shape)
A:keras.utils.test_utils.actual_output->Sequential().predict(input_data)
A:keras.utils.test_utils.model_config->Sequential().get_config()
A:keras.utils.test_utils.recovered_model->models.Sequential.from_config(model_config)
A:keras.utils.test_utils._output->models.Sequential.from_config(model_config).predict(input_data)
A:keras.utils.test_utils.layer_config->layer.__class__.from_config(layer_config).__class__.from_config(layer_config).get_config()
A:keras.utils.test_utils.output->func(*args, **kwargs)
keras.utils.test_utils.get_test_data(num_train=1000,num_test=500,input_shape=(10,),output_shape=(2,),classification=True,num_classes=2)
keras.utils.test_utils.keras_test(func)
keras.utils.test_utils.layer_test(layer_cls,kwargs={},input_shape=None,input_dtype=None,input_data=None,expected_output=None,expected_output_dtype=None,fixed_batch_size=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/layers/convolutional_recurrent.py----------------------------------------
A:keras.layers.convolutional_recurrent.self.kernel_size->utils.conv_utils.normalize_tuple(kernel_size, 2, 'kernel_size')
A:keras.layers.convolutional_recurrent.self.strides->utils.conv_utils.normalize_tuple(strides, 2, 'strides')
A:keras.layers.convolutional_recurrent.self.padding->utils.conv_utils.normalize_padding(padding)
A:keras.layers.convolutional_recurrent.self.data_format->utils.conv_utils.normalize_data_format(data_format)
A:keras.layers.convolutional_recurrent.self.dilation_rate->utils.conv_utils.normalize_tuple(dilation_rate, 2, 'dilation_rate')
A:keras.layers.convolutional_recurrent.rows->utils.conv_utils.conv_output_length(rows, self.kernel_size[0], padding=self.padding, stride=self.strides[0], dilation=self.dilation_rate[0])
A:keras.layers.convolutional_recurrent.cols->utils.conv_utils.conv_output_length(cols, self.kernel_size[1], padding=self.padding, stride=self.strides[1], dilation=self.dilation_rate[1])
A:keras.layers.convolutional_recurrent.base_config->super(ConvLSTM2D, self).get_config()
A:keras.layers.convolutional_recurrent.self.activation->activations.get(activation)
A:keras.layers.convolutional_recurrent.self.recurrent_activation->activations.get(recurrent_activation)
A:keras.layers.convolutional_recurrent.self.kernel_initializer->initializers.get(kernel_initializer)
A:keras.layers.convolutional_recurrent.self.recurrent_initializer->initializers.get(recurrent_initializer)
A:keras.layers.convolutional_recurrent.self.bias_initializer->initializers.get(bias_initializer)
A:keras.layers.convolutional_recurrent.self.kernel_regularizer->regularizers.get(kernel_regularizer)
A:keras.layers.convolutional_recurrent.self.recurrent_regularizer->regularizers.get(recurrent_regularizer)
A:keras.layers.convolutional_recurrent.self.bias_regularizer->regularizers.get(bias_regularizer)
A:keras.layers.convolutional_recurrent.self.activity_regularizer->regularizers.get(activity_regularizer)
A:keras.layers.convolutional_recurrent.self.kernel_constraint->constraints.get(kernel_constraint)
A:keras.layers.convolutional_recurrent.self.recurrent_constraint->constraints.get(recurrent_constraint)
A:keras.layers.convolutional_recurrent.self.bias_constraint->constraints.get(bias_constraint)
A:keras.layers.convolutional_recurrent.self.dropout->min(1.0, max(0.0, dropout))
A:keras.layers.convolutional_recurrent.self.recurrent_dropout->min(1.0, max(0.0, recurrent_dropout))
A:keras.layers.convolutional_recurrent.self.input_spec[0]->InputSpec(shape=(batch_size, None) + input_shape[2:])
A:keras.layers.convolutional_recurrent.state_shape->tuple(state_shape)
A:keras.layers.convolutional_recurrent.self.kernel->self.add_weight(shape=kernel_shape, initializer=self.kernel_initializer, name='kernel', regularizer=self.kernel_regularizer, constraint=self.kernel_constraint)
A:keras.layers.convolutional_recurrent.self.recurrent_kernel->self.add_weight(shape=recurrent_kernel_shape, initializer=self.recurrent_initializer, name='recurrent_kernel', regularizer=self.recurrent_regularizer, constraint=self.recurrent_constraint)
A:keras.layers.convolutional_recurrent.self.bias->self.add_weight(shape=(self.filters * 4,), initializer=self.bias_initializer, name='bias', regularizer=self.bias_regularizer, constraint=self.bias_constraint)
A:keras.layers.convolutional_recurrent.bias_value->numpy.zeros((self.filters * 4,))
A:keras.layers.convolutional_recurrent.initial_state->self.input_conv(initial_state, K.zeros(tuple(shape)), padding=self.padding)
A:keras.layers.convolutional_recurrent.shape->list(self.kernel_shape)
A:keras.layers.convolutional_recurrent.output_shape->self.compute_output_shape(input_shape)
A:keras.layers.convolutional_recurrent.ones->self.input_conv(ones, K.zeros(shape), padding=self.padding)
A:keras.layers.convolutional_recurrent.conv_out->K.conv2d(x, w, strides=(1, 1), padding='same', data_format=self.data_format)
A:keras.layers.convolutional_recurrent.x_i->self.input_conv(inputs * dp_mask[0], self.kernel_i, self.bias_i, padding=self.padding)
A:keras.layers.convolutional_recurrent.x_f->self.input_conv(inputs * dp_mask[1], self.kernel_f, self.bias_f, padding=self.padding)
A:keras.layers.convolutional_recurrent.x_c->self.input_conv(inputs * dp_mask[2], self.kernel_c, self.bias_c, padding=self.padding)
A:keras.layers.convolutional_recurrent.x_o->self.input_conv(inputs * dp_mask[3], self.kernel_o, self.bias_o, padding=self.padding)
A:keras.layers.convolutional_recurrent.h_i->self.recurrent_conv(h_tm1 * rec_dp_mask[0], self.recurrent_kernel_i)
A:keras.layers.convolutional_recurrent.h_f->self.recurrent_conv(h_tm1 * rec_dp_mask[1], self.recurrent_kernel_f)
A:keras.layers.convolutional_recurrent.h_c->self.recurrent_conv(h_tm1 * rec_dp_mask[2], self.recurrent_kernel_c)
A:keras.layers.convolutional_recurrent.h_o->self.recurrent_conv(h_tm1 * rec_dp_mask[3], self.recurrent_kernel_o)
A:keras.layers.convolutional_recurrent.i->self.recurrent_activation(x_i + h_i)
A:keras.layers.convolutional_recurrent.f->self.recurrent_activation(x_f + h_f)
A:keras.layers.convolutional_recurrent.o->self.recurrent_activation(x_o + h_o)
keras.layers.ConvLSTM2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,return_sequences=False,go_backwards=False,stateful=False,dropout=0.0,recurrent_dropout=0.0,**kwargs)
keras.layers.ConvLSTM2D.build(self,input_shape)
keras.layers.ConvLSTM2D.get_config(self)
keras.layers.ConvLSTM2D.get_constants(self,inputs,training=None)
keras.layers.ConvLSTM2D.get_initial_state(self,inputs)
keras.layers.ConvLSTM2D.input_conv(self,x,w,b=None,padding='valid')
keras.layers.ConvLSTM2D.recurrent_conv(self,x,w)
keras.layers.ConvLSTM2D.reset_states(self)
keras.layers.ConvLSTM2D.step(self,inputs,states)
keras.layers.ConvRecurrent2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),return_sequences=False,go_backwards=False,stateful=False,**kwargs)
keras.layers.ConvRecurrent2D.compute_output_shape(self,input_shape)
keras.layers.ConvRecurrent2D.get_config(self)
keras.layers.convolutional_recurrent.ConvLSTM2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,return_sequences=False,go_backwards=False,stateful=False,dropout=0.0,recurrent_dropout=0.0,**kwargs)
keras.layers.convolutional_recurrent.ConvLSTM2D.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,return_sequences=False,go_backwards=False,stateful=False,dropout=0.0,recurrent_dropout=0.0,**kwargs)
keras.layers.convolutional_recurrent.ConvLSTM2D.build(self,input_shape)
keras.layers.convolutional_recurrent.ConvLSTM2D.get_config(self)
keras.layers.convolutional_recurrent.ConvLSTM2D.get_constants(self,inputs,training=None)
keras.layers.convolutional_recurrent.ConvLSTM2D.get_initial_state(self,inputs)
keras.layers.convolutional_recurrent.ConvLSTM2D.input_conv(self,x,w,b=None,padding='valid')
keras.layers.convolutional_recurrent.ConvLSTM2D.recurrent_conv(self,x,w)
keras.layers.convolutional_recurrent.ConvLSTM2D.reset_states(self)
keras.layers.convolutional_recurrent.ConvLSTM2D.step(self,inputs,states)
keras.layers.convolutional_recurrent.ConvRecurrent2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),return_sequences=False,go_backwards=False,stateful=False,**kwargs)
keras.layers.convolutional_recurrent.ConvRecurrent2D.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),return_sequences=False,go_backwards=False,stateful=False,**kwargs)
keras.layers.convolutional_recurrent.ConvRecurrent2D.compute_output_shape(self,input_shape)
keras.layers.convolutional_recurrent.ConvRecurrent2D.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/layers/__init__.py----------------------------------------
A:keras.layers.__init__.globs->globals()
keras.layers.__init__.deserialize(config,custom_objects=None)
keras.layers.__init__.serialize(layer)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/layers/local.py----------------------------------------
A:keras.layers.local.self.kernel_size->utils.conv_utils.normalize_tuple(kernel_size, 2, 'kernel_size')
A:keras.layers.local.self.strides->utils.conv_utils.normalize_tuple(strides, 2, 'strides')
A:keras.layers.local.self.padding->utils.conv_utils.normalize_padding(padding)
A:keras.layers.local.self.data_format->utils.conv_utils.normalize_data_format(data_format)
A:keras.layers.local.self.activation->activations.get(activation)
A:keras.layers.local.self.kernel_initializer->initializers.get(kernel_initializer)
A:keras.layers.local.self.bias_initializer->initializers.get(bias_initializer)
A:keras.layers.local.self.kernel_regularizer->regularizers.get(kernel_regularizer)
A:keras.layers.local.self.bias_regularizer->regularizers.get(bias_regularizer)
A:keras.layers.local.self.activity_regularizer->regularizers.get(activity_regularizer)
A:keras.layers.local.self.kernel_constraint->constraints.get(kernel_constraint)
A:keras.layers.local.self.bias_constraint->constraints.get(bias_constraint)
A:keras.layers.local.self.input_spec->InputSpec(ndim=4, axes={-1: input_filter})
A:keras.layers.local.output_length->utils.conv_utils.conv_output_length(input_shape[1], self.kernel_size[0], self.padding, self.strides[0])
A:keras.layers.local.self.kernel->self.add_weight(shape=self.kernel_shape, initializer=self.kernel_initializer, name='kernel', regularizer=self.kernel_regularizer, constraint=self.kernel_constraint)
A:keras.layers.local.self.bias->self.add_weight(shape=(output_row, output_col, self.filters), initializer=self.bias_initializer, name='bias', regularizer=self.bias_regularizer, constraint=self.bias_constraint)
A:keras.layers.local.length->utils.conv_utils.conv_output_length(input_shape[1], self.kernel_size[0], self.padding, self.strides[0])
A:keras.layers.local.output->self.activation(output)
A:keras.layers.local.base_config->super(LocallyConnected2D, self).get_config()
A:keras.layers.local.output_row->utils.conv_utils.conv_output_length(input_row, self.kernel_size[0], self.padding, self.strides[0])
A:keras.layers.local.output_col->utils.conv_utils.conv_output_length(input_col, self.kernel_size[1], self.padding, self.strides[1])
A:keras.layers.local.rows->utils.conv_utils.conv_output_length(rows, self.kernel_size[0], self.padding, self.strides[0])
A:keras.layers.local.cols->utils.conv_utils.conv_output_length(cols, self.kernel_size[1], self.padding, self.strides[1])
keras.layers.LocallyConnected1D(self,filters,kernel_size,strides=1,padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.LocallyConnected1D.build(self,input_shape)
keras.layers.LocallyConnected1D.call(self,inputs)
keras.layers.LocallyConnected1D.compute_output_shape(self,input_shape)
keras.layers.LocallyConnected1D.get_config(self)
keras.layers.LocallyConnected2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.LocallyConnected2D.build(self,input_shape)
keras.layers.LocallyConnected2D.call(self,inputs)
keras.layers.LocallyConnected2D.compute_output_shape(self,input_shape)
keras.layers.LocallyConnected2D.get_config(self)
keras.layers.local.LocallyConnected1D(self,filters,kernel_size,strides=1,padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.local.LocallyConnected1D.__init__(self,filters,kernel_size,strides=1,padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.local.LocallyConnected1D.build(self,input_shape)
keras.layers.local.LocallyConnected1D.call(self,inputs)
keras.layers.local.LocallyConnected1D.compute_output_shape(self,input_shape)
keras.layers.local.LocallyConnected1D.get_config(self)
keras.layers.local.LocallyConnected2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.local.LocallyConnected2D.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.local.LocallyConnected2D.build(self,input_shape)
keras.layers.local.LocallyConnected2D.call(self,inputs)
keras.layers.local.LocallyConnected2D.compute_output_shape(self,input_shape)
keras.layers.local.LocallyConnected2D.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/layers/noise.py----------------------------------------
A:keras.layers.noise.base_config->super(AlphaDropout, self).get_config()
A:keras.layers.noise.stddev->numpy.sqrt(self.rate / (1.0 - self.rate))
A:keras.layers.noise.noise_shape->self._get_noise_shape(inputs)
A:keras.layers.noise.kept_idx->K.cast(kept_idx, K.floatx())
keras.layers.AlphaDropout(self,rate,noise_shape=None,seed=None,**kwargs)
keras.layers.AlphaDropout._get_noise_shape(self,inputs)
keras.layers.AlphaDropout.call(self,inputs,training=None)
keras.layers.AlphaDropout.compute_output_shape(self,input_shape)
keras.layers.AlphaDropout.get_config(self)
keras.layers.GaussianDropout(self,rate,**kwargs)
keras.layers.GaussianDropout.call(self,inputs,training=None)
keras.layers.GaussianDropout.compute_output_shape(self,input_shape)
keras.layers.GaussianDropout.get_config(self)
keras.layers.GaussianNoise(self,stddev,**kwargs)
keras.layers.GaussianNoise.call(self,inputs,training=None)
keras.layers.GaussianNoise.compute_output_shape(self,input_shape)
keras.layers.GaussianNoise.get_config(self)
keras.layers.noise.AlphaDropout(self,rate,noise_shape=None,seed=None,**kwargs)
keras.layers.noise.AlphaDropout.__init__(self,rate,noise_shape=None,seed=None,**kwargs)
keras.layers.noise.AlphaDropout._get_noise_shape(self,inputs)
keras.layers.noise.AlphaDropout.call(self,inputs,training=None)
keras.layers.noise.AlphaDropout.compute_output_shape(self,input_shape)
keras.layers.noise.AlphaDropout.get_config(self)
keras.layers.noise.GaussianDropout(self,rate,**kwargs)
keras.layers.noise.GaussianDropout.__init__(self,rate,**kwargs)
keras.layers.noise.GaussianDropout.call(self,inputs,training=None)
keras.layers.noise.GaussianDropout.compute_output_shape(self,input_shape)
keras.layers.noise.GaussianDropout.get_config(self)
keras.layers.noise.GaussianNoise(self,stddev,**kwargs)
keras.layers.noise.GaussianNoise.__init__(self,stddev,**kwargs)
keras.layers.noise.GaussianNoise.call(self,inputs,training=None)
keras.layers.noise.GaussianNoise.compute_output_shape(self,input_shape)
keras.layers.noise.GaussianNoise.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/layers/core.py----------------------------------------
A:keras.layers.core.boolean_mask->K.any(K.not_equal(inputs, self.mask_value), axis=-1, keepdims=True)
A:keras.layers.core.base_config->super(ActivityRegularization, self).get_config()
A:keras.layers.core.self.rate->min(1.0, max(0.0, rate))
A:keras.layers.core.symbolic_shape->K.shape(inputs)
A:keras.layers.core.noise_shape->self._get_noise_shape(inputs)
A:keras.layers.core.self.input_spec->InputSpec(min_ndim=2, axes={-1: input_dim})
A:keras.layers.core.input_shape->list(input_shape)
A:keras.layers.core.data_format->K.image_data_format()
A:keras.layers.core.self.activation->activations.get(activation)
A:keras.layers.core.self.target_shape->tuple(target_shape)
A:keras.layers.core.output_shape->list(input_shape)
A:keras.layers.core.original->numpy.prod(input_shape, dtype=int)
A:keras.layers.core.self.dims->tuple(dims)
A:keras.layers.core.self._output_shape->tuple(output_shape)
A:keras.layers.core.x->self.call(x)
A:keras.layers.core.shape->tuple(shape)
A:keras.layers.core.function->func_load(config['function'], globs=globs)
A:keras.layers.core.config->config.copy().copy()
A:keras.layers.core.globs->dict(list(globs.items()) + list(custom_objects.items()))
A:keras.layers.core.function_type->config.copy().copy().pop('function_type')
A:keras.layers.core.output_shape_type->config.copy().copy().pop('output_shape_type')
A:keras.layers.core.config['arguments'][key]->numpy.array(arg_dict['value'])
A:keras.layers.core.self.kernel_initializer->initializers.get(kernel_initializer)
A:keras.layers.core.self.bias_initializer->initializers.get(bias_initializer)
A:keras.layers.core.self.kernel_regularizer->regularizers.get(kernel_regularizer)
A:keras.layers.core.self.bias_regularizer->regularizers.get(bias_regularizer)
A:keras.layers.core.self.activity_regularizer->regularizers.L1L2(l1=l1, l2=l2)
A:keras.layers.core.self.kernel_constraint->constraints.get(kernel_constraint)
A:keras.layers.core.self.bias_constraint->constraints.get(bias_constraint)
A:keras.layers.core.self.kernel->self.add_weight(shape=(input_dim, self.units), initializer=self.kernel_initializer, name='kernel', regularizer=self.kernel_regularizer, constraint=self.kernel_constraint)
A:keras.layers.core.self.bias->self.add_weight(shape=(self.units,), initializer=self.bias_initializer, name='bias', regularizer=self.bias_regularizer, constraint=self.bias_constraint)
A:keras.layers.core.output->self.activation(output)
keras.layers.Activation(self,activation,**kwargs)
keras.layers.Activation.call(self,inputs)
keras.layers.Activation.compute_output_shape(self,input_shape)
keras.layers.Activation.get_config(self)
keras.layers.ActivityRegularization(self,l1=0.0,l2=0.0,**kwargs)
keras.layers.ActivityRegularization.compute_output_shape(self,input_shape)
keras.layers.ActivityRegularization.get_config(self)
keras.layers.Dense(self,units,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.Dense.build(self,input_shape)
keras.layers.Dense.call(self,inputs)
keras.layers.Dense.compute_output_shape(self,input_shape)
keras.layers.Dense.get_config(self)
keras.layers.Dropout(self,rate,noise_shape=None,seed=None,**kwargs)
keras.layers.Dropout._get_noise_shape(self,inputs)
keras.layers.Dropout.call(self,inputs,training=None)
keras.layers.Dropout.compute_output_shape(self,input_shape)
keras.layers.Dropout.get_config(self)
keras.layers.Flatten(self,**kwargs)
keras.layers.Flatten.call(self,inputs)
keras.layers.Flatten.compute_output_shape(self,input_shape)
keras.layers.Lambda(self,function,output_shape=None,mask=None,arguments=None,**kwargs)
keras.layers.Lambda.call(self,inputs,mask=None)
keras.layers.Lambda.compute_mask(self,inputs,mask=None)
keras.layers.Lambda.compute_output_shape(self,input_shape)
keras.layers.Lambda.from_config(cls,config,custom_objects=None)
keras.layers.Lambda.get_config(self)
keras.layers.Masking(self,mask_value=0.0,**kwargs)
keras.layers.Masking.call(self,inputs)
keras.layers.Masking.compute_mask(self,inputs,mask=None)
keras.layers.Masking.compute_output_shape(self,input_shape)
keras.layers.Masking.get_config(self)
keras.layers.Permute(self,dims,**kwargs)
keras.layers.Permute.call(self,inputs)
keras.layers.Permute.compute_output_shape(self,input_shape)
keras.layers.Permute.get_config(self)
keras.layers.RepeatVector(self,n,**kwargs)
keras.layers.RepeatVector.call(self,inputs)
keras.layers.RepeatVector.compute_output_shape(self,input_shape)
keras.layers.RepeatVector.get_config(self)
keras.layers.Reshape(self,target_shape,**kwargs)
keras.layers.Reshape._fix_unknown_dimension(self,input_shape,output_shape)
keras.layers.Reshape.call(self,inputs)
keras.layers.Reshape.compute_output_shape(self,input_shape)
keras.layers.Reshape.get_config(self)
keras.layers.SpatialDropout1D(self,rate,**kwargs)
keras.layers.SpatialDropout1D._get_noise_shape(self,inputs)
keras.layers.SpatialDropout2D(self,rate,data_format=None,**kwargs)
keras.layers.SpatialDropout2D._get_noise_shape(self,inputs)
keras.layers.SpatialDropout3D(self,rate,data_format=None,**kwargs)
keras.layers.SpatialDropout3D._get_noise_shape(self,inputs)
keras.layers.core.Activation(self,activation,**kwargs)
keras.layers.core.Activation.__init__(self,activation,**kwargs)
keras.layers.core.Activation.call(self,inputs)
keras.layers.core.Activation.compute_output_shape(self,input_shape)
keras.layers.core.Activation.get_config(self)
keras.layers.core.ActivityRegularization(self,l1=0.0,l2=0.0,**kwargs)
keras.layers.core.ActivityRegularization.__init__(self,l1=0.0,l2=0.0,**kwargs)
keras.layers.core.ActivityRegularization.compute_output_shape(self,input_shape)
keras.layers.core.ActivityRegularization.get_config(self)
keras.layers.core.Dense(self,units,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.core.Dense.__init__(self,units,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.core.Dense.build(self,input_shape)
keras.layers.core.Dense.call(self,inputs)
keras.layers.core.Dense.compute_output_shape(self,input_shape)
keras.layers.core.Dense.get_config(self)
keras.layers.core.Dropout(self,rate,noise_shape=None,seed=None,**kwargs)
keras.layers.core.Dropout.__init__(self,rate,noise_shape=None,seed=None,**kwargs)
keras.layers.core.Dropout._get_noise_shape(self,inputs)
keras.layers.core.Dropout.call(self,inputs,training=None)
keras.layers.core.Dropout.compute_output_shape(self,input_shape)
keras.layers.core.Dropout.get_config(self)
keras.layers.core.Flatten(self,**kwargs)
keras.layers.core.Flatten.__init__(self,**kwargs)
keras.layers.core.Flatten.call(self,inputs)
keras.layers.core.Flatten.compute_output_shape(self,input_shape)
keras.layers.core.Lambda(self,function,output_shape=None,mask=None,arguments=None,**kwargs)
keras.layers.core.Lambda.__init__(self,function,output_shape=None,mask=None,arguments=None,**kwargs)
keras.layers.core.Lambda.call(self,inputs,mask=None)
keras.layers.core.Lambda.compute_mask(self,inputs,mask=None)
keras.layers.core.Lambda.compute_output_shape(self,input_shape)
keras.layers.core.Lambda.from_config(cls,config,custom_objects=None)
keras.layers.core.Lambda.get_config(self)
keras.layers.core.Masking(self,mask_value=0.0,**kwargs)
keras.layers.core.Masking.__init__(self,mask_value=0.0,**kwargs)
keras.layers.core.Masking.call(self,inputs)
keras.layers.core.Masking.compute_mask(self,inputs,mask=None)
keras.layers.core.Masking.compute_output_shape(self,input_shape)
keras.layers.core.Masking.get_config(self)
keras.layers.core.Permute(self,dims,**kwargs)
keras.layers.core.Permute.__init__(self,dims,**kwargs)
keras.layers.core.Permute.call(self,inputs)
keras.layers.core.Permute.compute_output_shape(self,input_shape)
keras.layers.core.Permute.get_config(self)
keras.layers.core.RepeatVector(self,n,**kwargs)
keras.layers.core.RepeatVector.__init__(self,n,**kwargs)
keras.layers.core.RepeatVector.call(self,inputs)
keras.layers.core.RepeatVector.compute_output_shape(self,input_shape)
keras.layers.core.RepeatVector.get_config(self)
keras.layers.core.Reshape(self,target_shape,**kwargs)
keras.layers.core.Reshape.__init__(self,target_shape,**kwargs)
keras.layers.core.Reshape._fix_unknown_dimension(self,input_shape,output_shape)
keras.layers.core.Reshape.call(self,inputs)
keras.layers.core.Reshape.compute_output_shape(self,input_shape)
keras.layers.core.Reshape.get_config(self)
keras.layers.core.SpatialDropout1D(self,rate,**kwargs)
keras.layers.core.SpatialDropout1D.__init__(self,rate,**kwargs)
keras.layers.core.SpatialDropout1D._get_noise_shape(self,inputs)
keras.layers.core.SpatialDropout2D(self,rate,data_format=None,**kwargs)
keras.layers.core.SpatialDropout2D.__init__(self,rate,data_format=None,**kwargs)
keras.layers.core.SpatialDropout2D._get_noise_shape(self,inputs)
keras.layers.core.SpatialDropout3D(self,rate,data_format=None,**kwargs)
keras.layers.core.SpatialDropout3D.__init__(self,rate,data_format=None,**kwargs)
keras.layers.core.SpatialDropout3D._get_noise_shape(self,inputs)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/layers/pooling.py----------------------------------------
A:keras.layers.pooling.self.pool_size->utils.conv_utils.normalize_tuple(pool_size, 3, 'pool_size')
A:keras.layers.pooling.self.strides->utils.conv_utils.normalize_tuple(strides, 3, 'strides')
A:keras.layers.pooling.self.padding->utils.conv_utils.normalize_padding(padding)
A:keras.layers.pooling.self.input_spec->InputSpec(ndim=5)
A:keras.layers.pooling.length->utils.conv_utils.conv_output_length(input_shape[1], self.pool_size[0], self.padding, self.strides[0])
A:keras.layers.pooling.inputs->K.expand_dims(inputs, 2)
A:keras.layers.pooling.output->K.pool3d(inputs, pool_size, strides, padding, data_format, pool_mode='avg')
A:keras.layers.pooling.base_config->super(_GlobalPooling3D, self).get_config()
A:keras.layers.pooling.data_format->utils.conv_utils.normalize_data_format(data_format)
A:keras.layers.pooling.self.data_format->utils.conv_utils.normalize_data_format(data_format)
A:keras.layers.pooling.rows->utils.conv_utils.conv_output_length(rows, self.pool_size[0], self.padding, self.strides[0])
A:keras.layers.pooling.cols->utils.conv_utils.conv_output_length(cols, self.pool_size[1], self.padding, self.strides[1])
A:keras.layers.pooling.len_dim1->utils.conv_utils.conv_output_length(len_dim1, self.pool_size[0], self.padding, self.strides[0])
A:keras.layers.pooling.len_dim2->utils.conv_utils.conv_output_length(len_dim2, self.pool_size[1], self.padding, self.strides[1])
A:keras.layers.pooling.len_dim3->utils.conv_utils.conv_output_length(len_dim3, self.pool_size[2], self.padding, self.strides[2])
keras.layers.AveragePooling1D(self,pool_size=2,strides=None,padding='valid',**kwargs)
keras.layers.AveragePooling1D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
keras.layers.AveragePooling2D(self,pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
keras.layers.AveragePooling2D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
keras.layers.AveragePooling3D(self,pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
keras.layers.AveragePooling3D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
keras.layers.GlobalAveragePooling1D(_GlobalPooling1D)
keras.layers.GlobalAveragePooling1D.call(self,inputs)
keras.layers.GlobalAveragePooling2D(_GlobalPooling2D)
keras.layers.GlobalAveragePooling2D.call(self,inputs)
keras.layers.GlobalAveragePooling3D(_GlobalPooling3D)
keras.layers.GlobalAveragePooling3D.call(self,inputs)
keras.layers.GlobalMaxPooling1D(_GlobalPooling1D)
keras.layers.GlobalMaxPooling1D.call(self,inputs)
keras.layers.GlobalMaxPooling2D(_GlobalPooling2D)
keras.layers.GlobalMaxPooling2D.call(self,inputs)
keras.layers.GlobalMaxPooling3D(_GlobalPooling3D)
keras.layers.GlobalMaxPooling3D.call(self,inputs)
keras.layers.MaxPooling1D(self,pool_size=2,strides=None,padding='valid',**kwargs)
keras.layers.MaxPooling1D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
keras.layers.MaxPooling2D(self,pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
keras.layers.MaxPooling2D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
keras.layers.MaxPooling3D(self,pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
keras.layers.MaxPooling3D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
keras.layers._GlobalPooling1D(self,**kwargs)
keras.layers._GlobalPooling1D.call(self,inputs)
keras.layers._GlobalPooling1D.compute_output_shape(self,input_shape)
keras.layers._GlobalPooling2D(self,data_format=None,**kwargs)
keras.layers._GlobalPooling2D.call(self,inputs)
keras.layers._GlobalPooling2D.compute_output_shape(self,input_shape)
keras.layers._GlobalPooling2D.get_config(self)
keras.layers._GlobalPooling3D(self,data_format=None,**kwargs)
keras.layers._GlobalPooling3D.call(self,inputs)
keras.layers._GlobalPooling3D.compute_output_shape(self,input_shape)
keras.layers._GlobalPooling3D.get_config(self)
keras.layers._Pooling1D(self,pool_size=2,strides=None,padding='valid',**kwargs)
keras.layers._Pooling1D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
keras.layers._Pooling1D.call(self,inputs)
keras.layers._Pooling1D.compute_output_shape(self,input_shape)
keras.layers._Pooling1D.get_config(self)
keras.layers._Pooling2D(self,pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
keras.layers._Pooling2D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
keras.layers._Pooling2D.call(self,inputs)
keras.layers._Pooling2D.compute_output_shape(self,input_shape)
keras.layers._Pooling2D.get_config(self)
keras.layers._Pooling3D(self,pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
keras.layers._Pooling3D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
keras.layers._Pooling3D.call(self,inputs)
keras.layers._Pooling3D.compute_output_shape(self,input_shape)
keras.layers._Pooling3D.get_config(self)
keras.layers.pooling.AveragePooling1D(self,pool_size=2,strides=None,padding='valid',**kwargs)
keras.layers.pooling.AveragePooling1D.__init__(self,pool_size=2,strides=None,padding='valid',**kwargs)
keras.layers.pooling.AveragePooling1D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
keras.layers.pooling.AveragePooling2D(self,pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
keras.layers.pooling.AveragePooling2D.__init__(self,pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
keras.layers.pooling.AveragePooling2D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
keras.layers.pooling.AveragePooling3D(self,pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
keras.layers.pooling.AveragePooling3D.__init__(self,pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
keras.layers.pooling.AveragePooling3D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
keras.layers.pooling.GlobalAveragePooling1D(_GlobalPooling1D)
keras.layers.pooling.GlobalAveragePooling1D.call(self,inputs)
keras.layers.pooling.GlobalAveragePooling2D(_GlobalPooling2D)
keras.layers.pooling.GlobalAveragePooling2D.call(self,inputs)
keras.layers.pooling.GlobalAveragePooling3D(_GlobalPooling3D)
keras.layers.pooling.GlobalAveragePooling3D.call(self,inputs)
keras.layers.pooling.GlobalMaxPooling1D(_GlobalPooling1D)
keras.layers.pooling.GlobalMaxPooling1D.call(self,inputs)
keras.layers.pooling.GlobalMaxPooling2D(_GlobalPooling2D)
keras.layers.pooling.GlobalMaxPooling2D.call(self,inputs)
keras.layers.pooling.GlobalMaxPooling3D(_GlobalPooling3D)
keras.layers.pooling.GlobalMaxPooling3D.call(self,inputs)
keras.layers.pooling.MaxPooling1D(self,pool_size=2,strides=None,padding='valid',**kwargs)
keras.layers.pooling.MaxPooling1D.__init__(self,pool_size=2,strides=None,padding='valid',**kwargs)
keras.layers.pooling.MaxPooling1D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
keras.layers.pooling.MaxPooling2D(self,pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
keras.layers.pooling.MaxPooling2D.__init__(self,pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
keras.layers.pooling.MaxPooling2D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
keras.layers.pooling.MaxPooling3D(self,pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
keras.layers.pooling.MaxPooling3D.__init__(self,pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
keras.layers.pooling.MaxPooling3D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
keras.layers.pooling._GlobalPooling1D(self,**kwargs)
keras.layers.pooling._GlobalPooling1D.__init__(self,**kwargs)
keras.layers.pooling._GlobalPooling1D.call(self,inputs)
keras.layers.pooling._GlobalPooling1D.compute_output_shape(self,input_shape)
keras.layers.pooling._GlobalPooling2D(self,data_format=None,**kwargs)
keras.layers.pooling._GlobalPooling2D.__init__(self,data_format=None,**kwargs)
keras.layers.pooling._GlobalPooling2D.call(self,inputs)
keras.layers.pooling._GlobalPooling2D.compute_output_shape(self,input_shape)
keras.layers.pooling._GlobalPooling2D.get_config(self)
keras.layers.pooling._GlobalPooling3D(self,data_format=None,**kwargs)
keras.layers.pooling._GlobalPooling3D.__init__(self,data_format=None,**kwargs)
keras.layers.pooling._GlobalPooling3D.call(self,inputs)
keras.layers.pooling._GlobalPooling3D.compute_output_shape(self,input_shape)
keras.layers.pooling._GlobalPooling3D.get_config(self)
keras.layers.pooling._Pooling1D(self,pool_size=2,strides=None,padding='valid',**kwargs)
keras.layers.pooling._Pooling1D.__init__(self,pool_size=2,strides=None,padding='valid',**kwargs)
keras.layers.pooling._Pooling1D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
keras.layers.pooling._Pooling1D.call(self,inputs)
keras.layers.pooling._Pooling1D.compute_output_shape(self,input_shape)
keras.layers.pooling._Pooling1D.get_config(self)
keras.layers.pooling._Pooling2D(self,pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
keras.layers.pooling._Pooling2D.__init__(self,pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
keras.layers.pooling._Pooling2D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
keras.layers.pooling._Pooling2D.call(self,inputs)
keras.layers.pooling._Pooling2D.compute_output_shape(self,input_shape)
keras.layers.pooling._Pooling2D.get_config(self)
keras.layers.pooling._Pooling3D(self,pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
keras.layers.pooling._Pooling3D.__init__(self,pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
keras.layers.pooling._Pooling3D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
keras.layers.pooling._Pooling3D.call(self,inputs)
keras.layers.pooling._Pooling3D.compute_output_shape(self,input_shape)
keras.layers.pooling._Pooling3D.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/layers/embeddings.py----------------------------------------
A:keras.layers.embeddings.self.embeddings_initializer->initializers.get(embeddings_initializer)
A:keras.layers.embeddings.self.embeddings_regularizer->regularizers.get(embeddings_regularizer)
A:keras.layers.embeddings.self.activity_regularizer->regularizers.get(activity_regularizer)
A:keras.layers.embeddings.self.embeddings_constraint->constraints.get(embeddings_constraint)
A:keras.layers.embeddings.self.embeddings->self.add_weight(shape=(self.input_dim, self.output_dim), initializer=self.embeddings_initializer, name='embeddings', regularizer=self.embeddings_regularizer, constraint=self.embeddings_constraint, dtype=self.dtype)
A:keras.layers.embeddings.in_lens->list(self.input_length)
A:keras.layers.embeddings.inputs->K.cast(inputs, 'int32')
A:keras.layers.embeddings.out->K.gather(self.embeddings, inputs)
A:keras.layers.embeddings.base_config->super(Embedding, self).get_config()
keras.layers.Embedding(self,input_dim,output_dim,embeddings_initializer='uniform',embeddings_regularizer=None,activity_regularizer=None,embeddings_constraint=None,mask_zero=False,input_length=None,**kwargs)
keras.layers.Embedding.build(self,input_shape)
keras.layers.Embedding.call(self,inputs)
keras.layers.Embedding.compute_mask(self,inputs,mask=None)
keras.layers.Embedding.compute_output_shape(self,input_shape)
keras.layers.Embedding.get_config(self)
keras.layers.embeddings.Embedding(self,input_dim,output_dim,embeddings_initializer='uniform',embeddings_regularizer=None,activity_regularizer=None,embeddings_constraint=None,mask_zero=False,input_length=None,**kwargs)
keras.layers.embeddings.Embedding.__init__(self,input_dim,output_dim,embeddings_initializer='uniform',embeddings_regularizer=None,activity_regularizer=None,embeddings_constraint=None,mask_zero=False,input_length=None,**kwargs)
keras.layers.embeddings.Embedding.build(self,input_shape)
keras.layers.embeddings.Embedding.call(self,inputs)
keras.layers.embeddings.Embedding.compute_mask(self,inputs,mask=None)
keras.layers.embeddings.Embedding.compute_output_shape(self,input_shape)
keras.layers.embeddings.Embedding.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/layers/convolutional.py----------------------------------------
A:keras.layers.convolutional.self.kernel_size->utils.conv_utils.normalize_tuple(kernel_size, rank, 'kernel_size')
A:keras.layers.convolutional.self.strides->utils.conv_utils.normalize_tuple(strides, rank, 'strides')
A:keras.layers.convolutional.self.padding->utils.conv_utils.normalize_tuple(padding, 2, 'padding')
A:keras.layers.convolutional.self.data_format->utils.conv_utils.normalize_data_format(data_format)
A:keras.layers.convolutional.self.dilation_rate->utils.conv_utils.normalize_tuple(dilation_rate, rank, 'dilation_rate')
A:keras.layers.convolutional.self.activation->activations.get(activation)
A:keras.layers.convolutional.self.kernel_initializer->initializers.get(kernel_initializer)
A:keras.layers.convolutional.self.bias_initializer->initializers.get(bias_initializer)
A:keras.layers.convolutional.self.kernel_regularizer->regularizers.get(kernel_regularizer)
A:keras.layers.convolutional.self.bias_regularizer->regularizers.get(bias_regularizer)
A:keras.layers.convolutional.self.activity_regularizer->regularizers.get(activity_regularizer)
A:keras.layers.convolutional.self.kernel_constraint->constraints.get(kernel_constraint)
A:keras.layers.convolutional.self.bias_constraint->constraints.get(bias_constraint)
A:keras.layers.convolutional.self.input_spec->InputSpec(ndim=5)
A:keras.layers.convolutional.self.kernel->self.add_weight(shape=kernel_shape, initializer=self.kernel_initializer, name='kernel', regularizer=self.kernel_regularizer, constraint=self.kernel_constraint)
A:keras.layers.convolutional.self.bias->self.add_weight(shape=(self.filters,), initializer=self.bias_initializer, name='bias', regularizer=self.bias_regularizer, constraint=self.bias_constraint)
A:keras.layers.convolutional.outputs->K.bias_add(outputs, self.bias, data_format=self.data_format)
A:keras.layers.convolutional.new_dim->utils.conv_utils.conv_output_length(space[i], self.kernel_size[i], padding=self.padding, stride=self.strides[i], dilation=self.dilation_rate[i])
A:keras.layers.convolutional.base_config->super(Cropping3D, self).get_config()
A:keras.layers.convolutional.config->super(_SeparableConv, self).get_config()
A:keras.layers.convolutional.input_shape->K.shape(inputs)
A:keras.layers.convolutional.out_height->utils.conv_utils.deconv_length(height, stride_h, kernel_h, self.padding)
A:keras.layers.convolutional.out_width->utils.conv_utils.deconv_length(width, stride_w, kernel_w, self.padding)
A:keras.layers.convolutional.output_shape->list(input_shape)
A:keras.layers.convolutional.output_shape[h_axis]->utils.conv_utils.deconv_length(output_shape[h_axis], stride_h, kernel_h, self.padding)
A:keras.layers.convolutional.output_shape[w_axis]->utils.conv_utils.deconv_length(output_shape[w_axis], stride_w, kernel_w, self.padding)
A:keras.layers.convolutional.out_depth->utils.conv_utils.deconv_length(depth, stride_d, kernel_d, self.padding)
A:keras.layers.convolutional.output_shape[d_axis]->utils.conv_utils.deconv_length(output_shape[d_axis], stride_d, kernel_d, self.padding)
A:keras.layers.convolutional.self.depthwise_initializer->initializers.get(depthwise_initializer)
A:keras.layers.convolutional.self.pointwise_initializer->initializers.get(pointwise_initializer)
A:keras.layers.convolutional.self.depthwise_regularizer->regularizers.get(depthwise_regularizer)
A:keras.layers.convolutional.self.pointwise_regularizer->regularizers.get(pointwise_regularizer)
A:keras.layers.convolutional.self.depthwise_constraint->constraints.get(depthwise_constraint)
A:keras.layers.convolutional.self.pointwise_constraint->constraints.get(pointwise_constraint)
A:keras.layers.convolutional.input_dim->int(input_shape[channel_axis])
A:keras.layers.convolutional.self.depthwise_kernel->self.add_weight(shape=depthwise_kernel_shape, initializer=self.depthwise_initializer, name='depthwise_kernel', regularizer=self.depthwise_regularizer, constraint=self.depthwise_constraint)
A:keras.layers.convolutional.self.pointwise_kernel->self.add_weight(shape=pointwise_kernel_shape, initializer=self.pointwise_initializer, name='pointwise_kernel', regularizer=self.pointwise_regularizer, constraint=self.pointwise_constraint)
A:keras.layers.convolutional.config['depthwise_initializer']->initializers.serialize(self.depthwise_initializer)
A:keras.layers.convolutional.config['pointwise_initializer']->initializers.serialize(self.pointwise_initializer)
A:keras.layers.convolutional.config['depthwise_regularizer']->regularizers.serialize(self.depthwise_regularizer)
A:keras.layers.convolutional.config['pointwise_regularizer']->regularizers.serialize(self.pointwise_regularizer)
A:keras.layers.convolutional.config['depthwise_constraint']->constraints.serialize(self.depthwise_constraint)
A:keras.layers.convolutional.config['pointwise_constraint']->constraints.serialize(self.pointwise_constraint)
A:keras.layers.convolutional.self.size->utils.conv_utils.normalize_tuple(size, 3, 'size')
A:keras.layers.convolutional.output->K.repeat_elements(inputs, self.size, axis=1)
A:keras.layers.convolutional.height_padding->utils.conv_utils.normalize_tuple(padding[0], 2, '1st entry of padding')
A:keras.layers.convolutional.width_padding->utils.conv_utils.normalize_tuple(padding[1], 2, '2nd entry of padding')
A:keras.layers.convolutional.dim1_padding->utils.conv_utils.normalize_tuple(padding[0], 2, '1st entry of padding')
A:keras.layers.convolutional.dim2_padding->utils.conv_utils.normalize_tuple(padding[1], 2, '2nd entry of padding')
A:keras.layers.convolutional.dim3_padding->utils.conv_utils.normalize_tuple(padding[2], 2, '3rd entry of padding')
A:keras.layers.convolutional.self.cropping->utils.conv_utils.normalize_tuple(cropping, 2, 'cropping')
A:keras.layers.convolutional.height_cropping->utils.conv_utils.normalize_tuple(cropping[0], 2, '1st entry of cropping')
A:keras.layers.convolutional.width_cropping->utils.conv_utils.normalize_tuple(cropping[1], 2, '2nd entry of cropping')
A:keras.layers.convolutional.dim1_cropping->utils.conv_utils.normalize_tuple(cropping[0], 2, '1st entry of cropping')
A:keras.layers.convolutional.dim2_cropping->utils.conv_utils.normalize_tuple(cropping[1], 2, '2nd entry of cropping')
A:keras.layers.convolutional.dim3_cropping->utils.conv_utils.normalize_tuple(cropping[2], 2, '3rd entry of cropping')
keras.layers.Conv1D(self,filters,kernel_size,strides=1,padding='valid',dilation_rate=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.Conv1D.get_config(self)
keras.layers.Conv2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.Conv2D.get_config(self)
keras.layers.Conv2DTranspose(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.Conv2DTranspose.build(self,input_shape)
keras.layers.Conv2DTranspose.call(self,inputs)
keras.layers.Conv2DTranspose.compute_output_shape(self,input_shape)
keras.layers.Conv2DTranspose.get_config(self)
keras.layers.Conv3D(self,filters,kernel_size,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.Conv3D.get_config(self)
keras.layers.Conv3DTranspose(self,filters,kernel_size,strides=(1,1,1),padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.Conv3DTranspose.build(self,input_shape)
keras.layers.Conv3DTranspose.call(self,inputs)
keras.layers.Conv3DTranspose.compute_output_shape(self,input_shape)
keras.layers.Conv3DTranspose.get_config(self)
keras.layers.Cropping1D(self,cropping=(1,1),**kwargs)
keras.layers.Cropping1D.call(self,inputs)
keras.layers.Cropping1D.compute_output_shape(self,input_shape)
keras.layers.Cropping1D.get_config(self)
keras.layers.Cropping2D(self,cropping=((0,0),(0,0)),data_format=None,**kwargs)
keras.layers.Cropping2D.call(self,inputs)
keras.layers.Cropping2D.compute_output_shape(self,input_shape)
keras.layers.Cropping2D.get_config(self)
keras.layers.Cropping3D(self,cropping=((1,1),(1,1),(1,1)),data_format=None,**kwargs)
keras.layers.Cropping3D.call(self,inputs)
keras.layers.Cropping3D.compute_output_shape(self,input_shape)
keras.layers.Cropping3D.get_config(self)
keras.layers.SeparableConv1D(self,filters,kernel_size,strides=1,padding='valid',data_format=None,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
keras.layers.SeparableConv2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
keras.layers.UpSampling1D(self,size=2,**kwargs)
keras.layers.UpSampling1D.call(self,inputs)
keras.layers.UpSampling1D.compute_output_shape(self,input_shape)
keras.layers.UpSampling1D.get_config(self)
keras.layers.UpSampling2D(self,size=(2,2),data_format=None,**kwargs)
keras.layers.UpSampling2D.call(self,inputs)
keras.layers.UpSampling2D.compute_output_shape(self,input_shape)
keras.layers.UpSampling2D.get_config(self)
keras.layers.UpSampling3D(self,size=(2,2,2),data_format=None,**kwargs)
keras.layers.UpSampling3D.call(self,inputs)
keras.layers.UpSampling3D.compute_output_shape(self,input_shape)
keras.layers.UpSampling3D.get_config(self)
keras.layers.ZeroPadding1D(self,padding=1,**kwargs)
keras.layers.ZeroPadding1D.call(self,inputs)
keras.layers.ZeroPadding1D.compute_output_shape(self,input_shape)
keras.layers.ZeroPadding1D.get_config(self)
keras.layers.ZeroPadding2D(self,padding=(1,1),data_format=None,**kwargs)
keras.layers.ZeroPadding2D.call(self,inputs)
keras.layers.ZeroPadding2D.compute_output_shape(self,input_shape)
keras.layers.ZeroPadding2D.get_config(self)
keras.layers.ZeroPadding3D(self,padding=(1,1,1),data_format=None,**kwargs)
keras.layers.ZeroPadding3D.call(self,inputs)
keras.layers.ZeroPadding3D.compute_output_shape(self,input_shape)
keras.layers.ZeroPadding3D.get_config(self)
keras.layers._Conv(self,rank,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers._Conv.build(self,input_shape)
keras.layers._Conv.call(self,inputs)
keras.layers._Conv.compute_output_shape(self,input_shape)
keras.layers._Conv.get_config(self)
keras.layers._SeparableConv(self,rank,filters,kernel_size,strides=1,padding='valid',data_format=None,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
keras.layers._SeparableConv.build(self,input_shape)
keras.layers._SeparableConv.call(self,inputs)
keras.layers._SeparableConv.get_config(self)
keras.layers.convolutional.Conv1D(self,filters,kernel_size,strides=1,padding='valid',dilation_rate=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.convolutional.Conv1D.__init__(self,filters,kernel_size,strides=1,padding='valid',dilation_rate=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.convolutional.Conv1D.get_config(self)
keras.layers.convolutional.Conv2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.convolutional.Conv2D.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.convolutional.Conv2D.get_config(self)
keras.layers.convolutional.Conv2DTranspose(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.convolutional.Conv2DTranspose.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.convolutional.Conv2DTranspose.build(self,input_shape)
keras.layers.convolutional.Conv2DTranspose.call(self,inputs)
keras.layers.convolutional.Conv2DTranspose.compute_output_shape(self,input_shape)
keras.layers.convolutional.Conv2DTranspose.get_config(self)
keras.layers.convolutional.Conv3D(self,filters,kernel_size,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.convolutional.Conv3D.__init__(self,filters,kernel_size,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.convolutional.Conv3D.get_config(self)
keras.layers.convolutional.Conv3DTranspose(self,filters,kernel_size,strides=(1,1,1),padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.convolutional.Conv3DTranspose.__init__(self,filters,kernel_size,strides=(1,1,1),padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.convolutional.Conv3DTranspose.build(self,input_shape)
keras.layers.convolutional.Conv3DTranspose.call(self,inputs)
keras.layers.convolutional.Conv3DTranspose.compute_output_shape(self,input_shape)
keras.layers.convolutional.Conv3DTranspose.get_config(self)
keras.layers.convolutional.Cropping1D(self,cropping=(1,1),**kwargs)
keras.layers.convolutional.Cropping1D.__init__(self,cropping=(1,1),**kwargs)
keras.layers.convolutional.Cropping1D.call(self,inputs)
keras.layers.convolutional.Cropping1D.compute_output_shape(self,input_shape)
keras.layers.convolutional.Cropping1D.get_config(self)
keras.layers.convolutional.Cropping2D(self,cropping=((0,0),(0,0)),data_format=None,**kwargs)
keras.layers.convolutional.Cropping2D.__init__(self,cropping=((0,0),(0,0)),data_format=None,**kwargs)
keras.layers.convolutional.Cropping2D.call(self,inputs)
keras.layers.convolutional.Cropping2D.compute_output_shape(self,input_shape)
keras.layers.convolutional.Cropping2D.get_config(self)
keras.layers.convolutional.Cropping3D(self,cropping=((1,1),(1,1),(1,1)),data_format=None,**kwargs)
keras.layers.convolutional.Cropping3D.__init__(self,cropping=((1,1),(1,1),(1,1)),data_format=None,**kwargs)
keras.layers.convolutional.Cropping3D.call(self,inputs)
keras.layers.convolutional.Cropping3D.compute_output_shape(self,input_shape)
keras.layers.convolutional.Cropping3D.get_config(self)
keras.layers.convolutional.SeparableConv1D(self,filters,kernel_size,strides=1,padding='valid',data_format=None,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
keras.layers.convolutional.SeparableConv1D.__init__(self,filters,kernel_size,strides=1,padding='valid',data_format=None,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
keras.layers.convolutional.SeparableConv2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
keras.layers.convolutional.SeparableConv2D.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
keras.layers.convolutional.UpSampling1D(self,size=2,**kwargs)
keras.layers.convolutional.UpSampling1D.__init__(self,size=2,**kwargs)
keras.layers.convolutional.UpSampling1D.call(self,inputs)
keras.layers.convolutional.UpSampling1D.compute_output_shape(self,input_shape)
keras.layers.convolutional.UpSampling1D.get_config(self)
keras.layers.convolutional.UpSampling2D(self,size=(2,2),data_format=None,**kwargs)
keras.layers.convolutional.UpSampling2D.__init__(self,size=(2,2),data_format=None,**kwargs)
keras.layers.convolutional.UpSampling2D.call(self,inputs)
keras.layers.convolutional.UpSampling2D.compute_output_shape(self,input_shape)
keras.layers.convolutional.UpSampling2D.get_config(self)
keras.layers.convolutional.UpSampling3D(self,size=(2,2,2),data_format=None,**kwargs)
keras.layers.convolutional.UpSampling3D.__init__(self,size=(2,2,2),data_format=None,**kwargs)
keras.layers.convolutional.UpSampling3D.call(self,inputs)
keras.layers.convolutional.UpSampling3D.compute_output_shape(self,input_shape)
keras.layers.convolutional.UpSampling3D.get_config(self)
keras.layers.convolutional.ZeroPadding1D(self,padding=1,**kwargs)
keras.layers.convolutional.ZeroPadding1D.__init__(self,padding=1,**kwargs)
keras.layers.convolutional.ZeroPadding1D.call(self,inputs)
keras.layers.convolutional.ZeroPadding1D.compute_output_shape(self,input_shape)
keras.layers.convolutional.ZeroPadding1D.get_config(self)
keras.layers.convolutional.ZeroPadding2D(self,padding=(1,1),data_format=None,**kwargs)
keras.layers.convolutional.ZeroPadding2D.__init__(self,padding=(1,1),data_format=None,**kwargs)
keras.layers.convolutional.ZeroPadding2D.call(self,inputs)
keras.layers.convolutional.ZeroPadding2D.compute_output_shape(self,input_shape)
keras.layers.convolutional.ZeroPadding2D.get_config(self)
keras.layers.convolutional.ZeroPadding3D(self,padding=(1,1,1),data_format=None,**kwargs)
keras.layers.convolutional.ZeroPadding3D.__init__(self,padding=(1,1,1),data_format=None,**kwargs)
keras.layers.convolutional.ZeroPadding3D.call(self,inputs)
keras.layers.convolutional.ZeroPadding3D.compute_output_shape(self,input_shape)
keras.layers.convolutional.ZeroPadding3D.get_config(self)
keras.layers.convolutional._Conv(self,rank,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.convolutional._Conv.__init__(self,rank,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
keras.layers.convolutional._Conv.build(self,input_shape)
keras.layers.convolutional._Conv.call(self,inputs)
keras.layers.convolutional._Conv.compute_output_shape(self,input_shape)
keras.layers.convolutional._Conv.get_config(self)
keras.layers.convolutional._SeparableConv(self,rank,filters,kernel_size,strides=1,padding='valid',data_format=None,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
keras.layers.convolutional._SeparableConv.__init__(self,rank,filters,kernel_size,strides=1,padding='valid',data_format=None,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
keras.layers.convolutional._SeparableConv.build(self,input_shape)
keras.layers.convolutional._SeparableConv.call(self,inputs)
keras.layers.convolutional._SeparableConv.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/layers/cudnn_recurrent.py----------------------------------------
A:keras.layers.cudnn_recurrent.initial_state->self.get_initial_state(inputs)
A:keras.layers.cudnn_recurrent.inputs->tensorflow.transpose(inputs, (1, 0, 2))
A:keras.layers.cudnn_recurrent.(output, states)->self._process_batch(inputs, initial_state)
A:keras.layers.cudnn_recurrent.base_config->super(CuDNNLSTM, self).get_config()
A:keras.layers.cudnn_recurrent.self.kernel_initializer->initializers.get(kernel_initializer)
A:keras.layers.cudnn_recurrent.self.recurrent_initializer->initializers.get(recurrent_initializer)
A:keras.layers.cudnn_recurrent.self.bias_initializer->initializers.get(bias_initializer)
A:keras.layers.cudnn_recurrent.self.kernel_regularizer->regularizers.get(kernel_regularizer)
A:keras.layers.cudnn_recurrent.self.recurrent_regularizer->regularizers.get(recurrent_regularizer)
A:keras.layers.cudnn_recurrent.self.bias_regularizer->regularizers.get(bias_regularizer)
A:keras.layers.cudnn_recurrent.self.activity_regularizer->regularizers.get(activity_regularizer)
A:keras.layers.cudnn_recurrent.self.kernel_constraint->constraints.get(kernel_constraint)
A:keras.layers.cudnn_recurrent.self.recurrent_constraint->constraints.get(recurrent_constraint)
A:keras.layers.cudnn_recurrent.self.bias_constraint->constraints.get(bias_constraint)
A:keras.layers.cudnn_recurrent.Cell->namedtuple('cell', 'state_size')
A:keras.layers.cudnn_recurrent.cell->Cell(state_size=(self.units, self.units))
A:keras.layers.cudnn_recurrent.self._cudnn_gru->tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.CudnnGRU(num_layers=1, num_units=self.units, input_size=input_dim, input_mode='linear_input')
A:keras.layers.cudnn_recurrent.self.kernel->self.add_weight(shape=(input_dim, self.units * 4), name='kernel', initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, constraint=self.kernel_constraint)
A:keras.layers.cudnn_recurrent.self.recurrent_kernel->self.add_weight(shape=(self.units, self.units * 4), name='recurrent_kernel', initializer=self.recurrent_initializer, regularizer=self.recurrent_regularizer, constraint=self.recurrent_constraint)
A:keras.layers.cudnn_recurrent.self.bias->self.add_weight(shape=(self.units * 8,), name='bias', initializer=bias_initializer, regularizer=self.bias_regularizer, constraint=self.bias_constraint)
A:keras.layers.cudnn_recurrent.input_h->tensorflow.expand_dims(input_h, axis=0)
A:keras.layers.cudnn_recurrent.params->self._canonical_to_params(weights=[self.kernel_i, self.kernel_f, self.kernel_c, self.kernel_o, self.recurrent_kernel_i, self.recurrent_kernel_f, self.recurrent_kernel_c, self.recurrent_kernel_o], biases=[self.bias_i_i, self.bias_f_i, self.bias_c_i, self.bias_o_i, self.bias_i, self.bias_f, self.bias_c, self.bias_o])
A:keras.layers.cudnn_recurrent.(outputs, h)->self._cudnn_gru(inputs, input_h=input_h, params=params, is_training=True)
A:keras.layers.cudnn_recurrent.output->tensorflow.transpose(outputs, (1, 0, 2))
A:keras.layers.cudnn_recurrent.self._cudnn_lstm->tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.CudnnLSTM(num_layers=1, num_units=self.units, input_size=input_dim, input_mode='linear_input')
A:keras.layers.cudnn_recurrent.input_c->tensorflow.expand_dims(input_c, axis=0)
A:keras.layers.cudnn_recurrent.(outputs, h, c)->self._cudnn_lstm(inputs, input_h=input_h, input_c=input_c, params=params, is_training=True)
keras.layers.CuDNNGRU(self,units,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,return_sequences=False,return_state=False,stateful=False,**kwargs)
keras.layers.CuDNNGRU._process_batch(self,inputs,initial_state)
keras.layers.CuDNNGRU.build(self,input_shape)
keras.layers.CuDNNGRU.cell(self)
keras.layers.CuDNNGRU.get_config(self)
keras.layers.CuDNNLSTM(self,units,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,return_sequences=False,return_state=False,stateful=False,**kwargs)
keras.layers.CuDNNLSTM._process_batch(self,inputs,initial_state)
keras.layers.CuDNNLSTM.build(self,input_shape)
keras.layers.CuDNNLSTM.cell(self)
keras.layers.CuDNNLSTM.get_config(self)
keras.layers._CuDNNRNN(self,return_sequences=False,return_state=False,go_backwards=False,stateful=False,**kwargs)
keras.layers._CuDNNRNN._canonical_to_params(self,weights,biases)
keras.layers._CuDNNRNN.call(self,inputs,mask=None,training=None,initial_state=None)
keras.layers._CuDNNRNN.from_config(cls,config)
keras.layers._CuDNNRNN.get_config(self)
keras.layers._CuDNNRNN.get_losses_for(self,inputs=None)
keras.layers._CuDNNRNN.losses(self)
keras.layers._CuDNNRNN.non_trainable_weights(self)
keras.layers._CuDNNRNN.trainable_weights(self)
keras.layers.cudnn_recurrent.CuDNNGRU(self,units,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,return_sequences=False,return_state=False,stateful=False,**kwargs)
keras.layers.cudnn_recurrent.CuDNNGRU.__init__(self,units,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,return_sequences=False,return_state=False,stateful=False,**kwargs)
keras.layers.cudnn_recurrent.CuDNNGRU._process_batch(self,inputs,initial_state)
keras.layers.cudnn_recurrent.CuDNNGRU.build(self,input_shape)
keras.layers.cudnn_recurrent.CuDNNGRU.cell(self)
keras.layers.cudnn_recurrent.CuDNNGRU.get_config(self)
keras.layers.cudnn_recurrent.CuDNNLSTM(self,units,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,return_sequences=False,return_state=False,stateful=False,**kwargs)
keras.layers.cudnn_recurrent.CuDNNLSTM.__init__(self,units,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,return_sequences=False,return_state=False,stateful=False,**kwargs)
keras.layers.cudnn_recurrent.CuDNNLSTM._process_batch(self,inputs,initial_state)
keras.layers.cudnn_recurrent.CuDNNLSTM.build(self,input_shape)
keras.layers.cudnn_recurrent.CuDNNLSTM.cell(self)
keras.layers.cudnn_recurrent.CuDNNLSTM.get_config(self)
keras.layers.cudnn_recurrent._CuDNNRNN(self,return_sequences=False,return_state=False,go_backwards=False,stateful=False,**kwargs)
keras.layers.cudnn_recurrent._CuDNNRNN.__init__(self,return_sequences=False,return_state=False,go_backwards=False,stateful=False,**kwargs)
keras.layers.cudnn_recurrent._CuDNNRNN._canonical_to_params(self,weights,biases)
keras.layers.cudnn_recurrent._CuDNNRNN.call(self,inputs,mask=None,training=None,initial_state=None)
keras.layers.cudnn_recurrent._CuDNNRNN.from_config(cls,config)
keras.layers.cudnn_recurrent._CuDNNRNN.get_config(self)
keras.layers.cudnn_recurrent._CuDNNRNN.get_losses_for(self,inputs=None)
keras.layers.cudnn_recurrent._CuDNNRNN.losses(self)
keras.layers.cudnn_recurrent._CuDNNRNN.non_trainable_weights(self)
keras.layers.cudnn_recurrent._CuDNNRNN.trainable_weights(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/layers/normalization.py----------------------------------------
A:keras.layers.normalization.self.beta_initializer->initializers.get(beta_initializer)
A:keras.layers.normalization.self.gamma_initializer->initializers.get(gamma_initializer)
A:keras.layers.normalization.self.moving_mean_initializer->initializers.get(moving_mean_initializer)
A:keras.layers.normalization.self.moving_variance_initializer->initializers.get(moving_variance_initializer)
A:keras.layers.normalization.self.beta_regularizer->regularizers.get(beta_regularizer)
A:keras.layers.normalization.self.gamma_regularizer->regularizers.get(gamma_regularizer)
A:keras.layers.normalization.self.beta_constraint->constraints.get(beta_constraint)
A:keras.layers.normalization.self.gamma_constraint->constraints.get(gamma_constraint)
A:keras.layers.normalization.self.input_spec->InputSpec(ndim=len(input_shape), axes={self.axis: dim})
A:keras.layers.normalization.self.gamma->self.add_weight(shape=shape, name='gamma', initializer=self.gamma_initializer, regularizer=self.gamma_regularizer, constraint=self.gamma_constraint)
A:keras.layers.normalization.self.beta->self.add_weight(shape=shape, name='beta', initializer=self.beta_initializer, regularizer=self.beta_regularizer, constraint=self.beta_constraint)
A:keras.layers.normalization.self.moving_mean->self.add_weight(shape=shape, name='moving_mean', initializer=self.moving_mean_initializer, trainable=False)
A:keras.layers.normalization.self.moving_variance->self.add_weight(shape=shape, name='moving_variance', initializer=self.moving_variance_initializer, trainable=False)
A:keras.layers.normalization.input_shape->K.int_shape(inputs)
A:keras.layers.normalization.ndim->len(input_shape)
A:keras.layers.normalization.reduction_axes->list(range(len(input_shape)))
A:keras.layers.normalization.broadcast_moving_mean->K.reshape(self.moving_mean, broadcast_shape)
A:keras.layers.normalization.broadcast_moving_variance->K.reshape(self.moving_variance, broadcast_shape)
A:keras.layers.normalization.broadcast_beta->K.reshape(self.beta, broadcast_shape)
A:keras.layers.normalization.broadcast_gamma->K.reshape(self.gamma, broadcast_shape)
A:keras.layers.normalization.(normed_training, mean, variance)->K.normalize_batch_in_training(inputs, self.gamma, self.beta, reduction_axes, epsilon=self.epsilon)
A:keras.layers.normalization.sample_size->K.cast(sample_size, dtype=K.dtype(inputs))
A:keras.layers.normalization.base_config->super(BatchNormalization, self).get_config()
keras.layers.BatchNormalization(self,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',moving_mean_initializer='zeros',moving_variance_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,**kwargs)
keras.layers.BatchNormalization.build(self,input_shape)
keras.layers.BatchNormalization.call(self,inputs,training=None)
keras.layers.BatchNormalization.compute_output_shape(self,input_shape)
keras.layers.BatchNormalization.get_config(self)
keras.layers.normalization.BatchNormalization(self,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',moving_mean_initializer='zeros',moving_variance_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,**kwargs)
keras.layers.normalization.BatchNormalization.__init__(self,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',moving_mean_initializer='zeros',moving_variance_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,**kwargs)
keras.layers.normalization.BatchNormalization.build(self,input_shape)
keras.layers.normalization.BatchNormalization.call(self,inputs,training=None)
keras.layers.normalization.BatchNormalization.compute_output_shape(self,input_shape)
keras.layers.normalization.BatchNormalization.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/layers/recurrent.py----------------------------------------
A:keras.layers.recurrent.(inputs, states)->LSTMCell(units, activation=activation, recurrent_activation=recurrent_activation, use_bias=use_bias, kernel_initializer=kernel_initializer, recurrent_initializer=recurrent_initializer, unit_forget_bias=unit_forget_bias, bias_initializer=bias_initializer, kernel_regularizer=kernel_regularizer, recurrent_regularizer=recurrent_regularizer, bias_regularizer=bias_regularizer, kernel_constraint=kernel_constraint, recurrent_constraint=recurrent_constraint, bias_constraint=bias_constraint, dropout=dropout, recurrent_dropout=recurrent_dropout, implementation=implementation).call(inputs, states, **kwargs)
A:keras.layers.recurrent.base_config->super(LSTM, self).get_config()
A:keras.layers.recurrent.num_param->len(cell.weights)
A:keras.layers.recurrent.cell_losses->self.cell.get_losses_for(inputs)
A:keras.layers.recurrent.cell->LSTMCell(units, activation=activation, recurrent_activation=recurrent_activation, use_bias=use_bias, kernel_initializer=kernel_initializer, recurrent_initializer=recurrent_initializer, unit_forget_bias=unit_forget_bias, bias_initializer=bias_initializer, kernel_regularizer=kernel_regularizer, recurrent_regularizer=recurrent_regularizer, bias_regularizer=bias_regularizer, kernel_constraint=kernel_constraint, recurrent_constraint=recurrent_constraint, bias_constraint=bias_constraint, dropout=dropout, recurrent_dropout=recurrent_dropout, implementation=implementation)
A:keras.layers.recurrent.num_states->len(self.cell.state_size)
A:keras.layers.recurrent.self.input_spec[0]->InputSpec(shape=(batch_size, None, input_dim))
A:keras.layers.recurrent.state_size->list(self.cell.state_size)
A:keras.layers.recurrent.initial_state->to_list_or_none(initial_state)
A:keras.layers.recurrent.(inputs, initial_state, constants)->self._standardize_args(inputs, initial_state, constants)
A:keras.layers.recurrent.self._num_constants->len(constants)
A:keras.layers.recurrent.is_keras_tensor->K.is_keras_tensor(additional_inputs[0])
A:keras.layers.recurrent.output->self.activation(output)
A:keras.layers.recurrent.input_shape->K.int_shape(inputs)
A:keras.layers.recurrent.(last_output, outputs, states)->K.rnn(step, inputs, initial_state, constants=constants, go_backwards=self.go_backwards, mask=mask, unroll=self.unroll, input_length=timesteps)
A:keras.layers.recurrent.states->list(states)
A:keras.layers.recurrent.constants->to_list_or_none(constants)
A:keras.layers.recurrent.cell_config->self.cell.get_config()
A:keras.layers.recurrent.num_constants->config.pop('num_constants', None)
A:keras.layers.recurrent.layer->cls(cell, **config)
A:keras.layers.recurrent.self.activation->activations.get(activation)
A:keras.layers.recurrent.self.kernel_initializer->initializers.get(kernel_initializer)
A:keras.layers.recurrent.self.recurrent_initializer->initializers.get(recurrent_initializer)
A:keras.layers.recurrent.self.bias_initializer->initializers.get(bias_initializer)
A:keras.layers.recurrent.self.kernel_regularizer->regularizers.get(kernel_regularizer)
A:keras.layers.recurrent.self.recurrent_regularizer->regularizers.get(recurrent_regularizer)
A:keras.layers.recurrent.self.bias_regularizer->regularizers.get(bias_regularizer)
A:keras.layers.recurrent.self.kernel_constraint->constraints.get(kernel_constraint)
A:keras.layers.recurrent.self.recurrent_constraint->constraints.get(recurrent_constraint)
A:keras.layers.recurrent.self.bias_constraint->constraints.get(bias_constraint)
A:keras.layers.recurrent.self.dropout->min(1.0, max(0.0, dropout))
A:keras.layers.recurrent.self.recurrent_dropout->min(1.0, max(0.0, recurrent_dropout))
A:keras.layers.recurrent.self.kernel->self.add_weight(shape=(input_dim, self.units * 4), name='kernel', initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, constraint=self.kernel_constraint)
A:keras.layers.recurrent.self.recurrent_kernel->self.add_weight(shape=(self.units, self.units * 4), name='recurrent_kernel', initializer=self.recurrent_initializer, regularizer=self.recurrent_regularizer, constraint=self.recurrent_constraint)
A:keras.layers.recurrent.self.bias->self.add_weight(shape=(self.units * 4,), name='bias', initializer=bias_initializer, regularizer=self.bias_regularizer, constraint=self.bias_constraint)
A:keras.layers.recurrent.self._dropout_mask->_generate_dropout_mask(_generate_dropout_ones(inputs, K.shape(inputs)[-1]), self.dropout, training=training, count=4)
A:keras.layers.recurrent.self._recurrent_dropout_mask->_generate_dropout_mask(_generate_dropout_ones(inputs, self.units), self.recurrent_dropout, training=training, count=4)
A:keras.layers.recurrent.h->K.bias_add(h, self.bias)
A:keras.layers.recurrent.self.activity_regularizer->regularizers.get(activity_regularizer)
A:keras.layers.recurrent.self.recurrent_activation->activations.get(recurrent_activation)
A:keras.layers.recurrent.x_z->K.bias_add(x_z, self.bias_z)
A:keras.layers.recurrent.x_r->K.bias_add(x_r, self.bias_r)
A:keras.layers.recurrent.x_h->K.bias_add(x_h, self.bias_h)
A:keras.layers.recurrent.z->K.bias_add(z, self.bias)
A:keras.layers.recurrent.r->self.recurrent_activation(x_r + recurrent_r)
A:keras.layers.recurrent.hh->self.activation(x_h + recurrent_h)
A:keras.layers.recurrent.matrix_x->K.bias_add(matrix_x, self.bias)
A:keras.layers.recurrent.matrix_inner->K.dot(h_tm1, self.recurrent_kernel[:, :2 * self.units])
A:keras.layers.recurrent.recurrent_h->K.dot(r * h_tm1, self.recurrent_kernel[:, 2 * self.units:])
A:keras.layers.recurrent.x_i->K.bias_add(x_i, self.bias_i)
A:keras.layers.recurrent.x_f->K.bias_add(x_f, self.bias_f)
A:keras.layers.recurrent.x_c->K.bias_add(x_c, self.bias_c)
A:keras.layers.recurrent.x_o->K.bias_add(x_o, self.bias_o)
A:keras.layers.recurrent.i->self.recurrent_activation(z0)
A:keras.layers.recurrent.f->self.recurrent_activation(z1)
A:keras.layers.recurrent.o->self.recurrent_activation(z3)
A:keras.layers.recurrent.ones->K.ones_like(K.reshape(inputs[:, 0], (-1, 1)))
keras.layers.GRU(self,units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,implementation=1,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,**kwargs)
keras.layers.GRU.activation(self)
keras.layers.GRU.bias_constraint(self)
keras.layers.GRU.bias_initializer(self)
keras.layers.GRU.bias_regularizer(self)
keras.layers.GRU.call(self,inputs,mask=None,training=None,initial_state=None)
keras.layers.GRU.dropout(self)
keras.layers.GRU.from_config(cls,config)
keras.layers.GRU.get_config(self)
keras.layers.GRU.implementation(self)
keras.layers.GRU.kernel_constraint(self)
keras.layers.GRU.kernel_initializer(self)
keras.layers.GRU.kernel_regularizer(self)
keras.layers.GRU.recurrent_activation(self)
keras.layers.GRU.recurrent_constraint(self)
keras.layers.GRU.recurrent_dropout(self)
keras.layers.GRU.recurrent_initializer(self)
keras.layers.GRU.recurrent_regularizer(self)
keras.layers.GRU.units(self)
keras.layers.GRU.use_bias(self)
keras.layers.GRUCell(self,units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,implementation=1,**kwargs)
keras.layers.GRUCell.build(self,input_shape)
keras.layers.GRUCell.call(self,inputs,states,training=None)
keras.layers.GRUCell.get_config(self)
keras.layers.LSTM(self,units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,implementation=1,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,**kwargs)
keras.layers.LSTM.activation(self)
keras.layers.LSTM.bias_constraint(self)
keras.layers.LSTM.bias_initializer(self)
keras.layers.LSTM.bias_regularizer(self)
keras.layers.LSTM.call(self,inputs,mask=None,training=None,initial_state=None)
keras.layers.LSTM.dropout(self)
keras.layers.LSTM.from_config(cls,config)
keras.layers.LSTM.get_config(self)
keras.layers.LSTM.implementation(self)
keras.layers.LSTM.kernel_constraint(self)
keras.layers.LSTM.kernel_initializer(self)
keras.layers.LSTM.kernel_regularizer(self)
keras.layers.LSTM.recurrent_activation(self)
keras.layers.LSTM.recurrent_constraint(self)
keras.layers.LSTM.recurrent_dropout(self)
keras.layers.LSTM.recurrent_initializer(self)
keras.layers.LSTM.recurrent_regularizer(self)
keras.layers.LSTM.unit_forget_bias(self)
keras.layers.LSTM.units(self)
keras.layers.LSTM.use_bias(self)
keras.layers.LSTMCell(self,units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,implementation=1,**kwargs)
keras.layers.LSTMCell.build(self,input_shape)
keras.layers.LSTMCell.call(self,inputs,states,training=None)
keras.layers.LSTMCell.get_config(self)
keras.layers.RNN(self,cell,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,**kwargs)
keras.layers.RNN._standardize_args(self,inputs,initial_state,constants)
keras.layers.RNN.build(self,input_shape)
keras.layers.RNN.call(self,inputs,mask=None,training=None,initial_state=None,constants=None)
keras.layers.RNN.compute_mask(self,inputs,mask)
keras.layers.RNN.compute_output_shape(self,input_shape)
keras.layers.RNN.from_config(cls,config,custom_objects=None)
keras.layers.RNN.get_config(self)
keras.layers.RNN.get_initial_state(self,inputs)
keras.layers.RNN.get_losses_for(self,inputs=None)
keras.layers.RNN.losses(self)
keras.layers.RNN.non_trainable_weights(self)
keras.layers.RNN.reset_states(self,states=None)
keras.layers.RNN.states(self)
keras.layers.RNN.states(self,states)
keras.layers.RNN.trainable_weights(self)
keras.layers.SimpleRNN(self,units,activation='tanh',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,**kwargs)
keras.layers.SimpleRNN.activation(self)
keras.layers.SimpleRNN.bias_constraint(self)
keras.layers.SimpleRNN.bias_initializer(self)
keras.layers.SimpleRNN.bias_regularizer(self)
keras.layers.SimpleRNN.call(self,inputs,mask=None,training=None,initial_state=None)
keras.layers.SimpleRNN.dropout(self)
keras.layers.SimpleRNN.from_config(cls,config)
keras.layers.SimpleRNN.get_config(self)
keras.layers.SimpleRNN.kernel_constraint(self)
keras.layers.SimpleRNN.kernel_initializer(self)
keras.layers.SimpleRNN.kernel_regularizer(self)
keras.layers.SimpleRNN.recurrent_constraint(self)
keras.layers.SimpleRNN.recurrent_dropout(self)
keras.layers.SimpleRNN.recurrent_initializer(self)
keras.layers.SimpleRNN.recurrent_regularizer(self)
keras.layers.SimpleRNN.units(self)
keras.layers.SimpleRNN.use_bias(self)
keras.layers.SimpleRNNCell(self,units,activation='tanh',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,**kwargs)
keras.layers.SimpleRNNCell.build(self,input_shape)
keras.layers.SimpleRNNCell.call(self,inputs,states,training=None)
keras.layers.SimpleRNNCell.get_config(self)
keras.layers.StackedRNNCells(self,cells,**kwargs)
keras.layers.StackedRNNCells.build(self,input_shape)
keras.layers.StackedRNNCells.call(self,inputs,states,constants=None,**kwargs)
keras.layers.StackedRNNCells.from_config(cls,config,custom_objects=None)
keras.layers.StackedRNNCells.get_config(self)
keras.layers.StackedRNNCells.get_losses_for(self,inputs=None)
keras.layers.StackedRNNCells.get_weights(self)
keras.layers.StackedRNNCells.losses(self)
keras.layers.StackedRNNCells.non_trainable_weights(self)
keras.layers.StackedRNNCells.set_weights(self,weights)
keras.layers.StackedRNNCells.state_size(self)
keras.layers.StackedRNNCells.trainable_weights(self)
keras.layers._generate_dropout_mask(ones,rate,training=None,count=1)
keras.layers._generate_dropout_ones(inputs,dims)
keras.layers.recurrent.GRU(self,units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,implementation=1,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,**kwargs)
keras.layers.recurrent.GRU.__init__(self,units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,implementation=1,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,**kwargs)
keras.layers.recurrent.GRU.activation(self)
keras.layers.recurrent.GRU.bias_constraint(self)
keras.layers.recurrent.GRU.bias_initializer(self)
keras.layers.recurrent.GRU.bias_regularizer(self)
keras.layers.recurrent.GRU.call(self,inputs,mask=None,training=None,initial_state=None)
keras.layers.recurrent.GRU.dropout(self)
keras.layers.recurrent.GRU.from_config(cls,config)
keras.layers.recurrent.GRU.get_config(self)
keras.layers.recurrent.GRU.implementation(self)
keras.layers.recurrent.GRU.kernel_constraint(self)
keras.layers.recurrent.GRU.kernel_initializer(self)
keras.layers.recurrent.GRU.kernel_regularizer(self)
keras.layers.recurrent.GRU.recurrent_activation(self)
keras.layers.recurrent.GRU.recurrent_constraint(self)
keras.layers.recurrent.GRU.recurrent_dropout(self)
keras.layers.recurrent.GRU.recurrent_initializer(self)
keras.layers.recurrent.GRU.recurrent_regularizer(self)
keras.layers.recurrent.GRU.units(self)
keras.layers.recurrent.GRU.use_bias(self)
keras.layers.recurrent.GRUCell(self,units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,implementation=1,**kwargs)
keras.layers.recurrent.GRUCell.__init__(self,units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,implementation=1,**kwargs)
keras.layers.recurrent.GRUCell.build(self,input_shape)
keras.layers.recurrent.GRUCell.call(self,inputs,states,training=None)
keras.layers.recurrent.GRUCell.get_config(self)
keras.layers.recurrent.LSTM(self,units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,implementation=1,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,**kwargs)
keras.layers.recurrent.LSTM.__init__(self,units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,implementation=1,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,**kwargs)
keras.layers.recurrent.LSTM.activation(self)
keras.layers.recurrent.LSTM.bias_constraint(self)
keras.layers.recurrent.LSTM.bias_initializer(self)
keras.layers.recurrent.LSTM.bias_regularizer(self)
keras.layers.recurrent.LSTM.call(self,inputs,mask=None,training=None,initial_state=None)
keras.layers.recurrent.LSTM.dropout(self)
keras.layers.recurrent.LSTM.from_config(cls,config)
keras.layers.recurrent.LSTM.get_config(self)
keras.layers.recurrent.LSTM.implementation(self)
keras.layers.recurrent.LSTM.kernel_constraint(self)
keras.layers.recurrent.LSTM.kernel_initializer(self)
keras.layers.recurrent.LSTM.kernel_regularizer(self)
keras.layers.recurrent.LSTM.recurrent_activation(self)
keras.layers.recurrent.LSTM.recurrent_constraint(self)
keras.layers.recurrent.LSTM.recurrent_dropout(self)
keras.layers.recurrent.LSTM.recurrent_initializer(self)
keras.layers.recurrent.LSTM.recurrent_regularizer(self)
keras.layers.recurrent.LSTM.unit_forget_bias(self)
keras.layers.recurrent.LSTM.units(self)
keras.layers.recurrent.LSTM.use_bias(self)
keras.layers.recurrent.LSTMCell(self,units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,implementation=1,**kwargs)
keras.layers.recurrent.LSTMCell.__init__(self,units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,implementation=1,**kwargs)
keras.layers.recurrent.LSTMCell.build(self,input_shape)
keras.layers.recurrent.LSTMCell.call(self,inputs,states,training=None)
keras.layers.recurrent.LSTMCell.get_config(self)
keras.layers.recurrent.RNN(self,cell,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,**kwargs)
keras.layers.recurrent.RNN.__init__(self,cell,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,**kwargs)
keras.layers.recurrent.RNN._standardize_args(self,inputs,initial_state,constants)
keras.layers.recurrent.RNN.build(self,input_shape)
keras.layers.recurrent.RNN.call(self,inputs,mask=None,training=None,initial_state=None,constants=None)
keras.layers.recurrent.RNN.compute_mask(self,inputs,mask)
keras.layers.recurrent.RNN.compute_output_shape(self,input_shape)
keras.layers.recurrent.RNN.from_config(cls,config,custom_objects=None)
keras.layers.recurrent.RNN.get_config(self)
keras.layers.recurrent.RNN.get_initial_state(self,inputs)
keras.layers.recurrent.RNN.get_losses_for(self,inputs=None)
keras.layers.recurrent.RNN.losses(self)
keras.layers.recurrent.RNN.non_trainable_weights(self)
keras.layers.recurrent.RNN.reset_states(self,states=None)
keras.layers.recurrent.RNN.states(self)
keras.layers.recurrent.RNN.states(self,states)
keras.layers.recurrent.RNN.trainable_weights(self)
keras.layers.recurrent.SimpleRNN(self,units,activation='tanh',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,**kwargs)
keras.layers.recurrent.SimpleRNN.__init__(self,units,activation='tanh',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,**kwargs)
keras.layers.recurrent.SimpleRNN.activation(self)
keras.layers.recurrent.SimpleRNN.bias_constraint(self)
keras.layers.recurrent.SimpleRNN.bias_initializer(self)
keras.layers.recurrent.SimpleRNN.bias_regularizer(self)
keras.layers.recurrent.SimpleRNN.call(self,inputs,mask=None,training=None,initial_state=None)
keras.layers.recurrent.SimpleRNN.dropout(self)
keras.layers.recurrent.SimpleRNN.from_config(cls,config)
keras.layers.recurrent.SimpleRNN.get_config(self)
keras.layers.recurrent.SimpleRNN.kernel_constraint(self)
keras.layers.recurrent.SimpleRNN.kernel_initializer(self)
keras.layers.recurrent.SimpleRNN.kernel_regularizer(self)
keras.layers.recurrent.SimpleRNN.recurrent_constraint(self)
keras.layers.recurrent.SimpleRNN.recurrent_dropout(self)
keras.layers.recurrent.SimpleRNN.recurrent_initializer(self)
keras.layers.recurrent.SimpleRNN.recurrent_regularizer(self)
keras.layers.recurrent.SimpleRNN.units(self)
keras.layers.recurrent.SimpleRNN.use_bias(self)
keras.layers.recurrent.SimpleRNNCell(self,units,activation='tanh',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,**kwargs)
keras.layers.recurrent.SimpleRNNCell.__init__(self,units,activation='tanh',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,**kwargs)
keras.layers.recurrent.SimpleRNNCell.build(self,input_shape)
keras.layers.recurrent.SimpleRNNCell.call(self,inputs,states,training=None)
keras.layers.recurrent.SimpleRNNCell.get_config(self)
keras.layers.recurrent.StackedRNNCells(self,cells,**kwargs)
keras.layers.recurrent.StackedRNNCells.__init__(self,cells,**kwargs)
keras.layers.recurrent.StackedRNNCells.build(self,input_shape)
keras.layers.recurrent.StackedRNNCells.call(self,inputs,states,constants=None,**kwargs)
keras.layers.recurrent.StackedRNNCells.from_config(cls,config,custom_objects=None)
keras.layers.recurrent.StackedRNNCells.get_config(self)
keras.layers.recurrent.StackedRNNCells.get_losses_for(self,inputs=None)
keras.layers.recurrent.StackedRNNCells.get_weights(self)
keras.layers.recurrent.StackedRNNCells.losses(self)
keras.layers.recurrent.StackedRNNCells.non_trainable_weights(self)
keras.layers.recurrent.StackedRNNCells.set_weights(self,weights)
keras.layers.recurrent.StackedRNNCells.state_size(self)
keras.layers.recurrent.StackedRNNCells.trainable_weights(self)
keras.layers.recurrent._generate_dropout_mask(ones,rate,training=None,count=1)
keras.layers.recurrent._generate_dropout_ones(inputs,dims)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/layers/advanced_activations.py----------------------------------------
A:keras.layers.advanced_activations.self.alpha->K.cast_to_floatx(alpha)
A:keras.layers.advanced_activations.base_config->super(Softmax, self).get_config()
A:keras.layers.advanced_activations.self.alpha_initializer->initializers.get(alpha_initializer)
A:keras.layers.advanced_activations.self.alpha_regularizer->regularizers.get(alpha_regularizer)
A:keras.layers.advanced_activations.self.alpha_constraint->constraints.get(alpha_constraint)
A:keras.layers.advanced_activations.self.shared_axes->list(shared_axes)
A:keras.layers.advanced_activations.param_shape->list(input_shape[1:])
A:keras.layers.advanced_activations.self.input_spec->InputSpec(ndim=len(input_shape), axes=axes)
A:keras.layers.advanced_activations.pos->K.relu(inputs)
A:keras.layers.advanced_activations.self.theta->K.cast_to_floatx(theta)
keras.layers.ELU(self,alpha=1.0,**kwargs)
keras.layers.ELU.call(self,inputs)
keras.layers.ELU.compute_output_shape(self,input_shape)
keras.layers.ELU.get_config(self)
keras.layers.LeakyReLU(self,alpha=0.3,**kwargs)
keras.layers.LeakyReLU.call(self,inputs)
keras.layers.LeakyReLU.compute_output_shape(self,input_shape)
keras.layers.LeakyReLU.get_config(self)
keras.layers.PReLU(self,alpha_initializer='zeros',alpha_regularizer=None,alpha_constraint=None,shared_axes=None,**kwargs)
keras.layers.PReLU.build(self,input_shape)
keras.layers.PReLU.call(self,inputs,mask=None)
keras.layers.PReLU.compute_output_shape(self,input_shape)
keras.layers.PReLU.get_config(self)
keras.layers.Softmax(self,axis=-1,**kwargs)
keras.layers.Softmax.call(self,inputs)
keras.layers.Softmax.compute_output_shape(self,input_shape)
keras.layers.Softmax.get_config(self)
keras.layers.ThresholdedReLU(self,theta=1.0,**kwargs)
keras.layers.ThresholdedReLU.call(self,inputs,mask=None)
keras.layers.ThresholdedReLU.compute_output_shape(self,input_shape)
keras.layers.ThresholdedReLU.get_config(self)
keras.layers.advanced_activations.ELU(self,alpha=1.0,**kwargs)
keras.layers.advanced_activations.ELU.__init__(self,alpha=1.0,**kwargs)
keras.layers.advanced_activations.ELU.call(self,inputs)
keras.layers.advanced_activations.ELU.compute_output_shape(self,input_shape)
keras.layers.advanced_activations.ELU.get_config(self)
keras.layers.advanced_activations.LeakyReLU(self,alpha=0.3,**kwargs)
keras.layers.advanced_activations.LeakyReLU.__init__(self,alpha=0.3,**kwargs)
keras.layers.advanced_activations.LeakyReLU.call(self,inputs)
keras.layers.advanced_activations.LeakyReLU.compute_output_shape(self,input_shape)
keras.layers.advanced_activations.LeakyReLU.get_config(self)
keras.layers.advanced_activations.PReLU(self,alpha_initializer='zeros',alpha_regularizer=None,alpha_constraint=None,shared_axes=None,**kwargs)
keras.layers.advanced_activations.PReLU.__init__(self,alpha_initializer='zeros',alpha_regularizer=None,alpha_constraint=None,shared_axes=None,**kwargs)
keras.layers.advanced_activations.PReLU.build(self,input_shape)
keras.layers.advanced_activations.PReLU.call(self,inputs,mask=None)
keras.layers.advanced_activations.PReLU.compute_output_shape(self,input_shape)
keras.layers.advanced_activations.PReLU.get_config(self)
keras.layers.advanced_activations.Softmax(self,axis=-1,**kwargs)
keras.layers.advanced_activations.Softmax.__init__(self,axis=-1,**kwargs)
keras.layers.advanced_activations.Softmax.call(self,inputs)
keras.layers.advanced_activations.Softmax.compute_output_shape(self,input_shape)
keras.layers.advanced_activations.Softmax.get_config(self)
keras.layers.advanced_activations.ThresholdedReLU(self,theta=1.0,**kwargs)
keras.layers.advanced_activations.ThresholdedReLU.__init__(self,theta=1.0,**kwargs)
keras.layers.advanced_activations.ThresholdedReLU.call(self,inputs,mask=None)
keras.layers.advanced_activations.ThresholdedReLU.compute_output_shape(self,input_shape)
keras.layers.advanced_activations.ThresholdedReLU.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/layers/wrappers.py----------------------------------------
A:keras.layers.wrappers.uid->_object_list_uid(inputs)
A:keras.layers.wrappers.updates->self.layer.get_updates_for(inner_inputs)
A:keras.layers.wrappers.losses->self.layer.get_losses_for(None)
A:keras.layers.wrappers.base_config->super(Bidirectional, self).get_config()
A:keras.layers.wrappers.layer->deserialize_layer(config.pop('layer'), custom_objects=custom_objects)
A:keras.layers.wrappers.self.input_spec->InputSpec(shape=input_shape)
A:keras.layers.wrappers.child_output_shape->self.layer.compute_output_shape(child_input_shape)
A:keras.layers.wrappers.input_shape->K.int_shape(inputs)
A:keras.layers.wrappers.output->K.concatenate([y, y_rev])
A:keras.layers.wrappers.(_, outputs, _)->K.rnn(step, inputs, initial_states=[], input_length=input_shape[1], unroll=False)
A:keras.layers.wrappers.input_uid->_object_list_uid(inputs)
A:keras.layers.wrappers.inputs->K.reshape(inputs, (-1,) + input_shape[2:])
A:keras.layers.wrappers.y->self.forward_layer.call(inputs, **kwargs)
A:keras.layers.wrappers.output_shape->tuple(output_shape)
A:keras.layers.wrappers.regularization_loss->self.layer.activity_regularizer(y)
A:keras.layers.wrappers.self.forward_layer->copy.copy(layer)
A:keras.layers.wrappers.config->deserialize_layer(config.pop('layer'), custom_objects=custom_objects).get_config()
A:keras.layers.wrappers.self.backward_layer->deserialize_layer(config.pop('layer'), custom_objects=custom_objects).__class__.from_config(config)
A:keras.layers.wrappers.nw->len(weights)
A:keras.layers.wrappers.initial_state->list(initial_state)
A:keras.layers.wrappers.num_states->len(initial_state)
A:keras.layers.wrappers.is_keras_tensor->K.is_keras_tensor(additional_inputs[0])
A:keras.layers.wrappers.y_rev->K.reverse(y_rev, 1)
keras.layers.Bidirectional(self,layer,merge_mode='concat',weights=None,**kwargs)
keras.layers.Bidirectional.build(self,input_shape)
keras.layers.Bidirectional.call(self,inputs,training=None,mask=None,initial_state=None)
keras.layers.Bidirectional.compute_mask(self,inputs,mask)
keras.layers.Bidirectional.compute_output_shape(self,input_shape)
keras.layers.Bidirectional.constraints(self)
keras.layers.Bidirectional.get_config(self)
keras.layers.Bidirectional.get_weights(self)
keras.layers.Bidirectional.losses(self)
keras.layers.Bidirectional.non_trainable_weights(self)
keras.layers.Bidirectional.reset_states(self)
keras.layers.Bidirectional.set_weights(self,weights)
keras.layers.Bidirectional.trainable(self)
keras.layers.Bidirectional.trainable(self,value)
keras.layers.Bidirectional.trainable_weights(self)
keras.layers.Bidirectional.updates(self)
keras.layers.TimeDistributed(self,layer,**kwargs)
keras.layers.TimeDistributed.build(self,input_shape)
keras.layers.TimeDistributed.call(self,inputs,training=None,mask=None)
keras.layers.TimeDistributed.compute_output_shape(self,input_shape)
keras.layers.Wrapper(self,layer,**kwargs)
keras.layers.Wrapper.activity_regularizer(self)
keras.layers.Wrapper.build(self,input_shape=None)
keras.layers.Wrapper.from_config(cls,config,custom_objects=None)
keras.layers.Wrapper.get_config(self)
keras.layers.Wrapper.get_losses_for(self,inputs=None)
keras.layers.Wrapper.get_updates_for(self,inputs=None)
keras.layers.Wrapper.get_weights(self)
keras.layers.Wrapper.losses(self)
keras.layers.Wrapper.non_trainable_weights(self)
keras.layers.Wrapper.set_weights(self,weights)
keras.layers.Wrapper.trainable(self)
keras.layers.Wrapper.trainable(self,value)
keras.layers.Wrapper.trainable_weights(self)
keras.layers.Wrapper.updates(self)
keras.layers.wrappers.Bidirectional(self,layer,merge_mode='concat',weights=None,**kwargs)
keras.layers.wrappers.Bidirectional.__init__(self,layer,merge_mode='concat',weights=None,**kwargs)
keras.layers.wrappers.Bidirectional.build(self,input_shape)
keras.layers.wrappers.Bidirectional.call(self,inputs,training=None,mask=None,initial_state=None)
keras.layers.wrappers.Bidirectional.compute_mask(self,inputs,mask)
keras.layers.wrappers.Bidirectional.compute_output_shape(self,input_shape)
keras.layers.wrappers.Bidirectional.constraints(self)
keras.layers.wrappers.Bidirectional.get_config(self)
keras.layers.wrappers.Bidirectional.get_weights(self)
keras.layers.wrappers.Bidirectional.losses(self)
keras.layers.wrappers.Bidirectional.non_trainable_weights(self)
keras.layers.wrappers.Bidirectional.reset_states(self)
keras.layers.wrappers.Bidirectional.set_weights(self,weights)
keras.layers.wrappers.Bidirectional.trainable(self)
keras.layers.wrappers.Bidirectional.trainable(self,value)
keras.layers.wrappers.Bidirectional.trainable_weights(self)
keras.layers.wrappers.Bidirectional.updates(self)
keras.layers.wrappers.TimeDistributed(self,layer,**kwargs)
keras.layers.wrappers.TimeDistributed.__init__(self,layer,**kwargs)
keras.layers.wrappers.TimeDistributed.build(self,input_shape)
keras.layers.wrappers.TimeDistributed.call(self,inputs,training=None,mask=None)
keras.layers.wrappers.TimeDistributed.compute_output_shape(self,input_shape)
keras.layers.wrappers.Wrapper(self,layer,**kwargs)
keras.layers.wrappers.Wrapper.__init__(self,layer,**kwargs)
keras.layers.wrappers.Wrapper.activity_regularizer(self)
keras.layers.wrappers.Wrapper.build(self,input_shape=None)
keras.layers.wrappers.Wrapper.from_config(cls,config,custom_objects=None)
keras.layers.wrappers.Wrapper.get_config(self)
keras.layers.wrappers.Wrapper.get_losses_for(self,inputs=None)
keras.layers.wrappers.Wrapper.get_updates_for(self,inputs=None)
keras.layers.wrappers.Wrapper.get_weights(self)
keras.layers.wrappers.Wrapper.losses(self)
keras.layers.wrappers.Wrapper.non_trainable_weights(self)
keras.layers.wrappers.Wrapper.set_weights(self,weights)
keras.layers.wrappers.Wrapper.trainable(self)
keras.layers.wrappers.Wrapper.trainable(self,value)
keras.layers.wrappers.Wrapper.trainable_weights(self)
keras.layers.wrappers.Wrapper.updates(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/keras2.1.4/lib/python3.6/site-packages/keras/layers/merge.py----------------------------------------
A:keras.layers.merge.output_shape->list(input_shapes[0])
A:keras.layers.merge.batch_sizes->set(batch_sizes)
A:keras.layers.merge.input_ndims->list(map(K.ndim, inputs))
A:keras.layers.merge.max_ndim->max(input_ndims)
A:keras.layers.merge.x_ndim->K.ndim(x)
A:keras.layers.merge.x->K.expand_dims(x, 1)
A:keras.layers.merge.x_shape->K.shape(x)
A:keras.layers.merge.new_shape->K.concatenate([K.expand_dims(batch_size), y_shape[:y_ndim - 1]])
A:keras.layers.merge.x_transposed->K.reshape(x_transposed, new_shape)
A:keras.layers.merge.y->K.permute_dimensions(y, dims)
A:keras.layers.merge.y_ndim->K.ndim(y)
A:keras.layers.merge.y_shape->K.shape(y)
A:keras.layers.merge.output->K.batch_dot(x1, x2, axes)
A:keras.layers.merge.shape_set->set()
A:keras.layers.merge.concatenated->K.concatenate(masks, axis=self.axis)
A:keras.layers.merge.base_config->super(Dot, self).get_config()
A:keras.layers.merge.x1->K.l2_normalize(x1, axis=axes[0])
A:keras.layers.merge.x2->K.l2_normalize(x2, axis=axes[1])
A:keras.layers.merge.shape1->list(input_shape[0])
A:keras.layers.merge.shape2->list(input_shape[1])
keras.layers.Add(_Merge)
keras.layers.Add._merge_function(self,inputs)
keras.layers.Average(_Merge)
keras.layers.Average._merge_function(self,inputs)
keras.layers.Concatenate(self,axis=-1,**kwargs)
keras.layers.Concatenate._merge_function(self,inputs)
keras.layers.Concatenate.build(self,input_shape)
keras.layers.Concatenate.compute_mask(self,inputs,mask=None)
keras.layers.Concatenate.compute_output_shape(self,input_shape)
keras.layers.Concatenate.get_config(self)
keras.layers.Dot(self,axes,normalize=False,**kwargs)
keras.layers.Dot._merge_function(self,inputs)
keras.layers.Dot.build(self,input_shape)
keras.layers.Dot.compute_mask(self,inputs,mask=None)
keras.layers.Dot.compute_output_shape(self,input_shape)
keras.layers.Dot.get_config(self)
keras.layers.Maximum(_Merge)
keras.layers.Maximum._merge_function(self,inputs)
keras.layers.Minimum(_Merge)
keras.layers.Minimum._merge_function(self,inputs)
keras.layers.Multiply(_Merge)
keras.layers.Multiply._merge_function(self,inputs)
keras.layers.Subtract(_Merge)
keras.layers.Subtract._merge_function(self,inputs)
keras.layers.Subtract.build(self,input_shape)
keras.layers._Merge(self,**kwargs)
keras.layers._Merge._compute_elemwise_op_output_shape(self,shape1,shape2)
keras.layers._Merge._merge_function(self,inputs)
keras.layers._Merge.build(self,input_shape)
keras.layers._Merge.call(self,inputs)
keras.layers._Merge.compute_mask(self,inputs,mask=None)
keras.layers._Merge.compute_output_shape(self,input_shape)
keras.layers.add(inputs,**kwargs)
keras.layers.average(inputs,**kwargs)
keras.layers.concatenate(inputs,axis=-1,**kwargs)
keras.layers.dot(inputs,axes,normalize=False,**kwargs)
keras.layers.maximum(inputs,**kwargs)
keras.layers.merge.Add(_Merge)
keras.layers.merge.Add._merge_function(self,inputs)
keras.layers.merge.Average(_Merge)
keras.layers.merge.Average._merge_function(self,inputs)
keras.layers.merge.Concatenate(self,axis=-1,**kwargs)
keras.layers.merge.Concatenate.__init__(self,axis=-1,**kwargs)
keras.layers.merge.Concatenate._merge_function(self,inputs)
keras.layers.merge.Concatenate.build(self,input_shape)
keras.layers.merge.Concatenate.compute_mask(self,inputs,mask=None)
keras.layers.merge.Concatenate.compute_output_shape(self,input_shape)
keras.layers.merge.Concatenate.get_config(self)
keras.layers.merge.Dot(self,axes,normalize=False,**kwargs)
keras.layers.merge.Dot.__init__(self,axes,normalize=False,**kwargs)
keras.layers.merge.Dot._merge_function(self,inputs)
keras.layers.merge.Dot.build(self,input_shape)
keras.layers.merge.Dot.compute_mask(self,inputs,mask=None)
keras.layers.merge.Dot.compute_output_shape(self,input_shape)
keras.layers.merge.Dot.get_config(self)
keras.layers.merge.Maximum(_Merge)
keras.layers.merge.Maximum._merge_function(self,inputs)
keras.layers.merge.Minimum(_Merge)
keras.layers.merge.Minimum._merge_function(self,inputs)
keras.layers.merge.Multiply(_Merge)
keras.layers.merge.Multiply._merge_function(self,inputs)
keras.layers.merge.Subtract(_Merge)
keras.layers.merge.Subtract._merge_function(self,inputs)
keras.layers.merge.Subtract.build(self,input_shape)
keras.layers.merge._Merge(self,**kwargs)
keras.layers.merge._Merge.__init__(self,**kwargs)
keras.layers.merge._Merge._compute_elemwise_op_output_shape(self,shape1,shape2)
keras.layers.merge._Merge._merge_function(self,inputs)
keras.layers.merge._Merge.build(self,input_shape)
keras.layers.merge._Merge.call(self,inputs)
keras.layers.merge._Merge.compute_mask(self,inputs,mask=None)
keras.layers.merge._Merge.compute_output_shape(self,input_shape)
keras.layers.merge.add(inputs,**kwargs)
keras.layers.merge.average(inputs,**kwargs)
keras.layers.merge.concatenate(inputs,axis=-1,**kwargs)
keras.layers.merge.dot(inputs,axes,normalize=False,**kwargs)
keras.layers.merge.maximum(inputs,**kwargs)
keras.layers.merge.minimum(inputs,**kwargs)
keras.layers.merge.multiply(inputs,**kwargs)
keras.layers.merge.subtract(inputs,**kwargs)
keras.layers.minimum(inputs,**kwargs)
keras.layers.multiply(inputs,**kwargs)
keras.layers.subtract(inputs,**kwargs)

